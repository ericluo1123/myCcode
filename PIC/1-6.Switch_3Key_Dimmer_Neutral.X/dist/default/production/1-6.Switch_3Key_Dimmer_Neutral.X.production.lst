

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 20 16:39:45 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	intentry,global,class=CODE,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	dabs	1,0x7E,2
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  010C                     	;# 
   192  010D                     	;# 
   193  010E                     	;# 
   194  0116                     	;# 
   195  0117                     	;# 
   196  011D                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199  018E                     	;# 
   200  0191                     	;# 
   201  0191                     	;# 
   202  0192                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0197                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019C                     	;# 
   216  019C                     	;# 
   217  019D                     	;# 
   218  019E                     	;# 
   219  019F                     	;# 
   220  020D                     	;# 
   221  0210                     	;# 
   222  0211                     	;# 
   223  0211                     	;# 
   224  0212                     	;# 
   225  0212                     	;# 
   226  0213                     	;# 
   227  0213                     	;# 
   228  0214                     	;# 
   229  0214                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0216                     	;# 
   234  0216                     	;# 
   235  0217                     	;# 
   236  0217                     	;# 
   237  0291                     	;# 
   238  0291                     	;# 
   239  0292                     	;# 
   240  0293                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  0394                     	;# 
   246  0395                     	;# 
   247  0396                     	;# 
   248  0FE4                     	;# 
   249  0FE5                     	;# 
   250  0FE6                     	;# 
   251  0FE7                     	;# 
   252  0FE8                     	;# 
   253  0FE9                     	;# 
   254  0FEA                     	;# 
   255  0FEB                     	;# 
   256  0FED                     	;# 
   257  0FEE                     	;# 
   258  0FEF                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  000E                     	;# 
   274  0010                     	;# 
   275  0011                     	;# 
   276  0012                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  008C                     	;# 
   287  008D                     	;# 
   288  008E                     	;# 
   289  0090                     	;# 
   290  0091                     	;# 
   291  0092                     	;# 
   292  0095                     	;# 
   293  0096                     	;# 
   294  0097                     	;# 
   295  0099                     	;# 
   296  009A                     	;# 
   297  009B                     	;# 
   298  009B                     	;# 
   299  009C                     	;# 
   300  009D                     	;# 
   301  009E                     	;# 
   302  010C                     	;# 
   303  010D                     	;# 
   304  010E                     	;# 
   305  0116                     	;# 
   306  0117                     	;# 
   307  011D                     	;# 
   308  018C                     	;# 
   309  018D                     	;# 
   310  018E                     	;# 
   311  0191                     	;# 
   312  0191                     	;# 
   313  0192                     	;# 
   314  0193                     	;# 
   315  0193                     	;# 
   316  0194                     	;# 
   317  0195                     	;# 
   318  0196                     	;# 
   319  0197                     	;# 
   320  0199                     	;# 
   321  019A                     	;# 
   322  019B                     	;# 
   323  019B                     	;# 
   324  019B                     	;# 
   325  019B                     	;# 
   326  019C                     	;# 
   327  019C                     	;# 
   328  019D                     	;# 
   329  019E                     	;# 
   330  019F                     	;# 
   331  020D                     	;# 
   332  0210                     	;# 
   333  0211                     	;# 
   334  0211                     	;# 
   335  0212                     	;# 
   336  0212                     	;# 
   337  0213                     	;# 
   338  0213                     	;# 
   339  0214                     	;# 
   340  0214                     	;# 
   341  0215                     	;# 
   342  0215                     	;# 
   343  0215                     	;# 
   344  0216                     	;# 
   345  0216                     	;# 
   346  0217                     	;# 
   347  0217                     	;# 
   348  0291                     	;# 
   349  0291                     	;# 
   350  0292                     	;# 
   351  0293                     	;# 
   352  0298                     	;# 
   353  0298                     	;# 
   354  0299                     	;# 
   355  029A                     	;# 
   356  0394                     	;# 
   357  0395                     	;# 
   358  0396                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE9                     	;# 
   365  0FEA                     	;# 
   366  0FEB                     	;# 
   367  0FED                     	;# 
   368  0FEE                     	;# 
   369  0FEF                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000D                     	;# 
   384  000E                     	;# 
   385  0010                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0015                     	;# 
   389  0016                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001C                     	;# 
   397  008C                     	;# 
   398  008D                     	;# 
   399  008E                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  010C                     	;# 
   414  010D                     	;# 
   415  010E                     	;# 
   416  0116                     	;# 
   417  0117                     	;# 
   418  011D                     	;# 
   419  018C                     	;# 
   420  018D                     	;# 
   421  018E                     	;# 
   422  0191                     	;# 
   423  0191                     	;# 
   424  0192                     	;# 
   425  0193                     	;# 
   426  0193                     	;# 
   427  0194                     	;# 
   428  0195                     	;# 
   429  0196                     	;# 
   430  0197                     	;# 
   431  0199                     	;# 
   432  019A                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019C                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020D                     	;# 
   443  0210                     	;# 
   444  0211                     	;# 
   445  0211                     	;# 
   446  0212                     	;# 
   447  0212                     	;# 
   448  0213                     	;# 
   449  0213                     	;# 
   450  0214                     	;# 
   451  0214                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0215                     	;# 
   455  0216                     	;# 
   456  0216                     	;# 
   457  0217                     	;# 
   458  0217                     	;# 
   459  0291                     	;# 
   460  0291                     	;# 
   461  0292                     	;# 
   462  0293                     	;# 
   463  0298                     	;# 
   464  0298                     	;# 
   465  0299                     	;# 
   466  029A                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  0FE4                     	;# 
   471  0FE5                     	;# 
   472  0FE6                     	;# 
   473  0FE7                     	;# 
   474  0FE8                     	;# 
   475  0FE9                     	;# 
   476  0FEA                     	;# 
   477  0FEB                     	;# 
   478  0FED                     	;# 
   479  0FEE                     	;# 
   480  0FEF                     	;# 
   481  0000                     	;# 
   482  0001                     	;# 
   483  0002                     	;# 
   484  0003                     	;# 
   485  0004                     	;# 
   486  0005                     	;# 
   487  0006                     	;# 
   488  0007                     	;# 
   489  0008                     	;# 
   490  0009                     	;# 
   491  000A                     	;# 
   492  000B                     	;# 
   493  000C                     	;# 
   494  000D                     	;# 
   495  000E                     	;# 
   496  0010                     	;# 
   497  0011                     	;# 
   498  0012                     	;# 
   499  0015                     	;# 
   500  0016                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001C                     	;# 
   508  008C                     	;# 
   509  008D                     	;# 
   510  008E                     	;# 
   511  0090                     	;# 
   512  0091                     	;# 
   513  0092                     	;# 
   514  0095                     	;# 
   515  0096                     	;# 
   516  0097                     	;# 
   517  0099                     	;# 
   518  009A                     	;# 
   519  009B                     	;# 
   520  009B                     	;# 
   521  009C                     	;# 
   522  009D                     	;# 
   523  009E                     	;# 
   524  010C                     	;# 
   525  010D                     	;# 
   526  010E                     	;# 
   527  0116                     	;# 
   528  0117                     	;# 
   529  011D                     	;# 
   530  018C                     	;# 
   531  018D                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0194                     	;# 
   539  0195                     	;# 
   540  0196                     	;# 
   541  0197                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020D                     	;# 
   554  0210                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0298                     	;# 
   575  0298                     	;# 
   576  0299                     	;# 
   577  029A                     	;# 
   578  0394                     	;# 
   579  0395                     	;# 
   580  0396                     	;# 
   581  0FE4                     	;# 
   582  0FE5                     	;# 
   583  0FE6                     	;# 
   584  0FE7                     	;# 
   585  0FE8                     	;# 
   586  0FE9                     	;# 
   587  0FEA                     	;# 
   588  0FEB                     	;# 
   589  0FED                     	;# 
   590  0FEE                     	;# 
   591  0FEF                     	;# 
   592  0000                     	;# 
   593  0001                     	;# 
   594  0002                     	;# 
   595  0003                     	;# 
   596  0004                     	;# 
   597  0005                     	;# 
   598  0006                     	;# 
   599  0007                     	;# 
   600  0008                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000D                     	;# 
   606  000E                     	;# 
   607  0010                     	;# 
   608  0011                     	;# 
   609  0012                     	;# 
   610  0015                     	;# 
   611  0016                     	;# 
   612  0016                     	;# 
   613  0017                     	;# 
   614  0018                     	;# 
   615  0019                     	;# 
   616  001A                     	;# 
   617  001B                     	;# 
   618  001C                     	;# 
   619  008C                     	;# 
   620  008D                     	;# 
   621  008E                     	;# 
   622  0090                     	;# 
   623  0091                     	;# 
   624  0092                     	;# 
   625  0095                     	;# 
   626  0096                     	;# 
   627  0097                     	;# 
   628  0099                     	;# 
   629  009A                     	;# 
   630  009B                     	;# 
   631  009B                     	;# 
   632  009C                     	;# 
   633  009D                     	;# 
   634  009E                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010E                     	;# 
   638  0116                     	;# 
   639  0117                     	;# 
   640  011D                     	;# 
   641  018C                     	;# 
   642  018D                     	;# 
   643  018E                     	;# 
   644  0191                     	;# 
   645  0191                     	;# 
   646  0192                     	;# 
   647  0193                     	;# 
   648  0193                     	;# 
   649  0194                     	;# 
   650  0195                     	;# 
   651  0196                     	;# 
   652  0197                     	;# 
   653  0199                     	;# 
   654  019A                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019D                     	;# 
   662  019E                     	;# 
   663  019F                     	;# 
   664  020D                     	;# 
   665  0210                     	;# 
   666  0211                     	;# 
   667  0211                     	;# 
   668  0212                     	;# 
   669  0212                     	;# 
   670  0213                     	;# 
   671  0213                     	;# 
   672  0214                     	;# 
   673  0214                     	;# 
   674  0215                     	;# 
   675  0215                     	;# 
   676  0215                     	;# 
   677  0216                     	;# 
   678  0216                     	;# 
   679  0217                     	;# 
   680  0217                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  0394                     	;# 
   690  0395                     	;# 
   691  0396                     	;# 
   692  0FE4                     	;# 
   693  0FE5                     	;# 
   694  0FE6                     	;# 
   695  0FE7                     	;# 
   696  0FE8                     	;# 
   697  0FE9                     	;# 
   698  0FEA                     	;# 
   699  0FEB                     	;# 
   700  0FED                     	;# 
   701  0FEE                     	;# 
   702  0FEF                     	;# 
   703  0000                     	;# 
   704  0001                     	;# 
   705  0002                     	;# 
   706  0003                     	;# 
   707  0004                     	;# 
   708  0005                     	;# 
   709  0006                     	;# 
   710  0007                     	;# 
   711  0008                     	;# 
   712  0009                     	;# 
   713  000A                     	;# 
   714  000B                     	;# 
   715  000C                     	;# 
   716  000D                     	;# 
   717  000E                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0015                     	;# 
   722  0016                     	;# 
   723  0016                     	;# 
   724  0017                     	;# 
   725  0018                     	;# 
   726  0019                     	;# 
   727  001A                     	;# 
   728  001B                     	;# 
   729  001C                     	;# 
   730  008C                     	;# 
   731  008D                     	;# 
   732  008E                     	;# 
   733  0090                     	;# 
   734  0091                     	;# 
   735  0092                     	;# 
   736  0095                     	;# 
   737  0096                     	;# 
   738  0097                     	;# 
   739  0099                     	;# 
   740  009A                     	;# 
   741  009B                     	;# 
   742  009B                     	;# 
   743  009C                     	;# 
   744  009D                     	;# 
   745  009E                     	;# 
   746  010C                     	;# 
   747  010D                     	;# 
   748  010E                     	;# 
   749  0116                     	;# 
   750  0117                     	;# 
   751  011D                     	;# 
   752  018C                     	;# 
   753  018D                     	;# 
   754  018E                     	;# 
   755  0191                     	;# 
   756  0191                     	;# 
   757  0192                     	;# 
   758  0193                     	;# 
   759  0193                     	;# 
   760  0194                     	;# 
   761  0195                     	;# 
   762  0196                     	;# 
   763  0197                     	;# 
   764  0199                     	;# 
   765  019A                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019C                     	;# 
   771  019C                     	;# 
   772  019D                     	;# 
   773  019E                     	;# 
   774  019F                     	;# 
   775  020D                     	;# 
   776  0210                     	;# 
   777  0211                     	;# 
   778  0211                     	;# 
   779  0212                     	;# 
   780  0212                     	;# 
   781  0213                     	;# 
   782  0213                     	;# 
   783  0214                     	;# 
   784  0214                     	;# 
   785  0215                     	;# 
   786  0215                     	;# 
   787  0215                     	;# 
   788  0216                     	;# 
   789  0216                     	;# 
   790  0217                     	;# 
   791  0217                     	;# 
   792  0291                     	;# 
   793  0291                     	;# 
   794  0292                     	;# 
   795  0293                     	;# 
   796  0298                     	;# 
   797  0298                     	;# 
   798  0299                     	;# 
   799  029A                     	;# 
   800  0394                     	;# 
   801  0395                     	;# 
   802  0396                     	;# 
   803  0FE4                     	;# 
   804  0FE5                     	;# 
   805  0FE6                     	;# 
   806  0FE7                     	;# 
   807  0FE8                     	;# 
   808  0FE9                     	;# 
   809  0FEA                     	;# 
   810  0FEB                     	;# 
   811  0FED                     	;# 
   812  0FEE                     	;# 
   813  0FEF                     	;# 
   814  0000                     	;# 
   815  0001                     	;# 
   816  0002                     	;# 
   817  0003                     	;# 
   818  0004                     	;# 
   819  0005                     	;# 
   820  0006                     	;# 
   821  0007                     	;# 
   822  0008                     	;# 
   823  0009                     	;# 
   824  000A                     	;# 
   825  000B                     	;# 
   826  000C                     	;# 
   827  000D                     	;# 
   828  000E                     	;# 
   829  0010                     	;# 
   830  0011                     	;# 
   831  0012                     	;# 
   832  0015                     	;# 
   833  0016                     	;# 
   834  0016                     	;# 
   835  0017                     	;# 
   836  0018                     	;# 
   837  0019                     	;# 
   838  001A                     	;# 
   839  001B                     	;# 
   840  001C                     	;# 
   841  008C                     	;# 
   842  008D                     	;# 
   843  008E                     	;# 
   844  0090                     	;# 
   845  0091                     	;# 
   846  0092                     	;# 
   847  0095                     	;# 
   848  0096                     	;# 
   849  0097                     	;# 
   850  0099                     	;# 
   851  009A                     	;# 
   852  009B                     	;# 
   853  009B                     	;# 
   854  009C                     	;# 
   855  009D                     	;# 
   856  009E                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  0116                     	;# 
   861  0117                     	;# 
   862  011D                     	;# 
   863  018C                     	;# 
   864  018D                     	;# 
   865  018E                     	;# 
   866  0191                     	;# 
   867  0191                     	;# 
   868  0192                     	;# 
   869  0193                     	;# 
   870  0193                     	;# 
   871  0194                     	;# 
   872  0195                     	;# 
   873  0196                     	;# 
   874  0197                     	;# 
   875  0199                     	;# 
   876  019A                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019C                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019E                     	;# 
   885  019F                     	;# 
   886  020D                     	;# 
   887  0210                     	;# 
   888  0211                     	;# 
   889  0211                     	;# 
   890  0212                     	;# 
   891  0212                     	;# 
   892  0213                     	;# 
   893  0213                     	;# 
   894  0214                     	;# 
   895  0214                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0216                     	;# 
   900  0216                     	;# 
   901  0217                     	;# 
   902  0217                     	;# 
   903  0291                     	;# 
   904  0291                     	;# 
   905  0292                     	;# 
   906  0293                     	;# 
   907  0298                     	;# 
   908  0298                     	;# 
   909  0299                     	;# 
   910  029A                     	;# 
   911  0394                     	;# 
   912  0395                     	;# 
   913  0396                     	;# 
   914  0FE4                     	;# 
   915  0FE5                     	;# 
   916  0FE6                     	;# 
   917  0FE7                     	;# 
   918  0FE8                     	;# 
   919  0FE9                     	;# 
   920  0FEA                     	;# 
   921  0FEB                     	;# 
   922  0FED                     	;# 
   923  0FEE                     	;# 
   924  0FEF                     	;# 
   925  0000                     	;# 
   926  0001                     	;# 
   927  0002                     	;# 
   928  0003                     	;# 
   929  0004                     	;# 
   930  0005                     	;# 
   931  0006                     	;# 
   932  0007                     	;# 
   933  0008                     	;# 
   934  0009                     	;# 
   935  000A                     	;# 
   936  000B                     	;# 
   937  000C                     	;# 
   938  000D                     	;# 
   939  000E                     	;# 
   940  0010                     	;# 
   941  0011                     	;# 
   942  0012                     	;# 
   943  0015                     	;# 
   944  0016                     	;# 
   945  0016                     	;# 
   946  0017                     	;# 
   947  0018                     	;# 
   948  0019                     	;# 
   949  001A                     	;# 
   950  001B                     	;# 
   951  001C                     	;# 
   952  008C                     	;# 
   953  008D                     	;# 
   954  008E                     	;# 
   955  0090                     	;# 
   956  0091                     	;# 
   957  0092                     	;# 
   958  0095                     	;# 
   959  0096                     	;# 
   960  0097                     	;# 
   961  0099                     	;# 
   962  009A                     	;# 
   963  009B                     	;# 
   964  009B                     	;# 
   965  009C                     	;# 
   966  009D                     	;# 
   967  009E                     	;# 
   968  010C                     	;# 
   969  010D                     	;# 
   970  010E                     	;# 
   971  0116                     	;# 
   972  0117                     	;# 
   973  011D                     	;# 
   974  018C                     	;# 
   975  018D                     	;# 
   976  018E                     	;# 
   977  0191                     	;# 
   978  0191                     	;# 
   979  0192                     	;# 
   980  0193                     	;# 
   981  0193                     	;# 
   982  0194                     	;# 
   983  0195                     	;# 
   984  0196                     	;# 
   985  0197                     	;# 
   986  0199                     	;# 
   987  019A                     	;# 
   988  019B                     	;# 
   989  019B                     	;# 
   990  019B                     	;# 
   991  019B                     	;# 
   992  019C                     	;# 
   993  019C                     	;# 
   994  019D                     	;# 
   995  019E                     	;# 
   996  019F                     	;# 
   997  020D                     	;# 
   998  0210                     	;# 
   999  0211                     	;# 
  1000  0211                     	;# 
  1001  0212                     	;# 
  1002  0212                     	;# 
  1003  0213                     	;# 
  1004  0213                     	;# 
  1005  0214                     	;# 
  1006  0214                     	;# 
  1007  0215                     	;# 
  1008  0215                     	;# 
  1009  0215                     	;# 
  1010  0216                     	;# 
  1011  0216                     	;# 
  1012  0217                     	;# 
  1013  0217                     	;# 
  1014  0291                     	;# 
  1015  0291                     	;# 
  1016  0292                     	;# 
  1017  0293                     	;# 
  1018  0298                     	;# 
  1019  0298                     	;# 
  1020  0299                     	;# 
  1021  029A                     	;# 
  1022  0394                     	;# 
  1023  0395                     	;# 
  1024  0396                     	;# 
  1025  0FE4                     	;# 
  1026  0FE5                     	;# 
  1027  0FE6                     	;# 
  1028  0FE7                     	;# 
  1029  0FE8                     	;# 
  1030  0FE9                     	;# 
  1031  0FEA                     	;# 
  1032  0FEB                     	;# 
  1033  0FED                     	;# 
  1034  0FEE                     	;# 
  1035  0FEF                     	;# 
  1036  0000                     	;# 
  1037  0001                     	;# 
  1038  0002                     	;# 
  1039  0003                     	;# 
  1040  0004                     	;# 
  1041  0005                     	;# 
  1042  0006                     	;# 
  1043  0007                     	;# 
  1044  0008                     	;# 
  1045  0009                     	;# 
  1046  000A                     	;# 
  1047  000B                     	;# 
  1048  000C                     	;# 
  1049  000D                     	;# 
  1050  000E                     	;# 
  1051  0010                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  008C                     	;# 
  1064  008D                     	;# 
  1065  008E                     	;# 
  1066  0090                     	;# 
  1067  0091                     	;# 
  1068  0092                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  010C                     	;# 
  1080  010D                     	;# 
  1081  010E                     	;# 
  1082  0116                     	;# 
  1083  0117                     	;# 
  1084  011D                     	;# 
  1085  018C                     	;# 
  1086  018D                     	;# 
  1087  018E                     	;# 
  1088  0191                     	;# 
  1089  0191                     	;# 
  1090  0192                     	;# 
  1091  0193                     	;# 
  1092  0193                     	;# 
  1093  0194                     	;# 
  1094  0195                     	;# 
  1095  0196                     	;# 
  1096  0197                     	;# 
  1097  0199                     	;# 
  1098  019A                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019C                     	;# 
  1104  019C                     	;# 
  1105  019D                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  020D                     	;# 
  1109  0210                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0216                     	;# 
  1122  0216                     	;# 
  1123  0217                     	;# 
  1124  0217                     	;# 
  1125  0291                     	;# 
  1126  0291                     	;# 
  1127  0292                     	;# 
  1128  0293                     	;# 
  1129  0298                     	;# 
  1130  0298                     	;# 
  1131  0299                     	;# 
  1132  029A                     	;# 
  1133  0394                     	;# 
  1134  0395                     	;# 
  1135  0396                     	;# 
  1136  0FE4                     	;# 
  1137  0FE5                     	;# 
  1138  0FE6                     	;# 
  1139  0FE7                     	;# 
  1140  0FE8                     	;# 
  1141  0FE9                     	;# 
  1142  0FEA                     	;# 
  1143  0FEB                     	;# 
  1144  0FED                     	;# 
  1145  0FEE                     	;# 
  1146  0FEF                     	;# 
  1147  0000                     	;# 
  1148  0001                     	;# 
  1149  0002                     	;# 
  1150  0003                     	;# 
  1151  0004                     	;# 
  1152  0005                     	;# 
  1153  0006                     	;# 
  1154  0007                     	;# 
  1155  0008                     	;# 
  1156  0009                     	;# 
  1157  000A                     	;# 
  1158  000B                     	;# 
  1159  000C                     	;# 
  1160  000D                     	;# 
  1161  000E                     	;# 
  1162  0010                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0015                     	;# 
  1166  0016                     	;# 
  1167  0016                     	;# 
  1168  0017                     	;# 
  1169  0018                     	;# 
  1170  0019                     	;# 
  1171  001A                     	;# 
  1172  001B                     	;# 
  1173  001C                     	;# 
  1174  008C                     	;# 
  1175  008D                     	;# 
  1176  008E                     	;# 
  1177  0090                     	;# 
  1178  0091                     	;# 
  1179  0092                     	;# 
  1180  0095                     	;# 
  1181  0096                     	;# 
  1182  0097                     	;# 
  1183  0099                     	;# 
  1184  009A                     	;# 
  1185  009B                     	;# 
  1186  009B                     	;# 
  1187  009C                     	;# 
  1188  009D                     	;# 
  1189  009E                     	;# 
  1190  010C                     	;# 
  1191  010D                     	;# 
  1192  010E                     	;# 
  1193  0116                     	;# 
  1194  0117                     	;# 
  1195  011D                     	;# 
  1196  018C                     	;# 
  1197  018D                     	;# 
  1198  018E                     	;# 
  1199  0191                     	;# 
  1200  0191                     	;# 
  1201  0192                     	;# 
  1202  0193                     	;# 
  1203  0193                     	;# 
  1204  0194                     	;# 
  1205  0195                     	;# 
  1206  0196                     	;# 
  1207  0197                     	;# 
  1208  0199                     	;# 
  1209  019A                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019B                     	;# 
  1213  019B                     	;# 
  1214  019C                     	;# 
  1215  019C                     	;# 
  1216  019D                     	;# 
  1217  019E                     	;# 
  1218  019F                     	;# 
  1219  020D                     	;# 
  1220  0210                     	;# 
  1221  0211                     	;# 
  1222  0211                     	;# 
  1223  0212                     	;# 
  1224  0212                     	;# 
  1225  0213                     	;# 
  1226  0213                     	;# 
  1227  0214                     	;# 
  1228  0214                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0215                     	;# 
  1232  0216                     	;# 
  1233  0216                     	;# 
  1234  0217                     	;# 
  1235  0217                     	;# 
  1236  0291                     	;# 
  1237  0291                     	;# 
  1238  0292                     	;# 
  1239  0293                     	;# 
  1240  0298                     	;# 
  1241  0298                     	;# 
  1242  0299                     	;# 
  1243  029A                     	;# 
  1244  0394                     	;# 
  1245  0395                     	;# 
  1246  0396                     	;# 
  1247  0FE4                     	;# 
  1248  0FE5                     	;# 
  1249  0FE6                     	;# 
  1250  0FE7                     	;# 
  1251  0FE8                     	;# 
  1252  0FE9                     	;# 
  1253  0FEA                     	;# 
  1254  0FEB                     	;# 
  1255  0FED                     	;# 
  1256  0FEE                     	;# 
  1257  0FEF                     	;# 
  1258  0000                     	;# 
  1259  0001                     	;# 
  1260  0002                     	;# 
  1261  0003                     	;# 
  1262  0004                     	;# 
  1263  0005                     	;# 
  1264  0006                     	;# 
  1265  0007                     	;# 
  1266  0008                     	;# 
  1267  0009                     	;# 
  1268  000A                     	;# 
  1269  000B                     	;# 
  1270  000C                     	;# 
  1271  000D                     	;# 
  1272  000E                     	;# 
  1273  0010                     	;# 
  1274  0011                     	;# 
  1275  0012                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0016                     	;# 
  1279  0017                     	;# 
  1280  0018                     	;# 
  1281  0019                     	;# 
  1282  001A                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  008C                     	;# 
  1286  008D                     	;# 
  1287  008E                     	;# 
  1288  0090                     	;# 
  1289  0091                     	;# 
  1290  0092                     	;# 
  1291  0095                     	;# 
  1292  0096                     	;# 
  1293  0097                     	;# 
  1294  0099                     	;# 
  1295  009A                     	;# 
  1296  009B                     	;# 
  1297  009B                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009E                     	;# 
  1301  010C                     	;# 
  1302  010D                     	;# 
  1303  010E                     	;# 
  1304  0116                     	;# 
  1305  0117                     	;# 
  1306  011D                     	;# 
  1307  018C                     	;# 
  1308  018D                     	;# 
  1309  018E                     	;# 
  1310  0191                     	;# 
  1311  0191                     	;# 
  1312  0192                     	;# 
  1313  0193                     	;# 
  1314  0193                     	;# 
  1315  0194                     	;# 
  1316  0195                     	;# 
  1317  0196                     	;# 
  1318  0197                     	;# 
  1319  0199                     	;# 
  1320  019A                     	;# 
  1321  019B                     	;# 
  1322  019B                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019C                     	;# 
  1326  019C                     	;# 
  1327  019D                     	;# 
  1328  019E                     	;# 
  1329  019F                     	;# 
  1330  020D                     	;# 
  1331  0210                     	;# 
  1332  0211                     	;# 
  1333  0211                     	;# 
  1334  0212                     	;# 
  1335  0212                     	;# 
  1336  0213                     	;# 
  1337  0213                     	;# 
  1338  0214                     	;# 
  1339  0214                     	;# 
  1340  0215                     	;# 
  1341  0215                     	;# 
  1342  0215                     	;# 
  1343  0216                     	;# 
  1344  0216                     	;# 
  1345  0217                     	;# 
  1346  0217                     	;# 
  1347  0291                     	;# 
  1348  0291                     	;# 
  1349  0292                     	;# 
  1350  0293                     	;# 
  1351  0298                     	;# 
  1352  0298                     	;# 
  1353  0299                     	;# 
  1354  029A                     	;# 
  1355  0394                     	;# 
  1356  0395                     	;# 
  1357  0396                     	;# 
  1358  0FE4                     	;# 
  1359  0FE5                     	;# 
  1360  0FE6                     	;# 
  1361  0FE7                     	;# 
  1362  0FE8                     	;# 
  1363  0FE9                     	;# 
  1364  0FEA                     	;# 
  1365  0FEB                     	;# 
  1366  0FED                     	;# 
  1367  0FEE                     	;# 
  1368  0FEF                     	;# 
  1369  0000                     	;# 
  1370  0001                     	;# 
  1371  0002                     	;# 
  1372  0003                     	;# 
  1373  0004                     	;# 
  1374  0005                     	;# 
  1375  0006                     	;# 
  1376  0007                     	;# 
  1377  0008                     	;# 
  1378  0009                     	;# 
  1379  000A                     	;# 
  1380  000B                     	;# 
  1381  000C                     	;# 
  1382  000D                     	;# 
  1383  000E                     	;# 
  1384  0010                     	;# 
  1385  0011                     	;# 
  1386  0012                     	;# 
  1387  0015                     	;# 
  1388  0016                     	;# 
  1389  0016                     	;# 
  1390  0017                     	;# 
  1391  0018                     	;# 
  1392  0019                     	;# 
  1393  001A                     	;# 
  1394  001B                     	;# 
  1395  001C                     	;# 
  1396  008C                     	;# 
  1397  008D                     	;# 
  1398  008E                     	;# 
  1399  0090                     	;# 
  1400  0091                     	;# 
  1401  0092                     	;# 
  1402  0095                     	;# 
  1403  0096                     	;# 
  1404  0097                     	;# 
  1405  0099                     	;# 
  1406  009A                     	;# 
  1407  009B                     	;# 
  1408  009B                     	;# 
  1409  009C                     	;# 
  1410  009D                     	;# 
  1411  009E                     	;# 
  1412  010C                     	;# 
  1413  010D                     	;# 
  1414  010E                     	;# 
  1415  0116                     	;# 
  1416  0117                     	;# 
  1417  011D                     	;# 
  1418  018C                     	;# 
  1419  018D                     	;# 
  1420  018E                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0194                     	;# 
  1427  0195                     	;# 
  1428  0196                     	;# 
  1429  0197                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019C                     	;# 
  1437  019C                     	;# 
  1438  019D                     	;# 
  1439  019E                     	;# 
  1440  019F                     	;# 
  1441  020D                     	;# 
  1442  0210                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0216                     	;# 
  1455  0216                     	;# 
  1456  0217                     	;# 
  1457  0217                     	;# 
  1458  0291                     	;# 
  1459  0291                     	;# 
  1460  0292                     	;# 
  1461  0293                     	;# 
  1462  0298                     	;# 
  1463  0298                     	;# 
  1464  0299                     	;# 
  1465  029A                     	;# 
  1466  0394                     	;# 
  1467  0395                     	;# 
  1468  0396                     	;# 
  1469  0FE4                     	;# 
  1470  0FE5                     	;# 
  1471  0FE6                     	;# 
  1472  0FE7                     	;# 
  1473  0FE8                     	;# 
  1474  0FE9                     	;# 
  1475  0FEA                     	;# 
  1476  0FEB                     	;# 
  1477  0FED                     	;# 
  1478  0FEE                     	;# 
  1479  0FEF                     	;# 
  1480  0000                     	;# 
  1481  0001                     	;# 
  1482  0002                     	;# 
  1483  0003                     	;# 
  1484  0004                     	;# 
  1485  0005                     	;# 
  1486  0006                     	;# 
  1487  0007                     	;# 
  1488  0008                     	;# 
  1489  0009                     	;# 
  1490  000A                     	;# 
  1491  000B                     	;# 
  1492  000C                     	;# 
  1493  000D                     	;# 
  1494  000E                     	;# 
  1495  0010                     	;# 
  1496  0011                     	;# 
  1497  0012                     	;# 
  1498  0015                     	;# 
  1499  0016                     	;# 
  1500  0016                     	;# 
  1501  0017                     	;# 
  1502  0018                     	;# 
  1503  0019                     	;# 
  1504  001A                     	;# 
  1505  001B                     	;# 
  1506  001C                     	;# 
  1507  008C                     	;# 
  1508  008D                     	;# 
  1509  008E                     	;# 
  1510  0090                     	;# 
  1511  0091                     	;# 
  1512  0092                     	;# 
  1513  0095                     	;# 
  1514  0096                     	;# 
  1515  0097                     	;# 
  1516  0099                     	;# 
  1517  009A                     	;# 
  1518  009B                     	;# 
  1519  009B                     	;# 
  1520  009C                     	;# 
  1521  009D                     	;# 
  1522  009E                     	;# 
  1523  010C                     	;# 
  1524  010D                     	;# 
  1525  010E                     	;# 
  1526  0116                     	;# 
  1527  0117                     	;# 
  1528  011D                     	;# 
  1529  018C                     	;# 
  1530  018D                     	;# 
  1531  018E                     	;# 
  1532  0191                     	;# 
  1533  0191                     	;# 
  1534  0192                     	;# 
  1535  0193                     	;# 
  1536  0193                     	;# 
  1537  0194                     	;# 
  1538  0195                     	;# 
  1539  0196                     	;# 
  1540  0197                     	;# 
  1541  0199                     	;# 
  1542  019A                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019B                     	;# 
  1547  019C                     	;# 
  1548  019C                     	;# 
  1549  019D                     	;# 
  1550  019E                     	;# 
  1551  019F                     	;# 
  1552  020D                     	;# 
  1553  0210                     	;# 
  1554  0211                     	;# 
  1555  0211                     	;# 
  1556  0212                     	;# 
  1557  0212                     	;# 
  1558  0213                     	;# 
  1559  0213                     	;# 
  1560  0214                     	;# 
  1561  0214                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0216                     	;# 
  1566  0216                     	;# 
  1567  0217                     	;# 
  1568  0217                     	;# 
  1569  0291                     	;# 
  1570  0291                     	;# 
  1571  0292                     	;# 
  1572  0293                     	;# 
  1573  0298                     	;# 
  1574  0298                     	;# 
  1575  0299                     	;# 
  1576  029A                     	;# 
  1577  0394                     	;# 
  1578  0395                     	;# 
  1579  0396                     	;# 
  1580  0FE4                     	;# 
  1581  0FE5                     	;# 
  1582  0FE6                     	;# 
  1583  0FE7                     	;# 
  1584  0FE8                     	;# 
  1585  0FE9                     	;# 
  1586  0FEA                     	;# 
  1587  0FEB                     	;# 
  1588  0FED                     	;# 
  1589  0FEE                     	;# 
  1590  0FEF                     	;# 
  1591  0000                     	;# 
  1592  0001                     	;# 
  1593  0002                     	;# 
  1594  0003                     	;# 
  1595  0004                     	;# 
  1596  0005                     	;# 
  1597  0006                     	;# 
  1598  0007                     	;# 
  1599  0008                     	;# 
  1600  0009                     	;# 
  1601  000A                     	;# 
  1602  000B                     	;# 
  1603  000C                     	;# 
  1604  000D                     	;# 
  1605  000E                     	;# 
  1606  0010                     	;# 
  1607  0011                     	;# 
  1608  0012                     	;# 
  1609  0015                     	;# 
  1610  0016                     	;# 
  1611  0016                     	;# 
  1612  0017                     	;# 
  1613  0018                     	;# 
  1614  0019                     	;# 
  1615  001A                     	;# 
  1616  001B                     	;# 
  1617  001C                     	;# 
  1618  008C                     	;# 
  1619  008D                     	;# 
  1620  008E                     	;# 
  1621  0090                     	;# 
  1622  0091                     	;# 
  1623  0092                     	;# 
  1624  0095                     	;# 
  1625  0096                     	;# 
  1626  0097                     	;# 
  1627  0099                     	;# 
  1628  009A                     	;# 
  1629  009B                     	;# 
  1630  009B                     	;# 
  1631  009C                     	;# 
  1632  009D                     	;# 
  1633  009E                     	;# 
  1634  010C                     	;# 
  1635  010D                     	;# 
  1636  010E                     	;# 
  1637  0116                     	;# 
  1638  0117                     	;# 
  1639  011D                     	;# 
  1640  018C                     	;# 
  1641  018D                     	;# 
  1642  018E                     	;# 
  1643  0191                     	;# 
  1644  0191                     	;# 
  1645  0192                     	;# 
  1646  0193                     	;# 
  1647  0193                     	;# 
  1648  0194                     	;# 
  1649  0195                     	;# 
  1650  0196                     	;# 
  1651  0197                     	;# 
  1652  0199                     	;# 
  1653  019A                     	;# 
  1654  019B                     	;# 
  1655  019B                     	;# 
  1656  019B                     	;# 
  1657  019B                     	;# 
  1658  019C                     	;# 
  1659  019C                     	;# 
  1660  019D                     	;# 
  1661  019E                     	;# 
  1662  019F                     	;# 
  1663  020D                     	;# 
  1664  0210                     	;# 
  1665  0211                     	;# 
  1666  0211                     	;# 
  1667  0212                     	;# 
  1668  0212                     	;# 
  1669  0213                     	;# 
  1670  0213                     	;# 
  1671  0214                     	;# 
  1672  0214                     	;# 
  1673  0215                     	;# 
  1674  0215                     	;# 
  1675  0215                     	;# 
  1676  0216                     	;# 
  1677  0216                     	;# 
  1678  0217                     	;# 
  1679  0217                     	;# 
  1680  0291                     	;# 
  1681  0291                     	;# 
  1682  0292                     	;# 
  1683  0293                     	;# 
  1684  0298                     	;# 
  1685  0298                     	;# 
  1686  0299                     	;# 
  1687  029A                     	;# 
  1688  0394                     	;# 
  1689  0395                     	;# 
  1690  0396                     	;# 
  1691  0FE4                     	;# 
  1692  0FE5                     	;# 
  1693  0FE6                     	;# 
  1694  0FE7                     	;# 
  1695  0FE8                     	;# 
  1696  0FE9                     	;# 
  1697  0FEA                     	;# 
  1698  0FEB                     	;# 
  1699  0FED                     	;# 
  1700  0FEE                     	;# 
  1701  0FEF                     	;# 
  1702  0000                     	;# 
  1703  0001                     	;# 
  1704  0002                     	;# 
  1705  0003                     	;# 
  1706  0004                     	;# 
  1707  0005                     	;# 
  1708  0006                     	;# 
  1709  0007                     	;# 
  1710  0008                     	;# 
  1711  0009                     	;# 
  1712  000A                     	;# 
  1713  000B                     	;# 
  1714  000C                     	;# 
  1715  000D                     	;# 
  1716  000E                     	;# 
  1717  0010                     	;# 
  1718  0011                     	;# 
  1719  0012                     	;# 
  1720  0015                     	;# 
  1721  0016                     	;# 
  1722  0016                     	;# 
  1723  0017                     	;# 
  1724  0018                     	;# 
  1725  0019                     	;# 
  1726  001A                     	;# 
  1727  001B                     	;# 
  1728  001C                     	;# 
  1729  008C                     	;# 
  1730  008D                     	;# 
  1731  008E                     	;# 
  1732  0090                     	;# 
  1733  0091                     	;# 
  1734  0092                     	;# 
  1735  0095                     	;# 
  1736  0096                     	;# 
  1737  0097                     	;# 
  1738  0099                     	;# 
  1739  009A                     	;# 
  1740  009B                     	;# 
  1741  009B                     	;# 
  1742  009C                     	;# 
  1743  009D                     	;# 
  1744  009E                     	;# 
  1745  010C                     	;# 
  1746  010D                     	;# 
  1747  010E                     	;# 
  1748  0116                     	;# 
  1749  0117                     	;# 
  1750  011D                     	;# 
  1751  018C                     	;# 
  1752  018D                     	;# 
  1753  018E                     	;# 
  1754  0191                     	;# 
  1755  0191                     	;# 
  1756  0192                     	;# 
  1757  0193                     	;# 
  1758  0193                     	;# 
  1759  0194                     	;# 
  1760  0195                     	;# 
  1761  0196                     	;# 
  1762  0197                     	;# 
  1763  0199                     	;# 
  1764  019A                     	;# 
  1765  019B                     	;# 
  1766  019B                     	;# 
  1767  019B                     	;# 
  1768  019B                     	;# 
  1769  019C                     	;# 
  1770  019C                     	;# 
  1771  019D                     	;# 
  1772  019E                     	;# 
  1773  019F                     	;# 
  1774  020D                     	;# 
  1775  0210                     	;# 
  1776  0211                     	;# 
  1777  0211                     	;# 
  1778  0212                     	;# 
  1779  0212                     	;# 
  1780  0213                     	;# 
  1781  0213                     	;# 
  1782  0214                     	;# 
  1783  0214                     	;# 
  1784  0215                     	;# 
  1785  0215                     	;# 
  1786  0215                     	;# 
  1787  0216                     	;# 
  1788  0216                     	;# 
  1789  0217                     	;# 
  1790  0217                     	;# 
  1791  0291                     	;# 
  1792  0291                     	;# 
  1793  0292                     	;# 
  1794  0293                     	;# 
  1795  0298                     	;# 
  1796  0298                     	;# 
  1797  0299                     	;# 
  1798  029A                     	;# 
  1799  0394                     	;# 
  1800  0395                     	;# 
  1801  0396                     	;# 
  1802  0FE4                     	;# 
  1803  0FE5                     	;# 
  1804  0FE6                     	;# 
  1805  0FE7                     	;# 
  1806  0FE8                     	;# 
  1807  0FE9                     	;# 
  1808  0FEA                     	;# 
  1809  0FEB                     	;# 
  1810  0FED                     	;# 
  1811  0FEE                     	;# 
  1812  0FEF                     	;# 
  1813  0000                     	;# 
  1814  0001                     	;# 
  1815  0002                     	;# 
  1816  0003                     	;# 
  1817  0004                     	;# 
  1818  0005                     	;# 
  1819  0006                     	;# 
  1820  0007                     	;# 
  1821  0008                     	;# 
  1822  0009                     	;# 
  1823  000A                     	;# 
  1824  000B                     	;# 
  1825  000C                     	;# 
  1826  000D                     	;# 
  1827  000E                     	;# 
  1828  0010                     	;# 
  1829  0011                     	;# 
  1830  0012                     	;# 
  1831  0015                     	;# 
  1832  0016                     	;# 
  1833  0016                     	;# 
  1834  0017                     	;# 
  1835  0018                     	;# 
  1836  0019                     	;# 
  1837  001A                     	;# 
  1838  001B                     	;# 
  1839  001C                     	;# 
  1840  008C                     	;# 
  1841  008D                     	;# 
  1842  008E                     	;# 
  1843  0090                     	;# 
  1844  0091                     	;# 
  1845  0092                     	;# 
  1846  0095                     	;# 
  1847  0096                     	;# 
  1848  0097                     	;# 
  1849  0099                     	;# 
  1850  009A                     	;# 
  1851  009B                     	;# 
  1852  009B                     	;# 
  1853  009C                     	;# 
  1854  009D                     	;# 
  1855  009E                     	;# 
  1856  010C                     	;# 
  1857  010D                     	;# 
  1858  010E                     	;# 
  1859  0116                     	;# 
  1860  0117                     	;# 
  1861  011D                     	;# 
  1862  018C                     	;# 
  1863  018D                     	;# 
  1864  018E                     	;# 
  1865  0191                     	;# 
  1866  0191                     	;# 
  1867  0192                     	;# 
  1868  0193                     	;# 
  1869  0193                     	;# 
  1870  0194                     	;# 
  1871  0195                     	;# 
  1872  0196                     	;# 
  1873  0197                     	;# 
  1874  0199                     	;# 
  1875  019A                     	;# 
  1876  019B                     	;# 
  1877  019B                     	;# 
  1878  019B                     	;# 
  1879  019B                     	;# 
  1880  019C                     	;# 
  1881  019C                     	;# 
  1882  019D                     	;# 
  1883  019E                     	;# 
  1884  019F                     	;# 
  1885  020D                     	;# 
  1886  0210                     	;# 
  1887  0211                     	;# 
  1888  0211                     	;# 
  1889  0212                     	;# 
  1890  0212                     	;# 
  1891  0213                     	;# 
  1892  0213                     	;# 
  1893  0214                     	;# 
  1894  0214                     	;# 
  1895  0215                     	;# 
  1896  0215                     	;# 
  1897  0215                     	;# 
  1898  0216                     	;# 
  1899  0216                     	;# 
  1900  0217                     	;# 
  1901  0217                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0298                     	;# 
  1907  0298                     	;# 
  1908  0299                     	;# 
  1909  029A                     	;# 
  1910  0394                     	;# 
  1911  0395                     	;# 
  1912  0396                     	;# 
  1913  0FE4                     	;# 
  1914  0FE5                     	;# 
  1915  0FE6                     	;# 
  1916  0FE7                     	;# 
  1917  0FE8                     	;# 
  1918  0FE9                     	;# 
  1919  0FEA                     	;# 
  1920  0FEB                     	;# 
  1921  0FED                     	;# 
  1922  0FEE                     	;# 
  1923  0FEF                     	;# 
  1924  0000                     	;# 
  1925  0001                     	;# 
  1926  0002                     	;# 
  1927  0003                     	;# 
  1928  0004                     	;# 
  1929  0005                     	;# 
  1930  0006                     	;# 
  1931  0007                     	;# 
  1932  0008                     	;# 
  1933  0009                     	;# 
  1934  000A                     	;# 
  1935  000B                     	;# 
  1936  000C                     	;# 
  1937  000D                     	;# 
  1938  000E                     	;# 
  1939  0010                     	;# 
  1940  0011                     	;# 
  1941  0012                     	;# 
  1942  0015                     	;# 
  1943  0016                     	;# 
  1944  0016                     	;# 
  1945  0017                     	;# 
  1946  0018                     	;# 
  1947  0019                     	;# 
  1948  001A                     	;# 
  1949  001B                     	;# 
  1950  001C                     	;# 
  1951  008C                     	;# 
  1952  008D                     	;# 
  1953  008E                     	;# 
  1954  0090                     	;# 
  1955  0091                     	;# 
  1956  0092                     	;# 
  1957  0095                     	;# 
  1958  0096                     	;# 
  1959  0097                     	;# 
  1960  0099                     	;# 
  1961  009A                     	;# 
  1962  009B                     	;# 
  1963  009B                     	;# 
  1964  009C                     	;# 
  1965  009D                     	;# 
  1966  009E                     	;# 
  1967  010C                     	;# 
  1968  010D                     	;# 
  1969  010E                     	;# 
  1970  0116                     	;# 
  1971  0117                     	;# 
  1972  011D                     	;# 
  1973  018C                     	;# 
  1974  018D                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0194                     	;# 
  1982  0195                     	;# 
  1983  0196                     	;# 
  1984  0197                     	;# 
  1985  0199                     	;# 
  1986  019A                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019B                     	;# 
  1990  019B                     	;# 
  1991  019C                     	;# 
  1992  019C                     	;# 
  1993  019D                     	;# 
  1994  019E                     	;# 
  1995  019F                     	;# 
  1996  020D                     	;# 
  1997  0210                     	;# 
  1998  0211                     	;# 
  1999  0211                     	;# 
  2000  0212                     	;# 
  2001  0212                     	;# 
  2002  0213                     	;# 
  2003  0213                     	;# 
  2004  0214                     	;# 
  2005  0214                     	;# 
  2006  0215                     	;# 
  2007  0215                     	;# 
  2008  0215                     	;# 
  2009  0216                     	;# 
  2010  0216                     	;# 
  2011  0217                     	;# 
  2012  0217                     	;# 
  2013  0291                     	;# 
  2014  0291                     	;# 
  2015  0292                     	;# 
  2016  0293                     	;# 
  2017  0298                     	;# 
  2018  0298                     	;# 
  2019  0299                     	;# 
  2020  029A                     	;# 
  2021  0394                     	;# 
  2022  0395                     	;# 
  2023  0396                     	;# 
  2024  0FE4                     	;# 
  2025  0FE5                     	;# 
  2026  0FE6                     	;# 
  2027  0FE7                     	;# 
  2028  0FE8                     	;# 
  2029  0FE9                     	;# 
  2030  0FEA                     	;# 
  2031  0FEB                     	;# 
  2032  0FED                     	;# 
  2033  0FEE                     	;# 
  2034  0FEF                     	;# 
  2035                           
  2036                           	psect	idataBANK4
  2037  110C                     __pidataBANK4:	
  2038                           
  2039                           ;initializer for __product
  2040  110C  3463               	retlw	99
  2041  110D  3402               	retlw	2
  2042  110E  3400               	retlw	0
  2043  110F  3400               	retlw	0
  2044  1110  3400               	retlw	0
  2045  1111  3400               	retlw	0
  2046  1112  3400               	retlw	0
  2047  1113  3400               	retlw	0
  2048  1114  3400               	retlw	0
  2049  1115  3400               	retlw	0
  2050  1116  3400               	retlw	0
  2051  1117  3400               	retlw	0
  2052  1118  34FF               	retlw	255
  2053  1119  34FF               	retlw	255
  2054  111A  34FF               	retlw	255
  2055  111B  3400               	retlw	0
  2056  111C  3400               	retlw	0
  2057  111D  3400               	retlw	0
  2058  111E  3400               	retlw	0
  2059  111F  3400               	retlw	0
  2060  1120  3400               	retlw	0
  2061  1121  3400               	retlw	0
  2062  1122  3400               	retlw	0
  2063  1123  3400               	retlw	0
  2064  1124  3400               	retlw	0
  2065  1125  3400               	retlw	0
  2066  1126  3400               	retlw	0
  2067  1127  3400               	retlw	0
  2068  1128  3400               	retlw	0
  2069  1129  3400               	retlw	0
  2070  112A  3400               	retlw	0
  2071  112B  3400               	retlw	0
  2072                           
  2073                           	psect	stringtext
  2074  1000                     __pstringtext:	
  2075  1000                     _CC2500_registers_address:	
  2076  1000  3403               	retlw	3
  2077  1001  3416               	retlw	22
  2078  1002  3417               	retlw	23
  2079  1003  341E               	retlw	30
  2080  1004  341F               	retlw	31
  2081  1005  3420               	retlw	32
  2082  1006  342A               	retlw	42
  2083  1007  342B               	retlw	43
  2084  1008  340B               	retlw	11
  2085  1009  340C               	retlw	12
  2086  100A  340D               	retlw	13
  2087  100B  340E               	retlw	14
  2088  100C  340F               	retlw	15
  2089  100D  3410               	retlw	16
  2090  100E  3411               	retlw	17
  2091  100F  3412               	retlw	18
  2092  1010  3413               	retlw	19
  2093  1011  3414               	retlw	20
  2094  1012  340A               	retlw	10
  2095  1013  3415               	retlw	21
  2096  1014  3421               	retlw	33
  2097  1015  3422               	retlw	34
  2098  1016  3418               	retlw	24
  2099  1017  3419               	retlw	25
  2100  1018  341A               	retlw	26
  2101  1019  341B               	retlw	27
  2102  101A  341C               	retlw	28
  2103  101B  341D               	retlw	29
  2104  101C  3423               	retlw	35
  2105  101D  3424               	retlw	36
  2106  101E  3425               	retlw	37
  2107  101F  3426               	retlw	38
  2108  1020  3429               	retlw	41
  2109  1021  342C               	retlw	44
  2110  1022  342D               	retlw	45
  2111  1023  342E               	retlw	46
  2112  1024  3400               	retlw	0
  2113  1025  3401               	retlw	1
  2114  1026  3402               	retlw	2
  2115  1027  3407               	retlw	7
  2116  1028  3408               	retlw	8
  2117  1029  3409               	retlw	9
  2118  102A  3406               	retlw	6
  2119  102B  3404               	retlw	4
  2120  102C  3405               	retlw	5
  2121  102D  3427               	retlw	39
  2122  102E  3428               	retlw	40
  2123  102F                     __end_of_CC2500_registers_address:	
  2124  102F                     _CC2500_rfSettings:	
  2125  102F  3407               	retlw	7
  2126  1030  3407               	retlw	7
  2127  1031  3430               	retlw	48
  2128  1032  3487               	retlw	135
  2129  1033  346B               	retlw	107
  2130  1034  34F8               	retlw	248
  2131  1035  347F               	retlw	127
  2132  1036  343F               	retlw	63
  2133  1037  3409               	retlw	9
  2134  1038  3400               	retlw	0
  2135  1039  345C               	retlw	92
  2136  103A  34A7               	retlw	167
  2137  103B  3462               	retlw	98
  2138  103C  3486               	retlw	134
  2139  103D  3483               	retlw	131
  2140  103E  3403               	retlw	3
  2141  103F  3422               	retlw	34
  2142  1040  34F8               	retlw	248
  2143  1041  3400               	retlw	0
  2144  1042  3444               	retlw	68
  2145  1043  34B6               	retlw	182
  2146  1044  3410               	retlw	16
  2147  1045  3418               	retlw	24
  2148  1046  341D               	retlw	29
  2149  1047  341C               	retlw	28
  2150  1048  34C7               	retlw	199
  2151  1049  3400               	retlw	0
  2152  104A  34B2               	retlw	178
  2153  104B  34EA               	retlw	234
  2154  104C  340A               	retlw	10
  2155  104D  3400               	retlw	0
  2156  104E  3411               	retlw	17
  2157  104F  3459               	retlw	89
  2158  1050  3488               	retlw	136
  2159  1051  3431               	retlw	49
  2160  1052  340B               	retlw	11
  2161  1053  342F               	retlw	47
  2162  1054  342E               	retlw	46
  2163  1055  3406               	retlw	6
  2164  1056  3404               	retlw	4
  2165  1057  3405               	retlw	5
  2166  1058  3400               	retlw	0
  2167  1059  3430               	retlw	48
  2168  105A  34D3               	retlw	211
  2169  105B  3491               	retlw	145
  2170  105C  3441               	retlw	65
  2171  105D  3400               	retlw	0
  2172  105E                     __end_of_CC2500_rfSettings:	
  2173  105E                     _CC2500_patable_vaule:	
  2174  105E  34FE               	retlw	254
  2175  105F  34FE               	retlw	254
  2176  1060  34FE               	retlw	254
  2177  1061  34FE               	retlw	254
  2178  1062  34FE               	retlw	254
  2179  1063  34FE               	retlw	254
  2180  1064  34FE               	retlw	254
  2181  1065  34FE               	retlw	254
  2182  1066                     __end_of_CC2500_patable_vaule:	
  2183                           
  2184                           	psect	nvBANK0
  2185  006F                     __pnvBANK0:	
  2186  006F                     _product:	
  2187  006F                     	ds	1
  2188                           
  2189                           	psect	nvBANK1
  2190  00EF                     __pnvBANK1:	
  2191  00EF                     _WDT:	
  2192  00EF                     	ds	1
  2193  000C                     _PORTA	set	12
  2194  000D                     _PORTB	set	13
  2195  000E                     _PORTC	set	14
  2196  0015                     _TMR0	set	21
  2197  005F                     _GIE	set	95
  2198  005B                     _IOCIE	set	91
  2199  0058                     _IOCIF	set	88
  2200  005E                     _PEIE	set	94
  2201  0060                     _RA0	set	96
  2202  0063                     _RA3	set	99
  2203  0064                     _RA4	set	100
  2204  0066                     _RA6	set	102
  2205  0067                     _RA7	set	103
  2206  0068                     _RB0	set	104
  2207  0069                     _RB1	set	105
  2208  006B                     _RB3	set	107
  2209  006C                     _RB4	set	108
  2210  006D                     _RB5	set	109
  2211  0070                     _RC0	set	112
  2212  0071                     _RC1	set	113
  2213  0072                     _RC2	set	114
  2214  0074                     _RC4	set	116
  2215  0075                     _RC5	set	117
  2216  0076                     _RC6	set	118
  2217  0077                     _RC7	set	119
  2218  005D                     _TMR0IE	set	93
  2219  005A                     _TMR0IF	set	90
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0095                     _OPTION_REG	set	149
  2225  0099                     _OSCCON	set	153
  2226  008C                     _TRISA	set	140
  2227  008D                     _TRISB	set	141
  2228  008E                     _TRISC	set	142
  2229  0097                     _WDTCON	set	151
  2230  04E9                     _GO_nDONE	set	1257
  2231  0117                     _FVRCON	set	279
  2232  010C                     _LATA	set	268
  2233  010D                     _LATB	set	269
  2234  010E                     _LATC	set	270
  2235  018C                     _ANSELA	set	396
  2236  018D                     _ANSELB	set	397
  2237  018E                     _ANSELC	set	398
  2238  0192                     _PMADRH	set	402
  2239  0191                     _PMADRL	set	401
  2240  0196                     _PMCON2	set	406
  2241  0194                     _PMDATH	set	404
  2242  0193                     _PMDATL	set	403
  2243  0CAE                     _CFGS	set	3246
  2244  0CAC                     _FREE	set	3244
  2245  0CAD                     _LWLO	set	3245
  2246  0CA8                     _RD	set	3240
  2247  0CA9                     _WR	set	3241
  2248  0CAA                     _WREN	set	3242
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0015                     start_initialization:	
  2260  0015                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2267  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2270  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  001B  30A0               	movlw	low __pbssBANK1
  2274  001C  0084               	movwf	4
  2275  001D  3000               	movlw	high __pbssBANK1
  2276  001E  0085               	movwf	5
  2277  001F  304F               	movlw	79
  2278  0020  319C  2498  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  0023  3020               	movlw	low __pbssBANK2
  2282  0024  0084               	movwf	4
  2283  0025  3001               	movlw	high __pbssBANK2
  2284  0026  0085               	movwf	5
  2285  0027  3050               	movlw	80
  2286  0028  319C  2498  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  002B  30A0               	movlw	low __pbssBANK3
  2290  002C  0084               	movwf	4
  2291  002D  3001               	movlw	high __pbssBANK3
  2292  002E  0085               	movwf	5
  2293  002F  304C               	movlw	76
  2294  0030  319C  2498  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK4
  2297  0033  3040               	movlw	low __pbssBANK4
  2298  0034  0084               	movwf	4
  2299  0035  3002               	movlw	high __pbssBANK4
  2300  0036  0085               	movwf	5
  2301  0037  3009               	movlw	9
  2302  0038  319C  2498  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK4
  2305  003B  300C               	movlw	low __pidataBANK4
  2306  003C  0084               	movwf	4
  2307  003D  3091               	movlw	(high __pidataBANK4)| (0+128)
  2308  003E  0085               	movwf	5
  2309  003F  3020               	movlw	low __pdataBANK4
  2310  0040  0086               	movwf	6
  2311  0041  3002               	movlw	high __pdataBANK4
  2312  0042  0087               	movwf	7
  2313  0043  3020               	movlw	32
  2314  0044  319C  2492         	fcall	init_ram
  2315  0046                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0046                     __end_of__initialization:	
  2319  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0047  0020               	movlb	0
  2321  0048  3196  2E60         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03E8                     __pbitbssCOMMON:	
  2325  03E8                     _Receive_OK:	
  2326  03E8                     	ds	1
  2327  03E9                     _Transceive_OK:	
  2328  03E9                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0078                     __pbssCOMMON:	
  2332  0078                     _Sw:	
  2333  0078                     	ds	2
  2334  007A                     _DelayOff:	
  2335  007A                     	ds	1
  2336  007B                     _DimmerLights:	
  2337  007B                     	ds	1
  2338  007C                     _DimmerLightsIntr:	
  2339  007C                     	ds	1
  2340                           
  2341                           	psect	bssBANK1
  2342  00A0                     __pbssBANK1:	
  2343  00A0                     _myMain:	
  2344  00A0                     	ds	18
  2345  00B2                     _Buz1:	
  2346  00B2                     	ds	12
  2347  00BE                     _RF1:	
  2348  00BE                     	ds	5
  2349  00C3                     _LED:	
  2350  00C3                     	ds	2
  2351  00C5                     _RF_Count:	
  2352  00C5                     	ds	2
  2353  00C7                     _CRC:	
  2354  00C7                     	ds	1
  2355  00C8                     _Dimmer:	
  2356  00C8                     	ds	1
  2357  00C9                     _DimmerLights11:	
  2358  00C9                     	ds	1
  2359  00CA                     _DimmerLights22:	
  2360  00CA                     	ds	1
  2361  00CB                     _DimmerLights33:	
  2362  00CB                     	ds	1
  2363  00CC                     _DimmerLightsIntrIOC:	
  2364  00CC                     	ds	1
  2365  00CD                     _RFSW:	
  2366  00CD                     	ds	1
  2367  00CE                     _RSSI:	
  2368  00CE                     	ds	1
  2369  00CF                     _Rx_Length:	
  2370  00CF                     	ds	1
  2371  00D0                     _SPI0Buffer:	
  2372  00D0                     	ds	1
  2373  00D1                     _Tx_Length:	
  2374  00D1                     	ds	1
  2375  00D2                     _r_address:	
  2376  00D2                     	ds	1
  2377  00D3                     _r_data:	
  2378  00D3                     	ds	1
  2379  00D4                     _s_data:	
  2380  00D4                     	ds	1
  2381  00D5                     _Temp1:	
  2382  00D5                     	ds	14
  2383  00E3                     _VarErrLED:	
  2384  00E3                     	ds	4
  2385  00E7                     _Dimmer1:	
  2386  00E7                     	ds	3
  2387  00EA                     __WDT:	
  2388  00EA                     	ds	2
  2389  00EC                     _RFSW1:	
  2390  00EC                     	ds	1
  2391  00ED                     _RFSW2:	
  2392  00ED                     	ds	1
  2393  00EE                     _RFSW3:	
  2394  00EE                     	ds	1
  2395                           
  2396                           	psect	bssBANK2
  2397  0120                     __pbssBANK2:	
  2398  0120                     _RF_Data:	
  2399  0120                     	ds	21
  2400  0135                     _Timer0:	
  2401  0135                     	ds	8
  2402  013D                     _DimmerLights1:	
  2403  013D                     	ds	15
  2404  014C                     _Sw1:	
  2405  014C                     	ds	9
  2406  0155                     _DlySw1:	
  2407  0155                     	ds	5
  2408  015A                     _DlySw2:	
  2409  015A                     	ds	5
  2410  015F                     _DlySw3:	
  2411  015F                     	ds	5
  2412  0164                     _VarLED1:	
  2413  0164                     	ds	4
  2414  0168                     _VarLED2:	
  2415  0168                     	ds	4
  2416  016C                     _VarLED3:	
  2417  016C                     	ds	4
  2418                           
  2419                           	psect	bssBANK3
  2420  01A0                     __pbssBANK3:	
  2421  01A0                     _Memory:	
  2422  01A0                     	ds	37
  2423  01C5                     _DimmerLights2:	
  2424  01C5                     	ds	15
  2425  01D4                     _DimmerLights3:	
  2426  01D4                     	ds	15
  2427  01E3                     _Sw2:	
  2428  01E3                     	ds	9
  2429                           
  2430                           	psect	bssBANK4
  2431  0240                     __pbssBANK4:	
  2432  0240                     _Sw3:	
  2433  0240                     	ds	9
  2434                           
  2435                           	psect	dataBANK4
  2436  0220                     __pdataBANK4:	
  2437  0220                     __product:	
  2438  0220                     	ds	32
  2439                           
  2440                           	psect	clrtext
  2441  1C98                     clear_ram0:	
  2442                           ;	Called with FSR0 containing the base address, and
  2443                           ;	WREG with the size to clear
  2444                           
  2445  1C98  0064               	clrwdt	;clear the watchdog before getting into this loop
  2446  1C99                     clrloop0:	
  2447  1C99  0180               	clrf	0	;clear RAM location pointed to by FSR
  2448  1C9A  3101               	addfsr 0,1
  2449  1C9B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2450  1C9C  2C99               	goto	clrloop0	;have we reached the end yet?
  2451  1C9D  3400               	retlw	0	;all done for this memory range, return
  2452                           
  2453                           	psect	inittext
  2454  1C92                     init_ram:	
  2455  1C92  00FE               	movwf	126
  2456  1C93                     initloop:	
  2457  1C93  0012               	moviw fsr0++
  2458  1C94  001E               	movwi fsr1++
  2459  1C95  0BFE               	decfsz	126,f
  2460  1C96  2C93               	goto	initloop
  2461  1C97  3400               	retlw	0
  2462                           
  2463                           	psect	cstackCOMMON
  2464  0070                     __pcstackCOMMON:	
  2465  0070                     ?_Timeout_Counter:	
  2466  0070                     ?_set_TimeoutCleared:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_WriteByte:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_CC2500_WriteCommand:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_ReadStatus:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_ReadByte:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_CC2500_PowerRST:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_CC2500_InitSetREG:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_InitPATable:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_ClearTXFIFO:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_ClearRXFIFO:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_FrequencyCabr:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_SIDLEMode:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_DlyOff_Initialization:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_DlyOff_Main:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_setTxData:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_setDimmerLights_Initialization:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_Dimmer_Initialization:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setMemory_GO:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_setDimmerLights_Main:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_setDimmerLights_ERROR:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_setLED_Initialization:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setLED_Main:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_Fosc_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_IO_Set:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_TMR0_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_ADC_Set:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_IOC_Set:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_WDT_Set:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_IOC_ISR:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_TMR0_ISR:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_Flash_Memory_Write:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_Flash_Memory_Modify:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_WDT_Clearing:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_myMain_Initialization:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_Temp_Initialization:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_Switch_Initialization:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_RF_Initialization:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_getTemp_AD:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_my_Main:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_Temp_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Switch_Main:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_RF_Main:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_setTemp_Enable:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_setSw_Enable:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_setRF_Enable:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_setTemp_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_setTemp_Main:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setOverTemp_Exceptions:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_setRF_Initialization:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setRF_Main:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_RF_RxDisable:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_getRxData:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setLog_Code:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setControl_Lights_Table:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setRFSW_Control:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setRFSW_AdjControl:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setRF_DimmerValue:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setSw_Initialization:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setSw_Main:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_Sw_DimmerOnFunc:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_Sw_DimmerAdjFunc:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_Sw_DimmerOffFunc:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_Buzzer_Initialization:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_Buzzer_Main:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_TxData:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_CC2500_RxData:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_CC2500_PowerOnInitial:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_DelayOffPointSelect:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_DelayOff_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_DelayOff_Main:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DimmerIntrIOCPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ??_DimmerIntrIOCPointSelect:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DimmerIntrPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ??_DimmerIntrPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_IntrControl:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_DimmerLightsPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_DimmerLights_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_DimmerLights_Close:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_DimmerLights_Main:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_DimmerLights_Exceptions:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setDimmerLights_AdjRF:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_LedPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_LED_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_LED_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_Mcu_Initialization:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_ISR:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setDimmerReClock:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Flash_Memory_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Flash_Memory_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Flash_Memory_Unlock:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Flash_Memory_Erasing:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_WDT_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setRF_Learn:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_RfSWPointSelect:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_TouchPower:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_SwPointSelect:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_DelayTimejudge:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_getDimmerLights_StatusFlag:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ?_getPercentValue:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_Flash_Memory_Read:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ?_setPercentValue:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772                           
  2773                           ; 1 bytes @ 0x0
  2774  0070                     	ds	1
  2775  0071                     DimmerIntrIOCPointSelect@lights:	
  2776  0071                     DimmerIntrPointSelect@lights:	
  2777                           ; 1 bytes @ 0x1
  2778                           
  2779                           
  2780                           ; 1 bytes @ 0x1
  2781  0071                     	ds	1
  2782  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2783  0072                     ??_setDimmerLights_IntrControl:	
  2784                           ; 0 bytes @ 0x2
  2785                           
  2786  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2787                           ; 0 bytes @ 0x2
  2788                           
  2789                           
  2790                           ; 1 bytes @ 0x2
  2791  0072                     	ds	1
  2792  0073                     ??_IOC_ISR:	
  2793  0073                     ??_setDimmerReClock:	
  2794                           ; 0 bytes @ 0x3
  2795                           
  2796                           
  2797                           ; 0 bytes @ 0x3
  2798  0073                     	ds	3
  2799  0076                     setDimmerLights_IntrControl@lights:	
  2800                           
  2801                           ; 1 bytes @ 0x6
  2802  0076                     	ds	1
  2803  0077                     ??_TMR0_ISR:	
  2804  0077                     ??_ISR:	
  2805                           ; 0 bytes @ 0x7
  2806                           
  2807                           
  2808                           ; 0 bytes @ 0x7
  2809  0077                     	ds	1
  2810                           
  2811                           	psect	cstackBANK0
  2812  0020                     __pcstackBANK0:	
  2813  0020                     ??_Timeout_Counter:	
  2814  0020                     ??_set_TimeoutCleared:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_CC2500_WriteByte:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_CC2500_ReadByte:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ?_DelayTime_1us:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_setTxData:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_Dimmer_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_getDimmerLights_StatusFlag:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_setMemory_GO:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Fosc_Set:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_IO_Set:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_TMR0_Set:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_ADC_Set:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_IOC_Set:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_WDT_Set:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Flash_Memory_Read:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_Flash_Memory_Write:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_WDT_Clearing:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_myMain_Initialization:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_Temp_Initialization:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_setTemp_Enable:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_setRF_Enable:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_setTemp_Initialization:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setRF_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Buzzer_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Buzzer_Main:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_DelayOffPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_DimmerLightsPointSelect:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_LedPointSelect:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_Flash_Memory_Unlock:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_Flash_Memory_Erasing:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_WDT_Main:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setRF_Learn:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_RfSWPointSelect:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_TouchPower:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_SwPointSelect:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ?___bmul:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ?_getBuz_GO:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     ?_getAD:	
  2926                           ; 2 bytes @ 0x0
  2927                           
  2928  0020                     ?___awdiv:	
  2929                           ; 2 bytes @ 0x0
  2930                           
  2931  0020                     ?___ftpack:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934  0020                     LedPointSelect@led:	
  2935                           ; 3 bytes @ 0x0
  2936                           
  2937  0020                     getAD@adcon1:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0020                     setTemp_Enable@command:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     setRF_Learn@command:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0020                     setRF_Enable@command:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0020                     SwPointSelect@sw:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ___bmul@multiplicand:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0020                     DelayTime_1us@count:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0020                     ___awdiv@divisor:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     ___ftpack@arg:	
  2962                           ; 2 bytes @ 0x0
  2963                           
  2964                           
  2965                           ; 3 bytes @ 0x0
  2966  0020                     	ds	1
  2967  0021                     ?_setSw_Status:	
  2968  0021                     ?_setLED:	
  2969                           ; 0 bytes @ 0x1
  2970                           
  2971  0021                     ??_setLED_Main:	
  2972                           ; 0 bytes @ 0x1
  2973                           
  2974  0021                     ??_RF_Initialization:	
  2975                           ; 0 bytes @ 0x1
  2976                           
  2977  0021                     ??_setSw_Enable:	
  2978                           ; 0 bytes @ 0x1
  2979                           
  2980  0021                     ??_Mcu_Initialization:	
  2981                           ; 0 bytes @ 0x1
  2982                           
  2983  0021                     ??___bmul:	
  2984                           ; 0 bytes @ 0x1
  2985                           
  2986  0021                     CC2500_WriteByte@loop_a:	
  2987                           ; 0 bytes @ 0x1
  2988                           
  2989  0021                     CC2500_ReadByte@loop_b:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     DelayOffPointSelect@sw:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     DimmerLightsPointSelect@lights:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     getDimmerLights_StatusFlag@Status:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     setLED@command:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     Flash_Memory_Read@i:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007  0021                     Flash_Memory_Write@i:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0021                     RfSWPointSelect@sw:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0021                     setSw_Enable@command:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0021                     setSw_Status@command:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019                           
  3020                           ; 1 bytes @ 0x1
  3021  0021                     	ds	1
  3022  0022                     ??_CC2500_WriteCommand:	
  3023  0022                     ??_CC2500_ReadStatus:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ??_DelayTime_1us:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_CC2500_WriteREG:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ??_DlyOff_Initialization:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ??_setSw_Status:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ?_setRFSW_Status:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ?_setDimmerLights_Trigger:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_Switch:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ??_setDimmerLights_Initialization:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ?_setDimmerLights_TriggerERROR:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ??_setLED:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ??_getBuz_GO:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ?_setDimmerLights_AdjGo:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_TriggerAdj:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     CC2500_WriteREG@value:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     DlyOff_Initialization@sw:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     _getDimmerLights_StatusFlag$2153:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setDimmerLights_TriggerERROR@command:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     setDimmerLights_Switch@command:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     setDimmerLights_AdjGo@command:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setDimmerLights_Trigger@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     setDimmerLights_TriggerAdj@command:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setLED@led:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     Flash_Memory_Read@address:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setMemory_GO@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setRFSW_Status@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setSw_Status@sw:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     ___bmul@product:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     DelayTime_1us@i:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     ___awdiv@dividend:	
  3111                           ; 2 bytes @ 0x2
  3112                           
  3113                           
  3114                           ; 2 bytes @ 0x2
  3115  0022                     	ds	1
  3116  0023                     ??_CC2500_WriteREG:	
  3117  0023                     ??_setRFSW_Status:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     ??_setDimmerLights_Trigger:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     ??_setDimmerLights_Switch:	
  3124                           ; 0 bytes @ 0x3
  3125                           
  3126  0023                     ?_setDimmerLights:	
  3127                           ; 0 bytes @ 0x3
  3128                           
  3129  0023                     ??_setDimmerLights_TriggerERROR:	
  3130                           ; 0 bytes @ 0x3
  3131                           
  3132  0023                     ??_setLED_Initialization:	
  3133                           ; 0 bytes @ 0x3
  3134                           
  3135  0023                     ??_setSw_Initialization:	
  3136                           ; 0 bytes @ 0x3
  3137                           
  3138  0023                     ??_DelayOff_Initialization:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_DimmerLights_Close:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setDimmerLights_AdjGo:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_TriggerAdj:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_getAD:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     CC2500_WriteCommand@command:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     CC2500_ReadStatus@status_addr:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setDimmerLights_Initialization@lights:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setDimmerLights_TriggerERROR@lights:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     setDimmerLights@status:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0023                     setDimmerLights_Switch@lights:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0023                     setDimmerLights_AdjGo@lights:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     setDimmerLights_Trigger@lights:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setDimmerLights_TriggerAdj@lights:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setLED_Initialization@led:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     setLED_Main@led:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     getAD@adcon0:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     Flash_Memory_Read@ret:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setRFSW_Status@sw:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     setSw_Initialization@sw:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     ___bmul@multiplier:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     ___ftpack@exp:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204                           
  3205                           ; 1 bytes @ 0x3
  3206  0023                     	ds	1
  3207  0024                     ??_CC2500_ClearTXFIFO:	
  3208  0024                     ??_CC2500_ClearRXFIFO:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     ??_CC2500_SIDLEMode:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     ??_DelayTimejudge:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     ??_setDimmerLights:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_setDimmerLights_ERROR:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??_Flash_Memory_Modify:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ??_Switch_Initialization:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_getTemp_AD:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_RF_RxDisable:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_Sw_DimmerAdjFunc:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_CC2500_TxData:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_CC2500_RxData:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??_DimmerLights_Initialization:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     ??_LED_Initialization:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_LED_Main:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??___awdiv:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     CC2500_WriteREG@w_addr:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ___ftpack@sign:	
  3260                           ; 1 bytes @ 0x4
  3261                           
  3262  0024                     getBuz_GO@i:	
  3263                           ; 1 bytes @ 0x4
  3264                           
  3265  0024                     DelayTime_1us@j:	
  3266                           ; 2 bytes @ 0x4
  3267                           
  3268                           
  3269                           ; 2 bytes @ 0x4
  3270  0024                     	ds	1
  3271  0025                     ??_CC2500_InitSetREG:	
  3272  0025                     ??_CC2500_InitPATable:	
  3273                           ; 0 bytes @ 0x5
  3274                           
  3275  0025                     ??___ftpack:	
  3276                           ; 0 bytes @ 0x5
  3277                           
  3278  0025                     CC2500_TxData@loop_e:	
  3279                           ; 0 bytes @ 0x5
  3280                           
  3281  0025                     CC2500_RxData@loop_f:	
  3282                           ; 1 bytes @ 0x5
  3283                           
  3284  0025                     setDimmerLights_ERROR@lights:	
  3285                           ; 1 bytes @ 0x5
  3286                           
  3287  0025                     setDimmerLights@lights:	
  3288                           ; 1 bytes @ 0x5
  3289                           
  3290  0025                     Flash_Memory_Modify@i:	
  3291                           ; 1 bytes @ 0x5
  3292                           
  3293  0025                     getTemp_AD@channel:	
  3294                           ; 1 bytes @ 0x5
  3295                           
  3296  0025                     _Sw_DimmerAdjFunc$5530:	
  3297                           ; 1 bytes @ 0x5
  3298                           
  3299  0025                     ___awdiv@counter:	
  3300                           ; 1 bytes @ 0x5
  3301                           
  3302                           
  3303                           ; 1 bytes @ 0x5
  3304  0025                     	ds	1
  3305  0026                     ??_CC2500_PowerRST:	
  3306  0026                     ??_CC2500_FrequencyCabr:	
  3307                           ; 0 bytes @ 0x6
  3308                           
  3309  0026                     ??_Flash_Memory_Main:	
  3310                           ; 0 bytes @ 0x6
  3311                           
  3312  0026                     CC2500_InitSetREG@temp1:	
  3313                           ; 0 bytes @ 0x6
  3314                           
  3315  0026                     CC2500_InitPATable@temp:	
  3316                           ; 1 bytes @ 0x6
  3317                           
  3318  0026                     DelayTimejudge@i:	
  3319                           ; 1 bytes @ 0x6
  3320                           
  3321  0026                     _Sw_DimmerAdjFunc$5531:	
  3322                           ; 1 bytes @ 0x6
  3323                           
  3324  0026                     ___awdiv@sign:	
  3325                           ; 1 bytes @ 0x6
  3326                           
  3327                           
  3328                           ; 1 bytes @ 0x6
  3329  0026                     	ds	1
  3330  0027                     CC2500_InitSetREG@temp2:	
  3331  0027                     CC2500_InitPATable@loop_d:	
  3332                           ; 1 bytes @ 0x7
  3333                           
  3334  0027                     DelayTimejudge@j:	
  3335                           ; 1 bytes @ 0x7
  3336                           
  3337  0027                     _Sw_DimmerAdjFunc$5532:	
  3338                           ; 1 bytes @ 0x7
  3339                           
  3340  0027                     ___awdiv@quotient:	
  3341                           ; 1 bytes @ 0x7
  3342                           
  3343                           
  3344                           ; 2 bytes @ 0x7
  3345  0027                     	ds	1
  3346  0028                     ?___awtoft:	
  3347  0028                     CC2500_InitSetREG@loop_c:	
  3348                           ; 3 bytes @ 0x8
  3349                           
  3350  0028                     DelayTimejudge@k:	
  3351                           ; 1 bytes @ 0x8
  3352                           
  3353  0028                     Sw_DimmerAdjFunc@Idle:	
  3354                           ; 1 bytes @ 0x8
  3355                           
  3356  0028                     ___awtoft@c:	
  3357                           ; 1 bytes @ 0x8
  3358                           
  3359                           
  3360                           ; 2 bytes @ 0x8
  3361  0028                     	ds	1
  3362  0029                     ?_setBuz:	
  3363  0029                     ??_CC2500_PowerOnInitial:	
  3364                           ; 0 bytes @ 0x9
  3365                           
  3366  0029                     DelayTimejudge@value:	
  3367                           ; 0 bytes @ 0x9
  3368                           
  3369  0029                     Sw_DimmerAdjFunc@sw:	
  3370                           ; 1 bytes @ 0x9
  3371                           
  3372  0029                     setBuz@time:	
  3373                           ; 1 bytes @ 0x9
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0x9
  3377  0029                     	ds	1
  3378  002A                     ?_setDelayOff_GO:	
  3379  002A                     setDelayOff_GO@command:	
  3380                           ; 0 bytes @ 0xA
  3381                           
  3382                           
  3383                           ; 1 bytes @ 0xA
  3384  002A                     	ds	1
  3385  002B                     ??_setBuz:	
  3386  002B                     ??___awtoft:	
  3387                           ; 0 bytes @ 0xB
  3388                           
  3389  002B                     setDelayOff_GO@value:	
  3390                           ; 0 bytes @ 0xB
  3391                           
  3392                           
  3393                           ; 1 bytes @ 0xB
  3394  002B                     	ds	1
  3395  002C                     ??_setDelayOff_GO:	
  3396  002C                     setBuz@count:	
  3397                           ; 0 bytes @ 0xC
  3398                           
  3399                           
  3400                           ; 1 bytes @ 0xC
  3401  002C                     	ds	1
  3402  002D                     ??_my_Main:	
  3403  002D                     ??_setLog_Code:	
  3404                           ; 0 bytes @ 0xD
  3405                           
  3406  002D                     ??_DimmerLights_Exceptions:	
  3407                           ; 0 bytes @ 0xD
  3408                           
  3409  002D                     DimmerLights_Exceptions@status:	
  3410                           ; 0 bytes @ 0xD
  3411                           
  3412  002D                     ___awtoft@sign:	
  3413                           ; 1 bytes @ 0xD
  3414                           
  3415                           
  3416                           ; 1 bytes @ 0xD
  3417  002D                     	ds	1
  3418  002E                     ??_setOverTemp_Exceptions:	
  3419  002E                     ?___ftdiv:	
  3420                           ; 0 bytes @ 0xE
  3421                           
  3422  002E                     ?___ftmul:	
  3423                           ; 3 bytes @ 0xE
  3424                           
  3425  002E                     setDelayOff_GO@sw:	
  3426                           ; 3 bytes @ 0xE
  3427                           
  3428  002E                     ___ftdiv@f2:	
  3429                           ; 1 bytes @ 0xE
  3430                           
  3431  002E                     ___ftmul@f1:	
  3432                           ; 3 bytes @ 0xE
  3433                           
  3434                           
  3435                           ; 3 bytes @ 0xE
  3436  002E                     	ds	1
  3437  002F                     setOverTemp_Exceptions@i:	
  3438                           
  3439                           ; 1 bytes @ 0xF
  3440  002F                     	ds	1
  3441  0030                     setOverTemp_Exceptions@command:	
  3442                           
  3443                           ; 1 bytes @ 0x10
  3444  0030                     	ds	1
  3445  0031                     ??_setTemp_Main:	
  3446  0031                     ___ftdiv@f1:	
  3447                           ; 0 bytes @ 0x11
  3448                           
  3449  0031                     ___ftmul@f2:	
  3450                           ; 3 bytes @ 0x11
  3451                           
  3452                           
  3453                           ; 3 bytes @ 0x11
  3454  0031                     	ds	1
  3455  0032                     ??_Temp_Main:	
  3456                           
  3457                           ; 0 bytes @ 0x12
  3458  0032                     	ds	2
  3459  0034                     ??___ftdiv:	
  3460  0034                     ??___ftmul:	
  3461                           ; 0 bytes @ 0x14
  3462                           
  3463                           
  3464                           ; 0 bytes @ 0x14
  3465  0034                     	ds	4
  3466  0038                     ___ftdiv@cntr:	
  3467  0038                     ___ftmul@exp:	
  3468                           ; 1 bytes @ 0x18
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x18
  3472  0038                     	ds	1
  3473  0039                     ___ftdiv@f3:	
  3474  0039                     ___ftmul@f3_as_product:	
  3475                           ; 3 bytes @ 0x19
  3476                           
  3477                           
  3478                           ; 3 bytes @ 0x19
  3479  0039                     	ds	3
  3480  003C                     ___ftdiv@exp:	
  3481  003C                     ___ftmul@cntr:	
  3482                           ; 1 bytes @ 0x1C
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0x1C
  3486  003C                     	ds	1
  3487  003D                     ___ftdiv@sign:	
  3488  003D                     ___ftmul@sign:	
  3489                           ; 1 bytes @ 0x1D
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0x1D
  3493  003D                     	ds	1
  3494  003E                     ?___ftadd:	
  3495  003E                     ___ftadd@f1:	
  3496                           ; 3 bytes @ 0x1E
  3497                           
  3498                           
  3499                           ; 3 bytes @ 0x1E
  3500  003E                     	ds	3
  3501  0041                     ___ftadd@f2:	
  3502                           
  3503                           ; 3 bytes @ 0x21
  3504  0041                     	ds	3
  3505  0044                     ??___ftadd:	
  3506                           
  3507                           ; 0 bytes @ 0x24
  3508  0044                     	ds	4
  3509  0048                     ___ftadd@sign:	
  3510                           
  3511                           ; 1 bytes @ 0x28
  3512  0048                     	ds	1
  3513  0049                     ___ftadd@exp2:	
  3514                           
  3515                           ; 1 bytes @ 0x29
  3516  0049                     	ds	1
  3517  004A                     ___ftadd@exp1:	
  3518                           
  3519                           ; 1 bytes @ 0x2A
  3520  004A                     	ds	1
  3521  004B                     ?___fttol:	
  3522  004B                     ___fttol@f1:	
  3523                           ; 4 bytes @ 0x2B
  3524                           
  3525                           
  3526                           ; 3 bytes @ 0x2B
  3527  004B                     	ds	4
  3528  004F                     ??___fttol:	
  3529                           
  3530                           ; 0 bytes @ 0x2F
  3531  004F                     	ds	4
  3532  0053                     ___fttol@sign1:	
  3533                           
  3534                           ; 1 bytes @ 0x33
  3535  0053                     	ds	1
  3536  0054                     ___fttol@lval:	
  3537                           
  3538                           ; 4 bytes @ 0x34
  3539  0054                     	ds	4
  3540  0058                     ___fttol@exp1:	
  3541                           
  3542                           ; 1 bytes @ 0x38
  3543  0058                     	ds	1
  3544  0059                     ??_getPercentValue:	
  3545  0059                     ??_setPercentValue:	
  3546                           ; 0 bytes @ 0x39
  3547                           
  3548  0059                     setPercentValue@value:	
  3549                           ; 0 bytes @ 0x39
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x39
  3553  0059                     	ds	1
  3554  005A                     setPercentValue@i:	
  3555                           
  3556                           ; 3 bytes @ 0x3A
  3557  005A                     	ds	1
  3558  005B                     getPercentValue@value:	
  3559                           
  3560                           ; 1 bytes @ 0x3B
  3561  005B                     	ds	1
  3562  005C                     getPercentValue@i:	
  3563                           
  3564                           ; 3 bytes @ 0x3C
  3565  005C                     	ds	1
  3566  005D                     ?_setRF_DimmerLights:	
  3567  005D                     ??_Flash_Memory_Initialization:	
  3568                           ; 0 bytes @ 0x3D
  3569                           
  3570  005D                     setRF_DimmerLights@on:	
  3571                           ; 0 bytes @ 0x3D
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x3D
  3575  005D                     	ds	1
  3576  005E                     ??_setRF_DimmerLights:	
  3577  005E                     Flash_Memory_Initialization@i:	
  3578                           ; 0 bytes @ 0x3E
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x3E
  3582  005E                     	ds	1
  3583  005F                     ??_setDimmerLights_AdjRF:	
  3584                           
  3585                           ; 0 bytes @ 0x3F
  3586  005F                     	ds	1
  3587  0060                     setDimmerLights_AdjRF@lights:	
  3588  0060                     setRF_DimmerLights@status:	
  3589                           ; 1 bytes @ 0x40
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x40
  3593  0060                     	ds	1
  3594  0061                     ??_setRF_DimmerValue:	
  3595  0061                     setRF_DimmerLights@lights:	
  3596                           ; 0 bytes @ 0x41
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x41
  3600  0061                     	ds	1
  3601  0062                     ??_DlyOff_Main:	
  3602  0062                     ?_setDimmerLights_Adj:	
  3603                           ; 0 bytes @ 0x42
  3604                           
  3605  0062                     ??_setRFSW_Control:	
  3606                           ; 0 bytes @ 0x42
  3607                           
  3608  0062                     ??_Sw_DimmerOnFunc:	
  3609                           ; 0 bytes @ 0x42
  3610                           
  3611  0062                     ??_Sw_DimmerOffFunc:	
  3612                           ; 0 bytes @ 0x42
  3613                           
  3614  0062                     setDimmerLights_Adj@status:	
  3615                           ; 0 bytes @ 0x42
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0x42
  3619  0062                     	ds	1
  3620  0063                     ??_setDimmerLights_Adj:	
  3621  0063                     setRFSW_Control@sw:	
  3622                           ; 0 bytes @ 0x43
  3623                           
  3624  0063                     setRF_DimmerValue@lights:	
  3625                           ; 1 bytes @ 0x43
  3626                           
  3627  0063                     _Sw_DimmerOnFunc$5520:	
  3628                           ; 1 bytes @ 0x43
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x43
  3632  0063                     	ds	1
  3633  0064                     ??_setRFSW_AdjControl:	
  3634  0064                     DlyOff_Main@sw:	
  3635                           ; 0 bytes @ 0x44
  3636                           
  3637  0064                     setDimmerLights_Adj@lights:	
  3638                           ; 1 bytes @ 0x44
  3639                           
  3640  0064                     _Sw_DimmerOnFunc$5521:	
  3641                           ; 1 bytes @ 0x44
  3642                           
  3643  0064                     Sw_DimmerOffFunc@sw:	
  3644                           ; 1 bytes @ 0x44
  3645                           
  3646                           
  3647                           ; 1 bytes @ 0x44
  3648  0064                     	ds	1
  3649  0065                     ??_setDimmerLights_Main:	
  3650  0065                     ??_DelayOff_Main:	
  3651                           ; 0 bytes @ 0x45
  3652                           
  3653  0065                     _Sw_DimmerOnFunc$5522:	
  3654                           ; 0 bytes @ 0x45
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0x45
  3658  0065                     	ds	1
  3659  0066                     _setDimmerLights_Main$2148:	
  3660  0066                     setRFSW_AdjControl@sw:	
  3661                           ; 1 bytes @ 0x46
  3662                           
  3663  0066                     Sw_DimmerOnFunc@Idle:	
  3664                           ; 1 bytes @ 0x46
  3665                           
  3666                           
  3667                           ; 1 bytes @ 0x46
  3668  0066                     	ds	1
  3669  0067                     ??_setRF_Main:	
  3670  0067                     ??_getRxData:	
  3671                           ; 0 bytes @ 0x47
  3672                           
  3673  0067                     ??_setControl_Lights_Table:	
  3674                           ; 0 bytes @ 0x47
  3675                           
  3676  0067                     _setDimmerLights_Main$2149:	
  3677                           ; 0 bytes @ 0x47
  3678                           
  3679  0067                     Sw_DimmerOnFunc@sw:	
  3680                           ; 1 bytes @ 0x47
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x47
  3684  0067                     	ds	1
  3685  0068                     ??_setSw_Main:	
  3686  0068                     _setDimmerLights_Main$2150:	
  3687                           ; 0 bytes @ 0x48
  3688                           
  3689  0068                     _setRF_Main$4639:	
  3690                           ; 1 bytes @ 0x48
  3691                           
  3692                           
  3693                           ; 1 bytes @ 0x48
  3694  0068                     	ds	1
  3695  0069                     ??_RF_Main:	
  3696  0069                     setDimmerLights_Main@clear:	
  3697                           ; 0 bytes @ 0x49
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x49
  3701  0069                     	ds	1
  3702  006A                     setDimmerLights_Main@lights:	
  3703  006A                     setSw_Main@sw:	
  3704                           ; 1 bytes @ 0x4A
  3705                           
  3706                           
  3707                           ; 1 bytes @ 0x4A
  3708  006A                     	ds	1
  3709  006B                     ??_Switch_Main:	
  3710  006B                     ??_DimmerLights_Main:	
  3711                           ; 0 bytes @ 0x4B
  3712                           
  3713  006B                     ?_main:	
  3714                           ; 0 bytes @ 0x4B
  3715                           
  3716  006B                     main@argc:	
  3717                           ; 2 bytes @ 0x4B
  3718                           
  3719                           
  3720                           ; 2 bytes @ 0x4B
  3721  006B                     	ds	2
  3722  006D                     main@argv:	
  3723                           
  3724                           ; 2 bytes @ 0x4D
  3725  006D                     	ds	2
  3726  006F                     ??_main:	
  3727                           
  3728                           	psect	maintext
  3729  1660                     __pmaintext:	
  3730                           ; 0 bytes @ 0x4F
  3731 ;;
  3732 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3733 ;;
  3734 ;; *************** function _main *****************
  3735 ;; Defined at:
  3736 ;;		line 7 in file "../src/Main_B1.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  argc            2   75[BANK0 ] int 
  3739 ;;  argv            2   77[BANK0 ] PTR PTR unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;		None
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  2   75[BANK0 ] int 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 17F/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3751 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3754 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3755 ;;Total ram usage:        4 bytes
  3756 ;; Hardware stack levels required when called:   15
  3757 ;; This function calls:
  3758 ;;		_Buzzer_Initialization
  3759 ;;		_Buzzer_Main
  3760 ;;		_CC2500_PowerOnInitial
  3761 ;;		_DelayOff_Initialization
  3762 ;;		_DelayOff_Main
  3763 ;;		_DimmerLights_Initialization
  3764 ;;		_DimmerLights_Main
  3765 ;;		_Flash_Memory_Initialization
  3766 ;;		_Flash_Memory_Main
  3767 ;;		_LED_Initialization
  3768 ;;		_LED_Main
  3769 ;;		_Mcu_Initialization
  3770 ;;		_RF_Initialization
  3771 ;;		_RF_Main
  3772 ;;		_Switch_Initialization
  3773 ;;		_Switch_Main
  3774 ;;		_Temp_Initialization
  3775 ;;		_Temp_Main
  3776 ;;		_WDT_Main
  3777 ;;		_getTemp_AD
  3778 ;;		_myMain_Initialization
  3779 ;;		_my_Main
  3780 ;; This function is called by:
  3781 ;;		Startup code after reset
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _main
  3787  1660                     _main:	
  3788                           
  3789                           ;Main_B1.c: 9: myMain_Initialization();
  3790                           
  3791                           ;incstack = 0
  3792                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3793  1660  319D  258C  3196   	fcall	_myMain_Initialization
  3794                           
  3795                           ;Main_B1.c: 10: Mcu_Initialization();
  3796  1663  319E  262F  3196   	fcall	_Mcu_Initialization
  3797                           
  3798                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3799  1666  3184  2467  3196   	fcall	_Flash_Memory_Initialization
  3800                           
  3801                           ;Main_B1.c: 12: LED_Initialization();
  3802  1669  319D  25BB  3196   	fcall	_LED_Initialization
  3803                           
  3804                           ;Main_B1.c: 13: Buzzer_Initialization();
  3805  166C  319C  246B  3196   	fcall	_Buzzer_Initialization
  3806                           
  3807                           ;Main_B1.c: 15: ;;
  3808                           ;Main_B1.c: 16: Temp_Initialization();
  3809  166F  319C  2477  3196   	fcall	_Temp_Initialization
  3810                           
  3811                           ;Main_B1.c: 17: ;;
  3812                           ;Main_B1.c: 18: ;;
  3813                           ;Main_B1.c: 19: DelayOff_Initialization();
  3814  1672  319C  24F6  3196   	fcall	_DelayOff_Initialization
  3815                           
  3816                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3817  1675  3191  212C  3196   	fcall	_DimmerLights_Initialization
  3818                           
  3819                           ;Main_B1.c: 22: ;;
  3820                           ;Main_B1.c: 23: ;;
  3821                           ;Main_B1.c: 24: ;;
  3822                           ;Main_B1.c: 25: Switch_Initialization();
  3823  1678  319E  260C  3196   	fcall	_Switch_Initialization
  3824                           
  3825                           ;Main_B1.c: 26: RF_Initialization();
  3826  167B  319C  246E  3196   	fcall	_RF_Initialization
  3827                           
  3828                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3829  167E  319E  267B  3196   	fcall	_CC2500_PowerOnInitial
  3830  1681                     l8632:	
  3831                           ;Main_B1.c: 28: ;;
  3832                           ;Main_B1.c: 31: while (1) {
  3833                           
  3834                           
  3835                           ;Main_B1.c: 33: if (myMain.PowerON) {
  3836  1681  0021               	movlb	1	; select bank1
  3837  1682  1C20               	btfss	_myMain^(0+128),0
  3838  1683  2E88               	goto	l8636
  3839                           
  3840                           ;Main_B1.c: 35: ;;
  3841                           ;Main_B1.c: 39: ;;
  3842                           ;Main_B1.c: 43: getTemp_AD(0x09);
  3843  1684  3009               	movlw	9
  3844  1685  3193  23C3  3196   	fcall	_getTemp_AD
  3845  1688                     l8636:	
  3846                           ;Main_B1.c: 47: ;;
  3847                           
  3848                           
  3849                           ;Main_B1.c: 62: }
  3850                           ;Main_B1.c: 65: if (myMain.T0_Timerout) {
  3851  1688  0021               	movlb	1	; select bank1
  3852  1689  1CA0               	btfss	_myMain^(0+128),1
  3853  168A  2E81               	goto	l8632
  3854                           
  3855                           ;Main_B1.c: 66: myMain.T0_Timerout = 0;
  3856  168B  10A0               	bcf	_myMain^(0+128),1
  3857                           
  3858                           ;Main_B1.c: 67: my_Main();
  3859  168C  3195  253A  3196   	fcall	_my_Main
  3860                           
  3861                           ;Main_B1.c: 68: WDT_Main();
  3862  168F  319F  2770  3196   	fcall	_WDT_Main
  3863                           
  3864                           ;Main_B1.c: 69: ;;
  3865                           ;Main_B1.c: 70: ;;
  3866                           ;Main_B1.c: 71: if (myMain.PowerON) {
  3867  1692  0021               	movlb	1	; select bank1
  3868  1693  1C20               	btfss	_myMain^(0+128),0
  3869  1694  2E81               	goto	l8632
  3870                           
  3871                           ;Main_B1.c: 72: Flash_Memory_Main();
  3872  1695  3190  20AD  3196   	fcall	_Flash_Memory_Main
  3873                           
  3874                           ;Main_B1.c: 74: LED_Main();
  3875  1698  319D  25CB  3196   	fcall	_LED_Main
  3876                           
  3877                           ;Main_B1.c: 75: Buzzer_Main();
  3878  169B  3195  25C8  3196   	fcall	_Buzzer_Main
  3879                           
  3880                           ;Main_B1.c: 77: ;;
  3881                           ;Main_B1.c: 78: Temp_Main();
  3882  169E  319C  247A  3196   	fcall	_Temp_Main
  3883                           
  3884                           ;Main_B1.c: 79: ;;
  3885                           ;Main_B1.c: 80: ;;
  3886                           ;Main_B1.c: 82: ;;
  3887                           ;Main_B1.c: 83: DimmerLights_Main();
  3888  16A1  319D  255F  3196   	fcall	_DimmerLights_Main
  3889                           
  3890                           ;Main_B1.c: 84: Switch_Main();
  3891  16A4  319D  251A  3196   	fcall	_Switch_Main
  3892                           
  3893                           ;Main_B1.c: 85: ;;
  3894                           ;Main_B1.c: 86: ;;
  3895                           ;Main_B1.c: 88: RF_Main();
  3896  16A7  319C  2471  3196   	fcall	_RF_Main
  3897                           
  3898                           ;Main_B1.c: 89: DelayOff_Main();
  3899  16AA  319D  2502  3196   	fcall	_DelayOff_Main
  3900                           
  3901                           ;Main_B1.c: 90: ;;
  3902  16AD  2E81               	goto	l8632
  3903  16AE                     __end_of_main:	
  3904                           ;Main_B1.c: 91: }
  3905                           ;Main_B1.c: 92: }
  3906                           ;Main_B1.c: 110: }
  3907                           ;Main_B1.c: 111: return (0);
  3908                           ;	Return value of _main is never used
  3909                           
  3910                           
  3911                           	psect	text1
  3912  153A                     __ptext1:	
  3913 ;; *************** function _my_Main *****************
  3914 ;; Defined at:
  3915 ;;		line 128 in file "../src/Main_B1.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;		None               void
  3922 ;; Registers used:
  3923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    7
  3936 ;; This function calls:
  3937 ;;		_setBuz
  3938 ;;		_setRF_Enable
  3939 ;;		_setSw_Enable
  3940 ;;		_setTemp_Enable
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _my_Main
  3948  153A                     _my_Main:	
  3949                           
  3950                           ;Main_B1.c: 130: if (myMain.PowerON == 0) {
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3954  153A  0021               	movlb	1	; select bank1
  3955  153B  1820               	btfsc	_myMain^(0+128),0
  3956  153C  2D67               	goto	l8012
  3957                           
  3958                           ;Main_B1.c: 131: myMain.PowerCount++;
  3959  153D  3001               	movlw	1
  3960  153E  07A1               	addwf	(_myMain^(0+128)+1),f
  3961  153F  3000               	movlw	0
  3962  1540  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3963                           
  3964                           ;Main_B1.c: 132: if (myMain.PowerCount == 150)
  3965  1541  3001               	movlw	1
  3966  1542  3EA0               	addlw	_myMain& (0+255)
  3967  1543  0086               	movwf	6
  3968  1544  0187               	clrf	7
  3969  1545  3F40               	moviw [0]fsr1
  3970  1546  3A96               	xorlw	150
  3971  1547  1D03               	skipz
  3972  1548  2D4B               	goto	u7685
  3973  1549  3F41               	moviw [1]fsr1
  3974  154A  3A00               	xorlw	0
  3975  154B                     u7685:	
  3976  154B  1D03               	skipz
  3977  154C  0008               	return
  3978                           
  3979                           ;Main_B1.c: 133: {
  3980                           ;Main_B1.c: 134: myMain.PowerCount = 0;
  3981  154D  01A1               	clrf	(_myMain^(0+128)+1)
  3982  154E  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3983                           
  3984                           ;Main_B1.c: 135: myMain.PowerON = 1;
  3985  154F  1420               	bsf	_myMain^(0+128),0
  3986                           
  3987                           ;Main_B1.c: 138: setTemp_Enable(1);
  3988  1550  3001               	movlw	1
  3989  1551  319C  24CB  3195   	fcall	_setTemp_Enable
  3990                           
  3991                           ;Main_B1.c: 142: ;;
  3992                           ;Main_B1.c: 148: setBuz(3, 50);
  3993  1554  3032               	movlw	50
  3994  1555  0020               	movlb	0	; select bank0
  3995  1556  00A9               	movwf	setBuz@time
  3996  1557  3000               	movlw	0
  3997  1558  00AA               	movwf	setBuz@time+1
  3998  1559  3003               	movlw	3
  3999  155A  3197  27A7  3195   	fcall	_setBuz
  4000                           
  4001                           ;Main_B1.c: 149: myMain.SelfTest = 1;
  4002  155D  0021               	movlb	1	; select bank1
  4003  155E  1720               	bsf	_myMain^(0+128),6
  4004                           
  4005                           ;Main_B1.c: 151: setSw_Enable(1);
  4006  155F  3001               	movlw	1
  4007  1560  3192  2200  3195   	fcall	_setSw_Enable
  4008                           
  4009                           ;Main_B1.c: 154: setRF_Enable(1);
  4010  1563  3001               	movlw	1
  4011  1564  319D  2533         	fcall	_setRF_Enable
  4012                           
  4013                           ;Main_B1.c: 158: }
  4014                           ;Main_B1.c: 159: } else {
  4015  1566  0008               	return
  4016  1567                     l8012:	
  4017                           
  4018                           ;Main_B1.c: 167: myMain.Count1++;
  4019  1567  3001               	movlw	1
  4020  1568  0021               	movlb	1	; select bank1
  4021  1569  07A5               	addwf	(_myMain^(0+128)+5),f
  4022  156A  3000               	movlw	0
  4023  156B  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4024                           
  4025                           ;Main_B1.c: 168: if (myMain.Count1 == 100)
  4026  156C  3005               	movlw	5
  4027  156D  3EA0               	addlw	_myMain& (0+255)
  4028  156E  0086               	movwf	6
  4029  156F  0187               	clrf	7
  4030  1570  3F40               	moviw [0]fsr1
  4031  1571  3A64               	xorlw	100
  4032  1572  1D03               	skipz
  4033  1573  2D76               	goto	u7695
  4034  1574  3F41               	moviw [1]fsr1
  4035  1575  3A00               	xorlw	0
  4036  1576                     u7695:	
  4037  1576  1D03               	skipz
  4038  1577  0008               	return
  4039                           
  4040                           ;Main_B1.c: 169: {
  4041                           ;Main_B1.c: 170: myMain.Count1 = 0;
  4042  1578  01A5               	clrf	(_myMain^(0+128)+5)
  4043  1579  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4044                           
  4045                           ;Main_B1.c: 183: if (myMain.Flag) {
  4046  157A  1DA0               	btfss	_myMain^(0+128),3
  4047  157B  2D7E               	goto	l1662
  4048                           
  4049                           ;Main_B1.c: 184: myMain.Flag = 0;
  4050  157C  11A0               	bcf	_myMain^(0+128),3
  4051                           
  4052                           ;Main_B1.c: 193: } else {
  4053  157D  0008               	return
  4054  157E                     l1662:	
  4055                           
  4056                           ;Main_B1.c: 194: myMain.Flag = 1;
  4057  157E  15A0               	bsf	_myMain^(0+128),3
  4058  157F  0008               	return
  4059  1580                     __end_of_my_Main:	
  4060                           
  4061                           	psect	text2
  4062  1CCB                     __ptext2:	
  4063 ;; *************** function _setTemp_Enable *****************
  4064 ;; Defined at:
  4065 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  command         1    wreg     unsigned char 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  command         1    0[BANK0 ] unsigned char 
  4070 ;; Return value:  Size  Location     Type
  4071 ;;		None               void
  4072 ;; Registers used:
  4073 ;;		wreg
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;Total ram usage:        1 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_my_Main
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           
  4094                           ;psect for function _setTemp_Enable
  4095  1CCB                     _setTemp_Enable:	
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _setTemp_Enable: [wreg]
  4099                           ;setTemp_Enable@command stored from wreg
  4100  1CCB  0020               	movlb	0	; select bank0
  4101  1CCC  00A0               	movwf	setTemp_Enable@command
  4102                           
  4103                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4104  1CCD  0820               	movf	setTemp_Enable@command,w
  4105  1CCE  0021               	movlb	1	; select bank1
  4106  1CCF  1055               	bcf	_Temp1^(0+128),0
  4107  1CD0  1D03               	skipz
  4108  1CD1  1455               	bsf	_Temp1^(0+128),0
  4109  1CD2  0008               	return
  4110  1CD3                     __end_of_setTemp_Enable:	
  4111                           
  4112                           	psect	text3
  4113  1D8C                     __ptext3:	
  4114 ;; *************** function _myMain_Initialization *****************
  4115 ;; Defined at:
  4116 ;;		line 116 in file "../src/Main_B1.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg, fsr1l, fsr1h
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;Total ram usage:        1 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    5
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_main
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function _myMain_Initialization
  4146  1D8C                     _myMain_Initialization:	
  4147                           
  4148                           ;Main_B1.c: 118: product = &_product;
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4152  1D8C  3020               	movlw	__product& (0+255)
  4153  1D8D  0020               	movlb	0	; select bank0
  4154  1D8E  00A0               	movwf	??_myMain_Initialization
  4155  1D8F  0820               	movf	??_myMain_Initialization,w
  4156  1D90  00EF               	movwf	_product
  4157                           
  4158                           ;Main_B1.c: 119: product->Data[20] = 211;
  4159  1D91  30D3               	movlw	211
  4160  1D92  00A0               	movwf	??_myMain_Initialization
  4161  1D93  086F               	movf	_product,w
  4162  1D94  3E14               	addlw	20
  4163  1D95  0086               	movwf	6
  4164  1D96  3002               	movlw	2	; select bank4/5
  4165  1D97  0087               	movwf	7
  4166  1D98  0820               	movf	??_myMain_Initialization,w
  4167  1D99  0081               	movwf	1
  4168  1D9A  0008               	return
  4169  1D9B                     __end_of_myMain_Initialization:	
  4170                           
  4171                           	psect	text4
  4172  13C3                     __ptext4:	
  4173 ;; *************** function _getTemp_AD *****************
  4174 ;; Defined at:
  4175 ;;		line 31 in file "../src/OverTemperature_B1.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  channel         1    wreg     unsigned char 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  channel         1    5[BANK0 ] unsigned char 
  4180 ;; Return value:  Size  Location     Type
  4181 ;;		None               void
  4182 ;; Registers used:
  4183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;Total ram usage:        2 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    7
  4196 ;; This function calls:
  4197 ;;		_getAD
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           
  4204                           ;psect for function _getTemp_AD
  4205  13C3                     _getTemp_AD:	
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4209                           ;getTemp_AD@channel stored from wreg
  4210  13C3  0020               	movlb	0	; select bank0
  4211  13C4  00A5               	movwf	getTemp_AD@channel
  4212                           
  4213                           ;OverTemperature_B1.c: 32: if (Temp1.ADtoGO == 1) {
  4214  13C5  0021               	movlb	1	; select bank1
  4215  13C6  1D55               	btfss	_Temp1^(0+128),2
  4216  13C7  0008               	return
  4217                           
  4218                           ;OverTemperature_B1.c: 33: Temp1.ADRES = getAD(channel, 0xf0);
  4219  13C8  30F0               	movlw	240
  4220  13C9  0020               	movlb	0	; select bank0
  4221  13CA  00A4               	movwf	??_getTemp_AD
  4222  13CB  0824               	movf	??_getTemp_AD,w
  4223  13CC  00A0               	movwf	getAD@adcon1
  4224  13CD  0825               	movf	getTemp_AD@channel,w
  4225  13CE  3190  20EC  3193   	fcall	_getAD
  4226  13D1  0020               	movlb	0	; select bank0
  4227  13D2  0821               	movf	?_getAD+1,w
  4228  13D3  0021               	movlb	1	; select bank1
  4229  13D4  01E2               	clrf	((_Temp1+1)^(0+128)+12)
  4230  13D5  07E2               	addwf	((_Temp1+1)^(0+128)+12),f
  4231  13D6  0020               	movlb	0	; select bank0
  4232  13D7  0820               	movf	?_getAD,w
  4233  13D8  0021               	movlb	1	; select bank1
  4234  13D9  01E1               	clrf	(_Temp1^(0+128)+12)
  4235  13DA  07E1               	addwf	(_Temp1^(0+128)+12),f
  4236                           
  4237                           ;OverTemperature_B1.c: 34: if (Temp1.ADH[0] < Temp1.ADRES) {
  4238  13DB  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4239  13DC  025E               	subwf	((_Temp1+1)^(0+128)+8),w
  4240  13DD  1D03               	skipz
  4241  13DE  2BE1               	goto	u7655
  4242  13DF  0861               	movf	(_Temp1^(0+128)+12),w
  4243  13E0  025D               	subwf	(_Temp1^(0+128)+8),w
  4244  13E1                     u7655:	
  4245  13E1  1803               	skipnc
  4246  13E2  2BEA               	goto	l7988
  4247                           
  4248                           ;OverTemperature_B1.c: 35: Temp1.ADH[0] = Temp1.ADRES;
  4249  13E3  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4250  13E4  01DE               	clrf	((_Temp1+1)^(0+128)+8)
  4251  13E5  07DE               	addwf	((_Temp1+1)^(0+128)+8),f
  4252  13E6  0861               	movf	(_Temp1^(0+128)+12),w
  4253  13E7  01DD               	clrf	(_Temp1^(0+128)+8)
  4254  13E8  07DD               	addwf	(_Temp1^(0+128)+8),f
  4255                           
  4256                           ;OverTemperature_B1.c: 36: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4257  13E9  0008               	return
  4258  13EA                     l7988:	
  4259  13EA  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4260  13EB  0260               	subwf	((_Temp1+1)^(0+128)+10),w
  4261  13EC  1D03               	skipz
  4262  13ED  2BF0               	goto	u7665
  4263  13EE  0861               	movf	(_Temp1^(0+128)+12),w
  4264  13EF  025F               	subwf	(_Temp1^(0+128)+10),w
  4265  13F0                     u7665:	
  4266  13F0  1803               	skipnc
  4267  13F1  0008               	return
  4268                           
  4269                           ;OverTemperature_B1.c: 37: Temp1.ADH[1] = Temp1.ADRES;
  4270  13F2  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4271  13F3  01E0               	clrf	((_Temp1+1)^(0+128)+10)
  4272  13F4  07E0               	addwf	((_Temp1+1)^(0+128)+10),f
  4273  13F5  0861               	movf	(_Temp1^(0+128)+12),w
  4274  13F6  01DF               	clrf	(_Temp1^(0+128)+10)
  4275  13F7  07DF               	addwf	(_Temp1^(0+128)+10),f
  4276  13F8  0008               	return
  4277  13F9                     __end_of_getTemp_AD:	
  4278                           
  4279                           	psect	text5
  4280  10EC                     __ptext5:	
  4281 ;; *************** function _getAD *****************
  4282 ;; Defined at:
  4283 ;;		line 343 in file "../src/MCU_B1.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  adcon0          1    wreg     unsigned char 
  4286 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  2    0[BANK0 ] int 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4298 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;Total ram usage:        4 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    6
  4305 ;; This function calls:
  4306 ;;		_Timeout_Counter
  4307 ;;		_set_TimeoutCleared
  4308 ;; This function is called by:
  4309 ;;		_getTemp_AD
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _getAD
  4315  10EC                     _getAD:	
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4319                           ;getAD@adcon0 stored from wreg
  4320  10EC  0020               	movlb	0	; select bank0
  4321  10ED  00A3               	movwf	getAD@adcon0
  4322                           
  4323                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4324  10EE  0823               	movf	getAD@adcon0,w
  4325  10EF  0021               	movlb	1	; select bank1
  4326  10F0  009D               	movwf	29	;volatile
  4327                           
  4328                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4329  10F1  0020               	movlb	0	; select bank0
  4330  10F2  0820               	movf	getAD@adcon1,w
  4331  10F3  0021               	movlb	1	; select bank1
  4332  10F4  009E               	movwf	30	;volatile
  4333                           
  4334                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4335  10F5  149D               	bsf	29,1	;volatile
  4336                           
  4337                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4338  10F6  28FA               	goto	l7538
  4339  10F7                     l7536:	
  4340                           
  4341                           ;MCU_B1.c: 348: Timeout_Counter();
  4342  10F7  319E  26A6  3190   	fcall	_Timeout_Counter
  4343  10FA                     l7538:	
  4344  10FA  0021               	movlb	1	; select bank1
  4345  10FB  1C9D               	btfss	29,1	;volatile
  4346  10FC  28FF               	goto	l7542
  4347  10FD  1D2F               	btfss	(_myMain^(0+128)+15),2
  4348  10FE  28F7               	goto	l7536
  4349  10FF                     l7542:	
  4350                           
  4351                           ;MCU_B1.c: 349: };
  4352                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4353  10FF  319C  248D         	fcall	_set_TimeoutCleared
  4354                           
  4355                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4356  1101  0021               	movlb	1	; select bank1
  4357  1102  081C               	movf	28,w	;volatile
  4358  1103  0020               	movlb	0	; select bank0
  4359  1104  01A1               	clrf	?_getAD+1
  4360  1105  07A1               	addwf	?_getAD+1,f
  4361  1106  0021               	movlb	1	; select bank1
  4362  1107  081B               	movf	27,w	;volatile
  4363  1108  0020               	movlb	0	; select bank0
  4364  1109  01A0               	clrf	?_getAD
  4365  110A  07A0               	addwf	?_getAD,f
  4366  110B  0008               	return
  4367  110C                     __end_of_getAD:	
  4368                           
  4369                           	psect	text6
  4370  1F70                     __ptext6:	
  4371 ;; *************** function _WDT_Main *****************
  4372 ;; Defined at:
  4373 ;;		line 903 in file "../src/MCU_B1.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;		None
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;		None
  4378 ;; Return value:  Size  Location     Type
  4379 ;;		None               void
  4380 ;; Registers used:
  4381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;Total ram usage:        1 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    6
  4394 ;; This function calls:
  4395 ;;		_WDT_Clearing
  4396 ;; This function is called by:
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _WDT_Main
  4403  1F70                     _WDT_Main:	
  4404                           
  4405                           ;MCU_B1.c: 904: if (WDT->Enable == 1) {
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4409  1F70  0021               	movlb	1	; select bank1
  4410  1F71  086F               	movf	_WDT^(0+128),w
  4411  1F72  0086               	movwf	6
  4412  1F73  0187               	clrf	7
  4413  1F74  1C01               	btfss	1,0
  4414  1F75  0008               	return
  4415                           
  4416                           ;MCU_B1.c: 905: if (WDT->Count-- > 0) {
  4417  1F76  0A6F               	incf	_WDT^(0+128),w
  4418  1F77  0086               	movwf	6
  4419  1F78  0187               	clrf	7
  4420  1F79  3001               	movlw	1
  4421  1F7A  0281               	subwf	1,f
  4422  1F7B  0801               	movf	1,w
  4423  1F7C  3AFF               	xorlw	255
  4424  1F7D  1903               	skipnz
  4425  1F7E  0008               	return
  4426                           
  4427                           ;MCU_B1.c: 906: WDT->Count = 10;
  4428  1F7F  300A               	movlw	10
  4429  1F80  0020               	movlb	0	; select bank0
  4430  1F81  00A0               	movwf	??_WDT_Main
  4431  1F82  0021               	movlb	1	; select bank1
  4432  1F83  0A6F               	incf	_WDT^(0+128),w
  4433  1F84  0086               	movwf	6
  4434  1F85  0187               	clrf	7
  4435  1F86  0020               	movlb	0	; select bank0
  4436  1F87  0820               	movf	??_WDT_Main,w
  4437  1F88  0081               	movwf	1
  4438                           
  4439                           ;MCU_B1.c: 907: WDT_Clearing();
  4440  1F89  3180  2002         	fcall	_WDT_Clearing
  4441  1F8B  0008               	return
  4442  1F8C                     __end_of_WDT_Main:	
  4443                           
  4444                           	psect	text7
  4445  0002                     __ptext7:	
  4446 ;; *************** function _WDT_Clearing *****************
  4447 ;; Defined at:
  4448 ;;		line 913 in file "../src/MCU_B1.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;		None               void
  4455 ;; Registers used:
  4456 ;;		None
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;Total ram usage:        0 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    5
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_WDT_Main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _WDT_Clearing
  4478  0002                     _WDT_Clearing:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _WDT_Clearing: []
  4482  0002  0064               	clrwdt	;# 
  4483  0003  0008               	return
  4484  0004                     __end_of_WDT_Clearing:	
  4485                           
  4486                           	psect	text8
  4487  1C7A                     __ptext8:	
  4488 ;; *************** function _Temp_Main *****************
  4489 ;; Defined at:
  4490 ;;		line 48 in file "../src/OverTemperature_B1.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;		None               void
  4497 ;; Registers used:
  4498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:   11
  4511 ;; This function calls:
  4512 ;;		_setTemp_Main
  4513 ;; This function is called by:
  4514 ;;		_main
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           
  4519                           ;psect for function _Temp_Main
  4520  1C7A                     _Temp_Main:	
  4521                           
  4522                           ;OverTemperature_B1.c: 50: setTemp_Main();
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4526  1C7A  318C  245E         	fcall	_setTemp_Main
  4527  1C7C  0008               	return
  4528  1C7D                     __end_of_Temp_Main:	
  4529                           
  4530                           	psect	text9
  4531  0C5E                     __ptext9:	
  4532 ;; *************** function _setTemp_Main *****************
  4533 ;; Defined at:
  4534 ;;		line 55 in file "../src/OverTemperature_B1.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;		None               void
  4541 ;; Registers used:
  4542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;Total ram usage:        1 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:   10
  4555 ;; This function calls:
  4556 ;;		_setOverTemp_Exceptions
  4557 ;; This function is called by:
  4558 ;;		_Temp_Main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _setTemp_Main
  4564  0C5E                     _setTemp_Main:	
  4565                           
  4566                           ;OverTemperature_B1.c: 56: if (Temp1.Enable == 1) {
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4570  0C5E  0021               	movlb	1	; select bank1
  4571  0C5F  1C55               	btfss	_Temp1^(0+128),0
  4572  0C60  0008               	return
  4573                           
  4574                           ;OverTemperature_B1.c: 57: if (Temp1.ADtoGO == 0) {
  4575  0C61  1955               	btfsc	_Temp1^(0+128),2
  4576  0C62  2C73               	goto	l8500
  4577                           
  4578                           ;OverTemperature_B1.c: 58: Temp1.Time++;
  4579  0C63  3001               	movlw	1
  4580  0C64  07D6               	addwf	(_Temp1^(0+128)+1),f
  4581  0C65  3000               	movlw	0
  4582  0C66  3DD7               	addwfc	((_Temp1+1)^(0+128)+1),f
  4583                           
  4584                           ;OverTemperature_B1.c: 60: {
  4585                           ;OverTemperature_B1.c: 61: if (1 == 1 && 1 == 1) {
  4586  0C67  3001               	movlw	1
  4587  0C68  0257               	subwf	((_Temp1+1)^(0+128)+1),w
  4588  0C69  30F4               	movlw	244
  4589  0C6A  1903               	skipnz
  4590  0C6B  0256               	subwf	(_Temp1^(0+128)+1),w
  4591  0C6C  1C03               	skipc
  4592  0C6D  0008               	return
  4593                           
  4594                           ;OverTemperature_B1.c: 62: Temp1.Time = 0;
  4595  0C6E  01D6               	clrf	(_Temp1^(0+128)+1)
  4596  0C6F  01D7               	clrf	((_Temp1+1)^(0+128)+1)
  4597                           
  4598                           ;OverTemperature_B1.c: 63: Temp1.ADtoGO = 0;
  4599  0C70  1155               	bcf	_Temp1^(0+128),2
  4600                           
  4601                           ;OverTemperature_B1.c: 64: Temp1.Safe = 0;
  4602  0C71  1255               	bcf	_Temp1^(0+128),4
  4603                           
  4604                           ;OverTemperature_B1.c: 65: } else {
  4605  0C72  0008               	return
  4606  0C73                     l8500:	
  4607                           ;OverTemperature_B1.c: 67: }
  4608                           ;OverTemperature_B1.c: 68: }
  4609                           ;OverTemperature_B1.c: 69: } else {
  4610                           
  4611                           ;OverTemperature_B1.c: 66: Temp1.Time = 1000;
  4612                           
  4613                           
  4614                           ;OverTemperature_B1.c: 70: Temp1.Time++;
  4615  0C73  3001               	movlw	1
  4616  0C74  07D6               	addwf	(_Temp1^(0+128)+1),f
  4617  0C75  3000               	movlw	0
  4618  0C76  3DD7               	addwfc	((_Temp1+1)^(0+128)+1),f
  4619                           
  4620                           ;OverTemperature_B1.c: 71: if (Temp1.Time >= 4)
  4621  0C77  3000               	movlw	0
  4622  0C78  0257               	subwf	((_Temp1+1)^(0+128)+1),w
  4623  0C79  3004               	movlw	4
  4624  0C7A  1903               	skipnz
  4625  0C7B  0256               	subwf	(_Temp1^(0+128)+1),w
  4626  0C7C  1C03               	skipc
  4627  0C7D  0008               	return
  4628                           
  4629                           ;OverTemperature_B1.c: 72: {
  4630                           ;OverTemperature_B1.c: 73: Temp1.Time = 0;
  4631  0C7E  01D6               	clrf	(_Temp1^(0+128)+1)
  4632  0C7F  01D7               	clrf	((_Temp1+1)^(0+128)+1)
  4633                           
  4634                           ;OverTemperature_B1.c: 74: Temp1.ADtoGO = 0;
  4635  0C80  1155               	bcf	_Temp1^(0+128),2
  4636                           
  4637                           ;OverTemperature_B1.c: 75: Temp1.AD = Temp1.ADH[1];
  4638  0C81  0860               	movf	((_Temp1+1)^(0+128)+10),w
  4639  0C82  01DC               	clrf	((_Temp1+1)^(0+128)+6)
  4640  0C83  07DC               	addwf	((_Temp1+1)^(0+128)+6),f
  4641  0C84  085F               	movf	(_Temp1^(0+128)+10),w
  4642  0C85  01DB               	clrf	(_Temp1^(0+128)+6)
  4643  0C86  07DB               	addwf	(_Temp1^(0+128)+6),f
  4644                           
  4645                           ;OverTemperature_B1.c: 76: if (Temp1.ERROR == 1) {
  4646  0C87  1CD5               	btfss	_Temp1^(0+128),1
  4647  0C88  2CA0               	goto	l8522
  4648                           
  4649                           ;OverTemperature_B1.c: 77: if (Temp1.AD >= 600) {
  4650  0C89  3002               	movlw	2
  4651  0C8A  025C               	subwf	((_Temp1+1)^(0+128)+6),w
  4652  0C8B  3058               	movlw	88
  4653  0C8C  1903               	skipnz
  4654  0C8D  025B               	subwf	(_Temp1^(0+128)+6),w
  4655  0C8E  1C03               	skipc
  4656  0C8F  2CB7               	goto	l8532
  4657                           
  4658                           ;OverTemperature_B1.c: 78: Temp1.Count++;
  4659  0C90  3001               	movlw	1
  4660  0C91  0020               	movlb	0	; select bank0
  4661  0C92  00B1               	movwf	??_setTemp_Main
  4662  0C93  0831               	movf	??_setTemp_Main,w
  4663  0C94  0021               	movlb	1	; select bank1
  4664  0C95  07D8               	addwf	(_Temp1^(0+128)+3),f
  4665                           
  4666                           ;OverTemperature_B1.c: 79: if (Temp1.Count >= 3) {
  4667  0C96  3003               	movlw	3
  4668  0C97  0258               	subwf	(_Temp1^(0+128)+3),w
  4669  0C98  1C03               	skipc
  4670  0C99  2CB9               	goto	l8534
  4671                           
  4672                           ;OverTemperature_B1.c: 80: Temp1.Count = 0;
  4673  0C9A  01D8               	clrf	(_Temp1^(0+128)+3)
  4674                           
  4675                           ;OverTemperature_B1.c: 81: setOverTemp_Exceptions(0);
  4676  0C9B  3000               	movlw	0
  4677  0C9C  3194  2471  318C   	fcall	_setOverTemp_Exceptions
  4678                           
  4679                           ;OverTemperature_B1.c: 82: }
  4680                           ;OverTemperature_B1.c: 83: } else {
  4681  0C9F  2CB9               	goto	l8534
  4682  0CA0                     l8522:	
  4683                           ;OverTemperature_B1.c: 85: }
  4684                           ;OverTemperature_B1.c: 86: } else {
  4685                           
  4686                           ;OverTemperature_B1.c: 84: Temp1.Count = 0;
  4687                           
  4688                           
  4689                           ;OverTemperature_B1.c: 87: if (Temp1.AD <= 550) {
  4690  0CA0  3002               	movlw	2
  4691  0CA1  025C               	subwf	((_Temp1+1)^(0+128)+6),w
  4692  0CA2  3027               	movlw	39
  4693  0CA3  1903               	skipnz
  4694  0CA4  025B               	subwf	(_Temp1^(0+128)+6),w
  4695  0CA5  1803               	skipnc
  4696  0CA6  2CB7               	goto	l8532
  4697                           
  4698                           ;OverTemperature_B1.c: 88: Temp1.Count++;
  4699  0CA7  3001               	movlw	1
  4700  0CA8  0020               	movlb	0	; select bank0
  4701  0CA9  00B1               	movwf	??_setTemp_Main
  4702  0CAA  0831               	movf	??_setTemp_Main,w
  4703  0CAB  0021               	movlb	1	; select bank1
  4704  0CAC  07D8               	addwf	(_Temp1^(0+128)+3),f
  4705                           
  4706                           ;OverTemperature_B1.c: 89: if (Temp1.Count >= 3) {
  4707  0CAD  3003               	movlw	3
  4708  0CAE  0258               	subwf	(_Temp1^(0+128)+3),w
  4709  0CAF  1C03               	skipc
  4710  0CB0  2CB9               	goto	l8534
  4711                           
  4712                           ;OverTemperature_B1.c: 90: Temp1.Count = 0;
  4713  0CB1  01D8               	clrf	(_Temp1^(0+128)+3)
  4714                           
  4715                           ;OverTemperature_B1.c: 91: setOverTemp_Exceptions(1);
  4716  0CB2  3001               	movlw	1
  4717  0CB3  3194  2471  318C   	fcall	_setOverTemp_Exceptions
  4718                           
  4719                           ;OverTemperature_B1.c: 92: }
  4720                           ;OverTemperature_B1.c: 93: } else {
  4721  0CB6  2CB9               	goto	l8534
  4722  0CB7                     l8532:	
  4723                           
  4724                           ;OverTemperature_B1.c: 94: Temp1.Count = 0;
  4725  0CB7  0021               	movlb	1	; select bank1
  4726  0CB8  01D8               	clrf	(_Temp1^(0+128)+3)
  4727  0CB9                     l8534:	
  4728                           
  4729                           ;OverTemperature_B1.c: 95: }
  4730                           ;OverTemperature_B1.c: 96: }
  4731                           ;OverTemperature_B1.c: 97: if (Temp1.ERROR == 0) {
  4732  0CB9  0021               	movlb	1	; select bank1
  4733  0CBA  1CD5               	btfss	_Temp1^(0+128),1
  4734                           
  4735                           ;OverTemperature_B1.c: 98: Temp1.Safe = 1;
  4736  0CBB  1655               	bsf	_Temp1^(0+128),4
  4737                           
  4738                           ;OverTemperature_B1.c: 99: }
  4739                           ;OverTemperature_B1.c: 100: product->Data[24]=Temp1.AD >> 8;
  4740  0CBC  085C               	movf	((_Temp1+1)^(0+128)+6),w
  4741  0CBD  0020               	movlb	0	; select bank0
  4742  0CBE  00B1               	movwf	??_setTemp_Main
  4743  0CBF  086F               	movf	_product,w
  4744  0CC0  3E18               	addlw	24
  4745  0CC1  0086               	movwf	6
  4746  0CC2  3002               	movlw	2	; select bank4/5
  4747  0CC3  0087               	movwf	7
  4748  0CC4  0831               	movf	??_setTemp_Main,w
  4749  0CC5  0081               	movwf	1
  4750                           
  4751                           ;OverTemperature_B1.c: 101: product->Data[25]=Temp1.AD;
  4752  0CC6  0021               	movlb	1	; select bank1
  4753  0CC7  085B               	movf	(_Temp1^(0+128)+6),w
  4754  0CC8  0020               	movlb	0	; select bank0
  4755  0CC9  00B1               	movwf	??_setTemp_Main
  4756  0CCA  086F               	movf	_product,w
  4757  0CCB  3E19               	addlw	25
  4758  0CCC  0086               	movwf	6
  4759  0CCD  3002               	movlw	2	; select bank4/5
  4760  0CCE  0087               	movwf	7
  4761  0CCF  0831               	movf	??_setTemp_Main,w
  4762  0CD0  0081               	movwf	1
  4763                           
  4764                           ;OverTemperature_B1.c: 102: Temp1.ADH[0] = 0;
  4765  0CD1  0021               	movlb	1	; select bank1
  4766  0CD2  01DD               	clrf	(_Temp1^(0+128)+8)
  4767  0CD3  01DE               	clrf	((_Temp1+1)^(0+128)+8)
  4768                           
  4769                           ;OverTemperature_B1.c: 103: Temp1.ADH[1] = 0;
  4770  0CD4  01DF               	clrf	(_Temp1^(0+128)+10)
  4771  0CD5  01E0               	clrf	((_Temp1+1)^(0+128)+10)
  4772  0CD6  0008               	return
  4773  0CD7                     __end_of_setTemp_Main:	
  4774                           
  4775                           	psect	text10
  4776  1471                     __ptext10:	
  4777 ;; *************** function _setOverTemp_Exceptions *****************
  4778 ;; Defined at:
  4779 ;;		line 110 in file "../src/OverTemperature_B1.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  command         1    wreg     unsigned char 
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  command         1   16[BANK0 ] unsigned char 
  4784 ;;  i               1   15[BANK0 ] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;		None               void
  4787 ;; Registers used:
  4788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;Total ram usage:        3 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    9
  4801 ;; This function calls:
  4802 ;;		_DimmerLights_Exceptions
  4803 ;;		_setBuz
  4804 ;;		_setLED
  4805 ;;		_setRF_Enable
  4806 ;;		_setSw_Enable
  4807 ;; This function is called by:
  4808 ;;		_setTemp_Main
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function _setOverTemp_Exceptions
  4814  1471                     _setOverTemp_Exceptions:	
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4818                           ;setOverTemp_Exceptions@command stored from wreg
  4819  1471  0020               	movlb	0	; select bank0
  4820  1472  00B0               	movwf	setOverTemp_Exceptions@command
  4821                           
  4822                           ;OverTemperature_B1.c: 111: char i = command == 1 ? 0 : 1;
  4823  1473  0830               	movf	setOverTemp_Exceptions@command,w
  4824  1474  3A01               	xorlw	1
  4825  1475  3000               	movlw	0
  4826  1476  1D03               	skipz
  4827  1477  3001               	movlw	1
  4828  1478  00AE               	movwf	??_setOverTemp_Exceptions
  4829  1479  082E               	movf	??_setOverTemp_Exceptions,w
  4830  147A  00AF               	movwf	setOverTemp_Exceptions@i
  4831                           
  4832                           ;OverTemperature_B1.c: 112: Temp1.ERROR = command;
  4833  147B  0830               	movf	setOverTemp_Exceptions@command,w
  4834  147C  0021               	movlb	1	; select bank1
  4835  147D  10D5               	bcf	_Temp1^(0+128),1
  4836  147E  1D03               	skipz
  4837  147F  14D5               	bsf	_Temp1^(0+128),1
  4838                           
  4839                           ;OverTemperature_B1.c: 113: Temp1.Safe = i;
  4840  1480  0020               	movlb	0	; select bank0
  4841  1481  082F               	movf	setOverTemp_Exceptions@i,w
  4842  1482  0021               	movlb	1	; select bank1
  4843  1483  1255               	bcf	_Temp1^(0+128),4
  4844  1484  1D03               	skipz
  4845  1485  1655               	bsf	_Temp1^(0+128),4
  4846                           
  4847                           ;OverTemperature_B1.c: 114: if (command == 1) {
  4848  1486  0020               	movlb	0	; select bank0
  4849  1487  0830               	movf	setOverTemp_Exceptions@command,w
  4850  1488  3A01               	xorlw	1
  4851  1489  1D03               	skipz
  4852  148A  2C90               	goto	l8346
  4853                           
  4854                           ;OverTemperature_B1.c: 115: DimmerLights_Exceptions(1);
  4855  148B  3001               	movlw	1
  4856  148C  3197  2752  3194   	fcall	_DimmerLights_Exceptions
  4857                           
  4858                           ;OverTemperature_B1.c: 119: } else if (command == 0) {
  4859  148F  2C9C               	goto	l8350
  4860  1490                     l8346:	
  4861  1490  0020               	movlb	0	; select bank0
  4862  1491  08B0               	movf	setOverTemp_Exceptions@command,f
  4863  1492  1D03               	skipz
  4864  1493  2C9C               	goto	l8350
  4865                           
  4866                           ;OverTemperature_B1.c: 120: setBuz(2, 100);
  4867  1494  3064               	movlw	100
  4868  1495  00A9               	movwf	setBuz@time
  4869  1496  3000               	movlw	0
  4870  1497  00AA               	movwf	setBuz@time+1
  4871  1498  3002               	movlw	2
  4872  1499  3197  27A7  3194   	fcall	_setBuz
  4873  149C                     l8350:	
  4874                           
  4875                           ;OverTemperature_B1.c: 121: }
  4876                           ;OverTemperature_B1.c: 124: setLED(99, command + 10);
  4877  149C  0020               	movlb	0	; select bank0
  4878  149D  0830               	movf	setOverTemp_Exceptions@command,w
  4879  149E  3E0A               	addlw	10
  4880  149F  00AE               	movwf	??_setOverTemp_Exceptions
  4881  14A0  082E               	movf	??_setOverTemp_Exceptions,w
  4882  14A1  00A1               	movwf	setLED@command
  4883  14A2  3063               	movlw	99
  4884  14A3  318B  2372  3194   	fcall	_setLED
  4885                           
  4886                           ;OverTemperature_B1.c: 126: setSw_Enable(i);
  4887  14A6  0020               	movlb	0	; select bank0
  4888  14A7  082F               	movf	setOverTemp_Exceptions@i,w
  4889  14A8  3192  2200  3194   	fcall	_setSw_Enable
  4890                           
  4891                           ;OverTemperature_B1.c: 128: setRF_Enable(i);
  4892  14AB  0020               	movlb	0	; select bank0
  4893  14AC  082F               	movf	setOverTemp_Exceptions@i,w
  4894  14AD  319D  2533         	fcall	_setRF_Enable
  4895  14AF  0008               	return
  4896  14B0                     __end_of_setOverTemp_Exceptions:	
  4897                           
  4898                           	psect	text11
  4899  1200                     __ptext11:	
  4900 ;; *************** function _setSw_Enable *****************
  4901 ;; Defined at:
  4902 ;;		line 89 in file "../src/Switch_B1.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  command         1    wreg     unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  command         1    1[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;Total ram usage:        1 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    6
  4923 ;; This function calls:
  4924 ;;		_SwPointSelect
  4925 ;; This function is called by:
  4926 ;;		_my_Main
  4927 ;;		_setOverTemp_Exceptions
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           
  4932                           ;psect for function _setSw_Enable
  4933  1200                     _setSw_Enable:	
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4937                           ;setSw_Enable@command stored from wreg
  4938  1200  0020               	movlb	0	; select bank0
  4939  1201  00A1               	movwf	setSw_Enable@command
  4940                           
  4941                           ;Switch_B1.c: 92: SwPointSelect(1);
  4942  1202  3001               	movlw	1
  4943  1203  319F  27C6  3192   	fcall	_SwPointSelect
  4944                           
  4945                           ;Switch_B1.c: 93: Sw->Enable = command;
  4946  1206  0878               	movf	_Sw,w
  4947  1207  0086               	movwf	6
  4948  1208  0879               	movf	_Sw+1,w
  4949  1209  0087               	movwf	7
  4950  120A  0020               	movlb	0	; select bank0
  4951  120B  0821               	movf	setSw_Enable@command,w
  4952  120C  1001               	bcf	1,0
  4953  120D  1D03               	skipz
  4954  120E  1401               	bsf	1,0
  4955                           
  4956                           ;Switch_B1.c: 97: SwPointSelect(2);
  4957  120F  3002               	movlw	2
  4958  1210  319F  27C6  3192   	fcall	_SwPointSelect
  4959                           
  4960                           ;Switch_B1.c: 98: Sw->Enable = command;
  4961  1213  0878               	movf	_Sw,w
  4962  1214  0086               	movwf	6
  4963  1215  0879               	movf	_Sw+1,w
  4964  1216  0087               	movwf	7
  4965  1217  0020               	movlb	0	; select bank0
  4966  1218  0821               	movf	setSw_Enable@command,w
  4967  1219  1001               	bcf	1,0
  4968  121A  1D03               	skipz
  4969  121B  1401               	bsf	1,0
  4970                           
  4971                           ;Switch_B1.c: 102: SwPointSelect(3);
  4972  121C  3003               	movlw	3
  4973  121D  319F  27C6         	fcall	_SwPointSelect
  4974                           
  4975                           ;Switch_B1.c: 103: Sw->Enable = command;
  4976  121F  0878               	movf	_Sw,w
  4977  1220  0086               	movwf	6
  4978  1221  0879               	movf	_Sw+1,w
  4979  1222  0087               	movwf	7
  4980  1223  0020               	movlb	0	; select bank0
  4981  1224  0821               	movf	setSw_Enable@command,w
  4982  1225  1001               	bcf	1,0
  4983  1226  1D03               	skipz
  4984  1227  1401               	bsf	1,0
  4985  1228  0008               	return
  4986  1229                     __end_of_setSw_Enable:	
  4987                           
  4988                           	psect	text12
  4989  1D33                     __ptext12:	
  4990 ;; *************** function _setRF_Enable *****************
  4991 ;; Defined at:
  4992 ;;		line 176 in file "../src/RF_Control_B1.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  command         1    wreg     unsigned char 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  command         1    0[BANK0 ] unsigned char 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		wreg, status,2
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;Total ram usage:        1 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    5
  5013 ;; This function calls:
  5014 ;;		Nothing
  5015 ;; This function is called by:
  5016 ;;		_my_Main
  5017 ;;		_setOverTemp_Exceptions
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           
  5022                           ;psect for function _setRF_Enable
  5023  1D33                     _setRF_Enable:	
  5024                           
  5025                           ;incstack = 0
  5026                           ; Regs used in _setRF_Enable: [wreg+status,2]
  5027                           ;setRF_Enable@command stored from wreg
  5028  1D33  0020               	movlb	0	; select bank0
  5029  1D34  00A0               	movwf	setRF_Enable@command
  5030                           
  5031                           ;RF_Control_B1.c: 177: RF1.Enable = command;
  5032  1D35  0820               	movf	setRF_Enable@command,w
  5033  1D36  0021               	movlb	1	; select bank1
  5034  1D37  103E               	bcf	_RF1^(0+128),0
  5035  1D38  1D03               	skipz
  5036  1D39  143E               	bsf	_RF1^(0+128),0
  5037                           
  5038                           ;RF_Control_B1.c: 178: RF1.Learn = 0;
  5039  1D3A  133E               	bcf	_RF1^(0+128),6
  5040                           
  5041                           ;RF_Control_B1.c: 179: RF1.TransceiveGO = 0;
  5042  1D3B  113E               	bcf	_RF1^(0+128),2
  5043                           
  5044                           ;RF_Control_B1.c: 180: RF1.RxStatus = 0;
  5045  1D3C  11BE               	bcf	_RF1^(0+128),3
  5046                           
  5047                           ;RF_Control_B1.c: 181: RF1.ReceiveGO = 0;
  5048  1D3D  10BE               	bcf	_RF1^(0+128),1
  5049                           
  5050                           ;RF_Control_B1.c: 182: RF1.DebounceTime = 0;
  5051  1D3E  01C2               	clrf	(_RF1^(0+128)+4)
  5052                           
  5053                           ;RF_Control_B1.c: 183: RF1.Debounce = 0;
  5054  1D3F  12BE               	bcf	_RF1^(0+128),5
  5055  1D40  0008               	return
  5056  1D41                     __end_of_setRF_Enable:	
  5057                           
  5058                           	psect	text13
  5059  1752                     __ptext13:	
  5060 ;; *************** function _DimmerLights_Exceptions *****************
  5061 ;; Defined at:
  5062 ;;		line 513 in file "../src/Dimmer_B1.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  status          1    wreg     unsigned char 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  status          1   13[BANK0 ] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;		None               void
  5069 ;; Registers used:
  5070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;Total ram usage:        1 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    8
  5083 ;; This function calls:
  5084 ;;		_getDimmerLights_StatusFlag
  5085 ;;		_setBuz
  5086 ;;		_setDimmerLights_ERROR
  5087 ;;		_setDimmerLights_TriggerERROR
  5088 ;; This function is called by:
  5089 ;;		_setOverTemp_Exceptions
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           
  5094                           ;psect for function _DimmerLights_Exceptions
  5095  1752                     _DimmerLights_Exceptions:	
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5099                           ;DimmerLights_Exceptions@status stored from wreg
  5100  1752  0020               	movlb	0	; select bank0
  5101  1753  00AD               	movwf	DimmerLights_Exceptions@status
  5102                           
  5103                           ;Dimmer_B1.c: 514: if (status == 1) {
  5104  1754  082D               	movf	DimmerLights_Exceptions@status,w
  5105  1755  3A01               	xorlw	1
  5106  1756  1D03               	skipz
  5107  1757  2F68               	goto	l8280
  5108                           
  5109                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  5110  1758  319E  2653  3197   	fcall	_getDimmerLights_StatusFlag
  5111  175B  3A01               	xorlw	1
  5112  175C  1D03               	skipz
  5113  175D  2F80               	goto	l8288
  5114                           
  5115                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  5116  175E  302C               	movlw	44
  5117  175F  0020               	movlb	0	; select bank0
  5118  1760  00A9               	movwf	setBuz@time
  5119  1761  3001               	movlw	1
  5120  1762  00AA               	movwf	setBuz@time+1
  5121  1763  300A               	movlw	10
  5122  1764  3197  27A7  3197   	fcall	_setBuz
  5123  1767  2F80               	goto	l8288
  5124  1768                     l8280:	
  5125                           ;Dimmer_B1.c: 528: } else if (status == 2)
  5126                           
  5127                           ;Dimmer_B1.c: 526: setDimmerLights_ERROR(3);
  5128                           
  5129                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
  5130                           
  5131                           ;Dimmer_B1.c: 517: }
  5132                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  5133                           
  5134  1768  0020               	movlb	0	; select bank0
  5135  1769  082D               	movf	DimmerLights_Exceptions@status,w
  5136  176A  3A02               	xorlw	2
  5137  176B  1D03               	skipz
  5138  176C  2F7B               	goto	l8286
  5139                           
  5140                           ;Dimmer_B1.c: 529: {
  5141                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  5142  176D  302C               	movlw	44
  5143  176E  00A9               	movwf	setBuz@time
  5144  176F  3001               	movlw	1
  5145  1770  00AA               	movwf	setBuz@time+1
  5146  1771  3005               	movlw	5
  5147  1772  3197  27A7  3197   	fcall	_setBuz
  5148                           
  5149                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  5150  1775  0021               	movlb	1	; select bank1
  5151  1776  0A48               	incf	_Dimmer^(0+128),w
  5152  1777  0086               	movwf	6
  5153  1778  0187               	clrf	7
  5154  1779  0801               	movf	1,w
  5155  177A  2F89               	goto	L1
  5156  177B                     l8286:	
  5157                           ;Dimmer_B1.c: 532: } else if (status == 3)
  5158                           
  5159  177B  0020               	movlb	0	; select bank0
  5160  177C  082D               	movf	DimmerLights_Exceptions@status,w
  5161  177D  3A03               	xorlw	3
  5162  177E  1D03               	skipz
  5163  177F  2F8C               	goto	l936
  5164  1780                     l8288:	
  5165                           
  5166                           ;Dimmer_B1.c: 533: {
  5167                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  5168  1780  3001               	movlw	1
  5169  1781  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5170                           
  5171                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
  5172  1784  3002               	movlw	2
  5173  1785  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5174                           
  5175                           ;Dimmer_B1.c: 541: setDimmerLights_ERROR(3);
  5176  1788  3003               	movlw	3
  5177  1789                     L1:	
  5178  1789  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5179  178C                     l936:	
  5180                           
  5181                           ;Dimmer_B1.c: 543: }
  5182                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  5183  178C  0020               	movlb	0	; select bank0
  5184  178D  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5185  178E  3001               	movlw	1
  5186  178F  3192  22A8  3197   	fcall	_setDimmerLights_TriggerERROR
  5187                           
  5188                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
  5189  1792  0020               	movlb	0	; select bank0
  5190  1793  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5191  1794  3002               	movlw	2
  5192  1795  3192  22A8  3197   	fcall	_setDimmerLights_TriggerERROR
  5193                           
  5194                           ;Dimmer_B1.c: 552: setDimmerLights_TriggerERROR(3, 0);
  5195  1798  0020               	movlb	0	; select bank0
  5196  1799  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5197  179A  3003               	movlw	3
  5198  179B  3192  22A8  3197   	fcall	_setDimmerLights_TriggerERROR
  5199                           
  5200                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
  5201  179E  0021               	movlb	1	; select bank1
  5202  179F  1B20               	btfsc	_myMain^(0+128),6
  5203  17A0  0008               	return
  5204                           
  5205                           ;Dimmer_B1.c: 556: myMain.i = 0;
  5206  17A1  102E               	bcf	(_myMain^(0+128)+14),0
  5207                           
  5208                           ;Dimmer_B1.c: 557: myMain.j = 0;
  5209  17A2  10AE               	bcf	(_myMain^(0+128)+14),1
  5210                           
  5211                           ;Dimmer_B1.c: 558: myMain.k = 1;
  5212  17A3  152E               	bsf	(_myMain^(0+128)+14),2
  5213                           
  5214                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
  5215  17A4  01A7               	clrf	(_myMain^(0+128)+7)
  5216  17A5  01A8               	clrf	((_myMain+1)^(0+128)+7)
  5217  17A6  0008               	return
  5218  17A7                     __end_of_DimmerLights_Exceptions:	
  5219                           
  5220                           	psect	text14
  5221  12A8                     __ptext14:	
  5222 ;; *************** function _setDimmerLights_TriggerERROR *****************
  5223 ;; Defined at:
  5224 ;;		line 582 in file "../src/Dimmer_B1.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  lights          1    wreg     unsigned char 
  5227 ;;  command         1    2[BANK0 ] unsigned char 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  lights          1    3[BANK0 ] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5239 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;Total ram usage:        2 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    6
  5246 ;; This function calls:
  5247 ;;		_DimmerLightsPointSelect
  5248 ;; This function is called by:
  5249 ;;		_DimmerLights_Exceptions
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           
  5254                           ;psect for function _setDimmerLights_TriggerERROR
  5255  12A8                     _setDimmerLights_TriggerERROR:	
  5256                           
  5257                           ;incstack = 0
  5258                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  5259                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  5260  12A8  0020               	movlb	0	; select bank0
  5261  12A9  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  5262                           
  5263                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
  5264  12AA  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  5265  12AB  319F  2755         	fcall	_DimmerLightsPointSelect
  5266                           
  5267                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
  5268  12AD  087B               	movf	_DimmerLights,w
  5269  12AE  3E08               	addlw	8
  5270  12AF  0086               	movwf	6
  5271  12B0  3001               	movlw	1	; select bank2/3
  5272  12B1  0087               	movwf	7
  5273  12B2  0020               	movlb	0	; select bank0
  5274  12B3  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5275  12B4  1101               	bcf	1,2
  5276  12B5  1D03               	skipz
  5277  12B6  1501               	bsf	1,2
  5278                           
  5279                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
  5280  12B7  087B               	movf	_DimmerLights,w
  5281  12B8  3E08               	addlw	8
  5282  12B9  0086               	movwf	6
  5283  12BA  3001               	movlw	1	; select bank2/3
  5284  12BB  0087               	movwf	7
  5285  12BC  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5286  12BD  1081               	bcf	1,1
  5287  12BE  1D03               	skipz
  5288  12BF  1481               	bsf	1,1
  5289                           
  5290                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
  5291  12C0  087B               	movf	_DimmerLights,w
  5292  12C1  3E08               	addlw	8
  5293  12C2  0086               	movwf	6
  5294  12C3  3001               	movlw	1	; select bank2/3
  5295  12C4  0087               	movwf	7
  5296  12C5  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5297  12C6  1201               	bcf	1,4
  5298  12C7  1D03               	skipz
  5299  12C8  1601               	bsf	1,4
  5300                           
  5301                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
  5302  12C9  087B               	movf	_DimmerLights,w
  5303  12CA  3E08               	addlw	8
  5304  12CB  0086               	movwf	6
  5305  12CC  3001               	movlw	1	; select bank2/3
  5306  12CD  0087               	movwf	7
  5307  12CE  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5308  12CF  1181               	bcf	1,3
  5309  12D0  1D03               	skipz
  5310  12D1  1581               	bsf	1,3
  5311  12D2  0008               	return
  5312  12D3                     __end_of_setDimmerLights_TriggerERROR:	
  5313                           
  5314                           	psect	text15
  5315  16AE                     __ptext15:	
  5316 ;; *************** function _setDimmerLights_ERROR *****************
  5317 ;; Defined at:
  5318 ;;		line 564 in file "../src/Dimmer_B1.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  lights          1    wreg     unsigned char 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  lights          1    5[BANK0 ] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;		None               void
  5325 ;; Registers used:
  5326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;Total ram usage:        2 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    7
  5339 ;; This function calls:
  5340 ;;		_DimmerLightsPointSelect
  5341 ;;		_setLED
  5342 ;;		_setRFSW_Status
  5343 ;;		_setSw_Status
  5344 ;; This function is called by:
  5345 ;;		_DimmerLights_Exceptions
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           
  5350                           ;psect for function _setDimmerLights_ERROR
  5351  16AE                     _setDimmerLights_ERROR:	
  5352                           
  5353                           ;incstack = 0
  5354                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5355                           ;setDimmerLights_ERROR@lights stored from wreg
  5356  16AE  0020               	movlb	0	; select bank0
  5357  16AF  00A5               	movwf	setDimmerLights_ERROR@lights
  5358                           
  5359                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
  5360  16B0  0825               	movf	setDimmerLights_ERROR@lights,w
  5361  16B1  319F  2755  3196   	fcall	_DimmerLightsPointSelect
  5362                           
  5363                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
  5364  16B4  087B               	movf	_DimmerLights,w
  5365  16B5  0086               	movwf	6
  5366  16B6  3001               	movlw	1	; select bank2/3
  5367  16B7  0087               	movwf	7
  5368  16B8  1E81               	btfss	1,5
  5369  16B9  0008               	return
  5370                           
  5371                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
  5372  16BA  087B               	movf	_DimmerLights,w
  5373  16BB  0086               	movwf	6
  5374  16BC  3001               	movlw	1	; select bank2/3
  5375  16BD  0087               	movwf	7
  5376  16BE  1081               	bcf	1,1
  5377                           
  5378                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
  5379  16BF  087B               	movf	_DimmerLights,w
  5380  16C0  0086               	movwf	6
  5381  16C1  3001               	movlw	1	; select bank2/3
  5382  16C2  0087               	movwf	7
  5383  16C3  1181               	bcf	1,3
  5384                           
  5385                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
  5386  16C4  087B               	movf	_DimmerLights,w
  5387  16C5  0086               	movwf	6
  5388  16C6  3001               	movlw	1	; select bank2/3
  5389  16C7  0087               	movwf	7
  5390  16C8  1201               	bcf	1,4
  5391                           
  5392                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
  5393  16C9  087B               	movf	_DimmerLights,w
  5394  16CA  0086               	movwf	6
  5395  16CB  3001               	movlw	1	; select bank2/3
  5396  16CC  0087               	movwf	7
  5397  16CD  1301               	bcf	1,6
  5398                           
  5399                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
  5400  16CE  3007               	movlw	7
  5401  16CF  0020               	movlb	0	; select bank0
  5402  16D0  00A4               	movwf	??_setDimmerLights_ERROR
  5403  16D1  087B               	movf	_DimmerLights,w
  5404  16D2  3E02               	addlw	2
  5405  16D3  0086               	movwf	6
  5406  16D4  3001               	movlw	1	; select bank2/3
  5407  16D5  0087               	movwf	7
  5408  16D6  0824               	movf	??_setDimmerLights_ERROR,w
  5409  16D7  0081               	movwf	1
  5410                           
  5411                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  5412  16D8  087B               	movf	_DimmerLights,w
  5413  16D9  3E06               	addlw	6
  5414  16DA  0086               	movwf	6
  5415  16DB  3001               	movlw	1	; select bank2/3
  5416  16DC  0087               	movwf	7
  5417  16DD  0801               	movf	1,w
  5418  16DE  00A4               	movwf	??_setDimmerLights_ERROR
  5419  16DF  087B               	movf	_DimmerLights,w
  5420  16E0  3E04               	addlw	4
  5421  16E1  0086               	movwf	6
  5422  16E2  3001               	movlw	1	; select bank2/3
  5423  16E3  0087               	movwf	7
  5424  16E4  0824               	movf	??_setDimmerLights_ERROR,w
  5425  16E5  0081               	movwf	1
  5426                           
  5427                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
  5428  16E6  0021               	movlb	1	; select bank1
  5429  16E7  0848               	movf	_Dimmer^(0+128),w
  5430  16E8  0086               	movwf	6
  5431  16E9  0187               	clrf	7
  5432  16EA  1401               	bsf	1,0
  5433                           
  5434                           ;Dimmer_B1.c: 575: ;;
  5435                           ;Dimmer_B1.c: 576: setLED(lights, 1);
  5436  16EB  0020               	movlb	0	; select bank0
  5437  16EC  01A1               	clrf	setLED@command
  5438  16ED  0AA1               	incf	setLED@command,f
  5439  16EE  0825               	movf	setDimmerLights_ERROR@lights,w
  5440  16EF  318B  2372  3196   	fcall	_setLED
  5441                           
  5442                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
  5443  16F2  0020               	movlb	0	; select bank0
  5444  16F3  01A1               	clrf	setSw_Status@command
  5445  16F4  0825               	movf	setDimmerLights_ERROR@lights,w
  5446  16F5  319D  2550  3196   	fcall	_setSw_Status
  5447                           
  5448                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
  5449  16F8  0020               	movlb	0	; select bank0
  5450  16F9  01A2               	clrf	setRFSW_Status@command
  5451  16FA  0825               	movf	setDimmerLights_ERROR@lights,w
  5452  16FB  319D  2541         	fcall	_setRFSW_Status
  5453  16FD  0008               	return
  5454  16FE                     __end_of_setDimmerLights_ERROR:	
  5455                           
  5456                           	psect	text16
  5457  1C77                     __ptext16:	
  5458 ;; *************** function _Temp_Initialization *****************
  5459 ;; Defined at:
  5460 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;		None               void
  5467 ;; Registers used:
  5468 ;;		status,2, status,0, pclath, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;Total ram usage:        0 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    6
  5481 ;; This function calls:
  5482 ;;		_setTemp_Initialization
  5483 ;; This function is called by:
  5484 ;;		_main
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _Temp_Initialization
  5490  1C77                     _Temp_Initialization:	
  5491                           
  5492                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5496  1C77  319C  2474         	fcall	_setTemp_Initialization
  5497  1C79  0008               	return
  5498  1C7A                     __end_of_Temp_Initialization:	
  5499                           
  5500                           	psect	text17
  5501  1C74                     __ptext17:	
  5502 ;; *************** function _setTemp_Initialization *****************
  5503 ;; Defined at:
  5504 ;;		line 43 in file "../src/OverTemperature_B1.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;		None               void
  5511 ;; Registers used:
  5512 ;;		None
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;Total ram usage:        0 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    5
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_Temp_Initialization
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _setTemp_Initialization
  5534  1C74                     _setTemp_Initialization:	
  5535                           
  5536                           ;OverTemperature_B1.c: 44: Temp1.Safe = 1;
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _setTemp_Initialization: []
  5540  1C74  0021               	movlb	1	; select bank1
  5541  1C75  1655               	bsf	_Temp1^(0+128),4
  5542  1C76  0008               	return
  5543  1C77                     __end_of_setTemp_Initialization:	
  5544                           
  5545                           	psect	text18
  5546  1D1A                     __ptext18:	
  5547 ;; *************** function _Switch_Main *****************
  5548 ;; Defined at:
  5549 ;;		line 65 in file "../src/Switch_B1.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;		None
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;		None               void
  5556 ;; Registers used:
  5557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;Total ram usage:        0 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:   11
  5570 ;; This function calls:
  5571 ;;		_setSw_Main
  5572 ;; This function is called by:
  5573 ;;		_main
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _Switch_Main
  5579  1D1A                     _Switch_Main:	
  5580                           
  5581                           ;Switch_B1.c: 67: setSw_Main(1);
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5585  1D1A  3001               	movlw	1
  5586  1D1B  3182  2221  319D   	fcall	_setSw_Main
  5587                           
  5588                           ;Switch_B1.c: 71: setSw_Main(2);
  5589  1D1E  3002               	movlw	2
  5590  1D1F  3182  2221  319D   	fcall	_setSw_Main
  5591                           
  5592                           ;Switch_B1.c: 75: setSw_Main(3);
  5593  1D22  3003               	movlw	3
  5594  1D23  3182  2221         	fcall	_setSw_Main
  5595  1D25  0008               	return
  5596  1D26                     __end_of_Switch_Main:	
  5597                           
  5598                           	psect	text19
  5599  0221                     __ptext19:	
  5600 ;; *************** function _setSw_Main *****************
  5601 ;; Defined at:
  5602 ;;		line 115 in file "../src/Switch_B1.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  sw              1    wreg     unsigned char 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  sw              1   74[BANK0 ] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;		None               void
  5609 ;; Registers used:
  5610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;Total ram usage:        3 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:   10
  5623 ;; This function calls:
  5624 ;;		_SwPointSelect
  5625 ;;		_Sw_DimmerAdjFunc
  5626 ;;		_Sw_DimmerOffFunc
  5627 ;;		_Sw_DimmerOnFunc
  5628 ;;		_setBuz
  5629 ;;		_setRF_Learn
  5630 ;; This function is called by:
  5631 ;;		_Switch_Main
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           
  5636                           ;psect for function _setSw_Main
  5637  0221                     _setSw_Main:	
  5638                           
  5639                           ;incstack = 0
  5640                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5641                           ;setSw_Main@sw stored from wreg
  5642  0221  0020               	movlb	0	; select bank0
  5643  0222  00EA               	movwf	setSw_Main@sw
  5644                           
  5645                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5646  0223  086A               	movf	setSw_Main@sw,w
  5647  0224  319F  27C6  3182   	fcall	_SwPointSelect
  5648                           
  5649                           ;Switch_B1.c: 117: if (Sw->Enable == 1) {
  5650  0227  0878               	movf	_Sw,w
  5651  0228  0086               	movwf	6
  5652  0229  0879               	movf	_Sw+1,w
  5653  022A  0087               	movwf	7
  5654  022B  1C01               	btfss	1,0
  5655  022C  0008               	return
  5656                           
  5657                           ;Switch_B1.c: 119: if (sw == 1) {
  5658  022D  0020               	movlb	0	; select bank0
  5659  022E  086A               	movf	setSw_Main@sw,w
  5660  022F  3A01               	xorlw	1
  5661  0230  1D03               	skipz
  5662  0231  2A3A               	goto	l7720
  5663                           
  5664                           ;Switch_B1.c: 120: Sw->Touch = (RA0 == 1) ? 1 : 0;
  5665  0232  0878               	movf	_Sw,w
  5666  0233  0086               	movwf	6
  5667  0234  0879               	movf	_Sw+1,w
  5668  0235  0087               	movwf	7
  5669  0236  1081               	bcf	1,1
  5670  0237  180C               	btfsc	12,0	;volatile
  5671  0238  1481               	bsf	1,1
  5672                           
  5673                           ;Switch_B1.c: 121: } else if (sw == 2) {
  5674  0239  2A53               	goto	l2812
  5675  023A                     l7720:	
  5676  023A  0020               	movlb	0	; select bank0
  5677  023B  086A               	movf	setSw_Main@sw,w
  5678  023C  3A02               	xorlw	2
  5679  023D  1D03               	skipz
  5680  023E  2A47               	goto	l7724
  5681                           
  5682                           ;Switch_B1.c: 122: Sw->Touch = (RA6 == 1) ? 1 : 0;
  5683  023F  0878               	movf	_Sw,w
  5684  0240  0086               	movwf	6
  5685  0241  0879               	movf	_Sw+1,w
  5686  0242  0087               	movwf	7
  5687  0243  1081               	bcf	1,1
  5688  0244  1B0C               	btfsc	12,6	;volatile
  5689  0245  1481               	bsf	1,1
  5690                           
  5691                           ;Switch_B1.c: 123: } else if (sw == 3) {
  5692  0246  2A53               	goto	l2812
  5693  0247                     l7724:	
  5694  0247  0020               	movlb	0	; select bank0
  5695  0248  086A               	movf	setSw_Main@sw,w
  5696  0249  3A03               	xorlw	3
  5697  024A  1D03               	skipz
  5698  024B  2A53               	goto	l2812
  5699                           
  5700                           ;Switch_B1.c: 124: Sw->Touch = (RA4 == 1) ? 1 : 0;
  5701  024C  0878               	movf	_Sw,w
  5702  024D  0086               	movwf	6
  5703  024E  0879               	movf	_Sw+1,w
  5704  024F  0087               	movwf	7
  5705  0250  1081               	bcf	1,1
  5706  0251  1A0C               	btfsc	12,4	;volatile
  5707  0252  1481               	bsf	1,1
  5708  0253                     l2812:	
  5709                           
  5710                           ;Switch_B1.c: 125: }
  5711                           ;Switch_B1.c: 139: if (Sw->Touch == 1) {
  5712  0253  0878               	movf	_Sw,w
  5713  0254  0086               	movwf	6
  5714  0255  0879               	movf	_Sw+1,w
  5715  0256  0087               	movwf	7
  5716  0257  1C81               	btfss	1,1
  5717  0258  2B1E               	goto	l7774
  5718                           
  5719                           ;Switch_B1.c: 140: if (Sw->Debounce == 0) {
  5720  0259  0878               	movf	_Sw,w
  5721  025A  0086               	movwf	6
  5722  025B  0879               	movf	_Sw+1,w
  5723  025C  0087               	movwf	7
  5724  025D  1901               	btfsc	1,2
  5725  025E  2A81               	goto	l7740
  5726                           
  5727                           ;Switch_B1.c: 141: Sw->DebounceTime++;
  5728  025F  3001               	movlw	1
  5729  0260  0020               	movlb	0	; select bank0
  5730  0261  00E8               	movwf	??_setSw_Main
  5731  0262  0878               	movf	_Sw,w
  5732  0263  0086               	movwf	6
  5733  0264  0879               	movf	_Sw+1,w
  5734  0265  0087               	movwf	7
  5735  0266  3142               	addfsr 1,2
  5736  0267  0868               	movf	??_setSw_Main,w
  5737  0268  0781               	addwf	1,f
  5738                           
  5739                           ;Switch_B1.c: 142: if (Sw->DebounceTime >= 5) {
  5740  0269  0878               	movf	_Sw,w
  5741  026A  0086               	movwf	6
  5742  026B  0879               	movf	_Sw+1,w
  5743  026C  0087               	movwf	7
  5744  026D  3142               	addfsr 1,2
  5745  026E  3005               	movlw	5
  5746  026F  0201               	subwf	1,w
  5747  0270  1C03               	skipc
  5748  0271  0008               	return
  5749                           
  5750                           ;Switch_B1.c: 143: Sw->DebounceTime = 0;
  5751  0272  0878               	movf	_Sw,w
  5752  0273  0086               	movwf	6
  5753  0274  0879               	movf	_Sw+1,w
  5754  0275  0087               	movwf	7
  5755  0276  3142               	addfsr 1,2
  5756  0277  0181               	clrf	1
  5757                           
  5758                           ;Switch_B1.c: 144: Sw->Debounce = 1;
  5759  0278  0878               	movf	_Sw,w
  5760  0279  0086               	movwf	6
  5761  027A  0879               	movf	_Sw+1,w
  5762  027B  0087               	movwf	7
  5763  027C  1501               	bsf	1,2
  5764                           
  5765                           ;Switch_B1.c: 147: Sw_DimmerOnFunc(sw);
  5766  027D  086A               	movf	setSw_Main@sw,w
  5767  027E  318E  2658         	fcall	_Sw_DimmerOnFunc
  5768                           
  5769                           ;Switch_B1.c: 149: }
  5770                           ;Switch_B1.c: 150: } else {
  5771  0280  0008               	return
  5772  0281                     l7740:	
  5773                           
  5774                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  5775  0281  0878               	movf	_Sw,w
  5776  0282  0086               	movwf	6
  5777  0283  0879               	movf	_Sw+1,w
  5778  0284  0087               	movwf	7
  5779  0285  1981               	btfsc	1,3
  5780  0286  2AAE               	goto	l7750
  5781                           
  5782                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  5783  0287  0878               	movf	_Sw,w
  5784  0288  0086               	movwf	6
  5785  0289  0879               	movf	_Sw+1,w
  5786  028A  0087               	movwf	7
  5787  028B  3143               	addfsr 1,3
  5788  028C  3001               	movlw	1
  5789  028D  0781               	addwf	1,f
  5790  028E  3141               	addfsr 1,1
  5791  028F  1803               	skipnc
  5792  0290  0A81               	incf	1,f
  5793                           
  5794                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  5795  0291  0878               	movf	_Sw,w
  5796  0292  0086               	movwf	6
  5797  0293  0879               	movf	_Sw+1,w
  5798  0294  0087               	movwf	7
  5799  0295  3143               	addfsr 1,3
  5800  0296  3F40               	moviw [0]fsr1
  5801  0297  0020               	movlb	0	; select bank0
  5802  0298  00E8               	movwf	??_setSw_Main
  5803  0299  3F41               	moviw [1]fsr1
  5804  029A  00E9               	movwf	??_setSw_Main+1
  5805  029B  3000               	movlw	0
  5806  029C  0269               	subwf	??_setSw_Main+1,w
  5807  029D  3096               	movlw	150
  5808  029E  1903               	skipnz
  5809  029F  0268               	subwf	??_setSw_Main,w
  5810  02A0  1C03               	skipc
  5811  02A1  0008               	return
  5812                           
  5813                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  5814  02A2  0878               	movf	_Sw,w
  5815  02A3  0086               	movwf	6
  5816  02A4  0879               	movf	_Sw+1,w
  5817  02A5  0087               	movwf	7
  5818  02A6  3143               	addfsr 1,3
  5819  02A7  3000               	movlw	0
  5820  02A8  3FC0               	movwi [0]fsr1
  5821  02A9  3FC1               	movwi [1]fsr1
  5822                           
  5823                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5824  02AA  086A               	movf	setSw_Main@sw,w
  5825  02AB  3189  21CA         	fcall	_Sw_DimmerAdjFunc
  5826                           
  5827                           ;Switch_B1.c: 160: }
  5828                           ;Switch_B1.c: 161: } else {
  5829  02AD  0008               	return
  5830  02AE                     l7750:	
  5831                           
  5832                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5833  02AE  0878               	movf	_Sw,w
  5834  02AF  0086               	movwf	6
  5835  02B0  0879               	movf	_Sw+1,w
  5836  02B1  0087               	movwf	7
  5837  02B2  1A01               	btfsc	1,4
  5838  02B3  2AEC               	goto	l7764
  5839                           
  5840                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5841  02B4  0878               	movf	_Sw,w
  5842  02B5  0086               	movwf	6
  5843  02B6  0879               	movf	_Sw+1,w
  5844  02B7  0087               	movwf	7
  5845  02B8  3145               	addfsr 1,5
  5846  02B9  3001               	movlw	1
  5847  02BA  0781               	addwf	1,f
  5848  02BB  3141               	addfsr 1,1
  5849  02BC  1803               	skipnc
  5850  02BD  0A81               	incf	1,f
  5851                           
  5852                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5853  02BE  0878               	movf	_Sw,w
  5854  02BF  0086               	movwf	6
  5855  02C0  0879               	movf	_Sw+1,w
  5856  02C1  0087               	movwf	7
  5857  02C2  3145               	addfsr 1,5
  5858  02C3  3F40               	moviw [0]fsr1
  5859  02C4  0020               	movlb	0	; select bank0
  5860  02C5  00E8               	movwf	??_setSw_Main
  5861  02C6  3F41               	moviw [1]fsr1
  5862  02C7  00E9               	movwf	??_setSw_Main+1
  5863  02C8  3000               	movlw	0
  5864  02C9  0269               	subwf	??_setSw_Main+1,w
  5865  02CA  3096               	movlw	150
  5866  02CB  1903               	skipnz
  5867  02CC  0268               	subwf	??_setSw_Main,w
  5868  02CD  1C03               	skipc
  5869  02CE  0008               	return
  5870                           
  5871                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5872  02CF  0878               	movf	_Sw,w
  5873  02D0  0086               	movwf	6
  5874  02D1  0879               	movf	_Sw+1,w
  5875  02D2  0087               	movwf	7
  5876  02D3  3145               	addfsr 1,5
  5877  02D4  3000               	movlw	0
  5878  02D5  3FC0               	movwi [0]fsr1
  5879  02D6  3FC1               	movwi [1]fsr1
  5880                           
  5881                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5882  02D7  0878               	movf	_Sw,w
  5883  02D8  0086               	movwf	6
  5884  02D9  0879               	movf	_Sw+1,w
  5885  02DA  0087               	movwf	7
  5886  02DB  1601               	bsf	1,4
  5887                           
  5888                           ;Switch_B1.c: 169: setRF_Learn(1);
  5889  02DC  3001               	movlw	1
  5890  02DD  319C  24C3  3182   	fcall	_setRF_Learn
  5891                           
  5892                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5893  02E0  0021               	movlb	1	; select bank1
  5894  02E1  1FA0               	btfss	_myMain^(0+128),7
  5895  02E2  0008               	return
  5896                           
  5897                           ;Switch_B1.c: 172: setBuz(2, 100);
  5898  02E3  3064               	movlw	100
  5899  02E4  0020               	movlb	0	; select bank0
  5900  02E5  00A9               	movwf	setBuz@time
  5901  02E6  3000               	movlw	0
  5902  02E7  00AA               	movwf	setBuz@time+1
  5903  02E8  3002               	movlw	2
  5904  02E9  3197  27A7         	fcall	_setBuz
  5905                           
  5906                           ;Switch_B1.c: 173: }
  5907                           ;Switch_B1.c: 175: }
  5908                           ;Switch_B1.c: 176: } else {
  5909  02EB  0008               	return
  5910  02EC                     l7764:	
  5911                           
  5912                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5913  02EC  0878               	movf	_Sw,w
  5914  02ED  0086               	movwf	6
  5915  02EE  0879               	movf	_Sw+1,w
  5916  02EF  0087               	movwf	7
  5917  02F0  1A81               	btfsc	1,5
  5918  02F1  0008               	return
  5919                           
  5920                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5921  02F2  0878               	movf	_Sw,w
  5922  02F3  0086               	movwf	6
  5923  02F4  0879               	movf	_Sw+1,w
  5924  02F5  0087               	movwf	7
  5925  02F6  3147               	addfsr 1,7
  5926  02F7  3001               	movlw	1
  5927  02F8  0781               	addwf	1,f
  5928  02F9  3141               	addfsr 1,1
  5929  02FA  1803               	skipnc
  5930  02FB  0A81               	incf	1,f
  5931                           
  5932                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5933  02FC  0878               	movf	_Sw,w
  5934  02FD  0086               	movwf	6
  5935  02FE  0879               	movf	_Sw+1,w
  5936  02FF  0087               	movwf	7
  5937  0300  3147               	addfsr 1,7
  5938  0301  3F40               	moviw [0]fsr1
  5939  0302  0020               	movlb	0	; select bank0
  5940  0303  00E8               	movwf	??_setSw_Main
  5941  0304  3F41               	moviw [1]fsr1
  5942  0305  00E9               	movwf	??_setSw_Main+1
  5943  0306  3001               	movlw	1
  5944  0307  0269               	subwf	??_setSw_Main+1,w
  5945  0308  302C               	movlw	44
  5946  0309  1903               	skipnz
  5947  030A  0268               	subwf	??_setSw_Main,w
  5948  030B  1C03               	skipc
  5949  030C  0008               	return
  5950                           
  5951                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5952  030D  0878               	movf	_Sw,w
  5953  030E  0086               	movwf	6
  5954  030F  0879               	movf	_Sw+1,w
  5955  0310  0087               	movwf	7
  5956  0311  3147               	addfsr 1,7
  5957  0312  3000               	movlw	0
  5958  0313  3FC0               	movwi [0]fsr1
  5959  0314  3FC1               	movwi [1]fsr1
  5960                           
  5961                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5962  0315  0878               	movf	_Sw,w
  5963  0316  0086               	movwf	6
  5964  0317  0879               	movf	_Sw+1,w
  5965  0318  0087               	movwf	7
  5966  0319  1681               	bsf	1,5
  5967                           
  5968                           ;Switch_B1.c: 184: setRF_Learn(0);
  5969  031A  3000               	movlw	0
  5970  031B  319C  24C3         	fcall	_setRF_Learn
  5971                           
  5972                           ;Switch_B1.c: 187: }
  5973                           ;Switch_B1.c: 188: }
  5974                           ;Switch_B1.c: 189: }
  5975                           ;Switch_B1.c: 190: }
  5976                           ;Switch_B1.c: 191: }
  5977                           ;Switch_B1.c: 192: } else {
  5978  031D  0008               	return
  5979  031E                     l7774:	
  5980                           
  5981                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5982  031E  0878               	movf	_Sw,w
  5983  031F  0086               	movwf	6
  5984  0320  0879               	movf	_Sw+1,w
  5985  0321  0087               	movwf	7
  5986  0322  1D01               	btfss	1,2
  5987  0323  0008               	return
  5988                           
  5989                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5990  0324  3001               	movlw	1
  5991  0325  0020               	movlb	0	; select bank0
  5992  0326  00E8               	movwf	??_setSw_Main
  5993  0327  0878               	movf	_Sw,w
  5994  0328  0086               	movwf	6
  5995  0329  0879               	movf	_Sw+1,w
  5996  032A  0087               	movwf	7
  5997  032B  3142               	addfsr 1,2
  5998  032C  0868               	movf	??_setSw_Main,w
  5999  032D  0781               	addwf	1,f
  6000                           
  6001                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  6002  032E  0878               	movf	_Sw,w
  6003  032F  0086               	movwf	6
  6004  0330  0879               	movf	_Sw+1,w
  6005  0331  0087               	movwf	7
  6006  0332  3142               	addfsr 1,2
  6007  0333  3005               	movlw	5
  6008  0334  0201               	subwf	1,w
  6009  0335  1C03               	skipc
  6010  0336  0008               	return
  6011                           
  6012                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  6013  0337  0878               	movf	_Sw,w
  6014  0338  0086               	movwf	6
  6015  0339  0879               	movf	_Sw+1,w
  6016  033A  0087               	movwf	7
  6017  033B  3142               	addfsr 1,2
  6018  033C  0181               	clrf	1
  6019                           
  6020                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  6021  033D  0878               	movf	_Sw,w
  6022  033E  0086               	movwf	6
  6023  033F  0879               	movf	_Sw+1,w
  6024  0340  0087               	movwf	7
  6025  0341  1101               	bcf	1,2
  6026                           
  6027                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  6028  0342  0878               	movf	_Sw,w
  6029  0343  0086               	movwf	6
  6030  0344  0879               	movf	_Sw+1,w
  6031  0345  0087               	movwf	7
  6032  0346  3143               	addfsr 1,3
  6033  0347  3000               	movlw	0
  6034  0348  3FC0               	movwi [0]fsr1
  6035  0349  3FC1               	movwi [1]fsr1
  6036                           
  6037                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  6038  034A  0878               	movf	_Sw,w
  6039  034B  0086               	movwf	6
  6040  034C  0879               	movf	_Sw+1,w
  6041  034D  0087               	movwf	7
  6042  034E  1181               	bcf	1,3
  6043                           
  6044                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  6045  034F  0878               	movf	_Sw,w
  6046  0350  0086               	movwf	6
  6047  0351  0879               	movf	_Sw+1,w
  6048  0352  0087               	movwf	7
  6049  0353  3145               	addfsr 1,5
  6050  0354  3000               	movlw	0
  6051  0355  3FC0               	movwi [0]fsr1
  6052  0356  3FC1               	movwi [1]fsr1
  6053                           
  6054                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  6055  0357  0878               	movf	_Sw,w
  6056  0358  0086               	movwf	6
  6057  0359  0879               	movf	_Sw+1,w
  6058  035A  0087               	movwf	7
  6059  035B  1201               	bcf	1,4
  6060                           
  6061                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  6062  035C  0878               	movf	_Sw,w
  6063  035D  0086               	movwf	6
  6064  035E  0879               	movf	_Sw+1,w
  6065  035F  0087               	movwf	7
  6066  0360  3147               	addfsr 1,7
  6067  0361  3000               	movlw	0
  6068  0362  3FC0               	movwi [0]fsr1
  6069  0363  3FC1               	movwi [1]fsr1
  6070                           
  6071                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  6072  0364  0878               	movf	_Sw,w
  6073  0365  0086               	movwf	6
  6074  0366  0879               	movf	_Sw+1,w
  6075  0367  0087               	movwf	7
  6076  0368  1281               	bcf	1,5
  6077                           
  6078                           ;Switch_B1.c: 205: Sw_DimmerOffFunc(sw);
  6079  0369  086A               	movf	setSw_Main@sw,w
  6080  036A  318B  2301  3182   	fcall	_Sw_DimmerOffFunc
  6081                           
  6082                           ;Switch_B1.c: 208: setRF_Learn(0);
  6083  036D  3000               	movlw	0
  6084  036E  319C  24C3         	fcall	_setRF_Learn
  6085  0370  0008               	return
  6086  0371                     __end_of_setSw_Main:	
  6087                           
  6088                           	psect	text20
  6089  1CC3                     __ptext20:	
  6090 ;; *************** function _setRF_Learn *****************
  6091 ;; Defined at:
  6092 ;;		line 23 in file "../src/RF_Control_B1.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  command         1    wreg     unsigned char 
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;  command         1    0[BANK0 ] unsigned char 
  6097 ;; Return value:  Size  Location     Type
  6098 ;;		None               void
  6099 ;; Registers used:
  6100 ;;		wreg
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;Total ram usage:        1 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    5
  6113 ;; This function calls:
  6114 ;;		Nothing
  6115 ;; This function is called by:
  6116 ;;		_setSw_Main
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           
  6121                           ;psect for function _setRF_Learn
  6122  1CC3                     _setRF_Learn:	
  6123                           
  6124                           ;incstack = 0
  6125                           ; Regs used in _setRF_Learn: [wreg]
  6126                           ;setRF_Learn@command stored from wreg
  6127  1CC3  0020               	movlb	0	; select bank0
  6128  1CC4  00A0               	movwf	setRF_Learn@command
  6129                           
  6130                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6131  1CC5  0820               	movf	setRF_Learn@command,w
  6132  1CC6  0021               	movlb	1	; select bank1
  6133  1CC7  133E               	bcf	_RF1^(0+128),6
  6134  1CC8  1D03               	skipz
  6135  1CC9  173E               	bsf	_RF1^(0+128),6
  6136  1CCA  0008               	return
  6137  1CCB                     __end_of_setRF_Learn:	
  6138                           
  6139                           	psect	text21
  6140  0E58                     __ptext21:	
  6141 ;; *************** function _Sw_DimmerOnFunc *****************
  6142 ;; Defined at:
  6143 ;;		line 217 in file "../src/Switch_B1.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  sw              1    wreg     unsigned char 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  sw              1   71[BANK0 ] unsigned char 
  6148 ;;  Idle            1   70[BANK0 ] unsigned char 
  6149 ;; Return value:  Size  Location     Type
  6150 ;;		None               void
  6151 ;; Registers used:
  6152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 0/0
  6155 ;;		On exit  : 0/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;Total ram usage:        6 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    9
  6165 ;; This function calls:
  6166 ;;		_setBuz
  6167 ;;		_setDimmerLights_Switch
  6168 ;;		_setDimmerLights_Trigger
  6169 ;;		_setRFSW_Status
  6170 ;;		_setRF_DimmerLights
  6171 ;;		_setTxData
  6172 ;; This function is called by:
  6173 ;;		_setSw_Main
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function _Sw_DimmerOnFunc
  6179  0E58                     _Sw_DimmerOnFunc:	
  6180                           
  6181                           ;incstack = 0
  6182                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6183                           ;Sw_DimmerOnFunc@sw stored from wreg
  6184  0E58  0020               	movlb	0	; select bank0
  6185  0E59  00E7               	movwf	Sw_DimmerOnFunc@sw
  6186                           
  6187                           ;Switch_B1.c: 218: char Idle = 1;
  6188  0E5A  01E6               	clrf	Sw_DimmerOnFunc@Idle
  6189  0E5B  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  6190                           
  6191                           ;Switch_B1.c: 222: if (sw == 1) {
  6192  0E5C  0867               	movf	Sw_DimmerOnFunc@sw,w
  6193  0E5D  3A01               	xorlw	1
  6194  0E5E  1D03               	skipz
  6195  0E5F  2E6B               	goto	l7022
  6196                           
  6197                           ;Switch_B1.c: 223: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6198  0E60  01E3               	clrf	_Sw_DimmerOnFunc$5520
  6199  0E61  0023               	movlb	3	; select bank3
  6200  0E62  1DCD               	btfss	(_DimmerLights2^(0+384)+8),3
  6201  0E63  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6202  0E64  2E68               	goto	l7020
  6203  0E65  0020               	movlb	0	; select bank0
  6204  0E66  01E3               	clrf	_Sw_DimmerOnFunc$5520
  6205  0E67  0AE3               	incf	_Sw_DimmerOnFunc$5520,f
  6206  0E68                     l7020:	
  6207  0E68  0020               	movlb	0	; select bank0
  6208  0E69  0863               	movf	_Sw_DimmerOnFunc$5520,w
  6209  0E6A  2E8C               	goto	L3
  6210  0E6B                     l7022:	
  6211                           ;Switch_B1.c: 224: } else if (sw == 2) {
  6212                           
  6213  0E6B  0867               	movf	Sw_DimmerOnFunc@sw,w
  6214  0E6C  3A02               	xorlw	2
  6215  0E6D  1D03               	skipz
  6216  0E6E  2E7C               	goto	l7034
  6217                           
  6218                           ;Switch_B1.c: 225: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6219  0E6F  01E4               	clrf	_Sw_DimmerOnFunc$5521
  6220  0E70  0022               	movlb	2	; select bank2
  6221  0E71  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6222  0E72  2E79               	goto	l7032
  6223  0E73  0023               	movlb	3	; select bank3
  6224  0E74  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6225  0E75  2E79               	goto	l7032
  6226  0E76  0020               	movlb	0	; select bank0
  6227  0E77  01E4               	clrf	_Sw_DimmerOnFunc$5521
  6228  0E78  0AE4               	incf	_Sw_DimmerOnFunc$5521,f
  6229  0E79                     l7032:	
  6230  0E79  0020               	movlb	0	; select bank0
  6231  0E7A  0864               	movf	_Sw_DimmerOnFunc$5521,w
  6232  0E7B  2E8C               	goto	L3
  6233  0E7C                     l7034:	
  6234                           ;Switch_B1.c: 226: } else if (sw == 3) {
  6235                           
  6236  0E7C  0867               	movf	Sw_DimmerOnFunc@sw,w
  6237  0E7D  3A03               	xorlw	3
  6238  0E7E  1D03               	skipz
  6239  0E7F  2E8F               	goto	l2838
  6240                           
  6241                           ;Switch_B1.c: 227: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6242  0E80  01E5               	clrf	_Sw_DimmerOnFunc$5522
  6243  0E81  0022               	movlb	2	; select bank2
  6244  0E82  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6245  0E83  2E8A               	goto	l7044
  6246  0E84  0023               	movlb	3	; select bank3
  6247  0E85  19CD               	btfsc	(_DimmerLights2^(0+384)+8),3
  6248  0E86  2E8A               	goto	l7044
  6249  0E87  0020               	movlb	0	; select bank0
  6250  0E88  01E5               	clrf	_Sw_DimmerOnFunc$5522
  6251  0E89  0AE5               	incf	_Sw_DimmerOnFunc$5522,f
  6252  0E8A                     l7044:	
  6253  0E8A  0020               	movlb	0	; select bank0
  6254  0E8B  0865               	movf	_Sw_DimmerOnFunc$5522,w
  6255  0E8C                     L3:	
  6256  0E8C  00E2               	movwf	??_Sw_DimmerOnFunc
  6257  0E8D  0862               	movf	??_Sw_DimmerOnFunc,w
  6258  0E8E  00E6               	movwf	Sw_DimmerOnFunc@Idle
  6259  0E8F                     l2838:	
  6260                           
  6261                           ;Switch_B1.c: 228: }
  6262                           ;Switch_B1.c: 239: if (Idle == 1) {
  6263  0E8F  0866               	movf	Sw_DimmerOnFunc@Idle,w
  6264  0E90  3A01               	xorlw	1
  6265  0E91  1D03               	skipz
  6266  0E92  0008               	return
  6267                           
  6268                           ;Switch_B1.c: 240: Sw->Flag = 1;
  6269  0E93  0878               	movf	_Sw,w
  6270  0E94  0086               	movwf	6
  6271  0E95  0879               	movf	_Sw+1,w
  6272  0E96  0087               	movwf	7
  6273  0E97  1781               	bsf	1,7
  6274                           
  6275                           ;Switch_B1.c: 241: setBuz(1, 100);
  6276  0E98  3064               	movlw	100
  6277  0E99  00A9               	movwf	setBuz@time
  6278  0E9A  3000               	movlw	0
  6279  0E9B  00AA               	movwf	setBuz@time+1
  6280  0E9C  3001               	movlw	1
  6281  0E9D  3197  27A7  318E   	fcall	_setBuz
  6282                           
  6283                           ;Switch_B1.c: 242: if (Sw->Status == 0) {
  6284  0EA0  0878               	movf	_Sw,w
  6285  0EA1  0086               	movwf	6
  6286  0EA2  0879               	movf	_Sw+1,w
  6287  0EA3  0087               	movwf	7
  6288  0EA4  1B01               	btfsc	1,6
  6289  0EA5  2ED0               	goto	l7064
  6290                           
  6291                           ;Switch_B1.c: 243: Sw->Status = 1;
  6292  0EA6  0878               	movf	_Sw,w
  6293  0EA7  0086               	movwf	6
  6294  0EA8  0879               	movf	_Sw+1,w
  6295  0EA9  0087               	movwf	7
  6296  0EAA  1701               	bsf	1,6
  6297                           
  6298                           ;Switch_B1.c: 244: setRFSW_Status(sw, 1);
  6299  0EAB  0020               	movlb	0	; select bank0
  6300  0EAC  01A2               	clrf	setRFSW_Status@command
  6301  0EAD  0AA2               	incf	setRFSW_Status@command,f
  6302  0EAE  0867               	movf	Sw_DimmerOnFunc@sw,w
  6303  0EAF  319D  2541  318E   	fcall	_setRFSW_Status
  6304                           
  6305                           ;Switch_B1.c: 246: setDimmerLights_Trigger(sw, 1);
  6306  0EB2  0020               	movlb	0	; select bank0
  6307  0EB3  01A2               	clrf	setDimmerLights_Trigger@command
  6308  0EB4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6309  0EB5  0867               	movf	Sw_DimmerOnFunc@sw,w
  6310  0EB6  319D  25AB  318E   	fcall	_setDimmerLights_Trigger
  6311                           
  6312                           ;Switch_B1.c: 247: setDimmerLights_Switch(sw, 1);
  6313  0EB9  0020               	movlb	0	; select bank0
  6314  0EBA  01A2               	clrf	setDimmerLights_Switch@command
  6315  0EBB  0AA2               	incf	setDimmerLights_Switch@command,f
  6316  0EBC  0867               	movf	Sw_DimmerOnFunc@sw,w
  6317  0EBD  319D  259B  318E   	fcall	_setDimmerLights_Switch
  6318                           
  6319                           ;Switch_B1.c: 249: setRF_DimmerLights(sw, Sw->Status);
  6320  0EC0  0878               	movf	_Sw,w
  6321  0EC1  0086               	movwf	6
  6322  0EC2  0879               	movf	_Sw+1,w
  6323  0EC3  0087               	movwf	7
  6324  0EC4  3000               	movlw	0
  6325  0EC5  1B01               	btfsc	1,6
  6326  0EC6  3001               	movlw	1
  6327  0EC7  0020               	movlb	0	; select bank0
  6328  0EC8  00DD               	movwf	setRF_DimmerLights@on
  6329  0EC9  0867               	movf	Sw_DimmerOnFunc@sw,w
  6330  0ECA  318A  2295  318E   	fcall	_setRF_DimmerLights
  6331                           
  6332                           ;Switch_B1.c: 250: setTxData();
  6333  0ECD  3185  252E         	fcall	_setTxData
  6334                           
  6335                           ;Switch_B1.c: 252: } else {
  6336  0ECF  0008               	return
  6337  0ED0                     l7064:	
  6338                           
  6339                           ;Switch_B1.c: 253: Sw->Status = 0;
  6340  0ED0  0878               	movf	_Sw,w
  6341  0ED1  0086               	movwf	6
  6342  0ED2  0879               	movf	_Sw+1,w
  6343  0ED3  0087               	movwf	7
  6344  0ED4  1301               	bcf	1,6
  6345                           
  6346                           ;Switch_B1.c: 254: setRFSW_Status(sw, Sw->Status);
  6347  0ED5  0878               	movf	_Sw,w
  6348  0ED6  0086               	movwf	6
  6349  0ED7  0879               	movf	_Sw+1,w
  6350  0ED8  0087               	movwf	7
  6351  0ED9  3000               	movlw	0
  6352  0EDA  1B01               	btfsc	1,6
  6353  0EDB  3001               	movlw	1
  6354  0EDC  0020               	movlb	0	; select bank0
  6355  0EDD  00A2               	movwf	setRFSW_Status@command
  6356  0EDE  0867               	movf	Sw_DimmerOnFunc@sw,w
  6357  0EDF  319D  2541         	fcall	_setRFSW_Status
  6358  0EE1  0008               	return
  6359  0EE2                     __end_of_Sw_DimmerOnFunc:	
  6360                           
  6361                           	psect	text22
  6362  0B01                     __ptext22:	
  6363 ;; *************** function _Sw_DimmerOffFunc *****************
  6364 ;; Defined at:
  6365 ;;		line 260 in file "../src/Switch_B1.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  sw              1    wreg     unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  sw              1   68[BANK0 ] unsigned char 
  6370 ;; Return value:  Size  Location     Type
  6371 ;;		None               void
  6372 ;; Registers used:
  6373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;Total ram usage:        3 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    9
  6386 ;; This function calls:
  6387 ;;		_setDelayOff_GO
  6388 ;;		_setDimmerLights_AdjGo
  6389 ;;		_setDimmerLights_Switch
  6390 ;;		_setDimmerLights_Trigger
  6391 ;;		_setDimmerLights_TriggerAdj
  6392 ;;		_setRF_DimmerLights
  6393 ;;		_setTxData
  6394 ;; This function is called by:
  6395 ;;		_setSw_Main
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           
  6400                           ;psect for function _Sw_DimmerOffFunc
  6401  0B01                     _Sw_DimmerOffFunc:	
  6402                           
  6403                           ;incstack = 0
  6404                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6405                           ;Sw_DimmerOffFunc@sw stored from wreg
  6406  0B01  0020               	movlb	0	; select bank0
  6407  0B02  00E4               	movwf	Sw_DimmerOffFunc@sw
  6408                           
  6409                           ;Switch_B1.c: 261: if (Sw->Flag == 1) {
  6410  0B03  0878               	movf	_Sw,w
  6411  0B04  0086               	movwf	6
  6412  0B05  0879               	movf	_Sw+1,w
  6413  0B06  0087               	movwf	7
  6414  0B07  1F81               	btfss	1,7
  6415  0B08  0008               	return
  6416                           
  6417                           ;Switch_B1.c: 262: Sw->Flag = 0;
  6418  0B09  0878               	movf	_Sw,w
  6419  0B0A  0086               	movwf	6
  6420  0B0B  0879               	movf	_Sw+1,w
  6421  0B0C  0087               	movwf	7
  6422  0B0D  1381               	bcf	1,7
  6423                           
  6424                           ;Switch_B1.c: 263: if (Sw->Status == 1) {
  6425  0B0E  0878               	movf	_Sw,w
  6426  0B0F  0086               	movwf	6
  6427  0B10  0879               	movf	_Sw+1,w
  6428  0B11  0087               	movwf	7
  6429  0B12  1F01               	btfss	1,6
  6430  0B13  2B4E               	goto	l7134
  6431                           
  6432                           ;Switch_B1.c: 264: if (Sw->Adj == 1) {
  6433  0B14  0878               	movf	_Sw,w
  6434  0B15  0086               	movwf	6
  6435  0B16  0879               	movf	_Sw+1,w
  6436  0B17  0087               	movwf	7
  6437  0B18  3141               	addfsr 1,1
  6438  0B19  1C01               	btfss	1,0
  6439  0B1A  0008               	return
  6440                           
  6441                           ;Switch_B1.c: 265: Sw->Adj = 0;
  6442  0B1B  0878               	movf	_Sw,w
  6443  0B1C  0086               	movwf	6
  6444  0B1D  0879               	movf	_Sw+1,w
  6445  0B1E  0087               	movwf	7
  6446  0B1F  3141               	addfsr 1,1
  6447  0B20  1001               	bcf	1,0
  6448                           
  6449                           ;Switch_B1.c: 266: setDimmerLights_TriggerAdj(sw, 1);
  6450  0B21  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6451  0B22  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6452  0B23  0864               	movf	Sw_DimmerOffFunc@sw,w
  6453  0B24  319D  25EB  318B   	fcall	_setDimmerLights_TriggerAdj
  6454                           
  6455                           ;Switch_B1.c: 267: setDimmerLights_AdjGo(sw, 0);
  6456  0B27  0020               	movlb	0	; select bank0
  6457  0B28  01A2               	clrf	setDimmerLights_AdjGo@command
  6458  0B29  0864               	movf	Sw_DimmerOffFunc@sw,w
  6459  0B2A  319D  25DB  318B   	fcall	_setDimmerLights_AdjGo
  6460                           
  6461                           ;Switch_B1.c: 269: product->Data[17]=product->Data[26 + sw];
  6462  0B2D  0020               	movlb	0	; select bank0
  6463  0B2E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6464  0B2F  3E1A               	addlw	26
  6465  0B30  076F               	addwf	_product,w
  6466  0B31  00E2               	movwf	??_Sw_DimmerOffFunc
  6467  0B32  0862               	movf	??_Sw_DimmerOffFunc,w
  6468  0B33  0086               	movwf	6
  6469  0B34  3002               	movlw	2	; select bank4/5
  6470  0B35  0087               	movwf	7
  6471  0B36  0801               	movf	1,w
  6472  0B37  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6473  0B38  086F               	movf	_product,w
  6474  0B39  3E11               	addlw	17
  6475  0B3A  0086               	movwf	6
  6476  0B3B  3002               	movlw	2	; select bank4/5
  6477  0B3C  0087               	movwf	7
  6478  0B3D  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6479  0B3E  0081               	movwf	1
  6480                           
  6481                           ;Switch_B1.c: 270: setRF_DimmerLights(sw, Sw->Status);
  6482  0B3F  0878               	movf	_Sw,w
  6483  0B40  0086               	movwf	6
  6484  0B41  0879               	movf	_Sw+1,w
  6485  0B42  0087               	movwf	7
  6486  0B43  3000               	movlw	0
  6487  0B44  1B01               	btfsc	1,6
  6488  0B45  3001               	movlw	1
  6489  0B46  00DD               	movwf	setRF_DimmerLights@on
  6490  0B47  0864               	movf	Sw_DimmerOffFunc@sw,w
  6491  0B48  318A  2295  318B   	fcall	_setRF_DimmerLights
  6492                           
  6493                           ;Switch_B1.c: 271: setTxData();
  6494  0B4B  3185  252E         	fcall	_setTxData
  6495                           
  6496                           ;Switch_B1.c: 273: }
  6497                           ;Switch_B1.c: 274: } else {
  6498  0B4D  0008               	return
  6499  0B4E                     l7134:	
  6500                           
  6501                           ;Switch_B1.c: 275: setDimmerLights_Trigger(sw, 1);
  6502  0B4E  0020               	movlb	0	; select bank0
  6503  0B4F  01A2               	clrf	setDimmerLights_Trigger@command
  6504  0B50  0AA2               	incf	setDimmerLights_Trigger@command,f
  6505  0B51  0864               	movf	Sw_DimmerOffFunc@sw,w
  6506  0B52  319D  25AB  318B   	fcall	_setDimmerLights_Trigger
  6507                           
  6508                           ;Switch_B1.c: 276: setDimmerLights_Switch(sw, 0);
  6509  0B55  0020               	movlb	0	; select bank0
  6510  0B56  01A2               	clrf	setDimmerLights_Switch@command
  6511  0B57  0864               	movf	Sw_DimmerOffFunc@sw,w
  6512  0B58  319D  259B  318B   	fcall	_setDimmerLights_Switch
  6513                           
  6514                           ;Switch_B1.c: 278: setDelayOff_GO(sw, 0, 0);
  6515  0B5B  0020               	movlb	0	; select bank0
  6516  0B5C  01AA               	clrf	setDelayOff_GO@command
  6517  0B5D  01AB               	clrf	setDelayOff_GO@value
  6518  0B5E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6519  0B5F  318A  222F  318B   	fcall	_setDelayOff_GO
  6520                           
  6521                           ;Switch_B1.c: 279: setRF_DimmerLights(sw, Sw->Status);
  6522  0B62  0878               	movf	_Sw,w
  6523  0B63  0086               	movwf	6
  6524  0B64  0879               	movf	_Sw+1,w
  6525  0B65  0087               	movwf	7
  6526  0B66  3000               	movlw	0
  6527  0B67  1B01               	btfsc	1,6
  6528  0B68  3001               	movlw	1
  6529  0B69  0020               	movlb	0	; select bank0
  6530  0B6A  00DD               	movwf	setRF_DimmerLights@on
  6531  0B6B  0864               	movf	Sw_DimmerOffFunc@sw,w
  6532  0B6C  318A  2295  318B   	fcall	_setRF_DimmerLights
  6533                           
  6534                           ;Switch_B1.c: 280: setTxData();
  6535  0B6F  3185  252E         	fcall	_setTxData
  6536  0B71  0008               	return
  6537  0B72                     __end_of_Sw_DimmerOffFunc:	
  6538                           
  6539                           	psect	text23
  6540  09CA                     __ptext23:	
  6541 ;; *************** function _Sw_DimmerAdjFunc *****************
  6542 ;; Defined at:
  6543 ;;		line 287 in file "../src/Switch_B1.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  sw              1    wreg     unsigned char 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  sw              1    9[BANK0 ] unsigned char 
  6548 ;;  Idle            1    8[BANK0 ] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;Total ram usage:        6 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    7
  6565 ;; This function calls:
  6566 ;;		_setDimmerLights_AdjGo
  6567 ;;		_setDimmerLights_TriggerAdj
  6568 ;;		_setRFSW_Status
  6569 ;; This function is called by:
  6570 ;;		_setSw_Main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function _Sw_DimmerAdjFunc
  6576  09CA                     _Sw_DimmerAdjFunc:	
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6580                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6581  09CA  0020               	movlb	0	; select bank0
  6582  09CB  00A9               	movwf	Sw_DimmerAdjFunc@sw
  6583                           
  6584                           ;Switch_B1.c: 288: char Idle = 1;
  6585  09CC  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  6586  09CD  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  6587                           
  6588                           ;Switch_B1.c: 291: if (sw == 1) {
  6589  09CE  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6590  09CF  3A01               	xorlw	1
  6591  09D0  1D03               	skipz
  6592  09D1  29DD               	goto	l7082
  6593                           
  6594                           ;Switch_B1.c: 292: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6595  09D2  01A5               	clrf	_Sw_DimmerAdjFunc$5530
  6596  09D3  0023               	movlb	3	; select bank3
  6597  09D4  1DCD               	btfss	(_DimmerLights2^(0+384)+8),3
  6598  09D5  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6599  09D6  29DA               	goto	l7080
  6600  09D7  0020               	movlb	0	; select bank0
  6601  09D8  01A5               	clrf	_Sw_DimmerAdjFunc$5530
  6602  09D9  0AA5               	incf	_Sw_DimmerAdjFunc$5530,f
  6603  09DA                     l7080:	
  6604  09DA  0020               	movlb	0	; select bank0
  6605  09DB  0825               	movf	_Sw_DimmerAdjFunc$5530,w
  6606  09DC  29FE               	goto	L5
  6607  09DD                     l7082:	
  6608                           ;Switch_B1.c: 293: } else if (sw == 2) {
  6609                           
  6610  09DD  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6611  09DE  3A02               	xorlw	2
  6612  09DF  1D03               	skipz
  6613  09E0  29EE               	goto	l7094
  6614                           
  6615                           ;Switch_B1.c: 294: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6616  09E1  01A6               	clrf	_Sw_DimmerAdjFunc$5531
  6617  09E2  0022               	movlb	2	; select bank2
  6618  09E3  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6619  09E4  29EB               	goto	l7092
  6620  09E5  0023               	movlb	3	; select bank3
  6621  09E6  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6622  09E7  29EB               	goto	l7092
  6623  09E8  0020               	movlb	0	; select bank0
  6624  09E9  01A6               	clrf	_Sw_DimmerAdjFunc$5531
  6625  09EA  0AA6               	incf	_Sw_DimmerAdjFunc$5531,f
  6626  09EB                     l7092:	
  6627  09EB  0020               	movlb	0	; select bank0
  6628  09EC  0826               	movf	_Sw_DimmerAdjFunc$5531,w
  6629  09ED  29FE               	goto	L5
  6630  09EE                     l7094:	
  6631                           ;Switch_B1.c: 295: } else if (sw == 3) {
  6632                           
  6633  09EE  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6634  09EF  3A03               	xorlw	3
  6635  09F0  1D03               	skipz
  6636  09F1  2A01               	goto	l2862
  6637                           
  6638                           ;Switch_B1.c: 296: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6639  09F2  01A7               	clrf	_Sw_DimmerAdjFunc$5532
  6640  09F3  0022               	movlb	2	; select bank2
  6641  09F4  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6642  09F5  29FC               	goto	l7104
  6643  09F6  0023               	movlb	3	; select bank3
  6644  09F7  19CD               	btfsc	(_DimmerLights2^(0+384)+8),3
  6645  09F8  29FC               	goto	l7104
  6646  09F9  0020               	movlb	0	; select bank0
  6647  09FA  01A7               	clrf	_Sw_DimmerAdjFunc$5532
  6648  09FB  0AA7               	incf	_Sw_DimmerAdjFunc$5532,f
  6649  09FC                     l7104:	
  6650  09FC  0020               	movlb	0	; select bank0
  6651  09FD  0827               	movf	_Sw_DimmerAdjFunc$5532,w
  6652  09FE                     L5:	
  6653  09FE  00A4               	movwf	??_Sw_DimmerAdjFunc
  6654  09FF  0824               	movf	??_Sw_DimmerAdjFunc,w
  6655  0A00  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  6656  0A01                     l2862:	
  6657                           
  6658                           ;Switch_B1.c: 297: }
  6659                           ;Switch_B1.c: 308: if (Idle == 1) {
  6660  0A01  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  6661  0A02  3A01               	xorlw	1
  6662  0A03  1D03               	skipz
  6663  0A04  0008               	return
  6664                           
  6665                           ;Switch_B1.c: 309: if (Sw->Flag == 1) {
  6666  0A05  0878               	movf	_Sw,w
  6667  0A06  0086               	movwf	6
  6668  0A07  0879               	movf	_Sw+1,w
  6669  0A08  0087               	movwf	7
  6670  0A09  1F81               	btfss	1,7
  6671  0A0A  0008               	return
  6672                           
  6673                           ;Switch_B1.c: 310: Sw->Hold1 = 1;
  6674  0A0B  0878               	movf	_Sw,w
  6675  0A0C  0086               	movwf	6
  6676  0A0D  0879               	movf	_Sw+1,w
  6677  0A0E  0087               	movwf	7
  6678  0A0F  1581               	bsf	1,3
  6679                           
  6680                           ;Switch_B1.c: 311: Sw->Adj = 1;
  6681  0A10  0878               	movf	_Sw,w
  6682  0A11  0086               	movwf	6
  6683  0A12  0879               	movf	_Sw+1,w
  6684  0A13  0087               	movwf	7
  6685  0A14  3141               	addfsr 1,1
  6686  0A15  1401               	bsf	1,0
  6687                           
  6688                           ;Switch_B1.c: 312: Sw->Status = 1;
  6689  0A16  0878               	movf	_Sw,w
  6690  0A17  0086               	movwf	6
  6691  0A18  0879               	movf	_Sw+1,w
  6692  0A19  0087               	movwf	7
  6693  0A1A  1701               	bsf	1,6
  6694                           
  6695                           ;Switch_B1.c: 313: setRFSW_Status(sw, 1);
  6696  0A1B  01A2               	clrf	setRFSW_Status@command
  6697  0A1C  0AA2               	incf	setRFSW_Status@command,f
  6698  0A1D  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6699  0A1E  319D  2541  3189   	fcall	_setRFSW_Status
  6700                           
  6701                           ;Switch_B1.c: 315: setDimmerLights_TriggerAdj(sw, 1);
  6702  0A21  0020               	movlb	0	; select bank0
  6703  0A22  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6704  0A23  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6705  0A24  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6706  0A25  319D  25EB  3189   	fcall	_setDimmerLights_TriggerAdj
  6707                           
  6708                           ;Switch_B1.c: 316: setDimmerLights_AdjGo(sw, 1);
  6709  0A28  0020               	movlb	0	; select bank0
  6710  0A29  01A2               	clrf	setDimmerLights_AdjGo@command
  6711  0A2A  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6712  0A2B  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6713  0A2C  319D  25DB         	fcall	_setDimmerLights_AdjGo
  6714  0A2E  0008               	return
  6715  0A2F                     __end_of_Sw_DimmerAdjFunc:	
  6716                           
  6717                           	psect	text24
  6718  1DEB                     __ptext24:	
  6719 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6720 ;; Defined at:
  6721 ;;		line 711 in file "../src/Dimmer_B1.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  lights          1    wreg     unsigned char 
  6724 ;;  command         1    2[BANK0 ] unsigned char 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  lights          1    3[BANK0 ] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;		None               void
  6729 ;; Registers used:
  6730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        2 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    6
  6743 ;; This function calls:
  6744 ;;		_DimmerLightsPointSelect
  6745 ;; This function is called by:
  6746 ;;		_Sw_DimmerOffFunc
  6747 ;;		_Sw_DimmerAdjFunc
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _setDimmerLights_TriggerAdj
  6753  1DEB                     _setDimmerLights_TriggerAdj:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6757                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6758  1DEB  0020               	movlb	0	; select bank0
  6759  1DEC  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6760                           
  6761                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6762  1DED  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6763  1DEE  319F  2755         	fcall	_DimmerLightsPointSelect
  6764                           
  6765                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6766  1DF0  087B               	movf	_DimmerLights,w
  6767  1DF1  3E08               	addlw	8
  6768  1DF2  0086               	movwf	6
  6769  1DF3  3001               	movlw	1	; select bank2/3
  6770  1DF4  0087               	movwf	7
  6771  1DF5  0020               	movlb	0	; select bank0
  6772  1DF6  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6773  1DF7  1201               	bcf	1,4
  6774  1DF8  1D03               	skipz
  6775  1DF9  1601               	bsf	1,4
  6776  1DFA  0008               	return
  6777  1DFB                     __end_of_setDimmerLights_TriggerAdj:	
  6778                           
  6779                           	psect	text25
  6780  1DDB                     __ptext25:	
  6781 ;; *************** function _setDimmerLights_AdjGo *****************
  6782 ;; Defined at:
  6783 ;;		line 699 in file "../src/Dimmer_B1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  lights          1    wreg     unsigned char 
  6786 ;;  command         1    2[BANK0 ] unsigned char 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  lights          1    3[BANK0 ] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6798 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;Total ram usage:        2 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    6
  6805 ;; This function calls:
  6806 ;;		_DimmerLightsPointSelect
  6807 ;; This function is called by:
  6808 ;;		_Sw_DimmerOffFunc
  6809 ;;		_Sw_DimmerAdjFunc
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _setDimmerLights_AdjGo
  6815  1DDB                     _setDimmerLights_AdjGo:	
  6816                           
  6817                           ;incstack = 0
  6818                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6819                           ;setDimmerLights_AdjGo@lights stored from wreg
  6820  1DDB  0020               	movlb	0	; select bank0
  6821  1DDC  00A3               	movwf	setDimmerLights_AdjGo@lights
  6822                           
  6823                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6824  1DDD  0823               	movf	setDimmerLights_AdjGo@lights,w
  6825  1DDE  319F  2755         	fcall	_DimmerLightsPointSelect
  6826                           
  6827                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6828  1DE0  087B               	movf	_DimmerLights,w
  6829  1DE1  3E08               	addlw	8
  6830  1DE2  0086               	movwf	6
  6831  1DE3  3001               	movlw	1	; select bank2/3
  6832  1DE4  0087               	movwf	7
  6833  1DE5  0020               	movlb	0	; select bank0
  6834  1DE6  0822               	movf	setDimmerLights_AdjGo@command,w
  6835  1DE7  1181               	bcf	1,3
  6836  1DE8  1D03               	skipz
  6837  1DE9  1581               	bsf	1,3
  6838  1DEA  0008               	return
  6839  1DEB                     __end_of_setDimmerLights_AdjGo:	
  6840                           
  6841                           	psect	text26
  6842  1E0C                     __ptext26:	
  6843 ;; *************** function _Switch_Initialization *****************
  6844 ;; Defined at:
  6845 ;;		line 41 in file "../src/Switch_B1.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;Total ram usage:        0 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    8
  6866 ;; This function calls:
  6867 ;;		_TouchPower
  6868 ;;		_setSw_Initialization
  6869 ;; This function is called by:
  6870 ;;		_main
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           
  6875                           ;psect for function _Switch_Initialization
  6876  1E0C                     _Switch_Initialization:	
  6877                           
  6878                           ;Switch_B1.c: 42: TouchPower();
  6879                           
  6880                           ;incstack = 0
  6881                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6882  1E0C  319D  257D  319E   	fcall	_TouchPower
  6883                           
  6884                           ;Switch_B1.c: 44: WPUB1 = 0;
  6885  1E0F  0024               	movlb	4	; select bank4
  6886  1E10  108D               	bcf	13,1	;volatile
  6887                           
  6888                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6889  1E11  3001               	movlw	1
  6890  1E12  319C  24BB  319E   	fcall	_setSw_Initialization
  6891                           
  6892                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6893  1E15  3002               	movlw	2
  6894  1E16  319C  24BB  319E   	fcall	_setSw_Initialization
  6895                           
  6896                           ;Switch_B1.c: 59: setSw_Initialization(3);
  6897  1E19  3003               	movlw	3
  6898  1E1A  319C  24BB         	fcall	_setSw_Initialization
  6899  1E1C  0008               	return
  6900  1E1D                     __end_of_Switch_Initialization:	
  6901                           
  6902                           	psect	text27
  6903  1CBB                     __ptext27:	
  6904 ;; *************** function _setSw_Initialization *****************
  6905 ;; Defined at:
  6906 ;;		line 81 in file "../src/Switch_B1.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;  sw              1    wreg     unsigned char 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;  sw              1    3[BANK0 ] unsigned char 
  6911 ;; Return value:  Size  Location     Type
  6912 ;;		None               void
  6913 ;; Registers used:
  6914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6915 ;; Tracked objects:
  6916 ;;		On entry : 0/0
  6917 ;;		On exit  : 0/0
  6918 ;;		Unchanged: 0/0
  6919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;Total ram usage:        1 bytes
  6925 ;; Hardware stack levels used:    1
  6926 ;; Hardware stack levels required when called:    7
  6927 ;; This function calls:
  6928 ;;		_setLED
  6929 ;; This function is called by:
  6930 ;;		_Switch_Initialization
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           
  6935                           ;psect for function _setSw_Initialization
  6936  1CBB                     _setSw_Initialization:	
  6937                           
  6938                           ;incstack = 0
  6939                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6940                           ;setSw_Initialization@sw stored from wreg
  6941  1CBB  0020               	movlb	0	; select bank0
  6942  1CBC  00A3               	movwf	setSw_Initialization@sw
  6943                           
  6944                           ;Switch_B1.c: 82: setLED(sw, 1);
  6945  1CBD  01A1               	clrf	setLED@command
  6946  1CBE  0AA1               	incf	setLED@command,f
  6947  1CBF  0823               	movf	setSw_Initialization@sw,w
  6948  1CC0  318B  2372         	fcall	_setLED
  6949  1CC2  0008               	return
  6950  1CC3                     __end_of_setSw_Initialization:	
  6951                           
  6952                           	psect	text28
  6953  1D7D                     __ptext28:	
  6954 ;; *************** function _TouchPower *****************
  6955 ;; Defined at:
  6956 ;;		line 10 in file "../src/Switch_B1.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;		None               void
  6963 ;; Registers used:
  6964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    6
  6977 ;; This function calls:
  6978 ;;		_Timeout_Counter
  6979 ;;		_set_TimeoutCleared
  6980 ;; This function is called by:
  6981 ;;		_Switch_Initialization
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           
  6986                           ;psect for function _TouchPower
  6987  1D7D                     _TouchPower:	
  6988                           
  6989                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6993  1D7D  2D83               	goto	l7704
  6994  1D7E                     l2780:	
  6995                           
  6996                           ;Switch_B1.c: 12: RC5 = 1;
  6997  1D7E  0020               	movlb	0	; select bank0
  6998  1D7F  168E               	bsf	14,5	;volatile
  6999                           
  7000                           ;Switch_B1.c: 13: Timeout_Counter();
  7001  1D80  319E  26A6  319D   	fcall	_Timeout_Counter
  7002  1D83                     l7704:	
  7003  1D83  0020               	movlb	0	; select bank0
  7004  1D84  1A8E               	btfsc	14,5	;volatile
  7005  1D85  2D89               	goto	l7708
  7006  1D86  0021               	movlb	1	; select bank1
  7007  1D87  1D2F               	btfss	(_myMain^(0+128)+15),2
  7008  1D88  2D7E               	goto	l2780
  7009  1D89                     l7708:	
  7010                           
  7011                           ;Switch_B1.c: 14: }
  7012                           ;Switch_B1.c: 15: set_TimeoutCleared();
  7013  1D89  319C  248D         	fcall	_set_TimeoutCleared
  7014  1D8B  0008               	return
  7015  1D8C                     __end_of_TouchPower:	
  7016                           
  7017                           	psect	text29
  7018  1C71                     __ptext29:	
  7019 ;; *************** function _RF_Main *****************
  7020 ;; Defined at:
  7021 ;;		line 16 in file "../src/RF_Control_B1.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:   14
  7042 ;; This function calls:
  7043 ;;		_setRF_Main
  7044 ;; This function is called by:
  7045 ;;		_main
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           
  7050                           ;psect for function _RF_Main
  7051  1C71                     _RF_Main:	
  7052                           
  7053                           ;RF_Control_B1.c: 18: setRF_Main();
  7054                           
  7055                           ;incstack = 0
  7056                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7057  1C71  3189  2165         	fcall	_setRF_Main
  7058  1C73  0008               	return
  7059  1C74                     __end_of_RF_Main:	
  7060                           
  7061                           	psect	text30
  7062  0965                     __ptext30:	
  7063 ;; *************** function _setRF_Main *****************
  7064 ;; Defined at:
  7065 ;;		line 51 in file "../src/RF_Control_B1.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  Receive_OK      1    0        unsigned char 
  7070 ;;  loop_f          1    0        unsigned char 
  7071 ;; Return value:  Size  Location     Type
  7072 ;;		None               void
  7073 ;; Registers used:
  7074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;Total ram usage:        2 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:   13
  7087 ;; This function calls:
  7088 ;;		_CC2500_RxData
  7089 ;;		_CC2500_TxData
  7090 ;;		_CC2500_WriteCommand
  7091 ;;		_RF_RxDisable
  7092 ;;		_getBuz_GO
  7093 ;;		_getRxData
  7094 ;; This function is called by:
  7095 ;;		_RF_Main
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _setRF_Main
  7101  0965                     _setRF_Main:	
  7102                           
  7103                           ;RF_Control_B1.c: 52: char loop_f, Receive_OK;
  7104                           ;RF_Control_B1.c: 53: if (RF1.Enable == 1) {
  7105                           
  7106                           ;incstack = 0
  7107                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7108  0965  0021               	movlb	1	; select bank1
  7109  0966  1C3E               	btfss	_RF1^(0+128),0
  7110  0967  0008               	return
  7111                           
  7112                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7113  0968  319D  25FB  3189   	fcall	_getBuz_GO
  7114  096B  0020               	movlb	0	; select bank0
  7115  096C  0821               	movf	?_getBuz_GO+1,w
  7116  096D  0420               	iorwf	?_getBuz_GO,w
  7117  096E  1D03               	skipz
  7118  096F  0008               	return
  7119                           
  7120                           ;RF_Control_B1.c: 58: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  7121  0970  01E8               	clrf	_setRF_Main$4639
  7122  0971  0AE8               	incf	_setRF_Main$4639,f
  7123  0972  1C0C               	btfss	12,0	;volatile
  7124  0973  1B0C               	btfsc	12,6	;volatile
  7125  0974  2977               	goto	l8554
  7126  0975  1E0C               	btfss	12,4	;volatile
  7127  0976  01E8               	clrf	_setRF_Main$4639
  7128  0977                     l8554:	
  7129  0977  0868               	movf	_setRF_Main$4639,w
  7130  0978  0021               	movlb	1	; select bank1
  7131  0979  13BE               	bcf	_RF1^(0+128),7
  7132  097A  1D03               	skipz
  7133  097B  17BE               	bsf	_RF1^(0+128),7
  7134                           
  7135                           ;RF_Control_B1.c: 68: if (RF1.Key == 1 && RF1.Learn == 0) {
  7136  097C  1BBE               	btfsc	_RF1^(0+128),7
  7137  097D  1B3E               	btfsc	_RF1^(0+128),6
  7138  097E  2983               	goto	l2331
  7139                           
  7140                           ;RF_Control_B1.c: 69: RF1.Run = 1;
  7141  097F  14BF               	bsf	(_RF1^(0+128)+1),1
  7142                           
  7143                           ;RF_Control_B1.c: 70: RF_RxDisable();
  7144  0980  319D  256E         	fcall	_RF_RxDisable
  7145                           
  7146                           ;RF_Control_B1.c: 71: } else {
  7147  0982  0008               	return
  7148  0983                     l2331:	
  7149                           
  7150                           ;RF_Control_B1.c: 72: if (RF1.Run == 1 && RF1.Learn == 0) {
  7151  0983  18BF               	btfsc	(_RF1^(0+128)+1),1
  7152  0984  1B3E               	btfsc	_RF1^(0+128),6
  7153  0985  2993               	goto	l8574
  7154                           
  7155                           ;RF_Control_B1.c: 73: RF1.Count++;
  7156  0986  3001               	movlw	1
  7157  0987  0020               	movlb	0	; select bank0
  7158  0988  00E7               	movwf	??_setRF_Main
  7159  0989  0867               	movf	??_setRF_Main,w
  7160  098A  0021               	movlb	1	; select bank1
  7161  098B  07C1               	addwf	(_RF1^(0+128)+3),f
  7162                           
  7163                           ;RF_Control_B1.c: 74: if (RF1.Count == 10) {
  7164  098C  0841               	movf	(_RF1^(0+128)+3),w
  7165  098D  3A0A               	xorlw	10
  7166  098E  1D03               	skipz
  7167  098F  0008               	return
  7168                           
  7169                           ;RF_Control_B1.c: 75: RF1.Count = 0;
  7170  0990  01C1               	clrf	(_RF1^(0+128)+3)
  7171                           
  7172                           ;RF_Control_B1.c: 76: RF1.Run = 0;
  7173  0991  10BF               	bcf	(_RF1^(0+128)+1),1
  7174                           
  7175                           ;RF_Control_B1.c: 77: }
  7176                           ;RF_Control_B1.c: 78: } else {
  7177  0992  0008               	return
  7178  0993                     l8574:	
  7179                           
  7180                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7181  0993  01C1               	clrf	(_RF1^(0+128)+3)
  7182                           
  7183                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  7184  0994  10BF               	bcf	(_RF1^(0+128)+1),1
  7185                           
  7186                           ;RF_Control_B1.c: 82: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7187  0995  193E               	btfsc	_RF1^(0+128),2
  7188  0996  1B3E               	btfsc	_RF1^(0+128),6
  7189  0997  29A8               	goto	l2336
  7190                           
  7191                           ;RF_Control_B1.c: 83: RF1.TransceiveGO = 0;
  7192  0998  113E               	bcf	_RF1^(0+128),2
  7193                           
  7194                           ;RF_Control_B1.c: 84: RF1.RxStatus = 0;
  7195  0999  11BE               	bcf	_RF1^(0+128),3
  7196                           
  7197                           ;RF_Control_B1.c: 85: RF1.ReceiveGO = 0;
  7198  099A  10BE               	bcf	_RF1^(0+128),1
  7199                           
  7200                           ;RF_Control_B1.c: 87: CC2500_WriteCommand(0x36);
  7201  099B  3036               	movlw	54
  7202  099C  319F  2721  3189   	fcall	_CC2500_WriteCommand
  7203                           
  7204                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  7205  099F  303B               	movlw	59
  7206  09A0  319F  2721  3189   	fcall	_CC2500_WriteCommand
  7207                           
  7208                           ;RF_Control_B1.c: 89: CC2500_TxData();
  7209  09A3  3189  2101         	fcall	_CC2500_TxData
  7210                           
  7211                           ;RF_Control_B1.c: 90: RF1.Run = 1;
  7212  09A5  0021               	movlb	1	; select bank1
  7213  09A6  14BF               	bsf	(_RF1^(0+128)+1),1
  7214                           
  7215                           ;RF_Control_B1.c: 91: } else {
  7216  09A7  0008               	return
  7217  09A8                     l2336:	
  7218                           
  7219                           ;RF_Control_B1.c: 93: if (RF1.RxStatus == 1) {
  7220  09A8  1DBE               	btfss	_RF1^(0+128),3
  7221  09A9  29B9               	goto	l2338
  7222                           
  7223                           ;RF_Control_B1.c: 94: CC2500_RxData();
  7224  09AA  318B  23E6  3189   	fcall	_CC2500_RxData
  7225                           
  7226                           ;RF_Control_B1.c: 95: if (RF1.ReceiveGO == 1) {
  7227  09AD  0021               	movlb	1	; select bank1
  7228  09AE  1CBE               	btfss	_RF1^(0+128),1
  7229  09AF  0008               	return
  7230                           
  7231                           ;RF_Control_B1.c: 96: RF1.ReceiveGO = 0;
  7232  09B0  10BE               	bcf	_RF1^(0+128),1
  7233                           
  7234                           ;RF_Control_B1.c: 103: getRxData();
  7235  09B1  3195  2580         	fcall	_getRxData
  7236                           
  7237                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  7238  09B3  0021               	movlb	1	; select bank1
  7239  09B4  14BF               	bsf	(_RF1^(0+128)+1),1
  7240                           
  7241                           ;RF_Control_B1.c: 106: RB5 = RB5 == 1 ? 0 : 1;
  7242  09B5  3020               	movlw	32
  7243  09B6  0020               	movlb	0	; select bank0
  7244  09B7  068D               	xorwf	13,f
  7245                           
  7246                           ;RF_Control_B1.c: 107: }
  7247                           ;RF_Control_B1.c: 108: } else {
  7248  09B8  0008               	return
  7249  09B9                     l2338:	
  7250                           
  7251                           ;RF_Control_B1.c: 110: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7252  09B9  19BE               	btfsc	_RF1^(0+128),3
  7253  09BA  0008               	return
  7254  09BB  18BE               	btfsc	_RF1^(0+128),1
  7255  09BC  0008               	return
  7256                           
  7257                           ;RF_Control_B1.c: 111: RF1.RxStatus = 1;
  7258  09BD  15BE               	bsf	_RF1^(0+128),3
  7259                           
  7260                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x36);
  7261  09BE  3036               	movlw	54
  7262  09BF  319F  2721  3189   	fcall	_CC2500_WriteCommand
  7263                           
  7264                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x3A);
  7265  09C2  303A               	movlw	58
  7266  09C3  319F  2721  3189   	fcall	_CC2500_WriteCommand
  7267                           
  7268                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x34);
  7269  09C6  3034               	movlw	52
  7270  09C7  319F  2721         	fcall	_CC2500_WriteCommand
  7271  09C9  0008               	return
  7272  09CA                     __end_of_setRF_Main:	
  7273                           
  7274                           	psect	text31
  7275  1580                     __ptext31:	
  7276 ;; *************** function _getRxData *****************
  7277 ;; Defined at:
  7278 ;;		line 199 in file "../src/RF_Control_B1.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;Total ram usage:        0 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:   12
  7299 ;; This function calls:
  7300 ;;		_setControl_Lights_Table
  7301 ;;		_setLog_Code
  7302 ;; This function is called by:
  7303 ;;		_setRF_Main
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _getRxData
  7309  1580                     _getRxData:	
  7310                           
  7311                           ;RF_Control_B1.c: 200: if (RF1.Learn == 1) {
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7315  1580  0021               	movlb	1	; select bank1
  7316  1581  1F3E               	btfss	_RF1^(0+128),6
  7317  1582  2D8E               	goto	l8362
  7318                           
  7319                           ;RF_Control_B1.c: 201: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7320  1583  0022               	movlb	2	; select bank2
  7321  1584  08A0               	movf	_RF_Data^(0+256),f
  7322  1585  1D03               	skipz
  7323  1586  0008               	return
  7324  1587  0821               	movf	(_RF_Data^(0+256)+1),w
  7325  1588  3A64               	xorlw	100
  7326  1589  1D03               	skipz
  7327  158A  0008               	return
  7328                           
  7329                           ;RF_Control_B1.c: 202: {
  7330                           ;RF_Control_B1.c: 203: setLog_Code();
  7331  158B  3193  235C         	fcall	_setLog_Code
  7332                           
  7333                           ;RF_Control_B1.c: 204: }
  7334                           ;RF_Control_B1.c: 205: } else {
  7335  158D  0008               	return
  7336  158E                     l8362:	
  7337                           
  7338                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7339  158E  0022               	movlb	2	; select bank2
  7340  158F  08A0               	movf	_RF_Data^(0+256),f
  7341  1590  1D03               	skipz
  7342  1591  0008               	return
  7343  1592  0821               	movf	(_RF_Data^(0+256)+1),w
  7344  1593  3A02               	xorlw	2
  7345  1594  1D03               	skipz
  7346  1595  0008               	return
  7347                           
  7348                           ;RF_Control_B1.c: 207: {
  7349                           ;RF_Control_B1.c: 208: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7350  1596  082C               	movf	(_RF_Data^(0+256)+12),w
  7351  1597  3AFF               	xorlw	255
  7352  1598  1D03               	skipz
  7353  1599  2DA4               	goto	l8374
  7354  159A  082D               	movf	(_RF_Data^(0+256)+13),w
  7355  159B  3AFF               	xorlw	255
  7356  159C  1D03               	skipz
  7357  159D  2DA4               	goto	l8374
  7358  159E  082E               	movf	(_RF_Data^(0+256)+14),w
  7359  159F  3AFF               	xorlw	255
  7360  15A0  1D03               	skipz
  7361  15A1  2DA4               	goto	l8374
  7362                           
  7363                           ;RF_Control_B1.c: 209: __nop();
  7364  15A2  0000               	nop
  7365                           
  7366                           ;RF_Control_B1.c: 210: } else {
  7367  15A3  0008               	return
  7368  15A4                     l8374:	
  7369                           
  7370                           ;RF_Control_B1.c: 211: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7371  15A4  0020               	movlb	0	; select bank0
  7372  15A5  086F               	movf	_product,w
  7373  15A6  3E0C               	addlw	12
  7374  15A7  0086               	movwf	6
  7375  15A8  3002               	movlw	2	; select bank4/5
  7376  15A9  0087               	movwf	7
  7377  15AA  0022               	movlb	2	; select bank2
  7378  15AB  082C               	movf	(_RF_Data^(0+256)+12),w
  7379  15AC  0601               	xorwf	1,w
  7380  15AD  1D03               	skipz
  7381  15AE  0008               	return
  7382  15AF  0020               	movlb	0	; select bank0
  7383  15B0  086F               	movf	_product,w
  7384  15B1  3E0D               	addlw	13
  7385  15B2  0086               	movwf	6
  7386  15B3  3002               	movlw	2	; select bank4/5
  7387  15B4  0087               	movwf	7
  7388  15B5  0022               	movlb	2	; select bank2
  7389  15B6  082D               	movf	(_RF_Data^(0+256)+13),w
  7390  15B7  0601               	xorwf	1,w
  7391  15B8  1D03               	skipz
  7392  15B9  0008               	return
  7393  15BA  0020               	movlb	0	; select bank0
  7394  15BB  086F               	movf	_product,w
  7395  15BC  3E0E               	addlw	14
  7396  15BD  0086               	movwf	6
  7397  15BE  3002               	movlw	2	; select bank4/5
  7398  15BF  0087               	movwf	7
  7399  15C0  0022               	movlb	2	; select bank2
  7400  15C1  082E               	movf	(_RF_Data^(0+256)+14),w
  7401  15C2  0601               	xorwf	1,w
  7402  15C3  1D03               	skipz
  7403  15C4  0008               	return
  7404                           
  7405                           ;RF_Control_B1.c: 212: setControl_Lights_Table();
  7406  15C5  3186  269B         	fcall	_setControl_Lights_Table
  7407                           
  7408                           ;RF_Control_B1.c: 219: {
  7409                           ;RF_Control_B1.c: 220: ;
  7410                           
  7411                           ;RF_Control_B1.c: 216: {
  7412                           ;RF_Control_B1.c: 217: ;
  7413                           ;RF_Control_B1.c: 218: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7414                           
  7415                           ;RF_Control_B1.c: 213: }
  7416                           ;RF_Control_B1.c: 214: }
  7417                           ;RF_Control_B1.c: 215: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7418  15C7  0008               	return
  7419  15C8                     __end_of_getRxData:	
  7420                           
  7421                           	psect	text32
  7422  135C                     __ptext32:	
  7423 ;; *************** function _setLog_Code *****************
  7424 ;; Defined at:
  7425 ;;		line 230 in file "../src/RF_Control_B1.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;		None
  7430 ;; Return value:  Size  Location     Type
  7431 ;;		None               void
  7432 ;; Registers used:
  7433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;Total ram usage:        1 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:    7
  7446 ;; This function calls:
  7447 ;;		_setBuz
  7448 ;; This function is called by:
  7449 ;;		_getRxData
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           
  7454                           ;psect for function _setLog_Code
  7455  135C                     _setLog_Code:	
  7456                           
  7457                           ;RF_Control_B1.c: 231: product->Data[12]=RF_Data[12];
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7461  135C  0022               	movlb	2	; select bank2
  7462  135D  082C               	movf	(_RF_Data^(0+256)+12),w
  7463  135E  0020               	movlb	0	; select bank0
  7464  135F  00AD               	movwf	??_setLog_Code
  7465  1360  086F               	movf	_product,w
  7466  1361  3E0C               	addlw	12
  7467  1362  0086               	movwf	6
  7468  1363  3002               	movlw	2	; select bank4/5
  7469  1364  0087               	movwf	7
  7470  1365  082D               	movf	??_setLog_Code,w
  7471  1366  0081               	movwf	1
  7472                           
  7473                           ;RF_Control_B1.c: 232: product->Data[13]=RF_Data[13];
  7474  1367  0022               	movlb	2	; select bank2
  7475  1368  082D               	movf	(_RF_Data^(0+256)+13),w
  7476  1369  0020               	movlb	0	; select bank0
  7477  136A  00AD               	movwf	??_setLog_Code
  7478  136B  086F               	movf	_product,w
  7479  136C  3E0D               	addlw	13
  7480  136D  0086               	movwf	6
  7481  136E  3002               	movlw	2	; select bank4/5
  7482  136F  0087               	movwf	7
  7483  1370  082D               	movf	??_setLog_Code,w
  7484  1371  0081               	movwf	1
  7485                           
  7486                           ;RF_Control_B1.c: 233: product->Data[14]=RF_Data[14];
  7487  1372  0022               	movlb	2	; select bank2
  7488  1373  082E               	movf	(_RF_Data^(0+256)+14),w
  7489  1374  0020               	movlb	0	; select bank0
  7490  1375  00AD               	movwf	??_setLog_Code
  7491  1376  086F               	movf	_product,w
  7492  1377  3E0E               	addlw	14
  7493  1378  0086               	movwf	6
  7494  1379  3002               	movlw	2	; select bank4/5
  7495  137A  0087               	movwf	7
  7496  137B  082D               	movf	??_setLog_Code,w
  7497  137C  0081               	movwf	1
  7498                           
  7499                           ;RF_Control_B1.c: 234: setBuz(1, 100);
  7500  137D  3064               	movlw	100
  7501  137E  00A9               	movwf	setBuz@time
  7502  137F  3000               	movlw	0
  7503  1380  00AA               	movwf	setBuz@time+1
  7504  1381  3001               	movlw	1
  7505  1382  3197  27A7  3193   	fcall	_setBuz
  7506                           
  7507                           ;RF_Control_B1.c: 235: RF1.Learn = 0;
  7508  1385  0021               	movlb	1	; select bank1
  7509  1386  133E               	bcf	_RF1^(0+128),6
  7510                           
  7511                           ;RF_Control_B1.c: 236: if (myMain.First) {
  7512  1387  1FA0               	btfss	_myMain^(0+128),7
  7513  1388  2B8B               	goto	l2372
  7514                           
  7515                           ;RF_Control_B1.c: 237: Memory.LoopSave=1;
  7516  1389  0023               	movlb	3	; select bank3
  7517  138A  1544               	bsf	(_Memory^(0+384)+36),2
  7518  138B                     l2372:	
  7519                           
  7520                           ;RF_Control_B1.c: 238: }
  7521                           ;RF_Control_B1.c: 239: Memory.Modify=1;
  7522  138B  0023               	movlb	3	; select bank3
  7523  138C  1444               	bsf	(_Memory^(0+384)+36),0
  7524  138D  0008               	return
  7525  138E                     __end_of_setLog_Code:	
  7526                           
  7527                           	psect	text33
  7528  069B                     __ptext33:	
  7529 ;; *************** function _setControl_Lights_Table *****************
  7530 ;; Defined at:
  7531 ;;		line 243 in file "../src/RF_Control_B1.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;		None               void
  7538 ;; Registers used:
  7539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:   11
  7552 ;; This function calls:
  7553 ;;		_setBuz
  7554 ;;		_setDimmerLights
  7555 ;;		_setRFSW_AdjControl
  7556 ;;		_setRFSW_Control
  7557 ;;		_setRFSW_Status
  7558 ;;		_setSw_Status
  7559 ;;		_setTxData
  7560 ;; This function is called by:
  7561 ;;		_getRxData
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           
  7566                           ;psect for function _setControl_Lights_Table
  7567  069B                     _setControl_Lights_Table:	
  7568                           
  7569                           ;RF_Control_B1.c: 244: if (RF_Data[15] == 0x00) {
  7570                           
  7571                           ;incstack = 0
  7572                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7573  069B  0022               	movlb	2	; select bank2
  7574  069C  08AF               	movf	(_RF_Data^(0+256)+15),f
  7575  069D  1D03               	skipz
  7576  069E  2EF9               	goto	l8312
  7577                           
  7578                           ;RF_Control_B1.c: 246: setDimmerLights(1, 0);
  7579  069F  0020               	movlb	0	; select bank0
  7580  06A0  01A3               	clrf	setDimmerLights@status
  7581  06A1  3001               	movlw	1
  7582  06A2  318D  2551  3186   	fcall	_setDimmerLights
  7583                           
  7584                           ;RF_Control_B1.c: 247: setRFSW_Status(1, 0);
  7585  06A5  0020               	movlb	0	; select bank0
  7586  06A6  01A2               	clrf	setRFSW_Status@command
  7587  06A7  3001               	movlw	1
  7588  06A8  319D  2541  3186   	fcall	_setRFSW_Status
  7589                           
  7590                           ;RF_Control_B1.c: 248: setSw_Status(1, 0);
  7591  06AB  0020               	movlb	0	; select bank0
  7592  06AC  01A1               	clrf	setSw_Status@command
  7593  06AD  3001               	movlw	1
  7594  06AE  319D  2550  3186   	fcall	_setSw_Status
  7595                           
  7596                           ;RF_Control_B1.c: 251: setDimmerLights(2, 0);
  7597  06B1  0020               	movlb	0	; select bank0
  7598  06B2  01A3               	clrf	setDimmerLights@status
  7599  06B3  3002               	movlw	2
  7600  06B4  318D  2551  3186   	fcall	_setDimmerLights
  7601                           
  7602                           ;RF_Control_B1.c: 252: setRFSW_Status(2, 0);
  7603  06B7  0020               	movlb	0	; select bank0
  7604  06B8  01A2               	clrf	setRFSW_Status@command
  7605  06B9  3002               	movlw	2
  7606  06BA  319D  2541  3186   	fcall	_setRFSW_Status
  7607                           
  7608                           ;RF_Control_B1.c: 253: setSw_Status(2, 0);
  7609  06BD  0020               	movlb	0	; select bank0
  7610  06BE  01A1               	clrf	setSw_Status@command
  7611  06BF  3002               	movlw	2
  7612  06C0  319D  2550  3186   	fcall	_setSw_Status
  7613                           
  7614                           ;RF_Control_B1.c: 256: setDimmerLights(3, 0);
  7615  06C3  0020               	movlb	0	; select bank0
  7616  06C4  01A3               	clrf	setDimmerLights@status
  7617  06C5  3003               	movlw	3
  7618  06C6  318D  2551  3186   	fcall	_setDimmerLights
  7619                           
  7620                           ;RF_Control_B1.c: 257: setRFSW_Status(3, 0);
  7621  06C9  0020               	movlb	0	; select bank0
  7622  06CA  01A2               	clrf	setRFSW_Status@command
  7623  06CB  3003               	movlw	3
  7624  06CC  319D  2541  3186   	fcall	_setRFSW_Status
  7625                           
  7626                           ;RF_Control_B1.c: 258: setSw_Status(3, 0);
  7627  06CF  0020               	movlb	0	; select bank0
  7628  06D0  01A1               	clrf	setSw_Status@command
  7629  06D1  3003               	movlw	3
  7630  06D2  319D  2550  3186   	fcall	_setSw_Status
  7631                           
  7632                           ;RF_Control_B1.c: 261: product->Data[9]=0;
  7633  06D5  0020               	movlb	0	; select bank0
  7634  06D6  086F               	movf	_product,w
  7635  06D7  3E09               	addlw	9
  7636  06D8  0086               	movwf	6
  7637  06D9  3002               	movlw	2	; select bank4/5
  7638  06DA  0087               	movwf	7
  7639  06DB  0181               	clrf	1
  7640                           
  7641                           ;RF_Control_B1.c: 262: product->Data[11]=0;
  7642  06DC  086F               	movf	_product,w
  7643  06DD  3E0B               	addlw	11
  7644  06DE  0086               	movwf	6
  7645  06DF  3002               	movlw	2	; select bank4/5
  7646  06E0  0087               	movwf	7
  7647  06E1  0181               	clrf	1
  7648                           
  7649                           ;RF_Control_B1.c: 263: product->Data[15]=0;
  7650  06E2  086F               	movf	_product,w
  7651  06E3  3E0F               	addlw	15
  7652  06E4  0086               	movwf	6
  7653  06E5  3002               	movlw	2	; select bank4/5
  7654  06E6  0087               	movwf	7
  7655  06E7  0181               	clrf	1
  7656                           
  7657                           ;RF_Control_B1.c: 264: product->Data[17]=0;
  7658  06E8  086F               	movf	_product,w
  7659  06E9  3E11               	addlw	17
  7660  06EA  0086               	movwf	6
  7661  06EB  3002               	movlw	2	; select bank4/5
  7662  06EC  0087               	movwf	7
  7663  06ED  0181               	clrf	1
  7664                           
  7665                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  7666  06EE  3064               	movlw	100
  7667  06EF  00A9               	movwf	setBuz@time
  7668  06F0  3000               	movlw	0
  7669  06F1  00AA               	movwf	setBuz@time+1
  7670  06F2  3001               	movlw	1
  7671  06F3  3197  27A7  3186   	fcall	_setBuz
  7672                           
  7673                           ;RF_Control_B1.c: 266: setTxData();
  7674  06F6  3185  252E         	fcall	_setTxData
  7675                           
  7676                           ;RF_Control_B1.c: 267: } else if (RF_Data[15] == 0x20) {
  7677  06F8  0008               	return
  7678  06F9                     l8312:	
  7679  06F9  0022               	movlb	2	; select bank2
  7680  06FA  082F               	movf	(_RF_Data^(0+256)+15),w
  7681  06FB  3A20               	xorlw	32
  7682  06FC  1D03               	skipz
  7683  06FD  2F14               	goto	l8318
  7684                           
  7685                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  7686  06FE  0020               	movlb	0	; select bank0
  7687  06FF  086F               	movf	_product,w
  7688  0700  3E09               	addlw	9
  7689  0701  0086               	movwf	6
  7690  0702  3002               	movlw	2	; select bank4/5
  7691  0703  0087               	movwf	7
  7692  0704  0181               	clrf	1
  7693                           
  7694                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  7695  0705  086F               	movf	_product,w
  7696  0706  3E0B               	addlw	11
  7697  0707  0086               	movwf	6
  7698  0708  3002               	movlw	2	; select bank4/5
  7699  0709  0087               	movwf	7
  7700  070A  0181               	clrf	1
  7701                           
  7702                           ;RF_Control_B1.c: 270: product->Data[17]=0;
  7703  070B  086F               	movf	_product,w
  7704  070C  3E11               	addlw	17
  7705  070D  0086               	movwf	6
  7706  070E  3002               	movlw	2	; select bank4/5
  7707  070F  0087               	movwf	7
  7708  0710  0181               	clrf	1
  7709                           
  7710                           ;RF_Control_B1.c: 271: setTxData();
  7711  0711  3185  252E         	fcall	_setTxData
  7712                           
  7713                           ;RF_Control_B1.c: 272: }
  7714  0713  0008               	return
  7715  0714                     l8318:	
  7716                           
  7717                           ;RF_Control_B1.c: 274: else if (RF_Data[15] == 0x01) {
  7718  0714  0022               	movlb	2	; select bank2
  7719  0715  082F               	movf	(_RF_Data^(0+256)+15),w
  7720  0716  3A01               	xorlw	1
  7721  0717  1D03               	skipz
  7722  0718  2F1D               	goto	l8322
  7723                           
  7724                           ;RF_Control_B1.c: 275: setRFSW_Control(1);
  7725  0719  3001               	movlw	1
  7726  071A  318F  2770         	fcall	_setRFSW_Control
  7727                           
  7728                           ;RF_Control_B1.c: 276: }
  7729  071C  0008               	return
  7730  071D                     l8322:	
  7731                           
  7732                           ;RF_Control_B1.c: 278: else if (RF_Data[15] == 0x11) {
  7733  071D  0022               	movlb	2	; select bank2
  7734  071E  082F               	movf	(_RF_Data^(0+256)+15),w
  7735  071F  3A11               	xorlw	17
  7736  0720  1D03               	skipz
  7737  0721  2F26               	goto	l8326
  7738                           
  7739                           ;RF_Control_B1.c: 279: setRFSW_AdjControl(1);
  7740  0722  3001               	movlw	1
  7741  0723  3193  23F9         	fcall	_setRFSW_AdjControl
  7742                           
  7743                           ;RF_Control_B1.c: 280: }
  7744  0725  0008               	return
  7745  0726                     l8326:	
  7746                           
  7747                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x02) {
  7748  0726  0022               	movlb	2	; select bank2
  7749  0727  082F               	movf	(_RF_Data^(0+256)+15),w
  7750  0728  3A02               	xorlw	2
  7751  0729  1D03               	skipz
  7752  072A  2F2F               	goto	l8330
  7753                           
  7754                           ;RF_Control_B1.c: 286: setRFSW_Control(2);
  7755  072B  3002               	movlw	2
  7756  072C  318F  2770         	fcall	_setRFSW_Control
  7757                           
  7758                           ;RF_Control_B1.c: 287: }
  7759  072E  0008               	return
  7760  072F                     l8330:	
  7761                           
  7762                           ;RF_Control_B1.c: 289: else if (RF_Data[15] == 0x21) {
  7763  072F  0022               	movlb	2	; select bank2
  7764  0730  082F               	movf	(_RF_Data^(0+256)+15),w
  7765  0731  3A21               	xorlw	33
  7766  0732  1D03               	skipz
  7767  0733  2F38               	goto	l8334
  7768                           
  7769                           ;RF_Control_B1.c: 290: setRFSW_AdjControl(2);
  7770  0734  3002               	movlw	2
  7771  0735  3193  23F9         	fcall	_setRFSW_AdjControl
  7772                           
  7773                           ;RF_Control_B1.c: 291: }
  7774  0737  0008               	return
  7775  0738                     l8334:	
  7776                           
  7777                           ;RF_Control_B1.c: 296: else if (RF_Data[15] == 0x03) {
  7778  0738  0022               	movlb	2	; select bank2
  7779  0739  082F               	movf	(_RF_Data^(0+256)+15),w
  7780  073A  3A03               	xorlw	3
  7781  073B  1D03               	skipz
  7782  073C  2F41               	goto	l8338
  7783                           
  7784                           ;RF_Control_B1.c: 297: setRFSW_Control(3);
  7785  073D  3003               	movlw	3
  7786  073E  318F  2770         	fcall	_setRFSW_Control
  7787                           
  7788                           ;RF_Control_B1.c: 298: }
  7789  0740  0008               	return
  7790  0741                     l8338:	
  7791                           
  7792                           ;RF_Control_B1.c: 300: else if (RF_Data[15] == 0x31) {
  7793  0741  0022               	movlb	2	; select bank2
  7794  0742  082F               	movf	(_RF_Data^(0+256)+15),w
  7795  0743  3A31               	xorlw	49
  7796  0744  1D03               	skipz
  7797  0745  0008               	return
  7798                           
  7799                           ;RF_Control_B1.c: 301: setRFSW_AdjControl(3);
  7800  0746  3003               	movlw	3
  7801  0747  3193  23F9         	fcall	_setRFSW_AdjControl
  7802  0749  0008               	return
  7803  074A                     __end_of_setControl_Lights_Table:	
  7804                           
  7805                           	psect	text34
  7806  0F70                     __ptext34:	
  7807 ;; *************** function _setRFSW_Control *****************
  7808 ;; Defined at:
  7809 ;;		line 331 in file "../src/RF_Control_B1.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  sw              1    wreg     unsigned char 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  sw              1   67[BANK0 ] unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;		None               void
  7816 ;; Registers used:
  7817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;Total ram usage:        2 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    9
  7830 ;; This function calls:
  7831 ;;		_RfSWPointSelect
  7832 ;;		_setBuz
  7833 ;;		_setDelayOff_GO
  7834 ;;		_setDimmerLights_Switch
  7835 ;;		_setDimmerLights_Trigger
  7836 ;;		_setRF_DimmerLights
  7837 ;;		_setSw_Status
  7838 ;;		_setTxData
  7839 ;; This function is called by:
  7840 ;;		_setControl_Lights_Table
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _setRFSW_Control
  7846  0F70                     _setRFSW_Control:	
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7850                           ;setRFSW_Control@sw stored from wreg
  7851  0F70  0020               	movlb	0	; select bank0
  7852  0F71  00E3               	movwf	setRFSW_Control@sw
  7853                           
  7854                           ;RF_Control_B1.c: 332: RfSWPointSelect(sw);
  7855  0F72  0863               	movf	setRFSW_Control@sw,w
  7856  0F73  3190  20CC  318F   	fcall	_RfSWPointSelect
  7857                           
  7858                           ;RF_Control_B1.c: 333: if (RFSW->Status == 0) {
  7859  0F76  0021               	movlb	1	; select bank1
  7860  0F77  084D               	movf	_RFSW^(0+128),w
  7861  0F78  0086               	movwf	6
  7862  0F79  0187               	clrf	7
  7863  0F7A  1801               	btfsc	1,0
  7864  0F7B  2FB2               	goto	l6508
  7865                           
  7866                           ;RF_Control_B1.c: 334: if (RF_Data[16] == 0x80) {
  7867  0F7C  0022               	movlb	2	; select bank2
  7868  0F7D  0830               	movf	(_RF_Data^(0+256)+16),w
  7869  0F7E  3A80               	xorlw	128
  7870  0F7F  1D03               	skipz
  7871  0F80  2F8E               	goto	l6498
  7872                           
  7873                           ;RF_Control_B1.c: 335: setDelayOff_GO(sw, 1, RF_Data[17]);
  7874  0F81  0020               	movlb	0	; select bank0
  7875  0F82  01AA               	clrf	setDelayOff_GO@command
  7876  0F83  0AAA               	incf	setDelayOff_GO@command,f
  7877  0F84  0022               	movlb	2	; select bank2
  7878  0F85  0831               	movf	(_RF_Data^(0+256)+17),w
  7879  0F86  0020               	movlb	0	; select bank0
  7880  0F87  00E2               	movwf	??_setRFSW_Control
  7881  0F88  0862               	movf	??_setRFSW_Control,w
  7882  0F89  00AB               	movwf	setDelayOff_GO@value
  7883  0F8A  0863               	movf	setRFSW_Control@sw,w
  7884  0F8B  318A  222F  318F   	fcall	_setDelayOff_GO
  7885  0F8E                     l6498:	
  7886                           
  7887                           ;RF_Control_B1.c: 336: }
  7888                           ;RF_Control_B1.c: 337: RFSW->Status = 1;
  7889  0F8E  0021               	movlb	1	; select bank1
  7890  0F8F  084D               	movf	_RFSW^(0+128),w
  7891  0F90  0086               	movwf	6
  7892  0F91  0187               	clrf	7
  7893  0F92  1401               	bsf	1,0
  7894                           
  7895                           ;RF_Control_B1.c: 338: setSw_Status(sw, 1);
  7896  0F93  0020               	movlb	0	; select bank0
  7897  0F94  01A1               	clrf	setSw_Status@command
  7898  0F95  0AA1               	incf	setSw_Status@command,f
  7899  0F96  0863               	movf	setRFSW_Control@sw,w
  7900  0F97  319D  2550  318F   	fcall	_setSw_Status
  7901                           
  7902                           ;RF_Control_B1.c: 340: setDimmerLights_Trigger(sw, 1);
  7903  0F9A  0020               	movlb	0	; select bank0
  7904  0F9B  01A2               	clrf	setDimmerLights_Trigger@command
  7905  0F9C  0AA2               	incf	setDimmerLights_Trigger@command,f
  7906  0F9D  0863               	movf	setRFSW_Control@sw,w
  7907  0F9E  319D  25AB  318F   	fcall	_setDimmerLights_Trigger
  7908                           
  7909                           ;RF_Control_B1.c: 341: setDimmerLights_Switch(sw, 1);
  7910  0FA1  0020               	movlb	0	; select bank0
  7911  0FA2  01A2               	clrf	setDimmerLights_Switch@command
  7912  0FA3  0AA2               	incf	setDimmerLights_Switch@command,f
  7913  0FA4  0863               	movf	setRFSW_Control@sw,w
  7914  0FA5  319D  259B  318F   	fcall	_setDimmerLights_Switch
  7915                           
  7916                           ;RF_Control_B1.c: 343: setRF_DimmerLights(sw, RFSW->Status);
  7917  0FA8  0021               	movlb	1	; select bank1
  7918  0FA9  084D               	movf	_RFSW^(0+128),w
  7919  0FAA  0086               	movwf	6
  7920  0FAB  0187               	clrf	7
  7921  0FAC  3000               	movlw	0
  7922  0FAD  1801               	btfsc	1,0
  7923  0FAE  3001               	movlw	1
  7924  0FAF  0020               	movlb	0	; select bank0
  7925  0FB0  00DD               	movwf	setRF_DimmerLights@on
  7926  0FB1  2FF0               	goto	L6
  7927  0FB2                     l6508:	
  7928                           ;RF_Control_B1.c: 344: } else {
  7929                           
  7930                           
  7931                           ;RF_Control_B1.c: 345: if (RF_Data[16] == 0x80) {
  7932  0FB2  0022               	movlb	2	; select bank2
  7933  0FB3  0830               	movf	(_RF_Data^(0+256)+16),w
  7934  0FB4  3A80               	xorlw	128
  7935  0FB5  1D03               	skipz
  7936  0FB6  2FC8               	goto	l6512
  7937                           
  7938                           ;RF_Control_B1.c: 346: setDelayOff_GO(sw, 1, RF_Data[17]);
  7939  0FB7  0020               	movlb	0	; select bank0
  7940  0FB8  01AA               	clrf	setDelayOff_GO@command
  7941  0FB9  0AAA               	incf	setDelayOff_GO@command,f
  7942  0FBA  0022               	movlb	2	; select bank2
  7943  0FBB  0831               	movf	(_RF_Data^(0+256)+17),w
  7944  0FBC  0020               	movlb	0	; select bank0
  7945  0FBD  00E2               	movwf	??_setRFSW_Control
  7946  0FBE  0862               	movf	??_setRFSW_Control,w
  7947  0FBF  00AB               	movwf	setDelayOff_GO@value
  7948  0FC0  0863               	movf	setRFSW_Control@sw,w
  7949  0FC1  318A  222F  318F   	fcall	_setDelayOff_GO
  7950                           
  7951                           ;RF_Control_B1.c: 347: setRF_DimmerLights(sw, 1);
  7952  0FC4  0020               	movlb	0	; select bank0
  7953  0FC5  01DD               	clrf	setRF_DimmerLights@on
  7954  0FC6  0ADD               	incf	setRF_DimmerLights@on,f
  7955  0FC7  2FF0               	goto	L6
  7956  0FC8                     l6512:	
  7957                           ;RF_Control_B1.c: 348: } else {
  7958                           
  7959                           
  7960                           ;RF_Control_B1.c: 349: RFSW->Status = 0;
  7961  0FC8  0021               	movlb	1	; select bank1
  7962  0FC9  084D               	movf	_RFSW^(0+128),w
  7963  0FCA  0086               	movwf	6
  7964  0FCB  0187               	clrf	7
  7965  0FCC  1001               	bcf	1,0
  7966                           
  7967                           ;RF_Control_B1.c: 350: setSw_Status(sw, 0);
  7968  0FCD  0020               	movlb	0	; select bank0
  7969  0FCE  01A1               	clrf	setSw_Status@command
  7970  0FCF  0863               	movf	setRFSW_Control@sw,w
  7971  0FD0  319D  2550  318F   	fcall	_setSw_Status
  7972                           
  7973                           ;RF_Control_B1.c: 352: setDimmerLights_Trigger(sw, 1);
  7974  0FD3  0020               	movlb	0	; select bank0
  7975  0FD4  01A2               	clrf	setDimmerLights_Trigger@command
  7976  0FD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  7977  0FD6  0863               	movf	setRFSW_Control@sw,w
  7978  0FD7  319D  25AB  318F   	fcall	_setDimmerLights_Trigger
  7979                           
  7980                           ;RF_Control_B1.c: 353: setDimmerLights_Switch(sw, RFSW->Status);
  7981  0FDA  0021               	movlb	1	; select bank1
  7982  0FDB  084D               	movf	_RFSW^(0+128),w
  7983  0FDC  0086               	movwf	6
  7984  0FDD  0187               	clrf	7
  7985  0FDE  3000               	movlw	0
  7986  0FDF  1801               	btfsc	1,0
  7987  0FE0  3001               	movlw	1
  7988  0FE1  0020               	movlb	0	; select bank0
  7989  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  7990  0FE3  0863               	movf	setRFSW_Control@sw,w
  7991  0FE4  319D  259B  318F   	fcall	_setDimmerLights_Switch
  7992                           
  7993                           ;RF_Control_B1.c: 355: setDelayOff_GO(sw, 0, 0);
  7994  0FE7  0020               	movlb	0	; select bank0
  7995  0FE8  01AA               	clrf	setDelayOff_GO@command
  7996  0FE9  01AB               	clrf	setDelayOff_GO@value
  7997  0FEA  0863               	movf	setRFSW_Control@sw,w
  7998  0FEB  318A  222F  318F   	fcall	_setDelayOff_GO
  7999                           
  8000                           ;RF_Control_B1.c: 356: setRF_DimmerLights(sw, 0);
  8001  0FEE  0020               	movlb	0	; select bank0
  8002  0FEF  01DD               	clrf	setRF_DimmerLights@on
  8003  0FF0                     L6:	
  8004  0FF0  0863               	movf	setRFSW_Control@sw,w
  8005  0FF1  318A  2295  318F   	fcall	_setRF_DimmerLights
  8006                           
  8007                           ;RF_Control_B1.c: 357: }
  8008                           ;RF_Control_B1.c: 358: }
  8009                           ;RF_Control_B1.c: 359: setBuz(1, 100);
  8010  0FF4  3064               	movlw	100
  8011  0FF5  0020               	movlb	0	; select bank0
  8012  0FF6  00A9               	movwf	setBuz@time
  8013  0FF7  3000               	movlw	0
  8014  0FF8  00AA               	movwf	setBuz@time+1
  8015  0FF9  3001               	movlw	1
  8016  0FFA  3197  27A7  318F   	fcall	_setBuz
  8017                           
  8018                           ;RF_Control_B1.c: 360: setTxData();
  8019  0FFD  3185  252E         	fcall	_setTxData
  8020  0FFF  0008               	return
  8021  1000                     __end_of_setRFSW_Control:	
  8022                           
  8023                           	psect	text35
  8024  0A2F                     __ptext35:	
  8025 ;; *************** function _setDelayOff_GO *****************
  8026 ;; Defined at:
  8027 ;;		line 86 in file "../src/DelayOff_B1.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  sw              1    wreg     unsigned char 
  8030 ;;  command         1   10[BANK0 ] unsigned char 
  8031 ;;  value           1   11[BANK0 ] unsigned char 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  sw              1   14[BANK0 ] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;		None               void
  8036 ;; Registers used:
  8037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;Total ram usage:        5 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    7
  8050 ;; This function calls:
  8051 ;;		_DelayOffPointSelect
  8052 ;;		_DelayTimejudge
  8053 ;; This function is called by:
  8054 ;;		_setRFSW_Control
  8055 ;;		_Sw_DimmerOffFunc
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _setDelayOff_GO
  8061  0A2F                     _setDelayOff_GO:	
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8065                           ;setDelayOff_GO@sw stored from wreg
  8066  0A2F  0020               	movlb	0	; select bank0
  8067  0A30  00AE               	movwf	setDelayOff_GO@sw
  8068                           
  8069                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8070  0A31  082E               	movf	setDelayOff_GO@sw,w
  8071  0A32  319F  27A9  318A   	fcall	_DelayOffPointSelect
  8072                           
  8073                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8074  0A35  087A               	movf	_DelayOff,w
  8075  0A36  0086               	movwf	6
  8076  0A37  3001               	movlw	1	; select bank2/3
  8077  0A38  0087               	movwf	7
  8078  0A39  1C01               	btfss	1,0
  8079  0A3A  0008               	return
  8080                           
  8081                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8082  0A3B  0020               	movlb	0	; select bank0
  8083  0A3C  082A               	movf	setDelayOff_GO@command,w
  8084  0A3D  3A01               	xorlw	1
  8085  0A3E  3000               	movlw	0
  8086  0A3F  1903               	skipnz
  8087  0A40  3001               	movlw	1
  8088  0A41  00AC               	movwf	??_setDelayOff_GO
  8089  0A42  087A               	movf	_DelayOff,w
  8090  0A43  0086               	movwf	6
  8091  0A44  3001               	movlw	1	; select bank2/3
  8092  0A45  0087               	movwf	7
  8093  0A46  0DAC               	rlf	??_setDelayOff_GO,f
  8094  0A47  0801               	movf	1,w
  8095  0A48  062C               	xorwf	??_setDelayOff_GO,w
  8096  0A49  39FD               	andlw	-3
  8097  0A4A  062C               	xorwf	??_setDelayOff_GO,w
  8098  0A4B  0081               	movwf	1
  8099                           
  8100                           ;DelayOff_B1.c: 90: if (command == 1) {
  8101  0A4C  082A               	movf	setDelayOff_GO@command,w
  8102  0A4D  3A01               	xorlw	1
  8103  0A4E  1D03               	skipz
  8104  0A4F  2A7A               	goto	l6288
  8105                           
  8106                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8107  0A50  082B               	movf	setDelayOff_GO@value,w
  8108  0A51  3192  2253  318A   	fcall	_DelayTimejudge
  8109  0A54  0020               	movlb	0	; select bank0
  8110  0A55  00AC               	movwf	??_setDelayOff_GO
  8111  0A56  0A7A               	incf	_DelayOff,w
  8112  0A57  0086               	movwf	6
  8113  0A58  3001               	movlw	1	; select bank2/3
  8114  0A59  0087               	movwf	7
  8115  0A5A  082C               	movf	??_setDelayOff_GO,w
  8116  0A5B  0081               	movwf	1
  8117                           
  8118                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8119  0A5C  300F               	movlw	15
  8120  0A5D  052B               	andwf	setDelayOff_GO@value,w
  8121  0A5E  00AC               	movwf	??_setDelayOff_GO
  8122  0A5F  082C               	movf	??_setDelayOff_GO,w
  8123  0A60  3A05               	xorlw	5
  8124  0A61  1903               	skipnz
  8125  0A62  2A67               	goto	l6282
  8126  0A63  082B               	movf	setDelayOff_GO@value,w
  8127  0A64  390F               	andlw	15
  8128  0A65  1D03               	btfss	3,2
  8129  0A66  2A6D               	goto	l6286
  8130  0A67                     l6282:	
  8131  0A67  3026               	movlw	38
  8132  0A68  022B               	subwf	setDelayOff_GO@value,w
  8133  0A69  1803               	skipnc
  8134  0A6A  2A6D               	goto	l6286
  8135                           
  8136                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8137  0A6B  082B               	movf	setDelayOff_GO@value,w
  8138  0A6C  2A6E               	goto	L7
  8139  0A6D                     l6286:	
  8140                           ;DelayOff_B1.c: 94: } else {
  8141                           
  8142                           
  8143                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8144  0A6D  3005               	movlw	5
  8145  0A6E                     L7:	
  8146  0A6E  00AC               	movwf	??_setDelayOff_GO
  8147  0A6F  082E               	movf	setDelayOff_GO@sw,w
  8148  0A70  3E1A               	addlw	26
  8149  0A71  076F               	addwf	_product,w
  8150  0A72  00AD               	movwf	??_setDelayOff_GO+1
  8151  0A73  082D               	movf	??_setDelayOff_GO+1,w
  8152  0A74  0086               	movwf	6
  8153  0A75  3002               	movlw	2	; select bank4/5
  8154  0A76  0087               	movwf	7
  8155  0A77  082C               	movf	??_setDelayOff_GO,w
  8156  0A78  0081               	movwf	1
  8157                           
  8158                           ;DelayOff_B1.c: 96: }
  8159                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8160  0A79  2A86               	goto	l6292
  8161  0A7A                     l6288:	
  8162  0A7A  08AA               	movf	setDelayOff_GO@command,f
  8163  0A7B  1D03               	skipz
  8164  0A7C  2A86               	goto	l6292
  8165                           
  8166                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8167  0A7D  082E               	movf	setDelayOff_GO@sw,w
  8168  0A7E  3E1A               	addlw	26
  8169  0A7F  076F               	addwf	_product,w
  8170  0A80  00AC               	movwf	??_setDelayOff_GO
  8171  0A81  082C               	movf	??_setDelayOff_GO,w
  8172  0A82  0086               	movwf	6
  8173  0A83  3002               	movlw	2	; select bank4/5
  8174  0A84  0087               	movwf	7
  8175  0A85  0181               	clrf	1
  8176  0A86                     l6292:	
  8177                           
  8178                           ;DelayOff_B1.c: 99: }
  8179                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8180  0A86  087A               	movf	_DelayOff,w
  8181  0A87  3E02               	addlw	2
  8182  0A88  0086               	movwf	6
  8183  0A89  3001               	movlw	1	; select bank2/3
  8184  0A8A  0087               	movwf	7
  8185  0A8B  3000               	movlw	0
  8186  0A8C  3FC0               	movwi [0]fsr1
  8187  0A8D  3FC1               	movwi [1]fsr1
  8188                           
  8189                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8190  0A8E  087A               	movf	_DelayOff,w
  8191  0A8F  3E04               	addlw	4
  8192  0A90  0086               	movwf	6
  8193  0A91  3001               	movlw	1	; select bank2/3
  8194  0A92  0087               	movwf	7
  8195  0A93  0181               	clrf	1
  8196  0A94  0008               	return
  8197  0A95                     __end_of_setDelayOff_GO:	
  8198                           
  8199                           	psect	text36
  8200  1253                     __ptext36:	
  8201 ;; *************** function _DelayTimejudge *****************
  8202 ;; Defined at:
  8203 ;;		line 106 in file "../src/DelayOff_B1.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  value           1    wreg     unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  value           1    9[BANK0 ] unsigned char 
  8208 ;;  k               1    8[BANK0 ] unsigned char 
  8209 ;;  j               1    7[BANK0 ] unsigned char 
  8210 ;;  i               1    6[BANK0 ] unsigned char 
  8211 ;; Return value:  Size  Location     Type
  8212 ;;                  1    wreg      unsigned char 
  8213 ;; Registers used:
  8214 ;;		wreg, status,2, status,0, pclath, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;Total ram usage:        6 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    6
  8227 ;; This function calls:
  8228 ;;		___bmul
  8229 ;; This function is called by:
  8230 ;;		_setDelayOff_GO
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _DelayTimejudge
  8236  1253                     _DelayTimejudge:	
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8240                           ;DelayTimejudge@value stored from wreg
  8241  1253  0020               	movlb	0	; select bank0
  8242  1254  00A9               	movwf	DelayTimejudge@value
  8243                           
  8244                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8245  1255  3005               	movlw	5
  8246  1256  00A4               	movwf	??_DelayTimejudge
  8247  1257  0824               	movf	??_DelayTimejudge,w
  8248  1258  00A6               	movwf	DelayTimejudge@i
  8249  1259  01A7               	clrf	DelayTimejudge@j
  8250  125A  01A8               	clrf	DelayTimejudge@k
  8251                           
  8252                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8253  125B  3031               	movlw	49
  8254  125C  0229               	subwf	DelayTimejudge@value,w
  8255  125D  1803               	skipnc
  8256  125E  2A7B               	goto	l6064
  8257                           
  8258                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8259  125F  0829               	movf	DelayTimejudge@value,w
  8260  1260  390F               	andlw	15
  8261  1261  00A4               	movwf	??_DelayTimejudge
  8262  1262  0824               	movf	??_DelayTimejudge,w
  8263  1263  00A7               	movwf	DelayTimejudge@j
  8264                           
  8265                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8266  1264  0829               	movf	DelayTimejudge@value,w
  8267  1265  00A4               	movwf	??_DelayTimejudge
  8268  1266  3004               	movlw	4
  8269  1267                     u4675:	
  8270  1267  36A4               	lsrf	??_DelayTimejudge,f
  8271  1268  0B89               	decfsz	9,f
  8272  1269  2A67               	goto	u4675
  8273  126A  0824               	movf	??_DelayTimejudge,w
  8274  126B  390F               	andlw	15
  8275  126C  00A5               	movwf	??_DelayTimejudge+1
  8276  126D  0825               	movf	??_DelayTimejudge+1,w
  8277  126E  00A8               	movwf	DelayTimejudge@k
  8278                           
  8279                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8280  126F  300A               	movlw	10
  8281  1270  00A4               	movwf	??_DelayTimejudge
  8282  1271  0824               	movf	??_DelayTimejudge,w
  8283  1272  00A0               	movwf	___bmul@multiplicand
  8284  1273  0828               	movf	DelayTimejudge@k,w
  8285  1274  319E  2641         	fcall	___bmul
  8286  1276  0020               	movlb	0	; select bank0
  8287  1277  0727               	addwf	DelayTimejudge@j,w
  8288  1278  00A5               	movwf	??_DelayTimejudge+1
  8289  1279  0825               	movf	??_DelayTimejudge+1,w
  8290  127A  00A6               	movwf	DelayTimejudge@i
  8291  127B                     l6064:	
  8292                           
  8293                           ;DelayOff_B1.c: 112: }
  8294                           ;DelayOff_B1.c: 133: return i;
  8295  127B  0826               	movf	DelayTimejudge@i,w
  8296  127C  0008               	return
  8297  127D                     __end_of_DelayTimejudge:	
  8298                           
  8299                           	psect	text37
  8300  1E41                     __ptext37:	
  8301 ;; *************** function ___bmul *****************
  8302 ;; Defined at:
  8303 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  multiplier      1    wreg     unsigned char 
  8306 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8309 ;;  product         1    2[BANK0 ] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      unsigned char 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8319 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;Total ram usage:        4 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:    5
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_DelayTimejudge
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           
  8334                           ;psect for function ___bmul
  8335  1E41                     ___bmul:	
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8339                           ;___bmul@multiplier stored from wreg
  8340  1E41  0020               	movlb	0	; select bank0
  8341  1E42  00A3               	movwf	___bmul@multiplier
  8342  1E43  01A2               	clrf	___bmul@product
  8343  1E44                     l6026:	
  8344  1E44  1C23               	btfss	___bmul@multiplier,0
  8345  1E45  2E4A               	goto	l6030
  8346  1E46  0820               	movf	___bmul@multiplicand,w
  8347  1E47  00A1               	movwf	??___bmul
  8348  1E48  0821               	movf	??___bmul,w
  8349  1E49  07A2               	addwf	___bmul@product,f
  8350  1E4A                     l6030:	
  8351  1E4A  1003               	clrc
  8352  1E4B  0DA0               	rlf	___bmul@multiplicand,f
  8353  1E4C  1003               	clrc
  8354  1E4D  0CA3               	rrf	___bmul@multiplier,f
  8355  1E4E  08A3               	movf	___bmul@multiplier,f
  8356  1E4F  1D03               	skipz
  8357  1E50  2E44               	goto	l6026
  8358  1E51  0822               	movf	___bmul@product,w
  8359  1E52  0008               	return
  8360  1E53                     __end_of___bmul:	
  8361                           
  8362                           	psect	text38
  8363  13F9                     __ptext38:	
  8364 ;; *************** function _setRFSW_AdjControl *****************
  8365 ;; Defined at:
  8366 ;;		line 364 in file "../src/RF_Control_B1.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  sw              1    wreg     unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  sw              1   70[BANK0 ] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;		None               void
  8373 ;; Registers used:
  8374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;Total ram usage:        3 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:   10
  8387 ;; This function calls:
  8388 ;;		_RfSWPointSelect
  8389 ;;		_setRF_DimmerValue
  8390 ;;		_setTxData
  8391 ;; This function is called by:
  8392 ;;		_setControl_Lights_Table
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function _setRFSW_AdjControl
  8398  13F9                     _setRFSW_AdjControl:	
  8399                           
  8400                           ;incstack = 0
  8401                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8402                           ;setRFSW_AdjControl@sw stored from wreg
  8403  13F9  0020               	movlb	0	; select bank0
  8404  13FA  00E6               	movwf	setRFSW_AdjControl@sw
  8405                           
  8406                           ;RF_Control_B1.c: 365: RfSWPointSelect(sw);
  8407  13FB  0866               	movf	setRFSW_AdjControl@sw,w
  8408  13FC  3190  20CC  3193   	fcall	_RfSWPointSelect
  8409                           
  8410                           ;RF_Control_B1.c: 366: if (RFSW->Status == 1) {
  8411  13FF  0021               	movlb	1	; select bank1
  8412  1400  084D               	movf	_RFSW^(0+128),w
  8413  1401  0086               	movwf	6
  8414  1402  0187               	clrf	7
  8415  1403  1C01               	btfss	1,0
  8416  1404  2C0D               	goto	l6536
  8417                           
  8418                           ;RF_Control_B1.c: 367: Memory.Modify=1;
  8419  1405  0023               	movlb	3	; select bank3
  8420  1406  1444               	bsf	(_Memory^(0+384)+36),0
  8421                           
  8422                           ;RF_Control_B1.c: 368: setRF_DimmerValue(sw);
  8423  1407  0020               	movlb	0	; select bank0
  8424  1408  0866               	movf	setRFSW_AdjControl@sw,w
  8425  1409  3193  238E  3193   	fcall	_setRF_DimmerValue
  8426                           
  8427                           ;RF_Control_B1.c: 369: } else {
  8428  140C  2C1F               	goto	l2409
  8429  140D                     l6536:	
  8430                           
  8431                           ;RF_Control_B1.c: 370: product->Data[9]=product->Data[20 + sw];
  8432  140D  0020               	movlb	0	; select bank0
  8433  140E  0866               	movf	setRFSW_AdjControl@sw,w
  8434  140F  3E14               	addlw	20
  8435  1410  076F               	addwf	_product,w
  8436  1411  00E4               	movwf	??_setRFSW_AdjControl
  8437  1412  0864               	movf	??_setRFSW_AdjControl,w
  8438  1413  0086               	movwf	6
  8439  1414  3002               	movlw	2	; select bank4/5
  8440  1415  0087               	movwf	7
  8441  1416  0801               	movf	1,w
  8442  1417  00E5               	movwf	??_setRFSW_AdjControl+1
  8443  1418  086F               	movf	_product,w
  8444  1419  3E09               	addlw	9
  8445  141A  0086               	movwf	6
  8446  141B  3002               	movlw	2	; select bank4/5
  8447  141C  0087               	movwf	7
  8448  141D  0865               	movf	??_setRFSW_AdjControl+1,w
  8449  141E  0081               	movwf	1
  8450  141F                     l2409:	
  8451                           
  8452                           ;RF_Control_B1.c: 371: }
  8453                           ;RF_Control_B1.c: 372: product->Data[17]=product->Data[26 + sw];
  8454  141F  0020               	movlb	0	; select bank0
  8455  1420  0866               	movf	setRFSW_AdjControl@sw,w
  8456  1421  3E1A               	addlw	26
  8457  1422  076F               	addwf	_product,w
  8458  1423  00E4               	movwf	??_setRFSW_AdjControl
  8459  1424  0864               	movf	??_setRFSW_AdjControl,w
  8460  1425  0086               	movwf	6
  8461  1426  3002               	movlw	2	; select bank4/5
  8462  1427  0087               	movwf	7
  8463  1428  0801               	movf	1,w
  8464  1429  00E5               	movwf	??_setRFSW_AdjControl+1
  8465  142A  086F               	movf	_product,w
  8466  142B  3E11               	addlw	17
  8467  142C  0086               	movwf	6
  8468  142D  3002               	movlw	2	; select bank4/5
  8469  142E  0087               	movwf	7
  8470  142F  0865               	movf	??_setRFSW_AdjControl+1,w
  8471  1430  0081               	movwf	1
  8472                           
  8473                           ;RF_Control_B1.c: 373: setTxData();
  8474  1431  3185  252E         	fcall	_setTxData
  8475  1433  0008               	return
  8476  1434                     __end_of_setRFSW_AdjControl:	
  8477                           
  8478                           	psect	text39
  8479  138E                     __ptext39:	
  8480 ;; *************** function _setRF_DimmerValue *****************
  8481 ;; Defined at:
  8482 ;;		line 384 in file "../src/RF_Control_B1.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;  lights          1    wreg     unsigned char 
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;  lights          1   67[BANK0 ] unsigned char 
  8487 ;; Return value:  Size  Location     Type
  8488 ;;		None               void
  8489 ;; Registers used:
  8490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8500 ;;Total ram usage:        3 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:    9
  8503 ;; This function calls:
  8504 ;;		_setDimmerLights_AdjRF
  8505 ;; This function is called by:
  8506 ;;		_setRFSW_AdjControl
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           
  8511                           ;psect for function _setRF_DimmerValue
  8512  138E                     _setRF_DimmerValue:	
  8513                           
  8514                           ;incstack = 0
  8515                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8516                           ;setRF_DimmerValue@lights stored from wreg
  8517  138E  0020               	movlb	0	; select bank0
  8518  138F  00E3               	movwf	setRF_DimmerValue@lights
  8519                           
  8520                           ;RF_Control_B1.c: 385: if (RF_Data[9] > 0x64) {
  8521  1390  3065               	movlw	101
  8522  1391  0022               	movlb	2	; select bank2
  8523  1392  0229               	subwf	(_RF_Data^(0+256)+9),w
  8524  1393  1C03               	skipc
  8525  1394  2B9B               	goto	l6368
  8526                           
  8527                           ;RF_Control_B1.c: 386: RF_Data[9] = 0x64;
  8528  1395  3064               	movlw	100
  8529  1396  0020               	movlb	0	; select bank0
  8530  1397  00E1               	movwf	??_setRF_DimmerValue
  8531  1398  0861               	movf	??_setRF_DimmerValue,w
  8532  1399  0022               	movlb	2	; select bank2
  8533  139A  00A9               	movwf	(_RF_Data^(0+256)+9)
  8534  139B                     l6368:	
  8535                           
  8536                           ;RF_Control_B1.c: 387: }
  8537                           ;RF_Control_B1.c: 388: product->Data[9]=RF_Data[9];
  8538  139B  0829               	movf	(_RF_Data^(0+256)+9),w
  8539  139C  0020               	movlb	0	; select bank0
  8540  139D  00E1               	movwf	??_setRF_DimmerValue
  8541  139E  086F               	movf	_product,w
  8542  139F  3E09               	addlw	9
  8543  13A0  0086               	movwf	6
  8544  13A1  3002               	movlw	2	; select bank4/5
  8545  13A2  0087               	movwf	7
  8546  13A3  0861               	movf	??_setRF_DimmerValue,w
  8547  13A4  0081               	movwf	1
  8548                           
  8549                           ;RF_Control_B1.c: 389: product->Data[11]=lights;
  8550  13A5  0863               	movf	setRF_DimmerValue@lights,w
  8551  13A6  00E1               	movwf	??_setRF_DimmerValue
  8552  13A7  086F               	movf	_product,w
  8553  13A8  3E0B               	addlw	11
  8554  13A9  0086               	movwf	6
  8555  13AA  3002               	movlw	2	; select bank4/5
  8556  13AB  0087               	movwf	7
  8557  13AC  0861               	movf	??_setRF_DimmerValue,w
  8558  13AD  0081               	movwf	1
  8559                           
  8560                           ;RF_Control_B1.c: 390: product->Data[(20 + lights)]=product->Data[9];
  8561  13AE  086F               	movf	_product,w
  8562  13AF  3E09               	addlw	9
  8563  13B0  0086               	movwf	6
  8564  13B1  3002               	movlw	2	; select bank4/5
  8565  13B2  0087               	movwf	7
  8566  13B3  0801               	movf	1,w
  8567  13B4  00E1               	movwf	??_setRF_DimmerValue
  8568  13B5  0863               	movf	setRF_DimmerValue@lights,w
  8569  13B6  3E14               	addlw	20
  8570  13B7  076F               	addwf	_product,w
  8571  13B8  00E2               	movwf	??_setRF_DimmerValue+1
  8572  13B9  0862               	movf	??_setRF_DimmerValue+1,w
  8573  13BA  0086               	movwf	6
  8574  13BB  3002               	movlw	2	; select bank4/5
  8575  13BC  0087               	movwf	7
  8576  13BD  0861               	movf	??_setRF_DimmerValue,w
  8577  13BE  0081               	movwf	1
  8578                           
  8579                           ;RF_Control_B1.c: 391: setDimmerLights_AdjRF(lights);
  8580  13BF  0863               	movf	setRF_DimmerValue@lights,w
  8581  13C0  3191  2192         	fcall	_setDimmerLights_AdjRF
  8582  13C2  0008               	return
  8583  13C3                     __end_of_setRF_DimmerValue:	
  8584                           
  8585                           	psect	text40
  8586  1192                     __ptext40:	
  8587 ;; *************** function _setDimmerLights_AdjRF *****************
  8588 ;; Defined at:
  8589 ;;		line 679 in file "../src/Dimmer_B1.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;  lights          1    wreg     unsigned char 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;  lights          1   64[BANK0 ] unsigned char 
  8594 ;; Return value:  Size  Location     Type
  8595 ;;		None               void
  8596 ;; Registers used:
  8597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;Total ram usage:        2 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; Hardware stack levels required when called:    8
  8610 ;; This function calls:
  8611 ;;		_DimmerLightsPointSelect
  8612 ;;		_getPercentValue
  8613 ;; This function is called by:
  8614 ;;		_setRF_DimmerValue
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           
  8619                           ;psect for function _setDimmerLights_AdjRF
  8620  1192                     _setDimmerLights_AdjRF:	
  8621                           
  8622                           ;incstack = 0
  8623                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8624                           ;setDimmerLights_AdjRF@lights stored from wreg
  8625  1192  0020               	movlb	0	; select bank0
  8626  1193  00E0               	movwf	setDimmerLights_AdjRF@lights
  8627                           
  8628                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  8629  1194  0860               	movf	setDimmerLights_AdjRF@lights,w
  8630  1195  319F  2755  3191   	fcall	_DimmerLightsPointSelect
  8631                           
  8632                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  8633  1198  087B               	movf	_DimmerLights,w
  8634  1199  0086               	movwf	6
  8635  119A  3001               	movlw	1	; select bank2/3
  8636  119B  0087               	movwf	7
  8637  119C  1501               	bsf	1,2
  8638                           
  8639                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  8640  119D  087B               	movf	_DimmerLights,w
  8641  119E  0086               	movwf	6
  8642  119F  3001               	movlw	1	; select bank2/3
  8643  11A0  0087               	movwf	7
  8644  11A1  1481               	bsf	1,1
  8645                           
  8646                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8647  11A2  0020               	movlb	0	; select bank0
  8648  11A3  086F               	movf	_product,w
  8649  11A4  3E09               	addlw	9
  8650  11A5  0086               	movwf	6
  8651  11A6  3002               	movlw	2	; select bank4/5
  8652  11A7  0087               	movwf	7
  8653  11A8  0801               	movf	1,w
  8654  11A9  3188  2045         	fcall	_getPercentValue
  8655  11AB  0020               	movlb	0	; select bank0
  8656  11AC  00DF               	movwf	??_setDimmerLights_AdjRF
  8657  11AD  087B               	movf	_DimmerLights,w
  8658  11AE  3E05               	addlw	5
  8659  11AF  0086               	movwf	6
  8660  11B0  3001               	movlw	1	; select bank2/3
  8661  11B1  0087               	movwf	7
  8662  11B2  085F               	movf	??_setDimmerLights_AdjRF,w
  8663  11B3  0081               	movwf	1
  8664  11B4  0008               	return
  8665  11B5                     __end_of_setDimmerLights_AdjRF:	
  8666                           
  8667                           	psect	text41
  8668  0845                     __ptext41:	
  8669 ;; *************** function _getPercentValue *****************
  8670 ;; Defined at:
  8671 ;;		line 752 in file "../src/Dimmer_B1.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  value           1    wreg     unsigned char 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  value           1   59[BANK0 ] unsigned char 
  8676 ;;  i               3   60[BANK0 ] float 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      unsigned char 
  8679 ;; Registers used:
  8680 ;;		wreg, status,2, status,0, pclath, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;Total ram usage:        6 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    7
  8693 ;; This function calls:
  8694 ;;		___awtoft
  8695 ;;		___ftadd
  8696 ;;		___ftdiv
  8697 ;;		___ftmul
  8698 ;;		___fttol
  8699 ;; This function is called by:
  8700 ;;		_setDimmerLights_AdjRF
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           
  8705                           ;psect for function _getPercentValue
  8706  0845                     _getPercentValue:	
  8707                           
  8708                           ;incstack = 0
  8709                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8710                           ;getPercentValue@value stored from wreg
  8711  0845  0020               	movlb	0	; select bank0
  8712  0846  00DB               	movwf	getPercentValue@value
  8713                           
  8714                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
  8715  0847  3000               	movlw	0
  8716  0848  00DC               	movwf	getPercentValue@i
  8717  0849  3060               	movlw	96
  8718  084A  00DD               	movwf	getPercentValue@i+1
  8719  084B  3042               	movlw	66
  8720  084C  00DE               	movwf	getPercentValue@i+2
  8721                           
  8722                           ;Dimmer_B1.c: 755: i /= 100;
  8723  084D  3000               	movlw	0
  8724  084E  00AE               	movwf	___ftdiv@f2
  8725  084F  30C8               	movlw	200
  8726  0850  00AF               	movwf	___ftdiv@f2+1
  8727  0851  3042               	movlw	66
  8728  0852  00B0               	movwf	___ftdiv@f2+2
  8729  0853  085C               	movf	getPercentValue@i,w
  8730  0854  00B1               	movwf	___ftdiv@f1
  8731  0855  085D               	movf	getPercentValue@i+1,w
  8732  0856  00B2               	movwf	___ftdiv@f1+1
  8733  0857  085E               	movf	getPercentValue@i+2,w
  8734  0858  00B3               	movwf	___ftdiv@f1+2
  8735  0859  3187  274A  3188   	fcall	___ftdiv
  8736  085C  0020               	movlb	0	; select bank0
  8737  085D  082E               	movf	?___ftdiv,w
  8738  085E  00DC               	movwf	getPercentValue@i
  8739  085F  082F               	movf	?___ftdiv+1,w
  8740  0860  00DD               	movwf	getPercentValue@i+1
  8741  0861  0830               	movf	?___ftdiv+2,w
  8742  0862  00DE               	movwf	getPercentValue@i+2
  8743                           
  8744                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-95)*0.8)));
  8745  0863  085B               	movf	getPercentValue@value,w
  8746  0864  00D9               	movwf	??_getPercentValue
  8747  0865  01DA               	clrf	??_getPercentValue+1
  8748  0866  09D9               	comf	??_getPercentValue,f
  8749  0867  09DA               	comf	??_getPercentValue+1,f
  8750  0868  0AD9               	incf	??_getPercentValue,f
  8751  0869  1903               	skipnz
  8752  086A  0ADA               	incf	??_getPercentValue+1,f
  8753  086B  0859               	movf	??_getPercentValue,w
  8754  086C  3E64               	addlw	100
  8755  086D  00A8               	movwf	___awtoft@c
  8756  086E  3000               	movlw	0
  8757  086F  3D5A               	addwfc	??_getPercentValue+1,w
  8758  0870  00A9               	movwf	___awtoft@c+1
  8759  0871  3191  214D  3188   	fcall	___awtoft
  8760  0874  0020               	movlb	0	; select bank0
  8761  0875  0828               	movf	?___awtoft,w
  8762  0876  00B1               	movwf	___ftmul@f2
  8763  0877  0829               	movf	?___awtoft+1,w
  8764  0878  00B2               	movwf	___ftmul@f2+1
  8765  0879  082A               	movf	?___awtoft+2,w
  8766  087A  00B3               	movwf	___ftmul@f2+2
  8767  087B  085C               	movf	getPercentValue@i,w
  8768  087C  00AE               	movwf	___ftmul@f1
  8769  087D  085D               	movf	getPercentValue@i+1,w
  8770  087E  00AF               	movwf	___ftmul@f1+1
  8771  087F  085E               	movf	getPercentValue@i+2,w
  8772  0880  00B0               	movwf	___ftmul@f1+2
  8773  0881  3185  25E7  3188   	fcall	___ftmul
  8774  0884  0020               	movlb	0	; select bank0
  8775  0885  082E               	movf	?___ftmul,w
  8776  0886  00C1               	movwf	___ftadd@f2
  8777  0887  082F               	movf	?___ftmul+1,w
  8778  0888  00C2               	movwf	___ftadd@f2+1
  8779  0889  0830               	movf	?___ftmul+2,w
  8780  088A  00C3               	movwf	___ftadd@f2+2
  8781  088B  3000               	movlw	0
  8782  088C  00BE               	movwf	___ftadd@f1
  8783  088D  3080               	movlw	128
  8784  088E  00BF               	movwf	___ftadd@f1+1
  8785  088F  3040               	movlw	64
  8786  0890  00C0               	movwf	___ftadd@f1+2
  8787  0891  3183  2371  3188   	fcall	___ftadd
  8788  0894  0020               	movlb	0	; select bank0
  8789  0895  083E               	movf	?___ftadd,w
  8790  0896  00CB               	movwf	___fttol@f1
  8791  0897  083F               	movf	?___ftadd+1,w
  8792  0898  00CC               	movwf	___fttol@f1+1
  8793  0899  0840               	movf	?___ftadd+2,w
  8794  089A  00CD               	movwf	___fttol@f1+2
  8795  089B  318D  25D1         	fcall	___fttol
  8796  089D  0020               	movlb	0	; select bank0
  8797  089E  084B               	movf	?___fttol,w
  8798  089F  0008               	return
  8799  08A0                     __end_of_getPercentValue:	
  8800                           
  8801                           	psect	text42
  8802  05E7                     __ptext42:	
  8803 ;; *************** function ___ftmul *****************
  8804 ;; Defined at:
  8805 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  f1              3   14[BANK0 ] float 
  8808 ;;  f2              3   17[BANK0 ] float 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8811 ;;  sign            1   29[BANK0 ] unsigned char 
  8812 ;;  cntr            1   28[BANK0 ] unsigned char 
  8813 ;;  exp             1   24[BANK0 ] unsigned char 
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  3   14[BANK0 ] float 
  8816 ;; Registers used:
  8817 ;;		wreg, status,2, status,0, pclath, cstack
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8823 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;Total ram usage:       16 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    6
  8830 ;; This function calls:
  8831 ;;		___ftpack
  8832 ;; This function is called by:
  8833 ;;		_getPercentValue
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function ___ftmul
  8839  05E7                     ___ftmul:	
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8843  05E7  0020               	movlb	0	; select bank0
  8844  05E8  082E               	movf	___ftmul@f1,w
  8845  05E9  00B4               	movwf	??___ftmul
  8846  05EA  082F               	movf	___ftmul@f1+1,w
  8847  05EB  00B5               	movwf	??___ftmul+1
  8848  05EC  0830               	movf	___ftmul@f1+2,w
  8849  05ED  00B6               	movwf	??___ftmul+2
  8850  05EE  1003               	clrc
  8851  05EF  0D35               	rlf	??___ftmul+1,w
  8852  05F0  0D36               	rlf	??___ftmul+2,w
  8853  05F1  00B7               	movwf	??___ftmul+3
  8854  05F2  0837               	movf	??___ftmul+3,w
  8855  05F3  00B8               	movwf	___ftmul@exp
  8856  05F4  08B8               	movf	___ftmul@exp,f
  8857  05F5  1D03               	skipz
  8858  05F6  2DFE               	goto	l5920
  8859  05F7  3000               	movlw	0
  8860  05F8  00AE               	movwf	?___ftmul
  8861  05F9  3000               	movlw	0
  8862  05FA  00AF               	movwf	?___ftmul+1
  8863  05FB  3000               	movlw	0
  8864  05FC  00B0               	movwf	?___ftmul+2
  8865  05FD  0008               	return
  8866  05FE                     l5920:	
  8867  05FE  0831               	movf	___ftmul@f2,w
  8868  05FF  00B4               	movwf	??___ftmul
  8869  0600  0832               	movf	___ftmul@f2+1,w
  8870  0601  00B5               	movwf	??___ftmul+1
  8871  0602  0833               	movf	___ftmul@f2+2,w
  8872  0603  00B6               	movwf	??___ftmul+2
  8873  0604  1003               	clrc
  8874  0605  0D35               	rlf	??___ftmul+1,w
  8875  0606  0D36               	rlf	??___ftmul+2,w
  8876  0607  00B7               	movwf	??___ftmul+3
  8877  0608  0837               	movf	??___ftmul+3,w
  8878  0609  00BD               	movwf	___ftmul@sign
  8879  060A  08BD               	movf	___ftmul@sign,f
  8880  060B  1D03               	skipz
  8881  060C  2E14               	goto	l5926
  8882  060D  3000               	movlw	0
  8883  060E  00AE               	movwf	?___ftmul
  8884  060F  3000               	movlw	0
  8885  0610  00AF               	movwf	?___ftmul+1
  8886  0611  3000               	movlw	0
  8887  0612  00B0               	movwf	?___ftmul+2
  8888  0613  0008               	return
  8889  0614                     l5926:	
  8890  0614  083D               	movf	___ftmul@sign,w
  8891  0615  3E7B               	addlw	123
  8892  0616  00B4               	movwf	??___ftmul
  8893  0617  0834               	movf	??___ftmul,w
  8894  0618  07B8               	addwf	___ftmul@exp,f
  8895  0619  082E               	movf	___ftmul@f1,w
  8896  061A  00B4               	movwf	??___ftmul
  8897  061B  082F               	movf	___ftmul@f1+1,w
  8898  061C  00B5               	movwf	??___ftmul+1
  8899  061D  0830               	movf	___ftmul@f1+2,w
  8900  061E  00B6               	movwf	??___ftmul+2
  8901  061F  3010               	movlw	16
  8902  0620                     u4385:	
  8903  0620  36B6               	lsrf	??___ftmul+2,f
  8904  0621  0CB5               	rrf	??___ftmul+1,f
  8905  0622  0CB4               	rrf	??___ftmul,f
  8906  0623  0B89               	decfsz	9,f
  8907  0624  2E20               	goto	u4385
  8908  0625  0834               	movf	??___ftmul,w
  8909  0626  00B7               	movwf	??___ftmul+3
  8910  0627  0837               	movf	??___ftmul+3,w
  8911  0628  00BD               	movwf	___ftmul@sign
  8912  0629  0831               	movf	___ftmul@f2,w
  8913  062A  00B4               	movwf	??___ftmul
  8914  062B  0832               	movf	___ftmul@f2+1,w
  8915  062C  00B5               	movwf	??___ftmul+1
  8916  062D  0833               	movf	___ftmul@f2+2,w
  8917  062E  00B6               	movwf	??___ftmul+2
  8918  062F  3010               	movlw	16
  8919  0630                     u4395:	
  8920  0630  36B6               	lsrf	??___ftmul+2,f
  8921  0631  0CB5               	rrf	??___ftmul+1,f
  8922  0632  0CB4               	rrf	??___ftmul,f
  8923  0633  0B89               	decfsz	9,f
  8924  0634  2E30               	goto	u4395
  8925  0635  0834               	movf	??___ftmul,w
  8926  0636  00B7               	movwf	??___ftmul+3
  8927  0637  0837               	movf	??___ftmul+3,w
  8928  0638  06BD               	xorwf	___ftmul@sign,f
  8929  0639  3080               	movlw	128
  8930  063A  00B4               	movwf	??___ftmul
  8931  063B  0834               	movf	??___ftmul,w
  8932  063C  05BD               	andwf	___ftmul@sign,f
  8933  063D  17AF               	bsf	___ftmul@f1+1,7
  8934  063E  17B2               	bsf	___ftmul@f2+1,7
  8935  063F  30FF               	movlw	255
  8936  0640  05B1               	andwf	___ftmul@f2,f
  8937  0641  30FF               	movlw	255
  8938  0642  05B2               	andwf	___ftmul@f2+1,f
  8939  0643  3000               	movlw	0
  8940  0644  05B3               	andwf	___ftmul@f2+2,f
  8941  0645  3000               	movlw	0
  8942  0646  00B9               	movwf	___ftmul@f3_as_product
  8943  0647  3000               	movlw	0
  8944  0648  00BA               	movwf	___ftmul@f3_as_product+1
  8945  0649  3000               	movlw	0
  8946  064A  00BB               	movwf	___ftmul@f3_as_product+2
  8947  064B  3007               	movlw	7
  8948  064C  00B4               	movwf	??___ftmul
  8949  064D  0834               	movf	??___ftmul,w
  8950  064E  00BC               	movwf	___ftmul@cntr
  8951  064F                     l5938:	
  8952  064F  1C2E               	btfss	___ftmul@f1,0
  8953  0650  2E57               	goto	l5942
  8954  0651  0831               	movf	___ftmul@f2,w
  8955  0652  07B9               	addwf	___ftmul@f3_as_product,f
  8956  0653  0832               	movf	___ftmul@f2+1,w
  8957  0654  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8958  0655  0833               	movf	___ftmul@f2+2,w
  8959  0656  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8960  0657                     l5942:	
  8961  0657  3001               	movlw	1
  8962  0658                     u4415:	
  8963  0658  36B0               	lsrf	___ftmul@f1+2,f
  8964  0659  0CAF               	rrf	___ftmul@f1+1,f
  8965  065A  0CAE               	rrf	___ftmul@f1,f
  8966  065B  0B89               	decfsz	9,f
  8967  065C  2E58               	goto	u4415
  8968  065D  3001               	movlw	1
  8969  065E                     u4425:	
  8970  065E  35B1               	lslf	___ftmul@f2,f
  8971  065F  0DB2               	rlf	___ftmul@f2+1,f
  8972  0660  0DB3               	rlf	___ftmul@f2+2,f
  8973  0661  0B89               	decfsz	9,f
  8974  0662  2E5E               	goto	u4425
  8975  0663  3001               	movlw	1
  8976  0664  02BC               	subwf	___ftmul@cntr,f
  8977  0665  1D03               	btfss	3,2
  8978  0666  2E4F               	goto	l5938
  8979  0667  3009               	movlw	9
  8980  0668  00B4               	movwf	??___ftmul
  8981  0669  0834               	movf	??___ftmul,w
  8982  066A  00BC               	movwf	___ftmul@cntr
  8983  066B                     l5950:	
  8984  066B  1C2E               	btfss	___ftmul@f1,0
  8985  066C  2E73               	goto	l5954
  8986  066D  0831               	movf	___ftmul@f2,w
  8987  066E  07B9               	addwf	___ftmul@f3_as_product,f
  8988  066F  0832               	movf	___ftmul@f2+1,w
  8989  0670  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8990  0671  0833               	movf	___ftmul@f2+2,w
  8991  0672  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8992  0673                     l5954:	
  8993  0673  3001               	movlw	1
  8994  0674                     u4455:	
  8995  0674  36B0               	lsrf	___ftmul@f1+2,f
  8996  0675  0CAF               	rrf	___ftmul@f1+1,f
  8997  0676  0CAE               	rrf	___ftmul@f1,f
  8998  0677  0B89               	decfsz	9,f
  8999  0678  2E74               	goto	u4455
  9000  0679  3001               	movlw	1
  9001  067A                     u4465:	
  9002  067A  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9003  067B  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9004  067C  0CB9               	rrf	___ftmul@f3_as_product,f
  9005  067D  0B89               	decfsz	9,f
  9006  067E  2E7A               	goto	u4465
  9007  067F  3001               	movlw	1
  9008  0680  02BC               	subwf	___ftmul@cntr,f
  9009  0681  1D03               	btfss	3,2
  9010  0682  2E6B               	goto	l5950
  9011  0683  0839               	movf	___ftmul@f3_as_product,w
  9012  0684  00A0               	movwf	___ftpack@arg
  9013  0685  083A               	movf	___ftmul@f3_as_product+1,w
  9014  0686  00A1               	movwf	___ftpack@arg+1
  9015  0687  083B               	movf	___ftmul@f3_as_product+2,w
  9016  0688  00A2               	movwf	___ftpack@arg+2
  9017  0689  0838               	movf	___ftmul@exp,w
  9018  068A  00B4               	movwf	??___ftmul
  9019  068B  0834               	movf	??___ftmul,w
  9020  068C  00A3               	movwf	___ftpack@exp
  9021  068D  083D               	movf	___ftmul@sign,w
  9022  068E  00B5               	movwf	??___ftmul+1
  9023  068F  0835               	movf	??___ftmul+1,w
  9024  0690  00A4               	movwf	___ftpack@sign
  9025  0691  3188  20A0         	fcall	___ftpack
  9026  0693  0020               	movlb	0	; select bank0
  9027  0694  0820               	movf	?___ftpack,w
  9028  0695  00AE               	movwf	?___ftmul
  9029  0696  0821               	movf	?___ftpack+1,w
  9030  0697  00AF               	movwf	?___ftmul+1
  9031  0698  0822               	movf	?___ftpack+2,w
  9032  0699  00B0               	movwf	?___ftmul+2
  9033  069A  0008               	return
  9034  069B                     __end_of___ftmul:	
  9035                           
  9036                           	psect	text43
  9037  0371                     __ptext43:	
  9038 ;; *************** function ___ftadd *****************
  9039 ;; Defined at:
  9040 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  f1              3   30[BANK0 ] float 
  9043 ;;  f2              3   33[BANK0 ] float 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  exp1            1   42[BANK0 ] unsigned char 
  9046 ;;  exp2            1   41[BANK0 ] unsigned char 
  9047 ;;  sign            1   40[BANK0 ] unsigned char 
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  3   30[BANK0 ] float 
  9050 ;; Registers used:
  9051 ;;		wreg, status,2, status,0, pclath, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9057 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;Total ram usage:       13 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    6
  9064 ;; This function calls:
  9065 ;;		___ftpack
  9066 ;; This function is called by:
  9067 ;;		_getPercentValue
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function ___ftadd
  9073  0371                     ___ftadd:	
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9077  0371  0020               	movlb	0	; select bank0
  9078  0372  083E               	movf	___ftadd@f1,w
  9079  0373  00C4               	movwf	??___ftadd
  9080  0374  083F               	movf	___ftadd@f1+1,w
  9081  0375  00C5               	movwf	??___ftadd+1
  9082  0376  0840               	movf	___ftadd@f1+2,w
  9083  0377  00C6               	movwf	??___ftadd+2
  9084  0378  1003               	clrc
  9085  0379  0D45               	rlf	??___ftadd+1,w
  9086  037A  0D46               	rlf	??___ftadd+2,w
  9087  037B  00C7               	movwf	??___ftadd+3
  9088  037C  0847               	movf	??___ftadd+3,w
  9089  037D  00CA               	movwf	___ftadd@exp1
  9090  037E  0841               	movf	___ftadd@f2,w
  9091  037F  00C4               	movwf	??___ftadd
  9092  0380  0842               	movf	___ftadd@f2+1,w
  9093  0381  00C5               	movwf	??___ftadd+1
  9094  0382  0843               	movf	___ftadd@f2+2,w
  9095  0383  00C6               	movwf	??___ftadd+2
  9096  0384  1003               	clrc
  9097  0385  0D45               	rlf	??___ftadd+1,w
  9098  0386  0D46               	rlf	??___ftadd+2,w
  9099  0387  00C7               	movwf	??___ftadd+3
  9100  0388  0847               	movf	??___ftadd+3,w
  9101  0389  00C9               	movwf	___ftadd@exp2
  9102  038A  084A               	movf	___ftadd@exp1,w
  9103  038B  1903               	btfsc	3,2
  9104  038C  2B99               	goto	l5808
  9105  038D  0849               	movf	___ftadd@exp2,w
  9106  038E  024A               	subwf	___ftadd@exp1,w
  9107  038F  1803               	skipnc
  9108  0390  2BA0               	goto	l5812
  9109  0391  034A               	decf	___ftadd@exp1,w
  9110  0392  3AFF               	xorlw	255
  9111  0393  0749               	addwf	___ftadd@exp2,w
  9112  0394  00C4               	movwf	??___ftadd
  9113  0395  3019               	movlw	25
  9114  0396  0244               	subwf	??___ftadd,w
  9115  0397  1C03               	skipc
  9116  0398  2BA0               	goto	l5812
  9117  0399                     l5808:	
  9118  0399  0841               	movf	___ftadd@f2,w
  9119  039A  00BE               	movwf	?___ftadd
  9120  039B  0842               	movf	___ftadd@f2+1,w
  9121  039C  00BF               	movwf	?___ftadd+1
  9122  039D  0843               	movf	___ftadd@f2+2,w
  9123  039E  00C0               	movwf	?___ftadd+2
  9124  039F  0008               	return
  9125  03A0                     l5812:	
  9126  03A0  0849               	movf	___ftadd@exp2,w
  9127  03A1  1903               	btfsc	3,2
  9128  03A2  0008               	return
  9129  03A3  084A               	movf	___ftadd@exp1,w
  9130  03A4  0249               	subwf	___ftadd@exp2,w
  9131  03A5  1803               	skipnc
  9132  03A6  2BAF               	goto	l5818
  9133  03A7  0349               	decf	___ftadd@exp2,w
  9134  03A8  3AFF               	xorlw	255
  9135  03A9  074A               	addwf	___ftadd@exp1,w
  9136  03AA  00C4               	movwf	??___ftadd
  9137  03AB  3019               	movlw	25
  9138  03AC  0244               	subwf	??___ftadd,w
  9139  03AD  1803               	btfsc	3,0
  9140  03AE  0008               	return
  9141  03AF                     l5818:	
  9142  03AF  3006               	movlw	6
  9143  03B0  00C4               	movwf	??___ftadd
  9144  03B1  0844               	movf	??___ftadd,w
  9145  03B2  00C8               	movwf	___ftadd@sign
  9146  03B3  1BC0               	btfsc	___ftadd@f1+2,7
  9147  03B4  17C8               	bsf	___ftadd@sign,7
  9148  03B5  1BC3               	btfsc	___ftadd@f2+2,7
  9149  03B6  1748               	bsf	___ftadd@sign,6
  9150  03B7  17BF               	bsf	___ftadd@f1+1,7
  9151  03B8  30FF               	movlw	255
  9152  03B9  05BE               	andwf	___ftadd@f1,f
  9153  03BA  30FF               	movlw	255
  9154  03BB  05BF               	andwf	___ftadd@f1+1,f
  9155  03BC  3000               	movlw	0
  9156  03BD  05C0               	andwf	___ftadd@f1+2,f
  9157  03BE  17C2               	bsf	___ftadd@f2+1,7
  9158  03BF  30FF               	movlw	255
  9159  03C0  05C1               	andwf	___ftadd@f2,f
  9160  03C1  30FF               	movlw	255
  9161  03C2  05C2               	andwf	___ftadd@f2+1,f
  9162  03C3  3000               	movlw	0
  9163  03C4  05C3               	andwf	___ftadd@f2+2,f
  9164  03C5  0849               	movf	___ftadd@exp2,w
  9165  03C6  024A               	subwf	___ftadd@exp1,w
  9166  03C7  1803               	skipnc
  9167  03C8  2BEB               	goto	l5840
  9168  03C9                     l5830:	
  9169  03C9  3001               	movlw	1
  9170  03CA                     u4145:	
  9171  03CA  35C1               	lslf	___ftadd@f2,f
  9172  03CB  0DC2               	rlf	___ftadd@f2+1,f
  9173  03CC  0DC3               	rlf	___ftadd@f2+2,f
  9174  03CD  0B89               	decfsz	9,f
  9175  03CE  2BCA               	goto	u4145
  9176  03CF  3001               	movlw	1
  9177  03D0  02C9               	subwf	___ftadd@exp2,f
  9178  03D1  0849               	movf	___ftadd@exp2,w
  9179  03D2  064A               	xorwf	___ftadd@exp1,w
  9180  03D3  1903               	skipnz
  9181  03D4  2BE6               	goto	l5838
  9182  03D5  3001               	movlw	1
  9183  03D6  02C8               	subwf	___ftadd@sign,f
  9184  03D7  0848               	movf	___ftadd@sign,w
  9185  03D8  3907               	andlw	7
  9186  03D9  1903               	btfsc	3,2
  9187  03DA  2BE6               	goto	l5838
  9188  03DB  2BC9               	goto	l5830
  9189  03DC                     l5836:	
  9190  03DC  3001               	movlw	1
  9191  03DD                     u4175:	
  9192  03DD  36C0               	lsrf	___ftadd@f1+2,f
  9193  03DE  0CBF               	rrf	___ftadd@f1+1,f
  9194  03DF  0CBE               	rrf	___ftadd@f1,f
  9195  03E0  0B89               	decfsz	9,f
  9196  03E1  2BDD               	goto	u4175
  9197  03E2  3001               	movlw	1
  9198  03E3  00C4               	movwf	??___ftadd
  9199  03E4  0844               	movf	??___ftadd,w
  9200  03E5  07CA               	addwf	___ftadd@exp1,f
  9201  03E6                     l5838:	
  9202  03E6  084A               	movf	___ftadd@exp1,w
  9203  03E7  0649               	xorwf	___ftadd@exp2,w
  9204  03E8  1903               	btfsc	3,2
  9205  03E9  2C10               	goto	l3175
  9206  03EA  2BDC               	goto	l5836
  9207  03EB                     l5840:	
  9208  03EB  084A               	movf	___ftadd@exp1,w
  9209  03EC  0249               	subwf	___ftadd@exp2,w
  9210  03ED  1803               	skipnc
  9211  03EE  2C10               	goto	l3175
  9212  03EF                     l5842:	
  9213  03EF  3001               	movlw	1
  9214  03F0                     u4205:	
  9215  03F0  35BE               	lslf	___ftadd@f1,f
  9216  03F1  0DBF               	rlf	___ftadd@f1+1,f
  9217  03F2  0DC0               	rlf	___ftadd@f1+2,f
  9218  03F3  0B89               	decfsz	9,f
  9219  03F4  2BF0               	goto	u4205
  9220  03F5  3001               	movlw	1
  9221  03F6  02CA               	subwf	___ftadd@exp1,f
  9222  03F7  0849               	movf	___ftadd@exp2,w
  9223  03F8  064A               	xorwf	___ftadd@exp1,w
  9224  03F9  1903               	skipnz
  9225  03FA  2C0C               	goto	l5850
  9226  03FB  3001               	movlw	1
  9227  03FC  02C8               	subwf	___ftadd@sign,f
  9228  03FD  0848               	movf	___ftadd@sign,w
  9229  03FE  3907               	andlw	7
  9230  03FF  1903               	btfsc	3,2
  9231  0400  2C0C               	goto	l5850
  9232  0401  2BEF               	goto	l5842
  9233  0402                     l5848:	
  9234  0402  3001               	movlw	1
  9235  0403                     u4235:	
  9236  0403  36C3               	lsrf	___ftadd@f2+2,f
  9237  0404  0CC2               	rrf	___ftadd@f2+1,f
  9238  0405  0CC1               	rrf	___ftadd@f2,f
  9239  0406  0B89               	decfsz	9,f
  9240  0407  2C03               	goto	u4235
  9241  0408  3001               	movlw	1
  9242  0409  00C4               	movwf	??___ftadd
  9243  040A  0844               	movf	??___ftadd,w
  9244  040B  07C9               	addwf	___ftadd@exp2,f
  9245  040C                     l5850:	
  9246  040C  084A               	movf	___ftadd@exp1,w
  9247  040D  0649               	xorwf	___ftadd@exp2,w
  9248  040E  1D03               	skipz
  9249  040F  2C02               	goto	l5848
  9250  0410                     l3175:	
  9251  0410  1FC8               	btfss	___ftadd@sign,7
  9252  0411  2C22               	goto	l5854
  9253  0412  30FF               	movlw	255
  9254  0413  06BE               	xorwf	___ftadd@f1,f
  9255  0414  30FF               	movlw	255
  9256  0415  06BF               	xorwf	___ftadd@f1+1,f
  9257  0416  30FF               	movlw	255
  9258  0417  06C0               	xorwf	___ftadd@f1+2,f
  9259  0418  3001               	movlw	1
  9260  0419  07BE               	addwf	___ftadd@f1,f
  9261  041A  3000               	movlw	0
  9262  041B  1803               	skipnc
  9263  041C  3001               	movlw	1
  9264  041D  07BF               	addwf	___ftadd@f1+1,f
  9265  041E  3000               	movlw	0
  9266  041F  1803               	skipnc
  9267  0420  3001               	movlw	1
  9268  0421  07C0               	addwf	___ftadd@f1+2,f
  9269  0422                     l5854:	
  9270  0422  1F48               	btfss	___ftadd@sign,6
  9271  0423  2C34               	goto	l5858
  9272  0424  30FF               	movlw	255
  9273  0425  06C1               	xorwf	___ftadd@f2,f
  9274  0426  30FF               	movlw	255
  9275  0427  06C2               	xorwf	___ftadd@f2+1,f
  9276  0428  30FF               	movlw	255
  9277  0429  06C3               	xorwf	___ftadd@f2+2,f
  9278  042A  3001               	movlw	1
  9279  042B  07C1               	addwf	___ftadd@f2,f
  9280  042C  3000               	movlw	0
  9281  042D  1803               	skipnc
  9282  042E  3001               	movlw	1
  9283  042F  07C2               	addwf	___ftadd@f2+1,f
  9284  0430  3000               	movlw	0
  9285  0431  1803               	skipnc
  9286  0432  3001               	movlw	1
  9287  0433  07C3               	addwf	___ftadd@f2+2,f
  9288  0434                     l5858:	
  9289  0434  01C8               	clrf	___ftadd@sign
  9290  0435  083E               	movf	___ftadd@f1,w
  9291  0436  07C1               	addwf	___ftadd@f2,f
  9292  0437  083F               	movf	___ftadd@f1+1,w
  9293  0438  3DC2               	addwfc	___ftadd@f2+1,f
  9294  0439  0840               	movf	___ftadd@f1+2,w
  9295  043A  3DC3               	addwfc	___ftadd@f2+2,f
  9296  043B  1FC3               	btfss	___ftadd@f2+2,7
  9297  043C  2C4F               	goto	l5868
  9298  043D  30FF               	movlw	255
  9299  043E  06C1               	xorwf	___ftadd@f2,f
  9300  043F  30FF               	movlw	255
  9301  0440  06C2               	xorwf	___ftadd@f2+1,f
  9302  0441  30FF               	movlw	255
  9303  0442  06C3               	xorwf	___ftadd@f2+2,f
  9304  0443  3001               	movlw	1
  9305  0444  07C1               	addwf	___ftadd@f2,f
  9306  0445  3000               	movlw	0
  9307  0446  1803               	skipnc
  9308  0447  3001               	movlw	1
  9309  0448  07C2               	addwf	___ftadd@f2+1,f
  9310  0449  3000               	movlw	0
  9311  044A  1803               	skipnc
  9312  044B  3001               	movlw	1
  9313  044C  07C3               	addwf	___ftadd@f2+2,f
  9314  044D  01C8               	clrf	___ftadd@sign
  9315  044E  0AC8               	incf	___ftadd@sign,f
  9316  044F                     l5868:	
  9317  044F  0841               	movf	___ftadd@f2,w
  9318  0450  00A0               	movwf	___ftpack@arg
  9319  0451  0842               	movf	___ftadd@f2+1,w
  9320  0452  00A1               	movwf	___ftpack@arg+1
  9321  0453  0843               	movf	___ftadd@f2+2,w
  9322  0454  00A2               	movwf	___ftpack@arg+2
  9323  0455  084A               	movf	___ftadd@exp1,w
  9324  0456  00C4               	movwf	??___ftadd
  9325  0457  0844               	movf	??___ftadd,w
  9326  0458  00A3               	movwf	___ftpack@exp
  9327  0459  0848               	movf	___ftadd@sign,w
  9328  045A  00C5               	movwf	??___ftadd+1
  9329  045B  0845               	movf	??___ftadd+1,w
  9330  045C  00A4               	movwf	___ftpack@sign
  9331  045D  3188  20A0         	fcall	___ftpack
  9332  045F  0020               	movlb	0	; select bank0
  9333  0460  0820               	movf	?___ftpack,w
  9334  0461  00BE               	movwf	?___ftadd
  9335  0462  0821               	movf	?___ftpack+1,w
  9336  0463  00BF               	movwf	?___ftadd+1
  9337  0464  0822               	movf	?___ftpack+2,w
  9338  0465  00C0               	movwf	?___ftadd+2
  9339  0466  0008               	return
  9340  0467                     __end_of___ftadd:	
  9341                           
  9342                           	psect	text44
  9343  1DFB                     __ptext44:	
  9344 ;; *************** function _getBuz_GO *****************
  9345 ;; Defined at:
  9346 ;;		line 82 in file "../src/Buzzer_B1.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;		None
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  i               2    4[BANK0 ] int 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  2    0[BANK0 ] int 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;Total ram usage:        6 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    5
  9367 ;; This function calls:
  9368 ;;		Nothing
  9369 ;; This function is called by:
  9370 ;;		_setRF_Main
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function _getBuz_GO
  9376  1DFB                     _getBuz_GO:	
  9377                           
  9378                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9379                           
  9380                           ;incstack = 0
  9381                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9382  1DFB  0021               	movlb	1	; select bank1
  9383  1DFC  0C32               	rrf	_Buz1^(0+128),w
  9384  1DFD  3901               	andlw	1
  9385  1DFE  0020               	movlb	0	; select bank0
  9386  1DFF  00A2               	movwf	??_getBuz_GO
  9387  1E00  01A3               	clrf	??_getBuz_GO+1
  9388  1E01  0822               	movf	??_getBuz_GO,w
  9389  1E02  00A4               	movwf	getBuz_GO@i
  9390  1E03  0823               	movf	??_getBuz_GO+1,w
  9391  1E04  00A5               	movwf	getBuz_GO@i+1
  9392                           
  9393                           ;Buzzer_B1.c: 84: return i;
  9394  1E05  0825               	movf	getBuz_GO@i+1,w
  9395  1E06  01A1               	clrf	?_getBuz_GO+1
  9396  1E07  07A1               	addwf	?_getBuz_GO+1,f
  9397  1E08  0824               	movf	getBuz_GO@i,w
  9398  1E09  01A0               	clrf	?_getBuz_GO
  9399  1E0A  07A0               	addwf	?_getBuz_GO,f
  9400  1E0B  0008               	return
  9401  1E0C                     __end_of_getBuz_GO:	
  9402                           
  9403                           	psect	text45
  9404  1D6E                     __ptext45:	
  9405 ;; *************** function _RF_RxDisable *****************
  9406 ;; Defined at:
  9407 ;;		line 188 in file "../src/RF_Control_B1.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;		None               void
  9414 ;; Registers used:
  9415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    7
  9428 ;; This function calls:
  9429 ;;		_CC2500_WriteCommand
  9430 ;; This function is called by:
  9431 ;;		_setRF_Main
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _RF_RxDisable
  9437  1D6E                     _RF_RxDisable:	
  9438                           
  9439                           ;RF_Control_B1.c: 189: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9443  1D6E  0021               	movlb	1	; select bank1
  9444  1D6F  18BE               	btfsc	_RF1^(0+128),1
  9445  1D70  2D73               	goto	l2354
  9446  1D71  1DBE               	btfss	_RF1^(0+128),3
  9447  1D72  0008               	return
  9448  1D73                     l2354:	
  9449                           
  9450                           ;RF_Control_B1.c: 190: RF1.RxStatus = 0;
  9451  1D73  11BE               	bcf	_RF1^(0+128),3
  9452                           
  9453                           ;RF_Control_B1.c: 191: RF1.ReceiveGO = 0;
  9454  1D74  10BE               	bcf	_RF1^(0+128),1
  9455                           
  9456                           ;RF_Control_B1.c: 192: CC2500_WriteCommand(0x36);
  9457  1D75  3036               	movlw	54
  9458  1D76  319F  2721  319D   	fcall	_CC2500_WriteCommand
  9459                           
  9460                           ;RF_Control_B1.c: 193: CC2500_WriteCommand(0x3A);
  9461  1D79  303A               	movlw	58
  9462  1D7A  319F  2721         	fcall	_CC2500_WriteCommand
  9463  1D7C  0008               	return
  9464  1D7D                     __end_of_RF_RxDisable:	
  9465                           
  9466                           	psect	text46
  9467  0901                     __ptext46:	
  9468 ;; *************** function _CC2500_TxData *****************
  9469 ;; Defined at:
  9470 ;;		line 32 in file "../src/CC2500_B1.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9475 ;; Return value:  Size  Location     Type
  9476 ;;		None               void
  9477 ;; Registers used:
  9478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;Total ram usage:        2 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    7
  9491 ;; This function calls:
  9492 ;;		_CC2500_WriteByte
  9493 ;;		_CC2500_WriteCommand
  9494 ;;		_Timeout_Counter
  9495 ;;		_set_TimeoutCleared
  9496 ;; This function is called by:
  9497 ;;		_setRF_Main
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           
  9502                           ;psect for function _CC2500_TxData
  9503  0901                     _CC2500_TxData:	
  9504                           
  9505                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9506                           ;CC2500_B1.c: 35: RC4 = 0;
  9507                           
  9508                           ;incstack = 0
  9509                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9510  0901  0020               	movlb	0	; select bank0
  9511  0902  120E               	bcf	14,4	;volatile
  9512                           
  9513                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9514  0903  307F               	movlw	127
  9515  0904  00A4               	movwf	??_CC2500_TxData
  9516  0905  0824               	movf	??_CC2500_TxData,w
  9517  0906  0021               	movlb	1	; select bank1
  9518  0907  00D0               	movwf	_SPI0Buffer^(0+128)
  9519                           
  9520                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9521  0908  290C               	goto	l6718
  9522  0909                     l6716:	
  9523                           
  9524                           ;CC2500_B1.c: 38: Timeout_Counter();
  9525  0909  319E  26A6  3189   	fcall	_Timeout_Counter
  9526  090C                     l6718:	
  9527  090C  0020               	movlb	0	; select bank0
  9528  090D  1D0E               	btfss	14,2	;volatile
  9529  090E  2912               	goto	l6722
  9530  090F  0021               	movlb	1	; select bank1
  9531  0910  1D2F               	btfss	(_myMain^(0+128)+15),2
  9532  0911  2909               	goto	l6716
  9533  0912                     l6722:	
  9534                           
  9535                           ;CC2500_B1.c: 39: };
  9536                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9537  0912  319C  248D  3189   	fcall	_set_TimeoutCleared
  9538                           
  9539                           ;CC2500_B1.c: 41: CC2500_WriteByte();
  9540  0915  319E  26EE  3189   	fcall	_CC2500_WriteByte
  9541                           
  9542                           ;CC2500_B1.c: 42: SPI0Buffer = Tx_Length;
  9543  0918  0021               	movlb	1	; select bank1
  9544  0919  0851               	movf	_Tx_Length^(0+128),w
  9545  091A  0020               	movlb	0	; select bank0
  9546  091B  00A4               	movwf	??_CC2500_TxData
  9547  091C  0824               	movf	??_CC2500_TxData,w
  9548  091D  0021               	movlb	1	; select bank1
  9549  091E  00D0               	movwf	_SPI0Buffer^(0+128)
  9550                           
  9551                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9552  091F  319E  26EE  3189   	fcall	_CC2500_WriteByte
  9553                           
  9554                           ;CC2500_B1.c: 44: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9555  0922  0020               	movlb	0	; select bank0
  9556  0923  01A5               	clrf	CC2500_TxData@loop_e
  9557  0924                     l6736:	
  9558  0924  0021               	movlb	1	; select bank1
  9559  0925  0851               	movf	_Tx_Length^(0+128),w
  9560  0926  0020               	movlb	0	; select bank0
  9561  0927  0225               	subwf	CC2500_TxData@loop_e,w
  9562  0928  1803               	btfsc	3,0
  9563  0929  293D               	goto	l291
  9564                           
  9565                           ;CC2500_B1.c: 45: SPI0Buffer = RF_Data[loop_e];
  9566  092A  0825               	movf	CC2500_TxData@loop_e,w
  9567  092B  3E20               	addlw	_RF_Data& (0+255)
  9568  092C  0086               	movwf	6
  9569  092D  3001               	movlw	1	; select bank2/3
  9570  092E  0087               	movwf	7
  9571  092F  0801               	movf	1,w
  9572  0930  00A4               	movwf	??_CC2500_TxData
  9573  0931  0824               	movf	??_CC2500_TxData,w
  9574  0932  0021               	movlb	1	; select bank1
  9575  0933  00D0               	movwf	_SPI0Buffer^(0+128)
  9576                           
  9577                           ;CC2500_B1.c: 46: CC2500_WriteByte();
  9578  0934  319E  26EE  3189   	fcall	_CC2500_WriteByte
  9579  0937  3001               	movlw	1
  9580  0938  0020               	movlb	0	; select bank0
  9581  0939  00A4               	movwf	??_CC2500_TxData
  9582  093A  0824               	movf	??_CC2500_TxData,w
  9583  093B  07A5               	addwf	CC2500_TxData@loop_e,f
  9584  093C  2924               	goto	l6736
  9585  093D                     l291:	
  9586                           
  9587                           ;CC2500_B1.c: 47: }
  9588                           ;CC2500_B1.c: 48: RC4 = 1;
  9589  093D  160E               	bsf	14,4	;volatile
  9590                           
  9591                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x35);
  9592  093E  3035               	movlw	53
  9593  093F  319F  2721  3189   	fcall	_CC2500_WriteCommand
  9594                           
  9595                           ;CC2500_B1.c: 50: while (RB0 == 0 && myMain.Timeout == 0) {
  9596  0942  2946               	goto	l6742
  9597  0943                     l6740:	
  9598                           
  9599                           ;CC2500_B1.c: 51: Timeout_Counter();
  9600  0943  319E  26A6  3189   	fcall	_Timeout_Counter
  9601  0946                     l6742:	
  9602  0946  0020               	movlb	0	; select bank0
  9603  0947  180D               	btfsc	13,0	;volatile
  9604  0948  294C               	goto	l6746
  9605  0949  0021               	movlb	1	; select bank1
  9606  094A  1D2F               	btfss	(_myMain^(0+128)+15),2
  9607  094B  2943               	goto	l6740
  9608  094C                     l6746:	
  9609                           
  9610                           ;CC2500_B1.c: 52: };
  9611                           ;CC2500_B1.c: 53: set_TimeoutCleared();
  9612  094C  319C  248D  3189   	fcall	_set_TimeoutCleared
  9613                           
  9614                           ;CC2500_B1.c: 54: while (RB0 == 1 && myMain.Timeout == 0) {
  9615  094F  2953               	goto	l6750
  9616  0950                     l6748:	
  9617                           
  9618                           ;CC2500_B1.c: 55: Timeout_Counter();
  9619  0950  319E  26A6  3189   	fcall	_Timeout_Counter
  9620  0953                     l6750:	
  9621  0953  0020               	movlb	0	; select bank0
  9622  0954  1C0D               	btfss	13,0	;volatile
  9623  0955  2959               	goto	l6754
  9624  0956  0021               	movlb	1	; select bank1
  9625  0957  1D2F               	btfss	(_myMain^(0+128)+15),2
  9626  0958  2950               	goto	l6748
  9627  0959                     l6754:	
  9628                           
  9629                           ;CC2500_B1.c: 56: };
  9630                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  9631  0959  319C  248D  3189   	fcall	_set_TimeoutCleared
  9632                           
  9633                           ;CC2500_B1.c: 58: CC2500_WriteCommand(0x36);
  9634  095C  3036               	movlw	54
  9635  095D  319F  2721  3189   	fcall	_CC2500_WriteCommand
  9636                           
  9637                           ;CC2500_B1.c: 59: CC2500_WriteCommand(0x3B);
  9638  0960  303B               	movlw	59
  9639  0961  319F  2721         	fcall	_CC2500_WriteCommand
  9640                           
  9641                           ;CC2500_B1.c: 60: Transceive_OK = 1;
  9642  0963  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9643  0964  0008               	return
  9644  0965                     __end_of_CC2500_TxData:	
  9645                           
  9646                           	psect	text47
  9647  0BE6                     __ptext47:	
  9648 ;; *************** function _CC2500_RxData *****************
  9649 ;; Defined at:
  9650 ;;		line 66 in file "../src/CC2500_B1.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;		None
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;		None               void
  9657 ;; Registers used:
  9658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        2 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    7
  9671 ;; This function calls:
  9672 ;;		_CC2500_ReadByte
  9673 ;;		_CC2500_ReadStatus
  9674 ;;		_CC2500_WriteByte
  9675 ;;		_CC2500_WriteCommand
  9676 ;;		_Timeout_Counter
  9677 ;;		_set_TimeoutCleared
  9678 ;; This function is called by:
  9679 ;;		_setRF_Main
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           
  9684                           ;psect for function _CC2500_RxData
  9685  0BE6                     _CC2500_RxData:	
  9686                           
  9687                           ;CC2500_B1.c: 67: unsigned char loop_f;
  9688                           ;CC2500_B1.c: 71: if (RB0 == 1)
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9692  0BE6  0020               	movlb	0	; select bank0
  9693  0BE7  180D               	btfsc	13,0	;volatile
  9694  0BE8  2BED               	goto	l6768
  9695  0BE9  2BF6               	goto	l6774
  9696  0BEA                     l6766:	
  9697                           ;CC2500_B1.c: 72: {
  9698                           ;CC2500_B1.c: 73: while (RB0 == 1 && myMain.Timeout == 0) {
  9699                           
  9700                           
  9701                           ;CC2500_B1.c: 74: Timeout_Counter();
  9702  0BEA  319E  26A6  318B   	fcall	_Timeout_Counter
  9703  0BED                     l6768:	
  9704  0BED  0020               	movlb	0	; select bank0
  9705  0BEE  1C0D               	btfss	13,0	;volatile
  9706  0BEF  2BF3               	goto	l6772
  9707  0BF0  0021               	movlb	1	; select bank1
  9708  0BF1  1D2F               	btfss	(_myMain^(0+128)+15),2
  9709  0BF2  2BEA               	goto	l6766
  9710  0BF3                     l6772:	
  9711                           
  9712                           ;CC2500_B1.c: 75: };
  9713                           ;CC2500_B1.c: 76: set_TimeoutCleared();
  9714  0BF3  319C  248D  318B   	fcall	_set_TimeoutCleared
  9715  0BF6                     l6774:	
  9716                           
  9717                           ;CC2500_B1.c: 77: }
  9718                           ;CC2500_B1.c: 79: CC2500_ReadStatus(0x3B);
  9719  0BF6  303B               	movlw	59
  9720  0BF7  3191  21B5  318B   	fcall	_CC2500_ReadStatus
  9721                           
  9722                           ;CC2500_B1.c: 80: if (s_data != 0) {
  9723  0BFA  0021               	movlb	1	; select bank1
  9724  0BFB  0854               	movf	_s_data^(0+128),w
  9725  0BFC  1903               	btfsc	3,2
  9726  0BFD  0008               	return
  9727                           
  9728                           ;CC2500_B1.c: 81: RC4 = 0;
  9729  0BFE  0020               	movlb	0	; select bank0
  9730  0BFF  120E               	bcf	14,4	;volatile
  9731                           
  9732                           ;CC2500_B1.c: 82: SPI0Buffer = 0x3F + 0xC0;
  9733  0C00  30FF               	movlw	255
  9734  0C01  00A4               	movwf	??_CC2500_RxData
  9735  0C02  0824               	movf	??_CC2500_RxData,w
  9736  0C03  0021               	movlb	1	; select bank1
  9737  0C04  00D0               	movwf	_SPI0Buffer^(0+128)
  9738                           
  9739                           ;CC2500_B1.c: 83: while (RC2 == 1 && myMain.Timeout == 0) {
  9740  0C05  2C09               	goto	l6784
  9741  0C06                     l6782:	
  9742                           
  9743                           ;CC2500_B1.c: 84: Timeout_Counter();
  9744  0C06  319E  26A6  318B   	fcall	_Timeout_Counter
  9745  0C09                     l6784:	
  9746  0C09  0020               	movlb	0	; select bank0
  9747  0C0A  1D0E               	btfss	14,2	;volatile
  9748  0C0B  2C0F               	goto	l6788
  9749  0C0C  0021               	movlb	1	; select bank1
  9750  0C0D  1D2F               	btfss	(_myMain^(0+128)+15),2
  9751  0C0E  2C06               	goto	l6782
  9752  0C0F                     l6788:	
  9753                           
  9754                           ;CC2500_B1.c: 85: };
  9755                           ;CC2500_B1.c: 86: set_TimeoutCleared();
  9756  0C0F  319C  248D  318B   	fcall	_set_TimeoutCleared
  9757                           
  9758                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  9759  0C12  319E  26EE  318B   	fcall	_CC2500_WriteByte
  9760                           
  9761                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  9762  0C15  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9763                           
  9764                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  9765  0C18  0021               	movlb	1	; select bank1
  9766  0C19  0850               	movf	_SPI0Buffer^(0+128),w
  9767  0C1A  0020               	movlb	0	; select bank0
  9768  0C1B  00A4               	movwf	??_CC2500_RxData
  9769  0C1C  0824               	movf	??_CC2500_RxData,w
  9770  0C1D  0021               	movlb	1	; select bank1
  9771  0C1E  00CF               	movwf	_Rx_Length^(0+128)
  9772                           
  9773                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9774  0C1F  0020               	movlb	0	; select bank0
  9775  0C20  01A5               	clrf	CC2500_RxData@loop_f
  9776  0C21                     l6804:	
  9777  0C21  0021               	movlb	1	; select bank1
  9778  0C22  084F               	movf	_Rx_Length^(0+128),w
  9779  0C23  0020               	movlb	0	; select bank0
  9780  0C24  0225               	subwf	CC2500_RxData@loop_f,w
  9781  0C25  1803               	btfsc	3,0
  9782  0C26  2C3A               	goto	l6806
  9783                           
  9784                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  9785  0C27  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9786                           
  9787                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  9788  0C2A  0021               	movlb	1	; select bank1
  9789  0C2B  0850               	movf	_SPI0Buffer^(0+128),w
  9790  0C2C  0020               	movlb	0	; select bank0
  9791  0C2D  00A4               	movwf	??_CC2500_RxData
  9792  0C2E  0825               	movf	CC2500_RxData@loop_f,w
  9793  0C2F  3E20               	addlw	_RF_Data& (0+255)
  9794  0C30  0086               	movwf	6
  9795  0C31  3001               	movlw	1	; select bank2/3
  9796  0C32  0087               	movwf	7
  9797  0C33  0824               	movf	??_CC2500_RxData,w
  9798  0C34  0081               	movwf	1
  9799  0C35  3001               	movlw	1
  9800  0C36  00A4               	movwf	??_CC2500_RxData
  9801  0C37  0824               	movf	??_CC2500_RxData,w
  9802  0C38  07A5               	addwf	CC2500_RxData@loop_f,f
  9803  0C39  2C21               	goto	l6804
  9804  0C3A                     l6806:	
  9805                           
  9806                           ;CC2500_B1.c: 94: }
  9807                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9808  0C3A  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9809                           
  9810                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  9811  0C3D  0021               	movlb	1	; select bank1
  9812  0C3E  0850               	movf	_SPI0Buffer^(0+128),w
  9813  0C3F  0020               	movlb	0	; select bank0
  9814  0C40  00A4               	movwf	??_CC2500_RxData
  9815  0C41  0824               	movf	??_CC2500_RxData,w
  9816  0C42  0021               	movlb	1	; select bank1
  9817  0C43  00CE               	movwf	_RSSI^(0+128)
  9818                           
  9819                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9820  0C44  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9821                           
  9822                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  9823  0C47  0021               	movlb	1	; select bank1
  9824  0C48  0850               	movf	_SPI0Buffer^(0+128),w
  9825  0C49  0020               	movlb	0	; select bank0
  9826  0C4A  00A4               	movwf	??_CC2500_RxData
  9827  0C4B  0824               	movf	??_CC2500_RxData,w
  9828  0C4C  0021               	movlb	1	; select bank1
  9829  0C4D  00C7               	movwf	_CRC^(0+128)
  9830                           
  9831                           ;CC2500_B1.c: 99: RC4 = 1;
  9832  0C4E  0020               	movlb	0	; select bank0
  9833  0C4F  160E               	bsf	14,4	;volatile
  9834                           
  9835                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  9836  0C50  0021               	movlb	1	; select bank1
  9837  0C51  1BC7               	btfsc	_CRC^(0+128),7
  9838                           
  9839                           ;CC2500_B1.c: 101: Receive_OK = 1;
  9840  0C52  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9841                           
  9842                           ;CC2500_B1.c: 103: CC2500_WriteCommand(0x36);
  9843  0C53  3036               	movlw	54
  9844  0C54  319F  2721  318B   	fcall	_CC2500_WriteCommand
  9845                           
  9846                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x3A);
  9847  0C57  303A               	movlw	58
  9848  0C58  319F  2721         	fcall	_CC2500_WriteCommand
  9849                           
  9850                           ;CC2500_B1.c: 105: RF1.RxStatus = 0;
  9851  0C5A  0021               	movlb	1	; select bank1
  9852  0C5B  11BE               	bcf	_RF1^(0+128),3
  9853                           
  9854                           ;CC2500_B1.c: 106: RF1.ReceiveGO = 1;
  9855  0C5C  14BE               	bsf	_RF1^(0+128),1
  9856  0C5D  0008               	return
  9857  0C5E                     __end_of_CC2500_RxData:	
  9858                           
  9859                           	psect	text48
  9860  11B5                     __ptext48:	
  9861 ;; *************** function _CC2500_ReadStatus *****************
  9862 ;; Defined at:
  9863 ;;		line 294 in file "../src/CC2500_B1.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  status_addr     1    wreg     unsigned char 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;		None               void
  9870 ;; Registers used:
  9871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        2 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    6
  9884 ;; This function calls:
  9885 ;;		_CC2500_ReadByte
  9886 ;;		_CC2500_WriteByte
  9887 ;;		_Timeout_Counter
  9888 ;;		_set_TimeoutCleared
  9889 ;; This function is called by:
  9890 ;;		_CC2500_RxData
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           
  9895                           ;psect for function _CC2500_ReadStatus
  9896  11B5                     _CC2500_ReadStatus:	
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9900                           ;CC2500_ReadStatus@status_addr stored from wreg
  9901  11B5  0020               	movlb	0	; select bank0
  9902  11B6  00A3               	movwf	CC2500_ReadStatus@status_addr
  9903                           
  9904                           ;CC2500_B1.c: 295: RC4 = 0;
  9905  11B7  120E               	bcf	14,4	;volatile
  9906                           
  9907                           ;CC2500_B1.c: 296: SPI0Buffer = status_addr + 0xC0;
  9908  11B8  0823               	movf	CC2500_ReadStatus@status_addr,w
  9909  11B9  3EC0               	addlw	192
  9910  11BA  00A2               	movwf	??_CC2500_ReadStatus
  9911  11BB  0822               	movf	??_CC2500_ReadStatus,w
  9912  11BC  0021               	movlb	1	; select bank1
  9913  11BD  00D0               	movwf	_SPI0Buffer^(0+128)
  9914                           
  9915                           ;CC2500_B1.c: 298: while (RC2 == 1 && myMain.Timeout == 0) {
  9916  11BE  29C2               	goto	l6562
  9917  11BF                     l6560:	
  9918                           
  9919                           ;CC2500_B1.c: 299: Timeout_Counter();
  9920  11BF  319E  26A6  3191   	fcall	_Timeout_Counter
  9921  11C2                     l6562:	
  9922  11C2  0020               	movlb	0	; select bank0
  9923  11C3  1D0E               	btfss	14,2	;volatile
  9924  11C4  29C8               	goto	l6566
  9925  11C5  0021               	movlb	1	; select bank1
  9926  11C6  1D2F               	btfss	(_myMain^(0+128)+15),2
  9927  11C7  29BF               	goto	l6560
  9928  11C8                     l6566:	
  9929                           
  9930                           ;CC2500_B1.c: 300: };
  9931                           ;CC2500_B1.c: 301: set_TimeoutCleared();
  9932  11C8  319C  248D  3191   	fcall	_set_TimeoutCleared
  9933                           
  9934                           ;CC2500_B1.c: 302: CC2500_WriteByte();
  9935  11CB  319E  26EE  3191   	fcall	_CC2500_WriteByte
  9936                           
  9937                           ;CC2500_B1.c: 303: CC2500_ReadByte();
  9938  11CE  319F  27E3         	fcall	_CC2500_ReadByte
  9939                           
  9940                           ;CC2500_B1.c: 304: RC4 = 1;
  9941  11D0  0020               	movlb	0	; select bank0
  9942  11D1  160E               	bsf	14,4	;volatile
  9943                           
  9944                           ;CC2500_B1.c: 306: s_data = SPI0Buffer;
  9945  11D2  0021               	movlb	1	; select bank1
  9946  11D3  0850               	movf	_SPI0Buffer^(0+128),w
  9947  11D4  0020               	movlb	0	; select bank0
  9948  11D5  00A2               	movwf	??_CC2500_ReadStatus
  9949  11D6  0822               	movf	??_CC2500_ReadStatus,w
  9950  11D7  0021               	movlb	1	; select bank1
  9951  11D8  00D4               	movwf	_s_data^(0+128)
  9952  11D9  0008               	return
  9953  11DA                     __end_of_CC2500_ReadStatus:	
  9954                           
  9955                           	psect	text49
  9956  1FE3                     __ptext49:	
  9957 ;; *************** function _CC2500_ReadByte *****************
  9958 ;; Defined at:
  9959 ;;		line 231 in file "../src/CC2500_B1.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;		None
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9964 ;; Return value:  Size  Location     Type
  9965 ;;		None               void
  9966 ;; Registers used:
  9967 ;;		wreg, status,2, status,0
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        2 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    5
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_CC2500_RxData
  9984 ;;		_CC2500_ReadStatus
  9985 ;;		_CC2500_ReadREG
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           
  9990                           ;psect for function _CC2500_ReadByte
  9991  1FE3                     _CC2500_ReadByte:	
  9992                           
  9993                           ;CC2500_B1.c: 232: unsigned char loop_b;
  9994                           ;CC2500_B1.c: 233: for (loop_b = 0; loop_b < 8; loop_b++) {
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9998  1FE3  0020               	movlb	0	; select bank0
  9999  1FE4  01A1               	clrf	CC2500_ReadByte@loop_b
 10000  1FE5                     L8:	
 10001  1FE5  3008               	movlw	8
 10002  1FE6  0221               	subwf	CC2500_ReadByte@loop_b,w
 10003  1FE7  1803               	btfsc	3,0
 10004  1FE8  0008               	return
 10005                           
 10006                           ;CC2500_B1.c: 234: RC1 = 1;
 10007  1FE9  148E               	bsf	14,1	;volatile
 10008                           
 10009                           ;CC2500_B1.c: 235: SPI0Buffer <<= 1;
 10010  1FEA  1003               	clrc
 10011  1FEB  0021               	movlb	1	; select bank1
 10012  1FEC  0DD0               	rlf	_SPI0Buffer^(0+128),f
 10013                           
 10014                           ;CC2500_B1.c: 236: if (RC2 == 1)
 10015  1FED  0020               	movlb	0	; select bank0
 10016  1FEE  1D0E               	btfss	14,2	;volatile
 10017  1FEF  2FF3               	goto	l6418
 10018                           
 10019                           ;CC2500_B1.c: 237: SPI0Buffer |= 0x01;
 10020  1FF0  0021               	movlb	1	; select bank1
 10021  1FF1  1450               	bsf	_SPI0Buffer^(0+128),0
 10022  1FF2  2FF9               	goto	l6420
 10023  1FF3                     l6418:	
 10024                           
 10025                           ;CC2500_B1.c: 238: else
 10026                           ;CC2500_B1.c: 239: SPI0Buffer &= 0xFE;
 10027  1FF3  30FE               	movlw	254
 10028  1FF4  0020               	movlb	0	; select bank0
 10029  1FF5  00A0               	movwf	??_CC2500_ReadByte
 10030  1FF6  0820               	movf	??_CC2500_ReadByte,w
 10031  1FF7  0021               	movlb	1	; select bank1
 10032  1FF8  05D0               	andwf	_SPI0Buffer^(0+128),f
 10033  1FF9                     l6420:	
 10034                           
 10035                           ;CC2500_B1.c: 240: RC1 = 0;
 10036  1FF9  0020               	movlb	0	; select bank0
 10037  1FFA  108E               	bcf	14,1	;volatile
 10038  1FFB  3001               	movlw	1
 10039  1FFC  00A0               	movwf	??_CC2500_ReadByte
 10040  1FFD  0820               	movf	??_CC2500_ReadByte,w
 10041  1FFE  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10042  1FFF  2FE5               	goto	L8
 10043  2000                     __end_of_CC2500_ReadByte:	
 10044                           
 10045                           	psect	text50
 10046  1C6E                     __ptext50:	
 10047 ;; *************** function _RF_Initialization *****************
 10048 ;; Defined at:
 10049 ;;		line 9 in file "../src/RF_Control_B1.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;		None
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;		None
 10054 ;; Return value:  Size  Location     Type
 10055 ;;		None               void
 10056 ;; Registers used:
 10057 ;;		wreg, status,2, status,0, pclath, cstack
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;Total ram usage:        0 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; Hardware stack levels required when called:    6
 10070 ;; This function calls:
 10071 ;;		_setRF_Initialization
 10072 ;; This function is called by:
 10073 ;;		_main
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           
 10078                           ;psect for function _RF_Initialization
 10079  1C6E                     _RF_Initialization:	
 10080                           
 10081                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10082                           
 10083                           ;incstack = 0
 10084                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10085  1C6E  319C  24AC         	fcall	_setRF_Initialization
 10086  1C70  0008               	return
 10087  1C71                     __end_of_RF_Initialization:	
 10088                           
 10089                           	psect	text51
 10090  1CAC                     __ptext51:	
 10091 ;; *************** function _setRF_Initialization *****************
 10092 ;; Defined at:
 10093 ;;		line 43 in file "../src/RF_Control_B1.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;		None
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;		None
 10098 ;; Return value:  Size  Location     Type
 10099 ;;		None               void
 10100 ;; Registers used:
 10101 ;;		wreg
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;Total ram usage:        1 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    5
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		_RF_Initialization
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function _setRF_Initialization
 10123  1CAC                     _setRF_Initialization:	
 10124                           
 10125                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10126                           
 10127                           ;incstack = 0
 10128                           ; Regs used in _setRF_Initialization: [wreg]
 10129  1CAC  3015               	movlw	21
 10130  1CAD  0020               	movlb	0	; select bank0
 10131  1CAE  00A0               	movwf	??_setRF_Initialization
 10132  1CAF  0820               	movf	??_setRF_Initialization,w
 10133  1CB0  0021               	movlb	1	; select bank1
 10134  1CB1  00D1               	movwf	_Tx_Length^(0+128)
 10135  1CB2  0008               	return
 10136  1CB3                     __end_of_setRF_Initialization:	
 10137                           
 10138                           	psect	text52
 10139  1E2F                     __ptext52:	
 10140 ;; *************** function _Mcu_Initialization *****************
 10141 ;; Defined at:
 10142 ;;		line 30 in file "../src/MCU_B1.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;		None
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;		None
 10147 ;; Return value:  Size  Location     Type
 10148 ;;		None               void
 10149 ;; Registers used:
 10150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        0 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    6
 10163 ;; This function calls:
 10164 ;;		_ADC_Set
 10165 ;;		_Fosc_Set
 10166 ;;		_IOC_Set
 10167 ;;		_IO_Set
 10168 ;;		_TMR0_Set
 10169 ;;		_WDT_Set
 10170 ;; This function is called by:
 10171 ;;		_main
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function _Mcu_Initialization
 10177  1E2F                     _Mcu_Initialization:	
 10178                           
 10179                           ;MCU_B1.c: 32: Fosc_Set();
 10180                           
 10181                           ;incstack = 0
 10182                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10183  1E2F  319C  2489  319E   	fcall	_Fosc_Set
 10184                           
 10185                           ;MCU_B1.c: 34: IO_Set();
 10186  1E32  319E  26BE  319E   	fcall	_IO_Set
 10187                           
 10188                           ;MCU_B1.c: 36: TMR0_Set();
 10189  1E35  319C  24B3  319E   	fcall	_TMR0_Set
 10190                           
 10191                           ;MCU_B1.c: 38: ;;
 10192                           ;MCU_B1.c: 40: ADC_Set();
 10193  1E38  319C  24A5  319E   	fcall	_ADC_Set
 10194                           
 10195                           ;MCU_B1.c: 44: ;;
 10196                           ;MCU_B1.c: 46: IOC_Set();
 10197  1E3B  3187  27F3  319E   	fcall	_IOC_Set
 10198                           
 10199                           ;MCU_B1.c: 48: ;;
 10200                           ;MCU_B1.c: 50: ;;
 10201                           ;MCU_B1.c: 52: WDT_Set();
 10202  1E3E  319E  26D6         	fcall	_WDT_Set
 10203  1E40  0008               	return
 10204  1E41                     __end_of_Mcu_Initialization:	
 10205                           
 10206                           	psect	text53
 10207  1ED6                     __ptext53:	
 10208 ;; *************** function _WDT_Set *****************
 10209 ;; Defined at:
 10210 ;;		line 895 in file "../src/MCU_B1.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;		None
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;		None               void
 10217 ;; Registers used:
 10218 ;;		wreg, fsr1l, fsr1h
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;Total ram usage:        1 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    5
 10231 ;; This function calls:
 10232 ;;		Nothing
 10233 ;; This function is called by:
 10234 ;;		_Mcu_Initialization
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           
 10239                           ;psect for function _WDT_Set
 10240  1ED6                     _WDT_Set:	
 10241                           
 10242                           ;MCU_B1.c: 896: WDTCON = 0b00010111;;
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in _WDT_Set: [wregfsr1]
 10246  1ED6  3017               	movlw	23
 10247  1ED7  0021               	movlb	1	; select bank1
 10248  1ED8  0097               	movwf	23	;volatile
 10249                           
 10250                           ;MCU_B1.c: 897: WDT = &_WDT;
 10251  1ED9  30EA               	movlw	__WDT& (0+255)
 10252  1EDA  0020               	movlb	0	; select bank0
 10253  1EDB  00A0               	movwf	??_WDT_Set
 10254  1EDC  0820               	movf	??_WDT_Set,w
 10255  1EDD  0021               	movlb	1	; select bank1
 10256  1EDE  00EF               	movwf	_WDT^(0+128)
 10257                           
 10258                           ;MCU_B1.c: 898: WDT->Enable = 1;
 10259  1EDF  086F               	movf	_WDT^(0+128),w
 10260  1EE0  0086               	movwf	6
 10261  1EE1  0187               	clrf	7
 10262  1EE2  1401               	bsf	1,0
 10263                           
 10264                           ;MCU_B1.c: 899: WDT->Count = 10;
 10265  1EE3  300A               	movlw	10
 10266  1EE4  0020               	movlb	0	; select bank0
 10267  1EE5  00A0               	movwf	??_WDT_Set
 10268  1EE6  0021               	movlb	1	; select bank1
 10269  1EE7  0A6F               	incf	_WDT^(0+128),w
 10270  1EE8  0086               	movwf	6
 10271  1EE9  0187               	clrf	7
 10272  1EEA  0020               	movlb	0	; select bank0
 10273  1EEB  0820               	movf	??_WDT_Set,w
 10274  1EEC  0081               	movwf	1
 10275  1EED  0008               	return
 10276  1EEE                     __end_of_WDT_Set:	
 10277                           
 10278                           	psect	text54
 10279  1CB3                     __ptext54:	
 10280 ;; *************** function _TMR0_Set *****************
 10281 ;; Defined at:
 10282 ;;		line 126 in file "../src/MCU_B1.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;		None               void
 10289 ;; Registers used:
 10290 ;;		wreg, status,2
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;Total ram usage:        0 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    5
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_Mcu_Initialization
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           
 10311                           ;psect for function _TMR0_Set
 10312  1CB3                     _TMR0_Set:	
 10313                           
 10314                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10315                           
 10316                           ;incstack = 0
 10317                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10318  1CB3  0021               	movlb	1	; select bank1
 10319  1CB4  0195               	clrf	21	;volatile
 10320                           
 10321                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10322  1CB5  3042               	movlw	66
 10323  1CB6  0020               	movlb	0	; select bank0
 10324  1CB7  0095               	movwf	21	;volatile
 10325                           
 10326                           ;MCU_B1.c: 130: TMR0IE = 1;
 10327  1CB8  168B               	bsf	11,5	;volatile
 10328                           
 10329                           ;MCU_B1.c: 131: GIE = 1;
 10330  1CB9  178B               	bsf	11,7	;volatile
 10331  1CBA  0008               	return
 10332  1CBB                     __end_of_TMR0_Set:	
 10333                           
 10334                           	psect	text55
 10335  1EBE                     __ptext55:	
 10336 ;; *************** function _IO_Set *****************
 10337 ;; Defined at:
 10338 ;;		line 60 in file "../src/MCU_B1.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;		None
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;		None
 10343 ;; Return value:  Size  Location     Type
 10344 ;;		None               void
 10345 ;; Registers used:
 10346 ;;		wreg, status,2
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;Total ram usage:        0 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    5
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		_Mcu_Initialization
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _IO_Set
 10368  1EBE                     _IO_Set:	
 10369                           
 10370                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in _IO_Set: [wreg+status,2]
 10374  1EBE  3077               	movlw	119
 10375  1EBF  0021               	movlb	1	; select bank1
 10376  1EC0  008C               	movwf	12	;volatile
 10377                           
 10378                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
 10379  1EC1  3005               	movlw	5
 10380  1EC2  008D               	movwf	13	;volatile
 10381                           
 10382                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10383  1EC3  300C               	movlw	12
 10384  1EC4  008E               	movwf	14	;volatile
 10385                           
 10386                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10387  1EC5  0022               	movlb	2	; select bank2
 10388  1EC6  018C               	clrf	12	;volatile
 10389                           
 10390                           ;MCU_B1.c: 92: LATB = 0b00000000;;
 10391  1EC7  018D               	clrf	13	;volatile
 10392                           
 10393                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10394  1EC8  018E               	clrf	14	;volatile
 10395                           
 10396                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
 10397  1EC9  3002               	movlw	2
 10398  1ECA  0023               	movlb	3	; select bank3
 10399  1ECB  008C               	movwf	12	;volatile
 10400                           
 10401                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10402  1ECC  018D               	clrf	13	;volatile
 10403                           
 10404                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10405  1ECD  018E               	clrf	14	;volatile
 10406                           
 10407                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10408  1ECE  3077               	movlw	119
 10409  1ECF  0020               	movlb	0	; select bank0
 10410  1ED0  008C               	movwf	12	;volatile
 10411                           
 10412                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
 10413  1ED1  3005               	movlw	5
 10414  1ED2  008D               	movwf	13	;volatile
 10415                           
 10416                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10417  1ED3  300C               	movlw	12
 10418  1ED4  008E               	movwf	14	;volatile
 10419  1ED5  0008               	return
 10420  1ED6                     __end_of_IO_Set:	
 10421                           
 10422                           	psect	text56
 10423  07F3                     __ptext56:	
 10424 ;; *************** function _IOC_Set *****************
 10425 ;; Defined at:
 10426 ;;		line 263 in file "../src/MCU_B1.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;		None
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;		None
 10431 ;; Return value:  Size  Location     Type
 10432 ;;		None               void
 10433 ;; Registers used:
 10434 ;;		wreg, status,2
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;Total ram usage:        0 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:    5
 10447 ;; This function calls:
 10448 ;;		Nothing
 10449 ;; This function is called by:
 10450 ;;		_Mcu_Initialization
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function _IOC_Set
 10456  07F3                     _IOC_Set:	
 10457                           
 10458                           ;MCU_B1.c: 264: WPUB2 = 0;
 10459                           
 10460                           ;incstack = 0
 10461                           ; Regs used in _IOC_Set: [wreg+status,2]
 10462  07F3  0024               	movlb	4	; select bank4
 10463  07F4  110D               	bcf	13,2	;volatile
 10464                           
 10465                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 10466  07F5  3004               	movlw	4
 10467  07F6  0027               	movlb	7	; select bank7
 10468  07F7  0094               	movwf	20	;volatile
 10469                           
 10470                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 10471  07F8  3004               	movlw	4
 10472  07F9  0095               	movwf	21	;volatile
 10473                           
 10474                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 10475  07FA  0196               	clrf	22	;volatile
 10476                           
 10477                           ;MCU_B1.c: 284: IOCIE = 1;
 10478  07FB  158B               	bsf	11,3	;volatile
 10479                           
 10480                           ;MCU_B1.c: 285: IOCIF = 0;
 10481  07FC  100B               	bcf	11,0	;volatile
 10482                           
 10483                           ;MCU_B1.c: 286: PEIE = 1;
 10484  07FD  170B               	bsf	11,6	;volatile
 10485                           
 10486                           ;MCU_B1.c: 287: GIE = 1;
 10487  07FE  178B               	bsf	11,7	;volatile
 10488  07FF  0008               	return
 10489  0800                     __end_of_IOC_Set:	
 10490                           
 10491                           	psect	text57
 10492  1C89                     __ptext57:	
 10493 ;; *************** function _Fosc_Set *****************
 10494 ;; Defined at:
 10495 ;;		line 56 in file "../src/MCU_B1.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;		None
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;		None
 10500 ;; Return value:  Size  Location     Type
 10501 ;;		None               void
 10502 ;; Registers used:
 10503 ;;		wreg
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;Total ram usage:        0 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    5
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_Mcu_Initialization
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _Fosc_Set
 10525  1C89                     _Fosc_Set:	
 10526                           
 10527                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10528                           
 10529                           ;incstack = 0
 10530                           ; Regs used in _Fosc_Set: [wreg]
 10531  1C89  3078               	movlw	120
 10532  1C8A  0021               	movlb	1	; select bank1
 10533  1C8B  0099               	movwf	25	;volatile
 10534  1C8C  0008               	return
 10535  1C8D                     __end_of_Fosc_Set:	
 10536                           
 10537                           	psect	text58
 10538  1CA5                     __ptext58:	
 10539 ;; *************** function _ADC_Set *****************
 10540 ;; Defined at:
 10541 ;;		line 309 in file "../src/MCU_B1.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;		None
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;		None
 10546 ;; Return value:  Size  Location     Type
 10547 ;;		None               void
 10548 ;; Registers used:
 10549 ;;		wreg
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;Total ram usage:        0 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    5
 10562 ;; This function calls:
 10563 ;;		Nothing
 10564 ;; This function is called by:
 10565 ;;		_Mcu_Initialization
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           
 10570                           ;psect for function _ADC_Set
 10571  1CA5                     _ADC_Set:	
 10572                           
 10573                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 10574                           
 10575                           ;incstack = 0
 10576                           ; Regs used in _ADC_Set: [wreg]
 10577  1CA5  30F2               	movlw	242
 10578  1CA6  0021               	movlb	1	; select bank1
 10579  1CA7  009E               	movwf	30	;volatile
 10580                           
 10581                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 10582  1CA8  30C0               	movlw	192
 10583  1CA9  0022               	movlb	2	; select bank2
 10584  1CAA  0097               	movwf	23	;volatile
 10585  1CAB  0008               	return
 10586  1CAC                     __end_of_ADC_Set:	
 10587                           
 10588                           	psect	text59
 10589  1DCB                     __ptext59:	
 10590 ;; *************** function _LED_Main *****************
 10591 ;; Defined at:
 10592 ;;		line 47 in file "../src/LED_B1.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;		None
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;		None               void
 10599 ;; Registers used:
 10600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10601 ;; Tracked objects:
 10602 ;;		On entry : 0/0
 10603 ;;		On exit  : 0/0
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;Total ram usage:        0 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; Hardware stack levels required when called:    7
 10613 ;; This function calls:
 10614 ;;		_setLED_Main
 10615 ;; This function is called by:
 10616 ;;		_main
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           
 10621                           ;psect for function _LED_Main
 10622  1DCB                     _LED_Main:	
 10623                           
 10624                           ;LED_B1.c: 49: setLED_Main(1);
 10625                           
 10626                           ;incstack = 0
 10627                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10628  1DCB  3001               	movlw	1
 10629  1DCC  3196  2612  319D   	fcall	_setLED_Main
 10630                           
 10631                           ;LED_B1.c: 52: setLED_Main(2);
 10632  1DCF  3002               	movlw	2
 10633  1DD0  3196  2612  319D   	fcall	_setLED_Main
 10634                           
 10635                           ;LED_B1.c: 55: setLED_Main(3);
 10636  1DD3  3003               	movlw	3
 10637  1DD4  3196  2612  319D   	fcall	_setLED_Main
 10638                           
 10639                           ;LED_B1.c: 58: setLED_Main(99);
 10640  1DD7  3063               	movlw	99
 10641  1DD8  3196  2612         	fcall	_setLED_Main
 10642  1DDA  0008               	return
 10643  1DDB                     __end_of_LED_Main:	
 10644                           
 10645                           	psect	text60
 10646  1612                     __ptext60:	
 10647 ;; *************** function _setLED_Main *****************
 10648 ;; Defined at:
 10649 ;;		line 192 in file "../src/LED_B1.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;  led             1    wreg     unsigned char 
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;  led             1    3[BANK0 ] unsigned char 
 10654 ;; Return value:  Size  Location     Type
 10655 ;;		None               void
 10656 ;; Registers used:
 10657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;Total ram usage:        3 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    6
 10670 ;; This function calls:
 10671 ;;		_LedPointSelect
 10672 ;; This function is called by:
 10673 ;;		_LED_Main
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function _setLED_Main
 10679  1612                     _setLED_Main:	
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10683                           ;setLED_Main@led stored from wreg
 10684  1612  0020               	movlb	0	; select bank0
 10685  1613  00A3               	movwf	setLED_Main@led
 10686                           
 10687                           ;LED_B1.c: 193: LedPointSelect(led);
 10688  1614  0823               	movf	setLED_Main@led,w
 10689  1615  3193  2300  3196   	fcall	_LedPointSelect
 10690                           
 10691                           ;LED_B1.c: 194: if (LED->GO == 1) {
 10692  1618  0021               	movlb	1	; select bank1
 10693  1619  0843               	movf	_LED^(0+128),w
 10694  161A  0086               	movwf	6
 10695  161B  0844               	movf	(_LED+1)^(0+128),w
 10696  161C  0087               	movwf	7
 10697  161D  1C81               	btfss	1,1
 10698  161E  0008               	return
 10699                           
 10700                           ;LED_B1.c: 195: LED->Time++;
 10701  161F  0843               	movf	_LED^(0+128),w
 10702  1620  0086               	movwf	6
 10703  1621  0844               	movf	(_LED+1)^(0+128),w
 10704  1622  0087               	movwf	7
 10705  1623  3141               	addfsr 1,1
 10706  1624  3001               	movlw	1
 10707  1625  0781               	addwf	1,f
 10708  1626  3141               	addfsr 1,1
 10709  1627  1803               	skipnc
 10710  1628  0A81               	incf	1,f
 10711                           
 10712                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 10713  1629  0843               	movf	_LED^(0+128),w
 10714  162A  0086               	movwf	6
 10715  162B  0844               	movf	(_LED+1)^(0+128),w
 10716  162C  0087               	movwf	7
 10717  162D  3141               	addfsr 1,1
 10718  162E  3F40               	moviw [0]fsr1
 10719  162F  0020               	movlb	0	; select bank0
 10720  1630  00A1               	movwf	??_setLED_Main
 10721  1631  3F41               	moviw [1]fsr1
 10722  1632  00A2               	movwf	??_setLED_Main+1
 10723  1633  3000               	movlw	0
 10724  1634  0222               	subwf	??_setLED_Main+1,w
 10725  1635  3032               	movlw	50
 10726  1636  1903               	skipnz
 10727  1637  0221               	subwf	??_setLED_Main,w
 10728  1638  1C03               	skipc
 10729  1639  0008               	return
 10730                           
 10731                           ;LED_B1.c: 197: LED->Time = 0;
 10732  163A  0021               	movlb	1	; select bank1
 10733  163B  0843               	movf	_LED^(0+128),w
 10734  163C  0086               	movwf	6
 10735  163D  0844               	movf	(_LED+1)^(0+128),w
 10736  163E  0087               	movwf	7
 10737  163F  3141               	addfsr 1,1
 10738  1640  3000               	movlw	0
 10739  1641  3FC0               	movwi [0]fsr1
 10740  1642  3FC1               	movwi [1]fsr1
 10741                           
 10742                           ;LED_B1.c: 199: if (led == 1) {
 10743  1643  0020               	movlb	0	; select bank0
 10744  1644  0823               	movf	setLED_Main@led,w
 10745  1645  3A01               	xorlw	1
 10746  1646  1D03               	skipz
 10747  1647  2E4B               	goto	l8474
 10748                           
 10749                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
 10750  1648  3080               	movlw	128
 10751  1649  068E               	xorwf	14,f
 10752                           
 10753                           ;LED_B1.c: 201: }
 10754  164A  0008               	return
 10755  164B                     l8474:	
 10756                           
 10757                           ;LED_B1.c: 204: else if (led == 2) {
 10758  164B  0823               	movf	setLED_Main@led,w
 10759  164C  3A02               	xorlw	2
 10760  164D  1D03               	skipz
 10761  164E  2E52               	goto	l8478
 10762                           
 10763                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
 10764  164F  3008               	movlw	8
 10765  1650  068C               	xorwf	12,f
 10766                           
 10767                           ;LED_B1.c: 206: }
 10768  1651  0008               	return
 10769  1652                     l8478:	
 10770                           
 10771                           ;LED_B1.c: 209: else if (led == 3) {
 10772  1652  0823               	movf	setLED_Main@led,w
 10773  1653  3A03               	xorlw	3
 10774  1654  1D03               	skipz
 10775  1655  2E59               	goto	l8482
 10776                           
 10777                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
 10778  1656  3040               	movlw	64
 10779  1657  068E               	xorwf	14,f
 10780                           
 10781                           ;LED_B1.c: 211: }
 10782  1658  0008               	return
 10783  1659                     l8482:	
 10784                           
 10785                           ;LED_B1.c: 214: else if (led == 99) {
 10786  1659  0823               	movf	setLED_Main@led,w
 10787  165A  3A63               	xorlw	99
 10788  165B  1D03               	skipz
 10789  165C  0008               	return
 10790                           
 10791                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 10792  165D  3020               	movlw	32
 10793  165E  068D               	xorwf	13,f
 10794  165F  0008               	return
 10795  1660                     __end_of_setLED_Main:	
 10796                           
 10797                           	psect	text61
 10798  1DBB                     __ptext61:	
 10799 ;; *************** function _LED_Initialization *****************
 10800 ;; Defined at:
 10801 ;;		line 31 in file "../src/LED_B1.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;		None
 10806 ;; Return value:  Size  Location     Type
 10807 ;;		None               void
 10808 ;; Registers used:
 10809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;Total ram usage:        0 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    8
 10822 ;; This function calls:
 10823 ;;		_setLED_Initialization
 10824 ;; This function is called by:
 10825 ;;		_main
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           
 10830                           ;psect for function _LED_Initialization
 10831  1DBB                     _LED_Initialization:	
 10832                           
 10833                           ;LED_B1.c: 33: setLED_Initialization(1);
 10834                           
 10835                           ;incstack = 0
 10836                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10837  1DBB  3001               	movlw	1
 10838  1DBC  319E  261D  319D   	fcall	_setLED_Initialization
 10839                           
 10840                           ;LED_B1.c: 36: setLED_Initialization(2);
 10841  1DBF  3002               	movlw	2
 10842  1DC0  319E  261D  319D   	fcall	_setLED_Initialization
 10843                           
 10844                           ;LED_B1.c: 39: setLED_Initialization(3);
 10845  1DC3  3003               	movlw	3
 10846  1DC4  319E  261D  319D   	fcall	_setLED_Initialization
 10847                           
 10848                           ;LED_B1.c: 42: setLED_Initialization(99);
 10849  1DC7  3063               	movlw	99
 10850  1DC8  319E  261D         	fcall	_setLED_Initialization
 10851  1DCA  0008               	return
 10852  1DCB                     __end_of_LED_Initialization:	
 10853                           
 10854                           	psect	text62
 10855  1E1D                     __ptext62:	
 10856 ;; *************** function _setLED_Initialization *****************
 10857 ;; Defined at:
 10858 ;;		line 63 in file "../src/LED_B1.c"
 10859 ;; Parameters:    Size  Location     Type
 10860 ;;  led             1    wreg     unsigned char 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  led             1    3[BANK0 ] unsigned char 
 10863 ;; Return value:  Size  Location     Type
 10864 ;;		None               void
 10865 ;; Registers used:
 10866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10867 ;; Tracked objects:
 10868 ;;		On entry : 0/0
 10869 ;;		On exit  : 0/0
 10870 ;;		Unchanged: 0/0
 10871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;Total ram usage:        1 bytes
 10877 ;; Hardware stack levels used:    1
 10878 ;; Hardware stack levels required when called:    7
 10879 ;; This function calls:
 10880 ;;		_LedPointSelect
 10881 ;;		_setLED
 10882 ;; This function is called by:
 10883 ;;		_LED_Initialization
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           
 10888                           ;psect for function _setLED_Initialization
 10889  1E1D                     _setLED_Initialization:	
 10890                           
 10891                           ;incstack = 0
 10892                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10893                           ;setLED_Initialization@led stored from wreg
 10894  1E1D  0020               	movlb	0	; select bank0
 10895  1E1E  00A3               	movwf	setLED_Initialization@led
 10896                           
 10897                           ;LED_B1.c: 64: LedPointSelect(led);
 10898  1E1F  0823               	movf	setLED_Initialization@led,w
 10899  1E20  3193  2300  319E   	fcall	_LedPointSelect
 10900                           
 10901                           ;LED_B1.c: 65: LED->Enable = 1;
 10902  1E23  0021               	movlb	1	; select bank1
 10903  1E24  0843               	movf	_LED^(0+128),w
 10904  1E25  0086               	movwf	6
 10905  1E26  0844               	movf	(_LED+1)^(0+128),w
 10906  1E27  0087               	movwf	7
 10907  1E28  1401               	bsf	1,0
 10908                           
 10909                           ;LED_B1.c: 66: setLED(led, 0);
 10910  1E29  0020               	movlb	0	; select bank0
 10911  1E2A  01A1               	clrf	setLED@command
 10912  1E2B  0823               	movf	setLED_Initialization@led,w
 10913  1E2C  318B  2372         	fcall	_setLED
 10914  1E2E  0008               	return
 10915  1E2F                     __end_of_setLED_Initialization:	
 10916                           
 10917                           	psect	text63
 10918  10AD                     __ptext63:	
 10919 ;; *************** function _Flash_Memory_Main *****************
 10920 ;; Defined at:
 10921 ;;		line 790 in file "../src/MCU_B1.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;		None
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;		None
 10926 ;; Return value:  Size  Location     Type
 10927 ;;		None               void
 10928 ;; Registers used:
 10929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;Total ram usage:        0 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    8
 10942 ;; This function calls:
 10943 ;;		_Flash_Memory_Modify
 10944 ;; This function is called by:
 10945 ;;		_main
 10946 ;; This function uses a non-reentrant model
 10947 ;;
 10948                           
 10949                           
 10950                           ;psect for function _Flash_Memory_Main
 10951  10AD                     _Flash_Memory_Main:	
 10952                           
 10953                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 10954                           
 10955                           ;incstack = 0
 10956                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10957  10AD  0023               	movlb	3	; select bank3
 10958  10AE  1CC4               	btfss	(_Memory^(0+384)+36),1
 10959  10AF  0008               	return
 10960                           
 10961                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 10962  10B0  1C44               	btfss	(_Memory^(0+384)+36),0
 10963  10B1  28CA               	goto	l1449
 10964                           
 10965                           ;MCU_B1.c: 793: Memory.Time++;
 10966  10B2  3001               	movlw	1
 10967  10B3  07C2               	addwf	(_Memory^(0+384)+34),f
 10968  10B4  3000               	movlw	0
 10969  10B5  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 10970                           
 10971                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 10972  10B6  3022               	movlw	34
 10973  10B7  3EA0               	addlw	_Memory& (0+255)
 10974  10B8  0086               	movwf	6
 10975  10B9  3001               	movlw	1	; select bank3/4
 10976  10BA  0087               	movwf	7
 10977  10BB  3F40               	moviw [0]fsr1
 10978  10BC  3A19               	xorlw	25
 10979  10BD  1D03               	skipz
 10980  10BE  28C1               	goto	u7615
 10981  10BF  3F41               	moviw [1]fsr1
 10982  10C0  3A00               	xorlw	0
 10983  10C1                     u7615:	
 10984  10C1  1D03               	skipz
 10985  10C2  0008               	return
 10986                           
 10987                           ;MCU_B1.c: 795: {
 10988                           ;MCU_B1.c: 796: Memory.Time = 0;
 10989  10C3  01C2               	clrf	(_Memory^(0+384)+34)
 10990  10C4  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10991                           
 10992                           ;MCU_B1.c: 797: Memory.Modify = 0;
 10993  10C5  1044               	bcf	(_Memory^(0+384)+36),0
 10994                           
 10995                           ;MCU_B1.c: 798: Memory.GO = 0;
 10996  10C6  10C4               	bcf	(_Memory^(0+384)+36),1
 10997                           
 10998                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 10999  10C7  3188  2001         	fcall	_Flash_Memory_Modify
 11000                           
 11001                           ;MCU_B1.c: 800: }
 11002                           ;MCU_B1.c: 801: } else {
 11003  10C9  0008               	return
 11004  10CA                     l1449:	
 11005                           
 11006                           ;MCU_B1.c: 802: Memory.GO = 0;
 11007  10CA  10C4               	bcf	(_Memory^(0+384)+36),1
 11008  10CB  0008               	return
 11009  10CC                     __end_of_Flash_Memory_Main:	
 11010                           
 11011                           	psect	text64
 11012  0801                     __ptext64:	
 11013 ;; *************** function _Flash_Memory_Modify *****************
 11014 ;; Defined at:
 11015 ;;		line 859 in file "../src/MCU_B1.c"
 11016 ;; Parameters:    Size  Location     Type
 11017 ;;		None
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;  i               1    5[BANK0 ] unsigned char 
 11020 ;; Return value:  Size  Location     Type
 11021 ;;		None               void
 11022 ;; Registers used:
 11023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;Total ram usage:        2 bytes
 11034 ;; Hardware stack levels used:    1
 11035 ;; Hardware stack levels required when called:    7
 11036 ;; This function calls:
 11037 ;;		_Flash_Memory_Erasing
 11038 ;;		_Flash_Memory_Read
 11039 ;;		_Flash_Memory_Write
 11040 ;; This function is called by:
 11041 ;;		_Flash_Memory_Main
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           
 11046                           ;psect for function _Flash_Memory_Modify
 11047  0801                     _Flash_Memory_Modify:	
 11048                           
 11049                           ;MCU_B1.c: 860: char i = 0;
 11050                           
 11051                           ;incstack = 0
 11052                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11053  0801  0020               	movlb	0	; select bank0
 11054  0802  01A5               	clrf	Flash_Memory_Modify@i
 11055                           
 11056                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 11057  0803  01A5               	clrf	Flash_Memory_Modify@i
 11058  0804  3020               	movlw	32
 11059  0805  0225               	subwf	Flash_Memory_Modify@i,w
 11060  0806  1803               	btfsc	3,0
 11061  0807  281D               	goto	l7560
 11062  0808                     l7554:	
 11063                           
 11064                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 11065  0808  0825               	movf	Flash_Memory_Modify@i,w
 11066  0809  319F  273B  3188   	fcall	_Flash_Memory_Read
 11067  080C  0020               	movlb	0	; select bank0
 11068  080D  00A4               	movwf	??_Flash_Memory_Modify
 11069  080E  0825               	movf	Flash_Memory_Modify@i,w
 11070  080F  3EA0               	addlw	_Memory& (0+255)
 11071  0810  0086               	movwf	6
 11072  0811  3001               	movlw	1	; select bank3/4
 11073  0812  0087               	movwf	7
 11074  0813  0824               	movf	??_Flash_Memory_Modify,w
 11075  0814  0081               	movwf	1
 11076  0815  3001               	movlw	1
 11077  0816  00A4               	movwf	??_Flash_Memory_Modify
 11078  0817  0824               	movf	??_Flash_Memory_Modify,w
 11079  0818  07A5               	addwf	Flash_Memory_Modify@i,f
 11080  0819  3020               	movlw	32
 11081  081A  0225               	subwf	Flash_Memory_Modify@i,w
 11082  081B  1C03               	skipc
 11083  081C  2808               	goto	l7554
 11084  081D                     l7560:	
 11085                           
 11086                           ;MCU_B1.c: 863: }
 11087                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 11088  081D  086F               	movf	_product,w
 11089  081E  0086               	movwf	6
 11090  081F  3002               	movlw	2	; select bank4/5
 11091  0820  0087               	movwf	7
 11092  0821  3002               	movlw	2	; select bank4/5
 11093  0822  3F4C               	moviw [12]fsr1
 11094  0823  0023               	movlb	3	; select bank3
 11095  0824  00A0               	movwf	_Memory^(0+384)
 11096                           
 11097                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 11098  0825  0020               	movlb	0	; select bank0
 11099  0826  086F               	movf	_product,w
 11100  0827  0086               	movwf	6
 11101  0828  3002               	movlw	2	; select bank4/5
 11102  0829  0087               	movwf	7
 11103  082A  3002               	movlw	2	; select bank4/5
 11104  082B  3F4D               	moviw [13]fsr1
 11105  082C  0023               	movlb	3	; select bank3
 11106  082D  00A1               	movwf	(_Memory^(0+384)+1)
 11107                           
 11108                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 11109  082E  0020               	movlb	0	; select bank0
 11110  082F  086F               	movf	_product,w
 11111  0830  0086               	movwf	6
 11112  0831  3002               	movlw	2	; select bank4/5
 11113  0832  0087               	movwf	7
 11114  0833  3002               	movlw	2	; select bank4/5
 11115  0834  3F4E               	moviw [14]fsr1
 11116  0835  0023               	movlb	3	; select bank3
 11117  0836  00A2               	movwf	(_Memory^(0+384)+2)
 11118                           
 11119                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 11120  0837  1D44               	btfss	(_Memory^(0+384)+36),2
 11121  0838  283D               	goto	l1471
 11122                           
 11123                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 11124  0839  1144               	bcf	(_Memory^(0+384)+36),2
 11125                           
 11126                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 11127  083A  0021               	movlb	1	; select bank1
 11128  083B  12A0               	bcf	_myMain^(0+128),5
 11129                           
 11130                           ;MCU_B1.c: 875: myMain.First = 0;
 11131  083C  13A0               	bcf	_myMain^(0+128),7
 11132  083D                     l1471:	
 11133                           
 11134                           ;MCU_B1.c: 877: }
 11135                           ;MCU_B1.c: 878: GIE = 0;
 11136  083D  138B               	bcf	11,7	;volatile
 11137                           
 11138                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 11139  083E  319D  250E  3188   	fcall	_Flash_Memory_Erasing
 11140                           
 11141                           ;MCU_B1.c: 880: Flash_Memory_Write();
 11142  0841  3193  232D         	fcall	_Flash_Memory_Write
 11143                           
 11144                           ;MCU_B1.c: 881: GIE = 1;
 11145  0843  178B               	bsf	11,7	;volatile
 11146  0844  0008               	return
 11147  0845                     __end_of_Flash_Memory_Modify:	
 11148                           
 11149                           	psect	text65
 11150  1D0E                     __ptext65:	
 11151 ;; *************** function _Flash_Memory_Erasing *****************
 11152 ;; Defined at:
 11153 ;;		line 848 in file "../src/MCU_B1.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;		None
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;		None
 11158 ;; Return value:  Size  Location     Type
 11159 ;;		None               void
 11160 ;; Registers used:
 11161 ;;		wreg, status,2, status,0, pclath, cstack
 11162 ;; Tracked objects:
 11163 ;;		On entry : 0/0
 11164 ;;		On exit  : 0/0
 11165 ;;		Unchanged: 0/0
 11166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;Total ram usage:        0 bytes
 11172 ;; Hardware stack levels used:    1
 11173 ;; Hardware stack levels required when called:    6
 11174 ;; This function calls:
 11175 ;;		_Flash_Memory_Unlock
 11176 ;; This function is called by:
 11177 ;;		_Flash_Memory_Modify
 11178 ;; This function uses a non-reentrant model
 11179 ;;
 11180                           
 11181                           
 11182                           ;psect for function _Flash_Memory_Erasing
 11183  1D0E                     _Flash_Memory_Erasing:	
 11184                           
 11185                           ;MCU_B1.c: 849: CFGS = 0;
 11186                           
 11187                           ;incstack = 0
 11188                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11189  1D0E  0023               	movlb	3	; select bank3
 11190  1D0F  1315               	bcf	21,6	;volatile
 11191                           
 11192                           ;MCU_B1.c: 850: PMADRH = 0x30;
 11193  1D10  3030               	movlw	48
 11194  1D11  0092               	movwf	18	;volatile
 11195                           
 11196                           ;MCU_B1.c: 851: PMADRL = 0x00;
 11197  1D12  0191               	clrf	17	;volatile
 11198                           
 11199                           ;MCU_B1.c: 852: FREE = 1;
 11200  1D13  1615               	bsf	21,4	;volatile
 11201                           
 11202                           ;MCU_B1.c: 853: WREN = 1;
 11203  1D14  1515               	bsf	21,2	;volatile
 11204                           
 11205                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 11206  1D15  3190  2066         	fcall	_Flash_Memory_Unlock
 11207                           
 11208                           ;MCU_B1.c: 855: WREN = 0;
 11209  1D17  0023               	movlb	3	; select bank3
 11210  1D18  1115               	bcf	21,2	;volatile
 11211  1D19  0008               	return
 11212  1D1A                     __end_of_Flash_Memory_Erasing:	
 11213                           
 11214                           	psect	text66
 11215  0467                     __ptext66:	
 11216 ;; *************** function _Flash_Memory_Initialization *****************
 11217 ;; Defined at:
 11218 ;;		line 749 in file "../src/MCU_B1.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;		None
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  i               1   62[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;		None               void
 11225 ;; Registers used:
 11226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;Total ram usage:        2 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    8
 11239 ;; This function calls:
 11240 ;;		_Flash_Memory_Read
 11241 ;;		_Flash_Memory_Write
 11242 ;;		_setPercentValue
 11243 ;; This function is called by:
 11244 ;;		_main
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           
 11249                           ;psect for function _Flash_Memory_Initialization
 11250  0467                     _Flash_Memory_Initialization:	
 11251                           
 11252                           ;MCU_B1.c: 750: char i = 0;
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11256  0467  0020               	movlb	0	; select bank0
 11257  0468  01DE               	clrf	Flash_Memory_Initialization@i
 11258                           
 11259                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 11260  0469  301F               	movlw	31
 11261  046A  319F  273B  3184   	fcall	_Flash_Memory_Read
 11262  046D  3AAA               	xorlw	170
 11263  046E  1D03               	skipz
 11264  046F  2CD9               	goto	l7914
 11265                           
 11266                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 11267  0470  3000               	movlw	0
 11268  0471  319F  273B  3184   	fcall	_Flash_Memory_Read
 11269  0474  0020               	movlb	0	; select bank0
 11270  0475  00DD               	movwf	??_Flash_Memory_Initialization
 11271  0476  086F               	movf	_product,w
 11272  0477  3E0C               	addlw	12
 11273  0478  0086               	movwf	6
 11274  0479  3002               	movlw	2	; select bank4/5
 11275  047A  0087               	movwf	7
 11276  047B  085D               	movf	??_Flash_Memory_Initialization,w
 11277  047C  0081               	movwf	1
 11278                           
 11279                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 11280  047D  3001               	movlw	1
 11281  047E  319F  273B  3184   	fcall	_Flash_Memory_Read
 11282  0481  0020               	movlb	0	; select bank0
 11283  0482  00DD               	movwf	??_Flash_Memory_Initialization
 11284  0483  086F               	movf	_product,w
 11285  0484  3E0D               	addlw	13
 11286  0485  0086               	movwf	6
 11287  0486  3002               	movlw	2	; select bank4/5
 11288  0487  0087               	movwf	7
 11289  0488  085D               	movf	??_Flash_Memory_Initialization,w
 11290  0489  0081               	movwf	1
 11291                           
 11292                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 11293  048A  3002               	movlw	2
 11294  048B  319F  273B  3184   	fcall	_Flash_Memory_Read
 11295  048E  0020               	movlb	0	; select bank0
 11296  048F  00DD               	movwf	??_Flash_Memory_Initialization
 11297  0490  086F               	movf	_product,w
 11298  0491  3E0E               	addlw	14
 11299  0492  0086               	movwf	6
 11300  0493  3002               	movlw	2	; select bank4/5
 11301  0494  0087               	movwf	7
 11302  0495  085D               	movf	??_Flash_Memory_Initialization,w
 11303  0496  0081               	movwf	1
 11304                           
 11305                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-95)*0.8)));
 11306  0497  3004               	movlw	4
 11307  0498  3194  24F4  3184   	fcall	_setPercentValue
 11308  049B  0020               	movlb	0	; select bank0
 11309  049C  00DD               	movwf	??_Flash_Memory_Initialization
 11310  049D  085D               	movf	??_Flash_Memory_Initialization,w
 11311  049E  00DE               	movwf	Flash_Memory_Initialization@i
 11312                           
 11313                           ;MCU_B1.c: 761: product->Data[21] = i;
 11314  049F  085E               	movf	Flash_Memory_Initialization@i,w
 11315  04A0  00DD               	movwf	??_Flash_Memory_Initialization
 11316  04A1  086F               	movf	_product,w
 11317  04A2  3E15               	addlw	21
 11318  04A3  0086               	movwf	6
 11319  04A4  3002               	movlw	2	; select bank4/5
 11320  04A5  0087               	movwf	7
 11321  04A6  085D               	movf	??_Flash_Memory_Initialization,w
 11322  04A7  0081               	movwf	1
 11323                           
 11324                           ;MCU_B1.c: 762: product->Data[22] = i;
 11325  04A8  085E               	movf	Flash_Memory_Initialization@i,w
 11326  04A9  00DD               	movwf	??_Flash_Memory_Initialization
 11327  04AA  086F               	movf	_product,w
 11328  04AB  3E16               	addlw	22
 11329  04AC  0086               	movwf	6
 11330  04AD  3002               	movlw	2	; select bank4/5
 11331  04AE  0087               	movwf	7
 11332  04AF  085D               	movf	??_Flash_Memory_Initialization,w
 11333  04B0  0081               	movwf	1
 11334                           
 11335                           ;MCU_B1.c: 763: product->Data[23] = i;
 11336  04B1  085E               	movf	Flash_Memory_Initialization@i,w
 11337  04B2  00DD               	movwf	??_Flash_Memory_Initialization
 11338  04B3  086F               	movf	_product,w
 11339  04B4  3E17               	addlw	23
 11340  04B5  0086               	movwf	6
 11341  04B6  3002               	movlw	2	; select bank4/5
 11342  04B7  0087               	movwf	7
 11343  04B8  085D               	movf	??_Flash_Memory_Initialization,w
 11344  04B9  0081               	movwf	1
 11345                           
 11346                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11347  04BA  086F               	movf	_product,w
 11348  04BB  3E0C               	addlw	12
 11349  04BC  0086               	movwf	6
 11350  04BD  3002               	movlw	2	; select bank4/5
 11351  04BE  0087               	movwf	7
 11352  04BF  0801               	movf	1,w
 11353  04C0  3AFF               	xorlw	255
 11354  04C1  1D03               	skipz
 11355  04C2  0008               	return
 11356  04C3  086F               	movf	_product,w
 11357  04C4  3E0D               	addlw	13
 11358  04C5  0086               	movwf	6
 11359  04C6  3002               	movlw	2	; select bank4/5
 11360  04C7  0087               	movwf	7
 11361  04C8  0801               	movf	1,w
 11362  04C9  3AFF               	xorlw	255
 11363  04CA  1D03               	skipz
 11364  04CB  0008               	return
 11365  04CC  086F               	movf	_product,w
 11366  04CD  3E0E               	addlw	14
 11367  04CE  0086               	movwf	6
 11368  04CF  3002               	movlw	2	; select bank4/5
 11369  04D0  0087               	movwf	7
 11370  04D1  0801               	movf	1,w
 11371  04D2  3AFF               	xorlw	255
 11372  04D3  1D03               	skipz
 11373  04D4  0008               	return
 11374                           
 11375                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 11376  04D5  0021               	movlb	1	; select bank1
 11377  04D6  16A0               	bsf	_myMain^(0+128),5
 11378                           
 11379                           ;MCU_B1.c: 767: myMain.First = 1;
 11380  04D7  17A0               	bsf	_myMain^(0+128),7
 11381                           
 11382                           ;MCU_B1.c: 768: }
 11383                           ;MCU_B1.c: 769: } else {
 11384  04D8  0008               	return
 11385  04D9                     l7914:	
 11386                           
 11387                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-95)*0.8)));
 11388  04D9  3004               	movlw	4
 11389  04DA  3194  24F4  3184   	fcall	_setPercentValue
 11390  04DD  0020               	movlb	0	; select bank0
 11391  04DE  00DD               	movwf	??_Flash_Memory_Initialization
 11392  04DF  085D               	movf	??_Flash_Memory_Initialization,w
 11393  04E0  00DE               	movwf	Flash_Memory_Initialization@i
 11394                           
 11395                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 11396  04E1  30FF               	movlw	255
 11397  04E2  00DD               	movwf	??_Flash_Memory_Initialization
 11398  04E3  085D               	movf	??_Flash_Memory_Initialization,w
 11399  04E4  0023               	movlb	3	; select bank3
 11400  04E5  00A0               	movwf	_Memory^(0+384)
 11401                           
 11402                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 11403  04E6  30FF               	movlw	255
 11404  04E7  0020               	movlb	0	; select bank0
 11405  04E8  00DD               	movwf	??_Flash_Memory_Initialization
 11406  04E9  085D               	movf	??_Flash_Memory_Initialization,w
 11407  04EA  0023               	movlb	3	; select bank3
 11408  04EB  00A1               	movwf	(_Memory^(0+384)+1)
 11409                           
 11410                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 11411  04EC  30FF               	movlw	255
 11412  04ED  0020               	movlb	0	; select bank0
 11413  04EE  00DD               	movwf	??_Flash_Memory_Initialization
 11414  04EF  085D               	movf	??_Flash_Memory_Initialization,w
 11415  04F0  0023               	movlb	3	; select bank3
 11416  04F1  00A2               	movwf	(_Memory^(0+384)+2)
 11417                           
 11418                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 11419  04F2  30FF               	movlw	255
 11420  04F3  0020               	movlb	0	; select bank0
 11421  04F4  00DD               	movwf	??_Flash_Memory_Initialization
 11422  04F5  085D               	movf	??_Flash_Memory_Initialization,w
 11423  04F6  0023               	movlb	3	; select bank3
 11424  04F7  00A3               	movwf	(_Memory^(0+384)+3)
 11425                           
 11426                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 11427  04F8  30FF               	movlw	255
 11428  04F9  0020               	movlb	0	; select bank0
 11429  04FA  00DD               	movwf	??_Flash_Memory_Initialization
 11430  04FB  085D               	movf	??_Flash_Memory_Initialization,w
 11431  04FC  0023               	movlb	3	; select bank3
 11432  04FD  00A4               	movwf	(_Memory^(0+384)+4)
 11433                           
 11434                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 11435  04FE  30FF               	movlw	255
 11436  04FF  0020               	movlb	0	; select bank0
 11437  0500  00DD               	movwf	??_Flash_Memory_Initialization
 11438  0501  085D               	movf	??_Flash_Memory_Initialization,w
 11439  0502  0023               	movlb	3	; select bank3
 11440  0503  00A5               	movwf	(_Memory^(0+384)+5)
 11441                           
 11442                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 11443  0504  30AA               	movlw	170
 11444  0505  0020               	movlb	0	; select bank0
 11445  0506  00DD               	movwf	??_Flash_Memory_Initialization
 11446  0507  085D               	movf	??_Flash_Memory_Initialization,w
 11447  0508  0023               	movlb	3	; select bank3
 11448  0509  00BF               	movwf	(_Memory^(0+384)+31)
 11449                           
 11450                           ;MCU_B1.c: 778: product->Data[21] = i;
 11451  050A  0020               	movlb	0	; select bank0
 11452  050B  085E               	movf	Flash_Memory_Initialization@i,w
 11453  050C  00DD               	movwf	??_Flash_Memory_Initialization
 11454  050D  086F               	movf	_product,w
 11455  050E  3E15               	addlw	21
 11456  050F  0086               	movwf	6
 11457  0510  3002               	movlw	2	; select bank4/5
 11458  0511  0087               	movwf	7
 11459  0512  085D               	movf	??_Flash_Memory_Initialization,w
 11460  0513  0081               	movwf	1
 11461                           
 11462                           ;MCU_B1.c: 779: product->Data[22] = i;
 11463  0514  085E               	movf	Flash_Memory_Initialization@i,w
 11464  0515  00DD               	movwf	??_Flash_Memory_Initialization
 11465  0516  086F               	movf	_product,w
 11466  0517  3E16               	addlw	22
 11467  0518  0086               	movwf	6
 11468  0519  3002               	movlw	2	; select bank4/5
 11469  051A  0087               	movwf	7
 11470  051B  085D               	movf	??_Flash_Memory_Initialization,w
 11471  051C  0081               	movwf	1
 11472                           
 11473                           ;MCU_B1.c: 780: product->Data[23] = i;
 11474  051D  085E               	movf	Flash_Memory_Initialization@i,w
 11475  051E  00DD               	movwf	??_Flash_Memory_Initialization
 11476  051F  086F               	movf	_product,w
 11477  0520  3E17               	addlw	23
 11478  0521  0086               	movwf	6
 11479  0522  3002               	movlw	2	; select bank4/5
 11480  0523  0087               	movwf	7
 11481  0524  085D               	movf	??_Flash_Memory_Initialization,w
 11482  0525  0081               	movwf	1
 11483                           
 11484                           ;MCU_B1.c: 781: GIE = 0;
 11485  0526  138B               	bcf	11,7	;volatile
 11486                           
 11487                           ;MCU_B1.c: 782: Flash_Memory_Write();
 11488  0527  3193  232D         	fcall	_Flash_Memory_Write
 11489                           
 11490                           ;MCU_B1.c: 783: GIE = 1;
 11491  0529  178B               	bsf	11,7	;volatile
 11492                           
 11493                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 11494  052A  0021               	movlb	1	; select bank1
 11495  052B  16A0               	bsf	_myMain^(0+128),5
 11496                           
 11497                           ;MCU_B1.c: 785: myMain.First = 1;
 11498  052C  17A0               	bsf	_myMain^(0+128),7
 11499  052D  0008               	return
 11500  052E                     __end_of_Flash_Memory_Initialization:	
 11501                           
 11502                           	psect	text67
 11503  132D                     __ptext67:	
 11504 ;; *************** function _Flash_Memory_Write *****************
 11505 ;; Defined at:
 11506 ;;		line 829 in file "../src/MCU_B1.c"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;		None
 11509 ;; Auto vars:     Size  Location     Type
 11510 ;;  i               1    1[BANK0 ] unsigned char 
 11511 ;; Return value:  Size  Location     Type
 11512 ;;		None               void
 11513 ;; Registers used:
 11514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11515 ;; Tracked objects:
 11516 ;;		On entry : 0/0
 11517 ;;		On exit  : 0/0
 11518 ;;		Unchanged: 0/0
 11519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;Total ram usage:        2 bytes
 11525 ;; Hardware stack levels used:    1
 11526 ;; Hardware stack levels required when called:    6
 11527 ;; This function calls:
 11528 ;;		_Flash_Memory_Unlock
 11529 ;; This function is called by:
 11530 ;;		_Flash_Memory_Initialization
 11531 ;;		_Flash_Memory_Modify
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           
 11536                           ;psect for function _Flash_Memory_Write
 11537  132D                     _Flash_Memory_Write:	
 11538                           
 11539                           ;MCU_B1.c: 830: char i = 0;
 11540                           
 11541                           ;incstack = 0
 11542                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11543  132D  0020               	movlb	0	; select bank0
 11544  132E  01A1               	clrf	Flash_Memory_Write@i
 11545                           
 11546                           ;MCU_B1.c: 831: CFGS = 0;
 11547  132F  0023               	movlb	3	; select bank3
 11548  1330  1315               	bcf	21,6	;volatile
 11549                           
 11550                           ;MCU_B1.c: 832: PMADRH = 0x30;
 11551  1331  3030               	movlw	48
 11552  1332  0092               	movwf	18	;volatile
 11553                           
 11554                           ;MCU_B1.c: 833: PMDATH = 0;
 11555  1333  0194               	clrf	20	;volatile
 11556                           
 11557                           ;MCU_B1.c: 834: FREE = 0;
 11558  1334  1215               	bcf	21,4	;volatile
 11559                           
 11560                           ;MCU_B1.c: 835: LWLO = 1;
 11561  1335  1695               	bsf	21,5	;volatile
 11562                           
 11563                           ;MCU_B1.c: 836: WREN = 1;
 11564  1336  1515               	bsf	21,2	;volatile
 11565                           
 11566                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 11567  1337  0020               	movlb	0	; select bank0
 11568  1338  01A1               	clrf	Flash_Memory_Write@i
 11569  1339  3020               	movlw	32
 11570  133A  0221               	subwf	Flash_Memory_Write@i,w
 11571  133B  1803               	btfsc	3,0
 11572  133C  2B55               	goto	l1462
 11573  133D                     l6922:	
 11574                           
 11575                           ;MCU_B1.c: 838: PMADRL = i;
 11576  133D  0821               	movf	Flash_Memory_Write@i,w
 11577  133E  0023               	movlb	3	; select bank3
 11578  133F  0091               	movwf	17	;volatile
 11579                           
 11580                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 11581  1340  0020               	movlb	0	; select bank0
 11582  1341  0821               	movf	Flash_Memory_Write@i,w
 11583  1342  3EA0               	addlw	_Memory& (0+255)
 11584  1343  0086               	movwf	6
 11585  1344  3001               	movlw	1	; select bank3/4
 11586  1345  0087               	movwf	7
 11587  1346  0801               	movf	1,w
 11588  1347  0023               	movlb	3	; select bank3
 11589  1348  0093               	movwf	19	;volatile
 11590                           
 11591                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 11592  1349  3190  2066  3193   	fcall	_Flash_Memory_Unlock
 11593  134C  3001               	movlw	1
 11594  134D  0020               	movlb	0	; select bank0
 11595  134E  00A0               	movwf	??_Flash_Memory_Write
 11596  134F  0820               	movf	??_Flash_Memory_Write,w
 11597  1350  07A1               	addwf	Flash_Memory_Write@i,f
 11598  1351  3020               	movlw	32
 11599  1352  0221               	subwf	Flash_Memory_Write@i,w
 11600  1353  1C03               	skipc
 11601  1354  2B3D               	goto	l6922
 11602  1355                     l1462:	
 11603                           
 11604                           ;MCU_B1.c: 841: }
 11605                           ;MCU_B1.c: 842: LWLO = 0;
 11606  1355  0023               	movlb	3	; select bank3
 11607  1356  1295               	bcf	21,5	;volatile
 11608                           
 11609                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 11610  1357  3190  2066         	fcall	_Flash_Memory_Unlock
 11611                           
 11612                           ;MCU_B1.c: 844: WREN = 0;
 11613  1359  0023               	movlb	3	; select bank3
 11614  135A  1115               	bcf	21,2	;volatile
 11615  135B  0008               	return
 11616  135C                     __end_of_Flash_Memory_Write:	
 11617                           
 11618                           	psect	text68
 11619  1066                     __ptext68:	
 11620 ;; *************** function _Flash_Memory_Unlock *****************
 11621 ;; Defined at:
 11622 ;;		line 808 in file "../src/MCU_B1.c"
 11623 ;; Parameters:    Size  Location     Type
 11624 ;;		None
 11625 ;; Auto vars:     Size  Location     Type
 11626 ;;		None
 11627 ;; Return value:  Size  Location     Type
 11628 ;;		None               void
 11629 ;; Registers used:
 11630 ;;		wreg
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;Total ram usage:        0 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:    5
 11643 ;; This function calls:
 11644 ;;		Nothing
 11645 ;; This function is called by:
 11646 ;;		_Flash_Memory_Write
 11647 ;;		_Flash_Memory_Erasing
 11648 ;; This function uses a non-reentrant model
 11649 ;;
 11650                           
 11651                           
 11652                           ;psect for function _Flash_Memory_Unlock
 11653  1066                     _Flash_Memory_Unlock:	
 11654                           
 11655                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 11656                           
 11657                           ;incstack = 0
 11658                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11659  1066  3055               	movlw	85
 11660  1067  0023               	movlb	3	; select bank3
 11661  1068  0096               	movwf	22	;volatile
 11662                           
 11663                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 11664  1069  30AA               	movlw	170
 11665  106A  0096               	movwf	22	;volatile
 11666                           
 11667                           ;MCU_B1.c: 811: WR = 1;
 11668  106B  1495               	bsf	21,1	;volatile
 11669                           
 11670                           ;MCU_B1.c: 812: __nop();
 11671  106C  0000               	nop
 11672                           
 11673                           ;MCU_B1.c: 813: __nop();
 11674  106D  0000               	nop
 11675  106E  0008               	return
 11676  106F                     __end_of_Flash_Memory_Unlock:	
 11677                           
 11678                           	psect	text69
 11679  1F3B                     __ptext69:	
 11680 ;; *************** function _Flash_Memory_Read *****************
 11681 ;; Defined at:
 11682 ;;		line 817 in file "../src/MCU_B1.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;  address         1    wreg     unsigned char 
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  address         1    2[BANK0 ] unsigned char 
 11687 ;;  ret             1    3[BANK0 ] unsigned char 
 11688 ;;  i               1    1[BANK0 ] unsigned char 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      unsigned char 
 11691 ;; Registers used:
 11692 ;;		wreg, status,2
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;Total ram usage:        4 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    5
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_Flash_Memory_Initialization
 11709 ;;		_Flash_Memory_Modify
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           
 11714                           ;psect for function _Flash_Memory_Read
 11715  1F3B                     _Flash_Memory_Read:	
 11716                           
 11717                           ;incstack = 0
 11718                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11719                           ;Flash_Memory_Read@address stored from wreg
 11720  1F3B  0020               	movlb	0	; select bank0
 11721  1F3C  00A2               	movwf	Flash_Memory_Read@address
 11722                           
 11723                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 11724  1F3D  01A1               	clrf	Flash_Memory_Read@i
 11725  1F3E  01A3               	clrf	Flash_Memory_Read@ret
 11726                           
 11727                           ;MCU_B1.c: 819: PMADRH = 0x30;
 11728  1F3F  3030               	movlw	48
 11729  1F40  0023               	movlb	3	; select bank3
 11730  1F41  0092               	movwf	18	;volatile
 11731                           
 11732                           ;MCU_B1.c: 820: PMADRL = address;
 11733  1F42  0020               	movlb	0	; select bank0
 11734  1F43  0822               	movf	Flash_Memory_Read@address,w
 11735  1F44  0023               	movlb	3	; select bank3
 11736  1F45  0091               	movwf	17	;volatile
 11737                           
 11738                           ;MCU_B1.c: 821: CFGS = 0;
 11739  1F46  1315               	bcf	21,6	;volatile
 11740                           
 11741                           ;MCU_B1.c: 822: RD = 1;
 11742  1F47  1415               	bsf	21,0	;volatile
 11743                           
 11744                           ;MCU_B1.c: 823: i = PMDATH;
 11745  1F48  0814               	movf	20,w	;volatile
 11746  1F49  0020               	movlb	0	; select bank0
 11747  1F4A  00A0               	movwf	??_Flash_Memory_Read
 11748  1F4B  0820               	movf	??_Flash_Memory_Read,w
 11749  1F4C  00A1               	movwf	Flash_Memory_Read@i
 11750                           
 11751                           ;MCU_B1.c: 824: ret = PMDATL;
 11752  1F4D  0023               	movlb	3	; select bank3
 11753  1F4E  0813               	movf	19,w	;volatile
 11754  1F4F  0020               	movlb	0	; select bank0
 11755  1F50  00A0               	movwf	??_Flash_Memory_Read
 11756  1F51  0820               	movf	??_Flash_Memory_Read,w
 11757  1F52  00A3               	movwf	Flash_Memory_Read@ret
 11758                           
 11759                           ;MCU_B1.c: 825: return ret;
 11760  1F53  0823               	movf	Flash_Memory_Read@ret,w
 11761  1F54  0008               	return
 11762  1F55                     __end_of_Flash_Memory_Read:	
 11763                           
 11764                           	psect	text70
 11765  1D5F                     __ptext70:	
 11766 ;; *************** function _DimmerLights_Main *****************
 11767 ;; Defined at:
 11768 ;;		line 407 in file "../src/Dimmer_B1.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;		None
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;		None
 11773 ;; Return value:  Size  Location     Type
 11774 ;;		None               void
 11775 ;; Registers used:
 11776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;Total ram usage:        0 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:   11
 11789 ;; This function calls:
 11790 ;;		_DimmerLights_Close
 11791 ;;		_setDimmerLights_Main
 11792 ;; This function is called by:
 11793 ;;		_main
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           
 11798                           ;psect for function _DimmerLights_Main
 11799  1D5F                     _DimmerLights_Main:	
 11800                           
 11801                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11802                           
 11803                           ;incstack = 0
 11804                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11805  1D5F  3001               	movlw	1
 11806  1D60  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11807                           
 11808                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 11809  1D63  3002               	movlw	2
 11810  1D64  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11811                           
 11812                           ;Dimmer_B1.c: 418: setDimmerLights_Main(3);
 11813  1D67  3003               	movlw	3
 11814  1D68  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11815                           
 11816                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11817  1D6B  319E  2667         	fcall	_DimmerLights_Close
 11818  1D6D  0008               	return
 11819  1D6E                     __end_of_DimmerLights_Main:	
 11820                           
 11821                           	psect	text71
 11822  0EE2                     __ptext71:	
 11823 ;; *************** function _setDimmerLights_Main *****************
 11824 ;; Defined at:
 11825 ;;		line 425 in file "../src/Dimmer_B1.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;  lights          1    wreg     unsigned char 
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;  lights          1   74[BANK0 ] unsigned char 
 11830 ;;  clear           1   73[BANK0 ] unsigned char 
 11831 ;; Return value:  Size  Location     Type
 11832 ;;		None               void
 11833 ;; Registers used:
 11834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11835 ;; Tracked objects:
 11836 ;;		On entry : 0/0
 11837 ;;		On exit  : 0/0
 11838 ;;		Unchanged: 0/0
 11839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;Total ram usage:        6 bytes
 11845 ;; Hardware stack levels used:    1
 11846 ;; Hardware stack levels required when called:   10
 11847 ;; This function calls:
 11848 ;;		_DimmerLightsPointSelect
 11849 ;;		_setBuz
 11850 ;;		_setDimmerLights
 11851 ;;		_setDimmerLights_Adj
 11852 ;; This function is called by:
 11853 ;;		_DimmerLights_Main
 11854 ;; This function uses a non-reentrant model
 11855 ;;
 11856                           
 11857                           
 11858                           ;psect for function _setDimmerLights_Main
 11859  0EE2                     _setDimmerLights_Main:	
 11860                           
 11861                           ;incstack = 0
 11862                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11863                           ;setDimmerLights_Main@lights stored from wreg
 11864  0EE2  0020               	movlb	0	; select bank0
 11865  0EE3  00EA               	movwf	setDimmerLights_Main@lights
 11866                           
 11867                           ;Dimmer_B1.c: 426: char clear = 1;
 11868  0EE4  01E9               	clrf	setDimmerLights_Main@clear
 11869  0EE5  0AE9               	incf	setDimmerLights_Main@clear,f
 11870                           
 11871                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11872  0EE6  086A               	movf	setDimmerLights_Main@lights,w
 11873  0EE7  319F  2755  318E   	fcall	_DimmerLightsPointSelect
 11874                           
 11875                           ;Dimmer_B1.c: 430: if (lights == 1) {
 11876  0EEA  0020               	movlb	0	; select bank0
 11877  0EEB  086A               	movf	setDimmerLights_Main@lights,w
 11878  0EEC  3A01               	xorlw	1
 11879  0EED  1D03               	skipz
 11880  0EEE  2EFA               	goto	l8408
 11881                           
 11882                           ;Dimmer_B1.c: 431: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11883  0EEF  01E6               	clrf	_setDimmerLights_Main$2148
 11884  0EF0  0023               	movlb	3	; select bank3
 11885  0EF1  194E               	btfsc	(_DimmerLights2^(0+384)+9),2
 11886  0EF2  1D5D               	btfss	(_DimmerLights3^(0+384)+9),2
 11887  0EF3  2EF7               	goto	l8406
 11888  0EF4  0020               	movlb	0	; select bank0
 11889  0EF5  01E6               	clrf	_setDimmerLights_Main$2148
 11890  0EF6  0AE6               	incf	_setDimmerLights_Main$2148,f
 11891  0EF7                     l8406:	
 11892  0EF7  0020               	movlb	0	; select bank0
 11893  0EF8  0866               	movf	_setDimmerLights_Main$2148,w
 11894  0EF9  2F1B               	goto	L10
 11895  0EFA                     l8408:	
 11896                           ;Dimmer_B1.c: 432: } else if (lights == 2) {
 11897                           
 11898  0EFA  086A               	movf	setDimmerLights_Main@lights,w
 11899  0EFB  3A02               	xorlw	2
 11900  0EFC  1D03               	skipz
 11901  0EFD  2F0B               	goto	l8420
 11902                           
 11903                           ;Dimmer_B1.c: 433: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11904  0EFE  01E7               	clrf	_setDimmerLights_Main$2149
 11905  0EFF  0022               	movlb	2	; select bank2
 11906  0F00  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 11907  0F01  2F08               	goto	l8418
 11908  0F02  0023               	movlb	3	; select bank3
 11909  0F03  1D5D               	btfss	(_DimmerLights3^(0+384)+9),2
 11910  0F04  2F08               	goto	l8418
 11911  0F05  0020               	movlb	0	; select bank0
 11912  0F06  01E7               	clrf	_setDimmerLights_Main$2149
 11913  0F07  0AE7               	incf	_setDimmerLights_Main$2149,f
 11914  0F08                     l8418:	
 11915  0F08  0020               	movlb	0	; select bank0
 11916  0F09  0867               	movf	_setDimmerLights_Main$2149,w
 11917  0F0A  2F1B               	goto	L10
 11918  0F0B                     l8420:	
 11919                           ;Dimmer_B1.c: 434: } else if (lights == 3) {
 11920                           
 11921  0F0B  086A               	movf	setDimmerLights_Main@lights,w
 11922  0F0C  3A03               	xorlw	3
 11923  0F0D  1D03               	skipz
 11924  0F0E  2F1E               	goto	l8432
 11925                           
 11926                           ;Dimmer_B1.c: 435: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 11927  0F0F  01E8               	clrf	_setDimmerLights_Main$2150
 11928  0F10  0022               	movlb	2	; select bank2
 11929  0F11  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 11930  0F12  2F19               	goto	l8430
 11931  0F13  0023               	movlb	3	; select bank3
 11932  0F14  1D4E               	btfss	(_DimmerLights2^(0+384)+9),2
 11933  0F15  2F19               	goto	l8430
 11934  0F16  0020               	movlb	0	; select bank0
 11935  0F17  01E8               	clrf	_setDimmerLights_Main$2150
 11936  0F18  0AE8               	incf	_setDimmerLights_Main$2150,f
 11937  0F19                     l8430:	
 11938  0F19  0020               	movlb	0	; select bank0
 11939  0F1A  0868               	movf	_setDimmerLights_Main$2150,w
 11940  0F1B                     L10:	
 11941  0F1B  00E5               	movwf	??_setDimmerLights_Main
 11942  0F1C  0865               	movf	??_setDimmerLights_Main,w
 11943  0F1D  00E9               	movwf	setDimmerLights_Main@clear
 11944  0F1E                     l8432:	
 11945                           
 11946                           ;Dimmer_B1.c: 436: }
 11947                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11948  0F1E  087B               	movf	_DimmerLights,w
 11949  0F1F  3E08               	addlw	8
 11950  0F20  0086               	movwf	6
 11951  0F21  3001               	movlw	1	; select bank2/3
 11952  0F22  0087               	movwf	7
 11953  0F23  1D01               	btfss	1,2
 11954  0F24  2F42               	goto	l8442
 11955                           
 11956                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11957  0F25  0869               	movf	setDimmerLights_Main@clear,w
 11958  0F26  3A01               	xorlw	1
 11959  0F27  1D03               	skipz
 11960  0F28  0008               	return
 11961                           
 11962                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 11963  0F29  087B               	movf	_DimmerLights,w
 11964  0F2A  3E08               	addlw	8
 11965  0F2B  0086               	movwf	6
 11966  0F2C  3001               	movlw	1	; select bank2/3
 11967  0F2D  0087               	movwf	7
 11968  0F2E  1101               	bcf	1,2
 11969                           
 11970                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 11971  0F2F  087B               	movf	_DimmerLights,w
 11972  0F30  3E08               	addlw	8
 11973  0F31  0086               	movwf	6
 11974  0F32  3001               	movlw	1	; select bank2/3
 11975  0F33  0087               	movwf	7
 11976  0F34  1C81               	btfss	1,1
 11977  0F35  2F3C               	goto	l8440
 11978                           
 11979                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 11980  0F36  01A3               	clrf	setDimmerLights@status
 11981  0F37  0AA3               	incf	setDimmerLights@status,f
 11982  0F38  086A               	movf	setDimmerLights_Main@lights,w
 11983  0F39  318D  2551         	fcall	_setDimmerLights
 11984                           
 11985                           ;Dimmer_B1.c: 452: } else {
 11986  0F3B  0008               	return
 11987  0F3C                     l8440:	
 11988                           
 11989                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 11990  0F3C  0020               	movlb	0	; select bank0
 11991  0F3D  01A3               	clrf	setDimmerLights@status
 11992  0F3E  086A               	movf	setDimmerLights_Main@lights,w
 11993  0F3F  318D  2551         	fcall	_setDimmerLights
 11994                           
 11995                           ;Dimmer_B1.c: 454: }
 11996                           ;Dimmer_B1.c: 458: }
 11997                           ;Dimmer_B1.c: 459: } else {
 11998  0F41  0008               	return
 11999  0F42                     l8442:	
 12000                           
 12001                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 12002  0F42  087B               	movf	_DimmerLights,w
 12003  0F43  3E08               	addlw	8
 12004  0F44  0086               	movwf	6
 12005  0F45  3001               	movlw	1	; select bank2/3
 12006  0F46  0087               	movwf	7
 12007  0F47  1E01               	btfss	1,4
 12008  0F48  0008               	return
 12009                           
 12010                           ;Dimmer_B1.c: 461: if (clear == 1) {
 12011  0F49  0020               	movlb	0	; select bank0
 12012  0F4A  0869               	movf	setDimmerLights_Main@clear,w
 12013  0F4B  3A01               	xorlw	1
 12014  0F4C  1D03               	skipz
 12015  0F4D  0008               	return
 12016                           
 12017                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 12018  0F4E  087B               	movf	_DimmerLights,w
 12019  0F4F  3E08               	addlw	8
 12020  0F50  0086               	movwf	6
 12021  0F51  3001               	movlw	1	; select bank2/3
 12022  0F52  0087               	movwf	7
 12023  0F53  1201               	bcf	1,4
 12024                           
 12025                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 12026  0F54  087B               	movf	_DimmerLights,w
 12027  0F55  3E08               	addlw	8
 12028  0F56  0086               	movwf	6
 12029  0F57  3001               	movlw	1	; select bank2/3
 12030  0F58  0087               	movwf	7
 12031  0F59  1D81               	btfss	1,3
 12032  0F5A  2F6A               	goto	l8452
 12033                           
 12034                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 12035  0F5B  01E2               	clrf	setDimmerLights_Adj@status
 12036  0F5C  0AE2               	incf	setDimmerLights_Adj@status,f
 12037  0F5D  086A               	movf	setDimmerLights_Main@lights,w
 12038  0F5E  3194  2434  318E   	fcall	_setDimmerLights_Adj
 12039                           
 12040                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12041  0F61  3064               	movlw	100
 12042  0F62  0020               	movlb	0	; select bank0
 12043  0F63  00A9               	movwf	setBuz@time
 12044  0F64  3000               	movlw	0
 12045  0F65  00AA               	movwf	setBuz@time+1
 12046  0F66  3001               	movlw	1
 12047  0F67  3197  27A7         	fcall	_setBuz
 12048                           
 12049                           ;Dimmer_B1.c: 466: } else {
 12050  0F69  0008               	return
 12051  0F6A                     l8452:	
 12052                           
 12053                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12054  0F6A  0020               	movlb	0	; select bank0
 12055  0F6B  01E2               	clrf	setDimmerLights_Adj@status
 12056  0F6C  086A               	movf	setDimmerLights_Main@lights,w
 12057  0F6D  3194  2434         	fcall	_setDimmerLights_Adj
 12058  0F6F  0008               	return
 12059  0F70                     __end_of_setDimmerLights_Main:	
 12060                           
 12061                           	psect	text72
 12062  1434                     __ptext72:	
 12063 ;; *************** function _setDimmerLights_Adj *****************
 12064 ;; Defined at:
 12065 ;;		line 646 in file "../src/Dimmer_B1.c"
 12066 ;; Parameters:    Size  Location     Type
 12067 ;;  lights          1    wreg     unsigned char 
 12068 ;;  status          1   66[BANK0 ] unsigned char 
 12069 ;; Auto vars:     Size  Location     Type
 12070 ;;  lights          1   68[BANK0 ] unsigned char 
 12071 ;; Return value:  Size  Location     Type
 12072 ;;		None               void
 12073 ;; Registers used:
 12074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12075 ;; Tracked objects:
 12076 ;;		On entry : 0/0
 12077 ;;		On exit  : 0/0
 12078 ;;		Unchanged: 0/0
 12079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12080 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;Total ram usage:        3 bytes
 12085 ;; Hardware stack levels used:    1
 12086 ;; Hardware stack levels required when called:    9
 12087 ;; This function calls:
 12088 ;;		_DimmerLightsPointSelect
 12089 ;;		_setRF_DimmerLights
 12090 ;;		_setTxData
 12091 ;; This function is called by:
 12092 ;;		_setDimmerLights_Main
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           
 12097                           ;psect for function _setDimmerLights_Adj
 12098  1434                     _setDimmerLights_Adj:	
 12099                           
 12100                           ;incstack = 0
 12101                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12102                           ;setDimmerLights_Adj@lights stored from wreg
 12103  1434  0020               	movlb	0	; select bank0
 12104  1435  00E4               	movwf	setDimmerLights_Adj@lights
 12105                           
 12106                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12107  1436  0864               	movf	setDimmerLights_Adj@lights,w
 12108  1437  319F  2755  3194   	fcall	_DimmerLightsPointSelect
 12109                           
 12110                           ;Dimmer_B1.c: 648: if (status == 1) {
 12111  143A  0020               	movlb	0	; select bank0
 12112  143B  0862               	movf	setDimmerLights_Adj@status,w
 12113  143C  3A01               	xorlw	1
 12114  143D  1D03               	skipz
 12115  143E  2C4A               	goto	l6876
 12116                           
 12117                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12118  143F  087B               	movf	_DimmerLights,w
 12119  1440  0086               	movwf	6
 12120  1441  3001               	movlw	1	; select bank2/3
 12121  1442  0087               	movwf	7
 12122  1443  1581               	bsf	1,3
 12123                           
 12124                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12125  1444  087B               	movf	_DimmerLights,w
 12126  1445  0086               	movwf	6
 12127  1446  3001               	movlw	1	; select bank2/3
 12128  1447  0087               	movwf	7
 12129  1448  1481               	bsf	1,1
 12130                           
 12131                           ;Dimmer_B1.c: 651: } else {
 12132  1449  0008               	return
 12133  144A                     l6876:	
 12134                           
 12135                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12136  144A  087B               	movf	_DimmerLights,w
 12137  144B  0086               	movwf	6
 12138  144C  3001               	movlw	1	; select bank2/3
 12139  144D  0087               	movwf	7
 12140  144E  1D81               	btfss	1,3
 12141  144F  0008               	return
 12142                           
 12143                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12144  1450  087B               	movf	_DimmerLights,w
 12145  1451  0086               	movwf	6
 12146  1452  3001               	movlw	1	; select bank2/3
 12147  1453  0087               	movwf	7
 12148  1454  1081               	bcf	1,1
 12149                           
 12150                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12151  1455  087B               	movf	_DimmerLights,w
 12152  1456  0086               	movwf	6
 12153  1457  3001               	movlw	1	; select bank2/3
 12154  1458  0087               	movwf	7
 12155  1459  1181               	bcf	1,3
 12156                           
 12157                           ;Dimmer_B1.c: 656: ;;
 12158                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12159  145A  087B               	movf	_DimmerLights,w
 12160  145B  3E04               	addlw	4
 12161  145C  0086               	movwf	6
 12162  145D  3001               	movlw	1	; select bank2/3
 12163  145E  0087               	movwf	7
 12164  145F  0801               	movf	1,w
 12165  1460  00E3               	movwf	??_setDimmerLights_Adj
 12166  1461  087B               	movf	_DimmerLights,w
 12167  1462  3E05               	addlw	5
 12168  1463  0086               	movwf	6
 12169  1464  3001               	movlw	1	; select bank2/3
 12170  1465  0087               	movwf	7
 12171  1466  0863               	movf	??_setDimmerLights_Adj,w
 12172  1467  0081               	movwf	1
 12173                           
 12174                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12175  1468  01DD               	clrf	setRF_DimmerLights@on
 12176  1469  0ADD               	incf	setRF_DimmerLights@on,f
 12177  146A  0864               	movf	setDimmerLights_Adj@lights,w
 12178  146B  318A  2295  3194   	fcall	_setRF_DimmerLights
 12179                           
 12180                           ;Dimmer_B1.c: 666: setTxData();
 12181  146E  3185  252E         	fcall	_setTxData
 12182  1470  0008               	return
 12183  1471                     __end_of_setDimmerLights_Adj:	
 12184                           
 12185                           	psect	text73
 12186  0D51                     __ptext73:	
 12187 ;; *************** function _setDimmerLights *****************
 12188 ;; Defined at:
 12189 ;;		line 593 in file "../src/Dimmer_B1.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;  lights          1    wreg     unsigned char 
 12192 ;;  status          1    3[BANK0 ] unsigned char 
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;  lights          1    5[BANK0 ] unsigned char 
 12195 ;; Return value:  Size  Location     Type
 12196 ;;		None               void
 12197 ;; Registers used:
 12198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;Total ram usage:        3 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; Hardware stack levels required when called:    7
 12211 ;; This function calls:
 12212 ;;		_DimmerLightsPointSelect
 12213 ;;		_setLED
 12214 ;;		_setMemory_GO
 12215 ;; This function is called by:
 12216 ;;		_setDimmerLights_Main
 12217 ;;		_setControl_Lights_Table
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           
 12222                           ;psect for function _setDimmerLights
 12223  0D51                     _setDimmerLights:	
 12224                           
 12225                           ;incstack = 0
 12226                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12227                           ;setDimmerLights@lights stored from wreg
 12228  0D51  0020               	movlb	0	; select bank0
 12229  0D52  00A5               	movwf	setDimmerLights@lights
 12230                           
 12231                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12232  0D53  0825               	movf	setDimmerLights@lights,w
 12233  0D54  319F  2755  318D   	fcall	_DimmerLightsPointSelect
 12234                           
 12235                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12236  0D57  0020               	movlb	0	; select bank0
 12237  0D58  0825               	movf	setDimmerLights@lights,w
 12238  0D59  00A4               	movwf	??_setDimmerLights
 12239  0D5A  0021               	movlb	1	; select bank1
 12240  0D5B  0A48               	incf	_Dimmer^(0+128),w
 12241  0D5C  0086               	movwf	6
 12242  0D5D  0187               	clrf	7
 12243  0D5E  0020               	movlb	0	; select bank0
 12244  0D5F  0824               	movf	??_setDimmerLights,w
 12245  0D60  0081               	movwf	1
 12246                           
 12247                           ;Dimmer_B1.c: 596: if (status == 1) {
 12248  0D61  0823               	movf	setDimmerLights@status,w
 12249  0D62  3A01               	xorlw	1
 12250  0D63  1D03               	skipz
 12251  0D64  2DA5               	goto	l8254
 12252                           
 12253                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12254  0D65  087B               	movf	_DimmerLights,w
 12255  0D66  0086               	movwf	6
 12256  0D67  3001               	movlw	1	; select bank2/3
 12257  0D68  0087               	movwf	7
 12258  0D69  1681               	bsf	1,5
 12259                           
 12260                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12261  0D6A  01A1               	clrf	setLED@command
 12262  0D6B  0825               	movf	setDimmerLights@lights,w
 12263  0D6C  318B  2372  318D   	fcall	_setLED
 12264                           
 12265                           ;Dimmer_B1.c: 600: ;;
 12266                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12267  0D6F  087B               	movf	_DimmerLights,w
 12268  0D70  0086               	movwf	6
 12269  0D71  3001               	movlw	1	; select bank2/3
 12270  0D72  0087               	movwf	7
 12271  0D73  1481               	bsf	1,1
 12272                           
 12273                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12274  0D74  3007               	movlw	7
 12275  0D75  0020               	movlb	0	; select bank0
 12276  0D76  00A4               	movwf	??_setDimmerLights
 12277  0D77  087B               	movf	_DimmerLights,w
 12278  0D78  3E02               	addlw	2
 12279  0D79  0086               	movwf	6
 12280  0D7A  3001               	movlw	1	; select bank2/3
 12281  0D7B  0087               	movwf	7
 12282  0D7C  0824               	movf	??_setDimmerLights,w
 12283  0D7D  0081               	movwf	1
 12284                           
 12285                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12286  0D7E  087B               	movf	_DimmerLights,w
 12287  0D7F  0086               	movwf	6
 12288  0D80  3001               	movlw	1	; select bank2/3
 12289  0D81  0087               	movwf	7
 12290  0D82  1B01               	btfsc	1,6
 12291  0D83  0008               	return
 12292                           
 12293                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12294  0D84  087B               	movf	_DimmerLights,w
 12295  0D85  0086               	movwf	6
 12296  0D86  3001               	movlw	1	; select bank2/3
 12297  0D87  0087               	movwf	7
 12298  0D88  1701               	bsf	1,6
 12299                           
 12300                           ;Dimmer_B1.c: 607: ;;
 12301                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12302  0D89  3000               	movlw	0
 12303  0D8A  319E  2690         	fcall	_setMemory_GO
 12304                           
 12305                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12306  0D8C  087B               	movf	_DimmerLights,w
 12307  0D8D  3E05               	addlw	5
 12308  0D8E  0086               	movwf	6
 12309  0D8F  3001               	movlw	1	; select bank2/3
 12310  0D90  0087               	movwf	7
 12311  0D91  0801               	movf	1,w
 12312  0D92  0020               	movlb	0	; select bank0
 12313  0D93  00A4               	movwf	??_setDimmerLights
 12314  0D94  087B               	movf	_DimmerLights,w
 12315  0D95  3E04               	addlw	4
 12316  0D96  0086               	movwf	6
 12317  0D97  3001               	movlw	1	; select bank2/3
 12318  0D98  0087               	movwf	7
 12319  0D99  0824               	movf	??_setDimmerLights,w
 12320  0D9A  0081               	movwf	1
 12321                           
 12322                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-95)*0.8));
 12323  0D9B  3004               	movlw	4
 12324  0D9C  00A4               	movwf	??_setDimmerLights
 12325  0D9D  087B               	movf	_DimmerLights,w
 12326  0D9E  3E04               	addlw	4
 12327  0D9F  0086               	movwf	6
 12328  0DA0  3001               	movlw	1	; select bank2/3
 12329  0DA1  0087               	movwf	7
 12330  0DA2  0824               	movf	??_setDimmerLights,w
 12331  0DA3  0081               	movwf	1
 12332                           
 12333                           ;Dimmer_B1.c: 617: }
 12334                           ;Dimmer_B1.c: 618: } else {
 12335  0DA4  0008               	return
 12336  0DA5                     l8254:	
 12337                           
 12338                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12339  0DA5  087B               	movf	_DimmerLights,w
 12340  0DA6  0086               	movwf	6
 12341  0DA7  3001               	movlw	1	; select bank2/3
 12342  0DA8  0087               	movwf	7
 12343  0DA9  1281               	bcf	1,5
 12344                           
 12345                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12346  0DAA  087B               	movf	_DimmerLights,w
 12347  0DAB  3E06               	addlw	6
 12348  0DAC  0086               	movwf	6
 12349  0DAD  3001               	movlw	1	; select bank2/3
 12350  0DAE  0087               	movwf	7
 12351  0DAF  0801               	movf	1,w
 12352  0DB0  00A4               	movwf	??_setDimmerLights
 12353  0DB1  087B               	movf	_DimmerLights,w
 12354  0DB2  3E04               	addlw	4
 12355  0DB3  0086               	movwf	6
 12356  0DB4  3001               	movlw	1	; select bank2/3
 12357  0DB5  0087               	movwf	7
 12358  0DB6  0824               	movf	??_setDimmerLights,w
 12359  0DB7  0081               	movwf	1
 12360                           
 12361                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12362  0DB8  087B               	movf	_DimmerLights,w
 12363  0DB9  0086               	movwf	6
 12364  0DBA  3001               	movlw	1	; select bank2/3
 12365  0DBB  0087               	movwf	7
 12366  0DBC  1481               	bsf	1,1
 12367                           
 12368                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12369  0DBD  087B               	movf	_DimmerLights,w
 12370  0DBE  0086               	movwf	6
 12371  0DBF  3001               	movlw	1	; select bank2/3
 12372  0DC0  0087               	movwf	7
 12373  0DC1  1181               	bcf	1,3
 12374                           
 12375                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12376  0DC2  087B               	movf	_DimmerLights,w
 12377  0DC3  0086               	movwf	6
 12378  0DC4  3001               	movlw	1	; select bank2/3
 12379  0DC5  0087               	movwf	7
 12380  0DC6  1201               	bcf	1,4
 12381                           
 12382                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12383  0DC7  3007               	movlw	7
 12384  0DC8  00A4               	movwf	??_setDimmerLights
 12385  0DC9  087B               	movf	_DimmerLights,w
 12386  0DCA  3E02               	addlw	2
 12387  0DCB  0086               	movwf	6
 12388  0DCC  3001               	movlw	1	; select bank2/3
 12389  0DCD  0087               	movwf	7
 12390  0DCE  0824               	movf	??_setDimmerLights,w
 12391  0DCF  0081               	movwf	1
 12392  0DD0  0008               	return
 12393  0DD1                     __end_of_setDimmerLights:	
 12394                           
 12395                           	psect	text74
 12396  0B72                     __ptext74:	
 12397 ;; *************** function _setLED *****************
 12398 ;; Defined at:
 12399 ;;		line 70 in file "../src/LED_B1.c"
 12400 ;; Parameters:    Size  Location     Type
 12401 ;;  led             1    wreg     unsigned char 
 12402 ;;  command         1    1[BANK0 ] unsigned char 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  led             1    2[BANK0 ] unsigned char 
 12405 ;; Return value:  Size  Location     Type
 12406 ;;		None               void
 12407 ;; Registers used:
 12408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12414 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;Total ram usage:        2 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; Hardware stack levels required when called:    6
 12421 ;; This function calls:
 12422 ;;		_LedPointSelect
 12423 ;; This function is called by:
 12424 ;;		_setDimmerLights_ERROR
 12425 ;;		_setDimmerLights
 12426 ;;		_setLED_Initialization
 12427 ;;		_setOverTemp_Exceptions
 12428 ;;		_setSw_Initialization
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           
 12433                           ;psect for function _setLED
 12434  0B72                     _setLED:	
 12435                           
 12436                           ;incstack = 0
 12437                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12438                           ;setLED@led stored from wreg
 12439  0B72  0020               	movlb	0	; select bank0
 12440  0B73  00A2               	movwf	setLED@led
 12441                           
 12442                           ;LED_B1.c: 71: LedPointSelect(led);
 12443  0B74  0822               	movf	setLED@led,w
 12444  0B75  3193  2300  318B   	fcall	_LedPointSelect
 12445                           
 12446                           ;LED_B1.c: 72: if (command == 0) {
 12447  0B78  0020               	movlb	0	; select bank0
 12448  0B79  08A1               	movf	setLED@command,f
 12449  0B7A  1D03               	skipz
 12450  0B7B  2B94               	goto	l8188
 12451                           
 12452                           ;LED_B1.c: 74: if (led == 1) {
 12453  0B7C  0822               	movf	setLED@led,w
 12454  0B7D  3A01               	xorlw	1
 12455  0B7E  1D03               	skipz
 12456  0B7F  2B82               	goto	l8176
 12457                           
 12458                           ;LED_B1.c: 78: RC7 = 1;
 12459  0B80  178E               	bsf	14,7	;volatile
 12460                           
 12461                           ;LED_B1.c: 80: }
 12462  0B81  0008               	return
 12463  0B82                     l8176:	
 12464                           
 12465                           ;LED_B1.c: 83: else if (led == 2) {
 12466  0B82  0822               	movf	setLED@led,w
 12467  0B83  3A02               	xorlw	2
 12468  0B84  1D03               	skipz
 12469  0B85  2B88               	goto	l8180
 12470                           
 12471                           ;LED_B1.c: 87: RA3 = 1;
 12472  0B86  158C               	bsf	12,3	;volatile
 12473                           
 12474                           ;LED_B1.c: 89: }
 12475  0B87  0008               	return
 12476  0B88                     l8180:	
 12477                           
 12478                           ;LED_B1.c: 92: else if (led == 3) {
 12479  0B88  0822               	movf	setLED@led,w
 12480  0B89  3A03               	xorlw	3
 12481  0B8A  1D03               	skipz
 12482  0B8B  2B8E               	goto	l8184
 12483                           
 12484                           ;LED_B1.c: 96: RC6 = 1;
 12485  0B8C  170E               	bsf	14,6	;volatile
 12486                           
 12487                           ;LED_B1.c: 98: }
 12488  0B8D  0008               	return
 12489  0B8E                     l8184:	
 12490                           
 12491                           ;LED_B1.c: 101: else if (led == 99) {
 12492  0B8E  0822               	movf	setLED@led,w
 12493  0B8F  3A63               	xorlw	99
 12494  0B90  1D03               	skipz
 12495  0B91  0008               	return
 12496                           
 12497                           ;LED_B1.c: 105: RB5 = 1;
 12498  0B92  168D               	bsf	13,5	;volatile
 12499                           
 12500                           ;LED_B1.c: 107: }
 12501                           ;LED_B1.c: 109: } else if (command == 1) {
 12502  0B93  0008               	return
 12503  0B94                     l8188:	
 12504  0B94  0821               	movf	setLED@command,w
 12505  0B95  3A01               	xorlw	1
 12506  0B96  1D03               	skipz
 12507  0B97  2BB0               	goto	l8206
 12508                           
 12509                           ;LED_B1.c: 111: if (led == 1) {
 12510  0B98  0822               	movf	setLED@led,w
 12511  0B99  3A01               	xorlw	1
 12512  0B9A  1D03               	skipz
 12513  0B9B  2B9E               	goto	l8194
 12514                           
 12515                           ;LED_B1.c: 115: RC7 = 0;
 12516  0B9C  138E               	bcf	14,7	;volatile
 12517                           
 12518                           ;LED_B1.c: 117: }
 12519  0B9D  0008               	return
 12520  0B9E                     l8194:	
 12521                           
 12522                           ;LED_B1.c: 120: else if (led == 2) {
 12523  0B9E  0822               	movf	setLED@led,w
 12524  0B9F  3A02               	xorlw	2
 12525  0BA0  1D03               	skipz
 12526  0BA1  2BA4               	goto	l8198
 12527                           
 12528                           ;LED_B1.c: 124: RA3 = 0;
 12529  0BA2  118C               	bcf	12,3	;volatile
 12530                           
 12531                           ;LED_B1.c: 126: }
 12532  0BA3  0008               	return
 12533  0BA4                     l8198:	
 12534                           
 12535                           ;LED_B1.c: 129: else if (led == 3) {
 12536  0BA4  0822               	movf	setLED@led,w
 12537  0BA5  3A03               	xorlw	3
 12538  0BA6  1D03               	skipz
 12539  0BA7  2BAA               	goto	l8202
 12540                           
 12541                           ;LED_B1.c: 133: RC6 = 0;
 12542  0BA8  130E               	bcf	14,6	;volatile
 12543                           
 12544                           ;LED_B1.c: 135: }
 12545  0BA9  0008               	return
 12546  0BAA                     l8202:	
 12547                           
 12548                           ;LED_B1.c: 138: else if (led == 99) {
 12549  0BAA  0822               	movf	setLED@led,w
 12550  0BAB  3A63               	xorlw	99
 12551  0BAC  1D03               	skipz
 12552  0BAD  0008               	return
 12553                           
 12554                           ;LED_B1.c: 142: RB5 = 0;
 12555  0BAE  128D               	bcf	13,5	;volatile
 12556                           
 12557                           ;LED_B1.c: 144: }
 12558                           ;LED_B1.c: 146: } else if (command == 10) {
 12559  0BAF  0008               	return
 12560  0BB0                     l8206:	
 12561  0BB0  0821               	movf	setLED@command,w
 12562  0BB1  3A0A               	xorlw	10
 12563  0BB2  1D03               	skipz
 12564  0BB3  2BDB               	goto	l8226
 12565                           
 12566                           ;LED_B1.c: 147: LED->GO = 0;
 12567  0BB4  0021               	movlb	1	; select bank1
 12568  0BB5  0843               	movf	_LED^(0+128),w
 12569  0BB6  0086               	movwf	6
 12570  0BB7  0844               	movf	(_LED+1)^(0+128),w
 12571  0BB8  0087               	movwf	7
 12572  0BB9  1081               	bcf	1,1
 12573                           
 12574                           ;LED_B1.c: 148: LED->Time = 0;
 12575  0BBA  0843               	movf	_LED^(0+128),w
 12576  0BBB  0086               	movwf	6
 12577  0BBC  0844               	movf	(_LED+1)^(0+128),w
 12578  0BBD  0087               	movwf	7
 12579  0BBE  3141               	addfsr 1,1
 12580  0BBF  3000               	movlw	0
 12581  0BC0  3FC0               	movwi [0]fsr1
 12582  0BC1  3FC1               	movwi [1]fsr1
 12583                           
 12584                           ;LED_B1.c: 150: if (led == 1) {
 12585  0BC2  0020               	movlb	0	; select bank0
 12586  0BC3  0822               	movf	setLED@led,w
 12587  0BC4  3A01               	xorlw	1
 12588  0BC5  1D03               	skipz
 12589  0BC6  2BC9               	goto	l8214
 12590                           
 12591                           ;LED_B1.c: 154: RC7 = 1;
 12592  0BC7  178E               	bsf	14,7	;volatile
 12593                           
 12594                           ;LED_B1.c: 156: }
 12595  0BC8  0008               	return
 12596  0BC9                     l8214:	
 12597                           
 12598                           ;LED_B1.c: 159: else if (led == 2) {
 12599  0BC9  0822               	movf	setLED@led,w
 12600  0BCA  3A02               	xorlw	2
 12601  0BCB  1D03               	skipz
 12602  0BCC  2BCF               	goto	l8218
 12603                           
 12604                           ;LED_B1.c: 163: RA3 = 1;
 12605  0BCD  158C               	bsf	12,3	;volatile
 12606                           
 12607                           ;LED_B1.c: 165: }
 12608  0BCE  0008               	return
 12609  0BCF                     l8218:	
 12610                           
 12611                           ;LED_B1.c: 168: else if (led == 3) {
 12612  0BCF  0822               	movf	setLED@led,w
 12613  0BD0  3A03               	xorlw	3
 12614  0BD1  1D03               	skipz
 12615  0BD2  2BD5               	goto	l8222
 12616                           
 12617                           ;LED_B1.c: 172: RC6 = 1;
 12618  0BD3  170E               	bsf	14,6	;volatile
 12619                           
 12620                           ;LED_B1.c: 174: }
 12621  0BD4  0008               	return
 12622  0BD5                     l8222:	
 12623                           
 12624                           ;LED_B1.c: 177: else if (led == 99) {
 12625  0BD5  0822               	movf	setLED@led,w
 12626  0BD6  3A63               	xorlw	99
 12627  0BD7  1D03               	skipz
 12628  0BD8  0008               	return
 12629                           
 12630                           ;LED_B1.c: 181: RB5 = 1;
 12631  0BD9  168D               	bsf	13,5	;volatile
 12632                           
 12633                           ;LED_B1.c: 183: }
 12634                           ;LED_B1.c: 185: } else if (command == 11) {
 12635  0BDA  0008               	return
 12636  0BDB                     l8226:	
 12637  0BDB  0821               	movf	setLED@command,w
 12638  0BDC  3A0B               	xorlw	11
 12639  0BDD  1D03               	skipz
 12640  0BDE  0008               	return
 12641                           
 12642                           ;LED_B1.c: 186: LED->GO = 1;
 12643  0BDF  0021               	movlb	1	; select bank1
 12644  0BE0  0843               	movf	_LED^(0+128),w
 12645  0BE1  0086               	movwf	6
 12646  0BE2  0844               	movf	(_LED+1)^(0+128),w
 12647  0BE3  0087               	movwf	7
 12648  0BE4  1481               	bsf	1,1
 12649  0BE5  0008               	return
 12650  0BE6                     __end_of_setLED:	
 12651                           
 12652                           	psect	text75
 12653  1300                     __ptext75:	
 12654 ;; *************** function _LedPointSelect *****************
 12655 ;; Defined at:
 12656 ;;		line 7 in file "../src/LED_B1.c"
 12657 ;; Parameters:    Size  Location     Type
 12658 ;;  led             1    wreg     unsigned char 
 12659 ;; Auto vars:     Size  Location     Type
 12660 ;;  led             1    0[BANK0 ] unsigned char 
 12661 ;; Return value:  Size  Location     Type
 12662 ;;		None               void
 12663 ;; Registers used:
 12664 ;;		wreg, status,2, status,0
 12665 ;; Tracked objects:
 12666 ;;		On entry : 0/0
 12667 ;;		On exit  : 0/0
 12668 ;;		Unchanged: 0/0
 12669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;Total ram usage:        1 bytes
 12675 ;; Hardware stack levels used:    1
 12676 ;; Hardware stack levels required when called:    5
 12677 ;; This function calls:
 12678 ;;		Nothing
 12679 ;; This function is called by:
 12680 ;;		_setLED_Initialization
 12681 ;;		_setLED
 12682 ;;		_setLED_Main
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           
 12687                           ;psect for function _LedPointSelect
 12688  1300                     _LedPointSelect:	
 12689                           
 12690                           ;incstack = 0
 12691                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 12692                           ;LedPointSelect@led stored from wreg
 12693  1300  0020               	movlb	0	; select bank0
 12694  1301  00A0               	movwf	LedPointSelect@led
 12695                           
 12696                           ;LED_B1.c: 9: if (led == 1) {
 12697  1302  0820               	movf	LedPointSelect@led,w
 12698  1303  3A01               	xorlw	1
 12699  1304  1D03               	skipz
 12700  1305  2B0C               	goto	l8156
 12701                           
 12702                           ;LED_B1.c: 10: LED = &VarLED1;
 12703  1306  3064               	movlw	low _VarLED1
 12704  1307  0021               	movlb	1	; select bank1
 12705  1308  00C3               	movwf	_LED^(0+128)
 12706  1309  3001               	movlw	high _VarLED1
 12707  130A  00C4               	movwf	(_LED+1)^(0+128)
 12708                           
 12709                           ;LED_B1.c: 11: }
 12710  130B  0008               	return
 12711  130C                     l8156:	
 12712                           
 12713                           ;LED_B1.c: 14: else if (led == 2) {
 12714  130C  0020               	movlb	0	; select bank0
 12715  130D  0820               	movf	LedPointSelect@led,w
 12716  130E  3A02               	xorlw	2
 12717  130F  1D03               	skipz
 12718  1310  2B17               	goto	l8160
 12719                           
 12720                           ;LED_B1.c: 15: LED = &VarLED2;
 12721  1311  3068               	movlw	low _VarLED2
 12722  1312  0021               	movlb	1	; select bank1
 12723  1313  00C3               	movwf	_LED^(0+128)
 12724  1314  3001               	movlw	high _VarLED2
 12725  1315  00C4               	movwf	(_LED+1)^(0+128)
 12726                           
 12727                           ;LED_B1.c: 16: }
 12728  1316  0008               	return
 12729  1317                     l8160:	
 12730                           
 12731                           ;LED_B1.c: 19: else if (led == 3) {
 12732  1317  0020               	movlb	0	; select bank0
 12733  1318  0820               	movf	LedPointSelect@led,w
 12734  1319  3A03               	xorlw	3
 12735  131A  1D03               	skipz
 12736  131B  2B22               	goto	l8164
 12737                           
 12738                           ;LED_B1.c: 20: LED = &VarLED3;
 12739  131C  306C               	movlw	low _VarLED3
 12740  131D  0021               	movlb	1	; select bank1
 12741  131E  00C3               	movwf	_LED^(0+128)
 12742  131F  3001               	movlw	high _VarLED3
 12743  1320  00C4               	movwf	(_LED+1)^(0+128)
 12744                           
 12745                           ;LED_B1.c: 21: }
 12746  1321  0008               	return
 12747  1322                     l8164:	
 12748                           
 12749                           ;LED_B1.c: 24: else if (led == 99) {
 12750  1322  0020               	movlb	0	; select bank0
 12751  1323  0820               	movf	LedPointSelect@led,w
 12752  1324  3A63               	xorlw	99
 12753  1325  1D03               	skipz
 12754  1326  0008               	return
 12755                           
 12756                           ;LED_B1.c: 25: LED = &VarErrLED;
 12757  1327  30E3               	movlw	low _VarErrLED
 12758  1328  0021               	movlb	1	; select bank1
 12759  1329  00C3               	movwf	_LED^(0+128)
 12760  132A  3000               	movlw	high _VarErrLED
 12761  132B  00C4               	movwf	(_LED+1)^(0+128)
 12762  132C  0008               	return
 12763  132D                     __end_of_LedPointSelect:	
 12764                           
 12765                           	psect	text76
 12766  1E67                     __ptext76:	
 12767 ;; *************** function _DimmerLights_Close *****************
 12768 ;; Defined at:
 12769 ;;		line 396 in file "../src/Dimmer_B1.c"
 12770 ;; Parameters:    Size  Location     Type
 12771 ;;		None
 12772 ;; Auto vars:     Size  Location     Type
 12773 ;;		None
 12774 ;; Return value:  Size  Location     Type
 12775 ;;		None               void
 12776 ;; Registers used:
 12777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12778 ;; Tracked objects:
 12779 ;;		On entry : 0/0
 12780 ;;		On exit  : 0/0
 12781 ;;		Unchanged: 0/0
 12782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;Total ram usage:        0 bytes
 12788 ;; Hardware stack levels used:    1
 12789 ;; Hardware stack levels required when called:    6
 12790 ;; This function calls:
 12791 ;;		_getDimmerLights_StatusFlag
 12792 ;;		_setMemory_GO
 12793 ;; This function is called by:
 12794 ;;		_DimmerLights_Main
 12795 ;; This function uses a non-reentrant model
 12796 ;;
 12797                           
 12798                           
 12799                           ;psect for function _DimmerLights_Close
 12800  1E67                     _DimmerLights_Close:	
 12801                           
 12802                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12803                           
 12804                           ;incstack = 0
 12805                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12806  1E67  0021               	movlb	1	; select bank1
 12807  1E68  0848               	movf	_Dimmer^(0+128),w
 12808  1E69  0086               	movwf	6
 12809  1E6A  0187               	clrf	7
 12810  1E6B  1C01               	btfss	1,0
 12811  1E6C  0008               	return
 12812                           
 12813                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12814  1E6D  0848               	movf	_Dimmer^(0+128),w
 12815  1E6E  0086               	movwf	6
 12816  1E6F  0187               	clrf	7
 12817  1E70  1001               	bcf	1,0
 12818                           
 12819                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12820  1E71  319E  2653  319E   	fcall	_getDimmerLights_StatusFlag
 12821  1E74  3800               	iorlw	0
 12822  1E75  1D03               	skipz
 12823  1E76  0008               	return
 12824                           
 12825                           ;Dimmer_B1.c: 400: ;;
 12826                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12827  1E77  3001               	movlw	1
 12828  1E78  319E  2690         	fcall	_setMemory_GO
 12829  1E7A  0008               	return
 12830  1E7B                     __end_of_DimmerLights_Close:	
 12831                           
 12832                           	psect	text77
 12833  1E90                     __ptext77:	
 12834 ;; *************** function _setMemory_GO *****************
 12835 ;; Defined at:
 12836 ;;		line 885 in file "../src/MCU_B1.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;  command         1    wreg     unsigned char 
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;  command         1    2[BANK0 ] unsigned char 
 12841 ;; Return value:  Size  Location     Type
 12842 ;;		None               void
 12843 ;; Registers used:
 12844 ;;		wreg, status,2, status,0
 12845 ;; Tracked objects:
 12846 ;;		On entry : 0/0
 12847 ;;		On exit  : 0/0
 12848 ;;		Unchanged: 0/0
 12849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;Total ram usage:        3 bytes
 12855 ;; Hardware stack levels used:    1
 12856 ;; Hardware stack levels required when called:    5
 12857 ;; This function calls:
 12858 ;;		Nothing
 12859 ;; This function is called by:
 12860 ;;		_DimmerLights_Close
 12861 ;;		_setDimmerLights
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           
 12866                           ;psect for function _setMemory_GO
 12867  1E90                     _setMemory_GO:	
 12868                           
 12869                           ;incstack = 0
 12870                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 12871                           ;setMemory_GO@command stored from wreg
 12872  1E90  0020               	movlb	0	; select bank0
 12873  1E91  00A2               	movwf	setMemory_GO@command
 12874                           
 12875                           ;MCU_B1.c: 886: Memory.GO = command;
 12876  1E92  0822               	movf	setMemory_GO@command,w
 12877  1E93  0023               	movlb	3	; select bank3
 12878  1E94  10C4               	bcf	(_Memory^(0+384)+36),1
 12879  1E95  1D03               	skipz
 12880  1E96  14C4               	bsf	(_Memory^(0+384)+36),1
 12881                           
 12882                           ;MCU_B1.c: 887: if (command == 0) {
 12883  1E97  0020               	movlb	0	; select bank0
 12884  1E98  08A2               	movf	setMemory_GO@command,f
 12885  1E99  1D03               	skipz
 12886  1E9A  0008               	return
 12887                           
 12888                           ;MCU_B1.c: 888: Memory.Time = command;
 12889  1E9B  0822               	movf	setMemory_GO@command,w
 12890  1E9C  00A0               	movwf	??_setMemory_GO
 12891  1E9D  01A1               	clrf	??_setMemory_GO+1
 12892  1E9E  0820               	movf	??_setMemory_GO,w
 12893  1E9F  0023               	movlb	3	; select bank3
 12894  1EA0  00C2               	movwf	(_Memory^(0+384)+34)
 12895  1EA1  0020               	movlb	0	; select bank0
 12896  1EA2  0821               	movf	??_setMemory_GO+1,w
 12897  1EA3  0023               	movlb	3	; select bank3
 12898  1EA4  00C3               	movwf	((_Memory+1)^(0+384)+34)
 12899  1EA5  0008               	return
 12900  1EA6                     __end_of_setMemory_GO:	
 12901                           
 12902                           	psect	text78
 12903  1E53                     __ptext78:	
 12904 ;; *************** function _getDimmerLights_StatusFlag *****************
 12905 ;; Defined at:
 12906 ;;		line 475 in file "../src/Dimmer_B1.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;		None
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  Status          1    1[BANK0 ] unsigned char 
 12911 ;; Return value:  Size  Location     Type
 12912 ;;                  1    wreg      unsigned char 
 12913 ;; Registers used:
 12914 ;;		wreg, status,2
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;Total ram usage:        3 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    5
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		_DimmerLights_Close
 12931 ;;		_DimmerLights_Exceptions
 12932 ;; This function uses a non-reentrant model
 12933 ;;
 12934                           
 12935                           
 12936                           ;psect for function _getDimmerLights_StatusFlag
 12937  1E53                     _getDimmerLights_StatusFlag:	
 12938                           
 12939                           ;Dimmer_B1.c: 476: char Status = 0;
 12940                           
 12941                           ;incstack = 0
 12942                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12943  1E53  0020               	movlb	0	; select bank0
 12944  1E54  01A1               	clrf	getDimmerLights_StatusFlag@Status
 12945                           
 12946                           ;Dimmer_B1.c: 479: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 12947  1E55  01A2               	clrf	_getDimmerLights_StatusFlag$2153
 12948  1E56  0AA2               	incf	_getDimmerLights_StatusFlag$2153,f
 12949  1E57  0022               	movlb	2	; select bank2
 12950  1E58  1B3D               	btfsc	_DimmerLights1^(0+256),6
 12951  1E59  2E60               	goto	l6436
 12952  1E5A  0023               	movlb	3	; select bank3
 12953  1E5B  1F45               	btfss	_DimmerLights2^(0+384),6
 12954  1E5C  1B54               	btfsc	_DimmerLights3^(0+384),6
 12955  1E5D  2E60               	goto	l6436
 12956  1E5E  0020               	movlb	0	; select bank0
 12957  1E5F  01A2               	clrf	_getDimmerLights_StatusFlag$2153
 12958  1E60                     l6436:	
 12959  1E60  0020               	movlb	0	; select bank0
 12960  1E61  0822               	movf	_getDimmerLights_StatusFlag$2153,w
 12961  1E62  00A0               	movwf	??_getDimmerLights_StatusFlag
 12962  1E63  0820               	movf	??_getDimmerLights_StatusFlag,w
 12963  1E64  00A1               	movwf	getDimmerLights_StatusFlag@Status
 12964                           
 12965                           ;Dimmer_B1.c: 490: return Status;
 12966  1E65  0821               	movf	getDimmerLights_StatusFlag@Status,w
 12967  1E66  0008               	return
 12968  1E67                     __end_of_getDimmerLights_StatusFlag:	
 12969                           
 12970                           	psect	text79
 12971  112C                     __ptext79:	
 12972 ;; *************** function _DimmerLights_Initialization *****************
 12973 ;; Defined at:
 12974 ;;		line 334 in file "../src/Dimmer_B1.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;		None
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;		None
 12979 ;; Return value:  Size  Location     Type
 12980 ;;		None               void
 12981 ;; Registers used:
 12982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12983 ;; Tracked objects:
 12984 ;;		On entry : 0/0
 12985 ;;		On exit  : 0/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;Total ram usage:        1 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    7
 12995 ;; This function calls:
 12996 ;;		_Dimmer_Initialization
 12997 ;;		_setDimmerLights_Initialization
 12998 ;; This function is called by:
 12999 ;;		_main
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           
 13004                           ;psect for function _DimmerLights_Initialization
 13005  112C                     _DimmerLights_Initialization:	
 13006                           
 13007                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 13008                           
 13009                           ;incstack = 0
 13010                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13011  112C  303D               	movlw	_DimmerLights1& (0+255)
 13012  112D  0020               	movlb	0	; select bank0
 13013  112E  00A4               	movwf	??_DimmerLights_Initialization
 13014  112F  0824               	movf	??_DimmerLights_Initialization,w
 13015  1130  0021               	movlb	1	; select bank1
 13016  1131  00C9               	movwf	_DimmerLights11^(0+128)
 13017                           
 13018                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 13019  1132  3001               	movlw	1
 13020  1133  3192  22D3  3191   	fcall	_setDimmerLights_Initialization
 13021                           
 13022                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 13023  1136  30C5               	movlw	_DimmerLights2& (0+255)
 13024  1137  0020               	movlb	0	; select bank0
 13025  1138  00A4               	movwf	??_DimmerLights_Initialization
 13026  1139  0824               	movf	??_DimmerLights_Initialization,w
 13027  113A  0021               	movlb	1	; select bank1
 13028  113B  00CA               	movwf	_DimmerLights22^(0+128)
 13029                           
 13030                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 13031  113C  3002               	movlw	2
 13032  113D  3192  22D3  3191   	fcall	_setDimmerLights_Initialization
 13033                           
 13034                           ;Dimmer_B1.c: 347: DimmerLights33 = &DimmerLights3;
 13035  1140  30D4               	movlw	_DimmerLights3& (0+255)
 13036  1141  0020               	movlb	0	; select bank0
 13037  1142  00A4               	movwf	??_DimmerLights_Initialization
 13038  1143  0824               	movf	??_DimmerLights_Initialization,w
 13039  1144  0021               	movlb	1	; select bank1
 13040  1145  00CB               	movwf	_DimmerLights33^(0+128)
 13041                           
 13042                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(3);
 13043  1146  3003               	movlw	3
 13044  1147  3192  22D3  3191   	fcall	_setDimmerLights_Initialization
 13045                           
 13046                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 13047  114A  319C  249E         	fcall	_Dimmer_Initialization
 13048  114C  0008               	return
 13049  114D                     __end_of_DimmerLights_Initialization:	
 13050                           
 13051                           	psect	text80
 13052  12D3                     __ptext80:	
 13053 ;; *************** function _setDimmerLights_Initialization *****************
 13054 ;; Defined at:
 13055 ;;		line 357 in file "../src/Dimmer_B1.c"
 13056 ;; Parameters:    Size  Location     Type
 13057 ;;  lights          1    wreg     unsigned char 
 13058 ;; Auto vars:     Size  Location     Type
 13059 ;;  lights          1    3[BANK0 ] unsigned char 
 13060 ;; Return value:  Size  Location     Type
 13061 ;;		None               void
 13062 ;; Registers used:
 13063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;Total ram usage:        2 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    6
 13076 ;; This function calls:
 13077 ;;		_DimmerLightsPointSelect
 13078 ;; This function is called by:
 13079 ;;		_DimmerLights_Initialization
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           
 13084                           ;psect for function _setDimmerLights_Initialization
 13085  12D3                     _setDimmerLights_Initialization:	
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13089                           ;setDimmerLights_Initialization@lights stored from wreg
 13090  12D3  0020               	movlb	0	; select bank0
 13091  12D4  00A3               	movwf	setDimmerLights_Initialization@lights
 13092                           
 13093                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 13094  12D5  0823               	movf	setDimmerLights_Initialization@lights,w
 13095  12D6  319F  2755         	fcall	_DimmerLightsPointSelect
 13096                           
 13097                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 13098  12D8  087B               	movf	_DimmerLights,w
 13099  12D9  3E09               	addlw	9
 13100  12DA  0086               	movwf	6
 13101  12DB  3001               	movlw	1	; select bank2/3
 13102  12DC  0087               	movwf	7
 13103  12DD  1501               	bsf	1,2
 13104                           
 13105                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-95)*0.8));
 13106  12DE  3004               	movlw	4
 13107  12DF  0020               	movlb	0	; select bank0
 13108  12E0  00A2               	movwf	??_setDimmerLights_Initialization
 13109  12E1  087B               	movf	_DimmerLights,w
 13110  12E2  3E05               	addlw	5
 13111  12E3  0086               	movwf	6
 13112  12E4  3001               	movlw	1	; select bank2/3
 13113  12E5  0087               	movwf	7
 13114  12E6  0822               	movf	??_setDimmerLights_Initialization,w
 13115  12E7  0081               	movwf	1
 13116                           
 13117                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13118  12E8  303C               	movlw	60
 13119  12E9  00A2               	movwf	??_setDimmerLights_Initialization
 13120  12EA  087B               	movf	_DimmerLights,w
 13121  12EB  3E06               	addlw	6
 13122  12EC  0086               	movwf	6
 13123  12ED  3001               	movlw	1	; select bank2/3
 13124  12EE  0087               	movwf	7
 13125  12EF  0822               	movf	??_setDimmerLights_Initialization,w
 13126  12F0  0081               	movwf	1
 13127                           
 13128                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13129  12F1  087B               	movf	_DimmerLights,w
 13130  12F2  3E06               	addlw	6
 13131  12F3  0086               	movwf	6
 13132  12F4  3001               	movlw	1	; select bank2/3
 13133  12F5  0087               	movwf	7
 13134  12F6  0801               	movf	1,w
 13135  12F7  00A2               	movwf	??_setDimmerLights_Initialization
 13136  12F8  087B               	movf	_DimmerLights,w
 13137  12F9  3E04               	addlw	4
 13138  12FA  0086               	movwf	6
 13139  12FB  3001               	movlw	1	; select bank2/3
 13140  12FC  0087               	movwf	7
 13141  12FD  0822               	movf	??_setDimmerLights_Initialization,w
 13142  12FE  0081               	movwf	1
 13143  12FF  0008               	return
 13144  1300                     __end_of_setDimmerLights_Initialization:	
 13145                           
 13146                           	psect	text81
 13147  1C9E                     __ptext81:	
 13148 ;; *************** function _Dimmer_Initialization *****************
 13149 ;; Defined at:
 13150 ;;		line 786 in file "../src/Dimmer_B1.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;		None
 13153 ;; Auto vars:     Size  Location     Type
 13154 ;;		None
 13155 ;; Return value:  Size  Location     Type
 13156 ;;		None               void
 13157 ;; Registers used:
 13158 ;;		wreg
 13159 ;; Tracked objects:
 13160 ;;		On entry : 0/0
 13161 ;;		On exit  : 0/0
 13162 ;;		Unchanged: 0/0
 13163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;Total ram usage:        1 bytes
 13169 ;; Hardware stack levels used:    1
 13170 ;; Hardware stack levels required when called:    5
 13171 ;; This function calls:
 13172 ;;		Nothing
 13173 ;; This function is called by:
 13174 ;;		_DimmerLights_Initialization
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           
 13179                           ;psect for function _Dimmer_Initialization
 13180  1C9E                     _Dimmer_Initialization:	
 13181                           
 13182                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13183                           
 13184                           ;incstack = 0
 13185                           ; Regs used in _Dimmer_Initialization: [wreg]
 13186  1C9E  30E7               	movlw	_Dimmer1& (0+255)
 13187  1C9F  0020               	movlb	0	; select bank0
 13188  1CA0  00A0               	movwf	??_Dimmer_Initialization
 13189  1CA1  0820               	movf	??_Dimmer_Initialization,w
 13190  1CA2  0021               	movlb	1	; select bank1
 13191  1CA3  00C8               	movwf	_Dimmer^(0+128)
 13192  1CA4  0008               	return
 13193  1CA5                     __end_of_Dimmer_Initialization:	
 13194                           
 13195                           	psect	text82
 13196  1D02                     __ptext82:	
 13197 ;; *************** function _DelayOff_Main *****************
 13198 ;; Defined at:
 13199 ;;		line 41 in file "../src/DelayOff_B1.c"
 13200 ;; Parameters:    Size  Location     Type
 13201 ;;		None
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;		None
 13204 ;; Return value:  Size  Location     Type
 13205 ;;		None               void
 13206 ;; Registers used:
 13207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13208 ;; Tracked objects:
 13209 ;;		On entry : 0/0
 13210 ;;		On exit  : 0/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;Total ram usage:        0 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:   10
 13220 ;; This function calls:
 13221 ;;		_DlyOff_Main
 13222 ;; This function is called by:
 13223 ;;		_main
 13224 ;; This function uses a non-reentrant model
 13225 ;;
 13226                           
 13227                           
 13228                           ;psect for function _DelayOff_Main
 13229  1D02                     _DelayOff_Main:	
 13230                           
 13231                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13232                           
 13233                           ;incstack = 0
 13234                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13235  1D02  3001               	movlw	1
 13236  1D03  318C  24D7  319D   	fcall	_DlyOff_Main
 13237                           
 13238                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13239  1D06  3002               	movlw	2
 13240  1D07  318C  24D7  319D   	fcall	_DlyOff_Main
 13241                           
 13242                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 13243  1D0A  3003               	movlw	3
 13244  1D0B  318C  24D7         	fcall	_DlyOff_Main
 13245  1D0D  0008               	return
 13246  1D0E                     __end_of_DelayOff_Main:	
 13247                           
 13248                           	psect	text83
 13249  0CD7                     __ptext83:	
 13250 ;; *************** function _DlyOff_Main *****************
 13251 ;; Defined at:
 13252 ;;		line 62 in file "../src/DelayOff_B1.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;  sw              1    wreg     unsigned char 
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;  sw              1   68[BANK0 ] unsigned char 
 13257 ;; Return value:  Size  Location     Type
 13258 ;;		None               void
 13259 ;; Registers used:
 13260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;Total ram usage:        3 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    9
 13273 ;; This function calls:
 13274 ;;		_DelayOffPointSelect
 13275 ;;		_setBuz
 13276 ;;		_setDimmerLights_Switch
 13277 ;;		_setDimmerLights_Trigger
 13278 ;;		_setRFSW_Status
 13279 ;;		_setRF_DimmerLights
 13280 ;;		_setSw_Status
 13281 ;;		_setTxData
 13282 ;; This function is called by:
 13283 ;;		_DelayOff_Main
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           
 13288                           ;psect for function _DlyOff_Main
 13289  0CD7                     _DlyOff_Main:	
 13290                           
 13291                           ;incstack = 0
 13292                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13293                           ;DlyOff_Main@sw stored from wreg
 13294  0CD7  0020               	movlb	0	; select bank0
 13295  0CD8  00E4               	movwf	DlyOff_Main@sw
 13296                           
 13297                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13298  0CD9  0864               	movf	DlyOff_Main@sw,w
 13299  0CDA  319F  27A9  318C   	fcall	_DelayOffPointSelect
 13300                           
 13301                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13302  0CDD  087A               	movf	_DelayOff,w
 13303  0CDE  0086               	movwf	6
 13304  0CDF  3001               	movlw	1	; select bank2/3
 13305  0CE0  0087               	movwf	7
 13306  0CE1  1C81               	btfss	1,1
 13307  0CE2  0008               	return
 13308                           
 13309                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13310  0CE3  087A               	movf	_DelayOff,w
 13311  0CE4  3E02               	addlw	2
 13312  0CE5  0086               	movwf	6
 13313  0CE6  3001               	movlw	1	; select bank2/3
 13314  0CE7  0087               	movwf	7
 13315  0CE8  3001               	movlw	1
 13316  0CE9  0781               	addwf	1,f
 13317  0CEA  3141               	addfsr 1,1
 13318  0CEB  1803               	skipnc
 13319  0CEC  0A81               	incf	1,f
 13320                           
 13321                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13322  0CED  087A               	movf	_DelayOff,w
 13323  0CEE  3E02               	addlw	2
 13324  0CEF  0086               	movwf	6
 13325  0CF0  3001               	movlw	1	; select bank2/3
 13326  0CF1  0087               	movwf	7
 13327  0CF2  3F40               	moviw [0]fsr1
 13328  0CF3  0020               	movlb	0	; select bank0
 13329  0CF4  00E2               	movwf	??_DlyOff_Main
 13330  0CF5  3F41               	moviw [1]fsr1
 13331  0CF6  00E3               	movwf	??_DlyOff_Main+1
 13332  0CF7  3016               	movlw	22
 13333  0CF8  0263               	subwf	??_DlyOff_Main+1,w
 13334  0CF9  3012               	movlw	18
 13335  0CFA  1903               	skipnz
 13336  0CFB  0262               	subwf	??_DlyOff_Main,w
 13337  0CFC  1C03               	skipc
 13338  0CFD  0008               	return
 13339                           
 13340                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13341  0CFE  087A               	movf	_DelayOff,w
 13342  0CFF  3E02               	addlw	2
 13343  0D00  0086               	movwf	6
 13344  0D01  3001               	movlw	1	; select bank2/3
 13345  0D02  0087               	movwf	7
 13346  0D03  3000               	movlw	0
 13347  0D04  3FC0               	movwi [0]fsr1
 13348  0D05  3FC1               	movwi [1]fsr1
 13349                           
 13350                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13351  0D06  3001               	movlw	1
 13352  0D07  00E2               	movwf	??_DlyOff_Main
 13353  0D08  087A               	movf	_DelayOff,w
 13354  0D09  3E04               	addlw	4
 13355  0D0A  0086               	movwf	6
 13356  0D0B  3001               	movlw	1	; select bank2/3
 13357  0D0C  0087               	movwf	7
 13358  0D0D  0862               	movf	??_DlyOff_Main,w
 13359  0D0E  0781               	addwf	1,f
 13360                           
 13361                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13362  0D0F  087A               	movf	_DelayOff,w
 13363  0D10  3E04               	addlw	4
 13364  0D11  0086               	movwf	6
 13365  0D12  3001               	movlw	1	; select bank2/3
 13366  0D13  0087               	movwf	7
 13367  0D14  0A7A               	incf	_DelayOff,w
 13368  0D15  0084               	movwf	4
 13369  0D16  3001               	movlw	1	; select bank2/3
 13370  0D17  0085               	movwf	5
 13371  0D18  0800               	movf	0,w
 13372  0D19  0201               	subwf	1,w
 13373  0D1A  1C03               	skipc
 13374  0D1B  0008               	return
 13375                           
 13376                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13377  0D1C  087A               	movf	_DelayOff,w
 13378  0D1D  3E04               	addlw	4
 13379  0D1E  0086               	movwf	6
 13380  0D1F  3001               	movlw	1	; select bank2/3
 13381  0D20  0087               	movwf	7
 13382  0D21  0181               	clrf	1
 13383                           
 13384                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13385  0D22  087A               	movf	_DelayOff,w
 13386  0D23  0086               	movwf	6
 13387  0D24  3001               	movlw	1	; select bank2/3
 13388  0D25  0087               	movwf	7
 13389  0D26  1081               	bcf	1,1
 13390                           
 13391                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13392  0D27  01A1               	clrf	setSw_Status@command
 13393  0D28  0864               	movf	DlyOff_Main@sw,w
 13394  0D29  319D  2550  318C   	fcall	_setSw_Status
 13395                           
 13396                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13397  0D2C  0020               	movlb	0	; select bank0
 13398  0D2D  01A2               	clrf	setRFSW_Status@command
 13399  0D2E  0864               	movf	DlyOff_Main@sw,w
 13400  0D2F  319D  2541  318C   	fcall	_setRFSW_Status
 13401                           
 13402                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13403  0D32  0020               	movlb	0	; select bank0
 13404  0D33  01DD               	clrf	setRF_DimmerLights@on
 13405  0D34  0864               	movf	DlyOff_Main@sw,w
 13406  0D35  318A  2295  318C   	fcall	_setRF_DimmerLights
 13407                           
 13408                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13409  0D38  0020               	movlb	0	; select bank0
 13410  0D39  01A2               	clrf	setDimmerLights_Trigger@command
 13411  0D3A  0AA2               	incf	setDimmerLights_Trigger@command,f
 13412  0D3B  0864               	movf	DlyOff_Main@sw,w
 13413  0D3C  319D  25AB  318C   	fcall	_setDimmerLights_Trigger
 13414                           
 13415                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13416  0D3F  0020               	movlb	0	; select bank0
 13417  0D40  01A2               	clrf	setDimmerLights_Switch@command
 13418  0D41  0864               	movf	DlyOff_Main@sw,w
 13419  0D42  319D  259B  318C   	fcall	_setDimmerLights_Switch
 13420                           
 13421                           ;DelayOff_B1.c: 78: setTxData();
 13422  0D45  3185  252E  318C   	fcall	_setTxData
 13423                           
 13424                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13425  0D48  3064               	movlw	100
 13426  0D49  0020               	movlb	0	; select bank0
 13427  0D4A  00A9               	movwf	setBuz@time
 13428  0D4B  3000               	movlw	0
 13429  0D4C  00AA               	movwf	setBuz@time+1
 13430  0D4D  3001               	movlw	1
 13431  0D4E  3197  27A7         	fcall	_setBuz
 13432  0D50  0008               	return
 13433  0D51                     __end_of_DlyOff_Main:	
 13434                           
 13435                           	psect	text84
 13436  052E                     __ptext84:	
 13437 ;; *************** function _setTxData *****************
 13438 ;; Defined at:
 13439 ;;		line 136 in file "../src/RF_Control_B1.c"
 13440 ;; Parameters:    Size  Location     Type
 13441 ;;		None
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;  i               1    0        unsigned char 
 13444 ;; Return value:  Size  Location     Type
 13445 ;;		None               void
 13446 ;; Registers used:
 13447 ;;		wreg, fsr1l, fsr1h
 13448 ;; Tracked objects:
 13449 ;;		On entry : 0/0
 13450 ;;		On exit  : 0/0
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13456 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;Total ram usage:        1 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    5
 13460 ;; This function calls:
 13461 ;;		Nothing
 13462 ;; This function is called by:
 13463 ;;		_DlyOff_Main
 13464 ;;		_setDimmerLights_Adj
 13465 ;;		_setControl_Lights_Table
 13466 ;;		_setRFSW_Control
 13467 ;;		_setRFSW_AdjControl
 13468 ;;		_Sw_DimmerOnFunc
 13469 ;;		_Sw_DimmerOffFunc
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function _setTxData
 13475  052E                     _setTxData:	
 13476                           
 13477                           ;RF_Control_B1.c: 137: char i;
 13478                           ;RF_Control_B1.c: 138: if (RF1.Enable == 1) {
 13479                           
 13480                           ;incstack = 0
 13481                           ; Regs used in _setTxData: [wregfsr1]
 13482  052E  0021               	movlb	1	; select bank1
 13483  052F  1C3E               	btfss	_RF1^(0+128),0
 13484  0530  0008               	return
 13485                           
 13486                           ;RF_Control_B1.c: 140: RF1.TransceiveGO = 1;
 13487  0531  153E               	bsf	_RF1^(0+128),2
 13488                           
 13489                           ;RF_Control_B1.c: 150: RF_Data[0] = 0x63;
 13490  0532  3063               	movlw	99
 13491  0533  0020               	movlb	0	; select bank0
 13492  0534  00A0               	movwf	??_setTxData
 13493  0535  0820               	movf	??_setTxData,w
 13494  0536  0022               	movlb	2	; select bank2
 13495  0537  00A0               	movwf	_RF_Data^(0+256)
 13496                           
 13497                           ;RF_Control_B1.c: 151: RF_Data[1] = 0x02;
 13498  0538  3002               	movlw	2
 13499  0539  0020               	movlb	0	; select bank0
 13500  053A  00A0               	movwf	??_setTxData
 13501  053B  0820               	movf	??_setTxData,w
 13502  053C  0022               	movlb	2	; select bank2
 13503  053D  00A1               	movwf	(_RF_Data^(0+256)+1)
 13504                           
 13505                           ;RF_Control_B1.c: 152: RF_Data[2] = product->Data[2];
 13506  053E  0020               	movlb	0	; select bank0
 13507  053F  086F               	movf	_product,w
 13508  0540  0086               	movwf	6
 13509  0541  3002               	movlw	2	; select bank4/5
 13510  0542  0087               	movwf	7
 13511  0543  3002               	movlw	2	; select bank4/5
 13512  0544  3F42               	moviw [2]fsr1
 13513  0545  0022               	movlb	2	; select bank2
 13514  0546  00A2               	movwf	(_RF_Data^(0+256)+2)
 13515                           
 13516                           ;RF_Control_B1.c: 153: RF_Data[3] = product->Data[3];
 13517  0547  0020               	movlb	0	; select bank0
 13518  0548  086F               	movf	_product,w
 13519  0549  0086               	movwf	6
 13520  054A  3002               	movlw	2	; select bank4/5
 13521  054B  0087               	movwf	7
 13522  054C  3002               	movlw	2	; select bank4/5
 13523  054D  3F43               	moviw [3]fsr1
 13524  054E  0022               	movlb	2	; select bank2
 13525  054F  00A3               	movwf	(_RF_Data^(0+256)+3)
 13526                           
 13527                           ;RF_Control_B1.c: 154: RF_Data[4] = product->Data[4];
 13528  0550  0020               	movlb	0	; select bank0
 13529  0551  086F               	movf	_product,w
 13530  0552  0086               	movwf	6
 13531  0553  3002               	movlw	2	; select bank4/5
 13532  0554  0087               	movwf	7
 13533  0555  3002               	movlw	2	; select bank4/5
 13534  0556  3F44               	moviw [4]fsr1
 13535  0557  0022               	movlb	2	; select bank2
 13536  0558  00A4               	movwf	(_RF_Data^(0+256)+4)
 13537                           
 13538                           ;RF_Control_B1.c: 155: RF_Data[5] = product->Data[5];
 13539  0559  0020               	movlb	0	; select bank0
 13540  055A  086F               	movf	_product,w
 13541  055B  0086               	movwf	6
 13542  055C  3002               	movlw	2	; select bank4/5
 13543  055D  0087               	movwf	7
 13544  055E  3002               	movlw	2	; select bank4/5
 13545  055F  3F45               	moviw [5]fsr1
 13546  0560  0022               	movlb	2	; select bank2
 13547  0561  00A5               	movwf	(_RF_Data^(0+256)+5)
 13548                           
 13549                           ;RF_Control_B1.c: 156: RF_Data[6] = product->Data[6];
 13550  0562  0020               	movlb	0	; select bank0
 13551  0563  086F               	movf	_product,w
 13552  0564  0086               	movwf	6
 13553  0565  3002               	movlw	2	; select bank4/5
 13554  0566  0087               	movwf	7
 13555  0567  3002               	movlw	2	; select bank4/5
 13556  0568  3F46               	moviw [6]fsr1
 13557  0569  0022               	movlb	2	; select bank2
 13558  056A  00A6               	movwf	(_RF_Data^(0+256)+6)
 13559                           
 13560                           ;RF_Control_B1.c: 157: RF_Data[7] = product->Data[7];
 13561  056B  0020               	movlb	0	; select bank0
 13562  056C  086F               	movf	_product,w
 13563  056D  0086               	movwf	6
 13564  056E  3002               	movlw	2	; select bank4/5
 13565  056F  0087               	movwf	7
 13566  0570  3002               	movlw	2	; select bank4/5
 13567  0571  3F47               	moviw [7]fsr1
 13568  0572  0022               	movlb	2	; select bank2
 13569  0573  00A7               	movwf	(_RF_Data^(0+256)+7)
 13570                           
 13571                           ;RF_Control_B1.c: 158: RF_Data[8] = product->Data[8];
 13572  0574  0020               	movlb	0	; select bank0
 13573  0575  086F               	movf	_product,w
 13574  0576  0086               	movwf	6
 13575  0577  3002               	movlw	2	; select bank4/5
 13576  0578  0087               	movwf	7
 13577  0579  3002               	movlw	2	; select bank4/5
 13578  057A  3F48               	moviw [8]fsr1
 13579  057B  0022               	movlb	2	; select bank2
 13580  057C  00A8               	movwf	(_RF_Data^(0+256)+8)
 13581                           
 13582                           ;RF_Control_B1.c: 159: RF_Data[9] = product->Data[9];
 13583  057D  0020               	movlb	0	; select bank0
 13584  057E  086F               	movf	_product,w
 13585  057F  0086               	movwf	6
 13586  0580  3002               	movlw	2	; select bank4/5
 13587  0581  0087               	movwf	7
 13588  0582  3002               	movlw	2	; select bank4/5
 13589  0583  3F49               	moviw [9]fsr1
 13590  0584  0022               	movlb	2	; select bank2
 13591  0585  00A9               	movwf	(_RF_Data^(0+256)+9)
 13592                           
 13593                           ;RF_Control_B1.c: 160: RF_Data[10] = product->Data[10];
 13594  0586  0020               	movlb	0	; select bank0
 13595  0587  086F               	movf	_product,w
 13596  0588  0086               	movwf	6
 13597  0589  3002               	movlw	2	; select bank4/5
 13598  058A  0087               	movwf	7
 13599  058B  3002               	movlw	2	; select bank4/5
 13600  058C  3F4A               	moviw [10]fsr1
 13601  058D  0022               	movlb	2	; select bank2
 13602  058E  00AA               	movwf	(_RF_Data^(0+256)+10)
 13603                           
 13604                           ;RF_Control_B1.c: 161: RF_Data[11] = product->Data[11];
 13605  058F  0020               	movlb	0	; select bank0
 13606  0590  086F               	movf	_product,w
 13607  0591  0086               	movwf	6
 13608  0592  3002               	movlw	2	; select bank4/5
 13609  0593  0087               	movwf	7
 13610  0594  3002               	movlw	2	; select bank4/5
 13611  0595  3F4B               	moviw [11]fsr1
 13612  0596  0022               	movlb	2	; select bank2
 13613  0597  00AB               	movwf	(_RF_Data^(0+256)+11)
 13614                           
 13615                           ;RF_Control_B1.c: 162: RF_Data[12] = product->Data[12];
 13616  0598  0020               	movlb	0	; select bank0
 13617  0599  086F               	movf	_product,w
 13618  059A  0086               	movwf	6
 13619  059B  3002               	movlw	2	; select bank4/5
 13620  059C  0087               	movwf	7
 13621  059D  3002               	movlw	2	; select bank4/5
 13622  059E  3F4C               	moviw [12]fsr1
 13623  059F  0022               	movlb	2	; select bank2
 13624  05A0  00AC               	movwf	(_RF_Data^(0+256)+12)
 13625                           
 13626                           ;RF_Control_B1.c: 163: RF_Data[13] = product->Data[13];
 13627  05A1  0020               	movlb	0	; select bank0
 13628  05A2  086F               	movf	_product,w
 13629  05A3  0086               	movwf	6
 13630  05A4  3002               	movlw	2	; select bank4/5
 13631  05A5  0087               	movwf	7
 13632  05A6  3002               	movlw	2	; select bank4/5
 13633  05A7  3F4D               	moviw [13]fsr1
 13634  05A8  0022               	movlb	2	; select bank2
 13635  05A9  00AD               	movwf	(_RF_Data^(0+256)+13)
 13636                           
 13637                           ;RF_Control_B1.c: 164: RF_Data[14] = product->Data[14];
 13638  05AA  0020               	movlb	0	; select bank0
 13639  05AB  086F               	movf	_product,w
 13640  05AC  0086               	movwf	6
 13641  05AD  3002               	movlw	2	; select bank4/5
 13642  05AE  0087               	movwf	7
 13643  05AF  3002               	movlw	2	; select bank4/5
 13644  05B0  3F4E               	moviw [14]fsr1
 13645  05B1  0022               	movlb	2	; select bank2
 13646  05B2  00AE               	movwf	(_RF_Data^(0+256)+14)
 13647                           
 13648                           ;RF_Control_B1.c: 165: RF_Data[15] = product->Data[15];
 13649  05B3  0020               	movlb	0	; select bank0
 13650  05B4  086F               	movf	_product,w
 13651  05B5  0086               	movwf	6
 13652  05B6  3002               	movlw	2	; select bank4/5
 13653  05B7  0087               	movwf	7
 13654  05B8  3002               	movlw	2	; select bank4/5
 13655  05B9  3F4F               	moviw [15]fsr1
 13656  05BA  0022               	movlb	2	; select bank2
 13657  05BB  00AF               	movwf	(_RF_Data^(0+256)+15)
 13658                           
 13659                           ;RF_Control_B1.c: 166: RF_Data[16] = product->Data[16];
 13660  05BC  0020               	movlb	0	; select bank0
 13661  05BD  086F               	movf	_product,w
 13662  05BE  0086               	movwf	6
 13663  05BF  3002               	movlw	2	; select bank4/5
 13664  05C0  0087               	movwf	7
 13665  05C1  3002               	movlw	2	; select bank4/5
 13666  05C2  3F50               	moviw [16]fsr1
 13667  05C3  0022               	movlb	2	; select bank2
 13668  05C4  00B0               	movwf	(_RF_Data^(0+256)+16)
 13669                           
 13670                           ;RF_Control_B1.c: 167: RF_Data[17] = product->Data[17];
 13671  05C5  0020               	movlb	0	; select bank0
 13672  05C6  086F               	movf	_product,w
 13673  05C7  0086               	movwf	6
 13674  05C8  3002               	movlw	2	; select bank4/5
 13675  05C9  0087               	movwf	7
 13676  05CA  3002               	movlw	2	; select bank4/5
 13677  05CB  3F51               	moviw [17]fsr1
 13678  05CC  0022               	movlb	2	; select bank2
 13679  05CD  00B1               	movwf	(_RF_Data^(0+256)+17)
 13680                           
 13681                           ;RF_Control_B1.c: 168: RF_Data[18] = product->Data[18];
 13682  05CE  0020               	movlb	0	; select bank0
 13683  05CF  086F               	movf	_product,w
 13684  05D0  0086               	movwf	6
 13685  05D1  3002               	movlw	2	; select bank4/5
 13686  05D2  0087               	movwf	7
 13687  05D3  3002               	movlw	2	; select bank4/5
 13688  05D4  3F52               	moviw [18]fsr1
 13689  05D5  0022               	movlb	2	; select bank2
 13690  05D6  00B2               	movwf	(_RF_Data^(0+256)+18)
 13691                           
 13692                           ;RF_Control_B1.c: 169: RF_Data[19] = product->Data[19];
 13693  05D7  0020               	movlb	0	; select bank0
 13694  05D8  086F               	movf	_product,w
 13695  05D9  0086               	movwf	6
 13696  05DA  3002               	movlw	2	; select bank4/5
 13697  05DB  0087               	movwf	7
 13698  05DC  3002               	movlw	2	; select bank4/5
 13699  05DD  3F53               	moviw [19]fsr1
 13700  05DE  0022               	movlb	2	; select bank2
 13701  05DF  00B3               	movwf	(_RF_Data^(0+256)+19)
 13702                           
 13703                           ;RF_Control_B1.c: 170: RF_Data[20] = 211;
 13704  05E0  30D3               	movlw	211
 13705  05E1  0020               	movlb	0	; select bank0
 13706  05E2  00A0               	movwf	??_setTxData
 13707  05E3  0820               	movf	??_setTxData,w
 13708  05E4  0022               	movlb	2	; select bank2
 13709  05E5  00B4               	movwf	(_RF_Data^(0+256)+20)
 13710  05E6  0008               	return
 13711  05E7                     __end_of_setTxData:	
 13712                           
 13713                           	psect	text85
 13714  1D50                     __ptext85:	
 13715 ;; *************** function _setSw_Status *****************
 13716 ;; Defined at:
 13717 ;;		line 109 in file "../src/Switch_B1.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;  sw              1    wreg     unsigned char 
 13720 ;;  command         1    1[BANK0 ] unsigned char 
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;  sw              1    2[BANK0 ] unsigned char 
 13723 ;; Return value:  Size  Location     Type
 13724 ;;		None               void
 13725 ;; Registers used:
 13726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        2 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    6
 13739 ;; This function calls:
 13740 ;;		_SwPointSelect
 13741 ;; This function is called by:
 13742 ;;		_DlyOff_Main
 13743 ;;		_setDimmerLights_ERROR
 13744 ;;		_setControl_Lights_Table
 13745 ;;		_setRFSW_Control
 13746 ;; This function uses a non-reentrant model
 13747 ;;
 13748                           
 13749                           
 13750                           ;psect for function _setSw_Status
 13751  1D50                     _setSw_Status:	
 13752                           
 13753                           ;incstack = 0
 13754                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13755                           ;setSw_Status@sw stored from wreg
 13756  1D50  0020               	movlb	0	; select bank0
 13757  1D51  00A2               	movwf	setSw_Status@sw
 13758                           
 13759                           ;Switch_B1.c: 110: SwPointSelect(sw);
 13760  1D52  0822               	movf	setSw_Status@sw,w
 13761  1D53  319F  27C6         	fcall	_SwPointSelect
 13762                           
 13763                           ;Switch_B1.c: 111: Sw->Status = command;
 13764  1D55  0878               	movf	_Sw,w
 13765  1D56  0086               	movwf	6
 13766  1D57  0879               	movf	_Sw+1,w
 13767  1D58  0087               	movwf	7
 13768  1D59  0020               	movlb	0	; select bank0
 13769  1D5A  0821               	movf	setSw_Status@command,w
 13770  1D5B  1301               	bcf	1,6
 13771  1D5C  1D03               	skipz
 13772  1D5D  1701               	bsf	1,6
 13773  1D5E  0008               	return
 13774  1D5F                     __end_of_setSw_Status:	
 13775                           
 13776                           	psect	text86
 13777  1FC6                     __ptext86:	
 13778 ;; *************** function _SwPointSelect *****************
 13779 ;; Defined at:
 13780 ;;		line 21 in file "../src/Switch_B1.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  sw              1    wreg     unsigned char 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  sw              1    0[BANK0 ] unsigned char 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;		None               void
 13787 ;; Registers used:
 13788 ;;		wreg, status,2, status,0
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;Total ram usage:        1 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    5
 13801 ;; This function calls:
 13802 ;;		Nothing
 13803 ;; This function is called by:
 13804 ;;		_setSw_Enable
 13805 ;;		_setSw_Status
 13806 ;;		_setSw_Main
 13807 ;;		_Sw_Detect
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           
 13812                           ;psect for function _SwPointSelect
 13813  1FC6                     _SwPointSelect:	
 13814                           
 13815                           ;incstack = 0
 13816                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
 13817                           ;SwPointSelect@sw stored from wreg
 13818  1FC6  0020               	movlb	0	; select bank0
 13819  1FC7  00A0               	movwf	SwPointSelect@sw
 13820                           
 13821                           ;Switch_B1.c: 24: if (sw == 1) {
 13822  1FC8  0820               	movf	SwPointSelect@sw,w
 13823  1FC9  3A01               	xorlw	1
 13824  1FCA  1D03               	skipz
 13825  1FCB  2FD1               	goto	l6112
 13826                           
 13827                           ;Switch_B1.c: 25: Sw = &Sw1;
 13828  1FCC  304C               	movlw	low _Sw1
 13829  1FCD  00F8               	movwf	_Sw
 13830  1FCE  3001               	movlw	high _Sw1
 13831  1FCF  00F9               	movwf	_Sw+1
 13832                           
 13833                           ;Switch_B1.c: 26: }
 13834  1FD0  0008               	return
 13835  1FD1                     l6112:	
 13836                           
 13837                           ;Switch_B1.c: 29: else if (sw == 2) {
 13838  1FD1  0820               	movf	SwPointSelect@sw,w
 13839  1FD2  3A02               	xorlw	2
 13840  1FD3  1D03               	skipz
 13841  1FD4  2FDA               	goto	l6116
 13842                           
 13843                           ;Switch_B1.c: 30: Sw = &Sw2;
 13844  1FD5  30E3               	movlw	low _Sw2
 13845  1FD6  00F8               	movwf	_Sw
 13846  1FD7  3001               	movlw	high _Sw2
 13847  1FD8  00F9               	movwf	_Sw+1
 13848                           
 13849                           ;Switch_B1.c: 31: }
 13850  1FD9  0008               	return
 13851  1FDA                     l6116:	
 13852                           
 13853                           ;Switch_B1.c: 34: else if (sw == 3) {
 13854  1FDA  0820               	movf	SwPointSelect@sw,w
 13855  1FDB  3A03               	xorlw	3
 13856  1FDC  1D03               	skipz
 13857  1FDD  0008               	return
 13858                           
 13859                           ;Switch_B1.c: 35: Sw = &Sw3;
 13860  1FDE  3040               	movlw	low _Sw3
 13861  1FDF  00F8               	movwf	_Sw
 13862  1FE0  3002               	movlw	high _Sw3
 13863  1FE1  00F9               	movwf	_Sw+1
 13864  1FE2  0008               	return
 13865  1FE3                     __end_of_SwPointSelect:	
 13866                           
 13867                           	psect	text87
 13868  0A95                     __ptext87:	
 13869 ;; *************** function _setRF_DimmerLights *****************
 13870 ;; Defined at:
 13871 ;;		line 395 in file "../src/RF_Control_B1.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;  lights          1    wreg     unsigned char 
 13874 ;;  on              1   61[BANK0 ] unsigned char 
 13875 ;; Auto vars:     Size  Location     Type
 13876 ;;  lights          1   65[BANK0 ] unsigned char 
 13877 ;;  status          1   64[BANK0 ] unsigned char 
 13878 ;; Return value:  Size  Location     Type
 13879 ;;		None               void
 13880 ;; Registers used:
 13881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13882 ;; Tracked objects:
 13883 ;;		On entry : 0/0
 13884 ;;		On exit  : 0/0
 13885 ;;		Unchanged: 0/0
 13886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13887 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;Total ram usage:        5 bytes
 13892 ;; Hardware stack levels used:    1
 13893 ;; Hardware stack levels required when called:    8
 13894 ;; This function calls:
 13895 ;;		_setPercentValue
 13896 ;; This function is called by:
 13897 ;;		_DlyOff_Main
 13898 ;;		_setDimmerLights_Adj
 13899 ;;		_setRFSW_Control
 13900 ;;		_Sw_DimmerOnFunc
 13901 ;;		_Sw_DimmerOffFunc
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           
 13906                           ;psect for function _setRF_DimmerLights
 13907  0A95                     _setRF_DimmerLights:	
 13908                           
 13909                           ;incstack = 0
 13910                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13911                           ;setRF_DimmerLights@lights stored from wreg
 13912  0A95  0020               	movlb	0	; select bank0
 13913  0A96  00E1               	movwf	setRF_DimmerLights@lights
 13914                           
 13915                           ;RF_Control_B1.c: 396: char status;
 13916                           ;RF_Control_B1.c: 397: status = 1;
 13917  0A97  01E0               	clrf	setRF_DimmerLights@status
 13918  0A98  0AE0               	incf	setRF_DimmerLights@status,f
 13919                           
 13920                           ;RF_Control_B1.c: 398: status <<= (lights - 1);
 13921  0A99  0861               	movf	setRF_DimmerLights@lights,w
 13922  0A9A  3EFF               	addlw	-1
 13923  0A9B  0A89               	incf	9,f
 13924  0A9C  2A9F               	goto	u4920
 13925  0A9D                     u4925:	
 13926  0A9D  1003               	clrc
 13927  0A9E  0DE0               	rlf	setRF_DimmerLights@status,f
 13928  0A9F                     u4920:	
 13929  0A9F  3EFF               	addlw	-1
 13930  0AA0  1D03               	skipz
 13931  0AA1  2A9D               	goto	u4925
 13932                           
 13933                           ;RF_Control_B1.c: 399: product->Data[11]=lights;
 13934  0AA2  0861               	movf	setRF_DimmerLights@lights,w
 13935  0AA3  00DE               	movwf	??_setRF_DimmerLights
 13936  0AA4  086F               	movf	_product,w
 13937  0AA5  3E0B               	addlw	11
 13938  0AA6  0086               	movwf	6
 13939  0AA7  3002               	movlw	2	; select bank4/5
 13940  0AA8  0087               	movwf	7
 13941  0AA9  085E               	movf	??_setRF_DimmerLights,w
 13942  0AAA  0081               	movwf	1
 13943                           
 13944                           ;RF_Control_B1.c: 402: product->Data[(20 + lights)]=setPercentValue(((char)((100-95)*0.8
      +                          )));
 13945  0AAB  3004               	movlw	4
 13946  0AAC  3194  24F4  318A   	fcall	_setPercentValue
 13947  0AAF  0020               	movlb	0	; select bank0
 13948  0AB0  00DE               	movwf	??_setRF_DimmerLights
 13949  0AB1  0861               	movf	setRF_DimmerLights@lights,w
 13950  0AB2  3E14               	addlw	20
 13951  0AB3  076F               	addwf	_product,w
 13952  0AB4  00DF               	movwf	??_setRF_DimmerLights+1
 13953  0AB5  085F               	movf	??_setRF_DimmerLights+1,w
 13954  0AB6  0086               	movwf	6
 13955  0AB7  3002               	movlw	2	; select bank4/5
 13956  0AB8  0087               	movwf	7
 13957  0AB9  085E               	movf	??_setRF_DimmerLights,w
 13958  0ABA  0081               	movwf	1
 13959                           
 13960                           ;RF_Control_B1.c: 405: product->Data[9]=product->Data[20 + lights];
 13961  0ABB  0861               	movf	setRF_DimmerLights@lights,w
 13962  0ABC  3E14               	addlw	20
 13963  0ABD  076F               	addwf	_product,w
 13964  0ABE  00DE               	movwf	??_setRF_DimmerLights
 13965  0ABF  085E               	movf	??_setRF_DimmerLights,w
 13966  0AC0  0086               	movwf	6
 13967  0AC1  3002               	movlw	2	; select bank4/5
 13968  0AC2  0087               	movwf	7
 13969  0AC3  0801               	movf	1,w
 13970  0AC4  00DF               	movwf	??_setRF_DimmerLights+1
 13971  0AC5  086F               	movf	_product,w
 13972  0AC6  3E09               	addlw	9
 13973  0AC7  0086               	movwf	6
 13974  0AC8  3002               	movlw	2	; select bank4/5
 13975  0AC9  0087               	movwf	7
 13976  0ACA  085F               	movf	??_setRF_DimmerLights+1,w
 13977  0ACB  0081               	movwf	1
 13978                           
 13979                           ;RF_Control_B1.c: 406: product->Data[17]=product->Data[26 + lights];
 13980  0ACC  0861               	movf	setRF_DimmerLights@lights,w
 13981  0ACD  3E1A               	addlw	26
 13982  0ACE  076F               	addwf	_product,w
 13983  0ACF  00DE               	movwf	??_setRF_DimmerLights
 13984  0AD0  085E               	movf	??_setRF_DimmerLights,w
 13985  0AD1  0086               	movwf	6
 13986  0AD2  3002               	movlw	2	; select bank4/5
 13987  0AD3  0087               	movwf	7
 13988  0AD4  0801               	movf	1,w
 13989  0AD5  00DF               	movwf	??_setRF_DimmerLights+1
 13990  0AD6  086F               	movf	_product,w
 13991  0AD7  3E11               	addlw	17
 13992  0AD8  0086               	movwf	6
 13993  0AD9  3002               	movlw	2	; select bank4/5
 13994  0ADA  0087               	movwf	7
 13995  0ADB  085F               	movf	??_setRF_DimmerLights+1,w
 13996  0ADC  0081               	movwf	1
 13997                           
 13998                           ;RF_Control_B1.c: 407: if (on == 1) {
 13999  0ADD  085D               	movf	setRF_DimmerLights@on,w
 14000  0ADE  3A01               	xorlw	1
 14001  0ADF  1D03               	skipz
 14002  0AE0  2AF1               	goto	l6216
 14003                           
 14004                           ;RF_Control_B1.c: 408: product->Data[15]=(product->Data[15] | status);
 14005  0AE1  086F               	movf	_product,w
 14006  0AE2  3E0F               	addlw	15
 14007  0AE3  0086               	movwf	6
 14008  0AE4  3002               	movlw	2	; select bank4/5
 14009  0AE5  0087               	movwf	7
 14010  0AE6  0801               	movf	1,w
 14011  0AE7  0460               	iorwf	setRF_DimmerLights@status,w
 14012  0AE8  00DE               	movwf	??_setRF_DimmerLights
 14013  0AE9  086F               	movf	_product,w
 14014  0AEA  3E0F               	addlw	15
 14015  0AEB  0086               	movwf	6
 14016  0AEC  3002               	movlw	2	; select bank4/5
 14017  0AED  0087               	movwf	7
 14018  0AEE  085E               	movf	??_setRF_DimmerLights,w
 14019  0AEF  0081               	movwf	1
 14020                           
 14021                           ;RF_Control_B1.c: 409: } else {
 14022  0AF0  0008               	return
 14023  0AF1                     l6216:	
 14024                           
 14025                           ;RF_Control_B1.c: 410: product->Data[15]=(product->Data[15]&(~status));
 14026  0AF1  086F               	movf	_product,w
 14027  0AF2  3E0F               	addlw	15
 14028  0AF3  0086               	movwf	6
 14029  0AF4  3002               	movlw	2	; select bank4/5
 14030  0AF5  0087               	movwf	7
 14031  0AF6  0960               	comf	setRF_DimmerLights@status,w
 14032  0AF7  0501               	andwf	1,w
 14033  0AF8  00DE               	movwf	??_setRF_DimmerLights
 14034  0AF9  086F               	movf	_product,w
 14035  0AFA  3E0F               	addlw	15
 14036  0AFB  0086               	movwf	6
 14037  0AFC  3002               	movlw	2	; select bank4/5
 14038  0AFD  0087               	movwf	7
 14039  0AFE  085E               	movf	??_setRF_DimmerLights,w
 14040  0AFF  0081               	movwf	1
 14041  0B00  0008               	return
 14042  0B01                     __end_of_setRF_DimmerLights:	
 14043                           
 14044                           	psect	text88
 14045  14F4                     __ptext88:	
 14046 ;; *************** function _setPercentValue *****************
 14047 ;; Defined at:
 14048 ;;		line 768 in file "../src/Dimmer_B1.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  value           1    wreg     unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  value           1   57[BANK0 ] unsigned char 
 14053 ;;  i               3   58[BANK0 ] float 
 14054 ;; Return value:  Size  Location     Type
 14055 ;;                  1    wreg      unsigned char 
 14056 ;; Registers used:
 14057 ;;		wreg, status,2, status,0, pclath, cstack
 14058 ;; Tracked objects:
 14059 ;;		On entry : 0/0
 14060 ;;		On exit  : 0/0
 14061 ;;		Unchanged: 0/0
 14062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;Total ram usage:        4 bytes
 14068 ;; Hardware stack levels used:    1
 14069 ;; Hardware stack levels required when called:    7
 14070 ;; This function calls:
 14071 ;;		___awtoft
 14072 ;;		___ftdiv
 14073 ;;		___fttol
 14074 ;; This function is called by:
 14075 ;;		_Flash_Memory_Initialization
 14076 ;;		_setRF_DimmerLights
 14077 ;; This function uses a non-reentrant model
 14078 ;;
 14079                           
 14080                           
 14081                           ;psect for function _setPercentValue
 14082  14F4                     _setPercentValue:	
 14083                           
 14084                           ;incstack = 0
 14085                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14086                           ;setPercentValue@value stored from wreg
 14087  14F4  0020               	movlb	0	; select bank0
 14088  14F5  00D9               	movwf	setPercentValue@value
 14089                           
 14090                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
 14091  14F6  3000               	movlw	0
 14092  14F7  00DA               	movwf	setPercentValue@i
 14093  14F8  3060               	movlw	96
 14094  14F9  00DB               	movwf	setPercentValue@i+1
 14095  14FA  3042               	movlw	66
 14096  14FB  00DC               	movwf	setPercentValue@i+2
 14097                           
 14098                           ;Dimmer_B1.c: 771: i /= 100;
 14099  14FC  3000               	movlw	0
 14100  14FD  00AE               	movwf	___ftdiv@f2
 14101  14FE  30C8               	movlw	200
 14102  14FF  00AF               	movwf	___ftdiv@f2+1
 14103  1500  3042               	movlw	66
 14104  1501  00B0               	movwf	___ftdiv@f2+2
 14105  1502  085A               	movf	setPercentValue@i,w
 14106  1503  00B1               	movwf	___ftdiv@f1
 14107  1504  085B               	movf	setPercentValue@i+1,w
 14108  1505  00B2               	movwf	___ftdiv@f1+1
 14109  1506  085C               	movf	setPercentValue@i+2,w
 14110  1507  00B3               	movwf	___ftdiv@f1+2
 14111  1508  3187  274A  3194   	fcall	___ftdiv
 14112  150B  0020               	movlb	0	; select bank0
 14113  150C  082E               	movf	?___ftdiv,w
 14114  150D  00DA               	movwf	setPercentValue@i
 14115  150E  082F               	movf	?___ftdiv+1,w
 14116  150F  00DB               	movwf	setPercentValue@i+1
 14117  1510  0830               	movf	?___ftdiv+2,w
 14118  1511  00DC               	movwf	setPercentValue@i+2
 14119                           
 14120                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-95)*0.8))) / i));
 14121  1512  0859               	movf	setPercentValue@value,w
 14122  1513  3EFC               	addlw	252
 14123  1514  00A8               	movwf	___awtoft@c
 14124  1515  30FF               	movlw	255
 14125  1516  1803               	skipnc
 14126  1517  3000               	movlw	0
 14127  1518  00A9               	movwf	___awtoft@c+1
 14128  1519  3191  214D  3194   	fcall	___awtoft
 14129  151C  0020               	movlb	0	; select bank0
 14130  151D  0828               	movf	?___awtoft,w
 14131  151E  00B1               	movwf	___ftdiv@f1
 14132  151F  0829               	movf	?___awtoft+1,w
 14133  1520  00B2               	movwf	___ftdiv@f1+1
 14134  1521  082A               	movf	?___awtoft+2,w
 14135  1522  00B3               	movwf	___ftdiv@f1+2
 14136  1523  085A               	movf	setPercentValue@i,w
 14137  1524  00AE               	movwf	___ftdiv@f2
 14138  1525  085B               	movf	setPercentValue@i+1,w
 14139  1526  00AF               	movwf	___ftdiv@f2+1
 14140  1527  085C               	movf	setPercentValue@i+2,w
 14141  1528  00B0               	movwf	___ftdiv@f2+2
 14142  1529  3187  274A  3194   	fcall	___ftdiv
 14143  152C  0020               	movlb	0	; select bank0
 14144  152D  082E               	movf	?___ftdiv,w
 14145  152E  00CB               	movwf	___fttol@f1
 14146  152F  082F               	movf	?___ftdiv+1,w
 14147  1530  00CC               	movwf	___fttol@f1+1
 14148  1531  0830               	movf	?___ftdiv+2,w
 14149  1532  00CD               	movwf	___fttol@f1+2
 14150  1533  318D  25D1         	fcall	___fttol
 14151  1535  0020               	movlb	0	; select bank0
 14152  1536  034B               	decf	?___fttol,w
 14153  1537  3AFF               	xorlw	255
 14154  1538  3E64               	addlw	100
 14155  1539  0008               	return
 14156  153A                     __end_of_setPercentValue:	
 14157                           
 14158                           	psect	text89
 14159  0DD1                     __ptext89:	
 14160 ;; *************** function ___fttol *****************
 14161 ;; Defined at:
 14162 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;  f1              3   43[BANK0 ] float 
 14165 ;; Auto vars:     Size  Location     Type
 14166 ;;  lval            4   52[BANK0 ] unsigned long 
 14167 ;;  exp1            1   56[BANK0 ] unsigned char 
 14168 ;;  sign1           1   51[BANK0 ] unsigned char 
 14169 ;; Return value:  Size  Location     Type
 14170 ;;                  4   43[BANK0 ] long 
 14171 ;; Registers used:
 14172 ;;		wreg, status,2, status,0
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14178 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;Total ram usage:       14 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; Hardware stack levels required when called:    5
 14185 ;; This function calls:
 14186 ;;		Nothing
 14187 ;; This function is called by:
 14188 ;;		_getPercentValue
 14189 ;;		_setPercentValue
 14190 ;; This function uses a non-reentrant model
 14191 ;;
 14192                           
 14193                           
 14194                           ;psect for function ___fttol
 14195  0DD1                     ___fttol:	
 14196                           
 14197                           ;incstack = 0
 14198                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14199  0DD1  0020               	movlb	0	; select bank0
 14200  0DD2  084B               	movf	___fttol@f1,w
 14201  0DD3  00CF               	movwf	??___fttol
 14202  0DD4  084C               	movf	___fttol@f1+1,w
 14203  0DD5  00D0               	movwf	??___fttol+1
 14204  0DD6  084D               	movf	___fttol@f1+2,w
 14205  0DD7  00D1               	movwf	??___fttol+2
 14206  0DD8  1003               	clrc
 14207  0DD9  0D50               	rlf	??___fttol+1,w
 14208  0DDA  0D51               	rlf	??___fttol+2,w
 14209  0DDB  00D2               	movwf	??___fttol+3
 14210  0DDC  0852               	movf	??___fttol+3,w
 14211  0DDD  00D8               	movwf	___fttol@exp1
 14212  0DDE  08D8               	movf	___fttol@exp1,f
 14213  0DDF  1D03               	skipz
 14214  0DE0  2DEA               	goto	l5970
 14215  0DE1  3000               	movlw	0
 14216  0DE2  00CE               	movwf	?___fttol+3
 14217  0DE3  3000               	movlw	0
 14218  0DE4  00CD               	movwf	?___fttol+2
 14219  0DE5  3000               	movlw	0
 14220  0DE6  00CC               	movwf	?___fttol+1
 14221  0DE7  3000               	movlw	0
 14222  0DE8  00CB               	movwf	?___fttol
 14223  0DE9  0008               	return
 14224  0DEA                     l5970:	
 14225  0DEA  084B               	movf	___fttol@f1,w
 14226  0DEB  00CF               	movwf	??___fttol
 14227  0DEC  084C               	movf	___fttol@f1+1,w
 14228  0DED  00D0               	movwf	??___fttol+1
 14229  0DEE  084D               	movf	___fttol@f1+2,w
 14230  0DEF  00D1               	movwf	??___fttol+2
 14231  0DF0  3017               	movlw	23
 14232  0DF1                     u4495:	
 14233  0DF1  36D1               	lsrf	??___fttol+2,f
 14234  0DF2  0CD0               	rrf	??___fttol+1,f
 14235  0DF3  0CCF               	rrf	??___fttol,f
 14236  0DF4  0B89               	decfsz	9,f
 14237  0DF5  2DF1               	goto	u4495
 14238  0DF6  084F               	movf	??___fttol,w
 14239  0DF7  00D2               	movwf	??___fttol+3
 14240  0DF8  0852               	movf	??___fttol+3,w
 14241  0DF9  00D3               	movwf	___fttol@sign1
 14242  0DFA  17CC               	bsf	___fttol@f1+1,7
 14243  0DFB  30FF               	movlw	255
 14244  0DFC  05CB               	andwf	___fttol@f1,f
 14245  0DFD  30FF               	movlw	255
 14246  0DFE  05CC               	andwf	___fttol@f1+1,f
 14247  0DFF  3000               	movlw	0
 14248  0E00  05CD               	andwf	___fttol@f1+2,f
 14249  0E01  084B               	movf	___fttol@f1,w
 14250  0E02  00D4               	movwf	___fttol@lval
 14251  0E03  084C               	movf	___fttol@f1+1,w
 14252  0E04  00D5               	movwf	___fttol@lval+1
 14253  0E05  084D               	movf	___fttol@f1+2,w
 14254  0E06  00D6               	movwf	___fttol@lval+2
 14255  0E07  01D7               	clrf	___fttol@lval+3
 14256  0E08  308E               	movlw	142
 14257  0E09  02D8               	subwf	___fttol@exp1,f
 14258  0E0A  1FD8               	btfss	___fttol@exp1,7
 14259  0E0B  2E28               	goto	l5990
 14260  0E0C  0858               	movf	___fttol@exp1,w
 14261  0E0D  3A80               	xorlw	128
 14262  0E0E  3E8F               	addlw	143
 14263  0E0F  1803               	skipnc
 14264  0E10  2E1A               	goto	l5988
 14265  0E11  3000               	movlw	0
 14266  0E12  00CE               	movwf	?___fttol+3
 14267  0E13  3000               	movlw	0
 14268  0E14  00CD               	movwf	?___fttol+2
 14269  0E15  3000               	movlw	0
 14270  0E16  00CC               	movwf	?___fttol+1
 14271  0E17  3000               	movlw	0
 14272  0E18  00CB               	movwf	?___fttol
 14273  0E19  0008               	return
 14274  0E1A                     l5988:	
 14275  0E1A  3001               	movlw	1
 14276  0E1B                     u4525:	
 14277  0E1B  36D7               	lsrf	___fttol@lval+3,f
 14278  0E1C  0CD6               	rrf	___fttol@lval+2,f
 14279  0E1D  0CD5               	rrf	___fttol@lval+1,f
 14280  0E1E  0CD4               	rrf	___fttol@lval,f
 14281  0E1F  0B89               	decfsz	9,f
 14282  0E20  2E1B               	goto	u4525
 14283  0E21  3001               	movlw	1
 14284  0E22  00CF               	movwf	??___fttol
 14285  0E23  084F               	movf	??___fttol,w
 14286  0E24  07D8               	addwf	___fttol@exp1,f
 14287  0E25  1903               	btfsc	3,2
 14288  0E26  2E41               	goto	l6000
 14289  0E27  2E1A               	goto	l5988
 14290  0E28                     l5990:	
 14291  0E28  3018               	movlw	24
 14292  0E29  0258               	subwf	___fttol@exp1,w
 14293  0E2A  1C03               	skipc
 14294  0E2B  2E3E               	goto	l5998
 14295  0E2C  3000               	movlw	0
 14296  0E2D  00CE               	movwf	?___fttol+3
 14297  0E2E  3000               	movlw	0
 14298  0E2F  00CD               	movwf	?___fttol+2
 14299  0E30  3000               	movlw	0
 14300  0E31  00CC               	movwf	?___fttol+1
 14301  0E32  3000               	movlw	0
 14302  0E33  00CB               	movwf	?___fttol
 14303  0E34  0008               	return
 14304  0E35                     l5996:	
 14305  0E35  3001               	movlw	1
 14306  0E36                     u4555:	
 14307  0E36  35D4               	lslf	___fttol@lval,f
 14308  0E37  0DD5               	rlf	___fttol@lval+1,f
 14309  0E38  0DD6               	rlf	___fttol@lval+2,f
 14310  0E39  0DD7               	rlf	___fttol@lval+3,f
 14311  0E3A  0B89               	decfsz	9,f
 14312  0E3B  2E36               	goto	u4555
 14313  0E3C  3001               	movlw	1
 14314  0E3D  02D8               	subwf	___fttol@exp1,f
 14315  0E3E                     l5998:	
 14316  0E3E  08D8               	movf	___fttol@exp1,f
 14317  0E3F  1D03               	skipz
 14318  0E40  2E35               	goto	l5996
 14319  0E41                     l6000:	
 14320  0E41  0853               	movf	___fttol@sign1,w
 14321  0E42  1903               	btfsc	3,2
 14322  0E43  2E4F               	goto	l6004
 14323  0E44  09D4               	comf	___fttol@lval,f
 14324  0E45  09D5               	comf	___fttol@lval+1,f
 14325  0E46  09D6               	comf	___fttol@lval+2,f
 14326  0E47  09D7               	comf	___fttol@lval+3,f
 14327  0E48  0AD4               	incf	___fttol@lval,f
 14328  0E49  1903               	skipnz
 14329  0E4A  0AD5               	incf	___fttol@lval+1,f
 14330  0E4B  1903               	skipnz
 14331  0E4C  0AD6               	incf	___fttol@lval+2,f
 14332  0E4D  1903               	skipnz
 14333  0E4E  0AD7               	incf	___fttol@lval+3,f
 14334  0E4F                     l6004:	
 14335  0E4F  0857               	movf	___fttol@lval+3,w
 14336  0E50  00CE               	movwf	?___fttol+3
 14337  0E51  0856               	movf	___fttol@lval+2,w
 14338  0E52  00CD               	movwf	?___fttol+2
 14339  0E53  0855               	movf	___fttol@lval+1,w
 14340  0E54  00CC               	movwf	?___fttol+1
 14341  0E55  0854               	movf	___fttol@lval,w
 14342  0E56  00CB               	movwf	?___fttol
 14343  0E57  0008               	return
 14344  0E58                     __end_of___fttol:	
 14345                           
 14346                           	psect	text90
 14347  074A                     __ptext90:	
 14348 ;; *************** function ___ftdiv *****************
 14349 ;; Defined at:
 14350 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14351 ;; Parameters:    Size  Location     Type
 14352 ;;  f2              3   14[BANK0 ] float 
 14353 ;;  f1              3   17[BANK0 ] float 
 14354 ;; Auto vars:     Size  Location     Type
 14355 ;;  f3              3   25[BANK0 ] float 
 14356 ;;  sign            1   29[BANK0 ] unsigned char 
 14357 ;;  exp             1   28[BANK0 ] unsigned char 
 14358 ;;  cntr            1   24[BANK0 ] unsigned char 
 14359 ;; Return value:  Size  Location     Type
 14360 ;;                  3   14[BANK0 ] float 
 14361 ;; Registers used:
 14362 ;;		wreg, status,2, status,0, pclath, cstack
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14368 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;Total ram usage:       16 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    6
 14375 ;; This function calls:
 14376 ;;		___ftpack
 14377 ;; This function is called by:
 14378 ;;		_getPercentValue
 14379 ;;		_setPercentValue
 14380 ;; This function uses a non-reentrant model
 14381 ;;
 14382                           
 14383                           
 14384                           ;psect for function ___ftdiv
 14385  074A                     ___ftdiv:	
 14386                           
 14387                           ;incstack = 0
 14388                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14389  074A  0020               	movlb	0	; select bank0
 14390  074B  0831               	movf	___ftdiv@f1,w
 14391  074C  00B4               	movwf	??___ftdiv
 14392  074D  0832               	movf	___ftdiv@f1+1,w
 14393  074E  00B5               	movwf	??___ftdiv+1
 14394  074F  0833               	movf	___ftdiv@f1+2,w
 14395  0750  00B6               	movwf	??___ftdiv+2
 14396  0751  1003               	clrc
 14397  0752  0D35               	rlf	??___ftdiv+1,w
 14398  0753  0D36               	rlf	??___ftdiv+2,w
 14399  0754  00B7               	movwf	??___ftdiv+3
 14400  0755  0837               	movf	??___ftdiv+3,w
 14401  0756  00BC               	movwf	___ftdiv@exp
 14402  0757  08BC               	movf	___ftdiv@exp,f
 14403  0758  1D03               	skipz
 14404  0759  2F61               	goto	l5878
 14405  075A  3000               	movlw	0
 14406  075B  00AE               	movwf	?___ftdiv
 14407  075C  3000               	movlw	0
 14408  075D  00AF               	movwf	?___ftdiv+1
 14409  075E  3000               	movlw	0
 14410  075F  00B0               	movwf	?___ftdiv+2
 14411  0760  0008               	return
 14412  0761                     l5878:	
 14413  0761  082E               	movf	___ftdiv@f2,w
 14414  0762  00B4               	movwf	??___ftdiv
 14415  0763  082F               	movf	___ftdiv@f2+1,w
 14416  0764  00B5               	movwf	??___ftdiv+1
 14417  0765  0830               	movf	___ftdiv@f2+2,w
 14418  0766  00B6               	movwf	??___ftdiv+2
 14419  0767  1003               	clrc
 14420  0768  0D35               	rlf	??___ftdiv+1,w
 14421  0769  0D36               	rlf	??___ftdiv+2,w
 14422  076A  00B7               	movwf	??___ftdiv+3
 14423  076B  0837               	movf	??___ftdiv+3,w
 14424  076C  00BD               	movwf	___ftdiv@sign
 14425  076D  08BD               	movf	___ftdiv@sign,f
 14426  076E  1D03               	skipz
 14427  076F  2F77               	goto	l5884
 14428  0770  3000               	movlw	0
 14429  0771  00AE               	movwf	?___ftdiv
 14430  0772  3000               	movlw	0
 14431  0773  00AF               	movwf	?___ftdiv+1
 14432  0774  3000               	movlw	0
 14433  0775  00B0               	movwf	?___ftdiv+2
 14434  0776  0008               	return
 14435  0777                     l5884:	
 14436  0777  3000               	movlw	0
 14437  0778  00B9               	movwf	___ftdiv@f3
 14438  0779  3000               	movlw	0
 14439  077A  00BA               	movwf	___ftdiv@f3+1
 14440  077B  3000               	movlw	0
 14441  077C  00BB               	movwf	___ftdiv@f3+2
 14442  077D  3089               	movlw	137
 14443  077E  073D               	addwf	___ftdiv@sign,w
 14444  077F  00B4               	movwf	??___ftdiv
 14445  0780  0834               	movf	??___ftdiv,w
 14446  0781  02BC               	subwf	___ftdiv@exp,f
 14447  0782  0831               	movf	___ftdiv@f1,w
 14448  0783  00B4               	movwf	??___ftdiv
 14449  0784  0832               	movf	___ftdiv@f1+1,w
 14450  0785  00B5               	movwf	??___ftdiv+1
 14451  0786  0833               	movf	___ftdiv@f1+2,w
 14452  0787  00B6               	movwf	??___ftdiv+2
 14453  0788  3010               	movlw	16
 14454  0789                     u4305:	
 14455  0789  36B6               	lsrf	??___ftdiv+2,f
 14456  078A  0CB5               	rrf	??___ftdiv+1,f
 14457  078B  0CB4               	rrf	??___ftdiv,f
 14458  078C  0B89               	decfsz	9,f
 14459  078D  2F89               	goto	u4305
 14460  078E  0834               	movf	??___ftdiv,w
 14461  078F  00B7               	movwf	??___ftdiv+3
 14462  0790  0837               	movf	??___ftdiv+3,w
 14463  0791  00BD               	movwf	___ftdiv@sign
 14464  0792  082E               	movf	___ftdiv@f2,w
 14465  0793  00B4               	movwf	??___ftdiv
 14466  0794  082F               	movf	___ftdiv@f2+1,w
 14467  0795  00B5               	movwf	??___ftdiv+1
 14468  0796  0830               	movf	___ftdiv@f2+2,w
 14469  0797  00B6               	movwf	??___ftdiv+2
 14470  0798  3010               	movlw	16
 14471  0799                     u4315:	
 14472  0799  36B6               	lsrf	??___ftdiv+2,f
 14473  079A  0CB5               	rrf	??___ftdiv+1,f
 14474  079B  0CB4               	rrf	??___ftdiv,f
 14475  079C  0B89               	decfsz	9,f
 14476  079D  2F99               	goto	u4315
 14477  079E  0834               	movf	??___ftdiv,w
 14478  079F  00B7               	movwf	??___ftdiv+3
 14479  07A0  0837               	movf	??___ftdiv+3,w
 14480  07A1  06BD               	xorwf	___ftdiv@sign,f
 14481  07A2  3080               	movlw	128
 14482  07A3  00B4               	movwf	??___ftdiv
 14483  07A4  0834               	movf	??___ftdiv,w
 14484  07A5  05BD               	andwf	___ftdiv@sign,f
 14485  07A6  17B2               	bsf	___ftdiv@f1+1,7
 14486  07A7  30FF               	movlw	255
 14487  07A8  05B1               	andwf	___ftdiv@f1,f
 14488  07A9  30FF               	movlw	255
 14489  07AA  05B2               	andwf	___ftdiv@f1+1,f
 14490  07AB  3000               	movlw	0
 14491  07AC  05B3               	andwf	___ftdiv@f1+2,f
 14492  07AD  17AF               	bsf	___ftdiv@f2+1,7
 14493  07AE  30FF               	movlw	255
 14494  07AF  05AE               	andwf	___ftdiv@f2,f
 14495  07B0  30FF               	movlw	255
 14496  07B1  05AF               	andwf	___ftdiv@f2+1,f
 14497  07B2  3000               	movlw	0
 14498  07B3  05B0               	andwf	___ftdiv@f2+2,f
 14499  07B4  3018               	movlw	24
 14500  07B5  00B4               	movwf	??___ftdiv
 14501  07B6  0834               	movf	??___ftdiv,w
 14502  07B7  00B8               	movwf	___ftdiv@cntr
 14503  07B8                     l5898:	
 14504  07B8  3001               	movlw	1
 14505  07B9                     u4325:	
 14506  07B9  35B9               	lslf	___ftdiv@f3,f
 14507  07BA  0DBA               	rlf	___ftdiv@f3+1,f
 14508  07BB  0DBB               	rlf	___ftdiv@f3+2,f
 14509  07BC  0B89               	decfsz	9,f
 14510  07BD  2FB9               	goto	u4325
 14511  07BE  0830               	movf	___ftdiv@f2+2,w
 14512  07BF  0233               	subwf	___ftdiv@f1+2,w
 14513  07C0  1D03               	skipz
 14514  07C1  2FC8               	goto	u4335
 14515  07C2  082F               	movf	___ftdiv@f2+1,w
 14516  07C3  0232               	subwf	___ftdiv@f1+1,w
 14517  07C4  1D03               	skipz
 14518  07C5  2FC8               	goto	u4335
 14519  07C6  082E               	movf	___ftdiv@f2,w
 14520  07C7  0231               	subwf	___ftdiv@f1,w
 14521  07C8                     u4335:	
 14522  07C8  1C03               	skipc
 14523  07C9  2FD1               	goto	l5906
 14524  07CA  082E               	movf	___ftdiv@f2,w
 14525  07CB  02B1               	subwf	___ftdiv@f1,f
 14526  07CC  082F               	movf	___ftdiv@f2+1,w
 14527  07CD  3BB2               	subwfb	___ftdiv@f1+1,f
 14528  07CE  0830               	movf	___ftdiv@f2+2,w
 14529  07CF  3BB3               	subwfb	___ftdiv@f1+2,f
 14530  07D0  1439               	bsf	___ftdiv@f3,0
 14531  07D1                     l5906:	
 14532  07D1  3001               	movlw	1
 14533  07D2                     u4345:	
 14534  07D2  35B1               	lslf	___ftdiv@f1,f
 14535  07D3  0DB2               	rlf	___ftdiv@f1+1,f
 14536  07D4  0DB3               	rlf	___ftdiv@f1+2,f
 14537  07D5  0B89               	decfsz	9,f
 14538  07D6  2FD2               	goto	u4345
 14539  07D7  3001               	movlw	1
 14540  07D8  02B8               	subwf	___ftdiv@cntr,f
 14541  07D9  1D03               	btfss	3,2
 14542  07DA  2FB8               	goto	l5898
 14543  07DB  0839               	movf	___ftdiv@f3,w
 14544  07DC  00A0               	movwf	___ftpack@arg
 14545  07DD  083A               	movf	___ftdiv@f3+1,w
 14546  07DE  00A1               	movwf	___ftpack@arg+1
 14547  07DF  083B               	movf	___ftdiv@f3+2,w
 14548  07E0  00A2               	movwf	___ftpack@arg+2
 14549  07E1  083C               	movf	___ftdiv@exp,w
 14550  07E2  00B4               	movwf	??___ftdiv
 14551  07E3  0834               	movf	??___ftdiv,w
 14552  07E4  00A3               	movwf	___ftpack@exp
 14553  07E5  083D               	movf	___ftdiv@sign,w
 14554  07E6  00B5               	movwf	??___ftdiv+1
 14555  07E7  0835               	movf	??___ftdiv+1,w
 14556  07E8  00A4               	movwf	___ftpack@sign
 14557  07E9  3188  20A0         	fcall	___ftpack
 14558  07EB  0020               	movlb	0	; select bank0
 14559  07EC  0820               	movf	?___ftpack,w
 14560  07ED  00AE               	movwf	?___ftdiv
 14561  07EE  0821               	movf	?___ftpack+1,w
 14562  07EF  00AF               	movwf	?___ftdiv+1
 14563  07F0  0822               	movf	?___ftpack+2,w
 14564  07F1  00B0               	movwf	?___ftdiv+2
 14565  07F2  0008               	return
 14566  07F3                     __end_of___ftdiv:	
 14567                           
 14568                           	psect	text91
 14569  114D                     __ptext91:	
 14570 ;; *************** function ___awtoft *****************
 14571 ;; Defined at:
 14572 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14573 ;; Parameters:    Size  Location     Type
 14574 ;;  c               2    8[BANK0 ] int 
 14575 ;; Auto vars:     Size  Location     Type
 14576 ;;  sign            1   13[BANK0 ] unsigned char 
 14577 ;; Return value:  Size  Location     Type
 14578 ;;                  3    8[BANK0 ] float 
 14579 ;; Registers used:
 14580 ;;		wreg, status,2, status,0, pclath, cstack
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14586 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;Total ram usage:        6 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    6
 14593 ;; This function calls:
 14594 ;;		___ftpack
 14595 ;; This function is called by:
 14596 ;;		_getPercentValue
 14597 ;;		_setPercentValue
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           
 14602                           ;psect for function ___awtoft
 14603  114D                     ___awtoft:	
 14604                           
 14605                           ;incstack = 0
 14606                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14607  114D  0020               	movlb	0	; select bank0
 14608  114E  01AD               	clrf	___awtoft@sign
 14609  114F  1FA9               	btfss	___awtoft@c+1,7
 14610  1150  2958               	goto	l5796
 14611  1151  09A8               	comf	___awtoft@c,f
 14612  1152  09A9               	comf	___awtoft@c+1,f
 14613  1153  0AA8               	incf	___awtoft@c,f
 14614  1154  1903               	skipnz
 14615  1155  0AA9               	incf	___awtoft@c+1,f
 14616  1156  01AD               	clrf	___awtoft@sign
 14617  1157  0AAD               	incf	___awtoft@sign,f
 14618  1158                     l5796:	
 14619  1158  0828               	movf	___awtoft@c,w
 14620  1159  00A0               	movwf	___ftpack@arg
 14621  115A  0829               	movf	___awtoft@c+1,w
 14622  115B  00A1               	movwf	___ftpack@arg+1
 14623  115C  01A2               	clrf	___ftpack@arg+2
 14624  115D  308E               	movlw	142
 14625  115E  00AB               	movwf	??___awtoft
 14626  115F  082B               	movf	??___awtoft,w
 14627  1160  00A3               	movwf	___ftpack@exp
 14628  1161  082D               	movf	___awtoft@sign,w
 14629  1162  00AC               	movwf	??___awtoft+1
 14630  1163  082C               	movf	??___awtoft+1,w
 14631  1164  00A4               	movwf	___ftpack@sign
 14632  1165  3188  20A0         	fcall	___ftpack
 14633  1167  0020               	movlb	0	; select bank0
 14634  1168  0820               	movf	?___ftpack,w
 14635  1169  00A8               	movwf	?___awtoft
 14636  116A  0821               	movf	?___ftpack+1,w
 14637  116B  00A9               	movwf	?___awtoft+1
 14638  116C  0822               	movf	?___ftpack+2,w
 14639  116D  00AA               	movwf	?___awtoft+2
 14640  116E  0008               	return
 14641  116F                     __end_of___awtoft:	
 14642                           
 14643                           	psect	text92
 14644  08A0                     __ptext92:	
 14645 ;; *************** function ___ftpack *****************
 14646 ;; Defined at:
 14647 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14648 ;; Parameters:    Size  Location     Type
 14649 ;;  arg             3    0[BANK0 ] unsigned um
 14650 ;;  exp             1    3[BANK0 ] unsigned char 
 14651 ;;  sign            1    4[BANK0 ] unsigned char 
 14652 ;; Auto vars:     Size  Location     Type
 14653 ;;		None
 14654 ;; Return value:  Size  Location     Type
 14655 ;;                  3    0[BANK0 ] float 
 14656 ;; Registers used:
 14657 ;;		wreg, status,2, status,0
 14658 ;; Tracked objects:
 14659 ;;		On entry : 0/0
 14660 ;;		On exit  : 0/0
 14661 ;;		Unchanged: 0/0
 14662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14663 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;Total ram usage:        8 bytes
 14668 ;; Hardware stack levels used:    1
 14669 ;; Hardware stack levels required when called:    5
 14670 ;; This function calls:
 14671 ;;		Nothing
 14672 ;; This function is called by:
 14673 ;;		___awtoft
 14674 ;;		___ftadd
 14675 ;;		___ftdiv
 14676 ;;		___ftmul
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           
 14681                           ;psect for function ___ftpack
 14682  08A0                     ___ftpack:	
 14683                           
 14684                           ;incstack = 0
 14685                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14686  08A0  0020               	movlb	0	; select bank0
 14687  08A1  0823               	movf	___ftpack@exp,w
 14688  08A2  1903               	btfsc	3,2
 14689  08A3  28A9               	goto	l5762
 14690  08A4  0822               	movf	___ftpack@arg+2,w
 14691  08A5  0421               	iorwf	___ftpack@arg+1,w
 14692  08A6  0420               	iorwf	___ftpack@arg,w
 14693  08A7  1D03               	skipz
 14694  08A8  28BA               	goto	l5768
 14695  08A9                     l5762:	
 14696  08A9  3000               	movlw	0
 14697  08AA  00A0               	movwf	?___ftpack
 14698  08AB  3000               	movlw	0
 14699  08AC  00A1               	movwf	?___ftpack+1
 14700  08AD  3000               	movlw	0
 14701  08AE  00A2               	movwf	?___ftpack+2
 14702  08AF  0008               	return
 14703  08B0                     l5766:	
 14704  08B0  3001               	movlw	1
 14705  08B1  00A5               	movwf	??___ftpack
 14706  08B2  0825               	movf	??___ftpack,w
 14707  08B3  07A3               	addwf	___ftpack@exp,f
 14708  08B4  3001               	movlw	1
 14709  08B5                     u3955:	
 14710  08B5  36A2               	lsrf	___ftpack@arg+2,f
 14711  08B6  0CA1               	rrf	___ftpack@arg+1,f
 14712  08B7  0CA0               	rrf	___ftpack@arg,f
 14713  08B8  0B89               	decfsz	9,f
 14714  08B9  28B5               	goto	u3955
 14715  08BA                     l5768:	
 14716  08BA  30FE               	movlw	254
 14717  08BB  0522               	andwf	___ftpack@arg+2,w
 14718  08BC  1903               	btfsc	3,2
 14719  08BD  28D3               	goto	l3146
 14720  08BE  28B0               	goto	l5766
 14721  08BF                     l5770:	
 14722  08BF  3001               	movlw	1
 14723  08C0  00A5               	movwf	??___ftpack
 14724  08C1  0825               	movf	??___ftpack,w
 14725  08C2  07A3               	addwf	___ftpack@exp,f
 14726  08C3  3001               	movlw	1
 14727  08C4  07A0               	addwf	___ftpack@arg,f
 14728  08C5  3000               	movlw	0
 14729  08C6  1803               	skipnc
 14730  08C7  3001               	movlw	1
 14731  08C8  07A1               	addwf	___ftpack@arg+1,f
 14732  08C9  3000               	movlw	0
 14733  08CA  1803               	skipnc
 14734  08CB  3001               	movlw	1
 14735  08CC  07A2               	addwf	___ftpack@arg+2,f
 14736  08CD  3001               	movlw	1
 14737  08CE                     u3975:	
 14738  08CE  36A2               	lsrf	___ftpack@arg+2,f
 14739  08CF  0CA1               	rrf	___ftpack@arg+1,f
 14740  08D0  0CA0               	rrf	___ftpack@arg,f
 14741  08D1  0B89               	decfsz	9,f
 14742  08D2  28CE               	goto	u3975
 14743  08D3                     l3146:	
 14744  08D3  30FF               	movlw	255
 14745  08D4  0522               	andwf	___ftpack@arg+2,w
 14746  08D5  1903               	btfsc	3,2
 14747  08D6  28E0               	goto	l5778
 14748  08D7  28BF               	goto	l5770
 14749  08D8                     l5776:	
 14750  08D8  3001               	movlw	1
 14751  08D9  02A3               	subwf	___ftpack@exp,f
 14752  08DA  3001               	movlw	1
 14753  08DB                     u3995:	
 14754  08DB  35A0               	lslf	___ftpack@arg,f
 14755  08DC  0DA1               	rlf	___ftpack@arg+1,f
 14756  08DD  0DA2               	rlf	___ftpack@arg+2,f
 14757  08DE  0B89               	decfsz	9,f
 14758  08DF  28DB               	goto	u3995
 14759  08E0                     l5778:	
 14760  08E0  1FA1               	btfss	___ftpack@arg+1,7
 14761  08E1  28D8               	goto	l5776
 14762  08E2  1823               	btfsc	___ftpack@exp,0
 14763  08E3  28EA               	goto	l3152
 14764  08E4  30FF               	movlw	255
 14765  08E5  05A0               	andwf	___ftpack@arg,f
 14766  08E6  307F               	movlw	127
 14767  08E7  05A1               	andwf	___ftpack@arg+1,f
 14768  08E8  30FF               	movlw	255
 14769  08E9  05A2               	andwf	___ftpack@arg+2,f
 14770  08EA                     l3152:	
 14771  08EA  1003               	clrc
 14772  08EB  0CA3               	rrf	___ftpack@exp,f
 14773  08EC  0823               	movf	___ftpack@exp,w
 14774  08ED  00A5               	movwf	??___ftpack
 14775  08EE  01A6               	clrf	??___ftpack+1
 14776  08EF  01A7               	clrf	??___ftpack+2
 14777  08F0  3010               	movlw	16
 14778  08F1                     u4025:	
 14779  08F1  35A5               	lslf	??___ftpack,f
 14780  08F2  0DA6               	rlf	??___ftpack+1,f
 14781  08F3  0DA7               	rlf	??___ftpack+2,f
 14782  08F4  0B89               	decfsz	9,f
 14783  08F5  28F1               	goto	u4025
 14784  08F6  0825               	movf	??___ftpack,w
 14785  08F7  04A0               	iorwf	___ftpack@arg,f
 14786  08F8  0826               	movf	??___ftpack+1,w
 14787  08F9  04A1               	iorwf	___ftpack@arg+1,f
 14788  08FA  0827               	movf	??___ftpack+2,w
 14789  08FB  04A2               	iorwf	___ftpack@arg+2,f
 14790  08FC  0824               	movf	___ftpack@sign,w
 14791  08FD  1903               	btfsc	3,2
 14792  08FE  0008               	return
 14793  08FF  17A2               	bsf	___ftpack@arg+2,7
 14794  0900  0008               	return
 14795  0901                     __end_of___ftpack:	
 14796                           
 14797                           	psect	text93
 14798  1D41                     __ptext93:	
 14799 ;; *************** function _setRFSW_Status *****************
 14800 ;; Defined at:
 14801 ;;		line 377 in file "../src/RF_Control_B1.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;  sw              1    wreg     unsigned char 
 14804 ;;  command         1    2[BANK0 ] unsigned char 
 14805 ;; Auto vars:     Size  Location     Type
 14806 ;;  sw              1    3[BANK0 ] unsigned char 
 14807 ;; Return value:  Size  Location     Type
 14808 ;;		None               void
 14809 ;; Registers used:
 14810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14811 ;; Tracked objects:
 14812 ;;		On entry : 0/0
 14813 ;;		On exit  : 0/0
 14814 ;;		Unchanged: 0/0
 14815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14816 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;Total ram usage:        2 bytes
 14821 ;; Hardware stack levels used:    1
 14822 ;; Hardware stack levels required when called:    6
 14823 ;; This function calls:
 14824 ;;		_RfSWPointSelect
 14825 ;; This function is called by:
 14826 ;;		_DlyOff_Main
 14827 ;;		_setDimmerLights_ERROR
 14828 ;;		_setControl_Lights_Table
 14829 ;;		_Sw_DimmerOnFunc
 14830 ;;		_Sw_DimmerAdjFunc
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           
 14835                           ;psect for function _setRFSW_Status
 14836  1D41                     _setRFSW_Status:	
 14837                           
 14838                           ;incstack = 0
 14839                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14840                           ;setRFSW_Status@sw stored from wreg
 14841  1D41  0020               	movlb	0	; select bank0
 14842  1D42  00A3               	movwf	setRFSW_Status@sw
 14843                           
 14844                           ;RF_Control_B1.c: 378: RfSWPointSelect(sw);
 14845  1D43  0823               	movf	setRFSW_Status@sw,w
 14846  1D44  3190  20CC         	fcall	_RfSWPointSelect
 14847                           
 14848                           ;RF_Control_B1.c: 379: RFSW->Status = command;
 14849  1D46  0021               	movlb	1	; select bank1
 14850  1D47  084D               	movf	_RFSW^(0+128),w
 14851  1D48  0086               	movwf	6
 14852  1D49  0187               	clrf	7
 14853  1D4A  0020               	movlb	0	; select bank0
 14854  1D4B  0822               	movf	setRFSW_Status@command,w
 14855  1D4C  1001               	bcf	1,0
 14856  1D4D  1D03               	skipz
 14857  1D4E  1401               	bsf	1,0
 14858  1D4F  0008               	return
 14859  1D50                     __end_of_setRFSW_Status:	
 14860                           
 14861                           	psect	text94
 14862  10CC                     __ptext94:	
 14863 ;; *************** function _RfSWPointSelect *****************
 14864 ;; Defined at:
 14865 ;;		line 312 in file "../src/RF_Control_B1.c"
 14866 ;; Parameters:    Size  Location     Type
 14867 ;;  sw              1    wreg     unsigned char 
 14868 ;; Auto vars:     Size  Location     Type
 14869 ;;  sw              1    1[BANK0 ] unsigned char 
 14870 ;; Return value:  Size  Location     Type
 14871 ;;		None               void
 14872 ;; Registers used:
 14873 ;;		wreg
 14874 ;; Tracked objects:
 14875 ;;		On entry : 0/0
 14876 ;;		On exit  : 0/0
 14877 ;;		Unchanged: 0/0
 14878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14882 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14883 ;;Total ram usage:        2 bytes
 14884 ;; Hardware stack levels used:    1
 14885 ;; Hardware stack levels required when called:    5
 14886 ;; This function calls:
 14887 ;;		Nothing
 14888 ;; This function is called by:
 14889 ;;		_setRFSW_Control
 14890 ;;		_setRFSW_AdjControl
 14891 ;;		_setRFSW_Status
 14892 ;; This function uses a non-reentrant model
 14893 ;;
 14894                           
 14895                           
 14896                           ;psect for function _RfSWPointSelect
 14897  10CC                     _RfSWPointSelect:	
 14898                           
 14899                           ;incstack = 0
 14900                           ; Regs used in _RfSWPointSelect: [wreg]
 14901                           ;RfSWPointSelect@sw stored from wreg
 14902  10CC  0020               	movlb	0	; select bank0
 14903  10CD  00A1               	movwf	RfSWPointSelect@sw
 14904                           
 14905                           ;RF_Control_B1.c: 314: if (sw == 1) {
 14906  10CE  0821               	movf	RfSWPointSelect@sw,w
 14907  10CF  3A01               	xorlw	1
 14908  10D0  1D03               	skipz
 14909  10D1  28D7               	goto	l2394
 14910                           
 14911                           ;RF_Control_B1.c: 315: RFSW = &RFSW1;
 14912  10D2  30EC               	movlw	_RFSW1& (0+255)
 14913  10D3  00A0               	movwf	??_RfSWPointSelect
 14914  10D4  0820               	movf	??_RfSWPointSelect,w
 14915  10D5  0021               	movlb	1	; select bank1
 14916  10D6  00CD               	movwf	_RFSW^(0+128)
 14917  10D7                     l2394:	
 14918                           
 14919                           ;RF_Control_B1.c: 316: }
 14920                           ;RF_Control_B1.c: 319: if (sw == 2) {
 14921  10D7  0020               	movlb	0	; select bank0
 14922  10D8  0821               	movf	RfSWPointSelect@sw,w
 14923  10D9  3A02               	xorlw	2
 14924  10DA  1D03               	skipz
 14925  10DB  28E1               	goto	l2395
 14926                           
 14927                           ;RF_Control_B1.c: 320: RFSW = &RFSW2;
 14928  10DC  30ED               	movlw	_RFSW2& (0+255)
 14929  10DD  00A0               	movwf	??_RfSWPointSelect
 14930  10DE  0820               	movf	??_RfSWPointSelect,w
 14931  10DF  0021               	movlb	1	; select bank1
 14932  10E0  00CD               	movwf	_RFSW^(0+128)
 14933  10E1                     l2395:	
 14934                           
 14935                           ;RF_Control_B1.c: 321: }
 14936                           ;RF_Control_B1.c: 324: if (sw == 3) {
 14937  10E1  0020               	movlb	0	; select bank0
 14938  10E2  0821               	movf	RfSWPointSelect@sw,w
 14939  10E3  3A03               	xorlw	3
 14940  10E4  1D03               	skipz
 14941  10E5  0008               	return
 14942                           
 14943                           ;RF_Control_B1.c: 325: RFSW = &RFSW3;
 14944  10E6  30EE               	movlw	_RFSW3& (0+255)
 14945  10E7  00A0               	movwf	??_RfSWPointSelect
 14946  10E8  0820               	movf	??_RfSWPointSelect,w
 14947  10E9  0021               	movlb	1	; select bank1
 14948  10EA  00CD               	movwf	_RFSW^(0+128)
 14949  10EB  0008               	return
 14950  10EC                     __end_of_RfSWPointSelect:	
 14951                           
 14952                           	psect	text95
 14953  1DAB                     __ptext95:	
 14954 ;; *************** function _setDimmerLights_Trigger *****************
 14955 ;; Defined at:
 14956 ;;		line 705 in file "../src/Dimmer_B1.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;  lights          1    wreg     unsigned char 
 14959 ;;  command         1    2[BANK0 ] unsigned char 
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  lights          1    3[BANK0 ] unsigned char 
 14962 ;; Return value:  Size  Location     Type
 14963 ;;		None               void
 14964 ;; Registers used:
 14965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14966 ;; Tracked objects:
 14967 ;;		On entry : 0/0
 14968 ;;		On exit  : 0/0
 14969 ;;		Unchanged: 0/0
 14970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14971 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;Total ram usage:        2 bytes
 14976 ;; Hardware stack levels used:    1
 14977 ;; Hardware stack levels required when called:    6
 14978 ;; This function calls:
 14979 ;;		_DimmerLightsPointSelect
 14980 ;; This function is called by:
 14981 ;;		_DlyOff_Main
 14982 ;;		_setRFSW_Control
 14983 ;;		_Sw_DimmerOnFunc
 14984 ;;		_Sw_DimmerOffFunc
 14985 ;; This function uses a non-reentrant model
 14986 ;;
 14987                           
 14988                           
 14989                           ;psect for function _setDimmerLights_Trigger
 14990  1DAB                     _setDimmerLights_Trigger:	
 14991                           
 14992                           ;incstack = 0
 14993                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14994                           ;setDimmerLights_Trigger@lights stored from wreg
 14995  1DAB  0020               	movlb	0	; select bank0
 14996  1DAC  00A3               	movwf	setDimmerLights_Trigger@lights
 14997                           
 14998                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14999  1DAD  0823               	movf	setDimmerLights_Trigger@lights,w
 15000  1DAE  319F  2755         	fcall	_DimmerLightsPointSelect
 15001                           
 15002                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 15003  1DB0  087B               	movf	_DimmerLights,w
 15004  1DB1  3E08               	addlw	8
 15005  1DB2  0086               	movwf	6
 15006  1DB3  3001               	movlw	1	; select bank2/3
 15007  1DB4  0087               	movwf	7
 15008  1DB5  0020               	movlb	0	; select bank0
 15009  1DB6  0822               	movf	setDimmerLights_Trigger@command,w
 15010  1DB7  1101               	bcf	1,2
 15011  1DB8  1D03               	skipz
 15012  1DB9  1501               	bsf	1,2
 15013  1DBA  0008               	return
 15014  1DBB                     __end_of_setDimmerLights_Trigger:	
 15015                           
 15016                           	psect	text96
 15017  1D9B                     __ptext96:	
 15018 ;; *************** function _setDimmerLights_Switch *****************
 15019 ;; Defined at:
 15020 ;;		line 693 in file "../src/Dimmer_B1.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;  lights          1    wreg     unsigned char 
 15023 ;;  command         1    2[BANK0 ] unsigned char 
 15024 ;; Auto vars:     Size  Location     Type
 15025 ;;  lights          1    3[BANK0 ] unsigned char 
 15026 ;; Return value:  Size  Location     Type
 15027 ;;		None               void
 15028 ;; Registers used:
 15029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15030 ;; Tracked objects:
 15031 ;;		On entry : 0/0
 15032 ;;		On exit  : 0/0
 15033 ;;		Unchanged: 0/0
 15034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15035 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;Total ram usage:        2 bytes
 15040 ;; Hardware stack levels used:    1
 15041 ;; Hardware stack levels required when called:    6
 15042 ;; This function calls:
 15043 ;;		_DimmerLightsPointSelect
 15044 ;; This function is called by:
 15045 ;;		_DlyOff_Main
 15046 ;;		_setRFSW_Control
 15047 ;;		_Sw_DimmerOnFunc
 15048 ;;		_Sw_DimmerOffFunc
 15049 ;; This function uses a non-reentrant model
 15050 ;;
 15051                           
 15052                           
 15053                           ;psect for function _setDimmerLights_Switch
 15054  1D9B                     _setDimmerLights_Switch:	
 15055                           
 15056                           ;incstack = 0
 15057                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15058                           ;setDimmerLights_Switch@lights stored from wreg
 15059  1D9B  0020               	movlb	0	; select bank0
 15060  1D9C  00A3               	movwf	setDimmerLights_Switch@lights
 15061                           
 15062                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 15063  1D9D  0823               	movf	setDimmerLights_Switch@lights,w
 15064  1D9E  319F  2755         	fcall	_DimmerLightsPointSelect
 15065                           
 15066                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 15067  1DA0  087B               	movf	_DimmerLights,w
 15068  1DA1  3E08               	addlw	8
 15069  1DA2  0086               	movwf	6
 15070  1DA3  3001               	movlw	1	; select bank2/3
 15071  1DA4  0087               	movwf	7
 15072  1DA5  0020               	movlb	0	; select bank0
 15073  1DA6  0822               	movf	setDimmerLights_Switch@command,w
 15074  1DA7  1081               	bcf	1,1
 15075  1DA8  1D03               	skipz
 15076  1DA9  1481               	bsf	1,1
 15077  1DAA  0008               	return
 15078  1DAB                     __end_of_setDimmerLights_Switch:	
 15079                           
 15080                           	psect	text97
 15081  1F55                     __ptext97:	
 15082 ;; *************** function _DimmerLightsPointSelect *****************
 15083 ;; Defined at:
 15084 ;;		line 315 in file "../src/Dimmer_B1.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;  lights          1    wreg     unsigned char 
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;  lights          1    1[BANK0 ] unsigned char 
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;Total ram usage:        2 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    5
 15105 ;; This function calls:
 15106 ;;		Nothing
 15107 ;; This function is called by:
 15108 ;;		_setDimmerLights_Initialization
 15109 ;;		_setDimmerLights_Main
 15110 ;;		_setDimmerLights_ERROR
 15111 ;;		_setDimmerLights_TriggerERROR
 15112 ;;		_setDimmerLights
 15113 ;;		_setDimmerLights_Adj
 15114 ;;		_setDimmerLights_AdjRF
 15115 ;;		_setDimmerLights_Switch
 15116 ;;		_setDimmerLights_AdjGo
 15117 ;;		_setDimmerLights_Trigger
 15118 ;;		_setDimmerLights_TriggerAdj
 15119 ;;		_setDimmerLights_GO
 15120 ;;		_setDimmerLights_MaxmumValue
 15121 ;;		_setDimmerLights_Clear
 15122 ;; This function uses a non-reentrant model
 15123 ;;
 15124                           
 15125                           
 15126                           ;psect for function _DimmerLightsPointSelect
 15127  1F55                     _DimmerLightsPointSelect:	
 15128                           
 15129                           ;incstack = 0
 15130                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15131                           ;DimmerLightsPointSelect@lights stored from wreg
 15132  1F55  0020               	movlb	0	; select bank0
 15133  1F56  00A1               	movwf	DimmerLightsPointSelect@lights
 15134                           
 15135                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15136  1F57  0821               	movf	DimmerLightsPointSelect@lights,w
 15137  1F58  3A01               	xorlw	1
 15138  1F59  1D03               	skipz
 15139  1F5A  2F5F               	goto	l881
 15140                           
 15141                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15142  1F5B  303D               	movlw	_DimmerLights1& (0+255)
 15143  1F5C  00A0               	movwf	??_DimmerLightsPointSelect
 15144  1F5D  0820               	movf	??_DimmerLightsPointSelect,w
 15145  1F5E  00FB               	movwf	_DimmerLights
 15146  1F5F                     l881:	
 15147                           
 15148                           ;Dimmer_B1.c: 319: }
 15149                           ;Dimmer_B1.c: 322: if (lights == 2) {
 15150  1F5F  0821               	movf	DimmerLightsPointSelect@lights,w
 15151  1F60  3A02               	xorlw	2
 15152  1F61  1D03               	skipz
 15153  1F62  2F67               	goto	l882
 15154                           
 15155                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 15156  1F63  30C5               	movlw	_DimmerLights2& (0+255)
 15157  1F64  00A0               	movwf	??_DimmerLightsPointSelect
 15158  1F65  0820               	movf	??_DimmerLightsPointSelect,w
 15159  1F66  00FB               	movwf	_DimmerLights
 15160  1F67                     l882:	
 15161                           
 15162                           ;Dimmer_B1.c: 324: }
 15163                           ;Dimmer_B1.c: 327: if (lights == 3) {
 15164  1F67  0821               	movf	DimmerLightsPointSelect@lights,w
 15165  1F68  3A03               	xorlw	3
 15166  1F69  1D03               	skipz
 15167  1F6A  0008               	return
 15168                           
 15169                           ;Dimmer_B1.c: 328: DimmerLights = &DimmerLights3;
 15170  1F6B  30D4               	movlw	_DimmerLights3& (0+255)
 15171  1F6C  00A0               	movwf	??_DimmerLightsPointSelect
 15172  1F6D  0820               	movf	??_DimmerLightsPointSelect,w
 15173  1F6E  00FB               	movwf	_DimmerLights
 15174  1F6F  0008               	return
 15175  1F70                     __end_of_DimmerLightsPointSelect:	
 15176                           
 15177                           	psect	text98
 15178  17A7                     __ptext98:	
 15179 ;; *************** function _setBuz *****************
 15180 ;; Defined at:
 15181 ;;		line 22 in file "../src/Buzzer_B1.c"
 15182 ;; Parameters:    Size  Location     Type
 15183 ;;  count           1    wreg     unsigned char 
 15184 ;;  time            2    9[BANK0 ] int 
 15185 ;; Auto vars:     Size  Location     Type
 15186 ;;  count           1   12[BANK0 ] unsigned char 
 15187 ;; Return value:  Size  Location     Type
 15188 ;;		None               void
 15189 ;; Registers used:
 15190 ;;		wreg, status,2, status,0, pclath, cstack
 15191 ;; Tracked objects:
 15192 ;;		On entry : 0/0
 15193 ;;		On exit  : 0/0
 15194 ;;		Unchanged: 0/0
 15195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;Total ram usage:        4 bytes
 15201 ;; Hardware stack levels used:    1
 15202 ;; Hardware stack levels required when called:    6
 15203 ;; This function calls:
 15204 ;;		___awdiv
 15205 ;; This function is called by:
 15206 ;;		_DlyOff_Main
 15207 ;;		_setDimmerLights_Main
 15208 ;;		_DimmerLights_Exceptions
 15209 ;;		_my_Main
 15210 ;;		_setOverTemp_Exceptions
 15211 ;;		_setLog_Code
 15212 ;;		_setControl_Lights_Table
 15213 ;;		_setRFSW_Control
 15214 ;;		_setSw_Main
 15215 ;;		_Sw_DimmerOnFunc
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           
 15220                           ;psect for function _setBuz
 15221  17A7                     _setBuz:	
 15222                           
 15223                           ;incstack = 0
 15224                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15225                           ;setBuz@count stored from wreg
 15226  17A7  0020               	movlb	0	; select bank0
 15227  17A8  00AC               	movwf	setBuz@count
 15228                           
 15229                           ;Buzzer_B1.c: 23: time /= 10;
 15230  17A9  300A               	movlw	10
 15231  17AA  00A0               	movwf	___awdiv@divisor
 15232  17AB  3000               	movlw	0
 15233  17AC  00A1               	movwf	___awdiv@divisor+1
 15234  17AD  082A               	movf	setBuz@time+1,w
 15235  17AE  01A3               	clrf	___awdiv@dividend+1
 15236  17AF  07A3               	addwf	___awdiv@dividend+1,f
 15237  17B0  0829               	movf	setBuz@time,w
 15238  17B1  01A2               	clrf	___awdiv@dividend
 15239  17B2  07A2               	addwf	___awdiv@dividend,f
 15240  17B3  3196  26FE  3197   	fcall	___awdiv
 15241  17B6  0020               	movlb	0	; select bank0
 15242  17B7  0821               	movf	?___awdiv+1,w
 15243  17B8  01AA               	clrf	setBuz@time+1
 15244  17B9  07AA               	addwf	setBuz@time+1,f
 15245  17BA  0820               	movf	?___awdiv,w
 15246  17BB  01A9               	clrf	setBuz@time
 15247  17BC  07A9               	addwf	setBuz@time,f
 15248                           
 15249                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15250  17BD  0021               	movlb	1	; select bank1
 15251  17BE  1C32               	btfss	_Buz1^(0+128),0
 15252  17BF  0008               	return
 15253                           
 15254                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15255  17C0  18B2               	btfsc	_Buz1^(0+128),1
 15256  17C1  2FD8               	goto	l114
 15257                           
 15258                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15259  17C2  14B2               	bsf	_Buz1^(0+128),1
 15260                           
 15261                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15262  17C3  01B3               	clrf	(_Buz1^(0+128)+1)
 15263  17C4  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15264                           
 15265                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15266  17C5  0020               	movlb	0	; select bank0
 15267  17C6  082C               	movf	setBuz@count,w
 15268  17C7  00AB               	movwf	??_setBuz
 15269  17C8  082B               	movf	??_setBuz,w
 15270  17C9  0021               	movlb	1	; select bank1
 15271  17CA  00B5               	movwf	(_Buz1^(0+128)+3)
 15272                           
 15273                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15274  17CB  0020               	movlb	0	; select bank0
 15275  17CC  082A               	movf	setBuz@time+1,w
 15276  17CD  0021               	movlb	1	; select bank1
 15277  17CE  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15278  17CF  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15279  17D0  0020               	movlb	0	; select bank0
 15280  17D1  0829               	movf	setBuz@time,w
 15281  17D2  0021               	movlb	1	; select bank1
 15282  17D3  01B8               	clrf	(_Buz1^(0+128)+6)
 15283  17D4  07B8               	addwf	(_Buz1^(0+128)+6),f
 15284                           
 15285                           ;Buzzer_B1.c: 30: RB3 = 1;
 15286  17D5  0020               	movlb	0	; select bank0
 15287  17D6  158D               	bsf	13,3	;volatile
 15288                           
 15289                           ;Buzzer_B1.c: 31: } else {
 15290  17D7  0008               	return
 15291  17D8                     l114:	
 15292                           
 15293                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15294  17D8  19B2               	btfsc	_Buz1^(0+128),3
 15295  17D9  2FEC               	goto	l116
 15296                           
 15297                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15298  17DA  15B2               	bsf	_Buz1^(0+128),3
 15299                           
 15300                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15301  17DB  0020               	movlb	0	; select bank0
 15302  17DC  082C               	movf	setBuz@count,w
 15303  17DD  00AB               	movwf	??_setBuz
 15304  17DE  082B               	movf	??_setBuz,w
 15305  17DF  0021               	movlb	1	; select bank1
 15306  17E0  00B6               	movwf	(_Buz1^(0+128)+4)
 15307                           
 15308                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15309  17E1  0020               	movlb	0	; select bank0
 15310  17E2  082A               	movf	setBuz@time+1,w
 15311  17E3  0021               	movlb	1	; select bank1
 15312  17E4  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15313  17E5  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15314  17E6  0020               	movlb	0	; select bank0
 15315  17E7  0829               	movf	setBuz@time,w
 15316  17E8  0021               	movlb	1	; select bank1
 15317  17E9  01BA               	clrf	(_Buz1^(0+128)+8)
 15318  17EA  07BA               	addwf	(_Buz1^(0+128)+8),f
 15319                           
 15320                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15321  17EB  0008               	return
 15322  17EC                     l116:	
 15323  17EC  1A32               	btfsc	_Buz1^(0+128),4
 15324  17ED  0008               	return
 15325                           
 15326                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15327  17EE  1632               	bsf	_Buz1^(0+128),4
 15328                           
 15329                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15330  17EF  0020               	movlb	0	; select bank0
 15331  17F0  082C               	movf	setBuz@count,w
 15332  17F1  00AB               	movwf	??_setBuz
 15333  17F2  082B               	movf	??_setBuz,w
 15334  17F3  0021               	movlb	1	; select bank1
 15335  17F4  00B7               	movwf	(_Buz1^(0+128)+5)
 15336                           
 15337                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15338  17F5  0020               	movlb	0	; select bank0
 15339  17F6  082A               	movf	setBuz@time+1,w
 15340  17F7  0021               	movlb	1	; select bank1
 15341  17F8  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15342  17F9  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15343  17FA  0020               	movlb	0	; select bank0
 15344  17FB  0829               	movf	setBuz@time,w
 15345  17FC  0021               	movlb	1	; select bank1
 15346  17FD  01BC               	clrf	(_Buz1^(0+128)+10)
 15347  17FE  07BC               	addwf	(_Buz1^(0+128)+10),f
 15348  17FF  0008               	return
 15349  1800                     __end_of_setBuz:	
 15350                           
 15351                           	psect	text99
 15352  16FE                     __ptext99:	
 15353 ;; *************** function ___awdiv *****************
 15354 ;; Defined at:
 15355 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15356 ;; Parameters:    Size  Location     Type
 15357 ;;  divisor         2    0[BANK0 ] int 
 15358 ;;  dividend        2    2[BANK0 ] int 
 15359 ;; Auto vars:     Size  Location     Type
 15360 ;;  quotient        2    7[BANK0 ] int 
 15361 ;;  sign            1    6[BANK0 ] unsigned char 
 15362 ;;  counter         1    5[BANK0 ] unsigned char 
 15363 ;; Return value:  Size  Location     Type
 15364 ;;                  2    0[BANK0 ] int 
 15365 ;; Registers used:
 15366 ;;		wreg, status,2, status,0
 15367 ;; Tracked objects:
 15368 ;;		On entry : 0/0
 15369 ;;		On exit  : 0/0
 15370 ;;		Unchanged: 0/0
 15371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15372 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15376 ;;Total ram usage:        9 bytes
 15377 ;; Hardware stack levels used:    1
 15378 ;; Hardware stack levels required when called:    5
 15379 ;; This function calls:
 15380 ;;		Nothing
 15381 ;; This function is called by:
 15382 ;;		_setBuz
 15383 ;; This function uses a non-reentrant model
 15384 ;;
 15385                           
 15386                           
 15387                           ;psect for function ___awdiv
 15388  16FE                     ___awdiv:	
 15389                           
 15390                           ;incstack = 0
 15391                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15392  16FE  0020               	movlb	0	; select bank0
 15393  16FF  01A6               	clrf	___awdiv@sign
 15394  1700  1FA1               	btfss	___awdiv@divisor+1,7
 15395  1701  2F09               	goto	l6128
 15396  1702  09A0               	comf	___awdiv@divisor,f
 15397  1703  09A1               	comf	___awdiv@divisor+1,f
 15398  1704  0AA0               	incf	___awdiv@divisor,f
 15399  1705  1903               	skipnz
 15400  1706  0AA1               	incf	___awdiv@divisor+1,f
 15401  1707  01A6               	clrf	___awdiv@sign
 15402  1708  0AA6               	incf	___awdiv@sign,f
 15403  1709                     l6128:	
 15404  1709  1FA3               	btfss	___awdiv@dividend+1,7
 15405  170A  2F14               	goto	l6134
 15406  170B  09A2               	comf	___awdiv@dividend,f
 15407  170C  09A3               	comf	___awdiv@dividend+1,f
 15408  170D  0AA2               	incf	___awdiv@dividend,f
 15409  170E  1903               	skipnz
 15410  170F  0AA3               	incf	___awdiv@dividend+1,f
 15411  1710  3001               	movlw	1
 15412  1711  00A4               	movwf	??___awdiv
 15413  1712  0824               	movf	??___awdiv,w
 15414  1713  06A6               	xorwf	___awdiv@sign,f
 15415  1714                     l6134:	
 15416  1714  01A7               	clrf	___awdiv@quotient
 15417  1715  01A8               	clrf	___awdiv@quotient+1
 15418  1716  0821               	movf	___awdiv@divisor+1,w
 15419  1717  0420               	iorwf	___awdiv@divisor,w
 15420  1718  1903               	skipnz
 15421  1719  2F43               	goto	l6156
 15422  171A  01A5               	clrf	___awdiv@counter
 15423  171B  0AA5               	incf	___awdiv@counter,f
 15424  171C                     l6144:	
 15425  171C  1BA1               	btfsc	___awdiv@divisor+1,7
 15426  171D  2F28               	goto	l6146
 15427  171E  3001               	movlw	1
 15428  171F                     u4815:	
 15429  171F  35A0               	lslf	___awdiv@divisor,f
 15430  1720  0DA1               	rlf	___awdiv@divisor+1,f
 15431  1721  0B89               	decfsz	9,f
 15432  1722  2F1F               	goto	u4815
 15433  1723  3001               	movlw	1
 15434  1724  00A4               	movwf	??___awdiv
 15435  1725  0824               	movf	??___awdiv,w
 15436  1726  07A5               	addwf	___awdiv@counter,f
 15437  1727  2F1C               	goto	l6144
 15438  1728                     l6146:	
 15439  1728  3001               	movlw	1
 15440  1729                     u4835:	
 15441  1729  35A7               	lslf	___awdiv@quotient,f
 15442  172A  0DA8               	rlf	___awdiv@quotient+1,f
 15443  172B  0B89               	decfsz	9,f
 15444  172C  2F29               	goto	u4835
 15445  172D  0821               	movf	___awdiv@divisor+1,w
 15446  172E  0223               	subwf	___awdiv@dividend+1,w
 15447  172F  1D03               	skipz
 15448  1730  2F33               	goto	u4845
 15449  1731  0820               	movf	___awdiv@divisor,w
 15450  1732  0222               	subwf	___awdiv@dividend,w
 15451  1733                     u4845:	
 15452  1733  1C03               	skipc
 15453  1734  2F3A               	goto	l6152
 15454  1735  0820               	movf	___awdiv@divisor,w
 15455  1736  02A2               	subwf	___awdiv@dividend,f
 15456  1737  0821               	movf	___awdiv@divisor+1,w
 15457  1738  3BA3               	subwfb	___awdiv@dividend+1,f
 15458  1739  1427               	bsf	___awdiv@quotient,0
 15459  173A                     l6152:	
 15460  173A  3001               	movlw	1
 15461  173B                     u4855:	
 15462  173B  36A1               	lsrf	___awdiv@divisor+1,f
 15463  173C  0CA0               	rrf	___awdiv@divisor,f
 15464  173D  0B89               	decfsz	9,f
 15465  173E  2F3B               	goto	u4855
 15466  173F  3001               	movlw	1
 15467  1740  02A5               	subwf	___awdiv@counter,f
 15468  1741  1D03               	btfss	3,2
 15469  1742  2F28               	goto	l6146
 15470  1743                     l6156:	
 15471  1743  0826               	movf	___awdiv@sign,w
 15472  1744  1903               	btfsc	3,2
 15473  1745  2F4B               	goto	l6160
 15474  1746  09A7               	comf	___awdiv@quotient,f
 15475  1747  09A8               	comf	___awdiv@quotient+1,f
 15476  1748  0AA7               	incf	___awdiv@quotient,f
 15477  1749  1903               	skipnz
 15478  174A  0AA8               	incf	___awdiv@quotient+1,f
 15479  174B                     l6160:	
 15480  174B  0828               	movf	___awdiv@quotient+1,w
 15481  174C  01A1               	clrf	?___awdiv+1
 15482  174D  07A1               	addwf	?___awdiv+1,f
 15483  174E  0827               	movf	___awdiv@quotient,w
 15484  174F  01A0               	clrf	?___awdiv
 15485  1750  07A0               	addwf	?___awdiv,f
 15486  1751  0008               	return
 15487  1752                     __end_of___awdiv:	
 15488                           
 15489                           	psect	text100
 15490  1CF6                     __ptext100:	
 15491 ;; *************** function _DelayOff_Initialization *****************
 15492 ;; Defined at:
 15493 ;;		line 26 in file "../src/DelayOff_B1.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;		None
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;		None
 15498 ;; Return value:  Size  Location     Type
 15499 ;;		None               void
 15500 ;; Registers used:
 15501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;Total ram usage:        0 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; Hardware stack levels required when called:    7
 15514 ;; This function calls:
 15515 ;;		_DlyOff_Initialization
 15516 ;; This function is called by:
 15517 ;;		_main
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           
 15522                           ;psect for function _DelayOff_Initialization
 15523  1CF6                     _DelayOff_Initialization:	
 15524                           
 15525                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15526                           
 15527                           ;incstack = 0
 15528                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15529  1CF6  3001               	movlw	1
 15530  1CF7  319C  24D3  319C   	fcall	_DlyOff_Initialization
 15531                           
 15532                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 15533  1CFA  3002               	movlw	2
 15534  1CFB  319C  24D3  319C   	fcall	_DlyOff_Initialization
 15535                           
 15536                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 15537  1CFE  3003               	movlw	3
 15538  1CFF  319C  24D3         	fcall	_DlyOff_Initialization
 15539  1D01  0008               	return
 15540  1D02                     __end_of_DelayOff_Initialization:	
 15541                           
 15542                           	psect	text101
 15543  1CD3                     __ptext101:	
 15544 ;; *************** function _DlyOff_Initialization *****************
 15545 ;; Defined at:
 15546 ;;		line 56 in file "../src/DelayOff_B1.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;  sw              1    wreg     unsigned char 
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;  sw              1    2[BANK0 ] unsigned char 
 15551 ;; Return value:  Size  Location     Type
 15552 ;;		None               void
 15553 ;; Registers used:
 15554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;Total ram usage:        1 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:    6
 15567 ;; This function calls:
 15568 ;;		_DelayOffPointSelect
 15569 ;; This function is called by:
 15570 ;;		_DelayOff_Initialization
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           
 15575                           ;psect for function _DlyOff_Initialization
 15576  1CD3                     _DlyOff_Initialization:	
 15577                           
 15578                           ;incstack = 0
 15579                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15580                           ;DlyOff_Initialization@sw stored from wreg
 15581  1CD3  0020               	movlb	0	; select bank0
 15582  1CD4  00A2               	movwf	DlyOff_Initialization@sw
 15583                           
 15584                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15585  1CD5  0822               	movf	DlyOff_Initialization@sw,w
 15586  1CD6  319F  27A9         	fcall	_DelayOffPointSelect
 15587                           
 15588                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15589  1CD8  087A               	movf	_DelayOff,w
 15590  1CD9  0086               	movwf	6
 15591  1CDA  3001               	movlw	1	; select bank2/3
 15592  1CDB  0087               	movwf	7
 15593  1CDC  1401               	bsf	1,0
 15594  1CDD  0008               	return
 15595  1CDE                     __end_of_DlyOff_Initialization:	
 15596                           
 15597                           	psect	text102
 15598  1FA9                     __ptext102:	
 15599 ;; *************** function _DelayOffPointSelect *****************
 15600 ;; Defined at:
 15601 ;;		line 7 in file "../src/DelayOff_B1.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  sw              1    wreg     unsigned char 
 15604 ;; Auto vars:     Size  Location     Type
 15605 ;;  sw              1    1[BANK0 ] unsigned char 
 15606 ;; Return value:  Size  Location     Type
 15607 ;;		None               void
 15608 ;; Registers used:
 15609 ;;		wreg
 15610 ;; Tracked objects:
 15611 ;;		On entry : 0/0
 15612 ;;		On exit  : 0/0
 15613 ;;		Unchanged: 0/0
 15614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;Total ram usage:        2 bytes
 15620 ;; Hardware stack levels used:    1
 15621 ;; Hardware stack levels required when called:    5
 15622 ;; This function calls:
 15623 ;;		Nothing
 15624 ;; This function is called by:
 15625 ;;		_DlyOff_Initialization
 15626 ;;		_DlyOff_Main
 15627 ;;		_setDelayOff_GO
 15628 ;; This function uses a non-reentrant model
 15629 ;;
 15630                           
 15631                           
 15632                           ;psect for function _DelayOffPointSelect
 15633  1FA9                     _DelayOffPointSelect:	
 15634                           
 15635                           ;incstack = 0
 15636                           ; Regs used in _DelayOffPointSelect: [wreg]
 15637                           ;DelayOffPointSelect@sw stored from wreg
 15638  1FA9  0020               	movlb	0	; select bank0
 15639  1FAA  00A1               	movwf	DelayOffPointSelect@sw
 15640                           
 15641                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15642  1FAB  0821               	movf	DelayOffPointSelect@sw,w
 15643  1FAC  3A01               	xorlw	1
 15644  1FAD  1D03               	skipz
 15645  1FAE  2FB4               	goto	l6044
 15646                           
 15647                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15648  1FAF  3055               	movlw	_DlySw1& (0+255)
 15649  1FB0  00A0               	movwf	??_DelayOffPointSelect
 15650  1FB1  0820               	movf	??_DelayOffPointSelect,w
 15651  1FB2  00FA               	movwf	_DelayOff
 15652                           
 15653                           ;DelayOff_B1.c: 11: }
 15654  1FB3  0008               	return
 15655  1FB4                     l6044:	
 15656                           
 15657                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 15658  1FB4  0821               	movf	DelayOffPointSelect@sw,w
 15659  1FB5  3A02               	xorlw	2
 15660  1FB6  1D03               	skipz
 15661  1FB7  2FBD               	goto	l6048
 15662                           
 15663                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 15664  1FB8  305A               	movlw	_DlySw2& (0+255)
 15665  1FB9  00A0               	movwf	??_DelayOffPointSelect
 15666  1FBA  0820               	movf	??_DelayOffPointSelect,w
 15667  1FBB  00FA               	movwf	_DelayOff
 15668                           
 15669                           ;DelayOff_B1.c: 16: }
 15670  1FBC  0008               	return
 15671  1FBD                     l6048:	
 15672                           
 15673                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 15674  1FBD  0821               	movf	DelayOffPointSelect@sw,w
 15675  1FBE  3A03               	xorlw	3
 15676  1FBF  1D03               	skipz
 15677  1FC0  0008               	return
 15678                           
 15679                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 15680  1FC1  305F               	movlw	_DlySw3& (0+255)
 15681  1FC2  00A0               	movwf	??_DelayOffPointSelect
 15682  1FC3  0820               	movf	??_DelayOffPointSelect,w
 15683  1FC4  00FA               	movwf	_DelayOff
 15684  1FC5  0008               	return
 15685  1FC6                     __end_of_DelayOffPointSelect:	
 15686                           
 15687                           	psect	text103
 15688  1E7B                     __ptext103:	
 15689 ;; *************** function _CC2500_PowerOnInitial *****************
 15690 ;; Defined at:
 15691 ;;		line 115 in file "../src/CC2500_B1.c"
 15692 ;; Parameters:    Size  Location     Type
 15693 ;;		None
 15694 ;; Auto vars:     Size  Location     Type
 15695 ;;		None
 15696 ;; Return value:  Size  Location     Type
 15697 ;;		None               void
 15698 ;; Registers used:
 15699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15700 ;; Tracked objects:
 15701 ;;		On entry : 0/0
 15702 ;;		On exit  : 0/0
 15703 ;;		Unchanged: 0/0
 15704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;Total ram usage:        0 bytes
 15710 ;; Hardware stack levels used:    1
 15711 ;; Hardware stack levels required when called:    8
 15712 ;; This function calls:
 15713 ;;		_CC2500_ClearRXFIFO
 15714 ;;		_CC2500_ClearTXFIFO
 15715 ;;		_CC2500_FrequencyCabr
 15716 ;;		_CC2500_InitPATable
 15717 ;;		_CC2500_InitSetREG
 15718 ;;		_CC2500_PowerRST
 15719 ;;		_CC2500_SIDLEMode
 15720 ;; This function is called by:
 15721 ;;		_main
 15722 ;; This function uses a non-reentrant model
 15723 ;;
 15724                           
 15725                           
 15726                           ;psect for function _CC2500_PowerOnInitial
 15727  1E7B                     _CC2500_PowerOnInitial:	
 15728                           
 15729                           ;CC2500_B1.c: 116: CC2500_PowerRST();
 15730                           
 15731                           ;incstack = 0
 15732                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15733  1E7B  3194  24B0  319E   	fcall	_CC2500_PowerRST
 15734                           
 15735                           ;CC2500_B1.c: 117: CC2500_InitSetREG();
 15736  1E7E  3192  2229  319E   	fcall	_CC2500_InitSetREG
 15737                           
 15738                           ;CC2500_B1.c: 118: CC2500_InitPATable();
 15739  1E81  3190  208E  319E   	fcall	_CC2500_InitPATable
 15740                           
 15741                           ;CC2500_B1.c: 119: CC2500_ClearTXFIFO();
 15742  1E84  319C  2481  319E   	fcall	_CC2500_ClearTXFIFO
 15743                           
 15744                           ;CC2500_B1.c: 120: CC2500_ClearRXFIFO();
 15745  1E87  319C  247D  319E   	fcall	_CC2500_ClearRXFIFO
 15746                           
 15747                           ;CC2500_B1.c: 121: CC2500_FrequencyCabr();
 15748  1E8A  319C  24EA  319E   	fcall	_CC2500_FrequencyCabr
 15749                           
 15750                           ;CC2500_B1.c: 122: CC2500_SIDLEMode();
 15751  1E8D  319C  2485         	fcall	_CC2500_SIDLEMode
 15752  1E8F  0008               	return
 15753  1E90                     __end_of_CC2500_PowerOnInitial:	
 15754                           
 15755                           	psect	text104
 15756  1C85                     __ptext104:	
 15757 ;; *************** function _CC2500_SIDLEMode *****************
 15758 ;; Defined at:
 15759 ;;		line 205 in file "../src/CC2500_B1.c"
 15760 ;; Parameters:    Size  Location     Type
 15761 ;;		None
 15762 ;; Auto vars:     Size  Location     Type
 15763 ;;		None
 15764 ;; Return value:  Size  Location     Type
 15765 ;;		None               void
 15766 ;; Registers used:
 15767 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15768 ;; Tracked objects:
 15769 ;;		On entry : 0/0
 15770 ;;		On exit  : 0/0
 15771 ;;		Unchanged: 0/0
 15772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;Total ram usage:        0 bytes
 15778 ;; Hardware stack levels used:    1
 15779 ;; Hardware stack levels required when called:    7
 15780 ;; This function calls:
 15781 ;;		_CC2500_WriteCommand
 15782 ;; This function is called by:
 15783 ;;		_CC2500_PowerOnInitial
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           
 15788                           ;psect for function _CC2500_SIDLEMode
 15789  1C85                     _CC2500_SIDLEMode:	
 15790                           
 15791                           ;CC2500_B1.c: 206: CC2500_WriteCommand(0x36);
 15792                           
 15793                           ;incstack = 0
 15794                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15795  1C85  3036               	movlw	54
 15796  1C86  319F  2721         	fcall	_CC2500_WriteCommand
 15797  1C88  0008               	return
 15798  1C89                     __end_of_CC2500_SIDLEMode:	
 15799                           
 15800                           	psect	text105
 15801  14B0                     __ptext105:	
 15802 ;; *************** function _CC2500_PowerRST *****************
 15803 ;; Defined at:
 15804 ;;		line 128 in file "../src/CC2500_B1.c"
 15805 ;; Parameters:    Size  Location     Type
 15806 ;;		None
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;		None
 15809 ;; Return value:  Size  Location     Type
 15810 ;;		None               void
 15811 ;; Registers used:
 15812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15813 ;; Tracked objects:
 15814 ;;		On entry : 0/0
 15815 ;;		On exit  : 0/0
 15816 ;;		Unchanged: 0/0
 15817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;Total ram usage:        1 bytes
 15823 ;; Hardware stack levels used:    1
 15824 ;; Hardware stack levels required when called:    6
 15825 ;; This function calls:
 15826 ;;		_CC2500_WriteByte
 15827 ;;		_DelayTime_1us
 15828 ;;		_Timeout_Counter
 15829 ;;		_set_TimeoutCleared
 15830 ;; This function is called by:
 15831 ;;		_CC2500_PowerOnInitial
 15832 ;; This function uses a non-reentrant model
 15833 ;;
 15834                           
 15835                           
 15836                           ;psect for function _CC2500_PowerRST
 15837  14B0                     _CC2500_PowerRST:	
 15838                           
 15839                           ;CC2500_B1.c: 129: RC1 = 0;
 15840                           
 15841                           ;incstack = 0
 15842                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15843  14B0  0020               	movlb	0	; select bank0
 15844  14B1  108E               	bcf	14,1	;volatile
 15845                           
 15846                           ;CC2500_B1.c: 130: RC0 = 0;
 15847  14B2  100E               	bcf	14,0	;volatile
 15848                           
 15849                           ;CC2500_B1.c: 131: RC4 = 1;
 15850  14B3  160E               	bsf	14,4	;volatile
 15851                           
 15852                           ;CC2500_B1.c: 132: DelayTime_1us(10);
 15853  14B4  300A               	movlw	10
 15854  14B5  00A0               	movwf	DelayTime_1us@count
 15855  14B6  3000               	movlw	0
 15856  14B7  00A1               	movwf	DelayTime_1us@count+1
 15857  14B8  3191  21DA  3194   	fcall	_DelayTime_1us
 15858                           
 15859                           ;CC2500_B1.c: 133: RC4 = 0;
 15860  14BB  0020               	movlb	0	; select bank0
 15861  14BC  120E               	bcf	14,4	;volatile
 15862                           
 15863                           ;CC2500_B1.c: 134: DelayTime_1us(10);
 15864  14BD  300A               	movlw	10
 15865  14BE  00A0               	movwf	DelayTime_1us@count
 15866  14BF  3000               	movlw	0
 15867  14C0  00A1               	movwf	DelayTime_1us@count+1
 15868  14C1  3191  21DA  3194   	fcall	_DelayTime_1us
 15869                           
 15870                           ;CC2500_B1.c: 135: RC4 = 1;
 15871  14C4  0020               	movlb	0	; select bank0
 15872  14C5  160E               	bsf	14,4	;volatile
 15873                           
 15874                           ;CC2500_B1.c: 136: DelayTime_1us(40);
 15875  14C6  3028               	movlw	40
 15876  14C7  00A0               	movwf	DelayTime_1us@count
 15877  14C8  3000               	movlw	0
 15878  14C9  00A1               	movwf	DelayTime_1us@count+1
 15879  14CA  3191  21DA  3194   	fcall	_DelayTime_1us
 15880                           
 15881                           ;CC2500_B1.c: 137: RC4 = 0;
 15882  14CD  0020               	movlb	0	; select bank0
 15883  14CE  120E               	bcf	14,4	;volatile
 15884                           
 15885                           ;CC2500_B1.c: 138: SPI0Buffer = 0x30;
 15886  14CF  3030               	movlw	48
 15887  14D0  00A6               	movwf	??_CC2500_PowerRST
 15888  14D1  0826               	movf	??_CC2500_PowerRST,w
 15889  14D2  0021               	movlb	1	; select bank1
 15890  14D3  00D0               	movwf	_SPI0Buffer^(0+128)
 15891                           
 15892                           ;CC2500_B1.c: 139: while (RC2 == 1 && myMain.Timeout == 0) {
 15893  14D4  2CD8               	goto	l7150
 15894  14D5                     l7148:	
 15895                           
 15896                           ;CC2500_B1.c: 140: Timeout_Counter();
 15897  14D5  319E  26A6  3194   	fcall	_Timeout_Counter
 15898  14D8                     l7150:	
 15899  14D8  0020               	movlb	0	; select bank0
 15900  14D9  1D0E               	btfss	14,2	;volatile
 15901  14DA  2CDE               	goto	l7154
 15902  14DB  0021               	movlb	1	; select bank1
 15903  14DC  1D2F               	btfss	(_myMain^(0+128)+15),2
 15904  14DD  2CD5               	goto	l7148
 15905  14DE                     l7154:	
 15906                           
 15907                           ;CC2500_B1.c: 141: };
 15908                           ;CC2500_B1.c: 142: set_TimeoutCleared();
 15909  14DE  319C  248D  3194   	fcall	_set_TimeoutCleared
 15910                           
 15911                           ;CC2500_B1.c: 143: CC2500_WriteByte();
 15912  14E1  319E  26EE  3194   	fcall	_CC2500_WriteByte
 15913                           
 15914                           ;CC2500_B1.c: 144: while (RC2 == 1 && myMain.Timeout == 0) {
 15915  14E4  2CE8               	goto	l7160
 15916  14E5                     l7158:	
 15917                           
 15918                           ;CC2500_B1.c: 145: Timeout_Counter();
 15919  14E5  319E  26A6  3194   	fcall	_Timeout_Counter
 15920  14E8                     l7160:	
 15921  14E8  0020               	movlb	0	; select bank0
 15922  14E9  1D0E               	btfss	14,2	;volatile
 15923  14EA  2CEE               	goto	l7164
 15924  14EB  0021               	movlb	1	; select bank1
 15925  14EC  1D2F               	btfss	(_myMain^(0+128)+15),2
 15926  14ED  2CE5               	goto	l7158
 15927  14EE                     l7164:	
 15928                           
 15929                           ;CC2500_B1.c: 146: };
 15930                           ;CC2500_B1.c: 147: set_TimeoutCleared();
 15931  14EE  319C  248D         	fcall	_set_TimeoutCleared
 15932                           
 15933                           ;CC2500_B1.c: 148: RC0 = 0;
 15934  14F0  0020               	movlb	0	; select bank0
 15935  14F1  100E               	bcf	14,0	;volatile
 15936                           
 15937                           ;CC2500_B1.c: 149: RC4 = 1;
 15938  14F2  160E               	bsf	14,4	;volatile
 15939  14F3  0008               	return
 15940  14F4                     __end_of_CC2500_PowerRST:	
 15941                           
 15942                           	psect	text106
 15943  1229                     __ptext106:	
 15944 ;; *************** function _CC2500_InitSetREG *****************
 15945 ;; Defined at:
 15946 ;;		line 155 in file "../src/CC2500_B1.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;		None
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15951 ;;  temp2           1    7[BANK0 ] unsigned char 
 15952 ;;  temp1           1    6[BANK0 ] unsigned char 
 15953 ;; Return value:  Size  Location     Type
 15954 ;;		None               void
 15955 ;; Registers used:
 15956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;Total ram usage:        4 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    7
 15969 ;; This function calls:
 15970 ;;		_CC2500_WriteREG
 15971 ;; This function is called by:
 15972 ;;		_CC2500_PowerOnInitial
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           
 15977                           ;psect for function _CC2500_InitSetREG
 15978  1229                     _CC2500_InitSetREG:	
 15979                           
 15980                           ;CC2500_B1.c: 156: unsigned char loop_c;
 15981                           ;CC2500_B1.c: 157: unsigned char temp1, temp2;
 15982                           ;CC2500_B1.c: 159: for (loop_c = 0; loop_c < 47; loop_c++) {
 15983                           
 15984                           ;incstack = 0
 15985                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15986  1229  0020               	movlb	0	; select bank0
 15987  122A  01A8               	clrf	CC2500_InitSetREG@loop_c
 15988  122B                     L11:	
 15989  122B  302F               	movlw	47
 15990  122C  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15991  122D  1803               	btfsc	3,0
 15992  122E  0008               	return
 15993                           
 15994                           ;CC2500_B1.c: 160: temp1 = CC2500_registers_address[loop_c];
 15995  122F  0828               	movf	CC2500_InitSetREG@loop_c,w
 15996  1230  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15997  1231  0084               	movwf	4
 15998  1232  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15999  1233  1803               	skipnc
 16000  1234  3E01               	addlw	1
 16001  1235  0085               	movwf	5
 16002  1236  0800               	movf	0,w	;code access
 16003  1237  00A5               	movwf	??_CC2500_InitSetREG
 16004  1238  0825               	movf	??_CC2500_InitSetREG,w
 16005  1239  00A6               	movwf	CC2500_InitSetREG@temp1
 16006                           
 16007                           ;CC2500_B1.c: 161: temp2 = CC2500_rfSettings[loop_c];
 16008  123A  0828               	movf	CC2500_InitSetREG@loop_c,w
 16009  123B  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16010  123C  0084               	movwf	4
 16011  123D  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16012  123E  1803               	skipnc
 16013  123F  3E01               	addlw	1
 16014  1240  0085               	movwf	5
 16015  1241  0800               	movf	0,w	;code access
 16016  1242  00A5               	movwf	??_CC2500_InitSetREG
 16017  1243  0825               	movf	??_CC2500_InitSetREG,w
 16018  1244  00A7               	movwf	CC2500_InitSetREG@temp2
 16019                           
 16020                           ;CC2500_B1.c: 163: CC2500_WriteREG(temp1, temp2);
 16021  1245  0827               	movf	CC2500_InitSetREG@temp2,w
 16022  1246  00A5               	movwf	??_CC2500_InitSetREG
 16023  1247  0825               	movf	??_CC2500_InitSetREG,w
 16024  1248  00A2               	movwf	CC2500_WriteREG@value
 16025  1249  0826               	movf	CC2500_InitSetREG@temp1,w
 16026  124A  3191  216F  3192   	fcall	_CC2500_WriteREG
 16027  124D  3001               	movlw	1
 16028  124E  0020               	movlb	0	; select bank0
 16029  124F  00A5               	movwf	??_CC2500_InitSetREG
 16030  1250  0825               	movf	??_CC2500_InitSetREG,w
 16031  1251  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16032  1252  2A2B               	goto	L11
 16033  1253                     __end_of_CC2500_InitSetREG:	
 16034                           
 16035                           	psect	text107
 16036  108E                     __ptext107:	
 16037 ;; *************** function _CC2500_InitPATable *****************
 16038 ;; Defined at:
 16039 ;;		line 170 in file "../src/CC2500_B1.c"
 16040 ;; Parameters:    Size  Location     Type
 16041 ;;		None
 16042 ;; Auto vars:     Size  Location     Type
 16043 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16044 ;;  temp            1    6[BANK0 ] unsigned char 
 16045 ;; Return value:  Size  Location     Type
 16046 ;;		None               void
 16047 ;; Registers used:
 16048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16049 ;; Tracked objects:
 16050 ;;		On entry : 0/0
 16051 ;;		On exit  : 0/0
 16052 ;;		Unchanged: 0/0
 16053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;Total ram usage:        3 bytes
 16059 ;; Hardware stack levels used:    1
 16060 ;; Hardware stack levels required when called:    7
 16061 ;; This function calls:
 16062 ;;		_CC2500_WriteREG
 16063 ;; This function is called by:
 16064 ;;		_CC2500_PowerOnInitial
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _CC2500_InitPATable
 16070  108E                     _CC2500_InitPATable:	
 16071                           
 16072                           ;CC2500_B1.c: 171: unsigned char loop_d;
 16073                           ;CC2500_B1.c: 172: unsigned char temp;
 16074                           ;CC2500_B1.c: 174: for (loop_d = 0; loop_d < 8; loop_d++) {
 16075                           
 16076                           ;incstack = 0
 16077                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16078  108E  0020               	movlb	0	; select bank0
 16079  108F  01A7               	clrf	CC2500_InitPATable@loop_d
 16080  1090                     L12:	
 16081  1090  3008               	movlw	8
 16082  1091  0227               	subwf	CC2500_InitPATable@loop_d,w
 16083  1092  1803               	btfsc	3,0
 16084  1093  0008               	return
 16085                           
 16086                           ;CC2500_B1.c: 175: temp = CC2500_patable_vaule[loop_d];
 16087  1094  0827               	movf	CC2500_InitPATable@loop_d,w
 16088  1095  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16089  1096  0084               	movwf	4
 16090  1097  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16091  1098  1803               	skipnc
 16092  1099  3E01               	addlw	1
 16093  109A  0085               	movwf	5
 16094  109B  0800               	movf	0,w	;code access
 16095  109C  00A5               	movwf	??_CC2500_InitPATable
 16096  109D  0825               	movf	??_CC2500_InitPATable,w
 16097  109E  00A6               	movwf	CC2500_InitPATable@temp
 16098                           
 16099                           ;CC2500_B1.c: 176: CC2500_WriteREG(0x3E, temp);
 16100  109F  0826               	movf	CC2500_InitPATable@temp,w
 16101  10A0  00A5               	movwf	??_CC2500_InitPATable
 16102  10A1  0825               	movf	??_CC2500_InitPATable,w
 16103  10A2  00A2               	movwf	CC2500_WriteREG@value
 16104  10A3  303E               	movlw	62
 16105  10A4  3191  216F  3190   	fcall	_CC2500_WriteREG
 16106  10A7  3001               	movlw	1
 16107  10A8  0020               	movlb	0	; select bank0
 16108  10A9  00A5               	movwf	??_CC2500_InitPATable
 16109  10AA  0825               	movf	??_CC2500_InitPATable,w
 16110  10AB  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16111  10AC  2890               	goto	L12
 16112  10AD                     __end_of_CC2500_InitPATable:	
 16113                           
 16114                           	psect	text108
 16115  116F                     __ptext108:	
 16116 ;; *************** function _CC2500_WriteREG *****************
 16117 ;; Defined at:
 16118 ;;		line 247 in file "../src/CC2500_B1.c"
 16119 ;; Parameters:    Size  Location     Type
 16120 ;;  w_addr          1    wreg     unsigned char 
 16121 ;;  value           1    2[BANK0 ] unsigned char 
 16122 ;; Auto vars:     Size  Location     Type
 16123 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16124 ;; Return value:  Size  Location     Type
 16125 ;;		None               void
 16126 ;; Registers used:
 16127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16128 ;; Tracked objects:
 16129 ;;		On entry : 0/0
 16130 ;;		On exit  : 0/0
 16131 ;;		Unchanged: 0/0
 16132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16133 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;Total ram usage:        3 bytes
 16138 ;; Hardware stack levels used:    1
 16139 ;; Hardware stack levels required when called:    6
 16140 ;; This function calls:
 16141 ;;		_CC2500_WriteByte
 16142 ;;		_Timeout_Counter
 16143 ;;		_set_TimeoutCleared
 16144 ;; This function is called by:
 16145 ;;		_CC2500_InitSetREG
 16146 ;;		_CC2500_InitPATable
 16147 ;; This function uses a non-reentrant model
 16148 ;;
 16149                           
 16150                           
 16151                           ;psect for function _CC2500_WriteREG
 16152  116F                     _CC2500_WriteREG:	
 16153                           
 16154                           ;incstack = 0
 16155                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16156                           ;CC2500_WriteREG@w_addr stored from wreg
 16157  116F  0020               	movlb	0	; select bank0
 16158  1170  00A4               	movwf	CC2500_WriteREG@w_addr
 16159                           
 16160                           ;CC2500_B1.c: 248: RC4 = 0;
 16161  1171  120E               	bcf	14,4	;volatile
 16162                           
 16163                           ;CC2500_B1.c: 249: SPI0Buffer = w_addr;
 16164  1172  0824               	movf	CC2500_WriteREG@w_addr,w
 16165  1173  00A3               	movwf	??_CC2500_WriteREG
 16166  1174  0823               	movf	??_CC2500_WriteREG,w
 16167  1175  0021               	movlb	1	; select bank1
 16168  1176  00D0               	movwf	_SPI0Buffer^(0+128)
 16169                           
 16170                           ;CC2500_B1.c: 250: while (RC2 == 1 && myMain.Timeout == 0) {
 16171  1177  297B               	goto	l6842
 16172  1178                     l6840:	
 16173                           
 16174                           ;CC2500_B1.c: 251: Timeout_Counter();
 16175  1178  319E  26A6  3191   	fcall	_Timeout_Counter
 16176  117B                     l6842:	
 16177  117B  0020               	movlb	0	; select bank0
 16178  117C  1D0E               	btfss	14,2	;volatile
 16179  117D  2981               	goto	l6846
 16180  117E  0021               	movlb	1	; select bank1
 16181  117F  1D2F               	btfss	(_myMain^(0+128)+15),2
 16182  1180  2978               	goto	l6840
 16183  1181                     l6846:	
 16184                           
 16185                           ;CC2500_B1.c: 252: };
 16186                           ;CC2500_B1.c: 253: set_TimeoutCleared();
 16187  1181  319C  248D  3191   	fcall	_set_TimeoutCleared
 16188                           
 16189                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 16190  1184  319E  26EE  3191   	fcall	_CC2500_WriteByte
 16191                           
 16192                           ;CC2500_B1.c: 255: SPI0Buffer = value;
 16193  1187  0020               	movlb	0	; select bank0
 16194  1188  0822               	movf	CC2500_WriteREG@value,w
 16195  1189  00A3               	movwf	??_CC2500_WriteREG
 16196  118A  0823               	movf	??_CC2500_WriteREG,w
 16197  118B  0021               	movlb	1	; select bank1
 16198  118C  00D0               	movwf	_SPI0Buffer^(0+128)
 16199                           
 16200                           ;CC2500_B1.c: 256: CC2500_WriteByte();
 16201  118D  319E  26EE         	fcall	_CC2500_WriteByte
 16202                           
 16203                           ;CC2500_B1.c: 257: RC4 = 1;
 16204  118F  0020               	movlb	0	; select bank0
 16205  1190  160E               	bsf	14,4	;volatile
 16206  1191  0008               	return
 16207  1192                     __end_of_CC2500_WriteREG:	
 16208                           
 16209                           	psect	text109
 16210  1CEA                     __ptext109:	
 16211 ;; *************** function _CC2500_FrequencyCabr *****************
 16212 ;; Defined at:
 16213 ;;		line 197 in file "../src/CC2500_B1.c"
 16214 ;; Parameters:    Size  Location     Type
 16215 ;;		None
 16216 ;; Auto vars:     Size  Location     Type
 16217 ;;		None
 16218 ;; Return value:  Size  Location     Type
 16219 ;;		None               void
 16220 ;; Registers used:
 16221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16222 ;; Tracked objects:
 16223 ;;		On entry : 0/0
 16224 ;;		On exit  : 0/0
 16225 ;;		Unchanged: 0/0
 16226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;Total ram usage:        0 bytes
 16232 ;; Hardware stack levels used:    1
 16233 ;; Hardware stack levels required when called:    7
 16234 ;; This function calls:
 16235 ;;		_CC2500_WriteCommand
 16236 ;;		_DelayTime_1us
 16237 ;; This function is called by:
 16238 ;;		_CC2500_PowerOnInitial
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           
 16243                           ;psect for function _CC2500_FrequencyCabr
 16244  1CEA                     _CC2500_FrequencyCabr:	
 16245                           
 16246                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x33);
 16247                           
 16248                           ;incstack = 0
 16249                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16250  1CEA  3033               	movlw	51
 16251  1CEB  319F  2721  319C   	fcall	_CC2500_WriteCommand
 16252                           
 16253                           ;CC2500_B1.c: 199: DelayTime_1us(1000);
 16254  1CEE  30E8               	movlw	232
 16255  1CEF  0020               	movlb	0	; select bank0
 16256  1CF0  00A0               	movwf	DelayTime_1us@count
 16257  1CF1  3003               	movlw	3
 16258  1CF2  00A1               	movwf	DelayTime_1us@count+1
 16259  1CF3  3191  21DA         	fcall	_DelayTime_1us
 16260  1CF5  0008               	return
 16261  1CF6                     __end_of_CC2500_FrequencyCabr:	
 16262                           
 16263                           	psect	text110
 16264  11DA                     __ptext110:	
 16265 ;; *************** function _DelayTime_1us *****************
 16266 ;; Defined at:
 16267 ;;		line 312 in file "../src/CC2500_B1.c"
 16268 ;; Parameters:    Size  Location     Type
 16269 ;;  count           2    0[BANK0 ] int 
 16270 ;; Auto vars:     Size  Location     Type
 16271 ;;  j               2    4[BANK0 ] unsigned int 
 16272 ;;  i               2    2[BANK0 ] unsigned int 
 16273 ;; Return value:  Size  Location     Type
 16274 ;;		None               void
 16275 ;; Registers used:
 16276 ;;		wreg, status,2
 16277 ;; Tracked objects:
 16278 ;;		On entry : 0/0
 16279 ;;		On exit  : 0/0
 16280 ;;		Unchanged: 0/0
 16281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;Total ram usage:        6 bytes
 16287 ;; Hardware stack levels used:    1
 16288 ;; Hardware stack levels required when called:    5
 16289 ;; This function calls:
 16290 ;;		Nothing
 16291 ;; This function is called by:
 16292 ;;		_CC2500_PowerRST
 16293 ;;		_CC2500_FrequencyCabr
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           
 16298                           ;psect for function _DelayTime_1us
 16299  11DA                     _DelayTime_1us:	
 16300                           
 16301                           ;CC2500_B1.c: 313: unsigned int i, j;
 16302                           ;CC2500_B1.c: 314: for (i = 1; i < count; i++)
 16303                           
 16304                           ;incstack = 0
 16305                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16306  11DA  3001               	movlw	1
 16307  11DB  0020               	movlb	0	; select bank0
 16308  11DC  00A2               	movwf	DelayTime_1us@i
 16309  11DD  3000               	movlw	0
 16310  11DE  00A3               	movwf	DelayTime_1us@i+1
 16311  11DF                     l408:	
 16312  11DF  0821               	movf	DelayTime_1us@count+1,w
 16313  11E0  0223               	subwf	DelayTime_1us@i+1,w
 16314  11E1  1D03               	skipz
 16315  11E2  29E5               	goto	u5745
 16316  11E3  0820               	movf	DelayTime_1us@count,w
 16317  11E4  0222               	subwf	DelayTime_1us@i,w
 16318  11E5                     u5745:	
 16319  11E5  1803               	btfsc	3,0
 16320  11E6  0008               	return
 16321                           
 16322                           ;CC2500_B1.c: 315: for (j = 0; j <= 1; j++);
 16323  11E7  01A4               	clrf	DelayTime_1us@j
 16324  11E8  01A5               	clrf	DelayTime_1us@j+1
 16325  11E9  3000               	movlw	0
 16326  11EA  0225               	subwf	DelayTime_1us@j+1,w
 16327  11EB  3002               	movlw	2
 16328  11EC  1903               	skipnz
 16329  11ED  0224               	subwf	DelayTime_1us@j,w
 16330  11EE  1803               	btfsc	3,0
 16331  11EF  29FB               	goto	l6834
 16332  11F0                     l6832:	
 16333  11F0  3001               	movlw	1
 16334  11F1  07A4               	addwf	DelayTime_1us@j,f
 16335  11F2  3000               	movlw	0
 16336  11F3  3DA5               	addwfc	DelayTime_1us@j+1,f
 16337  11F4  3000               	movlw	0
 16338  11F5  0225               	subwf	DelayTime_1us@j+1,w
 16339  11F6  3002               	movlw	2
 16340  11F7  1903               	skipnz
 16341  11F8  0224               	subwf	DelayTime_1us@j,w
 16342  11F9  1C03               	skipc
 16343  11FA  29F0               	goto	l6832
 16344  11FB                     l6834:	
 16345  11FB  3001               	movlw	1
 16346  11FC  07A2               	addwf	DelayTime_1us@i,f
 16347  11FD  3000               	movlw	0
 16348  11FE  3DA3               	addwfc	DelayTime_1us@i+1,f
 16349  11FF  29DF               	goto	l408
 16350  1200                     __end_of_DelayTime_1us:	
 16351                           
 16352                           	psect	text111
 16353  1C81                     __ptext111:	
 16354 ;; *************** function _CC2500_ClearTXFIFO *****************
 16355 ;; Defined at:
 16356 ;;		line 183 in file "../src/CC2500_B1.c"
 16357 ;; Parameters:    Size  Location     Type
 16358 ;;		None
 16359 ;; Auto vars:     Size  Location     Type
 16360 ;;		None
 16361 ;; Return value:  Size  Location     Type
 16362 ;;		None               void
 16363 ;; Registers used:
 16364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16365 ;; Tracked objects:
 16366 ;;		On entry : 0/0
 16367 ;;		On exit  : 0/0
 16368 ;;		Unchanged: 0/0
 16369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;Total ram usage:        0 bytes
 16375 ;; Hardware stack levels used:    1
 16376 ;; Hardware stack levels required when called:    7
 16377 ;; This function calls:
 16378 ;;		_CC2500_WriteCommand
 16379 ;; This function is called by:
 16380 ;;		_CC2500_PowerOnInitial
 16381 ;; This function uses a non-reentrant model
 16382 ;;
 16383                           
 16384                           
 16385                           ;psect for function _CC2500_ClearTXFIFO
 16386  1C81                     _CC2500_ClearTXFIFO:	
 16387                           
 16388                           ;CC2500_B1.c: 184: CC2500_WriteCommand(0x3B);
 16389                           
 16390                           ;incstack = 0
 16391                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16392  1C81  303B               	movlw	59
 16393  1C82  319F  2721         	fcall	_CC2500_WriteCommand
 16394  1C84  0008               	return
 16395  1C85                     __end_of_CC2500_ClearTXFIFO:	
 16396                           
 16397                           	psect	text112
 16398  1C7D                     __ptext112:	
 16399 ;; *************** function _CC2500_ClearRXFIFO *****************
 16400 ;; Defined at:
 16401 ;;		line 190 in file "../src/CC2500_B1.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;		None
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;		None
 16406 ;; Return value:  Size  Location     Type
 16407 ;;		None               void
 16408 ;; Registers used:
 16409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16410 ;; Tracked objects:
 16411 ;;		On entry : 0/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;Total ram usage:        0 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    7
 16422 ;; This function calls:
 16423 ;;		_CC2500_WriteCommand
 16424 ;; This function is called by:
 16425 ;;		_CC2500_PowerOnInitial
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           
 16430                           ;psect for function _CC2500_ClearRXFIFO
 16431  1C7D                     _CC2500_ClearRXFIFO:	
 16432                           
 16433                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3A);
 16434                           
 16435                           ;incstack = 0
 16436                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16437  1C7D  303A               	movlw	58
 16438  1C7E  319F  2721         	fcall	_CC2500_WriteCommand
 16439  1C80  0008               	return
 16440  1C81                     __end_of_CC2500_ClearRXFIFO:	
 16441                           
 16442                           	psect	text113
 16443  1F21                     __ptext113:	
 16444 ;; *************** function _CC2500_WriteCommand *****************
 16445 ;; Defined at:
 16446 ;;		line 279 in file "../src/CC2500_B1.c"
 16447 ;; Parameters:    Size  Location     Type
 16448 ;;  command         1    wreg     unsigned char 
 16449 ;; Auto vars:     Size  Location     Type
 16450 ;;  command         1    3[BANK0 ] unsigned char 
 16451 ;; Return value:  Size  Location     Type
 16452 ;;		None               void
 16453 ;; Registers used:
 16454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16455 ;; Tracked objects:
 16456 ;;		On entry : 0/0
 16457 ;;		On exit  : 0/0
 16458 ;;		Unchanged: 0/0
 16459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16464 ;;Total ram usage:        2 bytes
 16465 ;; Hardware stack levels used:    1
 16466 ;; Hardware stack levels required when called:    6
 16467 ;; This function calls:
 16468 ;;		_CC2500_WriteByte
 16469 ;;		_Timeout_Counter
 16470 ;;		_set_TimeoutCleared
 16471 ;; This function is called by:
 16472 ;;		_CC2500_TxData
 16473 ;;		_CC2500_RxData
 16474 ;;		_CC2500_ClearTXFIFO
 16475 ;;		_CC2500_ClearRXFIFO
 16476 ;;		_CC2500_FrequencyCabr
 16477 ;;		_CC2500_SIDLEMode
 16478 ;;		_setRF_Main
 16479 ;;		_RF_RxDisable
 16480 ;; This function uses a non-reentrant model
 16481 ;;
 16482                           
 16483                           
 16484                           ;psect for function _CC2500_WriteCommand
 16485  1F21                     _CC2500_WriteCommand:	
 16486                           
 16487                           ;incstack = 0
 16488                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16489                           ;CC2500_WriteCommand@command stored from wreg
 16490  1F21  0020               	movlb	0	; select bank0
 16491  1F22  00A3               	movwf	CC2500_WriteCommand@command
 16492                           
 16493                           ;CC2500_B1.c: 280: RC4 = 0;
 16494  1F23  120E               	bcf	14,4	;volatile
 16495                           
 16496                           ;CC2500_B1.c: 281: SPI0Buffer = command;
 16497  1F24  0823               	movf	CC2500_WriteCommand@command,w
 16498  1F25  00A2               	movwf	??_CC2500_WriteCommand
 16499  1F26  0822               	movf	??_CC2500_WriteCommand,w
 16500  1F27  0021               	movlb	1	; select bank1
 16501  1F28  00D0               	movwf	_SPI0Buffer^(0+128)
 16502                           
 16503                           ;CC2500_B1.c: 283: while (RC2 == 1 && myMain.Timeout == 0) {
 16504  1F29  2F2D               	goto	l6546
 16505  1F2A                     l6544:	
 16506                           
 16507                           ;CC2500_B1.c: 284: Timeout_Counter();
 16508  1F2A  319E  26A6  319F   	fcall	_Timeout_Counter
 16509  1F2D                     l6546:	
 16510  1F2D  0020               	movlb	0	; select bank0
 16511  1F2E  1D0E               	btfss	14,2	;volatile
 16512  1F2F  2F33               	goto	l6550
 16513  1F30  0021               	movlb	1	; select bank1
 16514  1F31  1D2F               	btfss	(_myMain^(0+128)+15),2
 16515  1F32  2F2A               	goto	l6544
 16516  1F33                     l6550:	
 16517                           
 16518                           ;CC2500_B1.c: 285: };
 16519                           ;CC2500_B1.c: 286: set_TimeoutCleared();
 16520  1F33  319C  248D  319F   	fcall	_set_TimeoutCleared
 16521                           
 16522                           ;CC2500_B1.c: 287: CC2500_WriteByte();
 16523  1F36  319E  26EE         	fcall	_CC2500_WriteByte
 16524                           
 16525                           ;CC2500_B1.c: 288: RC4 = 1;
 16526  1F38  0020               	movlb	0	; select bank0
 16527  1F39  160E               	bsf	14,4	;volatile
 16528  1F3A  0008               	return
 16529  1F3B                     __end_of_CC2500_WriteCommand:	
 16530                           
 16531                           	psect	text114
 16532  1C8D                     __ptext114:	
 16533 ;; *************** function _set_TimeoutCleared *****************
 16534 ;; Defined at:
 16535 ;;		line 218 in file "../src/Main_B1.c"
 16536 ;; Parameters:    Size  Location     Type
 16537 ;;		None
 16538 ;; Auto vars:     Size  Location     Type
 16539 ;;		None
 16540 ;; Return value:  Size  Location     Type
 16541 ;;		None               void
 16542 ;; Registers used:
 16543 ;;		status,2
 16544 ;; Tracked objects:
 16545 ;;		On entry : 0/0
 16546 ;;		On exit  : 0/0
 16547 ;;		Unchanged: 0/0
 16548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;Total ram usage:        0 bytes
 16554 ;; Hardware stack levels used:    1
 16555 ;; Hardware stack levels required when called:    5
 16556 ;; This function calls:
 16557 ;;		Nothing
 16558 ;; This function is called by:
 16559 ;;		_CC2500_TxData
 16560 ;;		_CC2500_RxData
 16561 ;;		_CC2500_PowerRST
 16562 ;;		_CC2500_WriteREG
 16563 ;;		_CC2500_WriteCommand
 16564 ;;		_CC2500_ReadStatus
 16565 ;;		_getAD
 16566 ;;		_TouchPower
 16567 ;;		_CC2500_ReadREG
 16568 ;; This function uses a non-reentrant model
 16569 ;;
 16570                           
 16571                           
 16572                           ;psect for function _set_TimeoutCleared
 16573  1C8D                     _set_TimeoutCleared:	
 16574                           
 16575                           ;Main_B1.c: 219: myMain.Timeout = 0;
 16576                           
 16577                           ;incstack = 0
 16578                           ; Regs used in _set_TimeoutCleared: [status,2]
 16579  1C8D  0021               	movlb	1	; select bank1
 16580  1C8E  112F               	bcf	(_myMain^(0+128)+15),2
 16581                           
 16582                           ;Main_B1.c: 220: myMain.Timeout_Counter = 0;
 16583  1C8F  01B0               	clrf	(_myMain^(0+128)+16)
 16584  1C90  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16585  1C91  0008               	return
 16586  1C92                     __end_of_set_TimeoutCleared:	
 16587                           
 16588                           	psect	text115
 16589  1EA6                     __ptext115:	
 16590 ;; *************** function _Timeout_Counter *****************
 16591 ;; Defined at:
 16592 ;;		line 209 in file "../src/Main_B1.c"
 16593 ;; Parameters:    Size  Location     Type
 16594 ;;		None
 16595 ;; Auto vars:     Size  Location     Type
 16596 ;;		None
 16597 ;; Return value:  Size  Location     Type
 16598 ;;		None               void
 16599 ;; Registers used:
 16600 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16601 ;; Tracked objects:
 16602 ;;		On entry : 0/0
 16603 ;;		On exit  : 0/0
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;Total ram usage:        0 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; Hardware stack levels required when called:    5
 16613 ;; This function calls:
 16614 ;;		Nothing
 16615 ;; This function is called by:
 16616 ;;		_CC2500_TxData
 16617 ;;		_CC2500_RxData
 16618 ;;		_CC2500_PowerRST
 16619 ;;		_CC2500_WriteREG
 16620 ;;		_CC2500_WriteCommand
 16621 ;;		_CC2500_ReadStatus
 16622 ;;		_getAD
 16623 ;;		_TouchPower
 16624 ;;		_CC2500_ReadREG
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           
 16629                           ;psect for function _Timeout_Counter
 16630  1EA6                     _Timeout_Counter:	
 16631                           
 16632                           ;Main_B1.c: 210: myMain.Timeout_Counter++;
 16633                           
 16634                           ;incstack = 0
 16635                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16636  1EA6  3001               	movlw	1
 16637  1EA7  0021               	movlb	1	; select bank1
 16638  1EA8  07B0               	addwf	(_myMain^(0+128)+16),f
 16639  1EA9  3000               	movlw	0
 16640  1EAA  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16641                           
 16642                           ;Main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 16643  1EAB  3010               	movlw	16
 16644  1EAC  3EA0               	addlw	_myMain& (0+255)
 16645  1EAD  0086               	movwf	6
 16646  1EAE  0187               	clrf	7
 16647  1EAF  3F40               	moviw [0]fsr1
 16648  1EB0  3A10               	xorlw	16
 16649  1EB1  1D03               	skipz
 16650  1EB2  2EB5               	goto	u5195
 16651  1EB3  3F41               	moviw [1]fsr1
 16652  1EB4  3A27               	xorlw	39
 16653  1EB5                     u5195:	
 16654  1EB5  1D03               	skipz
 16655  1EB6  0008               	return
 16656                           
 16657                           ;Main_B1.c: 212: myMain.Timeout_Counter = 0;
 16658  1EB7  01B0               	clrf	(_myMain^(0+128)+16)
 16659  1EB8  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16660                           
 16661                           ;Main_B1.c: 213: myMain.Timeout = 1;
 16662  1EB9  152F               	bsf	(_myMain^(0+128)+15),2
 16663                           
 16664                           ;Main_B1.c: 214: RB5 = RB5 == 1 ? 0 : 1;
 16665  1EBA  3020               	movlw	32
 16666  1EBB  0020               	movlb	0	; select bank0
 16667  1EBC  068D               	xorwf	13,f
 16668  1EBD  0008               	return
 16669  1EBE                     __end_of_Timeout_Counter:	
 16670                           
 16671                           	psect	text116
 16672  1EEE                     __ptext116:	
 16673 ;; *************** function _CC2500_WriteByte *****************
 16674 ;; Defined at:
 16675 ;;		line 215 in file "../src/CC2500_B1.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;		None
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16680 ;; Return value:  Size  Location     Type
 16681 ;;		None               void
 16682 ;; Registers used:
 16683 ;;		wreg, status,2, status,0
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;Total ram usage:        2 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    5
 16696 ;; This function calls:
 16697 ;;		Nothing
 16698 ;; This function is called by:
 16699 ;;		_CC2500_TxData
 16700 ;;		_CC2500_RxData
 16701 ;;		_CC2500_PowerRST
 16702 ;;		_CC2500_WriteREG
 16703 ;;		_CC2500_WriteCommand
 16704 ;;		_CC2500_ReadStatus
 16705 ;;		_CC2500_ReadREG
 16706 ;; This function uses a non-reentrant model
 16707 ;;
 16708                           
 16709                           
 16710                           ;psect for function _CC2500_WriteByte
 16711  1EEE                     _CC2500_WriteByte:	
 16712                           
 16713                           ;CC2500_B1.c: 216: unsigned char loop_a;
 16714                           ;CC2500_B1.c: 217: for (loop_a = 0; loop_a < 8; loop_a++) {
 16715                           
 16716                           ;incstack = 0
 16717                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16718  1EEE  0020               	movlb	0	; select bank0
 16719  1EEF  01A1               	clrf	CC2500_WriteByte@loop_a
 16720  1EF0                     L13:	
 16721  1EF0  3008               	movlw	8
 16722  1EF1  0221               	subwf	CC2500_WriteByte@loop_a,w
 16723  1EF2  1803               	btfsc	3,0
 16724  1EF3  0008               	return
 16725                           
 16726                           ;CC2500_B1.c: 218: if (SPI0Buffer & 0x80)
 16727  1EF4  0021               	movlb	1	; select bank1
 16728  1EF5  1FD0               	btfss	_SPI0Buffer^(0+128),7
 16729  1EF6  2EFA               	goto	l364
 16730                           
 16731                           ;CC2500_B1.c: 219: RC0 = 1;
 16732  1EF7  0020               	movlb	0	; select bank0
 16733  1EF8  140E               	bsf	14,0	;volatile
 16734  1EF9  2EFC               	goto	l365
 16735  1EFA                     l364:	
 16736                           
 16737                           ;CC2500_B1.c: 220: else
 16738                           ;CC2500_B1.c: 221: RC0 = 0;
 16739  1EFA  0020               	movlb	0	; select bank0
 16740  1EFB  100E               	bcf	14,0	;volatile
 16741  1EFC                     l365:	
 16742                           
 16743                           ;CC2500_B1.c: 222: RC1 = 1;
 16744  1EFC  148E               	bsf	14,1	;volatile
 16745                           
 16746                           ;CC2500_B1.c: 223: SPI0Buffer <<= 1;
 16747  1EFD  1003               	clrc
 16748  1EFE  0021               	movlb	1	; select bank1
 16749  1EFF  0DD0               	rlf	_SPI0Buffer^(0+128),f
 16750                           
 16751                           ;CC2500_B1.c: 224: RC1 = 0;
 16752  1F00  0020               	movlb	0	; select bank0
 16753  1F01  108E               	bcf	14,1	;volatile
 16754  1F02  3001               	movlw	1
 16755  1F03  00A0               	movwf	??_CC2500_WriteByte
 16756  1F04  0820               	movf	??_CC2500_WriteByte,w
 16757  1F05  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16758  1F06  2EF0               	goto	L13
 16759  1F07                     __end_of_CC2500_WriteByte:	
 16760                           
 16761                           	psect	text117
 16762  15C8                     __ptext117:	
 16763 ;; *************** function _Buzzer_Main *****************
 16764 ;; Defined at:
 16765 ;;		line 46 in file "../src/Buzzer_B1.c"
 16766 ;; Parameters:    Size  Location     Type
 16767 ;;		None
 16768 ;; Auto vars:     Size  Location     Type
 16769 ;;		None
 16770 ;; Return value:  Size  Location     Type
 16771 ;;		None               void
 16772 ;; Registers used:
 16773 ;;		wreg, status,2, status,0
 16774 ;; Tracked objects:
 16775 ;;		On entry : 0/0
 16776 ;;		On exit  : 0/0
 16777 ;;		Unchanged: 0/0
 16778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;Total ram usage:        1 bytes
 16784 ;; Hardware stack levels used:    1
 16785 ;; Hardware stack levels required when called:    5
 16786 ;; This function calls:
 16787 ;;		Nothing
 16788 ;; This function is called by:
 16789 ;;		_main
 16790 ;; This function uses a non-reentrant model
 16791 ;;
 16792                           
 16793                           
 16794                           ;psect for function _Buzzer_Main
 16795  15C8                     _Buzzer_Main:	
 16796                           
 16797                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16798                           
 16799                           ;incstack = 0
 16800                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16801  15C8  0021               	movlb	1	; select bank1
 16802  15C9  1CB2               	btfss	_Buz1^(0+128),1
 16803  15CA  0008               	return
 16804                           
 16805                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16806  15CB  3001               	movlw	1
 16807  15CC  07B3               	addwf	(_Buz1^(0+128)+1),f
 16808  15CD  3000               	movlw	0
 16809  15CE  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16810                           
 16811                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16812  15CF  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16813  15D0  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16814  15D1  1D03               	skipz
 16815  15D2  2DD5               	goto	u7435
 16816  15D3  0838               	movf	(_Buz1^(0+128)+6),w
 16817  15D4  0233               	subwf	(_Buz1^(0+128)+1),w
 16818  15D5                     u7435:	
 16819  15D5  1C03               	skipc
 16820  15D6  0008               	return
 16821                           
 16822                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16823  15D7  01B3               	clrf	(_Buz1^(0+128)+1)
 16824  15D8  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16825                           
 16826                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16827  15D9  12B2               	bcf	_Buz1^(0+128),5
 16828  15DA  0020               	movlb	0	; select bank0
 16829  15DB  1D8D               	btfss	13,3	;volatile
 16830  15DC  2DDF               	goto	l7810
 16831  15DD  0021               	movlb	1	; select bank1
 16832  15DE  16B2               	bsf	_Buz1^(0+128),5
 16833  15DF                     l7810:	
 16834                           
 16835                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16836  15DF  0021               	movlb	1	; select bank1
 16837  15E0  1AB2               	btfsc	_Buz1^(0+128),5
 16838  15E1  2E0B               	goto	l124
 16839                           
 16840                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16841  15E2  08B5               	movf	(_Buz1^(0+128)+3),f
 16842  15E3  1D03               	skipz
 16843  15E4  2E07               	goto	l125
 16844                           
 16845                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16846  15E5  1DB2               	btfss	_Buz1^(0+128),3
 16847  15E6  2DF5               	goto	l126
 16848                           
 16849                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16850  15E7  11B2               	bcf	_Buz1^(0+128),3
 16851                           
 16852                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16853  15E8  0836               	movf	(_Buz1^(0+128)+4),w
 16854  15E9  0020               	movlb	0	; select bank0
 16855  15EA  00A0               	movwf	??_Buzzer_Main
 16856  15EB  0820               	movf	??_Buzzer_Main,w
 16857  15EC  0021               	movlb	1	; select bank1
 16858  15ED  00B5               	movwf	(_Buz1^(0+128)+3)
 16859                           
 16860                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16861  15EE  083B               	movf	((_Buz1+1)^(0+128)+8),w
 16862  15EF  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16863  15F0  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16864  15F1  083A               	movf	(_Buz1^(0+128)+8),w
 16865  15F2  01B8               	clrf	(_Buz1^(0+128)+6)
 16866  15F3  07B8               	addwf	(_Buz1^(0+128)+6),f
 16867                           
 16868                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16869  15F4  0008               	return
 16870  15F5                     l126:	
 16871  15F5  1E32               	btfss	_Buz1^(0+128),4
 16872  15F6  2E05               	goto	l128
 16873                           
 16874                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16875  15F7  1232               	bcf	_Buz1^(0+128),4
 16876                           
 16877                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16878  15F8  0837               	movf	(_Buz1^(0+128)+5),w
 16879  15F9  0020               	movlb	0	; select bank0
 16880  15FA  00A0               	movwf	??_Buzzer_Main
 16881  15FB  0820               	movf	??_Buzzer_Main,w
 16882  15FC  0021               	movlb	1	; select bank1
 16883  15FD  00B5               	movwf	(_Buz1^(0+128)+3)
 16884                           
 16885                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16886  15FE  083D               	movf	((_Buz1+1)^(0+128)+10),w
 16887  15FF  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16888  1600  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16889  1601  083C               	movf	(_Buz1^(0+128)+10),w
 16890  1602  01B8               	clrf	(_Buz1^(0+128)+6)
 16891  1603  07B8               	addwf	(_Buz1^(0+128)+6),f
 16892                           
 16893                           ;Buzzer_B1.c: 62: } else {
 16894  1604  0008               	return
 16895  1605                     l128:	
 16896                           
 16897                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16898  1605  10B2               	bcf	_Buz1^(0+128),1
 16899                           
 16900                           ;Buzzer_B1.c: 64: }
 16901                           ;Buzzer_B1.c: 65: } else {
 16902  1606  0008               	return
 16903  1607                     l125:	
 16904                           
 16905                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16906  1607  16B2               	bsf	_Buz1^(0+128),5
 16907                           
 16908                           ;Buzzer_B1.c: 68: RB3 = 1;
 16909  1608  0020               	movlb	0	; select bank0
 16910  1609  158D               	bsf	13,3	;volatile
 16911                           
 16912                           ;Buzzer_B1.c: 69: }
 16913                           ;Buzzer_B1.c: 70: } else {
 16914  160A  0008               	return
 16915  160B                     l124:	
 16916                           
 16917                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16918  160B  12B2               	bcf	_Buz1^(0+128),5
 16919                           
 16920                           ;Buzzer_B1.c: 73: RB3 = 0;
 16921  160C  0020               	movlb	0	; select bank0
 16922  160D  118D               	bcf	13,3	;volatile
 16923                           
 16924                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16925  160E  3001               	movlw	1
 16926  160F  0021               	movlb	1	; select bank1
 16927  1610  02B5               	subwf	(_Buz1^(0+128)+3),f
 16928  1611  0008               	return
 16929  1612                     __end_of_Buzzer_Main:	
 16930                           
 16931                           	psect	text118
 16932  1C6B                     __ptext118:	
 16933 ;; *************** function _Buzzer_Initialization *****************
 16934 ;; Defined at:
 16935 ;;		line 11 in file "../src/Buzzer_B1.c"
 16936 ;; Parameters:    Size  Location     Type
 16937 ;;		None
 16938 ;; Auto vars:     Size  Location     Type
 16939 ;;		None
 16940 ;; Return value:  Size  Location     Type
 16941 ;;		None               void
 16942 ;; Registers used:
 16943 ;;		None
 16944 ;; Tracked objects:
 16945 ;;		On entry : 0/0
 16946 ;;		On exit  : 0/0
 16947 ;;		Unchanged: 0/0
 16948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;Total ram usage:        0 bytes
 16954 ;; Hardware stack levels used:    1
 16955 ;; Hardware stack levels required when called:    5
 16956 ;; This function calls:
 16957 ;;		Nothing
 16958 ;; This function is called by:
 16959 ;;		_main
 16960 ;; This function uses a non-reentrant model
 16961 ;;
 16962                           
 16963                           
 16964                           ;psect for function _Buzzer_Initialization
 16965  1C6B                     _Buzzer_Initialization:	
 16966                           
 16967                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16968                           
 16969                           ;incstack = 0
 16970                           ; Regs used in _Buzzer_Initialization: []
 16971  1C6B  0021               	movlb	1	; select bank1
 16972  1C6C  1432               	bsf	_Buz1^(0+128),0
 16973  1C6D  0008               	return
 16974  1C6E                     __end_of_Buzzer_Initialization:	
 16975                           
 16976                           	psect	intentry
 16977  0004                     __pintentry:	
 16978 ;; *************** function _ISR *****************
 16979 ;; Defined at:
 16980 ;;		line 107 in file "../src/MCU_B1.c"
 16981 ;; Parameters:    Size  Location     Type
 16982 ;;		None
 16983 ;; Auto vars:     Size  Location     Type
 16984 ;;		None
 16985 ;; Return value:  Size  Location     Type
 16986 ;;		None               void
 16987 ;; Registers used:
 16988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;Total ram usage:        1 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; Hardware stack levels required when called:    4
 17001 ;; This function calls:
 17002 ;;		_IOC_ISR
 17003 ;;		_TMR0_ISR
 17004 ;; This function is called by:
 17005 ;;		Interrupt level 1
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009  0004                     _ISR:	
 17010                           
 17011                           ;incstack = 0
 17012                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17013  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17014  0005  3180               	pagesel	$
 17015  0006  0020               	movlb	0	; select bank0
 17016  0007  087F               	movf	127,w
 17017  0008  00F7               	movwf	??_ISR
 17018                           
 17019                           ;MCU_B1.c: 109: IOC_ISR();
 17020  0009  319D  2526  3180   	fcall	_IOC_ISR
 17021                           
 17022                           ;MCU_B1.c: 111: TMR0_ISR();
 17023  000C  3192  227D         	fcall	_TMR0_ISR
 17024  000E  0877               	movf	??_ISR,w
 17025  000F  0020               	movlb	0	; select bank0
 17026  0010  00FF               	movwf	127
 17027  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17028  0012  0009               	retfie
 17029  0013                     __end_of_ISR:	
 17030                           
 17031                           	psect	text120
 17032  127D                     __ptext120:	
 17033 ;; *************** function _TMR0_ISR *****************
 17034 ;; Defined at:
 17035 ;;		line 135 in file "../src/MCU_B1.c"
 17036 ;; Parameters:    Size  Location     Type
 17037 ;;		None
 17038 ;; Auto vars:     Size  Location     Type
 17039 ;;		None
 17040 ;; Return value:  Size  Location     Type
 17041 ;;		None               void
 17042 ;; Registers used:
 17043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17044 ;; Tracked objects:
 17045 ;;		On entry : 0/0
 17046 ;;		On exit  : 0/0
 17047 ;;		Unchanged: 0/0
 17048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;Total ram usage:        0 bytes
 17054 ;; Hardware stack levels used:    1
 17055 ;; Hardware stack levels required when called:    2
 17056 ;; This function calls:
 17057 ;;		_setDimmerLights_IntrControl
 17058 ;; This function is called by:
 17059 ;;		_ISR
 17060 ;; This function uses a non-reentrant model
 17061 ;;
 17062                           
 17063                           
 17064                           ;psect for function _TMR0_ISR
 17065  127D                     _TMR0_ISR:	
 17066                           
 17067                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 17068                           
 17069                           ;incstack = 0
 17070                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17071  127D  1E8B               	btfss	11,5	;volatile
 17072  127E  0008               	return
 17073  127F  1D0B               	btfss	11,2	;volatile
 17074  1280  0008               	return
 17075                           
 17076                           ;MCU_B1.c: 138: TMR0 = (256-190);
 17077  1281  3042               	movlw	66
 17078  1282  0020               	movlb	0	; select bank0
 17079  1283  0095               	movwf	21	;volatile
 17080                           
 17081                           ;MCU_B1.c: 139: TMR0IF = 0;
 17082  1284  110B               	bcf	11,2	;volatile
 17083                           
 17084                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 17085  1285  3001               	movlw	1
 17086  1286  3180  204A  3192   	fcall	_setDimmerLights_IntrControl
 17087                           
 17088                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 17089  1289  3002               	movlw	2
 17090  128A  3180  204A  3192   	fcall	_setDimmerLights_IntrControl
 17091                           
 17092                           ;MCU_B1.c: 154: setDimmerLights_IntrControl(3);
 17093  128D  3003               	movlw	3
 17094  128E  3180  204A  3192   	fcall	_setDimmerLights_IntrControl
 17095                           
 17096                           ;MCU_B1.c: 160: Timer0.Count++;
 17097  1291  3001               	movlw	1
 17098  1292  0022               	movlb	2	; select bank2
 17099  1293  07B6               	addwf	(_Timer0^(0+256)+1),f
 17100  1294  3000               	movlw	0
 17101  1295  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 17102                           
 17103                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 17104  1296  3001               	movlw	1
 17105  1297  3E35               	addlw	_Timer0& (0+255)
 17106  1298  0086               	movwf	6
 17107  1299  3001               	movlw	1	; select bank2/3
 17108  129A  0087               	movwf	7
 17109  129B  3F40               	moviw [0]fsr1
 17110  129C  3A64               	xorlw	100
 17111  129D  1D03               	skipz
 17112  129E  2AA1               	goto	u754_25
 17113  129F  3F41               	moviw [1]fsr1
 17114  12A0  3A00               	xorlw	0
 17115  12A1                     u754_25:	
 17116  12A1  1D03               	skipz
 17117  12A2  0008               	return
 17118                           
 17119                           ;MCU_B1.c: 162: Timer0.Count = 0;
 17120  12A3  01B6               	clrf	(_Timer0^(0+256)+1)
 17121  12A4  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 17122                           
 17123                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 17124  12A5  0021               	movlb	1	; select bank1
 17125  12A6  14A0               	bsf	_myMain^(0+128),1
 17126  12A7  0008               	return
 17127  12A8                     __end_of_TMR0_ISR:	
 17128                           
 17129                           	psect	text121
 17130  004A                     __ptext121:	
 17131 ;; *************** function _setDimmerLights_IntrControl *****************
 17132 ;; Defined at:
 17133 ;;		line 87 in file "../src/Dimmer_B1.c"
 17134 ;; Parameters:    Size  Location     Type
 17135 ;;  lights          1    wreg     unsigned char 
 17136 ;; Auto vars:     Size  Location     Type
 17137 ;;  lights          1    6[COMMON] unsigned char 
 17138 ;; Return value:  Size  Location     Type
 17139 ;;		None               void
 17140 ;; Registers used:
 17141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17142 ;; Tracked objects:
 17143 ;;		On entry : 0/0
 17144 ;;		On exit  : 0/0
 17145 ;;		Unchanged: 0/0
 17146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17150 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17151 ;;Total ram usage:        5 bytes
 17152 ;; Hardware stack levels used:    1
 17153 ;; Hardware stack levels required when called:    1
 17154 ;; This function calls:
 17155 ;;		_DimmerIntrPointSelect
 17156 ;; This function is called by:
 17157 ;;		_TMR0_ISR
 17158 ;; This function uses a non-reentrant model
 17159 ;;
 17160                           
 17161                           
 17162                           ;psect for function _setDimmerLights_IntrControl
 17163  004A                     _setDimmerLights_IntrControl:	
 17164                           
 17165                           ;incstack = 0
 17166                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17167                           ;setDimmerLights_IntrControl@lights stored from wreg
 17168  004A  00F6               	movwf	setDimmerLights_IntrControl@lights
 17169                           
 17170                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 17171  004B  0876               	movf	setDimmerLights_IntrControl@lights,w
 17172  004C  319F  2707  3180   	fcall	_DimmerIntrPointSelect
 17173                           
 17174                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 17175  004F  087C               	movf	_DimmerLightsIntr,w
 17176  0050  0086               	movwf	6
 17177  0051  3001               	movlw	1	; select bank2/3
 17178  0052  0087               	movwf	7
 17179  0053  1C01               	btfss	1,0
 17180  0054  28B5               	goto	i1l7270
 17181                           
 17182                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 17183  0055  3001               	movlw	1
 17184  0056  00F2               	movwf	??_setDimmerLights_IntrControl
 17185  0057  087C               	movf	_DimmerLightsIntr,w
 17186  0058  3E03               	addlw	3
 17187  0059  0086               	movwf	6
 17188  005A  3001               	movlw	1	; select bank2/3
 17189  005B  0087               	movwf	7
 17190  005C  0872               	movf	??_setDimmerLights_IntrControl,w
 17191  005D  0781               	addwf	1,f
 17192                           
 17193                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 17194  005E  0021               	movlb	1	; select bank1
 17195  005F  0848               	movf	_Dimmer^(0+128),w
 17196  0060  3E02               	addlw	2
 17197  0061  0086               	movwf	6
 17198  0062  0187               	clrf	7
 17199  0063  0801               	movf	1,w
 17200  0064  00F2               	movwf	??_setDimmerLights_IntrControl
 17201  0065  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17202  0066  09F2               	comf	??_setDimmerLights_IntrControl,f
 17203  0067  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 17204  0068  0AF2               	incf	??_setDimmerLights_IntrControl,f
 17205  0069  1903               	skipnz
 17206  006A  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 17207  006B  087C               	movf	_DimmerLightsIntr,w
 17208  006C  3E04               	addlw	4
 17209  006D  0086               	movwf	6
 17210  006E  3001               	movlw	1	; select bank2/3
 17211  006F  0087               	movwf	7
 17212  0070  0801               	movf	1,w
 17213  0071  0772               	addwf	??_setDimmerLights_IntrControl,w
 17214  0072  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17215  0073  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17216  0074  1803               	skipnc
 17217  0075  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17218  0076  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17219  0077  087C               	movf	_DimmerLightsIntr,w
 17220  0078  3E03               	addlw	3
 17221  0079  0086               	movwf	6
 17222  007A  3001               	movlw	1	; select bank2/3
 17223  007B  0087               	movwf	7
 17224  007C  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17225  007D  3A80               	xorlw	128
 17226  007E  3C80               	sublw	128
 17227  007F  1D03               	skipz
 17228  0080  2883               	goto	u638_25
 17229  0081  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17230  0082  0201               	subwf	1,w
 17231  0083                     u638_25:	
 17232  0083  1C03               	skipc
 17233  0084  29C4               	goto	i1l7336
 17234                           
 17235                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17236  0085  087C               	movf	_DimmerLightsIntr,w
 17237  0086  3E03               	addlw	3
 17238  0087  0086               	movwf	6
 17239  0088  3001               	movlw	1	; select bank2/3
 17240  0089  0087               	movwf	7
 17241  008A  0181               	clrf	1
 17242                           
 17243                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17244  008B  087C               	movf	_DimmerLightsIntr,w
 17245  008C  0086               	movwf	6
 17246  008D  3001               	movlw	1	; select bank2/3
 17247  008E  0087               	movwf	7
 17248  008F  1001               	bcf	1,0
 17249                           
 17250                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17251  0090  087C               	movf	_DimmerLightsIntr,w
 17252  0091  0086               	movwf	6
 17253  0092  3001               	movlw	1	; select bank2/3
 17254  0093  0087               	movwf	7
 17255  0094  1F01               	btfss	1,6
 17256  0095  29C4               	goto	i1l7336
 17257                           
 17258                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17259  0096  087C               	movf	_DimmerLightsIntr,w
 17260  0097  3E08               	addlw	8
 17261  0098  0086               	movwf	6
 17262  0099  3001               	movlw	1	; select bank2/3
 17263  009A  0087               	movwf	7
 17264  009B  1401               	bsf	1,0
 17265                           
 17266                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17267  009C  087C               	movf	_DimmerLightsIntr,w
 17268  009D  3E08               	addlw	8
 17269  009E  0086               	movwf	6
 17270  009F  3001               	movlw	1	; select bank2/3
 17271  00A0  0087               	movwf	7
 17272  00A1  1681               	bsf	1,5
 17273                           
 17274                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17275  00A2  0876               	movf	setDimmerLights_IntrControl@lights,w
 17276  00A3  3A01               	xorlw	1
 17277  00A4  1D03               	skipz
 17278  00A5  28A8               	goto	i1l7262
 17279                           
 17280                           ;Dimmer_B1.c: 101: RB4 = 1;
 17281  00A6  0020               	movlb	0	; select bank0
 17282  00A7  160D               	bsf	13,4	;volatile
 17283  00A8                     i1l7262:	
 17284                           ;Dimmer_B1.c: 102: ;;
 17285                           
 17286                           
 17287                           ;Dimmer_B1.c: 103: }
 17288                           ;Dimmer_B1.c: 106: if (lights == 2) {
 17289  00A8  0876               	movf	setDimmerLights_IntrControl@lights,w
 17290  00A9  3A02               	xorlw	2
 17291  00AA  1D03               	skipz
 17292  00AB  28AE               	goto	i1l7266
 17293                           
 17294                           ;Dimmer_B1.c: 107: RA7 = 1;
 17295  00AC  0020               	movlb	0	; select bank0
 17296  00AD  178C               	bsf	12,7	;volatile
 17297  00AE                     i1l7266:	
 17298                           
 17299                           ;Dimmer_B1.c: 108: }
 17300                           ;Dimmer_B1.c: 111: if (lights == 3) {
 17301  00AE  0876               	movf	setDimmerLights_IntrControl@lights,w
 17302  00AF  3A03               	xorlw	3
 17303  00B0  1D03               	skipz
 17304  00B1  29C4               	goto	i1l7336
 17305                           
 17306                           ;Dimmer_B1.c: 112: RB1 = 1;
 17307  00B2  0020               	movlb	0	; select bank0
 17308  00B3  148D               	bsf	13,1	;volatile
 17309                           
 17310                           ;Dimmer_B1.c: 113: }
 17311                           ;Dimmer_B1.c: 115: }
 17312                           ;Dimmer_B1.c: 116: }
 17313                           ;Dimmer_B1.c: 117: } else {
 17314  00B4  29C4               	goto	i1l7336
 17315  00B5                     i1l7270:	
 17316                           
 17317                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17318  00B5  087C               	movf	_DimmerLightsIntr,w
 17319  00B6  3E08               	addlw	8
 17320  00B7  0086               	movwf	6
 17321  00B8  3001               	movlw	1	; select bank2/3
 17322  00B9  0087               	movwf	7
 17323  00BA  1C01               	btfss	1,0
 17324  00BB  29C4               	goto	i1l7336
 17325                           
 17326                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17327  00BC  087C               	movf	_DimmerLightsIntr,w
 17328  00BD  3E08               	addlw	8
 17329  00BE  0086               	movwf	6
 17330  00BF  3001               	movlw	1	; select bank2/3
 17331  00C0  0087               	movwf	7
 17332  00C1  1001               	bcf	1,0
 17333                           
 17334                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17335  00C2  087C               	movf	_DimmerLightsIntr,w
 17336  00C3  0086               	movwf	6
 17337  00C4  3001               	movlw	1	; select bank2/3
 17338  00C5  0087               	movwf	7
 17339  00C6  1C81               	btfss	1,1
 17340  00C7  29C4               	goto	i1l7336
 17341                           
 17342                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17343  00C8  3001               	movlw	1
 17344  00C9  00F2               	movwf	??_setDimmerLights_IntrControl
 17345  00CA  0A7C               	incf	_DimmerLightsIntr,w
 17346  00CB  0086               	movwf	6
 17347  00CC  3001               	movlw	1	; select bank2/3
 17348  00CD  0087               	movwf	7
 17349  00CE  0872               	movf	??_setDimmerLights_IntrControl,w
 17350  00CF  0781               	addwf	1,f
 17351                           
 17352                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17353  00D0  0A7C               	incf	_DimmerLightsIntr,w
 17354  00D1  0086               	movwf	6
 17355  00D2  3001               	movlw	1	; select bank2/3
 17356  00D3  0087               	movwf	7
 17357  00D4  087C               	movf	_DimmerLightsIntr,w
 17358  00D5  3E02               	addlw	2
 17359  00D6  0084               	movwf	4
 17360  00D7  3001               	movlw	1	; select bank2/3
 17361  00D8  0085               	movwf	5
 17362  00D9  0800               	movf	0,w
 17363  00DA  0201               	subwf	1,w
 17364  00DB  1C03               	skipc
 17365  00DC  29C4               	goto	i1l7336
 17366                           
 17367                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17368  00DD  0A7C               	incf	_DimmerLightsIntr,w
 17369  00DE  0086               	movwf	6
 17370  00DF  3001               	movlw	1	; select bank2/3
 17371  00E0  0087               	movwf	7
 17372  00E1  0181               	clrf	1
 17373                           
 17374                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17375  00E2  087C               	movf	_DimmerLightsIntr,w
 17376  00E3  0086               	movwf	6
 17377  00E4  3001               	movlw	1	; select bank2/3
 17378  00E5  0087               	movwf	7
 17379  00E6  1D81               	btfss	1,3
 17380  00E7  291E               	goto	i1l7296
 17381                           
 17382                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17383  00E8  087C               	movf	_DimmerLightsIntr,w
 17384  00E9  0086               	movwf	6
 17385  00EA  3001               	movlw	1	; select bank2/3
 17386  00EB  0087               	movwf	7
 17387  00EC  1A01               	btfsc	1,4
 17388  00ED  2905               	goto	i1l7290
 17389                           
 17390                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-95)*0.8))) {
 17391  00EE  087C               	movf	_DimmerLightsIntr,w
 17392  00EF  3E04               	addlw	4
 17393  00F0  0086               	movwf	6
 17394  00F1  3001               	movlw	1	; select bank2/3
 17395  00F2  0087               	movwf	7
 17396  00F3  3005               	movlw	5
 17397  00F4  0201               	subwf	1,w
 17398  00F5  1C03               	skipc
 17399  00F6  28FF               	goto	i1l7288
 17400                           
 17401                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17402  00F7  087C               	movf	_DimmerLightsIntr,w
 17403  00F8  3E04               	addlw	4
 17404  00F9  0086               	movwf	6
 17405  00FA  3001               	movlw	1	; select bank2/3
 17406  00FB  0087               	movwf	7
 17407  00FC  3001               	movlw	1
 17408  00FD  0281               	subwf	1,f
 17409                           
 17410                           ;Dimmer_B1.c: 128: } else {
 17411  00FE  29C4               	goto	i1l7336
 17412  00FF                     i1l7288:	
 17413                           
 17414                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17415  00FF  087C               	movf	_DimmerLightsIntr,w
 17416  0100  0086               	movwf	6
 17417  0101  3001               	movlw	1	; select bank2/3
 17418  0102  0087               	movwf	7
 17419  0103  1601               	bsf	1,4
 17420                           
 17421                           ;Dimmer_B1.c: 130: }
 17422                           ;Dimmer_B1.c: 131: } else {
 17423  0104  29C4               	goto	i1l7336
 17424  0105                     i1l7290:	
 17425                           
 17426                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17427  0105  087C               	movf	_DimmerLightsIntr,w
 17428  0106  3E04               	addlw	4
 17429  0107  0086               	movwf	6
 17430  0108  3001               	movlw	1	; select bank2/3
 17431  0109  0087               	movwf	7
 17432  010A  303C               	movlw	60
 17433  010B  0201               	subwf	1,w
 17434  010C  1803               	skipnc
 17435  010D  2918               	goto	i1l7294
 17436                           
 17437                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17438  010E  3001               	movlw	1
 17439  010F  00F2               	movwf	??_setDimmerLights_IntrControl
 17440  0110  087C               	movf	_DimmerLightsIntr,w
 17441  0111  3E04               	addlw	4
 17442  0112  0086               	movwf	6
 17443  0113  3001               	movlw	1	; select bank2/3
 17444  0114  0087               	movwf	7
 17445  0115  0872               	movf	??_setDimmerLights_IntrControl,w
 17446  0116  0781               	addwf	1,f
 17447                           
 17448                           ;Dimmer_B1.c: 134: } else {
 17449  0117  29C4               	goto	i1l7336
 17450  0118                     i1l7294:	
 17451                           
 17452                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17453  0118  087C               	movf	_DimmerLightsIntr,w
 17454  0119  0086               	movwf	6
 17455  011A  3001               	movlw	1	; select bank2/3
 17456  011B  0087               	movwf	7
 17457  011C  1201               	bcf	1,4
 17458                           
 17459                           ;Dimmer_B1.c: 136: }
 17460                           ;Dimmer_B1.c: 137: }
 17461                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17462  011D  29C4               	goto	i1l7336
 17463  011E                     i1l7296:	
 17464  011E  087C               	movf	_DimmerLightsIntr,w
 17465  011F  0086               	movwf	6
 17466  0120  3001               	movlw	1	; select bank2/3
 17467  0121  0087               	movwf	7
 17468  0122  1D01               	btfss	1,2
 17469  0123  2965               	goto	i1l7310
 17470                           
 17471                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17472  0124  087C               	movf	_DimmerLightsIntr,w
 17473  0125  3E05               	addlw	5
 17474  0126  0086               	movwf	6
 17475  0127  3001               	movlw	1	; select bank2/3
 17476  0128  0087               	movwf	7
 17477  0129  087C               	movf	_DimmerLightsIntr,w
 17478  012A  3E04               	addlw	4
 17479  012B  0084               	movwf	4
 17480  012C  3001               	movlw	1	; select bank2/3
 17481  012D  0085               	movwf	5
 17482  012E  0800               	movf	0,w
 17483  012F  0201               	subwf	1,w
 17484  0130  1803               	skipnc
 17485  0131  293A               	goto	i1l7302
 17486                           
 17487                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17488  0132  087C               	movf	_DimmerLightsIntr,w
 17489  0133  3E04               	addlw	4
 17490  0134  0086               	movwf	6
 17491  0135  3001               	movlw	1	; select bank2/3
 17492  0136  0087               	movwf	7
 17493  0137  3001               	movlw	1
 17494  0138  0281               	subwf	1,f
 17495                           
 17496                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17497  0139  2951               	goto	i1l7306
 17498  013A                     i1l7302:	
 17499  013A  087C               	movf	_DimmerLightsIntr,w
 17500  013B  3E04               	addlw	4
 17501  013C  0086               	movwf	6
 17502  013D  3001               	movlw	1	; select bank2/3
 17503  013E  0087               	movwf	7
 17504  013F  087C               	movf	_DimmerLightsIntr,w
 17505  0140  3E05               	addlw	5
 17506  0141  0084               	movwf	4
 17507  0142  3001               	movlw	1	; select bank2/3
 17508  0143  0085               	movwf	5
 17509  0144  0800               	movf	0,w
 17510  0145  0201               	subwf	1,w
 17511  0146  1803               	skipnc
 17512  0147  2951               	goto	i1l7306
 17513                           
 17514                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17515  0148  3001               	movlw	1
 17516  0149  00F2               	movwf	??_setDimmerLights_IntrControl
 17517  014A  087C               	movf	_DimmerLightsIntr,w
 17518  014B  3E04               	addlw	4
 17519  014C  0086               	movwf	6
 17520  014D  3001               	movlw	1	; select bank2/3
 17521  014E  0087               	movwf	7
 17522  014F  0872               	movf	??_setDimmerLights_IntrControl,w
 17523  0150  0781               	addwf	1,f
 17524  0151                     i1l7306:	
 17525                           
 17526                           ;Dimmer_B1.c: 143: }
 17527                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17528  0151  087C               	movf	_DimmerLightsIntr,w
 17529  0152  3E05               	addlw	5
 17530  0153  0086               	movwf	6
 17531  0154  3001               	movlw	1	; select bank2/3
 17532  0155  0087               	movwf	7
 17533  0156  087C               	movf	_DimmerLightsIntr,w
 17534  0157  3E04               	addlw	4
 17535  0158  0084               	movwf	4
 17536  0159  3001               	movlw	1	; select bank2/3
 17537  015A  0085               	movwf	5
 17538  015B  0800               	movf	0,w
 17539  015C  0601               	xorwf	1,w
 17540  015D  1D03               	skipz
 17541  015E  29C4               	goto	i1l7336
 17542                           
 17543                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17544  015F  087C               	movf	_DimmerLightsIntr,w
 17545  0160  0086               	movwf	6
 17546  0161  3001               	movlw	1	; select bank2/3
 17547  0162  0087               	movwf	7
 17548  0163  1101               	bcf	1,2
 17549  0164  2980               	goto	i1l7316
 17550  0165                     i1l7310:	
 17551                           ;Dimmer_B1.c: 147: }
 17552                           ;Dimmer_B1.c: 148: } else {
 17553                           
 17554                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17555                           
 17556                           
 17557                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17558  0165  087C               	movf	_DimmerLightsIntr,w
 17559  0166  0086               	movwf	6
 17560  0167  3001               	movlw	1	; select bank2/3
 17561  0168  0087               	movwf	7
 17562  0169  1E81               	btfss	1,5
 17563  016A  2986               	goto	i1l7318
 17564                           
 17565                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17566  016B  087C               	movf	_DimmerLightsIntr,w
 17567  016C  3E04               	addlw	4
 17568  016D  0086               	movwf	6
 17569  016E  3001               	movlw	1	; select bank2/3
 17570  016F  0087               	movwf	7
 17571  0170  3001               	movlw	1
 17572  0171  0281               	subwf	1,f
 17573                           
 17574                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17575  0172  087C               	movf	_DimmerLightsIntr,w
 17576  0173  3E05               	addlw	5
 17577  0174  0086               	movwf	6
 17578  0175  3001               	movlw	1	; select bank2/3
 17579  0176  0087               	movwf	7
 17580  0177  087C               	movf	_DimmerLightsIntr,w
 17581  0178  3E04               	addlw	4
 17582  0179  0084               	movwf	4
 17583  017A  3001               	movlw	1	; select bank2/3
 17584  017B  0085               	movwf	5
 17585  017C  0800               	movf	0,w
 17586  017D  0201               	subwf	1,w
 17587  017E  1C03               	skipc
 17588  017F  29C4               	goto	i1l7336
 17589  0180                     i1l7316:	
 17590                           
 17591                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17592  0180  087C               	movf	_DimmerLightsIntr,w
 17593  0181  0086               	movwf	6
 17594  0182  3001               	movlw	1	; select bank2/3
 17595  0183  0087               	movwf	7
 17596  0184  1081               	bcf	1,1
 17597                           
 17598                           ;Dimmer_B1.c: 153: }
 17599                           ;Dimmer_B1.c: 154: } else {
 17600  0185  29C4               	goto	i1l7336
 17601  0186                     i1l7318:	
 17602                           
 17603                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17604  0186  3001               	movlw	1
 17605  0187  00F2               	movwf	??_setDimmerLights_IntrControl
 17606  0188  087C               	movf	_DimmerLightsIntr,w
 17607  0189  3E04               	addlw	4
 17608  018A  0086               	movwf	6
 17609  018B  3001               	movlw	1	; select bank2/3
 17610  018C  0087               	movwf	7
 17611  018D  0872               	movf	??_setDimmerLights_IntrControl,w
 17612  018E  0781               	addwf	1,f
 17613                           
 17614                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17615  018F  087C               	movf	_DimmerLightsIntr,w
 17616  0190  3E04               	addlw	4
 17617  0191  0086               	movwf	6
 17618  0192  3001               	movlw	1	; select bank2/3
 17619  0193  0087               	movwf	7
 17620  0194  087C               	movf	_DimmerLightsIntr,w
 17621  0195  3E06               	addlw	6
 17622  0196  0084               	movwf	4
 17623  0197  3001               	movlw	1	; select bank2/3
 17624  0198  0085               	movwf	5
 17625  0199  0800               	movf	0,w
 17626  019A  0201               	subwf	1,w
 17627  019B  1C03               	skipc
 17628  019C  29C4               	goto	i1l7336
 17629                           
 17630                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17631  019D  087C               	movf	_DimmerLightsIntr,w
 17632  019E  0086               	movwf	6
 17633  019F  3001               	movlw	1	; select bank2/3
 17634  01A0  0087               	movwf	7
 17635  01A1  1081               	bcf	1,1
 17636                           
 17637                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17638  01A2  087C               	movf	_DimmerLightsIntr,w
 17639  01A3  0086               	movwf	6
 17640  01A4  3001               	movlw	1	; select bank2/3
 17641  01A5  0087               	movwf	7
 17642  01A6  1301               	bcf	1,6
 17643                           
 17644                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17645  01A7  087C               	movf	_DimmerLightsIntr,w
 17646  01A8  3E09               	addlw	9
 17647  01A9  0086               	movwf	6
 17648  01AA  3001               	movlw	1	; select bank2/3
 17649  01AB  0087               	movwf	7
 17650  01AC  1501               	bsf	1,2
 17651                           
 17652                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17653  01AD  0021               	movlb	1	; select bank1
 17654  01AE  0848               	movf	_Dimmer^(0+128),w
 17655  01AF  0086               	movwf	6
 17656  01B0  0187               	clrf	7
 17657  01B1  1401               	bsf	1,0
 17658                           
 17659                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17660  01B2  0876               	movf	setDimmerLights_IntrControl@lights,w
 17661  01B3  3A01               	xorlw	1
 17662  01B4  1D03               	skipz
 17663  01B5  29B8               	goto	i1l7328
 17664                           
 17665                           ;Dimmer_B1.c: 163: RC7 = 0;
 17666  01B6  0020               	movlb	0	; select bank0
 17667  01B7  138E               	bcf	14,7	;volatile
 17668  01B8                     i1l7328:	
 17669                           
 17670                           ;Dimmer_B1.c: 165: }
 17671                           ;Dimmer_B1.c: 168: if (lights == 2) {
 17672  01B8  0876               	movf	setDimmerLights_IntrControl@lights,w
 17673  01B9  3A02               	xorlw	2
 17674  01BA  1D03               	skipz
 17675  01BB  29BE               	goto	i1l7332
 17676                           
 17677                           ;Dimmer_B1.c: 169: RA3 = 0;
 17678  01BC  0020               	movlb	0	; select bank0
 17679  01BD  118C               	bcf	12,3	;volatile
 17680  01BE                     i1l7332:	
 17681                           
 17682                           ;Dimmer_B1.c: 170: }
 17683                           ;Dimmer_B1.c: 173: if (lights == 3) {
 17684  01BE  0876               	movf	setDimmerLights_IntrControl@lights,w
 17685  01BF  3A03               	xorlw	3
 17686  01C0  1D03               	skipz
 17687  01C1  29C4               	goto	i1l7336
 17688                           
 17689                           ;Dimmer_B1.c: 174: RC6 = 0;
 17690  01C2  0020               	movlb	0	; select bank0
 17691  01C3  130E               	bcf	14,6	;volatile
 17692  01C4                     i1l7336:	
 17693                           ;Dimmer_B1.c: 175: }
 17694                           ;Dimmer_B1.c: 177: ;;
 17695                           
 17696                           
 17697                           ;Dimmer_B1.c: 178: }
 17698                           ;Dimmer_B1.c: 179: }
 17699                           ;Dimmer_B1.c: 180: }
 17700                           ;Dimmer_B1.c: 181: }
 17701                           ;Dimmer_B1.c: 182: }
 17702                           ;Dimmer_B1.c: 183: }
 17703                           ;Dimmer_B1.c: 184: }
 17704                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17705  01C4  087C               	movf	_DimmerLightsIntr,w
 17706  01C5  3E08               	addlw	8
 17707  01C6  0086               	movwf	6
 17708  01C7  3001               	movlw	1	; select bank2/3
 17709  01C8  0087               	movwf	7
 17710  01C9  1E81               	btfss	1,5
 17711  01CA  29FB               	goto	i1l7358
 17712                           
 17713                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17714  01CB  3001               	movlw	1
 17715  01CC  00F2               	movwf	??_setDimmerLights_IntrControl
 17716  01CD  087C               	movf	_DimmerLightsIntr,w
 17717  01CE  3E07               	addlw	7
 17718  01CF  0086               	movwf	6
 17719  01D0  3001               	movlw	1	; select bank2/3
 17720  01D1  0087               	movwf	7
 17721  01D2  0872               	movf	??_setDimmerLights_IntrControl,w
 17722  01D3  0781               	addwf	1,f
 17723                           
 17724                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17725  01D4  087C               	movf	_DimmerLightsIntr,w
 17726  01D5  3E07               	addlw	7
 17727  01D6  0086               	movwf	6
 17728  01D7  3001               	movlw	1	; select bank2/3
 17729  01D8  0087               	movwf	7
 17730  01D9  3005               	movlw	5
 17731  01DA  0201               	subwf	1,w
 17732  01DB  1C03               	skipc
 17733  01DC  29FB               	goto	i1l7358
 17734                           
 17735                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17736  01DD  087C               	movf	_DimmerLightsIntr,w
 17737  01DE  3E07               	addlw	7
 17738  01DF  0086               	movwf	6
 17739  01E0  3001               	movlw	1	; select bank2/3
 17740  01E1  0087               	movwf	7
 17741  01E2  0181               	clrf	1
 17742                           
 17743                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17744  01E3  087C               	movf	_DimmerLightsIntr,w
 17745  01E4  3E08               	addlw	8
 17746  01E5  0086               	movwf	6
 17747  01E6  3001               	movlw	1	; select bank2/3
 17748  01E7  0087               	movwf	7
 17749  01E8  1281               	bcf	1,5
 17750                           
 17751                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17752  01E9  0876               	movf	setDimmerLights_IntrControl@lights,w
 17753  01EA  3A01               	xorlw	1
 17754  01EB  1D03               	skipz
 17755  01EC  29EF               	goto	i1l7350
 17756                           
 17757                           ;Dimmer_B1.c: 193: RB4 = 0;
 17758  01ED  0020               	movlb	0	; select bank0
 17759  01EE  120D               	bcf	13,4	;volatile
 17760  01EF                     i1l7350:	
 17761                           ;Dimmer_B1.c: 194: ;;
 17762                           
 17763                           
 17764                           ;Dimmer_B1.c: 195: }
 17765                           ;Dimmer_B1.c: 198: if (lights == 2) {
 17766  01EF  0876               	movf	setDimmerLights_IntrControl@lights,w
 17767  01F0  3A02               	xorlw	2
 17768  01F1  1D03               	skipz
 17769  01F2  29F5               	goto	i1l7354
 17770                           
 17771                           ;Dimmer_B1.c: 199: RA7 = 0;
 17772  01F3  0020               	movlb	0	; select bank0
 17773  01F4  138C               	bcf	12,7	;volatile
 17774  01F5                     i1l7354:	
 17775                           
 17776                           ;Dimmer_B1.c: 200: }
 17777                           ;Dimmer_B1.c: 203: if (lights == 3) {
 17778  01F5  0876               	movf	setDimmerLights_IntrControl@lights,w
 17779  01F6  3A03               	xorlw	3
 17780  01F7  1D03               	skipz
 17781  01F8  29FB               	goto	i1l7358
 17782                           
 17783                           ;Dimmer_B1.c: 204: RB1 = 0;
 17784  01F9  0020               	movlb	0	; select bank0
 17785  01FA  108D               	bcf	13,1	;volatile
 17786  01FB                     i1l7358:	
 17787                           
 17788                           ;Dimmer_B1.c: 205: }
 17789                           ;Dimmer_B1.c: 207: }
 17790                           ;Dimmer_B1.c: 208: }
 17791                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17792  01FB  087C               	movf	_DimmerLightsIntr,w
 17793  01FC  3E09               	addlw	9
 17794  01FD  0086               	movwf	6
 17795  01FE  3001               	movlw	1	; select bank2/3
 17796  01FF  0087               	movwf	7
 17797  0200  1E81               	btfss	1,5
 17798  0201  0008               	return
 17799                           
 17800                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17801  0202  3001               	movlw	1
 17802  0203  00F2               	movwf	??_setDimmerLights_IntrControl
 17803  0204  087C               	movf	_DimmerLightsIntr,w
 17804  0205  3E0A               	addlw	10
 17805  0206  0086               	movwf	6
 17806  0207  3001               	movlw	1	; select bank2/3
 17807  0208  0087               	movwf	7
 17808  0209  0872               	movf	??_setDimmerLights_IntrControl,w
 17809  020A  0781               	addwf	1,f
 17810                           
 17811                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17812  020B  087C               	movf	_DimmerLightsIntr,w
 17813  020C  3E0A               	addlw	10
 17814  020D  0086               	movwf	6
 17815  020E  3001               	movlw	1	; select bank2/3
 17816  020F  0087               	movwf	7
 17817  0210  0801               	movf	1,w
 17818  0211  3A46               	xorlw	70
 17819  0212  1D03               	skipz
 17820  0213  0008               	return
 17821                           
 17822                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17823  0214  087C               	movf	_DimmerLightsIntr,w
 17824  0215  3E0A               	addlw	10
 17825  0216  0086               	movwf	6
 17826  0217  3001               	movlw	1	; select bank2/3
 17827  0218  0087               	movwf	7
 17828  0219  0181               	clrf	1
 17829                           
 17830                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17831  021A  087C               	movf	_DimmerLightsIntr,w
 17832  021B  3E09               	addlw	9
 17833  021C  0086               	movwf	6
 17834  021D  3001               	movlw	1	; select bank2/3
 17835  021E  0087               	movwf	7
 17836  021F  1281               	bcf	1,5
 17837  0220  0008               	return
 17838  0221                     __end_of_setDimmerLights_IntrControl:	
 17839                           
 17840                           	psect	text122
 17841  1F07                     __ptext122:	
 17842 ;; *************** function _DimmerIntrPointSelect *****************
 17843 ;; Defined at:
 17844 ;;		line 65 in file "../src/Dimmer_B1.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;  lights          1    wreg     unsigned char 
 17847 ;; Auto vars:     Size  Location     Type
 17848 ;;  lights          1    1[COMMON] unsigned char 
 17849 ;; Return value:  Size  Location     Type
 17850 ;;		None               void
 17851 ;; Registers used:
 17852 ;;		wreg
 17853 ;; Tracked objects:
 17854 ;;		On entry : 0/0
 17855 ;;		On exit  : 0/0
 17856 ;;		Unchanged: 0/0
 17857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;Total ram usage:        2 bytes
 17863 ;; Hardware stack levels used:    1
 17864 ;; This function calls:
 17865 ;;		Nothing
 17866 ;; This function is called by:
 17867 ;;		_setDimmerLights_IntrControl
 17868 ;; This function uses a non-reentrant model
 17869 ;;
 17870                           
 17871                           
 17872                           ;psect for function _DimmerIntrPointSelect
 17873  1F07                     _DimmerIntrPointSelect:	
 17874                           
 17875                           ;incstack = 0
 17876                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17877                           ;DimmerIntrPointSelect@lights stored from wreg
 17878  1F07  00F1               	movwf	DimmerIntrPointSelect@lights
 17879                           
 17880                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17881  1F08  0871               	movf	DimmerIntrPointSelect@lights,w
 17882  1F09  3A01               	xorlw	1
 17883  1F0A  1D03               	skipz
 17884  1F0B  2F10               	goto	i1l834
 17885                           
 17886                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17887  1F0C  303D               	movlw	_DimmerLights1& (0+255)
 17888  1F0D  00F0               	movwf	??_DimmerIntrPointSelect
 17889  1F0E  0870               	movf	??_DimmerIntrPointSelect,w
 17890  1F0F  00FC               	movwf	_DimmerLightsIntr
 17891  1F10                     i1l834:	
 17892                           
 17893                           ;Dimmer_B1.c: 69: }
 17894                           ;Dimmer_B1.c: 72: if (lights == 2) {
 17895  1F10  0871               	movf	DimmerIntrPointSelect@lights,w
 17896  1F11  3A02               	xorlw	2
 17897  1F12  1D03               	skipz
 17898  1F13  2F18               	goto	i1l835
 17899                           
 17900                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 17901  1F14  30C5               	movlw	_DimmerLights2& (0+255)
 17902  1F15  00F0               	movwf	??_DimmerIntrPointSelect
 17903  1F16  0870               	movf	??_DimmerIntrPointSelect,w
 17904  1F17  00FC               	movwf	_DimmerLightsIntr
 17905  1F18                     i1l835:	
 17906                           
 17907                           ;Dimmer_B1.c: 74: }
 17908                           ;Dimmer_B1.c: 78: if (lights == 3) {
 17909  1F18  0871               	movf	DimmerIntrPointSelect@lights,w
 17910  1F19  3A03               	xorlw	3
 17911  1F1A  1D03               	skipz
 17912  1F1B  0008               	return
 17913                           
 17914                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights3;
 17915  1F1C  30D4               	movlw	_DimmerLights3& (0+255)
 17916  1F1D  00F0               	movwf	??_DimmerIntrPointSelect
 17917  1F1E  0870               	movf	??_DimmerIntrPointSelect,w
 17918  1F1F  00FC               	movwf	_DimmerLightsIntr
 17919  1F20  0008               	return
 17920  1F21                     __end_of_DimmerIntrPointSelect:	
 17921                           
 17922                           	psect	text123
 17923  1D26                     __ptext123:	
 17924 ;; *************** function _IOC_ISR *****************
 17925 ;; Defined at:
 17926 ;;		line 291 in file "../src/MCU_B1.c"
 17927 ;; Parameters:    Size  Location     Type
 17928 ;;		None
 17929 ;; Auto vars:     Size  Location     Type
 17930 ;;		None
 17931 ;; Return value:  Size  Location     Type
 17932 ;;		None               void
 17933 ;; Registers used:
 17934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17935 ;; Tracked objects:
 17936 ;;		On entry : 0/0
 17937 ;;		On exit  : 0/0
 17938 ;;		Unchanged: 0/0
 17939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;Total ram usage:        0 bytes
 17945 ;; Hardware stack levels used:    1
 17946 ;; Hardware stack levels required when called:    3
 17947 ;; This function calls:
 17948 ;;		_setDimmerReClock
 17949 ;; This function is called by:
 17950 ;;		_ISR
 17951 ;; This function uses a non-reentrant model
 17952 ;;
 17953                           
 17954                           
 17955                           ;psect for function _IOC_ISR
 17956  1D26                     _IOC_ISR:	
 17957                           
 17958                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 17959                           
 17960                           ;incstack = 0
 17961                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17962  1D26  1D8B               	btfss	11,3	;volatile
 17963  1D27  0008               	return
 17964  1D28  0027               	movlb	7	; select bank7
 17965  1D29  1D16               	btfss	22,2	;volatile
 17966  1D2A  0008               	return
 17967                           
 17968                           ;MCU_B1.c: 293: IOCBF2 = 0;
 17969  1D2B  1116               	bcf	22,2	;volatile
 17970                           
 17971                           ;MCU_B1.c: 294: IOCIF = 0;
 17972  1D2C  100B               	bcf	11,0	;volatile
 17973                           
 17974                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 17975  1D2D  0021               	movlb	1	; select bank1
 17976  1D2E  1C20               	btfss	_myMain^(0+128),0
 17977  1D2F  0008               	return
 17978                           
 17979                           ;MCU_B1.c: 297: setDimmerReClock();
 17980  1D30  319C  24DE         	fcall	_setDimmerReClock
 17981  1D32  0008               	return
 17982  1D33                     __end_of_IOC_ISR:	
 17983                           
 17984                           	psect	text124
 17985  1CDE                     __ptext124:	
 17986 ;; *************** function _setDimmerReClock *****************
 17987 ;; Defined at:
 17988 ;;		line 169 in file "../src/MCU_B1.c"
 17989 ;; Parameters:    Size  Location     Type
 17990 ;;		None
 17991 ;; Auto vars:     Size  Location     Type
 17992 ;;		None
 17993 ;; Return value:  Size  Location     Type
 17994 ;;		None               void
 17995 ;; Registers used:
 17996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17997 ;; Tracked objects:
 17998 ;;		On entry : 0/0
 17999 ;;		On exit  : 0/0
 18000 ;;		Unchanged: 0/0
 18001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;Total ram usage:        0 bytes
 18007 ;; Hardware stack levels used:    1
 18008 ;; Hardware stack levels required when called:    2
 18009 ;; This function calls:
 18010 ;;		_setDimmerLights_IntrIOC_GO
 18011 ;; This function is called by:
 18012 ;;		_IOC_ISR
 18013 ;; This function uses a non-reentrant model
 18014 ;;
 18015                           
 18016                           
 18017                           ;psect for function _setDimmerReClock
 18018  1CDE                     _setDimmerReClock:	
 18019                           
 18020                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 18021                           
 18022                           ;incstack = 0
 18023                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18024  1CDE  3001               	movlw	1
 18025  1CDF  3190  206F  319C   	fcall	_setDimmerLights_IntrIOC_GO
 18026                           
 18027                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 18028  1CE2  3002               	movlw	2
 18029  1CE3  3190  206F  319C   	fcall	_setDimmerLights_IntrIOC_GO
 18030                           
 18031                           ;MCU_B1.c: 182: setDimmerLights_IntrIOC_GO(3);
 18032  1CE6  3003               	movlw	3
 18033  1CE7  3190  206F         	fcall	_setDimmerLights_IntrIOC_GO
 18034  1CE9  0008               	return
 18035  1CEA                     __end_of_setDimmerReClock:	
 18036                           
 18037                           	psect	text125
 18038  106F                     __ptext125:	
 18039 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18040 ;; Defined at:
 18041 ;;		line 28 in file "../src/Dimmer_B1.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;  lights          1    wreg     unsigned char 
 18044 ;; Auto vars:     Size  Location     Type
 18045 ;;  lights          1    2[COMMON] unsigned char 
 18046 ;; Return value:  Size  Location     Type
 18047 ;;		None               void
 18048 ;; Registers used:
 18049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18050 ;; Tracked objects:
 18051 ;;		On entry : 0/0
 18052 ;;		On exit  : 0/0
 18053 ;;		Unchanged: 0/0
 18054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;Total ram usage:        1 bytes
 18060 ;; Hardware stack levels used:    1
 18061 ;; Hardware stack levels required when called:    1
 18062 ;; This function calls:
 18063 ;;		_DimmerIntrIOCPointSelect
 18064 ;; This function is called by:
 18065 ;;		_setDimmerReClock
 18066 ;; This function uses a non-reentrant model
 18067 ;;
 18068                           
 18069                           
 18070                           ;psect for function _setDimmerLights_IntrIOC_GO
 18071  106F                     _setDimmerLights_IntrIOC_GO:	
 18072                           
 18073                           ;incstack = 0
 18074                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18075                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18076  106F  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18077                           
 18078                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18079  1070  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18080  1071  319F  278C  3190   	fcall	_DimmerIntrIOCPointSelect
 18081                           
 18082                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18083  1074  0021               	movlb	1	; select bank1
 18084  1075  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 18085  1076  0086               	movwf	6
 18086  1077  3001               	movlw	1	; select bank2/3
 18087  1078  0087               	movwf	7
 18088  1079  1801               	btfsc	1,0
 18089  107A  0008               	return
 18090  107B  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 18091  107C  3E09               	addlw	9
 18092  107D  0086               	movwf	6
 18093  107E  3001               	movlw	1	; select bank2/3
 18094  107F  0087               	movwf	7
 18095  1080  1A81               	btfsc	1,5
 18096  1081  0008               	return
 18097                           
 18098                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18099  1082  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 18100  1083  0086               	movwf	6
 18101  1084  3001               	movlw	1	; select bank2/3
 18102  1085  0087               	movwf	7
 18103  1086  1401               	bsf	1,0
 18104                           
 18105                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18106  1087  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 18107  1088  3E09               	addlw	9
 18108  1089  0086               	movwf	6
 18109  108A  3001               	movlw	1	; select bank2/3
 18110  108B  0087               	movwf	7
 18111  108C  1681               	bsf	1,5
 18112  108D  0008               	return
 18113  108E                     __end_of_setDimmerLights_IntrIOC_GO:	
 18114                           
 18115                           	psect	text126
 18116  1F8C                     __ptext126:	
 18117 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18118 ;; Defined at:
 18119 ;;		line 8 in file "../src/Dimmer_B1.c"
 18120 ;; Parameters:    Size  Location     Type
 18121 ;;  lights          1    wreg     unsigned char 
 18122 ;; Auto vars:     Size  Location     Type
 18123 ;;  lights          1    1[COMMON] unsigned char 
 18124 ;; Return value:  Size  Location     Type
 18125 ;;		None               void
 18126 ;; Registers used:
 18127 ;;		wreg
 18128 ;; Tracked objects:
 18129 ;;		On entry : 0/0
 18130 ;;		On exit  : 0/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;Total ram usage:        2 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; This function calls:
 18140 ;;		Nothing
 18141 ;; This function is called by:
 18142 ;;		_setDimmerLights_IntrIOC_GO
 18143 ;; This function uses a non-reentrant model
 18144 ;;
 18145                           
 18146                           
 18147                           ;psect for function _DimmerIntrIOCPointSelect
 18148  1F8C                     _DimmerIntrIOCPointSelect:	
 18149                           
 18150                           ;incstack = 0
 18151                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18152                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18153  1F8C  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18154                           
 18155                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18156  1F8D  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18157  1F8E  3A01               	xorlw	1
 18158  1F8F  1D03               	skipz
 18159  1F90  2F96               	goto	i1l824
 18160                           
 18161                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18162  1F91  303D               	movlw	_DimmerLights1& (0+255)
 18163  1F92  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18164  1F93  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18165  1F94  0021               	movlb	1	; select bank1
 18166  1F95  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 18167  1F96                     i1l824:	
 18168                           
 18169                           ;Dimmer_B1.c: 12: }
 18170                           ;Dimmer_B1.c: 15: if (lights == 2) {
 18171  1F96  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18172  1F97  3A02               	xorlw	2
 18173  1F98  1D03               	skipz
 18174  1F99  2F9F               	goto	i1l825
 18175                           
 18176                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 18177  1F9A  30C5               	movlw	_DimmerLights2& (0+255)
 18178  1F9B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18179  1F9C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18180  1F9D  0021               	movlb	1	; select bank1
 18181  1F9E  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 18182  1F9F                     i1l825:	
 18183                           
 18184                           ;Dimmer_B1.c: 17: }
 18185                           ;Dimmer_B1.c: 21: if (lights == 3) {
 18186  1F9F  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18187  1FA0  3A03               	xorlw	3
 18188  1FA1  1D03               	skipz
 18189  1FA2  0008               	return
 18190                           
 18191                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 18192  1FA3  30D4               	movlw	_DimmerLights3& (0+255)
 18193  1FA4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18194  1FA5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18195  1FA6  0021               	movlb	1	; select bank1
 18196  1FA7  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 18197  1FA8  0008               	return
 18198  1FA9                     __end_of_DimmerIntrIOCPointSelect:	
 18199  007E                     btemp	set	126	;btemp
 18200  007E                     pic14e$flags	set	126
 18201  007E                     wtemp	set	126
 18202  007E                     wtemp0	set	126
 18203  0080                     wtemp1	set	128
 18204  0082                     wtemp2	set	130
 18205  0084                     wtemp3	set	132
 18206  0086                     wtemp4	set	134
 18207  0088                     wtemp5	set	136
 18208  007F                     wtemp6	set	127
 18209  007E                     ttemp	set	126
 18210  007E                     ttemp0	set	126
 18211  0081                     ttemp1	set	129
 18212  0084                     ttemp2	set	132
 18213  0087                     ttemp3	set	135
 18214  007F                     ttemp4	set	127
 18215  007E                     ltemp	set	126
 18216  007E                     ltemp0	set	126
 18217  0082                     ltemp1	set	130
 18218  0086                     ltemp2	set	134
 18219  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         249
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     79      80
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      76
    BANK4            80      0      41
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK4[9]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK2[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw3(BANK2[5]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   87025
                                             75 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1463
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     130
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6930
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    6930
                                             17 BANK0      1     1      0
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    6930
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     132
                                              1 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4202
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     368
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2406
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20782
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   20782
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0    9160
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8765
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1328
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1067
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1067
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27772
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   27772
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   27096
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25809
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10310
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1136
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11201
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11135
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1222
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1222
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9954
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0    9840
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6377
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1677
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1036
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      88
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      88
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9642
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9642
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     558
                                              1 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     622
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     430
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     430
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      88
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      88
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     286
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      29      13       51.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     173      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     173      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 20 16:39:45 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1192                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 0078  
     __end_of_getDimmerLights_StatusFlag 1E67               _getDimmerLights_StatusFlag 1E53  
                 __end_of_setDelayOff_GO 0A95                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0EE2                             ___ftadd@sign 0048  
                                    l114 17D8                                      l124 160B  
                                    l116 17EC                                      l125 1607  
                                    l126 15F5                                      l128 1605  
                                    l408 11DF                                      l291 093D  
                                    l364 1EFA                                      l365 1EFC  
                                    l936 178C                                      l881 1F5F  
                                    l882 1F67                                      _GIE 005F  
                                    _CRC 00C7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0021  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00C3                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00BE                                      _ISR 0004  
                                    _WDT 00EF                                      _Sw1 014C  
                                    _Sw2 01E3                                      _Sw3 0240  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1F07  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1C6B  
                        __end_of_ADC_Set 1CAC                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0D51                    _setDimmerLights_ERROR 16AE  
                  _setDimmerLights_AdjRF 1192                    _setDimmerLights_AdjGo 1DDB  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1D33  
                           ___ftdiv@sign 003D                 ?_DimmerLightsPointSelect 0070  
                                   l2331 0983                                     l1462 1355  
                                   l1471 083D                                     l3152 08EA  
                                   l2336 09A8                                     l1449 10CA  
                                   l2409 141F                                     l3146 08D3  
                                   l2354 1D73                                     l2338 09B9  
                                   l2372 138B                          __end_of_IOC_Set 0800  
                                   l1662 157E                                     l3175 0410  
                                   l6000 0E41                                     l2394 10D7  
                                   l2395 10E1                                     l6004 0E4F  
                                   l2812 0253                                     l6030 1E4A  
                                   l6112 1FD1                                     l6026 1E44  
                                   l6044 1FB4                                     l6116 1FDA  
                                   l2780 1D7E                                     l7020 0E68  
                                   l6134 1714                                     l2862 0A01  
                                   l2838 0E8F                                     l7022 0E6B  
                                   l6048 1FBD                                     l6160 174B  
                                   l6152 173A                                     l6144 171C  
                                   l6128 1709                                     l6216 0AF1  
                                   l6064 127B                                     l7104 09FC  
                                   l7032 0E79                                     l6146 1728  
                                   l7034 0E7C                                     l6156 1743  
                                   l6420 1FF9                                     l7044 0E8A  
                                   l8012 1567                                     l7150 14D8  
                                   l7134 0B4E                                     l7160 14E8  
                                   l6512 0FC8                                     l7080 09DA  
                                   l7064 0ED0                                     l7154 14DE  
                                   l8202 0BAA                                     l6418 1FF3  
                                   l6282 0A67                                     l7082 09DD  
                                   l7164 14EE                                     l7148 14D5  
                                   l6436 1E60                                     l5812 03A0  
                                   l6292 0A86                                     l6508 0FB2  
                                   l7092 09EB                                     l6550 1F33  
                                   l7158 14E5                                     l8222 0BD5  
                                   l8214 0BC9                                     l8206 0BB0  
                                   l5830 03C9                                     l6286 0A6D  
                                   l7094 09EE                                     l6544 1F2A  
                                   l8160 1317                                     l6560 11BF  
                                   l5840 03EB                                     l5808 0399  
                                   l5920 05FE                                     l6368 139B  
                                   l6536 140D                                     l6288 0A7A  
                                   l8312 06F9                                     l6546 1F2D  
                                   l5770 08BF                                     l5762 08A9  
                                   l5906 07D1                                     l8218 0BCF  
                                   l8226 0BDB                                     l6562 11C2  
                                   l6722 0912                                     l5850 040C  
                                   l5842 03EF                                     l5818 03AF  
                                   l8330 072F                                     l8322 071D  
                                   l8164 1322                                     l8156 130C  
                                   l8180 0B88                                     l8420 0F0B  
                                   l6804 0C21                                     l6740 0943  
                                   l6716 0909                                     l5836 03DC  
                                   l8500 0C73                                     l5766 08B0  
                                   l8254 0DA5                                     l8430 0F19  
                                   l8406 0EF7                                     l6566 11C8  
                                   l6806 0C3A                                     l6750 0953  
                                   l6742 0946                                     l6718 090C  
                                   l5854 0422                                     l5838 03E6  
                                   l5950 066B                                     l5942 0657  
                                   l5926 0614                                     l8334 0738  
                                   l8326 0726                                     l8318 0714  
                                   l8350 149C                                     l7542 10FF  
                                   l6832 11F0                                     l6840 1178  
                                   l5776 08D8                                     l5768 08BA  
                                   l8184 0B8E                                     l8176 0B82  
                                   l8440 0F3C                                     l8432 0F1E  
                                   l8408 0EFA                                     l7560 081D  
                                   l6736 0924                                     l5848 0402  
                                   l7704 1D83                                     l7720 023A  
                                   l8280 1768                                     l7536 10F7  
                                   l7810 15DF                                     l6834 11FB  
                                   l6842 117B                                     l5778 08E0  
                                   l5970 0DEA                                     l8194 0B9E  
                                   l8442 0F42                                     l8418 0F08  
                                   l6922 133D                                     l7554 0808  
                                   l6754 0959                                     l6746 094C  
                                   l5858 0434                                     l5954 0673  
                                   l5938 064F                                     l6498 0F8E  
                                   l8338 0741                                     l8362 158E  
                                   l8346 1490                                     l8522 0CA0  
                                   l7538 10FA                                     l5796 1158  
                                   l5884 0777                                     l8188 0B94  
                                   l8452 0F6A                                     l6772 0BF3  
                                   l6748 0950                                     l5868 044F  
                                   l7708 1D89                                     l7740 0281  
                                   l7724 0247                                     l8532 0CB7  
                                   l6846 1181                                     l5878 0761  
                                   l5990 0E28                                     l8198 0BA4  
                                   l6782 0C06                                     l6766 0BEA  
                                   l6774 0BF6                                     l8374 15A4  
                                   l7750 02AE                                     l8286 177B  
                                   l8534 0CB9                                     l6784 0C09  
                                   l6768 0BED                                     l8288 1780  
                                   l8632 1681                                     l5898 07B8  
                                   l7914 04D9                                     l8482 1659  
                                   l8474 164B                                     l8554 0977  
                                   l5996 0E35                                     l5988 0E1A  
                                   l6876 144A                                     l6788 0C0F  
                                   l7764 02EC                                     l8636 1688  
                  _myMain_Initialization 1D8C                                     l5998 0E3E  
                                   l8478 1652                                     l8574 0993  
                                   l7774 031E                                     _CFGS 0CAE  
                                   l7988 13EA                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4025 08F1  
                                   u4205 03F0                                     u4305 0789  
                                   u4145 03CA                                     u4315 0799  
                                   u4235 0403                                     u4325 07B9  
                                   u4335 07C8                                     u4175 03DD  
                                   u4415 0658                                     u4345 07D2  
                                   u4425 065E                                     _PEIE 005E  
                                   u4525 0E1B                                     u4455 0674  
                                   u4465 067A                                     u4385 0620  
                                   u5195 1EB5                                     u4555 0E36  
                                   u4395 0630                                     u4815 171F  
                                   u4495 0DF1                                     u4920 0A9F  
                                   u4835 1729                                     u3955 08B5  
                                   u4675 1267                                     u4845 1733  
                                   u4925 0A9D                                     u4855 173B  
                                   u3975 08CE                                     u5745 11E5  
                                   u7435 15D5                                     u3995 08DB  
                                   u7615 10C1                                     u7655 13E1  
                                   u7665 13F0                                     u7685 154B  
                                   u7695 1576                                     _LWLO 0CAD  
                                   _RFSW 00CD                                     _TMR0 0015  
                                   _RSSI 00CE                                     _WREN 0CAA  
                                   _Buz1 00B2                                     __WDT 00EA  
                                   _main 1660                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0D51                          __end_of_RF_Main 1C74  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1EEE  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1CDE                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1434  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1DDB            __end_of_DimmerIntrPointSelect 1F21  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                                  ?_main 006B                          __end_of___awdiv 1752  
                        __end_of___ftadd 0467                          __end_of___ftdiv 07F3  
                        __end_of___ftmul 069B                          ___awdiv@divisor 0020  
                        __end_of___fttol 0E58             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l824 1F96  
                                  i1l825 1F9F                                    i1l834 1F10  
                                  i1l835 1F18                   _setDimmerLights_Switch 1D9B  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EC                                    _RFSW2 00ED  
                                  _RFSW3 00EE                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 1EBE  
                          __CFG_WRT$HALF 0000                                    _Temp1 00D5  
     __end_of_setDimmerLights_IntrIOC_GO 108E               _setDimmerLights_IntrIOC_GO 106F  
                       __end_of_TMR0_ISR 12A8             __size_of_CC2500_WriteCommand 001A  
                       __end_of_TMR0_Set 1CBB                                    _getAD 10EC  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 17A7  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 1580  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1F8C              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012            __end_of_setLED_Initialization 1E2F  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                   _Sw_DimmerOnFunc$5520 0063                     _Sw_DimmerOnFunc$5521 0064  
                   _Sw_DimmerOnFunc$5522 0065                       _setRF_DimmerLights 0A95  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0022  
       __size_of_DelayOff_Initialization 000C                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0845  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 16AE  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1C8D  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0DD1                     _setSw_Initialization 1CBB  
                setOverTemp_Exceptions@i 002F                                   ??_main 006F  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 069B                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 001D                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1F70  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0024                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0CD7  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 116F                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0901                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1DAB                                   i1l7302 013A  
                                 i1l7310 0165                                   i1l7306 0151  
                                 i1l7332 01BE                                   i1l7316 0180  
                                 i1l7350 01EF                                   i1l7318 0186  
                                 i1l7262 00A8                                   i1l7270 00B5  
                                 i1l7328 01B8                                   i1l7336 01C4  
                                 i1l7354 01F5                                   i1l7290 0105  
                                 i1l7266 00AE                                   i1l7358 01FB  
                                 i1l7294 0118                                   i1l7288 00FF  
                                 i1l7296 011E                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u638_25 0083                                   u754_25 12A1  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1EBE                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1C9E  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E90  
                                 _Dimmer 00C8                                   _DlySw1 0155  
                                 _DlySw2 015A                                   _DlySw3 015F  
             __end_of_Mcu_Initialization 1E41                      __end_of_Buzzer_Main 1612  
                                 _Memory 01A0                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1DFB               _setDimmerLights_TriggerAdj 1DEB  
                                 ___bmul 1E41            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 001D                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D3                                   _s_data 00D4  
                                 _setLED 0B72                                   _myMain 00A0  
              _setDimmerLights_Main$2150 0068                _setDimmerLights_Main$2148 0066  
              _setDimmerLights_Main$2149 0067                         _DimmerLightsIntr 007C  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0023  
                       ___awdiv@quotient 0027                                   _setBuz 17A7  
                     __size_of_Temp_Main 0003         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 0221              _setDimmerLights_IntrControl 004A  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 1FE3  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1CCB  
                        _RfSWPointSelect 10CC             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 002D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1D7D  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 08A0  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0046  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0021  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 110C  
                          __end_of_getAD 110C                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1DBB                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0055                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0023                                ?_WDT_Main 0070  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1C92  
               __end_of_setDimmerReClock 1CEA                       __size_of_getRxData 0048  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1CD3  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00C9                           _DimmerLights22 00CA  
                         _DimmerLights33 00CB                     __size_of_setLED_Main 004E  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1C77                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0240                                ?_Fosc_Set 0070  
                            _Buzzer_Main 15C8                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1C7D                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0024  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1CF6                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 007B  
                      LedPointSelect@led 0020                   __size_of_DelayOff_Main 000C  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 1660                      _CC2500_WriteCommand 1F21  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 001B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1CA5                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13C3                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1CB3                            ?_setSw_Status 0021  
                     _setRFSW_AdjControl 13F9                  __end_of_RfSWPointSelect 10EC  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1D26  
                        ?_setTemp_Enable 0070                                  _IOC_Set 07F3  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 10AD                        _Flash_Memory_Read 1F3B  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0078  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1C71                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1ED6  
        __end_of_setControl_Lights_Table 074A                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0E58  
                        _setPercentValue 14F4                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E7  
           __end_of_CC2500_FrequencyCabr 1CF6                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1E0C                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0164  
                                _VarLED2 0168                                  _VarLED3 016C  
                      __end_of_getRxData 15C8                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1FA9                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1DBB                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1DAB                                  ___awdiv 16FE  
                                ___ftadd 0371                           ??_setSw_Enable 0021  
                                ___ftdiv 074A                                  ___ftmul 05E7  
                                ___fttol 0DD1                      __end_of_Switch_Main 1D26  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0074                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0022                                  __ptext1 153A  
                                __ptext2 1CCB                                  __ptext3 1D8C  
                                __ptext4 13C3                                  __ptext5 10EC  
                                __ptext6 1F70                                  __ptext7 0002  
                                __ptext8 1C7A                                  __ptext9 0C5E  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1F07                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 10CC                __end_of_Flash_Memory_Read 1F55  
                             _setRF_Main 0965                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1D02                        _DimmerLights_Main 1D5F  
                                _my_Main 153A           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1CDE  
             __end_of_CC2500_ClearRXFIFO 1C81                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1C85            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006F                           _LedPointSelect 1300  
                    _DelayOffPointSelect 1FA9                                  clrloop0 1C99  
         __size_of_Switch_Initialization 0011            __end_of_Switch_Initialization 1E1D  
                   end_of_initialization 0046                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1229                            _DelayTime_1us 11DA  
                      __end_of_setTxData 05E7               __end_of_Flash_Memory_Write 135C  
                                init_ram 1C92                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 006B                     Flash_Memory_Read@ret 0023  
                                initloop 1C93                               _setSw_Main 0221  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 11B5  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1E1D  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0BE6                            _CC2500_TxData 0901  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1D41  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 0801  
                _DimmerLights_Exceptions 1752                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1066                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0023                   setSw_Initialization@sw 0023  
              __end_of_DimmerLights_Main 1D6E                       _Mcu_Initialization 1E2F  
               __size_of_CC2500_PowerRST 0044                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 132D                  __end_of_Sw_DimmerOnFunc 0EE2  
                __end_of_setPercentValue 153A                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 1253                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1434  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 11DA  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1ED6                     _setRF_Initialization 1CAC  
                            _Switch_Main 1D1A                        __size_of_LED_Main 0010  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1F55                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E7B                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1E53  
              __size_of_Sw_DimmerAdjFunc 0065                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1F8C                        __size_of_TMR0_ISR 002B  
        __size_of_setOverTemp_Exceptions 003F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1EA6  
          __size_of_setDimmerLights_Main 008E                           __end_of_setLED 0BE6  
                         __end_of_setBuz 1800          _getDimmerLights_StatusFlag$2153 0022  
                   _CC2500_FrequencyCabr 1CEA                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0F70  
                      __size_of_WDT_Main 001C                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 138E  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1E7B  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 10AD          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0CD7                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1229                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1C8D                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0018                                _VarErrLED 00E3  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1D5F                       Sw_DimmerAdjFunc@sw 0029  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 1C7A                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00CF  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00D1                              __pdataBANK4 0220  
                               ??_setLED 0022                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1C85               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 13C3                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4639 0068                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 007A               __size_of_CC2500_ReadStatus 0025  
                 _setOverTemp_Exceptions 1471                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 013D  
                          _DimmerLights2 01C5                            _DimmerLights3 01D4  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00EF  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0065  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1C74                                _getBuz_GO 1DFB  
    __end_of_Flash_Memory_Initialization 052E              _Flash_Memory_Initialization 0467  
                               ?___awdiv 0020                                __ptext100 1CF6  
                              __ptext101 1CD3                                __ptext110 11DA  
                              __ptext102 1FA9                                __ptext111 1C81  
                              __ptext103 1E7B                                __ptext120 127D  
                              __ptext112 1C7D                                __ptext104 1C85  
                              __ptext121 004A                                __ptext113 1F21  
                              __ptext105 14B0                                __ptext122 1F07  
                              __ptext114 1C8D                                __ptext106 1229  
                              __ptext123 1D26                                __ptext115 1EA6  
                              __ptext107 108E                                __ptext124 1CDE  
                              __ptext116 1EEE                                __ptext108 116F  
                              __ptext125 106F                                __ptext117 15C8  
                              __ptext109 1CEA                                 ?___ftadd 003E  
                              __ptext126 1F8C                                __ptext118 1C6B  
                              _getRxData 1580                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 1000            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1C6E  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1D8C  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0050  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 0150            __end_of_setDimmerLights_ERROR 16FE  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 11B5  
          __end_of_setDimmerLights_AdjGo 1DEB                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00D2  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1D9B                         __CFG_WDTE$SWDTEN 0000  
                         __size_of_getAD 0020                             _setRF_Enable 1D33  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1FC6  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 1660  
                    _DimmerLightsIntrIOC 00CC                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1C7A                        _CC2500_rfSettings 102F  
                               _LED_Main 1DCB                          SwPointSelect@sw 0020  
                              clear_ram0 1C98                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 052E      __end_of_DimmerLights_Initialization 114D  
            _DimmerLights_Initialization 112C                       _CC2500_ClearRXFIFO 1C7D  
                     _CC2500_ClearTXFIFO 1C81           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1CCB                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 132D  
                             ?_getRxData 0070                                 _TMR0_ISR 127D  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1CB3                         _Sw_DimmerAdjFunc 09CA  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C5  
                   __end_of_RF_RxDisable 1D7D                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1F3B                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1F70                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0B01  
                  _Sw_DimmerAdjFunc$5530 0025                    _Sw_DimmerAdjFunc$5531 0026  
                  _Sw_DimmerAdjFunc$5532 0027                    __size_of_setTemp_Main 0079  
                __size_of_setDelayOff_GO 0066                    __size_of_setSw_Enable 0029  
                               _DelayOff 007A                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1D1A                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0023                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 138E                    _DlyOff_Initialization 1CD3  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1C89  
                       __size_of_WDT_Set 0018                    _Switch_Initialization 1E0C  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1D41                             _setMemory_GO 1E90  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 13F9  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1EEE  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0022  
   __end_of_setDimmerLights_TriggerERROR 12D3    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 12A8                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0C5E                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1200  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 114D                         ??_LedPointSelect 0020  
                               ___ftpack 08A0                             _setSw_Status 1D50  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1612  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0B01  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                       __size_of_my_Main 0046                                 __ptext10 1471  
                               __ptext11 1200                                 __ptext20 1CC3  
                               __ptext12 1D33                                 __ptext21 0E58  
                               __ptext13 1752                                 __ptext30 0965  
                               __ptext22 0B01                                 __ptext14 12A8  
                               __ptext31 1580                                 __ptext23 09CA  
                               __ptext15 16AE                                 __ptext40 1192  
                               __ptext32 135C                                 __ptext24 1DEB  
                               __ptext16 1C77                                 __ptext41 0845  
                               __ptext33 069B                                 __ptext25 1DDB  
                               __ptext17 1C74                                 __ptext50 1C6E  
                               __ptext42 05E7                                 __ptext34 0F70  
                               __ptext26 1E0C                                 __ptext18 1D1A  
                               __ptext51 1CAC                                 __ptext43 0371  
                               __ptext35 0A2F                                 __ptext27 1CBB  
                               __ptext19 0221                                 __ptext60 1612  
                               __ptext52 1E2F                                 __ptext44 1DFB  
                               __ptext36 1253                                 __ptext28 1D7D  
                               __ptext61 1DBB                                 __ptext53 1ED6  
                               __ptext45 1D6E                                 __ptext37 1E41  
                               __ptext29 1C71                                 __ptext70 1D5F  
                               __ptext62 1E1D                                 __ptext54 1CB3  
                               __ptext46 0901                                 __ptext38 13F9  
                               __ptext71 0EE2                                 __ptext63 10AD  
                               __ptext55 1EBE                                 __ptext47 0BE6  
                               __ptext39 138E                                 __ptext80 12D3  
                               __ptext72 1434                                 __ptext64 0801  
                               __ptext56 07F3                                 __ptext48 11B5  
                               __ptext81 1C9E                                 __ptext73 0D51  
                               __ptext65 1D0E                                 __ptext57 1C89  
                               __ptext49 1FE3                                 __ptext90 074A  
                               __ptext82 1D02                                 __ptext74 0B72  
                               __ptext66 0467                                 __ptext58 1CA5  
                               __ptext91 114D                                 __ptext83 0CD7  
                               __ptext75 1300                                 __ptext67 132D  
                               __ptext59 1DCB                                 __ptext92 08A0  
                               __ptext84 052E                                 __ptext76 1E67  
                               __ptext68 1066                                 __ptext93 1D41  
                               __ptext85 1D50                                 __ptext77 1E90  
                               __ptext69 1F3B                                 __ptext94 10CC  
                               __ptext86 1FC6                                 __ptext78 1E53  
                               __ptext95 1DAB                                 __ptext87 0A95  
                               __ptext79 112C                                 __ptext96 1D9B  
                               __ptext88 14F4                                 __ptext97 1F55  
                               __ptext89 0DD1                                 __ptext98 17A7  
                               __ptext99 16FE                                 __product 0220  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0023  
               __size_of_RfSWPointSelect 0020           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 1D50            __end_of_Dimmer_Initialization 1CA5  
           __end_of_setDimmerLights_Main 0F70              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0068                            setLED@command 0021  
                          __size_of_main 004E                              _setRF_Learn 1CC3  
               __end_of_CC2500_SIDLEMode 1C89               setDimmerLights_Main@lights 006A  
            __end_of_DelayOffPointSelect 1FC6               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1E67                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000C                          _CC2500_ReadByte 1FE3  
                     _CC2500_InitPATable 108E      __size_of_getDimmerLights_StatusFlag 0014  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 09CA  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006B            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006D                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 14B0              __end_of_Flash_Memory_Modify 0845  
                      ??_getPercentValue 0059                              _setLog_Code 135C  
            __end_of_Flash_Memory_Unlock 106F                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 116F                       __end_of_setSw_Main 0371  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1253  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1300  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 12D3              __end_of_setDimmerLights_Adj 1471  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1C6E     __size_of_setDimmerLights_IntrControl 01D7  
                   _Flash_Memory_Erasing 1D0E                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D0          __end_of_DelayOff_Initialization 1D02  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1D0E  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 0A2F  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 127D  
         __end_of_setOverTemp_Exceptions 14B0     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 1200                 __end_of_Sw_DimmerAdjFunc 0A2F  
                __end_of_CC2500_ReadByte 2000             __end_of_setSw_Initialization 1CC3  
                        _Timeout_Counter 1EA6                     getPercentValue@value 005B  
                           _RF_RxDisable 1D6E               __end_of_LED_Initialization 1DCB  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1C77  
               __size_of_Sw_DimmerOnFunc 008A                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1C71                 __end_of_Sw_DimmerOffFunc 0B72  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C5E                    __end_of_CC2500_TxData 0965  
                    setSw_Status@command 0021                  __end_of_CC2500_PowerRST 14F4  
