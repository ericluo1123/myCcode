

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 28 14:06:32 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	dabs	1,0x7E,2
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  0116                     	;# 
   183  0117                     	;# 
   184  011D                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  018E                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0197                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020D                     	;# 
   209  0210                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0298                     	;# 
   230  0298                     	;# 
   231  0299                     	;# 
   232  029A                     	;# 
   233  0394                     	;# 
   234  0395                     	;# 
   235  0396                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEB                     	;# 
   244  0FED                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000D                     	;# 
   261  000E                     	;# 
   262  0010                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  0116                     	;# 
   294  0117                     	;# 
   295  011D                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  018E                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0197                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020D                     	;# 
   320  0210                     	;# 
   321  0211                     	;# 
   322  0211                     	;# 
   323  0212                     	;# 
   324  0212                     	;# 
   325  0213                     	;# 
   326  0213                     	;# 
   327  0214                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0291                     	;# 
   337  0291                     	;# 
   338  0292                     	;# 
   339  0293                     	;# 
   340  0298                     	;# 
   341  0298                     	;# 
   342  0299                     	;# 
   343  029A                     	;# 
   344  0394                     	;# 
   345  0395                     	;# 
   346  0396                     	;# 
   347  0FE4                     	;# 
   348  0FE5                     	;# 
   349  0FE6                     	;# 
   350  0FE7                     	;# 
   351  0FE8                     	;# 
   352  0FE9                     	;# 
   353  0FEA                     	;# 
   354  0FEB                     	;# 
   355  0FED                     	;# 
   356  0FEE                     	;# 
   357  0FEF                     	;# 
   358  0000                     	;# 
   359  0001                     	;# 
   360  0002                     	;# 
   361  0003                     	;# 
   362  0004                     	;# 
   363  0005                     	;# 
   364  0006                     	;# 
   365  0007                     	;# 
   366  0008                     	;# 
   367  0009                     	;# 
   368  000A                     	;# 
   369  000B                     	;# 
   370  000C                     	;# 
   371  000D                     	;# 
   372  000E                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  0090                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  010C                     	;# 
   402  010D                     	;# 
   403  010E                     	;# 
   404  0116                     	;# 
   405  0117                     	;# 
   406  011D                     	;# 
   407  018C                     	;# 
   408  018D                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0194                     	;# 
   416  0195                     	;# 
   417  0196                     	;# 
   418  0197                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  0394                     	;# 
   456  0395                     	;# 
   457  0396                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0010                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  0090                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  010C                     	;# 
   513  010D                     	;# 
   514  010E                     	;# 
   515  0116                     	;# 
   516  0117                     	;# 
   517  011D                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  018E                     	;# 
   521  0191                     	;# 
   522  0191                     	;# 
   523  0192                     	;# 
   524  0193                     	;# 
   525  0193                     	;# 
   526  0194                     	;# 
   527  0195                     	;# 
   528  0196                     	;# 
   529  0197                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019C                     	;# 
   537  019C                     	;# 
   538  019D                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  020D                     	;# 
   542  0210                     	;# 
   543  0211                     	;# 
   544  0211                     	;# 
   545  0212                     	;# 
   546  0212                     	;# 
   547  0213                     	;# 
   548  0213                     	;# 
   549  0214                     	;# 
   550  0214                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0216                     	;# 
   555  0216                     	;# 
   556  0217                     	;# 
   557  0217                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  0394                     	;# 
   567  0395                     	;# 
   568  0396                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  008E                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  011D                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0197                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  0394                     	;# 
   678  0395                     	;# 
   679  0396                     	;# 
   680  0FE4                     	;# 
   681  0FE5                     	;# 
   682  0FE6                     	;# 
   683  0FE7                     	;# 
   684  0FE8                     	;# 
   685  0FE9                     	;# 
   686  0FEA                     	;# 
   687  0FEB                     	;# 
   688  0FED                     	;# 
   689  0FEE                     	;# 
   690  0FEF                     	;# 
   691  0000                     	;# 
   692  0001                     	;# 
   693  0002                     	;# 
   694  0003                     	;# 
   695  0004                     	;# 
   696  0005                     	;# 
   697  0006                     	;# 
   698  0007                     	;# 
   699  0008                     	;# 
   700  0009                     	;# 
   701  000A                     	;# 
   702  000B                     	;# 
   703  000C                     	;# 
   704  000D                     	;# 
   705  000E                     	;# 
   706  0010                     	;# 
   707  0011                     	;# 
   708  0012                     	;# 
   709  0015                     	;# 
   710  0016                     	;# 
   711  0016                     	;# 
   712  0017                     	;# 
   713  0018                     	;# 
   714  0019                     	;# 
   715  001A                     	;# 
   716  001B                     	;# 
   717  001C                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0099                     	;# 
   728  009A                     	;# 
   729  009B                     	;# 
   730  009B                     	;# 
   731  009C                     	;# 
   732  009D                     	;# 
   733  009E                     	;# 
   734  010C                     	;# 
   735  010D                     	;# 
   736  010E                     	;# 
   737  0116                     	;# 
   738  0117                     	;# 
   739  011D                     	;# 
   740  018C                     	;# 
   741  018D                     	;# 
   742  018E                     	;# 
   743  0191                     	;# 
   744  0191                     	;# 
   745  0192                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0194                     	;# 
   749  0195                     	;# 
   750  0196                     	;# 
   751  0197                     	;# 
   752  0199                     	;# 
   753  019A                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019C                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020D                     	;# 
   764  0210                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0298                     	;# 
   785  0298                     	;# 
   786  0299                     	;# 
   787  029A                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0FE4                     	;# 
   792  0FE5                     	;# 
   793  0FE6                     	;# 
   794  0FE7                     	;# 
   795  0FE8                     	;# 
   796  0FE9                     	;# 
   797  0FEA                     	;# 
   798  0FEB                     	;# 
   799  0FED                     	;# 
   800  0FEE                     	;# 
   801  0FEF                     	;# 
   802  0000                     	;# 
   803  0001                     	;# 
   804  0002                     	;# 
   805  0003                     	;# 
   806  0004                     	;# 
   807  0005                     	;# 
   808  0006                     	;# 
   809  0007                     	;# 
   810  0008                     	;# 
   811  0009                     	;# 
   812  000A                     	;# 
   813  000B                     	;# 
   814  000C                     	;# 
   815  000D                     	;# 
   816  000E                     	;# 
   817  0010                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008D                     	;# 
   831  008E                     	;# 
   832  0090                     	;# 
   833  0091                     	;# 
   834  0092                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  010C                     	;# 
   846  010D                     	;# 
   847  010E                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  011D                     	;# 
   851  018C                     	;# 
   852  018D                     	;# 
   853  018E                     	;# 
   854  0191                     	;# 
   855  0191                     	;# 
   856  0192                     	;# 
   857  0193                     	;# 
   858  0193                     	;# 
   859  0194                     	;# 
   860  0195                     	;# 
   861  0196                     	;# 
   862  0197                     	;# 
   863  0199                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019C                     	;# 
   870  019C                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  020D                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0291                     	;# 
   892  0291                     	;# 
   893  0292                     	;# 
   894  0293                     	;# 
   895  0298                     	;# 
   896  0298                     	;# 
   897  0299                     	;# 
   898  029A                     	;# 
   899  0394                     	;# 
   900  0395                     	;# 
   901  0396                     	;# 
   902  0FE4                     	;# 
   903  0FE5                     	;# 
   904  0FE6                     	;# 
   905  0FE7                     	;# 
   906  0FE8                     	;# 
   907  0FE9                     	;# 
   908  0FEA                     	;# 
   909  0FEB                     	;# 
   910  0FED                     	;# 
   911  0FEE                     	;# 
   912  0FEF                     	;# 
   913  0000                     	;# 
   914  0001                     	;# 
   915  0002                     	;# 
   916  0003                     	;# 
   917  0004                     	;# 
   918  0005                     	;# 
   919  0006                     	;# 
   920  0007                     	;# 
   921  0008                     	;# 
   922  0009                     	;# 
   923  000A                     	;# 
   924  000B                     	;# 
   925  000C                     	;# 
   926  000D                     	;# 
   927  000E                     	;# 
   928  0010                     	;# 
   929  0011                     	;# 
   930  0012                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008D                     	;# 
   942  008E                     	;# 
   943  0090                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0095                     	;# 
   947  0096                     	;# 
   948  0097                     	;# 
   949  0099                     	;# 
   950  009A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  010C                     	;# 
   957  010D                     	;# 
   958  010E                     	;# 
   959  0116                     	;# 
   960  0117                     	;# 
   961  011D                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  018E                     	;# 
   965  0191                     	;# 
   966  0191                     	;# 
   967  0192                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0194                     	;# 
   971  0195                     	;# 
   972  0196                     	;# 
   973  0197                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020D                     	;# 
   986  0210                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0291                     	;# 
  1003  0291                     	;# 
  1004  0292                     	;# 
  1005  0293                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  0394                     	;# 
  1011  0395                     	;# 
  1012  0396                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000D                     	;# 
  1038  000E                     	;# 
  1039  0010                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0015                     	;# 
  1043  0016                     	;# 
  1044  0016                     	;# 
  1045  0017                     	;# 
  1046  0018                     	;# 
  1047  0019                     	;# 
  1048  001A                     	;# 
  1049  001B                     	;# 
  1050  001C                     	;# 
  1051  008C                     	;# 
  1052  008D                     	;# 
  1053  008E                     	;# 
  1054  0090                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0099                     	;# 
  1061  009A                     	;# 
  1062  009B                     	;# 
  1063  009B                     	;# 
  1064  009C                     	;# 
  1065  009D                     	;# 
  1066  009E                     	;# 
  1067  010C                     	;# 
  1068  010D                     	;# 
  1069  010E                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  011D                     	;# 
  1073  018C                     	;# 
  1074  018D                     	;# 
  1075  018E                     	;# 
  1076  0191                     	;# 
  1077  0191                     	;# 
  1078  0192                     	;# 
  1079  0193                     	;# 
  1080  0193                     	;# 
  1081  0194                     	;# 
  1082  0195                     	;# 
  1083  0196                     	;# 
  1084  0197                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019C                     	;# 
  1092  019C                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  020D                     	;# 
  1097  0210                     	;# 
  1098  0211                     	;# 
  1099  0211                     	;# 
  1100  0212                     	;# 
  1101  0212                     	;# 
  1102  0213                     	;# 
  1103  0213                     	;# 
  1104  0214                     	;# 
  1105  0214                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0215                     	;# 
  1109  0216                     	;# 
  1110  0216                     	;# 
  1111  0217                     	;# 
  1112  0217                     	;# 
  1113  0291                     	;# 
  1114  0291                     	;# 
  1115  0292                     	;# 
  1116  0293                     	;# 
  1117  0298                     	;# 
  1118  0298                     	;# 
  1119  0299                     	;# 
  1120  029A                     	;# 
  1121  0394                     	;# 
  1122  0395                     	;# 
  1123  0396                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEB                     	;# 
  1132  0FED                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  0010                     	;# 
  1151  0011                     	;# 
  1152  0012                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  008C                     	;# 
  1163  008D                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0095                     	;# 
  1169  0096                     	;# 
  1170  0097                     	;# 
  1171  0099                     	;# 
  1172  009A                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  010C                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  011D                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  0191                     	;# 
  1188  0191                     	;# 
  1189  0192                     	;# 
  1190  0193                     	;# 
  1191  0193                     	;# 
  1192  0194                     	;# 
  1193  0195                     	;# 
  1194  0196                     	;# 
  1195  0197                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  020D                     	;# 
  1208  0210                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0213                     	;# 
  1215  0214                     	;# 
  1216  0214                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0216                     	;# 
  1221  0216                     	;# 
  1222  0217                     	;# 
  1223  0217                     	;# 
  1224  0291                     	;# 
  1225  0291                     	;# 
  1226  0292                     	;# 
  1227  0293                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  0394                     	;# 
  1233  0395                     	;# 
  1234  0396                     	;# 
  1235  0FE4                     	;# 
  1236  0FE5                     	;# 
  1237  0FE6                     	;# 
  1238  0FE7                     	;# 
  1239  0FE8                     	;# 
  1240  0FE9                     	;# 
  1241  0FEA                     	;# 
  1242  0FEB                     	;# 
  1243  0FED                     	;# 
  1244  0FEE                     	;# 
  1245  0FEF                     	;# 
  1246  0000                     	;# 
  1247  0001                     	;# 
  1248  0002                     	;# 
  1249  0003                     	;# 
  1250  0004                     	;# 
  1251  0005                     	;# 
  1252  0006                     	;# 
  1253  0007                     	;# 
  1254  0008                     	;# 
  1255  0009                     	;# 
  1256  000A                     	;# 
  1257  000B                     	;# 
  1258  000C                     	;# 
  1259  000D                     	;# 
  1260  000E                     	;# 
  1261  0010                     	;# 
  1262  0011                     	;# 
  1263  0012                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001B                     	;# 
  1272  001C                     	;# 
  1273  008C                     	;# 
  1274  008D                     	;# 
  1275  008E                     	;# 
  1276  0090                     	;# 
  1277  0091                     	;# 
  1278  0092                     	;# 
  1279  0095                     	;# 
  1280  0096                     	;# 
  1281  0097                     	;# 
  1282  0099                     	;# 
  1283  009A                     	;# 
  1284  009B                     	;# 
  1285  009B                     	;# 
  1286  009C                     	;# 
  1287  009D                     	;# 
  1288  009E                     	;# 
  1289  010C                     	;# 
  1290  010D                     	;# 
  1291  010E                     	;# 
  1292  0116                     	;# 
  1293  0117                     	;# 
  1294  011D                     	;# 
  1295  018C                     	;# 
  1296  018D                     	;# 
  1297  018E                     	;# 
  1298  0191                     	;# 
  1299  0191                     	;# 
  1300  0192                     	;# 
  1301  0193                     	;# 
  1302  0193                     	;# 
  1303  0194                     	;# 
  1304  0195                     	;# 
  1305  0196                     	;# 
  1306  0197                     	;# 
  1307  0199                     	;# 
  1308  019A                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019C                     	;# 
  1314  019C                     	;# 
  1315  019D                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  020D                     	;# 
  1319  0210                     	;# 
  1320  0211                     	;# 
  1321  0211                     	;# 
  1322  0212                     	;# 
  1323  0212                     	;# 
  1324  0213                     	;# 
  1325  0213                     	;# 
  1326  0214                     	;# 
  1327  0214                     	;# 
  1328  0215                     	;# 
  1329  0215                     	;# 
  1330  0215                     	;# 
  1331  0216                     	;# 
  1332  0216                     	;# 
  1333  0217                     	;# 
  1334  0217                     	;# 
  1335  0291                     	;# 
  1336  0291                     	;# 
  1337  0292                     	;# 
  1338  0293                     	;# 
  1339  0298                     	;# 
  1340  0298                     	;# 
  1341  0299                     	;# 
  1342  029A                     	;# 
  1343  0394                     	;# 
  1344  0395                     	;# 
  1345  0396                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEB                     	;# 
  1354  0FED                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000D                     	;# 
  1371  000E                     	;# 
  1372  0010                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0015                     	;# 
  1376  0016                     	;# 
  1377  0016                     	;# 
  1378  0017                     	;# 
  1379  0018                     	;# 
  1380  0019                     	;# 
  1381  001A                     	;# 
  1382  001B                     	;# 
  1383  001C                     	;# 
  1384  008C                     	;# 
  1385  008D                     	;# 
  1386  008E                     	;# 
  1387  0090                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0095                     	;# 
  1391  0096                     	;# 
  1392  0097                     	;# 
  1393  0099                     	;# 
  1394  009A                     	;# 
  1395  009B                     	;# 
  1396  009B                     	;# 
  1397  009C                     	;# 
  1398  009D                     	;# 
  1399  009E                     	;# 
  1400  010C                     	;# 
  1401  010D                     	;# 
  1402  010E                     	;# 
  1403  0116                     	;# 
  1404  0117                     	;# 
  1405  011D                     	;# 
  1406  018C                     	;# 
  1407  018D                     	;# 
  1408  018E                     	;# 
  1409  0191                     	;# 
  1410  0191                     	;# 
  1411  0192                     	;# 
  1412  0193                     	;# 
  1413  0193                     	;# 
  1414  0194                     	;# 
  1415  0195                     	;# 
  1416  0196                     	;# 
  1417  0197                     	;# 
  1418  0199                     	;# 
  1419  019A                     	;# 
  1420  019B                     	;# 
  1421  019B                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019C                     	;# 
  1425  019C                     	;# 
  1426  019D                     	;# 
  1427  019E                     	;# 
  1428  019F                     	;# 
  1429  020D                     	;# 
  1430  0210                     	;# 
  1431  0211                     	;# 
  1432  0211                     	;# 
  1433  0212                     	;# 
  1434  0212                     	;# 
  1435  0213                     	;# 
  1436  0213                     	;# 
  1437  0214                     	;# 
  1438  0214                     	;# 
  1439  0215                     	;# 
  1440  0215                     	;# 
  1441  0215                     	;# 
  1442  0216                     	;# 
  1443  0216                     	;# 
  1444  0217                     	;# 
  1445  0217                     	;# 
  1446  0291                     	;# 
  1447  0291                     	;# 
  1448  0292                     	;# 
  1449  0293                     	;# 
  1450  0298                     	;# 
  1451  0298                     	;# 
  1452  0299                     	;# 
  1453  029A                     	;# 
  1454  0394                     	;# 
  1455  0395                     	;# 
  1456  0396                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  008C                     	;# 
  1496  008D                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0095                     	;# 
  1502  0096                     	;# 
  1503  0097                     	;# 
  1504  0099                     	;# 
  1505  009A                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  010C                     	;# 
  1512  010D                     	;# 
  1513  010E                     	;# 
  1514  0116                     	;# 
  1515  0117                     	;# 
  1516  011D                     	;# 
  1517  018C                     	;# 
  1518  018D                     	;# 
  1519  018E                     	;# 
  1520  0191                     	;# 
  1521  0191                     	;# 
  1522  0192                     	;# 
  1523  0193                     	;# 
  1524  0193                     	;# 
  1525  0194                     	;# 
  1526  0195                     	;# 
  1527  0196                     	;# 
  1528  0197                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  0210                     	;# 
  1542  0211                     	;# 
  1543  0211                     	;# 
  1544  0212                     	;# 
  1545  0212                     	;# 
  1546  0213                     	;# 
  1547  0213                     	;# 
  1548  0214                     	;# 
  1549  0214                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  0394                     	;# 
  1566  0395                     	;# 
  1567  0396                     	;# 
  1568  0FE4                     	;# 
  1569  0FE5                     	;# 
  1570  0FE6                     	;# 
  1571  0FE7                     	;# 
  1572  0FE8                     	;# 
  1573  0FE9                     	;# 
  1574  0FEA                     	;# 
  1575  0FEB                     	;# 
  1576  0FED                     	;# 
  1577  0FEE                     	;# 
  1578  0FEF                     	;# 
  1579  0000                     	;# 
  1580  0001                     	;# 
  1581  0002                     	;# 
  1582  0003                     	;# 
  1583  0004                     	;# 
  1584  0005                     	;# 
  1585  0006                     	;# 
  1586  0007                     	;# 
  1587  0008                     	;# 
  1588  0009                     	;# 
  1589  000A                     	;# 
  1590  000B                     	;# 
  1591  000C                     	;# 
  1592  000D                     	;# 
  1593  000E                     	;# 
  1594  0010                     	;# 
  1595  0011                     	;# 
  1596  0012                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  001A                     	;# 
  1604  001B                     	;# 
  1605  001C                     	;# 
  1606  008C                     	;# 
  1607  008D                     	;# 
  1608  008E                     	;# 
  1609  0090                     	;# 
  1610  0091                     	;# 
  1611  0092                     	;# 
  1612  0095                     	;# 
  1613  0096                     	;# 
  1614  0097                     	;# 
  1615  0099                     	;# 
  1616  009A                     	;# 
  1617  009B                     	;# 
  1618  009B                     	;# 
  1619  009C                     	;# 
  1620  009D                     	;# 
  1621  009E                     	;# 
  1622  010C                     	;# 
  1623  010D                     	;# 
  1624  010E                     	;# 
  1625  0116                     	;# 
  1626  0117                     	;# 
  1627  011D                     	;# 
  1628  018C                     	;# 
  1629  018D                     	;# 
  1630  018E                     	;# 
  1631  0191                     	;# 
  1632  0191                     	;# 
  1633  0192                     	;# 
  1634  0193                     	;# 
  1635  0193                     	;# 
  1636  0194                     	;# 
  1637  0195                     	;# 
  1638  0196                     	;# 
  1639  0197                     	;# 
  1640  0199                     	;# 
  1641  019A                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019C                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  020D                     	;# 
  1652  0210                     	;# 
  1653  0211                     	;# 
  1654  0211                     	;# 
  1655  0212                     	;# 
  1656  0212                     	;# 
  1657  0213                     	;# 
  1658  0213                     	;# 
  1659  0214                     	;# 
  1660  0214                     	;# 
  1661  0215                     	;# 
  1662  0215                     	;# 
  1663  0215                     	;# 
  1664  0216                     	;# 
  1665  0216                     	;# 
  1666  0217                     	;# 
  1667  0217                     	;# 
  1668  0291                     	;# 
  1669  0291                     	;# 
  1670  0292                     	;# 
  1671  0293                     	;# 
  1672  0298                     	;# 
  1673  0298                     	;# 
  1674  0299                     	;# 
  1675  029A                     	;# 
  1676  0394                     	;# 
  1677  0395                     	;# 
  1678  0396                     	;# 
  1679  0FE4                     	;# 
  1680  0FE5                     	;# 
  1681  0FE6                     	;# 
  1682  0FE7                     	;# 
  1683  0FE8                     	;# 
  1684  0FE9                     	;# 
  1685  0FEA                     	;# 
  1686  0FEB                     	;# 
  1687  0FED                     	;# 
  1688  0FEE                     	;# 
  1689  0FEF                     	;# 
  1690  0000                     	;# 
  1691  0001                     	;# 
  1692  0002                     	;# 
  1693  0003                     	;# 
  1694  0004                     	;# 
  1695  0005                     	;# 
  1696  0006                     	;# 
  1697  0007                     	;# 
  1698  0008                     	;# 
  1699  0009                     	;# 
  1700  000A                     	;# 
  1701  000B                     	;# 
  1702  000C                     	;# 
  1703  000D                     	;# 
  1704  000E                     	;# 
  1705  0010                     	;# 
  1706  0011                     	;# 
  1707  0012                     	;# 
  1708  0015                     	;# 
  1709  0016                     	;# 
  1710  0016                     	;# 
  1711  0017                     	;# 
  1712  0018                     	;# 
  1713  0019                     	;# 
  1714  001A                     	;# 
  1715  001B                     	;# 
  1716  001C                     	;# 
  1717  008C                     	;# 
  1718  008D                     	;# 
  1719  008E                     	;# 
  1720  0090                     	;# 
  1721  0091                     	;# 
  1722  0092                     	;# 
  1723  0095                     	;# 
  1724  0096                     	;# 
  1725  0097                     	;# 
  1726  0099                     	;# 
  1727  009A                     	;# 
  1728  009B                     	;# 
  1729  009B                     	;# 
  1730  009C                     	;# 
  1731  009D                     	;# 
  1732  009E                     	;# 
  1733  010C                     	;# 
  1734  010D                     	;# 
  1735  010E                     	;# 
  1736  0116                     	;# 
  1737  0117                     	;# 
  1738  011D                     	;# 
  1739  018C                     	;# 
  1740  018D                     	;# 
  1741  018E                     	;# 
  1742  0191                     	;# 
  1743  0191                     	;# 
  1744  0192                     	;# 
  1745  0193                     	;# 
  1746  0193                     	;# 
  1747  0194                     	;# 
  1748  0195                     	;# 
  1749  0196                     	;# 
  1750  0197                     	;# 
  1751  0199                     	;# 
  1752  019A                     	;# 
  1753  019B                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  019C                     	;# 
  1759  019D                     	;# 
  1760  019E                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0291                     	;# 
  1780  0291                     	;# 
  1781  0292                     	;# 
  1782  0293                     	;# 
  1783  0298                     	;# 
  1784  0298                     	;# 
  1785  0299                     	;# 
  1786  029A                     	;# 
  1787  0394                     	;# 
  1788  0395                     	;# 
  1789  0396                     	;# 
  1790  0FE4                     	;# 
  1791  0FE5                     	;# 
  1792  0FE6                     	;# 
  1793  0FE7                     	;# 
  1794  0FE8                     	;# 
  1795  0FE9                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000D                     	;# 
  1815  000E                     	;# 
  1816  0010                     	;# 
  1817  0011                     	;# 
  1818  0012                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  008C                     	;# 
  1829  008D                     	;# 
  1830  008E                     	;# 
  1831  0090                     	;# 
  1832  0091                     	;# 
  1833  0092                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  010C                     	;# 
  1845  010D                     	;# 
  1846  010E                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  011D                     	;# 
  1850  018C                     	;# 
  1851  018D                     	;# 
  1852  018E                     	;# 
  1853  0191                     	;# 
  1854  0191                     	;# 
  1855  0192                     	;# 
  1856  0193                     	;# 
  1857  0193                     	;# 
  1858  0194                     	;# 
  1859  0195                     	;# 
  1860  0196                     	;# 
  1861  0197                     	;# 
  1862  0199                     	;# 
  1863  019A                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019C                     	;# 
  1869  019C                     	;# 
  1870  019D                     	;# 
  1871  019E                     	;# 
  1872  019F                     	;# 
  1873  020D                     	;# 
  1874  0210                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0291                     	;# 
  1891  0291                     	;# 
  1892  0292                     	;# 
  1893  0293                     	;# 
  1894  0298                     	;# 
  1895  0298                     	;# 
  1896  0299                     	;# 
  1897  029A                     	;# 
  1898  0394                     	;# 
  1899  0395                     	;# 
  1900  0396                     	;# 
  1901  0FE4                     	;# 
  1902  0FE5                     	;# 
  1903  0FE6                     	;# 
  1904  0FE7                     	;# 
  1905  0FE8                     	;# 
  1906  0FE9                     	;# 
  1907  0FEA                     	;# 
  1908  0FEB                     	;# 
  1909  0FED                     	;# 
  1910  0FEE                     	;# 
  1911  0FEF                     	;# 
  1912  0000                     	;# 
  1913  0001                     	;# 
  1914  0002                     	;# 
  1915  0003                     	;# 
  1916  0004                     	;# 
  1917  0005                     	;# 
  1918  0006                     	;# 
  1919  0007                     	;# 
  1920  0008                     	;# 
  1921  0009                     	;# 
  1922  000A                     	;# 
  1923  000B                     	;# 
  1924  000C                     	;# 
  1925  000D                     	;# 
  1926  000E                     	;# 
  1927  0010                     	;# 
  1928  0011                     	;# 
  1929  0012                     	;# 
  1930  0015                     	;# 
  1931  0016                     	;# 
  1932  0016                     	;# 
  1933  0017                     	;# 
  1934  0018                     	;# 
  1935  0019                     	;# 
  1936  001A                     	;# 
  1937  001B                     	;# 
  1938  001C                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0090                     	;# 
  1943  0091                     	;# 
  1944  0092                     	;# 
  1945  0095                     	;# 
  1946  0096                     	;# 
  1947  0097                     	;# 
  1948  0099                     	;# 
  1949  009A                     	;# 
  1950  009B                     	;# 
  1951  009B                     	;# 
  1952  009C                     	;# 
  1953  009D                     	;# 
  1954  009E                     	;# 
  1955  010C                     	;# 
  1956  010D                     	;# 
  1957  010E                     	;# 
  1958  0116                     	;# 
  1959  0117                     	;# 
  1960  011D                     	;# 
  1961  018C                     	;# 
  1962  018D                     	;# 
  1963  018E                     	;# 
  1964  0191                     	;# 
  1965  0191                     	;# 
  1966  0192                     	;# 
  1967  0193                     	;# 
  1968  0193                     	;# 
  1969  0194                     	;# 
  1970  0195                     	;# 
  1971  0196                     	;# 
  1972  0197                     	;# 
  1973  0199                     	;# 
  1974  019A                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019E                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0291                     	;# 
  2002  0291                     	;# 
  2003  0292                     	;# 
  2004  0293                     	;# 
  2005  0298                     	;# 
  2006  0298                     	;# 
  2007  0299                     	;# 
  2008  029A                     	;# 
  2009  0394                     	;# 
  2010  0395                     	;# 
  2011  0396                     	;# 
  2012  0FE4                     	;# 
  2013  0FE5                     	;# 
  2014  0FE6                     	;# 
  2015  0FE7                     	;# 
  2016  0FE8                     	;# 
  2017  0FE9                     	;# 
  2018  0FEA                     	;# 
  2019  0FEB                     	;# 
  2020  0FED                     	;# 
  2021  0FEE                     	;# 
  2022  0FEF                     	;# 
  2023                           
  2024                           	psect	idataBANK4
  2025  1255                     __pidataBANK4:	
  2026                           
  2027                           ;initializer for __product
  2028  1255  3463               	retlw	99
  2029  1256  3402               	retlw	2
  2030  1257  3400               	retlw	0
  2031  1258  3400               	retlw	0
  2032  1259  3400               	retlw	0
  2033  125A  3400               	retlw	0
  2034  125B  3400               	retlw	0
  2035  125C  3400               	retlw	0
  2036  125D  3400               	retlw	0
  2037  125E  3400               	retlw	0
  2038  125F  3400               	retlw	0
  2039  1260  3400               	retlw	0
  2040  1261  34FF               	retlw	255
  2041  1262  34FF               	retlw	255
  2042  1263  34FF               	retlw	255
  2043  1264  3400               	retlw	0
  2044  1265  3400               	retlw	0
  2045  1266  3400               	retlw	0
  2046  1267  3400               	retlw	0
  2047  1268  3400               	retlw	0
  2048  1269  3400               	retlw	0
  2049  126A  3400               	retlw	0
  2050  126B  3400               	retlw	0
  2051  126C  3400               	retlw	0
  2052  126D  3400               	retlw	0
  2053  126E  3400               	retlw	0
  2054  126F  3400               	retlw	0
  2055  1270  3400               	retlw	0
  2056  1271  3400               	retlw	0
  2057  1272  3400               	retlw	0
  2058  1273  3400               	retlw	0
  2059  1274  3400               	retlw	0
  2060                           
  2061                           	psect	stringtext
  2062  1000                     __pstringtext:	
  2063  1000                     _CC2500_registers_address:	
  2064  1000  3403               	retlw	3
  2065  1001  3416               	retlw	22
  2066  1002  3417               	retlw	23
  2067  1003  341E               	retlw	30
  2068  1004  341F               	retlw	31
  2069  1005  3420               	retlw	32
  2070  1006  342A               	retlw	42
  2071  1007  342B               	retlw	43
  2072  1008  340B               	retlw	11
  2073  1009  340C               	retlw	12
  2074  100A  340D               	retlw	13
  2075  100B  340E               	retlw	14
  2076  100C  340F               	retlw	15
  2077  100D  3410               	retlw	16
  2078  100E  3411               	retlw	17
  2079  100F  3412               	retlw	18
  2080  1010  3413               	retlw	19
  2081  1011  3414               	retlw	20
  2082  1012  340A               	retlw	10
  2083  1013  3415               	retlw	21
  2084  1014  3421               	retlw	33
  2085  1015  3422               	retlw	34
  2086  1016  3418               	retlw	24
  2087  1017  3419               	retlw	25
  2088  1018  341A               	retlw	26
  2089  1019  341B               	retlw	27
  2090  101A  341C               	retlw	28
  2091  101B  341D               	retlw	29
  2092  101C  3423               	retlw	35
  2093  101D  3424               	retlw	36
  2094  101E  3425               	retlw	37
  2095  101F  3426               	retlw	38
  2096  1020  3429               	retlw	41
  2097  1021  342C               	retlw	44
  2098  1022  342D               	retlw	45
  2099  1023  342E               	retlw	46
  2100  1024  3400               	retlw	0
  2101  1025  3401               	retlw	1
  2102  1026  3402               	retlw	2
  2103  1027  3407               	retlw	7
  2104  1028  3408               	retlw	8
  2105  1029  3409               	retlw	9
  2106  102A  3406               	retlw	6
  2107  102B  3404               	retlw	4
  2108  102C  3405               	retlw	5
  2109  102D  3427               	retlw	39
  2110  102E  3428               	retlw	40
  2111  102F                     __end_of_CC2500_registers_address:	
  2112  102F                     _CC2500_rfSettings:	
  2113  102F  3407               	retlw	7
  2114  1030  3407               	retlw	7
  2115  1031  3430               	retlw	48
  2116  1032  3487               	retlw	135
  2117  1033  346B               	retlw	107
  2118  1034  34F8               	retlw	248
  2119  1035  347F               	retlw	127
  2120  1036  343F               	retlw	63
  2121  1037  3409               	retlw	9
  2122  1038  3400               	retlw	0
  2123  1039  345C               	retlw	92
  2124  103A  34A7               	retlw	167
  2125  103B  3462               	retlw	98
  2126  103C  3486               	retlw	134
  2127  103D  3483               	retlw	131
  2128  103E  3403               	retlw	3
  2129  103F  3422               	retlw	34
  2130  1040  34F8               	retlw	248
  2131  1041  3400               	retlw	0
  2132  1042  3444               	retlw	68
  2133  1043  34B6               	retlw	182
  2134  1044  3410               	retlw	16
  2135  1045  3418               	retlw	24
  2136  1046  341D               	retlw	29
  2137  1047  341C               	retlw	28
  2138  1048  34C7               	retlw	199
  2139  1049  3400               	retlw	0
  2140  104A  34B2               	retlw	178
  2141  104B  34EA               	retlw	234
  2142  104C  340A               	retlw	10
  2143  104D  3400               	retlw	0
  2144  104E  3411               	retlw	17
  2145  104F  3459               	retlw	89
  2146  1050  3488               	retlw	136
  2147  1051  3431               	retlw	49
  2148  1052  340B               	retlw	11
  2149  1053  342F               	retlw	47
  2150  1054  342E               	retlw	46
  2151  1055  3406               	retlw	6
  2152  1056  3404               	retlw	4
  2153  1057  3405               	retlw	5
  2154  1058  3400               	retlw	0
  2155  1059  3430               	retlw	48
  2156  105A  34D3               	retlw	211
  2157  105B  3491               	retlw	145
  2158  105C  3441               	retlw	65
  2159  105D  3400               	retlw	0
  2160  105E                     __end_of_CC2500_rfSettings:	
  2161  105E                     _CC2500_patable_vaule:	
  2162  105E  34FE               	retlw	254
  2163  105F  34FE               	retlw	254
  2164  1060  34FE               	retlw	254
  2165  1061  34FE               	retlw	254
  2166  1062  34FE               	retlw	254
  2167  1063  34FE               	retlw	254
  2168  1064  34FE               	retlw	254
  2169  1065  34FE               	retlw	254
  2170  1066                     __end_of_CC2500_patable_vaule:	
  2171                           
  2172                           	psect	nvBANK0
  2173  006D                     __pnvBANK0:	
  2174  006D                     _product:	
  2175  006D                     	ds	1
  2176  000C                     _PORTA	set	12
  2177  000D                     _PORTB	set	13
  2178  000E                     _PORTC	set	14
  2179  0018                     _T1CON	set	24
  2180  0017                     _TMR1H	set	23
  2181  0016                     _TMR1L	set	22
  2182  005F                     _GIE	set	95
  2183  005B                     _IOCIE	set	91
  2184  0058                     _IOCIF	set	88
  2185  005E                     _PEIE	set	94
  2186  0060                     _RA0	set	96
  2187  0063                     _RA3	set	99
  2188  0064                     _RA4	set	100
  2189  0066                     _RA6	set	102
  2190  0067                     _RA7	set	103
  2191  0068                     _RB0	set	104
  2192  0069                     _RB1	set	105
  2193  006A                     _RB2	set	106
  2194  006B                     _RB3	set	107
  2195  006C                     _RB4	set	108
  2196  006D                     _RB5	set	109
  2197  0070                     _RC0	set	112
  2198  0071                     _RC1	set	113
  2199  0072                     _RC2	set	114
  2200  0074                     _RC4	set	116
  2201  0075                     _RC5	set	117
  2202  0076                     _RC6	set	118
  2203  0077                     _RC7	set	119
  2204  0088                     _TMR1IF	set	136
  2205  009D                     _ADCON0	set	157
  2206  009E                     _ADCON1	set	158
  2207  009C                     _ADRESH	set	156
  2208  009B                     _ADRESL	set	155
  2209  0099                     _OSCCON	set	153
  2210  008C                     _TRISA	set	140
  2211  008D                     _TRISB	set	141
  2212  008E                     _TRISC	set	142
  2213  0097                     _WDTCON	set	151
  2214  04E9                     _GO_nDONE	set	1257
  2215  0488                     _TMR1IE	set	1160
  2216  0117                     _FVRCON	set	279
  2217  010C                     _LATA	set	268
  2218  010D                     _LATB	set	269
  2219  010E                     _LATC	set	270
  2220  018C                     _ANSELA	set	396
  2221  018D                     _ANSELB	set	397
  2222  018E                     _ANSELC	set	398
  2223  0192                     _PMADRH	set	402
  2224  0191                     _PMADRL	set	401
  2225  0196                     _PMCON2	set	406
  2226  0194                     _PMDATH	set	404
  2227  0193                     _PMDATL	set	403
  2228  0CAE                     _CFGS	set	3246
  2229  0CAC                     _FREE	set	3244
  2230  0CAD                     _LWLO	set	3245
  2231  0CA8                     _RD	set	3240
  2232  0CA9                     _WR	set	3241
  2233  0CAA                     _WREN	set	3242
  2234  1069                     _WPUB1	set	4201
  2235  106A                     _WPUB2	set	4202
  2236  0396                     _IOCBF	set	918
  2237  0395                     _IOCBN	set	917
  2238  0394                     _IOCBP	set	916
  2239  1CB2                     _IOCBF2	set	7346
  2240                           
  2241                           ; #config settings
  2242  0000                     
  2243                           	psect	cinit
  2244  0015                     start_initialization:	
  2245  0015                     __initialization:	
  2246                           
  2247                           ; Clear objects allocated to BITCOMMON
  2248  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2249                           
  2250                           ; Clear objects allocated to COMMON
  2251  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2252  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2253  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2254  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2255  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2256  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2257                           
  2258                           ; Clear objects allocated to BANK0
  2259  001C  01EB               	clrf	__pbssBANK0& (0+127)
  2260  001D  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2261                           
  2262                           ; Clear objects allocated to BANK1
  2263  001E  30A0               	movlw	low __pbssBANK1
  2264  001F  0084               	movwf	4
  2265  0020  3000               	movlw	high __pbssBANK1
  2266  0021  0085               	movwf	5
  2267  0022  304E               	movlw	78
  2268  0023  319E  2655  3180   	fcall	clear_ram0
  2269                           
  2270                           ; Clear objects allocated to BANK2
  2271  0026  3020               	movlw	low __pbssBANK2
  2272  0027  0084               	movwf	4
  2273  0028  3001               	movlw	high __pbssBANK2
  2274  0029  0085               	movwf	5
  2275  002A  304E               	movlw	78
  2276  002B  319E  2655  3180   	fcall	clear_ram0
  2277                           
  2278                           ; Clear objects allocated to BANK3
  2279  002E  30A0               	movlw	low __pbssBANK3
  2280  002F  0084               	movwf	4
  2281  0030  3001               	movlw	high __pbssBANK3
  2282  0031  0085               	movwf	5
  2283  0032  3040               	movlw	64
  2284  0033  319E  2655  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Initialize objects allocated to BANK4
  2287  0036  3055               	movlw	low __pidataBANK4
  2288  0037  0084               	movwf	4
  2289  0038  3092               	movlw	(high __pidataBANK4)| (0+128)
  2290  0039  0085               	movwf	5
  2291  003A  3020               	movlw	low __pdataBANK4
  2292  003B  0086               	movwf	6
  2293  003C  3002               	movlw	high __pdataBANK4
  2294  003D  0087               	movwf	7
  2295  003E  3020               	movlw	32
  2296  003F  319E  264F         	fcall	init_ram
  2297  0041                     end_of_initialization:	
  2298                           ;End of C runtime variable initialization code
  2299                           
  2300  0041                     __end_of__initialization:	
  2301  0041  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2302  0042  0020               	movlb	0
  2303  0043  3195  2D5A         	ljmp	_main	;jump to C main() function
  2304                           
  2305                           	psect	bitbssCOMMON
  2306  03E0                     __pbitbssCOMMON:	
  2307  03E0                     _Receive_OK:	
  2308  03E0                     	ds	1
  2309  03E1                     _Transceive_OK:	
  2310  03E1                     	ds	1
  2311                           
  2312                           	psect	bssCOMMON
  2313  0070                     __pbssCOMMON:	
  2314  0070                     _LED:	
  2315  0070                     	ds	2
  2316  0072                     _DelayOff:	
  2317  0072                     	ds	1
  2318  0073                     _Dimmer:	
  2319  0073                     	ds	1
  2320  0074                     _DimmerLightsIntr:	
  2321  0074                     	ds	1
  2322  0075                     _SPI0Buffer:	
  2323  0075                     	ds	1
  2324                           
  2325                           	psect	bssBANK0
  2326  006B                     __pbssBANK0:	
  2327  006B                     _DimmerLights:	
  2328  006B                     	ds	1
  2329  006C                     _Sw:	
  2330  006C                     	ds	1
  2331                           
  2332                           	psect	bssBANK1
  2333  00A0                     __pbssBANK1:	
  2334  00A0                     _myMain:	
  2335  00A0                     	ds	19
  2336  00B3                     _Buz1:	
  2337  00B3                     	ds	12
  2338  00BF                     _RF1:	
  2339  00BF                     	ds	12
  2340  00CB                     _Timer1:	
  2341  00CB                     	ds	3
  2342  00CE                     _RF_Count:	
  2343  00CE                     	ds	2
  2344  00D0                     _WDT:	
  2345  00D0                     	ds	2
  2346  00D2                     _CRC:	
  2347  00D2                     	ds	1
  2348  00D3                     _DimmerLights11:	
  2349  00D3                     	ds	1
  2350  00D4                     _DimmerLights22:	
  2351  00D4                     	ds	1
  2352  00D5                     _DimmerLights33:	
  2353  00D5                     	ds	1
  2354  00D6                     _DimmerLightsIntrIOC:	
  2355  00D6                     	ds	1
  2356  00D7                     _RFSW:	
  2357  00D7                     	ds	1
  2358  00D8                     _RSSI:	
  2359  00D8                     	ds	1
  2360  00D9                     _Rx_Length:	
  2361  00D9                     	ds	1
  2362  00DA                     _Tx_Length:	
  2363  00DA                     	ds	1
  2364  00DB                     _r_address:	
  2365  00DB                     	ds	1
  2366  00DC                     _r_data:	
  2367  00DC                     	ds	1
  2368  00DD                     _s_data:	
  2369  00DD                     	ds	1
  2370  00DE                     _VarErrLED:	
  2371  00DE                     	ds	4
  2372  00E2                     _Dimmer1:	
  2373  00E2                     	ds	3
  2374  00E5                     _DlySw1:	
  2375  00E5                     	ds	2
  2376  00E7                     _DlySw2:	
  2377  00E7                     	ds	2
  2378  00E9                     _DlySw3:	
  2379  00E9                     	ds	2
  2380  00EB                     _RFSW1:	
  2381  00EB                     	ds	1
  2382  00EC                     _RFSW2:	
  2383  00EC                     	ds	1
  2384  00ED                     _RFSW3:	
  2385  00ED                     	ds	1
  2386                           
  2387                           	psect	bssBANK2
  2388  0120                     __pbssBANK2:	
  2389  0120                     _RF_Data:	
  2390  0120                     	ds	21
  2391  0135                     _DimmerLights1:	
  2392  0135                     	ds	15
  2393  0144                     _DimmerLights2:	
  2394  0144                     	ds	15
  2395  0153                     _DimmerLights3:	
  2396  0153                     	ds	15
  2397  0162                     _VarLED1:	
  2398  0162                     	ds	4
  2399  0166                     _VarLED2:	
  2400  0166                     	ds	4
  2401  016A                     _VarLED3:	
  2402  016A                     	ds	4
  2403                           
  2404                           	psect	bssBANK3
  2405  01A0                     __pbssBANK3:	
  2406  01A0                     _Memory:	
  2407  01A0                     	ds	37
  2408  01C5                     _Sw1:	
  2409  01C5                     	ds	9
  2410  01CE                     _Sw2:	
  2411  01CE                     	ds	9
  2412  01D7                     _Sw3:	
  2413  01D7                     	ds	9
  2414                           
  2415                           	psect	dataBANK4
  2416  0220                     __pdataBANK4:	
  2417  0220                     __product:	
  2418  0220                     	ds	32
  2419                           
  2420                           	psect	clrtext
  2421  1E55                     clear_ram0:	
  2422                           ;	Called with FSR0 containing the base address, and
  2423                           ;	WREG with the size to clear
  2424                           
  2425  1E55  0064               	clrwdt	;clear the watchdog before getting into this loop
  2426  1E56                     clrloop0:	
  2427  1E56  0180               	clrf	0	;clear RAM location pointed to by FSR
  2428  1E57  3101               	addfsr 0,1
  2429  1E58  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2430  1E59  2E56               	goto	clrloop0	;have we reached the end yet?
  2431  1E5A  3400               	retlw	0	;all done for this memory range, return
  2432                           
  2433                           	psect	inittext
  2434  1E4F                     init_ram:	
  2435  1E4F  00FE               	movwf	126
  2436  1E50                     initloop:	
  2437  1E50  0012               	moviw fsr0++
  2438  1E51  001E               	movwi fsr1++
  2439  1E52  0BFE               	decfsz	126,f
  2440  1E53  2E50               	goto	initloop
  2441  1E54  3400               	retlw	0
  2442                           
  2443                           	psect	cstackBANK3
  2444  01E0                     __pcstackBANK3:	
  2445  01E0                     ?_main:	
  2446  01E0                     main@argc:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449                           
  2450                           ; 2 bytes @ 0x0
  2451  01E0                     	ds	2
  2452  01E2                     main@argv:	
  2453                           
  2454                           ; 2 bytes @ 0x2
  2455  01E2                     	ds	2
  2456                           
  2457                           	psect	cstackCOMMON
  2458  0076                     __pcstackCOMMON:	
  2459  0076                     ?_Timeout_Counter:	
  2460  0076                     ?_set_TimeoutCleared:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0076                     ?_CC2500_WriteByte:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0076                     ?_CC2500_WriteCommand:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0076                     ?_CC2500_ReadStatus:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0076                     ?_CC2500_ReadByte:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0076                     ?_CC2500_PowerRST:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0076                     ?_CC2500_InitSetREG:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0076                     ?_CC2500_InitPATable:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0076                     ?_CC2500_ClearTXFIFO:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0076                     ?_CC2500_ClearRXFIFO:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0076                     ?_CC2500_FrequencyCabr:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0076                     ?_CC2500_SIDLEMode:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0076                     ?_DlyOff_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0076                     ?_DlyOff_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0076                     ?_setTxData:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0076                     ?_setDimmerLights_Initialization:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0076                     ?_Dimmer_Initialization:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0076                     ?_setMemory_GO:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0076                     ?_setDimmerLights_Main:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0076                     ?_setLED_Initialization:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0076                     ?_setLED_Main:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0076                     ?_Fosc_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0076                     ?_IO_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0076                     ?_TMR1_Set:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0076                     ?_ADC_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0076                     ?_IOC_Set:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0076                     ?_WDT_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0076                     ?_IOC_ISR:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0076                     ?_TMR1_ISR:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0076                     ?_Flash_Memory_Write:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0076                     ?_Flash_Memory_Modify:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0076                     ?_WDT_Clearing:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0076                     ?_myMain_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0076                     ?_Switch_Initialization:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0076                     ?_RF_Initialization:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0076                     ?_my_MainTime:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0076                     ?_Switch_Main:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0076                     ?_RF_Main:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0076                     ?_setSw_Enable:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0076                     ?_setRF_Enable:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0076                     ?_setRF_Initialization:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0076                     ?_setRF_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0076                     ?_getRxData:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0076                     ?_setLog_Code:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0076                     ?_setControl_Lights_Table:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0076                     ?_setRFSW_Control:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0076                     ?_setRFSW_AdjControl:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0076                     ?_setRF_DimmerValue:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0076                     ?_setSw_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0076                     ?_setSw_Main:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0076                     ?_Sw_DimmerOnFunc:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0076                     ?_Sw_DimmerAdjFunc:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0076                     ?_Sw_DimmerOffFunc:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0076                     ?_Buzzer_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0076                     ?_Buzzer_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0076                     ?_CC2500_TxData:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0076                     ?_CC2500_RxData:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0076                     ?_CC2500_PowerOnInitial:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0076                     ?_DelayOffPointSelect:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0076                     ?_DelayOff_Initialization:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0076                     ?_DelayOff_Main:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0076                     ?_DimmerIntrIOCPointSelect:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0076                     ??_DimmerIntrIOCPointSelect:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0076                     ?_DimmerIntrPointSelect:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0076                     ??_DimmerIntrPointSelect:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0076                     ?_setDimmerLights_IntrControl:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0076                     ?_DimmerLightsPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0076                     ?_DimmerLights_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0076                     ?_DimmerLights_Close:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0076                     ?_DimmerLights_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0076                     ?_setDimmerLights_AdjRF:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0076                     ?_LedPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0076                     ?_LED_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0076                     ?_LED_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0076                     ?_Mcu_Initialization:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0076                     ?_ISR:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0076                     ?_setDimmerReClock:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0076                     ?_Flash_Memory_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0076                     ?_Flash_Memory_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0076                     ?_Flash_Memory_Unlock:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0076                     ?_Flash_Memory_Erasing:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0076                     ?_WDT_Main:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0076                     ?_setRF_Learn:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0076                     ?_RfSWPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0076                     ?_TouchPower:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0076                     ?_SwPointSelect:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0076                     ?_DelayTimejudge:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0076                     ?_getDimmerLights_StatusFlag:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0076                     ?_getPercentValue:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0076                     ?_Flash_Memory_Read:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0076                     ?_setPercentValue:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x0
  2738  0076                     	ds	1
  2739  0077                     DimmerIntrIOCPointSelect@lights:	
  2740  0077                     DimmerIntrPointSelect@lights:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743                           
  2744                           ; 1 bytes @ 0x1
  2745  0077                     	ds	1
  2746  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2747  0078                     ??_setDimmerLights_IntrControl:	
  2748                           ; 0 bytes @ 0x2
  2749                           
  2750  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2751                           ; 0 bytes @ 0x2
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x2
  2755  0078                     	ds	1
  2756  0079                     ??_IOC_ISR:	
  2757  0079                     ??_setDimmerReClock:	
  2758                           ; 0 bytes @ 0x3
  2759                           
  2760                           
  2761                           ; 0 bytes @ 0x3
  2762  0079                     	ds	1
  2763  007A                     setDimmerLights_IntrControl@lights:	
  2764                           
  2765                           ; 1 bytes @ 0x4
  2766  007A                     	ds	1
  2767  007B                     ??_TMR1_ISR:	
  2768  007B                     ??_ISR:	
  2769                           ; 0 bytes @ 0x5
  2770                           
  2771                           
  2772                           ; 0 bytes @ 0x5
  2773  007B                     	ds	1
  2774                           
  2775                           	psect	cstackBANK0
  2776  0020                     __pcstackBANK0:	
  2777  0020                     ??_Timeout_Counter:	
  2778  0020                     ??_set_TimeoutCleared:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0020                     ??_CC2500_WriteByte:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0020                     ??_CC2500_ReadByte:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0020                     ?_DelayTime_1us:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0020                     ??_setTxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0020                     ??_Dimmer_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ??_getDimmerLights_StatusFlag:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_setMemory_GO:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_Fosc_Set:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_IO_Set:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_TMR1_Set:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_ADC_Set:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_IOC_Set:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_WDT_Set:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Flash_Memory_Read:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_Flash_Memory_Write:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_WDT_Clearing:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_myMain_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_setRF_Enable:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_setRF_Initialization:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Buzzer_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Buzzer_Main:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_DelayOffPointSelect:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_DimmerLightsPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_LedPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Flash_Memory_Unlock:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Flash_Memory_Erasing:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_WDT_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_setRF_Learn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_RfSWPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_TouchPower:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_SwPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ?___bmul:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ?_getBuz_GO:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0020                     ?___awdiv:	
  2881                           ; 2 bytes @ 0x0
  2882                           
  2883  0020                     ?___ftpack:	
  2884                           ; 2 bytes @ 0x0
  2885                           
  2886  0020                     LedPointSelect@led:	
  2887                           ; 3 bytes @ 0x0
  2888                           
  2889  0020                     setRF_Learn@command:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0020                     setRF_Enable@command:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0020                     ___bmul@multiplicand:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0020                     DelayTime_1us@count:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0020                     ___awdiv@divisor:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     ___ftpack@arg:	
  2905                           ; 2 bytes @ 0x0
  2906                           
  2907                           
  2908                           ; 3 bytes @ 0x0
  2909  0020                     	ds	1
  2910  0021                     ?_setLED:	
  2911  0021                     ??_setLED_Main:	
  2912                           ; 0 bytes @ 0x1
  2913                           
  2914  0021                     ??_RF_Initialization:	
  2915                           ; 0 bytes @ 0x1
  2916                           
  2917  0021                     ??_Mcu_Initialization:	
  2918                           ; 0 bytes @ 0x1
  2919                           
  2920  0021                     ??___bmul:	
  2921                           ; 0 bytes @ 0x1
  2922                           
  2923  0021                     CC2500_WriteByte@loop_a:	
  2924                           ; 0 bytes @ 0x1
  2925                           
  2926  0021                     CC2500_ReadByte@loop_b:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0021                     DelayOffPointSelect@sw:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0021                     DimmerLightsPointSelect@lights:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0021                     getDimmerLights_StatusFlag@Status:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     setLED@command:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     Flash_Memory_Read@i:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     Flash_Memory_Write@i:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     RfSWPointSelect@sw:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     SwPointSelect@sw:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953                           
  2954                           ; 1 bytes @ 0x1
  2955  0021                     	ds	1
  2956  0022                     ??_CC2500_WriteCommand:	
  2957  0022                     ??_CC2500_ReadStatus:	
  2958                           ; 0 bytes @ 0x2
  2959                           
  2960  0022                     ??_DelayTime_1us:	
  2961                           ; 0 bytes @ 0x2
  2962                           
  2963  0022                     ?_CC2500_WriteREG:	
  2964                           ; 0 bytes @ 0x2
  2965                           
  2966  0022                     ??_DlyOff_Initialization:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0022                     ?_setSw_Status:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ?_setRFSW_Status:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_setDimmerLights_Trigger:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ?_setDimmerLights_Switch:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ??_setDimmerLights_Initialization:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ??_setLED:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ??_setSw_Enable:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ??_getBuz_GO:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ?_setDimmerLights_AdjGo:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ?_setDimmerLights_TriggerAdj:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     CC2500_WriteREG@value:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     DlyOff_Initialization@sw:	
  3003                           ; 1 bytes @ 0x2
  3004                           
  3005  0022                     _getDimmerLights_StatusFlag$2424:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     setDimmerLights_Switch@command:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     setDimmerLights_AdjGo@command:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     setDimmerLights_Trigger@command:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     setDimmerLights_TriggerAdj@command:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     setLED@led:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     Flash_Memory_Read@address:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     setMemory_GO@command:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     setRFSW_Status@command:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     setSw_Enable@command:	
  3033                           ; 1 bytes @ 0x2
  3034                           
  3035  0022                     setSw_Status@command:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     ___bmul@product:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     DelayTime_1us@i:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     ___awdiv@dividend:	
  3045                           ; 2 bytes @ 0x2
  3046                           
  3047                           
  3048                           ; 2 bytes @ 0x2
  3049  0022                     	ds	1
  3050  0023                     ??_CC2500_WriteREG:	
  3051  0023                     ??_setSw_Status:	
  3052                           ; 0 bytes @ 0x3
  3053                           
  3054  0023                     ??_setRFSW_Status:	
  3055                           ; 0 bytes @ 0x3
  3056                           
  3057  0023                     ??_setDimmerLights_Trigger:	
  3058                           ; 0 bytes @ 0x3
  3059                           
  3060  0023                     ??_setDimmerLights_Switch:	
  3061                           ; 0 bytes @ 0x3
  3062                           
  3063  0023                     ?_setDimmerLights:	
  3064                           ; 0 bytes @ 0x3
  3065                           
  3066  0023                     ??_setLED_Initialization:	
  3067                           ; 0 bytes @ 0x3
  3068                           
  3069  0023                     ??_setSw_Initialization:	
  3070                           ; 0 bytes @ 0x3
  3071                           
  3072  0023                     ??_DelayOff_Initialization:	
  3073                           ; 0 bytes @ 0x3
  3074                           
  3075  0023                     ??_DimmerLights_Close:	
  3076                           ; 0 bytes @ 0x3
  3077                           
  3078  0023                     ??_setDimmerLights_AdjGo:	
  3079                           ; 0 bytes @ 0x3
  3080                           
  3081  0023                     ??_setDimmerLights_TriggerAdj:	
  3082                           ; 0 bytes @ 0x3
  3083                           
  3084  0023                     CC2500_WriteCommand@command:	
  3085                           ; 0 bytes @ 0x3
  3086                           
  3087  0023                     CC2500_ReadStatus@status_addr:	
  3088                           ; 1 bytes @ 0x3
  3089                           
  3090  0023                     setDimmerLights_Initialization@lights:	
  3091                           ; 1 bytes @ 0x3
  3092                           
  3093  0023                     setDimmerLights@status:	
  3094                           ; 1 bytes @ 0x3
  3095                           
  3096  0023                     setDimmerLights_Switch@lights:	
  3097                           ; 1 bytes @ 0x3
  3098                           
  3099  0023                     setDimmerLights_AdjGo@lights:	
  3100                           ; 1 bytes @ 0x3
  3101                           
  3102  0023                     setDimmerLights_Trigger@lights:	
  3103                           ; 1 bytes @ 0x3
  3104                           
  3105  0023                     setDimmerLights_TriggerAdj@lights:	
  3106                           ; 1 bytes @ 0x3
  3107                           
  3108  0023                     setLED_Initialization@led:	
  3109                           ; 1 bytes @ 0x3
  3110                           
  3111  0023                     setLED_Main@led:	
  3112                           ; 1 bytes @ 0x3
  3113                           
  3114  0023                     Flash_Memory_Read@ret:	
  3115                           ; 1 bytes @ 0x3
  3116                           
  3117  0023                     setRFSW_Status@sw:	
  3118                           ; 1 bytes @ 0x3
  3119                           
  3120  0023                     setSw_Initialization@sw:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     setSw_Status@sw:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     ___bmul@multiplier:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     ___ftpack@exp:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132                           
  3133                           ; 1 bytes @ 0x3
  3134  0023                     	ds	1
  3135  0024                     ??_CC2500_ClearTXFIFO:	
  3136  0024                     ??_CC2500_ClearRXFIFO:	
  3137                           ; 0 bytes @ 0x4
  3138                           
  3139  0024                     ??_CC2500_SIDLEMode:	
  3140                           ; 0 bytes @ 0x4
  3141                           
  3142  0024                     ??_DelayTimejudge:	
  3143                           ; 0 bytes @ 0x4
  3144                           
  3145  0024                     ??_setDimmerLights:	
  3146                           ; 0 bytes @ 0x4
  3147                           
  3148  0024                     ??_Flash_Memory_Modify:	
  3149                           ; 0 bytes @ 0x4
  3150                           
  3151  0024                     ??_Switch_Initialization:	
  3152                           ; 0 bytes @ 0x4
  3153                           
  3154  0024                     ??_Sw_DimmerAdjFunc:	
  3155                           ; 0 bytes @ 0x4
  3156                           
  3157  0024                     ??_CC2500_TxData:	
  3158                           ; 0 bytes @ 0x4
  3159                           
  3160  0024                     ??_CC2500_RxData:	
  3161                           ; 0 bytes @ 0x4
  3162                           
  3163  0024                     ??_DimmerLights_Initialization:	
  3164                           ; 0 bytes @ 0x4
  3165                           
  3166  0024                     ??_LED_Initialization:	
  3167                           ; 0 bytes @ 0x4
  3168                           
  3169  0024                     ??_LED_Main:	
  3170                           ; 0 bytes @ 0x4
  3171                           
  3172  0024                     ??___awdiv:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     CC2500_WriteREG@w_addr:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ___ftpack@sign:	
  3179                           ; 1 bytes @ 0x4
  3180                           
  3181  0024                     getBuz_GO@i:	
  3182                           ; 1 bytes @ 0x4
  3183                           
  3184  0024                     DelayTime_1us@j:	
  3185                           ; 2 bytes @ 0x4
  3186                           
  3187                           
  3188                           ; 2 bytes @ 0x4
  3189  0024                     	ds	1
  3190  0025                     ??_CC2500_InitSetREG:	
  3191  0025                     ??_CC2500_InitPATable:	
  3192                           ; 0 bytes @ 0x5
  3193                           
  3194  0025                     ??___ftpack:	
  3195                           ; 0 bytes @ 0x5
  3196                           
  3197  0025                     CC2500_TxData@loop_e:	
  3198                           ; 0 bytes @ 0x5
  3199                           
  3200  0025                     CC2500_RxData@loop_f:	
  3201                           ; 1 bytes @ 0x5
  3202                           
  3203  0025                     setDimmerLights@lights:	
  3204                           ; 1 bytes @ 0x5
  3205                           
  3206  0025                     Flash_Memory_Modify@i:	
  3207                           ; 1 bytes @ 0x5
  3208                           
  3209  0025                     _Sw_DimmerAdjFunc$6051:	
  3210                           ; 1 bytes @ 0x5
  3211                           
  3212  0025                     ___awdiv@counter:	
  3213                           ; 1 bytes @ 0x5
  3214                           
  3215                           
  3216                           ; 1 bytes @ 0x5
  3217  0025                     	ds	1
  3218  0026                     ??_CC2500_PowerRST:	
  3219  0026                     ??_CC2500_FrequencyCabr:	
  3220                           ; 0 bytes @ 0x6
  3221                           
  3222  0026                     ??_Flash_Memory_Main:	
  3223                           ; 0 bytes @ 0x6
  3224                           
  3225  0026                     CC2500_InitSetREG@temp1:	
  3226                           ; 0 bytes @ 0x6
  3227                           
  3228  0026                     CC2500_InitPATable@temp:	
  3229                           ; 1 bytes @ 0x6
  3230                           
  3231  0026                     DelayTimejudge@i:	
  3232                           ; 1 bytes @ 0x6
  3233                           
  3234  0026                     _Sw_DimmerAdjFunc$6052:	
  3235                           ; 1 bytes @ 0x6
  3236                           
  3237  0026                     ___awdiv@sign:	
  3238                           ; 1 bytes @ 0x6
  3239                           
  3240                           
  3241                           ; 1 bytes @ 0x6
  3242  0026                     	ds	1
  3243  0027                     CC2500_InitSetREG@temp2:	
  3244  0027                     CC2500_InitPATable@loop_d:	
  3245                           ; 1 bytes @ 0x7
  3246                           
  3247  0027                     DelayTimejudge@j:	
  3248                           ; 1 bytes @ 0x7
  3249                           
  3250  0027                     _Sw_DimmerAdjFunc$6053:	
  3251                           ; 1 bytes @ 0x7
  3252                           
  3253  0027                     ___awdiv@quotient:	
  3254                           ; 1 bytes @ 0x7
  3255                           
  3256                           
  3257                           ; 2 bytes @ 0x7
  3258  0027                     	ds	1
  3259  0028                     ?___awtoft:	
  3260  0028                     CC2500_InitSetREG@loop_c:	
  3261                           ; 3 bytes @ 0x8
  3262                           
  3263  0028                     DelayTimejudge@k:	
  3264                           ; 1 bytes @ 0x8
  3265                           
  3266  0028                     Sw_DimmerAdjFunc@Idle:	
  3267                           ; 1 bytes @ 0x8
  3268                           
  3269  0028                     ___awtoft@c:	
  3270                           ; 1 bytes @ 0x8
  3271                           
  3272                           
  3273                           ; 2 bytes @ 0x8
  3274  0028                     	ds	1
  3275  0029                     ?_setBuz:	
  3276  0029                     ??_CC2500_PowerOnInitial:	
  3277                           ; 0 bytes @ 0x9
  3278                           
  3279  0029                     DelayTimejudge@value:	
  3280                           ; 0 bytes @ 0x9
  3281                           
  3282  0029                     Sw_DimmerAdjFunc@sw:	
  3283                           ; 1 bytes @ 0x9
  3284                           
  3285  0029                     setBuz@time:	
  3286                           ; 1 bytes @ 0x9
  3287                           
  3288                           
  3289                           ; 2 bytes @ 0x9
  3290  0029                     	ds	1
  3291  002A                     ?_setDelayOff_GO:	
  3292  002A                     setDelayOff_GO@command:	
  3293                           ; 0 bytes @ 0xA
  3294                           
  3295                           
  3296                           ; 1 bytes @ 0xA
  3297  002A                     	ds	1
  3298  002B                     ??_setBuz:	
  3299  002B                     ??___awtoft:	
  3300                           ; 0 bytes @ 0xB
  3301                           
  3302  002B                     setDelayOff_GO@value:	
  3303                           ; 0 bytes @ 0xB
  3304                           
  3305                           
  3306                           ; 1 bytes @ 0xB
  3307  002B                     	ds	1
  3308  002C                     ??_setDelayOff_GO:	
  3309  002C                     setBuz@count:	
  3310                           ; 0 bytes @ 0xC
  3311                           
  3312                           
  3313                           ; 1 bytes @ 0xC
  3314  002C                     	ds	1
  3315  002D                     ??_my_MainTime:	
  3316  002D                     ??_setLog_Code:	
  3317                           ; 0 bytes @ 0xD
  3318                           
  3319  002D                     ___awtoft@sign:	
  3320                           ; 0 bytes @ 0xD
  3321                           
  3322                           
  3323                           ; 1 bytes @ 0xD
  3324  002D                     	ds	1
  3325  002E                     ?___ftdiv:	
  3326  002E                     ?___ftmul:	
  3327                           ; 3 bytes @ 0xE
  3328                           
  3329  002E                     setDelayOff_GO@sw:	
  3330                           ; 3 bytes @ 0xE
  3331                           
  3332  002E                     ___ftdiv@f2:	
  3333                           ; 1 bytes @ 0xE
  3334                           
  3335  002E                     ___ftmul@f1:	
  3336                           ; 3 bytes @ 0xE
  3337                           
  3338                           
  3339                           ; 3 bytes @ 0xE
  3340  002E                     	ds	3
  3341  0031                     ___ftdiv@f1:	
  3342  0031                     ___ftmul@f2:	
  3343                           ; 3 bytes @ 0x11
  3344                           
  3345                           
  3346                           ; 3 bytes @ 0x11
  3347  0031                     	ds	3
  3348  0034                     ??___ftdiv:	
  3349  0034                     ??___ftmul:	
  3350                           ; 0 bytes @ 0x14
  3351                           
  3352                           
  3353                           ; 0 bytes @ 0x14
  3354  0034                     	ds	4
  3355  0038                     ___ftdiv@cntr:	
  3356  0038                     ___ftmul@exp:	
  3357                           ; 1 bytes @ 0x18
  3358                           
  3359                           
  3360                           ; 1 bytes @ 0x18
  3361  0038                     	ds	1
  3362  0039                     ___ftdiv@f3:	
  3363  0039                     ___ftmul@f3_as_product:	
  3364                           ; 3 bytes @ 0x19
  3365                           
  3366                           
  3367                           ; 3 bytes @ 0x19
  3368  0039                     	ds	3
  3369  003C                     ___ftdiv@exp:	
  3370  003C                     ___ftmul@cntr:	
  3371                           ; 1 bytes @ 0x1C
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x1C
  3375  003C                     	ds	1
  3376  003D                     ___ftdiv@sign:	
  3377  003D                     ___ftmul@sign:	
  3378                           ; 1 bytes @ 0x1D
  3379                           
  3380                           
  3381                           ; 1 bytes @ 0x1D
  3382  003D                     	ds	1
  3383  003E                     ?___ftadd:	
  3384  003E                     ___ftadd@f1:	
  3385                           ; 3 bytes @ 0x1E
  3386                           
  3387                           
  3388                           ; 3 bytes @ 0x1E
  3389  003E                     	ds	3
  3390  0041                     ___ftadd@f2:	
  3391                           
  3392                           ; 3 bytes @ 0x21
  3393  0041                     	ds	3
  3394  0044                     ??___ftadd:	
  3395                           
  3396                           ; 0 bytes @ 0x24
  3397  0044                     	ds	4
  3398  0048                     ___ftadd@sign:	
  3399                           
  3400                           ; 1 bytes @ 0x28
  3401  0048                     	ds	1
  3402  0049                     ___ftadd@exp2:	
  3403                           
  3404                           ; 1 bytes @ 0x29
  3405  0049                     	ds	1
  3406  004A                     ___ftadd@exp1:	
  3407                           
  3408                           ; 1 bytes @ 0x2A
  3409  004A                     	ds	1
  3410  004B                     ?___fttol:	
  3411  004B                     ___fttol@f1:	
  3412                           ; 4 bytes @ 0x2B
  3413                           
  3414                           
  3415                           ; 3 bytes @ 0x2B
  3416  004B                     	ds	4
  3417  004F                     ??___fttol:	
  3418                           
  3419                           ; 0 bytes @ 0x2F
  3420  004F                     	ds	4
  3421  0053                     ___fttol@sign1:	
  3422                           
  3423                           ; 1 bytes @ 0x33
  3424  0053                     	ds	1
  3425  0054                     ___fttol@lval:	
  3426                           
  3427                           ; 4 bytes @ 0x34
  3428  0054                     	ds	4
  3429  0058                     ___fttol@exp1:	
  3430                           
  3431                           ; 1 bytes @ 0x38
  3432  0058                     	ds	1
  3433  0059                     ??_getPercentValue:	
  3434  0059                     ??_setPercentValue:	
  3435                           ; 0 bytes @ 0x39
  3436                           
  3437  0059                     setPercentValue@value:	
  3438                           ; 0 bytes @ 0x39
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x39
  3442  0059                     	ds	1
  3443  005A                     setPercentValue@i:	
  3444                           
  3445                           ; 3 bytes @ 0x3A
  3446  005A                     	ds	1
  3447  005B                     getPercentValue@value:	
  3448                           
  3449                           ; 1 bytes @ 0x3B
  3450  005B                     	ds	1
  3451  005C                     getPercentValue@i:	
  3452                           
  3453                           ; 3 bytes @ 0x3C
  3454  005C                     	ds	1
  3455  005D                     ?_setRF_DimmerLights:	
  3456  005D                     ??_Flash_Memory_Initialization:	
  3457                           ; 0 bytes @ 0x3D
  3458                           
  3459  005D                     setRF_DimmerLights@on:	
  3460                           ; 0 bytes @ 0x3D
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x3D
  3464  005D                     	ds	1
  3465  005E                     ??_setRF_DimmerLights:	
  3466  005E                     Flash_Memory_Initialization@i:	
  3467                           ; 0 bytes @ 0x3E
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x3E
  3471  005E                     	ds	1
  3472  005F                     ??_setDimmerLights_AdjRF:	
  3473                           
  3474                           ; 0 bytes @ 0x3F
  3475  005F                     	ds	1
  3476  0060                     setDimmerLights_AdjRF@lights:	
  3477  0060                     setRF_DimmerLights@status:	
  3478                           ; 1 bytes @ 0x40
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x40
  3482  0060                     	ds	1
  3483  0061                     ??_setRF_DimmerValue:	
  3484  0061                     setRF_DimmerLights@lights:	
  3485                           ; 0 bytes @ 0x41
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x41
  3489  0061                     	ds	1
  3490  0062                     ??_DlyOff_Main:	
  3491  0062                     ?_setDimmerLights_Adj:	
  3492                           ; 0 bytes @ 0x42
  3493                           
  3494  0062                     ??_setRFSW_Control:	
  3495                           ; 0 bytes @ 0x42
  3496                           
  3497  0062                     ??_Sw_DimmerOnFunc:	
  3498                           ; 0 bytes @ 0x42
  3499                           
  3500  0062                     ??_Sw_DimmerOffFunc:	
  3501                           ; 0 bytes @ 0x42
  3502                           
  3503  0062                     setDimmerLights_Adj@status:	
  3504                           ; 0 bytes @ 0x42
  3505                           
  3506                           
  3507                           ; 1 bytes @ 0x42
  3508  0062                     	ds	1
  3509  0063                     ??_setDimmerLights_Adj:	
  3510  0063                     setRFSW_Control@sw:	
  3511                           ; 0 bytes @ 0x43
  3512                           
  3513  0063                     setRF_DimmerValue@lights:	
  3514                           ; 1 bytes @ 0x43
  3515                           
  3516  0063                     _Sw_DimmerOnFunc$6039:	
  3517                           ; 1 bytes @ 0x43
  3518                           
  3519                           
  3520                           ; 1 bytes @ 0x43
  3521  0063                     	ds	1
  3522  0064                     ??_setRFSW_AdjControl:	
  3523  0064                     DlyOff_Main@sw:	
  3524                           ; 0 bytes @ 0x44
  3525                           
  3526  0064                     setDimmerLights_Adj@lights:	
  3527                           ; 1 bytes @ 0x44
  3528                           
  3529  0064                     _Sw_DimmerOnFunc$6040:	
  3530                           ; 1 bytes @ 0x44
  3531                           
  3532  0064                     Sw_DimmerOffFunc@sw:	
  3533                           ; 1 bytes @ 0x44
  3534                           
  3535                           
  3536                           ; 1 bytes @ 0x44
  3537  0064                     	ds	1
  3538  0065                     ??_setDimmerLights_Main:	
  3539  0065                     ??_DelayOff_Main:	
  3540                           ; 0 bytes @ 0x45
  3541                           
  3542  0065                     _Sw_DimmerOnFunc$6041:	
  3543                           ; 0 bytes @ 0x45
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0x45
  3547  0065                     	ds	1
  3548  0066                     _setDimmerLights_Main$2380:	
  3549  0066                     setRFSW_AdjControl@sw:	
  3550                           ; 1 bytes @ 0x46
  3551                           
  3552  0066                     Sw_DimmerOnFunc@Idle:	
  3553                           ; 1 bytes @ 0x46
  3554                           
  3555                           
  3556                           ; 1 bytes @ 0x46
  3557  0066                     	ds	1
  3558  0067                     ??_setRF_Main:	
  3559  0067                     ??_getRxData:	
  3560                           ; 0 bytes @ 0x47
  3561                           
  3562  0067                     ??_setControl_Lights_Table:	
  3563                           ; 0 bytes @ 0x47
  3564                           
  3565  0067                     _setDimmerLights_Main$2388:	
  3566                           ; 0 bytes @ 0x47
  3567                           
  3568  0067                     Sw_DimmerOnFunc@sw:	
  3569                           ; 1 bytes @ 0x47
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x47
  3573  0067                     	ds	1
  3574  0068                     ??_setSw_Main:	
  3575  0068                     _setDimmerLights_Main$2389:	
  3576                           ; 0 bytes @ 0x48
  3577                           
  3578  0068                     _setRF_Main$5086:	
  3579                           ; 1 bytes @ 0x48
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x48
  3583  0068                     	ds	1
  3584  0069                     ??_RF_Main:	
  3585  0069                     setDimmerLights_Main@clear:	
  3586                           ; 0 bytes @ 0x49
  3587                           
  3588                           
  3589                           ; 1 bytes @ 0x49
  3590  0069                     	ds	1
  3591  006A                     setDimmerLights_Main@lights:	
  3592  006A                     setSw_Main@sw:	
  3593                           ; 1 bytes @ 0x4A
  3594                           
  3595                           
  3596                           ; 1 bytes @ 0x4A
  3597  006A                     	ds	1
  3598  006B                     ??_Switch_Main:	
  3599  006B                     ??_DimmerLights_Main:	
  3600                           ; 0 bytes @ 0x4B
  3601                           
  3602  006B                     ??_main:	
  3603                           ; 0 bytes @ 0x4B
  3604                           
  3605                           
  3606                           	psect	maintext
  3607  155A                     __pmaintext:	
  3608                           ; 0 bytes @ 0x4B
  3609 ;;
  3610 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3611 ;;
  3612 ;; *************** function _main *****************
  3613 ;; Defined at:
  3614 ;;		line 7 in file "../src/Main_B1.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  argc            2    0[BANK3 ] int 
  3617 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  2    0[BANK3 ] int 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 17F/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3629 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3633 ;;Total ram usage:        4 bytes
  3634 ;; Hardware stack levels required when called:   15
  3635 ;; This function calls:
  3636 ;;		_Buzzer_Initialization
  3637 ;;		_Buzzer_Main
  3638 ;;		_CC2500_PowerOnInitial
  3639 ;;		_DelayOff_Initialization
  3640 ;;		_DelayOff_Main
  3641 ;;		_DimmerLights_Initialization
  3642 ;;		_DimmerLights_Main
  3643 ;;		_Flash_Memory_Initialization
  3644 ;;		_Flash_Memory_Main
  3645 ;;		_LED_Initialization
  3646 ;;		_LED_Main
  3647 ;;		_Mcu_Initialization
  3648 ;;		_RF_Initialization
  3649 ;;		_RF_Main
  3650 ;;		_Switch_Initialization
  3651 ;;		_Switch_Main
  3652 ;;		_WDT_Main
  3653 ;;		_myMain_Initialization
  3654 ;;		_my_MainTime
  3655 ;; This function is called by:
  3656 ;;		Startup code after reset
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _main
  3662  155A                     _main:	
  3663                           
  3664                           ;Main_B1.c: 8: myMain_Initialization();
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3668  155A  319F  274C  3195   	fcall	_myMain_Initialization
  3669                           
  3670                           ;Main_B1.c: 9: Mcu_Initialization();
  3671  155D  319F  27EE  3195   	fcall	_Mcu_Initialization
  3672                           
  3673                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3674  1560  3185  2531  3195   	fcall	_Flash_Memory_Initialization
  3675                           
  3676                           ;Main_B1.c: 11: LED_Initialization();
  3677  1563  319F  277B  3195   	fcall	_LED_Initialization
  3678                           
  3679                           ;Main_B1.c: 12: Buzzer_Initialization();
  3680  1566  319E  2630  3195   	fcall	_Buzzer_Initialization
  3681                           
  3682                           ;Main_B1.c: 14: ;;
  3683                           ;Main_B1.c: 15: ;;
  3684                           ;Main_B1.c: 16: ;;
  3685                           ;Main_B1.c: 17: ;;
  3686                           ;Main_B1.c: 18: DelayOff_Initialization();
  3687  1569  319E  26AC  3195   	fcall	_DelayOff_Initialization
  3688                           
  3689                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3690  156C  3192  2296  3195   	fcall	_DimmerLights_Initialization
  3691                           
  3692                           ;Main_B1.c: 21: ;;
  3693                           ;Main_B1.c: 22: ;;
  3694                           ;Main_B1.c: 23: ;;
  3695                           ;Main_B1.c: 24: Switch_Initialization();
  3696  156F  319F  27DD  3195   	fcall	_Switch_Initialization
  3697                           
  3698                           ;Main_B1.c: 25: RF_Initialization();
  3699  1572  319E  2633  3195   	fcall	_RF_Initialization
  3700                           
  3701                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3702  1575  3190  20DE  3195   	fcall	_CC2500_PowerOnInitial
  3703  1578                     l1613:	
  3704                           ;Main_B1.c: 33: ;;
  3705                           ;Main_B1.c: 37: ;;
  3706                           ;Main_B1.c: 41: ;;
  3707                           ;Main_B1.c: 45: ;;
  3708                           
  3709                           ;Main_B1.c: 27: ;;
  3710                           ;Main_B1.c: 29: while (1) {
  3711                           
  3712                           
  3713                           ;Main_B1.c: 60: }
  3714                           ;Main_B1.c: 96: if (myMain.T1_Timerout) {
  3715  1578  0021               	movlb	1	; select bank1
  3716  1579  1D20               	btfss	_myMain^(0+128),2
  3717  157A  2D78               	goto	l1613
  3718                           
  3719                           ;Main_B1.c: 97: myMain.T1_Timerout = 0;
  3720  157B  1120               	bcf	_myMain^(0+128),2
  3721                           
  3722                           ;Main_B1.c: 98: my_MainTime();
  3723  157C  3197  2751  3195   	fcall	_my_MainTime
  3724                           
  3725                           ;Main_B1.c: 99: WDT_Main();
  3726  157F  3190  207D  3195   	fcall	_WDT_Main
  3727                           
  3728                           ;Main_B1.c: 100: ;;
  3729                           ;Main_B1.c: 101: ;;
  3730                           ;Main_B1.c: 102: if (myMain.PowerON) {
  3731  1582  0021               	movlb	1	; select bank1
  3732  1583  1C20               	btfss	_myMain^(0+128),0
  3733  1584  2D78               	goto	l1613
  3734                           
  3735                           ;Main_B1.c: 103: Flash_Memory_Main();
  3736  1585  3192  2216  3195   	fcall	_Flash_Memory_Main
  3737                           
  3738                           ;Main_B1.c: 105: LED_Main();
  3739  1588  319F  278B  3195   	fcall	_LED_Main
  3740                           
  3741                           ;Main_B1.c: 106: Buzzer_Main();
  3742  158B  3196  2668  3195   	fcall	_Buzzer_Main
  3743                           
  3744                           ;Main_B1.c: 108: ;;
  3745                           ;Main_B1.c: 109: ;;
  3746                           ;Main_B1.c: 110: ;;
  3747                           ;Main_B1.c: 111: ;;
  3748                           ;Main_B1.c: 113: ;;
  3749                           ;Main_B1.c: 114: DimmerLights_Main();
  3750  158E  319F  272E  3195   	fcall	_DimmerLights_Main
  3751                           
  3752                           ;Main_B1.c: 115: Switch_Main();
  3753  1591  319E  26DC  3195   	fcall	_Switch_Main
  3754                           
  3755                           ;Main_B1.c: 116: ;;
  3756                           ;Main_B1.c: 117: ;;
  3757                           ;Main_B1.c: 119: RF_Main();
  3758  1594  319E  2636  3195   	fcall	_RF_Main
  3759                           
  3760                           ;Main_B1.c: 120: DelayOff_Main();
  3761  1597  319E  26B8  3195   	fcall	_DelayOff_Main
  3762                           
  3763                           ;Main_B1.c: 121: ;;
  3764  159A  2D78               	goto	l1613
  3765  159B                     __end_of_main:	
  3766                           ;Main_B1.c: 129: }
  3767                           ;Main_B1.c: 130: }
  3768                           ;Main_B1.c: 164: }
  3769                           ;Main_B1.c: 165: return (0);
  3770                           ;	Return value of _main is never used
  3771                           
  3772                           
  3773                           	psect	text1
  3774  1751                     __ptext1:	
  3775 ;; *************** function _my_MainTime *****************
  3776 ;; Defined at:
  3777 ;;		line 183 in file "../src/Main_B1.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;		None
  3782 ;; Return value:  Size  Location     Type
  3783 ;;		None               void
  3784 ;; Registers used:
  3785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;Total ram usage:        0 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    7
  3798 ;; This function calls:
  3799 ;;		_setBuz
  3800 ;;		_setRF_Enable
  3801 ;;		_setSw_Enable
  3802 ;; This function is called by:
  3803 ;;		_main
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _my_MainTime
  3809  1751                     _my_MainTime:	
  3810                           
  3811                           ;Main_B1.c: 185: if (myMain.PowerON == 0) {
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3815  1751  0021               	movlb	1	; select bank1
  3816  1752  1820               	btfsc	_myMain^(0+128),0
  3817  1753  2F7B               	goto	l9680
  3818                           
  3819                           ;Main_B1.c: 186: myMain.PowerCount++;
  3820  1754  3001               	movlw	1
  3821  1755  07A2               	addwf	(_myMain^(0+128)+2),f
  3822  1756  3000               	movlw	0
  3823  1757  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3824                           
  3825                           ;Main_B1.c: 187: if (myMain.PowerCount == 150)
  3826  1758  3002               	movlw	2
  3827  1759  3EA0               	addlw	_myMain& (0+255)
  3828  175A  0086               	movwf	6
  3829  175B  0187               	clrf	7
  3830  175C  3F40               	moviw [0]fsr1
  3831  175D  3A96               	xorlw	150
  3832  175E  1D03               	skipz
  3833  175F  2F62               	goto	u10425
  3834  1760  3F41               	moviw [1]fsr1
  3835  1761  3A00               	xorlw	0
  3836  1762                     u10425:	
  3837  1762  1D03               	skipz
  3838  1763  2F93               	goto	l9690
  3839                           
  3840                           ;Main_B1.c: 188: {
  3841                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  3842  1764  01A2               	clrf	(_myMain^(0+128)+2)
  3843  1765  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3844                           
  3845                           ;Main_B1.c: 190: myMain.PowerON = 1;
  3846  1766  1420               	bsf	_myMain^(0+128),0
  3847                           
  3848                           ;Main_B1.c: 193: ;;
  3849                           ;Main_B1.c: 197: ;;
  3850                           ;Main_B1.c: 203: setBuz(3, 50);
  3851  1767  3032               	movlw	50
  3852  1768  0020               	movlb	0	; select bank0
  3853  1769  00A9               	movwf	setBuz@time
  3854  176A  3000               	movlw	0
  3855  176B  00AA               	movwf	setBuz@time+1
  3856  176C  3003               	movlw	3
  3857  176D  3197  27A7  3197   	fcall	_setBuz
  3858                           
  3859                           ;Main_B1.c: 204: myMain.SelfTest = 1;
  3860  1770  0021               	movlb	1	; select bank1
  3861  1771  17A0               	bsf	_myMain^(0+128),7
  3862                           
  3863                           ;Main_B1.c: 206: setSw_Enable(1);
  3864  1772  3001               	movlw	1
  3865  1773  3193  2348  3197   	fcall	_setSw_Enable
  3866                           
  3867                           ;Main_B1.c: 209: setRF_Enable(1);
  3868  1776  3001               	movlw	1
  3869  1777  319F  2702  3197   	fcall	_setRF_Enable
  3870                           
  3871                           ;Main_B1.c: 213: }
  3872                           ;Main_B1.c: 214: } else {
  3873  177A  2F93               	goto	l9690
  3874  177B                     l9680:	
  3875                           
  3876                           ;Main_B1.c: 222: myMain.Count1++;
  3877  177B  3001               	movlw	1
  3878  177C  0021               	movlb	1	; select bank1
  3879  177D  07A6               	addwf	(_myMain^(0+128)+6),f
  3880  177E  3000               	movlw	0
  3881  177F  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3882                           
  3883                           ;Main_B1.c: 223: if (myMain.Count1 == 100)
  3884  1780  3006               	movlw	6
  3885  1781  3EA0               	addlw	_myMain& (0+255)
  3886  1782  0086               	movwf	6
  3887  1783  0187               	clrf	7
  3888  1784  3F40               	moviw [0]fsr1
  3889  1785  3A64               	xorlw	100
  3890  1786  1D03               	skipz
  3891  1787  2F8A               	goto	u10435
  3892  1788  3F41               	moviw [1]fsr1
  3893  1789  3A00               	xorlw	0
  3894  178A                     u10435:	
  3895  178A  1D03               	skipz
  3896  178B  2F93               	goto	l9690
  3897                           
  3898                           ;Main_B1.c: 224: {
  3899                           ;Main_B1.c: 225: myMain.Count1 = 0;
  3900  178C  01A6               	clrf	(_myMain^(0+128)+6)
  3901  178D  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3902                           
  3903                           ;Main_B1.c: 237: if (myMain.Flag) {
  3904  178E  1E20               	btfss	_myMain^(0+128),4
  3905  178F  2F92               	goto	l1628
  3906                           
  3907                           ;Main_B1.c: 238: myMain.Flag = 0;
  3908  1790  1220               	bcf	_myMain^(0+128),4
  3909                           
  3910                           ;Main_B1.c: 247: } else {
  3911  1791  2F93               	goto	l9690
  3912  1792                     l1628:	
  3913                           
  3914                           ;Main_B1.c: 248: myMain.Flag = 1;
  3915  1792  1620               	bsf	_myMain^(0+128),4
  3916  1793                     l9690:	
  3917                           
  3918                           ;Main_B1.c: 257: }
  3919                           ;Main_B1.c: 258: }
  3920                           ;Main_B1.c: 260: }
  3921                           ;Main_B1.c: 262: myMain.Count2++;
  3922  1793  3001               	movlw	1
  3923  1794  0021               	movlb	1	; select bank1
  3924  1795  07A8               	addwf	(_myMain^(0+128)+8),f
  3925  1796  3000               	movlw	0
  3926  1797  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  3927                           
  3928                           ;Main_B1.c: 263: if (myMain.Count2 == 50) {
  3929  1798  3008               	movlw	8
  3930  1799  3EA0               	addlw	_myMain& (0+255)
  3931  179A  0086               	movwf	6
  3932  179B  0187               	clrf	7
  3933  179C  3F40               	moviw [0]fsr1
  3934  179D  3A32               	xorlw	50
  3935  179E  1D03               	skipz
  3936  179F  2FA2               	goto	u10455
  3937  17A0  3F41               	moviw [1]fsr1
  3938  17A1  3A00               	xorlw	0
  3939  17A2                     u10455:	
  3940  17A2  1D03               	skipz
  3941  17A3  0008               	return
  3942                           
  3943                           ;Main_B1.c: 264: myMain.Count2 = 0;
  3944  17A4  01A8               	clrf	(_myMain^(0+128)+8)
  3945  17A5  01A9               	clrf	((_myMain+1)^(0+128)+8)
  3946  17A6  0008               	return
  3947  17A7                     __end_of_my_MainTime:	
  3948                           
  3949                           	psect	text2
  3950  1348                     __ptext2:	
  3951 ;; *************** function _setSw_Enable *****************
  3952 ;; Defined at:
  3953 ;;		line 91 in file "../src/Switch_B1.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  command         1    wreg     unsigned char 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  command         1    2[BANK0 ] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;		None               void
  3960 ;; Registers used:
  3961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;Total ram usage:        1 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    6
  3974 ;; This function calls:
  3975 ;;		_SwPointSelect
  3976 ;; This function is called by:
  3977 ;;		_my_MainTime
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _setSw_Enable
  3983  1348                     _setSw_Enable:	
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3987                           ;setSw_Enable@command stored from wreg
  3988  1348  0020               	movlb	0	; select bank0
  3989  1349  00A2               	movwf	setSw_Enable@command
  3990                           
  3991                           ;Switch_B1.c: 94: SwPointSelect(1);
  3992  134A  3001               	movlw	1
  3993  134B  3191  21DA  3193   	fcall	_SwPointSelect
  3994                           
  3995                           ;Switch_B1.c: 95: Sw->Enable = command;
  3996  134E  0020               	movlb	0	; select bank0
  3997  134F  086C               	movf	_Sw,w
  3998  1350  0086               	movwf	6
  3999  1351  3001               	movlw	1	; select bank2/3
  4000  1352  0087               	movwf	7
  4001  1353  0822               	movf	setSw_Enable@command,w
  4002  1354  1001               	bcf	1,0
  4003  1355  1D03               	skipz
  4004  1356  1401               	bsf	1,0
  4005                           
  4006                           ;Switch_B1.c: 99: SwPointSelect(2);
  4007  1357  3002               	movlw	2
  4008  1358  3191  21DA  3193   	fcall	_SwPointSelect
  4009                           
  4010                           ;Switch_B1.c: 100: Sw->Enable = command;
  4011  135B  0020               	movlb	0	; select bank0
  4012  135C  086C               	movf	_Sw,w
  4013  135D  0086               	movwf	6
  4014  135E  3001               	movlw	1	; select bank2/3
  4015  135F  0087               	movwf	7
  4016  1360  0822               	movf	setSw_Enable@command,w
  4017  1361  1001               	bcf	1,0
  4018  1362  1D03               	skipz
  4019  1363  1401               	bsf	1,0
  4020                           
  4021                           ;Switch_B1.c: 104: SwPointSelect(3);
  4022  1364  3003               	movlw	3
  4023  1365  3191  21DA         	fcall	_SwPointSelect
  4024                           
  4025                           ;Switch_B1.c: 105: Sw->Enable = command;
  4026  1367  0020               	movlb	0	; select bank0
  4027  1368  086C               	movf	_Sw,w
  4028  1369  0086               	movwf	6
  4029  136A  3001               	movlw	1	; select bank2/3
  4030  136B  0087               	movwf	7
  4031  136C  0822               	movf	setSw_Enable@command,w
  4032  136D  1001               	bcf	1,0
  4033  136E  1D03               	skipz
  4034  136F  1401               	bsf	1,0
  4035  1370  0008               	return
  4036  1371                     __end_of_setSw_Enable:	
  4037                           
  4038                           	psect	text3
  4039  1F02                     __ptext3:	
  4040 ;; *************** function _setRF_Enable *****************
  4041 ;; Defined at:
  4042 ;;		line 227 in file "../src/RF_Control_B1.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  command         1    wreg     unsigned char 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  command         1    0[BANK0 ] unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, status,2
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;Total ram usage:        1 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    5
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_my_MainTime
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _setRF_Enable
  4072  1F02                     _setRF_Enable:	
  4073                           
  4074                           ;incstack = 0
  4075                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4076                           ;setRF_Enable@command stored from wreg
  4077  1F02  0020               	movlb	0	; select bank0
  4078  1F03  00A0               	movwf	setRF_Enable@command
  4079                           
  4080                           ;RF_Control_B1.c: 228: RF1.Enable = command;
  4081  1F04  0820               	movf	setRF_Enable@command,w
  4082  1F05  0021               	movlb	1	; select bank1
  4083  1F06  103F               	bcf	_RF1^(0+128),0
  4084  1F07  1D03               	skipz
  4085  1F08  143F               	bsf	_RF1^(0+128),0
  4086                           
  4087                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
  4088  1F09  133F               	bcf	_RF1^(0+128),6
  4089                           
  4090                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
  4091  1F0A  113F               	bcf	_RF1^(0+128),2
  4092                           
  4093                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
  4094  1F0B  11BF               	bcf	_RF1^(0+128),3
  4095                           
  4096                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
  4097  1F0C  10BF               	bcf	_RF1^(0+128),1
  4098                           
  4099                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
  4100  1F0D  01C8               	clrf	(_RF1^(0+128)+9)
  4101                           
  4102                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
  4103  1F0E  12BF               	bcf	_RF1^(0+128),5
  4104  1F0F  0008               	return
  4105  1F10                     __end_of_setRF_Enable:	
  4106                           
  4107                           	psect	text4
  4108  1F4C                     __ptext4:	
  4109 ;; *************** function _myMain_Initialization *****************
  4110 ;; Defined at:
  4111 ;;		line 171 in file "../src/Main_B1.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;		None
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;		None
  4116 ;; Return value:  Size  Location     Type
  4117 ;;		None               void
  4118 ;; Registers used:
  4119 ;;		wreg, fsr1l, fsr1h
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;Total ram usage:        1 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    5
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_main
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _myMain_Initialization
  4141  1F4C                     _myMain_Initialization:	
  4142                           
  4143                           ;Main_B1.c: 173: product = &_product;
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4147  1F4C  3020               	movlw	__product& (0+255)
  4148  1F4D  0020               	movlb	0	; select bank0
  4149  1F4E  00A0               	movwf	??_myMain_Initialization
  4150  1F4F  0820               	movf	??_myMain_Initialization,w
  4151  1F50  00ED               	movwf	_product
  4152                           
  4153                           ;Main_B1.c: 174: product->Data[20] = 211;
  4154  1F51  30D3               	movlw	211
  4155  1F52  00A0               	movwf	??_myMain_Initialization
  4156  1F53  086D               	movf	_product,w
  4157  1F54  3E14               	addlw	20
  4158  1F55  0086               	movwf	6
  4159  1F56  3002               	movlw	2	; select bank4/5
  4160  1F57  0087               	movwf	7
  4161  1F58  0820               	movf	??_myMain_Initialization,w
  4162  1F59  0081               	movwf	1
  4163  1F5A  0008               	return
  4164  1F5B                     __end_of_myMain_Initialization:	
  4165                           
  4166                           	psect	text5
  4167  107D                     __ptext5:	
  4168 ;; *************** function _WDT_Main *****************
  4169 ;; Defined at:
  4170 ;;		line 1019 in file "../src/MCU_B1.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;Total ram usage:        1 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    6
  4191 ;; This function calls:
  4192 ;;		_WDT_Clearing
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _WDT_Main
  4200  107D                     _WDT_Main:	
  4201                           
  4202                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4206  107D  0021               	movlb	1	; select bank1
  4207  107E  1C50               	btfss	_WDT^(0+128),0
  4208  107F  0008               	return
  4209                           
  4210                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4211  1080  3001               	movlw	1
  4212  1081  02D1               	subwf	(_WDT^(0+128)+1),f
  4213  1082  0851               	movf	(_WDT^(0+128)+1),w
  4214  1083  3AFF               	xorlw	255
  4215  1084  1903               	skipnz
  4216  1085  0008               	return
  4217                           
  4218                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4219  1086  3064               	movlw	100
  4220  1087  0020               	movlb	0	; select bank0
  4221  1088  00A0               	movwf	??_WDT_Main
  4222  1089  0820               	movf	??_WDT_Main,w
  4223  108A  0021               	movlb	1	; select bank1
  4224  108B  00D1               	movwf	(_WDT^(0+128)+1)
  4225                           
  4226                           ;MCU_B1.c: 1023: WDT_Clearing();
  4227  108C  3180  2002         	fcall	_WDT_Clearing
  4228  108E  0008               	return
  4229  108F                     __end_of_WDT_Main:	
  4230                           
  4231                           	psect	text6
  4232  0002                     __ptext6:	
  4233 ;; *************** function _WDT_Clearing *****************
  4234 ;; Defined at:
  4235 ;;		line 1029 in file "../src/MCU_B1.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;		None               void
  4242 ;; Registers used:
  4243 ;;		None
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    5
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_WDT_Main
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _WDT_Clearing
  4265  0002                     _WDT_Clearing:	
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _WDT_Clearing: []
  4269  0002  0064               	clrwdt	;# 
  4270  0003  0008               	return
  4271  0004                     __end_of_WDT_Clearing:	
  4272                           
  4273                           	psect	text7
  4274  1EDC                     __ptext7:	
  4275 ;; *************** function _Switch_Main *****************
  4276 ;; Defined at:
  4277 ;;		line 67 in file "../src/Switch_B1.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;		None               void
  4284 ;; Registers used:
  4285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;Total ram usage:        0 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:   11
  4298 ;; This function calls:
  4299 ;;		_setSw_Main
  4300 ;; This function is called by:
  4301 ;;		_main
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           
  4306                           ;psect for function _Switch_Main
  4307  1EDC                     _Switch_Main:	
  4308                           
  4309                           ;Switch_B1.c: 69: setSw_Main(1);
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4313  1EDC  3001               	movlw	1
  4314  1EDD  3182  2210  319E   	fcall	_setSw_Main
  4315                           
  4316                           ;Switch_B1.c: 73: setSw_Main(2);
  4317  1EE0  3002               	movlw	2
  4318  1EE1  3182  2210  319E   	fcall	_setSw_Main
  4319                           
  4320                           ;Switch_B1.c: 77: setSw_Main(3);
  4321  1EE4  3003               	movlw	3
  4322  1EE5  3182  2210         	fcall	_setSw_Main
  4323  1EE7  0008               	return
  4324  1EE8                     __end_of_Switch_Main:	
  4325                           
  4326                           	psect	text8
  4327  0210                     __ptext8:	
  4328 ;; *************** function _setSw_Main *****************
  4329 ;; Defined at:
  4330 ;;		line 117 in file "../src/Switch_B1.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  sw              1    wreg     unsigned char 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  sw              1   74[BANK0 ] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;		None               void
  4337 ;; Registers used:
  4338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;Total ram usage:        3 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:   10
  4351 ;; This function calls:
  4352 ;;		_SwPointSelect
  4353 ;;		_Sw_DimmerAdjFunc
  4354 ;;		_Sw_DimmerOffFunc
  4355 ;;		_Sw_DimmerOnFunc
  4356 ;;		_setBuz
  4357 ;;		_setRF_Learn
  4358 ;; This function is called by:
  4359 ;;		_Switch_Main
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _setSw_Main
  4365  0210                     _setSw_Main:	
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4369                           ;setSw_Main@sw stored from wreg
  4370  0210  0020               	movlb	0	; select bank0
  4371  0211  00EA               	movwf	setSw_Main@sw
  4372                           
  4373                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4374  0212  086A               	movf	setSw_Main@sw,w
  4375  0213  3191  21DA  3182   	fcall	_SwPointSelect
  4376                           
  4377                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4378  0216  0020               	movlb	0	; select bank0
  4379  0217  086C               	movf	_Sw,w
  4380  0218  0086               	movwf	6
  4381  0219  3001               	movlw	1	; select bank2/3
  4382  021A  0087               	movwf	7
  4383  021B  1C01               	btfss	1,0
  4384  021C  0008               	return
  4385                           
  4386                           ;Switch_B1.c: 121: if (sw == 1) {
  4387  021D  086A               	movf	setSw_Main@sw,w
  4388  021E  3A01               	xorlw	1
  4389  021F  1D03               	skipz
  4390  0220  2A29               	goto	l9436
  4391                           
  4392                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4393  0221  086C               	movf	_Sw,w
  4394  0222  0086               	movwf	6
  4395  0223  3001               	movlw	1	; select bank2/3
  4396  0224  0087               	movwf	7
  4397  0225  1081               	bcf	1,1
  4398  0226  180C               	btfsc	12,0	;volatile
  4399  0227  1481               	bsf	1,1
  4400                           
  4401                           ;Switch_B1.c: 123: } else if (sw == 2) {
  4402  0228  2A42               	goto	l2690
  4403  0229                     l9436:	
  4404  0229  0020               	movlb	0	; select bank0
  4405  022A  086A               	movf	setSw_Main@sw,w
  4406  022B  3A02               	xorlw	2
  4407  022C  1D03               	skipz
  4408  022D  2A36               	goto	l9440
  4409                           
  4410                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4411  022E  086C               	movf	_Sw,w
  4412  022F  0086               	movwf	6
  4413  0230  3001               	movlw	1	; select bank2/3
  4414  0231  0087               	movwf	7
  4415  0232  1081               	bcf	1,1
  4416  0233  1B0C               	btfsc	12,6	;volatile
  4417  0234  1481               	bsf	1,1
  4418                           
  4419                           ;Switch_B1.c: 125: } else if (sw == 3) {
  4420  0235  2A42               	goto	l2690
  4421  0236                     l9440:	
  4422  0236  0020               	movlb	0	; select bank0
  4423  0237  086A               	movf	setSw_Main@sw,w
  4424  0238  3A03               	xorlw	3
  4425  0239  1D03               	skipz
  4426  023A  2A42               	goto	l2690
  4427                           
  4428                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4429  023B  086C               	movf	_Sw,w
  4430  023C  0086               	movwf	6
  4431  023D  3001               	movlw	1	; select bank2/3
  4432  023E  0087               	movwf	7
  4433  023F  1081               	bcf	1,1
  4434  0240  1A0C               	btfsc	12,4	;volatile
  4435  0241  1481               	bsf	1,1
  4436  0242                     l2690:	
  4437                           
  4438                           ;Switch_B1.c: 127: }
  4439                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4440  0242  0020               	movlb	0	; select bank0
  4441  0243  086C               	movf	_Sw,w
  4442  0244  0086               	movwf	6
  4443  0245  3001               	movlw	1	; select bank2/3
  4444  0246  0087               	movwf	7
  4445  0247  1C81               	btfss	1,1
  4446  0248  2B0D               	goto	l9490
  4447                           
  4448                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4449  0249  086C               	movf	_Sw,w
  4450  024A  0086               	movwf	6
  4451  024B  3001               	movlw	1	; select bank2/3
  4452  024C  0087               	movwf	7
  4453  024D  1901               	btfsc	1,2
  4454  024E  2A70               	goto	l9456
  4455                           
  4456                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4457  024F  3001               	movlw	1
  4458  0250  00E8               	movwf	??_setSw_Main
  4459  0251  086C               	movf	_Sw,w
  4460  0252  3E02               	addlw	2
  4461  0253  0086               	movwf	6
  4462  0254  3001               	movlw	1	; select bank2/3
  4463  0255  0087               	movwf	7
  4464  0256  0868               	movf	??_setSw_Main,w
  4465  0257  0781               	addwf	1,f
  4466                           
  4467                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4468  0258  086C               	movf	_Sw,w
  4469  0259  3E02               	addlw	2
  4470  025A  0086               	movwf	6
  4471  025B  3001               	movlw	1	; select bank2/3
  4472  025C  0087               	movwf	7
  4473  025D  3005               	movlw	5
  4474  025E  0201               	subwf	1,w
  4475  025F  1C03               	skipc
  4476  0260  0008               	return
  4477                           
  4478                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4479  0261  086C               	movf	_Sw,w
  4480  0262  3E02               	addlw	2
  4481  0263  0086               	movwf	6
  4482  0264  3001               	movlw	1	; select bank2/3
  4483  0265  0087               	movwf	7
  4484  0266  0181               	clrf	1
  4485                           
  4486                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4487  0267  086C               	movf	_Sw,w
  4488  0268  0086               	movwf	6
  4489  0269  3001               	movlw	1	; select bank2/3
  4490  026A  0087               	movwf	7
  4491  026B  1501               	bsf	1,2
  4492                           
  4493                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4494  026C  086A               	movf	setSw_Main@sw,w
  4495  026D  318D  2511         	fcall	_Sw_DimmerOnFunc
  4496                           
  4497                           ;Switch_B1.c: 173: }
  4498                           ;Switch_B1.c: 174: } else {
  4499  026F  0008               	return
  4500  0270                     l9456:	
  4501                           
  4502                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4503  0270  0020               	movlb	0	; select bank0
  4504  0271  086C               	movf	_Sw,w
  4505  0272  0086               	movwf	6
  4506  0273  3001               	movlw	1	; select bank2/3
  4507  0274  0087               	movwf	7
  4508  0275  1981               	btfsc	1,3
  4509  0276  2A9D               	goto	l9466
  4510                           
  4511                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4512  0277  086C               	movf	_Sw,w
  4513  0278  3E03               	addlw	3
  4514  0279  0086               	movwf	6
  4515  027A  3001               	movlw	1	; select bank2/3
  4516  027B  0087               	movwf	7
  4517  027C  3001               	movlw	1
  4518  027D  0781               	addwf	1,f
  4519  027E  3141               	addfsr 1,1
  4520  027F  1803               	skipnc
  4521  0280  0A81               	incf	1,f
  4522                           
  4523                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4524  0281  086C               	movf	_Sw,w
  4525  0282  3E03               	addlw	3
  4526  0283  0086               	movwf	6
  4527  0284  3001               	movlw	1	; select bank2/3
  4528  0285  0087               	movwf	7
  4529  0286  3F40               	moviw [0]fsr1
  4530  0287  00E8               	movwf	??_setSw_Main
  4531  0288  3F41               	moviw [1]fsr1
  4532  0289  00E9               	movwf	??_setSw_Main+1
  4533  028A  3000               	movlw	0
  4534  028B  0269               	subwf	??_setSw_Main+1,w
  4535  028C  3096               	movlw	150
  4536  028D  1903               	skipnz
  4537  028E  0268               	subwf	??_setSw_Main,w
  4538  028F  1C03               	skipc
  4539  0290  0008               	return
  4540                           
  4541                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4542  0291  086C               	movf	_Sw,w
  4543  0292  3E03               	addlw	3
  4544  0293  0086               	movwf	6
  4545  0294  3001               	movlw	1	; select bank2/3
  4546  0295  0087               	movwf	7
  4547  0296  3000               	movlw	0
  4548  0297  3FC0               	movwi [0]fsr1
  4549  0298  3FC1               	movwi [1]fsr1
  4550                           
  4551                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4552  0299  086A               	movf	setSw_Main@sw,w
  4553  029A  3188  20DC         	fcall	_Sw_DimmerAdjFunc
  4554                           
  4555                           ;Switch_B1.c: 184: }
  4556                           ;Switch_B1.c: 185: } else {
  4557  029C  0008               	return
  4558  029D                     l9466:	
  4559                           
  4560                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4561  029D  0020               	movlb	0	; select bank0
  4562  029E  086C               	movf	_Sw,w
  4563  029F  0086               	movwf	6
  4564  02A0  3001               	movlw	1	; select bank2/3
  4565  02A1  0087               	movwf	7
  4566  02A2  1A01               	btfsc	1,4
  4567  02A3  2ADB               	goto	l9480
  4568                           
  4569                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4570  02A4  086C               	movf	_Sw,w
  4571  02A5  3E05               	addlw	5
  4572  02A6  0086               	movwf	6
  4573  02A7  3001               	movlw	1	; select bank2/3
  4574  02A8  0087               	movwf	7
  4575  02A9  3001               	movlw	1
  4576  02AA  0781               	addwf	1,f
  4577  02AB  3141               	addfsr 1,1
  4578  02AC  1803               	skipnc
  4579  02AD  0A81               	incf	1,f
  4580                           
  4581                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4582  02AE  086C               	movf	_Sw,w
  4583  02AF  3E05               	addlw	5
  4584  02B0  0086               	movwf	6
  4585  02B1  3001               	movlw	1	; select bank2/3
  4586  02B2  0087               	movwf	7
  4587  02B3  3F40               	moviw [0]fsr1
  4588  02B4  00E8               	movwf	??_setSw_Main
  4589  02B5  3F41               	moviw [1]fsr1
  4590  02B6  00E9               	movwf	??_setSw_Main+1
  4591  02B7  3000               	movlw	0
  4592  02B8  0269               	subwf	??_setSw_Main+1,w
  4593  02B9  3096               	movlw	150
  4594  02BA  1903               	skipnz
  4595  02BB  0268               	subwf	??_setSw_Main,w
  4596  02BC  1C03               	skipc
  4597  02BD  0008               	return
  4598                           
  4599                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4600  02BE  086C               	movf	_Sw,w
  4601  02BF  3E05               	addlw	5
  4602  02C0  0086               	movwf	6
  4603  02C1  3001               	movlw	1	; select bank2/3
  4604  02C2  0087               	movwf	7
  4605  02C3  3000               	movlw	0
  4606  02C4  3FC0               	movwi [0]fsr1
  4607  02C5  3FC1               	movwi [1]fsr1
  4608                           
  4609                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4610  02C6  086C               	movf	_Sw,w
  4611  02C7  0086               	movwf	6
  4612  02C8  3001               	movlw	1	; select bank2/3
  4613  02C9  0087               	movwf	7
  4614  02CA  1601               	bsf	1,4
  4615                           
  4616                           ;Switch_B1.c: 193: setRF_Learn(1);
  4617  02CB  3001               	movlw	1
  4618  02CC  319E  2663  3182   	fcall	_setRF_Learn
  4619                           
  4620                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4621  02CF  0021               	movlb	1	; select bank1
  4622  02D0  1C21               	btfss	(_myMain^(0+128)+1),0
  4623  02D1  0008               	return
  4624                           
  4625                           ;Switch_B1.c: 196: setBuz(2, 100);
  4626  02D2  3064               	movlw	100
  4627  02D3  0020               	movlb	0	; select bank0
  4628  02D4  00A9               	movwf	setBuz@time
  4629  02D5  3000               	movlw	0
  4630  02D6  00AA               	movwf	setBuz@time+1
  4631  02D7  3002               	movlw	2
  4632  02D8  3197  27A7         	fcall	_setBuz
  4633                           
  4634                           ;Switch_B1.c: 197: }
  4635                           ;Switch_B1.c: 199: }
  4636                           ;Switch_B1.c: 200: } else {
  4637  02DA  0008               	return
  4638  02DB                     l9480:	
  4639                           
  4640                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4641  02DB  0020               	movlb	0	; select bank0
  4642  02DC  086C               	movf	_Sw,w
  4643  02DD  0086               	movwf	6
  4644  02DE  3001               	movlw	1	; select bank2/3
  4645  02DF  0087               	movwf	7
  4646  02E0  1A81               	btfsc	1,5
  4647  02E1  0008               	return
  4648                           
  4649                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4650  02E2  086C               	movf	_Sw,w
  4651  02E3  3E07               	addlw	7
  4652  02E4  0086               	movwf	6
  4653  02E5  3001               	movlw	1	; select bank2/3
  4654  02E6  0087               	movwf	7
  4655  02E7  3001               	movlw	1
  4656  02E8  0781               	addwf	1,f
  4657  02E9  3141               	addfsr 1,1
  4658  02EA  1803               	skipnc
  4659  02EB  0A81               	incf	1,f
  4660                           
  4661                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4662  02EC  086C               	movf	_Sw,w
  4663  02ED  3E07               	addlw	7
  4664  02EE  0086               	movwf	6
  4665  02EF  3001               	movlw	1	; select bank2/3
  4666  02F0  0087               	movwf	7
  4667  02F1  3F40               	moviw [0]fsr1
  4668  02F2  00E8               	movwf	??_setSw_Main
  4669  02F3  3F41               	moviw [1]fsr1
  4670  02F4  00E9               	movwf	??_setSw_Main+1
  4671  02F5  3001               	movlw	1
  4672  02F6  0269               	subwf	??_setSw_Main+1,w
  4673  02F7  302C               	movlw	44
  4674  02F8  1903               	skipnz
  4675  02F9  0268               	subwf	??_setSw_Main,w
  4676  02FA  1C03               	skipc
  4677  02FB  0008               	return
  4678                           
  4679                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4680  02FC  086C               	movf	_Sw,w
  4681  02FD  3E07               	addlw	7
  4682  02FE  0086               	movwf	6
  4683  02FF  3001               	movlw	1	; select bank2/3
  4684  0300  0087               	movwf	7
  4685  0301  3000               	movlw	0
  4686  0302  3FC0               	movwi [0]fsr1
  4687  0303  3FC1               	movwi [1]fsr1
  4688                           
  4689                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4690  0304  086C               	movf	_Sw,w
  4691  0305  0086               	movwf	6
  4692  0306  3001               	movlw	1	; select bank2/3
  4693  0307  0087               	movwf	7
  4694  0308  1681               	bsf	1,5
  4695                           
  4696                           ;Switch_B1.c: 208: setRF_Learn(0);
  4697  0309  3000               	movlw	0
  4698  030A  319E  2663         	fcall	_setRF_Learn
  4699                           
  4700                           ;Switch_B1.c: 211: }
  4701                           ;Switch_B1.c: 212: }
  4702                           ;Switch_B1.c: 213: }
  4703                           ;Switch_B1.c: 214: }
  4704                           ;Switch_B1.c: 215: }
  4705                           ;Switch_B1.c: 216: } else {
  4706  030C  0008               	return
  4707  030D                     l9490:	
  4708                           
  4709                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4710  030D  0020               	movlb	0	; select bank0
  4711  030E  086C               	movf	_Sw,w
  4712  030F  0086               	movwf	6
  4713  0310  3001               	movlw	1	; select bank2/3
  4714  0311  0087               	movwf	7
  4715  0312  1D01               	btfss	1,2
  4716  0313  0008               	return
  4717                           
  4718                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4719  0314  3001               	movlw	1
  4720  0315  00E8               	movwf	??_setSw_Main
  4721  0316  086C               	movf	_Sw,w
  4722  0317  3E02               	addlw	2
  4723  0318  0086               	movwf	6
  4724  0319  3001               	movlw	1	; select bank2/3
  4725  031A  0087               	movwf	7
  4726  031B  0868               	movf	??_setSw_Main,w
  4727  031C  0781               	addwf	1,f
  4728                           
  4729                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4730  031D  086C               	movf	_Sw,w
  4731  031E  3E02               	addlw	2
  4732  031F  0086               	movwf	6
  4733  0320  3001               	movlw	1	; select bank2/3
  4734  0321  0087               	movwf	7
  4735  0322  3005               	movlw	5
  4736  0323  0201               	subwf	1,w
  4737  0324  1C03               	skipc
  4738  0325  0008               	return
  4739                           
  4740                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4741  0326  086C               	movf	_Sw,w
  4742  0327  3E02               	addlw	2
  4743  0328  0086               	movwf	6
  4744  0329  3001               	movlw	1	; select bank2/3
  4745  032A  0087               	movwf	7
  4746  032B  0181               	clrf	1
  4747                           
  4748                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4749  032C  086C               	movf	_Sw,w
  4750  032D  0086               	movwf	6
  4751  032E  3001               	movlw	1	; select bank2/3
  4752  032F  0087               	movwf	7
  4753  0330  1101               	bcf	1,2
  4754                           
  4755                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4756  0331  086C               	movf	_Sw,w
  4757  0332  3E03               	addlw	3
  4758  0333  0086               	movwf	6
  4759  0334  3001               	movlw	1	; select bank2/3
  4760  0335  0087               	movwf	7
  4761  0336  3000               	movlw	0
  4762  0337  3FC0               	movwi [0]fsr1
  4763  0338  3FC1               	movwi [1]fsr1
  4764                           
  4765                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4766  0339  086C               	movf	_Sw,w
  4767  033A  0086               	movwf	6
  4768  033B  3001               	movlw	1	; select bank2/3
  4769  033C  0087               	movwf	7
  4770  033D  1181               	bcf	1,3
  4771                           
  4772                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4773  033E  086C               	movf	_Sw,w
  4774  033F  3E05               	addlw	5
  4775  0340  0086               	movwf	6
  4776  0341  3001               	movlw	1	; select bank2/3
  4777  0342  0087               	movwf	7
  4778  0343  3000               	movlw	0
  4779  0344  3FC0               	movwi [0]fsr1
  4780  0345  3FC1               	movwi [1]fsr1
  4781                           
  4782                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4783  0346  086C               	movf	_Sw,w
  4784  0347  0086               	movwf	6
  4785  0348  3001               	movlw	1	; select bank2/3
  4786  0349  0087               	movwf	7
  4787  034A  1201               	bcf	1,4
  4788                           
  4789                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4790  034B  086C               	movf	_Sw,w
  4791  034C  3E07               	addlw	7
  4792  034D  0086               	movwf	6
  4793  034E  3001               	movlw	1	; select bank2/3
  4794  034F  0087               	movwf	7
  4795  0350  3000               	movlw	0
  4796  0351  3FC0               	movwi [0]fsr1
  4797  0352  3FC1               	movwi [1]fsr1
  4798                           
  4799                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4800  0353  086C               	movf	_Sw,w
  4801  0354  0086               	movwf	6
  4802  0355  3001               	movlw	1	; select bank2/3
  4803  0356  0087               	movwf	7
  4804  0357  1281               	bcf	1,5
  4805                           
  4806                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4807  0358  086A               	movf	setSw_Main@sw,w
  4808  0359  318B  2342  3182   	fcall	_Sw_DimmerOffFunc
  4809                           
  4810                           ;Switch_B1.c: 232: setRF_Learn(0);
  4811  035C  3000               	movlw	0
  4812  035D  319E  2663         	fcall	_setRF_Learn
  4813  035F  0008               	return
  4814  0360                     __end_of_setSw_Main:	
  4815                           
  4816                           	psect	text9
  4817  1E63                     __ptext9:	
  4818 ;; *************** function _setRF_Learn *****************
  4819 ;; Defined at:
  4820 ;;		line 23 in file "../src/RF_Control_B1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  command         1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  command         1    0[BANK0 ] unsigned char 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;		None               void
  4827 ;; Registers used:
  4828 ;;		wreg
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;Total ram usage:        1 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    5
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_setSw_Main
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _setRF_Learn
  4850  1E63                     _setRF_Learn:	
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _setRF_Learn: [wreg]
  4854                           ;setRF_Learn@command stored from wreg
  4855  1E63  0020               	movlb	0	; select bank0
  4856  1E64  00A0               	movwf	setRF_Learn@command
  4857                           
  4858                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4859  1E65  0820               	movf	setRF_Learn@command,w
  4860  1E66  0021               	movlb	1	; select bank1
  4861  1E67  133F               	bcf	_RF1^(0+128),6
  4862  1E68  1D03               	skipz
  4863  1E69  173F               	bsf	_RF1^(0+128),6
  4864  1E6A  0008               	return
  4865  1E6B                     __end_of_setRF_Learn:	
  4866                           
  4867                           	psect	text10
  4868  0D11                     __ptext10:	
  4869 ;; *************** function _Sw_DimmerOnFunc *****************
  4870 ;; Defined at:
  4871 ;;		line 241 in file "../src/Switch_B1.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  sw              1    wreg     unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  sw              1   71[BANK0 ] unsigned char 
  4876 ;;  Idle            1   70[BANK0 ] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;		None               void
  4879 ;; Registers used:
  4880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;Total ram usage:        6 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    9
  4893 ;; This function calls:
  4894 ;;		_setBuz
  4895 ;;		_setDimmerLights_Switch
  4896 ;;		_setDimmerLights_Trigger
  4897 ;;		_setRFSW_Status
  4898 ;;		_setRF_DimmerLights
  4899 ;;		_setTxData
  4900 ;; This function is called by:
  4901 ;;		_setSw_Main
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           
  4906                           ;psect for function _Sw_DimmerOnFunc
  4907  0D11                     _Sw_DimmerOnFunc:	
  4908                           
  4909                           ;incstack = 0
  4910                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4911                           ;Sw_DimmerOnFunc@sw stored from wreg
  4912  0D11  0020               	movlb	0	; select bank0
  4913  0D12  00E7               	movwf	Sw_DimmerOnFunc@sw
  4914                           
  4915                           ;Switch_B1.c: 242: char Idle = 1;
  4916  0D13  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4917  0D14  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4918                           
  4919                           ;Switch_B1.c: 246: if (sw == 1) {
  4920  0D15  0867               	movf	Sw_DimmerOnFunc@sw,w
  4921  0D16  3A01               	xorlw	1
  4922  0D17  1D03               	skipz
  4923  0D18  2D24               	goto	l8872
  4924                           
  4925                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4926  0D19  01E3               	clrf	_Sw_DimmerOnFunc$6039
  4927  0D1A  0022               	movlb	2	; select bank2
  4928  0D1B  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  4929  0D1C  19DB               	btfsc	(_DimmerLights3^(0+256)+8),3
  4930  0D1D  2D21               	goto	l8870
  4931  0D1E  0020               	movlb	0	; select bank0
  4932  0D1F  01E3               	clrf	_Sw_DimmerOnFunc$6039
  4933  0D20  0AE3               	incf	_Sw_DimmerOnFunc$6039,f
  4934  0D21                     l8870:	
  4935  0D21  0020               	movlb	0	; select bank0
  4936  0D22  0863               	movf	_Sw_DimmerOnFunc$6039,w
  4937  0D23  2D41               	goto	L2
  4938  0D24                     l8872:	
  4939                           ;Switch_B1.c: 248: } else if (sw == 2) {
  4940                           
  4941  0D24  0867               	movf	Sw_DimmerOnFunc@sw,w
  4942  0D25  3A02               	xorlw	2
  4943  0D26  1D03               	skipz
  4944  0D27  2D33               	goto	l8884
  4945                           
  4946                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4947  0D28  01E4               	clrf	_Sw_DimmerOnFunc$6040
  4948  0D29  0022               	movlb	2	; select bank2
  4949  0D2A  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  4950  0D2B  19DB               	btfsc	(_DimmerLights3^(0+256)+8),3
  4951  0D2C  2D30               	goto	l8882
  4952  0D2D  0020               	movlb	0	; select bank0
  4953  0D2E  01E4               	clrf	_Sw_DimmerOnFunc$6040
  4954  0D2F  0AE4               	incf	_Sw_DimmerOnFunc$6040,f
  4955  0D30                     l8882:	
  4956  0D30  0020               	movlb	0	; select bank0
  4957  0D31  0864               	movf	_Sw_DimmerOnFunc$6040,w
  4958  0D32  2D41               	goto	L2
  4959  0D33                     l8884:	
  4960                           ;Switch_B1.c: 250: } else if (sw == 3) {
  4961                           
  4962  0D33  0867               	movf	Sw_DimmerOnFunc@sw,w
  4963  0D34  3A03               	xorlw	3
  4964  0D35  1D03               	skipz
  4965  0D36  2D44               	goto	l2716
  4966                           
  4967                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  4968  0D37  01E5               	clrf	_Sw_DimmerOnFunc$6041
  4969  0D38  0022               	movlb	2	; select bank2
  4970  0D39  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  4971  0D3A  19CC               	btfsc	(_DimmerLights2^(0+256)+8),3
  4972  0D3B  2D3F               	goto	l8894
  4973  0D3C  0020               	movlb	0	; select bank0
  4974  0D3D  01E5               	clrf	_Sw_DimmerOnFunc$6041
  4975  0D3E  0AE5               	incf	_Sw_DimmerOnFunc$6041,f
  4976  0D3F                     l8894:	
  4977  0D3F  0020               	movlb	0	; select bank0
  4978  0D40  0865               	movf	_Sw_DimmerOnFunc$6041,w
  4979  0D41                     L2:	
  4980  0D41  00E2               	movwf	??_Sw_DimmerOnFunc
  4981  0D42  0862               	movf	??_Sw_DimmerOnFunc,w
  4982  0D43  00E6               	movwf	Sw_DimmerOnFunc@Idle
  4983  0D44                     l2716:	
  4984                           
  4985                           ;Switch_B1.c: 252: }
  4986                           ;Switch_B1.c: 263: if (Idle == 1) {
  4987  0D44  0866               	movf	Sw_DimmerOnFunc@Idle,w
  4988  0D45  3A01               	xorlw	1
  4989  0D46  1D03               	skipz
  4990  0D47  0008               	return
  4991                           
  4992                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4993  0D48  086C               	movf	_Sw,w
  4994  0D49  0086               	movwf	6
  4995  0D4A  3001               	movlw	1	; select bank2/3
  4996  0D4B  0087               	movwf	7
  4997  0D4C  1781               	bsf	1,7
  4998                           
  4999                           ;Switch_B1.c: 265: setBuz(1, 100);
  5000  0D4D  3064               	movlw	100
  5001  0D4E  00A9               	movwf	setBuz@time
  5002  0D4F  3000               	movlw	0
  5003  0D50  00AA               	movwf	setBuz@time+1
  5004  0D51  3001               	movlw	1
  5005  0D52  3197  27A7  318D   	fcall	_setBuz
  5006                           
  5007                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5008  0D55  0020               	movlb	0	; select bank0
  5009  0D56  086C               	movf	_Sw,w
  5010  0D57  0086               	movwf	6
  5011  0D58  3001               	movlw	1	; select bank2/3
  5012  0D59  0087               	movwf	7
  5013  0D5A  1B01               	btfsc	1,6
  5014  0D5B  2D85               	goto	l8914
  5015                           
  5016                           ;Switch_B1.c: 267: Sw->Status = 1;
  5017  0D5C  086C               	movf	_Sw,w
  5018  0D5D  0086               	movwf	6
  5019  0D5E  3001               	movlw	1	; select bank2/3
  5020  0D5F  0087               	movwf	7
  5021  0D60  1701               	bsf	1,6
  5022                           
  5023                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5024  0D61  01A2               	clrf	setRFSW_Status@command
  5025  0D62  0AA2               	incf	setRFSW_Status@command,f
  5026  0D63  0867               	movf	Sw_DimmerOnFunc@sw,w
  5027  0D64  319F  2710  318D   	fcall	_setRFSW_Status
  5028                           
  5029                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5030  0D67  0020               	movlb	0	; select bank0
  5031  0D68  01A2               	clrf	setDimmerLights_Trigger@command
  5032  0D69  0AA2               	incf	setDimmerLights_Trigger@command,f
  5033  0D6A  0867               	movf	Sw_DimmerOnFunc@sw,w
  5034  0D6B  319F  276B  318D   	fcall	_setDimmerLights_Trigger
  5035                           
  5036                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5037  0D6E  0020               	movlb	0	; select bank0
  5038  0D6F  01A2               	clrf	setDimmerLights_Switch@command
  5039  0D70  0AA2               	incf	setDimmerLights_Switch@command,f
  5040  0D71  0867               	movf	Sw_DimmerOnFunc@sw,w
  5041  0D72  319F  275B  318D   	fcall	_setDimmerLights_Switch
  5042                           
  5043                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5044  0D75  0020               	movlb	0	; select bank0
  5045  0D76  086C               	movf	_Sw,w
  5046  0D77  0086               	movwf	6
  5047  0D78  3001               	movlw	1	; select bank2/3
  5048  0D79  0087               	movwf	7
  5049  0D7A  3000               	movlw	0
  5050  0D7B  1B01               	btfsc	1,6
  5051  0D7C  3001               	movlw	1
  5052  0D7D  00DD               	movwf	setRF_DimmerLights@on
  5053  0D7E  0867               	movf	Sw_DimmerOnFunc@sw,w
  5054  0D7F  318A  22D6  318D   	fcall	_setRF_DimmerLights
  5055                           
  5056                           ;Switch_B1.c: 274: setTxData();
  5057  0D82  3185  25F8         	fcall	_setTxData
  5058                           
  5059                           ;Switch_B1.c: 276: } else {
  5060  0D84  0008               	return
  5061  0D85                     l8914:	
  5062                           
  5063                           ;Switch_B1.c: 277: Sw->Status = 0;
  5064  0D85  0020               	movlb	0	; select bank0
  5065  0D86  086C               	movf	_Sw,w
  5066  0D87  0086               	movwf	6
  5067  0D88  3001               	movlw	1	; select bank2/3
  5068  0D89  0087               	movwf	7
  5069  0D8A  1301               	bcf	1,6
  5070                           
  5071                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5072  0D8B  086C               	movf	_Sw,w
  5073  0D8C  0086               	movwf	6
  5074  0D8D  3001               	movlw	1	; select bank2/3
  5075  0D8E  0087               	movwf	7
  5076  0D8F  3000               	movlw	0
  5077  0D90  1B01               	btfsc	1,6
  5078  0D91  3001               	movlw	1
  5079  0D92  00A2               	movwf	setRFSW_Status@command
  5080  0D93  0867               	movf	Sw_DimmerOnFunc@sw,w
  5081  0D94  319F  2710         	fcall	_setRFSW_Status
  5082  0D96  0008               	return
  5083  0D97                     __end_of_Sw_DimmerOnFunc:	
  5084                           
  5085                           	psect	text11
  5086  0B42                     __ptext11:	
  5087 ;; *************** function _Sw_DimmerOffFunc *****************
  5088 ;; Defined at:
  5089 ;;		line 284 in file "../src/Switch_B1.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  sw              1    wreg     unsigned char 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  sw              1   68[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        3 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    9
  5110 ;; This function calls:
  5111 ;;		_setDelayOff_GO
  5112 ;;		_setDimmerLights_AdjGo
  5113 ;;		_setDimmerLights_Switch
  5114 ;;		_setDimmerLights_Trigger
  5115 ;;		_setDimmerLights_TriggerAdj
  5116 ;;		_setRF_DimmerLights
  5117 ;;		_setTxData
  5118 ;; This function is called by:
  5119 ;;		_setSw_Main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function _Sw_DimmerOffFunc
  5125  0B42                     _Sw_DimmerOffFunc:	
  5126                           
  5127                           ;incstack = 0
  5128                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5129                           ;Sw_DimmerOffFunc@sw stored from wreg
  5130  0B42  0020               	movlb	0	; select bank0
  5131  0B43  00E4               	movwf	Sw_DimmerOffFunc@sw
  5132                           
  5133                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5134  0B44  086C               	movf	_Sw,w
  5135  0B45  0086               	movwf	6
  5136  0B46  3001               	movlw	1	; select bank2/3
  5137  0B47  0087               	movwf	7
  5138  0B48  1F81               	btfss	1,7
  5139  0B49  0008               	return
  5140                           
  5141                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5142  0B4A  086C               	movf	_Sw,w
  5143  0B4B  0086               	movwf	6
  5144  0B4C  3001               	movlw	1	; select bank2/3
  5145  0B4D  0087               	movwf	7
  5146  0B4E  1381               	bcf	1,7
  5147                           
  5148                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5149  0B4F  086C               	movf	_Sw,w
  5150  0B50  0086               	movwf	6
  5151  0B51  3001               	movlw	1	; select bank2/3
  5152  0B52  0087               	movwf	7
  5153  0B53  1F01               	btfss	1,6
  5154  0B54  2B8D               	goto	l8984
  5155                           
  5156                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5157  0B55  0A6C               	incf	_Sw,w
  5158  0B56  0086               	movwf	6
  5159  0B57  3001               	movlw	1	; select bank2/3
  5160  0B58  0087               	movwf	7
  5161  0B59  1C01               	btfss	1,0
  5162  0B5A  0008               	return
  5163                           
  5164                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5165  0B5B  0A6C               	incf	_Sw,w
  5166  0B5C  0086               	movwf	6
  5167  0B5D  3001               	movlw	1	; select bank2/3
  5168  0B5E  0087               	movwf	7
  5169  0B5F  1001               	bcf	1,0
  5170                           
  5171                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5172  0B60  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5173  0B61  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5174  0B62  0864               	movf	Sw_DimmerOffFunc@sw,w
  5175  0B63  319F  27AB  318B   	fcall	_setDimmerLights_TriggerAdj
  5176                           
  5177                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5178  0B66  0020               	movlb	0	; select bank0
  5179  0B67  01A2               	clrf	setDimmerLights_AdjGo@command
  5180  0B68  0864               	movf	Sw_DimmerOffFunc@sw,w
  5181  0B69  319F  279B  318B   	fcall	_setDimmerLights_AdjGo
  5182                           
  5183                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5184  0B6C  0020               	movlb	0	; select bank0
  5185  0B6D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5186  0B6E  3E1A               	addlw	26
  5187  0B6F  076D               	addwf	_product,w
  5188  0B70  00E2               	movwf	??_Sw_DimmerOffFunc
  5189  0B71  0862               	movf	??_Sw_DimmerOffFunc,w
  5190  0B72  0086               	movwf	6
  5191  0B73  3002               	movlw	2	; select bank4/5
  5192  0B74  0087               	movwf	7
  5193  0B75  0801               	movf	1,w
  5194  0B76  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5195  0B77  086D               	movf	_product,w
  5196  0B78  3E11               	addlw	17
  5197  0B79  0086               	movwf	6
  5198  0B7A  3002               	movlw	2	; select bank4/5
  5199  0B7B  0087               	movwf	7
  5200  0B7C  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5201  0B7D  0081               	movwf	1
  5202                           
  5203                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5204  0B7E  086C               	movf	_Sw,w
  5205  0B7F  0086               	movwf	6
  5206  0B80  3001               	movlw	1	; select bank2/3
  5207  0B81  0087               	movwf	7
  5208  0B82  3000               	movlw	0
  5209  0B83  1B01               	btfsc	1,6
  5210  0B84  3001               	movlw	1
  5211  0B85  00DD               	movwf	setRF_DimmerLights@on
  5212  0B86  0864               	movf	Sw_DimmerOffFunc@sw,w
  5213  0B87  318A  22D6  318B   	fcall	_setRF_DimmerLights
  5214                           
  5215                           ;Switch_B1.c: 295: setTxData();
  5216  0B8A  3185  25F8         	fcall	_setTxData
  5217                           
  5218                           ;Switch_B1.c: 297: }
  5219                           ;Switch_B1.c: 298: } else {
  5220  0B8C  0008               	return
  5221  0B8D                     l8984:	
  5222                           
  5223                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5224  0B8D  0020               	movlb	0	; select bank0
  5225  0B8E  01A2               	clrf	setDimmerLights_Trigger@command
  5226  0B8F  0AA2               	incf	setDimmerLights_Trigger@command,f
  5227  0B90  0864               	movf	Sw_DimmerOffFunc@sw,w
  5228  0B91  319F  276B  318B   	fcall	_setDimmerLights_Trigger
  5229                           
  5230                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5231  0B94  0020               	movlb	0	; select bank0
  5232  0B95  01A2               	clrf	setDimmerLights_Switch@command
  5233  0B96  0864               	movf	Sw_DimmerOffFunc@sw,w
  5234  0B97  319F  275B  318B   	fcall	_setDimmerLights_Switch
  5235                           
  5236                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5237  0B9A  0020               	movlb	0	; select bank0
  5238  0B9B  01AA               	clrf	setDelayOff_GO@command
  5239  0B9C  01AB               	clrf	setDelayOff_GO@value
  5240  0B9D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5241  0B9E  3188  207D  318B   	fcall	_setDelayOff_GO
  5242                           
  5243                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5244  0BA1  0020               	movlb	0	; select bank0
  5245  0BA2  086C               	movf	_Sw,w
  5246  0BA3  0086               	movwf	6
  5247  0BA4  3001               	movlw	1	; select bank2/3
  5248  0BA5  0087               	movwf	7
  5249  0BA6  3000               	movlw	0
  5250  0BA7  1B01               	btfsc	1,6
  5251  0BA8  3001               	movlw	1
  5252  0BA9  00DD               	movwf	setRF_DimmerLights@on
  5253  0BAA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5254  0BAB  318A  22D6  318B   	fcall	_setRF_DimmerLights
  5255                           
  5256                           ;Switch_B1.c: 304: setTxData();
  5257  0BAE  3185  25F8         	fcall	_setTxData
  5258  0BB0  0008               	return
  5259  0BB1                     __end_of_Sw_DimmerOffFunc:	
  5260                           
  5261                           	psect	text12
  5262  08DC                     __ptext12:	
  5263 ;; *************** function _Sw_DimmerAdjFunc *****************
  5264 ;; Defined at:
  5265 ;;		line 311 in file "../src/Switch_B1.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  sw              1    wreg     unsigned char 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  sw              1    9[BANK0 ] unsigned char 
  5270 ;;  Idle            1    8[BANK0 ] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;		None               void
  5273 ;; Registers used:
  5274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;Total ram usage:        6 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    7
  5287 ;; This function calls:
  5288 ;;		_setDimmerLights_AdjGo
  5289 ;;		_setDimmerLights_TriggerAdj
  5290 ;;		_setRFSW_Status
  5291 ;; This function is called by:
  5292 ;;		_setSw_Main
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _Sw_DimmerAdjFunc
  5298  08DC                     _Sw_DimmerAdjFunc:	
  5299                           
  5300                           ;incstack = 0
  5301                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5302                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5303  08DC  0020               	movlb	0	; select bank0
  5304  08DD  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5305                           
  5306                           ;Switch_B1.c: 312: char Idle = 1;
  5307  08DE  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5308  08DF  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5309                           
  5310                           ;Switch_B1.c: 315: if (sw == 1) {
  5311  08E0  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5312  08E1  3A01               	xorlw	1
  5313  08E2  1D03               	skipz
  5314  08E3  28EF               	goto	l8932
  5315                           
  5316                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5317  08E4  01A5               	clrf	_Sw_DimmerAdjFunc$6051
  5318  08E5  0022               	movlb	2	; select bank2
  5319  08E6  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  5320  08E7  19DB               	btfsc	(_DimmerLights3^(0+256)+8),3
  5321  08E8  28EC               	goto	l8930
  5322  08E9  0020               	movlb	0	; select bank0
  5323  08EA  01A5               	clrf	_Sw_DimmerAdjFunc$6051
  5324  08EB  0AA5               	incf	_Sw_DimmerAdjFunc$6051,f
  5325  08EC                     l8930:	
  5326  08EC  0020               	movlb	0	; select bank0
  5327  08ED  0825               	movf	_Sw_DimmerAdjFunc$6051,w
  5328  08EE  290C               	goto	L4
  5329  08EF                     l8932:	
  5330                           ;Switch_B1.c: 317: } else if (sw == 2) {
  5331                           
  5332  08EF  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5333  08F0  3A02               	xorlw	2
  5334  08F1  1D03               	skipz
  5335  08F2  28FE               	goto	l8944
  5336                           
  5337                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5338  08F3  01A6               	clrf	_Sw_DimmerAdjFunc$6052
  5339  08F4  0022               	movlb	2	; select bank2
  5340  08F5  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  5341  08F6  19DB               	btfsc	(_DimmerLights3^(0+256)+8),3
  5342  08F7  28FB               	goto	l8942
  5343  08F8  0020               	movlb	0	; select bank0
  5344  08F9  01A6               	clrf	_Sw_DimmerAdjFunc$6052
  5345  08FA  0AA6               	incf	_Sw_DimmerAdjFunc$6052,f
  5346  08FB                     l8942:	
  5347  08FB  0020               	movlb	0	; select bank0
  5348  08FC  0826               	movf	_Sw_DimmerAdjFunc$6052,w
  5349  08FD  290C               	goto	L4
  5350  08FE                     l8944:	
  5351                           ;Switch_B1.c: 319: } else if (sw == 3) {
  5352                           
  5353  08FE  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5354  08FF  3A03               	xorlw	3
  5355  0900  1D03               	skipz
  5356  0901  290F               	goto	l2740
  5357                           
  5358                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5359  0902  01A7               	clrf	_Sw_DimmerAdjFunc$6053
  5360  0903  0022               	movlb	2	; select bank2
  5361  0904  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  5362  0905  19CC               	btfsc	(_DimmerLights2^(0+256)+8),3
  5363  0906  290A               	goto	l8954
  5364  0907  0020               	movlb	0	; select bank0
  5365  0908  01A7               	clrf	_Sw_DimmerAdjFunc$6053
  5366  0909  0AA7               	incf	_Sw_DimmerAdjFunc$6053,f
  5367  090A                     l8954:	
  5368  090A  0020               	movlb	0	; select bank0
  5369  090B  0827               	movf	_Sw_DimmerAdjFunc$6053,w
  5370  090C                     L4:	
  5371  090C  00A4               	movwf	??_Sw_DimmerAdjFunc
  5372  090D  0824               	movf	??_Sw_DimmerAdjFunc,w
  5373  090E  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5374  090F                     l2740:	
  5375                           
  5376                           ;Switch_B1.c: 321: }
  5377                           ;Switch_B1.c: 332: if (Idle == 1) {
  5378  090F  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5379  0910  3A01               	xorlw	1
  5380  0911  1D03               	skipz
  5381  0912  0008               	return
  5382                           
  5383                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5384  0913  086C               	movf	_Sw,w
  5385  0914  0086               	movwf	6
  5386  0915  3001               	movlw	1	; select bank2/3
  5387  0916  0087               	movwf	7
  5388  0917  1F81               	btfss	1,7
  5389  0918  0008               	return
  5390                           
  5391                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5392  0919  086C               	movf	_Sw,w
  5393  091A  0086               	movwf	6
  5394  091B  3001               	movlw	1	; select bank2/3
  5395  091C  0087               	movwf	7
  5396  091D  1581               	bsf	1,3
  5397                           
  5398                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5399  091E  0A6C               	incf	_Sw,w
  5400  091F  0086               	movwf	6
  5401  0920  3001               	movlw	1	; select bank2/3
  5402  0921  0087               	movwf	7
  5403  0922  1401               	bsf	1,0
  5404                           
  5405                           ;Switch_B1.c: 336: Sw->Status = 1;
  5406  0923  086C               	movf	_Sw,w
  5407  0924  0086               	movwf	6
  5408  0925  3001               	movlw	1	; select bank2/3
  5409  0926  0087               	movwf	7
  5410  0927  1701               	bsf	1,6
  5411                           
  5412                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5413  0928  01A2               	clrf	setRFSW_Status@command
  5414  0929  0AA2               	incf	setRFSW_Status@command,f
  5415  092A  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5416  092B  319F  2710  3188   	fcall	_setRFSW_Status
  5417                           
  5418                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5419  092E  0020               	movlb	0	; select bank0
  5420  092F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5421  0930  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5422  0931  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5423  0932  319F  27AB  3188   	fcall	_setDimmerLights_TriggerAdj
  5424                           
  5425                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5426  0935  0020               	movlb	0	; select bank0
  5427  0936  01A2               	clrf	setDimmerLights_AdjGo@command
  5428  0937  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5429  0938  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5430  0939  319F  279B         	fcall	_setDimmerLights_AdjGo
  5431  093B  0008               	return
  5432  093C                     __end_of_Sw_DimmerAdjFunc:	
  5433                           
  5434                           	psect	text13
  5435  1FAB                     __ptext13:	
  5436 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5437 ;; Defined at:
  5438 ;;		line 720 in file "../src/Dimmer_B1.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  lights          1    wreg     unsigned char 
  5441 ;;  command         1    2[BANK0 ] unsigned char 
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  lights          1    3[BANK0 ] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5453 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;Total ram usage:        2 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    6
  5460 ;; This function calls:
  5461 ;;		_DimmerLightsPointSelect
  5462 ;; This function is called by:
  5463 ;;		_Sw_DimmerOffFunc
  5464 ;;		_Sw_DimmerAdjFunc
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _setDimmerLights_TriggerAdj
  5470  1FAB                     _setDimmerLights_TriggerAdj:	
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5474                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5475  1FAB  0020               	movlb	0	; select bank0
  5476  1FAC  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5477                           
  5478                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  5479  1FAD  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5480  1FAE  3191  2185         	fcall	_DimmerLightsPointSelect
  5481                           
  5482                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  5483  1FB0  0020               	movlb	0	; select bank0
  5484  1FB1  086B               	movf	_DimmerLights,w
  5485  1FB2  3E08               	addlw	8
  5486  1FB3  0086               	movwf	6
  5487  1FB4  3001               	movlw	1	; select bank2/3
  5488  1FB5  0087               	movwf	7
  5489  1FB6  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5490  1FB7  1201               	bcf	1,4
  5491  1FB8  1D03               	skipz
  5492  1FB9  1601               	bsf	1,4
  5493  1FBA  0008               	return
  5494  1FBB                     __end_of_setDimmerLights_TriggerAdj:	
  5495                           
  5496                           	psect	text14
  5497  1F9B                     __ptext14:	
  5498 ;; *************** function _setDimmerLights_AdjGo *****************
  5499 ;; Defined at:
  5500 ;;		line 708 in file "../src/Dimmer_B1.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  lights          1    wreg     unsigned char 
  5503 ;;  command         1    2[BANK0 ] unsigned char 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;  lights          1    3[BANK0 ] unsigned char 
  5506 ;; Return value:  Size  Location     Type
  5507 ;;		None               void
  5508 ;; Registers used:
  5509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5515 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;Total ram usage:        2 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    6
  5522 ;; This function calls:
  5523 ;;		_DimmerLightsPointSelect
  5524 ;; This function is called by:
  5525 ;;		_Sw_DimmerOffFunc
  5526 ;;		_Sw_DimmerAdjFunc
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _setDimmerLights_AdjGo
  5532  1F9B                     _setDimmerLights_AdjGo:	
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5536                           ;setDimmerLights_AdjGo@lights stored from wreg
  5537  1F9B  0020               	movlb	0	; select bank0
  5538  1F9C  00A3               	movwf	setDimmerLights_AdjGo@lights
  5539                           
  5540                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  5541  1F9D  0823               	movf	setDimmerLights_AdjGo@lights,w
  5542  1F9E  3191  2185         	fcall	_DimmerLightsPointSelect
  5543                           
  5544                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  5545  1FA0  0020               	movlb	0	; select bank0
  5546  1FA1  086B               	movf	_DimmerLights,w
  5547  1FA2  3E08               	addlw	8
  5548  1FA3  0086               	movwf	6
  5549  1FA4  3001               	movlw	1	; select bank2/3
  5550  1FA5  0087               	movwf	7
  5551  1FA6  0822               	movf	setDimmerLights_AdjGo@command,w
  5552  1FA7  1181               	bcf	1,3
  5553  1FA8  1D03               	skipz
  5554  1FA9  1581               	bsf	1,3
  5555  1FAA  0008               	return
  5556  1FAB                     __end_of_setDimmerLights_AdjGo:	
  5557                           
  5558                           	psect	text15
  5559  1FDD                     __ptext15:	
  5560 ;; *************** function _Switch_Initialization *****************
  5561 ;; Defined at:
  5562 ;;		line 41 in file "../src/Switch_B1.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;		None               void
  5569 ;; Registers used:
  5570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    8
  5583 ;; This function calls:
  5584 ;;		_TouchPower
  5585 ;;		_setSw_Initialization
  5586 ;; This function is called by:
  5587 ;;		_main
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           
  5592                           ;psect for function _Switch_Initialization
  5593  1FDD                     _Switch_Initialization:	
  5594                           
  5595                           ;Switch_B1.c: 42: TouchPower();
  5596                           
  5597                           ;incstack = 0
  5598                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5599  1FDD  319F  273D  319F   	fcall	_TouchPower
  5600                           
  5601                           ;Switch_B1.c: 44: WPUB1 = 0;
  5602  1FE0  0024               	movlb	4	; select bank4
  5603  1FE1  108D               	bcf	13,1	;volatile
  5604                           
  5605                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5606  1FE2  3001               	movlw	1
  5607  1FE3  319E  265B  319F   	fcall	_setSw_Initialization
  5608                           
  5609                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5610  1FE6  3002               	movlw	2
  5611  1FE7  319E  265B  319F   	fcall	_setSw_Initialization
  5612                           
  5613                           ;Switch_B1.c: 61: setSw_Initialization(3);
  5614  1FEA  3003               	movlw	3
  5615  1FEB  319E  265B         	fcall	_setSw_Initialization
  5616  1FED  0008               	return
  5617  1FEE                     __end_of_Switch_Initialization:	
  5618                           
  5619                           	psect	text16
  5620  1E5B                     __ptext16:	
  5621 ;; *************** function _setSw_Initialization *****************
  5622 ;; Defined at:
  5623 ;;		line 83 in file "../src/Switch_B1.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;  sw              1    wreg     unsigned char 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  sw              1    3[BANK0 ] unsigned char 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;		None               void
  5630 ;; Registers used:
  5631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;Total ram usage:        1 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    7
  5644 ;; This function calls:
  5645 ;;		_setLED
  5646 ;; This function is called by:
  5647 ;;		_Switch_Initialization
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function _setSw_Initialization
  5653  1E5B                     _setSw_Initialization:	
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5657                           ;setSw_Initialization@sw stored from wreg
  5658  1E5B  0020               	movlb	0	; select bank0
  5659  1E5C  00A3               	movwf	setSw_Initialization@sw
  5660                           
  5661                           ;Switch_B1.c: 84: setLED(sw, 1);
  5662  1E5D  01A1               	clrf	setLED@command
  5663  1E5E  0AA1               	incf	setLED@command,f
  5664  1E5F  0823               	movf	setSw_Initialization@sw,w
  5665  1E60  318B  23B1         	fcall	_setLED
  5666  1E62  0008               	return
  5667  1E63                     __end_of_setSw_Initialization:	
  5668                           
  5669                           	psect	text17
  5670  1F3D                     __ptext17:	
  5671 ;; *************** function _TouchPower *****************
  5672 ;; Defined at:
  5673 ;;		line 10 in file "../src/Switch_B1.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;		None
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;		None
  5678 ;; Return value:  Size  Location     Type
  5679 ;;		None               void
  5680 ;; Registers used:
  5681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;Total ram usage:        0 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    6
  5694 ;; This function calls:
  5695 ;;		_Timeout_Counter
  5696 ;;		_set_TimeoutCleared
  5697 ;; This function is called by:
  5698 ;;		_Switch_Initialization
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           
  5703                           ;psect for function _TouchPower
  5704  1F3D                     _TouchPower:	
  5705                           
  5706                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5707                           
  5708                           ;incstack = 0
  5709                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5710  1F3D  2F43               	goto	l9420
  5711  1F3E                     l2658:	
  5712                           
  5713                           ;Switch_B1.c: 12: RC5 = 1;
  5714  1F3E  0020               	movlb	0	; select bank0
  5715  1F3F  168E               	bsf	14,5	;volatile
  5716                           
  5717                           ;Switch_B1.c: 13: Timeout_Counter();
  5718  1F40  3190  20C9  319F   	fcall	_Timeout_Counter
  5719  1F43                     l9420:	
  5720  1F43  0020               	movlb	0	; select bank0
  5721  1F44  1A8E               	btfsc	14,5	;volatile
  5722  1F45  2F49               	goto	l9424
  5723  1F46  0021               	movlb	1	; select bank1
  5724  1F47  1D30               	btfss	(_myMain^(0+128)+16),2
  5725  1F48  2F3E               	goto	l2658
  5726  1F49                     l9424:	
  5727                           
  5728                           ;Switch_B1.c: 14: }
  5729                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5730  1F49  3190  2066         	fcall	_set_TimeoutCleared
  5731  1F4B  0008               	return
  5732  1F4C                     __end_of_TouchPower:	
  5733                           
  5734                           	psect	text18
  5735  1E36                     __ptext18:	
  5736 ;; *************** function _RF_Main *****************
  5737 ;; Defined at:
  5738 ;;		line 16 in file "../src/RF_Control_B1.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;		None               void
  5745 ;; Registers used:
  5746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;Total ram usage:        0 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:   14
  5759 ;; This function calls:
  5760 ;;		_setRF_Main
  5761 ;; This function is called by:
  5762 ;;		_main
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           
  5767                           ;psect for function _RF_Main
  5768  1E36                     _RF_Main:	
  5769                           
  5770                           ;RF_Control_B1.c: 18: setRF_Main();
  5771                           
  5772                           ;incstack = 0
  5773                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5774  1E36  3184  2456         	fcall	_setRF_Main
  5775  1E38  0008               	return
  5776  1E39                     __end_of_RF_Main:	
  5777                           
  5778                           	psect	text19
  5779  0456                     __ptext19:	
  5780 ;; *************** function _setRF_Main *****************
  5781 ;; Defined at:
  5782 ;;		line 52 in file "../src/RF_Control_B1.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  Receive_OK      1    0        unsigned char 
  5787 ;;  loop_f          1    0        unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;		None               void
  5790 ;; Registers used:
  5791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;Total ram usage:        2 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:   13
  5804 ;; This function calls:
  5805 ;;		_CC2500_ReadStatus
  5806 ;;		_CC2500_RxData
  5807 ;;		_CC2500_TxData
  5808 ;;		_CC2500_WriteCommand
  5809 ;;		_getBuz_GO
  5810 ;;		_getRxData
  5811 ;; This function is called by:
  5812 ;;		_RF_Main
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _setRF_Main
  5818  0456                     _setRF_Main:	
  5819                           
  5820                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5821                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5822                           
  5823                           ;incstack = 0
  5824                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5825  0456  0021               	movlb	1	; select bank1
  5826  0457  1C3F               	btfss	_RF1^(0+128),0
  5827  0458  0008               	return
  5828                           
  5829                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5830  0459  319F  27CC  3184   	fcall	_getBuz_GO
  5831  045C  0020               	movlb	0	; select bank0
  5832  045D  0821               	movf	?_getBuz_GO+1,w
  5833  045E  0420               	iorwf	?_getBuz_GO,w
  5834  045F  1D03               	skipz
  5835  0460  0008               	return
  5836                           
  5837                           ;RF_Control_B1.c: 60: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5838  0461  01E8               	clrf	_setRF_Main$5086
  5839  0462  0AE8               	incf	_setRF_Main$5086,f
  5840  0463  1C0C               	btfss	12,0	;volatile
  5841  0464  1B0C               	btfsc	12,6	;volatile
  5842  0465  2C68               	goto	l9318
  5843  0466  1E0C               	btfss	12,4	;volatile
  5844  0467  01E8               	clrf	_setRF_Main$5086
  5845  0468                     l9318:	
  5846  0468  0868               	movf	_setRF_Main$5086,w
  5847  0469  0021               	movlb	1	; select bank1
  5848  046A  13BF               	bcf	_RF1^(0+128),7
  5849  046B  1D03               	skipz
  5850  046C  17BF               	bsf	_RF1^(0+128),7
  5851                           
  5852                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  5853  046D  1BBF               	btfsc	_RF1^(0+128),7
  5854  046E  1B3F               	btfsc	_RF1^(0+128),6
  5855  046F  2C75               	goto	l2210
  5856                           
  5857                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  5858  0470  01C1               	clrf	(_RF1^(0+128)+2)
  5859  0471  01C2               	clrf	((_RF1+1)^(0+128)+2)
  5860                           
  5861                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  5862  0472  14C0               	bsf	(_RF1^(0+128)+1),1
  5863                           
  5864                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  5865  0473  11BF               	bcf	_RF1^(0+128),3
  5866                           
  5867                           ;RF_Control_B1.c: 76: } else {
  5868  0474  0008               	return
  5869  0475                     l2210:	
  5870                           
  5871                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5872  0475  18C0               	btfsc	(_RF1^(0+128)+1),1
  5873  0476  1B3F               	btfsc	_RF1^(0+128),6
  5874  0477  2C8C               	goto	l9340
  5875                           
  5876                           ;RF_Control_B1.c: 78: RF1.Count++;
  5877  0478  3001               	movlw	1
  5878  0479  07C1               	addwf	(_RF1^(0+128)+2),f
  5879  047A  3000               	movlw	0
  5880  047B  3DC2               	addwfc	((_RF1+1)^(0+128)+2),f
  5881                           
  5882                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5883  047C  3002               	movlw	2
  5884  047D  3EBF               	addlw	_RF1& (0+255)
  5885  047E  0086               	movwf	6
  5886  047F  0187               	clrf	7
  5887  0480  3F40               	moviw [0]fsr1
  5888  0481  0646               	xorwf	(_RF1^(0+128)+7),w
  5889  0482  1D03               	skipz
  5890  0483  2C86               	goto	u9875
  5891  0484  3F41               	moviw [1]fsr1
  5892  0485  0647               	xorwf	((_RF1+1)^(0+128)+7),w
  5893  0486                     u9875:	
  5894  0486  1D03               	skipz
  5895  0487  2CFE               	goto	l9394
  5896                           
  5897                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5898  0488  01C1               	clrf	(_RF1^(0+128)+2)
  5899  0489  01C2               	clrf	((_RF1+1)^(0+128)+2)
  5900                           
  5901                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5902  048A  10C0               	bcf	(_RF1^(0+128)+1),1
  5903                           
  5904                           ;RF_Control_B1.c: 82: }
  5905                           ;RF_Control_B1.c: 83: } else {
  5906  048B  2CFE               	goto	l9394
  5907  048C                     l9340:	
  5908                           
  5909                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5910  048C  01C1               	clrf	(_RF1^(0+128)+2)
  5911  048D  01C2               	clrf	((_RF1+1)^(0+128)+2)
  5912                           
  5913                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5914  048E  10C0               	bcf	(_RF1^(0+128)+1),1
  5915                           
  5916                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5917  048F  193F               	btfsc	_RF1^(0+128),2
  5918  0490  1B3F               	btfsc	_RF1^(0+128),6
  5919  0491  2CAD               	goto	l2215
  5920                           
  5921                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5922  0492  113F               	bcf	_RF1^(0+128),2
  5923                           
  5924                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5925  0493  11BF               	bcf	_RF1^(0+128),3
  5926                           
  5927                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5928  0494  10BF               	bcf	_RF1^(0+128),1
  5929                           
  5930                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5931  0495  303B               	movlw	59
  5932  0496  3188  2000  3184   	fcall	_CC2500_ReadStatus
  5933                           
  5934                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5935  0499  0021               	movlb	1	; select bank1
  5936  049A  085D               	movf	_s_data^(0+128),w
  5937  049B  1903               	btfsc	3,2
  5938  049C  2CA9               	goto	l2216
  5939                           
  5940                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5941  049D  3036               	movlw	54
  5942  049E  3191  2138  3184   	fcall	_CC2500_WriteCommand
  5943                           
  5944                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5945  04A1  303B               	movlw	59
  5946  04A2  3191  2138  3184   	fcall	_CC2500_WriteCommand
  5947                           
  5948                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5949  04A5  303A               	movlw	58
  5950  04A6  3191  2138  3184   	fcall	_CC2500_WriteCommand
  5951  04A9                     l2216:	
  5952                           
  5953                           ;RF_Control_B1.c: 97: }
  5954                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5955  04A9  3189  219D  3184   	fcall	_CC2500_TxData
  5956                           
  5957                           ;RF_Control_B1.c: 100: } else {
  5958  04AC  2CFE               	goto	l9394
  5959  04AD                     l2215:	
  5960                           
  5961                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5962  04AD  1DBF               	btfss	_RF1^(0+128),3
  5963  04AE  2CE9               	goto	l2218
  5964                           
  5965                           ;RF_Control_B1.c: 103: CC2500_RxData();
  5966  04AF  318C  2422  3184   	fcall	_CC2500_RxData
  5967                           
  5968                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  5969  04B2  0021               	movlb	1	; select bank1
  5970  04B3  1CBF               	btfss	_RF1^(0+128),1
  5971  04B4  2CFE               	goto	l9394
  5972                           
  5973                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  5974  04B5  10BF               	bcf	_RF1^(0+128),1
  5975                           
  5976                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  5977  04B6  12C0               	bcf	(_RF1^(0+128)+1),5
  5978                           
  5979                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  5980  04B7  01C9               	clrf	(_RF1^(0+128)+10)
  5981  04B8  01CA               	clrf	((_RF1+1)^(0+128)+10)
  5982                           
  5983                           ;RF_Control_B1.c: 116: getRxData();
  5984  04B9  318A  2202  3184   	fcall	_getRxData
  5985                           
  5986                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  5987  04BC  3020               	movlw	32
  5988  04BD  0020               	movlb	0	; select bank0
  5989  04BE  068D               	xorwf	13,f
  5990                           
  5991                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  5992  04BF  0021               	movlb	1	; select bank1
  5993  04C0  14C0               	bsf	(_RF1^(0+128)+1),1
  5994                           
  5995                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  5996  04C1  1DC0               	btfss	(_RF1^(0+128)+1),3
  5997  04C2  2CD0               	goto	l9378
  5998                           
  5999                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  6000  04C3  3000               	movlw	0
  6001  04C4  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6002  04C5  3015               	movlw	21
  6003  04C6  1903               	skipnz
  6004  04C7  0246               	subwf	(_RF1^(0+128)+7),w
  6005  04C8  1C03               	skipc
  6006  04C9  2CCE               	goto	l9376
  6007                           
  6008                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  6009  04CA  3014               	movlw	20
  6010  04CB  00C6               	movwf	(_RF1^(0+128)+7)
  6011  04CC  3000               	movlw	0
  6012  04CD  00C7               	movwf	(_RF1^(0+128)+8)
  6013  04CE                     l9376:	
  6014                           
  6015                           ;RF_Control_B1.c: 125: }
  6016                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  6017  04CE  01C3               	clrf	(_RF1^(0+128)+4)
  6018                           
  6019                           ;RF_Control_B1.c: 127: } else {
  6020  04CF  2CFE               	goto	l9394
  6021  04D0                     l9378:	
  6022                           
  6023                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  6024  04D0  3001               	movlw	1
  6025  04D1  0020               	movlb	0	; select bank0
  6026  04D2  00E7               	movwf	??_setRF_Main
  6027  04D3  0867               	movf	??_setRF_Main,w
  6028  04D4  0021               	movlb	1	; select bank1
  6029  04D5  07C3               	addwf	(_RF1^(0+128)+4),f
  6030                           
  6031                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6032  04D6  0843               	movf	(_RF1^(0+128)+4),w
  6033  04D7  3A02               	xorlw	2
  6034  04D8  1D03               	skipz
  6035  04D9  2CFE               	goto	l9394
  6036                           
  6037                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6038  04DA  01C3               	clrf	(_RF1^(0+128)+4)
  6039                           
  6040                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6041  04DB  01C4               	clrf	(_RF1^(0+128)+5)
  6042  04DC  01C5               	clrf	((_RF1+1)^(0+128)+5)
  6043                           
  6044                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  6045  04DD  3001               	movlw	1
  6046  04DE  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6047  04DF  302C               	movlw	44
  6048  04E0  1903               	skipnz
  6049  04E1  0246               	subwf	(_RF1^(0+128)+7),w
  6050  04E2  1803               	skipnc
  6051  04E3  2CFE               	goto	l9394
  6052                           
  6053                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6054  04E4  300A               	movlw	10
  6055  04E5  07C6               	addwf	(_RF1^(0+128)+7),f
  6056  04E6  3000               	movlw	0
  6057  04E7  3DC7               	addwfc	((_RF1+1)^(0+128)+7),f
  6058                           
  6059                           ;RF_Control_B1.c: 134: }
  6060                           ;RF_Control_B1.c: 135: }
  6061                           ;RF_Control_B1.c: 136: }
  6062                           ;RF_Control_B1.c: 137: }
  6063                           ;RF_Control_B1.c: 138: } else {
  6064  04E8  2CFE               	goto	l9394
  6065  04E9                     l2218:	
  6066                           
  6067                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6068  04E9  1DBF               	btfss	_RF1^(0+128),3
  6069  04EA  18BF               	btfsc	_RF1^(0+128),1
  6070  04EB  2CFE               	goto	l9394
  6071                           
  6072                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  6073  04EC  15BF               	bsf	_RF1^(0+128),3
  6074                           
  6075                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  6076  04ED  16C0               	bsf	(_RF1^(0+128)+1),5
  6077                           
  6078                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  6079  04EE  3036               	movlw	54
  6080  04EF  3191  2138  3184   	fcall	_CC2500_WriteCommand
  6081                           
  6082                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  6083  04F2  303B               	movlw	59
  6084  04F3  3191  2138  3184   	fcall	_CC2500_WriteCommand
  6085                           
  6086                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  6087  04F6  303A               	movlw	58
  6088  04F7  3191  2138  3184   	fcall	_CC2500_WriteCommand
  6089                           
  6090                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  6091  04FA  3034               	movlw	52
  6092  04FB  3191  2138  3184   	fcall	_CC2500_WriteCommand
  6093  04FE                     l9394:	
  6094                           
  6095                           ;RF_Control_B1.c: 149: }
  6096                           ;RF_Control_B1.c: 151: }
  6097                           ;RF_Control_B1.c: 152: }
  6098                           ;RF_Control_B1.c: 153: }
  6099                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  6100  04FE  0021               	movlb	1	; select bank1
  6101  04FF  1DBF               	btfss	_RF1^(0+128),3
  6102  0500  2D1F               	goto	l9406
  6103                           
  6104                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  6105  0501  3001               	movlw	1
  6106  0502  07C4               	addwf	(_RF1^(0+128)+5),f
  6107  0503  3000               	movlw	0
  6108  0504  3DC5               	addwfc	((_RF1+1)^(0+128)+5),f
  6109                           
  6110                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  6111  0505  3005               	movlw	5
  6112  0506  3EBF               	addlw	_RF1& (0+255)
  6113  0507  0086               	movwf	6
  6114  0508  0187               	clrf	7
  6115  0509  3F40               	moviw [0]fsr1
  6116  050A  3A64               	xorlw	100
  6117  050B  1D03               	skipz
  6118  050C  2D0F               	goto	u10005
  6119  050D  3F41               	moviw [1]fsr1
  6120  050E  3A00               	xorlw	0
  6121  050F                     u10005:	
  6122  050F  1D03               	skipz
  6123  0510  2D1F               	goto	l9406
  6124                           
  6125                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  6126  0511  01C4               	clrf	(_RF1^(0+128)+5)
  6127  0512  01C5               	clrf	((_RF1+1)^(0+128)+5)
  6128                           
  6129                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  6130  0513  01C3               	clrf	(_RF1^(0+128)+4)
  6131                           
  6132                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  6133  0514  3000               	movlw	0
  6134  0515  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6135  0516  3015               	movlw	21
  6136  0517  1903               	skipnz
  6137  0518  0246               	subwf	(_RF1^(0+128)+7),w
  6138  0519  1C03               	skipc
  6139  051A  2D1F               	goto	l9406
  6140                           
  6141                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  6142  051B  300A               	movlw	10
  6143  051C  02C6               	subwf	(_RF1^(0+128)+7),f
  6144  051D  3000               	movlw	0
  6145  051E  3BC7               	subwfb	((_RF1+1)^(0+128)+7),f
  6146  051F                     l9406:	
  6147                           
  6148                           ;RF_Control_B1.c: 161: }
  6149                           ;RF_Control_B1.c: 162: }
  6150                           ;RF_Control_B1.c: 163: }
  6151                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  6152  051F  1EC0               	btfss	(_RF1^(0+128)+1),5
  6153  0520  0008               	return
  6154                           
  6155                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  6156  0521  3001               	movlw	1
  6157  0522  07C9               	addwf	(_RF1^(0+128)+10),f
  6158  0523  3000               	movlw	0
  6159  0524  3DCA               	addwfc	((_RF1+1)^(0+128)+10),f
  6160                           
  6161                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  6162  0525  3075               	movlw	117
  6163  0526  024A               	subwf	((_RF1+1)^(0+128)+10),w
  6164  0527  3030               	movlw	48
  6165  0528  1903               	skipnz
  6166  0529  0249               	subwf	(_RF1^(0+128)+10),w
  6167  052A  1C03               	skipc
  6168  052B  0008               	return
  6169                           
  6170                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  6171  052C  01C9               	clrf	(_RF1^(0+128)+10)
  6172  052D  01CA               	clrf	((_RF1+1)^(0+128)+10)
  6173                           
  6174                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  6175  052E  11BF               	bcf	_RF1^(0+128),3
  6176                           
  6177                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  6178  052F  10BF               	bcf	_RF1^(0+128),1
  6179  0530  0008               	return
  6180  0531                     __end_of_setRF_Main:	
  6181                           
  6182                           	psect	text20
  6183  0A02                     __ptext20:	
  6184 ;; *************** function _getRxData *****************
  6185 ;; Defined at:
  6186 ;;		line 252 in file "../src/RF_Control_B1.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;		None
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;		None
  6191 ;; Return value:  Size  Location     Type
  6192 ;;		None               void
  6193 ;; Registers used:
  6194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;Total ram usage:        0 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:   12
  6207 ;; This function calls:
  6208 ;;		_setControl_Lights_Table
  6209 ;;		_setLog_Code
  6210 ;; This function is called by:
  6211 ;;		_setRF_Main
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _getRxData
  6217  0A02                     _getRxData:	
  6218                           
  6219                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6223  0A02  0021               	movlb	1	; select bank1
  6224  0A03  1F3F               	btfss	_RF1^(0+128),6
  6225  0A04  2A15               	goto	l8824
  6226                           
  6227                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6228  0A05  0022               	movlb	2	; select bank2
  6229  0A06  08A0               	movf	_RF_Data^(0+256),f
  6230  0A07  1D03               	skipz
  6231  0A08  2A12               	goto	l2249
  6232  0A09  0821               	movf	(_RF_Data^(0+256)+1),w
  6233  0A0A  3A64               	xorlw	100
  6234  0A0B  1D03               	skipz
  6235  0A0C  2A12               	goto	l2249
  6236                           
  6237                           ;RF_Control_B1.c: 255: setLog_Code();
  6238  0A0D  3194  247B         	fcall	_setLog_Code
  6239                           
  6240                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  6241  0A0F  0021               	movlb	1	; select bank1
  6242  0A10  15C0               	bsf	(_RF1^(0+128)+1),3
  6243                           
  6244                           ;RF_Control_B1.c: 257: } else {
  6245  0A11  0008               	return
  6246  0A12                     l2249:	
  6247                           
  6248                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  6249  0A12  0021               	movlb	1	; select bank1
  6250  0A13  11C0               	bcf	(_RF1^(0+128)+1),3
  6251                           
  6252                           ;RF_Control_B1.c: 259: }
  6253                           ;RF_Control_B1.c: 260: } else {
  6254  0A14  0008               	return
  6255  0A15                     l8824:	
  6256                           
  6257                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6258  0A15  0022               	movlb	2	; select bank2
  6259  0A16  08A0               	movf	_RF_Data^(0+256),f
  6260  0A17  1D03               	skipz
  6261  0A18  2A53               	goto	l8846
  6262  0A19  0821               	movf	(_RF_Data^(0+256)+1),w
  6263  0A1A  3A02               	xorlw	2
  6264  0A1B  1D03               	skipz
  6265  0A1C  2A53               	goto	l8846
  6266                           
  6267                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6268  0A1D  082C               	movf	(_RF_Data^(0+256)+12),w
  6269  0A1E  3AFF               	xorlw	255
  6270  0A1F  1D03               	skipz
  6271  0A20  2A2D               	goto	l8836
  6272  0A21  082D               	movf	(_RF_Data^(0+256)+13),w
  6273  0A22  3AFF               	xorlw	255
  6274  0A23  1D03               	skipz
  6275  0A24  2A2D               	goto	l8836
  6276  0A25  082E               	movf	(_RF_Data^(0+256)+14),w
  6277  0A26  3AFF               	xorlw	255
  6278  0A27  1D03               	skipz
  6279  0A28  2A2D               	goto	l8836
  6280                           
  6281                           ;RF_Control_B1.c: 264: __nop();
  6282  0A29  0000               	nop
  6283                           
  6284                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  6285  0A2A  0021               	movlb	1	; select bank1
  6286  0A2B  11C0               	bcf	(_RF1^(0+128)+1),3
  6287                           
  6288                           ;RF_Control_B1.c: 266: } else {
  6289  0A2C  0008               	return
  6290  0A2D                     l8836:	
  6291                           
  6292                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6293  0A2D  0020               	movlb	0	; select bank0
  6294  0A2E  086D               	movf	_product,w
  6295  0A2F  3E0C               	addlw	12
  6296  0A30  0086               	movwf	6
  6297  0A31  3002               	movlw	2	; select bank4/5
  6298  0A32  0087               	movwf	7
  6299  0A33  0022               	movlb	2	; select bank2
  6300  0A34  082C               	movf	(_RF_Data^(0+256)+12),w
  6301  0A35  0601               	xorwf	1,w
  6302  0A36  1D03               	skipz
  6303  0A37  0008               	return
  6304  0A38  0020               	movlb	0	; select bank0
  6305  0A39  086D               	movf	_product,w
  6306  0A3A  3E0D               	addlw	13
  6307  0A3B  0086               	movwf	6
  6308  0A3C  3002               	movlw	2	; select bank4/5
  6309  0A3D  0087               	movwf	7
  6310  0A3E  0022               	movlb	2	; select bank2
  6311  0A3F  082D               	movf	(_RF_Data^(0+256)+13),w
  6312  0A40  0601               	xorwf	1,w
  6313  0A41  1D03               	skipz
  6314  0A42  0008               	return
  6315  0A43  0020               	movlb	0	; select bank0
  6316  0A44  086D               	movf	_product,w
  6317  0A45  3E0E               	addlw	14
  6318  0A46  0086               	movwf	6
  6319  0A47  3002               	movlw	2	; select bank4/5
  6320  0A48  0087               	movwf	7
  6321  0A49  0022               	movlb	2	; select bank2
  6322  0A4A  082E               	movf	(_RF_Data^(0+256)+14),w
  6323  0A4B  0601               	xorwf	1,w
  6324  0A4C  1D03               	skipz
  6325  0A4D  0008               	return
  6326                           
  6327                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  6328  0A4E  318F  2751         	fcall	_setControl_Lights_Table
  6329                           
  6330                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  6331  0A50  0021               	movlb	1	; select bank1
  6332  0A51  15C0               	bsf	(_RF1^(0+128)+1),3
  6333                           
  6334                           ;RF_Control_B1.c: 270: }
  6335                           ;RF_Control_B1.c: 271: }
  6336                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6337  0A52  0008               	return
  6338  0A53                     l8846:	
  6339  0A53  0022               	movlb	2	; select bank2
  6340  0A54  0820               	movf	_RF_Data^(0+256),w
  6341  0A55  3AFF               	xorlw	255
  6342  0A56  1D03               	skipz
  6343  0A57  2A5E               	goto	l8852
  6344  0A58  0821               	movf	(_RF_Data^(0+256)+1),w
  6345  0A59  3A02               	xorlw	2
  6346  0A5A  1D03               	skipz
  6347  0A5B  2A5E               	goto	l8852
  6348                           
  6349                           ;RF_Control_B1.c: 273: __nop();
  6350  0A5C  0000               	nop
  6351                           
  6352                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6353  0A5D  0008               	return
  6354  0A5E                     l8852:	
  6355  0A5E  0022               	movlb	2	; select bank2
  6356  0A5F  08A0               	movf	_RF_Data^(0+256),f
  6357  0A60  1D03               	skipz
  6358  0A61  2A68               	goto	l2259
  6359  0A62  0821               	movf	(_RF_Data^(0+256)+1),w
  6360  0A63  3A65               	xorlw	101
  6361  0A64  1D03               	skipz
  6362  0A65  2A68               	goto	l2259
  6363                           
  6364                           ;RF_Control_B1.c: 275: __nop();
  6365  0A66  0000               	nop
  6366                           
  6367                           ;RF_Control_B1.c: 276: } else {
  6368  0A67  0008               	return
  6369  0A68                     l2259:	
  6370                           
  6371                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  6372  0A68  0021               	movlb	1	; select bank1
  6373  0A69  11C0               	bcf	(_RF1^(0+128)+1),3
  6374  0A6A  0008               	return
  6375  0A6B                     __end_of_getRxData:	
  6376                           
  6377                           	psect	text21
  6378  147B                     __ptext21:	
  6379 ;; *************** function _setLog_Code *****************
  6380 ;; Defined at:
  6381 ;;		line 287 in file "../src/RF_Control_B1.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        1 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    7
  6402 ;; This function calls:
  6403 ;;		_setBuz
  6404 ;; This function is called by:
  6405 ;;		_getRxData
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _setLog_Code
  6411  147B                     _setLog_Code:	
  6412                           
  6413                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6417  147B  0022               	movlb	2	; select bank2
  6418  147C  082C               	movf	(_RF_Data^(0+256)+12),w
  6419  147D  0020               	movlb	0	; select bank0
  6420  147E  00AD               	movwf	??_setLog_Code
  6421  147F  086D               	movf	_product,w
  6422  1480  3E0C               	addlw	12
  6423  1481  0086               	movwf	6
  6424  1482  3002               	movlw	2	; select bank4/5
  6425  1483  0087               	movwf	7
  6426  1484  082D               	movf	??_setLog_Code,w
  6427  1485  0081               	movwf	1
  6428                           
  6429                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  6430  1486  0022               	movlb	2	; select bank2
  6431  1487  082D               	movf	(_RF_Data^(0+256)+13),w
  6432  1488  0020               	movlb	0	; select bank0
  6433  1489  00AD               	movwf	??_setLog_Code
  6434  148A  086D               	movf	_product,w
  6435  148B  3E0D               	addlw	13
  6436  148C  0086               	movwf	6
  6437  148D  3002               	movlw	2	; select bank4/5
  6438  148E  0087               	movwf	7
  6439  148F  082D               	movf	??_setLog_Code,w
  6440  1490  0081               	movwf	1
  6441                           
  6442                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  6443  1491  0022               	movlb	2	; select bank2
  6444  1492  082E               	movf	(_RF_Data^(0+256)+14),w
  6445  1493  0020               	movlb	0	; select bank0
  6446  1494  00AD               	movwf	??_setLog_Code
  6447  1495  086D               	movf	_product,w
  6448  1496  3E0E               	addlw	14
  6449  1497  0086               	movwf	6
  6450  1498  3002               	movlw	2	; select bank4/5
  6451  1499  0087               	movwf	7
  6452  149A  082D               	movf	??_setLog_Code,w
  6453  149B  0081               	movwf	1
  6454                           
  6455                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  6456  149C  3064               	movlw	100
  6457  149D  00A9               	movwf	setBuz@time
  6458  149E  3000               	movlw	0
  6459  149F  00AA               	movwf	setBuz@time+1
  6460  14A0  3001               	movlw	1
  6461  14A1  3197  27A7  3194   	fcall	_setBuz
  6462                           
  6463                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  6464  14A4  0021               	movlb	1	; select bank1
  6465  14A5  133F               	bcf	_RF1^(0+128),6
  6466                           
  6467                           ;RF_Control_B1.c: 293: if (myMain.First) {
  6468  14A6  1C21               	btfss	(_myMain^(0+128)+1),0
  6469  14A7  2CAA               	goto	l2264
  6470                           
  6471                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  6472  14A8  0023               	movlb	3	; select bank3
  6473  14A9  1544               	bsf	(_Memory^(0+384)+36),2
  6474  14AA                     l2264:	
  6475                           
  6476                           ;RF_Control_B1.c: 295: }
  6477                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  6478  14AA  0023               	movlb	3	; select bank3
  6479  14AB  1444               	bsf	(_Memory^(0+384)+36),0
  6480  14AC  0008               	return
  6481  14AD                     __end_of_setLog_Code:	
  6482                           
  6483                           	psect	text22
  6484  0F51                     __ptext22:	
  6485 ;; *************** function _setControl_Lights_Table *****************
  6486 ;; Defined at:
  6487 ;;		line 300 in file "../src/RF_Control_B1.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:   11
  6508 ;; This function calls:
  6509 ;;		_setBuz
  6510 ;;		_setDimmerLights
  6511 ;;		_setRFSW_AdjControl
  6512 ;;		_setRFSW_Control
  6513 ;;		_setRFSW_Status
  6514 ;;		_setSw_Status
  6515 ;;		_setTxData
  6516 ;; This function is called by:
  6517 ;;		_getRxData
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _setControl_Lights_Table
  6523  0F51                     _setControl_Lights_Table:	
  6524                           
  6525                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6529  0F51  0022               	movlb	2	; select bank2
  6530  0F52  08AF               	movf	(_RF_Data^(0+256)+15),f
  6531  0F53  1D03               	skipz
  6532  0F54  2FAF               	goto	l8544
  6533                           
  6534                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  6535  0F55  0020               	movlb	0	; select bank0
  6536  0F56  01A3               	clrf	setDimmerLights@status
  6537  0F57  3001               	movlw	1
  6538  0F58  318C  2493  318F   	fcall	_setDimmerLights
  6539                           
  6540                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  6541  0F5B  0020               	movlb	0	; select bank0
  6542  0F5C  01A2               	clrf	setRFSW_Status@command
  6543  0F5D  3001               	movlw	1
  6544  0F5E  319F  2710  318F   	fcall	_setRFSW_Status
  6545                           
  6546                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  6547  0F61  0020               	movlb	0	; select bank0
  6548  0F62  01A2               	clrf	setSw_Status@command
  6549  0F63  3001               	movlw	1
  6550  0F64  319F  271F  318F   	fcall	_setSw_Status
  6551                           
  6552                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  6553  0F67  0020               	movlb	0	; select bank0
  6554  0F68  01A3               	clrf	setDimmerLights@status
  6555  0F69  3002               	movlw	2
  6556  0F6A  318C  2493  318F   	fcall	_setDimmerLights
  6557                           
  6558                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  6559  0F6D  0020               	movlb	0	; select bank0
  6560  0F6E  01A2               	clrf	setRFSW_Status@command
  6561  0F6F  3002               	movlw	2
  6562  0F70  319F  2710  318F   	fcall	_setRFSW_Status
  6563                           
  6564                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  6565  0F73  0020               	movlb	0	; select bank0
  6566  0F74  01A2               	clrf	setSw_Status@command
  6567  0F75  3002               	movlw	2
  6568  0F76  319F  271F  318F   	fcall	_setSw_Status
  6569                           
  6570                           ;RF_Control_B1.c: 313: setDimmerLights(3, 0);
  6571  0F79  0020               	movlb	0	; select bank0
  6572  0F7A  01A3               	clrf	setDimmerLights@status
  6573  0F7B  3003               	movlw	3
  6574  0F7C  318C  2493  318F   	fcall	_setDimmerLights
  6575                           
  6576                           ;RF_Control_B1.c: 314: setRFSW_Status(3, 0);
  6577  0F7F  0020               	movlb	0	; select bank0
  6578  0F80  01A2               	clrf	setRFSW_Status@command
  6579  0F81  3003               	movlw	3
  6580  0F82  319F  2710  318F   	fcall	_setRFSW_Status
  6581                           
  6582                           ;RF_Control_B1.c: 315: setSw_Status(3, 0);
  6583  0F85  0020               	movlb	0	; select bank0
  6584  0F86  01A2               	clrf	setSw_Status@command
  6585  0F87  3003               	movlw	3
  6586  0F88  319F  271F  318F   	fcall	_setSw_Status
  6587                           
  6588                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  6589  0F8B  0020               	movlb	0	; select bank0
  6590  0F8C  086D               	movf	_product,w
  6591  0F8D  3E09               	addlw	9
  6592  0F8E  0086               	movwf	6
  6593  0F8F  3002               	movlw	2	; select bank4/5
  6594  0F90  0087               	movwf	7
  6595  0F91  0181               	clrf	1
  6596                           
  6597                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  6598  0F92  086D               	movf	_product,w
  6599  0F93  3E0B               	addlw	11
  6600  0F94  0086               	movwf	6
  6601  0F95  3002               	movlw	2	; select bank4/5
  6602  0F96  0087               	movwf	7
  6603  0F97  0181               	clrf	1
  6604                           
  6605                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  6606  0F98  086D               	movf	_product,w
  6607  0F99  3E0F               	addlw	15
  6608  0F9A  0086               	movwf	6
  6609  0F9B  3002               	movlw	2	; select bank4/5
  6610  0F9C  0087               	movwf	7
  6611  0F9D  0181               	clrf	1
  6612                           
  6613                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  6614  0F9E  086D               	movf	_product,w
  6615  0F9F  3E11               	addlw	17
  6616  0FA0  0086               	movwf	6
  6617  0FA1  3002               	movlw	2	; select bank4/5
  6618  0FA2  0087               	movwf	7
  6619  0FA3  0181               	clrf	1
  6620                           
  6621                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  6622  0FA4  3064               	movlw	100
  6623  0FA5  00A9               	movwf	setBuz@time
  6624  0FA6  3000               	movlw	0
  6625  0FA7  00AA               	movwf	setBuz@time+1
  6626  0FA8  3001               	movlw	1
  6627  0FA9  3197  27A7  318F   	fcall	_setBuz
  6628                           
  6629                           ;RF_Control_B1.c: 323: setTxData();
  6630  0FAC  3185  25F8         	fcall	_setTxData
  6631                           
  6632                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  6633  0FAE  0008               	return
  6634  0FAF                     l8544:	
  6635  0FAF  0022               	movlb	2	; select bank2
  6636  0FB0  082F               	movf	(_RF_Data^(0+256)+15),w
  6637  0FB1  3A20               	xorlw	32
  6638  0FB2  1D03               	skipz
  6639  0FB3  2FCA               	goto	l8550
  6640                           
  6641                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  6642  0FB4  0020               	movlb	0	; select bank0
  6643  0FB5  086D               	movf	_product,w
  6644  0FB6  3E09               	addlw	9
  6645  0FB7  0086               	movwf	6
  6646  0FB8  3002               	movlw	2	; select bank4/5
  6647  0FB9  0087               	movwf	7
  6648  0FBA  0181               	clrf	1
  6649                           
  6650                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  6651  0FBB  086D               	movf	_product,w
  6652  0FBC  3E0B               	addlw	11
  6653  0FBD  0086               	movwf	6
  6654  0FBE  3002               	movlw	2	; select bank4/5
  6655  0FBF  0087               	movwf	7
  6656  0FC0  0181               	clrf	1
  6657                           
  6658                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  6659  0FC1  086D               	movf	_product,w
  6660  0FC2  3E11               	addlw	17
  6661  0FC3  0086               	movwf	6
  6662  0FC4  3002               	movlw	2	; select bank4/5
  6663  0FC5  0087               	movwf	7
  6664  0FC6  0181               	clrf	1
  6665                           
  6666                           ;RF_Control_B1.c: 328: setTxData();
  6667  0FC7  3185  25F8         	fcall	_setTxData
  6668                           
  6669                           ;RF_Control_B1.c: 329: }
  6670  0FC9  0008               	return
  6671  0FCA                     l8550:	
  6672                           
  6673                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  6674  0FCA  0022               	movlb	2	; select bank2
  6675  0FCB  082F               	movf	(_RF_Data^(0+256)+15),w
  6676  0FCC  3A01               	xorlw	1
  6677  0FCD  1D03               	skipz
  6678  0FCE  2FD3               	goto	l8554
  6679                           
  6680                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  6681  0FCF  3001               	movlw	1
  6682  0FD0  3187  2769         	fcall	_setRFSW_Control
  6683                           
  6684                           ;RF_Control_B1.c: 333: }
  6685  0FD2  0008               	return
  6686  0FD3                     l8554:	
  6687                           
  6688                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  6689  0FD3  0022               	movlb	2	; select bank2
  6690  0FD4  082F               	movf	(_RF_Data^(0+256)+15),w
  6691  0FD5  3A11               	xorlw	17
  6692  0FD6  1D03               	skipz
  6693  0FD7  2FDC               	goto	l8558
  6694                           
  6695                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  6696  0FD8  3001               	movlw	1
  6697  0FD9  3194  24E2         	fcall	_setRFSW_AdjControl
  6698                           
  6699                           ;RF_Control_B1.c: 337: }
  6700  0FDB  0008               	return
  6701  0FDC                     l8558:	
  6702                           
  6703                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  6704  0FDC  0022               	movlb	2	; select bank2
  6705  0FDD  082F               	movf	(_RF_Data^(0+256)+15),w
  6706  0FDE  3A02               	xorlw	2
  6707  0FDF  1D03               	skipz
  6708  0FE0  2FE5               	goto	l8562
  6709                           
  6710                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  6711  0FE1  3002               	movlw	2
  6712  0FE2  3187  2769         	fcall	_setRFSW_Control
  6713                           
  6714                           ;RF_Control_B1.c: 344: }
  6715  0FE4  0008               	return
  6716  0FE5                     l8562:	
  6717                           
  6718                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  6719  0FE5  0022               	movlb	2	; select bank2
  6720  0FE6  082F               	movf	(_RF_Data^(0+256)+15),w
  6721  0FE7  3A21               	xorlw	33
  6722  0FE8  1D03               	skipz
  6723  0FE9  2FEE               	goto	l8566
  6724                           
  6725                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  6726  0FEA  3002               	movlw	2
  6727  0FEB  3194  24E2         	fcall	_setRFSW_AdjControl
  6728                           
  6729                           ;RF_Control_B1.c: 348: }
  6730  0FED  0008               	return
  6731  0FEE                     l8566:	
  6732                           
  6733                           ;RF_Control_B1.c: 353: else if (RF_Data[15] == 0x03) {
  6734  0FEE  0022               	movlb	2	; select bank2
  6735  0FEF  082F               	movf	(_RF_Data^(0+256)+15),w
  6736  0FF0  3A03               	xorlw	3
  6737  0FF1  1D03               	skipz
  6738  0FF2  2FF7               	goto	l8570
  6739                           
  6740                           ;RF_Control_B1.c: 354: setRFSW_Control(3);
  6741  0FF3  3003               	movlw	3
  6742  0FF4  3187  2769         	fcall	_setRFSW_Control
  6743                           
  6744                           ;RF_Control_B1.c: 355: }
  6745  0FF6  0008               	return
  6746  0FF7                     l8570:	
  6747                           
  6748                           ;RF_Control_B1.c: 357: else if (RF_Data[15] == 0x31) {
  6749  0FF7  0022               	movlb	2	; select bank2
  6750  0FF8  082F               	movf	(_RF_Data^(0+256)+15),w
  6751  0FF9  3A31               	xorlw	49
  6752  0FFA  1D03               	skipz
  6753  0FFB  0008               	return
  6754                           
  6755                           ;RF_Control_B1.c: 358: setRFSW_AdjControl(3);
  6756  0FFC  3003               	movlw	3
  6757  0FFD  3194  24E2         	fcall	_setRFSW_AdjControl
  6758  0FFF  0008               	return
  6759  1000                     __end_of_setControl_Lights_Table:	
  6760                           
  6761                           	psect	text23
  6762  0769                     __ptext23:	
  6763 ;; *************** function _setRFSW_Control *****************
  6764 ;; Defined at:
  6765 ;;		line 388 in file "../src/RF_Control_B1.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  sw              1    wreg     unsigned char 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  sw              1   67[BANK0 ] unsigned char 
  6770 ;; Return value:  Size  Location     Type
  6771 ;;		None               void
  6772 ;; Registers used:
  6773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;Total ram usage:        2 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    9
  6786 ;; This function calls:
  6787 ;;		_RfSWPointSelect
  6788 ;;		_setBuz
  6789 ;;		_setDelayOff_GO
  6790 ;;		_setDimmerLights_Switch
  6791 ;;		_setDimmerLights_Trigger
  6792 ;;		_setRF_DimmerLights
  6793 ;;		_setSw_Status
  6794 ;;		_setTxData
  6795 ;; This function is called by:
  6796 ;;		_setControl_Lights_Table
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _setRFSW_Control
  6802  0769                     _setRFSW_Control:	
  6803                           
  6804                           ;incstack = 0
  6805                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6806                           ;setRFSW_Control@sw stored from wreg
  6807  0769  0020               	movlb	0	; select bank0
  6808  076A  00E3               	movwf	setRFSW_Control@sw
  6809                           
  6810                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  6811  076B  0863               	movf	setRFSW_Control@sw,w
  6812  076C  3192  2235  3187   	fcall	_RfSWPointSelect
  6813                           
  6814                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  6815  076F  0021               	movlb	1	; select bank1
  6816  0770  0857               	movf	_RFSW^(0+128),w
  6817  0771  0086               	movwf	6
  6818  0772  0187               	clrf	7
  6819  0773  1801               	btfsc	1,0
  6820  0774  2FAB               	goto	l8434
  6821                           
  6822                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  6823  0775  0022               	movlb	2	; select bank2
  6824  0776  0830               	movf	(_RF_Data^(0+256)+16),w
  6825  0777  3A80               	xorlw	128
  6826  0778  1D03               	skipz
  6827  0779  2F87               	goto	l8424
  6828                           
  6829                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  6830  077A  0020               	movlb	0	; select bank0
  6831  077B  01AA               	clrf	setDelayOff_GO@command
  6832  077C  0AAA               	incf	setDelayOff_GO@command,f
  6833  077D  0022               	movlb	2	; select bank2
  6834  077E  0831               	movf	(_RF_Data^(0+256)+17),w
  6835  077F  0020               	movlb	0	; select bank0
  6836  0780  00E2               	movwf	??_setRFSW_Control
  6837  0781  0862               	movf	??_setRFSW_Control,w
  6838  0782  00AB               	movwf	setDelayOff_GO@value
  6839  0783  0863               	movf	setRFSW_Control@sw,w
  6840  0784  3188  207D  3187   	fcall	_setDelayOff_GO
  6841  0787                     l8424:	
  6842                           
  6843                           ;RF_Control_B1.c: 393: }
  6844                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  6845  0787  0021               	movlb	1	; select bank1
  6846  0788  0857               	movf	_RFSW^(0+128),w
  6847  0789  0086               	movwf	6
  6848  078A  0187               	clrf	7
  6849  078B  1401               	bsf	1,0
  6850                           
  6851                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  6852  078C  0020               	movlb	0	; select bank0
  6853  078D  01A2               	clrf	setSw_Status@command
  6854  078E  0AA2               	incf	setSw_Status@command,f
  6855  078F  0863               	movf	setRFSW_Control@sw,w
  6856  0790  319F  271F  3187   	fcall	_setSw_Status
  6857                           
  6858                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  6859  0793  0020               	movlb	0	; select bank0
  6860  0794  01A2               	clrf	setDimmerLights_Trigger@command
  6861  0795  0AA2               	incf	setDimmerLights_Trigger@command,f
  6862  0796  0863               	movf	setRFSW_Control@sw,w
  6863  0797  319F  276B  3187   	fcall	_setDimmerLights_Trigger
  6864                           
  6865                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  6866  079A  0020               	movlb	0	; select bank0
  6867  079B  01A2               	clrf	setDimmerLights_Switch@command
  6868  079C  0AA2               	incf	setDimmerLights_Switch@command,f
  6869  079D  0863               	movf	setRFSW_Control@sw,w
  6870  079E  319F  275B  3187   	fcall	_setDimmerLights_Switch
  6871                           
  6872                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  6873  07A1  0021               	movlb	1	; select bank1
  6874  07A2  0857               	movf	_RFSW^(0+128),w
  6875  07A3  0086               	movwf	6
  6876  07A4  0187               	clrf	7
  6877  07A5  3000               	movlw	0
  6878  07A6  1801               	btfsc	1,0
  6879  07A7  3001               	movlw	1
  6880  07A8  0020               	movlb	0	; select bank0
  6881  07A9  00DD               	movwf	setRF_DimmerLights@on
  6882  07AA  2FE9               	goto	L5
  6883  07AB                     l8434:	
  6884                           ;RF_Control_B1.c: 401: } else {
  6885                           
  6886                           
  6887                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  6888  07AB  0022               	movlb	2	; select bank2
  6889  07AC  0830               	movf	(_RF_Data^(0+256)+16),w
  6890  07AD  3A80               	xorlw	128
  6891  07AE  1D03               	skipz
  6892  07AF  2FC1               	goto	l8438
  6893                           
  6894                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  6895  07B0  0020               	movlb	0	; select bank0
  6896  07B1  01AA               	clrf	setDelayOff_GO@command
  6897  07B2  0AAA               	incf	setDelayOff_GO@command,f
  6898  07B3  0022               	movlb	2	; select bank2
  6899  07B4  0831               	movf	(_RF_Data^(0+256)+17),w
  6900  07B5  0020               	movlb	0	; select bank0
  6901  07B6  00E2               	movwf	??_setRFSW_Control
  6902  07B7  0862               	movf	??_setRFSW_Control,w
  6903  07B8  00AB               	movwf	setDelayOff_GO@value
  6904  07B9  0863               	movf	setRFSW_Control@sw,w
  6905  07BA  3188  207D  3187   	fcall	_setDelayOff_GO
  6906                           
  6907                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  6908  07BD  0020               	movlb	0	; select bank0
  6909  07BE  01DD               	clrf	setRF_DimmerLights@on
  6910  07BF  0ADD               	incf	setRF_DimmerLights@on,f
  6911  07C0  2FE9               	goto	L5
  6912  07C1                     l8438:	
  6913                           ;RF_Control_B1.c: 405: } else {
  6914                           
  6915                           
  6916                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  6917  07C1  0021               	movlb	1	; select bank1
  6918  07C2  0857               	movf	_RFSW^(0+128),w
  6919  07C3  0086               	movwf	6
  6920  07C4  0187               	clrf	7
  6921  07C5  1001               	bcf	1,0
  6922                           
  6923                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  6924  07C6  0020               	movlb	0	; select bank0
  6925  07C7  01A2               	clrf	setSw_Status@command
  6926  07C8  0863               	movf	setRFSW_Control@sw,w
  6927  07C9  319F  271F  3187   	fcall	_setSw_Status
  6928                           
  6929                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  6930  07CC  0020               	movlb	0	; select bank0
  6931  07CD  01A2               	clrf	setDimmerLights_Trigger@command
  6932  07CE  0AA2               	incf	setDimmerLights_Trigger@command,f
  6933  07CF  0863               	movf	setRFSW_Control@sw,w
  6934  07D0  319F  276B  3187   	fcall	_setDimmerLights_Trigger
  6935                           
  6936                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  6937  07D3  0021               	movlb	1	; select bank1
  6938  07D4  0857               	movf	_RFSW^(0+128),w
  6939  07D5  0086               	movwf	6
  6940  07D6  0187               	clrf	7
  6941  07D7  3000               	movlw	0
  6942  07D8  1801               	btfsc	1,0
  6943  07D9  3001               	movlw	1
  6944  07DA  0020               	movlb	0	; select bank0
  6945  07DB  00A2               	movwf	setDimmerLights_Switch@command
  6946  07DC  0863               	movf	setRFSW_Control@sw,w
  6947  07DD  319F  275B  3187   	fcall	_setDimmerLights_Switch
  6948                           
  6949                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  6950  07E0  0020               	movlb	0	; select bank0
  6951  07E1  01AA               	clrf	setDelayOff_GO@command
  6952  07E2  01AB               	clrf	setDelayOff_GO@value
  6953  07E3  0863               	movf	setRFSW_Control@sw,w
  6954  07E4  3188  207D  3187   	fcall	_setDelayOff_GO
  6955                           
  6956                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  6957  07E7  0020               	movlb	0	; select bank0
  6958  07E8  01DD               	clrf	setRF_DimmerLights@on
  6959  07E9                     L5:	
  6960  07E9  0863               	movf	setRFSW_Control@sw,w
  6961  07EA  318A  22D6  3187   	fcall	_setRF_DimmerLights
  6962                           
  6963                           ;RF_Control_B1.c: 414: }
  6964                           ;RF_Control_B1.c: 415: }
  6965                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  6966  07ED  3064               	movlw	100
  6967  07EE  0020               	movlb	0	; select bank0
  6968  07EF  00A9               	movwf	setBuz@time
  6969  07F0  3000               	movlw	0
  6970  07F1  00AA               	movwf	setBuz@time+1
  6971  07F2  3001               	movlw	1
  6972  07F3  3197  27A7  3187   	fcall	_setBuz
  6973                           
  6974                           ;RF_Control_B1.c: 417: setTxData();
  6975  07F6  3185  25F8         	fcall	_setTxData
  6976  07F8  0008               	return
  6977  07F9                     __end_of_setRFSW_Control:	
  6978                           
  6979                           	psect	text24
  6980  087D                     __ptext24:	
  6981 ;; *************** function _setDelayOff_GO *****************
  6982 ;; Defined at:
  6983 ;;		line 86 in file "../src/DelayOff_B1.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;  sw              1    wreg     unsigned char 
  6986 ;;  command         1   10[BANK0 ] unsigned char 
  6987 ;;  value           1   11[BANK0 ] unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  sw              1   14[BANK0 ] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;		None               void
  6992 ;; Registers used:
  6993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6999 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;Total ram usage:        5 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    7
  7006 ;; This function calls:
  7007 ;;		_DelayOffPointSelect
  7008 ;;		_DelayTimejudge
  7009 ;; This function is called by:
  7010 ;;		_setRFSW_Control
  7011 ;;		_Sw_DimmerOffFunc
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _setDelayOff_GO
  7017  087D                     _setDelayOff_GO:	
  7018                           
  7019                           ;incstack = 0
  7020                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7021                           ;setDelayOff_GO@sw stored from wreg
  7022  087D  0020               	movlb	0	; select bank0
  7023  087E  00AE               	movwf	setDelayOff_GO@sw
  7024                           
  7025                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7026  087F  082E               	movf	setDelayOff_GO@sw,w
  7027  0880  3191  21BD  3188   	fcall	_DelayOffPointSelect
  7028                           
  7029                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7030  0883  0872               	movf	_DelayOff,w
  7031  0884  0086               	movwf	6
  7032  0885  0187               	clrf	7
  7033  0886  1C01               	btfss	1,0
  7034  0887  0008               	return
  7035                           
  7036                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7037  0888  0020               	movlb	0	; select bank0
  7038  0889  082A               	movf	setDelayOff_GO@command,w
  7039  088A  3A01               	xorlw	1
  7040  088B  3000               	movlw	0
  7041  088C  1903               	skipnz
  7042  088D  3001               	movlw	1
  7043  088E  00AC               	movwf	??_setDelayOff_GO
  7044  088F  0872               	movf	_DelayOff,w
  7045  0890  0086               	movwf	6
  7046  0891  0187               	clrf	7
  7047  0892  0DAC               	rlf	??_setDelayOff_GO,f
  7048  0893  0801               	movf	1,w
  7049  0894  062C               	xorwf	??_setDelayOff_GO,w
  7050  0895  39FD               	andlw	-3
  7051  0896  062C               	xorwf	??_setDelayOff_GO,w
  7052  0897  0081               	movwf	1
  7053                           
  7054                           ;DelayOff_B1.c: 90: if (command == 1) {
  7055  0898  082A               	movf	setDelayOff_GO@command,w
  7056  0899  3A01               	xorlw	1
  7057  089A  1D03               	skipz
  7058  089B  28C5               	goto	l8244
  7059                           
  7060                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7061  089C  082B               	movf	setDelayOff_GO@value,w
  7062  089D  3193  239B  3188   	fcall	_DelayTimejudge
  7063  08A0  0020               	movlb	0	; select bank0
  7064  08A1  00AC               	movwf	??_setDelayOff_GO
  7065  08A2  0872               	movf	_DelayOff,w
  7066  08A3  0086               	movwf	6
  7067  08A4  0187               	clrf	7
  7068  08A5  082C               	movf	??_setDelayOff_GO,w
  7069  08A6  0081               	movwf	1
  7070                           
  7071                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7072  08A7  300F               	movlw	15
  7073  08A8  052B               	andwf	setDelayOff_GO@value,w
  7074  08A9  00AC               	movwf	??_setDelayOff_GO
  7075  08AA  082C               	movf	??_setDelayOff_GO,w
  7076  08AB  3A05               	xorlw	5
  7077  08AC  1903               	skipnz
  7078  08AD  28B2               	goto	l8238
  7079  08AE  082B               	movf	setDelayOff_GO@value,w
  7080  08AF  390F               	andlw	15
  7081  08B0  1D03               	btfss	3,2
  7082  08B1  28B8               	goto	l8242
  7083  08B2                     l8238:	
  7084  08B2  3026               	movlw	38
  7085  08B3  022B               	subwf	setDelayOff_GO@value,w
  7086  08B4  1803               	skipnc
  7087  08B5  28B8               	goto	l8242
  7088                           
  7089                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7090  08B6  082B               	movf	setDelayOff_GO@value,w
  7091  08B7  28B9               	goto	L6
  7092  08B8                     l8242:	
  7093                           ;DelayOff_B1.c: 94: } else {
  7094                           
  7095                           
  7096                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7097  08B8  3005               	movlw	5
  7098  08B9                     L6:	
  7099  08B9  00AC               	movwf	??_setDelayOff_GO
  7100  08BA  082E               	movf	setDelayOff_GO@sw,w
  7101  08BB  3E1A               	addlw	26
  7102  08BC  076D               	addwf	_product,w
  7103  08BD  00AD               	movwf	??_setDelayOff_GO+1
  7104  08BE  082D               	movf	??_setDelayOff_GO+1,w
  7105  08BF  0086               	movwf	6
  7106  08C0  3002               	movlw	2	; select bank4/5
  7107  08C1  0087               	movwf	7
  7108  08C2  082C               	movf	??_setDelayOff_GO,w
  7109  08C3  0081               	movwf	1
  7110                           
  7111                           ;DelayOff_B1.c: 96: }
  7112                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7113  08C4  28D1               	goto	l8248
  7114  08C5                     l8244:	
  7115  08C5  08AA               	movf	setDelayOff_GO@command,f
  7116  08C6  1D03               	skipz
  7117  08C7  28D1               	goto	l8248
  7118                           
  7119                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7120  08C8  082E               	movf	setDelayOff_GO@sw,w
  7121  08C9  3E1A               	addlw	26
  7122  08CA  076D               	addwf	_product,w
  7123  08CB  00AC               	movwf	??_setDelayOff_GO
  7124  08CC  082C               	movf	??_setDelayOff_GO,w
  7125  08CD  0086               	movwf	6
  7126  08CE  3002               	movlw	2	; select bank4/5
  7127  08CF  0087               	movwf	7
  7128  08D0  0181               	clrf	1
  7129  08D1                     l8248:	
  7130                           
  7131                           ;DelayOff_B1.c: 99: }
  7132                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7133  08D1  0872               	movf	_DelayOff,w
  7134  08D2  0086               	movwf	6
  7135  08D3  0187               	clrf	7
  7136  08D4  3000               	movlw	0
  7137  08D5  3FC0               	movwi [0]fsr1
  7138  08D6  3FC1               	movwi [1]fsr1
  7139                           
  7140                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7141  08D7  0872               	movf	_DelayOff,w
  7142  08D8  0086               	movwf	6
  7143  08D9  0187               	clrf	7
  7144  08DA  0181               	clrf	1
  7145  08DB  0008               	return
  7146  08DC                     __end_of_setDelayOff_GO:	
  7147                           
  7148                           	psect	text25
  7149  139B                     __ptext25:	
  7150 ;; *************** function _DelayTimejudge *****************
  7151 ;; Defined at:
  7152 ;;		line 106 in file "../src/DelayOff_B1.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  value           1    wreg     unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  value           1    9[BANK0 ] unsigned char 
  7157 ;;  k               1    8[BANK0 ] unsigned char 
  7158 ;;  j               1    7[BANK0 ] unsigned char 
  7159 ;;  i               1    6[BANK0 ] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      unsigned char 
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0, pclath, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;Total ram usage:        6 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    6
  7176 ;; This function calls:
  7177 ;;		___bmul
  7178 ;; This function is called by:
  7179 ;;		_setDelayOff_GO
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _DelayTimejudge
  7185  139B                     _DelayTimejudge:	
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7189                           ;DelayTimejudge@value stored from wreg
  7190  139B  0020               	movlb	0	; select bank0
  7191  139C  00A9               	movwf	DelayTimejudge@value
  7192                           
  7193                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7194  139D  3005               	movlw	5
  7195  139E  00A4               	movwf	??_DelayTimejudge
  7196  139F  0824               	movf	??_DelayTimejudge,w
  7197  13A0  00A6               	movwf	DelayTimejudge@i
  7198  13A1  01A7               	clrf	DelayTimejudge@j
  7199  13A2  01A8               	clrf	DelayTimejudge@k
  7200                           
  7201                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7202  13A3  3031               	movlw	49
  7203  13A4  0229               	subwf	DelayTimejudge@value,w
  7204  13A5  1803               	skipnc
  7205  13A6  2BC3               	goto	l8032
  7206                           
  7207                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7208  13A7  0829               	movf	DelayTimejudge@value,w
  7209  13A8  390F               	andlw	15
  7210  13A9  00A4               	movwf	??_DelayTimejudge
  7211  13AA  0824               	movf	??_DelayTimejudge,w
  7212  13AB  00A7               	movwf	DelayTimejudge@j
  7213                           
  7214                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7215  13AC  0829               	movf	DelayTimejudge@value,w
  7216  13AD  00A4               	movwf	??_DelayTimejudge
  7217  13AE  3004               	movlw	4
  7218  13AF                     u7955:	
  7219  13AF  36A4               	lsrf	??_DelayTimejudge,f
  7220  13B0  0B89               	decfsz	9,f
  7221  13B1  2BAF               	goto	u7955
  7222  13B2  0824               	movf	??_DelayTimejudge,w
  7223  13B3  390F               	andlw	15
  7224  13B4  00A5               	movwf	??_DelayTimejudge+1
  7225  13B5  0825               	movf	??_DelayTimejudge+1,w
  7226  13B6  00A8               	movwf	DelayTimejudge@k
  7227                           
  7228                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7229  13B7  300A               	movlw	10
  7230  13B8  00A4               	movwf	??_DelayTimejudge
  7231  13B9  0824               	movf	??_DelayTimejudge,w
  7232  13BA  00A0               	movwf	___bmul@multiplicand
  7233  13BB  0828               	movf	DelayTimejudge@k,w
  7234  13BC  3190  206B         	fcall	___bmul
  7235  13BE  0020               	movlb	0	; select bank0
  7236  13BF  0727               	addwf	DelayTimejudge@j,w
  7237  13C0  00A5               	movwf	??_DelayTimejudge+1
  7238  13C1  0825               	movf	??_DelayTimejudge+1,w
  7239  13C2  00A6               	movwf	DelayTimejudge@i
  7240  13C3                     l8032:	
  7241                           
  7242                           ;DelayOff_B1.c: 112: }
  7243                           ;DelayOff_B1.c: 133: return i;
  7244  13C3  0826               	movf	DelayTimejudge@i,w
  7245  13C4  0008               	return
  7246  13C5                     __end_of_DelayTimejudge:	
  7247                           
  7248                           	psect	text26
  7249  106B                     __ptext26:	
  7250 ;; *************** function ___bmul *****************
  7251 ;; Defined at:
  7252 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  multiplier      1    wreg     unsigned char 
  7255 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7258 ;;  product         1    2[BANK0 ] unsigned char 
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      unsigned char 
  7261 ;; Registers used:
  7262 ;;		wreg, status,2, status,0
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7268 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;Total ram usage:        4 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    5
  7275 ;; This function calls:
  7276 ;;		Nothing
  7277 ;; This function is called by:
  7278 ;;		_DelayTimejudge
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           
  7283                           ;psect for function ___bmul
  7284  106B                     ___bmul:	
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7288                           ;___bmul@multiplier stored from wreg
  7289  106B  0020               	movlb	0	; select bank0
  7290  106C  00A3               	movwf	___bmul@multiplier
  7291  106D  01A2               	clrf	___bmul@product
  7292  106E                     l7994:	
  7293  106E  1C23               	btfss	___bmul@multiplier,0
  7294  106F  2874               	goto	l7998
  7295  1070  0820               	movf	___bmul@multiplicand,w
  7296  1071  00A1               	movwf	??___bmul
  7297  1072  0821               	movf	??___bmul,w
  7298  1073  07A2               	addwf	___bmul@product,f
  7299  1074                     l7998:	
  7300  1074  1003               	clrc
  7301  1075  0DA0               	rlf	___bmul@multiplicand,f
  7302  1076  1003               	clrc
  7303  1077  0CA3               	rrf	___bmul@multiplier,f
  7304  1078  08A3               	movf	___bmul@multiplier,f
  7305  1079  1D03               	skipz
  7306  107A  286E               	goto	l7994
  7307  107B  0822               	movf	___bmul@product,w
  7308  107C  0008               	return
  7309  107D                     __end_of___bmul:	
  7310                           
  7311                           	psect	text27
  7312  14E2                     __ptext27:	
  7313 ;; *************** function _setRFSW_AdjControl *****************
  7314 ;; Defined at:
  7315 ;;		line 421 in file "../src/RF_Control_B1.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  sw              1    wreg     unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  sw              1   70[BANK0 ] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;		None               void
  7322 ;; Registers used:
  7323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;Total ram usage:        3 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:   10
  7336 ;; This function calls:
  7337 ;;		_RfSWPointSelect
  7338 ;;		_setRF_DimmerValue
  7339 ;;		_setTxData
  7340 ;; This function is called by:
  7341 ;;		_setControl_Lights_Table
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           
  7346                           ;psect for function _setRFSW_AdjControl
  7347  14E2                     _setRFSW_AdjControl:	
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7351                           ;setRFSW_AdjControl@sw stored from wreg
  7352  14E2  0020               	movlb	0	; select bank0
  7353  14E3  00E6               	movwf	setRFSW_AdjControl@sw
  7354                           
  7355                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  7356  14E4  0866               	movf	setRFSW_AdjControl@sw,w
  7357  14E5  3192  2235  3194   	fcall	_RfSWPointSelect
  7358                           
  7359                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  7360  14E8  0021               	movlb	1	; select bank1
  7361  14E9  0857               	movf	_RFSW^(0+128),w
  7362  14EA  0086               	movwf	6
  7363  14EB  0187               	clrf	7
  7364  14EC  1C01               	btfss	1,0
  7365  14ED  2CF6               	goto	l8462
  7366                           
  7367                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  7368  14EE  0023               	movlb	3	; select bank3
  7369  14EF  1444               	bsf	(_Memory^(0+384)+36),0
  7370                           
  7371                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  7372  14F0  0020               	movlb	0	; select bank0
  7373  14F1  0866               	movf	setRFSW_AdjControl@sw,w
  7374  14F2  3194  24AD  3194   	fcall	_setRF_DimmerValue
  7375                           
  7376                           ;RF_Control_B1.c: 426: } else {
  7377  14F5  2D08               	goto	l2301
  7378  14F6                     l8462:	
  7379                           
  7380                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  7381  14F6  0020               	movlb	0	; select bank0
  7382  14F7  0866               	movf	setRFSW_AdjControl@sw,w
  7383  14F8  3E14               	addlw	20
  7384  14F9  076D               	addwf	_product,w
  7385  14FA  00E4               	movwf	??_setRFSW_AdjControl
  7386  14FB  0864               	movf	??_setRFSW_AdjControl,w
  7387  14FC  0086               	movwf	6
  7388  14FD  3002               	movlw	2	; select bank4/5
  7389  14FE  0087               	movwf	7
  7390  14FF  0801               	movf	1,w
  7391  1500  00E5               	movwf	??_setRFSW_AdjControl+1
  7392  1501  086D               	movf	_product,w
  7393  1502  3E09               	addlw	9
  7394  1503  0086               	movwf	6
  7395  1504  3002               	movlw	2	; select bank4/5
  7396  1505  0087               	movwf	7
  7397  1506  0865               	movf	??_setRFSW_AdjControl+1,w
  7398  1507  0081               	movwf	1
  7399  1508                     l2301:	
  7400                           
  7401                           ;RF_Control_B1.c: 428: }
  7402                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  7403  1508  0020               	movlb	0	; select bank0
  7404  1509  0866               	movf	setRFSW_AdjControl@sw,w
  7405  150A  3E1A               	addlw	26
  7406  150B  076D               	addwf	_product,w
  7407  150C  00E4               	movwf	??_setRFSW_AdjControl
  7408  150D  0864               	movf	??_setRFSW_AdjControl,w
  7409  150E  0086               	movwf	6
  7410  150F  3002               	movlw	2	; select bank4/5
  7411  1510  0087               	movwf	7
  7412  1511  0801               	movf	1,w
  7413  1512  00E5               	movwf	??_setRFSW_AdjControl+1
  7414  1513  086D               	movf	_product,w
  7415  1514  3E11               	addlw	17
  7416  1515  0086               	movwf	6
  7417  1516  3002               	movlw	2	; select bank4/5
  7418  1517  0087               	movwf	7
  7419  1518  0865               	movf	??_setRFSW_AdjControl+1,w
  7420  1519  0081               	movwf	1
  7421                           
  7422                           ;RF_Control_B1.c: 430: setTxData();
  7423  151A  3185  25F8         	fcall	_setTxData
  7424  151C  0008               	return
  7425  151D                     __end_of_setRFSW_AdjControl:	
  7426                           
  7427                           	psect	text28
  7428  14AD                     __ptext28:	
  7429 ;; *************** function _setRF_DimmerValue *****************
  7430 ;; Defined at:
  7431 ;;		line 441 in file "../src/RF_Control_B1.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  lights          1    wreg     unsigned char 
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;  lights          1   67[BANK0 ] unsigned char 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;		None               void
  7438 ;; Registers used:
  7439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;Total ram usage:        3 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    9
  7452 ;; This function calls:
  7453 ;;		_setDimmerLights_AdjRF
  7454 ;; This function is called by:
  7455 ;;		_setRFSW_AdjControl
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _setRF_DimmerValue
  7461  14AD                     _setRF_DimmerValue:	
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7465                           ;setRF_DimmerValue@lights stored from wreg
  7466  14AD  0020               	movlb	0	; select bank0
  7467  14AE  00E3               	movwf	setRF_DimmerValue@lights
  7468                           
  7469                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  7470  14AF  3065               	movlw	101
  7471  14B0  0022               	movlb	2	; select bank2
  7472  14B1  0229               	subwf	(_RF_Data^(0+256)+9),w
  7473  14B2  1C03               	skipc
  7474  14B3  2CBA               	goto	l8332
  7475                           
  7476                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  7477  14B4  3064               	movlw	100
  7478  14B5  0020               	movlb	0	; select bank0
  7479  14B6  00E1               	movwf	??_setRF_DimmerValue
  7480  14B7  0861               	movf	??_setRF_DimmerValue,w
  7481  14B8  0022               	movlb	2	; select bank2
  7482  14B9  00A9               	movwf	(_RF_Data^(0+256)+9)
  7483  14BA                     l8332:	
  7484                           
  7485                           ;RF_Control_B1.c: 444: }
  7486                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  7487  14BA  0829               	movf	(_RF_Data^(0+256)+9),w
  7488  14BB  0020               	movlb	0	; select bank0
  7489  14BC  00E1               	movwf	??_setRF_DimmerValue
  7490  14BD  086D               	movf	_product,w
  7491  14BE  3E09               	addlw	9
  7492  14BF  0086               	movwf	6
  7493  14C0  3002               	movlw	2	; select bank4/5
  7494  14C1  0087               	movwf	7
  7495  14C2  0861               	movf	??_setRF_DimmerValue,w
  7496  14C3  0081               	movwf	1
  7497                           
  7498                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  7499  14C4  0863               	movf	setRF_DimmerValue@lights,w
  7500  14C5  00E1               	movwf	??_setRF_DimmerValue
  7501  14C6  086D               	movf	_product,w
  7502  14C7  3E0B               	addlw	11
  7503  14C8  0086               	movwf	6
  7504  14C9  3002               	movlw	2	; select bank4/5
  7505  14CA  0087               	movwf	7
  7506  14CB  0861               	movf	??_setRF_DimmerValue,w
  7507  14CC  0081               	movwf	1
  7508                           
  7509                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  7510  14CD  086D               	movf	_product,w
  7511  14CE  3E09               	addlw	9
  7512  14CF  0086               	movwf	6
  7513  14D0  3002               	movlw	2	; select bank4/5
  7514  14D1  0087               	movwf	7
  7515  14D2  0801               	movf	1,w
  7516  14D3  00E1               	movwf	??_setRF_DimmerValue
  7517  14D4  0863               	movf	setRF_DimmerValue@lights,w
  7518  14D5  3E14               	addlw	20
  7519  14D6  076D               	addwf	_product,w
  7520  14D7  00E2               	movwf	??_setRF_DimmerValue+1
  7521  14D8  0862               	movf	??_setRF_DimmerValue+1,w
  7522  14D9  0086               	movwf	6
  7523  14DA  3002               	movlw	2	; select bank4/5
  7524  14DB  0087               	movwf	7
  7525  14DC  0861               	movf	??_setRF_DimmerValue,w
  7526  14DD  0081               	movwf	1
  7527                           
  7528                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  7529  14DE  0863               	movf	setRF_DimmerValue@lights,w
  7530  14DF  3192  22D9         	fcall	_setDimmerLights_AdjRF
  7531  14E1  0008               	return
  7532  14E2                     __end_of_setRF_DimmerValue:	
  7533                           
  7534                           	psect	text29
  7535  12D9                     __ptext29:	
  7536 ;; *************** function _setDimmerLights_AdjRF *****************
  7537 ;; Defined at:
  7538 ;;		line 688 in file "../src/Dimmer_B1.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;  lights          1    wreg     unsigned char 
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  lights          1   64[BANK0 ] unsigned char 
  7543 ;; Return value:  Size  Location     Type
  7544 ;;		None               void
  7545 ;; Registers used:
  7546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;Total ram usage:        2 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    8
  7559 ;; This function calls:
  7560 ;;		_DimmerLightsPointSelect
  7561 ;;		_getPercentValue
  7562 ;; This function is called by:
  7563 ;;		_setRF_DimmerValue
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           
  7568                           ;psect for function _setDimmerLights_AdjRF
  7569  12D9                     _setDimmerLights_AdjRF:	
  7570                           
  7571                           ;incstack = 0
  7572                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7573                           ;setDimmerLights_AdjRF@lights stored from wreg
  7574  12D9  0020               	movlb	0	; select bank0
  7575  12DA  00E0               	movwf	setDimmerLights_AdjRF@lights
  7576                           
  7577                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  7578  12DB  0860               	movf	setDimmerLights_AdjRF@lights,w
  7579  12DC  3191  2185  3192   	fcall	_DimmerLightsPointSelect
  7580                           
  7581                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  7582  12DF  0020               	movlb	0	; select bank0
  7583  12E0  086B               	movf	_DimmerLights,w
  7584  12E1  0086               	movwf	6
  7585  12E2  3001               	movlw	1	; select bank2/3
  7586  12E3  0087               	movwf	7
  7587  12E4  1501               	bsf	1,2
  7588                           
  7589                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  7590  12E5  086B               	movf	_DimmerLights,w
  7591  12E6  0086               	movwf	6
  7592  12E7  3001               	movlw	1	; select bank2/3
  7593  12E8  0087               	movwf	7
  7594  12E9  1481               	bsf	1,1
  7595                           
  7596                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7597  12EA  086D               	movf	_product,w
  7598  12EB  3E09               	addlw	9
  7599  12EC  0086               	movwf	6
  7600  12ED  3002               	movlw	2	; select bank4/5
  7601  12EE  0087               	movwf	7
  7602  12EF  0801               	movf	1,w
  7603  12F0  3188  2022         	fcall	_getPercentValue
  7604  12F2  0020               	movlb	0	; select bank0
  7605  12F3  00DF               	movwf	??_setDimmerLights_AdjRF
  7606  12F4  086B               	movf	_DimmerLights,w
  7607  12F5  3E05               	addlw	5
  7608  12F6  0086               	movwf	6
  7609  12F7  3001               	movlw	1	; select bank2/3
  7610  12F8  0087               	movwf	7
  7611  12F9  085F               	movf	??_setDimmerLights_AdjRF,w
  7612  12FA  0081               	movwf	1
  7613  12FB  0008               	return
  7614  12FC                     __end_of_setDimmerLights_AdjRF:	
  7615                           
  7616                           	psect	text30
  7617  0822                     __ptext30:	
  7618 ;; *************** function _getPercentValue *****************
  7619 ;; Defined at:
  7620 ;;		line 761 in file "../src/Dimmer_B1.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  value           1    wreg     unsigned char 
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  value           1   59[BANK0 ] unsigned char 
  7625 ;;  i               3   60[BANK0 ] float 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      unsigned char 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0, pclath, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;Total ram usage:        6 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    7
  7642 ;; This function calls:
  7643 ;;		___awtoft
  7644 ;;		___ftadd
  7645 ;;		___ftdiv
  7646 ;;		___ftmul
  7647 ;;		___fttol
  7648 ;; This function is called by:
  7649 ;;		_setDimmerLights_AdjRF
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _getPercentValue
  7655  0822                     _getPercentValue:	
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7659                           ;getPercentValue@value stored from wreg
  7660  0822  0020               	movlb	0	; select bank0
  7661  0823  00DB               	movwf	getPercentValue@value
  7662                           
  7663                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
  7664  0824  3000               	movlw	0
  7665  0825  00DC               	movwf	getPercentValue@i
  7666  0826  3050               	movlw	80
  7667  0827  00DD               	movwf	getPercentValue@i+1
  7668  0828  3042               	movlw	66
  7669  0829  00DE               	movwf	getPercentValue@i+2
  7670                           
  7671                           ;Dimmer_B1.c: 764: i /= 100;
  7672  082A  3000               	movlw	0
  7673  082B  00AE               	movwf	___ftdiv@f2
  7674  082C  30C8               	movlw	200
  7675  082D  00AF               	movwf	___ftdiv@f2+1
  7676  082E  3042               	movlw	66
  7677  082F  00B0               	movwf	___ftdiv@f2+2
  7678  0830  085C               	movf	getPercentValue@i,w
  7679  0831  00B1               	movwf	___ftdiv@f1
  7680  0832  085D               	movf	getPercentValue@i+1,w
  7681  0833  00B2               	movwf	___ftdiv@f1+1
  7682  0834  085E               	movf	getPercentValue@i+2,w
  7683  0835  00B3               	movwf	___ftdiv@f1+2
  7684  0836  318E  26A8  3188   	fcall	___ftdiv
  7685  0839  0020               	movlb	0	; select bank0
  7686  083A  082E               	movf	?___ftdiv,w
  7687  083B  00DC               	movwf	getPercentValue@i
  7688  083C  082F               	movf	?___ftdiv+1,w
  7689  083D  00DD               	movwf	getPercentValue@i+1
  7690  083E  0830               	movf	?___ftdiv+2,w
  7691  083F  00DE               	movwf	getPercentValue@i+2
  7692                           
  7693                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-90)*0.8)));
  7694  0840  085B               	movf	getPercentValue@value,w
  7695  0841  00D9               	movwf	??_getPercentValue
  7696  0842  01DA               	clrf	??_getPercentValue+1
  7697  0843  09D9               	comf	??_getPercentValue,f
  7698  0844  09DA               	comf	??_getPercentValue+1,f
  7699  0845  0AD9               	incf	??_getPercentValue,f
  7700  0846  1903               	skipnz
  7701  0847  0ADA               	incf	??_getPercentValue+1,f
  7702  0848  0859               	movf	??_getPercentValue,w
  7703  0849  3E64               	addlw	100
  7704  084A  00A8               	movwf	___awtoft@c
  7705  084B  3000               	movlw	0
  7706  084C  3D5A               	addwfc	??_getPercentValue+1,w
  7707  084D  00A9               	movwf	___awtoft@c+1
  7708  084E  3192  22B7  3188   	fcall	___awtoft
  7709  0851  0020               	movlb	0	; select bank0
  7710  0852  0828               	movf	?___awtoft,w
  7711  0853  00B1               	movwf	___ftmul@f2
  7712  0854  0829               	movf	?___awtoft+1,w
  7713  0855  00B2               	movwf	___ftmul@f2+1
  7714  0856  082A               	movf	?___awtoft+2,w
  7715  0857  00B3               	movwf	___ftmul@f2+2
  7716  0858  085C               	movf	getPercentValue@i,w
  7717  0859  00AE               	movwf	___ftmul@f1
  7718  085A  085D               	movf	getPercentValue@i+1,w
  7719  085B  00AF               	movwf	___ftmul@f1+1
  7720  085C  085E               	movf	getPercentValue@i+2,w
  7721  085D  00B0               	movwf	___ftmul@f1+2
  7722  085E  3186  26B5  3188   	fcall	___ftmul
  7723  0861  0020               	movlb	0	; select bank0
  7724  0862  082E               	movf	?___ftmul,w
  7725  0863  00C1               	movwf	___ftadd@f2
  7726  0864  082F               	movf	?___ftmul+1,w
  7727  0865  00C2               	movwf	___ftadd@f2+1
  7728  0866  0830               	movf	?___ftmul+2,w
  7729  0867  00C3               	movwf	___ftadd@f2+2
  7730  0868  3000               	movlw	0
  7731  0869  00BE               	movwf	___ftadd@f1
  7732  086A  3000               	movlw	0
  7733  086B  00BF               	movwf	___ftadd@f1+1
  7734  086C  3041               	movlw	65
  7735  086D  00C0               	movwf	___ftadd@f1+2
  7736  086E  3183  2360  3188   	fcall	___ftadd
  7737  0871  0020               	movlb	0	; select bank0
  7738  0872  083E               	movf	?___ftadd,w
  7739  0873  00CB               	movwf	___fttol@f1
  7740  0874  083F               	movf	?___ftadd+1,w
  7741  0875  00CC               	movwf	___fttol@f1+1
  7742  0876  0840               	movf	?___ftadd+2,w
  7743  0877  00CD               	movwf	___fttol@f1+2
  7744  0878  318D  2597         	fcall	___fttol
  7745  087A  0020               	movlb	0	; select bank0
  7746  087B  084B               	movf	?___fttol,w
  7747  087C  0008               	return
  7748  087D                     __end_of_getPercentValue:	
  7749                           
  7750                           	psect	text31
  7751  06B5                     __ptext31:	
  7752 ;; *************** function ___ftmul *****************
  7753 ;; Defined at:
  7754 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  f1              3   14[BANK0 ] float 
  7757 ;;  f2              3   17[BANK0 ] float 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7760 ;;  sign            1   29[BANK0 ] unsigned char 
  7761 ;;  cntr            1   28[BANK0 ] unsigned char 
  7762 ;;  exp             1   24[BANK0 ] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  3   14[BANK0 ] float 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2, status,0, pclath, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7772 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;Total ram usage:       16 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    6
  7779 ;; This function calls:
  7780 ;;		___ftpack
  7781 ;; This function is called by:
  7782 ;;		_getPercentValue
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           
  7787                           ;psect for function ___ftmul
  7788  06B5                     ___ftmul:	
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7792  06B5  0020               	movlb	0	; select bank0
  7793  06B6  082E               	movf	___ftmul@f1,w
  7794  06B7  00B4               	movwf	??___ftmul
  7795  06B8  082F               	movf	___ftmul@f1+1,w
  7796  06B9  00B5               	movwf	??___ftmul+1
  7797  06BA  0830               	movf	___ftmul@f1+2,w
  7798  06BB  00B6               	movwf	??___ftmul+2
  7799  06BC  1003               	clrc
  7800  06BD  0D35               	rlf	??___ftmul+1,w
  7801  06BE  0D36               	rlf	??___ftmul+2,w
  7802  06BF  00B7               	movwf	??___ftmul+3
  7803  06C0  0837               	movf	??___ftmul+3,w
  7804  06C1  00B8               	movwf	___ftmul@exp
  7805  06C2  08B8               	movf	___ftmul@exp,f
  7806  06C3  1D03               	skipz
  7807  06C4  2ECC               	goto	l5766
  7808  06C5  3000               	movlw	0
  7809  06C6  00AE               	movwf	?___ftmul
  7810  06C7  3000               	movlw	0
  7811  06C8  00AF               	movwf	?___ftmul+1
  7812  06C9  3000               	movlw	0
  7813  06CA  00B0               	movwf	?___ftmul+2
  7814  06CB  0008               	return
  7815  06CC                     l5766:	
  7816  06CC  0831               	movf	___ftmul@f2,w
  7817  06CD  00B4               	movwf	??___ftmul
  7818  06CE  0832               	movf	___ftmul@f2+1,w
  7819  06CF  00B5               	movwf	??___ftmul+1
  7820  06D0  0833               	movf	___ftmul@f2+2,w
  7821  06D1  00B6               	movwf	??___ftmul+2
  7822  06D2  1003               	clrc
  7823  06D3  0D35               	rlf	??___ftmul+1,w
  7824  06D4  0D36               	rlf	??___ftmul+2,w
  7825  06D5  00B7               	movwf	??___ftmul+3
  7826  06D6  0837               	movf	??___ftmul+3,w
  7827  06D7  00BD               	movwf	___ftmul@sign
  7828  06D8  08BD               	movf	___ftmul@sign,f
  7829  06D9  1D03               	skipz
  7830  06DA  2EE2               	goto	l5772
  7831  06DB  3000               	movlw	0
  7832  06DC  00AE               	movwf	?___ftmul
  7833  06DD  3000               	movlw	0
  7834  06DE  00AF               	movwf	?___ftmul+1
  7835  06DF  3000               	movlw	0
  7836  06E0  00B0               	movwf	?___ftmul+2
  7837  06E1  0008               	return
  7838  06E2                     l5772:	
  7839  06E2  083D               	movf	___ftmul@sign,w
  7840  06E3  3E7B               	addlw	123
  7841  06E4  00B4               	movwf	??___ftmul
  7842  06E5  0834               	movf	??___ftmul,w
  7843  06E6  07B8               	addwf	___ftmul@exp,f
  7844  06E7  082E               	movf	___ftmul@f1,w
  7845  06E8  00B4               	movwf	??___ftmul
  7846  06E9  082F               	movf	___ftmul@f1+1,w
  7847  06EA  00B5               	movwf	??___ftmul+1
  7848  06EB  0830               	movf	___ftmul@f1+2,w
  7849  06EC  00B6               	movwf	??___ftmul+2
  7850  06ED  3010               	movlw	16
  7851  06EE                     u4385:	
  7852  06EE  36B6               	lsrf	??___ftmul+2,f
  7853  06EF  0CB5               	rrf	??___ftmul+1,f
  7854  06F0  0CB4               	rrf	??___ftmul,f
  7855  06F1  0B89               	decfsz	9,f
  7856  06F2  2EEE               	goto	u4385
  7857  06F3  0834               	movf	??___ftmul,w
  7858  06F4  00B7               	movwf	??___ftmul+3
  7859  06F5  0837               	movf	??___ftmul+3,w
  7860  06F6  00BD               	movwf	___ftmul@sign
  7861  06F7  0831               	movf	___ftmul@f2,w
  7862  06F8  00B4               	movwf	??___ftmul
  7863  06F9  0832               	movf	___ftmul@f2+1,w
  7864  06FA  00B5               	movwf	??___ftmul+1
  7865  06FB  0833               	movf	___ftmul@f2+2,w
  7866  06FC  00B6               	movwf	??___ftmul+2
  7867  06FD  3010               	movlw	16
  7868  06FE                     u4395:	
  7869  06FE  36B6               	lsrf	??___ftmul+2,f
  7870  06FF  0CB5               	rrf	??___ftmul+1,f
  7871  0700  0CB4               	rrf	??___ftmul,f
  7872  0701  0B89               	decfsz	9,f
  7873  0702  2EFE               	goto	u4395
  7874  0703  0834               	movf	??___ftmul,w
  7875  0704  00B7               	movwf	??___ftmul+3
  7876  0705  0837               	movf	??___ftmul+3,w
  7877  0706  06BD               	xorwf	___ftmul@sign,f
  7878  0707  3080               	movlw	128
  7879  0708  00B4               	movwf	??___ftmul
  7880  0709  0834               	movf	??___ftmul,w
  7881  070A  05BD               	andwf	___ftmul@sign,f
  7882  070B  17AF               	bsf	___ftmul@f1+1,7
  7883  070C  17B2               	bsf	___ftmul@f2+1,7
  7884  070D  30FF               	movlw	255
  7885  070E  05B1               	andwf	___ftmul@f2,f
  7886  070F  30FF               	movlw	255
  7887  0710  05B2               	andwf	___ftmul@f2+1,f
  7888  0711  3000               	movlw	0
  7889  0712  05B3               	andwf	___ftmul@f2+2,f
  7890  0713  3000               	movlw	0
  7891  0714  00B9               	movwf	___ftmul@f3_as_product
  7892  0715  3000               	movlw	0
  7893  0716  00BA               	movwf	___ftmul@f3_as_product+1
  7894  0717  3000               	movlw	0
  7895  0718  00BB               	movwf	___ftmul@f3_as_product+2
  7896  0719  3007               	movlw	7
  7897  071A  00B4               	movwf	??___ftmul
  7898  071B  0834               	movf	??___ftmul,w
  7899  071C  00BC               	movwf	___ftmul@cntr
  7900  071D                     l5784:	
  7901  071D  1C2E               	btfss	___ftmul@f1,0
  7902  071E  2F25               	goto	l5788
  7903  071F  0831               	movf	___ftmul@f2,w
  7904  0720  07B9               	addwf	___ftmul@f3_as_product,f
  7905  0721  0832               	movf	___ftmul@f2+1,w
  7906  0722  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7907  0723  0833               	movf	___ftmul@f2+2,w
  7908  0724  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7909  0725                     l5788:	
  7910  0725  3001               	movlw	1
  7911  0726                     u4415:	
  7912  0726  36B0               	lsrf	___ftmul@f1+2,f
  7913  0727  0CAF               	rrf	___ftmul@f1+1,f
  7914  0728  0CAE               	rrf	___ftmul@f1,f
  7915  0729  0B89               	decfsz	9,f
  7916  072A  2F26               	goto	u4415
  7917  072B  3001               	movlw	1
  7918  072C                     u4425:	
  7919  072C  35B1               	lslf	___ftmul@f2,f
  7920  072D  0DB2               	rlf	___ftmul@f2+1,f
  7921  072E  0DB3               	rlf	___ftmul@f2+2,f
  7922  072F  0B89               	decfsz	9,f
  7923  0730  2F2C               	goto	u4425
  7924  0731  3001               	movlw	1
  7925  0732  02BC               	subwf	___ftmul@cntr,f
  7926  0733  1D03               	btfss	3,2
  7927  0734  2F1D               	goto	l5784
  7928  0735  3009               	movlw	9
  7929  0736  00B4               	movwf	??___ftmul
  7930  0737  0834               	movf	??___ftmul,w
  7931  0738  00BC               	movwf	___ftmul@cntr
  7932  0739                     l5796:	
  7933  0739  1C2E               	btfss	___ftmul@f1,0
  7934  073A  2F41               	goto	l5800
  7935  073B  0831               	movf	___ftmul@f2,w
  7936  073C  07B9               	addwf	___ftmul@f3_as_product,f
  7937  073D  0832               	movf	___ftmul@f2+1,w
  7938  073E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7939  073F  0833               	movf	___ftmul@f2+2,w
  7940  0740  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7941  0741                     l5800:	
  7942  0741  3001               	movlw	1
  7943  0742                     u4455:	
  7944  0742  36B0               	lsrf	___ftmul@f1+2,f
  7945  0743  0CAF               	rrf	___ftmul@f1+1,f
  7946  0744  0CAE               	rrf	___ftmul@f1,f
  7947  0745  0B89               	decfsz	9,f
  7948  0746  2F42               	goto	u4455
  7949  0747  3001               	movlw	1
  7950  0748                     u4465:	
  7951  0748  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7952  0749  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7953  074A  0CB9               	rrf	___ftmul@f3_as_product,f
  7954  074B  0B89               	decfsz	9,f
  7955  074C  2F48               	goto	u4465
  7956  074D  3001               	movlw	1
  7957  074E  02BC               	subwf	___ftmul@cntr,f
  7958  074F  1D03               	btfss	3,2
  7959  0750  2F39               	goto	l5796
  7960  0751  0839               	movf	___ftmul@f3_as_product,w
  7961  0752  00A0               	movwf	___ftpack@arg
  7962  0753  083A               	movf	___ftmul@f3_as_product+1,w
  7963  0754  00A1               	movwf	___ftpack@arg+1
  7964  0755  083B               	movf	___ftmul@f3_as_product+2,w
  7965  0756  00A2               	movwf	___ftpack@arg+2
  7966  0757  0838               	movf	___ftmul@exp,w
  7967  0758  00B4               	movwf	??___ftmul
  7968  0759  0834               	movf	??___ftmul,w
  7969  075A  00A3               	movwf	___ftpack@exp
  7970  075B  083D               	movf	___ftmul@sign,w
  7971  075C  00B5               	movwf	??___ftmul+1
  7972  075D  0835               	movf	??___ftmul+1,w
  7973  075E  00A4               	movwf	___ftpack@sign
  7974  075F  3189  213C         	fcall	___ftpack
  7975  0761  0020               	movlb	0	; select bank0
  7976  0762  0820               	movf	?___ftpack,w
  7977  0763  00AE               	movwf	?___ftmul
  7978  0764  0821               	movf	?___ftpack+1,w
  7979  0765  00AF               	movwf	?___ftmul+1
  7980  0766  0822               	movf	?___ftpack+2,w
  7981  0767  00B0               	movwf	?___ftmul+2
  7982  0768  0008               	return
  7983  0769                     __end_of___ftmul:	
  7984                           
  7985                           	psect	text32
  7986  0360                     __ptext32:	
  7987 ;; *************** function ___ftadd *****************
  7988 ;; Defined at:
  7989 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  f1              3   30[BANK0 ] float 
  7992 ;;  f2              3   33[BANK0 ] float 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  exp1            1   42[BANK0 ] unsigned char 
  7995 ;;  exp2            1   41[BANK0 ] unsigned char 
  7996 ;;  sign            1   40[BANK0 ] unsigned char 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  3   30[BANK0 ] float 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0, pclath, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8006 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;Total ram usage:       13 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    6
  8013 ;; This function calls:
  8014 ;;		___ftpack
  8015 ;; This function is called by:
  8016 ;;		_getPercentValue
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function ___ftadd
  8022  0360                     ___ftadd:	
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8026  0360  0020               	movlb	0	; select bank0
  8027  0361  083E               	movf	___ftadd@f1,w
  8028  0362  00C4               	movwf	??___ftadd
  8029  0363  083F               	movf	___ftadd@f1+1,w
  8030  0364  00C5               	movwf	??___ftadd+1
  8031  0365  0840               	movf	___ftadd@f1+2,w
  8032  0366  00C6               	movwf	??___ftadd+2
  8033  0367  1003               	clrc
  8034  0368  0D45               	rlf	??___ftadd+1,w
  8035  0369  0D46               	rlf	??___ftadd+2,w
  8036  036A  00C7               	movwf	??___ftadd+3
  8037  036B  0847               	movf	??___ftadd+3,w
  8038  036C  00CA               	movwf	___ftadd@exp1
  8039  036D  0841               	movf	___ftadd@f2,w
  8040  036E  00C4               	movwf	??___ftadd
  8041  036F  0842               	movf	___ftadd@f2+1,w
  8042  0370  00C5               	movwf	??___ftadd+1
  8043  0371  0843               	movf	___ftadd@f2+2,w
  8044  0372  00C6               	movwf	??___ftadd+2
  8045  0373  1003               	clrc
  8046  0374  0D45               	rlf	??___ftadd+1,w
  8047  0375  0D46               	rlf	??___ftadd+2,w
  8048  0376  00C7               	movwf	??___ftadd+3
  8049  0377  0847               	movf	??___ftadd+3,w
  8050  0378  00C9               	movwf	___ftadd@exp2
  8051  0379  084A               	movf	___ftadd@exp1,w
  8052  037A  1903               	btfsc	3,2
  8053  037B  2B88               	goto	l5654
  8054  037C  0849               	movf	___ftadd@exp2,w
  8055  037D  024A               	subwf	___ftadd@exp1,w
  8056  037E  1803               	skipnc
  8057  037F  2B8F               	goto	l5658
  8058  0380  034A               	decf	___ftadd@exp1,w
  8059  0381  3AFF               	xorlw	255
  8060  0382  0749               	addwf	___ftadd@exp2,w
  8061  0383  00C4               	movwf	??___ftadd
  8062  0384  3019               	movlw	25
  8063  0385  0244               	subwf	??___ftadd,w
  8064  0386  1C03               	skipc
  8065  0387  2B8F               	goto	l5658
  8066  0388                     l5654:	
  8067  0388  0841               	movf	___ftadd@f2,w
  8068  0389  00BE               	movwf	?___ftadd
  8069  038A  0842               	movf	___ftadd@f2+1,w
  8070  038B  00BF               	movwf	?___ftadd+1
  8071  038C  0843               	movf	___ftadd@f2+2,w
  8072  038D  00C0               	movwf	?___ftadd+2
  8073  038E  0008               	return
  8074  038F                     l5658:	
  8075  038F  0849               	movf	___ftadd@exp2,w
  8076  0390  1903               	btfsc	3,2
  8077  0391  0008               	return
  8078  0392  084A               	movf	___ftadd@exp1,w
  8079  0393  0249               	subwf	___ftadd@exp2,w
  8080  0394  1803               	skipnc
  8081  0395  2B9E               	goto	l5664
  8082  0396  0349               	decf	___ftadd@exp2,w
  8083  0397  3AFF               	xorlw	255
  8084  0398  074A               	addwf	___ftadd@exp1,w
  8085  0399  00C4               	movwf	??___ftadd
  8086  039A  3019               	movlw	25
  8087  039B  0244               	subwf	??___ftadd,w
  8088  039C  1803               	btfsc	3,0
  8089  039D  0008               	return
  8090  039E                     l5664:	
  8091  039E  3006               	movlw	6
  8092  039F  00C4               	movwf	??___ftadd
  8093  03A0  0844               	movf	??___ftadd,w
  8094  03A1  00C8               	movwf	___ftadd@sign
  8095  03A2  1BC0               	btfsc	___ftadd@f1+2,7
  8096  03A3  17C8               	bsf	___ftadd@sign,7
  8097  03A4  1BC3               	btfsc	___ftadd@f2+2,7
  8098  03A5  1748               	bsf	___ftadd@sign,6
  8099  03A6  17BF               	bsf	___ftadd@f1+1,7
  8100  03A7  30FF               	movlw	255
  8101  03A8  05BE               	andwf	___ftadd@f1,f
  8102  03A9  30FF               	movlw	255
  8103  03AA  05BF               	andwf	___ftadd@f1+1,f
  8104  03AB  3000               	movlw	0
  8105  03AC  05C0               	andwf	___ftadd@f1+2,f
  8106  03AD  17C2               	bsf	___ftadd@f2+1,7
  8107  03AE  30FF               	movlw	255
  8108  03AF  05C1               	andwf	___ftadd@f2,f
  8109  03B0  30FF               	movlw	255
  8110  03B1  05C2               	andwf	___ftadd@f2+1,f
  8111  03B2  3000               	movlw	0
  8112  03B3  05C3               	andwf	___ftadd@f2+2,f
  8113  03B4  0849               	movf	___ftadd@exp2,w
  8114  03B5  024A               	subwf	___ftadd@exp1,w
  8115  03B6  1803               	skipnc
  8116  03B7  2BDA               	goto	l5686
  8117  03B8                     l5676:	
  8118  03B8  3001               	movlw	1
  8119  03B9                     u4145:	
  8120  03B9  35C1               	lslf	___ftadd@f2,f
  8121  03BA  0DC2               	rlf	___ftadd@f2+1,f
  8122  03BB  0DC3               	rlf	___ftadd@f2+2,f
  8123  03BC  0B89               	decfsz	9,f
  8124  03BD  2BB9               	goto	u4145
  8125  03BE  3001               	movlw	1
  8126  03BF  02C9               	subwf	___ftadd@exp2,f
  8127  03C0  0849               	movf	___ftadd@exp2,w
  8128  03C1  064A               	xorwf	___ftadd@exp1,w
  8129  03C2  1903               	skipnz
  8130  03C3  2BD5               	goto	l5684
  8131  03C4  3001               	movlw	1
  8132  03C5  02C8               	subwf	___ftadd@sign,f
  8133  03C6  0848               	movf	___ftadd@sign,w
  8134  03C7  3907               	andlw	7
  8135  03C8  1903               	btfsc	3,2
  8136  03C9  2BD5               	goto	l5684
  8137  03CA  2BB8               	goto	l5676
  8138  03CB                     l5682:	
  8139  03CB  3001               	movlw	1
  8140  03CC                     u4175:	
  8141  03CC  36C0               	lsrf	___ftadd@f1+2,f
  8142  03CD  0CBF               	rrf	___ftadd@f1+1,f
  8143  03CE  0CBE               	rrf	___ftadd@f1,f
  8144  03CF  0B89               	decfsz	9,f
  8145  03D0  2BCC               	goto	u4175
  8146  03D1  3001               	movlw	1
  8147  03D2  00C4               	movwf	??___ftadd
  8148  03D3  0844               	movf	??___ftadd,w
  8149  03D4  07CA               	addwf	___ftadd@exp1,f
  8150  03D5                     l5684:	
  8151  03D5  084A               	movf	___ftadd@exp1,w
  8152  03D6  0649               	xorwf	___ftadd@exp2,w
  8153  03D7  1903               	btfsc	3,2
  8154  03D8  2BFF               	goto	l3049
  8155  03D9  2BCB               	goto	l5682
  8156  03DA                     l5686:	
  8157  03DA  084A               	movf	___ftadd@exp1,w
  8158  03DB  0249               	subwf	___ftadd@exp2,w
  8159  03DC  1803               	skipnc
  8160  03DD  2BFF               	goto	l3049
  8161  03DE                     l5688:	
  8162  03DE  3001               	movlw	1
  8163  03DF                     u4205:	
  8164  03DF  35BE               	lslf	___ftadd@f1,f
  8165  03E0  0DBF               	rlf	___ftadd@f1+1,f
  8166  03E1  0DC0               	rlf	___ftadd@f1+2,f
  8167  03E2  0B89               	decfsz	9,f
  8168  03E3  2BDF               	goto	u4205
  8169  03E4  3001               	movlw	1
  8170  03E5  02CA               	subwf	___ftadd@exp1,f
  8171  03E6  0849               	movf	___ftadd@exp2,w
  8172  03E7  064A               	xorwf	___ftadd@exp1,w
  8173  03E8  1903               	skipnz
  8174  03E9  2BFB               	goto	l5696
  8175  03EA  3001               	movlw	1
  8176  03EB  02C8               	subwf	___ftadd@sign,f
  8177  03EC  0848               	movf	___ftadd@sign,w
  8178  03ED  3907               	andlw	7
  8179  03EE  1903               	btfsc	3,2
  8180  03EF  2BFB               	goto	l5696
  8181  03F0  2BDE               	goto	l5688
  8182  03F1                     l5694:	
  8183  03F1  3001               	movlw	1
  8184  03F2                     u4235:	
  8185  03F2  36C3               	lsrf	___ftadd@f2+2,f
  8186  03F3  0CC2               	rrf	___ftadd@f2+1,f
  8187  03F4  0CC1               	rrf	___ftadd@f2,f
  8188  03F5  0B89               	decfsz	9,f
  8189  03F6  2BF2               	goto	u4235
  8190  03F7  3001               	movlw	1
  8191  03F8  00C4               	movwf	??___ftadd
  8192  03F9  0844               	movf	??___ftadd,w
  8193  03FA  07C9               	addwf	___ftadd@exp2,f
  8194  03FB                     l5696:	
  8195  03FB  084A               	movf	___ftadd@exp1,w
  8196  03FC  0649               	xorwf	___ftadd@exp2,w
  8197  03FD  1D03               	skipz
  8198  03FE  2BF1               	goto	l5694
  8199  03FF                     l3049:	
  8200  03FF  1FC8               	btfss	___ftadd@sign,7
  8201  0400  2C11               	goto	l5700
  8202  0401  30FF               	movlw	255
  8203  0402  06BE               	xorwf	___ftadd@f1,f
  8204  0403  30FF               	movlw	255
  8205  0404  06BF               	xorwf	___ftadd@f1+1,f
  8206  0405  30FF               	movlw	255
  8207  0406  06C0               	xorwf	___ftadd@f1+2,f
  8208  0407  3001               	movlw	1
  8209  0408  07BE               	addwf	___ftadd@f1,f
  8210  0409  3000               	movlw	0
  8211  040A  1803               	skipnc
  8212  040B  3001               	movlw	1
  8213  040C  07BF               	addwf	___ftadd@f1+1,f
  8214  040D  3000               	movlw	0
  8215  040E  1803               	skipnc
  8216  040F  3001               	movlw	1
  8217  0410  07C0               	addwf	___ftadd@f1+2,f
  8218  0411                     l5700:	
  8219  0411  1F48               	btfss	___ftadd@sign,6
  8220  0412  2C23               	goto	l5704
  8221  0413  30FF               	movlw	255
  8222  0414  06C1               	xorwf	___ftadd@f2,f
  8223  0415  30FF               	movlw	255
  8224  0416  06C2               	xorwf	___ftadd@f2+1,f
  8225  0417  30FF               	movlw	255
  8226  0418  06C3               	xorwf	___ftadd@f2+2,f
  8227  0419  3001               	movlw	1
  8228  041A  07C1               	addwf	___ftadd@f2,f
  8229  041B  3000               	movlw	0
  8230  041C  1803               	skipnc
  8231  041D  3001               	movlw	1
  8232  041E  07C2               	addwf	___ftadd@f2+1,f
  8233  041F  3000               	movlw	0
  8234  0420  1803               	skipnc
  8235  0421  3001               	movlw	1
  8236  0422  07C3               	addwf	___ftadd@f2+2,f
  8237  0423                     l5704:	
  8238  0423  01C8               	clrf	___ftadd@sign
  8239  0424  083E               	movf	___ftadd@f1,w
  8240  0425  07C1               	addwf	___ftadd@f2,f
  8241  0426  083F               	movf	___ftadd@f1+1,w
  8242  0427  3DC2               	addwfc	___ftadd@f2+1,f
  8243  0428  0840               	movf	___ftadd@f1+2,w
  8244  0429  3DC3               	addwfc	___ftadd@f2+2,f
  8245  042A  1FC3               	btfss	___ftadd@f2+2,7
  8246  042B  2C3E               	goto	l5714
  8247  042C  30FF               	movlw	255
  8248  042D  06C1               	xorwf	___ftadd@f2,f
  8249  042E  30FF               	movlw	255
  8250  042F  06C2               	xorwf	___ftadd@f2+1,f
  8251  0430  30FF               	movlw	255
  8252  0431  06C3               	xorwf	___ftadd@f2+2,f
  8253  0432  3001               	movlw	1
  8254  0433  07C1               	addwf	___ftadd@f2,f
  8255  0434  3000               	movlw	0
  8256  0435  1803               	skipnc
  8257  0436  3001               	movlw	1
  8258  0437  07C2               	addwf	___ftadd@f2+1,f
  8259  0438  3000               	movlw	0
  8260  0439  1803               	skipnc
  8261  043A  3001               	movlw	1
  8262  043B  07C3               	addwf	___ftadd@f2+2,f
  8263  043C  01C8               	clrf	___ftadd@sign
  8264  043D  0AC8               	incf	___ftadd@sign,f
  8265  043E                     l5714:	
  8266  043E  0841               	movf	___ftadd@f2,w
  8267  043F  00A0               	movwf	___ftpack@arg
  8268  0440  0842               	movf	___ftadd@f2+1,w
  8269  0441  00A1               	movwf	___ftpack@arg+1
  8270  0442  0843               	movf	___ftadd@f2+2,w
  8271  0443  00A2               	movwf	___ftpack@arg+2
  8272  0444  084A               	movf	___ftadd@exp1,w
  8273  0445  00C4               	movwf	??___ftadd
  8274  0446  0844               	movf	??___ftadd,w
  8275  0447  00A3               	movwf	___ftpack@exp
  8276  0448  0848               	movf	___ftadd@sign,w
  8277  0449  00C5               	movwf	??___ftadd+1
  8278  044A  0845               	movf	??___ftadd+1,w
  8279  044B  00A4               	movwf	___ftpack@sign
  8280  044C  3189  213C         	fcall	___ftpack
  8281  044E  0020               	movlb	0	; select bank0
  8282  044F  0820               	movf	?___ftpack,w
  8283  0450  00BE               	movwf	?___ftadd
  8284  0451  0821               	movf	?___ftpack+1,w
  8285  0452  00BF               	movwf	?___ftadd+1
  8286  0453  0822               	movf	?___ftpack+2,w
  8287  0454  00C0               	movwf	?___ftadd+2
  8288  0455  0008               	return
  8289  0456                     __end_of___ftadd:	
  8290                           
  8291                           	psect	text33
  8292  1FCC                     __ptext33:	
  8293 ;; *************** function _getBuz_GO *****************
  8294 ;; Defined at:
  8295 ;;		line 82 in file "../src/Buzzer_B1.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;		None
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  i               2    4[BANK0 ] int 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  2    0[BANK0 ] int 
  8302 ;; Registers used:
  8303 ;;		wreg, status,2, status,0
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8309 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;Total ram usage:        6 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:    5
  8316 ;; This function calls:
  8317 ;;		Nothing
  8318 ;; This function is called by:
  8319 ;;		_setRF_Main
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           
  8324                           ;psect for function _getBuz_GO
  8325  1FCC                     _getBuz_GO:	
  8326                           
  8327                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8328                           
  8329                           ;incstack = 0
  8330                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8331  1FCC  0021               	movlb	1	; select bank1
  8332  1FCD  0C33               	rrf	_Buz1^(0+128),w
  8333  1FCE  3901               	andlw	1
  8334  1FCF  0020               	movlb	0	; select bank0
  8335  1FD0  00A2               	movwf	??_getBuz_GO
  8336  1FD1  01A3               	clrf	??_getBuz_GO+1
  8337  1FD2  0822               	movf	??_getBuz_GO,w
  8338  1FD3  00A4               	movwf	getBuz_GO@i
  8339  1FD4  0823               	movf	??_getBuz_GO+1,w
  8340  1FD5  00A5               	movwf	getBuz_GO@i+1
  8341                           
  8342                           ;Buzzer_B1.c: 84: return i;
  8343  1FD6  0825               	movf	getBuz_GO@i+1,w
  8344  1FD7  01A1               	clrf	?_getBuz_GO+1
  8345  1FD8  07A1               	addwf	?_getBuz_GO+1,f
  8346  1FD9  0824               	movf	getBuz_GO@i,w
  8347  1FDA  01A0               	clrf	?_getBuz_GO
  8348  1FDB  07A0               	addwf	?_getBuz_GO,f
  8349  1FDC  0008               	return
  8350  1FDD                     __end_of_getBuz_GO:	
  8351                           
  8352                           	psect	text34
  8353  099D                     __ptext34:	
  8354 ;; *************** function _CC2500_TxData *****************
  8355 ;; Defined at:
  8356 ;;		line 32 in file "../src/CC2500_B1.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;		None
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8361 ;; Return value:  Size  Location     Type
  8362 ;;		None               void
  8363 ;; Registers used:
  8364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8365 ;; Tracked objects:
  8366 ;;		On entry : 0/0
  8367 ;;		On exit  : 0/0
  8368 ;;		Unchanged: 0/0
  8369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;Total ram usage:        2 bytes
  8375 ;; Hardware stack levels used:    1
  8376 ;; Hardware stack levels required when called:    7
  8377 ;; This function calls:
  8378 ;;		_CC2500_WriteByte
  8379 ;;		_CC2500_WriteCommand
  8380 ;;		_Timeout_Counter
  8381 ;;		_set_TimeoutCleared
  8382 ;; This function is called by:
  8383 ;;		_setRF_Main
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           
  8388                           ;psect for function _CC2500_TxData
  8389  099D                     _CC2500_TxData:	
  8390                           
  8391                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8392                           ;CC2500_B1.c: 35: RC4 = 0;
  8393                           
  8394                           ;incstack = 0
  8395                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8396  099D  0020               	movlb	0	; select bank0
  8397  099E  120E               	bcf	14,4	;volatile
  8398                           
  8399                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8400  099F  307F               	movlw	127
  8401  09A0  00A4               	movwf	??_CC2500_TxData
  8402  09A1  0824               	movf	??_CC2500_TxData,w
  8403  09A2  00F5               	movwf	_SPI0Buffer
  8404                           
  8405                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8406  09A3  29A7               	goto	l8584
  8407  09A4                     l8582:	
  8408                           
  8409                           ;CC2500_B1.c: 38: Timeout_Counter();
  8410  09A4  3190  20C9  3189   	fcall	_Timeout_Counter
  8411  09A7                     l8584:	
  8412  09A7  0020               	movlb	0	; select bank0
  8413  09A8  1D0E               	btfss	14,2	;volatile
  8414  09A9  29AD               	goto	l8588
  8415  09AA  0021               	movlb	1	; select bank1
  8416  09AB  1D30               	btfss	(_myMain^(0+128)+16),2
  8417  09AC  29A4               	goto	l8582
  8418  09AD                     l8588:	
  8419                           
  8420                           ;CC2500_B1.c: 39: };
  8421                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8422  09AD  3190  2066  3189   	fcall	_set_TimeoutCleared
  8423                           
  8424                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8425  09B0  3190  20B5  3189   	fcall	_CC2500_WriteByte
  8426                           
  8427                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8428  09B3  0021               	movlb	1	; select bank1
  8429  09B4  085A               	movf	_Tx_Length^(0+128),w
  8430  09B5  0020               	movlb	0	; select bank0
  8431  09B6  00A4               	movwf	??_CC2500_TxData
  8432  09B7  0824               	movf	??_CC2500_TxData,w
  8433  09B8  00F5               	movwf	_SPI0Buffer
  8434                           
  8435                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8436  09B9  3190  20B5  3189   	fcall	_CC2500_WriteByte
  8437                           
  8438                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8439  09BC  0020               	movlb	0	; select bank0
  8440  09BD  01A5               	clrf	CC2500_TxData@loop_e
  8441  09BE                     l8602:	
  8442  09BE  0021               	movlb	1	; select bank1
  8443  09BF  085A               	movf	_Tx_Length^(0+128),w
  8444  09C0  0020               	movlb	0	; select bank0
  8445  09C1  0225               	subwf	CC2500_TxData@loop_e,w
  8446  09C2  1803               	btfsc	3,0
  8447  09C3  29D6               	goto	l283
  8448                           
  8449                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8450  09C4  0825               	movf	CC2500_TxData@loop_e,w
  8451  09C5  3E20               	addlw	_RF_Data& (0+255)
  8452  09C6  0086               	movwf	6
  8453  09C7  3001               	movlw	1	; select bank2/3
  8454  09C8  0087               	movwf	7
  8455  09C9  0801               	movf	1,w
  8456  09CA  00A4               	movwf	??_CC2500_TxData
  8457  09CB  0824               	movf	??_CC2500_TxData,w
  8458  09CC  00F5               	movwf	_SPI0Buffer
  8459                           
  8460                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8461  09CD  3190  20B5  3189   	fcall	_CC2500_WriteByte
  8462  09D0  3001               	movlw	1
  8463  09D1  0020               	movlb	0	; select bank0
  8464  09D2  00A4               	movwf	??_CC2500_TxData
  8465  09D3  0824               	movf	??_CC2500_TxData,w
  8466  09D4  07A5               	addwf	CC2500_TxData@loop_e,f
  8467  09D5  29BE               	goto	l8602
  8468  09D6                     l283:	
  8469                           
  8470                           ;CC2500_B1.c: 48: }
  8471                           ;CC2500_B1.c: 49: RC4 = 1;
  8472  09D6  160E               	bsf	14,4	;volatile
  8473                           
  8474                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8475  09D7  3035               	movlw	53
  8476  09D8  3191  2138  3189   	fcall	_CC2500_WriteCommand
  8477                           
  8478                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8479  09DB  29DF               	goto	l8608
  8480  09DC                     l8606:	
  8481                           
  8482                           ;CC2500_B1.c: 52: Timeout_Counter();
  8483  09DC  3190  20C9  3189   	fcall	_Timeout_Counter
  8484  09DF                     l8608:	
  8485  09DF  0020               	movlb	0	; select bank0
  8486  09E0  180D               	btfsc	13,0	;volatile
  8487  09E1  29E5               	goto	l8612
  8488  09E2  0021               	movlb	1	; select bank1
  8489  09E3  1D30               	btfss	(_myMain^(0+128)+16),2
  8490  09E4  29DC               	goto	l8606
  8491  09E5                     l8612:	
  8492                           
  8493                           ;CC2500_B1.c: 53: };
  8494                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8495  09E5  3190  2066  3189   	fcall	_set_TimeoutCleared
  8496                           
  8497                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8498  09E8  29EC               	goto	l8616
  8499  09E9                     l8614:	
  8500                           
  8501                           ;CC2500_B1.c: 57: Timeout_Counter();
  8502  09E9  3190  20C9  3189   	fcall	_Timeout_Counter
  8503  09EC                     l8616:	
  8504  09EC  0020               	movlb	0	; select bank0
  8505  09ED  1C0D               	btfss	13,0	;volatile
  8506  09EE  29F2               	goto	l8620
  8507  09EF  0021               	movlb	1	; select bank1
  8508  09F0  1D30               	btfss	(_myMain^(0+128)+16),2
  8509  09F1  29E9               	goto	l8614
  8510  09F2                     l8620:	
  8511                           
  8512                           ;CC2500_B1.c: 58: };
  8513                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8514  09F2  3190  2066  3189   	fcall	_set_TimeoutCleared
  8515                           
  8516                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8517  09F5  3036               	movlw	54
  8518  09F6  3191  2138  3189   	fcall	_CC2500_WriteCommand
  8519                           
  8520                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8521  09F9  303B               	movlw	59
  8522  09FA  3191  2138  3189   	fcall	_CC2500_WriteCommand
  8523                           
  8524                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8525  09FD  303A               	movlw	58
  8526  09FE  3191  2138         	fcall	_CC2500_WriteCommand
  8527                           
  8528                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8529  0A00  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8530  0A01  0008               	return
  8531  0A02                     __end_of_CC2500_TxData:	
  8532                           
  8533                           	psect	text35
  8534  0C22                     __ptext35:	
  8535 ;; *************** function _CC2500_RxData *****************
  8536 ;; Defined at:
  8537 ;;		line 70 in file "../src/CC2500_B1.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;		None
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8542 ;; Return value:  Size  Location     Type
  8543 ;;		None               void
  8544 ;; Registers used:
  8545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8546 ;; Tracked objects:
  8547 ;;		On entry : 0/0
  8548 ;;		On exit  : 0/0
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;Total ram usage:        2 bytes
  8556 ;; Hardware stack levels used:    1
  8557 ;; Hardware stack levels required when called:    7
  8558 ;; This function calls:
  8559 ;;		_CC2500_ReadByte
  8560 ;;		_CC2500_ReadStatus
  8561 ;;		_CC2500_WriteByte
  8562 ;;		_Timeout_Counter
  8563 ;;		_set_TimeoutCleared
  8564 ;; This function is called by:
  8565 ;;		_setRF_Main
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _CC2500_RxData
  8571  0C22                     _CC2500_RxData:	
  8572                           
  8573                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8574                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8575                           
  8576                           ;incstack = 0
  8577                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8578  0C22  0020               	movlb	0	; select bank0
  8579  0C23  180D               	btfsc	13,0	;volatile
  8580  0C24  2C29               	goto	l8636
  8581  0C25  2C32               	goto	l8642
  8582  0C26                     l8634:	
  8583                           ;CC2500_B1.c: 76: {
  8584                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8585                           
  8586                           
  8587                           ;CC2500_B1.c: 78: Timeout_Counter();
  8588  0C26  3190  20C9  318C   	fcall	_Timeout_Counter
  8589  0C29                     l8636:	
  8590  0C29  0020               	movlb	0	; select bank0
  8591  0C2A  1C0D               	btfss	13,0	;volatile
  8592  0C2B  2C2F               	goto	l8640
  8593  0C2C  0021               	movlb	1	; select bank1
  8594  0C2D  1D30               	btfss	(_myMain^(0+128)+16),2
  8595  0C2E  2C26               	goto	l8634
  8596  0C2F                     l8640:	
  8597                           
  8598                           ;CC2500_B1.c: 79: };
  8599                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8600  0C2F  3190  2066  318C   	fcall	_set_TimeoutCleared
  8601  0C32                     l8642:	
  8602                           
  8603                           ;CC2500_B1.c: 81: }
  8604                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8605  0C32  303B               	movlw	59
  8606  0C33  3188  2000  318C   	fcall	_CC2500_ReadStatus
  8607                           
  8608                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8609  0C36  0021               	movlb	1	; select bank1
  8610  0C37  085D               	movf	_s_data^(0+128),w
  8611  0C38  1903               	btfsc	3,2
  8612  0C39  0008               	return
  8613                           
  8614                           ;CC2500_B1.c: 86: RC4 = 0;
  8615  0C3A  0020               	movlb	0	; select bank0
  8616  0C3B  120E               	bcf	14,4	;volatile
  8617                           
  8618                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8619  0C3C  30FF               	movlw	255
  8620  0C3D  00A4               	movwf	??_CC2500_RxData
  8621  0C3E  0824               	movf	??_CC2500_RxData,w
  8622  0C3F  00F5               	movwf	_SPI0Buffer
  8623                           
  8624                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8625  0C40  2C47               	goto	l8652
  8626  0C41                     l8654:	
  8627  0C41  0021               	movlb	1	; select bank1
  8628  0C42  1930               	btfsc	(_myMain^(0+128)+16),2
  8629  0C43  2C4A               	goto	l308
  8630                           
  8631                           ;CC2500_B1.c: 89: Timeout_Counter();
  8632  0C44  3190  20C9  318C   	fcall	_Timeout_Counter
  8633  0C47                     l8652:	
  8634  0C47  0020               	movlb	0	; select bank0
  8635  0C48  190E               	btfsc	14,2	;volatile
  8636  0C49  2C41               	goto	l8654
  8637  0C4A                     l308:	
  8638                           
  8639                           ;CC2500_B1.c: 90: };
  8640                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8641  0C4A  0021               	movlb	1	; select bank1
  8642  0C4B  1930               	btfsc	(_myMain^(0+128)+16),2
  8643  0C4C  2C8D               	goto	l309
  8644                           
  8645                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8646  0C4D  3190  20B5  318C   	fcall	_CC2500_WriteByte
  8647                           
  8648                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8649  0C50  3191  2109  318C   	fcall	_CC2500_ReadByte
  8650                           
  8651                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8652  0C53  0875               	movf	_SPI0Buffer,w
  8653  0C54  0020               	movlb	0	; select bank0
  8654  0C55  00A4               	movwf	??_CC2500_RxData
  8655  0C56  0824               	movf	??_CC2500_RxData,w
  8656  0C57  0021               	movlb	1	; select bank1
  8657  0C58  00D9               	movwf	_Rx_Length^(0+128)
  8658                           
  8659                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8660  0C59  0020               	movlb	0	; select bank0
  8661  0C5A  01A5               	clrf	CC2500_RxData@loop_f
  8662  0C5B                     l8668:	
  8663  0C5B  0021               	movlb	1	; select bank1
  8664  0C5C  0859               	movf	_Rx_Length^(0+128),w
  8665  0C5D  0020               	movlb	0	; select bank0
  8666  0C5E  0225               	subwf	CC2500_RxData@loop_f,w
  8667  0C5F  1803               	btfsc	3,0
  8668  0C60  2C73               	goto	l8670
  8669                           
  8670                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8671  0C61  3191  2109  318C   	fcall	_CC2500_ReadByte
  8672                           
  8673                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8674  0C64  0875               	movf	_SPI0Buffer,w
  8675  0C65  0020               	movlb	0	; select bank0
  8676  0C66  00A4               	movwf	??_CC2500_RxData
  8677  0C67  0825               	movf	CC2500_RxData@loop_f,w
  8678  0C68  3E20               	addlw	_RF_Data& (0+255)
  8679  0C69  0086               	movwf	6
  8680  0C6A  3001               	movlw	1	; select bank2/3
  8681  0C6B  0087               	movwf	7
  8682  0C6C  0824               	movf	??_CC2500_RxData,w
  8683  0C6D  0081               	movwf	1
  8684  0C6E  3001               	movlw	1
  8685  0C6F  00A4               	movwf	??_CC2500_RxData
  8686  0C70  0824               	movf	??_CC2500_RxData,w
  8687  0C71  07A5               	addwf	CC2500_RxData@loop_f,f
  8688  0C72  2C5B               	goto	l8668
  8689  0C73                     l8670:	
  8690                           
  8691                           ;CC2500_B1.c: 99: }
  8692                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8693  0C73  3191  2109  318C   	fcall	_CC2500_ReadByte
  8694                           
  8695                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8696  0C76  0875               	movf	_SPI0Buffer,w
  8697  0C77  0020               	movlb	0	; select bank0
  8698  0C78  00A4               	movwf	??_CC2500_RxData
  8699  0C79  0824               	movf	??_CC2500_RxData,w
  8700  0C7A  0021               	movlb	1	; select bank1
  8701  0C7B  00D8               	movwf	_RSSI^(0+128)
  8702                           
  8703                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8704  0C7C  3191  2109  318C   	fcall	_CC2500_ReadByte
  8705                           
  8706                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8707  0C7F  0875               	movf	_SPI0Buffer,w
  8708  0C80  0020               	movlb	0	; select bank0
  8709  0C81  00A4               	movwf	??_CC2500_RxData
  8710  0C82  0824               	movf	??_CC2500_RxData,w
  8711  0C83  0021               	movlb	1	; select bank1
  8712  0C84  00D2               	movwf	_CRC^(0+128)
  8713                           
  8714                           ;CC2500_B1.c: 104: RC4 = 1;
  8715  0C85  0020               	movlb	0	; select bank0
  8716  0C86  160E               	bsf	14,4	;volatile
  8717                           
  8718                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8719  0C87  0021               	movlb	1	; select bank1
  8720  0C88  1BD2               	btfsc	_CRC^(0+128),7
  8721                           
  8722                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8723  0C89  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8724                           
  8725                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8726  0C8A  11BF               	bcf	_RF1^(0+128),3
  8727                           
  8728                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8729  0C8B  14BF               	bsf	_RF1^(0+128),1
  8730                           
  8731                           ;CC2500_B1.c: 110: } else {
  8732  0C8C  2C8F               	goto	l8682
  8733  0C8D                     l309:	
  8734                           
  8735                           ;CC2500_B1.c: 111: RC4 = 1;
  8736  0C8D  0020               	movlb	0	; select bank0
  8737  0C8E  160E               	bsf	14,4	;volatile
  8738  0C8F                     l8682:	
  8739                           
  8740                           ;CC2500_B1.c: 112: }
  8741                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8742  0C8F  3190  2066         	fcall	_set_TimeoutCleared
  8743  0C91  0021               	movlb	1	; select bank1
  8744  0C92  0008               	return
  8745  0C93                     __end_of_CC2500_RxData:	
  8746                           
  8747                           	psect	text36
  8748  0800                     __ptext36:	
  8749 ;; *************** function _CC2500_ReadStatus *****************
  8750 ;; Defined at:
  8751 ;;		line 304 in file "../src/CC2500_B1.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  status_addr     1    wreg     unsigned char 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8756 ;; Return value:  Size  Location     Type
  8757 ;;		None               void
  8758 ;; Registers used:
  8759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;Total ram usage:        2 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; Hardware stack levels required when called:    6
  8772 ;; This function calls:
  8773 ;;		_CC2500_ReadByte
  8774 ;;		_CC2500_WriteByte
  8775 ;;		_Timeout_Counter
  8776 ;;		_set_TimeoutCleared
  8777 ;; This function is called by:
  8778 ;;		_CC2500_RxData
  8779 ;;		_setRF_Main
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           
  8784                           ;psect for function _CC2500_ReadStatus
  8785  0800                     _CC2500_ReadStatus:	
  8786                           
  8787                           ;incstack = 0
  8788                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8789                           ;CC2500_ReadStatus@status_addr stored from wreg
  8790  0800  0020               	movlb	0	; select bank0
  8791  0801  00A3               	movwf	CC2500_ReadStatus@status_addr
  8792                           
  8793                           ;CC2500_B1.c: 305: RC4 = 0;
  8794  0802  120E               	bcf	14,4	;volatile
  8795                           
  8796                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8797  0803  0823               	movf	CC2500_ReadStatus@status_addr,w
  8798  0804  3EC0               	addlw	192
  8799  0805  00A2               	movwf	??_CC2500_ReadStatus
  8800  0806  0822               	movf	??_CC2500_ReadStatus,w
  8801  0807  00F5               	movwf	_SPI0Buffer
  8802                           
  8803                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8804  0808  280C               	goto	l8488
  8805  0809                     l8486:	
  8806                           
  8807                           ;CC2500_B1.c: 309: Timeout_Counter();
  8808  0809  3190  20C9  3188   	fcall	_Timeout_Counter
  8809  080C                     l8488:	
  8810  080C  0020               	movlb	0	; select bank0
  8811  080D  1D0E               	btfss	14,2	;volatile
  8812  080E  2812               	goto	l8492
  8813  080F  0021               	movlb	1	; select bank1
  8814  0810  1D30               	btfss	(_myMain^(0+128)+16),2
  8815  0811  2809               	goto	l8486
  8816  0812                     l8492:	
  8817                           
  8818                           ;CC2500_B1.c: 310: };
  8819                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8820  0812  3190  2066  3188   	fcall	_set_TimeoutCleared
  8821                           
  8822                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8823  0815  3190  20B5  3188   	fcall	_CC2500_WriteByte
  8824                           
  8825                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8826  0818  3191  2109         	fcall	_CC2500_ReadByte
  8827                           
  8828                           ;CC2500_B1.c: 315: RC4 = 1;
  8829  081A  0020               	movlb	0	; select bank0
  8830  081B  160E               	bsf	14,4	;volatile
  8831                           
  8832                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8833  081C  0875               	movf	_SPI0Buffer,w
  8834  081D  00A2               	movwf	??_CC2500_ReadStatus
  8835  081E  0822               	movf	??_CC2500_ReadStatus,w
  8836  081F  0021               	movlb	1	; select bank1
  8837  0820  00DD               	movwf	_s_data^(0+128)
  8838  0821  0008               	return
  8839  0822                     __end_of_CC2500_ReadStatus:	
  8840                           
  8841                           	psect	text37
  8842  1109                     __ptext37:	
  8843 ;; *************** function _CC2500_ReadByte *****************
  8844 ;; Defined at:
  8845 ;;		line 238 in file "../src/CC2500_B1.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;		None               void
  8852 ;; Registers used:
  8853 ;;		wreg, status,2, status,0
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;Total ram usage:        2 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    5
  8866 ;; This function calls:
  8867 ;;		Nothing
  8868 ;; This function is called by:
  8869 ;;		_CC2500_RxData
  8870 ;;		_CC2500_ReadStatus
  8871 ;;		_CC2500_ReadREG
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           
  8876                           ;psect for function _CC2500_ReadByte
  8877  1109                     _CC2500_ReadByte:	
  8878                           
  8879                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8880                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8884  1109  0020               	movlb	0	; select bank0
  8885  110A  01A1               	clrf	CC2500_ReadByte@loop_b
  8886  110B                     L7:	
  8887  110B  3008               	movlw	8
  8888  110C  0221               	subwf	CC2500_ReadByte@loop_b,w
  8889  110D  1803               	btfsc	3,0
  8890  110E  0008               	return
  8891                           
  8892                           ;CC2500_B1.c: 241: RC1 = 1;
  8893  110F  148E               	bsf	14,1	;volatile
  8894                           
  8895                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8896  1110  1003               	clrc
  8897  1111  0DF5               	rlf	_SPI0Buffer,f
  8898                           
  8899                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8900  1112  1D0E               	btfss	14,2	;volatile
  8901  1113  2916               	goto	l8380
  8902                           
  8903                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8904  1114  1475               	bsf	_SPI0Buffer,0
  8905  1115  291A               	goto	l8382
  8906  1116                     l8380:	
  8907                           
  8908                           ;CC2500_B1.c: 245: else
  8909                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8910  1116  30FE               	movlw	254
  8911  1117  00A0               	movwf	??_CC2500_ReadByte
  8912  1118  0820               	movf	??_CC2500_ReadByte,w
  8913  1119  05F5               	andwf	_SPI0Buffer,f
  8914  111A                     l8382:	
  8915                           
  8916                           ;CC2500_B1.c: 247: RC1 = 0;
  8917  111A  108E               	bcf	14,1	;volatile
  8918  111B  3001               	movlw	1
  8919  111C  00A0               	movwf	??_CC2500_ReadByte
  8920  111D  0820               	movf	??_CC2500_ReadByte,w
  8921  111E  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8922  111F  290B               	goto	L7
  8923  1120                     __end_of_CC2500_ReadByte:	
  8924                           
  8925                           	psect	text38
  8926  1E33                     __ptext38:	
  8927 ;; *************** function _RF_Initialization *****************
  8928 ;; Defined at:
  8929 ;;		line 9 in file "../src/RF_Control_B1.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;		None
  8934 ;; Return value:  Size  Location     Type
  8935 ;;		None               void
  8936 ;; Registers used:
  8937 ;;		wreg, status,2, status,0, pclath, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;Total ram usage:        0 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    6
  8950 ;; This function calls:
  8951 ;;		_setRF_Initialization
  8952 ;; This function is called by:
  8953 ;;		_main
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           
  8958                           ;psect for function _RF_Initialization
  8959  1E33                     _RF_Initialization:	
  8960                           
  8961                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8962                           
  8963                           ;incstack = 0
  8964                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8965  1E33  319E  2689         	fcall	_setRF_Initialization
  8966  1E35  0008               	return
  8967  1E36                     __end_of_RF_Initialization:	
  8968                           
  8969                           	psect	text39
  8970  1E89                     __ptext39:	
  8971 ;; *************** function _setRF_Initialization *****************
  8972 ;; Defined at:
  8973 ;;		line 43 in file "../src/RF_Control_B1.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;		None               void
  8980 ;; Registers used:
  8981 ;;		wreg
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:        1 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    5
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_RF_Initialization
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           
  9002                           ;psect for function _setRF_Initialization
  9003  1E89                     _setRF_Initialization:	
  9004                           
  9005                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9006                           
  9007                           ;incstack = 0
  9008                           ; Regs used in _setRF_Initialization: [wreg]
  9009  1E89  3015               	movlw	21
  9010  1E8A  0020               	movlb	0	; select bank0
  9011  1E8B  00A0               	movwf	??_setRF_Initialization
  9012  1E8C  0820               	movf	??_setRF_Initialization,w
  9013  1E8D  0021               	movlb	1	; select bank1
  9014  1E8E  00DA               	movwf	_Tx_Length^(0+128)
  9015                           
  9016                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  9017  1E8F  3014               	movlw	20
  9018  1E90  00C6               	movwf	(_RF1^(0+128)+7)
  9019  1E91  3000               	movlw	0
  9020  1E92  00C7               	movwf	(_RF1^(0+128)+8)
  9021  1E93  0008               	return
  9022  1E94                     __end_of_setRF_Initialization:	
  9023                           
  9024                           	psect	text40
  9025  1FEE                     __ptext40:	
  9026 ;; *************** function _Mcu_Initialization *****************
  9027 ;; Defined at:
  9028 ;;		line 30 in file "../src/MCU_B1.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;		None               void
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0, pclath, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;Total ram usage:        0 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    6
  9049 ;; This function calls:
  9050 ;;		_ADC_Set
  9051 ;;		_Fosc_Set
  9052 ;;		_IOC_Set
  9053 ;;		_IO_Set
  9054 ;;		_TMR1_Set
  9055 ;;		_WDT_Set
  9056 ;; This function is called by:
  9057 ;;		_main
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           
  9062                           ;psect for function _Mcu_Initialization
  9063  1FEE                     _Mcu_Initialization:	
  9064                           
  9065                           ;MCU_B1.c: 32: Fosc_Set();
  9066                           
  9067                           ;incstack = 0
  9068                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9069  1FEE  319E  2645  319F   	fcall	_Fosc_Set
  9070                           
  9071                           ;MCU_B1.c: 34: IO_Set();
  9072  1FF1  3191  2120  319F   	fcall	_IO_Set
  9073                           
  9074                           ;MCU_B1.c: 36: ;;
  9075                           ;MCU_B1.c: 38: TMR1_Set();
  9076  1FF4  319E  26D0  319F   	fcall	_TMR1_Set
  9077                           
  9078                           ;MCU_B1.c: 40: ADC_Set();
  9079  1FF7  3187  27F9  319F   	fcall	_ADC_Set
  9080                           
  9081                           ;MCU_B1.c: 42: ;;
  9082                           ;MCU_B1.c: 44: ;;
  9083                           ;MCU_B1.c: 46: IOC_Set();
  9084  1FFA  319E  26F5  319F   	fcall	_IOC_Set
  9085                           
  9086                           ;MCU_B1.c: 48: ;;
  9087                           ;MCU_B1.c: 50: ;;
  9088                           ;MCU_B1.c: 52: WDT_Set();
  9089  1FFD  319E  267E         	fcall	_WDT_Set
  9090  1FFF  0008               	return
  9091  2000                     __end_of_Mcu_Initialization:	
  9092                           
  9093                           	psect	text41
  9094  1E7E                     __ptext41:	
  9095 ;; *************** function _WDT_Set *****************
  9096 ;; Defined at:
  9097 ;;		line 1005 in file "../src/MCU_B1.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;		None
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;		None               void
  9104 ;; Registers used:
  9105 ;;		wreg
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:        1 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    5
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_Mcu_Initialization
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function _WDT_Set
  9127  1E7E                     _WDT_Set:	
  9128                           
  9129                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in _WDT_Set: [wreg]
  9133  1E7E  3017               	movlw	23
  9134  1E7F  0021               	movlb	1	; select bank1
  9135  1E80  0097               	movwf	23	;volatile
  9136                           
  9137                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  9138  1E81  1450               	bsf	_WDT^(0+128),0
  9139                           
  9140                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  9141  1E82  300A               	movlw	10
  9142  1E83  0020               	movlb	0	; select bank0
  9143  1E84  00A0               	movwf	??_WDT_Set
  9144  1E85  0820               	movf	??_WDT_Set,w
  9145  1E86  0021               	movlb	1	; select bank1
  9146  1E87  00D1               	movwf	(_WDT^(0+128)+1)
  9147  1E88  0008               	return
  9148  1E89                     __end_of_WDT_Set:	
  9149                           
  9150                           	psect	text42
  9151  1ED0                     __ptext42:	
  9152 ;; *************** function _TMR1_Set *****************
  9153 ;; Defined at:
  9154 ;;		line 199 in file "../src/MCU_B1.c"
  9155 ;; Parameters:    Size  Location     Type
  9156 ;;		None
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;		None
  9159 ;; Return value:  Size  Location     Type
  9160 ;;		None               void
  9161 ;; Registers used:
  9162 ;;		wreg
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;Total ram usage:        0 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    5
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_Mcu_Initialization
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _TMR1_Set
  9184  1ED0                     _TMR1_Set:	
  9185                           
  9186                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _TMR1_Set: [wreg]
  9190  1ED0  3041               	movlw	65
  9191  1ED1  0020               	movlb	0	; select bank0
  9192  1ED2  0098               	movwf	24	;volatile
  9193                           
  9194                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9195  1ED3  30FA               	movlw	250
  9196  1ED4  0097               	movwf	23	;volatile
  9197                           
  9198                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9199  1ED5  3038               	movlw	56
  9200  1ED6  0096               	movwf	22	;volatile
  9201                           
  9202                           ;MCU_B1.c: 203: TMR1IE = 1;
  9203  1ED7  0021               	movlb	1	; select bank1
  9204  1ED8  1411               	bsf	17,0	;volatile
  9205                           
  9206                           ;MCU_B1.c: 204: PEIE = 1;
  9207  1ED9  170B               	bsf	11,6	;volatile
  9208                           
  9209                           ;MCU_B1.c: 205: GIE = 1;
  9210  1EDA  178B               	bsf	11,7	;volatile
  9211  1EDB  0008               	return
  9212  1EDC                     __end_of_TMR1_Set:	
  9213                           
  9214                           	psect	text43
  9215  1120                     __ptext43:	
  9216 ;; *************** function _IO_Set *****************
  9217 ;; Defined at:
  9218 ;;		line 60 in file "../src/MCU_B1.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;		None
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;		None
  9223 ;; Return value:  Size  Location     Type
  9224 ;;		None               void
  9225 ;; Registers used:
  9226 ;;		wreg, status,2
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;Total ram usage:        0 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    5
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		_Mcu_Initialization
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           
  9247                           ;psect for function _IO_Set
  9248  1120                     _IO_Set:	
  9249                           
  9250                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9251                           
  9252                           ;incstack = 0
  9253                           ; Regs used in _IO_Set: [wreg+status,2]
  9254  1120  3077               	movlw	119
  9255  1121  0021               	movlb	1	; select bank1
  9256  1122  008C               	movwf	12	;volatile
  9257                           
  9258                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
  9259  1123  3005               	movlw	5
  9260  1124  008D               	movwf	13	;volatile
  9261                           
  9262                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9263  1125  300C               	movlw	12
  9264  1126  008E               	movwf	14	;volatile
  9265                           
  9266                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9267  1127  0022               	movlb	2	; select bank2
  9268  1128  018C               	clrf	12	;volatile
  9269                           
  9270                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9271  1129  018D               	clrf	13	;volatile
  9272                           
  9273                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9274  112A  018E               	clrf	14	;volatile
  9275                           
  9276                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
  9277  112B  3002               	movlw	2
  9278  112C  0023               	movlb	3	; select bank3
  9279  112D  008C               	movwf	12	;volatile
  9280                           
  9281                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9282  112E  018D               	clrf	13	;volatile
  9283                           
  9284                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9285  112F  018E               	clrf	14	;volatile
  9286                           
  9287                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9288  1130  3077               	movlw	119
  9289  1131  0020               	movlb	0	; select bank0
  9290  1132  008C               	movwf	12	;volatile
  9291                           
  9292                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
  9293  1133  3005               	movlw	5
  9294  1134  008D               	movwf	13	;volatile
  9295                           
  9296                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9297  1135  300C               	movlw	12
  9298  1136  008E               	movwf	14	;volatile
  9299  1137  0008               	return
  9300  1138                     __end_of_IO_Set:	
  9301                           
  9302                           	psect	text44
  9303  1EF5                     __ptext44:	
  9304 ;; *************** function _IOC_Set *****************
  9305 ;; Defined at:
  9306 ;;		line 367 in file "../src/MCU_B1.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;		None
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;		None               void
  9313 ;; Registers used:
  9314 ;;		wreg, status,2
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;Total ram usage:        0 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    5
  9327 ;; This function calls:
  9328 ;;		Nothing
  9329 ;; This function is called by:
  9330 ;;		_Mcu_Initialization
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function _IOC_Set
  9336  1EF5                     _IOC_Set:	
  9337                           
  9338                           ;MCU_B1.c: 368: WPUB2 = 0;
  9339                           
  9340                           ;incstack = 0
  9341                           ; Regs used in _IOC_Set: [wreg+status,2]
  9342  1EF5  0024               	movlb	4	; select bank4
  9343  1EF6  110D               	bcf	13,2	;volatile
  9344                           
  9345                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
  9346  1EF7  3004               	movlw	4
  9347  1EF8  0027               	movlb	7	; select bank7
  9348  1EF9  0094               	movwf	20	;volatile
  9349                           
  9350                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
  9351  1EFA  3004               	movlw	4
  9352  1EFB  0095               	movwf	21	;volatile
  9353                           
  9354                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9355  1EFC  0196               	clrf	22	;volatile
  9356                           
  9357                           ;MCU_B1.c: 394: IOCIE = 1;
  9358  1EFD  158B               	bsf	11,3	;volatile
  9359                           
  9360                           ;MCU_B1.c: 395: IOCIF = 0;
  9361  1EFE  100B               	bcf	11,0	;volatile
  9362                           
  9363                           ;MCU_B1.c: 396: PEIE = 1;
  9364  1EFF  170B               	bsf	11,6	;volatile
  9365                           
  9366                           ;MCU_B1.c: 397: GIE = 1;
  9367  1F00  178B               	bsf	11,7	;volatile
  9368  1F01  0008               	return
  9369  1F02                     __end_of_IOC_Set:	
  9370                           
  9371                           	psect	text45
  9372  1E45                     __ptext45:	
  9373 ;; *************** function _Fosc_Set *****************
  9374 ;; Defined at:
  9375 ;;		line 56 in file "../src/MCU_B1.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;		None
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;		None
  9380 ;; Return value:  Size  Location     Type
  9381 ;;		None               void
  9382 ;; Registers used:
  9383 ;;		wreg
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;Total ram usage:        0 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    5
  9396 ;; This function calls:
  9397 ;;		Nothing
  9398 ;; This function is called by:
  9399 ;;		_Mcu_Initialization
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           
  9404                           ;psect for function _Fosc_Set
  9405  1E45                     _Fosc_Set:	
  9406                           
  9407                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9408                           
  9409                           ;incstack = 0
  9410                           ; Regs used in _Fosc_Set: [wreg]
  9411  1E45  3078               	movlw	120
  9412  1E46  0021               	movlb	1	; select bank1
  9413  1E47  0099               	movwf	25	;volatile
  9414  1E48  0008               	return
  9415  1E49                     __end_of_Fosc_Set:	
  9416                           
  9417                           	psect	text46
  9418  07F9                     __ptext46:	
  9419 ;; *************** function _ADC_Set *****************
  9420 ;; Defined at:
  9421 ;;		line 419 in file "../src/MCU_B1.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;		None
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;		None
  9426 ;; Return value:  Size  Location     Type
  9427 ;;		None               void
  9428 ;; Registers used:
  9429 ;;		wreg
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/0
  9432 ;;		On exit  : 0/0
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;Total ram usage:        0 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; Hardware stack levels required when called:    5
  9442 ;; This function calls:
  9443 ;;		Nothing
  9444 ;; This function is called by:
  9445 ;;		_Mcu_Initialization
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           
  9450                           ;psect for function _ADC_Set
  9451  07F9                     _ADC_Set:	
  9452                           
  9453                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
  9454                           
  9455                           ;incstack = 0
  9456                           ; Regs used in _ADC_Set: [wreg]
  9457  07F9  30F2               	movlw	242
  9458  07FA  0021               	movlb	1	; select bank1
  9459  07FB  009E               	movwf	30	;volatile
  9460                           
  9461                           ;MCU_B1.c: 421: FVRCON = 0xc0;
  9462  07FC  30C0               	movlw	192
  9463  07FD  0022               	movlb	2	; select bank2
  9464  07FE  0097               	movwf	23	;volatile
  9465  07FF  0008               	return
  9466  0800                     __end_of_ADC_Set:	
  9467                           
  9468                           	psect	text47
  9469  1F8B                     __ptext47:	
  9470 ;; *************** function _LED_Main *****************
  9471 ;; Defined at:
  9472 ;;		line 47 in file "../src/LED_B1.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        0 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    7
  9493 ;; This function calls:
  9494 ;;		_setLED_Main
  9495 ;; This function is called by:
  9496 ;;		_main
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _LED_Main
  9502  1F8B                     _LED_Main:	
  9503                           
  9504                           ;LED_B1.c: 49: setLED_Main(1);
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9508  1F8B  3001               	movlw	1
  9509  1F8C  3196  26B2  319F   	fcall	_setLED_Main
  9510                           
  9511                           ;LED_B1.c: 52: setLED_Main(2);
  9512  1F8F  3002               	movlw	2
  9513  1F90  3196  26B2  319F   	fcall	_setLED_Main
  9514                           
  9515                           ;LED_B1.c: 55: setLED_Main(3);
  9516  1F93  3003               	movlw	3
  9517  1F94  3196  26B2  319F   	fcall	_setLED_Main
  9518                           
  9519                           ;LED_B1.c: 58: setLED_Main(99);
  9520  1F97  3063               	movlw	99
  9521  1F98  3196  26B2         	fcall	_setLED_Main
  9522  1F9A  0008               	return
  9523  1F9B                     __end_of_LED_Main:	
  9524                           
  9525                           	psect	text48
  9526  16B2                     __ptext48:	
  9527 ;; *************** function _setLED_Main *****************
  9528 ;; Defined at:
  9529 ;;		line 192 in file "../src/LED_B1.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  led             1    wreg     unsigned char 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  led             1    3[BANK0 ] unsigned char 
  9534 ;; Return value:  Size  Location     Type
  9535 ;;		None               void
  9536 ;; Registers used:
  9537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;Total ram usage:        3 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    6
  9550 ;; This function calls:
  9551 ;;		_LedPointSelect
  9552 ;; This function is called by:
  9553 ;;		_LED_Main
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           
  9558                           ;psect for function _setLED_Main
  9559  16B2                     _setLED_Main:	
  9560                           
  9561                           ;incstack = 0
  9562                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9563                           ;setLED_Main@led stored from wreg
  9564  16B2  0020               	movlb	0	; select bank0
  9565  16B3  00A3               	movwf	setLED_Main@led
  9566                           
  9567                           ;LED_B1.c: 193: LedPointSelect(led);
  9568  16B4  0823               	movf	setLED_Main@led,w
  9569  16B5  3193  2322  3196   	fcall	_LedPointSelect
  9570                           
  9571                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9572  16B8  0870               	movf	_LED,w
  9573  16B9  0086               	movwf	6
  9574  16BA  0871               	movf	_LED+1,w
  9575  16BB  0087               	movwf	7
  9576  16BC  1C81               	btfss	1,1
  9577  16BD  0008               	return
  9578                           
  9579                           ;LED_B1.c: 195: LED->Time++;
  9580  16BE  0870               	movf	_LED,w
  9581  16BF  0086               	movwf	6
  9582  16C0  0871               	movf	_LED+1,w
  9583  16C1  0087               	movwf	7
  9584  16C2  3141               	addfsr 1,1
  9585  16C3  3001               	movlw	1
  9586  16C4  0781               	addwf	1,f
  9587  16C5  3141               	addfsr 1,1
  9588  16C6  1803               	skipnc
  9589  16C7  0A81               	incf	1,f
  9590                           
  9591                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9592  16C8  0870               	movf	_LED,w
  9593  16C9  0086               	movwf	6
  9594  16CA  0871               	movf	_LED+1,w
  9595  16CB  0087               	movwf	7
  9596  16CC  3141               	addfsr 1,1
  9597  16CD  3F40               	moviw [0]fsr1
  9598  16CE  0020               	movlb	0	; select bank0
  9599  16CF  00A1               	movwf	??_setLED_Main
  9600  16D0  3F41               	moviw [1]fsr1
  9601  16D1  00A2               	movwf	??_setLED_Main+1
  9602  16D2  3000               	movlw	0
  9603  16D3  0222               	subwf	??_setLED_Main+1,w
  9604  16D4  3032               	movlw	50
  9605  16D5  1903               	skipnz
  9606  16D6  0221               	subwf	??_setLED_Main,w
  9607  16D7  1C03               	skipc
  9608  16D8  0008               	return
  9609                           
  9610                           ;LED_B1.c: 197: LED->Time = 0;
  9611  16D9  0870               	movf	_LED,w
  9612  16DA  0086               	movwf	6
  9613  16DB  0871               	movf	_LED+1,w
  9614  16DC  0087               	movwf	7
  9615  16DD  3141               	addfsr 1,1
  9616  16DE  3000               	movlw	0
  9617  16DF  3FC0               	movwi [0]fsr1
  9618  16E0  3FC1               	movwi [1]fsr1
  9619                           
  9620                           ;LED_B1.c: 199: if (led == 1) {
  9621  16E1  0823               	movf	setLED_Main@led,w
  9622  16E2  3A01               	xorlw	1
  9623  16E3  1D03               	skipz
  9624  16E4  2EE8               	goto	l9196
  9625                           
  9626                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
  9627  16E5  3080               	movlw	128
  9628  16E6  068E               	xorwf	14,f
  9629                           
  9630                           ;LED_B1.c: 201: }
  9631  16E7  0008               	return
  9632  16E8                     l9196:	
  9633                           
  9634                           ;LED_B1.c: 204: else if (led == 2) {
  9635  16E8  0823               	movf	setLED_Main@led,w
  9636  16E9  3A02               	xorlw	2
  9637  16EA  1D03               	skipz
  9638  16EB  2EEF               	goto	l9200
  9639                           
  9640                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
  9641  16EC  3008               	movlw	8
  9642  16ED  068C               	xorwf	12,f
  9643                           
  9644                           ;LED_B1.c: 206: }
  9645  16EE  0008               	return
  9646  16EF                     l9200:	
  9647                           
  9648                           ;LED_B1.c: 209: else if (led == 3) {
  9649  16EF  0823               	movf	setLED_Main@led,w
  9650  16F0  3A03               	xorlw	3
  9651  16F1  1D03               	skipz
  9652  16F2  2EF6               	goto	l9204
  9653                           
  9654                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
  9655  16F3  3040               	movlw	64
  9656  16F4  068E               	xorwf	14,f
  9657                           
  9658                           ;LED_B1.c: 211: }
  9659  16F5  0008               	return
  9660  16F6                     l9204:	
  9661                           
  9662                           ;LED_B1.c: 214: else if (led == 99) {
  9663  16F6  0823               	movf	setLED_Main@led,w
  9664  16F7  3A63               	xorlw	99
  9665  16F8  1D03               	skipz
  9666  16F9  0008               	return
  9667                           
  9668                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9669  16FA  3020               	movlw	32
  9670  16FB  068D               	xorwf	13,f
  9671  16FC  0008               	return
  9672  16FD                     __end_of_setLED_Main:	
  9673                           
  9674                           	psect	text49
  9675  1F7B                     __ptext49:	
  9676 ;; *************** function _LED_Initialization *****************
  9677 ;; Defined at:
  9678 ;;		line 31 in file "../src/LED_B1.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;		None
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;		None
  9683 ;; Return value:  Size  Location     Type
  9684 ;;		None               void
  9685 ;; Registers used:
  9686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;Total ram usage:        0 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    8
  9699 ;; This function calls:
  9700 ;;		_setLED_Initialization
  9701 ;; This function is called by:
  9702 ;;		_main
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           
  9707                           ;psect for function _LED_Initialization
  9708  1F7B                     _LED_Initialization:	
  9709                           
  9710                           ;LED_B1.c: 33: setLED_Initialization(1);
  9711                           
  9712                           ;incstack = 0
  9713                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9714  1F7B  3001               	movlw	1
  9715  1F7C  319F  27BB  319F   	fcall	_setLED_Initialization
  9716                           
  9717                           ;LED_B1.c: 36: setLED_Initialization(2);
  9718  1F7F  3002               	movlw	2
  9719  1F80  319F  27BB  319F   	fcall	_setLED_Initialization
  9720                           
  9721                           ;LED_B1.c: 39: setLED_Initialization(3);
  9722  1F83  3003               	movlw	3
  9723  1F84  319F  27BB  319F   	fcall	_setLED_Initialization
  9724                           
  9725                           ;LED_B1.c: 42: setLED_Initialization(99);
  9726  1F87  3063               	movlw	99
  9727  1F88  319F  27BB         	fcall	_setLED_Initialization
  9728  1F8A  0008               	return
  9729  1F8B                     __end_of_LED_Initialization:	
  9730                           
  9731                           	psect	text50
  9732  1FBB                     __ptext50:	
  9733 ;; *************** function _setLED_Initialization *****************
  9734 ;; Defined at:
  9735 ;;		line 63 in file "../src/LED_B1.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;  led             1    wreg     unsigned char 
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  led             1    3[BANK0 ] unsigned char 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;		None               void
  9742 ;; Registers used:
  9743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:        1 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    7
  9756 ;; This function calls:
  9757 ;;		_LedPointSelect
  9758 ;;		_setLED
  9759 ;; This function is called by:
  9760 ;;		_LED_Initialization
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           
  9765                           ;psect for function _setLED_Initialization
  9766  1FBB                     _setLED_Initialization:	
  9767                           
  9768                           ;incstack = 0
  9769                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9770                           ;setLED_Initialization@led stored from wreg
  9771  1FBB  0020               	movlb	0	; select bank0
  9772  1FBC  00A3               	movwf	setLED_Initialization@led
  9773                           
  9774                           ;LED_B1.c: 64: LedPointSelect(led);
  9775  1FBD  0823               	movf	setLED_Initialization@led,w
  9776  1FBE  3193  2322  319F   	fcall	_LedPointSelect
  9777                           
  9778                           ;LED_B1.c: 65: LED->Enable = 1;
  9779  1FC1  0870               	movf	_LED,w
  9780  1FC2  0086               	movwf	6
  9781  1FC3  0871               	movf	_LED+1,w
  9782  1FC4  0087               	movwf	7
  9783  1FC5  1401               	bsf	1,0
  9784                           
  9785                           ;LED_B1.c: 66: setLED(led, 0);
  9786  1FC6  0020               	movlb	0	; select bank0
  9787  1FC7  01A1               	clrf	setLED@command
  9788  1FC8  0823               	movf	setLED_Initialization@led,w
  9789  1FC9  318B  23B1         	fcall	_setLED
  9790  1FCB  0008               	return
  9791  1FCC                     __end_of_setLED_Initialization:	
  9792                           
  9793                           	psect	text51
  9794  1216                     __ptext51:	
  9795 ;; *************** function _Flash_Memory_Main *****************
  9796 ;; Defined at:
  9797 ;;		line 900 in file "../src/MCU_B1.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;		None
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;Total ram usage:        0 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    8
  9818 ;; This function calls:
  9819 ;;		_Flash_Memory_Modify
  9820 ;; This function is called by:
  9821 ;;		_main
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _Flash_Memory_Main
  9827  1216                     _Flash_Memory_Main:	
  9828                           
  9829                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9833  1216  0023               	movlb	3	; select bank3
  9834  1217  1CC4               	btfss	(_Memory^(0+384)+36),1
  9835  1218  0008               	return
  9836                           
  9837                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
  9838  1219  1C44               	btfss	(_Memory^(0+384)+36),0
  9839  121A  2A33               	goto	l1429
  9840                           
  9841                           ;MCU_B1.c: 903: Memory.Time++;
  9842  121B  3001               	movlw	1
  9843  121C  07C2               	addwf	(_Memory^(0+384)+34),f
  9844  121D  3000               	movlw	0
  9845  121E  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9846                           
  9847                           ;MCU_B1.c: 904: if (Memory.Time == 25)
  9848  121F  3022               	movlw	34
  9849  1220  3EA0               	addlw	_Memory& (0+255)
  9850  1221  0086               	movwf	6
  9851  1222  3001               	movlw	1	; select bank3/4
  9852  1223  0087               	movwf	7
  9853  1224  3F40               	moviw [0]fsr1
  9854  1225  3A19               	xorlw	25
  9855  1226  1D03               	skipz
  9856  1227  2A2A               	goto	u10385
  9857  1228  3F41               	moviw [1]fsr1
  9858  1229  3A00               	xorlw	0
  9859  122A                     u10385:	
  9860  122A  1D03               	skipz
  9861  122B  0008               	return
  9862                           
  9863                           ;MCU_B1.c: 905: {
  9864                           ;MCU_B1.c: 906: Memory.Time = 0;
  9865  122C  01C2               	clrf	(_Memory^(0+384)+34)
  9866  122D  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9867                           
  9868                           ;MCU_B1.c: 907: Memory.Modify = 0;
  9869  122E  1044               	bcf	(_Memory^(0+384)+36),0
  9870                           
  9871                           ;MCU_B1.c: 908: Memory.GO = 0;
  9872  122F  10C4               	bcf	(_Memory^(0+384)+36),1
  9873                           
  9874                           ;MCU_B1.c: 909: Flash_Memory_Modify();
  9875  1230  3195  25DE         	fcall	_Flash_Memory_Modify
  9876                           
  9877                           ;MCU_B1.c: 910: }
  9878                           ;MCU_B1.c: 911: } else {
  9879  1232  0008               	return
  9880  1233                     l1429:	
  9881                           
  9882                           ;MCU_B1.c: 912: Memory.GO = 0;
  9883  1233  10C4               	bcf	(_Memory^(0+384)+36),1
  9884  1234  0008               	return
  9885  1235                     __end_of_Flash_Memory_Main:	
  9886                           
  9887                           	psect	text52
  9888  15DE                     __ptext52:	
  9889 ;; *************** function _Flash_Memory_Modify *****************
  9890 ;; Defined at:
  9891 ;;		line 969 in file "../src/MCU_B1.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;		None
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;  i               1    5[BANK0 ] unsigned char 
  9896 ;; Return value:  Size  Location     Type
  9897 ;;		None               void
  9898 ;; Registers used:
  9899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;Total ram usage:        2 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:    7
  9912 ;; This function calls:
  9913 ;;		_Flash_Memory_Erasing
  9914 ;;		_Flash_Memory_Read
  9915 ;;		_Flash_Memory_Write
  9916 ;; This function is called by:
  9917 ;;		_Flash_Memory_Main
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           
  9922                           ;psect for function _Flash_Memory_Modify
  9923  15DE                     _Flash_Memory_Modify:	
  9924                           
  9925                           ;MCU_B1.c: 970: char i = 0;
  9926                           
  9927                           ;incstack = 0
  9928                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9929  15DE  0020               	movlb	0	; select bank0
  9930  15DF  01A5               	clrf	Flash_Memory_Modify@i
  9931                           
  9932                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
  9933  15E0  01A5               	clrf	Flash_Memory_Modify@i
  9934  15E1  3020               	movlw	32
  9935  15E2  0225               	subwf	Flash_Memory_Modify@i,w
  9936  15E3  1803               	btfsc	3,0
  9937  15E4  2DFA               	goto	l9266
  9938  15E5                     l9260:	
  9939                           
  9940                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
  9941  15E5  0825               	movf	Flash_Memory_Modify@i,w
  9942  15E6  3191  216B  3195   	fcall	_Flash_Memory_Read
  9943  15E9  0020               	movlb	0	; select bank0
  9944  15EA  00A4               	movwf	??_Flash_Memory_Modify
  9945  15EB  0825               	movf	Flash_Memory_Modify@i,w
  9946  15EC  3EA0               	addlw	_Memory& (0+255)
  9947  15ED  0086               	movwf	6
  9948  15EE  3001               	movlw	1	; select bank3/4
  9949  15EF  0087               	movwf	7
  9950  15F0  0824               	movf	??_Flash_Memory_Modify,w
  9951  15F1  0081               	movwf	1
  9952  15F2  3001               	movlw	1
  9953  15F3  00A4               	movwf	??_Flash_Memory_Modify
  9954  15F4  0824               	movf	??_Flash_Memory_Modify,w
  9955  15F5  07A5               	addwf	Flash_Memory_Modify@i,f
  9956  15F6  3020               	movlw	32
  9957  15F7  0225               	subwf	Flash_Memory_Modify@i,w
  9958  15F8  1C03               	skipc
  9959  15F9  2DE5               	goto	l9260
  9960  15FA                     l9266:	
  9961                           
  9962                           ;MCU_B1.c: 973: }
  9963                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
  9964  15FA  086D               	movf	_product,w
  9965  15FB  0086               	movwf	6
  9966  15FC  3002               	movlw	2	; select bank4/5
  9967  15FD  0087               	movwf	7
  9968  15FE  3002               	movlw	2	; select bank4/5
  9969  15FF  3F4C               	moviw [12]fsr1
  9970  1600  0023               	movlb	3	; select bank3
  9971  1601  00A0               	movwf	_Memory^(0+384)
  9972                           
  9973                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
  9974  1602  0020               	movlb	0	; select bank0
  9975  1603  086D               	movf	_product,w
  9976  1604  0086               	movwf	6
  9977  1605  3002               	movlw	2	; select bank4/5
  9978  1606  0087               	movwf	7
  9979  1607  3002               	movlw	2	; select bank4/5
  9980  1608  3F4D               	moviw [13]fsr1
  9981  1609  0023               	movlb	3	; select bank3
  9982  160A  00A1               	movwf	(_Memory^(0+384)+1)
  9983                           
  9984                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
  9985  160B  0020               	movlb	0	; select bank0
  9986  160C  086D               	movf	_product,w
  9987  160D  0086               	movwf	6
  9988  160E  3002               	movlw	2	; select bank4/5
  9989  160F  0087               	movwf	7
  9990  1610  3002               	movlw	2	; select bank4/5
  9991  1611  3F4E               	moviw [14]fsr1
  9992  1612  0023               	movlb	3	; select bank3
  9993  1613  00A2               	movwf	(_Memory^(0+384)+2)
  9994                           
  9995                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
  9996  1614  1D44               	btfss	(_Memory^(0+384)+36),2
  9997  1615  2E1A               	goto	l1451
  9998                           
  9999                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
 10000  1616  1144               	bcf	(_Memory^(0+384)+36),2
 10001                           
 10002                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
 10003  1617  0021               	movlb	1	; select bank1
 10004  1618  1320               	bcf	_myMain^(0+128),6
 10005                           
 10006                           ;MCU_B1.c: 985: myMain.First = 0;
 10007  1619  1021               	bcf	(_myMain^(0+128)+1),0
 10008  161A                     l1451:	
 10009                           
 10010                           ;MCU_B1.c: 987: }
 10011                           ;MCU_B1.c: 988: GIE = 0;
 10012  161A  138B               	bcf	11,7	;volatile
 10013                           
 10014                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
 10015  161B  319E  26C4  3195   	fcall	_Flash_Memory_Erasing
 10016                           
 10017                           ;MCU_B1.c: 990: Flash_Memory_Write();
 10018  161E  3194  244C         	fcall	_Flash_Memory_Write
 10019                           
 10020                           ;MCU_B1.c: 991: GIE = 1;
 10021  1620  178B               	bsf	11,7	;volatile
 10022  1621  0008               	return
 10023  1622                     __end_of_Flash_Memory_Modify:	
 10024                           
 10025                           	psect	text53
 10026  1EC4                     __ptext53:	
 10027 ;; *************** function _Flash_Memory_Erasing *****************
 10028 ;; Defined at:
 10029 ;;		line 958 in file "../src/MCU_B1.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;		None
 10032 ;; Auto vars:     Size  Location     Type
 10033 ;;		None
 10034 ;; Return value:  Size  Location     Type
 10035 ;;		None               void
 10036 ;; Registers used:
 10037 ;;		wreg, status,2, status,0, pclath, cstack
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;Total ram usage:        0 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    6
 10050 ;; This function calls:
 10051 ;;		_Flash_Memory_Unlock
 10052 ;; This function is called by:
 10053 ;;		_Flash_Memory_Modify
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _Flash_Memory_Erasing
 10059  1EC4                     _Flash_Memory_Erasing:	
 10060                           
 10061                           ;MCU_B1.c: 959: CFGS = 0;
 10062                           
 10063                           ;incstack = 0
 10064                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10065  1EC4  0023               	movlb	3	; select bank3
 10066  1EC5  1315               	bcf	21,6	;volatile
 10067                           
 10068                           ;MCU_B1.c: 960: PMADRH = 0x30;
 10069  1EC6  3030               	movlw	48
 10070  1EC7  0092               	movwf	18	;volatile
 10071                           
 10072                           ;MCU_B1.c: 961: PMADRL = 0x00;
 10073  1EC8  0191               	clrf	17	;volatile
 10074                           
 10075                           ;MCU_B1.c: 962: FREE = 1;
 10076  1EC9  1615               	bsf	21,4	;volatile
 10077                           
 10078                           ;MCU_B1.c: 963: WREN = 1;
 10079  1ECA  1515               	bsf	21,2	;volatile
 10080                           
 10081                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
 10082  1ECB  319E  266B         	fcall	_Flash_Memory_Unlock
 10083                           
 10084                           ;MCU_B1.c: 965: WREN = 0;
 10085  1ECD  0023               	movlb	3	; select bank3
 10086  1ECE  1115               	bcf	21,2	;volatile
 10087  1ECF  0008               	return
 10088  1ED0                     __end_of_Flash_Memory_Erasing:	
 10089                           
 10090                           	psect	text54
 10091  0531                     __ptext54:	
 10092 ;; *************** function _Flash_Memory_Initialization *****************
 10093 ;; Defined at:
 10094 ;;		line 859 in file "../src/MCU_B1.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;		None
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;  i               1   62[BANK0 ] unsigned char 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;		None               void
 10101 ;; Registers used:
 10102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;Total ram usage:        2 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    8
 10115 ;; This function calls:
 10116 ;;		_Flash_Memory_Read
 10117 ;;		_Flash_Memory_Write
 10118 ;;		_setPercentValue
 10119 ;; This function is called by:
 10120 ;;		_main
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function _Flash_Memory_Initialization
 10126  0531                     _Flash_Memory_Initialization:	
 10127                           
 10128                           ;MCU_B1.c: 860: char i = 0;
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10132  0531  0020               	movlb	0	; select bank0
 10133  0532  01DE               	clrf	Flash_Memory_Initialization@i
 10134                           
 10135                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 10136  0533  301F               	movlw	31
 10137  0534  3191  216B  3185   	fcall	_Flash_Memory_Read
 10138  0537  3AAA               	xorlw	170
 10139  0538  1D03               	skipz
 10140  0539  2DA3               	goto	l9598
 10141                           
 10142                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 10143  053A  3000               	movlw	0
 10144  053B  3191  216B  3185   	fcall	_Flash_Memory_Read
 10145  053E  0020               	movlb	0	; select bank0
 10146  053F  00DD               	movwf	??_Flash_Memory_Initialization
 10147  0540  086D               	movf	_product,w
 10148  0541  3E0C               	addlw	12
 10149  0542  0086               	movwf	6
 10150  0543  3002               	movlw	2	; select bank4/5
 10151  0544  0087               	movwf	7
 10152  0545  085D               	movf	??_Flash_Memory_Initialization,w
 10153  0546  0081               	movwf	1
 10154                           
 10155                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 10156  0547  3001               	movlw	1
 10157  0548  3191  216B  3185   	fcall	_Flash_Memory_Read
 10158  054B  0020               	movlb	0	; select bank0
 10159  054C  00DD               	movwf	??_Flash_Memory_Initialization
 10160  054D  086D               	movf	_product,w
 10161  054E  3E0D               	addlw	13
 10162  054F  0086               	movwf	6
 10163  0550  3002               	movlw	2	; select bank4/5
 10164  0551  0087               	movwf	7
 10165  0552  085D               	movf	??_Flash_Memory_Initialization,w
 10166  0553  0081               	movwf	1
 10167                           
 10168                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 10169  0554  3002               	movlw	2
 10170  0555  3191  216B  3185   	fcall	_Flash_Memory_Read
 10171  0558  0020               	movlb	0	; select bank0
 10172  0559  00DD               	movwf	??_Flash_Memory_Initialization
 10173  055A  086D               	movf	_product,w
 10174  055B  3E0E               	addlw	14
 10175  055C  0086               	movwf	6
 10176  055D  3002               	movlw	2	; select bank4/5
 10177  055E  0087               	movwf	7
 10178  055F  085D               	movf	??_Flash_Memory_Initialization,w
 10179  0560  0081               	movwf	1
 10180                           
 10181                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-90)*0.8)));
 10182  0561  3008               	movlw	8
 10183  0562  3196  2622  3185   	fcall	_setPercentValue
 10184  0565  0020               	movlb	0	; select bank0
 10185  0566  00DD               	movwf	??_Flash_Memory_Initialization
 10186  0567  085D               	movf	??_Flash_Memory_Initialization,w
 10187  0568  00DE               	movwf	Flash_Memory_Initialization@i
 10188                           
 10189                           ;MCU_B1.c: 871: product->Data[21] = i;
 10190  0569  085E               	movf	Flash_Memory_Initialization@i,w
 10191  056A  00DD               	movwf	??_Flash_Memory_Initialization
 10192  056B  086D               	movf	_product,w
 10193  056C  3E15               	addlw	21
 10194  056D  0086               	movwf	6
 10195  056E  3002               	movlw	2	; select bank4/5
 10196  056F  0087               	movwf	7
 10197  0570  085D               	movf	??_Flash_Memory_Initialization,w
 10198  0571  0081               	movwf	1
 10199                           
 10200                           ;MCU_B1.c: 872: product->Data[22] = i;
 10201  0572  085E               	movf	Flash_Memory_Initialization@i,w
 10202  0573  00DD               	movwf	??_Flash_Memory_Initialization
 10203  0574  086D               	movf	_product,w
 10204  0575  3E16               	addlw	22
 10205  0576  0086               	movwf	6
 10206  0577  3002               	movlw	2	; select bank4/5
 10207  0578  0087               	movwf	7
 10208  0579  085D               	movf	??_Flash_Memory_Initialization,w
 10209  057A  0081               	movwf	1
 10210                           
 10211                           ;MCU_B1.c: 873: product->Data[23] = i;
 10212  057B  085E               	movf	Flash_Memory_Initialization@i,w
 10213  057C  00DD               	movwf	??_Flash_Memory_Initialization
 10214  057D  086D               	movf	_product,w
 10215  057E  3E17               	addlw	23
 10216  057F  0086               	movwf	6
 10217  0580  3002               	movlw	2	; select bank4/5
 10218  0581  0087               	movwf	7
 10219  0582  085D               	movf	??_Flash_Memory_Initialization,w
 10220  0583  0081               	movwf	1
 10221                           
 10222                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10223  0584  086D               	movf	_product,w
 10224  0585  3E0C               	addlw	12
 10225  0586  0086               	movwf	6
 10226  0587  3002               	movlw	2	; select bank4/5
 10227  0588  0087               	movwf	7
 10228  0589  0801               	movf	1,w
 10229  058A  3AFF               	xorlw	255
 10230  058B  1D03               	skipz
 10231  058C  0008               	return
 10232  058D  086D               	movf	_product,w
 10233  058E  3E0D               	addlw	13
 10234  058F  0086               	movwf	6
 10235  0590  3002               	movlw	2	; select bank4/5
 10236  0591  0087               	movwf	7
 10237  0592  0801               	movf	1,w
 10238  0593  3AFF               	xorlw	255
 10239  0594  1D03               	skipz
 10240  0595  0008               	return
 10241  0596  086D               	movf	_product,w
 10242  0597  3E0E               	addlw	14
 10243  0598  0086               	movwf	6
 10244  0599  3002               	movlw	2	; select bank4/5
 10245  059A  0087               	movwf	7
 10246  059B  0801               	movf	1,w
 10247  059C  3AFF               	xorlw	255
 10248  059D  1D03               	skipz
 10249  059E  0008               	return
 10250                           
 10251                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 10252  059F  0021               	movlb	1	; select bank1
 10253  05A0  1720               	bsf	_myMain^(0+128),6
 10254                           
 10255                           ;MCU_B1.c: 877: myMain.First = 1;
 10256  05A1  1421               	bsf	(_myMain^(0+128)+1),0
 10257                           
 10258                           ;MCU_B1.c: 878: }
 10259                           ;MCU_B1.c: 879: } else {
 10260  05A2  0008               	return
 10261  05A3                     l9598:	
 10262                           
 10263                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-90)*0.8)));
 10264  05A3  3008               	movlw	8
 10265  05A4  3196  2622  3185   	fcall	_setPercentValue
 10266  05A7  0020               	movlb	0	; select bank0
 10267  05A8  00DD               	movwf	??_Flash_Memory_Initialization
 10268  05A9  085D               	movf	??_Flash_Memory_Initialization,w
 10269  05AA  00DE               	movwf	Flash_Memory_Initialization@i
 10270                           
 10271                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 10272  05AB  30FF               	movlw	255
 10273  05AC  00DD               	movwf	??_Flash_Memory_Initialization
 10274  05AD  085D               	movf	??_Flash_Memory_Initialization,w
 10275  05AE  0023               	movlb	3	; select bank3
 10276  05AF  00A0               	movwf	_Memory^(0+384)
 10277                           
 10278                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 10279  05B0  30FF               	movlw	255
 10280  05B1  0020               	movlb	0	; select bank0
 10281  05B2  00DD               	movwf	??_Flash_Memory_Initialization
 10282  05B3  085D               	movf	??_Flash_Memory_Initialization,w
 10283  05B4  0023               	movlb	3	; select bank3
 10284  05B5  00A1               	movwf	(_Memory^(0+384)+1)
 10285                           
 10286                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 10287  05B6  30FF               	movlw	255
 10288  05B7  0020               	movlb	0	; select bank0
 10289  05B8  00DD               	movwf	??_Flash_Memory_Initialization
 10290  05B9  085D               	movf	??_Flash_Memory_Initialization,w
 10291  05BA  0023               	movlb	3	; select bank3
 10292  05BB  00A2               	movwf	(_Memory^(0+384)+2)
 10293                           
 10294                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 10295  05BC  30FF               	movlw	255
 10296  05BD  0020               	movlb	0	; select bank0
 10297  05BE  00DD               	movwf	??_Flash_Memory_Initialization
 10298  05BF  085D               	movf	??_Flash_Memory_Initialization,w
 10299  05C0  0023               	movlb	3	; select bank3
 10300  05C1  00A3               	movwf	(_Memory^(0+384)+3)
 10301                           
 10302                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 10303  05C2  30FF               	movlw	255
 10304  05C3  0020               	movlb	0	; select bank0
 10305  05C4  00DD               	movwf	??_Flash_Memory_Initialization
 10306  05C5  085D               	movf	??_Flash_Memory_Initialization,w
 10307  05C6  0023               	movlb	3	; select bank3
 10308  05C7  00A4               	movwf	(_Memory^(0+384)+4)
 10309                           
 10310                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 10311  05C8  30FF               	movlw	255
 10312  05C9  0020               	movlb	0	; select bank0
 10313  05CA  00DD               	movwf	??_Flash_Memory_Initialization
 10314  05CB  085D               	movf	??_Flash_Memory_Initialization,w
 10315  05CC  0023               	movlb	3	; select bank3
 10316  05CD  00A5               	movwf	(_Memory^(0+384)+5)
 10317                           
 10318                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 10319  05CE  30AA               	movlw	170
 10320  05CF  0020               	movlb	0	; select bank0
 10321  05D0  00DD               	movwf	??_Flash_Memory_Initialization
 10322  05D1  085D               	movf	??_Flash_Memory_Initialization,w
 10323  05D2  0023               	movlb	3	; select bank3
 10324  05D3  00BF               	movwf	(_Memory^(0+384)+31)
 10325                           
 10326                           ;MCU_B1.c: 888: product->Data[21] = i;
 10327  05D4  0020               	movlb	0	; select bank0
 10328  05D5  085E               	movf	Flash_Memory_Initialization@i,w
 10329  05D6  00DD               	movwf	??_Flash_Memory_Initialization
 10330  05D7  086D               	movf	_product,w
 10331  05D8  3E15               	addlw	21
 10332  05D9  0086               	movwf	6
 10333  05DA  3002               	movlw	2	; select bank4/5
 10334  05DB  0087               	movwf	7
 10335  05DC  085D               	movf	??_Flash_Memory_Initialization,w
 10336  05DD  0081               	movwf	1
 10337                           
 10338                           ;MCU_B1.c: 889: product->Data[22] = i;
 10339  05DE  085E               	movf	Flash_Memory_Initialization@i,w
 10340  05DF  00DD               	movwf	??_Flash_Memory_Initialization
 10341  05E0  086D               	movf	_product,w
 10342  05E1  3E16               	addlw	22
 10343  05E2  0086               	movwf	6
 10344  05E3  3002               	movlw	2	; select bank4/5
 10345  05E4  0087               	movwf	7
 10346  05E5  085D               	movf	??_Flash_Memory_Initialization,w
 10347  05E6  0081               	movwf	1
 10348                           
 10349                           ;MCU_B1.c: 890: product->Data[23] = i;
 10350  05E7  085E               	movf	Flash_Memory_Initialization@i,w
 10351  05E8  00DD               	movwf	??_Flash_Memory_Initialization
 10352  05E9  086D               	movf	_product,w
 10353  05EA  3E17               	addlw	23
 10354  05EB  0086               	movwf	6
 10355  05EC  3002               	movlw	2	; select bank4/5
 10356  05ED  0087               	movwf	7
 10357  05EE  085D               	movf	??_Flash_Memory_Initialization,w
 10358  05EF  0081               	movwf	1
 10359                           
 10360                           ;MCU_B1.c: 891: GIE = 0;
 10361  05F0  138B               	bcf	11,7	;volatile
 10362                           
 10363                           ;MCU_B1.c: 892: Flash_Memory_Write();
 10364  05F1  3194  244C         	fcall	_Flash_Memory_Write
 10365                           
 10366                           ;MCU_B1.c: 893: GIE = 1;
 10367  05F3  178B               	bsf	11,7	;volatile
 10368                           
 10369                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 10370  05F4  0021               	movlb	1	; select bank1
 10371  05F5  1720               	bsf	_myMain^(0+128),6
 10372                           
 10373                           ;MCU_B1.c: 895: myMain.First = 1;
 10374  05F6  1421               	bsf	(_myMain^(0+128)+1),0
 10375  05F7  0008               	return
 10376  05F8                     __end_of_Flash_Memory_Initialization:	
 10377                           
 10378                           	psect	text55
 10379  144C                     __ptext55:	
 10380 ;; *************** function _Flash_Memory_Write *****************
 10381 ;; Defined at:
 10382 ;;		line 939 in file "../src/MCU_B1.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;		None
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;  i               1    1[BANK0 ] unsigned char 
 10387 ;; Return value:  Size  Location     Type
 10388 ;;		None               void
 10389 ;; Registers used:
 10390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10391 ;; Tracked objects:
 10392 ;;		On entry : 0/0
 10393 ;;		On exit  : 0/0
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;Total ram usage:        2 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; Hardware stack levels required when called:    6
 10403 ;; This function calls:
 10404 ;;		_Flash_Memory_Unlock
 10405 ;; This function is called by:
 10406 ;;		_Flash_Memory_Initialization
 10407 ;;		_Flash_Memory_Modify
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function _Flash_Memory_Write
 10413  144C                     _Flash_Memory_Write:	
 10414                           
 10415                           ;MCU_B1.c: 940: char i = 0;
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10419  144C  0020               	movlb	0	; select bank0
 10420  144D  01A1               	clrf	Flash_Memory_Write@i
 10421                           
 10422                           ;MCU_B1.c: 941: CFGS = 0;
 10423  144E  0023               	movlb	3	; select bank3
 10424  144F  1315               	bcf	21,6	;volatile
 10425                           
 10426                           ;MCU_B1.c: 942: PMADRH = 0x30;
 10427  1450  3030               	movlw	48
 10428  1451  0092               	movwf	18	;volatile
 10429                           
 10430                           ;MCU_B1.c: 943: PMDATH = 0;
 10431  1452  0194               	clrf	20	;volatile
 10432                           
 10433                           ;MCU_B1.c: 944: FREE = 0;
 10434  1453  1215               	bcf	21,4	;volatile
 10435                           
 10436                           ;MCU_B1.c: 945: LWLO = 1;
 10437  1454  1695               	bsf	21,5	;volatile
 10438                           
 10439                           ;MCU_B1.c: 946: WREN = 1;
 10440  1455  1515               	bsf	21,2	;volatile
 10441                           
 10442                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 10443  1456  0020               	movlb	0	; select bank0
 10444  1457  01A1               	clrf	Flash_Memory_Write@i
 10445  1458  3020               	movlw	32
 10446  1459  0221               	subwf	Flash_Memory_Write@i,w
 10447  145A  1803               	btfsc	3,0
 10448  145B  2C74               	goto	l1442
 10449  145C                     l8784:	
 10450                           
 10451                           ;MCU_B1.c: 948: PMADRL = i;
 10452  145C  0821               	movf	Flash_Memory_Write@i,w
 10453  145D  0023               	movlb	3	; select bank3
 10454  145E  0091               	movwf	17	;volatile
 10455                           
 10456                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 10457  145F  0020               	movlb	0	; select bank0
 10458  1460  0821               	movf	Flash_Memory_Write@i,w
 10459  1461  3EA0               	addlw	_Memory& (0+255)
 10460  1462  0086               	movwf	6
 10461  1463  3001               	movlw	1	; select bank3/4
 10462  1464  0087               	movwf	7
 10463  1465  0801               	movf	1,w
 10464  1466  0023               	movlb	3	; select bank3
 10465  1467  0093               	movwf	19	;volatile
 10466                           
 10467                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 10468  1468  319E  266B  3194   	fcall	_Flash_Memory_Unlock
 10469  146B  3001               	movlw	1
 10470  146C  0020               	movlb	0	; select bank0
 10471  146D  00A0               	movwf	??_Flash_Memory_Write
 10472  146E  0820               	movf	??_Flash_Memory_Write,w
 10473  146F  07A1               	addwf	Flash_Memory_Write@i,f
 10474  1470  3020               	movlw	32
 10475  1471  0221               	subwf	Flash_Memory_Write@i,w
 10476  1472  1C03               	skipc
 10477  1473  2C5C               	goto	l8784
 10478  1474                     l1442:	
 10479                           
 10480                           ;MCU_B1.c: 951: }
 10481                           ;MCU_B1.c: 952: LWLO = 0;
 10482  1474  0023               	movlb	3	; select bank3
 10483  1475  1295               	bcf	21,5	;volatile
 10484                           
 10485                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 10486  1476  319E  266B         	fcall	_Flash_Memory_Unlock
 10487                           
 10488                           ;MCU_B1.c: 954: WREN = 0;
 10489  1478  0023               	movlb	3	; select bank3
 10490  1479  1115               	bcf	21,2	;volatile
 10491  147A  0008               	return
 10492  147B                     __end_of_Flash_Memory_Write:	
 10493                           
 10494                           	psect	text56
 10495  1E6B                     __ptext56:	
 10496 ;; *************** function _Flash_Memory_Unlock *****************
 10497 ;; Defined at:
 10498 ;;		line 918 in file "../src/MCU_B1.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;		None
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;		None
 10503 ;; Return value:  Size  Location     Type
 10504 ;;		None               void
 10505 ;; Registers used:
 10506 ;;		wreg
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;Total ram usage:        0 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    5
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_Flash_Memory_Write
 10523 ;;		_Flash_Memory_Erasing
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _Flash_Memory_Unlock
 10529  1E6B                     _Flash_Memory_Unlock:	
 10530                           
 10531                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 10532                           
 10533                           ;incstack = 0
 10534                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10535  1E6B  3055               	movlw	85
 10536  1E6C  0023               	movlb	3	; select bank3
 10537  1E6D  0096               	movwf	22	;volatile
 10538                           
 10539                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 10540  1E6E  30AA               	movlw	170
 10541  1E6F  0096               	movwf	22	;volatile
 10542                           
 10543                           ;MCU_B1.c: 921: WR = 1;
 10544  1E70  1495               	bsf	21,1	;volatile
 10545                           
 10546                           ;MCU_B1.c: 922: __nop();
 10547  1E71  0000               	nop
 10548                           
 10549                           ;MCU_B1.c: 923: __nop();
 10550  1E72  0000               	nop
 10551  1E73  0008               	return
 10552  1E74                     __end_of_Flash_Memory_Unlock:	
 10553                           
 10554                           	psect	text57
 10555  116B                     __ptext57:	
 10556 ;; *************** function _Flash_Memory_Read *****************
 10557 ;; Defined at:
 10558 ;;		line 927 in file "../src/MCU_B1.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  address         1    wreg     unsigned char 
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;  address         1    2[BANK0 ] unsigned char 
 10563 ;;  ret             1    3[BANK0 ] unsigned char 
 10564 ;;  i               1    1[BANK0 ] unsigned char 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      unsigned char 
 10567 ;; Registers used:
 10568 ;;		wreg, status,2
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;Total ram usage:        4 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    5
 10581 ;; This function calls:
 10582 ;;		Nothing
 10583 ;; This function is called by:
 10584 ;;		_Flash_Memory_Initialization
 10585 ;;		_Flash_Memory_Modify
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           
 10590                           ;psect for function _Flash_Memory_Read
 10591  116B                     _Flash_Memory_Read:	
 10592                           
 10593                           ;incstack = 0
 10594                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10595                           ;Flash_Memory_Read@address stored from wreg
 10596  116B  0020               	movlb	0	; select bank0
 10597  116C  00A2               	movwf	Flash_Memory_Read@address
 10598                           
 10599                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 10600  116D  01A1               	clrf	Flash_Memory_Read@i
 10601  116E  01A3               	clrf	Flash_Memory_Read@ret
 10602                           
 10603                           ;MCU_B1.c: 929: PMADRH = 0x30;
 10604  116F  3030               	movlw	48
 10605  1170  0023               	movlb	3	; select bank3
 10606  1171  0092               	movwf	18	;volatile
 10607                           
 10608                           ;MCU_B1.c: 930: PMADRL = address;
 10609  1172  0020               	movlb	0	; select bank0
 10610  1173  0822               	movf	Flash_Memory_Read@address,w
 10611  1174  0023               	movlb	3	; select bank3
 10612  1175  0091               	movwf	17	;volatile
 10613                           
 10614                           ;MCU_B1.c: 931: CFGS = 0;
 10615  1176  1315               	bcf	21,6	;volatile
 10616                           
 10617                           ;MCU_B1.c: 932: RD = 1;
 10618  1177  1415               	bsf	21,0	;volatile
 10619                           
 10620                           ;MCU_B1.c: 933: i = PMDATH;
 10621  1178  0814               	movf	20,w	;volatile
 10622  1179  0020               	movlb	0	; select bank0
 10623  117A  00A0               	movwf	??_Flash_Memory_Read
 10624  117B  0820               	movf	??_Flash_Memory_Read,w
 10625  117C  00A1               	movwf	Flash_Memory_Read@i
 10626                           
 10627                           ;MCU_B1.c: 934: ret = PMDATL;
 10628  117D  0023               	movlb	3	; select bank3
 10629  117E  0813               	movf	19,w	;volatile
 10630  117F  0020               	movlb	0	; select bank0
 10631  1180  00A0               	movwf	??_Flash_Memory_Read
 10632  1181  0820               	movf	??_Flash_Memory_Read,w
 10633  1182  00A3               	movwf	Flash_Memory_Read@ret
 10634                           
 10635                           ;MCU_B1.c: 935: return ret;
 10636  1183  0823               	movf	Flash_Memory_Read@ret,w
 10637  1184  0008               	return
 10638  1185                     __end_of_Flash_Memory_Read:	
 10639                           
 10640                           	psect	text58
 10641  1F2E                     __ptext58:	
 10642 ;; *************** function _DimmerLights_Main *****************
 10643 ;; Defined at:
 10644 ;;		line 416 in file "../src/Dimmer_B1.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;		None               void
 10651 ;; Registers used:
 10652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:   11
 10665 ;; This function calls:
 10666 ;;		_DimmerLights_Close
 10667 ;;		_setDimmerLights_Main
 10668 ;; This function is called by:
 10669 ;;		_main
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           
 10674                           ;psect for function _DimmerLights_Main
 10675  1F2E                     _DimmerLights_Main:	
 10676                           
 10677                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 10678                           
 10679                           ;incstack = 0
 10680                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10681  1F2E  3001               	movlw	1
 10682  1F2F  318E  261E  319F   	fcall	_setDimmerLights_Main
 10683                           
 10684                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 10685  1F32  3002               	movlw	2
 10686  1F33  318E  261E  319F   	fcall	_setDimmerLights_Main
 10687                           
 10688                           ;Dimmer_B1.c: 427: setDimmerLights_Main(3);
 10689  1F36  3003               	movlw	3
 10690  1F37  318E  261E  319F   	fcall	_setDimmerLights_Main
 10691                           
 10692                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 10693  1F3A  3190  20A2         	fcall	_DimmerLights_Close
 10694  1F3C  0008               	return
 10695  1F3D                     __end_of_DimmerLights_Main:	
 10696                           
 10697                           	psect	text59
 10698  0E1E                     __ptext59:	
 10699 ;; *************** function _setDimmerLights_Main *****************
 10700 ;; Defined at:
 10701 ;;		line 434 in file "../src/Dimmer_B1.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;  lights          1    wreg     unsigned char 
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;  lights          1   74[BANK0 ] unsigned char 
 10706 ;;  clear           1   73[BANK0 ] unsigned char 
 10707 ;; Return value:  Size  Location     Type
 10708 ;;		None               void
 10709 ;; Registers used:
 10710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;Total ram usage:        6 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:   10
 10723 ;; This function calls:
 10724 ;;		_DimmerLightsPointSelect
 10725 ;;		_setBuz
 10726 ;;		_setDimmerLights
 10727 ;;		_setDimmerLights_Adj
 10728 ;; This function is called by:
 10729 ;;		_DimmerLights_Main
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _setDimmerLights_Main
 10735  0E1E                     _setDimmerLights_Main:	
 10736                           
 10737                           ;incstack = 0
 10738                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10739                           ;setDimmerLights_Main@lights stored from wreg
 10740  0E1E  0020               	movlb	0	; select bank0
 10741  0E1F  00EA               	movwf	setDimmerLights_Main@lights
 10742                           
 10743                           ;Dimmer_B1.c: 435: char clear = 1;
 10744  0E20  01E9               	clrf	setDimmerLights_Main@clear
 10745  0E21  0AE9               	incf	setDimmerLights_Main@clear,f
 10746                           
 10747                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 10748  0E22  086A               	movf	setDimmerLights_Main@lights,w
 10749  0E23  3191  2185  318E   	fcall	_DimmerLightsPointSelect
 10750                           
 10751                           ;Dimmer_B1.c: 439: if (lights == 1) {
 10752  0E26  0020               	movlb	0	; select bank0
 10753  0E27  086A               	movf	setDimmerLights_Main@lights,w
 10754  0E28  3A01               	xorlw	1
 10755  0E29  1D03               	skipz
 10756  0E2A  2E36               	goto	l9130
 10757                           
 10758                           ;Dimmer_B1.c: 440: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10759  0E2B  01E6               	clrf	_setDimmerLights_Main$2380
 10760  0E2C  0022               	movlb	2	; select bank2
 10761  0E2D  194D               	btfsc	(_DimmerLights2^(0+256)+9),2
 10762  0E2E  1D5C               	btfss	(_DimmerLights3^(0+256)+9),2
 10763  0E2F  2E33               	goto	l9128
 10764  0E30  0020               	movlb	0	; select bank0
 10765  0E31  01E6               	clrf	_setDimmerLights_Main$2380
 10766  0E32  0AE6               	incf	_setDimmerLights_Main$2380,f
 10767  0E33                     l9128:	
 10768  0E33  0020               	movlb	0	; select bank0
 10769  0E34  0866               	movf	_setDimmerLights_Main$2380,w
 10770  0E35  2E53               	goto	L9
 10771  0E36                     l9130:	
 10772                           ;Dimmer_B1.c: 441: } else if (lights == 2) {
 10773                           
 10774  0E36  086A               	movf	setDimmerLights_Main@lights,w
 10775  0E37  3A02               	xorlw	2
 10776  0E38  1D03               	skipz
 10777  0E39  2E45               	goto	l9142
 10778                           
 10779                           ;Dimmer_B1.c: 442: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10780  0E3A  01E7               	clrf	_setDimmerLights_Main$2388
 10781  0E3B  0022               	movlb	2	; select bank2
 10782  0E3C  193E               	btfsc	(_DimmerLights1^(0+256)+9),2
 10783  0E3D  1D5C               	btfss	(_DimmerLights3^(0+256)+9),2
 10784  0E3E  2E42               	goto	l9140
 10785  0E3F  0020               	movlb	0	; select bank0
 10786  0E40  01E7               	clrf	_setDimmerLights_Main$2388
 10787  0E41  0AE7               	incf	_setDimmerLights_Main$2388,f
 10788  0E42                     l9140:	
 10789  0E42  0020               	movlb	0	; select bank0
 10790  0E43  0867               	movf	_setDimmerLights_Main$2388,w
 10791  0E44  2E53               	goto	L9
 10792  0E45                     l9142:	
 10793                           ;Dimmer_B1.c: 443: } else if (lights == 3) {
 10794                           
 10795  0E45  086A               	movf	setDimmerLights_Main@lights,w
 10796  0E46  3A03               	xorlw	3
 10797  0E47  1D03               	skipz
 10798  0E48  2E56               	goto	l9154
 10799                           
 10800                           ;Dimmer_B1.c: 444: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10801  0E49  01E8               	clrf	_setDimmerLights_Main$2389
 10802  0E4A  0022               	movlb	2	; select bank2
 10803  0E4B  193E               	btfsc	(_DimmerLights1^(0+256)+9),2
 10804  0E4C  1D4D               	btfss	(_DimmerLights2^(0+256)+9),2
 10805  0E4D  2E51               	goto	l9152
 10806  0E4E  0020               	movlb	0	; select bank0
 10807  0E4F  01E8               	clrf	_setDimmerLights_Main$2389
 10808  0E50  0AE8               	incf	_setDimmerLights_Main$2389,f
 10809  0E51                     l9152:	
 10810  0E51  0020               	movlb	0	; select bank0
 10811  0E52  0868               	movf	_setDimmerLights_Main$2389,w
 10812  0E53                     L9:	
 10813  0E53  00E5               	movwf	??_setDimmerLights_Main
 10814  0E54  0865               	movf	??_setDimmerLights_Main,w
 10815  0E55  00E9               	movwf	setDimmerLights_Main@clear
 10816  0E56                     l9154:	
 10817                           
 10818                           ;Dimmer_B1.c: 445: }
 10819                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 10820  0E56  086B               	movf	_DimmerLights,w
 10821  0E57  3E08               	addlw	8
 10822  0E58  0086               	movwf	6
 10823  0E59  3001               	movlw	1	; select bank2/3
 10824  0E5A  0087               	movwf	7
 10825  0E5B  1D01               	btfss	1,2
 10826  0E5C  2E7A               	goto	l9164
 10827                           
 10828                           ;Dimmer_B1.c: 457: if (clear == 1) {
 10829  0E5D  0869               	movf	setDimmerLights_Main@clear,w
 10830  0E5E  3A01               	xorlw	1
 10831  0E5F  1D03               	skipz
 10832  0E60  0008               	return
 10833                           
 10834                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 10835  0E61  086B               	movf	_DimmerLights,w
 10836  0E62  3E08               	addlw	8
 10837  0E63  0086               	movwf	6
 10838  0E64  3001               	movlw	1	; select bank2/3
 10839  0E65  0087               	movwf	7
 10840  0E66  1101               	bcf	1,2
 10841                           
 10842                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 10843  0E67  086B               	movf	_DimmerLights,w
 10844  0E68  3E08               	addlw	8
 10845  0E69  0086               	movwf	6
 10846  0E6A  3001               	movlw	1	; select bank2/3
 10847  0E6B  0087               	movwf	7
 10848  0E6C  1C81               	btfss	1,1
 10849  0E6D  2E74               	goto	l9162
 10850                           
 10851                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 10852  0E6E  01A3               	clrf	setDimmerLights@status
 10853  0E6F  0AA3               	incf	setDimmerLights@status,f
 10854  0E70  086A               	movf	setDimmerLights_Main@lights,w
 10855  0E71  318C  2493         	fcall	_setDimmerLights
 10856                           
 10857                           ;Dimmer_B1.c: 461: } else {
 10858  0E73  0008               	return
 10859  0E74                     l9162:	
 10860                           
 10861                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 10862  0E74  0020               	movlb	0	; select bank0
 10863  0E75  01A3               	clrf	setDimmerLights@status
 10864  0E76  086A               	movf	setDimmerLights_Main@lights,w
 10865  0E77  318C  2493         	fcall	_setDimmerLights
 10866                           
 10867                           ;Dimmer_B1.c: 463: }
 10868                           ;Dimmer_B1.c: 467: }
 10869                           ;Dimmer_B1.c: 468: } else {
 10870  0E79  0008               	return
 10871  0E7A                     l9164:	
 10872                           
 10873                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 10874  0E7A  0020               	movlb	0	; select bank0
 10875  0E7B  086B               	movf	_DimmerLights,w
 10876  0E7C  3E08               	addlw	8
 10877  0E7D  0086               	movwf	6
 10878  0E7E  3001               	movlw	1	; select bank2/3
 10879  0E7F  0087               	movwf	7
 10880  0E80  1E01               	btfss	1,4
 10881  0E81  0008               	return
 10882                           
 10883                           ;Dimmer_B1.c: 470: if (clear == 1) {
 10884  0E82  0869               	movf	setDimmerLights_Main@clear,w
 10885  0E83  3A01               	xorlw	1
 10886  0E84  1D03               	skipz
 10887  0E85  0008               	return
 10888                           
 10889                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 10890  0E86  086B               	movf	_DimmerLights,w
 10891  0E87  3E08               	addlw	8
 10892  0E88  0086               	movwf	6
 10893  0E89  3001               	movlw	1	; select bank2/3
 10894  0E8A  0087               	movwf	7
 10895  0E8B  1201               	bcf	1,4
 10896                           
 10897                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 10898  0E8C  086B               	movf	_DimmerLights,w
 10899  0E8D  3E08               	addlw	8
 10900  0E8E  0086               	movwf	6
 10901  0E8F  3001               	movlw	1	; select bank2/3
 10902  0E90  0087               	movwf	7
 10903  0E91  1D81               	btfss	1,3
 10904  0E92  2EA2               	goto	l9174
 10905                           
 10906                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 10907  0E93  01E2               	clrf	setDimmerLights_Adj@status
 10908  0E94  0AE2               	incf	setDimmerLights_Adj@status,f
 10909  0E95  086A               	movf	setDimmerLights_Main@lights,w
 10910  0E96  3195  251D  318E   	fcall	_setDimmerLights_Adj
 10911                           
 10912                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 10913  0E99  3064               	movlw	100
 10914  0E9A  0020               	movlb	0	; select bank0
 10915  0E9B  00A9               	movwf	setBuz@time
 10916  0E9C  3000               	movlw	0
 10917  0E9D  00AA               	movwf	setBuz@time+1
 10918  0E9E  3001               	movlw	1
 10919  0E9F  3197  27A7         	fcall	_setBuz
 10920                           
 10921                           ;Dimmer_B1.c: 475: } else {
 10922  0EA1  0008               	return
 10923  0EA2                     l9174:	
 10924                           
 10925                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 10926  0EA2  0020               	movlb	0	; select bank0
 10927  0EA3  01E2               	clrf	setDimmerLights_Adj@status
 10928  0EA4  086A               	movf	setDimmerLights_Main@lights,w
 10929  0EA5  3195  251D         	fcall	_setDimmerLights_Adj
 10930  0EA7  0008               	return
 10931  0EA8                     __end_of_setDimmerLights_Main:	
 10932                           
 10933                           	psect	text60
 10934  151D                     __ptext60:	
 10935 ;; *************** function _setDimmerLights_Adj *****************
 10936 ;; Defined at:
 10937 ;;		line 655 in file "../src/Dimmer_B1.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;  lights          1    wreg     unsigned char 
 10940 ;;  status          1   66[BANK0 ] unsigned char 
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;  lights          1   68[BANK0 ] unsigned char 
 10943 ;; Return value:  Size  Location     Type
 10944 ;;		None               void
 10945 ;; Registers used:
 10946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10947 ;; Tracked objects:
 10948 ;;		On entry : 0/0
 10949 ;;		On exit  : 0/0
 10950 ;;		Unchanged: 0/0
 10951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;Total ram usage:        3 bytes
 10957 ;; Hardware stack levels used:    1
 10958 ;; Hardware stack levels required when called:    9
 10959 ;; This function calls:
 10960 ;;		_DimmerLightsPointSelect
 10961 ;;		_setRF_DimmerLights
 10962 ;;		_setTxData
 10963 ;; This function is called by:
 10964 ;;		_setDimmerLights_Main
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           
 10969                           ;psect for function _setDimmerLights_Adj
 10970  151D                     _setDimmerLights_Adj:	
 10971                           
 10972                           ;incstack = 0
 10973                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10974                           ;setDimmerLights_Adj@lights stored from wreg
 10975  151D  0020               	movlb	0	; select bank0
 10976  151E  00E4               	movwf	setDimmerLights_Adj@lights
 10977                           
 10978                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 10979  151F  0864               	movf	setDimmerLights_Adj@lights,w
 10980  1520  3191  2185  3195   	fcall	_DimmerLightsPointSelect
 10981                           
 10982                           ;Dimmer_B1.c: 657: if (status == 1) {
 10983  1523  0020               	movlb	0	; select bank0
 10984  1524  0862               	movf	setDimmerLights_Adj@status,w
 10985  1525  3A01               	xorlw	1
 10986  1526  1D03               	skipz
 10987  1527  2D33               	goto	l8738
 10988                           
 10989                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 10990  1528  086B               	movf	_DimmerLights,w
 10991  1529  0086               	movwf	6
 10992  152A  3001               	movlw	1	; select bank2/3
 10993  152B  0087               	movwf	7
 10994  152C  1581               	bsf	1,3
 10995                           
 10996                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 10997  152D  086B               	movf	_DimmerLights,w
 10998  152E  0086               	movwf	6
 10999  152F  3001               	movlw	1	; select bank2/3
 11000  1530  0087               	movwf	7
 11001  1531  1481               	bsf	1,1
 11002                           
 11003                           ;Dimmer_B1.c: 660: } else {
 11004  1532  0008               	return
 11005  1533                     l8738:	
 11006                           
 11007                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 11008  1533  086B               	movf	_DimmerLights,w
 11009  1534  0086               	movwf	6
 11010  1535  3001               	movlw	1	; select bank2/3
 11011  1536  0087               	movwf	7
 11012  1537  1D81               	btfss	1,3
 11013  1538  0008               	return
 11014                           
 11015                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 11016  1539  086B               	movf	_DimmerLights,w
 11017  153A  0086               	movwf	6
 11018  153B  3001               	movlw	1	; select bank2/3
 11019  153C  0087               	movwf	7
 11020  153D  1081               	bcf	1,1
 11021                           
 11022                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 11023  153E  086B               	movf	_DimmerLights,w
 11024  153F  0086               	movwf	6
 11025  1540  3001               	movlw	1	; select bank2/3
 11026  1541  0087               	movwf	7
 11027  1542  1181               	bcf	1,3
 11028                           
 11029                           ;Dimmer_B1.c: 665: ;;
 11030                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11031  1543  086B               	movf	_DimmerLights,w
 11032  1544  3E04               	addlw	4
 11033  1545  0086               	movwf	6
 11034  1546  3001               	movlw	1	; select bank2/3
 11035  1547  0087               	movwf	7
 11036  1548  0801               	movf	1,w
 11037  1549  00E3               	movwf	??_setDimmerLights_Adj
 11038  154A  086B               	movf	_DimmerLights,w
 11039  154B  3E05               	addlw	5
 11040  154C  0086               	movwf	6
 11041  154D  3001               	movlw	1	; select bank2/3
 11042  154E  0087               	movwf	7
 11043  154F  0863               	movf	??_setDimmerLights_Adj,w
 11044  1550  0081               	movwf	1
 11045                           
 11046                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 11047  1551  01DD               	clrf	setRF_DimmerLights@on
 11048  1552  0ADD               	incf	setRF_DimmerLights@on,f
 11049  1553  0864               	movf	setDimmerLights_Adj@lights,w
 11050  1554  318A  22D6  3195   	fcall	_setRF_DimmerLights
 11051                           
 11052                           ;Dimmer_B1.c: 675: setTxData();
 11053  1557  3185  25F8         	fcall	_setTxData
 11054  1559  0008               	return
 11055  155A                     __end_of_setDimmerLights_Adj:	
 11056                           
 11057                           	psect	text61
 11058  0C93                     __ptext61:	
 11059 ;; *************** function _setDimmerLights *****************
 11060 ;; Defined at:
 11061 ;;		line 602 in file "../src/Dimmer_B1.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;  lights          1    wreg     unsigned char 
 11064 ;;  status          1    3[BANK0 ] unsigned char 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  lights          1    5[BANK0 ] unsigned char 
 11067 ;; Return value:  Size  Location     Type
 11068 ;;		None               void
 11069 ;; Registers used:
 11070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11076 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;Total ram usage:        3 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    7
 11083 ;; This function calls:
 11084 ;;		_DimmerLightsPointSelect
 11085 ;;		_setLED
 11086 ;;		_setMemory_GO
 11087 ;; This function is called by:
 11088 ;;		_setDimmerLights_Main
 11089 ;;		_setControl_Lights_Table
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           
 11094                           ;psect for function _setDimmerLights
 11095  0C93                     _setDimmerLights:	
 11096                           
 11097                           ;incstack = 0
 11098                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11099                           ;setDimmerLights@lights stored from wreg
 11100  0C93  0020               	movlb	0	; select bank0
 11101  0C94  00A5               	movwf	setDimmerLights@lights
 11102                           
 11103                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 11104  0C95  0825               	movf	setDimmerLights@lights,w
 11105  0C96  3191  2185  318C   	fcall	_DimmerLightsPointSelect
 11106                           
 11107                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 11108  0C99  0020               	movlb	0	; select bank0
 11109  0C9A  0825               	movf	setDimmerLights@lights,w
 11110  0C9B  00A4               	movwf	??_setDimmerLights
 11111  0C9C  0A73               	incf	_Dimmer,w
 11112  0C9D  0086               	movwf	6
 11113  0C9E  0187               	clrf	7
 11114  0C9F  0824               	movf	??_setDimmerLights,w
 11115  0CA0  0081               	movwf	1
 11116                           
 11117                           ;Dimmer_B1.c: 605: if (status == 1) {
 11118  0CA1  0823               	movf	setDimmerLights@status,w
 11119  0CA2  3A01               	xorlw	1
 11120  0CA3  1D03               	skipz
 11121  0CA4  2CE5               	goto	l8414
 11122                           
 11123                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 11124  0CA5  086B               	movf	_DimmerLights,w
 11125  0CA6  0086               	movwf	6
 11126  0CA7  3001               	movlw	1	; select bank2/3
 11127  0CA8  0087               	movwf	7
 11128  0CA9  1681               	bsf	1,5
 11129                           
 11130                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 11131  0CAA  01A1               	clrf	setLED@command
 11132  0CAB  0825               	movf	setDimmerLights@lights,w
 11133  0CAC  318B  23B1  318C   	fcall	_setLED
 11134                           
 11135                           ;Dimmer_B1.c: 609: ;;
 11136                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 11137  0CAF  0020               	movlb	0	; select bank0
 11138  0CB0  086B               	movf	_DimmerLights,w
 11139  0CB1  0086               	movwf	6
 11140  0CB2  3001               	movlw	1	; select bank2/3
 11141  0CB3  0087               	movwf	7
 11142  0CB4  1481               	bsf	1,1
 11143                           
 11144                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 11145  0CB5  3007               	movlw	7
 11146  0CB6  00A4               	movwf	??_setDimmerLights
 11147  0CB7  086B               	movf	_DimmerLights,w
 11148  0CB8  3E02               	addlw	2
 11149  0CB9  0086               	movwf	6
 11150  0CBA  3001               	movlw	1	; select bank2/3
 11151  0CBB  0087               	movwf	7
 11152  0CBC  0824               	movf	??_setDimmerLights,w
 11153  0CBD  0081               	movwf	1
 11154                           
 11155                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 11156  0CBE  086B               	movf	_DimmerLights,w
 11157  0CBF  0086               	movwf	6
 11158  0CC0  3001               	movlw	1	; select bank2/3
 11159  0CC1  0087               	movwf	7
 11160  0CC2  1B01               	btfsc	1,6
 11161  0CC3  0008               	return
 11162                           
 11163                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 11164  0CC4  086B               	movf	_DimmerLights,w
 11165  0CC5  0086               	movwf	6
 11166  0CC6  3001               	movlw	1	; select bank2/3
 11167  0CC7  0087               	movwf	7
 11168  0CC8  1701               	bsf	1,6
 11169                           
 11170                           ;Dimmer_B1.c: 616: ;;
 11171                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 11172  0CC9  3000               	movlw	0
 11173  0CCA  3190  20F3         	fcall	_setMemory_GO
 11174                           
 11175                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11176  0CCC  0020               	movlb	0	; select bank0
 11177  0CCD  086B               	movf	_DimmerLights,w
 11178  0CCE  3E05               	addlw	5
 11179  0CCF  0086               	movwf	6
 11180  0CD0  3001               	movlw	1	; select bank2/3
 11181  0CD1  0087               	movwf	7
 11182  0CD2  0801               	movf	1,w
 11183  0CD3  00A4               	movwf	??_setDimmerLights
 11184  0CD4  086B               	movf	_DimmerLights,w
 11185  0CD5  3E04               	addlw	4
 11186  0CD6  0086               	movwf	6
 11187  0CD7  3001               	movlw	1	; select bank2/3
 11188  0CD8  0087               	movwf	7
 11189  0CD9  0824               	movf	??_setDimmerLights,w
 11190  0CDA  0081               	movwf	1
 11191                           
 11192                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-90)*0.8));
 11193  0CDB  3008               	movlw	8
 11194  0CDC  00A4               	movwf	??_setDimmerLights
 11195  0CDD  086B               	movf	_DimmerLights,w
 11196  0CDE  3E04               	addlw	4
 11197  0CDF  0086               	movwf	6
 11198  0CE0  3001               	movlw	1	; select bank2/3
 11199  0CE1  0087               	movwf	7
 11200  0CE2  0824               	movf	??_setDimmerLights,w
 11201  0CE3  0081               	movwf	1
 11202                           
 11203                           ;Dimmer_B1.c: 626: }
 11204                           ;Dimmer_B1.c: 627: } else {
 11205  0CE4  0008               	return
 11206  0CE5                     l8414:	
 11207                           
 11208                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 11209  0CE5  086B               	movf	_DimmerLights,w
 11210  0CE6  0086               	movwf	6
 11211  0CE7  3001               	movlw	1	; select bank2/3
 11212  0CE8  0087               	movwf	7
 11213  0CE9  1281               	bcf	1,5
 11214                           
 11215                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11216  0CEA  086B               	movf	_DimmerLights,w
 11217  0CEB  3E06               	addlw	6
 11218  0CEC  0086               	movwf	6
 11219  0CED  3001               	movlw	1	; select bank2/3
 11220  0CEE  0087               	movwf	7
 11221  0CEF  0801               	movf	1,w
 11222  0CF0  00A4               	movwf	??_setDimmerLights
 11223  0CF1  086B               	movf	_DimmerLights,w
 11224  0CF2  3E04               	addlw	4
 11225  0CF3  0086               	movwf	6
 11226  0CF4  3001               	movlw	1	; select bank2/3
 11227  0CF5  0087               	movwf	7
 11228  0CF6  0824               	movf	??_setDimmerLights,w
 11229  0CF7  0081               	movwf	1
 11230                           
 11231                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 11232  0CF8  086B               	movf	_DimmerLights,w
 11233  0CF9  0086               	movwf	6
 11234  0CFA  3001               	movlw	1	; select bank2/3
 11235  0CFB  0087               	movwf	7
 11236  0CFC  1481               	bsf	1,1
 11237                           
 11238                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 11239  0CFD  086B               	movf	_DimmerLights,w
 11240  0CFE  0086               	movwf	6
 11241  0CFF  3001               	movlw	1	; select bank2/3
 11242  0D00  0087               	movwf	7
 11243  0D01  1181               	bcf	1,3
 11244                           
 11245                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 11246  0D02  086B               	movf	_DimmerLights,w
 11247  0D03  0086               	movwf	6
 11248  0D04  3001               	movlw	1	; select bank2/3
 11249  0D05  0087               	movwf	7
 11250  0D06  1201               	bcf	1,4
 11251                           
 11252                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 11253  0D07  3007               	movlw	7
 11254  0D08  00A4               	movwf	??_setDimmerLights
 11255  0D09  086B               	movf	_DimmerLights,w
 11256  0D0A  3E02               	addlw	2
 11257  0D0B  0086               	movwf	6
 11258  0D0C  3001               	movlw	1	; select bank2/3
 11259  0D0D  0087               	movwf	7
 11260  0D0E  0824               	movf	??_setDimmerLights,w
 11261  0D0F  0081               	movwf	1
 11262  0D10  0008               	return
 11263  0D11                     __end_of_setDimmerLights:	
 11264                           
 11265                           	psect	text62
 11266  0BB1                     __ptext62:	
 11267 ;; *************** function _setLED *****************
 11268 ;; Defined at:
 11269 ;;		line 70 in file "../src/LED_B1.c"
 11270 ;; Parameters:    Size  Location     Type
 11271 ;;  led             1    wreg     unsigned char 
 11272 ;;  command         1    1[BANK0 ] unsigned char 
 11273 ;; Auto vars:     Size  Location     Type
 11274 ;;  led             1    2[BANK0 ] unsigned char 
 11275 ;; Return value:  Size  Location     Type
 11276 ;;		None               void
 11277 ;; Registers used:
 11278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11279 ;; Tracked objects:
 11280 ;;		On entry : 0/0
 11281 ;;		On exit  : 0/0
 11282 ;;		Unchanged: 0/0
 11283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11284 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;Total ram usage:        2 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    6
 11291 ;; This function calls:
 11292 ;;		_LedPointSelect
 11293 ;; This function is called by:
 11294 ;;		_setDimmerLights
 11295 ;;		_setLED_Initialization
 11296 ;;		_setSw_Initialization
 11297 ;;		_setDimmerLights_ERROR
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _setLED
 11303  0BB1                     _setLED:	
 11304                           
 11305                           ;incstack = 0
 11306                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11307                           ;setLED@led stored from wreg
 11308  0BB1  0020               	movlb	0	; select bank0
 11309  0BB2  00A2               	movwf	setLED@led
 11310                           
 11311                           ;LED_B1.c: 71: LedPointSelect(led);
 11312  0BB3  0822               	movf	setLED@led,w
 11313  0BB4  3193  2322  318B   	fcall	_LedPointSelect
 11314                           
 11315                           ;LED_B1.c: 72: if (command == 0) {
 11316  0BB7  0020               	movlb	0	; select bank0
 11317  0BB8  08A1               	movf	setLED@command,f
 11318  0BB9  1D03               	skipz
 11319  0BBA  2BD3               	goto	l8278
 11320                           
 11321                           ;LED_B1.c: 74: if (led == 1) {
 11322  0BBB  0822               	movf	setLED@led,w
 11323  0BBC  3A01               	xorlw	1
 11324  0BBD  1D03               	skipz
 11325  0BBE  2BC1               	goto	l8266
 11326                           
 11327                           ;LED_B1.c: 78: RC7 = 1;
 11328  0BBF  178E               	bsf	14,7	;volatile
 11329                           
 11330                           ;LED_B1.c: 80: }
 11331  0BC0  0008               	return
 11332  0BC1                     l8266:	
 11333                           
 11334                           ;LED_B1.c: 83: else if (led == 2) {
 11335  0BC1  0822               	movf	setLED@led,w
 11336  0BC2  3A02               	xorlw	2
 11337  0BC3  1D03               	skipz
 11338  0BC4  2BC7               	goto	l8270
 11339                           
 11340                           ;LED_B1.c: 87: RA3 = 1;
 11341  0BC5  158C               	bsf	12,3	;volatile
 11342                           
 11343                           ;LED_B1.c: 89: }
 11344  0BC6  0008               	return
 11345  0BC7                     l8270:	
 11346                           
 11347                           ;LED_B1.c: 92: else if (led == 3) {
 11348  0BC7  0822               	movf	setLED@led,w
 11349  0BC8  3A03               	xorlw	3
 11350  0BC9  1D03               	skipz
 11351  0BCA  2BCD               	goto	l8274
 11352                           
 11353                           ;LED_B1.c: 96: RC6 = 1;
 11354  0BCB  170E               	bsf	14,6	;volatile
 11355                           
 11356                           ;LED_B1.c: 98: }
 11357  0BCC  0008               	return
 11358  0BCD                     l8274:	
 11359                           
 11360                           ;LED_B1.c: 101: else if (led == 99) {
 11361  0BCD  0822               	movf	setLED@led,w
 11362  0BCE  3A63               	xorlw	99
 11363  0BCF  1D03               	skipz
 11364  0BD0  0008               	return
 11365                           
 11366                           ;LED_B1.c: 105: RB5 = 1;
 11367  0BD1  168D               	bsf	13,5	;volatile
 11368                           
 11369                           ;LED_B1.c: 107: }
 11370                           ;LED_B1.c: 109: } else if (command == 1) {
 11371  0BD2  0008               	return
 11372  0BD3                     l8278:	
 11373  0BD3  0821               	movf	setLED@command,w
 11374  0BD4  3A01               	xorlw	1
 11375  0BD5  1D03               	skipz
 11376  0BD6  2BEF               	goto	l8296
 11377                           
 11378                           ;LED_B1.c: 111: if (led == 1) {
 11379  0BD7  0822               	movf	setLED@led,w
 11380  0BD8  3A01               	xorlw	1
 11381  0BD9  1D03               	skipz
 11382  0BDA  2BDD               	goto	l8284
 11383                           
 11384                           ;LED_B1.c: 115: RC7 = 0;
 11385  0BDB  138E               	bcf	14,7	;volatile
 11386                           
 11387                           ;LED_B1.c: 117: }
 11388  0BDC  0008               	return
 11389  0BDD                     l8284:	
 11390                           
 11391                           ;LED_B1.c: 120: else if (led == 2) {
 11392  0BDD  0822               	movf	setLED@led,w
 11393  0BDE  3A02               	xorlw	2
 11394  0BDF  1D03               	skipz
 11395  0BE0  2BE3               	goto	l8288
 11396                           
 11397                           ;LED_B1.c: 124: RA3 = 0;
 11398  0BE1  118C               	bcf	12,3	;volatile
 11399                           
 11400                           ;LED_B1.c: 126: }
 11401  0BE2  0008               	return
 11402  0BE3                     l8288:	
 11403                           
 11404                           ;LED_B1.c: 129: else if (led == 3) {
 11405  0BE3  0822               	movf	setLED@led,w
 11406  0BE4  3A03               	xorlw	3
 11407  0BE5  1D03               	skipz
 11408  0BE6  2BE9               	goto	l8292
 11409                           
 11410                           ;LED_B1.c: 133: RC6 = 0;
 11411  0BE7  130E               	bcf	14,6	;volatile
 11412                           
 11413                           ;LED_B1.c: 135: }
 11414  0BE8  0008               	return
 11415  0BE9                     l8292:	
 11416                           
 11417                           ;LED_B1.c: 138: else if (led == 99) {
 11418  0BE9  0822               	movf	setLED@led,w
 11419  0BEA  3A63               	xorlw	99
 11420  0BEB  1D03               	skipz
 11421  0BEC  0008               	return
 11422                           
 11423                           ;LED_B1.c: 142: RB5 = 0;
 11424  0BED  128D               	bcf	13,5	;volatile
 11425                           
 11426                           ;LED_B1.c: 144: }
 11427                           ;LED_B1.c: 146: } else if (command == 10) {
 11428  0BEE  0008               	return
 11429  0BEF                     l8296:	
 11430  0BEF  0821               	movf	setLED@command,w
 11431  0BF0  3A0A               	xorlw	10
 11432  0BF1  1D03               	skipz
 11433  0BF2  2C18               	goto	l8316
 11434                           
 11435                           ;LED_B1.c: 147: LED->GO = 0;
 11436  0BF3  0870               	movf	_LED,w
 11437  0BF4  0086               	movwf	6
 11438  0BF5  0871               	movf	_LED+1,w
 11439  0BF6  0087               	movwf	7
 11440  0BF7  1081               	bcf	1,1
 11441                           
 11442                           ;LED_B1.c: 148: LED->Time = 0;
 11443  0BF8  0870               	movf	_LED,w
 11444  0BF9  0086               	movwf	6
 11445  0BFA  0871               	movf	_LED+1,w
 11446  0BFB  0087               	movwf	7
 11447  0BFC  3141               	addfsr 1,1
 11448  0BFD  3000               	movlw	0
 11449  0BFE  3FC0               	movwi [0]fsr1
 11450  0BFF  3FC1               	movwi [1]fsr1
 11451                           
 11452                           ;LED_B1.c: 150: if (led == 1) {
 11453  0C00  0822               	movf	setLED@led,w
 11454  0C01  3A01               	xorlw	1
 11455  0C02  1D03               	skipz
 11456  0C03  2C06               	goto	l8304
 11457                           
 11458                           ;LED_B1.c: 154: RC7 = 1;
 11459  0C04  178E               	bsf	14,7	;volatile
 11460                           
 11461                           ;LED_B1.c: 156: }
 11462  0C05  0008               	return
 11463  0C06                     l8304:	
 11464                           
 11465                           ;LED_B1.c: 159: else if (led == 2) {
 11466  0C06  0822               	movf	setLED@led,w
 11467  0C07  3A02               	xorlw	2
 11468  0C08  1D03               	skipz
 11469  0C09  2C0C               	goto	l8308
 11470                           
 11471                           ;LED_B1.c: 163: RA3 = 1;
 11472  0C0A  158C               	bsf	12,3	;volatile
 11473                           
 11474                           ;LED_B1.c: 165: }
 11475  0C0B  0008               	return
 11476  0C0C                     l8308:	
 11477                           
 11478                           ;LED_B1.c: 168: else if (led == 3) {
 11479  0C0C  0822               	movf	setLED@led,w
 11480  0C0D  3A03               	xorlw	3
 11481  0C0E  1D03               	skipz
 11482  0C0F  2C12               	goto	l8312
 11483                           
 11484                           ;LED_B1.c: 172: RC6 = 1;
 11485  0C10  170E               	bsf	14,6	;volatile
 11486                           
 11487                           ;LED_B1.c: 174: }
 11488  0C11  0008               	return
 11489  0C12                     l8312:	
 11490                           
 11491                           ;LED_B1.c: 177: else if (led == 99) {
 11492  0C12  0822               	movf	setLED@led,w
 11493  0C13  3A63               	xorlw	99
 11494  0C14  1D03               	skipz
 11495  0C15  0008               	return
 11496                           
 11497                           ;LED_B1.c: 181: RB5 = 1;
 11498  0C16  168D               	bsf	13,5	;volatile
 11499                           
 11500                           ;LED_B1.c: 183: }
 11501                           ;LED_B1.c: 185: } else if (command == 11) {
 11502  0C17  0008               	return
 11503  0C18                     l8316:	
 11504  0C18  0821               	movf	setLED@command,w
 11505  0C19  3A0B               	xorlw	11
 11506  0C1A  1D03               	skipz
 11507  0C1B  0008               	return
 11508                           
 11509                           ;LED_B1.c: 186: LED->GO = 1;
 11510  0C1C  0870               	movf	_LED,w
 11511  0C1D  0086               	movwf	6
 11512  0C1E  0871               	movf	_LED+1,w
 11513  0C1F  0087               	movwf	7
 11514  0C20  1481               	bsf	1,1
 11515  0C21  0008               	return
 11516  0C22                     __end_of_setLED:	
 11517                           
 11518                           	psect	text63
 11519  1322                     __ptext63:	
 11520 ;; *************** function _LedPointSelect *****************
 11521 ;; Defined at:
 11522 ;;		line 7 in file "../src/LED_B1.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;  led             1    wreg     unsigned char 
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;  led             1    0[BANK0 ] unsigned char 
 11527 ;; Return value:  Size  Location     Type
 11528 ;;		None               void
 11529 ;; Registers used:
 11530 ;;		wreg, status,2, status,0
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;Total ram usage:        1 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    5
 11543 ;; This function calls:
 11544 ;;		Nothing
 11545 ;; This function is called by:
 11546 ;;		_setLED_Initialization
 11547 ;;		_setLED
 11548 ;;		_setLED_Main
 11549 ;; This function uses a non-reentrant model
 11550 ;;
 11551                           
 11552                           
 11553                           ;psect for function _LedPointSelect
 11554  1322                     _LedPointSelect:	
 11555                           
 11556                           ;incstack = 0
 11557                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11558                           ;LedPointSelect@led stored from wreg
 11559  1322  0020               	movlb	0	; select bank0
 11560  1323  00A0               	movwf	LedPointSelect@led
 11561                           
 11562                           ;LED_B1.c: 9: if (led == 1) {
 11563  1324  0820               	movf	LedPointSelect@led,w
 11564  1325  3A01               	xorlw	1
 11565  1326  1D03               	skipz
 11566  1327  2B2D               	goto	l8056
 11567                           
 11568                           ;LED_B1.c: 10: LED = &VarLED1;
 11569  1328  3062               	movlw	low _VarLED1
 11570  1329  00F0               	movwf	_LED
 11571  132A  3001               	movlw	high _VarLED1
 11572  132B  00F1               	movwf	_LED+1
 11573                           
 11574                           ;LED_B1.c: 11: }
 11575  132C  0008               	return
 11576  132D                     l8056:	
 11577                           
 11578                           ;LED_B1.c: 14: else if (led == 2) {
 11579  132D  0820               	movf	LedPointSelect@led,w
 11580  132E  3A02               	xorlw	2
 11581  132F  1D03               	skipz
 11582  1330  2B36               	goto	l8060
 11583                           
 11584                           ;LED_B1.c: 15: LED = &VarLED2;
 11585  1331  3066               	movlw	low _VarLED2
 11586  1332  00F0               	movwf	_LED
 11587  1333  3001               	movlw	high _VarLED2
 11588  1334  00F1               	movwf	_LED+1
 11589                           
 11590                           ;LED_B1.c: 16: }
 11591  1335  0008               	return
 11592  1336                     l8060:	
 11593                           
 11594                           ;LED_B1.c: 19: else if (led == 3) {
 11595  1336  0820               	movf	LedPointSelect@led,w
 11596  1337  3A03               	xorlw	3
 11597  1338  1D03               	skipz
 11598  1339  2B3F               	goto	l8064
 11599                           
 11600                           ;LED_B1.c: 20: LED = &VarLED3;
 11601  133A  306A               	movlw	low _VarLED3
 11602  133B  00F0               	movwf	_LED
 11603  133C  3001               	movlw	high _VarLED3
 11604  133D  00F1               	movwf	_LED+1
 11605                           
 11606                           ;LED_B1.c: 21: }
 11607  133E  0008               	return
 11608  133F                     l8064:	
 11609                           
 11610                           ;LED_B1.c: 24: else if (led == 99) {
 11611  133F  0820               	movf	LedPointSelect@led,w
 11612  1340  3A63               	xorlw	99
 11613  1341  1D03               	skipz
 11614  1342  0008               	return
 11615                           
 11616                           ;LED_B1.c: 25: LED = &VarErrLED;
 11617  1343  30DE               	movlw	low _VarErrLED
 11618  1344  00F0               	movwf	_LED
 11619  1345  3000               	movlw	high _VarErrLED
 11620  1346  00F1               	movwf	_LED+1
 11621  1347  0008               	return
 11622  1348                     __end_of_LedPointSelect:	
 11623                           
 11624                           	psect	text64
 11625  10A2                     __ptext64:	
 11626 ;; *************** function _DimmerLights_Close *****************
 11627 ;; Defined at:
 11628 ;;		line 405 in file "../src/Dimmer_B1.c"
 11629 ;; Parameters:    Size  Location     Type
 11630 ;;		None
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;		None
 11633 ;; Return value:  Size  Location     Type
 11634 ;;		None               void
 11635 ;; Registers used:
 11636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;Total ram usage:        0 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    6
 11649 ;; This function calls:
 11650 ;;		_getDimmerLights_StatusFlag
 11651 ;;		_setMemory_GO
 11652 ;; This function is called by:
 11653 ;;		_DimmerLights_Main
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           
 11658                           ;psect for function _DimmerLights_Close
 11659  10A2                     _DimmerLights_Close:	
 11660                           
 11661                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11665  10A2  0873               	movf	_Dimmer,w
 11666  10A3  0086               	movwf	6
 11667  10A4  0187               	clrf	7
 11668  10A5  1C01               	btfss	1,0
 11669  10A6  0008               	return
 11670                           
 11671                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 11672  10A7  0873               	movf	_Dimmer,w
 11673  10A8  0086               	movwf	6
 11674  10A9  0187               	clrf	7
 11675  10AA  1001               	bcf	1,0
 11676                           
 11677                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 11678  10AB  3190  208F  3190   	fcall	_getDimmerLights_StatusFlag
 11679  10AE  3800               	iorlw	0
 11680  10AF  1D03               	skipz
 11681  10B0  0008               	return
 11682                           
 11683                           ;Dimmer_B1.c: 409: ;;
 11684                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 11685  10B1  3001               	movlw	1
 11686  10B2  3190  20F3         	fcall	_setMemory_GO
 11687  10B4  0008               	return
 11688  10B5                     __end_of_DimmerLights_Close:	
 11689                           
 11690                           	psect	text65
 11691  10F3                     __ptext65:	
 11692 ;; *************** function _setMemory_GO *****************
 11693 ;; Defined at:
 11694 ;;		line 995 in file "../src/MCU_B1.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;  command         1    wreg     unsigned char 
 11697 ;; Auto vars:     Size  Location     Type
 11698 ;;  command         1    2[BANK0 ] unsigned char 
 11699 ;; Return value:  Size  Location     Type
 11700 ;;		None               void
 11701 ;; Registers used:
 11702 ;;		wreg, status,2, status,0
 11703 ;; Tracked objects:
 11704 ;;		On entry : 0/0
 11705 ;;		On exit  : 0/0
 11706 ;;		Unchanged: 0/0
 11707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;Total ram usage:        3 bytes
 11713 ;; Hardware stack levels used:    1
 11714 ;; Hardware stack levels required when called:    5
 11715 ;; This function calls:
 11716 ;;		Nothing
 11717 ;; This function is called by:
 11718 ;;		_DimmerLights_Close
 11719 ;;		_setDimmerLights
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           
 11724                           ;psect for function _setMemory_GO
 11725  10F3                     _setMemory_GO:	
 11726                           
 11727                           ;incstack = 0
 11728                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11729                           ;setMemory_GO@command stored from wreg
 11730  10F3  0020               	movlb	0	; select bank0
 11731  10F4  00A2               	movwf	setMemory_GO@command
 11732                           
 11733                           ;MCU_B1.c: 996: Memory.GO = command;
 11734  10F5  0822               	movf	setMemory_GO@command,w
 11735  10F6  0023               	movlb	3	; select bank3
 11736  10F7  10C4               	bcf	(_Memory^(0+384)+36),1
 11737  10F8  1D03               	skipz
 11738  10F9  14C4               	bsf	(_Memory^(0+384)+36),1
 11739                           
 11740                           ;MCU_B1.c: 997: if (command == 0) {
 11741  10FA  0020               	movlb	0	; select bank0
 11742  10FB  08A2               	movf	setMemory_GO@command,f
 11743  10FC  1D03               	skipz
 11744  10FD  0008               	return
 11745                           
 11746                           ;MCU_B1.c: 998: Memory.Time = command;
 11747  10FE  0822               	movf	setMemory_GO@command,w
 11748  10FF  00A0               	movwf	??_setMemory_GO
 11749  1100  01A1               	clrf	??_setMemory_GO+1
 11750  1101  0820               	movf	??_setMemory_GO,w
 11751  1102  0023               	movlb	3	; select bank3
 11752  1103  00C2               	movwf	(_Memory^(0+384)+34)
 11753  1104  0020               	movlb	0	; select bank0
 11754  1105  0821               	movf	??_setMemory_GO+1,w
 11755  1106  0023               	movlb	3	; select bank3
 11756  1107  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11757  1108  0008               	return
 11758  1109                     __end_of_setMemory_GO:	
 11759                           
 11760                           	psect	text66
 11761  108F                     __ptext66:	
 11762 ;; *************** function _getDimmerLights_StatusFlag *****************
 11763 ;; Defined at:
 11764 ;;		line 484 in file "../src/Dimmer_B1.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;		None
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;  Status          1    1[BANK0 ] unsigned char 
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      unsigned char 
 11771 ;; Registers used:
 11772 ;;		wreg, status,2
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;Total ram usage:        3 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; Hardware stack levels required when called:    5
 11785 ;; This function calls:
 11786 ;;		Nothing
 11787 ;; This function is called by:
 11788 ;;		_DimmerLights_Close
 11789 ;;		_DimmerLights_Exceptions
 11790 ;; This function uses a non-reentrant model
 11791 ;;
 11792                           
 11793                           
 11794                           ;psect for function _getDimmerLights_StatusFlag
 11795  108F                     _getDimmerLights_StatusFlag:	
 11796                           
 11797                           ;Dimmer_B1.c: 485: char Status = 0;
 11798                           
 11799                           ;incstack = 0
 11800                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11801  108F  0020               	movlb	0	; select bank0
 11802  1090  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11803                           
 11804                           ;Dimmer_B1.c: 488: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 11805  1091  01A2               	clrf	_getDimmerLights_StatusFlag$2424
 11806  1092  0AA2               	incf	_getDimmerLights_StatusFlag$2424,f
 11807  1093  0022               	movlb	2	; select bank2
 11808  1094  1F35               	btfss	_DimmerLights1^(0+256),6
 11809  1095  1B44               	btfsc	_DimmerLights2^(0+256),6
 11810  1096  289B               	goto	l8726
 11811  1097  1B53               	btfsc	_DimmerLights3^(0+256),6
 11812  1098  289B               	goto	l8726
 11813  1099  0020               	movlb	0	; select bank0
 11814  109A  01A2               	clrf	_getDimmerLights_StatusFlag$2424
 11815  109B                     l8726:	
 11816  109B  0020               	movlb	0	; select bank0
 11817  109C  0822               	movf	_getDimmerLights_StatusFlag$2424,w
 11818  109D  00A0               	movwf	??_getDimmerLights_StatusFlag
 11819  109E  0820               	movf	??_getDimmerLights_StatusFlag,w
 11820  109F  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11821                           
 11822                           ;Dimmer_B1.c: 499: return Status;
 11823  10A0  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11824  10A1  0008               	return
 11825  10A2                     __end_of_getDimmerLights_StatusFlag:	
 11826                           
 11827                           	psect	text67
 11828  1296                     __ptext67:	
 11829 ;; *************** function _DimmerLights_Initialization *****************
 11830 ;; Defined at:
 11831 ;;		line 343 in file "../src/Dimmer_B1.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;		None
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;		None
 11836 ;; Return value:  Size  Location     Type
 11837 ;;		None               void
 11838 ;; Registers used:
 11839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11840 ;; Tracked objects:
 11841 ;;		On entry : 0/0
 11842 ;;		On exit  : 0/0
 11843 ;;		Unchanged: 0/0
 11844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;Total ram usage:        1 bytes
 11850 ;; Hardware stack levels used:    1
 11851 ;; Hardware stack levels required when called:    7
 11852 ;; This function calls:
 11853 ;;		_Dimmer_Initialization
 11854 ;;		_setDimmerLights_Initialization
 11855 ;; This function is called by:
 11856 ;;		_main
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function _DimmerLights_Initialization
 11862  1296                     _DimmerLights_Initialization:	
 11863                           
 11864                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 11865                           
 11866                           ;incstack = 0
 11867                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11868  1296  3035               	movlw	_DimmerLights1& (0+255)
 11869  1297  0020               	movlb	0	; select bank0
 11870  1298  00A4               	movwf	??_DimmerLights_Initialization
 11871  1299  0824               	movf	??_DimmerLights_Initialization,w
 11872  129A  0021               	movlb	1	; select bank1
 11873  129B  00D3               	movwf	_DimmerLights11^(0+128)
 11874                           
 11875                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 11876  129C  3001               	movlw	1
 11877  129D  3193  23F1  3192   	fcall	_setDimmerLights_Initialization
 11878                           
 11879                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 11880  12A0  3044               	movlw	_DimmerLights2& (0+255)
 11881  12A1  0020               	movlb	0	; select bank0
 11882  12A2  00A4               	movwf	??_DimmerLights_Initialization
 11883  12A3  0824               	movf	??_DimmerLights_Initialization,w
 11884  12A4  0021               	movlb	1	; select bank1
 11885  12A5  00D4               	movwf	_DimmerLights22^(0+128)
 11886                           
 11887                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 11888  12A6  3002               	movlw	2
 11889  12A7  3193  23F1  3192   	fcall	_setDimmerLights_Initialization
 11890                           
 11891                           ;Dimmer_B1.c: 356: DimmerLights33 = &DimmerLights3;
 11892  12AA  3053               	movlw	_DimmerLights3& (0+255)
 11893  12AB  0020               	movlb	0	; select bank0
 11894  12AC  00A4               	movwf	??_DimmerLights_Initialization
 11895  12AD  0824               	movf	??_DimmerLights_Initialization,w
 11896  12AE  0021               	movlb	1	; select bank1
 11897  12AF  00D5               	movwf	_DimmerLights33^(0+128)
 11898                           
 11899                           ;Dimmer_B1.c: 357: setDimmerLights_Initialization(3);
 11900  12B0  3003               	movlw	3
 11901  12B1  3193  23F1  3192   	fcall	_setDimmerLights_Initialization
 11902                           
 11903                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 11904  12B4  319E  2649         	fcall	_Dimmer_Initialization
 11905  12B6  0008               	return
 11906  12B7                     __end_of_DimmerLights_Initialization:	
 11907                           
 11908                           	psect	text68
 11909  13F1                     __ptext68:	
 11910 ;; *************** function _setDimmerLights_Initialization *****************
 11911 ;; Defined at:
 11912 ;;		line 366 in file "../src/Dimmer_B1.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  lights          1    wreg     unsigned char 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  lights          1    3[BANK0 ] unsigned char 
 11917 ;; Return value:  Size  Location     Type
 11918 ;;		None               void
 11919 ;; Registers used:
 11920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11921 ;; Tracked objects:
 11922 ;;		On entry : 0/0
 11923 ;;		On exit  : 0/0
 11924 ;;		Unchanged: 0/0
 11925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;Total ram usage:        2 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; Hardware stack levels required when called:    6
 11933 ;; This function calls:
 11934 ;;		_DimmerLightsPointSelect
 11935 ;; This function is called by:
 11936 ;;		_DimmerLights_Initialization
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           
 11941                           ;psect for function _setDimmerLights_Initialization
 11942  13F1                     _setDimmerLights_Initialization:	
 11943                           
 11944                           ;incstack = 0
 11945                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11946                           ;setDimmerLights_Initialization@lights stored from wreg
 11947  13F1  0020               	movlb	0	; select bank0
 11948  13F2  00A3               	movwf	setDimmerLights_Initialization@lights
 11949                           
 11950                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 11951  13F3  0823               	movf	setDimmerLights_Initialization@lights,w
 11952  13F4  3191  2185         	fcall	_DimmerLightsPointSelect
 11953                           
 11954                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 11955  13F6  0020               	movlb	0	; select bank0
 11956  13F7  086B               	movf	_DimmerLights,w
 11957  13F8  3E09               	addlw	9
 11958  13F9  0086               	movwf	6
 11959  13FA  3001               	movlw	1	; select bank2/3
 11960  13FB  0087               	movwf	7
 11961  13FC  1501               	bsf	1,2
 11962                           
 11963                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-90)*0.8));
 11964  13FD  3008               	movlw	8
 11965  13FE  00A2               	movwf	??_setDimmerLights_Initialization
 11966  13FF  086B               	movf	_DimmerLights,w
 11967  1400  3E05               	addlw	5
 11968  1401  0086               	movwf	6
 11969  1402  3001               	movlw	1	; select bank2/3
 11970  1403  0087               	movwf	7
 11971  1404  0822               	movf	??_setDimmerLights_Initialization,w
 11972  1405  0081               	movwf	1
 11973                           
 11974                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 11975  1406  303C               	movlw	60
 11976  1407  00A2               	movwf	??_setDimmerLights_Initialization
 11977  1408  086B               	movf	_DimmerLights,w
 11978  1409  3E06               	addlw	6
 11979  140A  0086               	movwf	6
 11980  140B  3001               	movlw	1	; select bank2/3
 11981  140C  0087               	movwf	7
 11982  140D  0822               	movf	??_setDimmerLights_Initialization,w
 11983  140E  0081               	movwf	1
 11984                           
 11985                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11986  140F  086B               	movf	_DimmerLights,w
 11987  1410  3E06               	addlw	6
 11988  1411  0086               	movwf	6
 11989  1412  3001               	movlw	1	; select bank2/3
 11990  1413  0087               	movwf	7
 11991  1414  0801               	movf	1,w
 11992  1415  00A2               	movwf	??_setDimmerLights_Initialization
 11993  1416  086B               	movf	_DimmerLights,w
 11994  1417  3E04               	addlw	4
 11995  1418  0086               	movwf	6
 11996  1419  3001               	movlw	1	; select bank2/3
 11997  141A  0087               	movwf	7
 11998  141B  0822               	movf	??_setDimmerLights_Initialization,w
 11999  141C  0081               	movwf	1
 12000  141D  0008               	return
 12001  141E                     __end_of_setDimmerLights_Initialization:	
 12002                           
 12003                           	psect	text69
 12004  1E49                     __ptext69:	
 12005 ;; *************** function _Dimmer_Initialization *****************
 12006 ;; Defined at:
 12007 ;;		line 795 in file "../src/Dimmer_B1.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;		None
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;		None
 12012 ;; Return value:  Size  Location     Type
 12013 ;;		None               void
 12014 ;; Registers used:
 12015 ;;		wreg
 12016 ;; Tracked objects:
 12017 ;;		On entry : 0/0
 12018 ;;		On exit  : 0/0
 12019 ;;		Unchanged: 0/0
 12020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;Total ram usage:        1 bytes
 12026 ;; Hardware stack levels used:    1
 12027 ;; Hardware stack levels required when called:    5
 12028 ;; This function calls:
 12029 ;;		Nothing
 12030 ;; This function is called by:
 12031 ;;		_DimmerLights_Initialization
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           
 12036                           ;psect for function _Dimmer_Initialization
 12037  1E49                     _Dimmer_Initialization:	
 12038                           
 12039                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 12040                           
 12041                           ;incstack = 0
 12042                           ; Regs used in _Dimmer_Initialization: [wreg]
 12043  1E49  30E2               	movlw	_Dimmer1& (0+255)
 12044  1E4A  0020               	movlb	0	; select bank0
 12045  1E4B  00A0               	movwf	??_Dimmer_Initialization
 12046  1E4C  0820               	movf	??_Dimmer_Initialization,w
 12047  1E4D  00F3               	movwf	_Dimmer
 12048  1E4E  0008               	return
 12049  1E4F                     __end_of_Dimmer_Initialization:	
 12050                           
 12051                           	psect	text70
 12052  1EB8                     __ptext70:	
 12053 ;; *************** function _DelayOff_Main *****************
 12054 ;; Defined at:
 12055 ;;		line 41 in file "../src/DelayOff_B1.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;		None
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;		None
 12060 ;; Return value:  Size  Location     Type
 12061 ;;		None               void
 12062 ;; Registers used:
 12063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;Total ram usage:        0 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:   10
 12076 ;; This function calls:
 12077 ;;		_DlyOff_Main
 12078 ;; This function is called by:
 12079 ;;		_main
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           
 12084                           ;psect for function _DelayOff_Main
 12085  1EB8                     _DelayOff_Main:	
 12086                           
 12087                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12088                           
 12089                           ;incstack = 0
 12090                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12091  1EB8  3001               	movlw	1
 12092  1EB9  318A  226B  319E   	fcall	_DlyOff_Main
 12093                           
 12094                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12095  1EBC  3002               	movlw	2
 12096  1EBD  318A  226B  319E   	fcall	_DlyOff_Main
 12097                           
 12098                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 12099  1EC0  3003               	movlw	3
 12100  1EC1  318A  226B         	fcall	_DlyOff_Main
 12101  1EC3  0008               	return
 12102  1EC4                     __end_of_DelayOff_Main:	
 12103                           
 12104                           	psect	text71
 12105  0A6B                     __ptext71:	
 12106 ;; *************** function _DlyOff_Main *****************
 12107 ;; Defined at:
 12108 ;;		line 62 in file "../src/DelayOff_B1.c"
 12109 ;; Parameters:    Size  Location     Type
 12110 ;;  sw              1    wreg     unsigned char 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  sw              1   68[BANK0 ] unsigned char 
 12113 ;; Return value:  Size  Location     Type
 12114 ;;		None               void
 12115 ;; Registers used:
 12116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12125 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12126 ;;Total ram usage:        3 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    9
 12129 ;; This function calls:
 12130 ;;		_DelayOffPointSelect
 12131 ;;		_setBuz
 12132 ;;		_setDimmerLights_Switch
 12133 ;;		_setDimmerLights_Trigger
 12134 ;;		_setRFSW_Status
 12135 ;;		_setRF_DimmerLights
 12136 ;;		_setSw_Status
 12137 ;;		_setTxData
 12138 ;; This function is called by:
 12139 ;;		_DelayOff_Main
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           
 12144                           ;psect for function _DlyOff_Main
 12145  0A6B                     _DlyOff_Main:	
 12146                           
 12147                           ;incstack = 0
 12148                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12149                           ;DlyOff_Main@sw stored from wreg
 12150  0A6B  0020               	movlb	0	; select bank0
 12151  0A6C  00E4               	movwf	DlyOff_Main@sw
 12152                           
 12153                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12154  0A6D  0864               	movf	DlyOff_Main@sw,w
 12155  0A6E  3191  21BD  318A   	fcall	_DelayOffPointSelect
 12156                           
 12157                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12158  0A71  0872               	movf	_DelayOff,w
 12159  0A72  0086               	movwf	6
 12160  0A73  0187               	clrf	7
 12161  0A74  1C81               	btfss	1,1
 12162  0A75  0008               	return
 12163                           
 12164                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12165  0A76  0872               	movf	_DelayOff,w
 12166  0A77  0086               	movwf	6
 12167  0A78  0187               	clrf	7
 12168  0A79  3001               	movlw	1
 12169  0A7A  0781               	addwf	1,f
 12170  0A7B  3141               	addfsr 1,1
 12171  0A7C  1803               	skipnc
 12172  0A7D  0A81               	incf	1,f
 12173                           
 12174                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12175  0A7E  0872               	movf	_DelayOff,w
 12176  0A7F  0086               	movwf	6
 12177  0A80  0187               	clrf	7
 12178  0A81  3F40               	moviw [0]fsr1
 12179  0A82  0020               	movlb	0	; select bank0
 12180  0A83  00E2               	movwf	??_DlyOff_Main
 12181  0A84  3F41               	moviw [1]fsr1
 12182  0A85  00E3               	movwf	??_DlyOff_Main+1
 12183  0A86  3016               	movlw	22
 12184  0A87  0263               	subwf	??_DlyOff_Main+1,w
 12185  0A88  3012               	movlw	18
 12186  0A89  1903               	skipnz
 12187  0A8A  0262               	subwf	??_DlyOff_Main,w
 12188  0A8B  1C03               	skipc
 12189  0A8C  0008               	return
 12190                           
 12191                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12192  0A8D  0872               	movf	_DelayOff,w
 12193  0A8E  0086               	movwf	6
 12194  0A8F  0187               	clrf	7
 12195  0A90  3000               	movlw	0
 12196  0A91  3FC0               	movwi [0]fsr1
 12197  0A92  3FC1               	movwi [1]fsr1
 12198                           
 12199                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12200  0A93  3001               	movlw	1
 12201  0A94  00E2               	movwf	??_DlyOff_Main
 12202  0A95  0872               	movf	_DelayOff,w
 12203  0A96  0086               	movwf	6
 12204  0A97  0187               	clrf	7
 12205  0A98  0862               	movf	??_DlyOff_Main,w
 12206  0A99  0781               	addwf	1,f
 12207                           
 12208                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12209  0A9A  0872               	movf	_DelayOff,w
 12210  0A9B  0086               	movwf	6
 12211  0A9C  0187               	clrf	7
 12212  0A9D  0872               	movf	_DelayOff,w
 12213  0A9E  0084               	movwf	4
 12214  0A9F  0185               	clrf	5
 12215  0AA0  0800               	movf	0,w
 12216  0AA1  0201               	subwf	1,w
 12217  0AA2  1C03               	skipc
 12218  0AA3  0008               	return
 12219                           
 12220                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12221  0AA4  0872               	movf	_DelayOff,w
 12222  0AA5  0086               	movwf	6
 12223  0AA6  0187               	clrf	7
 12224  0AA7  0181               	clrf	1
 12225                           
 12226                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12227  0AA8  0872               	movf	_DelayOff,w
 12228  0AA9  0086               	movwf	6
 12229  0AAA  0187               	clrf	7
 12230  0AAB  1081               	bcf	1,1
 12231                           
 12232                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12233  0AAC  01A2               	clrf	setSw_Status@command
 12234  0AAD  0864               	movf	DlyOff_Main@sw,w
 12235  0AAE  319F  271F  318A   	fcall	_setSw_Status
 12236                           
 12237                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12238  0AB1  0020               	movlb	0	; select bank0
 12239  0AB2  01A2               	clrf	setRFSW_Status@command
 12240  0AB3  0864               	movf	DlyOff_Main@sw,w
 12241  0AB4  319F  2710  318A   	fcall	_setRFSW_Status
 12242                           
 12243                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12244  0AB7  0020               	movlb	0	; select bank0
 12245  0AB8  01DD               	clrf	setRF_DimmerLights@on
 12246  0AB9  0864               	movf	DlyOff_Main@sw,w
 12247  0ABA  318A  22D6  318A   	fcall	_setRF_DimmerLights
 12248                           
 12249                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12250  0ABD  0020               	movlb	0	; select bank0
 12251  0ABE  01A2               	clrf	setDimmerLights_Trigger@command
 12252  0ABF  0AA2               	incf	setDimmerLights_Trigger@command,f
 12253  0AC0  0864               	movf	DlyOff_Main@sw,w
 12254  0AC1  319F  276B  318A   	fcall	_setDimmerLights_Trigger
 12255                           
 12256                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12257  0AC4  0020               	movlb	0	; select bank0
 12258  0AC5  01A2               	clrf	setDimmerLights_Switch@command
 12259  0AC6  0864               	movf	DlyOff_Main@sw,w
 12260  0AC7  319F  275B  318A   	fcall	_setDimmerLights_Switch
 12261                           
 12262                           ;DelayOff_B1.c: 78: setTxData();
 12263  0ACA  3185  25F8  318A   	fcall	_setTxData
 12264                           
 12265                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12266  0ACD  3064               	movlw	100
 12267  0ACE  0020               	movlb	0	; select bank0
 12268  0ACF  00A9               	movwf	setBuz@time
 12269  0AD0  3000               	movlw	0
 12270  0AD1  00AA               	movwf	setBuz@time+1
 12271  0AD2  3001               	movlw	1
 12272  0AD3  3197  27A7         	fcall	_setBuz
 12273  0AD5  0008               	return
 12274  0AD6                     __end_of_DlyOff_Main:	
 12275                           
 12276                           	psect	text72
 12277  05F8                     __ptext72:	
 12278 ;; *************** function _setTxData *****************
 12279 ;; Defined at:
 12280 ;;		line 186 in file "../src/RF_Control_B1.c"
 12281 ;; Parameters:    Size  Location     Type
 12282 ;;		None
 12283 ;; Auto vars:     Size  Location     Type
 12284 ;;  i               1    0        unsigned char 
 12285 ;; Return value:  Size  Location     Type
 12286 ;;		None               void
 12287 ;; Registers used:
 12288 ;;		wreg, fsr1l, fsr1h
 12289 ;; Tracked objects:
 12290 ;;		On entry : 0/0
 12291 ;;		On exit  : 0/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;Total ram usage:        1 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; Hardware stack levels required when called:    5
 12301 ;; This function calls:
 12302 ;;		Nothing
 12303 ;; This function is called by:
 12304 ;;		_DlyOff_Main
 12305 ;;		_setDimmerLights_Adj
 12306 ;;		_setControl_Lights_Table
 12307 ;;		_setRFSW_Control
 12308 ;;		_setRFSW_AdjControl
 12309 ;;		_Sw_DimmerOnFunc
 12310 ;;		_Sw_DimmerOffFunc
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           
 12315                           ;psect for function _setTxData
 12316  05F8                     _setTxData:	
 12317                           
 12318                           ;RF_Control_B1.c: 187: char i;
 12319                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 12320                           
 12321                           ;incstack = 0
 12322                           ; Regs used in _setTxData: [wregfsr1]
 12323  05F8  0021               	movlb	1	; select bank1
 12324  05F9  1C3F               	btfss	_RF1^(0+128),0
 12325  05FA  0008               	return
 12326                           
 12327                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 12328  05FB  153F               	bsf	_RF1^(0+128),2
 12329                           
 12330                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 12331  05FC  3014               	movlw	20
 12332  05FD  00C6               	movwf	(_RF1^(0+128)+7)
 12333  05FE  3000               	movlw	0
 12334  05FF  00C7               	movwf	(_RF1^(0+128)+8)
 12335                           
 12336                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 12337  0600  3063               	movlw	99
 12338  0601  0020               	movlb	0	; select bank0
 12339  0602  00A0               	movwf	??_setTxData
 12340  0603  0820               	movf	??_setTxData,w
 12341  0604  0022               	movlb	2	; select bank2
 12342  0605  00A0               	movwf	_RF_Data^(0+256)
 12343                           
 12344                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 12345  0606  3002               	movlw	2
 12346  0607  0020               	movlb	0	; select bank0
 12347  0608  00A0               	movwf	??_setTxData
 12348  0609  0820               	movf	??_setTxData,w
 12349  060A  0022               	movlb	2	; select bank2
 12350  060B  00A1               	movwf	(_RF_Data^(0+256)+1)
 12351                           
 12352                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 12353  060C  0020               	movlb	0	; select bank0
 12354  060D  086D               	movf	_product,w
 12355  060E  0086               	movwf	6
 12356  060F  3002               	movlw	2	; select bank4/5
 12357  0610  0087               	movwf	7
 12358  0611  3002               	movlw	2	; select bank4/5
 12359  0612  3F42               	moviw [2]fsr1
 12360  0613  0022               	movlb	2	; select bank2
 12361  0614  00A2               	movwf	(_RF_Data^(0+256)+2)
 12362                           
 12363                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 12364  0615  0020               	movlb	0	; select bank0
 12365  0616  086D               	movf	_product,w
 12366  0617  0086               	movwf	6
 12367  0618  3002               	movlw	2	; select bank4/5
 12368  0619  0087               	movwf	7
 12369  061A  3002               	movlw	2	; select bank4/5
 12370  061B  3F43               	moviw [3]fsr1
 12371  061C  0022               	movlb	2	; select bank2
 12372  061D  00A3               	movwf	(_RF_Data^(0+256)+3)
 12373                           
 12374                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 12375  061E  0020               	movlb	0	; select bank0
 12376  061F  086D               	movf	_product,w
 12377  0620  0086               	movwf	6
 12378  0621  3002               	movlw	2	; select bank4/5
 12379  0622  0087               	movwf	7
 12380  0623  3002               	movlw	2	; select bank4/5
 12381  0624  3F44               	moviw [4]fsr1
 12382  0625  0022               	movlb	2	; select bank2
 12383  0626  00A4               	movwf	(_RF_Data^(0+256)+4)
 12384                           
 12385                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 12386  0627  0020               	movlb	0	; select bank0
 12387  0628  086D               	movf	_product,w
 12388  0629  0086               	movwf	6
 12389  062A  3002               	movlw	2	; select bank4/5
 12390  062B  0087               	movwf	7
 12391  062C  3002               	movlw	2	; select bank4/5
 12392  062D  3F45               	moviw [5]fsr1
 12393  062E  0022               	movlb	2	; select bank2
 12394  062F  00A5               	movwf	(_RF_Data^(0+256)+5)
 12395                           
 12396                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 12397  0630  0020               	movlb	0	; select bank0
 12398  0631  086D               	movf	_product,w
 12399  0632  0086               	movwf	6
 12400  0633  3002               	movlw	2	; select bank4/5
 12401  0634  0087               	movwf	7
 12402  0635  3002               	movlw	2	; select bank4/5
 12403  0636  3F46               	moviw [6]fsr1
 12404  0637  0022               	movlb	2	; select bank2
 12405  0638  00A6               	movwf	(_RF_Data^(0+256)+6)
 12406                           
 12407                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 12408  0639  0020               	movlb	0	; select bank0
 12409  063A  086D               	movf	_product,w
 12410  063B  0086               	movwf	6
 12411  063C  3002               	movlw	2	; select bank4/5
 12412  063D  0087               	movwf	7
 12413  063E  3002               	movlw	2	; select bank4/5
 12414  063F  3F47               	moviw [7]fsr1
 12415  0640  0022               	movlb	2	; select bank2
 12416  0641  00A7               	movwf	(_RF_Data^(0+256)+7)
 12417                           
 12418                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 12419  0642  0020               	movlb	0	; select bank0
 12420  0643  086D               	movf	_product,w
 12421  0644  0086               	movwf	6
 12422  0645  3002               	movlw	2	; select bank4/5
 12423  0646  0087               	movwf	7
 12424  0647  3002               	movlw	2	; select bank4/5
 12425  0648  3F48               	moviw [8]fsr1
 12426  0649  0022               	movlb	2	; select bank2
 12427  064A  00A8               	movwf	(_RF_Data^(0+256)+8)
 12428                           
 12429                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 12430  064B  0020               	movlb	0	; select bank0
 12431  064C  086D               	movf	_product,w
 12432  064D  0086               	movwf	6
 12433  064E  3002               	movlw	2	; select bank4/5
 12434  064F  0087               	movwf	7
 12435  0650  3002               	movlw	2	; select bank4/5
 12436  0651  3F49               	moviw [9]fsr1
 12437  0652  0022               	movlb	2	; select bank2
 12438  0653  00A9               	movwf	(_RF_Data^(0+256)+9)
 12439                           
 12440                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 12441  0654  0020               	movlb	0	; select bank0
 12442  0655  086D               	movf	_product,w
 12443  0656  0086               	movwf	6
 12444  0657  3002               	movlw	2	; select bank4/5
 12445  0658  0087               	movwf	7
 12446  0659  3002               	movlw	2	; select bank4/5
 12447  065A  3F4A               	moviw [10]fsr1
 12448  065B  0022               	movlb	2	; select bank2
 12449  065C  00AA               	movwf	(_RF_Data^(0+256)+10)
 12450                           
 12451                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 12452  065D  0020               	movlb	0	; select bank0
 12453  065E  086D               	movf	_product,w
 12454  065F  0086               	movwf	6
 12455  0660  3002               	movlw	2	; select bank4/5
 12456  0661  0087               	movwf	7
 12457  0662  3002               	movlw	2	; select bank4/5
 12458  0663  3F4B               	moviw [11]fsr1
 12459  0664  0022               	movlb	2	; select bank2
 12460  0665  00AB               	movwf	(_RF_Data^(0+256)+11)
 12461                           
 12462                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 12463  0666  0020               	movlb	0	; select bank0
 12464  0667  086D               	movf	_product,w
 12465  0668  0086               	movwf	6
 12466  0669  3002               	movlw	2	; select bank4/5
 12467  066A  0087               	movwf	7
 12468  066B  3002               	movlw	2	; select bank4/5
 12469  066C  3F4C               	moviw [12]fsr1
 12470  066D  0022               	movlb	2	; select bank2
 12471  066E  00AC               	movwf	(_RF_Data^(0+256)+12)
 12472                           
 12473                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 12474  066F  0020               	movlb	0	; select bank0
 12475  0670  086D               	movf	_product,w
 12476  0671  0086               	movwf	6
 12477  0672  3002               	movlw	2	; select bank4/5
 12478  0673  0087               	movwf	7
 12479  0674  3002               	movlw	2	; select bank4/5
 12480  0675  3F4D               	moviw [13]fsr1
 12481  0676  0022               	movlb	2	; select bank2
 12482  0677  00AD               	movwf	(_RF_Data^(0+256)+13)
 12483                           
 12484                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 12485  0678  0020               	movlb	0	; select bank0
 12486  0679  086D               	movf	_product,w
 12487  067A  0086               	movwf	6
 12488  067B  3002               	movlw	2	; select bank4/5
 12489  067C  0087               	movwf	7
 12490  067D  3002               	movlw	2	; select bank4/5
 12491  067E  3F4E               	moviw [14]fsr1
 12492  067F  0022               	movlb	2	; select bank2
 12493  0680  00AE               	movwf	(_RF_Data^(0+256)+14)
 12494                           
 12495                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 12496  0681  0020               	movlb	0	; select bank0
 12497  0682  086D               	movf	_product,w
 12498  0683  0086               	movwf	6
 12499  0684  3002               	movlw	2	; select bank4/5
 12500  0685  0087               	movwf	7
 12501  0686  3002               	movlw	2	; select bank4/5
 12502  0687  3F4F               	moviw [15]fsr1
 12503  0688  0022               	movlb	2	; select bank2
 12504  0689  00AF               	movwf	(_RF_Data^(0+256)+15)
 12505                           
 12506                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 12507  068A  0020               	movlb	0	; select bank0
 12508  068B  086D               	movf	_product,w
 12509  068C  0086               	movwf	6
 12510  068D  3002               	movlw	2	; select bank4/5
 12511  068E  0087               	movwf	7
 12512  068F  3002               	movlw	2	; select bank4/5
 12513  0690  3F50               	moviw [16]fsr1
 12514  0691  0022               	movlb	2	; select bank2
 12515  0692  00B0               	movwf	(_RF_Data^(0+256)+16)
 12516                           
 12517                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 12518  0693  0020               	movlb	0	; select bank0
 12519  0694  086D               	movf	_product,w
 12520  0695  0086               	movwf	6
 12521  0696  3002               	movlw	2	; select bank4/5
 12522  0697  0087               	movwf	7
 12523  0698  3002               	movlw	2	; select bank4/5
 12524  0699  3F51               	moviw [17]fsr1
 12525  069A  0022               	movlb	2	; select bank2
 12526  069B  00B1               	movwf	(_RF_Data^(0+256)+17)
 12527                           
 12528                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 12529  069C  0020               	movlb	0	; select bank0
 12530  069D  086D               	movf	_product,w
 12531  069E  0086               	movwf	6
 12532  069F  3002               	movlw	2	; select bank4/5
 12533  06A0  0087               	movwf	7
 12534  06A1  3002               	movlw	2	; select bank4/5
 12535  06A2  3F52               	moviw [18]fsr1
 12536  06A3  0022               	movlb	2	; select bank2
 12537  06A4  00B2               	movwf	(_RF_Data^(0+256)+18)
 12538                           
 12539                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 12540  06A5  0020               	movlb	0	; select bank0
 12541  06A6  086D               	movf	_product,w
 12542  06A7  0086               	movwf	6
 12543  06A8  3002               	movlw	2	; select bank4/5
 12544  06A9  0087               	movwf	7
 12545  06AA  3002               	movlw	2	; select bank4/5
 12546  06AB  3F53               	moviw [19]fsr1
 12547  06AC  0022               	movlb	2	; select bank2
 12548  06AD  00B3               	movwf	(_RF_Data^(0+256)+19)
 12549                           
 12550                           ;RF_Control_B1.c: 221: RF_Data[20] = 211;
 12551  06AE  30D3               	movlw	211
 12552  06AF  0020               	movlb	0	; select bank0
 12553  06B0  00A0               	movwf	??_setTxData
 12554  06B1  0820               	movf	??_setTxData,w
 12555  06B2  0022               	movlb	2	; select bank2
 12556  06B3  00B4               	movwf	(_RF_Data^(0+256)+20)
 12557  06B4  0008               	return
 12558  06B5                     __end_of_setTxData:	
 12559                           
 12560                           	psect	text73
 12561  1F1F                     __ptext73:	
 12562 ;; *************** function _setSw_Status *****************
 12563 ;; Defined at:
 12564 ;;		line 111 in file "../src/Switch_B1.c"
 12565 ;; Parameters:    Size  Location     Type
 12566 ;;  sw              1    wreg     unsigned char 
 12567 ;;  command         1    2[BANK0 ] unsigned char 
 12568 ;; Auto vars:     Size  Location     Type
 12569 ;;  sw              1    3[BANK0 ] unsigned char 
 12570 ;; Return value:  Size  Location     Type
 12571 ;;		None               void
 12572 ;; Registers used:
 12573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12574 ;; Tracked objects:
 12575 ;;		On entry : 0/0
 12576 ;;		On exit  : 0/0
 12577 ;;		Unchanged: 0/0
 12578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12579 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12583 ;;Total ram usage:        2 bytes
 12584 ;; Hardware stack levels used:    1
 12585 ;; Hardware stack levels required when called:    6
 12586 ;; This function calls:
 12587 ;;		_SwPointSelect
 12588 ;; This function is called by:
 12589 ;;		_DlyOff_Main
 12590 ;;		_setControl_Lights_Table
 12591 ;;		_setRFSW_Control
 12592 ;;		_setDimmerLights_ERROR
 12593 ;; This function uses a non-reentrant model
 12594 ;;
 12595                           
 12596                           
 12597                           ;psect for function _setSw_Status
 12598  1F1F                     _setSw_Status:	
 12599                           
 12600                           ;incstack = 0
 12601                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12602                           ;setSw_Status@sw stored from wreg
 12603  1F1F  0020               	movlb	0	; select bank0
 12604  1F20  00A3               	movwf	setSw_Status@sw
 12605                           
 12606                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12607  1F21  0823               	movf	setSw_Status@sw,w
 12608  1F22  3191  21DA         	fcall	_SwPointSelect
 12609                           
 12610                           ;Switch_B1.c: 113: Sw->Status = command;
 12611  1F24  0020               	movlb	0	; select bank0
 12612  1F25  086C               	movf	_Sw,w
 12613  1F26  0086               	movwf	6
 12614  1F27  3001               	movlw	1	; select bank2/3
 12615  1F28  0087               	movwf	7
 12616  1F29  0822               	movf	setSw_Status@command,w
 12617  1F2A  1301               	bcf	1,6
 12618  1F2B  1D03               	skipz
 12619  1F2C  1701               	bsf	1,6
 12620  1F2D  0008               	return
 12621  1F2E                     __end_of_setSw_Status:	
 12622                           
 12623                           	psect	text74
 12624  11DA                     __ptext74:	
 12625 ;; *************** function _SwPointSelect *****************
 12626 ;; Defined at:
 12627 ;;		line 21 in file "../src/Switch_B1.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;  sw              1    wreg     unsigned char 
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;  sw              1    1[BANK0 ] unsigned char 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;		None               void
 12634 ;; Registers used:
 12635 ;;		wreg
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;Total ram usage:        2 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    5
 12648 ;; This function calls:
 12649 ;;		Nothing
 12650 ;; This function is called by:
 12651 ;;		_setSw_Enable
 12652 ;;		_setSw_Status
 12653 ;;		_setSw_Main
 12654 ;;		_Sw_Detect
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           
 12659                           ;psect for function _SwPointSelect
 12660  11DA                     _SwPointSelect:	
 12661                           
 12662                           ;incstack = 0
 12663                           ; Regs used in _SwPointSelect: [wreg]
 12664                           ;SwPointSelect@sw stored from wreg
 12665  11DA  0020               	movlb	0	; select bank0
 12666  11DB  00A1               	movwf	SwPointSelect@sw
 12667                           
 12668                           ;Switch_B1.c: 24: if (sw == 1) {
 12669  11DC  0821               	movf	SwPointSelect@sw,w
 12670  11DD  3A01               	xorlw	1
 12671  11DE  1D03               	skipz
 12672  11DF  29E5               	goto	l8072
 12673                           
 12674                           ;Switch_B1.c: 25: Sw = &Sw1;
 12675  11E0  30C5               	movlw	_Sw1& (0+255)
 12676  11E1  00A0               	movwf	??_SwPointSelect
 12677  11E2  0820               	movf	??_SwPointSelect,w
 12678  11E3  00EC               	movwf	_Sw
 12679                           
 12680                           ;Switch_B1.c: 26: }
 12681  11E4  0008               	return
 12682  11E5                     l8072:	
 12683                           
 12684                           ;Switch_B1.c: 29: else if (sw == 2) {
 12685  11E5  0821               	movf	SwPointSelect@sw,w
 12686  11E6  3A02               	xorlw	2
 12687  11E7  1D03               	skipz
 12688  11E8  29EE               	goto	l8076
 12689                           
 12690                           ;Switch_B1.c: 30: Sw = &Sw2;
 12691  11E9  30CE               	movlw	_Sw2& (0+255)
 12692  11EA  00A0               	movwf	??_SwPointSelect
 12693  11EB  0820               	movf	??_SwPointSelect,w
 12694  11EC  00EC               	movwf	_Sw
 12695                           
 12696                           ;Switch_B1.c: 31: }
 12697  11ED  0008               	return
 12698  11EE                     l8076:	
 12699                           
 12700                           ;Switch_B1.c: 34: else if (sw == 3) {
 12701  11EE  0821               	movf	SwPointSelect@sw,w
 12702  11EF  3A03               	xorlw	3
 12703  11F0  1D03               	skipz
 12704  11F1  0008               	return
 12705                           
 12706                           ;Switch_B1.c: 35: Sw = &Sw3;
 12707  11F2  30D7               	movlw	_Sw3& (0+255)
 12708  11F3  00A0               	movwf	??_SwPointSelect
 12709  11F4  0820               	movf	??_SwPointSelect,w
 12710  11F5  00EC               	movwf	_Sw
 12711  11F6  0008               	return
 12712  11F7                     __end_of_SwPointSelect:	
 12713                           
 12714                           	psect	text75
 12715  0AD6                     __ptext75:	
 12716 ;; *************** function _setRF_DimmerLights *****************
 12717 ;; Defined at:
 12718 ;;		line 452 in file "../src/RF_Control_B1.c"
 12719 ;; Parameters:    Size  Location     Type
 12720 ;;  lights          1    wreg     unsigned char 
 12721 ;;  on              1   61[BANK0 ] unsigned char 
 12722 ;; Auto vars:     Size  Location     Type
 12723 ;;  lights          1   65[BANK0 ] unsigned char 
 12724 ;;  status          1   64[BANK0 ] unsigned char 
 12725 ;; Return value:  Size  Location     Type
 12726 ;;		None               void
 12727 ;; Registers used:
 12728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12729 ;; Tracked objects:
 12730 ;;		On entry : 0/0
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12734 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;Total ram usage:        5 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    8
 12741 ;; This function calls:
 12742 ;;		_setPercentValue
 12743 ;; This function is called by:
 12744 ;;		_DlyOff_Main
 12745 ;;		_setDimmerLights_Adj
 12746 ;;		_setRFSW_Control
 12747 ;;		_Sw_DimmerOnFunc
 12748 ;;		_Sw_DimmerOffFunc
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _setRF_DimmerLights
 12754  0AD6                     _setRF_DimmerLights:	
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12758                           ;setRF_DimmerLights@lights stored from wreg
 12759  0AD6  0020               	movlb	0	; select bank0
 12760  0AD7  00E1               	movwf	setRF_DimmerLights@lights
 12761                           
 12762                           ;RF_Control_B1.c: 453: char status;
 12763                           ;RF_Control_B1.c: 454: status = 1;
 12764  0AD8  01E0               	clrf	setRF_DimmerLights@status
 12765  0AD9  0AE0               	incf	setRF_DimmerLights@status,f
 12766                           
 12767                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 12768  0ADA  0861               	movf	setRF_DimmerLights@lights,w
 12769  0ADB  3EFF               	addlw	-1
 12770  0ADC  0A89               	incf	9,f
 12771  0ADD  2AE0               	goto	u8170
 12772  0ADE                     u8175:	
 12773  0ADE  1003               	clrc
 12774  0ADF  0DE0               	rlf	setRF_DimmerLights@status,f
 12775  0AE0                     u8170:	
 12776  0AE0  3EFF               	addlw	-1
 12777  0AE1  1D03               	skipz
 12778  0AE2  2ADE               	goto	u8175
 12779                           
 12780                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 12781  0AE3  0861               	movf	setRF_DimmerLights@lights,w
 12782  0AE4  00DE               	movwf	??_setRF_DimmerLights
 12783  0AE5  086D               	movf	_product,w
 12784  0AE6  3E0B               	addlw	11
 12785  0AE7  0086               	movwf	6
 12786  0AE8  3002               	movlw	2	; select bank4/5
 12787  0AE9  0087               	movwf	7
 12788  0AEA  085E               	movf	??_setRF_DimmerLights,w
 12789  0AEB  0081               	movwf	1
 12790                           
 12791                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-90)*0.8
      +                          )));
 12792  0AEC  3008               	movlw	8
 12793  0AED  3196  2622  318A   	fcall	_setPercentValue
 12794  0AF0  0020               	movlb	0	; select bank0
 12795  0AF1  00DE               	movwf	??_setRF_DimmerLights
 12796  0AF2  0861               	movf	setRF_DimmerLights@lights,w
 12797  0AF3  3E14               	addlw	20
 12798  0AF4  076D               	addwf	_product,w
 12799  0AF5  00DF               	movwf	??_setRF_DimmerLights+1
 12800  0AF6  085F               	movf	??_setRF_DimmerLights+1,w
 12801  0AF7  0086               	movwf	6
 12802  0AF8  3002               	movlw	2	; select bank4/5
 12803  0AF9  0087               	movwf	7
 12804  0AFA  085E               	movf	??_setRF_DimmerLights,w
 12805  0AFB  0081               	movwf	1
 12806                           
 12807                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 12808  0AFC  0861               	movf	setRF_DimmerLights@lights,w
 12809  0AFD  3E14               	addlw	20
 12810  0AFE  076D               	addwf	_product,w
 12811  0AFF  00DE               	movwf	??_setRF_DimmerLights
 12812  0B00  085E               	movf	??_setRF_DimmerLights,w
 12813  0B01  0086               	movwf	6
 12814  0B02  3002               	movlw	2	; select bank4/5
 12815  0B03  0087               	movwf	7
 12816  0B04  0801               	movf	1,w
 12817  0B05  00DF               	movwf	??_setRF_DimmerLights+1
 12818  0B06  086D               	movf	_product,w
 12819  0B07  3E09               	addlw	9
 12820  0B08  0086               	movwf	6
 12821  0B09  3002               	movlw	2	; select bank4/5
 12822  0B0A  0087               	movwf	7
 12823  0B0B  085F               	movf	??_setRF_DimmerLights+1,w
 12824  0B0C  0081               	movwf	1
 12825                           
 12826                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 12827  0B0D  0861               	movf	setRF_DimmerLights@lights,w
 12828  0B0E  3E1A               	addlw	26
 12829  0B0F  076D               	addwf	_product,w
 12830  0B10  00DE               	movwf	??_setRF_DimmerLights
 12831  0B11  085E               	movf	??_setRF_DimmerLights,w
 12832  0B12  0086               	movwf	6
 12833  0B13  3002               	movlw	2	; select bank4/5
 12834  0B14  0087               	movwf	7
 12835  0B15  0801               	movf	1,w
 12836  0B16  00DF               	movwf	??_setRF_DimmerLights+1
 12837  0B17  086D               	movf	_product,w
 12838  0B18  3E11               	addlw	17
 12839  0B19  0086               	movwf	6
 12840  0B1A  3002               	movlw	2	; select bank4/5
 12841  0B1B  0087               	movwf	7
 12842  0B1C  085F               	movf	??_setRF_DimmerLights+1,w
 12843  0B1D  0081               	movwf	1
 12844                           
 12845                           ;RF_Control_B1.c: 464: if (on == 1) {
 12846  0B1E  085D               	movf	setRF_DimmerLights@on,w
 12847  0B1F  3A01               	xorlw	1
 12848  0B20  1D03               	skipz
 12849  0B21  2B32               	goto	l8172
 12850                           
 12851                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 12852  0B22  086D               	movf	_product,w
 12853  0B23  3E0F               	addlw	15
 12854  0B24  0086               	movwf	6
 12855  0B25  3002               	movlw	2	; select bank4/5
 12856  0B26  0087               	movwf	7
 12857  0B27  0801               	movf	1,w
 12858  0B28  0460               	iorwf	setRF_DimmerLights@status,w
 12859  0B29  00DE               	movwf	??_setRF_DimmerLights
 12860  0B2A  086D               	movf	_product,w
 12861  0B2B  3E0F               	addlw	15
 12862  0B2C  0086               	movwf	6
 12863  0B2D  3002               	movlw	2	; select bank4/5
 12864  0B2E  0087               	movwf	7
 12865  0B2F  085E               	movf	??_setRF_DimmerLights,w
 12866  0B30  0081               	movwf	1
 12867                           
 12868                           ;RF_Control_B1.c: 466: } else {
 12869  0B31  0008               	return
 12870  0B32                     l8172:	
 12871                           
 12872                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 12873  0B32  086D               	movf	_product,w
 12874  0B33  3E0F               	addlw	15
 12875  0B34  0086               	movwf	6
 12876  0B35  3002               	movlw	2	; select bank4/5
 12877  0B36  0087               	movwf	7
 12878  0B37  0960               	comf	setRF_DimmerLights@status,w
 12879  0B38  0501               	andwf	1,w
 12880  0B39  00DE               	movwf	??_setRF_DimmerLights
 12881  0B3A  086D               	movf	_product,w
 12882  0B3B  3E0F               	addlw	15
 12883  0B3C  0086               	movwf	6
 12884  0B3D  3002               	movlw	2	; select bank4/5
 12885  0B3E  0087               	movwf	7
 12886  0B3F  085E               	movf	??_setRF_DimmerLights,w
 12887  0B40  0081               	movwf	1
 12888  0B41  0008               	return
 12889  0B42                     __end_of_setRF_DimmerLights:	
 12890                           
 12891                           	psect	text76
 12892  1622                     __ptext76:	
 12893 ;; *************** function _setPercentValue *****************
 12894 ;; Defined at:
 12895 ;;		line 777 in file "../src/Dimmer_B1.c"
 12896 ;; Parameters:    Size  Location     Type
 12897 ;;  value           1    wreg     unsigned char 
 12898 ;; Auto vars:     Size  Location     Type
 12899 ;;  value           1   57[BANK0 ] unsigned char 
 12900 ;;  i               3   58[BANK0 ] float 
 12901 ;; Return value:  Size  Location     Type
 12902 ;;                  1    wreg      unsigned char 
 12903 ;; Registers used:
 12904 ;;		wreg, status,2, status,0, pclath, cstack
 12905 ;; Tracked objects:
 12906 ;;		On entry : 0/0
 12907 ;;		On exit  : 0/0
 12908 ;;		Unchanged: 0/0
 12909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;Total ram usage:        4 bytes
 12915 ;; Hardware stack levels used:    1
 12916 ;; Hardware stack levels required when called:    7
 12917 ;; This function calls:
 12918 ;;		___awtoft
 12919 ;;		___ftdiv
 12920 ;;		___fttol
 12921 ;; This function is called by:
 12922 ;;		_Flash_Memory_Initialization
 12923 ;;		_setRF_DimmerLights
 12924 ;; This function uses a non-reentrant model
 12925 ;;
 12926                           
 12927                           
 12928                           ;psect for function _setPercentValue
 12929  1622                     _setPercentValue:	
 12930                           
 12931                           ;incstack = 0
 12932                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12933                           ;setPercentValue@value stored from wreg
 12934  1622  0020               	movlb	0	; select bank0
 12935  1623  00D9               	movwf	setPercentValue@value
 12936                           
 12937                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
 12938  1624  3000               	movlw	0
 12939  1625  00DA               	movwf	setPercentValue@i
 12940  1626  3050               	movlw	80
 12941  1627  00DB               	movwf	setPercentValue@i+1
 12942  1628  3042               	movlw	66
 12943  1629  00DC               	movwf	setPercentValue@i+2
 12944                           
 12945                           ;Dimmer_B1.c: 780: i /= 100;
 12946  162A  3000               	movlw	0
 12947  162B  00AE               	movwf	___ftdiv@f2
 12948  162C  30C8               	movlw	200
 12949  162D  00AF               	movwf	___ftdiv@f2+1
 12950  162E  3042               	movlw	66
 12951  162F  00B0               	movwf	___ftdiv@f2+2
 12952  1630  085A               	movf	setPercentValue@i,w
 12953  1631  00B1               	movwf	___ftdiv@f1
 12954  1632  085B               	movf	setPercentValue@i+1,w
 12955  1633  00B2               	movwf	___ftdiv@f1+1
 12956  1634  085C               	movf	setPercentValue@i+2,w
 12957  1635  00B3               	movwf	___ftdiv@f1+2
 12958  1636  318E  26A8  3196   	fcall	___ftdiv
 12959  1639  0020               	movlb	0	; select bank0
 12960  163A  082E               	movf	?___ftdiv,w
 12961  163B  00DA               	movwf	setPercentValue@i
 12962  163C  082F               	movf	?___ftdiv+1,w
 12963  163D  00DB               	movwf	setPercentValue@i+1
 12964  163E  0830               	movf	?___ftdiv+2,w
 12965  163F  00DC               	movwf	setPercentValue@i+2
 12966                           
 12967                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-90)*0.8))) / i));
 12968  1640  0859               	movf	setPercentValue@value,w
 12969  1641  3EF8               	addlw	248
 12970  1642  00A8               	movwf	___awtoft@c
 12971  1643  30FF               	movlw	255
 12972  1644  1803               	skipnc
 12973  1645  3000               	movlw	0
 12974  1646  00A9               	movwf	___awtoft@c+1
 12975  1647  3192  22B7  3196   	fcall	___awtoft
 12976  164A  0020               	movlb	0	; select bank0
 12977  164B  0828               	movf	?___awtoft,w
 12978  164C  00B1               	movwf	___ftdiv@f1
 12979  164D  0829               	movf	?___awtoft+1,w
 12980  164E  00B2               	movwf	___ftdiv@f1+1
 12981  164F  082A               	movf	?___awtoft+2,w
 12982  1650  00B3               	movwf	___ftdiv@f1+2
 12983  1651  085A               	movf	setPercentValue@i,w
 12984  1652  00AE               	movwf	___ftdiv@f2
 12985  1653  085B               	movf	setPercentValue@i+1,w
 12986  1654  00AF               	movwf	___ftdiv@f2+1
 12987  1655  085C               	movf	setPercentValue@i+2,w
 12988  1656  00B0               	movwf	___ftdiv@f2+2
 12989  1657  318E  26A8  3196   	fcall	___ftdiv
 12990  165A  0020               	movlb	0	; select bank0
 12991  165B  082E               	movf	?___ftdiv,w
 12992  165C  00CB               	movwf	___fttol@f1
 12993  165D  082F               	movf	?___ftdiv+1,w
 12994  165E  00CC               	movwf	___fttol@f1+1
 12995  165F  0830               	movf	?___ftdiv+2,w
 12996  1660  00CD               	movwf	___fttol@f1+2
 12997  1661  318D  2597         	fcall	___fttol
 12998  1663  0020               	movlb	0	; select bank0
 12999  1664  034B               	decf	?___fttol,w
 13000  1665  3AFF               	xorlw	255
 13001  1666  3E64               	addlw	100
 13002  1667  0008               	return
 13003  1668                     __end_of_setPercentValue:	
 13004                           
 13005                           	psect	text77
 13006  0D97                     __ptext77:	
 13007 ;; *************** function ___fttol *****************
 13008 ;; Defined at:
 13009 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  f1              3   43[BANK0 ] float 
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;  lval            4   52[BANK0 ] unsigned long 
 13014 ;;  exp1            1   56[BANK0 ] unsigned char 
 13015 ;;  sign1           1   51[BANK0 ] unsigned char 
 13016 ;; Return value:  Size  Location     Type
 13017 ;;                  4   43[BANK0 ] long 
 13018 ;; Registers used:
 13019 ;;		wreg, status,2, status,0
 13020 ;; Tracked objects:
 13021 ;;		On entry : 0/0
 13022 ;;		On exit  : 0/0
 13023 ;;		Unchanged: 0/0
 13024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;Total ram usage:       14 bytes
 13030 ;; Hardware stack levels used:    1
 13031 ;; Hardware stack levels required when called:    5
 13032 ;; This function calls:
 13033 ;;		Nothing
 13034 ;; This function is called by:
 13035 ;;		_getPercentValue
 13036 ;;		_setPercentValue
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           
 13041                           ;psect for function ___fttol
 13042  0D97                     ___fttol:	
 13043                           
 13044                           ;incstack = 0
 13045                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13046  0D97  0020               	movlb	0	; select bank0
 13047  0D98  084B               	movf	___fttol@f1,w
 13048  0D99  00CF               	movwf	??___fttol
 13049  0D9A  084C               	movf	___fttol@f1+1,w
 13050  0D9B  00D0               	movwf	??___fttol+1
 13051  0D9C  084D               	movf	___fttol@f1+2,w
 13052  0D9D  00D1               	movwf	??___fttol+2
 13053  0D9E  1003               	clrc
 13054  0D9F  0D50               	rlf	??___fttol+1,w
 13055  0DA0  0D51               	rlf	??___fttol+2,w
 13056  0DA1  00D2               	movwf	??___fttol+3
 13057  0DA2  0852               	movf	??___fttol+3,w
 13058  0DA3  00D8               	movwf	___fttol@exp1
 13059  0DA4  08D8               	movf	___fttol@exp1,f
 13060  0DA5  1D03               	skipz
 13061  0DA6  2DB0               	goto	l5816
 13062  0DA7  3000               	movlw	0
 13063  0DA8  00CE               	movwf	?___fttol+3
 13064  0DA9  3000               	movlw	0
 13065  0DAA  00CD               	movwf	?___fttol+2
 13066  0DAB  3000               	movlw	0
 13067  0DAC  00CC               	movwf	?___fttol+1
 13068  0DAD  3000               	movlw	0
 13069  0DAE  00CB               	movwf	?___fttol
 13070  0DAF  0008               	return
 13071  0DB0                     l5816:	
 13072  0DB0  084B               	movf	___fttol@f1,w
 13073  0DB1  00CF               	movwf	??___fttol
 13074  0DB2  084C               	movf	___fttol@f1+1,w
 13075  0DB3  00D0               	movwf	??___fttol+1
 13076  0DB4  084D               	movf	___fttol@f1+2,w
 13077  0DB5  00D1               	movwf	??___fttol+2
 13078  0DB6  3017               	movlw	23
 13079  0DB7                     u4495:	
 13080  0DB7  36D1               	lsrf	??___fttol+2,f
 13081  0DB8  0CD0               	rrf	??___fttol+1,f
 13082  0DB9  0CCF               	rrf	??___fttol,f
 13083  0DBA  0B89               	decfsz	9,f
 13084  0DBB  2DB7               	goto	u4495
 13085  0DBC  084F               	movf	??___fttol,w
 13086  0DBD  00D2               	movwf	??___fttol+3
 13087  0DBE  0852               	movf	??___fttol+3,w
 13088  0DBF  00D3               	movwf	___fttol@sign1
 13089  0DC0  17CC               	bsf	___fttol@f1+1,7
 13090  0DC1  30FF               	movlw	255
 13091  0DC2  05CB               	andwf	___fttol@f1,f
 13092  0DC3  30FF               	movlw	255
 13093  0DC4  05CC               	andwf	___fttol@f1+1,f
 13094  0DC5  3000               	movlw	0
 13095  0DC6  05CD               	andwf	___fttol@f1+2,f
 13096  0DC7  084B               	movf	___fttol@f1,w
 13097  0DC8  00D4               	movwf	___fttol@lval
 13098  0DC9  084C               	movf	___fttol@f1+1,w
 13099  0DCA  00D5               	movwf	___fttol@lval+1
 13100  0DCB  084D               	movf	___fttol@f1+2,w
 13101  0DCC  00D6               	movwf	___fttol@lval+2
 13102  0DCD  01D7               	clrf	___fttol@lval+3
 13103  0DCE  308E               	movlw	142
 13104  0DCF  02D8               	subwf	___fttol@exp1,f
 13105  0DD0  1FD8               	btfss	___fttol@exp1,7
 13106  0DD1  2DEE               	goto	l5836
 13107  0DD2  0858               	movf	___fttol@exp1,w
 13108  0DD3  3A80               	xorlw	128
 13109  0DD4  3E8F               	addlw	143
 13110  0DD5  1803               	skipnc
 13111  0DD6  2DE0               	goto	l5834
 13112  0DD7  3000               	movlw	0
 13113  0DD8  00CE               	movwf	?___fttol+3
 13114  0DD9  3000               	movlw	0
 13115  0DDA  00CD               	movwf	?___fttol+2
 13116  0DDB  3000               	movlw	0
 13117  0DDC  00CC               	movwf	?___fttol+1
 13118  0DDD  3000               	movlw	0
 13119  0DDE  00CB               	movwf	?___fttol
 13120  0DDF  0008               	return
 13121  0DE0                     l5834:	
 13122  0DE0  3001               	movlw	1
 13123  0DE1                     u4525:	
 13124  0DE1  36D7               	lsrf	___fttol@lval+3,f
 13125  0DE2  0CD6               	rrf	___fttol@lval+2,f
 13126  0DE3  0CD5               	rrf	___fttol@lval+1,f
 13127  0DE4  0CD4               	rrf	___fttol@lval,f
 13128  0DE5  0B89               	decfsz	9,f
 13129  0DE6  2DE1               	goto	u4525
 13130  0DE7  3001               	movlw	1
 13131  0DE8  00CF               	movwf	??___fttol
 13132  0DE9  084F               	movf	??___fttol,w
 13133  0DEA  07D8               	addwf	___fttol@exp1,f
 13134  0DEB  1903               	btfsc	3,2
 13135  0DEC  2E07               	goto	l5846
 13136  0DED  2DE0               	goto	l5834
 13137  0DEE                     l5836:	
 13138  0DEE  3018               	movlw	24
 13139  0DEF  0258               	subwf	___fttol@exp1,w
 13140  0DF0  1C03               	skipc
 13141  0DF1  2E04               	goto	l5844
 13142  0DF2  3000               	movlw	0
 13143  0DF3  00CE               	movwf	?___fttol+3
 13144  0DF4  3000               	movlw	0
 13145  0DF5  00CD               	movwf	?___fttol+2
 13146  0DF6  3000               	movlw	0
 13147  0DF7  00CC               	movwf	?___fttol+1
 13148  0DF8  3000               	movlw	0
 13149  0DF9  00CB               	movwf	?___fttol
 13150  0DFA  0008               	return
 13151  0DFB                     l5842:	
 13152  0DFB  3001               	movlw	1
 13153  0DFC                     u4555:	
 13154  0DFC  35D4               	lslf	___fttol@lval,f
 13155  0DFD  0DD5               	rlf	___fttol@lval+1,f
 13156  0DFE  0DD6               	rlf	___fttol@lval+2,f
 13157  0DFF  0DD7               	rlf	___fttol@lval+3,f
 13158  0E00  0B89               	decfsz	9,f
 13159  0E01  2DFC               	goto	u4555
 13160  0E02  3001               	movlw	1
 13161  0E03  02D8               	subwf	___fttol@exp1,f
 13162  0E04                     l5844:	
 13163  0E04  08D8               	movf	___fttol@exp1,f
 13164  0E05  1D03               	skipz
 13165  0E06  2DFB               	goto	l5842
 13166  0E07                     l5846:	
 13167  0E07  0853               	movf	___fttol@sign1,w
 13168  0E08  1903               	btfsc	3,2
 13169  0E09  2E15               	goto	l5850
 13170  0E0A  09D4               	comf	___fttol@lval,f
 13171  0E0B  09D5               	comf	___fttol@lval+1,f
 13172  0E0C  09D6               	comf	___fttol@lval+2,f
 13173  0E0D  09D7               	comf	___fttol@lval+3,f
 13174  0E0E  0AD4               	incf	___fttol@lval,f
 13175  0E0F  1903               	skipnz
 13176  0E10  0AD5               	incf	___fttol@lval+1,f
 13177  0E11  1903               	skipnz
 13178  0E12  0AD6               	incf	___fttol@lval+2,f
 13179  0E13  1903               	skipnz
 13180  0E14  0AD7               	incf	___fttol@lval+3,f
 13181  0E15                     l5850:	
 13182  0E15  0857               	movf	___fttol@lval+3,w
 13183  0E16  00CE               	movwf	?___fttol+3
 13184  0E17  0856               	movf	___fttol@lval+2,w
 13185  0E18  00CD               	movwf	?___fttol+2
 13186  0E19  0855               	movf	___fttol@lval+1,w
 13187  0E1A  00CC               	movwf	?___fttol+1
 13188  0E1B  0854               	movf	___fttol@lval,w
 13189  0E1C  00CB               	movwf	?___fttol
 13190  0E1D  0008               	return
 13191  0E1E                     __end_of___fttol:	
 13192                           
 13193                           	psect	text78
 13194  0EA8                     __ptext78:	
 13195 ;; *************** function ___ftdiv *****************
 13196 ;; Defined at:
 13197 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  f2              3   14[BANK0 ] float 
 13200 ;;  f1              3   17[BANK0 ] float 
 13201 ;; Auto vars:     Size  Location     Type
 13202 ;;  f3              3   25[BANK0 ] float 
 13203 ;;  sign            1   29[BANK0 ] unsigned char 
 13204 ;;  exp             1   28[BANK0 ] unsigned char 
 13205 ;;  cntr            1   24[BANK0 ] unsigned char 
 13206 ;; Return value:  Size  Location     Type
 13207 ;;                  3   14[BANK0 ] float 
 13208 ;; Registers used:
 13209 ;;		wreg, status,2, status,0, pclath, cstack
 13210 ;; Tracked objects:
 13211 ;;		On entry : 0/0
 13212 ;;		On exit  : 0/0
 13213 ;;		Unchanged: 0/0
 13214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13215 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;Total ram usage:       16 bytes
 13220 ;; Hardware stack levels used:    1
 13221 ;; Hardware stack levels required when called:    6
 13222 ;; This function calls:
 13223 ;;		___ftpack
 13224 ;; This function is called by:
 13225 ;;		_getPercentValue
 13226 ;;		_setPercentValue
 13227 ;; This function uses a non-reentrant model
 13228 ;;
 13229                           
 13230                           
 13231                           ;psect for function ___ftdiv
 13232  0EA8                     ___ftdiv:	
 13233                           
 13234                           ;incstack = 0
 13235                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13236  0EA8  0020               	movlb	0	; select bank0
 13237  0EA9  0831               	movf	___ftdiv@f1,w
 13238  0EAA  00B4               	movwf	??___ftdiv
 13239  0EAB  0832               	movf	___ftdiv@f1+1,w
 13240  0EAC  00B5               	movwf	??___ftdiv+1
 13241  0EAD  0833               	movf	___ftdiv@f1+2,w
 13242  0EAE  00B6               	movwf	??___ftdiv+2
 13243  0EAF  1003               	clrc
 13244  0EB0  0D35               	rlf	??___ftdiv+1,w
 13245  0EB1  0D36               	rlf	??___ftdiv+2,w
 13246  0EB2  00B7               	movwf	??___ftdiv+3
 13247  0EB3  0837               	movf	??___ftdiv+3,w
 13248  0EB4  00BC               	movwf	___ftdiv@exp
 13249  0EB5  08BC               	movf	___ftdiv@exp,f
 13250  0EB6  1D03               	skipz
 13251  0EB7  2EBF               	goto	l5724
 13252  0EB8  3000               	movlw	0
 13253  0EB9  00AE               	movwf	?___ftdiv
 13254  0EBA  3000               	movlw	0
 13255  0EBB  00AF               	movwf	?___ftdiv+1
 13256  0EBC  3000               	movlw	0
 13257  0EBD  00B0               	movwf	?___ftdiv+2
 13258  0EBE  0008               	return
 13259  0EBF                     l5724:	
 13260  0EBF  082E               	movf	___ftdiv@f2,w
 13261  0EC0  00B4               	movwf	??___ftdiv
 13262  0EC1  082F               	movf	___ftdiv@f2+1,w
 13263  0EC2  00B5               	movwf	??___ftdiv+1
 13264  0EC3  0830               	movf	___ftdiv@f2+2,w
 13265  0EC4  00B6               	movwf	??___ftdiv+2
 13266  0EC5  1003               	clrc
 13267  0EC6  0D35               	rlf	??___ftdiv+1,w
 13268  0EC7  0D36               	rlf	??___ftdiv+2,w
 13269  0EC8  00B7               	movwf	??___ftdiv+3
 13270  0EC9  0837               	movf	??___ftdiv+3,w
 13271  0ECA  00BD               	movwf	___ftdiv@sign
 13272  0ECB  08BD               	movf	___ftdiv@sign,f
 13273  0ECC  1D03               	skipz
 13274  0ECD  2ED5               	goto	l5730
 13275  0ECE  3000               	movlw	0
 13276  0ECF  00AE               	movwf	?___ftdiv
 13277  0ED0  3000               	movlw	0
 13278  0ED1  00AF               	movwf	?___ftdiv+1
 13279  0ED2  3000               	movlw	0
 13280  0ED3  00B0               	movwf	?___ftdiv+2
 13281  0ED4  0008               	return
 13282  0ED5                     l5730:	
 13283  0ED5  3000               	movlw	0
 13284  0ED6  00B9               	movwf	___ftdiv@f3
 13285  0ED7  3000               	movlw	0
 13286  0ED8  00BA               	movwf	___ftdiv@f3+1
 13287  0ED9  3000               	movlw	0
 13288  0EDA  00BB               	movwf	___ftdiv@f3+2
 13289  0EDB  3089               	movlw	137
 13290  0EDC  073D               	addwf	___ftdiv@sign,w
 13291  0EDD  00B4               	movwf	??___ftdiv
 13292  0EDE  0834               	movf	??___ftdiv,w
 13293  0EDF  02BC               	subwf	___ftdiv@exp,f
 13294  0EE0  0831               	movf	___ftdiv@f1,w
 13295  0EE1  00B4               	movwf	??___ftdiv
 13296  0EE2  0832               	movf	___ftdiv@f1+1,w
 13297  0EE3  00B5               	movwf	??___ftdiv+1
 13298  0EE4  0833               	movf	___ftdiv@f1+2,w
 13299  0EE5  00B6               	movwf	??___ftdiv+2
 13300  0EE6  3010               	movlw	16
 13301  0EE7                     u4305:	
 13302  0EE7  36B6               	lsrf	??___ftdiv+2,f
 13303  0EE8  0CB5               	rrf	??___ftdiv+1,f
 13304  0EE9  0CB4               	rrf	??___ftdiv,f
 13305  0EEA  0B89               	decfsz	9,f
 13306  0EEB  2EE7               	goto	u4305
 13307  0EEC  0834               	movf	??___ftdiv,w
 13308  0EED  00B7               	movwf	??___ftdiv+3
 13309  0EEE  0837               	movf	??___ftdiv+3,w
 13310  0EEF  00BD               	movwf	___ftdiv@sign
 13311  0EF0  082E               	movf	___ftdiv@f2,w
 13312  0EF1  00B4               	movwf	??___ftdiv
 13313  0EF2  082F               	movf	___ftdiv@f2+1,w
 13314  0EF3  00B5               	movwf	??___ftdiv+1
 13315  0EF4  0830               	movf	___ftdiv@f2+2,w
 13316  0EF5  00B6               	movwf	??___ftdiv+2
 13317  0EF6  3010               	movlw	16
 13318  0EF7                     u4315:	
 13319  0EF7  36B6               	lsrf	??___ftdiv+2,f
 13320  0EF8  0CB5               	rrf	??___ftdiv+1,f
 13321  0EF9  0CB4               	rrf	??___ftdiv,f
 13322  0EFA  0B89               	decfsz	9,f
 13323  0EFB  2EF7               	goto	u4315
 13324  0EFC  0834               	movf	??___ftdiv,w
 13325  0EFD  00B7               	movwf	??___ftdiv+3
 13326  0EFE  0837               	movf	??___ftdiv+3,w
 13327  0EFF  06BD               	xorwf	___ftdiv@sign,f
 13328  0F00  3080               	movlw	128
 13329  0F01  00B4               	movwf	??___ftdiv
 13330  0F02  0834               	movf	??___ftdiv,w
 13331  0F03  05BD               	andwf	___ftdiv@sign,f
 13332  0F04  17B2               	bsf	___ftdiv@f1+1,7
 13333  0F05  30FF               	movlw	255
 13334  0F06  05B1               	andwf	___ftdiv@f1,f
 13335  0F07  30FF               	movlw	255
 13336  0F08  05B2               	andwf	___ftdiv@f1+1,f
 13337  0F09  3000               	movlw	0
 13338  0F0A  05B3               	andwf	___ftdiv@f1+2,f
 13339  0F0B  17AF               	bsf	___ftdiv@f2+1,7
 13340  0F0C  30FF               	movlw	255
 13341  0F0D  05AE               	andwf	___ftdiv@f2,f
 13342  0F0E  30FF               	movlw	255
 13343  0F0F  05AF               	andwf	___ftdiv@f2+1,f
 13344  0F10  3000               	movlw	0
 13345  0F11  05B0               	andwf	___ftdiv@f2+2,f
 13346  0F12  3018               	movlw	24
 13347  0F13  00B4               	movwf	??___ftdiv
 13348  0F14  0834               	movf	??___ftdiv,w
 13349  0F15  00B8               	movwf	___ftdiv@cntr
 13350  0F16                     l5744:	
 13351  0F16  3001               	movlw	1
 13352  0F17                     u4325:	
 13353  0F17  35B9               	lslf	___ftdiv@f3,f
 13354  0F18  0DBA               	rlf	___ftdiv@f3+1,f
 13355  0F19  0DBB               	rlf	___ftdiv@f3+2,f
 13356  0F1A  0B89               	decfsz	9,f
 13357  0F1B  2F17               	goto	u4325
 13358  0F1C  0830               	movf	___ftdiv@f2+2,w
 13359  0F1D  0233               	subwf	___ftdiv@f1+2,w
 13360  0F1E  1D03               	skipz
 13361  0F1F  2F26               	goto	u4335
 13362  0F20  082F               	movf	___ftdiv@f2+1,w
 13363  0F21  0232               	subwf	___ftdiv@f1+1,w
 13364  0F22  1D03               	skipz
 13365  0F23  2F26               	goto	u4335
 13366  0F24  082E               	movf	___ftdiv@f2,w
 13367  0F25  0231               	subwf	___ftdiv@f1,w
 13368  0F26                     u4335:	
 13369  0F26  1C03               	skipc
 13370  0F27  2F2F               	goto	l5752
 13371  0F28  082E               	movf	___ftdiv@f2,w
 13372  0F29  02B1               	subwf	___ftdiv@f1,f
 13373  0F2A  082F               	movf	___ftdiv@f2+1,w
 13374  0F2B  3BB2               	subwfb	___ftdiv@f1+1,f
 13375  0F2C  0830               	movf	___ftdiv@f2+2,w
 13376  0F2D  3BB3               	subwfb	___ftdiv@f1+2,f
 13377  0F2E  1439               	bsf	___ftdiv@f3,0
 13378  0F2F                     l5752:	
 13379  0F2F  3001               	movlw	1
 13380  0F30                     u4345:	
 13381  0F30  35B1               	lslf	___ftdiv@f1,f
 13382  0F31  0DB2               	rlf	___ftdiv@f1+1,f
 13383  0F32  0DB3               	rlf	___ftdiv@f1+2,f
 13384  0F33  0B89               	decfsz	9,f
 13385  0F34  2F30               	goto	u4345
 13386  0F35  3001               	movlw	1
 13387  0F36  02B8               	subwf	___ftdiv@cntr,f
 13388  0F37  1D03               	btfss	3,2
 13389  0F38  2F16               	goto	l5744
 13390  0F39  0839               	movf	___ftdiv@f3,w
 13391  0F3A  00A0               	movwf	___ftpack@arg
 13392  0F3B  083A               	movf	___ftdiv@f3+1,w
 13393  0F3C  00A1               	movwf	___ftpack@arg+1
 13394  0F3D  083B               	movf	___ftdiv@f3+2,w
 13395  0F3E  00A2               	movwf	___ftpack@arg+2
 13396  0F3F  083C               	movf	___ftdiv@exp,w
 13397  0F40  00B4               	movwf	??___ftdiv
 13398  0F41  0834               	movf	??___ftdiv,w
 13399  0F42  00A3               	movwf	___ftpack@exp
 13400  0F43  083D               	movf	___ftdiv@sign,w
 13401  0F44  00B5               	movwf	??___ftdiv+1
 13402  0F45  0835               	movf	??___ftdiv+1,w
 13403  0F46  00A4               	movwf	___ftpack@sign
 13404  0F47  3189  213C         	fcall	___ftpack
 13405  0F49  0020               	movlb	0	; select bank0
 13406  0F4A  0820               	movf	?___ftpack,w
 13407  0F4B  00AE               	movwf	?___ftdiv
 13408  0F4C  0821               	movf	?___ftpack+1,w
 13409  0F4D  00AF               	movwf	?___ftdiv+1
 13410  0F4E  0822               	movf	?___ftpack+2,w
 13411  0F4F  00B0               	movwf	?___ftdiv+2
 13412  0F50  0008               	return
 13413  0F51                     __end_of___ftdiv:	
 13414                           
 13415                           	psect	text79
 13416  12B7                     __ptext79:	
 13417 ;; *************** function ___awtoft *****************
 13418 ;; Defined at:
 13419 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13420 ;; Parameters:    Size  Location     Type
 13421 ;;  c               2    8[BANK0 ] int 
 13422 ;; Auto vars:     Size  Location     Type
 13423 ;;  sign            1   13[BANK0 ] unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;                  3    8[BANK0 ] float 
 13426 ;; Registers used:
 13427 ;;		wreg, status,2, status,0, pclath, cstack
 13428 ;; Tracked objects:
 13429 ;;		On entry : 0/0
 13430 ;;		On exit  : 0/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13433 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;Total ram usage:        6 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    6
 13440 ;; This function calls:
 13441 ;;		___ftpack
 13442 ;; This function is called by:
 13443 ;;		_getPercentValue
 13444 ;;		_setPercentValue
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function ___awtoft
 13450  12B7                     ___awtoft:	
 13451                           
 13452                           ;incstack = 0
 13453                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13454  12B7  0020               	movlb	0	; select bank0
 13455  12B8  01AD               	clrf	___awtoft@sign
 13456  12B9  1FA9               	btfss	___awtoft@c+1,7
 13457  12BA  2AC2               	goto	l7972
 13458  12BB  09A8               	comf	___awtoft@c,f
 13459  12BC  09A9               	comf	___awtoft@c+1,f
 13460  12BD  0AA8               	incf	___awtoft@c,f
 13461  12BE  1903               	skipnz
 13462  12BF  0AA9               	incf	___awtoft@c+1,f
 13463  12C0  01AD               	clrf	___awtoft@sign
 13464  12C1  0AAD               	incf	___awtoft@sign,f
 13465  12C2                     l7972:	
 13466  12C2  0828               	movf	___awtoft@c,w
 13467  12C3  00A0               	movwf	___ftpack@arg
 13468  12C4  0829               	movf	___awtoft@c+1,w
 13469  12C5  00A1               	movwf	___ftpack@arg+1
 13470  12C6  01A2               	clrf	___ftpack@arg+2
 13471  12C7  308E               	movlw	142
 13472  12C8  00AB               	movwf	??___awtoft
 13473  12C9  082B               	movf	??___awtoft,w
 13474  12CA  00A3               	movwf	___ftpack@exp
 13475  12CB  082D               	movf	___awtoft@sign,w
 13476  12CC  00AC               	movwf	??___awtoft+1
 13477  12CD  082C               	movf	??___awtoft+1,w
 13478  12CE  00A4               	movwf	___ftpack@sign
 13479  12CF  3189  213C         	fcall	___ftpack
 13480  12D1  0020               	movlb	0	; select bank0
 13481  12D2  0820               	movf	?___ftpack,w
 13482  12D3  00A8               	movwf	?___awtoft
 13483  12D4  0821               	movf	?___ftpack+1,w
 13484  12D5  00A9               	movwf	?___awtoft+1
 13485  12D6  0822               	movf	?___ftpack+2,w
 13486  12D7  00AA               	movwf	?___awtoft+2
 13487  12D8  0008               	return
 13488  12D9                     __end_of___awtoft:	
 13489                           
 13490                           	psect	text80
 13491  093C                     __ptext80:	
 13492 ;; *************** function ___ftpack *****************
 13493 ;; Defined at:
 13494 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;  arg             3    0[BANK0 ] unsigned um
 13497 ;;  exp             1    3[BANK0 ] unsigned char 
 13498 ;;  sign            1    4[BANK0 ] unsigned char 
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;		None
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  3    0[BANK0 ] float 
 13503 ;; Registers used:
 13504 ;;		wreg, status,2, status,0
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13510 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;Total ram usage:        8 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    5
 13517 ;; This function calls:
 13518 ;;		Nothing
 13519 ;; This function is called by:
 13520 ;;		___awtoft
 13521 ;;		___ftadd
 13522 ;;		___ftdiv
 13523 ;;		___ftmul
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           
 13528                           ;psect for function ___ftpack
 13529  093C                     ___ftpack:	
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13533  093C  0020               	movlb	0	; select bank0
 13534  093D  0823               	movf	___ftpack@exp,w
 13535  093E  1903               	btfsc	3,2
 13536  093F  2945               	goto	l5608
 13537  0940  0822               	movf	___ftpack@arg+2,w
 13538  0941  0421               	iorwf	___ftpack@arg+1,w
 13539  0942  0420               	iorwf	___ftpack@arg,w
 13540  0943  1D03               	skipz
 13541  0944  2956               	goto	l5614
 13542  0945                     l5608:	
 13543  0945  3000               	movlw	0
 13544  0946  00A0               	movwf	?___ftpack
 13545  0947  3000               	movlw	0
 13546  0948  00A1               	movwf	?___ftpack+1
 13547  0949  3000               	movlw	0
 13548  094A  00A2               	movwf	?___ftpack+2
 13549  094B  0008               	return
 13550  094C                     l5612:	
 13551  094C  3001               	movlw	1
 13552  094D  00A5               	movwf	??___ftpack
 13553  094E  0825               	movf	??___ftpack,w
 13554  094F  07A3               	addwf	___ftpack@exp,f
 13555  0950  3001               	movlw	1
 13556  0951                     u3955:	
 13557  0951  36A2               	lsrf	___ftpack@arg+2,f
 13558  0952  0CA1               	rrf	___ftpack@arg+1,f
 13559  0953  0CA0               	rrf	___ftpack@arg,f
 13560  0954  0B89               	decfsz	9,f
 13561  0955  2951               	goto	u3955
 13562  0956                     l5614:	
 13563  0956  30FE               	movlw	254
 13564  0957  0522               	andwf	___ftpack@arg+2,w
 13565  0958  1903               	btfsc	3,2
 13566  0959  296F               	goto	l3020
 13567  095A  294C               	goto	l5612
 13568  095B                     l5616:	
 13569  095B  3001               	movlw	1
 13570  095C  00A5               	movwf	??___ftpack
 13571  095D  0825               	movf	??___ftpack,w
 13572  095E  07A3               	addwf	___ftpack@exp,f
 13573  095F  3001               	movlw	1
 13574  0960  07A0               	addwf	___ftpack@arg,f
 13575  0961  3000               	movlw	0
 13576  0962  1803               	skipnc
 13577  0963  3001               	movlw	1
 13578  0964  07A1               	addwf	___ftpack@arg+1,f
 13579  0965  3000               	movlw	0
 13580  0966  1803               	skipnc
 13581  0967  3001               	movlw	1
 13582  0968  07A2               	addwf	___ftpack@arg+2,f
 13583  0969  3001               	movlw	1
 13584  096A                     u3975:	
 13585  096A  36A2               	lsrf	___ftpack@arg+2,f
 13586  096B  0CA1               	rrf	___ftpack@arg+1,f
 13587  096C  0CA0               	rrf	___ftpack@arg,f
 13588  096D  0B89               	decfsz	9,f
 13589  096E  296A               	goto	u3975
 13590  096F                     l3020:	
 13591  096F  30FF               	movlw	255
 13592  0970  0522               	andwf	___ftpack@arg+2,w
 13593  0971  1903               	btfsc	3,2
 13594  0972  297C               	goto	l5624
 13595  0973  295B               	goto	l5616
 13596  0974                     l5622:	
 13597  0974  3001               	movlw	1
 13598  0975  02A3               	subwf	___ftpack@exp,f
 13599  0976  3001               	movlw	1
 13600  0977                     u3995:	
 13601  0977  35A0               	lslf	___ftpack@arg,f
 13602  0978  0DA1               	rlf	___ftpack@arg+1,f
 13603  0979  0DA2               	rlf	___ftpack@arg+2,f
 13604  097A  0B89               	decfsz	9,f
 13605  097B  2977               	goto	u3995
 13606  097C                     l5624:	
 13607  097C  1FA1               	btfss	___ftpack@arg+1,7
 13608  097D  2974               	goto	l5622
 13609  097E  1823               	btfsc	___ftpack@exp,0
 13610  097F  2986               	goto	l3026
 13611  0980  30FF               	movlw	255
 13612  0981  05A0               	andwf	___ftpack@arg,f
 13613  0982  307F               	movlw	127
 13614  0983  05A1               	andwf	___ftpack@arg+1,f
 13615  0984  30FF               	movlw	255
 13616  0985  05A2               	andwf	___ftpack@arg+2,f
 13617  0986                     l3026:	
 13618  0986  1003               	clrc
 13619  0987  0CA3               	rrf	___ftpack@exp,f
 13620  0988  0823               	movf	___ftpack@exp,w
 13621  0989  00A5               	movwf	??___ftpack
 13622  098A  01A6               	clrf	??___ftpack+1
 13623  098B  01A7               	clrf	??___ftpack+2
 13624  098C  3010               	movlw	16
 13625  098D                     u4025:	
 13626  098D  35A5               	lslf	??___ftpack,f
 13627  098E  0DA6               	rlf	??___ftpack+1,f
 13628  098F  0DA7               	rlf	??___ftpack+2,f
 13629  0990  0B89               	decfsz	9,f
 13630  0991  298D               	goto	u4025
 13631  0992  0825               	movf	??___ftpack,w
 13632  0993  04A0               	iorwf	___ftpack@arg,f
 13633  0994  0826               	movf	??___ftpack+1,w
 13634  0995  04A1               	iorwf	___ftpack@arg+1,f
 13635  0996  0827               	movf	??___ftpack+2,w
 13636  0997  04A2               	iorwf	___ftpack@arg+2,f
 13637  0998  0824               	movf	___ftpack@sign,w
 13638  0999  1903               	btfsc	3,2
 13639  099A  0008               	return
 13640  099B  17A2               	bsf	___ftpack@arg+2,7
 13641  099C  0008               	return
 13642  099D                     __end_of___ftpack:	
 13643                           
 13644                           	psect	text81
 13645  1F10                     __ptext81:	
 13646 ;; *************** function _setRFSW_Status *****************
 13647 ;; Defined at:
 13648 ;;		line 434 in file "../src/RF_Control_B1.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  sw              1    wreg     unsigned char 
 13651 ;;  command         1    2[BANK0 ] unsigned char 
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;  sw              1    3[BANK0 ] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;		None               void
 13656 ;; Registers used:
 13657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13663 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;Total ram usage:        2 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    6
 13670 ;; This function calls:
 13671 ;;		_RfSWPointSelect
 13672 ;; This function is called by:
 13673 ;;		_DlyOff_Main
 13674 ;;		_setControl_Lights_Table
 13675 ;;		_Sw_DimmerOnFunc
 13676 ;;		_Sw_DimmerAdjFunc
 13677 ;;		_setDimmerLights_ERROR
 13678 ;; This function uses a non-reentrant model
 13679 ;;
 13680                           
 13681                           
 13682                           ;psect for function _setRFSW_Status
 13683  1F10                     _setRFSW_Status:	
 13684                           
 13685                           ;incstack = 0
 13686                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13687                           ;setRFSW_Status@sw stored from wreg
 13688  1F10  0020               	movlb	0	; select bank0
 13689  1F11  00A3               	movwf	setRFSW_Status@sw
 13690                           
 13691                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 13692  1F12  0823               	movf	setRFSW_Status@sw,w
 13693  1F13  3192  2235         	fcall	_RfSWPointSelect
 13694                           
 13695                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 13696  1F15  0021               	movlb	1	; select bank1
 13697  1F16  0857               	movf	_RFSW^(0+128),w
 13698  1F17  0086               	movwf	6
 13699  1F18  0187               	clrf	7
 13700  1F19  0020               	movlb	0	; select bank0
 13701  1F1A  0822               	movf	setRFSW_Status@command,w
 13702  1F1B  1001               	bcf	1,0
 13703  1F1C  1D03               	skipz
 13704  1F1D  1401               	bsf	1,0
 13705  1F1E  0008               	return
 13706  1F1F                     __end_of_setRFSW_Status:	
 13707                           
 13708                           	psect	text82
 13709  1235                     __ptext82:	
 13710 ;; *************** function _RfSWPointSelect *****************
 13711 ;; Defined at:
 13712 ;;		line 369 in file "../src/RF_Control_B1.c"
 13713 ;; Parameters:    Size  Location     Type
 13714 ;;  sw              1    wreg     unsigned char 
 13715 ;; Auto vars:     Size  Location     Type
 13716 ;;  sw              1    1[BANK0 ] unsigned char 
 13717 ;; Return value:  Size  Location     Type
 13718 ;;		None               void
 13719 ;; Registers used:
 13720 ;;		wreg
 13721 ;; Tracked objects:
 13722 ;;		On entry : 0/0
 13723 ;;		On exit  : 0/0
 13724 ;;		Unchanged: 0/0
 13725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;Total ram usage:        2 bytes
 13731 ;; Hardware stack levels used:    1
 13732 ;; Hardware stack levels required when called:    5
 13733 ;; This function calls:
 13734 ;;		Nothing
 13735 ;; This function is called by:
 13736 ;;		_setRFSW_Control
 13737 ;;		_setRFSW_AdjControl
 13738 ;;		_setRFSW_Status
 13739 ;; This function uses a non-reentrant model
 13740 ;;
 13741                           
 13742                           
 13743                           ;psect for function _RfSWPointSelect
 13744  1235                     _RfSWPointSelect:	
 13745                           
 13746                           ;incstack = 0
 13747                           ; Regs used in _RfSWPointSelect: [wreg]
 13748                           ;RfSWPointSelect@sw stored from wreg
 13749  1235  0020               	movlb	0	; select bank0
 13750  1236  00A1               	movwf	RfSWPointSelect@sw
 13751                           
 13752                           ;RF_Control_B1.c: 371: if (sw == 1) {
 13753  1237  0821               	movf	RfSWPointSelect@sw,w
 13754  1238  3A01               	xorlw	1
 13755  1239  1D03               	skipz
 13756  123A  2A40               	goto	l2286
 13757                           
 13758                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 13759  123B  30EB               	movlw	_RFSW1& (0+255)
 13760  123C  00A0               	movwf	??_RfSWPointSelect
 13761  123D  0820               	movf	??_RfSWPointSelect,w
 13762  123E  0021               	movlb	1	; select bank1
 13763  123F  00D7               	movwf	_RFSW^(0+128)
 13764  1240                     l2286:	
 13765                           
 13766                           ;RF_Control_B1.c: 373: }
 13767                           ;RF_Control_B1.c: 376: if (sw == 2) {
 13768  1240  0020               	movlb	0	; select bank0
 13769  1241  0821               	movf	RfSWPointSelect@sw,w
 13770  1242  3A02               	xorlw	2
 13771  1243  1D03               	skipz
 13772  1244  2A4A               	goto	l2287
 13773                           
 13774                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 13775  1245  30EC               	movlw	_RFSW2& (0+255)
 13776  1246  00A0               	movwf	??_RfSWPointSelect
 13777  1247  0820               	movf	??_RfSWPointSelect,w
 13778  1248  0021               	movlb	1	; select bank1
 13779  1249  00D7               	movwf	_RFSW^(0+128)
 13780  124A                     l2287:	
 13781                           
 13782                           ;RF_Control_B1.c: 378: }
 13783                           ;RF_Control_B1.c: 381: if (sw == 3) {
 13784  124A  0020               	movlb	0	; select bank0
 13785  124B  0821               	movf	RfSWPointSelect@sw,w
 13786  124C  3A03               	xorlw	3
 13787  124D  1D03               	skipz
 13788  124E  0008               	return
 13789                           
 13790                           ;RF_Control_B1.c: 382: RFSW = &RFSW3;
 13791  124F  30ED               	movlw	_RFSW3& (0+255)
 13792  1250  00A0               	movwf	??_RfSWPointSelect
 13793  1251  0820               	movf	??_RfSWPointSelect,w
 13794  1252  0021               	movlb	1	; select bank1
 13795  1253  00D7               	movwf	_RFSW^(0+128)
 13796  1254  0008               	return
 13797  1255                     __end_of_RfSWPointSelect:	
 13798                           
 13799                           	psect	text83
 13800  1F6B                     __ptext83:	
 13801 ;; *************** function _setDimmerLights_Trigger *****************
 13802 ;; Defined at:
 13803 ;;		line 714 in file "../src/Dimmer_B1.c"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;  lights          1    wreg     unsigned char 
 13806 ;;  command         1    2[BANK0 ] unsigned char 
 13807 ;; Auto vars:     Size  Location     Type
 13808 ;;  lights          1    3[BANK0 ] unsigned char 
 13809 ;; Return value:  Size  Location     Type
 13810 ;;		None               void
 13811 ;; Registers used:
 13812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13813 ;; Tracked objects:
 13814 ;;		On entry : 0/0
 13815 ;;		On exit  : 0/0
 13816 ;;		Unchanged: 0/0
 13817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13818 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;Total ram usage:        2 bytes
 13823 ;; Hardware stack levels used:    1
 13824 ;; Hardware stack levels required when called:    6
 13825 ;; This function calls:
 13826 ;;		_DimmerLightsPointSelect
 13827 ;; This function is called by:
 13828 ;;		_DlyOff_Main
 13829 ;;		_setRFSW_Control
 13830 ;;		_Sw_DimmerOnFunc
 13831 ;;		_Sw_DimmerOffFunc
 13832 ;; This function uses a non-reentrant model
 13833 ;;
 13834                           
 13835                           
 13836                           ;psect for function _setDimmerLights_Trigger
 13837  1F6B                     _setDimmerLights_Trigger:	
 13838                           
 13839                           ;incstack = 0
 13840                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13841                           ;setDimmerLights_Trigger@lights stored from wreg
 13842  1F6B  0020               	movlb	0	; select bank0
 13843  1F6C  00A3               	movwf	setDimmerLights_Trigger@lights
 13844                           
 13845                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 13846  1F6D  0823               	movf	setDimmerLights_Trigger@lights,w
 13847  1F6E  3191  2185         	fcall	_DimmerLightsPointSelect
 13848                           
 13849                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 13850  1F70  0020               	movlb	0	; select bank0
 13851  1F71  086B               	movf	_DimmerLights,w
 13852  1F72  3E08               	addlw	8
 13853  1F73  0086               	movwf	6
 13854  1F74  3001               	movlw	1	; select bank2/3
 13855  1F75  0087               	movwf	7
 13856  1F76  0822               	movf	setDimmerLights_Trigger@command,w
 13857  1F77  1101               	bcf	1,2
 13858  1F78  1D03               	skipz
 13859  1F79  1501               	bsf	1,2
 13860  1F7A  0008               	return
 13861  1F7B                     __end_of_setDimmerLights_Trigger:	
 13862                           
 13863                           	psect	text84
 13864  1F5B                     __ptext84:	
 13865 ;; *************** function _setDimmerLights_Switch *****************
 13866 ;; Defined at:
 13867 ;;		line 702 in file "../src/Dimmer_B1.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  lights          1    wreg     unsigned char 
 13870 ;;  command         1    2[BANK0 ] unsigned char 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  lights          1    3[BANK0 ] unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;		None               void
 13875 ;; Registers used:
 13876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13882 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;Total ram usage:        2 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    6
 13889 ;; This function calls:
 13890 ;;		_DimmerLightsPointSelect
 13891 ;; This function is called by:
 13892 ;;		_DlyOff_Main
 13893 ;;		_setRFSW_Control
 13894 ;;		_Sw_DimmerOnFunc
 13895 ;;		_Sw_DimmerOffFunc
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           
 13900                           ;psect for function _setDimmerLights_Switch
 13901  1F5B                     _setDimmerLights_Switch:	
 13902                           
 13903                           ;incstack = 0
 13904                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13905                           ;setDimmerLights_Switch@lights stored from wreg
 13906  1F5B  0020               	movlb	0	; select bank0
 13907  1F5C  00A3               	movwf	setDimmerLights_Switch@lights
 13908                           
 13909                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 13910  1F5D  0823               	movf	setDimmerLights_Switch@lights,w
 13911  1F5E  3191  2185         	fcall	_DimmerLightsPointSelect
 13912                           
 13913                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 13914  1F60  0020               	movlb	0	; select bank0
 13915  1F61  086B               	movf	_DimmerLights,w
 13916  1F62  3E08               	addlw	8
 13917  1F63  0086               	movwf	6
 13918  1F64  3001               	movlw	1	; select bank2/3
 13919  1F65  0087               	movwf	7
 13920  1F66  0822               	movf	setDimmerLights_Switch@command,w
 13921  1F67  1081               	bcf	1,1
 13922  1F68  1D03               	skipz
 13923  1F69  1481               	bsf	1,1
 13924  1F6A  0008               	return
 13925  1F6B                     __end_of_setDimmerLights_Switch:	
 13926                           
 13927                           	psect	text85
 13928  1185                     __ptext85:	
 13929 ;; *************** function _DimmerLightsPointSelect *****************
 13930 ;; Defined at:
 13931 ;;		line 324 in file "../src/Dimmer_B1.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;  lights          1    wreg     unsigned char 
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;  lights          1    1[BANK0 ] unsigned char 
 13936 ;; Return value:  Size  Location     Type
 13937 ;;		None               void
 13938 ;; Registers used:
 13939 ;;		wreg
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;Total ram usage:        2 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:    5
 13952 ;; This function calls:
 13953 ;;		Nothing
 13954 ;; This function is called by:
 13955 ;;		_setDimmerLights_Initialization
 13956 ;;		_setDimmerLights_Main
 13957 ;;		_setDimmerLights
 13958 ;;		_setDimmerLights_Adj
 13959 ;;		_setDimmerLights_AdjRF
 13960 ;;		_setDimmerLights_Switch
 13961 ;;		_setDimmerLights_AdjGo
 13962 ;;		_setDimmerLights_Trigger
 13963 ;;		_setDimmerLights_TriggerAdj
 13964 ;;		_setDimmerLights_ERROR
 13965 ;;		_setDimmerLights_TriggerERROR
 13966 ;;		_setDimmerLights_GO
 13967 ;;		_setDimmerLights_MaxmumValue
 13968 ;;		_setDimmerLights_Clear
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           
 13973                           ;psect for function _DimmerLightsPointSelect
 13974  1185                     _DimmerLightsPointSelect:	
 13975                           
 13976                           ;incstack = 0
 13977                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13978                           ;DimmerLightsPointSelect@lights stored from wreg
 13979  1185  0020               	movlb	0	; select bank0
 13980  1186  00A1               	movwf	DimmerLightsPointSelect@lights
 13981                           
 13982                           ;Dimmer_B1.c: 326: if (lights == 1) {
 13983  1187  0821               	movf	DimmerLightsPointSelect@lights,w
 13984  1188  3A01               	xorlw	1
 13985  1189  1D03               	skipz
 13986  118A  298F               	goto	l867
 13987                           
 13988                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 13989  118B  3035               	movlw	_DimmerLights1& (0+255)
 13990  118C  00A0               	movwf	??_DimmerLightsPointSelect
 13991  118D  0820               	movf	??_DimmerLightsPointSelect,w
 13992  118E  00EB               	movwf	_DimmerLights
 13993  118F                     l867:	
 13994                           
 13995                           ;Dimmer_B1.c: 328: }
 13996                           ;Dimmer_B1.c: 331: if (lights == 2) {
 13997  118F  0821               	movf	DimmerLightsPointSelect@lights,w
 13998  1190  3A02               	xorlw	2
 13999  1191  1D03               	skipz
 14000  1192  2997               	goto	l868
 14001                           
 14002                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 14003  1193  3044               	movlw	_DimmerLights2& (0+255)
 14004  1194  00A0               	movwf	??_DimmerLightsPointSelect
 14005  1195  0820               	movf	??_DimmerLightsPointSelect,w
 14006  1196  00EB               	movwf	_DimmerLights
 14007  1197                     l868:	
 14008                           
 14009                           ;Dimmer_B1.c: 333: }
 14010                           ;Dimmer_B1.c: 336: if (lights == 3) {
 14011  1197  0821               	movf	DimmerLightsPointSelect@lights,w
 14012  1198  3A03               	xorlw	3
 14013  1199  1D03               	skipz
 14014  119A  0008               	return
 14015                           
 14016                           ;Dimmer_B1.c: 337: DimmerLights = &DimmerLights3;
 14017  119B  3053               	movlw	_DimmerLights3& (0+255)
 14018  119C  00A0               	movwf	??_DimmerLightsPointSelect
 14019  119D  0820               	movf	??_DimmerLightsPointSelect,w
 14020  119E  00EB               	movwf	_DimmerLights
 14021  119F  0008               	return
 14022  11A0                     __end_of_DimmerLightsPointSelect:	
 14023                           
 14024                           	psect	text86
 14025  17A7                     __ptext86:	
 14026 ;; *************** function _setBuz *****************
 14027 ;; Defined at:
 14028 ;;		line 22 in file "../src/Buzzer_B1.c"
 14029 ;; Parameters:    Size  Location     Type
 14030 ;;  count           1    wreg     unsigned char 
 14031 ;;  time            2    9[BANK0 ] int 
 14032 ;; Auto vars:     Size  Location     Type
 14033 ;;  count           1   12[BANK0 ] unsigned char 
 14034 ;; Return value:  Size  Location     Type
 14035 ;;		None               void
 14036 ;; Registers used:
 14037 ;;		wreg, status,2, status,0, pclath, cstack
 14038 ;; Tracked objects:
 14039 ;;		On entry : 0/0
 14040 ;;		On exit  : 0/0
 14041 ;;		Unchanged: 0/0
 14042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;Total ram usage:        4 bytes
 14048 ;; Hardware stack levels used:    1
 14049 ;; Hardware stack levels required when called:    6
 14050 ;; This function calls:
 14051 ;;		___awdiv
 14052 ;; This function is called by:
 14053 ;;		_DlyOff_Main
 14054 ;;		_setDimmerLights_Main
 14055 ;;		_my_MainTime
 14056 ;;		_setLog_Code
 14057 ;;		_setControl_Lights_Table
 14058 ;;		_setRFSW_Control
 14059 ;;		_setSw_Main
 14060 ;;		_Sw_DimmerOnFunc
 14061 ;;		_DimmerLights_Exceptions
 14062 ;; This function uses a non-reentrant model
 14063 ;;
 14064                           
 14065                           
 14066                           ;psect for function _setBuz
 14067  17A7                     _setBuz:	
 14068                           
 14069                           ;incstack = 0
 14070                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14071                           ;setBuz@count stored from wreg
 14072  17A7  0020               	movlb	0	; select bank0
 14073  17A8  00AC               	movwf	setBuz@count
 14074                           
 14075                           ;Buzzer_B1.c: 23: time /= 10;
 14076  17A9  300A               	movlw	10
 14077  17AA  00A0               	movwf	___awdiv@divisor
 14078  17AB  3000               	movlw	0
 14079  17AC  00A1               	movwf	___awdiv@divisor+1
 14080  17AD  082A               	movf	setBuz@time+1,w
 14081  17AE  01A3               	clrf	___awdiv@dividend+1
 14082  17AF  07A3               	addwf	___awdiv@dividend+1,f
 14083  17B0  0829               	movf	setBuz@time,w
 14084  17B1  01A2               	clrf	___awdiv@dividend
 14085  17B2  07A2               	addwf	___awdiv@dividend,f
 14086  17B3  3196  26FD  3197   	fcall	___awdiv
 14087  17B6  0020               	movlb	0	; select bank0
 14088  17B7  0821               	movf	?___awdiv+1,w
 14089  17B8  01AA               	clrf	setBuz@time+1
 14090  17B9  07AA               	addwf	setBuz@time+1,f
 14091  17BA  0820               	movf	?___awdiv,w
 14092  17BB  01A9               	clrf	setBuz@time
 14093  17BC  07A9               	addwf	setBuz@time,f
 14094                           
 14095                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14096  17BD  0021               	movlb	1	; select bank1
 14097  17BE  1C33               	btfss	_Buz1^(0+128),0
 14098  17BF  0008               	return
 14099                           
 14100                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14101  17C0  18B3               	btfsc	_Buz1^(0+128),1
 14102  17C1  2FD8               	goto	l110
 14103                           
 14104                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14105  17C2  14B3               	bsf	_Buz1^(0+128),1
 14106                           
 14107                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14108  17C3  01B4               	clrf	(_Buz1^(0+128)+1)
 14109  17C4  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 14110                           
 14111                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14112  17C5  0020               	movlb	0	; select bank0
 14113  17C6  082C               	movf	setBuz@count,w
 14114  17C7  00AB               	movwf	??_setBuz
 14115  17C8  082B               	movf	??_setBuz,w
 14116  17C9  0021               	movlb	1	; select bank1
 14117  17CA  00B6               	movwf	(_Buz1^(0+128)+3)
 14118                           
 14119                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14120  17CB  0020               	movlb	0	; select bank0
 14121  17CC  082A               	movf	setBuz@time+1,w
 14122  17CD  0021               	movlb	1	; select bank1
 14123  17CE  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 14124  17CF  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 14125  17D0  0020               	movlb	0	; select bank0
 14126  17D1  0829               	movf	setBuz@time,w
 14127  17D2  0021               	movlb	1	; select bank1
 14128  17D3  01B9               	clrf	(_Buz1^(0+128)+6)
 14129  17D4  07B9               	addwf	(_Buz1^(0+128)+6),f
 14130                           
 14131                           ;Buzzer_B1.c: 30: RB3 = 1;
 14132  17D5  0020               	movlb	0	; select bank0
 14133  17D6  158D               	bsf	13,3	;volatile
 14134                           
 14135                           ;Buzzer_B1.c: 31: } else {
 14136  17D7  0008               	return
 14137  17D8                     l110:	
 14138                           
 14139                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14140  17D8  19B3               	btfsc	_Buz1^(0+128),3
 14141  17D9  2FEC               	goto	l112
 14142                           
 14143                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14144  17DA  15B3               	bsf	_Buz1^(0+128),3
 14145                           
 14146                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14147  17DB  0020               	movlb	0	; select bank0
 14148  17DC  082C               	movf	setBuz@count,w
 14149  17DD  00AB               	movwf	??_setBuz
 14150  17DE  082B               	movf	??_setBuz,w
 14151  17DF  0021               	movlb	1	; select bank1
 14152  17E0  00B7               	movwf	(_Buz1^(0+128)+4)
 14153                           
 14154                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14155  17E1  0020               	movlb	0	; select bank0
 14156  17E2  082A               	movf	setBuz@time+1,w
 14157  17E3  0021               	movlb	1	; select bank1
 14158  17E4  01BC               	clrf	((_Buz1+1)^(0+128)+8)
 14159  17E5  07BC               	addwf	((_Buz1+1)^(0+128)+8),f
 14160  17E6  0020               	movlb	0	; select bank0
 14161  17E7  0829               	movf	setBuz@time,w
 14162  17E8  0021               	movlb	1	; select bank1
 14163  17E9  01BB               	clrf	(_Buz1^(0+128)+8)
 14164  17EA  07BB               	addwf	(_Buz1^(0+128)+8),f
 14165                           
 14166                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14167  17EB  0008               	return
 14168  17EC                     l112:	
 14169  17EC  1A33               	btfsc	_Buz1^(0+128),4
 14170  17ED  0008               	return
 14171                           
 14172                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14173  17EE  1633               	bsf	_Buz1^(0+128),4
 14174                           
 14175                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14176  17EF  0020               	movlb	0	; select bank0
 14177  17F0  082C               	movf	setBuz@count,w
 14178  17F1  00AB               	movwf	??_setBuz
 14179  17F2  082B               	movf	??_setBuz,w
 14180  17F3  0021               	movlb	1	; select bank1
 14181  17F4  00B8               	movwf	(_Buz1^(0+128)+5)
 14182                           
 14183                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14184  17F5  0020               	movlb	0	; select bank0
 14185  17F6  082A               	movf	setBuz@time+1,w
 14186  17F7  0021               	movlb	1	; select bank1
 14187  17F8  01BE               	clrf	((_Buz1+1)^(0+128)+10)
 14188  17F9  07BE               	addwf	((_Buz1+1)^(0+128)+10),f
 14189  17FA  0020               	movlb	0	; select bank0
 14190  17FB  0829               	movf	setBuz@time,w
 14191  17FC  0021               	movlb	1	; select bank1
 14192  17FD  01BD               	clrf	(_Buz1^(0+128)+10)
 14193  17FE  07BD               	addwf	(_Buz1^(0+128)+10),f
 14194  17FF  0008               	return
 14195  1800                     __end_of_setBuz:	
 14196                           
 14197                           	psect	text87
 14198  16FD                     __ptext87:	
 14199 ;; *************** function ___awdiv *****************
 14200 ;; Defined at:
 14201 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14202 ;; Parameters:    Size  Location     Type
 14203 ;;  divisor         2    0[BANK0 ] int 
 14204 ;;  dividend        2    2[BANK0 ] int 
 14205 ;; Auto vars:     Size  Location     Type
 14206 ;;  quotient        2    7[BANK0 ] int 
 14207 ;;  sign            1    6[BANK0 ] unsigned char 
 14208 ;;  counter         1    5[BANK0 ] unsigned char 
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  2    0[BANK0 ] int 
 14211 ;; Registers used:
 14212 ;;		wreg, status,2, status,0
 14213 ;; Tracked objects:
 14214 ;;		On entry : 0/0
 14215 ;;		On exit  : 0/0
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14218 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;Total ram usage:        9 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:    5
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		_setBuz
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function ___awdiv
 14234  16FD                     ___awdiv:	
 14235                           
 14236                           ;incstack = 0
 14237                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14238  16FD  0020               	movlb	0	; select bank0
 14239  16FE  01A6               	clrf	___awdiv@sign
 14240  16FF  1FA1               	btfss	___awdiv@divisor+1,7
 14241  1700  2F08               	goto	l8088
 14242  1701  09A0               	comf	___awdiv@divisor,f
 14243  1702  09A1               	comf	___awdiv@divisor+1,f
 14244  1703  0AA0               	incf	___awdiv@divisor,f
 14245  1704  1903               	skipnz
 14246  1705  0AA1               	incf	___awdiv@divisor+1,f
 14247  1706  01A6               	clrf	___awdiv@sign
 14248  1707  0AA6               	incf	___awdiv@sign,f
 14249  1708                     l8088:	
 14250  1708  1FA3               	btfss	___awdiv@dividend+1,7
 14251  1709  2F13               	goto	l8094
 14252  170A  09A2               	comf	___awdiv@dividend,f
 14253  170B  09A3               	comf	___awdiv@dividend+1,f
 14254  170C  0AA2               	incf	___awdiv@dividend,f
 14255  170D  1903               	skipnz
 14256  170E  0AA3               	incf	___awdiv@dividend+1,f
 14257  170F  3001               	movlw	1
 14258  1710  00A4               	movwf	??___awdiv
 14259  1711  0824               	movf	??___awdiv,w
 14260  1712  06A6               	xorwf	___awdiv@sign,f
 14261  1713                     l8094:	
 14262  1713  01A7               	clrf	___awdiv@quotient
 14263  1714  01A8               	clrf	___awdiv@quotient+1
 14264  1715  0821               	movf	___awdiv@divisor+1,w
 14265  1716  0420               	iorwf	___awdiv@divisor,w
 14266  1717  1903               	skipnz
 14267  1718  2F42               	goto	l8116
 14268  1719  01A5               	clrf	___awdiv@counter
 14269  171A  0AA5               	incf	___awdiv@counter,f
 14270  171B                     l8104:	
 14271  171B  1BA1               	btfsc	___awdiv@divisor+1,7
 14272  171C  2F27               	goto	l8106
 14273  171D  3001               	movlw	1
 14274  171E                     u8065:	
 14275  171E  35A0               	lslf	___awdiv@divisor,f
 14276  171F  0DA1               	rlf	___awdiv@divisor+1,f
 14277  1720  0B89               	decfsz	9,f
 14278  1721  2F1E               	goto	u8065
 14279  1722  3001               	movlw	1
 14280  1723  00A4               	movwf	??___awdiv
 14281  1724  0824               	movf	??___awdiv,w
 14282  1725  07A5               	addwf	___awdiv@counter,f
 14283  1726  2F1B               	goto	l8104
 14284  1727                     l8106:	
 14285  1727  3001               	movlw	1
 14286  1728                     u8085:	
 14287  1728  35A7               	lslf	___awdiv@quotient,f
 14288  1729  0DA8               	rlf	___awdiv@quotient+1,f
 14289  172A  0B89               	decfsz	9,f
 14290  172B  2F28               	goto	u8085
 14291  172C  0821               	movf	___awdiv@divisor+1,w
 14292  172D  0223               	subwf	___awdiv@dividend+1,w
 14293  172E  1D03               	skipz
 14294  172F  2F32               	goto	u8095
 14295  1730  0820               	movf	___awdiv@divisor,w
 14296  1731  0222               	subwf	___awdiv@dividend,w
 14297  1732                     u8095:	
 14298  1732  1C03               	skipc
 14299  1733  2F39               	goto	l8112
 14300  1734  0820               	movf	___awdiv@divisor,w
 14301  1735  02A2               	subwf	___awdiv@dividend,f
 14302  1736  0821               	movf	___awdiv@divisor+1,w
 14303  1737  3BA3               	subwfb	___awdiv@dividend+1,f
 14304  1738  1427               	bsf	___awdiv@quotient,0
 14305  1739                     l8112:	
 14306  1739  3001               	movlw	1
 14307  173A                     u8105:	
 14308  173A  36A1               	lsrf	___awdiv@divisor+1,f
 14309  173B  0CA0               	rrf	___awdiv@divisor,f
 14310  173C  0B89               	decfsz	9,f
 14311  173D  2F3A               	goto	u8105
 14312  173E  3001               	movlw	1
 14313  173F  02A5               	subwf	___awdiv@counter,f
 14314  1740  1D03               	btfss	3,2
 14315  1741  2F27               	goto	l8106
 14316  1742                     l8116:	
 14317  1742  0826               	movf	___awdiv@sign,w
 14318  1743  1903               	btfsc	3,2
 14319  1744  2F4A               	goto	l8120
 14320  1745  09A7               	comf	___awdiv@quotient,f
 14321  1746  09A8               	comf	___awdiv@quotient+1,f
 14322  1747  0AA7               	incf	___awdiv@quotient,f
 14323  1748  1903               	skipnz
 14324  1749  0AA8               	incf	___awdiv@quotient+1,f
 14325  174A                     l8120:	
 14326  174A  0828               	movf	___awdiv@quotient+1,w
 14327  174B  01A1               	clrf	?___awdiv+1
 14328  174C  07A1               	addwf	?___awdiv+1,f
 14329  174D  0827               	movf	___awdiv@quotient,w
 14330  174E  01A0               	clrf	?___awdiv
 14331  174F  07A0               	addwf	?___awdiv,f
 14332  1750  0008               	return
 14333  1751                     __end_of___awdiv:	
 14334                           
 14335                           	psect	text88
 14336  1EAC                     __ptext88:	
 14337 ;; *************** function _DelayOff_Initialization *****************
 14338 ;; Defined at:
 14339 ;;		line 26 in file "../src/DelayOff_B1.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;		None
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;		None
 14344 ;; Return value:  Size  Location     Type
 14345 ;;		None               void
 14346 ;; Registers used:
 14347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14348 ;; Tracked objects:
 14349 ;;		On entry : 0/0
 14350 ;;		On exit  : 0/0
 14351 ;;		Unchanged: 0/0
 14352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;Total ram usage:        0 bytes
 14358 ;; Hardware stack levels used:    1
 14359 ;; Hardware stack levels required when called:    7
 14360 ;; This function calls:
 14361 ;;		_DlyOff_Initialization
 14362 ;; This function is called by:
 14363 ;;		_main
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           
 14368                           ;psect for function _DelayOff_Initialization
 14369  1EAC                     _DelayOff_Initialization:	
 14370                           
 14371                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14372                           
 14373                           ;incstack = 0
 14374                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14375  1EAC  3001               	movlw	1
 14376  1EAD  319E  2674  319E   	fcall	_DlyOff_Initialization
 14377                           
 14378                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14379  1EB0  3002               	movlw	2
 14380  1EB1  319E  2674  319E   	fcall	_DlyOff_Initialization
 14381                           
 14382                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 14383  1EB4  3003               	movlw	3
 14384  1EB5  319E  2674         	fcall	_DlyOff_Initialization
 14385  1EB7  0008               	return
 14386  1EB8                     __end_of_DelayOff_Initialization:	
 14387                           
 14388                           	psect	text89
 14389  1E74                     __ptext89:	
 14390 ;; *************** function _DlyOff_Initialization *****************
 14391 ;; Defined at:
 14392 ;;		line 56 in file "../src/DelayOff_B1.c"
 14393 ;; Parameters:    Size  Location     Type
 14394 ;;  sw              1    wreg     unsigned char 
 14395 ;; Auto vars:     Size  Location     Type
 14396 ;;  sw              1    2[BANK0 ] unsigned char 
 14397 ;; Return value:  Size  Location     Type
 14398 ;;		None               void
 14399 ;; Registers used:
 14400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14401 ;; Tracked objects:
 14402 ;;		On entry : 0/0
 14403 ;;		On exit  : 0/0
 14404 ;;		Unchanged: 0/0
 14405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;Total ram usage:        1 bytes
 14411 ;; Hardware stack levels used:    1
 14412 ;; Hardware stack levels required when called:    6
 14413 ;; This function calls:
 14414 ;;		_DelayOffPointSelect
 14415 ;; This function is called by:
 14416 ;;		_DelayOff_Initialization
 14417 ;; This function uses a non-reentrant model
 14418 ;;
 14419                           
 14420                           
 14421                           ;psect for function _DlyOff_Initialization
 14422  1E74                     _DlyOff_Initialization:	
 14423                           
 14424                           ;incstack = 0
 14425                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14426                           ;DlyOff_Initialization@sw stored from wreg
 14427  1E74  0020               	movlb	0	; select bank0
 14428  1E75  00A2               	movwf	DlyOff_Initialization@sw
 14429                           
 14430                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14431  1E76  0822               	movf	DlyOff_Initialization@sw,w
 14432  1E77  3191  21BD         	fcall	_DelayOffPointSelect
 14433                           
 14434                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14435  1E79  0872               	movf	_DelayOff,w
 14436  1E7A  0086               	movwf	6
 14437  1E7B  0187               	clrf	7
 14438  1E7C  1401               	bsf	1,0
 14439  1E7D  0008               	return
 14440  1E7E                     __end_of_DlyOff_Initialization:	
 14441                           
 14442                           	psect	text90
 14443  11BD                     __ptext90:	
 14444 ;; *************** function _DelayOffPointSelect *****************
 14445 ;; Defined at:
 14446 ;;		line 7 in file "../src/DelayOff_B1.c"
 14447 ;; Parameters:    Size  Location     Type
 14448 ;;  sw              1    wreg     unsigned char 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  sw              1    1[BANK0 ] unsigned char 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;		None               void
 14453 ;; Registers used:
 14454 ;;		wreg
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;Total ram usage:        2 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    5
 14467 ;; This function calls:
 14468 ;;		Nothing
 14469 ;; This function is called by:
 14470 ;;		_DlyOff_Initialization
 14471 ;;		_DlyOff_Main
 14472 ;;		_setDelayOff_GO
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           
 14477                           ;psect for function _DelayOffPointSelect
 14478  11BD                     _DelayOffPointSelect:	
 14479                           
 14480                           ;incstack = 0
 14481                           ; Regs used in _DelayOffPointSelect: [wreg]
 14482                           ;DelayOffPointSelect@sw stored from wreg
 14483  11BD  0020               	movlb	0	; select bank0
 14484  11BE  00A1               	movwf	DelayOffPointSelect@sw
 14485                           
 14486                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14487  11BF  0821               	movf	DelayOffPointSelect@sw,w
 14488  11C0  3A01               	xorlw	1
 14489  11C1  1D03               	skipz
 14490  11C2  29C8               	goto	l8012
 14491                           
 14492                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14493  11C3  30E5               	movlw	_DlySw1& (0+255)
 14494  11C4  00A0               	movwf	??_DelayOffPointSelect
 14495  11C5  0820               	movf	??_DelayOffPointSelect,w
 14496  11C6  00F2               	movwf	_DelayOff
 14497                           
 14498                           ;DelayOff_B1.c: 11: }
 14499  11C7  0008               	return
 14500  11C8                     l8012:	
 14501                           
 14502                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14503  11C8  0821               	movf	DelayOffPointSelect@sw,w
 14504  11C9  3A02               	xorlw	2
 14505  11CA  1D03               	skipz
 14506  11CB  29D1               	goto	l8016
 14507                           
 14508                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14509  11CC  30E7               	movlw	_DlySw2& (0+255)
 14510  11CD  00A0               	movwf	??_DelayOffPointSelect
 14511  11CE  0820               	movf	??_DelayOffPointSelect,w
 14512  11CF  00F2               	movwf	_DelayOff
 14513                           
 14514                           ;DelayOff_B1.c: 16: }
 14515  11D0  0008               	return
 14516  11D1                     l8016:	
 14517                           
 14518                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 14519  11D1  0821               	movf	DelayOffPointSelect@sw,w
 14520  11D2  3A03               	xorlw	3
 14521  11D3  1D03               	skipz
 14522  11D4  0008               	return
 14523                           
 14524                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 14525  11D5  30E9               	movlw	_DlySw3& (0+255)
 14526  11D6  00A0               	movwf	??_DelayOffPointSelect
 14527  11D7  0820               	movf	??_DelayOffPointSelect,w
 14528  11D8  00F2               	movwf	_DelayOff
 14529  11D9  0008               	return
 14530  11DA                     __end_of_DelayOffPointSelect:	
 14531                           
 14532                           	psect	text91
 14533  10DE                     __ptext91:	
 14534 ;; *************** function _CC2500_PowerOnInitial *****************
 14535 ;; Defined at:
 14536 ;;		line 122 in file "../src/CC2500_B1.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;		None
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;		None
 14541 ;; Return value:  Size  Location     Type
 14542 ;;		None               void
 14543 ;; Registers used:
 14544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;Total ram usage:        0 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; Hardware stack levels required when called:    8
 14557 ;; This function calls:
 14558 ;;		_CC2500_ClearRXFIFO
 14559 ;;		_CC2500_ClearTXFIFO
 14560 ;;		_CC2500_FrequencyCabr
 14561 ;;		_CC2500_InitPATable
 14562 ;;		_CC2500_InitSetREG
 14563 ;;		_CC2500_PowerRST
 14564 ;;		_CC2500_SIDLEMode
 14565 ;; This function is called by:
 14566 ;;		_main
 14567 ;; This function uses a non-reentrant model
 14568 ;;
 14569                           
 14570                           
 14571                           ;psect for function _CC2500_PowerOnInitial
 14572  10DE                     _CC2500_PowerOnInitial:	
 14573                           
 14574                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14575                           
 14576                           ;incstack = 0
 14577                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14578  10DE  3195  259B  3190   	fcall	_CC2500_PowerRST
 14579                           
 14580                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14581  10E1  3193  2371  3190   	fcall	_CC2500_InitSetREG
 14582                           
 14583                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14584  10E4  3191  21F7  3190   	fcall	_CC2500_InitPATable
 14585                           
 14586                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14587  10E7  319E  263D  3190   	fcall	_CC2500_ClearTXFIFO
 14588                           
 14589                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14590  10EA  319E  2639  3190   	fcall	_CC2500_ClearRXFIFO
 14591                           
 14592                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14593  10ED  319E  26A0  3190   	fcall	_CC2500_FrequencyCabr
 14594                           
 14595                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14596  10F0  319E  2641         	fcall	_CC2500_SIDLEMode
 14597  10F2  0008               	return
 14598  10F3                     __end_of_CC2500_PowerOnInitial:	
 14599                           
 14600                           	psect	text92
 14601  1E41                     __ptext92:	
 14602 ;; *************** function _CC2500_SIDLEMode *****************
 14603 ;; Defined at:
 14604 ;;		line 212 in file "../src/CC2500_B1.c"
 14605 ;; Parameters:    Size  Location     Type
 14606 ;;		None
 14607 ;; Auto vars:     Size  Location     Type
 14608 ;;		None
 14609 ;; Return value:  Size  Location     Type
 14610 ;;		None               void
 14611 ;; Registers used:
 14612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14613 ;; Tracked objects:
 14614 ;;		On entry : 0/0
 14615 ;;		On exit  : 0/0
 14616 ;;		Unchanged: 0/0
 14617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;Total ram usage:        0 bytes
 14623 ;; Hardware stack levels used:    1
 14624 ;; Hardware stack levels required when called:    7
 14625 ;; This function calls:
 14626 ;;		_CC2500_WriteCommand
 14627 ;; This function is called by:
 14628 ;;		_CC2500_PowerOnInitial
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           
 14633                           ;psect for function _CC2500_SIDLEMode
 14634  1E41                     _CC2500_SIDLEMode:	
 14635                           
 14636                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14637                           
 14638                           ;incstack = 0
 14639                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14640  1E41  3036               	movlw	54
 14641  1E42  3191  2138         	fcall	_CC2500_WriteCommand
 14642  1E44  0008               	return
 14643  1E45                     __end_of_CC2500_SIDLEMode:	
 14644                           
 14645                           	psect	text93
 14646  159B                     __ptext93:	
 14647 ;; *************** function _CC2500_PowerRST *****************
 14648 ;; Defined at:
 14649 ;;		line 135 in file "../src/CC2500_B1.c"
 14650 ;; Parameters:    Size  Location     Type
 14651 ;;		None
 14652 ;; Auto vars:     Size  Location     Type
 14653 ;;		None
 14654 ;; Return value:  Size  Location     Type
 14655 ;;		None               void
 14656 ;; Registers used:
 14657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14658 ;; Tracked objects:
 14659 ;;		On entry : 0/0
 14660 ;;		On exit  : 0/0
 14661 ;;		Unchanged: 0/0
 14662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;Total ram usage:        1 bytes
 14668 ;; Hardware stack levels used:    1
 14669 ;; Hardware stack levels required when called:    6
 14670 ;; This function calls:
 14671 ;;		_CC2500_WriteByte
 14672 ;;		_DelayTime_1us
 14673 ;;		_Timeout_Counter
 14674 ;;		_set_TimeoutCleared
 14675 ;; This function is called by:
 14676 ;;		_CC2500_PowerOnInitial
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           
 14681                           ;psect for function _CC2500_PowerRST
 14682  159B                     _CC2500_PowerRST:	
 14683                           
 14684                           ;CC2500_B1.c: 136: RC1 = 0;
 14685                           
 14686                           ;incstack = 0
 14687                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14688  159B  0020               	movlb	0	; select bank0
 14689  159C  108E               	bcf	14,1	;volatile
 14690                           
 14691                           ;CC2500_B1.c: 137: RC0 = 0;
 14692  159D  100E               	bcf	14,0	;volatile
 14693                           
 14694                           ;CC2500_B1.c: 138: RC4 = 1;
 14695  159E  160E               	bsf	14,4	;volatile
 14696                           
 14697                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14698  159F  300A               	movlw	10
 14699  15A0  00A0               	movwf	DelayTime_1us@count
 14700  15A1  3000               	movlw	0
 14701  15A2  00A1               	movwf	DelayTime_1us@count+1
 14702  15A3  3192  22FC  3195   	fcall	_DelayTime_1us
 14703                           
 14704                           ;CC2500_B1.c: 140: RC4 = 0;
 14705  15A6  0020               	movlb	0	; select bank0
 14706  15A7  120E               	bcf	14,4	;volatile
 14707                           
 14708                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14709  15A8  300A               	movlw	10
 14710  15A9  00A0               	movwf	DelayTime_1us@count
 14711  15AA  3000               	movlw	0
 14712  15AB  00A1               	movwf	DelayTime_1us@count+1
 14713  15AC  3192  22FC  3195   	fcall	_DelayTime_1us
 14714                           
 14715                           ;CC2500_B1.c: 142: RC4 = 1;
 14716  15AF  0020               	movlb	0	; select bank0
 14717  15B0  160E               	bsf	14,4	;volatile
 14718                           
 14719                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14720  15B1  3028               	movlw	40
 14721  15B2  00A0               	movwf	DelayTime_1us@count
 14722  15B3  3000               	movlw	0
 14723  15B4  00A1               	movwf	DelayTime_1us@count+1
 14724  15B5  3192  22FC  3195   	fcall	_DelayTime_1us
 14725                           
 14726                           ;CC2500_B1.c: 144: RC4 = 0;
 14727  15B8  0020               	movlb	0	; select bank0
 14728  15B9  120E               	bcf	14,4	;volatile
 14729                           
 14730                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14731  15BA  3030               	movlw	48
 14732  15BB  00A6               	movwf	??_CC2500_PowerRST
 14733  15BC  0826               	movf	??_CC2500_PowerRST,w
 14734  15BD  00F5               	movwf	_SPI0Buffer
 14735                           
 14736                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14737  15BE  2DC2               	goto	l9000
 14738  15BF                     l8998:	
 14739                           
 14740                           ;CC2500_B1.c: 147: Timeout_Counter();
 14741  15BF  3190  20C9  3195   	fcall	_Timeout_Counter
 14742  15C2                     l9000:	
 14743  15C2  0020               	movlb	0	; select bank0
 14744  15C3  1D0E               	btfss	14,2	;volatile
 14745  15C4  2DC8               	goto	l9004
 14746  15C5  0021               	movlb	1	; select bank1
 14747  15C6  1D30               	btfss	(_myMain^(0+128)+16),2
 14748  15C7  2DBF               	goto	l8998
 14749  15C8                     l9004:	
 14750                           
 14751                           ;CC2500_B1.c: 148: };
 14752                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14753  15C8  3190  2066  3195   	fcall	_set_TimeoutCleared
 14754                           
 14755                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14756  15CB  3190  20B5  3195   	fcall	_CC2500_WriteByte
 14757                           
 14758                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14759  15CE  2DD2               	goto	l9010
 14760  15CF                     l9008:	
 14761                           
 14762                           ;CC2500_B1.c: 152: Timeout_Counter();
 14763  15CF  3190  20C9  3195   	fcall	_Timeout_Counter
 14764  15D2                     l9010:	
 14765  15D2  0020               	movlb	0	; select bank0
 14766  15D3  1D0E               	btfss	14,2	;volatile
 14767  15D4  2DD8               	goto	l9014
 14768  15D5  0021               	movlb	1	; select bank1
 14769  15D6  1D30               	btfss	(_myMain^(0+128)+16),2
 14770  15D7  2DCF               	goto	l9008
 14771  15D8                     l9014:	
 14772                           
 14773                           ;CC2500_B1.c: 153: };
 14774                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14775  15D8  3190  2066         	fcall	_set_TimeoutCleared
 14776                           
 14777                           ;CC2500_B1.c: 155: RC0 = 0;
 14778  15DA  0020               	movlb	0	; select bank0
 14779  15DB  100E               	bcf	14,0	;volatile
 14780                           
 14781                           ;CC2500_B1.c: 156: RC4 = 1;
 14782  15DC  160E               	bsf	14,4	;volatile
 14783  15DD  0008               	return
 14784  15DE                     __end_of_CC2500_PowerRST:	
 14785                           
 14786                           	psect	text94
 14787  1371                     __ptext94:	
 14788 ;; *************** function _CC2500_InitSetREG *****************
 14789 ;; Defined at:
 14790 ;;		line 162 in file "../src/CC2500_B1.c"
 14791 ;; Parameters:    Size  Location     Type
 14792 ;;		None
 14793 ;; Auto vars:     Size  Location     Type
 14794 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14795 ;;  temp2           1    7[BANK0 ] unsigned char 
 14796 ;;  temp1           1    6[BANK0 ] unsigned char 
 14797 ;; Return value:  Size  Location     Type
 14798 ;;		None               void
 14799 ;; Registers used:
 14800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14801 ;; Tracked objects:
 14802 ;;		On entry : 0/0
 14803 ;;		On exit  : 0/0
 14804 ;;		Unchanged: 0/0
 14805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14810 ;;Total ram usage:        4 bytes
 14811 ;; Hardware stack levels used:    1
 14812 ;; Hardware stack levels required when called:    7
 14813 ;; This function calls:
 14814 ;;		_CC2500_WriteREG
 14815 ;; This function is called by:
 14816 ;;		_CC2500_PowerOnInitial
 14817 ;; This function uses a non-reentrant model
 14818 ;;
 14819                           
 14820                           
 14821                           ;psect for function _CC2500_InitSetREG
 14822  1371                     _CC2500_InitSetREG:	
 14823                           
 14824                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14825                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14826                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14827                           
 14828                           ;incstack = 0
 14829                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14830  1371  0020               	movlb	0	; select bank0
 14831  1372  01A8               	clrf	CC2500_InitSetREG@loop_c
 14832  1373                     L10:	
 14833  1373  302F               	movlw	47
 14834  1374  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14835  1375  1803               	btfsc	3,0
 14836  1376  0008               	return
 14837                           
 14838                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14839  1377  0828               	movf	CC2500_InitSetREG@loop_c,w
 14840  1378  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14841  1379  0084               	movwf	4
 14842  137A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14843  137B  1803               	skipnc
 14844  137C  3E01               	addlw	1
 14845  137D  0085               	movwf	5
 14846  137E  0800               	movf	0,w	;code access
 14847  137F  00A5               	movwf	??_CC2500_InitSetREG
 14848  1380  0825               	movf	??_CC2500_InitSetREG,w
 14849  1381  00A6               	movwf	CC2500_InitSetREG@temp1
 14850                           
 14851                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14852  1382  0828               	movf	CC2500_InitSetREG@loop_c,w
 14853  1383  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14854  1384  0084               	movwf	4
 14855  1385  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14856  1386  1803               	skipnc
 14857  1387  3E01               	addlw	1
 14858  1388  0085               	movwf	5
 14859  1389  0800               	movf	0,w	;code access
 14860  138A  00A5               	movwf	??_CC2500_InitSetREG
 14861  138B  0825               	movf	??_CC2500_InitSetREG,w
 14862  138C  00A7               	movwf	CC2500_InitSetREG@temp2
 14863                           
 14864                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14865  138D  0827               	movf	CC2500_InitSetREG@temp2,w
 14866  138E  00A5               	movwf	??_CC2500_InitSetREG
 14867  138F  0825               	movf	??_CC2500_InitSetREG,w
 14868  1390  00A2               	movwf	CC2500_WriteREG@value
 14869  1391  0826               	movf	CC2500_InitSetREG@temp1,w
 14870  1392  3192  2275  3193   	fcall	_CC2500_WriteREG
 14871  1395  3001               	movlw	1
 14872  1396  0020               	movlb	0	; select bank0
 14873  1397  00A5               	movwf	??_CC2500_InitSetREG
 14874  1398  0825               	movf	??_CC2500_InitSetREG,w
 14875  1399  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14876  139A  2B73               	goto	L10
 14877  139B                     __end_of_CC2500_InitSetREG:	
 14878                           
 14879                           	psect	text95
 14880  11F7                     __ptext95:	
 14881 ;; *************** function _CC2500_InitPATable *****************
 14882 ;; Defined at:
 14883 ;;		line 177 in file "../src/CC2500_B1.c"
 14884 ;; Parameters:    Size  Location     Type
 14885 ;;		None
 14886 ;; Auto vars:     Size  Location     Type
 14887 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14888 ;;  temp            1    6[BANK0 ] unsigned char 
 14889 ;; Return value:  Size  Location     Type
 14890 ;;		None               void
 14891 ;; Registers used:
 14892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14893 ;; Tracked objects:
 14894 ;;		On entry : 0/0
 14895 ;;		On exit  : 0/0
 14896 ;;		Unchanged: 0/0
 14897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;Total ram usage:        3 bytes
 14903 ;; Hardware stack levels used:    1
 14904 ;; Hardware stack levels required when called:    7
 14905 ;; This function calls:
 14906 ;;		_CC2500_WriteREG
 14907 ;; This function is called by:
 14908 ;;		_CC2500_PowerOnInitial
 14909 ;; This function uses a non-reentrant model
 14910 ;;
 14911                           
 14912                           
 14913                           ;psect for function _CC2500_InitPATable
 14914  11F7                     _CC2500_InitPATable:	
 14915                           
 14916                           ;CC2500_B1.c: 178: unsigned char loop_d;
 14917                           ;CC2500_B1.c: 179: unsigned char temp;
 14918                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 14919                           
 14920                           ;incstack = 0
 14921                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14922  11F7  0020               	movlb	0	; select bank0
 14923  11F8  01A7               	clrf	CC2500_InitPATable@loop_d
 14924  11F9                     L11:	
 14925  11F9  3008               	movlw	8
 14926  11FA  0227               	subwf	CC2500_InitPATable@loop_d,w
 14927  11FB  1803               	btfsc	3,0
 14928  11FC  0008               	return
 14929                           
 14930                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 14931  11FD  0827               	movf	CC2500_InitPATable@loop_d,w
 14932  11FE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14933  11FF  0084               	movwf	4
 14934  1200  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14935  1201  1803               	skipnc
 14936  1202  3E01               	addlw	1
 14937  1203  0085               	movwf	5
 14938  1204  0800               	movf	0,w	;code access
 14939  1205  00A5               	movwf	??_CC2500_InitPATable
 14940  1206  0825               	movf	??_CC2500_InitPATable,w
 14941  1207  00A6               	movwf	CC2500_InitPATable@temp
 14942                           
 14943                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 14944  1208  0826               	movf	CC2500_InitPATable@temp,w
 14945  1209  00A5               	movwf	??_CC2500_InitPATable
 14946  120A  0825               	movf	??_CC2500_InitPATable,w
 14947  120B  00A2               	movwf	CC2500_WriteREG@value
 14948  120C  303E               	movlw	62
 14949  120D  3192  2275  3191   	fcall	_CC2500_WriteREG
 14950  1210  3001               	movlw	1
 14951  1211  0020               	movlb	0	; select bank0
 14952  1212  00A5               	movwf	??_CC2500_InitPATable
 14953  1213  0825               	movf	??_CC2500_InitPATable,w
 14954  1214  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14955  1215  29F9               	goto	L11
 14956  1216                     __end_of_CC2500_InitPATable:	
 14957                           
 14958                           	psect	text96
 14959  1275                     __ptext96:	
 14960 ;; *************** function _CC2500_WriteREG *****************
 14961 ;; Defined at:
 14962 ;;		line 254 in file "../src/CC2500_B1.c"
 14963 ;; Parameters:    Size  Location     Type
 14964 ;;  w_addr          1    wreg     unsigned char 
 14965 ;;  value           1    2[BANK0 ] unsigned char 
 14966 ;; Auto vars:     Size  Location     Type
 14967 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14968 ;; Return value:  Size  Location     Type
 14969 ;;		None               void
 14970 ;; Registers used:
 14971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14972 ;; Tracked objects:
 14973 ;;		On entry : 0/0
 14974 ;;		On exit  : 0/0
 14975 ;;		Unchanged: 0/0
 14976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14977 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;Total ram usage:        3 bytes
 14982 ;; Hardware stack levels used:    1
 14983 ;; Hardware stack levels required when called:    6
 14984 ;; This function calls:
 14985 ;;		_CC2500_WriteByte
 14986 ;;		_Timeout_Counter
 14987 ;;		_set_TimeoutCleared
 14988 ;; This function is called by:
 14989 ;;		_CC2500_InitSetREG
 14990 ;;		_CC2500_InitPATable
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           
 14995                           ;psect for function _CC2500_WriteREG
 14996  1275                     _CC2500_WriteREG:	
 14997                           
 14998                           ;incstack = 0
 14999                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15000                           ;CC2500_WriteREG@w_addr stored from wreg
 15001  1275  0020               	movlb	0	; select bank0
 15002  1276  00A4               	movwf	CC2500_WriteREG@w_addr
 15003                           
 15004                           ;CC2500_B1.c: 255: RC4 = 0;
 15005  1277  120E               	bcf	14,4	;volatile
 15006                           
 15007                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 15008  1278  0824               	movf	CC2500_WriteREG@w_addr,w
 15009  1279  00A3               	movwf	??_CC2500_WriteREG
 15010  127A  0823               	movf	??_CC2500_WriteREG,w
 15011  127B  00F5               	movwf	_SPI0Buffer
 15012                           
 15013                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 15014  127C  2A80               	goto	l8702
 15015  127D                     l8700:	
 15016                           
 15017                           ;CC2500_B1.c: 258: Timeout_Counter();
 15018  127D  3190  20C9  3192   	fcall	_Timeout_Counter
 15019  1280                     l8702:	
 15020  1280  0020               	movlb	0	; select bank0
 15021  1281  1D0E               	btfss	14,2	;volatile
 15022  1282  2A86               	goto	l8706
 15023  1283  0021               	movlb	1	; select bank1
 15024  1284  1D30               	btfss	(_myMain^(0+128)+16),2
 15025  1285  2A7D               	goto	l8700
 15026  1286                     l8706:	
 15027                           
 15028                           ;CC2500_B1.c: 259: };
 15029                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15030  1286  3190  2066  3192   	fcall	_set_TimeoutCleared
 15031                           
 15032                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15033  1289  3190  20B5  3192   	fcall	_CC2500_WriteByte
 15034                           
 15035                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15036  128C  0020               	movlb	0	; select bank0
 15037  128D  0822               	movf	CC2500_WriteREG@value,w
 15038  128E  00A3               	movwf	??_CC2500_WriteREG
 15039  128F  0823               	movf	??_CC2500_WriteREG,w
 15040  1290  00F5               	movwf	_SPI0Buffer
 15041                           
 15042                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15043  1291  3190  20B5         	fcall	_CC2500_WriteByte
 15044                           
 15045                           ;CC2500_B1.c: 265: RC4 = 1;
 15046  1293  0020               	movlb	0	; select bank0
 15047  1294  160E               	bsf	14,4	;volatile
 15048  1295  0008               	return
 15049  1296                     __end_of_CC2500_WriteREG:	
 15050                           
 15051                           	psect	text97
 15052  1EA0                     __ptext97:	
 15053 ;; *************** function _CC2500_FrequencyCabr *****************
 15054 ;; Defined at:
 15055 ;;		line 204 in file "../src/CC2500_B1.c"
 15056 ;; Parameters:    Size  Location     Type
 15057 ;;		None
 15058 ;; Auto vars:     Size  Location     Type
 15059 ;;		None
 15060 ;; Return value:  Size  Location     Type
 15061 ;;		None               void
 15062 ;; Registers used:
 15063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 0/0
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;Total ram usage:        0 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; Hardware stack levels required when called:    7
 15076 ;; This function calls:
 15077 ;;		_CC2500_WriteCommand
 15078 ;;		_DelayTime_1us
 15079 ;; This function is called by:
 15080 ;;		_CC2500_PowerOnInitial
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           
 15085                           ;psect for function _CC2500_FrequencyCabr
 15086  1EA0                     _CC2500_FrequencyCabr:	
 15087                           
 15088                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15089                           
 15090                           ;incstack = 0
 15091                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15092  1EA0  3033               	movlw	51
 15093  1EA1  3191  2138  319E   	fcall	_CC2500_WriteCommand
 15094                           
 15095                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15096  1EA4  30E8               	movlw	232
 15097  1EA5  0020               	movlb	0	; select bank0
 15098  1EA6  00A0               	movwf	DelayTime_1us@count
 15099  1EA7  3003               	movlw	3
 15100  1EA8  00A1               	movwf	DelayTime_1us@count+1
 15101  1EA9  3192  22FC         	fcall	_DelayTime_1us
 15102  1EAB  0008               	return
 15103  1EAC                     __end_of_CC2500_FrequencyCabr:	
 15104                           
 15105                           	psect	text98
 15106  12FC                     __ptext98:	
 15107 ;; *************** function _DelayTime_1us *****************
 15108 ;; Defined at:
 15109 ;;		line 323 in file "../src/CC2500_B1.c"
 15110 ;; Parameters:    Size  Location     Type
 15111 ;;  count           2    0[BANK0 ] int 
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  j               2    4[BANK0 ] unsigned int 
 15114 ;;  i               2    2[BANK0 ] unsigned int 
 15115 ;; Return value:  Size  Location     Type
 15116 ;;		None               void
 15117 ;; Registers used:
 15118 ;;		wreg, status,2
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : 0/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;Total ram usage:        6 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; Hardware stack levels required when called:    5
 15131 ;; This function calls:
 15132 ;;		Nothing
 15133 ;; This function is called by:
 15134 ;;		_CC2500_PowerRST
 15135 ;;		_CC2500_FrequencyCabr
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           
 15140                           ;psect for function _DelayTime_1us
 15141  12FC                     _DelayTime_1us:	
 15142                           
 15143                           ;CC2500_B1.c: 324: unsigned int i, j;
 15144                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15145                           
 15146                           ;incstack = 0
 15147                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15148  12FC  3001               	movlw	1
 15149  12FD  0020               	movlb	0	; select bank0
 15150  12FE  00A2               	movwf	DelayTime_1us@i
 15151  12FF  3000               	movlw	0
 15152  1300  00A3               	movwf	DelayTime_1us@i+1
 15153  1301                     l402:	
 15154  1301  0821               	movf	DelayTime_1us@count+1,w
 15155  1302  0223               	subwf	DelayTime_1us@i+1,w
 15156  1303  1D03               	skipz
 15157  1304  2B07               	goto	u8915
 15158  1305  0820               	movf	DelayTime_1us@count,w
 15159  1306  0222               	subwf	DelayTime_1us@i,w
 15160  1307                     u8915:	
 15161  1307  1803               	btfsc	3,0
 15162  1308  0008               	return
 15163                           
 15164                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15165  1309  01A4               	clrf	DelayTime_1us@j
 15166  130A  01A5               	clrf	DelayTime_1us@j+1
 15167  130B  3000               	movlw	0
 15168  130C  0225               	subwf	DelayTime_1us@j+1,w
 15169  130D  3002               	movlw	2
 15170  130E  1903               	skipnz
 15171  130F  0224               	subwf	DelayTime_1us@j,w
 15172  1310  1803               	btfsc	3,0
 15173  1311  2B1D               	goto	l8694
 15174  1312                     l8692:	
 15175  1312  3001               	movlw	1
 15176  1313  07A4               	addwf	DelayTime_1us@j,f
 15177  1314  3000               	movlw	0
 15178  1315  3DA5               	addwfc	DelayTime_1us@j+1,f
 15179  1316  3000               	movlw	0
 15180  1317  0225               	subwf	DelayTime_1us@j+1,w
 15181  1318  3002               	movlw	2
 15182  1319  1903               	skipnz
 15183  131A  0224               	subwf	DelayTime_1us@j,w
 15184  131B  1C03               	skipc
 15185  131C  2B12               	goto	l8692
 15186  131D                     l8694:	
 15187  131D  3001               	movlw	1
 15188  131E  07A2               	addwf	DelayTime_1us@i,f
 15189  131F  3000               	movlw	0
 15190  1320  3DA3               	addwfc	DelayTime_1us@i+1,f
 15191  1321  2B01               	goto	l402
 15192  1322                     __end_of_DelayTime_1us:	
 15193                           
 15194                           	psect	text99
 15195  1E3D                     __ptext99:	
 15196 ;; *************** function _CC2500_ClearTXFIFO *****************
 15197 ;; Defined at:
 15198 ;;		line 190 in file "../src/CC2500_B1.c"
 15199 ;; Parameters:    Size  Location     Type
 15200 ;;		None
 15201 ;; Auto vars:     Size  Location     Type
 15202 ;;		None
 15203 ;; Return value:  Size  Location     Type
 15204 ;;		None               void
 15205 ;; Registers used:
 15206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15207 ;; Tracked objects:
 15208 ;;		On entry : 0/0
 15209 ;;		On exit  : 0/0
 15210 ;;		Unchanged: 0/0
 15211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15216 ;;Total ram usage:        0 bytes
 15217 ;; Hardware stack levels used:    1
 15218 ;; Hardware stack levels required when called:    7
 15219 ;; This function calls:
 15220 ;;		_CC2500_WriteCommand
 15221 ;; This function is called by:
 15222 ;;		_CC2500_PowerOnInitial
 15223 ;; This function uses a non-reentrant model
 15224 ;;
 15225                           
 15226                           
 15227                           ;psect for function _CC2500_ClearTXFIFO
 15228  1E3D                     _CC2500_ClearTXFIFO:	
 15229                           
 15230                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15231                           
 15232                           ;incstack = 0
 15233                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15234  1E3D  303B               	movlw	59
 15235  1E3E  3191  2138         	fcall	_CC2500_WriteCommand
 15236  1E40  0008               	return
 15237  1E41                     __end_of_CC2500_ClearTXFIFO:	
 15238                           
 15239                           	psect	text100
 15240  1E39                     __ptext100:	
 15241 ;; *************** function _CC2500_ClearRXFIFO *****************
 15242 ;; Defined at:
 15243 ;;		line 197 in file "../src/CC2500_B1.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;		None
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;		None
 15248 ;; Return value:  Size  Location     Type
 15249 ;;		None               void
 15250 ;; Registers used:
 15251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        0 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    7
 15264 ;; This function calls:
 15265 ;;		_CC2500_WriteCommand
 15266 ;; This function is called by:
 15267 ;;		_CC2500_PowerOnInitial
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           
 15272                           ;psect for function _CC2500_ClearRXFIFO
 15273  1E39                     _CC2500_ClearRXFIFO:	
 15274                           
 15275                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15276                           
 15277                           ;incstack = 0
 15278                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15279  1E39  303A               	movlw	58
 15280  1E3A  3191  2138         	fcall	_CC2500_WriteCommand
 15281  1E3C  0008               	return
 15282  1E3D                     __end_of_CC2500_ClearRXFIFO:	
 15283                           
 15284                           	psect	text101
 15285  1138                     __ptext101:	
 15286 ;; *************** function _CC2500_WriteCommand *****************
 15287 ;; Defined at:
 15288 ;;		line 288 in file "../src/CC2500_B1.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  command         1    wreg     unsigned char 
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  command         1    3[BANK0 ] unsigned char 
 15293 ;; Return value:  Size  Location     Type
 15294 ;;		None               void
 15295 ;; Registers used:
 15296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : 0/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;Total ram usage:        2 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    6
 15309 ;; This function calls:
 15310 ;;		_CC2500_WriteByte
 15311 ;;		_Timeout_Counter
 15312 ;;		_set_TimeoutCleared
 15313 ;; This function is called by:
 15314 ;;		_CC2500_TxData
 15315 ;;		_CC2500_ClearTXFIFO
 15316 ;;		_CC2500_ClearRXFIFO
 15317 ;;		_CC2500_FrequencyCabr
 15318 ;;		_CC2500_SIDLEMode
 15319 ;;		_setRF_Main
 15320 ;;		_RF_RxDisable
 15321 ;; This function uses a non-reentrant model
 15322 ;;
 15323                           
 15324                           
 15325                           ;psect for function _CC2500_WriteCommand
 15326  1138                     _CC2500_WriteCommand:	
 15327                           
 15328                           ;incstack = 0
 15329                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15330                           ;CC2500_WriteCommand@command stored from wreg
 15331  1138  0020               	movlb	0	; select bank0
 15332  1139  00A3               	movwf	CC2500_WriteCommand@command
 15333                           
 15334                           ;CC2500_B1.c: 289: RC4 = 0;
 15335  113A  120E               	bcf	14,4	;volatile
 15336                           
 15337                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15338  113B  0823               	movf	CC2500_WriteCommand@command,w
 15339  113C  00A2               	movwf	??_CC2500_WriteCommand
 15340  113D  0822               	movf	??_CC2500_WriteCommand,w
 15341  113E  00F5               	movwf	_SPI0Buffer
 15342                           
 15343                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15344  113F  2943               	goto	l8472
 15345  1140                     l8470:	
 15346                           
 15347                           ;CC2500_B1.c: 293: Timeout_Counter();
 15348  1140  3190  20C9  3191   	fcall	_Timeout_Counter
 15349  1143                     l8472:	
 15350  1143  0020               	movlb	0	; select bank0
 15351  1144  1D0E               	btfss	14,2	;volatile
 15352  1145  2949               	goto	l8476
 15353  1146  0021               	movlb	1	; select bank1
 15354  1147  1D30               	btfss	(_myMain^(0+128)+16),2
 15355  1148  2940               	goto	l8470
 15356  1149                     l8476:	
 15357                           
 15358                           ;CC2500_B1.c: 294: };
 15359                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15360  1149  3190  2066  3191   	fcall	_set_TimeoutCleared
 15361                           
 15362                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15363  114C  3190  20B5         	fcall	_CC2500_WriteByte
 15364                           
 15365                           ;CC2500_B1.c: 298: RC4 = 1;
 15366  114E  0020               	movlb	0	; select bank0
 15367  114F  160E               	bsf	14,4	;volatile
 15368  1150  0008               	return
 15369  1151                     __end_of_CC2500_WriteCommand:	
 15370                           
 15371                           	psect	text102
 15372  1066                     __ptext102:	
 15373 ;; *************** function _set_TimeoutCleared *****************
 15374 ;; Defined at:
 15375 ;;		line 279 in file "../src/Main_B1.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;		None
 15378 ;; Auto vars:     Size  Location     Type
 15379 ;;		None
 15380 ;; Return value:  Size  Location     Type
 15381 ;;		None               void
 15382 ;; Registers used:
 15383 ;;		status,2
 15384 ;; Tracked objects:
 15385 ;;		On entry : 0/0
 15386 ;;		On exit  : 0/0
 15387 ;;		Unchanged: 0/0
 15388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;Total ram usage:        0 bytes
 15394 ;; Hardware stack levels used:    1
 15395 ;; Hardware stack levels required when called:    5
 15396 ;; This function calls:
 15397 ;;		Nothing
 15398 ;; This function is called by:
 15399 ;;		_CC2500_TxData
 15400 ;;		_CC2500_RxData
 15401 ;;		_CC2500_PowerRST
 15402 ;;		_CC2500_WriteREG
 15403 ;;		_CC2500_WriteCommand
 15404 ;;		_CC2500_ReadStatus
 15405 ;;		_TouchPower
 15406 ;;		_CC2500_ReadREG
 15407 ;;		_getAD
 15408 ;; This function uses a non-reentrant model
 15409 ;;
 15410                           
 15411                           
 15412                           ;psect for function _set_TimeoutCleared
 15413  1066                     _set_TimeoutCleared:	
 15414                           
 15415                           ;Main_B1.c: 280: myMain.Timeout = 0;
 15416                           
 15417                           ;incstack = 0
 15418                           ; Regs used in _set_TimeoutCleared: [status,2]
 15419  1066  0021               	movlb	1	; select bank1
 15420  1067  1130               	bcf	(_myMain^(0+128)+16),2
 15421                           
 15422                           ;Main_B1.c: 281: myMain.Timeout_Counter = 0;
 15423  1068  01B1               	clrf	(_myMain^(0+128)+17)
 15424  1069  01B2               	clrf	((_myMain+1)^(0+128)+17)
 15425  106A  0008               	return
 15426  106B                     __end_of_set_TimeoutCleared:	
 15427                           
 15428                           	psect	text103
 15429  10C9                     __ptext103:	
 15430 ;; *************** function _Timeout_Counter *****************
 15431 ;; Defined at:
 15432 ;;		line 270 in file "../src/Main_B1.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;		None
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;		None
 15437 ;; Return value:  Size  Location     Type
 15438 ;;		None               void
 15439 ;; Registers used:
 15440 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        0 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    5
 15453 ;; This function calls:
 15454 ;;		Nothing
 15455 ;; This function is called by:
 15456 ;;		_CC2500_TxData
 15457 ;;		_CC2500_RxData
 15458 ;;		_CC2500_PowerRST
 15459 ;;		_CC2500_WriteREG
 15460 ;;		_CC2500_WriteCommand
 15461 ;;		_CC2500_ReadStatus
 15462 ;;		_TouchPower
 15463 ;;		_CC2500_ReadREG
 15464 ;;		_getAD
 15465 ;; This function uses a non-reentrant model
 15466 ;;
 15467                           
 15468                           
 15469                           ;psect for function _Timeout_Counter
 15470  10C9                     _Timeout_Counter:	
 15471                           
 15472                           ;Main_B1.c: 271: myMain.Timeout_Counter++;
 15473                           
 15474                           ;incstack = 0
 15475                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15476  10C9  3001               	movlw	1
 15477  10CA  0021               	movlb	1	; select bank1
 15478  10CB  07B1               	addwf	(_myMain^(0+128)+17),f
 15479  10CC  3000               	movlw	0
 15480  10CD  3DB2               	addwfc	((_myMain+1)^(0+128)+17),f
 15481                           
 15482                           ;Main_B1.c: 272: if (myMain.Timeout_Counter == 10000) {
 15483  10CE  3011               	movlw	17
 15484  10CF  3EA0               	addlw	_myMain& (0+255)
 15485  10D0  0086               	movwf	6
 15486  10D1  0187               	clrf	7
 15487  10D2  3F40               	moviw [0]fsr1
 15488  10D3  3A10               	xorlw	16
 15489  10D4  1D03               	skipz
 15490  10D5  28D8               	goto	u8475
 15491  10D6  3F41               	moviw [1]fsr1
 15492  10D7  3A27               	xorlw	39
 15493  10D8                     u8475:	
 15494  10D8  1D03               	skipz
 15495  10D9  0008               	return
 15496                           
 15497                           ;Main_B1.c: 273: myMain.Timeout_Counter = 0;
 15498  10DA  01B1               	clrf	(_myMain^(0+128)+17)
 15499  10DB  01B2               	clrf	((_myMain+1)^(0+128)+17)
 15500                           
 15501                           ;Main_B1.c: 274: myMain.Timeout = 1;
 15502  10DC  1530               	bsf	(_myMain^(0+128)+16),2
 15503  10DD  0008               	return
 15504  10DE                     __end_of_Timeout_Counter:	
 15505                           
 15506                           	psect	text104
 15507  10B5                     __ptext104:	
 15508 ;; *************** function _CC2500_WriteByte *****************
 15509 ;; Defined at:
 15510 ;;		line 222 in file "../src/CC2500_B1.c"
 15511 ;; Parameters:    Size  Location     Type
 15512 ;;		None
 15513 ;; Auto vars:     Size  Location     Type
 15514 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15515 ;; Return value:  Size  Location     Type
 15516 ;;		None               void
 15517 ;; Registers used:
 15518 ;;		wreg, status,2, status,0
 15519 ;; Tracked objects:
 15520 ;;		On entry : 0/0
 15521 ;;		On exit  : 0/0
 15522 ;;		Unchanged: 0/0
 15523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15527 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15528 ;;Total ram usage:        2 bytes
 15529 ;; Hardware stack levels used:    1
 15530 ;; Hardware stack levels required when called:    5
 15531 ;; This function calls:
 15532 ;;		Nothing
 15533 ;; This function is called by:
 15534 ;;		_CC2500_TxData
 15535 ;;		_CC2500_RxData
 15536 ;;		_CC2500_PowerRST
 15537 ;;		_CC2500_WriteREG
 15538 ;;		_CC2500_WriteCommand
 15539 ;;		_CC2500_ReadStatus
 15540 ;;		_CC2500_ReadREG
 15541 ;; This function uses a non-reentrant model
 15542 ;;
 15543                           
 15544                           
 15545                           ;psect for function _CC2500_WriteByte
 15546  10B5                     _CC2500_WriteByte:	
 15547                           
 15548                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15549                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15550                           
 15551                           ;incstack = 0
 15552                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15553  10B5  0020               	movlb	0	; select bank0
 15554  10B6  01A1               	clrf	CC2500_WriteByte@loop_a
 15555  10B7                     L12:	
 15556  10B7  3008               	movlw	8
 15557  10B8  0221               	subwf	CC2500_WriteByte@loop_a,w
 15558  10B9  1803               	btfsc	3,0
 15559  10BA  0008               	return
 15560                           
 15561                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15562  10BB  1FF5               	btfss	_SPI0Buffer,7
 15563  10BC  28BF               	goto	l358
 15564                           
 15565                           ;CC2500_B1.c: 226: RC0 = 1;
 15566  10BD  140E               	bsf	14,0	;volatile
 15567  10BE  28C0               	goto	l359
 15568  10BF                     l358:	
 15569                           
 15570                           ;CC2500_B1.c: 227: else
 15571                           ;CC2500_B1.c: 228: RC0 = 0;
 15572  10BF  100E               	bcf	14,0	;volatile
 15573  10C0                     l359:	
 15574                           
 15575                           ;CC2500_B1.c: 229: RC1 = 1;
 15576  10C0  148E               	bsf	14,1	;volatile
 15577                           
 15578                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15579  10C1  1003               	clrc
 15580  10C2  0DF5               	rlf	_SPI0Buffer,f
 15581                           
 15582                           ;CC2500_B1.c: 231: RC1 = 0;
 15583  10C3  108E               	bcf	14,1	;volatile
 15584  10C4  3001               	movlw	1
 15585  10C5  00A0               	movwf	??_CC2500_WriteByte
 15586  10C6  0820               	movf	??_CC2500_WriteByte,w
 15587  10C7  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15588  10C8  28B7               	goto	L12
 15589  10C9                     __end_of_CC2500_WriteByte:	
 15590                           
 15591                           	psect	text105
 15592  1668                     __ptext105:	
 15593 ;; *************** function _Buzzer_Main *****************
 15594 ;; Defined at:
 15595 ;;		line 46 in file "../src/Buzzer_B1.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;		None
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;		None
 15600 ;; Return value:  Size  Location     Type
 15601 ;;		None               void
 15602 ;; Registers used:
 15603 ;;		wreg, status,2, status,0
 15604 ;; Tracked objects:
 15605 ;;		On entry : 0/0
 15606 ;;		On exit  : 0/0
 15607 ;;		Unchanged: 0/0
 15608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;Total ram usage:        1 bytes
 15614 ;; Hardware stack levels used:    1
 15615 ;; Hardware stack levels required when called:    5
 15616 ;; This function calls:
 15617 ;;		Nothing
 15618 ;; This function is called by:
 15619 ;;		_main
 15620 ;; This function uses a non-reentrant model
 15621 ;;
 15622                           
 15623                           
 15624                           ;psect for function _Buzzer_Main
 15625  1668                     _Buzzer_Main:	
 15626                           
 15627                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15628                           
 15629                           ;incstack = 0
 15630                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15631  1668  0021               	movlb	1	; select bank1
 15632  1669  1CB3               	btfss	_Buz1^(0+128),1
 15633  166A  0008               	return
 15634                           
 15635                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15636  166B  3001               	movlw	1
 15637  166C  07B4               	addwf	(_Buz1^(0+128)+1),f
 15638  166D  3000               	movlw	0
 15639  166E  3DB5               	addwfc	((_Buz1+1)^(0+128)+1),f
 15640                           
 15641                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15642  166F  083A               	movf	((_Buz1+1)^(0+128)+6),w
 15643  1670  0235               	subwf	((_Buz1+1)^(0+128)+1),w
 15644  1671  1D03               	skipz
 15645  1672  2E75               	goto	u10265
 15646  1673  0839               	movf	(_Buz1^(0+128)+6),w
 15647  1674  0234               	subwf	(_Buz1^(0+128)+1),w
 15648  1675                     u10265:	
 15649  1675  1C03               	skipc
 15650  1676  0008               	return
 15651                           
 15652                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15653  1677  01B4               	clrf	(_Buz1^(0+128)+1)
 15654  1678  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 15655                           
 15656                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15657  1679  12B3               	bcf	_Buz1^(0+128),5
 15658  167A  0020               	movlb	0	; select bank0
 15659  167B  1D8D               	btfss	13,3	;volatile
 15660  167C  2E7F               	goto	l9526
 15661  167D  0021               	movlb	1	; select bank1
 15662  167E  16B3               	bsf	_Buz1^(0+128),5
 15663  167F                     l9526:	
 15664                           
 15665                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15666  167F  0021               	movlb	1	; select bank1
 15667  1680  1AB3               	btfsc	_Buz1^(0+128),5
 15668  1681  2EAB               	goto	l120
 15669                           
 15670                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15671  1682  08B6               	movf	(_Buz1^(0+128)+3),f
 15672  1683  1D03               	skipz
 15673  1684  2EA7               	goto	l121
 15674                           
 15675                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15676  1685  1DB3               	btfss	_Buz1^(0+128),3
 15677  1686  2E95               	goto	l122
 15678                           
 15679                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15680  1687  11B3               	bcf	_Buz1^(0+128),3
 15681                           
 15682                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15683  1688  0837               	movf	(_Buz1^(0+128)+4),w
 15684  1689  0020               	movlb	0	; select bank0
 15685  168A  00A0               	movwf	??_Buzzer_Main
 15686  168B  0820               	movf	??_Buzzer_Main,w
 15687  168C  0021               	movlb	1	; select bank1
 15688  168D  00B6               	movwf	(_Buz1^(0+128)+3)
 15689                           
 15690                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15691  168E  083C               	movf	((_Buz1+1)^(0+128)+8),w
 15692  168F  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 15693  1690  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 15694  1691  083B               	movf	(_Buz1^(0+128)+8),w
 15695  1692  01B9               	clrf	(_Buz1^(0+128)+6)
 15696  1693  07B9               	addwf	(_Buz1^(0+128)+6),f
 15697                           
 15698                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15699  1694  0008               	return
 15700  1695                     l122:	
 15701  1695  1E33               	btfss	_Buz1^(0+128),4
 15702  1696  2EA5               	goto	l124
 15703                           
 15704                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15705  1697  1233               	bcf	_Buz1^(0+128),4
 15706                           
 15707                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15708  1698  0838               	movf	(_Buz1^(0+128)+5),w
 15709  1699  0020               	movlb	0	; select bank0
 15710  169A  00A0               	movwf	??_Buzzer_Main
 15711  169B  0820               	movf	??_Buzzer_Main,w
 15712  169C  0021               	movlb	1	; select bank1
 15713  169D  00B6               	movwf	(_Buz1^(0+128)+3)
 15714                           
 15715                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15716  169E  083E               	movf	((_Buz1+1)^(0+128)+10),w
 15717  169F  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 15718  16A0  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 15719  16A1  083D               	movf	(_Buz1^(0+128)+10),w
 15720  16A2  01B9               	clrf	(_Buz1^(0+128)+6)
 15721  16A3  07B9               	addwf	(_Buz1^(0+128)+6),f
 15722                           
 15723                           ;Buzzer_B1.c: 62: } else {
 15724  16A4  0008               	return
 15725  16A5                     l124:	
 15726                           
 15727                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15728  16A5  10B3               	bcf	_Buz1^(0+128),1
 15729                           
 15730                           ;Buzzer_B1.c: 64: }
 15731                           ;Buzzer_B1.c: 65: } else {
 15732  16A6  0008               	return
 15733  16A7                     l121:	
 15734                           
 15735                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15736  16A7  16B3               	bsf	_Buz1^(0+128),5
 15737                           
 15738                           ;Buzzer_B1.c: 68: RB3 = 1;
 15739  16A8  0020               	movlb	0	; select bank0
 15740  16A9  158D               	bsf	13,3	;volatile
 15741                           
 15742                           ;Buzzer_B1.c: 69: }
 15743                           ;Buzzer_B1.c: 70: } else {
 15744  16AA  0008               	return
 15745  16AB                     l120:	
 15746                           
 15747                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15748  16AB  12B3               	bcf	_Buz1^(0+128),5
 15749                           
 15750                           ;Buzzer_B1.c: 73: RB3 = 0;
 15751  16AC  0020               	movlb	0	; select bank0
 15752  16AD  118D               	bcf	13,3	;volatile
 15753                           
 15754                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15755  16AE  3001               	movlw	1
 15756  16AF  0021               	movlb	1	; select bank1
 15757  16B0  02B6               	subwf	(_Buz1^(0+128)+3),f
 15758  16B1  0008               	return
 15759  16B2                     __end_of_Buzzer_Main:	
 15760                           
 15761                           	psect	text106
 15762  1E30                     __ptext106:	
 15763 ;; *************** function _Buzzer_Initialization *****************
 15764 ;; Defined at:
 15765 ;;		line 11 in file "../src/Buzzer_B1.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;		None
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;		None
 15770 ;; Return value:  Size  Location     Type
 15771 ;;		None               void
 15772 ;; Registers used:
 15773 ;;		None
 15774 ;; Tracked objects:
 15775 ;;		On entry : 0/0
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;Total ram usage:        0 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    5
 15786 ;; This function calls:
 15787 ;;		Nothing
 15788 ;; This function is called by:
 15789 ;;		_main
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           
 15794                           ;psect for function _Buzzer_Initialization
 15795  1E30                     _Buzzer_Initialization:	
 15796                           
 15797                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15798                           
 15799                           ;incstack = 0
 15800                           ; Regs used in _Buzzer_Initialization: []
 15801  1E30  0021               	movlb	1	; select bank1
 15802  1E31  1433               	bsf	_Buz1^(0+128),0
 15803  1E32  0008               	return
 15804  1E33                     __end_of_Buzzer_Initialization:	
 15805                           
 15806                           	psect	intentry
 15807  0004                     __pintentry:	
 15808 ;; *************** function _ISR *****************
 15809 ;; Defined at:
 15810 ;;		line 107 in file "../src/MCU_B1.c"
 15811 ;; Parameters:    Size  Location     Type
 15812 ;;		None
 15813 ;; Auto vars:     Size  Location     Type
 15814 ;;		None
 15815 ;; Return value:  Size  Location     Type
 15816 ;;		None               void
 15817 ;; Registers used:
 15818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15819 ;; Tracked objects:
 15820 ;;		On entry : 0/0
 15821 ;;		On exit  : 0/0
 15822 ;;		Unchanged: 0/0
 15823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;Total ram usage:        1 bytes
 15829 ;; Hardware stack levels used:    1
 15830 ;; Hardware stack levels required when called:    4
 15831 ;; This function calls:
 15832 ;;		_IOC_ISR
 15833 ;;		_TMR1_ISR
 15834 ;; This function is called by:
 15835 ;;		Interrupt level 1
 15836 ;; This function uses a non-reentrant model
 15837 ;;
 15838                           
 15839  0004                     _ISR:	
 15840                           
 15841                           ;incstack = 0
 15842                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15843  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15844  0005  3180               	pagesel	$
 15845  0006  0020               	movlb	0	; select bank0
 15846  0007  087F               	movf	127,w
 15847  0008  00FB               	movwf	??_ISR
 15848                           
 15849                           ;MCU_B1.c: 109: IOC_ISR();
 15850  0009  319E  26E8  3180   	fcall	_IOC_ISR
 15851                           
 15852                           ;MCU_B1.c: 111: ;;
 15853                           ;MCU_B1.c: 113: TMR1_ISR();
 15854  000C  3193  23C5         	fcall	_TMR1_ISR
 15855  000E  087B               	movf	??_ISR,w
 15856  000F  0020               	movlb	0	; select bank0
 15857  0010  00FF               	movwf	127
 15858  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15859  0012  0009               	retfie
 15860  0013                     __end_of_ISR:	
 15861                           
 15862                           	psect	text108
 15863  13C5                     __ptext108:	
 15864 ;; *************** function _TMR1_ISR *****************
 15865 ;; Defined at:
 15866 ;;		line 209 in file "../src/MCU_B1.c"
 15867 ;; Parameters:    Size  Location     Type
 15868 ;;		None
 15869 ;; Auto vars:     Size  Location     Type
 15870 ;;		None
 15871 ;; Return value:  Size  Location     Type
 15872 ;;		None               void
 15873 ;; Registers used:
 15874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15875 ;; Tracked objects:
 15876 ;;		On entry : 0/0
 15877 ;;		On exit  : 0/0
 15878 ;;		Unchanged: 0/0
 15879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;Total ram usage:        0 bytes
 15885 ;; Hardware stack levels used:    1
 15886 ;; Hardware stack levels required when called:    2
 15887 ;; This function calls:
 15888 ;;		_setDimmerLights_IntrControl
 15889 ;; This function is called by:
 15890 ;;		_ISR
 15891 ;; This function uses a non-reentrant model
 15892 ;;
 15893                           
 15894                           
 15895                           ;psect for function _TMR1_ISR
 15896  13C5                     _TMR1_ISR:	
 15897                           
 15898                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 15899                           
 15900                           ;incstack = 0
 15901                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15902  13C5  0021               	movlb	1	; select bank1
 15903  13C6  1C11               	btfss	17,0	;volatile
 15904  13C7  0008               	return
 15905  13C8  0020               	movlb	0	; select bank0
 15906  13C9  1C11               	btfss	17,0	;volatile
 15907  13CA  0008               	return
 15908                           
 15909                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 15910  13CB  30FA               	movlw	250
 15911  13CC  0097               	movwf	23	;volatile
 15912                           
 15913                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 15914  13CD  3038               	movlw	56
 15915  13CE  0096               	movwf	22	;volatile
 15916                           
 15917                           ;MCU_B1.c: 214: TMR1IF = 0;
 15918  13CF  1011               	bcf	17,0	;volatile
 15919                           
 15920                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 15921  13D0  3001               	movlw	1
 15922  13D1  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15923                           
 15924                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 15925  13D4  3002               	movlw	2
 15926  13D5  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15927                           
 15928                           ;MCU_B1.c: 229: setDimmerLights_IntrControl(3);
 15929  13D8  3003               	movlw	3
 15930  13D9  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15931                           
 15932                           ;MCU_B1.c: 234: Timer1.Count++;
 15933  13DC  3001               	movlw	1
 15934  13DD  0021               	movlb	1	; select bank1
 15935  13DE  07CC               	addwf	(_Timer1^(0+128)+1),f
 15936  13DF  3000               	movlw	0
 15937  13E0  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 15938                           
 15939                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 15940  13E1  3001               	movlw	1
 15941  13E2  3ECB               	addlw	_Timer1& (0+255)
 15942  13E3  0086               	movwf	6
 15943  13E4  0187               	clrf	7
 15944  13E5  3F40               	moviw [0]fsr1
 15945  13E6  3A64               	xorlw	100
 15946  13E7  1D03               	skipz
 15947  13E8  2BEB               	goto	u748_25
 15948  13E9  3F41               	moviw [1]fsr1
 15949  13EA  3A00               	xorlw	0
 15950  13EB                     u748_25:	
 15951  13EB  1D03               	skipz
 15952  13EC  0008               	return
 15953                           
 15954                           ;MCU_B1.c: 236: {
 15955                           ;MCU_B1.c: 237: Timer1.Count = 0;
 15956  13ED  01CC               	clrf	(_Timer1^(0+128)+1)
 15957  13EE  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 15958                           
 15959                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
 15960  13EF  1520               	bsf	_myMain^(0+128),2
 15961  13F0  0008               	return
 15962  13F1                     __end_of_TMR1_ISR:	
 15963                           
 15964                           	psect	text109
 15965  0045                     __ptext109:	
 15966 ;; *************** function _setDimmerLights_IntrControl *****************
 15967 ;; Defined at:
 15968 ;;		line 94 in file "../src/Dimmer_B1.c"
 15969 ;; Parameters:    Size  Location     Type
 15970 ;;  lights          1    wreg     unsigned char 
 15971 ;; Auto vars:     Size  Location     Type
 15972 ;;  lights          1    4[COMMON] unsigned char 
 15973 ;; Return value:  Size  Location     Type
 15974 ;;		None               void
 15975 ;; Registers used:
 15976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15977 ;; Tracked objects:
 15978 ;;		On entry : 0/0
 15979 ;;		On exit  : 0/0
 15980 ;;		Unchanged: 0/0
 15981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15985 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;Total ram usage:        3 bytes
 15987 ;; Hardware stack levels used:    1
 15988 ;; Hardware stack levels required when called:    1
 15989 ;; This function calls:
 15990 ;;		_DimmerIntrPointSelect
 15991 ;; This function is called by:
 15992 ;;		_TMR1_ISR
 15993 ;; This function uses a non-reentrant model
 15994 ;;
 15995                           
 15996                           
 15997                           ;psect for function _setDimmerLights_IntrControl
 15998  0045                     _setDimmerLights_IntrControl:	
 15999                           
 16000                           ;incstack = 0
 16001                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16002                           ;setDimmerLights_IntrControl@lights stored from wreg
 16003  0045  00FA               	movwf	setDimmerLights_IntrControl@lights
 16004                           
 16005                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 16006  0046  087A               	movf	setDimmerLights_IntrControl@lights,w
 16007  0047  3191  2151  3180   	fcall	_DimmerIntrPointSelect
 16008                           
 16009                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 16010  004A  0874               	movf	_DimmerLightsIntr,w
 16011  004B  0086               	movwf	6
 16012  004C  3001               	movlw	1	; select bank2/3
 16013  004D  0087               	movwf	7
 16014  004E  1C01               	btfss	1,0
 16015  004F  28A5               	goto	i1l7030
 16016                           
 16017                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 16018  0050  3001               	movlw	1
 16019  0051  00F8               	movwf	??_setDimmerLights_IntrControl
 16020  0052  0874               	movf	_DimmerLightsIntr,w
 16021  0053  3E03               	addlw	3
 16022  0054  0086               	movwf	6
 16023  0055  3001               	movlw	1	; select bank2/3
 16024  0056  0087               	movwf	7
 16025  0057  0878               	movf	??_setDimmerLights_IntrControl,w
 16026  0058  0781               	addwf	1,f
 16027                           
 16028                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 16029  0059  0873               	movf	_Dimmer,w
 16030  005A  3E02               	addlw	2
 16031  005B  0086               	movwf	6
 16032  005C  0187               	clrf	7
 16033  005D  0874               	movf	_DimmerLightsIntr,w
 16034  005E  3E04               	addlw	4
 16035  005F  0084               	movwf	4
 16036  0060  3001               	movlw	1	; select bank2/3
 16037  0061  0085               	movwf	5
 16038  0062  0800               	movf	0,w
 16039  0063  0701               	addwf	1,w
 16040  0064  00F8               	movwf	??_setDimmerLights_IntrControl
 16041  0065  01F9               	clrf	??_setDimmerLights_IntrControl+1
 16042  0066  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 16043  0067  0874               	movf	_DimmerLightsIntr,w
 16044  0068  3E03               	addlw	3
 16045  0069  0086               	movwf	6
 16046  006A  3001               	movlw	1	; select bank2/3
 16047  006B  0087               	movwf	7
 16048  006C  0879               	movf	??_setDimmerLights_IntrControl+1,w
 16049  006D  3A80               	xorlw	128
 16050  006E  3C80               	sublw	128
 16051  006F  1D03               	skipz
 16052  0070  2873               	goto	u634_25
 16053  0071  0878               	movf	??_setDimmerLights_IntrControl,w
 16054  0072  0201               	subwf	1,w
 16055  0073                     u634_25:	
 16056  0073  1C03               	skipc
 16057  0074  29B3               	goto	i1l7096
 16058                           
 16059                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 16060  0075  0874               	movf	_DimmerLightsIntr,w
 16061  0076  3E03               	addlw	3
 16062  0077  0086               	movwf	6
 16063  0078  3001               	movlw	1	; select bank2/3
 16064  0079  0087               	movwf	7
 16065  007A  0181               	clrf	1
 16066                           
 16067                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 16068  007B  0874               	movf	_DimmerLightsIntr,w
 16069  007C  0086               	movwf	6
 16070  007D  3001               	movlw	1	; select bank2/3
 16071  007E  0087               	movwf	7
 16072  007F  1001               	bcf	1,0
 16073                           
 16074                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 16075  0080  0874               	movf	_DimmerLightsIntr,w
 16076  0081  0086               	movwf	6
 16077  0082  3001               	movlw	1	; select bank2/3
 16078  0083  0087               	movwf	7
 16079  0084  1F01               	btfss	1,6
 16080  0085  29B3               	goto	i1l7096
 16081                           
 16082                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 16083  0086  0874               	movf	_DimmerLightsIntr,w
 16084  0087  3E08               	addlw	8
 16085  0088  0086               	movwf	6
 16086  0089  3001               	movlw	1	; select bank2/3
 16087  008A  0087               	movwf	7
 16088  008B  1401               	bsf	1,0
 16089                           
 16090                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 16091  008C  0874               	movf	_DimmerLightsIntr,w
 16092  008D  3E08               	addlw	8
 16093  008E  0086               	movwf	6
 16094  008F  3001               	movlw	1	; select bank2/3
 16095  0090  0087               	movwf	7
 16096  0091  1681               	bsf	1,5
 16097                           
 16098                           ;Dimmer_B1.c: 107: if (lights == 1) {
 16099  0092  087A               	movf	setDimmerLights_IntrControl@lights,w
 16100  0093  3A01               	xorlw	1
 16101  0094  1D03               	skipz
 16102  0095  2898               	goto	i1l7022
 16103                           
 16104                           ;Dimmer_B1.c: 108: RB4 = 1;
 16105  0096  0020               	movlb	0	; select bank0
 16106  0097  160D               	bsf	13,4	;volatile
 16107  0098                     i1l7022:	
 16108                           ;Dimmer_B1.c: 109: ;;
 16109                           
 16110                           
 16111                           ;Dimmer_B1.c: 110: }
 16112                           ;Dimmer_B1.c: 113: if (lights == 2) {
 16113  0098  087A               	movf	setDimmerLights_IntrControl@lights,w
 16114  0099  3A02               	xorlw	2
 16115  009A  1D03               	skipz
 16116  009B  289E               	goto	i1l7026
 16117                           
 16118                           ;Dimmer_B1.c: 114: RA7 = 1;
 16119  009C  0020               	movlb	0	; select bank0
 16120  009D  178C               	bsf	12,7	;volatile
 16121  009E                     i1l7026:	
 16122                           
 16123                           ;Dimmer_B1.c: 115: }
 16124                           ;Dimmer_B1.c: 118: if (lights == 3) {
 16125  009E  087A               	movf	setDimmerLights_IntrControl@lights,w
 16126  009F  3A03               	xorlw	3
 16127  00A0  1D03               	skipz
 16128  00A1  29B3               	goto	i1l7096
 16129                           
 16130                           ;Dimmer_B1.c: 119: RB1 = 1;
 16131  00A2  0020               	movlb	0	; select bank0
 16132  00A3  148D               	bsf	13,1	;volatile
 16133                           
 16134                           ;Dimmer_B1.c: 120: }
 16135                           ;Dimmer_B1.c: 122: }
 16136                           ;Dimmer_B1.c: 123: }
 16137                           ;Dimmer_B1.c: 124: } else {
 16138  00A4  29B3               	goto	i1l7096
 16139  00A5                     i1l7030:	
 16140                           
 16141                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 16142  00A5  0874               	movf	_DimmerLightsIntr,w
 16143  00A6  3E08               	addlw	8
 16144  00A7  0086               	movwf	6
 16145  00A8  3001               	movlw	1	; select bank2/3
 16146  00A9  0087               	movwf	7
 16147  00AA  1C01               	btfss	1,0
 16148  00AB  29B3               	goto	i1l7096
 16149                           
 16150                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 16151  00AC  0874               	movf	_DimmerLightsIntr,w
 16152  00AD  3E08               	addlw	8
 16153  00AE  0086               	movwf	6
 16154  00AF  3001               	movlw	1	; select bank2/3
 16155  00B0  0087               	movwf	7
 16156  00B1  1001               	bcf	1,0
 16157                           
 16158                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 16159  00B2  0874               	movf	_DimmerLightsIntr,w
 16160  00B3  0086               	movwf	6
 16161  00B4  3001               	movlw	1	; select bank2/3
 16162  00B5  0087               	movwf	7
 16163  00B6  1C81               	btfss	1,1
 16164  00B7  29B3               	goto	i1l7096
 16165                           
 16166                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 16167  00B8  3001               	movlw	1
 16168  00B9  00F8               	movwf	??_setDimmerLights_IntrControl
 16169  00BA  0A74               	incf	_DimmerLightsIntr,w
 16170  00BB  0086               	movwf	6
 16171  00BC  3001               	movlw	1	; select bank2/3
 16172  00BD  0087               	movwf	7
 16173  00BE  0878               	movf	??_setDimmerLights_IntrControl,w
 16174  00BF  0781               	addwf	1,f
 16175                           
 16176                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16177  00C0  0A74               	incf	_DimmerLightsIntr,w
 16178  00C1  0086               	movwf	6
 16179  00C2  3001               	movlw	1	; select bank2/3
 16180  00C3  0087               	movwf	7
 16181  00C4  0874               	movf	_DimmerLightsIntr,w
 16182  00C5  3E02               	addlw	2
 16183  00C6  0084               	movwf	4
 16184  00C7  3001               	movlw	1	; select bank2/3
 16185  00C8  0085               	movwf	5
 16186  00C9  0800               	movf	0,w
 16187  00CA  0201               	subwf	1,w
 16188  00CB  1C03               	skipc
 16189  00CC  29B3               	goto	i1l7096
 16190                           
 16191                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 16192  00CD  0A74               	incf	_DimmerLightsIntr,w
 16193  00CE  0086               	movwf	6
 16194  00CF  3001               	movlw	1	; select bank2/3
 16195  00D0  0087               	movwf	7
 16196  00D1  0181               	clrf	1
 16197                           
 16198                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 16199  00D2  0874               	movf	_DimmerLightsIntr,w
 16200  00D3  0086               	movwf	6
 16201  00D4  3001               	movlw	1	; select bank2/3
 16202  00D5  0087               	movwf	7
 16203  00D6  1D81               	btfss	1,3
 16204  00D7  290E               	goto	i1l7056
 16205                           
 16206                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 16207  00D8  0874               	movf	_DimmerLightsIntr,w
 16208  00D9  0086               	movwf	6
 16209  00DA  3001               	movlw	1	; select bank2/3
 16210  00DB  0087               	movwf	7
 16211  00DC  1A01               	btfsc	1,4
 16212  00DD  28F5               	goto	i1l7050
 16213                           
 16214                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-90)*0.8))) {
 16215  00DE  0874               	movf	_DimmerLightsIntr,w
 16216  00DF  3E04               	addlw	4
 16217  00E0  0086               	movwf	6
 16218  00E1  3001               	movlw	1	; select bank2/3
 16219  00E2  0087               	movwf	7
 16220  00E3  3009               	movlw	9
 16221  00E4  0201               	subwf	1,w
 16222  00E5  1C03               	skipc
 16223  00E6  28EF               	goto	i1l7048
 16224                           
 16225                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 16226  00E7  0874               	movf	_DimmerLightsIntr,w
 16227  00E8  3E04               	addlw	4
 16228  00E9  0086               	movwf	6
 16229  00EA  3001               	movlw	1	; select bank2/3
 16230  00EB  0087               	movwf	7
 16231  00EC  3001               	movlw	1
 16232  00ED  0281               	subwf	1,f
 16233                           
 16234                           ;Dimmer_B1.c: 135: } else {
 16235  00EE  29B3               	goto	i1l7096
 16236  00EF                     i1l7048:	
 16237                           
 16238                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 16239  00EF  0874               	movf	_DimmerLightsIntr,w
 16240  00F0  0086               	movwf	6
 16241  00F1  3001               	movlw	1	; select bank2/3
 16242  00F2  0087               	movwf	7
 16243  00F3  1601               	bsf	1,4
 16244                           
 16245                           ;Dimmer_B1.c: 137: }
 16246                           ;Dimmer_B1.c: 138: } else {
 16247  00F4  29B3               	goto	i1l7096
 16248  00F5                     i1l7050:	
 16249                           
 16250                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16251  00F5  0874               	movf	_DimmerLightsIntr,w
 16252  00F6  3E04               	addlw	4
 16253  00F7  0086               	movwf	6
 16254  00F8  3001               	movlw	1	; select bank2/3
 16255  00F9  0087               	movwf	7
 16256  00FA  303C               	movlw	60
 16257  00FB  0201               	subwf	1,w
 16258  00FC  1803               	skipnc
 16259  00FD  2908               	goto	i1l7054
 16260                           
 16261                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 16262  00FE  3001               	movlw	1
 16263  00FF  00F8               	movwf	??_setDimmerLights_IntrControl
 16264  0100  0874               	movf	_DimmerLightsIntr,w
 16265  0101  3E04               	addlw	4
 16266  0102  0086               	movwf	6
 16267  0103  3001               	movlw	1	; select bank2/3
 16268  0104  0087               	movwf	7
 16269  0105  0878               	movf	??_setDimmerLights_IntrControl,w
 16270  0106  0781               	addwf	1,f
 16271                           
 16272                           ;Dimmer_B1.c: 141: } else {
 16273  0107  29B3               	goto	i1l7096
 16274  0108                     i1l7054:	
 16275                           
 16276                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 16277  0108  0874               	movf	_DimmerLightsIntr,w
 16278  0109  0086               	movwf	6
 16279  010A  3001               	movlw	1	; select bank2/3
 16280  010B  0087               	movwf	7
 16281  010C  1201               	bcf	1,4
 16282                           
 16283                           ;Dimmer_B1.c: 143: }
 16284                           ;Dimmer_B1.c: 144: }
 16285                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 16286  010D  29B3               	goto	i1l7096
 16287  010E                     i1l7056:	
 16288  010E  0874               	movf	_DimmerLightsIntr,w
 16289  010F  0086               	movwf	6
 16290  0110  3001               	movlw	1	; select bank2/3
 16291  0111  0087               	movwf	7
 16292  0112  1D01               	btfss	1,2
 16293  0113  2955               	goto	i1l7070
 16294                           
 16295                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16296  0114  0874               	movf	_DimmerLightsIntr,w
 16297  0115  3E05               	addlw	5
 16298  0116  0086               	movwf	6
 16299  0117  3001               	movlw	1	; select bank2/3
 16300  0118  0087               	movwf	7
 16301  0119  0874               	movf	_DimmerLightsIntr,w
 16302  011A  3E04               	addlw	4
 16303  011B  0084               	movwf	4
 16304  011C  3001               	movlw	1	; select bank2/3
 16305  011D  0085               	movwf	5
 16306  011E  0800               	movf	0,w
 16307  011F  0201               	subwf	1,w
 16308  0120  1803               	skipnc
 16309  0121  292A               	goto	i1l7062
 16310                           
 16311                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 16312  0122  0874               	movf	_DimmerLightsIntr,w
 16313  0123  3E04               	addlw	4
 16314  0124  0086               	movwf	6
 16315  0125  3001               	movlw	1	; select bank2/3
 16316  0126  0087               	movwf	7
 16317  0127  3001               	movlw	1
 16318  0128  0281               	subwf	1,f
 16319                           
 16320                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16321  0129  2941               	goto	i1l7066
 16322  012A                     i1l7062:	
 16323  012A  0874               	movf	_DimmerLightsIntr,w
 16324  012B  3E04               	addlw	4
 16325  012C  0086               	movwf	6
 16326  012D  3001               	movlw	1	; select bank2/3
 16327  012E  0087               	movwf	7
 16328  012F  0874               	movf	_DimmerLightsIntr,w
 16329  0130  3E05               	addlw	5
 16330  0131  0084               	movwf	4
 16331  0132  3001               	movlw	1	; select bank2/3
 16332  0133  0085               	movwf	5
 16333  0134  0800               	movf	0,w
 16334  0135  0201               	subwf	1,w
 16335  0136  1803               	skipnc
 16336  0137  2941               	goto	i1l7066
 16337                           
 16338                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 16339  0138  3001               	movlw	1
 16340  0139  00F8               	movwf	??_setDimmerLights_IntrControl
 16341  013A  0874               	movf	_DimmerLightsIntr,w
 16342  013B  3E04               	addlw	4
 16343  013C  0086               	movwf	6
 16344  013D  3001               	movlw	1	; select bank2/3
 16345  013E  0087               	movwf	7
 16346  013F  0878               	movf	??_setDimmerLights_IntrControl,w
 16347  0140  0781               	addwf	1,f
 16348  0141                     i1l7066:	
 16349                           
 16350                           ;Dimmer_B1.c: 150: }
 16351                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16352  0141  0874               	movf	_DimmerLightsIntr,w
 16353  0142  3E05               	addlw	5
 16354  0143  0086               	movwf	6
 16355  0144  3001               	movlw	1	; select bank2/3
 16356  0145  0087               	movwf	7
 16357  0146  0874               	movf	_DimmerLightsIntr,w
 16358  0147  3E04               	addlw	4
 16359  0148  0084               	movwf	4
 16360  0149  3001               	movlw	1	; select bank2/3
 16361  014A  0085               	movwf	5
 16362  014B  0800               	movf	0,w
 16363  014C  0601               	xorwf	1,w
 16364  014D  1D03               	skipz
 16365  014E  29B3               	goto	i1l7096
 16366                           
 16367                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 16368  014F  0874               	movf	_DimmerLightsIntr,w
 16369  0150  0086               	movwf	6
 16370  0151  3001               	movlw	1	; select bank2/3
 16371  0152  0087               	movwf	7
 16372  0153  1101               	bcf	1,2
 16373  0154  2970               	goto	i1l7076
 16374  0155                     i1l7070:	
 16375                           ;Dimmer_B1.c: 154: }
 16376                           ;Dimmer_B1.c: 155: } else {
 16377                           
 16378                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 16379                           
 16380                           
 16381                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 16382  0155  0874               	movf	_DimmerLightsIntr,w
 16383  0156  0086               	movwf	6
 16384  0157  3001               	movlw	1	; select bank2/3
 16385  0158  0087               	movwf	7
 16386  0159  1E81               	btfss	1,5
 16387  015A  2976               	goto	i1l7078
 16388                           
 16389                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 16390  015B  0874               	movf	_DimmerLightsIntr,w
 16391  015C  3E04               	addlw	4
 16392  015D  0086               	movwf	6
 16393  015E  3001               	movlw	1	; select bank2/3
 16394  015F  0087               	movwf	7
 16395  0160  3001               	movlw	1
 16396  0161  0281               	subwf	1,f
 16397                           
 16398                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16399  0162  0874               	movf	_DimmerLightsIntr,w
 16400  0163  3E05               	addlw	5
 16401  0164  0086               	movwf	6
 16402  0165  3001               	movlw	1	; select bank2/3
 16403  0166  0087               	movwf	7
 16404  0167  0874               	movf	_DimmerLightsIntr,w
 16405  0168  3E04               	addlw	4
 16406  0169  0084               	movwf	4
 16407  016A  3001               	movlw	1	; select bank2/3
 16408  016B  0085               	movwf	5
 16409  016C  0800               	movf	0,w
 16410  016D  0201               	subwf	1,w
 16411  016E  1C03               	skipc
 16412  016F  29B3               	goto	i1l7096
 16413  0170                     i1l7076:	
 16414                           
 16415                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 16416  0170  0874               	movf	_DimmerLightsIntr,w
 16417  0171  0086               	movwf	6
 16418  0172  3001               	movlw	1	; select bank2/3
 16419  0173  0087               	movwf	7
 16420  0174  1081               	bcf	1,1
 16421                           
 16422                           ;Dimmer_B1.c: 160: }
 16423                           ;Dimmer_B1.c: 161: } else {
 16424  0175  29B3               	goto	i1l7096
 16425  0176                     i1l7078:	
 16426                           
 16427                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 16428  0176  3001               	movlw	1
 16429  0177  00F8               	movwf	??_setDimmerLights_IntrControl
 16430  0178  0874               	movf	_DimmerLightsIntr,w
 16431  0179  3E04               	addlw	4
 16432  017A  0086               	movwf	6
 16433  017B  3001               	movlw	1	; select bank2/3
 16434  017C  0087               	movwf	7
 16435  017D  0878               	movf	??_setDimmerLights_IntrControl,w
 16436  017E  0781               	addwf	1,f
 16437                           
 16438                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16439  017F  0874               	movf	_DimmerLightsIntr,w
 16440  0180  3E04               	addlw	4
 16441  0181  0086               	movwf	6
 16442  0182  3001               	movlw	1	; select bank2/3
 16443  0183  0087               	movwf	7
 16444  0184  0874               	movf	_DimmerLightsIntr,w
 16445  0185  3E06               	addlw	6
 16446  0186  0084               	movwf	4
 16447  0187  3001               	movlw	1	; select bank2/3
 16448  0188  0085               	movwf	5
 16449  0189  0800               	movf	0,w
 16450  018A  0201               	subwf	1,w
 16451  018B  1C03               	skipc
 16452  018C  29B3               	goto	i1l7096
 16453                           
 16454                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 16455  018D  0874               	movf	_DimmerLightsIntr,w
 16456  018E  0086               	movwf	6
 16457  018F  3001               	movlw	1	; select bank2/3
 16458  0190  0087               	movwf	7
 16459  0191  1081               	bcf	1,1
 16460                           
 16461                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 16462  0192  0874               	movf	_DimmerLightsIntr,w
 16463  0193  0086               	movwf	6
 16464  0194  3001               	movlw	1	; select bank2/3
 16465  0195  0087               	movwf	7
 16466  0196  1301               	bcf	1,6
 16467                           
 16468                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 16469  0197  0874               	movf	_DimmerLightsIntr,w
 16470  0198  3E09               	addlw	9
 16471  0199  0086               	movwf	6
 16472  019A  3001               	movlw	1	; select bank2/3
 16473  019B  0087               	movwf	7
 16474  019C  1501               	bsf	1,2
 16475                           
 16476                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 16477  019D  0873               	movf	_Dimmer,w
 16478  019E  0086               	movwf	6
 16479  019F  0187               	clrf	7
 16480  01A0  1401               	bsf	1,0
 16481                           
 16482                           ;Dimmer_B1.c: 169: if (lights == 1) {
 16483  01A1  087A               	movf	setDimmerLights_IntrControl@lights,w
 16484  01A2  3A01               	xorlw	1
 16485  01A3  1D03               	skipz
 16486  01A4  29A7               	goto	i1l7088
 16487                           
 16488                           ;Dimmer_B1.c: 170: RC7 = 0;
 16489  01A5  0020               	movlb	0	; select bank0
 16490  01A6  138E               	bcf	14,7	;volatile
 16491  01A7                     i1l7088:	
 16492                           
 16493                           ;Dimmer_B1.c: 172: }
 16494                           ;Dimmer_B1.c: 175: if (lights == 2) {
 16495  01A7  087A               	movf	setDimmerLights_IntrControl@lights,w
 16496  01A8  3A02               	xorlw	2
 16497  01A9  1D03               	skipz
 16498  01AA  29AD               	goto	i1l7092
 16499                           
 16500                           ;Dimmer_B1.c: 176: RA3 = 0;
 16501  01AB  0020               	movlb	0	; select bank0
 16502  01AC  118C               	bcf	12,3	;volatile
 16503  01AD                     i1l7092:	
 16504                           
 16505                           ;Dimmer_B1.c: 177: }
 16506                           ;Dimmer_B1.c: 180: if (lights == 3) {
 16507  01AD  087A               	movf	setDimmerLights_IntrControl@lights,w
 16508  01AE  3A03               	xorlw	3
 16509  01AF  1D03               	skipz
 16510  01B0  29B3               	goto	i1l7096
 16511                           
 16512                           ;Dimmer_B1.c: 181: RC6 = 0;
 16513  01B1  0020               	movlb	0	; select bank0
 16514  01B2  130E               	bcf	14,6	;volatile
 16515  01B3                     i1l7096:	
 16516                           ;Dimmer_B1.c: 182: }
 16517                           ;Dimmer_B1.c: 184: ;;
 16518                           
 16519                           
 16520                           ;Dimmer_B1.c: 185: }
 16521                           ;Dimmer_B1.c: 186: }
 16522                           ;Dimmer_B1.c: 187: }
 16523                           ;Dimmer_B1.c: 188: }
 16524                           ;Dimmer_B1.c: 189: }
 16525                           ;Dimmer_B1.c: 190: }
 16526                           ;Dimmer_B1.c: 191: }
 16527                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 16528  01B3  0874               	movf	_DimmerLightsIntr,w
 16529  01B4  3E08               	addlw	8
 16530  01B5  0086               	movwf	6
 16531  01B6  3001               	movlw	1	; select bank2/3
 16532  01B7  0087               	movwf	7
 16533  01B8  1E81               	btfss	1,5
 16534  01B9  29EA               	goto	i1l7118
 16535                           
 16536                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 16537  01BA  3001               	movlw	1
 16538  01BB  00F8               	movwf	??_setDimmerLights_IntrControl
 16539  01BC  0874               	movf	_DimmerLightsIntr,w
 16540  01BD  3E07               	addlw	7
 16541  01BE  0086               	movwf	6
 16542  01BF  3001               	movlw	1	; select bank2/3
 16543  01C0  0087               	movwf	7
 16544  01C1  0878               	movf	??_setDimmerLights_IntrControl,w
 16545  01C2  0781               	addwf	1,f
 16546                           
 16547                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 16548  01C3  0874               	movf	_DimmerLightsIntr,w
 16549  01C4  3E07               	addlw	7
 16550  01C5  0086               	movwf	6
 16551  01C6  3001               	movlw	1	; select bank2/3
 16552  01C7  0087               	movwf	7
 16553  01C8  3005               	movlw	5
 16554  01C9  0201               	subwf	1,w
 16555  01CA  1C03               	skipc
 16556  01CB  29EA               	goto	i1l7118
 16557                           
 16558                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 16559  01CC  0874               	movf	_DimmerLightsIntr,w
 16560  01CD  3E07               	addlw	7
 16561  01CE  0086               	movwf	6
 16562  01CF  3001               	movlw	1	; select bank2/3
 16563  01D0  0087               	movwf	7
 16564  01D1  0181               	clrf	1
 16565                           
 16566                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 16567  01D2  0874               	movf	_DimmerLightsIntr,w
 16568  01D3  3E08               	addlw	8
 16569  01D4  0086               	movwf	6
 16570  01D5  3001               	movlw	1	; select bank2/3
 16571  01D6  0087               	movwf	7
 16572  01D7  1281               	bcf	1,5
 16573                           
 16574                           ;Dimmer_B1.c: 199: if (lights == 1) {
 16575  01D8  087A               	movf	setDimmerLights_IntrControl@lights,w
 16576  01D9  3A01               	xorlw	1
 16577  01DA  1D03               	skipz
 16578  01DB  29DE               	goto	i1l7110
 16579                           
 16580                           ;Dimmer_B1.c: 200: RB4 = 0;
 16581  01DC  0020               	movlb	0	; select bank0
 16582  01DD  120D               	bcf	13,4	;volatile
 16583  01DE                     i1l7110:	
 16584                           ;Dimmer_B1.c: 201: ;;
 16585                           
 16586                           
 16587                           ;Dimmer_B1.c: 202: }
 16588                           ;Dimmer_B1.c: 205: if (lights == 2) {
 16589  01DE  087A               	movf	setDimmerLights_IntrControl@lights,w
 16590  01DF  3A02               	xorlw	2
 16591  01E0  1D03               	skipz
 16592  01E1  29E4               	goto	i1l7114
 16593                           
 16594                           ;Dimmer_B1.c: 206: RA7 = 0;
 16595  01E2  0020               	movlb	0	; select bank0
 16596  01E3  138C               	bcf	12,7	;volatile
 16597  01E4                     i1l7114:	
 16598                           
 16599                           ;Dimmer_B1.c: 207: }
 16600                           ;Dimmer_B1.c: 210: if (lights == 3) {
 16601  01E4  087A               	movf	setDimmerLights_IntrControl@lights,w
 16602  01E5  3A03               	xorlw	3
 16603  01E6  1D03               	skipz
 16604  01E7  29EA               	goto	i1l7118
 16605                           
 16606                           ;Dimmer_B1.c: 211: RB1 = 0;
 16607  01E8  0020               	movlb	0	; select bank0
 16608  01E9  108D               	bcf	13,1	;volatile
 16609  01EA                     i1l7118:	
 16610                           
 16611                           ;Dimmer_B1.c: 212: }
 16612                           ;Dimmer_B1.c: 214: }
 16613                           ;Dimmer_B1.c: 215: }
 16614                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 16615  01EA  0874               	movf	_DimmerLightsIntr,w
 16616  01EB  3E09               	addlw	9
 16617  01EC  0086               	movwf	6
 16618  01ED  3001               	movlw	1	; select bank2/3
 16619  01EE  0087               	movwf	7
 16620  01EF  1E81               	btfss	1,5
 16621  01F0  0008               	return
 16622                           
 16623                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 16624  01F1  3001               	movlw	1
 16625  01F2  00F8               	movwf	??_setDimmerLights_IntrControl
 16626  01F3  0874               	movf	_DimmerLightsIntr,w
 16627  01F4  3E0A               	addlw	10
 16628  01F5  0086               	movwf	6
 16629  01F6  3001               	movlw	1	; select bank2/3
 16630  01F7  0087               	movwf	7
 16631  01F8  0878               	movf	??_setDimmerLights_IntrControl,w
 16632  01F9  0781               	addwf	1,f
 16633                           
 16634                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 16635  01FA  0874               	movf	_DimmerLightsIntr,w
 16636  01FB  3E0A               	addlw	10
 16637  01FC  0086               	movwf	6
 16638  01FD  3001               	movlw	1	; select bank2/3
 16639  01FE  0087               	movwf	7
 16640  01FF  0801               	movf	1,w
 16641  0200  3A46               	xorlw	70
 16642  0201  1D03               	skipz
 16643  0202  0008               	return
 16644                           
 16645                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 16646  0203  0874               	movf	_DimmerLightsIntr,w
 16647  0204  3E0A               	addlw	10
 16648  0205  0086               	movwf	6
 16649  0206  3001               	movlw	1	; select bank2/3
 16650  0207  0087               	movwf	7
 16651  0208  0181               	clrf	1
 16652                           
 16653                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 16654  0209  0874               	movf	_DimmerLightsIntr,w
 16655  020A  3E09               	addlw	9
 16656  020B  0086               	movwf	6
 16657  020C  3001               	movlw	1	; select bank2/3
 16658  020D  0087               	movwf	7
 16659  020E  1281               	bcf	1,5
 16660  020F  0008               	return
 16661  0210                     __end_of_setDimmerLights_IntrControl:	
 16662                           
 16663                           	psect	text110
 16664  1151                     __ptext110:	
 16665 ;; *************** function _DimmerIntrPointSelect *****************
 16666 ;; Defined at:
 16667 ;;		line 72 in file "../src/Dimmer_B1.c"
 16668 ;; Parameters:    Size  Location     Type
 16669 ;;  lights          1    wreg     unsigned char 
 16670 ;; Auto vars:     Size  Location     Type
 16671 ;;  lights          1    1[COMMON] unsigned char 
 16672 ;; Return value:  Size  Location     Type
 16673 ;;		None               void
 16674 ;; Registers used:
 16675 ;;		wreg
 16676 ;; Tracked objects:
 16677 ;;		On entry : 0/0
 16678 ;;		On exit  : 0/0
 16679 ;;		Unchanged: 0/0
 16680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;Total ram usage:        2 bytes
 16686 ;; Hardware stack levels used:    1
 16687 ;; This function calls:
 16688 ;;		Nothing
 16689 ;; This function is called by:
 16690 ;;		_setDimmerLights_IntrControl
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           
 16695                           ;psect for function _DimmerIntrPointSelect
 16696  1151                     _DimmerIntrPointSelect:	
 16697                           
 16698                           ;incstack = 0
 16699                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16700                           ;DimmerIntrPointSelect@lights stored from wreg
 16701  1151  00F7               	movwf	DimmerIntrPointSelect@lights
 16702                           
 16703                           ;Dimmer_B1.c: 74: if (lights == 1) {
 16704  1152  0877               	movf	DimmerIntrPointSelect@lights,w
 16705  1153  3A01               	xorlw	1
 16706  1154  1D03               	skipz
 16707  1155  295A               	goto	i1l820
 16708                           
 16709                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 16710  1156  3035               	movlw	_DimmerLights1& (0+255)
 16711  1157  00F6               	movwf	??_DimmerIntrPointSelect
 16712  1158  0876               	movf	??_DimmerIntrPointSelect,w
 16713  1159  00F4               	movwf	_DimmerLightsIntr
 16714  115A                     i1l820:	
 16715                           
 16716                           ;Dimmer_B1.c: 76: }
 16717                           ;Dimmer_B1.c: 79: if (lights == 2) {
 16718  115A  0877               	movf	DimmerIntrPointSelect@lights,w
 16719  115B  3A02               	xorlw	2
 16720  115C  1D03               	skipz
 16721  115D  2962               	goto	i1l821
 16722                           
 16723                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 16724  115E  3044               	movlw	_DimmerLights2& (0+255)
 16725  115F  00F6               	movwf	??_DimmerIntrPointSelect
 16726  1160  0876               	movf	??_DimmerIntrPointSelect,w
 16727  1161  00F4               	movwf	_DimmerLightsIntr
 16728  1162                     i1l821:	
 16729                           
 16730                           ;Dimmer_B1.c: 81: }
 16731                           ;Dimmer_B1.c: 85: if (lights == 3) {
 16732  1162  0877               	movf	DimmerIntrPointSelect@lights,w
 16733  1163  3A03               	xorlw	3
 16734  1164  1D03               	skipz
 16735  1165  0008               	return
 16736                           
 16737                           ;Dimmer_B1.c: 86: DimmerLightsIntr = &DimmerLights3;
 16738  1166  3053               	movlw	_DimmerLights3& (0+255)
 16739  1167  00F6               	movwf	??_DimmerIntrPointSelect
 16740  1168  0876               	movf	??_DimmerIntrPointSelect,w
 16741  1169  00F4               	movwf	_DimmerLightsIntr
 16742  116A  0008               	return
 16743  116B                     __end_of_DimmerIntrPointSelect:	
 16744                           
 16745                           	psect	text111
 16746  1EE8                     __ptext111:	
 16747 ;; *************** function _IOC_ISR *****************
 16748 ;; Defined at:
 16749 ;;		line 401 in file "../src/MCU_B1.c"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;		None
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;		None
 16754 ;; Return value:  Size  Location     Type
 16755 ;;		None               void
 16756 ;; Registers used:
 16757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;Total ram usage:        0 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    3
 16770 ;; This function calls:
 16771 ;;		_setDimmerReClock
 16772 ;; This function is called by:
 16773 ;;		_ISR
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           
 16778                           ;psect for function _IOC_ISR
 16779  1EE8                     _IOC_ISR:	
 16780                           
 16781                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCBF2 == 1) {
 16782                           
 16783                           ;incstack = 0
 16784                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16785  1EE8  1D8B               	btfss	11,3	;volatile
 16786  1EE9  0008               	return
 16787  1EEA  0027               	movlb	7	; select bank7
 16788  1EEB  1D16               	btfss	22,2	;volatile
 16789  1EEC  0008               	return
 16790                           
 16791                           ;MCU_B1.c: 403: IOCBF2 = 0;
 16792  1EED  1116               	bcf	22,2	;volatile
 16793                           
 16794                           ;MCU_B1.c: 404: IOCIF = 0;
 16795  1EEE  100B               	bcf	11,0	;volatile
 16796                           
 16797                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 16798  1EEF  0021               	movlb	1	; select bank1
 16799  1EF0  1C20               	btfss	_myMain^(0+128),0
 16800  1EF1  0008               	return
 16801                           
 16802                           ;MCU_B1.c: 407: setDimmerReClock();
 16803  1EF2  319E  2694         	fcall	_setDimmerReClock
 16804  1EF4  0008               	return
 16805  1EF5                     __end_of_IOC_ISR:	
 16806                           
 16807                           	psect	text112
 16808  1E94                     __ptext112:	
 16809 ;; *************** function _setDimmerReClock *****************
 16810 ;; Defined at:
 16811 ;;		line 244 in file "../src/MCU_B1.c"
 16812 ;; Parameters:    Size  Location     Type
 16813 ;;		None
 16814 ;; Auto vars:     Size  Location     Type
 16815 ;;		None
 16816 ;; Return value:  Size  Location     Type
 16817 ;;		None               void
 16818 ;; Registers used:
 16819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16820 ;; Tracked objects:
 16821 ;;		On entry : 0/0
 16822 ;;		On exit  : 0/0
 16823 ;;		Unchanged: 0/0
 16824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;Total ram usage:        0 bytes
 16830 ;; Hardware stack levels used:    1
 16831 ;; Hardware stack levels required when called:    2
 16832 ;; This function calls:
 16833 ;;		_setDimmerLights_IntrIOC_GO
 16834 ;; This function is called by:
 16835 ;;		_IOC_ISR
 16836 ;; This function uses a non-reentrant model
 16837 ;;
 16838                           
 16839                           
 16840                           ;psect for function _setDimmerReClock
 16841  1E94                     _setDimmerReClock:	
 16842                           
 16843                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 16844                           
 16845                           ;incstack = 0
 16846                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16847  1E94  3001               	movlw	1
 16848  1E95  3194  241E  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16849                           
 16850                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 16851  1E98  3002               	movlw	2
 16852  1E99  3194  241E  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16853                           
 16854                           ;MCU_B1.c: 257: setDimmerLights_IntrIOC_GO(3);
 16855  1E9C  3003               	movlw	3
 16856  1E9D  3194  241E         	fcall	_setDimmerLights_IntrIOC_GO
 16857  1E9F  0008               	return
 16858  1EA0                     __end_of_setDimmerReClock:	
 16859                           
 16860                           	psect	text113
 16861  141E                     __ptext113:	
 16862 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16863 ;; Defined at:
 16864 ;;		line 28 in file "../src/Dimmer_B1.c"
 16865 ;; Parameters:    Size  Location     Type
 16866 ;;  lights          1    wreg     unsigned char 
 16867 ;; Auto vars:     Size  Location     Type
 16868 ;;  lights          1    2[COMMON] unsigned char 
 16869 ;; Return value:  Size  Location     Type
 16870 ;;		None               void
 16871 ;; Registers used:
 16872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16873 ;; Tracked objects:
 16874 ;;		On entry : 0/0
 16875 ;;		On exit  : 0/0
 16876 ;;		Unchanged: 0/0
 16877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;Total ram usage:        1 bytes
 16883 ;; Hardware stack levels used:    1
 16884 ;; Hardware stack levels required when called:    1
 16885 ;; This function calls:
 16886 ;;		_DimmerIntrIOCPointSelect
 16887 ;; This function is called by:
 16888 ;;		_setDimmerReClock
 16889 ;; This function uses a non-reentrant model
 16890 ;;
 16891                           
 16892                           
 16893                           ;psect for function _setDimmerLights_IntrIOC_GO
 16894  141E                     _setDimmerLights_IntrIOC_GO:	
 16895                           
 16896                           ;incstack = 0
 16897                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16898                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16899  141E  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 16900                           
 16901                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16902  141F  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16903  1420  3191  21A0  3194   	fcall	_DimmerIntrIOCPointSelect
 16904                           
 16905                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16906  1423  0021               	movlb	1	; select bank1
 16907  1424  0856               	movf	_DimmerLightsIntrIOC^(0+128),w
 16908  1425  0086               	movwf	6
 16909  1426  3001               	movlw	1	; select bank2/3
 16910  1427  0087               	movwf	7
 16911  1428  1801               	btfsc	1,0
 16912  1429  0008               	return
 16913  142A  0856               	movf	_DimmerLightsIntrIOC^(0+128),w
 16914  142B  3E09               	addlw	9
 16915  142C  0086               	movwf	6
 16916  142D  3001               	movlw	1	; select bank2/3
 16917  142E  0087               	movwf	7
 16918  142F  1A81               	btfsc	1,5
 16919  1430  0008               	return
 16920                           
 16921                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16922  1431  0856               	movf	_DimmerLightsIntrIOC^(0+128),w
 16923  1432  0086               	movwf	6
 16924  1433  3001               	movlw	1	; select bank2/3
 16925  1434  0087               	movwf	7
 16926  1435  1401               	bsf	1,0
 16927                           
 16928                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16929  1436  0856               	movf	_DimmerLightsIntrIOC^(0+128),w
 16930  1437  3E09               	addlw	9
 16931  1438  0086               	movwf	6
 16932  1439  3001               	movlw	1	; select bank2/3
 16933  143A  0087               	movwf	7
 16934  143B  1681               	bsf	1,5
 16935                           
 16936                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 16937  143C  0020               	movlb	0	; select bank0
 16938  143D  1D0D               	btfss	13,2	;volatile
 16939  143E  2C46               	goto	i1l6612
 16940                           
 16941                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 16942  143F  0873               	movf	_Dimmer,w
 16943  1440  3E02               	addlw	2
 16944  1441  0086               	movwf	6
 16945  1442  0187               	clrf	7
 16946  1443  0181               	clrf	1
 16947  1444  0A81               	incf	1,f
 16948                           
 16949                           ;Dimmer_B1.c: 37: } else {
 16950  1445  0008               	return
 16951  1446                     i1l6612:	
 16952                           
 16953                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 16954  1446  0873               	movf	_Dimmer,w
 16955  1447  3E02               	addlw	2
 16956  1448  0086               	movwf	6
 16957  1449  0187               	clrf	7
 16958  144A  0181               	clrf	1
 16959  144B  0008               	return
 16960  144C                     __end_of_setDimmerLights_IntrIOC_GO:	
 16961                           
 16962                           	psect	text114
 16963  11A0                     __ptext114:	
 16964 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16965 ;; Defined at:
 16966 ;;		line 8 in file "../src/Dimmer_B1.c"
 16967 ;; Parameters:    Size  Location     Type
 16968 ;;  lights          1    wreg     unsigned char 
 16969 ;; Auto vars:     Size  Location     Type
 16970 ;;  lights          1    1[COMMON] unsigned char 
 16971 ;; Return value:  Size  Location     Type
 16972 ;;		None               void
 16973 ;; Registers used:
 16974 ;;		wreg
 16975 ;; Tracked objects:
 16976 ;;		On entry : 0/0
 16977 ;;		On exit  : 0/0
 16978 ;;		Unchanged: 0/0
 16979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;Total ram usage:        2 bytes
 16985 ;; Hardware stack levels used:    1
 16986 ;; This function calls:
 16987 ;;		Nothing
 16988 ;; This function is called by:
 16989 ;;		_setDimmerLights_IntrIOC_GO
 16990 ;; This function uses a non-reentrant model
 16991 ;;
 16992                           
 16993                           
 16994                           ;psect for function _DimmerIntrIOCPointSelect
 16995  11A0                     _DimmerIntrIOCPointSelect:	
 16996                           
 16997                           ;incstack = 0
 16998                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16999                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17000  11A0  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 17001                           
 17002                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17003  11A1  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17004  11A2  3A01               	xorlw	1
 17005  11A3  1D03               	skipz
 17006  11A4  29AA               	goto	i1l808
 17007                           
 17008                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17009  11A5  3035               	movlw	_DimmerLights1& (0+255)
 17010  11A6  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17011  11A7  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17012  11A8  0021               	movlb	1	; select bank1
 17013  11A9  00D6               	movwf	_DimmerLightsIntrIOC^(0+128)
 17014  11AA                     i1l808:	
 17015                           
 17016                           ;Dimmer_B1.c: 12: }
 17017                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17018  11AA  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17019  11AB  3A02               	xorlw	2
 17020  11AC  1D03               	skipz
 17021  11AD  29B3               	goto	i1l809
 17022                           
 17023                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17024  11AE  3044               	movlw	_DimmerLights2& (0+255)
 17025  11AF  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17026  11B0  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17027  11B1  0021               	movlb	1	; select bank1
 17028  11B2  00D6               	movwf	_DimmerLightsIntrIOC^(0+128)
 17029  11B3                     i1l809:	
 17030                           
 17031                           ;Dimmer_B1.c: 17: }
 17032                           ;Dimmer_B1.c: 21: if (lights == 3) {
 17033  11B3  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17034  11B4  3A03               	xorlw	3
 17035  11B5  1D03               	skipz
 17036  11B6  0008               	return
 17037                           
 17038                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 17039  11B7  3053               	movlw	_DimmerLights3& (0+255)
 17040  11B8  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17041  11B9  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17042  11BA  0021               	movlb	1	; select bank1
 17043  11BB  00D6               	movwf	_DimmerLightsIntrIOC^(0+128)
 17044  11BC  0008               	return
 17045  11BD                     __end_of_DimmerIntrIOCPointSelect:	
 17046  007E                     btemp	set	126	;btemp
 17047  007E                     pic14e$flags	set	126
 17048  007E                     wtemp	set	126
 17049  007E                     wtemp0	set	126
 17050  0080                     wtemp1	set	128
 17051  0082                     wtemp2	set	130
 17052  0084                     wtemp3	set	132
 17053  0086                     wtemp4	set	134
 17054  0088                     wtemp5	set	136
 17055  007F                     wtemp6	set	127
 17056  007E                     ttemp	set	126
 17057  007E                     ttemp0	set	126
 17058  0081                     ttemp1	set	129
 17059  0084                     ttemp2	set	132
 17060  0087                     ttemp3	set	135
 17061  007F                     ttemp4	set	127
 17062  007E                     ltemp	set	126
 17063  007E                     ltemp0	set	126
 17064  0082                     ltemp1	set	130
 17065  0086                     ltemp2	set	134
 17066  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     75      78
    BANK1            80      0      78
    BANK2            80      0      78
    BANK3            80      4      68
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK2[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw3(BANK1[2]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  111871
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2130
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     186
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   30056
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   30056
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0   13168
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12581
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    2053
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1098
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1098
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38719
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38719
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37776
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35863
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14899
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1741
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15284
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15067
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14974
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1253
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1253
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13413
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0   13246
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8910
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1897
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1067
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     167
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0     124
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0     124
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13928
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13928
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     883
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     987
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0     124
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0     124
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     286
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 28 14:06:32 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1296                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 10A2               _getDimmerLights_StatusFlag 108F  
                 __end_of_setDelayOff_GO 08DC                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0E1E                             ___ftadd@sign 0048  
                                    l110 17D8                                      l120 16AB  
                                    l112 17EC                                      l121 16A7  
                                    l122 1695                                      l124 16A5  
                                    l402 1301                                      l308 0C4A  
                                    l309 0C8D                                      l283 09D6  
                                    l358 10BF                                      l359 10C0  
                                    l867 118F                                      l868 1197  
                                    _GIE 005F                                      _CRC 00D2  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0021                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0070                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00BF                                      _ISR 0004  
                                    _WDT 00D0                                      _Sw1 01C5  
                                    _Sw2 01CE                                      _Sw3 01D7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 10C9  
                  _Buzzer_Initialization 1E30                          __end_of_ADC_Set 0800  
                        ?_DelayTimejudge 0076                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0C93  
                  _setDimmerLights_AdjRF 12D9                    _setDimmerLights_AdjGo 1F9B  
                                   ?_ISR 0076                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1EF5                             ___ftdiv@sign 003D  
                                   l2210 0475                                     l3020 096F  
                                   l2301 1508                                     l2215 04AD  
                                   l2216 04A9                                     l3026 0986  
                                   l1442 1474                                     l2218 04E9  
               ?_DimmerLightsPointSelect 0076                                     l1451 161A  
                                   l1429 1233                                     l1613 1578  
                                   l2264 14AA                                     l3049 03FF  
                                   l2249 0A12                                     l2259 0A68  
                                   l1628 1792                          __end_of_IOC_Set 1F02  
                                   l2286 1240                                     l2287 124A  
                                   l2740 090F                                     l2716 0D44  
                                   l2658 1F3E                                     l2690 0242  
                                   l8012 11C8                                     l5612 094C  
                                   l5700 0411                                     l5622 0974  
                                   l5614 0956                                     l9000 15C2  
                                   l8016 11D1                                     l8120 174A  
                                   l8112 1739                                     l8104 171B  
                                   l5624 097C                                     l5616 095B  
                                   l5608 0945                                     l5704 0423  
                                   l5800 0741                                     l8032 13C3  
                                   l9010 15D2                                     l8106 1727  
                                   l5730 0ED5                                     l5714 043E  
                                   l9004 15C8                                     l8116 1742  
                                   l5724 0EBF                                     l8060 1336  
                                   l9014 15D8                                     l5654 0388  
                                   l9008 15CF                                     l5752 0F2F  
                                   l5744 0F16                                     l5816 0DB0  
                                   l8072 11E5                                     l8064 133F  
                                   l8056 132D                                     l8312 0C12  
                                   l8304 0C06                                     l9200 16EF  
                                   l5664 039E                                     l5850 0E15  
                                   l5842 0DFB                                     l5834 0DE0  
                                   l9130 0E36                                     l5682 03CB  
                                   l5658 038F                                     l8242 08B8  
                                   l5844 0E04                                     l5836 0DEE  
                                   l8172 0B32                                     l8076 11EE  
                                   l8308 0C0C                                     l8316 0C18  
                                   l9140 0E42                                     l9204 16F6  
                                   l5684 03D5                                     l5676 03B8  
                                   l5772 06E2                                     l8332 14BA  
                                   l8244 08C5                                     l8094 1713  
                                   l5846 0E07                                     l8270 0BC7  
                                   l8414 0CE5                                     l9142 0E45  
                                   l5694 03F1                                     l5686 03DA  
                                   l5766 06CC                                     l8238 08B2  
                                   l8088 1708                                     l9152 0E51  
                                   l9128 0E33                                     l5696 03FB  
                                   l5688 03DE                                     l5784 071D  
                                   l8248 08D1                                     l8424 0787  
                                   l8274 0BCD                                     l8266 0BC1  
                                   l9162 0E74                                     l9154 0E56  
                                   l8602 09BE                                     l8434 07AB  
                                   l8700 127D                                     l8292 0BE9  
                                   l8284 0BDD                                     l9164 0E7A  
                                   l9260 15E5                                     l8380 1116  
                                   l8620 09F2                                     l8612 09E5  
                                   l5796 0739                                     l5788 0725  
                                   l9340 048C                                     l9420 1F43  
                                   l8470 1140                                     l8702 1280  
                                   l8278 0BD3                                     l9174 0EA2  
                                   l8382 111A                                     l8614 09E9  
                                   l8606 09DC                                     l8462 14F6  
                                   l8438 07C1                                     l8550 0FCA  
                                   l9406 051F                                     l9318 0468  
                                   l8472 1143                                     l8288 0BE3  
                                   l8296 0BEF                                     l8640 0C2F  
                                   l8616 09EC                                     l8608 09DF  
                                   l8544 0FAF                                     l9424 1F49  
                                   l9440 0236                                     l8706 1286  
                                   l9266 15FA                                     l8634 0C26  
                                   l8642 0C32                                     l8570 0FF7  
                                   l8562 0FE5                                     l8554 0FD3  
                                   l8476 1149                                     l9196 16E8  
                                   l8492 0812                                     l8652 0C47  
                                   l8636 0C29                                     l9436 0229  
                  _myMain_Initialization 1F4C                                     l9526 167F  
                                   l8726 109B                                     l8486 0809  
                                   l8670 0C73                                     l8654 0C41  
                                   l8582 09A4                                     l8566 0FEE  
                                   l8558 0FDC                                     l8488 080C  
                                   l8584 09A7                                     l8824 0A15  
                                   l9376 04CE                                     l9480 02DB  
                                   l9456 0270                                     l8738 1533  
                                   l8682 0C8F                                     l9378 04D0  
                                   l9394 04FE                                     l8930 08EC  
                                   l8914 0D85                                     l9466 029D  
                                   l9490 030D                                     l8692 1312  
                                   l7972 12C2                                     l8668 0C5B  
                                   l8588 09AD                                     l8852 0A5E  
                                   l8836 0A2D                                     l8932 08EF  
                                   l8694 131D                                     l8846 0A53  
                                   l8942 08FB                                     l8870 0D21  
                                   l8784 145C                                     l8944 08FE  
                                   l8872 0D24                                     l9680 177B  
                                   _CFGS 0CAE                                     l7994 106E  
                                   l8954 090A                                     l8882 0D30  
                                   l9690 1793                                     l8884 0D33  
                                   l9598 05A3                                     l7998 1074  
                                   l8894 0D3F                                     l8984 0B8D  
                           __CFG_WDTE$ON 0000                                     l8998 15BF  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4025 098D                                     u4205 03DF  
                                   u4305 0EE7                                     u4145 03B9  
                                   u4315 0EF7                                     u4235 03F2  
                                   u4325 0F17                                     u4335 0F26  
                                   u4175 03CC                                     u4415 0726  
                                   u4345 0F30                                     u4425 072C  
                                   _PEIE 005E                                     u4525 0DE1  
                                   u4455 0742                                     u4465 0748  
                                   u4385 06EE                                     u4555 0DFC  
                                   u4395 06FE                                     u4495 0DB7  
                                   u8105 173A                                     u3955 0951  
                                   u3975 096A                                     u8065 171E  
                                   u8170 0AE0                                     u3995 0977  
                                   u8085 1728                                     u8095 1732  
                                   u8175 0ADE                                     u8475 10D8  
                                   u8915 1307                                     u7955 13AF  
                                   _LWLO 0CAD                                     _RFSW 00D7  
                                   u9875 0486                                     _RSSI 00D8  
                                   _WREN 0CAA                                     _Buz1 00B3  
                                   _main 155A                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0AD6                          __end_of_RF_Main 1E39  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1E89  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1E94                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 151D  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 007B  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 001A                         __end_of_LED_Main 1F9B  
          __end_of_DimmerIntrPointSelect 116B                    ?_setDimmerLights_Main 0076  
                        ?_setDelayOff_GO 002A                                    ?_main 01E0  
                        __end_of___awdiv 1751                          __end_of___ftadd 0456  
                        __end_of___ftdiv 0F51                                    u10005 050F  
                        __end_of___ftmul 0769                                    u10265 1675  
                                  u10425 1762                                    u10435 178A  
                        ___awdiv@divisor 0020                                    u10455 17A2  
                                  _T1CON 0018                                    u10385 122A  
                        __end_of___fttol 0E1E             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l820 115A  
                                  i1l821 1162                                    i1l808 11AA  
                                  i1l809 11B3                   _setDimmerLights_Switch 1F5B  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EB                                    _RFSW2 00EC  
                                  _RFSW3 00ED                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0076                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 10DE  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 144C  
             _setDimmerLights_IntrIOC_GO 141E                         __end_of_TMR1_ISR 13F1  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 1EDC  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0077  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 108F  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0076                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1FCC                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0076                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                     _Sw_DimmerOnFunc$6040 0064  
                   _Sw_DimmerOnFunc$6041 0065                     _Sw_DimmerOnFunc$6039 0063  
                     _setRF_DimmerLights 0AD6              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0076               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 000C  
                           ?_my_MainTime 0076                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0822  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0076                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 159B  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E49  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D11                     _setSw_Initialization 1E5B  
                                 ??_main 006B                            ___fttol@sign1 0053  
                           ?_setLog_Code 0076                  _setControl_Lights_Table 0F51  
                 ?_Buzzer_Initialization 0076        __size_of_DimmerIntrIOCPointSelect 001D  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0076                                ??_IOC_ISR 0079  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 11A0  
                 ?_setDimmerLights_AdjRF 0076                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0024                     ??_setRF_DimmerLights 005E  
                            _DlyOff_Main 0A6B                   ?_myMain_Initialization 0076  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 12D9  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 099D  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F6B  
                                 i1l7110 01DE                                   i1l7022 0098  
                                 i1l7030 00A5                                   i1l7114 01E4  
                                 i1l7050 00F5                                   i1l7026 009E  
                                 i1l7118 01EA                                   i1l7062 012A  
                                 i1l7070 0155                                   i1l7054 0108  
                                 i1l7048 00EF                                   i1l7056 010E  
                                 i1l7066 0141                                   i1l6612 1446  
                                 i1l7092 01AD                                   i1l7076 0170  
                                 i1l7078 0176                                   i1l7088 01A7  
                                 i1l7096 01B3                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u634_25 0073                                   u748_25 13EB  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1120                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E49  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 10F3  
                                 _Dimmer 0073                                   _DlySw1 00E5  
                                 _DlySw2 00E7                                   _DlySw3 00E9  
             __end_of_Mcu_Initialization 2000                      __end_of_Buzzer_Main 16B2  
                                 _Memory 01A0                                   _Timer1 00CB  
     __end_of_setDimmerLights_TriggerAdj 1FBB               _setDimmerLights_TriggerAdj 1FAB  
                                 ___bmul 106B            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 001D                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0076  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DC                                   _s_data 00DD  
                                 _setLED 0BB1                                   _myMain 00A0  
              _setDimmerLights_Main$2380 0066                         _DimmerLightsIntr 0074  
              _setDimmerLights_Main$2388 0067                _setDimmerLights_Main$2389 0068  
                  ?_setSw_Initialization 0076                    setDimmerLights@status 0023  
                       ___awdiv@quotient 0027                                   _setBuz 17A7  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0076  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 0210              _setDimmerLights_IntrControl 0045  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0076                    __end_of_SwPointSelect 11F7  
                          ?_setRF_Enable 0076                          _RfSWPointSelect 1235  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 007A  
            __size_of_DimmerLights_Close 0013                  __size_of_LedPointSelect 0026  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1F3D                        ?_Sw_DimmerAdjFunc 0076  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 087D         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0041              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0076                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0076                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0076  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0076  
         DimmerIntrIOCPointSelect@lights 0077                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1255                                ?_TMR1_ISR 0076  
                              ?_TMR1_Set 0076             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1F7B                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0076  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0023  
                              ?_WDT_Main 0076                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 106B                 __end_of_setDimmerReClock 1EA0  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0076  
                      ?_CC2500_WriteByte 0076                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D3                           _DimmerLights22 00D4  
                         _DimmerLights33 00D5                     __size_of_setLED_Main 004B  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006B  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0076  
                            _Buzzer_Main 1668                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0076                                  ?_IO_Set 0076  
                             ??_LED_Main 0024                            ?_setMemory_GO 0076  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1EAC  
                          ??_Switch_Main 006B                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 006B                        LedPointSelect@led 0020  
                 __size_of_DelayOff_Main 000C                     __size_of_setRF_Learn 0008  
                            setBuz@count 002C                               __pmaintext 155A  
                    _CC2500_WriteCommand 1138                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 001B                         ??_setDelayOff_GO 002C  
                   __size_of_my_MainTime 0056            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 007B                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0076                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 07F9                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1E94  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 14E2  
                __end_of_RfSWPointSelect 1255                        Sw_DimmerOnFunc@sw 0067  
                                _IOC_ISR 1EE8                                  _IOC_Set 1EF5  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0076  
                      _Flash_Memory_Main 1216                        _Flash_Memory_Read 116B  
            ?_setDimmerLights_IntrIOC_GO 0076                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0076  
                                _RF_Data 0120                                  _RF_Main 1E36  
                     ?_Flash_Memory_Main 0076                       ?_Flash_Memory_Read 0076  
                                _WDT_Set 1E7E          __end_of_setControl_Lights_Table 1000  
                             ??_Fosc_Set 0020                              ?_TouchPower 0076  
                        _Sw_DimmerOnFunc 0D11                          _setPercentValue 1622  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0076  
                                _Dimmer1 00E2             __end_of_CC2500_FrequencyCabr 1EAC  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1FDD  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0162                                  _VarLED2 0166  
                                _VarLED3 016A                        __end_of_getRxData 0A6B  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 11BD  
        __end_of_setDimmerLights_Trigger 1F7B                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1F6B  
                                ___awdiv 16FD                                  ___ftadd 0360  
                         ??_setSw_Enable 0022                                  ___ftdiv 0EA8  
                                ___ftmul 06B5                                  ___fttol 0D97  
                    __end_of_Switch_Main 1EE8                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0071                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 1751                                  __ptext2 1348  
                                __ptext3 1F02                                  __ptext4 1F4C  
                                __ptext5 107D                                  __ptext6 0002  
                                __ptext7 1EDC                                  __ptext8 0210  
                                __ptext9 1E63                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0066                    _DimmerIntrPointSelect 1151  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 1235  
              __end_of_Flash_Memory_Read 1185                               _setRF_Main 0456  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1EB8  
                      _DimmerLights_Main 1F2E           __size_of_DlyOff_Initialization 000A  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1E7E  
             __end_of_CC2500_ClearRXFIFO 1E3D               __end_of_CC2500_ClearTXFIFO 1E41  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0076  
                     ?_DimmerLights_Main 0076                                  _product 006D  
                         _LedPointSelect 1322                      _DelayOffPointSelect 11BD  
                                clrloop0 1E56           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1FEE                     end_of_initialization 0041  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1371  
                          _DelayTime_1us 12FC                        __end_of_setTxData 06B5  
             __end_of_Flash_Memory_Write 147B                                  init_ram 1E4F  
                     ?_CC2500_InitSetREG 0076                      ??_DimmerLights_Main 006B  
                   Flash_Memory_Read@ret 0023                                  initloop 1E50  
                             _setSw_Main 0210                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 0800                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1FBB                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0076                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0C22  
                          _CC2500_TxData 099D                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1F10              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0076  
                    _Flash_Memory_Modify 15DE                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E6B                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1F3D  
                     _Mcu_Initialization 1FEE                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0076                         ?_RfSWPointSelect 0076  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1348  
                __end_of_Sw_DimmerOnFunc 0D97                  __end_of_setPercentValue 1668  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 139B  
                    ?_Mcu_Initialization 0076                     ?_Flash_Memory_Modify 0076  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 151D                     ?_Flash_Memory_Unlock 0076  
              __end_of_CC2500_ReadStatus 0822                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1138                     _setRF_Initialization 1E89  
                            _Switch_Main 1EDC                        __size_of_LED_Main 0010  
                         ?_CC2500_RxData 0076                           ?_CC2500_TxData 0076  
                _DimmerLightsPointSelect 1185                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 10DE                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0076  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 107D  
              __size_of_Sw_DimmerAdjFunc 0060                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 11A0                        __size_of_TMR1_ISR 002C  
                 ?_DimmerIntrPointSelect 0076                        __size_of_TMR1_Set 000C  
                   __end_of_setMemory_GO 1109            __size_of_setDimmerLights_Main 008A  
                         __end_of_setLED 0C22                           __end_of_setBuz 1800  
        _getDimmerLights_StatusFlag$2424 0022                     _CC2500_FrequencyCabr 1EA0  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0076  
                        _setRFSW_Control 0769                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0076                      start_initialization 0015  
                      _setRF_DimmerValue 14AD                          ?_LedPointSelect 0076  
             __end_of_DimmerLights_Close 10B5                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0079  
                     ?_setRF_DimmerValue 0076               __end_of_CC2500_InitPATable 1216  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setSw_Enable 1371                             ?_Buzzer_Main 0076  
                     _set_TimeoutCleared 1066                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 00DE  
                            ?_setSw_Main 0076                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0076                     __end_of_setSw_Status 1F2E  
                     Sw_DimmerAdjFunc@sw 0029                    ?_setRF_Initialization 0076  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0014                      ?_set_TimeoutCleared 0076  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D9  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00DA                              __pdataBANK4 0220  
                               ??_setLED 0022                                 ?_ADC_Set 0076  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1E41  
             __size_of_DimmerLights_Main 000F                __end_of_setRF_DimmerValue 14E2  
                  ?_CC2500_FrequencyCabr 0076                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0076                          _setRF_Main$5086 0068  
                            __pbssCOMMON 0070                                 ?_IOC_Set 0076  
                              ___latbits 0003                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0076                            __pcstackBANK0 0020  
                          __pcstackBANK3 01E0                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0076                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007E  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0076                                 ?_WDT_Set 0076  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0135  
                          _DimmerLights2 0144                            _DimmerLights3 0153  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006D                            ??_my_MainTime 002D  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0076  
                    __size_of_setRF_Main 00DB                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0076                                _getBuz_GO 1FCC  
    __end_of_Flash_Memory_Initialization 05F8              _Flash_Memory_Initialization 0531  
                               ?___awdiv 0020                                __ptext100 1E39  
                              __ptext101 1138                                __ptext110 1151  
                              __ptext102 1066                                __ptext111 1EE8  
                              __ptext103 10C9                                __ptext112 1E94  
                              __ptext104 10B5                                __ptext113 141E  
                              __ptext105 1668                                __ptext114 11A0  
                              __ptext106 1E30                                __ptext108 13C5  
                              __ptext109 0045                                 ?___ftadd 003E  
                              _getRxData 0A02                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 07F9            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1E33  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1F4C  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 0150             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12FC            __end_of_setDimmerLights_AdjGo 1FAB  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00DB  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1F5B                             _setRF_Enable 1F02  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 11DA  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 16FD  
                    _DimmerLightsIntrIOC 00D6                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1F8B  
                        SwPointSelect@sw 0021                                clear_ram0 1E55  
               CC2500_InitPATable@loop_d 0027                                _setTxData 05F8  
    __end_of_DimmerLights_Initialization 12B7              _DimmerLights_Initialization 1296  
                     _CC2500_ClearRXFIFO 1E39                       _CC2500_ClearTXFIFO 1E3D  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E6B  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 144C                               ?_getRxData 0076  
                               _TMR1_ISR 13C5                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1ED0  
                       _Sw_DimmerAdjFunc 08DC                      ?_CC2500_ClearRXFIFO 0076  
                    ?_CC2500_ClearTXFIFO 0076                      __end_of_my_MainTime 17A7  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CE  
            __end_of_CC2500_WriteCommand 1151                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 107D                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0076                         _Sw_DimmerOffFunc 0B42  
                  _Sw_DimmerAdjFunc$6051 0025                    _Sw_DimmerAdjFunc$6052 0026  
                  _Sw_DimmerAdjFunc$6053 0027                  __size_of_setDelayOff_GO 005F  
                  __size_of_setSw_Enable 0029                                 _DelayOff 0072  
                           setSw_Main@sw 006A         setDimmerLights_IntrIOC_GO@lights 0078  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0076  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1ED0  
                         ?_SwPointSelect 0076                           setLED_Main@led 0023  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 14AD  
                  _DlyOff_Initialization 1E74                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1E45                         __size_of_WDT_Set 000B  
                  _Switch_Initialization 1FDD                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0024                           _setRFSW_Status 1F10  
                           _setMemory_GO 10F3                     __size_of_Buzzer_Main 004A  
                             ?_setTxData 0076                             ?_Switch_Main 0076  
             ??_DimmerIntrIOCPointSelect 0076                         _CC2500_WriteByte 10B5  
           Flash_Memory_Initialization@i 005E                        setRFSW_Control@sw 0063  
                              setLED@led 0022                  ??_DimmerIntrPointSelect 0076  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0076                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1348                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 12B7  
                       ??_LedPointSelect 0020                                 ___ftpack 093C  
                           _setSw_Status 1F1F                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 16B2  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0B42  
               ?_DelayOff_Initialization 0076                         setDelayOff_GO@sw 002E  
                               __ptext10 0D11                                 __ptext11 0B42  
                               __ptext20 0A02                                 __ptext12 08DC  
                               __ptext21 147B                                 __ptext13 1FAB  
                               __ptext30 0822                                 __ptext22 0F51  
                               __ptext14 1F9B                                 __ptext31 06B5  
                               __ptext23 0769                                 __ptext15 1FDD  
                               __ptext40 1FEE                                 __ptext32 0360  
                               __ptext24 087D                                 __ptext16 1E5B  
                               __ptext41 1E7E                                 __ptext33 1FCC  
                               __ptext25 139B                                 __ptext17 1F3D  
                               __ptext50 1FBB                                 __ptext42 1ED0  
                               __ptext34 099D                                 __ptext26 106B  
                               __ptext18 1E36                                 __ptext51 1216  
                               __ptext43 1120                                 __ptext35 0C22  
                               __ptext27 14E2                                 __ptext19 0456  
                               __ptext60 151D                                 __ptext52 15DE  
                               __ptext44 1EF5                                 __ptext36 0800  
                               __ptext28 14AD                                 __ptext61 0C93  
                               __ptext53 1EC4                                 __ptext45 1E45  
                               __ptext37 1109                                 __ptext29 12D9  
                               __ptext70 1EB8                                 __ptext62 0BB1  
                               __ptext54 0531                                 __ptext46 07F9  
                               __ptext38 1E33                                 __ptext71 0A6B  
                               __ptext63 1322                                 __ptext55 144C  
                               __ptext47 1F8B                                 __ptext39 1E89  
                               __ptext80 093C                                 __ptext72 05F8  
                               __ptext64 10A2                                 __ptext56 1E6B  
                               __ptext48 16B2                                 __ptext81 1F10  
                               __ptext73 1F1F                                 __ptext65 10F3  
                               __ptext57 116B                                 __ptext49 1F7B  
                               __ptext90 11BD                                 __ptext82 1235  
                               __ptext74 11DA                                 __ptext66 108F  
                               __ptext58 1F2E                                 __ptext91 10DE  
                               __ptext83 1F6B                                 __ptext75 0AD6  
                               __ptext67 1296                                 __ptext59 0E1E  
                               __ptext92 1E41                                 __ptext84 1F5B  
                               __ptext76 1622                                 __ptext68 13F1  
                               __ptext93 159B                                 __ptext85 1185  
                               __ptext77 0D97                                 __ptext69 1E49  
                               __ptext94 1371                                 __ptext86 17A7  
                               __ptext78 0EA8                                 __ptext95 11F7  
                               __ptext87 16FD                                 __ptext79 12B7  
                               __ptext96 1275                                 __ptext88 1EAC  
                               __ptext97 1EA0                                 __ptext89 1E74  
                               __ptext98 12FC                                 __ptext99 1E3D  
                               __product 0220            ??_setDimmerLights_IntrControl 0078  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1F1F  
          __end_of_Dimmer_Initialization 1E4F             __end_of_setDimmerLights_Main 0EA8  
                           ??_setSw_Main 0068                            setLED@command 0021  
                          __size_of_main 0041                              _setRF_Learn 1E63  
               __end_of_CC2500_SIDLEMode 1E45               setDimmerLights_Main@lights 006A  
            __end_of_DelayOffPointSelect 11DA               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 10A2                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000C                          _CC2500_ReadByte 1109  
                            _my_MainTime 1751                       _CC2500_InitPATable 11F7  
    __size_of_getDimmerLights_StatusFlag 0013            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0531                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0076  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 01E0  
                               main@argv 01E2                      ?_CC2500_InitPATable 0076  
                        _CC2500_PowerRST 159B              __end_of_Flash_Memory_Modify 1622  
                      ??_getPercentValue 0059                              _setLog_Code 147B  
            __end_of_Flash_Memory_Unlock 1E74                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1275                       __end_of_setSw_Main 0360  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0076  
                         _DelayTimejudge 139B                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0078  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0076                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 141E  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13F1  
            __end_of_setDimmerLights_Adj 155A                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1E33  
   __size_of_setDimmerLights_IntrControl 01CB                     _Flash_Memory_Erasing 1EC4  
                     ?_RF_Initialization 0076                               _SPI0Buffer 0075  
        __end_of_DelayOff_Initialization 1EB8      __size_of_setDimmerLights_IntrIOC_GO 002E  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1EC4  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 087D  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 13C5  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1322  
               __end_of_Sw_DimmerAdjFunc 093C                  __end_of_CC2500_ReadByte 1120  
           __end_of_setSw_Initialization 1E63                          _Timeout_Counter 10C9  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1F8B  
       __size_of_setDimmerLights_Trigger 0010                 __size_of_Sw_DimmerOnFunc 0086  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1E36                 __end_of_Sw_DimmerOffFunc 0BB1  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C93                    __end_of_CC2500_TxData 0A02  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 15DE  
