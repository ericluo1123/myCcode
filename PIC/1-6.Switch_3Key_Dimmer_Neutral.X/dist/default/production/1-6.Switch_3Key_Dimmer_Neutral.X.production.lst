

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 21 16:58:57 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	intentry,global,class=CODE,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	dabs	1,0x7E,2
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0095                     	;# 
   178  0096                     	;# 
   179  0097                     	;# 
   180  0099                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  0116                     	;# 
   191  0117                     	;# 
   192  011D                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195  018E                     	;# 
   196  0191                     	;# 
   197  0191                     	;# 
   198  0192                     	;# 
   199  0193                     	;# 
   200  0193                     	;# 
   201  0194                     	;# 
   202  0195                     	;# 
   203  0196                     	;# 
   204  0197                     	;# 
   205  0199                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020D                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0291                     	;# 
   234  0291                     	;# 
   235  0292                     	;# 
   236  0293                     	;# 
   237  0298                     	;# 
   238  0298                     	;# 
   239  0299                     	;# 
   240  029A                     	;# 
   241  0394                     	;# 
   242  0395                     	;# 
   243  0396                     	;# 
   244  0FE4                     	;# 
   245  0FE5                     	;# 
   246  0FE6                     	;# 
   247  0FE7                     	;# 
   248  0FE8                     	;# 
   249  0FE9                     	;# 
   250  0FEA                     	;# 
   251  0FEB                     	;# 
   252  0FED                     	;# 
   253  0FEE                     	;# 
   254  0FEF                     	;# 
   255  0000                     	;# 
   256  0001                     	;# 
   257  0002                     	;# 
   258  0003                     	;# 
   259  0004                     	;# 
   260  0005                     	;# 
   261  0006                     	;# 
   262  0007                     	;# 
   263  0008                     	;# 
   264  0009                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  0010                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0015                     	;# 
   274  0016                     	;# 
   275  0016                     	;# 
   276  0017                     	;# 
   277  0018                     	;# 
   278  0019                     	;# 
   279  001A                     	;# 
   280  001B                     	;# 
   281  001C                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0090                     	;# 
   286  0091                     	;# 
   287  0092                     	;# 
   288  0095                     	;# 
   289  0096                     	;# 
   290  0097                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  010E                     	;# 
   301  0116                     	;# 
   302  0117                     	;# 
   303  011D                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0194                     	;# 
   313  0195                     	;# 
   314  0196                     	;# 
   315  0197                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019C                     	;# 
   323  019C                     	;# 
   324  019D                     	;# 
   325  019E                     	;# 
   326  019F                     	;# 
   327  020D                     	;# 
   328  0210                     	;# 
   329  0211                     	;# 
   330  0211                     	;# 
   331  0212                     	;# 
   332  0212                     	;# 
   333  0213                     	;# 
   334  0213                     	;# 
   335  0214                     	;# 
   336  0214                     	;# 
   337  0215                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0216                     	;# 
   341  0216                     	;# 
   342  0217                     	;# 
   343  0217                     	;# 
   344  0291                     	;# 
   345  0291                     	;# 
   346  0292                     	;# 
   347  0293                     	;# 
   348  0298                     	;# 
   349  0298                     	;# 
   350  0299                     	;# 
   351  029A                     	;# 
   352  0394                     	;# 
   353  0395                     	;# 
   354  0396                     	;# 
   355  0FE4                     	;# 
   356  0FE5                     	;# 
   357  0FE6                     	;# 
   358  0FE7                     	;# 
   359  0FE8                     	;# 
   360  0FE9                     	;# 
   361  0FEA                     	;# 
   362  0FEB                     	;# 
   363  0FED                     	;# 
   364  0FEE                     	;# 
   365  0FEF                     	;# 
   366  0000                     	;# 
   367  0001                     	;# 
   368  0002                     	;# 
   369  0003                     	;# 
   370  0004                     	;# 
   371  0005                     	;# 
   372  0006                     	;# 
   373  0007                     	;# 
   374  0008                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0015                     	;# 
   385  0016                     	;# 
   386  0016                     	;# 
   387  0017                     	;# 
   388  0018                     	;# 
   389  0019                     	;# 
   390  001A                     	;# 
   391  001B                     	;# 
   392  001C                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  0090                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0095                     	;# 
   400  0096                     	;# 
   401  0097                     	;# 
   402  0099                     	;# 
   403  009A                     	;# 
   404  009B                     	;# 
   405  009B                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  0116                     	;# 
   413  0117                     	;# 
   414  011D                     	;# 
   415  018C                     	;# 
   416  018D                     	;# 
   417  018E                     	;# 
   418  0191                     	;# 
   419  0191                     	;# 
   420  0192                     	;# 
   421  0193                     	;# 
   422  0193                     	;# 
   423  0194                     	;# 
   424  0195                     	;# 
   425  0196                     	;# 
   426  0197                     	;# 
   427  0199                     	;# 
   428  019A                     	;# 
   429  019B                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019C                     	;# 
   434  019C                     	;# 
   435  019D                     	;# 
   436  019E                     	;# 
   437  019F                     	;# 
   438  020D                     	;# 
   439  0210                     	;# 
   440  0211                     	;# 
   441  0211                     	;# 
   442  0212                     	;# 
   443  0212                     	;# 
   444  0213                     	;# 
   445  0213                     	;# 
   446  0214                     	;# 
   447  0214                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  0291                     	;# 
   456  0291                     	;# 
   457  0292                     	;# 
   458  0293                     	;# 
   459  0298                     	;# 
   460  0298                     	;# 
   461  0299                     	;# 
   462  029A                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  0FE4                     	;# 
   467  0FE5                     	;# 
   468  0FE6                     	;# 
   469  0FE7                     	;# 
   470  0FE8                     	;# 
   471  0FE9                     	;# 
   472  0FEA                     	;# 
   473  0FEB                     	;# 
   474  0FED                     	;# 
   475  0FEE                     	;# 
   476  0FEF                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  0010                     	;# 
   493  0011                     	;# 
   494  0012                     	;# 
   495  0015                     	;# 
   496  0016                     	;# 
   497  0016                     	;# 
   498  0017                     	;# 
   499  0018                     	;# 
   500  0019                     	;# 
   501  001A                     	;# 
   502  001B                     	;# 
   503  001C                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  0090                     	;# 
   508  0091                     	;# 
   509  0092                     	;# 
   510  0095                     	;# 
   511  0096                     	;# 
   512  0097                     	;# 
   513  0099                     	;# 
   514  009A                     	;# 
   515  009B                     	;# 
   516  009B                     	;# 
   517  009C                     	;# 
   518  009D                     	;# 
   519  009E                     	;# 
   520  010C                     	;# 
   521  010D                     	;# 
   522  010E                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  011D                     	;# 
   526  018C                     	;# 
   527  018D                     	;# 
   528  018E                     	;# 
   529  0191                     	;# 
   530  0191                     	;# 
   531  0192                     	;# 
   532  0193                     	;# 
   533  0193                     	;# 
   534  0194                     	;# 
   535  0195                     	;# 
   536  0196                     	;# 
   537  0197                     	;# 
   538  0199                     	;# 
   539  019A                     	;# 
   540  019B                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019C                     	;# 
   545  019C                     	;# 
   546  019D                     	;# 
   547  019E                     	;# 
   548  019F                     	;# 
   549  020D                     	;# 
   550  0210                     	;# 
   551  0211                     	;# 
   552  0211                     	;# 
   553  0212                     	;# 
   554  0212                     	;# 
   555  0213                     	;# 
   556  0213                     	;# 
   557  0214                     	;# 
   558  0214                     	;# 
   559  0215                     	;# 
   560  0215                     	;# 
   561  0215                     	;# 
   562  0216                     	;# 
   563  0216                     	;# 
   564  0217                     	;# 
   565  0217                     	;# 
   566  0291                     	;# 
   567  0291                     	;# 
   568  0292                     	;# 
   569  0293                     	;# 
   570  0298                     	;# 
   571  0298                     	;# 
   572  0299                     	;# 
   573  029A                     	;# 
   574  0394                     	;# 
   575  0395                     	;# 
   576  0396                     	;# 
   577  0FE4                     	;# 
   578  0FE5                     	;# 
   579  0FE6                     	;# 
   580  0FE7                     	;# 
   581  0FE8                     	;# 
   582  0FE9                     	;# 
   583  0FEA                     	;# 
   584  0FEB                     	;# 
   585  0FED                     	;# 
   586  0FEE                     	;# 
   587  0FEF                     	;# 
   588  0000                     	;# 
   589  0001                     	;# 
   590  0002                     	;# 
   591  0003                     	;# 
   592  0004                     	;# 
   593  0005                     	;# 
   594  0006                     	;# 
   595  0007                     	;# 
   596  0008                     	;# 
   597  0009                     	;# 
   598  000A                     	;# 
   599  000B                     	;# 
   600  000C                     	;# 
   601  000D                     	;# 
   602  000E                     	;# 
   603  0010                     	;# 
   604  0011                     	;# 
   605  0012                     	;# 
   606  0015                     	;# 
   607  0016                     	;# 
   608  0016                     	;# 
   609  0017                     	;# 
   610  0018                     	;# 
   611  0019                     	;# 
   612  001A                     	;# 
   613  001B                     	;# 
   614  001C                     	;# 
   615  008C                     	;# 
   616  008D                     	;# 
   617  008E                     	;# 
   618  0090                     	;# 
   619  0091                     	;# 
   620  0092                     	;# 
   621  0095                     	;# 
   622  0096                     	;# 
   623  0097                     	;# 
   624  0099                     	;# 
   625  009A                     	;# 
   626  009B                     	;# 
   627  009B                     	;# 
   628  009C                     	;# 
   629  009D                     	;# 
   630  009E                     	;# 
   631  010C                     	;# 
   632  010D                     	;# 
   633  010E                     	;# 
   634  0116                     	;# 
   635  0117                     	;# 
   636  011D                     	;# 
   637  018C                     	;# 
   638  018D                     	;# 
   639  018E                     	;# 
   640  0191                     	;# 
   641  0191                     	;# 
   642  0192                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0197                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019C                     	;# 
   656  019C                     	;# 
   657  019D                     	;# 
   658  019E                     	;# 
   659  019F                     	;# 
   660  020D                     	;# 
   661  0210                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0216                     	;# 
   674  0216                     	;# 
   675  0217                     	;# 
   676  0217                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0298                     	;# 
   682  0298                     	;# 
   683  0299                     	;# 
   684  029A                     	;# 
   685  0394                     	;# 
   686  0395                     	;# 
   687  0396                     	;# 
   688  0FE4                     	;# 
   689  0FE5                     	;# 
   690  0FE6                     	;# 
   691  0FE7                     	;# 
   692  0FE8                     	;# 
   693  0FE9                     	;# 
   694  0FEA                     	;# 
   695  0FEB                     	;# 
   696  0FED                     	;# 
   697  0FEE                     	;# 
   698  0FEF                     	;# 
   699  0000                     	;# 
   700  0001                     	;# 
   701  0002                     	;# 
   702  0003                     	;# 
   703  0004                     	;# 
   704  0005                     	;# 
   705  0006                     	;# 
   706  0007                     	;# 
   707  0008                     	;# 
   708  0009                     	;# 
   709  000A                     	;# 
   710  000B                     	;# 
   711  000C                     	;# 
   712  000D                     	;# 
   713  000E                     	;# 
   714  0010                     	;# 
   715  0011                     	;# 
   716  0012                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  008C                     	;# 
   727  008D                     	;# 
   728  008E                     	;# 
   729  0090                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0095                     	;# 
   733  0096                     	;# 
   734  0097                     	;# 
   735  0099                     	;# 
   736  009A                     	;# 
   737  009B                     	;# 
   738  009B                     	;# 
   739  009C                     	;# 
   740  009D                     	;# 
   741  009E                     	;# 
   742  010C                     	;# 
   743  010D                     	;# 
   744  010E                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  011D                     	;# 
   748  018C                     	;# 
   749  018D                     	;# 
   750  018E                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0194                     	;# 
   757  0195                     	;# 
   758  0196                     	;# 
   759  0197                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019C                     	;# 
   767  019C                     	;# 
   768  019D                     	;# 
   769  019E                     	;# 
   770  019F                     	;# 
   771  020D                     	;# 
   772  0210                     	;# 
   773  0211                     	;# 
   774  0211                     	;# 
   775  0212                     	;# 
   776  0212                     	;# 
   777  0213                     	;# 
   778  0213                     	;# 
   779  0214                     	;# 
   780  0214                     	;# 
   781  0215                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0216                     	;# 
   785  0216                     	;# 
   786  0217                     	;# 
   787  0217                     	;# 
   788  0291                     	;# 
   789  0291                     	;# 
   790  0292                     	;# 
   791  0293                     	;# 
   792  0298                     	;# 
   793  0298                     	;# 
   794  0299                     	;# 
   795  029A                     	;# 
   796  0394                     	;# 
   797  0395                     	;# 
   798  0396                     	;# 
   799  0FE4                     	;# 
   800  0FE5                     	;# 
   801  0FE6                     	;# 
   802  0FE7                     	;# 
   803  0FE8                     	;# 
   804  0FE9                     	;# 
   805  0FEA                     	;# 
   806  0FEB                     	;# 
   807  0FED                     	;# 
   808  0FEE                     	;# 
   809  0FEF                     	;# 
   810  0000                     	;# 
   811  0001                     	;# 
   812  0002                     	;# 
   813  0003                     	;# 
   814  0004                     	;# 
   815  0005                     	;# 
   816  0006                     	;# 
   817  0007                     	;# 
   818  0008                     	;# 
   819  0009                     	;# 
   820  000A                     	;# 
   821  000B                     	;# 
   822  000C                     	;# 
   823  000D                     	;# 
   824  000E                     	;# 
   825  0010                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  008C                     	;# 
   838  008D                     	;# 
   839  008E                     	;# 
   840  0090                     	;# 
   841  0091                     	;# 
   842  0092                     	;# 
   843  0095                     	;# 
   844  0096                     	;# 
   845  0097                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  010C                     	;# 
   854  010D                     	;# 
   855  010E                     	;# 
   856  0116                     	;# 
   857  0117                     	;# 
   858  011D                     	;# 
   859  018C                     	;# 
   860  018D                     	;# 
   861  018E                     	;# 
   862  0191                     	;# 
   863  0191                     	;# 
   864  0192                     	;# 
   865  0193                     	;# 
   866  0193                     	;# 
   867  0194                     	;# 
   868  0195                     	;# 
   869  0196                     	;# 
   870  0197                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019B                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019C                     	;# 
   878  019C                     	;# 
   879  019D                     	;# 
   880  019E                     	;# 
   881  019F                     	;# 
   882  020D                     	;# 
   883  0210                     	;# 
   884  0211                     	;# 
   885  0211                     	;# 
   886  0212                     	;# 
   887  0212                     	;# 
   888  0213                     	;# 
   889  0213                     	;# 
   890  0214                     	;# 
   891  0214                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0216                     	;# 
   896  0216                     	;# 
   897  0217                     	;# 
   898  0217                     	;# 
   899  0291                     	;# 
   900  0291                     	;# 
   901  0292                     	;# 
   902  0293                     	;# 
   903  0298                     	;# 
   904  0298                     	;# 
   905  0299                     	;# 
   906  029A                     	;# 
   907  0394                     	;# 
   908  0395                     	;# 
   909  0396                     	;# 
   910  0FE4                     	;# 
   911  0FE5                     	;# 
   912  0FE6                     	;# 
   913  0FE7                     	;# 
   914  0FE8                     	;# 
   915  0FE9                     	;# 
   916  0FEA                     	;# 
   917  0FEB                     	;# 
   918  0FED                     	;# 
   919  0FEE                     	;# 
   920  0FEF                     	;# 
   921  0000                     	;# 
   922  0001                     	;# 
   923  0002                     	;# 
   924  0003                     	;# 
   925  0004                     	;# 
   926  0005                     	;# 
   927  0006                     	;# 
   928  0007                     	;# 
   929  0008                     	;# 
   930  0009                     	;# 
   931  000A                     	;# 
   932  000B                     	;# 
   933  000C                     	;# 
   934  000D                     	;# 
   935  000E                     	;# 
   936  0010                     	;# 
   937  0011                     	;# 
   938  0012                     	;# 
   939  0015                     	;# 
   940  0016                     	;# 
   941  0016                     	;# 
   942  0017                     	;# 
   943  0018                     	;# 
   944  0019                     	;# 
   945  001A                     	;# 
   946  001B                     	;# 
   947  001C                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  0090                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0095                     	;# 
   955  0096                     	;# 
   956  0097                     	;# 
   957  0099                     	;# 
   958  009A                     	;# 
   959  009B                     	;# 
   960  009B                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009E                     	;# 
   964  010C                     	;# 
   965  010D                     	;# 
   966  010E                     	;# 
   967  0116                     	;# 
   968  0117                     	;# 
   969  011D                     	;# 
   970  018C                     	;# 
   971  018D                     	;# 
   972  018E                     	;# 
   973  0191                     	;# 
   974  0191                     	;# 
   975  0192                     	;# 
   976  0193                     	;# 
   977  0193                     	;# 
   978  0194                     	;# 
   979  0195                     	;# 
   980  0196                     	;# 
   981  0197                     	;# 
   982  0199                     	;# 
   983  019A                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019C                     	;# 
   989  019C                     	;# 
   990  019D                     	;# 
   991  019E                     	;# 
   992  019F                     	;# 
   993  020D                     	;# 
   994  0210                     	;# 
   995  0211                     	;# 
   996  0211                     	;# 
   997  0212                     	;# 
   998  0212                     	;# 
   999  0213                     	;# 
  1000  0213                     	;# 
  1001  0214                     	;# 
  1002  0214                     	;# 
  1003  0215                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0216                     	;# 
  1007  0216                     	;# 
  1008  0217                     	;# 
  1009  0217                     	;# 
  1010  0291                     	;# 
  1011  0291                     	;# 
  1012  0292                     	;# 
  1013  0293                     	;# 
  1014  0298                     	;# 
  1015  0298                     	;# 
  1016  0299                     	;# 
  1017  029A                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  0FE4                     	;# 
  1022  0FE5                     	;# 
  1023  0FE6                     	;# 
  1024  0FE7                     	;# 
  1025  0FE8                     	;# 
  1026  0FE9                     	;# 
  1027  0FEA                     	;# 
  1028  0FEB                     	;# 
  1029  0FED                     	;# 
  1030  0FEE                     	;# 
  1031  0FEF                     	;# 
  1032  0000                     	;# 
  1033  0001                     	;# 
  1034  0002                     	;# 
  1035  0003                     	;# 
  1036  0004                     	;# 
  1037  0005                     	;# 
  1038  0006                     	;# 
  1039  0007                     	;# 
  1040  0008                     	;# 
  1041  0009                     	;# 
  1042  000A                     	;# 
  1043  000B                     	;# 
  1044  000C                     	;# 
  1045  000D                     	;# 
  1046  000E                     	;# 
  1047  0010                     	;# 
  1048  0011                     	;# 
  1049  0012                     	;# 
  1050  0015                     	;# 
  1051  0016                     	;# 
  1052  0016                     	;# 
  1053  0017                     	;# 
  1054  0018                     	;# 
  1055  0019                     	;# 
  1056  001A                     	;# 
  1057  001B                     	;# 
  1058  001C                     	;# 
  1059  008C                     	;# 
  1060  008D                     	;# 
  1061  008E                     	;# 
  1062  0090                     	;# 
  1063  0091                     	;# 
  1064  0092                     	;# 
  1065  0095                     	;# 
  1066  0096                     	;# 
  1067  0097                     	;# 
  1068  0099                     	;# 
  1069  009A                     	;# 
  1070  009B                     	;# 
  1071  009B                     	;# 
  1072  009C                     	;# 
  1073  009D                     	;# 
  1074  009E                     	;# 
  1075  010C                     	;# 
  1076  010D                     	;# 
  1077  010E                     	;# 
  1078  0116                     	;# 
  1079  0117                     	;# 
  1080  011D                     	;# 
  1081  018C                     	;# 
  1082  018D                     	;# 
  1083  018E                     	;# 
  1084  0191                     	;# 
  1085  0191                     	;# 
  1086  0192                     	;# 
  1087  0193                     	;# 
  1088  0193                     	;# 
  1089  0194                     	;# 
  1090  0195                     	;# 
  1091  0196                     	;# 
  1092  0197                     	;# 
  1093  0199                     	;# 
  1094  019A                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  020D                     	;# 
  1105  0210                     	;# 
  1106  0211                     	;# 
  1107  0211                     	;# 
  1108  0212                     	;# 
  1109  0212                     	;# 
  1110  0213                     	;# 
  1111  0213                     	;# 
  1112  0214                     	;# 
  1113  0214                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0216                     	;# 
  1118  0216                     	;# 
  1119  0217                     	;# 
  1120  0217                     	;# 
  1121  0291                     	;# 
  1122  0291                     	;# 
  1123  0292                     	;# 
  1124  0293                     	;# 
  1125  0298                     	;# 
  1126  0298                     	;# 
  1127  0299                     	;# 
  1128  029A                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  0FE4                     	;# 
  1133  0FE5                     	;# 
  1134  0FE6                     	;# 
  1135  0FE7                     	;# 
  1136  0FE8                     	;# 
  1137  0FE9                     	;# 
  1138  0FEA                     	;# 
  1139  0FEB                     	;# 
  1140  0FED                     	;# 
  1141  0FEE                     	;# 
  1142  0FEF                     	;# 
  1143  0000                     	;# 
  1144  0001                     	;# 
  1145  0002                     	;# 
  1146  0003                     	;# 
  1147  0004                     	;# 
  1148  0005                     	;# 
  1149  0006                     	;# 
  1150  0007                     	;# 
  1151  0008                     	;# 
  1152  0009                     	;# 
  1153  000A                     	;# 
  1154  000B                     	;# 
  1155  000C                     	;# 
  1156  000D                     	;# 
  1157  000E                     	;# 
  1158  0010                     	;# 
  1159  0011                     	;# 
  1160  0012                     	;# 
  1161  0015                     	;# 
  1162  0016                     	;# 
  1163  0016                     	;# 
  1164  0017                     	;# 
  1165  0018                     	;# 
  1166  0019                     	;# 
  1167  001A                     	;# 
  1168  001B                     	;# 
  1169  001C                     	;# 
  1170  008C                     	;# 
  1171  008D                     	;# 
  1172  008E                     	;# 
  1173  0090                     	;# 
  1174  0091                     	;# 
  1175  0092                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0099                     	;# 
  1180  009A                     	;# 
  1181  009B                     	;# 
  1182  009B                     	;# 
  1183  009C                     	;# 
  1184  009D                     	;# 
  1185  009E                     	;# 
  1186  010C                     	;# 
  1187  010D                     	;# 
  1188  010E                     	;# 
  1189  0116                     	;# 
  1190  0117                     	;# 
  1191  011D                     	;# 
  1192  018C                     	;# 
  1193  018D                     	;# 
  1194  018E                     	;# 
  1195  0191                     	;# 
  1196  0191                     	;# 
  1197  0192                     	;# 
  1198  0193                     	;# 
  1199  0193                     	;# 
  1200  0194                     	;# 
  1201  0195                     	;# 
  1202  0196                     	;# 
  1203  0197                     	;# 
  1204  0199                     	;# 
  1205  019A                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019D                     	;# 
  1213  019E                     	;# 
  1214  019F                     	;# 
  1215  020D                     	;# 
  1216  0210                     	;# 
  1217  0211                     	;# 
  1218  0211                     	;# 
  1219  0212                     	;# 
  1220  0212                     	;# 
  1221  0213                     	;# 
  1222  0213                     	;# 
  1223  0214                     	;# 
  1224  0214                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0216                     	;# 
  1229  0216                     	;# 
  1230  0217                     	;# 
  1231  0217                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0298                     	;# 
  1237  0298                     	;# 
  1238  0299                     	;# 
  1239  029A                     	;# 
  1240  0394                     	;# 
  1241  0395                     	;# 
  1242  0396                     	;# 
  1243  0FE4                     	;# 
  1244  0FE5                     	;# 
  1245  0FE6                     	;# 
  1246  0FE7                     	;# 
  1247  0FE8                     	;# 
  1248  0FE9                     	;# 
  1249  0FEA                     	;# 
  1250  0FEB                     	;# 
  1251  0FED                     	;# 
  1252  0FEE                     	;# 
  1253  0FEF                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0008                     	;# 
  1263  0009                     	;# 
  1264  000A                     	;# 
  1265  000B                     	;# 
  1266  000C                     	;# 
  1267  000D                     	;# 
  1268  000E                     	;# 
  1269  0010                     	;# 
  1270  0011                     	;# 
  1271  0012                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  008C                     	;# 
  1282  008D                     	;# 
  1283  008E                     	;# 
  1284  0090                     	;# 
  1285  0091                     	;# 
  1286  0092                     	;# 
  1287  0095                     	;# 
  1288  0096                     	;# 
  1289  0097                     	;# 
  1290  0099                     	;# 
  1291  009A                     	;# 
  1292  009B                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  0116                     	;# 
  1301  0117                     	;# 
  1302  011D                     	;# 
  1303  018C                     	;# 
  1304  018D                     	;# 
  1305  018E                     	;# 
  1306  0191                     	;# 
  1307  0191                     	;# 
  1308  0192                     	;# 
  1309  0193                     	;# 
  1310  0193                     	;# 
  1311  0194                     	;# 
  1312  0195                     	;# 
  1313  0196                     	;# 
  1314  0197                     	;# 
  1315  0199                     	;# 
  1316  019A                     	;# 
  1317  019B                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019C                     	;# 
  1322  019C                     	;# 
  1323  019D                     	;# 
  1324  019E                     	;# 
  1325  019F                     	;# 
  1326  020D                     	;# 
  1327  0210                     	;# 
  1328  0211                     	;# 
  1329  0211                     	;# 
  1330  0212                     	;# 
  1331  0212                     	;# 
  1332  0213                     	;# 
  1333  0213                     	;# 
  1334  0214                     	;# 
  1335  0214                     	;# 
  1336  0215                     	;# 
  1337  0215                     	;# 
  1338  0215                     	;# 
  1339  0216                     	;# 
  1340  0216                     	;# 
  1341  0217                     	;# 
  1342  0217                     	;# 
  1343  0291                     	;# 
  1344  0291                     	;# 
  1345  0292                     	;# 
  1346  0293                     	;# 
  1347  0298                     	;# 
  1348  0298                     	;# 
  1349  0299                     	;# 
  1350  029A                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  0FE4                     	;# 
  1355  0FE5                     	;# 
  1356  0FE6                     	;# 
  1357  0FE7                     	;# 
  1358  0FE8                     	;# 
  1359  0FE9                     	;# 
  1360  0FEA                     	;# 
  1361  0FEB                     	;# 
  1362  0FED                     	;# 
  1363  0FEE                     	;# 
  1364  0FEF                     	;# 
  1365  0000                     	;# 
  1366  0001                     	;# 
  1367  0002                     	;# 
  1368  0003                     	;# 
  1369  0004                     	;# 
  1370  0005                     	;# 
  1371  0006                     	;# 
  1372  0007                     	;# 
  1373  0008                     	;# 
  1374  0009                     	;# 
  1375  000A                     	;# 
  1376  000B                     	;# 
  1377  000C                     	;# 
  1378  000D                     	;# 
  1379  000E                     	;# 
  1380  0010                     	;# 
  1381  0011                     	;# 
  1382  0012                     	;# 
  1383  0015                     	;# 
  1384  0016                     	;# 
  1385  0016                     	;# 
  1386  0017                     	;# 
  1387  0018                     	;# 
  1388  0019                     	;# 
  1389  001A                     	;# 
  1390  001B                     	;# 
  1391  001C                     	;# 
  1392  008C                     	;# 
  1393  008D                     	;# 
  1394  008E                     	;# 
  1395  0090                     	;# 
  1396  0091                     	;# 
  1397  0092                     	;# 
  1398  0095                     	;# 
  1399  0096                     	;# 
  1400  0097                     	;# 
  1401  0099                     	;# 
  1402  009A                     	;# 
  1403  009B                     	;# 
  1404  009B                     	;# 
  1405  009C                     	;# 
  1406  009D                     	;# 
  1407  009E                     	;# 
  1408  010C                     	;# 
  1409  010D                     	;# 
  1410  010E                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  011D                     	;# 
  1414  018C                     	;# 
  1415  018D                     	;# 
  1416  018E                     	;# 
  1417  0191                     	;# 
  1418  0191                     	;# 
  1419  0192                     	;# 
  1420  0193                     	;# 
  1421  0193                     	;# 
  1422  0194                     	;# 
  1423  0195                     	;# 
  1424  0196                     	;# 
  1425  0197                     	;# 
  1426  0199                     	;# 
  1427  019A                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019C                     	;# 
  1433  019C                     	;# 
  1434  019D                     	;# 
  1435  019E                     	;# 
  1436  019F                     	;# 
  1437  020D                     	;# 
  1438  0210                     	;# 
  1439  0211                     	;# 
  1440  0211                     	;# 
  1441  0212                     	;# 
  1442  0212                     	;# 
  1443  0213                     	;# 
  1444  0213                     	;# 
  1445  0214                     	;# 
  1446  0214                     	;# 
  1447  0215                     	;# 
  1448  0215                     	;# 
  1449  0215                     	;# 
  1450  0216                     	;# 
  1451  0216                     	;# 
  1452  0217                     	;# 
  1453  0217                     	;# 
  1454  0291                     	;# 
  1455  0291                     	;# 
  1456  0292                     	;# 
  1457  0293                     	;# 
  1458  0298                     	;# 
  1459  0298                     	;# 
  1460  0299                     	;# 
  1461  029A                     	;# 
  1462  0394                     	;# 
  1463  0395                     	;# 
  1464  0396                     	;# 
  1465  0FE4                     	;# 
  1466  0FE5                     	;# 
  1467  0FE6                     	;# 
  1468  0FE7                     	;# 
  1469  0FE8                     	;# 
  1470  0FE9                     	;# 
  1471  0FEA                     	;# 
  1472  0FEB                     	;# 
  1473  0FED                     	;# 
  1474  0FEE                     	;# 
  1475  0FEF                     	;# 
  1476  0000                     	;# 
  1477  0001                     	;# 
  1478  0002                     	;# 
  1479  0003                     	;# 
  1480  0004                     	;# 
  1481  0005                     	;# 
  1482  0006                     	;# 
  1483  0007                     	;# 
  1484  0008                     	;# 
  1485  0009                     	;# 
  1486  000A                     	;# 
  1487  000B                     	;# 
  1488  000C                     	;# 
  1489  000D                     	;# 
  1490  000E                     	;# 
  1491  0010                     	;# 
  1492  0011                     	;# 
  1493  0012                     	;# 
  1494  0015                     	;# 
  1495  0016                     	;# 
  1496  0016                     	;# 
  1497  0017                     	;# 
  1498  0018                     	;# 
  1499  0019                     	;# 
  1500  001A                     	;# 
  1501  001B                     	;# 
  1502  001C                     	;# 
  1503  008C                     	;# 
  1504  008D                     	;# 
  1505  008E                     	;# 
  1506  0090                     	;# 
  1507  0091                     	;# 
  1508  0092                     	;# 
  1509  0095                     	;# 
  1510  0096                     	;# 
  1511  0097                     	;# 
  1512  0099                     	;# 
  1513  009A                     	;# 
  1514  009B                     	;# 
  1515  009B                     	;# 
  1516  009C                     	;# 
  1517  009D                     	;# 
  1518  009E                     	;# 
  1519  010C                     	;# 
  1520  010D                     	;# 
  1521  010E                     	;# 
  1522  0116                     	;# 
  1523  0117                     	;# 
  1524  011D                     	;# 
  1525  018C                     	;# 
  1526  018D                     	;# 
  1527  018E                     	;# 
  1528  0191                     	;# 
  1529  0191                     	;# 
  1530  0192                     	;# 
  1531  0193                     	;# 
  1532  0193                     	;# 
  1533  0194                     	;# 
  1534  0195                     	;# 
  1535  0196                     	;# 
  1536  0197                     	;# 
  1537  0199                     	;# 
  1538  019A                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019C                     	;# 
  1544  019C                     	;# 
  1545  019D                     	;# 
  1546  019E                     	;# 
  1547  019F                     	;# 
  1548  020D                     	;# 
  1549  0210                     	;# 
  1550  0211                     	;# 
  1551  0211                     	;# 
  1552  0212                     	;# 
  1553  0212                     	;# 
  1554  0213                     	;# 
  1555  0213                     	;# 
  1556  0214                     	;# 
  1557  0214                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0216                     	;# 
  1562  0216                     	;# 
  1563  0217                     	;# 
  1564  0217                     	;# 
  1565  0291                     	;# 
  1566  0291                     	;# 
  1567  0292                     	;# 
  1568  0293                     	;# 
  1569  0298                     	;# 
  1570  0298                     	;# 
  1571  0299                     	;# 
  1572  029A                     	;# 
  1573  0394                     	;# 
  1574  0395                     	;# 
  1575  0396                     	;# 
  1576  0FE4                     	;# 
  1577  0FE5                     	;# 
  1578  0FE6                     	;# 
  1579  0FE7                     	;# 
  1580  0FE8                     	;# 
  1581  0FE9                     	;# 
  1582  0FEA                     	;# 
  1583  0FEB                     	;# 
  1584  0FED                     	;# 
  1585  0FEE                     	;# 
  1586  0FEF                     	;# 
  1587  0000                     	;# 
  1588  0001                     	;# 
  1589  0002                     	;# 
  1590  0003                     	;# 
  1591  0004                     	;# 
  1592  0005                     	;# 
  1593  0006                     	;# 
  1594  0007                     	;# 
  1595  0008                     	;# 
  1596  0009                     	;# 
  1597  000A                     	;# 
  1598  000B                     	;# 
  1599  000C                     	;# 
  1600  000D                     	;# 
  1601  000E                     	;# 
  1602  0010                     	;# 
  1603  0011                     	;# 
  1604  0012                     	;# 
  1605  0015                     	;# 
  1606  0016                     	;# 
  1607  0016                     	;# 
  1608  0017                     	;# 
  1609  0018                     	;# 
  1610  0019                     	;# 
  1611  001A                     	;# 
  1612  001B                     	;# 
  1613  001C                     	;# 
  1614  008C                     	;# 
  1615  008D                     	;# 
  1616  008E                     	;# 
  1617  0090                     	;# 
  1618  0091                     	;# 
  1619  0092                     	;# 
  1620  0095                     	;# 
  1621  0096                     	;# 
  1622  0097                     	;# 
  1623  0099                     	;# 
  1624  009A                     	;# 
  1625  009B                     	;# 
  1626  009B                     	;# 
  1627  009C                     	;# 
  1628  009D                     	;# 
  1629  009E                     	;# 
  1630  010C                     	;# 
  1631  010D                     	;# 
  1632  010E                     	;# 
  1633  0116                     	;# 
  1634  0117                     	;# 
  1635  011D                     	;# 
  1636  018C                     	;# 
  1637  018D                     	;# 
  1638  018E                     	;# 
  1639  0191                     	;# 
  1640  0191                     	;# 
  1641  0192                     	;# 
  1642  0193                     	;# 
  1643  0193                     	;# 
  1644  0194                     	;# 
  1645  0195                     	;# 
  1646  0196                     	;# 
  1647  0197                     	;# 
  1648  0199                     	;# 
  1649  019A                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019C                     	;# 
  1655  019C                     	;# 
  1656  019D                     	;# 
  1657  019E                     	;# 
  1658  019F                     	;# 
  1659  020D                     	;# 
  1660  0210                     	;# 
  1661  0211                     	;# 
  1662  0211                     	;# 
  1663  0212                     	;# 
  1664  0212                     	;# 
  1665  0213                     	;# 
  1666  0213                     	;# 
  1667  0214                     	;# 
  1668  0214                     	;# 
  1669  0215                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0216                     	;# 
  1673  0216                     	;# 
  1674  0217                     	;# 
  1675  0217                     	;# 
  1676  0291                     	;# 
  1677  0291                     	;# 
  1678  0292                     	;# 
  1679  0293                     	;# 
  1680  0298                     	;# 
  1681  0298                     	;# 
  1682  0299                     	;# 
  1683  029A                     	;# 
  1684  0394                     	;# 
  1685  0395                     	;# 
  1686  0396                     	;# 
  1687  0FE4                     	;# 
  1688  0FE5                     	;# 
  1689  0FE6                     	;# 
  1690  0FE7                     	;# 
  1691  0FE8                     	;# 
  1692  0FE9                     	;# 
  1693  0FEA                     	;# 
  1694  0FEB                     	;# 
  1695  0FED                     	;# 
  1696  0FEE                     	;# 
  1697  0FEF                     	;# 
  1698  0000                     	;# 
  1699  0001                     	;# 
  1700  0002                     	;# 
  1701  0003                     	;# 
  1702  0004                     	;# 
  1703  0005                     	;# 
  1704  0006                     	;# 
  1705  0007                     	;# 
  1706  0008                     	;# 
  1707  0009                     	;# 
  1708  000A                     	;# 
  1709  000B                     	;# 
  1710  000C                     	;# 
  1711  000D                     	;# 
  1712  000E                     	;# 
  1713  0010                     	;# 
  1714  0011                     	;# 
  1715  0012                     	;# 
  1716  0015                     	;# 
  1717  0016                     	;# 
  1718  0016                     	;# 
  1719  0017                     	;# 
  1720  0018                     	;# 
  1721  0019                     	;# 
  1722  001A                     	;# 
  1723  001B                     	;# 
  1724  001C                     	;# 
  1725  008C                     	;# 
  1726  008D                     	;# 
  1727  008E                     	;# 
  1728  0090                     	;# 
  1729  0091                     	;# 
  1730  0092                     	;# 
  1731  0095                     	;# 
  1732  0096                     	;# 
  1733  0097                     	;# 
  1734  0099                     	;# 
  1735  009A                     	;# 
  1736  009B                     	;# 
  1737  009B                     	;# 
  1738  009C                     	;# 
  1739  009D                     	;# 
  1740  009E                     	;# 
  1741  010C                     	;# 
  1742  010D                     	;# 
  1743  010E                     	;# 
  1744  0116                     	;# 
  1745  0117                     	;# 
  1746  011D                     	;# 
  1747  018C                     	;# 
  1748  018D                     	;# 
  1749  018E                     	;# 
  1750  0191                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0193                     	;# 
  1754  0193                     	;# 
  1755  0194                     	;# 
  1756  0195                     	;# 
  1757  0196                     	;# 
  1758  0197                     	;# 
  1759  0199                     	;# 
  1760  019A                     	;# 
  1761  019B                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019C                     	;# 
  1766  019C                     	;# 
  1767  019D                     	;# 
  1768  019E                     	;# 
  1769  019F                     	;# 
  1770  020D                     	;# 
  1771  0210                     	;# 
  1772  0211                     	;# 
  1773  0211                     	;# 
  1774  0212                     	;# 
  1775  0212                     	;# 
  1776  0213                     	;# 
  1777  0213                     	;# 
  1778  0214                     	;# 
  1779  0214                     	;# 
  1780  0215                     	;# 
  1781  0215                     	;# 
  1782  0215                     	;# 
  1783  0216                     	;# 
  1784  0216                     	;# 
  1785  0217                     	;# 
  1786  0217                     	;# 
  1787  0291                     	;# 
  1788  0291                     	;# 
  1789  0292                     	;# 
  1790  0293                     	;# 
  1791  0298                     	;# 
  1792  0298                     	;# 
  1793  0299                     	;# 
  1794  029A                     	;# 
  1795  0394                     	;# 
  1796  0395                     	;# 
  1797  0396                     	;# 
  1798  0FE4                     	;# 
  1799  0FE5                     	;# 
  1800  0FE6                     	;# 
  1801  0FE7                     	;# 
  1802  0FE8                     	;# 
  1803  0FE9                     	;# 
  1804  0FEA                     	;# 
  1805  0FEB                     	;# 
  1806  0FED                     	;# 
  1807  0FEE                     	;# 
  1808  0FEF                     	;# 
  1809  0000                     	;# 
  1810  0001                     	;# 
  1811  0002                     	;# 
  1812  0003                     	;# 
  1813  0004                     	;# 
  1814  0005                     	;# 
  1815  0006                     	;# 
  1816  0007                     	;# 
  1817  0008                     	;# 
  1818  0009                     	;# 
  1819  000A                     	;# 
  1820  000B                     	;# 
  1821  000C                     	;# 
  1822  000D                     	;# 
  1823  000E                     	;# 
  1824  0010                     	;# 
  1825  0011                     	;# 
  1826  0012                     	;# 
  1827  0015                     	;# 
  1828  0016                     	;# 
  1829  0016                     	;# 
  1830  0017                     	;# 
  1831  0018                     	;# 
  1832  0019                     	;# 
  1833  001A                     	;# 
  1834  001B                     	;# 
  1835  001C                     	;# 
  1836  008C                     	;# 
  1837  008D                     	;# 
  1838  008E                     	;# 
  1839  0090                     	;# 
  1840  0091                     	;# 
  1841  0092                     	;# 
  1842  0095                     	;# 
  1843  0096                     	;# 
  1844  0097                     	;# 
  1845  0099                     	;# 
  1846  009A                     	;# 
  1847  009B                     	;# 
  1848  009B                     	;# 
  1849  009C                     	;# 
  1850  009D                     	;# 
  1851  009E                     	;# 
  1852  010C                     	;# 
  1853  010D                     	;# 
  1854  010E                     	;# 
  1855  0116                     	;# 
  1856  0117                     	;# 
  1857  011D                     	;# 
  1858  018C                     	;# 
  1859  018D                     	;# 
  1860  018E                     	;# 
  1861  0191                     	;# 
  1862  0191                     	;# 
  1863  0192                     	;# 
  1864  0193                     	;# 
  1865  0193                     	;# 
  1866  0194                     	;# 
  1867  0195                     	;# 
  1868  0196                     	;# 
  1869  0197                     	;# 
  1870  0199                     	;# 
  1871  019A                     	;# 
  1872  019B                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019C                     	;# 
  1877  019C                     	;# 
  1878  019D                     	;# 
  1879  019E                     	;# 
  1880  019F                     	;# 
  1881  020D                     	;# 
  1882  0210                     	;# 
  1883  0211                     	;# 
  1884  0211                     	;# 
  1885  0212                     	;# 
  1886  0212                     	;# 
  1887  0213                     	;# 
  1888  0213                     	;# 
  1889  0214                     	;# 
  1890  0214                     	;# 
  1891  0215                     	;# 
  1892  0215                     	;# 
  1893  0215                     	;# 
  1894  0216                     	;# 
  1895  0216                     	;# 
  1896  0217                     	;# 
  1897  0217                     	;# 
  1898  0291                     	;# 
  1899  0291                     	;# 
  1900  0292                     	;# 
  1901  0293                     	;# 
  1902  0298                     	;# 
  1903  0298                     	;# 
  1904  0299                     	;# 
  1905  029A                     	;# 
  1906  0394                     	;# 
  1907  0395                     	;# 
  1908  0396                     	;# 
  1909  0FE4                     	;# 
  1910  0FE5                     	;# 
  1911  0FE6                     	;# 
  1912  0FE7                     	;# 
  1913  0FE8                     	;# 
  1914  0FE9                     	;# 
  1915  0FEA                     	;# 
  1916  0FEB                     	;# 
  1917  0FED                     	;# 
  1918  0FEE                     	;# 
  1919  0FEF                     	;# 
  1920  0000                     	;# 
  1921  0001                     	;# 
  1922  0002                     	;# 
  1923  0003                     	;# 
  1924  0004                     	;# 
  1925  0005                     	;# 
  1926  0006                     	;# 
  1927  0007                     	;# 
  1928  0008                     	;# 
  1929  0009                     	;# 
  1930  000A                     	;# 
  1931  000B                     	;# 
  1932  000C                     	;# 
  1933  000D                     	;# 
  1934  000E                     	;# 
  1935  0010                     	;# 
  1936  0011                     	;# 
  1937  0012                     	;# 
  1938  0015                     	;# 
  1939  0016                     	;# 
  1940  0016                     	;# 
  1941  0017                     	;# 
  1942  0018                     	;# 
  1943  0019                     	;# 
  1944  001A                     	;# 
  1945  001B                     	;# 
  1946  001C                     	;# 
  1947  008C                     	;# 
  1948  008D                     	;# 
  1949  008E                     	;# 
  1950  0090                     	;# 
  1951  0091                     	;# 
  1952  0092                     	;# 
  1953  0095                     	;# 
  1954  0096                     	;# 
  1955  0097                     	;# 
  1956  0099                     	;# 
  1957  009A                     	;# 
  1958  009B                     	;# 
  1959  009B                     	;# 
  1960  009C                     	;# 
  1961  009D                     	;# 
  1962  009E                     	;# 
  1963  010C                     	;# 
  1964  010D                     	;# 
  1965  010E                     	;# 
  1966  0116                     	;# 
  1967  0117                     	;# 
  1968  011D                     	;# 
  1969  018C                     	;# 
  1970  018D                     	;# 
  1971  018E                     	;# 
  1972  0191                     	;# 
  1973  0191                     	;# 
  1974  0192                     	;# 
  1975  0193                     	;# 
  1976  0193                     	;# 
  1977  0194                     	;# 
  1978  0195                     	;# 
  1979  0196                     	;# 
  1980  0197                     	;# 
  1981  0199                     	;# 
  1982  019A                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019C                     	;# 
  1988  019C                     	;# 
  1989  019D                     	;# 
  1990  019E                     	;# 
  1991  019F                     	;# 
  1992  020D                     	;# 
  1993  0210                     	;# 
  1994  0211                     	;# 
  1995  0211                     	;# 
  1996  0212                     	;# 
  1997  0212                     	;# 
  1998  0213                     	;# 
  1999  0213                     	;# 
  2000  0214                     	;# 
  2001  0214                     	;# 
  2002  0215                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0216                     	;# 
  2006  0216                     	;# 
  2007  0217                     	;# 
  2008  0217                     	;# 
  2009  0291                     	;# 
  2010  0291                     	;# 
  2011  0292                     	;# 
  2012  0293                     	;# 
  2013  0298                     	;# 
  2014  0298                     	;# 
  2015  0299                     	;# 
  2016  029A                     	;# 
  2017  0394                     	;# 
  2018  0395                     	;# 
  2019  0396                     	;# 
  2020  0FE4                     	;# 
  2021  0FE5                     	;# 
  2022  0FE6                     	;# 
  2023  0FE7                     	;# 
  2024  0FE8                     	;# 
  2025  0FE9                     	;# 
  2026  0FEA                     	;# 
  2027  0FEB                     	;# 
  2028  0FED                     	;# 
  2029  0FEE                     	;# 
  2030  0FEF                     	;# 
  2031                           
  2032                           	psect	idataBANK4
  2033  1101                     __pidataBANK4:	
  2034                           
  2035                           ;initializer for __product
  2036  1101  3463               	retlw	99
  2037  1102  3402               	retlw	2
  2038  1103  3400               	retlw	0
  2039  1104  3400               	retlw	0
  2040  1105  3400               	retlw	0
  2041  1106  3400               	retlw	0
  2042  1107  3400               	retlw	0
  2043  1108  3400               	retlw	0
  2044  1109  3400               	retlw	0
  2045  110A  3400               	retlw	0
  2046  110B  3400               	retlw	0
  2047  110C  3400               	retlw	0
  2048  110D  34FF               	retlw	255
  2049  110E  34FF               	retlw	255
  2050  110F  34FF               	retlw	255
  2051  1110  3400               	retlw	0
  2052  1111  3400               	retlw	0
  2053  1112  3400               	retlw	0
  2054  1113  3400               	retlw	0
  2055  1114  3400               	retlw	0
  2056  1115  3400               	retlw	0
  2057  1116  3400               	retlw	0
  2058  1117  3400               	retlw	0
  2059  1118  3400               	retlw	0
  2060  1119  3400               	retlw	0
  2061  111A  3400               	retlw	0
  2062  111B  3400               	retlw	0
  2063  111C  3400               	retlw	0
  2064  111D  3400               	retlw	0
  2065  111E  3400               	retlw	0
  2066  111F  3400               	retlw	0
  2067  1120  3400               	retlw	0
  2068                           
  2069                           	psect	stringtext
  2070  1000                     __pstringtext:	
  2071  1000                     _CC2500_registers_address:	
  2072  1000  3403               	retlw	3
  2073  1001  3416               	retlw	22
  2074  1002  3417               	retlw	23
  2075  1003  341E               	retlw	30
  2076  1004  341F               	retlw	31
  2077  1005  3420               	retlw	32
  2078  1006  342A               	retlw	42
  2079  1007  342B               	retlw	43
  2080  1008  340B               	retlw	11
  2081  1009  340C               	retlw	12
  2082  100A  340D               	retlw	13
  2083  100B  340E               	retlw	14
  2084  100C  340F               	retlw	15
  2085  100D  3410               	retlw	16
  2086  100E  3411               	retlw	17
  2087  100F  3412               	retlw	18
  2088  1010  3413               	retlw	19
  2089  1011  3414               	retlw	20
  2090  1012  340A               	retlw	10
  2091  1013  3415               	retlw	21
  2092  1014  3421               	retlw	33
  2093  1015  3422               	retlw	34
  2094  1016  3418               	retlw	24
  2095  1017  3419               	retlw	25
  2096  1018  341A               	retlw	26
  2097  1019  341B               	retlw	27
  2098  101A  341C               	retlw	28
  2099  101B  341D               	retlw	29
  2100  101C  3423               	retlw	35
  2101  101D  3424               	retlw	36
  2102  101E  3425               	retlw	37
  2103  101F  3426               	retlw	38
  2104  1020  3429               	retlw	41
  2105  1021  342C               	retlw	44
  2106  1022  342D               	retlw	45
  2107  1023  342E               	retlw	46
  2108  1024  3400               	retlw	0
  2109  1025  3401               	retlw	1
  2110  1026  3402               	retlw	2
  2111  1027  3407               	retlw	7
  2112  1028  3408               	retlw	8
  2113  1029  3409               	retlw	9
  2114  102A  3406               	retlw	6
  2115  102B  3404               	retlw	4
  2116  102C  3405               	retlw	5
  2117  102D  3427               	retlw	39
  2118  102E  3428               	retlw	40
  2119  102F                     __end_of_CC2500_registers_address:	
  2120  102F                     _CC2500_rfSettings:	
  2121  102F  3407               	retlw	7
  2122  1030  3407               	retlw	7
  2123  1031  3430               	retlw	48
  2124  1032  3487               	retlw	135
  2125  1033  346B               	retlw	107
  2126  1034  34F8               	retlw	248
  2127  1035  347F               	retlw	127
  2128  1036  343F               	retlw	63
  2129  1037  3409               	retlw	9
  2130  1038  3400               	retlw	0
  2131  1039  345C               	retlw	92
  2132  103A  34A7               	retlw	167
  2133  103B  3462               	retlw	98
  2134  103C  3486               	retlw	134
  2135  103D  3483               	retlw	131
  2136  103E  3403               	retlw	3
  2137  103F  3422               	retlw	34
  2138  1040  34F8               	retlw	248
  2139  1041  3400               	retlw	0
  2140  1042  3444               	retlw	68
  2141  1043  34B6               	retlw	182
  2142  1044  3410               	retlw	16
  2143  1045  3418               	retlw	24
  2144  1046  341D               	retlw	29
  2145  1047  341C               	retlw	28
  2146  1048  34C7               	retlw	199
  2147  1049  3400               	retlw	0
  2148  104A  34B2               	retlw	178
  2149  104B  34EA               	retlw	234
  2150  104C  340A               	retlw	10
  2151  104D  3400               	retlw	0
  2152  104E  3411               	retlw	17
  2153  104F  3459               	retlw	89
  2154  1050  3488               	retlw	136
  2155  1051  3431               	retlw	49
  2156  1052  340B               	retlw	11
  2157  1053  342F               	retlw	47
  2158  1054  342E               	retlw	46
  2159  1055  3406               	retlw	6
  2160  1056  3404               	retlw	4
  2161  1057  3405               	retlw	5
  2162  1058  3400               	retlw	0
  2163  1059  3430               	retlw	48
  2164  105A  34D3               	retlw	211
  2165  105B  3491               	retlw	145
  2166  105C  3441               	retlw	65
  2167  105D  3400               	retlw	0
  2168  105E                     __end_of_CC2500_rfSettings:	
  2169  105E                     _CC2500_patable_vaule:	
  2170  105E  34FE               	retlw	254
  2171  105F  34FE               	retlw	254
  2172  1060  34FE               	retlw	254
  2173  1061  34FE               	retlw	254
  2174  1062  34FE               	retlw	254
  2175  1063  34FE               	retlw	254
  2176  1064  34FE               	retlw	254
  2177  1065  34FE               	retlw	254
  2178  1066                     __end_of_CC2500_patable_vaule:	
  2179                           
  2180                           	psect	nvBANK0
  2181  006F                     __pnvBANK0:	
  2182  006F                     _product:	
  2183  006F                     	ds	1
  2184  000C                     _PORTA	set	12
  2185  000D                     _PORTB	set	13
  2186  000E                     _PORTC	set	14
  2187  0015                     _TMR0	set	21
  2188  005F                     _GIE	set	95
  2189  005B                     _IOCIE	set	91
  2190  0058                     _IOCIF	set	88
  2191  005E                     _PEIE	set	94
  2192  0060                     _RA0	set	96
  2193  0063                     _RA3	set	99
  2194  0064                     _RA4	set	100
  2195  0066                     _RA6	set	102
  2196  0067                     _RA7	set	103
  2197  0068                     _RB0	set	104
  2198  0069                     _RB1	set	105
  2199  006B                     _RB3	set	107
  2200  006C                     _RB4	set	108
  2201  006D                     _RB5	set	109
  2202  0070                     _RC0	set	112
  2203  0071                     _RC1	set	113
  2204  0072                     _RC2	set	114
  2205  0074                     _RC4	set	116
  2206  0075                     _RC5	set	117
  2207  0076                     _RC6	set	118
  2208  0077                     _RC7	set	119
  2209  005D                     _TMR0IE	set	93
  2210  005A                     _TMR0IF	set	90
  2211  009D                     _ADCON0	set	157
  2212  009E                     _ADCON1	set	158
  2213  009C                     _ADRESH	set	156
  2214  009B                     _ADRESL	set	155
  2215  0095                     _OPTION_REG	set	149
  2216  0099                     _OSCCON	set	153
  2217  008C                     _TRISA	set	140
  2218  008D                     _TRISB	set	141
  2219  008E                     _TRISC	set	142
  2220  04E9                     _GO_nDONE	set	1257
  2221  0117                     _FVRCON	set	279
  2222  010C                     _LATA	set	268
  2223  010D                     _LATB	set	269
  2224  010E                     _LATC	set	270
  2225  018C                     _ANSELA	set	396
  2226  018D                     _ANSELB	set	397
  2227  018E                     _ANSELC	set	398
  2228  0192                     _PMADRH	set	402
  2229  0191                     _PMADRL	set	401
  2230  0196                     _PMCON2	set	406
  2231  0194                     _PMDATH	set	404
  2232  0193                     _PMDATL	set	403
  2233  0CAE                     _CFGS	set	3246
  2234  0CAC                     _FREE	set	3244
  2235  0CAD                     _LWLO	set	3245
  2236  0CA8                     _RD	set	3240
  2237  0CA9                     _WR	set	3241
  2238  0CAA                     _WREN	set	3242
  2239  1069                     _WPUB1	set	4201
  2240  106A                     _WPUB2	set	4202
  2241  0396                     _IOCBF	set	918
  2242  0395                     _IOCBN	set	917
  2243  0394                     _IOCBP	set	916
  2244  1CB2                     _IOCBF2	set	7346
  2245                           
  2246                           ; #config settings
  2247  0000                     
  2248                           	psect	cinit
  2249  0015                     start_initialization:	
  2250  0015                     __initialization:	
  2251                           
  2252                           ; Clear objects allocated to BITCOMMON
  2253  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2254                           
  2255                           ; Clear objects allocated to COMMON
  2256  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2257  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2258  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2259  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2260  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2261                           
  2262                           ; Clear objects allocated to BANK1
  2263  001B  30A0               	movlw	low __pbssBANK1
  2264  001C  0084               	movwf	4
  2265  001D  3000               	movlw	high __pbssBANK1
  2266  001E  0085               	movwf	5
  2267  001F  304D               	movlw	77
  2268  0020  319C  24C7  3180   	fcall	clear_ram0
  2269                           
  2270                           ; Clear objects allocated to BANK2
  2271  0023  3020               	movlw	low __pbssBANK2
  2272  0024  0084               	movwf	4
  2273  0025  3001               	movlw	high __pbssBANK2
  2274  0026  0085               	movwf	5
  2275  0027  3050               	movlw	80
  2276  0028  319C  24C7  3180   	fcall	clear_ram0
  2277                           
  2278                           ; Clear objects allocated to BANK3
  2279  002B  30A0               	movlw	low __pbssBANK3
  2280  002C  0084               	movwf	4
  2281  002D  3001               	movlw	high __pbssBANK3
  2282  002E  0085               	movwf	5
  2283  002F  304C               	movlw	76
  2284  0030  319C  24C7  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK4
  2287  0033  3040               	movlw	low __pbssBANK4
  2288  0034  0084               	movwf	4
  2289  0035  3002               	movlw	high __pbssBANK4
  2290  0036  0085               	movwf	5
  2291  0037  3009               	movlw	9
  2292  0038  319C  24C7  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Initialize objects allocated to BANK4
  2295  003B  3001               	movlw	low __pidataBANK4
  2296  003C  0084               	movwf	4
  2297  003D  3091               	movlw	(high __pidataBANK4)| (0+128)
  2298  003E  0085               	movwf	5
  2299  003F  3020               	movlw	low __pdataBANK4
  2300  0040  0086               	movwf	6
  2301  0041  3002               	movlw	high __pdataBANK4
  2302  0042  0087               	movwf	7
  2303  0043  3020               	movlw	32
  2304  0044  319C  24C1         	fcall	init_ram
  2305  0046                     end_of_initialization:	
  2306                           ;End of C runtime variable initialization code
  2307                           
  2308  0046                     __end_of__initialization:	
  2309  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2310  0047  0020               	movlb	0
  2311  0048  3196  2E15         	ljmp	_main	;jump to C main() function
  2312                           
  2313                           	psect	bitbssCOMMON
  2314  03E8                     __pbitbssCOMMON:	
  2315  03E8                     _Receive_OK:	
  2316  03E8                     	ds	1
  2317  03E9                     _Transceive_OK:	
  2318  03E9                     	ds	1
  2319                           
  2320                           	psect	bssCOMMON
  2321  0078                     __pbssCOMMON:	
  2322  0078                     _Sw:	
  2323  0078                     	ds	2
  2324  007A                     _DelayOff:	
  2325  007A                     	ds	1
  2326  007B                     _DimmerLights:	
  2327  007B                     	ds	1
  2328  007C                     _DimmerLightsIntr:	
  2329  007C                     	ds	1
  2330                           
  2331                           	psect	bssBANK1
  2332  00A0                     __pbssBANK1:	
  2333  00A0                     _myMain:	
  2334  00A0                     	ds	18
  2335  00B2                     _Buz1:	
  2336  00B2                     	ds	12
  2337  00BE                     _RF1:	
  2338  00BE                     	ds	5
  2339  00C3                     _LED:	
  2340  00C3                     	ds	2
  2341  00C5                     _RF_Count:	
  2342  00C5                     	ds	2
  2343  00C7                     _CRC:	
  2344  00C7                     	ds	1
  2345  00C8                     _Dimmer:	
  2346  00C8                     	ds	1
  2347  00C9                     _DimmerLights11:	
  2348  00C9                     	ds	1
  2349  00CA                     _DimmerLights22:	
  2350  00CA                     	ds	1
  2351  00CB                     _DimmerLights33:	
  2352  00CB                     	ds	1
  2353  00CC                     _DimmerLightsIntrIOC:	
  2354  00CC                     	ds	1
  2355  00CD                     _RFSW:	
  2356  00CD                     	ds	1
  2357  00CE                     _RSSI:	
  2358  00CE                     	ds	1
  2359  00CF                     _Rx_Length:	
  2360  00CF                     	ds	1
  2361  00D0                     _SPI0Buffer:	
  2362  00D0                     	ds	1
  2363  00D1                     _Tx_Length:	
  2364  00D1                     	ds	1
  2365  00D2                     _r_address:	
  2366  00D2                     	ds	1
  2367  00D3                     _r_data:	
  2368  00D3                     	ds	1
  2369  00D4                     _s_data:	
  2370  00D4                     	ds	1
  2371  00D5                     _Temp1:	
  2372  00D5                     	ds	14
  2373  00E3                     _VarErrLED:	
  2374  00E3                     	ds	4
  2375  00E7                     _Dimmer1:	
  2376  00E7                     	ds	3
  2377  00EA                     _RFSW1:	
  2378  00EA                     	ds	1
  2379  00EB                     _RFSW2:	
  2380  00EB                     	ds	1
  2381  00EC                     _RFSW3:	
  2382  00EC                     	ds	1
  2383                           
  2384                           	psect	bssBANK2
  2385  0120                     __pbssBANK2:	
  2386  0120                     _RF_Data:	
  2387  0120                     	ds	21
  2388  0135                     _Timer0:	
  2389  0135                     	ds	8
  2390  013D                     _DimmerLights1:	
  2391  013D                     	ds	15
  2392  014C                     _Sw1:	
  2393  014C                     	ds	9
  2394  0155                     _DlySw1:	
  2395  0155                     	ds	5
  2396  015A                     _DlySw2:	
  2397  015A                     	ds	5
  2398  015F                     _DlySw3:	
  2399  015F                     	ds	5
  2400  0164                     _VarLED1:	
  2401  0164                     	ds	4
  2402  0168                     _VarLED2:	
  2403  0168                     	ds	4
  2404  016C                     _VarLED3:	
  2405  016C                     	ds	4
  2406                           
  2407                           	psect	bssBANK3
  2408  01A0                     __pbssBANK3:	
  2409  01A0                     _Memory:	
  2410  01A0                     	ds	37
  2411  01C5                     _DimmerLights2:	
  2412  01C5                     	ds	15
  2413  01D4                     _DimmerLights3:	
  2414  01D4                     	ds	15
  2415  01E3                     _Sw2:	
  2416  01E3                     	ds	9
  2417                           
  2418                           	psect	bssBANK4
  2419  0240                     __pbssBANK4:	
  2420  0240                     _Sw3:	
  2421  0240                     	ds	9
  2422                           
  2423                           	psect	dataBANK4
  2424  0220                     __pdataBANK4:	
  2425  0220                     __product:	
  2426  0220                     	ds	32
  2427                           
  2428                           	psect	clrtext
  2429  1CC7                     clear_ram0:	
  2430                           ;	Called with FSR0 containing the base address, and
  2431                           ;	WREG with the size to clear
  2432                           
  2433  1CC7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2434  1CC8                     clrloop0:	
  2435  1CC8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2436  1CC9  3101               	addfsr 0,1
  2437  1CCA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2438  1CCB  2CC8               	goto	clrloop0	;have we reached the end yet?
  2439  1CCC  3400               	retlw	0	;all done for this memory range, return
  2440                           
  2441                           	psect	inittext
  2442  1CC1                     init_ram:	
  2443  1CC1  00FE               	movwf	126
  2444  1CC2                     initloop:	
  2445  1CC2  0012               	moviw fsr0++
  2446  1CC3  001E               	movwi fsr1++
  2447  1CC4  0BFE               	decfsz	126,f
  2448  1CC5  2CC2               	goto	initloop
  2449  1CC6  3400               	retlw	0
  2450                           
  2451                           	psect	cstackCOMMON
  2452  0070                     __pcstackCOMMON:	
  2453  0070                     ?_Timeout_Counter:	
  2454  0070                     ?_set_TimeoutCleared:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_CC2500_WriteByte:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_CC2500_WriteCommand:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_ReadStatus:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_ReadByte:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_PowerRST:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_CC2500_InitSetREG:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_InitPATable:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_ClearTXFIFO:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_CC2500_ClearRXFIFO:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_CC2500_FrequencyCabr:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_SIDLEMode:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_DlyOff_Initialization:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_DlyOff_Main:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setTxData:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setDimmerLights_Initialization:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_Dimmer_Initialization:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_setMemory_GO:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_setDimmerLights_Main:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_setDimmerLights_ERROR:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_setLED_Initialization:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setLED_Main:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_Fosc_Set:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_IO_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_TMR0_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_ADC_Set:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_IOC_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_IOC_ISR:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_TMR0_ISR:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_Flash_Memory_Write:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_Flash_Memory_Modify:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_myMain_Initialization:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_Temp_Initialization:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Switch_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_RF_Initialization:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_getTemp_AD:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_my_Main:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_Temp_Main:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_Switch_Main:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_RF_Main:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_setTemp_Enable:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_setSw_Enable:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_setRF_Enable:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setTemp_Initialization:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_setTemp_Main:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_setOverTemp_Exceptions:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_setRF_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_setRF_Main:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_RF_RxDisable:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_getRxData:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_setLog_Code:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setControl_Lights_Table:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_setRFSW_Control:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setRFSW_AdjControl:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_setRF_DimmerValue:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_setSw_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setSw_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_Sw_DimmerOnFunc:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_Sw_DimmerAdjFunc:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_Sw_DimmerOffFunc:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_Buzzer_Initialization:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_Buzzer_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_TxData:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_RxData:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_PowerOnInitial:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DelayOffPointSelect:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_DelayOff_Initialization:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_DelayOff_Main:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_DimmerIntrIOCPointSelect:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ??_DimmerIntrIOCPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_DimmerIntrPointSelect:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ??_DimmerIntrPointSelect:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setDimmerLights_IntrControl:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DimmerLightsPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DimmerLights_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_DimmerLights_Close:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DimmerLights_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_DimmerLights_Exceptions:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setDimmerLights_AdjRF:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_LedPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_LED_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_LED_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_Mcu_Initialization:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_ISR:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setDimmerReClock:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Flash_Memory_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Flash_Memory_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Flash_Memory_Unlock:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_Flash_Memory_Erasing:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_setRF_Learn:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_RfSWPointSelect:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_TouchPower:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_SwPointSelect:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_DelayTimejudge:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_getDimmerLights_StatusFlag:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_getPercentValue:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Read:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_setPercentValue:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751                           
  2752                           ; 1 bytes @ 0x0
  2753  0070                     	ds	1
  2754  0071                     DimmerIntrIOCPointSelect@lights:	
  2755  0071                     DimmerIntrPointSelect@lights:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758                           
  2759                           ; 1 bytes @ 0x1
  2760  0071                     	ds	1
  2761  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2762  0072                     ??_setDimmerLights_IntrControl:	
  2763                           ; 0 bytes @ 0x2
  2764                           
  2765  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2766                           ; 0 bytes @ 0x2
  2767                           
  2768                           
  2769                           ; 1 bytes @ 0x2
  2770  0072                     	ds	1
  2771  0073                     ??_IOC_ISR:	
  2772  0073                     ??_setDimmerReClock:	
  2773                           ; 0 bytes @ 0x3
  2774                           
  2775                           
  2776                           ; 0 bytes @ 0x3
  2777  0073                     	ds	3
  2778  0076                     setDimmerLights_IntrControl@lights:	
  2779                           
  2780                           ; 1 bytes @ 0x6
  2781  0076                     	ds	1
  2782  0077                     ??_TMR0_ISR:	
  2783  0077                     ??_ISR:	
  2784                           ; 0 bytes @ 0x7
  2785                           
  2786                           
  2787                           ; 0 bytes @ 0x7
  2788  0077                     	ds	1
  2789                           
  2790                           	psect	cstackBANK0
  2791  0020                     __pcstackBANK0:	
  2792  0020                     ??_Timeout_Counter:	
  2793  0020                     ??_set_TimeoutCleared:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ??_CC2500_WriteByte:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_CC2500_ReadByte:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ?_DelayTime_1us:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_setTxData:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_Dimmer_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_getDimmerLights_StatusFlag:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_setMemory_GO:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_Fosc_Set:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_IO_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_TMR0_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_ADC_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_IOC_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_Flash_Memory_Read:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_Flash_Memory_Write:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_myMain_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Temp_Initialization:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setTemp_Enable:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_setRF_Enable:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setTemp_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_setRF_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Buzzer_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_Buzzer_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_DelayOffPointSelect:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_DimmerLightsPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_LedPointSelect:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Mcu_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Unlock:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_Flash_Memory_Erasing:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setRF_Learn:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_RfSWPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_TouchPower:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_SwPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?___bmul:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ?_getBuz_GO:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0020                     ?_getAD:	
  2899                           ; 2 bytes @ 0x0
  2900                           
  2901  0020                     ?___awdiv:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     ?___ftpack:	
  2905                           ; 2 bytes @ 0x0
  2906                           
  2907  0020                     LedPointSelect@led:	
  2908                           ; 3 bytes @ 0x0
  2909                           
  2910  0020                     getAD@adcon1:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     setTemp_Enable@command:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     setRF_Learn@command:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0020                     setRF_Enable@command:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     SwPointSelect@sw:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     ___bmul@multiplicand:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     DelayTime_1us@count:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     ___awdiv@divisor:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934  0020                     ___ftpack@arg:	
  2935                           ; 2 bytes @ 0x0
  2936                           
  2937                           
  2938                           ; 3 bytes @ 0x0
  2939  0020                     	ds	1
  2940  0021                     ?_setSw_Status:	
  2941  0021                     ?_setLED:	
  2942                           ; 0 bytes @ 0x1
  2943                           
  2944  0021                     ??_setLED_Main:	
  2945                           ; 0 bytes @ 0x1
  2946                           
  2947  0021                     ??_RF_Initialization:	
  2948                           ; 0 bytes @ 0x1
  2949                           
  2950  0021                     ??_setSw_Enable:	
  2951                           ; 0 bytes @ 0x1
  2952                           
  2953  0021                     ??___bmul:	
  2954                           ; 0 bytes @ 0x1
  2955                           
  2956  0021                     CC2500_WriteByte@loop_a:	
  2957                           ; 0 bytes @ 0x1
  2958                           
  2959  0021                     CC2500_ReadByte@loop_b:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962  0021                     DelayOffPointSelect@sw:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965  0021                     DimmerLightsPointSelect@lights:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     getDimmerLights_StatusFlag@Status:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     setLED@command:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     Flash_Memory_Read@i:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     Flash_Memory_Write@i:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     RfSWPointSelect@sw:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     setSw_Enable@command:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     setSw_Status@command:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989                           
  2990                           ; 1 bytes @ 0x1
  2991  0021                     	ds	1
  2992  0022                     ??_CC2500_WriteCommand:	
  2993  0022                     ??_CC2500_ReadStatus:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ??_DelayTime_1us:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     ?_CC2500_WriteREG:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ??_DlyOff_Initialization:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ??_setSw_Status:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_setRFSW_Status:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setDimmerLights_Trigger:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setDimmerLights_Switch:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ??_setDimmerLights_Initialization:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_setDimmerLights_TriggerERROR:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ??_setLED:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ??_getBuz_GO:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setDimmerLights_AdjGo:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ?_setDimmerLights_TriggerAdj:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     CC2500_WriteREG@value:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     DlyOff_Initialization@sw:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     _getDimmerLights_StatusFlag$2126:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     setDimmerLights_TriggerERROR@command:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0022                     setDimmerLights_Switch@command:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0022                     setDimmerLights_AdjGo@command:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setDimmerLights_Trigger@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setDimmerLights_TriggerAdj@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setLED@led:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     Flash_Memory_Read@address:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setMemory_GO@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     setRFSW_Status@command:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     setSw_Status@sw:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     ___bmul@product:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     DelayTime_1us@i:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     ___awdiv@dividend:	
  3081                           ; 2 bytes @ 0x2
  3082                           
  3083                           
  3084                           ; 2 bytes @ 0x2
  3085  0022                     	ds	1
  3086  0023                     ??_CC2500_WriteREG:	
  3087  0023                     ??_setRFSW_Status:	
  3088                           ; 0 bytes @ 0x3
  3089                           
  3090  0023                     ??_setDimmerLights_Trigger:	
  3091                           ; 0 bytes @ 0x3
  3092                           
  3093  0023                     ??_setDimmerLights_Switch:	
  3094                           ; 0 bytes @ 0x3
  3095                           
  3096  0023                     ?_setDimmerLights:	
  3097                           ; 0 bytes @ 0x3
  3098                           
  3099  0023                     ??_setDimmerLights_TriggerERROR:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_setLED_Initialization:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setSw_Initialization:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_DelayOff_Initialization:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_DimmerLights_Close:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_setDimmerLights_AdjGo:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     ??_setDimmerLights_TriggerAdj:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     ??_getAD:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     CC2500_WriteCommand@command:	
  3124                           ; 0 bytes @ 0x3
  3125                           
  3126  0023                     CC2500_ReadStatus@status_addr:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     setDimmerLights_Initialization@lights:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setDimmerLights_TriggerERROR@lights:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setDimmerLights@status:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     setDimmerLights_Switch@lights:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     setDimmerLights_AdjGo@lights:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setDimmerLights_Trigger@lights:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     setDimmerLights_TriggerAdj@lights:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setLED_Initialization@led:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setLED_Main@led:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     getAD@adcon0:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     Flash_Memory_Read@ret:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setRFSW_Status@sw:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     setSw_Initialization@sw:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0023                     ___bmul@multiplier:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0023                     ___ftpack@exp:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174                           
  3175                           ; 1 bytes @ 0x3
  3176  0023                     	ds	1
  3177  0024                     ??_CC2500_ClearTXFIFO:	
  3178  0024                     ??_CC2500_ClearRXFIFO:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_CC2500_SIDLEMode:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_DelayTimejudge:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_setDimmerLights:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_setDimmerLights_ERROR:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??_Flash_Memory_Modify:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     ??_Switch_Initialization:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??_getTemp_AD:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     ??_RF_RxDisable:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     ??_Sw_DimmerAdjFunc:	
  3206                           ; 0 bytes @ 0x4
  3207                           
  3208  0024                     ??_CC2500_TxData:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     ??_CC2500_RxData:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     ??_DimmerLights_Initialization:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     ??_LED_Initialization:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_LED_Main:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??___awdiv:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     CC2500_WriteREG@w_addr:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ___ftpack@sign:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232  0024                     getBuz_GO@i:	
  3233                           ; 1 bytes @ 0x4
  3234                           
  3235  0024                     DelayTime_1us@j:	
  3236                           ; 2 bytes @ 0x4
  3237                           
  3238                           
  3239                           ; 2 bytes @ 0x4
  3240  0024                     	ds	1
  3241  0025                     ??_CC2500_InitSetREG:	
  3242  0025                     ??_CC2500_InitPATable:	
  3243                           ; 0 bytes @ 0x5
  3244                           
  3245  0025                     ??___ftpack:	
  3246                           ; 0 bytes @ 0x5
  3247                           
  3248  0025                     CC2500_TxData@loop_e:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     CC2500_RxData@loop_f:	
  3252                           ; 1 bytes @ 0x5
  3253                           
  3254  0025                     setDimmerLights_ERROR@lights:	
  3255                           ; 1 bytes @ 0x5
  3256                           
  3257  0025                     setDimmerLights@lights:	
  3258                           ; 1 bytes @ 0x5
  3259                           
  3260  0025                     Flash_Memory_Modify@i:	
  3261                           ; 1 bytes @ 0x5
  3262                           
  3263  0025                     getTemp_AD@channel:	
  3264                           ; 1 bytes @ 0x5
  3265                           
  3266  0025                     _Sw_DimmerAdjFunc$5433:	
  3267                           ; 1 bytes @ 0x5
  3268                           
  3269  0025                     ___awdiv@counter:	
  3270                           ; 1 bytes @ 0x5
  3271                           
  3272                           
  3273                           ; 1 bytes @ 0x5
  3274  0025                     	ds	1
  3275  0026                     ??_CC2500_PowerRST:	
  3276  0026                     ??_CC2500_FrequencyCabr:	
  3277                           ; 0 bytes @ 0x6
  3278                           
  3279  0026                     ??_Flash_Memory_Main:	
  3280                           ; 0 bytes @ 0x6
  3281                           
  3282  0026                     CC2500_InitSetREG@temp1:	
  3283                           ; 0 bytes @ 0x6
  3284                           
  3285  0026                     CC2500_InitPATable@temp:	
  3286                           ; 1 bytes @ 0x6
  3287                           
  3288  0026                     DelayTimejudge@i:	
  3289                           ; 1 bytes @ 0x6
  3290                           
  3291  0026                     _Sw_DimmerAdjFunc$5434:	
  3292                           ; 1 bytes @ 0x6
  3293                           
  3294  0026                     ___awdiv@sign:	
  3295                           ; 1 bytes @ 0x6
  3296                           
  3297                           
  3298                           ; 1 bytes @ 0x6
  3299  0026                     	ds	1
  3300  0027                     CC2500_InitSetREG@temp2:	
  3301  0027                     CC2500_InitPATable@loop_d:	
  3302                           ; 1 bytes @ 0x7
  3303                           
  3304  0027                     DelayTimejudge@j:	
  3305                           ; 1 bytes @ 0x7
  3306                           
  3307  0027                     _Sw_DimmerAdjFunc$5435:	
  3308                           ; 1 bytes @ 0x7
  3309                           
  3310  0027                     ___awdiv@quotient:	
  3311                           ; 1 bytes @ 0x7
  3312                           
  3313                           
  3314                           ; 2 bytes @ 0x7
  3315  0027                     	ds	1
  3316  0028                     ?___awtoft:	
  3317  0028                     CC2500_InitSetREG@loop_c:	
  3318                           ; 3 bytes @ 0x8
  3319                           
  3320  0028                     DelayTimejudge@k:	
  3321                           ; 1 bytes @ 0x8
  3322                           
  3323  0028                     Sw_DimmerAdjFunc@Idle:	
  3324                           ; 1 bytes @ 0x8
  3325                           
  3326  0028                     ___awtoft@c:	
  3327                           ; 1 bytes @ 0x8
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x8
  3331  0028                     	ds	1
  3332  0029                     ?_setBuz:	
  3333  0029                     ??_CC2500_PowerOnInitial:	
  3334                           ; 0 bytes @ 0x9
  3335                           
  3336  0029                     DelayTimejudge@value:	
  3337                           ; 0 bytes @ 0x9
  3338                           
  3339  0029                     Sw_DimmerAdjFunc@sw:	
  3340                           ; 1 bytes @ 0x9
  3341                           
  3342  0029                     setBuz@time:	
  3343                           ; 1 bytes @ 0x9
  3344                           
  3345                           
  3346                           ; 2 bytes @ 0x9
  3347  0029                     	ds	1
  3348  002A                     ?_setDelayOff_GO:	
  3349  002A                     setDelayOff_GO@command:	
  3350                           ; 0 bytes @ 0xA
  3351                           
  3352                           
  3353                           ; 1 bytes @ 0xA
  3354  002A                     	ds	1
  3355  002B                     ??_setBuz:	
  3356  002B                     ??___awtoft:	
  3357                           ; 0 bytes @ 0xB
  3358                           
  3359  002B                     setDelayOff_GO@value:	
  3360                           ; 0 bytes @ 0xB
  3361                           
  3362                           
  3363                           ; 1 bytes @ 0xB
  3364  002B                     	ds	1
  3365  002C                     ??_setDelayOff_GO:	
  3366  002C                     setBuz@count:	
  3367                           ; 0 bytes @ 0xC
  3368                           
  3369                           
  3370                           ; 1 bytes @ 0xC
  3371  002C                     	ds	1
  3372  002D                     ??_my_Main:	
  3373  002D                     ??_setLog_Code:	
  3374                           ; 0 bytes @ 0xD
  3375                           
  3376  002D                     ??_DimmerLights_Exceptions:	
  3377                           ; 0 bytes @ 0xD
  3378                           
  3379  002D                     DimmerLights_Exceptions@status:	
  3380                           ; 0 bytes @ 0xD
  3381                           
  3382  002D                     ___awtoft@sign:	
  3383                           ; 1 bytes @ 0xD
  3384                           
  3385                           
  3386                           ; 1 bytes @ 0xD
  3387  002D                     	ds	1
  3388  002E                     ??_setOverTemp_Exceptions:	
  3389  002E                     ?___ftdiv:	
  3390                           ; 0 bytes @ 0xE
  3391                           
  3392  002E                     ?___ftmul:	
  3393                           ; 3 bytes @ 0xE
  3394                           
  3395  002E                     setDelayOff_GO@sw:	
  3396                           ; 3 bytes @ 0xE
  3397                           
  3398  002E                     ___ftdiv@f2:	
  3399                           ; 1 bytes @ 0xE
  3400                           
  3401  002E                     ___ftmul@f1:	
  3402                           ; 3 bytes @ 0xE
  3403                           
  3404                           
  3405                           ; 3 bytes @ 0xE
  3406  002E                     	ds	1
  3407  002F                     setOverTemp_Exceptions@i:	
  3408                           
  3409                           ; 1 bytes @ 0xF
  3410  002F                     	ds	1
  3411  0030                     setOverTemp_Exceptions@command:	
  3412                           
  3413                           ; 1 bytes @ 0x10
  3414  0030                     	ds	1
  3415  0031                     ??_setTemp_Main:	
  3416  0031                     ___ftdiv@f1:	
  3417                           ; 0 bytes @ 0x11
  3418                           
  3419  0031                     ___ftmul@f2:	
  3420                           ; 3 bytes @ 0x11
  3421                           
  3422                           
  3423                           ; 3 bytes @ 0x11
  3424  0031                     	ds	1
  3425  0032                     ??_Temp_Main:	
  3426                           
  3427                           ; 0 bytes @ 0x12
  3428  0032                     	ds	2
  3429  0034                     ??___ftdiv:	
  3430  0034                     ??___ftmul:	
  3431                           ; 0 bytes @ 0x14
  3432                           
  3433                           
  3434                           ; 0 bytes @ 0x14
  3435  0034                     	ds	4
  3436  0038                     ___ftdiv@cntr:	
  3437  0038                     ___ftmul@exp:	
  3438                           ; 1 bytes @ 0x18
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x18
  3442  0038                     	ds	1
  3443  0039                     ___ftdiv@f3:	
  3444  0039                     ___ftmul@f3_as_product:	
  3445                           ; 3 bytes @ 0x19
  3446                           
  3447                           
  3448                           ; 3 bytes @ 0x19
  3449  0039                     	ds	3
  3450  003C                     ___ftdiv@exp:	
  3451  003C                     ___ftmul@cntr:	
  3452                           ; 1 bytes @ 0x1C
  3453                           
  3454                           
  3455                           ; 1 bytes @ 0x1C
  3456  003C                     	ds	1
  3457  003D                     ___ftdiv@sign:	
  3458  003D                     ___ftmul@sign:	
  3459                           ; 1 bytes @ 0x1D
  3460                           
  3461                           
  3462                           ; 1 bytes @ 0x1D
  3463  003D                     	ds	1
  3464  003E                     ?___ftadd:	
  3465  003E                     ___ftadd@f1:	
  3466                           ; 3 bytes @ 0x1E
  3467                           
  3468                           
  3469                           ; 3 bytes @ 0x1E
  3470  003E                     	ds	3
  3471  0041                     ___ftadd@f2:	
  3472                           
  3473                           ; 3 bytes @ 0x21
  3474  0041                     	ds	3
  3475  0044                     ??___ftadd:	
  3476                           
  3477                           ; 0 bytes @ 0x24
  3478  0044                     	ds	4
  3479  0048                     ___ftadd@sign:	
  3480                           
  3481                           ; 1 bytes @ 0x28
  3482  0048                     	ds	1
  3483  0049                     ___ftadd@exp2:	
  3484                           
  3485                           ; 1 bytes @ 0x29
  3486  0049                     	ds	1
  3487  004A                     ___ftadd@exp1:	
  3488                           
  3489                           ; 1 bytes @ 0x2A
  3490  004A                     	ds	1
  3491  004B                     ?___fttol:	
  3492  004B                     ___fttol@f1:	
  3493                           ; 4 bytes @ 0x2B
  3494                           
  3495                           
  3496                           ; 3 bytes @ 0x2B
  3497  004B                     	ds	4
  3498  004F                     ??___fttol:	
  3499                           
  3500                           ; 0 bytes @ 0x2F
  3501  004F                     	ds	4
  3502  0053                     ___fttol@sign1:	
  3503                           
  3504                           ; 1 bytes @ 0x33
  3505  0053                     	ds	1
  3506  0054                     ___fttol@lval:	
  3507                           
  3508                           ; 4 bytes @ 0x34
  3509  0054                     	ds	4
  3510  0058                     ___fttol@exp1:	
  3511                           
  3512                           ; 1 bytes @ 0x38
  3513  0058                     	ds	1
  3514  0059                     ??_getPercentValue:	
  3515  0059                     ??_setPercentValue:	
  3516                           ; 0 bytes @ 0x39
  3517                           
  3518  0059                     setPercentValue@value:	
  3519                           ; 0 bytes @ 0x39
  3520                           
  3521                           
  3522                           ; 1 bytes @ 0x39
  3523  0059                     	ds	1
  3524  005A                     setPercentValue@i:	
  3525                           
  3526                           ; 3 bytes @ 0x3A
  3527  005A                     	ds	1
  3528  005B                     getPercentValue@value:	
  3529                           
  3530                           ; 1 bytes @ 0x3B
  3531  005B                     	ds	1
  3532  005C                     getPercentValue@i:	
  3533                           
  3534                           ; 3 bytes @ 0x3C
  3535  005C                     	ds	1
  3536  005D                     ?_setRF_DimmerLights:	
  3537  005D                     ??_Flash_Memory_Initialization:	
  3538                           ; 0 bytes @ 0x3D
  3539                           
  3540  005D                     setRF_DimmerLights@on:	
  3541                           ; 0 bytes @ 0x3D
  3542                           
  3543                           
  3544                           ; 1 bytes @ 0x3D
  3545  005D                     	ds	1
  3546  005E                     ??_setRF_DimmerLights:	
  3547  005E                     Flash_Memory_Initialization@i:	
  3548                           ; 0 bytes @ 0x3E
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0x3E
  3552  005E                     	ds	1
  3553  005F                     ??_setDimmerLights_AdjRF:	
  3554                           
  3555                           ; 0 bytes @ 0x3F
  3556  005F                     	ds	1
  3557  0060                     setDimmerLights_AdjRF@lights:	
  3558  0060                     setRF_DimmerLights@status:	
  3559                           ; 1 bytes @ 0x40
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x40
  3563  0060                     	ds	1
  3564  0061                     ??_setRF_DimmerValue:	
  3565  0061                     setRF_DimmerLights@lights:	
  3566                           ; 0 bytes @ 0x41
  3567                           
  3568                           
  3569                           ; 1 bytes @ 0x41
  3570  0061                     	ds	1
  3571  0062                     ??_DlyOff_Main:	
  3572  0062                     ?_setDimmerLights_Adj:	
  3573                           ; 0 bytes @ 0x42
  3574                           
  3575  0062                     ??_setRFSW_Control:	
  3576                           ; 0 bytes @ 0x42
  3577                           
  3578  0062                     ??_Sw_DimmerOnFunc:	
  3579                           ; 0 bytes @ 0x42
  3580                           
  3581  0062                     ??_Sw_DimmerOffFunc:	
  3582                           ; 0 bytes @ 0x42
  3583                           
  3584  0062                     setDimmerLights_Adj@status:	
  3585                           ; 0 bytes @ 0x42
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x42
  3589  0062                     	ds	1
  3590  0063                     ??_setDimmerLights_Adj:	
  3591  0063                     setRFSW_Control@sw:	
  3592                           ; 0 bytes @ 0x43
  3593                           
  3594  0063                     setRF_DimmerValue@lights:	
  3595                           ; 1 bytes @ 0x43
  3596                           
  3597  0063                     _Sw_DimmerOnFunc$5423:	
  3598                           ; 1 bytes @ 0x43
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0x43
  3602  0063                     	ds	1
  3603  0064                     ??_setRFSW_AdjControl:	
  3604  0064                     DlyOff_Main@sw:	
  3605                           ; 0 bytes @ 0x44
  3606                           
  3607  0064                     setDimmerLights_Adj@lights:	
  3608                           ; 1 bytes @ 0x44
  3609                           
  3610  0064                     _Sw_DimmerOnFunc$5424:	
  3611                           ; 1 bytes @ 0x44
  3612                           
  3613  0064                     Sw_DimmerOffFunc@sw:	
  3614                           ; 1 bytes @ 0x44
  3615                           
  3616                           
  3617                           ; 1 bytes @ 0x44
  3618  0064                     	ds	1
  3619  0065                     ??_setDimmerLights_Main:	
  3620  0065                     ??_DelayOff_Main:	
  3621                           ; 0 bytes @ 0x45
  3622                           
  3623  0065                     _Sw_DimmerOnFunc$5425:	
  3624                           ; 0 bytes @ 0x45
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x45
  3628  0065                     	ds	1
  3629  0066                     _setDimmerLights_Main$2121:	
  3630  0066                     setRFSW_AdjControl@sw:	
  3631                           ; 1 bytes @ 0x46
  3632                           
  3633  0066                     Sw_DimmerOnFunc@Idle:	
  3634                           ; 1 bytes @ 0x46
  3635                           
  3636                           
  3637                           ; 1 bytes @ 0x46
  3638  0066                     	ds	1
  3639  0067                     ??_setRF_Main:	
  3640  0067                     ??_getRxData:	
  3641                           ; 0 bytes @ 0x47
  3642                           
  3643  0067                     ??_setControl_Lights_Table:	
  3644                           ; 0 bytes @ 0x47
  3645                           
  3646  0067                     _setDimmerLights_Main$2122:	
  3647                           ; 0 bytes @ 0x47
  3648                           
  3649  0067                     Sw_DimmerOnFunc@sw:	
  3650                           ; 1 bytes @ 0x47
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0x47
  3654  0067                     	ds	1
  3655  0068                     ??_setSw_Main:	
  3656  0068                     _setDimmerLights_Main$2123:	
  3657                           ; 0 bytes @ 0x48
  3658                           
  3659  0068                     _setRF_Main$4557:	
  3660                           ; 1 bytes @ 0x48
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0x48
  3664  0068                     	ds	1
  3665  0069                     ??_RF_Main:	
  3666  0069                     setDimmerLights_Main@clear:	
  3667                           ; 0 bytes @ 0x49
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0x49
  3671  0069                     	ds	1
  3672  006A                     setDimmerLights_Main@lights:	
  3673  006A                     setSw_Main@sw:	
  3674                           ; 1 bytes @ 0x4A
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0x4A
  3678  006A                     	ds	1
  3679  006B                     ??_Switch_Main:	
  3680  006B                     ??_DimmerLights_Main:	
  3681                           ; 0 bytes @ 0x4B
  3682                           
  3683  006B                     ?_main:	
  3684                           ; 0 bytes @ 0x4B
  3685                           
  3686  006B                     main@argc:	
  3687                           ; 2 bytes @ 0x4B
  3688                           
  3689                           
  3690                           ; 2 bytes @ 0x4B
  3691  006B                     	ds	2
  3692  006D                     main@argv:	
  3693                           
  3694                           ; 2 bytes @ 0x4D
  3695  006D                     	ds	2
  3696  006F                     ??_main:	
  3697                           
  3698                           	psect	maintext
  3699  1615                     __pmaintext:	
  3700                           ; 0 bytes @ 0x4F
  3701 ;;
  3702 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3703 ;;
  3704 ;; *************** function _main *****************
  3705 ;; Defined at:
  3706 ;;		line 7 in file "../src/Main_B1.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  argc            2   75[BANK0 ] int 
  3709 ;;  argv            2   77[BANK0 ] PTR PTR unsigned char 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  2   75[BANK0 ] int 
  3714 ;; Registers used:
  3715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 17F/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;Total ram usage:        4 bytes
  3726 ;; Hardware stack levels required when called:   15
  3727 ;; This function calls:
  3728 ;;		_Buzzer_Initialization
  3729 ;;		_Buzzer_Main
  3730 ;;		_CC2500_PowerOnInitial
  3731 ;;		_DelayOff_Initialization
  3732 ;;		_DelayOff_Main
  3733 ;;		_DimmerLights_Initialization
  3734 ;;		_DimmerLights_Main
  3735 ;;		_Flash_Memory_Initialization
  3736 ;;		_Flash_Memory_Main
  3737 ;;		_LED_Initialization
  3738 ;;		_LED_Main
  3739 ;;		_Mcu_Initialization
  3740 ;;		_RF_Initialization
  3741 ;;		_RF_Main
  3742 ;;		_Switch_Initialization
  3743 ;;		_Switch_Main
  3744 ;;		_Temp_Initialization
  3745 ;;		_Temp_Main
  3746 ;;		_getTemp_AD
  3747 ;;		_myMain_Initialization
  3748 ;;		_my_Main
  3749 ;; This function is called by:
  3750 ;;		Startup code after reset
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           
  3755                           ;psect for function _main
  3756  1615                     _main:	
  3757                           
  3758                           ;Main_B1.c: 9: myMain_Initialization();
  3759                           
  3760                           ;incstack = 0
  3761                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3762  1615  319D  25D3  3196   	fcall	_myMain_Initialization
  3763                           
  3764                           ;Main_B1.c: 10: Mcu_Initialization();
  3765  1618  319D  25A6  3196   	fcall	_Mcu_Initialization
  3766                           
  3767                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3768  161B  3184  2467  3196   	fcall	_Flash_Memory_Initialization
  3769                           
  3770                           ;Main_B1.c: 12: LED_Initialization();
  3771  161E  319E  2602  3196   	fcall	_LED_Initialization
  3772                           
  3773                           ;Main_B1.c: 13: Buzzer_Initialization();
  3774  1621  319C  249A  3196   	fcall	_Buzzer_Initialization
  3775                           
  3776                           ;Main_B1.c: 15: ;;
  3777                           ;Main_B1.c: 16: Temp_Initialization();
  3778  1624  319C  24A6  3196   	fcall	_Temp_Initialization
  3779                           
  3780                           ;Main_B1.c: 17: ;;
  3781                           ;Main_B1.c: 18: ;;
  3782                           ;Main_B1.c: 19: DelayOff_Initialization();
  3783  1627  319D  252E  3196   	fcall	_DelayOff_Initialization
  3784                           
  3785                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3786  162A  3191  2121  3196   	fcall	_DimmerLights_Initialization
  3787                           
  3788                           ;Main_B1.c: 22: ;;
  3789                           ;Main_B1.c: 23: ;;
  3790                           ;Main_B1.c: 24: ;;
  3791                           ;Main_B1.c: 25: Switch_Initialization();
  3792  162D  319E  2653  3196   	fcall	_Switch_Initialization
  3793                           
  3794                           ;Main_B1.c: 26: RF_Initialization();
  3795  1630  319C  249D  3196   	fcall	_RF_Initialization
  3796                           
  3797                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3798  1633  319E  26C5  3196   	fcall	_CC2500_PowerOnInitial
  3799  1636                     l8535:	
  3800                           ;Main_B1.c: 28: ;;
  3801                           ;Main_B1.c: 31: while (1) {
  3802                           
  3803                           
  3804                           ;Main_B1.c: 33: if (myMain.PowerON) {
  3805  1636  0021               	movlb	1	; select bank1
  3806  1637  1C20               	btfss	_myMain^(0+128),0
  3807  1638  2E3D               	goto	l8539
  3808                           
  3809                           ;Main_B1.c: 35: ;;
  3810                           ;Main_B1.c: 39: ;;
  3811                           ;Main_B1.c: 43: getTemp_AD(0x09);
  3812  1639  3009               	movlw	9
  3813  163A  3188  2002  3196   	fcall	_getTemp_AD
  3814  163D                     l8539:	
  3815                           ;Main_B1.c: 47: ;;
  3816                           
  3817                           
  3818                           ;Main_B1.c: 62: }
  3819                           ;Main_B1.c: 65: if (myMain.T0_Timerout) {
  3820  163D  0021               	movlb	1	; select bank1
  3821  163E  1CA0               	btfss	_myMain^(0+128),1
  3822  163F  2E36               	goto	l8535
  3823                           
  3824                           ;Main_B1.c: 66: myMain.T0_Timerout = 0;
  3825  1640  10A0               	bcf	_myMain^(0+128),1
  3826                           
  3827                           ;Main_B1.c: 67: my_Main();
  3828  1641  3195  253D  3196   	fcall	_my_Main
  3829                           
  3830                           ;Main_B1.c: 68: ;;
  3831                           ;Main_B1.c: 69: ;;
  3832                           ;Main_B1.c: 70: ;;
  3833                           ;Main_B1.c: 71: if (myMain.PowerON) {
  3834  1644  0021               	movlb	1	; select bank1
  3835  1645  1C20               	btfss	_myMain^(0+128),0
  3836  1646  2E36               	goto	l8535
  3837                           
  3838                           ;Main_B1.c: 72: Flash_Memory_Main();
  3839  1647  3190  20A2  3196   	fcall	_Flash_Memory_Main
  3840                           
  3841                           ;Main_B1.c: 74: LED_Main();
  3842  164A  319E  2612  3196   	fcall	_LED_Main
  3843                           
  3844                           ;Main_B1.c: 75: Buzzer_Main();
  3845  164D  3195  25CB  3196   	fcall	_Buzzer_Main
  3846                           
  3847                           ;Main_B1.c: 77: ;;
  3848                           ;Main_B1.c: 78: Temp_Main();
  3849  1650  319C  24A9  3196   	fcall	_Temp_Main
  3850                           
  3851                           ;Main_B1.c: 79: ;;
  3852                           ;Main_B1.c: 80: ;;
  3853                           ;Main_B1.c: 82: ;;
  3854                           ;Main_B1.c: 83: DimmerLights_Main();
  3855  1653  319D  2597  3196   	fcall	_DimmerLights_Main
  3856                           
  3857                           ;Main_B1.c: 84: Switch_Main();
  3858  1656  319D  2552  3196   	fcall	_Switch_Main
  3859                           
  3860                           ;Main_B1.c: 85: ;;
  3861                           ;Main_B1.c: 86: ;;
  3862                           ;Main_B1.c: 88: RF_Main();
  3863  1659  319C  24A0  3196   	fcall	_RF_Main
  3864                           
  3865                           ;Main_B1.c: 89: DelayOff_Main();
  3866  165C  319D  253A  3196   	fcall	_DelayOff_Main
  3867                           
  3868                           ;Main_B1.c: 90: ;;
  3869  165F  2E36               	goto	l8535
  3870  1660                     __end_of_main:	
  3871                           ;Main_B1.c: 91: }
  3872                           ;Main_B1.c: 92: }
  3873                           ;Main_B1.c: 110: }
  3874                           ;Main_B1.c: 111: return (0);
  3875                           ;	Return value of _main is never used
  3876                           
  3877                           
  3878                           	psect	text1
  3879  153D                     __ptext1:	
  3880 ;; *************** function _my_Main *****************
  3881 ;; Defined at:
  3882 ;;		line 128 in file "../src/Main_B1.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;		None               void
  3889 ;; Registers used:
  3890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;Total ram usage:        0 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    7
  3903 ;; This function calls:
  3904 ;;		_setBuz
  3905 ;;		_setRF_Enable
  3906 ;;		_setSw_Enable
  3907 ;;		_setTemp_Enable
  3908 ;; This function is called by:
  3909 ;;		_main
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           
  3914                           ;psect for function _my_Main
  3915  153D                     _my_Main:	
  3916                           
  3917                           ;Main_B1.c: 130: if (myMain.PowerON == 0) {
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3921  153D  0021               	movlb	1	; select bank1
  3922  153E  1820               	btfsc	_myMain^(0+128),0
  3923  153F  2D6A               	goto	l7891
  3924                           
  3925                           ;Main_B1.c: 131: myMain.PowerCount++;
  3926  1540  3001               	movlw	1
  3927  1541  07A1               	addwf	(_myMain^(0+128)+1),f
  3928  1542  3000               	movlw	0
  3929  1543  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3930                           
  3931                           ;Main_B1.c: 132: if (myMain.PowerCount == 150)
  3932  1544  3001               	movlw	1
  3933  1545  3EA0               	addlw	_myMain& (0+255)
  3934  1546  0086               	movwf	6
  3935  1547  0187               	clrf	7
  3936  1548  3F40               	moviw [0]fsr1
  3937  1549  3A96               	xorlw	150
  3938  154A  1D03               	skipz
  3939  154B  2D4E               	goto	u7665
  3940  154C  3F41               	moviw [1]fsr1
  3941  154D  3A00               	xorlw	0
  3942  154E                     u7665:	
  3943  154E  1D03               	skipz
  3944  154F  0008               	return
  3945                           
  3946                           ;Main_B1.c: 133: {
  3947                           ;Main_B1.c: 134: myMain.PowerCount = 0;
  3948  1550  01A1               	clrf	(_myMain^(0+128)+1)
  3949  1551  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3950                           
  3951                           ;Main_B1.c: 135: myMain.PowerON = 1;
  3952  1552  1420               	bsf	_myMain^(0+128),0
  3953                           
  3954                           ;Main_B1.c: 138: setTemp_Enable(1);
  3955  1553  3001               	movlw	1
  3956  1554  319C  24FA  3195   	fcall	_setTemp_Enable
  3957                           
  3958                           ;Main_B1.c: 142: ;;
  3959                           ;Main_B1.c: 148: setBuz(3, 50);
  3960  1557  3032               	movlw	50
  3961  1558  0020               	movlb	0	; select bank0
  3962  1559  00A9               	movwf	setBuz@time
  3963  155A  3000               	movlw	0
  3964  155B  00AA               	movwf	setBuz@time+1
  3965  155C  3003               	movlw	3
  3966  155D  3197  27A7  3195   	fcall	_setBuz
  3967                           
  3968                           ;Main_B1.c: 149: myMain.SelfTest = 1;
  3969  1560  0021               	movlb	1	; select bank1
  3970  1561  1720               	bsf	_myMain^(0+128),6
  3971                           
  3972                           ;Main_B1.c: 151: setSw_Enable(1);
  3973  1562  3001               	movlw	1
  3974  1563  3191  21F5  3195   	fcall	_setSw_Enable
  3975                           
  3976                           ;Main_B1.c: 154: setRF_Enable(1);
  3977  1566  3001               	movlw	1
  3978  1567  319D  256B         	fcall	_setRF_Enable
  3979                           
  3980                           ;Main_B1.c: 158: }
  3981                           ;Main_B1.c: 159: } else {
  3982  1569  0008               	return
  3983  156A                     l7891:	
  3984                           
  3985                           ;Main_B1.c: 167: myMain.Count1++;
  3986  156A  3001               	movlw	1
  3987  156B  0021               	movlb	1	; select bank1
  3988  156C  07A5               	addwf	(_myMain^(0+128)+5),f
  3989  156D  3000               	movlw	0
  3990  156E  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  3991                           
  3992                           ;Main_B1.c: 168: if (myMain.Count1 == 100)
  3993  156F  3005               	movlw	5
  3994  1570  3EA0               	addlw	_myMain& (0+255)
  3995  1571  0086               	movwf	6
  3996  1572  0187               	clrf	7
  3997  1573  3F40               	moviw [0]fsr1
  3998  1574  3A64               	xorlw	100
  3999  1575  1D03               	skipz
  4000  1576  2D79               	goto	u7675
  4001  1577  3F41               	moviw [1]fsr1
  4002  1578  3A00               	xorlw	0
  4003  1579                     u7675:	
  4004  1579  1D03               	skipz
  4005  157A  0008               	return
  4006                           
  4007                           ;Main_B1.c: 169: {
  4008                           ;Main_B1.c: 170: myMain.Count1 = 0;
  4009  157B  01A5               	clrf	(_myMain^(0+128)+5)
  4010  157C  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4011                           
  4012                           ;Main_B1.c: 183: if (myMain.Flag) {
  4013  157D  1DA0               	btfss	_myMain^(0+128),3
  4014  157E  2D81               	goto	l1611
  4015                           
  4016                           ;Main_B1.c: 184: myMain.Flag = 0;
  4017  157F  11A0               	bcf	_myMain^(0+128),3
  4018                           
  4019                           ;Main_B1.c: 193: } else {
  4020  1580  0008               	return
  4021  1581                     l1611:	
  4022                           
  4023                           ;Main_B1.c: 194: myMain.Flag = 1;
  4024  1581  15A0               	bsf	_myMain^(0+128),3
  4025  1582  0008               	return
  4026  1583                     __end_of_my_Main:	
  4027                           
  4028                           	psect	text2
  4029  1CFA                     __ptext2:	
  4030 ;; *************** function _setTemp_Enable *****************
  4031 ;; Defined at:
  4032 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;  command         1    wreg     unsigned char 
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  command         1    0[BANK0 ] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;		None               void
  4039 ;; Registers used:
  4040 ;;		wreg
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;Total ram usage:        1 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    5
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_my_Main
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           
  4061                           ;psect for function _setTemp_Enable
  4062  1CFA                     _setTemp_Enable:	
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _setTemp_Enable: [wreg]
  4066                           ;setTemp_Enable@command stored from wreg
  4067  1CFA  0020               	movlb	0	; select bank0
  4068  1CFB  00A0               	movwf	setTemp_Enable@command
  4069                           
  4070                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4071  1CFC  0820               	movf	setTemp_Enable@command,w
  4072  1CFD  0021               	movlb	1	; select bank1
  4073  1CFE  1055               	bcf	_Temp1^(0+128),0
  4074  1CFF  1D03               	skipz
  4075  1D00  1455               	bsf	_Temp1^(0+128),0
  4076  1D01  0008               	return
  4077  1D02                     __end_of_setTemp_Enable:	
  4078                           
  4079                           	psect	text3
  4080  1DD3                     __ptext3:	
  4081 ;; *************** function _myMain_Initialization *****************
  4082 ;; Defined at:
  4083 ;;		line 116 in file "../src/Main_B1.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;		None               void
  4090 ;; Registers used:
  4091 ;;		wreg, fsr1l, fsr1h
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;Total ram usage:        1 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    5
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_main
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _myMain_Initialization
  4113  1DD3                     _myMain_Initialization:	
  4114                           
  4115                           ;Main_B1.c: 118: product = &_product;
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4119  1DD3  3020               	movlw	__product& (0+255)
  4120  1DD4  0020               	movlb	0	; select bank0
  4121  1DD5  00A0               	movwf	??_myMain_Initialization
  4122  1DD6  0820               	movf	??_myMain_Initialization,w
  4123  1DD7  00EF               	movwf	_product
  4124                           
  4125                           ;Main_B1.c: 119: product->Data[20] = 211;
  4126  1DD8  30D3               	movlw	211
  4127  1DD9  00A0               	movwf	??_myMain_Initialization
  4128  1DDA  086F               	movf	_product,w
  4129  1DDB  3E14               	addlw	20
  4130  1DDC  0086               	movwf	6
  4131  1DDD  3002               	movlw	2	; select bank4/5
  4132  1DDE  0087               	movwf	7
  4133  1DDF  0820               	movf	??_myMain_Initialization,w
  4134  1DE0  0081               	movwf	1
  4135  1DE1  0008               	return
  4136  1DE2                     __end_of_myMain_Initialization:	
  4137                           
  4138                           	psect	text4
  4139  0802                     __ptext4:	
  4140 ;; *************** function _getTemp_AD *****************
  4141 ;; Defined at:
  4142 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  channel         1    wreg     unsigned char 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  channel         1    5[BANK0 ] unsigned char 
  4147 ;; Return value:  Size  Location     Type
  4148 ;;		None               void
  4149 ;; Registers used:
  4150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4160 ;;Total ram usage:        2 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    7
  4163 ;; This function calls:
  4164 ;;		_getAD
  4165 ;; This function is called by:
  4166 ;;		_main
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           
  4171                           ;psect for function _getTemp_AD
  4172  0802                     _getTemp_AD:	
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4176                           ;getTemp_AD@channel stored from wreg
  4177  0802  0020               	movlb	0	; select bank0
  4178  0803  00A5               	movwf	getTemp_AD@channel
  4179                           
  4180                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4181  0804  0021               	movlb	1	; select bank1
  4182  0805  1D55               	btfss	_Temp1^(0+128),2
  4183  0806  0008               	return
  4184                           
  4185                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4186  0807  30F0               	movlw	240
  4187  0808  0020               	movlb	0	; select bank0
  4188  0809  00A4               	movwf	??_getTemp_AD
  4189  080A  0824               	movf	??_getTemp_AD,w
  4190  080B  00A0               	movwf	getAD@adcon1
  4191  080C  0825               	movf	getTemp_AD@channel,w
  4192  080D  3190  20E1  3188   	fcall	_getAD
  4193  0810  0020               	movlb	0	; select bank0
  4194  0811  0821               	movf	?_getAD+1,w
  4195  0812  0021               	movlb	1	; select bank1
  4196  0813  01E2               	clrf	((_Temp1+1)^(0+128)+12)
  4197  0814  07E2               	addwf	((_Temp1+1)^(0+128)+12),f
  4198  0815  0020               	movlb	0	; select bank0
  4199  0816  0820               	movf	?_getAD,w
  4200  0817  0021               	movlb	1	; select bank1
  4201  0818  01E1               	clrf	(_Temp1^(0+128)+12)
  4202  0819  07E1               	addwf	(_Temp1^(0+128)+12),f
  4203                           
  4204                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4205  081A  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4206  081B  025E               	subwf	((_Temp1+1)^(0+128)+8),w
  4207  081C  1D03               	skipz
  4208  081D  2820               	goto	u7635
  4209  081E  0861               	movf	(_Temp1^(0+128)+12),w
  4210  081F  025D               	subwf	(_Temp1^(0+128)+8),w
  4211  0820                     u7635:	
  4212  0820  1803               	skipnc
  4213  0821  2829               	goto	l7867
  4214                           
  4215                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4216  0822  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4217  0823  01DE               	clrf	((_Temp1+1)^(0+128)+8)
  4218  0824  07DE               	addwf	((_Temp1+1)^(0+128)+8),f
  4219  0825  0861               	movf	(_Temp1^(0+128)+12),w
  4220  0826  01DD               	clrf	(_Temp1^(0+128)+8)
  4221  0827  07DD               	addwf	(_Temp1^(0+128)+8),f
  4222                           
  4223                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4224  0828  0008               	return
  4225  0829                     l7867:	
  4226  0829  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4227  082A  0260               	subwf	((_Temp1+1)^(0+128)+10),w
  4228  082B  1D03               	skipz
  4229  082C  282F               	goto	u7645
  4230  082D  0861               	movf	(_Temp1^(0+128)+12),w
  4231  082E  025F               	subwf	(_Temp1^(0+128)+10),w
  4232  082F                     u7645:	
  4233  082F  1803               	skipnc
  4234  0830  0008               	return
  4235                           
  4236                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4237  0831  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4238  0832  01E0               	clrf	((_Temp1+1)^(0+128)+10)
  4239  0833  07E0               	addwf	((_Temp1+1)^(0+128)+10),f
  4240  0834  0861               	movf	(_Temp1^(0+128)+12),w
  4241  0835  01DF               	clrf	(_Temp1^(0+128)+10)
  4242  0836  07DF               	addwf	(_Temp1^(0+128)+10),f
  4243  0837  0008               	return
  4244  0838                     __end_of_getTemp_AD:	
  4245                           
  4246                           	psect	text5
  4247  10E1                     __ptext5:	
  4248 ;; *************** function _getAD *****************
  4249 ;; Defined at:
  4250 ;;		line 343 in file "../src/MCU_B1.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  adcon0          1    wreg     unsigned char 
  4253 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  2    0[BANK0 ] int 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4265 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;Total ram usage:        4 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    6
  4272 ;; This function calls:
  4273 ;;		_Timeout_Counter
  4274 ;;		_set_TimeoutCleared
  4275 ;; This function is called by:
  4276 ;;		_getTemp_AD
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _getAD
  4282  10E1                     _getAD:	
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4286                           ;getAD@adcon0 stored from wreg
  4287  10E1  0020               	movlb	0	; select bank0
  4288  10E2  00A3               	movwf	getAD@adcon0
  4289                           
  4290                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4291  10E3  0823               	movf	getAD@adcon0,w
  4292  10E4  0021               	movlb	1	; select bank1
  4293  10E5  009D               	movwf	29	;volatile
  4294                           
  4295                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4296  10E6  0020               	movlb	0	; select bank0
  4297  10E7  0820               	movf	getAD@adcon1,w
  4298  10E8  0021               	movlb	1	; select bank1
  4299  10E9  009E               	movwf	30	;volatile
  4300                           
  4301                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4302  10EA  149D               	bsf	29,1	;volatile
  4303                           
  4304                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4305  10EB  28EF               	goto	l7431
  4306  10EC                     l7429:	
  4307                           
  4308                           ;MCU_B1.c: 348: Timeout_Counter();
  4309  10EC  319E  26B0  3190   	fcall	_Timeout_Counter
  4310  10EF                     l7431:	
  4311  10EF  0021               	movlb	1	; select bank1
  4312  10F0  1C9D               	btfss	29,1	;volatile
  4313  10F1  28F4               	goto	l7435
  4314  10F2  1D2F               	btfss	(_myMain^(0+128)+15),2
  4315  10F3  28EC               	goto	l7429
  4316  10F4                     l7435:	
  4317                           
  4318                           ;MCU_B1.c: 349: };
  4319                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4320  10F4  319C  24BC         	fcall	_set_TimeoutCleared
  4321                           
  4322                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4323  10F6  0021               	movlb	1	; select bank1
  4324  10F7  081C               	movf	28,w	;volatile
  4325  10F8  0020               	movlb	0	; select bank0
  4326  10F9  01A1               	clrf	?_getAD+1
  4327  10FA  07A1               	addwf	?_getAD+1,f
  4328  10FB  0021               	movlb	1	; select bank1
  4329  10FC  081B               	movf	27,w	;volatile
  4330  10FD  0020               	movlb	0	; select bank0
  4331  10FE  01A0               	clrf	?_getAD
  4332  10FF  07A0               	addwf	?_getAD,f
  4333  1100  0008               	return
  4334  1101                     __end_of_getAD:	
  4335                           
  4336                           	psect	text6
  4337  1CA9                     __ptext6:	
  4338 ;; *************** function _Temp_Main *****************
  4339 ;; Defined at:
  4340 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;		None               void
  4347 ;; Registers used:
  4348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;Total ram usage:        0 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:   11
  4361 ;; This function calls:
  4362 ;;		_setTemp_Main
  4363 ;; This function is called by:
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _Temp_Main
  4370  1CA9                     _Temp_Main:	
  4371                           
  4372                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4376  1CA9  318B  23DF         	fcall	_setTemp_Main
  4377  1CAB  0008               	return
  4378  1CAC                     __end_of_Temp_Main:	
  4379                           
  4380                           	psect	text7
  4381  0BDF                     __ptext7:	
  4382 ;; *************** function _setTemp_Main *****************
  4383 ;; Defined at:
  4384 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;		None
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;		None               void
  4391 ;; Registers used:
  4392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;Total ram usage:        1 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:   10
  4405 ;; This function calls:
  4406 ;;		_setOverTemp_Exceptions
  4407 ;; This function is called by:
  4408 ;;		_Temp_Main
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           
  4413                           ;psect for function _setTemp_Main
  4414  0BDF                     _setTemp_Main:	
  4415                           
  4416                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4420  0BDF  0021               	movlb	1	; select bank1
  4421  0BE0  1C55               	btfss	_Temp1^(0+128),0
  4422  0BE1  0008               	return
  4423                           
  4424                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4425  0BE2  1955               	btfsc	_Temp1^(0+128),2
  4426  0BE3  2BF4               	goto	l8395
  4427                           
  4428                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4429  0BE4  3001               	movlw	1
  4430  0BE5  07D6               	addwf	(_Temp1^(0+128)+1),f
  4431  0BE6  3000               	movlw	0
  4432  0BE7  3DD7               	addwfc	((_Temp1+1)^(0+128)+1),f
  4433                           
  4434                           ;OverTemperature_B1.c: 62: {
  4435                           ;OverTemperature_B1.c: 63: if (1 == 1 && 1 == 1) {
  4436  0BE8  3001               	movlw	1
  4437  0BE9  0257               	subwf	((_Temp1+1)^(0+128)+1),w
  4438  0BEA  30F4               	movlw	244
  4439  0BEB  1903               	skipnz
  4440  0BEC  0256               	subwf	(_Temp1^(0+128)+1),w
  4441  0BED  1C03               	skipc
  4442  0BEE  0008               	return
  4443                           
  4444                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  4445  0BEF  01D6               	clrf	(_Temp1^(0+128)+1)
  4446  0BF0  01D7               	clrf	((_Temp1+1)^(0+128)+1)
  4447                           
  4448                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  4449  0BF1  1555               	bsf	_Temp1^(0+128),2
  4450                           
  4451                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  4452  0BF2  1255               	bcf	_Temp1^(0+128),4
  4453                           
  4454                           ;OverTemperature_B1.c: 68: } else {
  4455  0BF3  0008               	return
  4456  0BF4                     l8395:	
  4457                           ;OverTemperature_B1.c: 70: }
  4458                           ;OverTemperature_B1.c: 71: }
  4459                           ;OverTemperature_B1.c: 72: } else {
  4460                           
  4461                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  4462                           
  4463                           
  4464                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  4465  0BF4  3001               	movlw	1
  4466  0BF5  07D6               	addwf	(_Temp1^(0+128)+1),f
  4467  0BF6  3000               	movlw	0
  4468  0BF7  3DD7               	addwfc	((_Temp1+1)^(0+128)+1),f
  4469                           
  4470                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  4471  0BF8  3000               	movlw	0
  4472  0BF9  0257               	subwf	((_Temp1+1)^(0+128)+1),w
  4473  0BFA  3004               	movlw	4
  4474  0BFB  1903               	skipnz
  4475  0BFC  0256               	subwf	(_Temp1^(0+128)+1),w
  4476  0BFD  1C03               	skipc
  4477  0BFE  0008               	return
  4478                           
  4479                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  4480  0BFF  01D6               	clrf	(_Temp1^(0+128)+1)
  4481  0C00  01D7               	clrf	((_Temp1+1)^(0+128)+1)
  4482                           
  4483                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  4484  0C01  1155               	bcf	_Temp1^(0+128),2
  4485                           
  4486                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  4487  0C02  0860               	movf	((_Temp1+1)^(0+128)+10),w
  4488  0C03  01DC               	clrf	((_Temp1+1)^(0+128)+6)
  4489  0C04  07DC               	addwf	((_Temp1+1)^(0+128)+6),f
  4490  0C05  085F               	movf	(_Temp1^(0+128)+10),w
  4491  0C06  01DB               	clrf	(_Temp1^(0+128)+6)
  4492  0C07  07DB               	addwf	(_Temp1^(0+128)+6),f
  4493                           
  4494                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  4495  0C08  1CD5               	btfss	_Temp1^(0+128),1
  4496  0C09  2C21               	goto	l8417
  4497                           
  4498                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  4499  0C0A  3002               	movlw	2
  4500  0C0B  025C               	subwf	((_Temp1+1)^(0+128)+6),w
  4501  0C0C  3058               	movlw	88
  4502  0C0D  1903               	skipnz
  4503  0C0E  025B               	subwf	(_Temp1^(0+128)+6),w
  4504  0C0F  1C03               	skipc
  4505  0C10  2C38               	goto	l8427
  4506                           
  4507                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  4508  0C11  3001               	movlw	1
  4509  0C12  0020               	movlb	0	; select bank0
  4510  0C13  00B1               	movwf	??_setTemp_Main
  4511  0C14  0831               	movf	??_setTemp_Main,w
  4512  0C15  0021               	movlb	1	; select bank1
  4513  0C16  07D8               	addwf	(_Temp1^(0+128)+3),f
  4514                           
  4515                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  4516  0C17  3003               	movlw	3
  4517  0C18  0258               	subwf	(_Temp1^(0+128)+3),w
  4518  0C19  1C03               	skipc
  4519  0C1A  2C3A               	goto	l8429
  4520                           
  4521                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  4522  0C1B  01D8               	clrf	(_Temp1^(0+128)+3)
  4523                           
  4524                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  4525  0C1C  3000               	movlw	0
  4526  0C1D  3194  2430  318B   	fcall	_setOverTemp_Exceptions
  4527                           
  4528                           ;OverTemperature_B1.c: 84: }
  4529                           ;OverTemperature_B1.c: 85: } else {
  4530  0C20  2C3A               	goto	l8429
  4531  0C21                     l8417:	
  4532                           ;OverTemperature_B1.c: 87: }
  4533                           ;OverTemperature_B1.c: 88: } else {
  4534                           
  4535                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  4536                           
  4537                           
  4538                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  4539  0C21  3002               	movlw	2
  4540  0C22  025C               	subwf	((_Temp1+1)^(0+128)+6),w
  4541  0C23  3027               	movlw	39
  4542  0C24  1903               	skipnz
  4543  0C25  025B               	subwf	(_Temp1^(0+128)+6),w
  4544  0C26  1803               	skipnc
  4545  0C27  2C38               	goto	l8427
  4546                           
  4547                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  4548  0C28  3001               	movlw	1
  4549  0C29  0020               	movlb	0	; select bank0
  4550  0C2A  00B1               	movwf	??_setTemp_Main
  4551  0C2B  0831               	movf	??_setTemp_Main,w
  4552  0C2C  0021               	movlb	1	; select bank1
  4553  0C2D  07D8               	addwf	(_Temp1^(0+128)+3),f
  4554                           
  4555                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  4556  0C2E  3003               	movlw	3
  4557  0C2F  0258               	subwf	(_Temp1^(0+128)+3),w
  4558  0C30  1C03               	skipc
  4559  0C31  2C3A               	goto	l8429
  4560                           
  4561                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  4562  0C32  01D8               	clrf	(_Temp1^(0+128)+3)
  4563                           
  4564                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  4565  0C33  3001               	movlw	1
  4566  0C34  3194  2430  318B   	fcall	_setOverTemp_Exceptions
  4567                           
  4568                           ;OverTemperature_B1.c: 94: }
  4569                           ;OverTemperature_B1.c: 95: } else {
  4570  0C37  2C3A               	goto	l8429
  4571  0C38                     l8427:	
  4572                           
  4573                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  4574  0C38  0021               	movlb	1	; select bank1
  4575  0C39  01D8               	clrf	(_Temp1^(0+128)+3)
  4576  0C3A                     l8429:	
  4577                           
  4578                           ;OverTemperature_B1.c: 97: }
  4579                           ;OverTemperature_B1.c: 98: }
  4580                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  4581  0C3A  0021               	movlb	1	; select bank1
  4582  0C3B  1CD5               	btfss	_Temp1^(0+128),1
  4583                           
  4584                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  4585  0C3C  1655               	bsf	_Temp1^(0+128),4
  4586                           
  4587                           ;OverTemperature_B1.c: 101: }
  4588                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  4589  0C3D  085C               	movf	((_Temp1+1)^(0+128)+6),w
  4590  0C3E  0020               	movlb	0	; select bank0
  4591  0C3F  00B1               	movwf	??_setTemp_Main
  4592  0C40  086F               	movf	_product,w
  4593  0C41  3E18               	addlw	24
  4594  0C42  0086               	movwf	6
  4595  0C43  3002               	movlw	2	; select bank4/5
  4596  0C44  0087               	movwf	7
  4597  0C45  0831               	movf	??_setTemp_Main,w
  4598  0C46  0081               	movwf	1
  4599                           
  4600                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  4601  0C47  0021               	movlb	1	; select bank1
  4602  0C48  085B               	movf	(_Temp1^(0+128)+6),w
  4603  0C49  0020               	movlb	0	; select bank0
  4604  0C4A  00B1               	movwf	??_setTemp_Main
  4605  0C4B  086F               	movf	_product,w
  4606  0C4C  3E19               	addlw	25
  4607  0C4D  0086               	movwf	6
  4608  0C4E  3002               	movlw	2	; select bank4/5
  4609  0C4F  0087               	movwf	7
  4610  0C50  0831               	movf	??_setTemp_Main,w
  4611  0C51  0081               	movwf	1
  4612                           
  4613                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  4614  0C52  0021               	movlb	1	; select bank1
  4615  0C53  01DD               	clrf	(_Temp1^(0+128)+8)
  4616  0C54  01DE               	clrf	((_Temp1+1)^(0+128)+8)
  4617                           
  4618                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  4619  0C55  01DF               	clrf	(_Temp1^(0+128)+10)
  4620  0C56  01E0               	clrf	((_Temp1+1)^(0+128)+10)
  4621  0C57  0008               	return
  4622  0C58                     __end_of_setTemp_Main:	
  4623                           
  4624                           	psect	text8
  4625  1430                     __ptext8:	
  4626 ;; *************** function _setOverTemp_Exceptions *****************
  4627 ;; Defined at:
  4628 ;;		line 114 in file "../src/OverTemperature_B1.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  command         1    wreg     unsigned char 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  command         1   16[BANK0 ] unsigned char 
  4633 ;;  i               1   15[BANK0 ] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;		None               void
  4636 ;; Registers used:
  4637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;Total ram usage:        3 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    9
  4650 ;; This function calls:
  4651 ;;		_DimmerLights_Exceptions
  4652 ;;		_setBuz
  4653 ;;		_setLED
  4654 ;;		_setRF_Enable
  4655 ;;		_setSw_Enable
  4656 ;; This function is called by:
  4657 ;;		_setTemp_Main
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           
  4662                           ;psect for function _setOverTemp_Exceptions
  4663  1430                     _setOverTemp_Exceptions:	
  4664                           
  4665                           ;incstack = 0
  4666                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4667                           ;setOverTemp_Exceptions@command stored from wreg
  4668  1430  0020               	movlb	0	; select bank0
  4669  1431  00B0               	movwf	setOverTemp_Exceptions@command
  4670                           
  4671                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  4672  1432  0830               	movf	setOverTemp_Exceptions@command,w
  4673  1433  3A01               	xorlw	1
  4674  1434  3000               	movlw	0
  4675  1435  1D03               	skipz
  4676  1436  3001               	movlw	1
  4677  1437  00AE               	movwf	??_setOverTemp_Exceptions
  4678  1438  082E               	movf	??_setOverTemp_Exceptions,w
  4679  1439  00AF               	movwf	setOverTemp_Exceptions@i
  4680                           
  4681                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  4682  143A  0830               	movf	setOverTemp_Exceptions@command,w
  4683  143B  0021               	movlb	1	; select bank1
  4684  143C  10D5               	bcf	_Temp1^(0+128),1
  4685  143D  1D03               	skipz
  4686  143E  14D5               	bsf	_Temp1^(0+128),1
  4687                           
  4688                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  4689  143F  0020               	movlb	0	; select bank0
  4690  1440  082F               	movf	setOverTemp_Exceptions@i,w
  4691  1441  0021               	movlb	1	; select bank1
  4692  1442  1255               	bcf	_Temp1^(0+128),4
  4693  1443  1D03               	skipz
  4694  1444  1655               	bsf	_Temp1^(0+128),4
  4695                           
  4696                           ;OverTemperature_B1.c: 118: if (command == 1) {
  4697  1445  0020               	movlb	0	; select bank0
  4698  1446  0830               	movf	setOverTemp_Exceptions@command,w
  4699  1447  3A01               	xorlw	1
  4700  1448  1D03               	skipz
  4701  1449  2C4F               	goto	l8241
  4702                           
  4703                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  4704  144A  3001               	movlw	1
  4705  144B  3197  2752  3194   	fcall	_DimmerLights_Exceptions
  4706                           
  4707                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  4708  144E  2C5B               	goto	l8245
  4709  144F                     l8241:	
  4710  144F  0020               	movlb	0	; select bank0
  4711  1450  08B0               	movf	setOverTemp_Exceptions@command,f
  4712  1451  1D03               	skipz
  4713  1452  2C5B               	goto	l8245
  4714                           
  4715                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  4716  1453  3064               	movlw	100
  4717  1454  00A9               	movwf	setBuz@time
  4718  1455  3000               	movlw	0
  4719  1456  00AA               	movwf	setBuz@time+1
  4720  1457  3002               	movlw	2
  4721  1458  3197  27A7  3194   	fcall	_setBuz
  4722  145B                     l8245:	
  4723                           
  4724                           ;OverTemperature_B1.c: 125: }
  4725                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  4726  145B  0020               	movlb	0	; select bank0
  4727  145C  0830               	movf	setOverTemp_Exceptions@command,w
  4728  145D  3E0A               	addlw	10
  4729  145E  00AE               	movwf	??_setOverTemp_Exceptions
  4730  145F  082E               	movf	??_setOverTemp_Exceptions,w
  4731  1460  00A1               	movwf	setLED@command
  4732  1461  3063               	movlw	99
  4733  1462  318B  236B  3194   	fcall	_setLED
  4734                           
  4735                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  4736  1465  0020               	movlb	0	; select bank0
  4737  1466  082F               	movf	setOverTemp_Exceptions@i,w
  4738  1467  3191  21F5  3194   	fcall	_setSw_Enable
  4739                           
  4740                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  4741  146A  0020               	movlb	0	; select bank0
  4742  146B  082F               	movf	setOverTemp_Exceptions@i,w
  4743  146C  319D  256B         	fcall	_setRF_Enable
  4744  146E  0008               	return
  4745  146F                     __end_of_setOverTemp_Exceptions:	
  4746                           
  4747                           	psect	text9
  4748  11F5                     __ptext9:	
  4749 ;; *************** function _setSw_Enable *****************
  4750 ;; Defined at:
  4751 ;;		line 91 in file "../src/Switch_B1.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  command         1    wreg     unsigned char 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  command         1    1[BANK0 ] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;		None               void
  4758 ;; Registers used:
  4759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;Total ram usage:        1 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    6
  4772 ;; This function calls:
  4773 ;;		_SwPointSelect
  4774 ;; This function is called by:
  4775 ;;		_my_Main
  4776 ;;		_setOverTemp_Exceptions
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _setSw_Enable
  4782  11F5                     _setSw_Enable:	
  4783                           
  4784                           ;incstack = 0
  4785                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4786                           ;setSw_Enable@command stored from wreg
  4787  11F5  0020               	movlb	0	; select bank0
  4788  11F6  00A1               	movwf	setSw_Enable@command
  4789                           
  4790                           ;Switch_B1.c: 94: SwPointSelect(1);
  4791  11F7  3001               	movlw	1
  4792  11F8  319F  27C4  3191   	fcall	_SwPointSelect
  4793                           
  4794                           ;Switch_B1.c: 95: Sw->Enable = command;
  4795  11FB  0878               	movf	_Sw,w
  4796  11FC  0086               	movwf	6
  4797  11FD  0879               	movf	_Sw+1,w
  4798  11FE  0087               	movwf	7
  4799  11FF  0020               	movlb	0	; select bank0
  4800  1200  0821               	movf	setSw_Enable@command,w
  4801  1201  1001               	bcf	1,0
  4802  1202  1D03               	skipz
  4803  1203  1401               	bsf	1,0
  4804                           
  4805                           ;Switch_B1.c: 99: SwPointSelect(2);
  4806  1204  3002               	movlw	2
  4807  1205  319F  27C4  3191   	fcall	_SwPointSelect
  4808                           
  4809                           ;Switch_B1.c: 100: Sw->Enable = command;
  4810  1208  0878               	movf	_Sw,w
  4811  1209  0086               	movwf	6
  4812  120A  0879               	movf	_Sw+1,w
  4813  120B  0087               	movwf	7
  4814  120C  0020               	movlb	0	; select bank0
  4815  120D  0821               	movf	setSw_Enable@command,w
  4816  120E  1001               	bcf	1,0
  4817  120F  1D03               	skipz
  4818  1210  1401               	bsf	1,0
  4819                           
  4820                           ;Switch_B1.c: 104: SwPointSelect(3);
  4821  1211  3003               	movlw	3
  4822  1212  319F  27C4         	fcall	_SwPointSelect
  4823                           
  4824                           ;Switch_B1.c: 105: Sw->Enable = command;
  4825  1214  0878               	movf	_Sw,w
  4826  1215  0086               	movwf	6
  4827  1216  0879               	movf	_Sw+1,w
  4828  1217  0087               	movwf	7
  4829  1218  0020               	movlb	0	; select bank0
  4830  1219  0821               	movf	setSw_Enable@command,w
  4831  121A  1001               	bcf	1,0
  4832  121B  1D03               	skipz
  4833  121C  1401               	bsf	1,0
  4834  121D  0008               	return
  4835  121E                     __end_of_setSw_Enable:	
  4836                           
  4837                           	psect	text10
  4838  1D6B                     __ptext10:	
  4839 ;; *************** function _setRF_Enable *****************
  4840 ;; Defined at:
  4841 ;;		line 178 in file "../src/RF_Control_B1.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;  command         1    wreg     unsigned char 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  command         1    0[BANK0 ] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, status,2
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;Total ram usage:        1 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    5
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_my_Main
  4866 ;;		_setOverTemp_Exceptions
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           
  4871                           ;psect for function _setRF_Enable
  4872  1D6B                     _setRF_Enable:	
  4873                           
  4874                           ;incstack = 0
  4875                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4876                           ;setRF_Enable@command stored from wreg
  4877  1D6B  0020               	movlb	0	; select bank0
  4878  1D6C  00A0               	movwf	setRF_Enable@command
  4879                           
  4880                           ;RF_Control_B1.c: 179: RF1.Enable = command;
  4881  1D6D  0820               	movf	setRF_Enable@command,w
  4882  1D6E  0021               	movlb	1	; select bank1
  4883  1D6F  103E               	bcf	_RF1^(0+128),0
  4884  1D70  1D03               	skipz
  4885  1D71  143E               	bsf	_RF1^(0+128),0
  4886                           
  4887                           ;RF_Control_B1.c: 180: RF1.Learn = 0;
  4888  1D72  133E               	bcf	_RF1^(0+128),6
  4889                           
  4890                           ;RF_Control_B1.c: 181: RF1.TransceiveGO = 0;
  4891  1D73  113E               	bcf	_RF1^(0+128),2
  4892                           
  4893                           ;RF_Control_B1.c: 182: RF1.RxStatus = 0;
  4894  1D74  11BE               	bcf	_RF1^(0+128),3
  4895                           
  4896                           ;RF_Control_B1.c: 183: RF1.ReceiveGO = 0;
  4897  1D75  10BE               	bcf	_RF1^(0+128),1
  4898                           
  4899                           ;RF_Control_B1.c: 184: RF1.DebounceTime = 0;
  4900  1D76  01C2               	clrf	(_RF1^(0+128)+4)
  4901                           
  4902                           ;RF_Control_B1.c: 185: RF1.Debounce = 0;
  4903  1D77  12BE               	bcf	_RF1^(0+128),5
  4904  1D78  0008               	return
  4905  1D79                     __end_of_setRF_Enable:	
  4906                           
  4907                           	psect	text11
  4908  1752                     __ptext11:	
  4909 ;; *************** function _DimmerLights_Exceptions *****************
  4910 ;; Defined at:
  4911 ;;		line 513 in file "../src/Dimmer_B1.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  status          1    wreg     unsigned char 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  status          1   13[BANK0 ] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4928 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;Total ram usage:        1 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    8
  4932 ;; This function calls:
  4933 ;;		_getDimmerLights_StatusFlag
  4934 ;;		_setBuz
  4935 ;;		_setDimmerLights_ERROR
  4936 ;;		_setDimmerLights_TriggerERROR
  4937 ;; This function is called by:
  4938 ;;		_setOverTemp_Exceptions
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _DimmerLights_Exceptions
  4944  1752                     _DimmerLights_Exceptions:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  4948                           ;DimmerLights_Exceptions@status stored from wreg
  4949  1752  0020               	movlb	0	; select bank0
  4950  1753  00AD               	movwf	DimmerLights_Exceptions@status
  4951                           
  4952                           ;Dimmer_B1.c: 514: if (status == 1) {
  4953  1754  082D               	movf	DimmerLights_Exceptions@status,w
  4954  1755  3A01               	xorlw	1
  4955  1756  1D03               	skipz
  4956  1757  2F68               	goto	l8175
  4957                           
  4958                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  4959  1758  319E  2688  3197   	fcall	_getDimmerLights_StatusFlag
  4960  175B  3A01               	xorlw	1
  4961  175C  1D03               	skipz
  4962  175D  2F80               	goto	l8183
  4963                           
  4964                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  4965  175E  302C               	movlw	44
  4966  175F  0020               	movlb	0	; select bank0
  4967  1760  00A9               	movwf	setBuz@time
  4968  1761  3001               	movlw	1
  4969  1762  00AA               	movwf	setBuz@time+1
  4970  1763  300A               	movlw	10
  4971  1764  3197  27A7  3197   	fcall	_setBuz
  4972  1767  2F80               	goto	l8183
  4973  1768                     l8175:	
  4974                           ;Dimmer_B1.c: 528: } else if (status == 2)
  4975                           
  4976                           ;Dimmer_B1.c: 526: setDimmerLights_ERROR(3);
  4977                           
  4978                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
  4979                           
  4980                           ;Dimmer_B1.c: 517: }
  4981                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  4982                           
  4983  1768  0020               	movlb	0	; select bank0
  4984  1769  082D               	movf	DimmerLights_Exceptions@status,w
  4985  176A  3A02               	xorlw	2
  4986  176B  1D03               	skipz
  4987  176C  2F7B               	goto	l8181
  4988                           
  4989                           ;Dimmer_B1.c: 529: {
  4990                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  4991  176D  302C               	movlw	44
  4992  176E  00A9               	movwf	setBuz@time
  4993  176F  3001               	movlw	1
  4994  1770  00AA               	movwf	setBuz@time+1
  4995  1771  3005               	movlw	5
  4996  1772  3197  27A7  3197   	fcall	_setBuz
  4997                           
  4998                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  4999  1775  0021               	movlb	1	; select bank1
  5000  1776  0A48               	incf	_Dimmer^(0+128),w
  5001  1777  0086               	movwf	6
  5002  1778  0187               	clrf	7
  5003  1779  0801               	movf	1,w
  5004  177A  2F89               	goto	L1
  5005  177B                     l8181:	
  5006                           ;Dimmer_B1.c: 532: } else if (status == 3)
  5007                           
  5008  177B  0020               	movlb	0	; select bank0
  5009  177C  082D               	movf	DimmerLights_Exceptions@status,w
  5010  177D  3A03               	xorlw	3
  5011  177E  1D03               	skipz
  5012  177F  2F8C               	goto	l918
  5013  1780                     l8183:	
  5014                           
  5015                           ;Dimmer_B1.c: 533: {
  5016                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  5017  1780  3001               	movlw	1
  5018  1781  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5019                           
  5020                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
  5021  1784  3002               	movlw	2
  5022  1785  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5023                           
  5024                           ;Dimmer_B1.c: 541: setDimmerLights_ERROR(3);
  5025  1788  3003               	movlw	3
  5026  1789                     L1:	
  5027  1789  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5028  178C                     l918:	
  5029                           
  5030                           ;Dimmer_B1.c: 543: }
  5031                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  5032  178C  0020               	movlb	0	; select bank0
  5033  178D  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5034  178E  3001               	movlw	1
  5035  178F  3192  229D  3197   	fcall	_setDimmerLights_TriggerERROR
  5036                           
  5037                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
  5038  1792  0020               	movlb	0	; select bank0
  5039  1793  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5040  1794  3002               	movlw	2
  5041  1795  3192  229D  3197   	fcall	_setDimmerLights_TriggerERROR
  5042                           
  5043                           ;Dimmer_B1.c: 552: setDimmerLights_TriggerERROR(3, 0);
  5044  1798  0020               	movlb	0	; select bank0
  5045  1799  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5046  179A  3003               	movlw	3
  5047  179B  3192  229D  3197   	fcall	_setDimmerLights_TriggerERROR
  5048                           
  5049                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
  5050  179E  0021               	movlb	1	; select bank1
  5051  179F  1B20               	btfsc	_myMain^(0+128),6
  5052  17A0  0008               	return
  5053                           
  5054                           ;Dimmer_B1.c: 556: myMain.i = 0;
  5055  17A1  102E               	bcf	(_myMain^(0+128)+14),0
  5056                           
  5057                           ;Dimmer_B1.c: 557: myMain.j = 0;
  5058  17A2  10AE               	bcf	(_myMain^(0+128)+14),1
  5059                           
  5060                           ;Dimmer_B1.c: 558: myMain.k = 1;
  5061  17A3  152E               	bsf	(_myMain^(0+128)+14),2
  5062                           
  5063                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
  5064  17A4  01A7               	clrf	(_myMain^(0+128)+7)
  5065  17A5  01A8               	clrf	((_myMain+1)^(0+128)+7)
  5066  17A6  0008               	return
  5067  17A7                     __end_of_DimmerLights_Exceptions:	
  5068                           
  5069                           	psect	text12
  5070  129D                     __ptext12:	
  5071 ;; *************** function _setDimmerLights_TriggerERROR *****************
  5072 ;; Defined at:
  5073 ;;		line 582 in file "../src/Dimmer_B1.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  lights          1    wreg     unsigned char 
  5076 ;;  command         1    2[BANK0 ] unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  lights          1    3[BANK0 ] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;		None               void
  5081 ;; Registers used:
  5082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;Total ram usage:        2 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    6
  5095 ;; This function calls:
  5096 ;;		_DimmerLightsPointSelect
  5097 ;; This function is called by:
  5098 ;;		_DimmerLights_Exceptions
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function _setDimmerLights_TriggerERROR
  5104  129D                     _setDimmerLights_TriggerERROR:	
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  5108                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  5109  129D  0020               	movlb	0	; select bank0
  5110  129E  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  5111                           
  5112                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
  5113  129F  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  5114  12A0  319F  276F         	fcall	_DimmerLightsPointSelect
  5115                           
  5116                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
  5117  12A2  087B               	movf	_DimmerLights,w
  5118  12A3  3E08               	addlw	8
  5119  12A4  0086               	movwf	6
  5120  12A5  3001               	movlw	1	; select bank2/3
  5121  12A6  0087               	movwf	7
  5122  12A7  0020               	movlb	0	; select bank0
  5123  12A8  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5124  12A9  1101               	bcf	1,2
  5125  12AA  1D03               	skipz
  5126  12AB  1501               	bsf	1,2
  5127                           
  5128                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
  5129  12AC  087B               	movf	_DimmerLights,w
  5130  12AD  3E08               	addlw	8
  5131  12AE  0086               	movwf	6
  5132  12AF  3001               	movlw	1	; select bank2/3
  5133  12B0  0087               	movwf	7
  5134  12B1  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5135  12B2  1081               	bcf	1,1
  5136  12B3  1D03               	skipz
  5137  12B4  1481               	bsf	1,1
  5138                           
  5139                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
  5140  12B5  087B               	movf	_DimmerLights,w
  5141  12B6  3E08               	addlw	8
  5142  12B7  0086               	movwf	6
  5143  12B8  3001               	movlw	1	; select bank2/3
  5144  12B9  0087               	movwf	7
  5145  12BA  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5146  12BB  1201               	bcf	1,4
  5147  12BC  1D03               	skipz
  5148  12BD  1601               	bsf	1,4
  5149                           
  5150                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
  5151  12BE  087B               	movf	_DimmerLights,w
  5152  12BF  3E08               	addlw	8
  5153  12C0  0086               	movwf	6
  5154  12C1  3001               	movlw	1	; select bank2/3
  5155  12C2  0087               	movwf	7
  5156  12C3  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5157  12C4  1181               	bcf	1,3
  5158  12C5  1D03               	skipz
  5159  12C6  1581               	bsf	1,3
  5160  12C7  0008               	return
  5161  12C8                     __end_of_setDimmerLights_TriggerERROR:	
  5162                           
  5163                           	psect	text13
  5164  16AE                     __ptext13:	
  5165 ;; *************** function _setDimmerLights_ERROR *****************
  5166 ;; Defined at:
  5167 ;;		line 564 in file "../src/Dimmer_B1.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  lights          1    wreg     unsigned char 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  lights          1    5[BANK0 ] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;Total ram usage:        2 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    7
  5188 ;; This function calls:
  5189 ;;		_DimmerLightsPointSelect
  5190 ;;		_setLED
  5191 ;;		_setRFSW_Status
  5192 ;;		_setSw_Status
  5193 ;; This function is called by:
  5194 ;;		_DimmerLights_Exceptions
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function _setDimmerLights_ERROR
  5200  16AE                     _setDimmerLights_ERROR:	
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5204                           ;setDimmerLights_ERROR@lights stored from wreg
  5205  16AE  0020               	movlb	0	; select bank0
  5206  16AF  00A5               	movwf	setDimmerLights_ERROR@lights
  5207                           
  5208                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
  5209  16B0  0825               	movf	setDimmerLights_ERROR@lights,w
  5210  16B1  319F  276F  3196   	fcall	_DimmerLightsPointSelect
  5211                           
  5212                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
  5213  16B4  087B               	movf	_DimmerLights,w
  5214  16B5  0086               	movwf	6
  5215  16B6  3001               	movlw	1	; select bank2/3
  5216  16B7  0087               	movwf	7
  5217  16B8  1E81               	btfss	1,5
  5218  16B9  0008               	return
  5219                           
  5220                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
  5221  16BA  087B               	movf	_DimmerLights,w
  5222  16BB  0086               	movwf	6
  5223  16BC  3001               	movlw	1	; select bank2/3
  5224  16BD  0087               	movwf	7
  5225  16BE  1081               	bcf	1,1
  5226                           
  5227                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
  5228  16BF  087B               	movf	_DimmerLights,w
  5229  16C0  0086               	movwf	6
  5230  16C1  3001               	movlw	1	; select bank2/3
  5231  16C2  0087               	movwf	7
  5232  16C3  1181               	bcf	1,3
  5233                           
  5234                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
  5235  16C4  087B               	movf	_DimmerLights,w
  5236  16C5  0086               	movwf	6
  5237  16C6  3001               	movlw	1	; select bank2/3
  5238  16C7  0087               	movwf	7
  5239  16C8  1201               	bcf	1,4
  5240                           
  5241                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
  5242  16C9  087B               	movf	_DimmerLights,w
  5243  16CA  0086               	movwf	6
  5244  16CB  3001               	movlw	1	; select bank2/3
  5245  16CC  0087               	movwf	7
  5246  16CD  1301               	bcf	1,6
  5247                           
  5248                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
  5249  16CE  3007               	movlw	7
  5250  16CF  0020               	movlb	0	; select bank0
  5251  16D0  00A4               	movwf	??_setDimmerLights_ERROR
  5252  16D1  087B               	movf	_DimmerLights,w
  5253  16D2  3E02               	addlw	2
  5254  16D3  0086               	movwf	6
  5255  16D4  3001               	movlw	1	; select bank2/3
  5256  16D5  0087               	movwf	7
  5257  16D6  0824               	movf	??_setDimmerLights_ERROR,w
  5258  16D7  0081               	movwf	1
  5259                           
  5260                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  5261  16D8  087B               	movf	_DimmerLights,w
  5262  16D9  3E06               	addlw	6
  5263  16DA  0086               	movwf	6
  5264  16DB  3001               	movlw	1	; select bank2/3
  5265  16DC  0087               	movwf	7
  5266  16DD  0801               	movf	1,w
  5267  16DE  00A4               	movwf	??_setDimmerLights_ERROR
  5268  16DF  087B               	movf	_DimmerLights,w
  5269  16E0  3E04               	addlw	4
  5270  16E1  0086               	movwf	6
  5271  16E2  3001               	movlw	1	; select bank2/3
  5272  16E3  0087               	movwf	7
  5273  16E4  0824               	movf	??_setDimmerLights_ERROR,w
  5274  16E5  0081               	movwf	1
  5275                           
  5276                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
  5277  16E6  0021               	movlb	1	; select bank1
  5278  16E7  0848               	movf	_Dimmer^(0+128),w
  5279  16E8  0086               	movwf	6
  5280  16E9  0187               	clrf	7
  5281  16EA  1401               	bsf	1,0
  5282                           
  5283                           ;Dimmer_B1.c: 575: ;;
  5284                           ;Dimmer_B1.c: 576: setLED(lights, 1);
  5285  16EB  0020               	movlb	0	; select bank0
  5286  16EC  01A1               	clrf	setLED@command
  5287  16ED  0AA1               	incf	setLED@command,f
  5288  16EE  0825               	movf	setDimmerLights_ERROR@lights,w
  5289  16EF  318B  236B  3196   	fcall	_setLED
  5290                           
  5291                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
  5292  16F2  0020               	movlb	0	; select bank0
  5293  16F3  01A1               	clrf	setSw_Status@command
  5294  16F4  0825               	movf	setDimmerLights_ERROR@lights,w
  5295  16F5  319D  2588  3196   	fcall	_setSw_Status
  5296                           
  5297                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
  5298  16F8  0020               	movlb	0	; select bank0
  5299  16F9  01A2               	clrf	setRFSW_Status@command
  5300  16FA  0825               	movf	setDimmerLights_ERROR@lights,w
  5301  16FB  319D  2579         	fcall	_setRFSW_Status
  5302  16FD  0008               	return
  5303  16FE                     __end_of_setDimmerLights_ERROR:	
  5304                           
  5305                           	psect	text14
  5306  1CA6                     __ptext14:	
  5307 ;; *************** function _Temp_Initialization *****************
  5308 ;; Defined at:
  5309 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;		None               void
  5316 ;; Registers used:
  5317 ;;		status,2, status,0, pclath, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    6
  5330 ;; This function calls:
  5331 ;;		_setTemp_Initialization
  5332 ;; This function is called by:
  5333 ;;		_main
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _Temp_Initialization
  5339  1CA6                     _Temp_Initialization:	
  5340                           
  5341                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5345  1CA6  319C  24A3         	fcall	_setTemp_Initialization
  5346  1CA8  0008               	return
  5347  1CA9                     __end_of_Temp_Initialization:	
  5348                           
  5349                           	psect	text15
  5350  1CA3                     __ptext15:	
  5351 ;; *************** function _setTemp_Initialization *****************
  5352 ;; Defined at:
  5353 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;		None
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;		None               void
  5360 ;; Registers used:
  5361 ;;		None
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;Total ram usage:        0 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    5
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_Temp_Initialization
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           
  5382                           ;psect for function _setTemp_Initialization
  5383  1CA3                     _setTemp_Initialization:	
  5384                           
  5385                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _setTemp_Initialization: []
  5389  1CA3  0021               	movlb	1	; select bank1
  5390  1CA4  1655               	bsf	_Temp1^(0+128),4
  5391  1CA5  0008               	return
  5392  1CA6                     __end_of_setTemp_Initialization:	
  5393                           
  5394                           	psect	text16
  5395  1D52                     __ptext16:	
  5396 ;; *************** function _Switch_Main *****************
  5397 ;; Defined at:
  5398 ;;		line 67 in file "../src/Switch_B1.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;		None               void
  5405 ;; Registers used:
  5406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:   11
  5419 ;; This function calls:
  5420 ;;		_setSw_Main
  5421 ;; This function is called by:
  5422 ;;		_main
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           
  5427                           ;psect for function _Switch_Main
  5428  1D52                     _Switch_Main:	
  5429                           
  5430                           ;Switch_B1.c: 69: setSw_Main(1);
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5434  1D52  3001               	movlw	1
  5435  1D53  3182  2221  319D   	fcall	_setSw_Main
  5436                           
  5437                           ;Switch_B1.c: 73: setSw_Main(2);
  5438  1D56  3002               	movlw	2
  5439  1D57  3182  2221  319D   	fcall	_setSw_Main
  5440                           
  5441                           ;Switch_B1.c: 77: setSw_Main(3);
  5442  1D5A  3003               	movlw	3
  5443  1D5B  3182  2221         	fcall	_setSw_Main
  5444  1D5D  0008               	return
  5445  1D5E                     __end_of_Switch_Main:	
  5446                           
  5447                           	psect	text17
  5448  0221                     __ptext17:	
  5449 ;; *************** function _setSw_Main *****************
  5450 ;; Defined at:
  5451 ;;		line 117 in file "../src/Switch_B1.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  sw              1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  sw              1   74[BANK0 ] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;Total ram usage:        3 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:   10
  5472 ;; This function calls:
  5473 ;;		_SwPointSelect
  5474 ;;		_Sw_DimmerAdjFunc
  5475 ;;		_Sw_DimmerOffFunc
  5476 ;;		_Sw_DimmerOnFunc
  5477 ;;		_setBuz
  5478 ;;		_setRF_Learn
  5479 ;; This function is called by:
  5480 ;;		_Switch_Main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _setSw_Main
  5486  0221                     _setSw_Main:	
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5490                           ;setSw_Main@sw stored from wreg
  5491  0221  0020               	movlb	0	; select bank0
  5492  0222  00EA               	movwf	setSw_Main@sw
  5493                           
  5494                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5495  0223  086A               	movf	setSw_Main@sw,w
  5496  0224  319F  27C4  3182   	fcall	_SwPointSelect
  5497                           
  5498                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5499  0227  0878               	movf	_Sw,w
  5500  0228  0086               	movwf	6
  5501  0229  0879               	movf	_Sw+1,w
  5502  022A  0087               	movwf	7
  5503  022B  1C01               	btfss	1,0
  5504  022C  0008               	return
  5505                           
  5506                           ;Switch_B1.c: 121: if (sw == 1) {
  5507  022D  0020               	movlb	0	; select bank0
  5508  022E  086A               	movf	setSw_Main@sw,w
  5509  022F  3A01               	xorlw	1
  5510  0230  1D03               	skipz
  5511  0231  2A3A               	goto	l7609
  5512                           
  5513                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  5514  0232  0878               	movf	_Sw,w
  5515  0233  0086               	movwf	6
  5516  0234  0879               	movf	_Sw+1,w
  5517  0235  0087               	movwf	7
  5518  0236  1081               	bcf	1,1
  5519  0237  180C               	btfsc	12,0	;volatile
  5520  0238  1481               	bsf	1,1
  5521                           
  5522                           ;Switch_B1.c: 123: } else if (sw == 2) {
  5523  0239  2A53               	goto	l2729
  5524  023A                     l7609:	
  5525  023A  0020               	movlb	0	; select bank0
  5526  023B  086A               	movf	setSw_Main@sw,w
  5527  023C  3A02               	xorlw	2
  5528  023D  1D03               	skipz
  5529  023E  2A47               	goto	l7613
  5530                           
  5531                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  5532  023F  0878               	movf	_Sw,w
  5533  0240  0086               	movwf	6
  5534  0241  0879               	movf	_Sw+1,w
  5535  0242  0087               	movwf	7
  5536  0243  1081               	bcf	1,1
  5537  0244  1B0C               	btfsc	12,6	;volatile
  5538  0245  1481               	bsf	1,1
  5539                           
  5540                           ;Switch_B1.c: 125: } else if (sw == 3) {
  5541  0246  2A53               	goto	l2729
  5542  0247                     l7613:	
  5543  0247  0020               	movlb	0	; select bank0
  5544  0248  086A               	movf	setSw_Main@sw,w
  5545  0249  3A03               	xorlw	3
  5546  024A  1D03               	skipz
  5547  024B  2A53               	goto	l2729
  5548                           
  5549                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  5550  024C  0878               	movf	_Sw,w
  5551  024D  0086               	movwf	6
  5552  024E  0879               	movf	_Sw+1,w
  5553  024F  0087               	movwf	7
  5554  0250  1081               	bcf	1,1
  5555  0251  1A0C               	btfsc	12,4	;volatile
  5556  0252  1481               	bsf	1,1
  5557  0253                     l2729:	
  5558                           
  5559                           ;Switch_B1.c: 127: }
  5560                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5561  0253  0878               	movf	_Sw,w
  5562  0254  0086               	movwf	6
  5563  0255  0879               	movf	_Sw+1,w
  5564  0256  0087               	movwf	7
  5565  0257  1C81               	btfss	1,1
  5566  0258  2B1E               	goto	l7663
  5567                           
  5568                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5569  0259  0878               	movf	_Sw,w
  5570  025A  0086               	movwf	6
  5571  025B  0879               	movf	_Sw+1,w
  5572  025C  0087               	movwf	7
  5573  025D  1901               	btfsc	1,2
  5574  025E  2A81               	goto	l7629
  5575                           
  5576                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5577  025F  3001               	movlw	1
  5578  0260  0020               	movlb	0	; select bank0
  5579  0261  00E8               	movwf	??_setSw_Main
  5580  0262  0878               	movf	_Sw,w
  5581  0263  0086               	movwf	6
  5582  0264  0879               	movf	_Sw+1,w
  5583  0265  0087               	movwf	7
  5584  0266  3142               	addfsr 1,2
  5585  0267  0868               	movf	??_setSw_Main,w
  5586  0268  0781               	addwf	1,f
  5587                           
  5588                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5589  0269  0878               	movf	_Sw,w
  5590  026A  0086               	movwf	6
  5591  026B  0879               	movf	_Sw+1,w
  5592  026C  0087               	movwf	7
  5593  026D  3142               	addfsr 1,2
  5594  026E  3005               	movlw	5
  5595  026F  0201               	subwf	1,w
  5596  0270  1C03               	skipc
  5597  0271  0008               	return
  5598                           
  5599                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5600  0272  0878               	movf	_Sw,w
  5601  0273  0086               	movwf	6
  5602  0274  0879               	movf	_Sw+1,w
  5603  0275  0087               	movwf	7
  5604  0276  3142               	addfsr 1,2
  5605  0277  0181               	clrf	1
  5606                           
  5607                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5608  0278  0878               	movf	_Sw,w
  5609  0279  0086               	movwf	6
  5610  027A  0879               	movf	_Sw+1,w
  5611  027B  0087               	movwf	7
  5612  027C  1501               	bsf	1,2
  5613                           
  5614                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5615  027D  086A               	movf	setSw_Main@sw,w
  5616  027E  318E  2658         	fcall	_Sw_DimmerOnFunc
  5617                           
  5618                           ;Switch_B1.c: 173: }
  5619                           ;Switch_B1.c: 174: } else {
  5620  0280  0008               	return
  5621  0281                     l7629:	
  5622                           
  5623                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5624  0281  0878               	movf	_Sw,w
  5625  0282  0086               	movwf	6
  5626  0283  0879               	movf	_Sw+1,w
  5627  0284  0087               	movwf	7
  5628  0285  1981               	btfsc	1,3
  5629  0286  2AAE               	goto	l7639
  5630                           
  5631                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5632  0287  0878               	movf	_Sw,w
  5633  0288  0086               	movwf	6
  5634  0289  0879               	movf	_Sw+1,w
  5635  028A  0087               	movwf	7
  5636  028B  3143               	addfsr 1,3
  5637  028C  3001               	movlw	1
  5638  028D  0781               	addwf	1,f
  5639  028E  3141               	addfsr 1,1
  5640  028F  1803               	skipnc
  5641  0290  0A81               	incf	1,f
  5642                           
  5643                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5644  0291  0878               	movf	_Sw,w
  5645  0292  0086               	movwf	6
  5646  0293  0879               	movf	_Sw+1,w
  5647  0294  0087               	movwf	7
  5648  0295  3143               	addfsr 1,3
  5649  0296  3F40               	moviw [0]fsr1
  5650  0297  0020               	movlb	0	; select bank0
  5651  0298  00E8               	movwf	??_setSw_Main
  5652  0299  3F41               	moviw [1]fsr1
  5653  029A  00E9               	movwf	??_setSw_Main+1
  5654  029B  3000               	movlw	0
  5655  029C  0269               	subwf	??_setSw_Main+1,w
  5656  029D  3096               	movlw	150
  5657  029E  1903               	skipnz
  5658  029F  0268               	subwf	??_setSw_Main,w
  5659  02A0  1C03               	skipc
  5660  02A1  0008               	return
  5661                           
  5662                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5663  02A2  0878               	movf	_Sw,w
  5664  02A3  0086               	movwf	6
  5665  02A4  0879               	movf	_Sw+1,w
  5666  02A5  0087               	movwf	7
  5667  02A6  3143               	addfsr 1,3
  5668  02A7  3000               	movlw	0
  5669  02A8  3FC0               	movwi [0]fsr1
  5670  02A9  3FC1               	movwi [1]fsr1
  5671                           
  5672                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5673  02AA  086A               	movf	setSw_Main@sw,w
  5674  02AB  3189  2158         	fcall	_Sw_DimmerAdjFunc
  5675                           
  5676                           ;Switch_B1.c: 184: }
  5677                           ;Switch_B1.c: 185: } else {
  5678  02AD  0008               	return
  5679  02AE                     l7639:	
  5680                           
  5681                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5682  02AE  0878               	movf	_Sw,w
  5683  02AF  0086               	movwf	6
  5684  02B0  0879               	movf	_Sw+1,w
  5685  02B1  0087               	movwf	7
  5686  02B2  1A01               	btfsc	1,4
  5687  02B3  2AEC               	goto	l7653
  5688                           
  5689                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5690  02B4  0878               	movf	_Sw,w
  5691  02B5  0086               	movwf	6
  5692  02B6  0879               	movf	_Sw+1,w
  5693  02B7  0087               	movwf	7
  5694  02B8  3145               	addfsr 1,5
  5695  02B9  3001               	movlw	1
  5696  02BA  0781               	addwf	1,f
  5697  02BB  3141               	addfsr 1,1
  5698  02BC  1803               	skipnc
  5699  02BD  0A81               	incf	1,f
  5700                           
  5701                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5702  02BE  0878               	movf	_Sw,w
  5703  02BF  0086               	movwf	6
  5704  02C0  0879               	movf	_Sw+1,w
  5705  02C1  0087               	movwf	7
  5706  02C2  3145               	addfsr 1,5
  5707  02C3  3F40               	moviw [0]fsr1
  5708  02C4  0020               	movlb	0	; select bank0
  5709  02C5  00E8               	movwf	??_setSw_Main
  5710  02C6  3F41               	moviw [1]fsr1
  5711  02C7  00E9               	movwf	??_setSw_Main+1
  5712  02C8  3000               	movlw	0
  5713  02C9  0269               	subwf	??_setSw_Main+1,w
  5714  02CA  3096               	movlw	150
  5715  02CB  1903               	skipnz
  5716  02CC  0268               	subwf	??_setSw_Main,w
  5717  02CD  1C03               	skipc
  5718  02CE  0008               	return
  5719                           
  5720                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5721  02CF  0878               	movf	_Sw,w
  5722  02D0  0086               	movwf	6
  5723  02D1  0879               	movf	_Sw+1,w
  5724  02D2  0087               	movwf	7
  5725  02D3  3145               	addfsr 1,5
  5726  02D4  3000               	movlw	0
  5727  02D5  3FC0               	movwi [0]fsr1
  5728  02D6  3FC1               	movwi [1]fsr1
  5729                           
  5730                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5731  02D7  0878               	movf	_Sw,w
  5732  02D8  0086               	movwf	6
  5733  02D9  0879               	movf	_Sw+1,w
  5734  02DA  0087               	movwf	7
  5735  02DB  1601               	bsf	1,4
  5736                           
  5737                           ;Switch_B1.c: 193: setRF_Learn(1);
  5738  02DC  3001               	movlw	1
  5739  02DD  319C  24F2  3182   	fcall	_setRF_Learn
  5740                           
  5741                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5742  02E0  0021               	movlb	1	; select bank1
  5743  02E1  1FA0               	btfss	_myMain^(0+128),7
  5744  02E2  0008               	return
  5745                           
  5746                           ;Switch_B1.c: 196: setBuz(2, 100);
  5747  02E3  3064               	movlw	100
  5748  02E4  0020               	movlb	0	; select bank0
  5749  02E5  00A9               	movwf	setBuz@time
  5750  02E6  3000               	movlw	0
  5751  02E7  00AA               	movwf	setBuz@time+1
  5752  02E8  3002               	movlw	2
  5753  02E9  3197  27A7         	fcall	_setBuz
  5754                           
  5755                           ;Switch_B1.c: 197: }
  5756                           ;Switch_B1.c: 199: }
  5757                           ;Switch_B1.c: 200: } else {
  5758  02EB  0008               	return
  5759  02EC                     l7653:	
  5760                           
  5761                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5762  02EC  0878               	movf	_Sw,w
  5763  02ED  0086               	movwf	6
  5764  02EE  0879               	movf	_Sw+1,w
  5765  02EF  0087               	movwf	7
  5766  02F0  1A81               	btfsc	1,5
  5767  02F1  0008               	return
  5768                           
  5769                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5770  02F2  0878               	movf	_Sw,w
  5771  02F3  0086               	movwf	6
  5772  02F4  0879               	movf	_Sw+1,w
  5773  02F5  0087               	movwf	7
  5774  02F6  3147               	addfsr 1,7
  5775  02F7  3001               	movlw	1
  5776  02F8  0781               	addwf	1,f
  5777  02F9  3141               	addfsr 1,1
  5778  02FA  1803               	skipnc
  5779  02FB  0A81               	incf	1,f
  5780                           
  5781                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5782  02FC  0878               	movf	_Sw,w
  5783  02FD  0086               	movwf	6
  5784  02FE  0879               	movf	_Sw+1,w
  5785  02FF  0087               	movwf	7
  5786  0300  3147               	addfsr 1,7
  5787  0301  3F40               	moviw [0]fsr1
  5788  0302  0020               	movlb	0	; select bank0
  5789  0303  00E8               	movwf	??_setSw_Main
  5790  0304  3F41               	moviw [1]fsr1
  5791  0305  00E9               	movwf	??_setSw_Main+1
  5792  0306  3001               	movlw	1
  5793  0307  0269               	subwf	??_setSw_Main+1,w
  5794  0308  302C               	movlw	44
  5795  0309  1903               	skipnz
  5796  030A  0268               	subwf	??_setSw_Main,w
  5797  030B  1C03               	skipc
  5798  030C  0008               	return
  5799                           
  5800                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5801  030D  0878               	movf	_Sw,w
  5802  030E  0086               	movwf	6
  5803  030F  0879               	movf	_Sw+1,w
  5804  0310  0087               	movwf	7
  5805  0311  3147               	addfsr 1,7
  5806  0312  3000               	movlw	0
  5807  0313  3FC0               	movwi [0]fsr1
  5808  0314  3FC1               	movwi [1]fsr1
  5809                           
  5810                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5811  0315  0878               	movf	_Sw,w
  5812  0316  0086               	movwf	6
  5813  0317  0879               	movf	_Sw+1,w
  5814  0318  0087               	movwf	7
  5815  0319  1681               	bsf	1,5
  5816                           
  5817                           ;Switch_B1.c: 208: setRF_Learn(0);
  5818  031A  3000               	movlw	0
  5819  031B  319C  24F2         	fcall	_setRF_Learn
  5820                           
  5821                           ;Switch_B1.c: 211: }
  5822                           ;Switch_B1.c: 212: }
  5823                           ;Switch_B1.c: 213: }
  5824                           ;Switch_B1.c: 214: }
  5825                           ;Switch_B1.c: 215: }
  5826                           ;Switch_B1.c: 216: } else {
  5827  031D  0008               	return
  5828  031E                     l7663:	
  5829                           
  5830                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5831  031E  0878               	movf	_Sw,w
  5832  031F  0086               	movwf	6
  5833  0320  0879               	movf	_Sw+1,w
  5834  0321  0087               	movwf	7
  5835  0322  1D01               	btfss	1,2
  5836  0323  0008               	return
  5837                           
  5838                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5839  0324  3001               	movlw	1
  5840  0325  0020               	movlb	0	; select bank0
  5841  0326  00E8               	movwf	??_setSw_Main
  5842  0327  0878               	movf	_Sw,w
  5843  0328  0086               	movwf	6
  5844  0329  0879               	movf	_Sw+1,w
  5845  032A  0087               	movwf	7
  5846  032B  3142               	addfsr 1,2
  5847  032C  0868               	movf	??_setSw_Main,w
  5848  032D  0781               	addwf	1,f
  5849                           
  5850                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5851  032E  0878               	movf	_Sw,w
  5852  032F  0086               	movwf	6
  5853  0330  0879               	movf	_Sw+1,w
  5854  0331  0087               	movwf	7
  5855  0332  3142               	addfsr 1,2
  5856  0333  3005               	movlw	5
  5857  0334  0201               	subwf	1,w
  5858  0335  1C03               	skipc
  5859  0336  0008               	return
  5860                           
  5861                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5862  0337  0878               	movf	_Sw,w
  5863  0338  0086               	movwf	6
  5864  0339  0879               	movf	_Sw+1,w
  5865  033A  0087               	movwf	7
  5866  033B  3142               	addfsr 1,2
  5867  033C  0181               	clrf	1
  5868                           
  5869                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5870  033D  0878               	movf	_Sw,w
  5871  033E  0086               	movwf	6
  5872  033F  0879               	movf	_Sw+1,w
  5873  0340  0087               	movwf	7
  5874  0341  1101               	bcf	1,2
  5875                           
  5876                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5877  0342  0878               	movf	_Sw,w
  5878  0343  0086               	movwf	6
  5879  0344  0879               	movf	_Sw+1,w
  5880  0345  0087               	movwf	7
  5881  0346  3143               	addfsr 1,3
  5882  0347  3000               	movlw	0
  5883  0348  3FC0               	movwi [0]fsr1
  5884  0349  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5887  034A  0878               	movf	_Sw,w
  5888  034B  0086               	movwf	6
  5889  034C  0879               	movf	_Sw+1,w
  5890  034D  0087               	movwf	7
  5891  034E  1181               	bcf	1,3
  5892                           
  5893                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5894  034F  0878               	movf	_Sw,w
  5895  0350  0086               	movwf	6
  5896  0351  0879               	movf	_Sw+1,w
  5897  0352  0087               	movwf	7
  5898  0353  3145               	addfsr 1,5
  5899  0354  3000               	movlw	0
  5900  0355  3FC0               	movwi [0]fsr1
  5901  0356  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5904  0357  0878               	movf	_Sw,w
  5905  0358  0086               	movwf	6
  5906  0359  0879               	movf	_Sw+1,w
  5907  035A  0087               	movwf	7
  5908  035B  1201               	bcf	1,4
  5909                           
  5910                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5911  035C  0878               	movf	_Sw,w
  5912  035D  0086               	movwf	6
  5913  035E  0879               	movf	_Sw+1,w
  5914  035F  0087               	movwf	7
  5915  0360  3147               	addfsr 1,7
  5916  0361  3000               	movlw	0
  5917  0362  3FC0               	movwi [0]fsr1
  5918  0363  3FC1               	movwi [1]fsr1
  5919                           
  5920                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5921  0364  0878               	movf	_Sw,w
  5922  0365  0086               	movwf	6
  5923  0366  0879               	movf	_Sw+1,w
  5924  0367  0087               	movwf	7
  5925  0368  1281               	bcf	1,5
  5926                           
  5927                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5928  0369  086A               	movf	setSw_Main@sw,w
  5929  036A  318A  22FA  3182   	fcall	_Sw_DimmerOffFunc
  5930                           
  5931                           ;Switch_B1.c: 232: setRF_Learn(0);
  5932  036D  3000               	movlw	0
  5933  036E  319C  24F2         	fcall	_setRF_Learn
  5934  0370  0008               	return
  5935  0371                     __end_of_setSw_Main:	
  5936                           
  5937                           	psect	text18
  5938  1CF2                     __ptext18:	
  5939 ;; *************** function _setRF_Learn *****************
  5940 ;; Defined at:
  5941 ;;		line 23 in file "../src/RF_Control_B1.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  command         1    wreg     unsigned char 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  command         1    0[BANK0 ] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;Total ram usage:        1 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    5
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_setSw_Main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function _setRF_Learn
  5971  1CF2                     _setRF_Learn:	
  5972                           
  5973                           ;incstack = 0
  5974                           ; Regs used in _setRF_Learn: [wreg]
  5975                           ;setRF_Learn@command stored from wreg
  5976  1CF2  0020               	movlb	0	; select bank0
  5977  1CF3  00A0               	movwf	setRF_Learn@command
  5978                           
  5979                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5980  1CF4  0820               	movf	setRF_Learn@command,w
  5981  1CF5  0021               	movlb	1	; select bank1
  5982  1CF6  133E               	bcf	_RF1^(0+128),6
  5983  1CF7  1D03               	skipz
  5984  1CF8  173E               	bsf	_RF1^(0+128),6
  5985  1CF9  0008               	return
  5986  1CFA                     __end_of_setRF_Learn:	
  5987                           
  5988                           	psect	text19
  5989  0E58                     __ptext19:	
  5990 ;; *************** function _Sw_DimmerOnFunc *****************
  5991 ;; Defined at:
  5992 ;;		line 241 in file "../src/Switch_B1.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  sw              1    wreg     unsigned char 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  sw              1   71[BANK0 ] unsigned char 
  5997 ;;  Idle            1   70[BANK0 ] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;Total ram usage:        6 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    9
  6014 ;; This function calls:
  6015 ;;		_setBuz
  6016 ;;		_setDimmerLights_Switch
  6017 ;;		_setDimmerLights_Trigger
  6018 ;;		_setRFSW_Status
  6019 ;;		_setRF_DimmerLights
  6020 ;;		_setTxData
  6021 ;; This function is called by:
  6022 ;;		_setSw_Main
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function _Sw_DimmerOnFunc
  6028  0E58                     _Sw_DimmerOnFunc:	
  6029                           
  6030                           ;incstack = 0
  6031                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6032                           ;Sw_DimmerOnFunc@sw stored from wreg
  6033  0E58  0020               	movlb	0	; select bank0
  6034  0E59  00E7               	movwf	Sw_DimmerOnFunc@sw
  6035                           
  6036                           ;Switch_B1.c: 242: char Idle = 1;
  6037  0E5A  01E6               	clrf	Sw_DimmerOnFunc@Idle
  6038  0E5B  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  6039                           
  6040                           ;Switch_B1.c: 246: if (sw == 1) {
  6041  0E5C  0867               	movf	Sw_DimmerOnFunc@sw,w
  6042  0E5D  3A01               	xorlw	1
  6043  0E5E  1D03               	skipz
  6044  0E5F  2E6B               	goto	l6921
  6045                           
  6046                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6047  0E60  01E3               	clrf	_Sw_DimmerOnFunc$5423
  6048  0E61  0023               	movlb	3	; select bank3
  6049  0E62  1DCD               	btfss	(_DimmerLights2^(0+384)+8),3
  6050  0E63  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6051  0E64  2E68               	goto	l6919
  6052  0E65  0020               	movlb	0	; select bank0
  6053  0E66  01E3               	clrf	_Sw_DimmerOnFunc$5423
  6054  0E67  0AE3               	incf	_Sw_DimmerOnFunc$5423,f
  6055  0E68                     l6919:	
  6056  0E68  0020               	movlb	0	; select bank0
  6057  0E69  0863               	movf	_Sw_DimmerOnFunc$5423,w
  6058  0E6A  2E8C               	goto	L3
  6059  0E6B                     l6921:	
  6060                           ;Switch_B1.c: 248: } else if (sw == 2) {
  6061                           
  6062  0E6B  0867               	movf	Sw_DimmerOnFunc@sw,w
  6063  0E6C  3A02               	xorlw	2
  6064  0E6D  1D03               	skipz
  6065  0E6E  2E7C               	goto	l6933
  6066                           
  6067                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6068  0E6F  01E4               	clrf	_Sw_DimmerOnFunc$5424
  6069  0E70  0022               	movlb	2	; select bank2
  6070  0E71  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6071  0E72  2E79               	goto	l6931
  6072  0E73  0023               	movlb	3	; select bank3
  6073  0E74  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6074  0E75  2E79               	goto	l6931
  6075  0E76  0020               	movlb	0	; select bank0
  6076  0E77  01E4               	clrf	_Sw_DimmerOnFunc$5424
  6077  0E78  0AE4               	incf	_Sw_DimmerOnFunc$5424,f
  6078  0E79                     l6931:	
  6079  0E79  0020               	movlb	0	; select bank0
  6080  0E7A  0864               	movf	_Sw_DimmerOnFunc$5424,w
  6081  0E7B  2E8C               	goto	L3
  6082  0E7C                     l6933:	
  6083                           ;Switch_B1.c: 250: } else if (sw == 3) {
  6084                           
  6085  0E7C  0867               	movf	Sw_DimmerOnFunc@sw,w
  6086  0E7D  3A03               	xorlw	3
  6087  0E7E  1D03               	skipz
  6088  0E7F  2E8F               	goto	l2755
  6089                           
  6090                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6091  0E80  01E5               	clrf	_Sw_DimmerOnFunc$5425
  6092  0E81  0022               	movlb	2	; select bank2
  6093  0E82  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6094  0E83  2E8A               	goto	l6943
  6095  0E84  0023               	movlb	3	; select bank3
  6096  0E85  19CD               	btfsc	(_DimmerLights2^(0+384)+8),3
  6097  0E86  2E8A               	goto	l6943
  6098  0E87  0020               	movlb	0	; select bank0
  6099  0E88  01E5               	clrf	_Sw_DimmerOnFunc$5425
  6100  0E89  0AE5               	incf	_Sw_DimmerOnFunc$5425,f
  6101  0E8A                     l6943:	
  6102  0E8A  0020               	movlb	0	; select bank0
  6103  0E8B  0865               	movf	_Sw_DimmerOnFunc$5425,w
  6104  0E8C                     L3:	
  6105  0E8C  00E2               	movwf	??_Sw_DimmerOnFunc
  6106  0E8D  0862               	movf	??_Sw_DimmerOnFunc,w
  6107  0E8E  00E6               	movwf	Sw_DimmerOnFunc@Idle
  6108  0E8F                     l2755:	
  6109                           
  6110                           ;Switch_B1.c: 252: }
  6111                           ;Switch_B1.c: 263: if (Idle == 1) {
  6112  0E8F  0866               	movf	Sw_DimmerOnFunc@Idle,w
  6113  0E90  3A01               	xorlw	1
  6114  0E91  1D03               	skipz
  6115  0E92  0008               	return
  6116                           
  6117                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6118  0E93  0878               	movf	_Sw,w
  6119  0E94  0086               	movwf	6
  6120  0E95  0879               	movf	_Sw+1,w
  6121  0E96  0087               	movwf	7
  6122  0E97  1781               	bsf	1,7
  6123                           
  6124                           ;Switch_B1.c: 265: setBuz(1, 100);
  6125  0E98  3064               	movlw	100
  6126  0E99  00A9               	movwf	setBuz@time
  6127  0E9A  3000               	movlw	0
  6128  0E9B  00AA               	movwf	setBuz@time+1
  6129  0E9C  3001               	movlw	1
  6130  0E9D  3197  27A7  318E   	fcall	_setBuz
  6131                           
  6132                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6133  0EA0  0878               	movf	_Sw,w
  6134  0EA1  0086               	movwf	6
  6135  0EA2  0879               	movf	_Sw+1,w
  6136  0EA3  0087               	movwf	7
  6137  0EA4  1B01               	btfsc	1,6
  6138  0EA5  2ED0               	goto	l6963
  6139                           
  6140                           ;Switch_B1.c: 267: Sw->Status = 1;
  6141  0EA6  0878               	movf	_Sw,w
  6142  0EA7  0086               	movwf	6
  6143  0EA8  0879               	movf	_Sw+1,w
  6144  0EA9  0087               	movwf	7
  6145  0EAA  1701               	bsf	1,6
  6146                           
  6147                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6148  0EAB  0020               	movlb	0	; select bank0
  6149  0EAC  01A2               	clrf	setRFSW_Status@command
  6150  0EAD  0AA2               	incf	setRFSW_Status@command,f
  6151  0EAE  0867               	movf	Sw_DimmerOnFunc@sw,w
  6152  0EAF  319D  2579  318E   	fcall	_setRFSW_Status
  6153                           
  6154                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6155  0EB2  0020               	movlb	0	; select bank0
  6156  0EB3  01A2               	clrf	setDimmerLights_Trigger@command
  6157  0EB4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6158  0EB5  0867               	movf	Sw_DimmerOnFunc@sw,w
  6159  0EB6  319D  25F2  318E   	fcall	_setDimmerLights_Trigger
  6160                           
  6161                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6162  0EB9  0020               	movlb	0	; select bank0
  6163  0EBA  01A2               	clrf	setDimmerLights_Switch@command
  6164  0EBB  0AA2               	incf	setDimmerLights_Switch@command,f
  6165  0EBC  0867               	movf	Sw_DimmerOnFunc@sw,w
  6166  0EBD  319D  25E2  318E   	fcall	_setDimmerLights_Switch
  6167                           
  6168                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6169  0EC0  0878               	movf	_Sw,w
  6170  0EC1  0086               	movwf	6
  6171  0EC2  0879               	movf	_Sw+1,w
  6172  0EC3  0087               	movwf	7
  6173  0EC4  3000               	movlw	0
  6174  0EC5  1B01               	btfsc	1,6
  6175  0EC6  3001               	movlw	1
  6176  0EC7  0020               	movlb	0	; select bank0
  6177  0EC8  00DD               	movwf	setRF_DimmerLights@on
  6178  0EC9  0867               	movf	Sw_DimmerOnFunc@sw,w
  6179  0ECA  318A  228E  318E   	fcall	_setRF_DimmerLights
  6180                           
  6181                           ;Switch_B1.c: 274: setTxData();
  6182  0ECD  3185  252E         	fcall	_setTxData
  6183                           
  6184                           ;Switch_B1.c: 276: } else {
  6185  0ECF  0008               	return
  6186  0ED0                     l6963:	
  6187                           
  6188                           ;Switch_B1.c: 277: Sw->Status = 0;
  6189  0ED0  0878               	movf	_Sw,w
  6190  0ED1  0086               	movwf	6
  6191  0ED2  0879               	movf	_Sw+1,w
  6192  0ED3  0087               	movwf	7
  6193  0ED4  1301               	bcf	1,6
  6194                           
  6195                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6196  0ED5  0878               	movf	_Sw,w
  6197  0ED6  0086               	movwf	6
  6198  0ED7  0879               	movf	_Sw+1,w
  6199  0ED8  0087               	movwf	7
  6200  0ED9  3000               	movlw	0
  6201  0EDA  1B01               	btfsc	1,6
  6202  0EDB  3001               	movlw	1
  6203  0EDC  0020               	movlb	0	; select bank0
  6204  0EDD  00A2               	movwf	setRFSW_Status@command
  6205  0EDE  0867               	movf	Sw_DimmerOnFunc@sw,w
  6206  0EDF  319D  2579         	fcall	_setRFSW_Status
  6207  0EE1  0008               	return
  6208  0EE2                     __end_of_Sw_DimmerOnFunc:	
  6209                           
  6210                           	psect	text20
  6211  0AFA                     __ptext20:	
  6212 ;; *************** function _Sw_DimmerOffFunc *****************
  6213 ;; Defined at:
  6214 ;;		line 284 in file "../src/Switch_B1.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  sw              1    wreg     unsigned char 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  sw              1   68[BANK0 ] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;		None               void
  6221 ;; Registers used:
  6222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;Total ram usage:        3 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    9
  6235 ;; This function calls:
  6236 ;;		_setDelayOff_GO
  6237 ;;		_setDimmerLights_AdjGo
  6238 ;;		_setDimmerLights_Switch
  6239 ;;		_setDimmerLights_Trigger
  6240 ;;		_setDimmerLights_TriggerAdj
  6241 ;;		_setRF_DimmerLights
  6242 ;;		_setTxData
  6243 ;; This function is called by:
  6244 ;;		_setSw_Main
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           
  6249                           ;psect for function _Sw_DimmerOffFunc
  6250  0AFA                     _Sw_DimmerOffFunc:	
  6251                           
  6252                           ;incstack = 0
  6253                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6254                           ;Sw_DimmerOffFunc@sw stored from wreg
  6255  0AFA  0020               	movlb	0	; select bank0
  6256  0AFB  00E4               	movwf	Sw_DimmerOffFunc@sw
  6257                           
  6258                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6259  0AFC  0878               	movf	_Sw,w
  6260  0AFD  0086               	movwf	6
  6261  0AFE  0879               	movf	_Sw+1,w
  6262  0AFF  0087               	movwf	7
  6263  0B00  1F81               	btfss	1,7
  6264  0B01  0008               	return
  6265                           
  6266                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6267  0B02  0878               	movf	_Sw,w
  6268  0B03  0086               	movwf	6
  6269  0B04  0879               	movf	_Sw+1,w
  6270  0B05  0087               	movwf	7
  6271  0B06  1381               	bcf	1,7
  6272                           
  6273                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6274  0B07  0878               	movf	_Sw,w
  6275  0B08  0086               	movwf	6
  6276  0B09  0879               	movf	_Sw+1,w
  6277  0B0A  0087               	movwf	7
  6278  0B0B  1F01               	btfss	1,6
  6279  0B0C  2B47               	goto	l7033
  6280                           
  6281                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6282  0B0D  0878               	movf	_Sw,w
  6283  0B0E  0086               	movwf	6
  6284  0B0F  0879               	movf	_Sw+1,w
  6285  0B10  0087               	movwf	7
  6286  0B11  3141               	addfsr 1,1
  6287  0B12  1C01               	btfss	1,0
  6288  0B13  0008               	return
  6289                           
  6290                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6291  0B14  0878               	movf	_Sw,w
  6292  0B15  0086               	movwf	6
  6293  0B16  0879               	movf	_Sw+1,w
  6294  0B17  0087               	movwf	7
  6295  0B18  3141               	addfsr 1,1
  6296  0B19  1001               	bcf	1,0
  6297                           
  6298                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6299  0B1A  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6300  0B1B  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6301  0B1C  0864               	movf	Sw_DimmerOffFunc@sw,w
  6302  0B1D  319E  2632  318A   	fcall	_setDimmerLights_TriggerAdj
  6303                           
  6304                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6305  0B20  0020               	movlb	0	; select bank0
  6306  0B21  01A2               	clrf	setDimmerLights_AdjGo@command
  6307  0B22  0864               	movf	Sw_DimmerOffFunc@sw,w
  6308  0B23  319E  2622  318A   	fcall	_setDimmerLights_AdjGo
  6309                           
  6310                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6311  0B26  0020               	movlb	0	; select bank0
  6312  0B27  0864               	movf	Sw_DimmerOffFunc@sw,w
  6313  0B28  3E1A               	addlw	26
  6314  0B29  076F               	addwf	_product,w
  6315  0B2A  00E2               	movwf	??_Sw_DimmerOffFunc
  6316  0B2B  0862               	movf	??_Sw_DimmerOffFunc,w
  6317  0B2C  0086               	movwf	6
  6318  0B2D  3002               	movlw	2	; select bank4/5
  6319  0B2E  0087               	movwf	7
  6320  0B2F  0801               	movf	1,w
  6321  0B30  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6322  0B31  086F               	movf	_product,w
  6323  0B32  3E11               	addlw	17
  6324  0B33  0086               	movwf	6
  6325  0B34  3002               	movlw	2	; select bank4/5
  6326  0B35  0087               	movwf	7
  6327  0B36  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6328  0B37  0081               	movwf	1
  6329                           
  6330                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6331  0B38  0878               	movf	_Sw,w
  6332  0B39  0086               	movwf	6
  6333  0B3A  0879               	movf	_Sw+1,w
  6334  0B3B  0087               	movwf	7
  6335  0B3C  3000               	movlw	0
  6336  0B3D  1B01               	btfsc	1,6
  6337  0B3E  3001               	movlw	1
  6338  0B3F  00DD               	movwf	setRF_DimmerLights@on
  6339  0B40  0864               	movf	Sw_DimmerOffFunc@sw,w
  6340  0B41  318A  228E  318A   	fcall	_setRF_DimmerLights
  6341                           
  6342                           ;Switch_B1.c: 295: setTxData();
  6343  0B44  3185  252E         	fcall	_setTxData
  6344                           
  6345                           ;Switch_B1.c: 297: }
  6346                           ;Switch_B1.c: 298: } else {
  6347  0B46  0008               	return
  6348  0B47                     l7033:	
  6349                           
  6350                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6351  0B47  0020               	movlb	0	; select bank0
  6352  0B48  01A2               	clrf	setDimmerLights_Trigger@command
  6353  0B49  0AA2               	incf	setDimmerLights_Trigger@command,f
  6354  0B4A  0864               	movf	Sw_DimmerOffFunc@sw,w
  6355  0B4B  319D  25F2  318A   	fcall	_setDimmerLights_Trigger
  6356                           
  6357                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6358  0B4E  0020               	movlb	0	; select bank0
  6359  0B4F  01A2               	clrf	setDimmerLights_Switch@command
  6360  0B50  0864               	movf	Sw_DimmerOffFunc@sw,w
  6361  0B51  319D  25E2  318A   	fcall	_setDimmerLights_Switch
  6362                           
  6363                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6364  0B54  0020               	movlb	0	; select bank0
  6365  0B55  01AA               	clrf	setDelayOff_GO@command
  6366  0B56  01AB               	clrf	setDelayOff_GO@value
  6367  0B57  0864               	movf	Sw_DimmerOffFunc@sw,w
  6368  0B58  3189  21BD  318A   	fcall	_setDelayOff_GO
  6369                           
  6370                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6371  0B5B  0878               	movf	_Sw,w
  6372  0B5C  0086               	movwf	6
  6373  0B5D  0879               	movf	_Sw+1,w
  6374  0B5E  0087               	movwf	7
  6375  0B5F  3000               	movlw	0
  6376  0B60  1B01               	btfsc	1,6
  6377  0B61  3001               	movlw	1
  6378  0B62  0020               	movlb	0	; select bank0
  6379  0B63  00DD               	movwf	setRF_DimmerLights@on
  6380  0B64  0864               	movf	Sw_DimmerOffFunc@sw,w
  6381  0B65  318A  228E  318A   	fcall	_setRF_DimmerLights
  6382                           
  6383                           ;Switch_B1.c: 304: setTxData();
  6384  0B68  3185  252E         	fcall	_setTxData
  6385  0B6A  0008               	return
  6386  0B6B                     __end_of_Sw_DimmerOffFunc:	
  6387                           
  6388                           	psect	text21
  6389  0958                     __ptext21:	
  6390 ;; *************** function _Sw_DimmerAdjFunc *****************
  6391 ;; Defined at:
  6392 ;;		line 311 in file "../src/Switch_B1.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  sw              1    wreg     unsigned char 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  sw              1    9[BANK0 ] unsigned char 
  6397 ;;  Idle            1    8[BANK0 ] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;		None               void
  6400 ;; Registers used:
  6401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;Total ram usage:        6 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    7
  6414 ;; This function calls:
  6415 ;;		_setDimmerLights_AdjGo
  6416 ;;		_setDimmerLights_TriggerAdj
  6417 ;;		_setRFSW_Status
  6418 ;; This function is called by:
  6419 ;;		_setSw_Main
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _Sw_DimmerAdjFunc
  6425  0958                     _Sw_DimmerAdjFunc:	
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6429                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6430  0958  0020               	movlb	0	; select bank0
  6431  0959  00A9               	movwf	Sw_DimmerAdjFunc@sw
  6432                           
  6433                           ;Switch_B1.c: 312: char Idle = 1;
  6434  095A  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  6435  095B  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  6436                           
  6437                           ;Switch_B1.c: 315: if (sw == 1) {
  6438  095C  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6439  095D  3A01               	xorlw	1
  6440  095E  1D03               	skipz
  6441  095F  296B               	goto	l6981
  6442                           
  6443                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6444  0960  01A5               	clrf	_Sw_DimmerAdjFunc$5433
  6445  0961  0023               	movlb	3	; select bank3
  6446  0962  1DCD               	btfss	(_DimmerLights2^(0+384)+8),3
  6447  0963  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6448  0964  2968               	goto	l6979
  6449  0965  0020               	movlb	0	; select bank0
  6450  0966  01A5               	clrf	_Sw_DimmerAdjFunc$5433
  6451  0967  0AA5               	incf	_Sw_DimmerAdjFunc$5433,f
  6452  0968                     l6979:	
  6453  0968  0020               	movlb	0	; select bank0
  6454  0969  0825               	movf	_Sw_DimmerAdjFunc$5433,w
  6455  096A  298C               	goto	L5
  6456  096B                     l6981:	
  6457                           ;Switch_B1.c: 317: } else if (sw == 2) {
  6458                           
  6459  096B  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6460  096C  3A02               	xorlw	2
  6461  096D  1D03               	skipz
  6462  096E  297C               	goto	l6993
  6463                           
  6464                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6465  096F  01A6               	clrf	_Sw_DimmerAdjFunc$5434
  6466  0970  0022               	movlb	2	; select bank2
  6467  0971  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6468  0972  2979               	goto	l6991
  6469  0973  0023               	movlb	3	; select bank3
  6470  0974  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6471  0975  2979               	goto	l6991
  6472  0976  0020               	movlb	0	; select bank0
  6473  0977  01A6               	clrf	_Sw_DimmerAdjFunc$5434
  6474  0978  0AA6               	incf	_Sw_DimmerAdjFunc$5434,f
  6475  0979                     l6991:	
  6476  0979  0020               	movlb	0	; select bank0
  6477  097A  0826               	movf	_Sw_DimmerAdjFunc$5434,w
  6478  097B  298C               	goto	L5
  6479  097C                     l6993:	
  6480                           ;Switch_B1.c: 319: } else if (sw == 3) {
  6481                           
  6482  097C  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6483  097D  3A03               	xorlw	3
  6484  097E  1D03               	skipz
  6485  097F  298F               	goto	l2779
  6486                           
  6487                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6488  0980  01A7               	clrf	_Sw_DimmerAdjFunc$5435
  6489  0981  0022               	movlb	2	; select bank2
  6490  0982  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6491  0983  298A               	goto	l7003
  6492  0984  0023               	movlb	3	; select bank3
  6493  0985  19CD               	btfsc	(_DimmerLights2^(0+384)+8),3
  6494  0986  298A               	goto	l7003
  6495  0987  0020               	movlb	0	; select bank0
  6496  0988  01A7               	clrf	_Sw_DimmerAdjFunc$5435
  6497  0989  0AA7               	incf	_Sw_DimmerAdjFunc$5435,f
  6498  098A                     l7003:	
  6499  098A  0020               	movlb	0	; select bank0
  6500  098B  0827               	movf	_Sw_DimmerAdjFunc$5435,w
  6501  098C                     L5:	
  6502  098C  00A4               	movwf	??_Sw_DimmerAdjFunc
  6503  098D  0824               	movf	??_Sw_DimmerAdjFunc,w
  6504  098E  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  6505  098F                     l2779:	
  6506                           
  6507                           ;Switch_B1.c: 321: }
  6508                           ;Switch_B1.c: 332: if (Idle == 1) {
  6509  098F  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  6510  0990  3A01               	xorlw	1
  6511  0991  1D03               	skipz
  6512  0992  0008               	return
  6513                           
  6514                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6515  0993  0878               	movf	_Sw,w
  6516  0994  0086               	movwf	6
  6517  0995  0879               	movf	_Sw+1,w
  6518  0996  0087               	movwf	7
  6519  0997  1F81               	btfss	1,7
  6520  0998  0008               	return
  6521                           
  6522                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6523  0999  0878               	movf	_Sw,w
  6524  099A  0086               	movwf	6
  6525  099B  0879               	movf	_Sw+1,w
  6526  099C  0087               	movwf	7
  6527  099D  1581               	bsf	1,3
  6528                           
  6529                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6530  099E  0878               	movf	_Sw,w
  6531  099F  0086               	movwf	6
  6532  09A0  0879               	movf	_Sw+1,w
  6533  09A1  0087               	movwf	7
  6534  09A2  3141               	addfsr 1,1
  6535  09A3  1401               	bsf	1,0
  6536                           
  6537                           ;Switch_B1.c: 336: Sw->Status = 1;
  6538  09A4  0878               	movf	_Sw,w
  6539  09A5  0086               	movwf	6
  6540  09A6  0879               	movf	_Sw+1,w
  6541  09A7  0087               	movwf	7
  6542  09A8  1701               	bsf	1,6
  6543                           
  6544                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6545  09A9  01A2               	clrf	setRFSW_Status@command
  6546  09AA  0AA2               	incf	setRFSW_Status@command,f
  6547  09AB  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6548  09AC  319D  2579  3189   	fcall	_setRFSW_Status
  6549                           
  6550                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6551  09AF  0020               	movlb	0	; select bank0
  6552  09B0  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6553  09B1  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6554  09B2  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6555  09B3  319E  2632  3189   	fcall	_setDimmerLights_TriggerAdj
  6556                           
  6557                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6558  09B6  0020               	movlb	0	; select bank0
  6559  09B7  01A2               	clrf	setDimmerLights_AdjGo@command
  6560  09B8  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6561  09B9  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6562  09BA  319E  2622         	fcall	_setDimmerLights_AdjGo
  6563  09BC  0008               	return
  6564  09BD                     __end_of_Sw_DimmerAdjFunc:	
  6565                           
  6566                           	psect	text22
  6567  1E32                     __ptext22:	
  6568 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6569 ;; Defined at:
  6570 ;;		line 711 in file "../src/Dimmer_B1.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  lights          1    wreg     unsigned char 
  6573 ;;  command         1    2[BANK0 ] unsigned char 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  lights          1    3[BANK0 ] unsigned char 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6585 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;Total ram usage:        2 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    6
  6592 ;; This function calls:
  6593 ;;		_DimmerLightsPointSelect
  6594 ;; This function is called by:
  6595 ;;		_Sw_DimmerOffFunc
  6596 ;;		_Sw_DimmerAdjFunc
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           
  6601                           ;psect for function _setDimmerLights_TriggerAdj
  6602  1E32                     _setDimmerLights_TriggerAdj:	
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6606                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6607  1E32  0020               	movlb	0	; select bank0
  6608  1E33  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6609                           
  6610                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6611  1E34  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6612  1E35  319F  276F         	fcall	_DimmerLightsPointSelect
  6613                           
  6614                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6615  1E37  087B               	movf	_DimmerLights,w
  6616  1E38  3E08               	addlw	8
  6617  1E39  0086               	movwf	6
  6618  1E3A  3001               	movlw	1	; select bank2/3
  6619  1E3B  0087               	movwf	7
  6620  1E3C  0020               	movlb	0	; select bank0
  6621  1E3D  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6622  1E3E  1201               	bcf	1,4
  6623  1E3F  1D03               	skipz
  6624  1E40  1601               	bsf	1,4
  6625  1E41  0008               	return
  6626  1E42                     __end_of_setDimmerLights_TriggerAdj:	
  6627                           
  6628                           	psect	text23
  6629  1E22                     __ptext23:	
  6630 ;; *************** function _setDimmerLights_AdjGo *****************
  6631 ;; Defined at:
  6632 ;;		line 699 in file "../src/Dimmer_B1.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  lights          1    wreg     unsigned char 
  6635 ;;  command         1    2[BANK0 ] unsigned char 
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  lights          1    3[BANK0 ] unsigned char 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;		None               void
  6640 ;; Registers used:
  6641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6647 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;Total ram usage:        2 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    6
  6654 ;; This function calls:
  6655 ;;		_DimmerLightsPointSelect
  6656 ;; This function is called by:
  6657 ;;		_Sw_DimmerOffFunc
  6658 ;;		_Sw_DimmerAdjFunc
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _setDimmerLights_AdjGo
  6664  1E22                     _setDimmerLights_AdjGo:	
  6665                           
  6666                           ;incstack = 0
  6667                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6668                           ;setDimmerLights_AdjGo@lights stored from wreg
  6669  1E22  0020               	movlb	0	; select bank0
  6670  1E23  00A3               	movwf	setDimmerLights_AdjGo@lights
  6671                           
  6672                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6673  1E24  0823               	movf	setDimmerLights_AdjGo@lights,w
  6674  1E25  319F  276F         	fcall	_DimmerLightsPointSelect
  6675                           
  6676                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6677  1E27  087B               	movf	_DimmerLights,w
  6678  1E28  3E08               	addlw	8
  6679  1E29  0086               	movwf	6
  6680  1E2A  3001               	movlw	1	; select bank2/3
  6681  1E2B  0087               	movwf	7
  6682  1E2C  0020               	movlb	0	; select bank0
  6683  1E2D  0822               	movf	setDimmerLights_AdjGo@command,w
  6684  1E2E  1181               	bcf	1,3
  6685  1E2F  1D03               	skipz
  6686  1E30  1581               	bsf	1,3
  6687  1E31  0008               	return
  6688  1E32                     __end_of_setDimmerLights_AdjGo:	
  6689                           
  6690                           	psect	text24
  6691  1E53                     __ptext24:	
  6692 ;; *************** function _Switch_Initialization *****************
  6693 ;; Defined at:
  6694 ;;		line 41 in file "../src/Switch_B1.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;		None               void
  6701 ;; Registers used:
  6702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;Total ram usage:        0 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    8
  6715 ;; This function calls:
  6716 ;;		_TouchPower
  6717 ;;		_setSw_Initialization
  6718 ;; This function is called by:
  6719 ;;		_main
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           
  6724                           ;psect for function _Switch_Initialization
  6725  1E53                     _Switch_Initialization:	
  6726                           
  6727                           ;Switch_B1.c: 42: TouchPower();
  6728                           
  6729                           ;incstack = 0
  6730                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6731  1E53  319D  25C4  319E   	fcall	_TouchPower
  6732                           
  6733                           ;Switch_B1.c: 44: WPUB1 = 0;
  6734  1E56  0024               	movlb	4	; select bank4
  6735  1E57  108D               	bcf	13,1	;volatile
  6736                           
  6737                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6738  1E58  3001               	movlw	1
  6739  1E59  319C  24EA  319E   	fcall	_setSw_Initialization
  6740                           
  6741                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6742  1E5C  3002               	movlw	2
  6743  1E5D  319C  24EA  319E   	fcall	_setSw_Initialization
  6744                           
  6745                           ;Switch_B1.c: 61: setSw_Initialization(3);
  6746  1E60  3003               	movlw	3
  6747  1E61  319C  24EA         	fcall	_setSw_Initialization
  6748  1E63  0008               	return
  6749  1E64                     __end_of_Switch_Initialization:	
  6750                           
  6751                           	psect	text25
  6752  1CEA                     __ptext25:	
  6753 ;; *************** function _setSw_Initialization *****************
  6754 ;; Defined at:
  6755 ;;		line 83 in file "../src/Switch_B1.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;  sw              1    wreg     unsigned char 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  sw              1    3[BANK0 ] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;		None               void
  6762 ;; Registers used:
  6763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;Total ram usage:        1 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    7
  6776 ;; This function calls:
  6777 ;;		_setLED
  6778 ;; This function is called by:
  6779 ;;		_Switch_Initialization
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function _setSw_Initialization
  6785  1CEA                     _setSw_Initialization:	
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6789                           ;setSw_Initialization@sw stored from wreg
  6790  1CEA  0020               	movlb	0	; select bank0
  6791  1CEB  00A3               	movwf	setSw_Initialization@sw
  6792                           
  6793                           ;Switch_B1.c: 84: setLED(sw, 1);
  6794  1CEC  01A1               	clrf	setLED@command
  6795  1CED  0AA1               	incf	setLED@command,f
  6796  1CEE  0823               	movf	setSw_Initialization@sw,w
  6797  1CEF  318B  236B         	fcall	_setLED
  6798  1CF1  0008               	return
  6799  1CF2                     __end_of_setSw_Initialization:	
  6800                           
  6801                           	psect	text26
  6802  1DC4                     __ptext26:	
  6803 ;; *************** function _TouchPower *****************
  6804 ;; Defined at:
  6805 ;;		line 10 in file "../src/Switch_B1.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;		None
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;		None
  6810 ;; Return value:  Size  Location     Type
  6811 ;;		None               void
  6812 ;; Registers used:
  6813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;Total ram usage:        0 bytes
  6824 ;; Hardware stack levels used:    1
  6825 ;; Hardware stack levels required when called:    6
  6826 ;; This function calls:
  6827 ;;		_Timeout_Counter
  6828 ;;		_set_TimeoutCleared
  6829 ;; This function is called by:
  6830 ;;		_Switch_Initialization
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _TouchPower
  6836  1DC4                     _TouchPower:	
  6837                           
  6838                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6842  1DC4  2DCA               	goto	l7593
  6843  1DC5                     l2697:	
  6844                           
  6845                           ;Switch_B1.c: 12: RC5 = 1;
  6846  1DC5  0020               	movlb	0	; select bank0
  6847  1DC6  168E               	bsf	14,5	;volatile
  6848                           
  6849                           ;Switch_B1.c: 13: Timeout_Counter();
  6850  1DC7  319E  26B0  319D   	fcall	_Timeout_Counter
  6851  1DCA                     l7593:	
  6852  1DCA  0020               	movlb	0	; select bank0
  6853  1DCB  1A8E               	btfsc	14,5	;volatile
  6854  1DCC  2DD0               	goto	l7597
  6855  1DCD  0021               	movlb	1	; select bank1
  6856  1DCE  1D2F               	btfss	(_myMain^(0+128)+15),2
  6857  1DCF  2DC5               	goto	l2697
  6858  1DD0                     l7597:	
  6859                           
  6860                           ;Switch_B1.c: 14: }
  6861                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6862  1DD0  319C  24BC         	fcall	_set_TimeoutCleared
  6863  1DD2  0008               	return
  6864  1DD3                     __end_of_TouchPower:	
  6865                           
  6866                           	psect	text27
  6867  1CA0                     __ptext27:	
  6868 ;; *************** function _RF_Main *****************
  6869 ;; Defined at:
  6870 ;;		line 16 in file "../src/RF_Control_B1.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:   14
  6891 ;; This function calls:
  6892 ;;		_setRF_Main
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           
  6899                           ;psect for function _RF_Main
  6900  1CA0                     _RF_Main:	
  6901                           
  6902                           ;RF_Control_B1.c: 18: setRF_Main();
  6903                           
  6904                           ;incstack = 0
  6905                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6906  1CA0  318A  2223         	fcall	_setRF_Main
  6907  1CA2  0008               	return
  6908  1CA3                     __end_of_RF_Main:	
  6909                           
  6910                           	psect	text28
  6911  0A23                     __ptext28:	
  6912 ;; *************** function _setRF_Main *****************
  6913 ;; Defined at:
  6914 ;;		line 51 in file "../src/RF_Control_B1.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;		None
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  Receive_OK      1    0        unsigned char 
  6919 ;;  loop_f          1    0        unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;Total ram usage:        2 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:   13
  6936 ;; This function calls:
  6937 ;;		_CC2500_RxData
  6938 ;;		_CC2500_TxData
  6939 ;;		_CC2500_WriteCommand
  6940 ;;		_RF_RxDisable
  6941 ;;		_getBuz_GO
  6942 ;;		_getRxData
  6943 ;; This function is called by:
  6944 ;;		_RF_Main
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           
  6949                           ;psect for function _setRF_Main
  6950  0A23                     _setRF_Main:	
  6951                           
  6952                           ;RF_Control_B1.c: 52: char loop_f, Receive_OK;
  6953                           ;RF_Control_B1.c: 53: if (RF1.Enable == 1) {
  6954                           
  6955                           ;incstack = 0
  6956                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6957  0A23  0021               	movlb	1	; select bank1
  6958  0A24  1C3E               	btfss	_RF1^(0+128),0
  6959  0A25  0008               	return
  6960                           
  6961                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6962  0A26  319E  2642  318A   	fcall	_getBuz_GO
  6963  0A29  0020               	movlb	0	; select bank0
  6964  0A2A  0821               	movf	?_getBuz_GO+1,w
  6965  0A2B  0420               	iorwf	?_getBuz_GO,w
  6966  0A2C  1D03               	skipz
  6967  0A2D  0008               	return
  6968                           
  6969                           ;RF_Control_B1.c: 58: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  6970  0A2E  01E8               	clrf	_setRF_Main$4557
  6971  0A2F  0AE8               	incf	_setRF_Main$4557,f
  6972  0A30  1C0C               	btfss	12,0	;volatile
  6973  0A31  1B0C               	btfsc	12,6	;volatile
  6974  0A32  2A35               	goto	l8449
  6975  0A33  1E0C               	btfss	12,4	;volatile
  6976  0A34  01E8               	clrf	_setRF_Main$4557
  6977  0A35                     l8449:	
  6978  0A35  0868               	movf	_setRF_Main$4557,w
  6979  0A36  0021               	movlb	1	; select bank1
  6980  0A37  13BE               	bcf	_RF1^(0+128),7
  6981  0A38  1D03               	skipz
  6982  0A39  17BE               	bsf	_RF1^(0+128),7
  6983                           
  6984                           ;RF_Control_B1.c: 68: if (RF1.Key == 1 && RF1.Learn == 0) {
  6985  0A3A  1BBE               	btfsc	_RF1^(0+128),7
  6986  0A3B  1B3E               	btfsc	_RF1^(0+128),6
  6987  0A3C  2A41               	goto	l2260
  6988                           
  6989                           ;RF_Control_B1.c: 69: RF1.Run = 1;
  6990  0A3D  14BF               	bsf	(_RF1^(0+128)+1),1
  6991                           
  6992                           ;RF_Control_B1.c: 70: RF_RxDisable();
  6993  0A3E  319D  25B5         	fcall	_RF_RxDisable
  6994                           
  6995                           ;RF_Control_B1.c: 71: } else {
  6996  0A40  0008               	return
  6997  0A41                     l2260:	
  6998                           
  6999                           ;RF_Control_B1.c: 72: if (RF1.Run == 1 && RF1.Learn == 0) {
  7000  0A41  18BF               	btfsc	(_RF1^(0+128)+1),1
  7001  0A42  1B3E               	btfsc	_RF1^(0+128),6
  7002  0A43  2A51               	goto	l8469
  7003                           
  7004                           ;RF_Control_B1.c: 73: RF1.Count++;
  7005  0A44  3001               	movlw	1
  7006  0A45  0020               	movlb	0	; select bank0
  7007  0A46  00E7               	movwf	??_setRF_Main
  7008  0A47  0867               	movf	??_setRF_Main,w
  7009  0A48  0021               	movlb	1	; select bank1
  7010  0A49  07C1               	addwf	(_RF1^(0+128)+3),f
  7011                           
  7012                           ;RF_Control_B1.c: 74: if (RF1.Count == 20) {
  7013  0A4A  0841               	movf	(_RF1^(0+128)+3),w
  7014  0A4B  3A14               	xorlw	20
  7015  0A4C  1D03               	skipz
  7016  0A4D  0008               	return
  7017                           
  7018                           ;RF_Control_B1.c: 75: RF1.Count = 0;
  7019  0A4E  01C1               	clrf	(_RF1^(0+128)+3)
  7020                           
  7021                           ;RF_Control_B1.c: 76: RF1.Run = 0;
  7022  0A4F  10BF               	bcf	(_RF1^(0+128)+1),1
  7023                           
  7024                           ;RF_Control_B1.c: 77: }
  7025                           ;RF_Control_B1.c: 78: } else {
  7026  0A50  0008               	return
  7027  0A51                     l8469:	
  7028                           
  7029                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7030  0A51  01C1               	clrf	(_RF1^(0+128)+3)
  7031                           
  7032                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  7033  0A52  10BF               	bcf	(_RF1^(0+128)+1),1
  7034                           
  7035                           ;RF_Control_B1.c: 82: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7036  0A53  193E               	btfsc	_RF1^(0+128),2
  7037  0A54  1B3E               	btfsc	_RF1^(0+128),6
  7038  0A55  2A68               	goto	l2265
  7039                           
  7040                           ;RF_Control_B1.c: 83: RF1.TransceiveGO = 0;
  7041  0A56  113E               	bcf	_RF1^(0+128),2
  7042                           
  7043                           ;RF_Control_B1.c: 84: RF1.RxStatus = 0;
  7044  0A57  11BE               	bcf	_RF1^(0+128),3
  7045                           
  7046                           ;RF_Control_B1.c: 85: RF1.ReceiveGO = 0;
  7047  0A58  10BE               	bcf	_RF1^(0+128),1
  7048                           
  7049                           ;RF_Control_B1.c: 87: CC2500_WriteCommand(0x36);
  7050  0A59  3036               	movlw	54
  7051  0A5A  319F  273B  318A   	fcall	_CC2500_WriteCommand
  7052                           
  7053                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  7054  0A5D  303B               	movlw	59
  7055  0A5E  319F  273B  318A   	fcall	_CC2500_WriteCommand
  7056                           
  7057                           ;RF_Control_B1.c: 89: CC2500_WriteCommand(0x3A);
  7058  0A61  303A               	movlw	58
  7059  0A62  319F  273B  318A   	fcall	_CC2500_WriteCommand
  7060                           
  7061                           ;RF_Control_B1.c: 90: CC2500_TxData();
  7062  0A65  3188  20F4         	fcall	_CC2500_TxData
  7063                           
  7064                           ;RF_Control_B1.c: 92: } else {
  7065  0A67  0008               	return
  7066  0A68                     l2265:	
  7067                           
  7068                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1) {
  7069  0A68  1DBE               	btfss	_RF1^(0+128),3
  7070  0A69  2A79               	goto	l2267
  7071                           
  7072                           ;RF_Control_B1.c: 95: CC2500_RxData();
  7073  0A6A  318C  24D2  318A   	fcall	_CC2500_RxData
  7074                           
  7075                           ;RF_Control_B1.c: 96: if (RF1.ReceiveGO == 1) {
  7076  0A6D  0021               	movlb	1	; select bank1
  7077  0A6E  1CBE               	btfss	_RF1^(0+128),1
  7078  0A6F  0008               	return
  7079                           
  7080                           ;RF_Control_B1.c: 97: RF1.ReceiveGO = 0;
  7081  0A70  10BE               	bcf	_RF1^(0+128),1
  7082                           
  7083                           ;RF_Control_B1.c: 104: getRxData();
  7084  0A71  3195  2583         	fcall	_getRxData
  7085                           
  7086                           ;RF_Control_B1.c: 106: RF1.Run = 1;
  7087  0A73  0021               	movlb	1	; select bank1
  7088  0A74  14BF               	bsf	(_RF1^(0+128)+1),1
  7089                           
  7090                           ;RF_Control_B1.c: 107: RB5 = RB5 == 1 ? 0 : 1;
  7091  0A75  3020               	movlw	32
  7092  0A76  0020               	movlb	0	; select bank0
  7093  0A77  068D               	xorwf	13,f
  7094                           
  7095                           ;RF_Control_B1.c: 108: }
  7096                           ;RF_Control_B1.c: 109: } else {
  7097  0A78  0008               	return
  7098  0A79                     l2267:	
  7099                           
  7100                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7101  0A79  19BE               	btfsc	_RF1^(0+128),3
  7102  0A7A  0008               	return
  7103  0A7B  18BE               	btfsc	_RF1^(0+128),1
  7104  0A7C  0008               	return
  7105                           
  7106                           ;RF_Control_B1.c: 112: RF1.RxStatus = 1;
  7107  0A7D  15BE               	bsf	_RF1^(0+128),3
  7108                           
  7109                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x36);
  7110  0A7E  3036               	movlw	54
  7111  0A7F  319F  273B  318A   	fcall	_CC2500_WriteCommand
  7112                           
  7113                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x3B);
  7114  0A82  303B               	movlw	59
  7115  0A83  319F  273B  318A   	fcall	_CC2500_WriteCommand
  7116                           
  7117                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x3A);
  7118  0A86  303A               	movlw	58
  7119  0A87  319F  273B  318A   	fcall	_CC2500_WriteCommand
  7120                           
  7121                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x34);
  7122  0A8A  3034               	movlw	52
  7123  0A8B  319F  273B         	fcall	_CC2500_WriteCommand
  7124  0A8D  0008               	return
  7125  0A8E                     __end_of_setRF_Main:	
  7126                           
  7127                           	psect	text29
  7128  1583                     __ptext29:	
  7129 ;; *************** function _getRxData *****************
  7130 ;; Defined at:
  7131 ;;		line 201 in file "../src/RF_Control_B1.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;		None               void
  7138 ;; Registers used:
  7139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;Total ram usage:        0 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:   12
  7152 ;; This function calls:
  7153 ;;		_setControl_Lights_Table
  7154 ;;		_setLog_Code
  7155 ;; This function is called by:
  7156 ;;		_setRF_Main
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _getRxData
  7162  1583                     _getRxData:	
  7163                           
  7164                           ;RF_Control_B1.c: 202: if (RF1.Learn == 1) {
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7168  1583  0021               	movlb	1	; select bank1
  7169  1584  1F3E               	btfss	_RF1^(0+128),6
  7170  1585  2D91               	goto	l8257
  7171                           
  7172                           ;RF_Control_B1.c: 203: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7173  1586  0022               	movlb	2	; select bank2
  7174  1587  08A0               	movf	_RF_Data^(0+256),f
  7175  1588  1D03               	skipz
  7176  1589  0008               	return
  7177  158A  0821               	movf	(_RF_Data^(0+256)+1),w
  7178  158B  3A64               	xorlw	100
  7179  158C  1D03               	skipz
  7180  158D  0008               	return
  7181                           
  7182                           ;RF_Control_B1.c: 204: {
  7183                           ;RF_Control_B1.c: 205: setLog_Code();
  7184  158E  3193  2351         	fcall	_setLog_Code
  7185                           
  7186                           ;RF_Control_B1.c: 206: }
  7187                           ;RF_Control_B1.c: 207: } else {
  7188  1590  0008               	return
  7189  1591                     l8257:	
  7190                           
  7191                           ;RF_Control_B1.c: 208: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7192  1591  0022               	movlb	2	; select bank2
  7193  1592  08A0               	movf	_RF_Data^(0+256),f
  7194  1593  1D03               	skipz
  7195  1594  0008               	return
  7196  1595  0821               	movf	(_RF_Data^(0+256)+1),w
  7197  1596  3A02               	xorlw	2
  7198  1597  1D03               	skipz
  7199  1598  0008               	return
  7200                           
  7201                           ;RF_Control_B1.c: 209: {
  7202                           ;RF_Control_B1.c: 210: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7203  1599  082C               	movf	(_RF_Data^(0+256)+12),w
  7204  159A  3AFF               	xorlw	255
  7205  159B  1D03               	skipz
  7206  159C  2DA7               	goto	l8269
  7207  159D  082D               	movf	(_RF_Data^(0+256)+13),w
  7208  159E  3AFF               	xorlw	255
  7209  159F  1D03               	skipz
  7210  15A0  2DA7               	goto	l8269
  7211  15A1  082E               	movf	(_RF_Data^(0+256)+14),w
  7212  15A2  3AFF               	xorlw	255
  7213  15A3  1D03               	skipz
  7214  15A4  2DA7               	goto	l8269
  7215                           
  7216                           ;RF_Control_B1.c: 211: __nop();
  7217  15A5  0000               	nop
  7218                           
  7219                           ;RF_Control_B1.c: 212: } else {
  7220  15A6  0008               	return
  7221  15A7                     l8269:	
  7222                           
  7223                           ;RF_Control_B1.c: 213: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7224  15A7  0020               	movlb	0	; select bank0
  7225  15A8  086F               	movf	_product,w
  7226  15A9  3E0C               	addlw	12
  7227  15AA  0086               	movwf	6
  7228  15AB  3002               	movlw	2	; select bank4/5
  7229  15AC  0087               	movwf	7
  7230  15AD  0022               	movlb	2	; select bank2
  7231  15AE  082C               	movf	(_RF_Data^(0+256)+12),w
  7232  15AF  0601               	xorwf	1,w
  7233  15B0  1D03               	skipz
  7234  15B1  0008               	return
  7235  15B2  0020               	movlb	0	; select bank0
  7236  15B3  086F               	movf	_product,w
  7237  15B4  3E0D               	addlw	13
  7238  15B5  0086               	movwf	6
  7239  15B6  3002               	movlw	2	; select bank4/5
  7240  15B7  0087               	movwf	7
  7241  15B8  0022               	movlb	2	; select bank2
  7242  15B9  082D               	movf	(_RF_Data^(0+256)+13),w
  7243  15BA  0601               	xorwf	1,w
  7244  15BB  1D03               	skipz
  7245  15BC  0008               	return
  7246  15BD  0020               	movlb	0	; select bank0
  7247  15BE  086F               	movf	_product,w
  7248  15BF  3E0E               	addlw	14
  7249  15C0  0086               	movwf	6
  7250  15C1  3002               	movlw	2	; select bank4/5
  7251  15C2  0087               	movwf	7
  7252  15C3  0022               	movlb	2	; select bank2
  7253  15C4  082E               	movf	(_RF_Data^(0+256)+14),w
  7254  15C5  0601               	xorwf	1,w
  7255  15C6  1D03               	skipz
  7256  15C7  0008               	return
  7257                           
  7258                           ;RF_Control_B1.c: 214: setControl_Lights_Table();
  7259  15C8  3186  269B         	fcall	_setControl_Lights_Table
  7260                           
  7261                           ;RF_Control_B1.c: 221: {
  7262                           ;RF_Control_B1.c: 222: ;
  7263                           
  7264                           ;RF_Control_B1.c: 218: {
  7265                           ;RF_Control_B1.c: 219: ;
  7266                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7267                           
  7268                           ;RF_Control_B1.c: 215: }
  7269                           ;RF_Control_B1.c: 216: }
  7270                           ;RF_Control_B1.c: 217: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7271  15CA  0008               	return
  7272  15CB                     __end_of_getRxData:	
  7273                           
  7274                           	psect	text30
  7275  1351                     __ptext30:	
  7276 ;; *************** function _setLog_Code *****************
  7277 ;; Defined at:
  7278 ;;		line 232 in file "../src/RF_Control_B1.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;Total ram usage:        1 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    7
  7299 ;; This function calls:
  7300 ;;		_setBuz
  7301 ;; This function is called by:
  7302 ;;		_getRxData
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _setLog_Code
  7308  1351                     _setLog_Code:	
  7309                           
  7310                           ;RF_Control_B1.c: 233: product->Data[12]=RF_Data[12];
  7311                           
  7312                           ;incstack = 0
  7313                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7314  1351  0022               	movlb	2	; select bank2
  7315  1352  082C               	movf	(_RF_Data^(0+256)+12),w
  7316  1353  0020               	movlb	0	; select bank0
  7317  1354  00AD               	movwf	??_setLog_Code
  7318  1355  086F               	movf	_product,w
  7319  1356  3E0C               	addlw	12
  7320  1357  0086               	movwf	6
  7321  1358  3002               	movlw	2	; select bank4/5
  7322  1359  0087               	movwf	7
  7323  135A  082D               	movf	??_setLog_Code,w
  7324  135B  0081               	movwf	1
  7325                           
  7326                           ;RF_Control_B1.c: 234: product->Data[13]=RF_Data[13];
  7327  135C  0022               	movlb	2	; select bank2
  7328  135D  082D               	movf	(_RF_Data^(0+256)+13),w
  7329  135E  0020               	movlb	0	; select bank0
  7330  135F  00AD               	movwf	??_setLog_Code
  7331  1360  086F               	movf	_product,w
  7332  1361  3E0D               	addlw	13
  7333  1362  0086               	movwf	6
  7334  1363  3002               	movlw	2	; select bank4/5
  7335  1364  0087               	movwf	7
  7336  1365  082D               	movf	??_setLog_Code,w
  7337  1366  0081               	movwf	1
  7338                           
  7339                           ;RF_Control_B1.c: 235: product->Data[14]=RF_Data[14];
  7340  1367  0022               	movlb	2	; select bank2
  7341  1368  082E               	movf	(_RF_Data^(0+256)+14),w
  7342  1369  0020               	movlb	0	; select bank0
  7343  136A  00AD               	movwf	??_setLog_Code
  7344  136B  086F               	movf	_product,w
  7345  136C  3E0E               	addlw	14
  7346  136D  0086               	movwf	6
  7347  136E  3002               	movlw	2	; select bank4/5
  7348  136F  0087               	movwf	7
  7349  1370  082D               	movf	??_setLog_Code,w
  7350  1371  0081               	movwf	1
  7351                           
  7352                           ;RF_Control_B1.c: 236: setBuz(1, 100);
  7353  1372  3064               	movlw	100
  7354  1373  00A9               	movwf	setBuz@time
  7355  1374  3000               	movlw	0
  7356  1375  00AA               	movwf	setBuz@time+1
  7357  1376  3001               	movlw	1
  7358  1377  3197  27A7  3193   	fcall	_setBuz
  7359                           
  7360                           ;RF_Control_B1.c: 237: RF1.Learn = 0;
  7361  137A  0021               	movlb	1	; select bank1
  7362  137B  133E               	bcf	_RF1^(0+128),6
  7363                           
  7364                           ;RF_Control_B1.c: 238: if (myMain.First) {
  7365  137C  1FA0               	btfss	_myMain^(0+128),7
  7366  137D  2B80               	goto	l2301
  7367                           
  7368                           ;RF_Control_B1.c: 239: Memory.LoopSave=1;
  7369  137E  0023               	movlb	3	; select bank3
  7370  137F  1544               	bsf	(_Memory^(0+384)+36),2
  7371  1380                     l2301:	
  7372                           
  7373                           ;RF_Control_B1.c: 240: }
  7374                           ;RF_Control_B1.c: 241: Memory.Modify=1;
  7375  1380  0023               	movlb	3	; select bank3
  7376  1381  1444               	bsf	(_Memory^(0+384)+36),0
  7377  1382  0008               	return
  7378  1383                     __end_of_setLog_Code:	
  7379                           
  7380                           	psect	text31
  7381  069B                     __ptext31:	
  7382 ;; *************** function _setControl_Lights_Table *****************
  7383 ;; Defined at:
  7384 ;;		line 245 in file "../src/RF_Control_B1.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;		None               void
  7391 ;; Registers used:
  7392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;Total ram usage:        0 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:   11
  7405 ;; This function calls:
  7406 ;;		_setBuz
  7407 ;;		_setDimmerLights
  7408 ;;		_setRFSW_AdjControl
  7409 ;;		_setRFSW_Control
  7410 ;;		_setRFSW_Status
  7411 ;;		_setSw_Status
  7412 ;;		_setTxData
  7413 ;; This function is called by:
  7414 ;;		_getRxData
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _setControl_Lights_Table
  7420  069B                     _setControl_Lights_Table:	
  7421                           
  7422                           ;RF_Control_B1.c: 246: if (RF_Data[15] == 0x00) {
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7426  069B  0022               	movlb	2	; select bank2
  7427  069C  08AF               	movf	(_RF_Data^(0+256)+15),f
  7428  069D  1D03               	skipz
  7429  069E  2EF9               	goto	l8207
  7430                           
  7431                           ;RF_Control_B1.c: 248: setDimmerLights(1, 0);
  7432  069F  0020               	movlb	0	; select bank0
  7433  06A0  01A3               	clrf	setDimmerLights@status
  7434  06A1  3001               	movlw	1
  7435  06A2  318D  2551  3186   	fcall	_setDimmerLights
  7436                           
  7437                           ;RF_Control_B1.c: 249: setRFSW_Status(1, 0);
  7438  06A5  0020               	movlb	0	; select bank0
  7439  06A6  01A2               	clrf	setRFSW_Status@command
  7440  06A7  3001               	movlw	1
  7441  06A8  319D  2579  3186   	fcall	_setRFSW_Status
  7442                           
  7443                           ;RF_Control_B1.c: 250: setSw_Status(1, 0);
  7444  06AB  0020               	movlb	0	; select bank0
  7445  06AC  01A1               	clrf	setSw_Status@command
  7446  06AD  3001               	movlw	1
  7447  06AE  319D  2588  3186   	fcall	_setSw_Status
  7448                           
  7449                           ;RF_Control_B1.c: 253: setDimmerLights(2, 0);
  7450  06B1  0020               	movlb	0	; select bank0
  7451  06B2  01A3               	clrf	setDimmerLights@status
  7452  06B3  3002               	movlw	2
  7453  06B4  318D  2551  3186   	fcall	_setDimmerLights
  7454                           
  7455                           ;RF_Control_B1.c: 254: setRFSW_Status(2, 0);
  7456  06B7  0020               	movlb	0	; select bank0
  7457  06B8  01A2               	clrf	setRFSW_Status@command
  7458  06B9  3002               	movlw	2
  7459  06BA  319D  2579  3186   	fcall	_setRFSW_Status
  7460                           
  7461                           ;RF_Control_B1.c: 255: setSw_Status(2, 0);
  7462  06BD  0020               	movlb	0	; select bank0
  7463  06BE  01A1               	clrf	setSw_Status@command
  7464  06BF  3002               	movlw	2
  7465  06C0  319D  2588  3186   	fcall	_setSw_Status
  7466                           
  7467                           ;RF_Control_B1.c: 258: setDimmerLights(3, 0);
  7468  06C3  0020               	movlb	0	; select bank0
  7469  06C4  01A3               	clrf	setDimmerLights@status
  7470  06C5  3003               	movlw	3
  7471  06C6  318D  2551  3186   	fcall	_setDimmerLights
  7472                           
  7473                           ;RF_Control_B1.c: 259: setRFSW_Status(3, 0);
  7474  06C9  0020               	movlb	0	; select bank0
  7475  06CA  01A2               	clrf	setRFSW_Status@command
  7476  06CB  3003               	movlw	3
  7477  06CC  319D  2579  3186   	fcall	_setRFSW_Status
  7478                           
  7479                           ;RF_Control_B1.c: 260: setSw_Status(3, 0);
  7480  06CF  0020               	movlb	0	; select bank0
  7481  06D0  01A1               	clrf	setSw_Status@command
  7482  06D1  3003               	movlw	3
  7483  06D2  319D  2588  3186   	fcall	_setSw_Status
  7484                           
  7485                           ;RF_Control_B1.c: 263: product->Data[9]=0;
  7486  06D5  0020               	movlb	0	; select bank0
  7487  06D6  086F               	movf	_product,w
  7488  06D7  3E09               	addlw	9
  7489  06D8  0086               	movwf	6
  7490  06D9  3002               	movlw	2	; select bank4/5
  7491  06DA  0087               	movwf	7
  7492  06DB  0181               	clrf	1
  7493                           
  7494                           ;RF_Control_B1.c: 264: product->Data[11]=0;
  7495  06DC  086F               	movf	_product,w
  7496  06DD  3E0B               	addlw	11
  7497  06DE  0086               	movwf	6
  7498  06DF  3002               	movlw	2	; select bank4/5
  7499  06E0  0087               	movwf	7
  7500  06E1  0181               	clrf	1
  7501                           
  7502                           ;RF_Control_B1.c: 265: product->Data[15]=0;
  7503  06E2  086F               	movf	_product,w
  7504  06E3  3E0F               	addlw	15
  7505  06E4  0086               	movwf	6
  7506  06E5  3002               	movlw	2	; select bank4/5
  7507  06E6  0087               	movwf	7
  7508  06E7  0181               	clrf	1
  7509                           
  7510                           ;RF_Control_B1.c: 266: product->Data[17]=0;
  7511  06E8  086F               	movf	_product,w
  7512  06E9  3E11               	addlw	17
  7513  06EA  0086               	movwf	6
  7514  06EB  3002               	movlw	2	; select bank4/5
  7515  06EC  0087               	movwf	7
  7516  06ED  0181               	clrf	1
  7517                           
  7518                           ;RF_Control_B1.c: 267: setBuz(1, 100);
  7519  06EE  3064               	movlw	100
  7520  06EF  00A9               	movwf	setBuz@time
  7521  06F0  3000               	movlw	0
  7522  06F1  00AA               	movwf	setBuz@time+1
  7523  06F2  3001               	movlw	1
  7524  06F3  3197  27A7  3186   	fcall	_setBuz
  7525                           
  7526                           ;RF_Control_B1.c: 268: setTxData();
  7527  06F6  3185  252E         	fcall	_setTxData
  7528                           
  7529                           ;RF_Control_B1.c: 269: } else if (RF_Data[15] == 0x20) {
  7530  06F8  0008               	return
  7531  06F9                     l8207:	
  7532  06F9  0022               	movlb	2	; select bank2
  7533  06FA  082F               	movf	(_RF_Data^(0+256)+15),w
  7534  06FB  3A20               	xorlw	32
  7535  06FC  1D03               	skipz
  7536  06FD  2F14               	goto	l8213
  7537                           
  7538                           ;RF_Control_B1.c: 270: product->Data[9]=0;
  7539  06FE  0020               	movlb	0	; select bank0
  7540  06FF  086F               	movf	_product,w
  7541  0700  3E09               	addlw	9
  7542  0701  0086               	movwf	6
  7543  0702  3002               	movlw	2	; select bank4/5
  7544  0703  0087               	movwf	7
  7545  0704  0181               	clrf	1
  7546                           
  7547                           ;RF_Control_B1.c: 271: product->Data[11]=0;
  7548  0705  086F               	movf	_product,w
  7549  0706  3E0B               	addlw	11
  7550  0707  0086               	movwf	6
  7551  0708  3002               	movlw	2	; select bank4/5
  7552  0709  0087               	movwf	7
  7553  070A  0181               	clrf	1
  7554                           
  7555                           ;RF_Control_B1.c: 272: product->Data[17]=0;
  7556  070B  086F               	movf	_product,w
  7557  070C  3E11               	addlw	17
  7558  070D  0086               	movwf	6
  7559  070E  3002               	movlw	2	; select bank4/5
  7560  070F  0087               	movwf	7
  7561  0710  0181               	clrf	1
  7562                           
  7563                           ;RF_Control_B1.c: 273: setTxData();
  7564  0711  3185  252E         	fcall	_setTxData
  7565                           
  7566                           ;RF_Control_B1.c: 274: }
  7567  0713  0008               	return
  7568  0714                     l8213:	
  7569                           
  7570                           ;RF_Control_B1.c: 276: else if (RF_Data[15] == 0x01) {
  7571  0714  0022               	movlb	2	; select bank2
  7572  0715  082F               	movf	(_RF_Data^(0+256)+15),w
  7573  0716  3A01               	xorlw	1
  7574  0717  1D03               	skipz
  7575  0718  2F1D               	goto	l8217
  7576                           
  7577                           ;RF_Control_B1.c: 277: setRFSW_Control(1);
  7578  0719  3001               	movlw	1
  7579  071A  318F  2770         	fcall	_setRFSW_Control
  7580                           
  7581                           ;RF_Control_B1.c: 278: }
  7582  071C  0008               	return
  7583  071D                     l8217:	
  7584                           
  7585                           ;RF_Control_B1.c: 280: else if (RF_Data[15] == 0x11) {
  7586  071D  0022               	movlb	2	; select bank2
  7587  071E  082F               	movf	(_RF_Data^(0+256)+15),w
  7588  071F  3A11               	xorlw	17
  7589  0720  1D03               	skipz
  7590  0721  2F26               	goto	l8221
  7591                           
  7592                           ;RF_Control_B1.c: 281: setRFSW_AdjControl(1);
  7593  0722  3001               	movlw	1
  7594  0723  3193  23B8         	fcall	_setRFSW_AdjControl
  7595                           
  7596                           ;RF_Control_B1.c: 282: }
  7597  0725  0008               	return
  7598  0726                     l8221:	
  7599                           
  7600                           ;RF_Control_B1.c: 287: else if (RF_Data[15] == 0x02) {
  7601  0726  0022               	movlb	2	; select bank2
  7602  0727  082F               	movf	(_RF_Data^(0+256)+15),w
  7603  0728  3A02               	xorlw	2
  7604  0729  1D03               	skipz
  7605  072A  2F2F               	goto	l8225
  7606                           
  7607                           ;RF_Control_B1.c: 288: setRFSW_Control(2);
  7608  072B  3002               	movlw	2
  7609  072C  318F  2770         	fcall	_setRFSW_Control
  7610                           
  7611                           ;RF_Control_B1.c: 289: }
  7612  072E  0008               	return
  7613  072F                     l8225:	
  7614                           
  7615                           ;RF_Control_B1.c: 291: else if (RF_Data[15] == 0x21) {
  7616  072F  0022               	movlb	2	; select bank2
  7617  0730  082F               	movf	(_RF_Data^(0+256)+15),w
  7618  0731  3A21               	xorlw	33
  7619  0732  1D03               	skipz
  7620  0733  2F38               	goto	l8229
  7621                           
  7622                           ;RF_Control_B1.c: 292: setRFSW_AdjControl(2);
  7623  0734  3002               	movlw	2
  7624  0735  3193  23B8         	fcall	_setRFSW_AdjControl
  7625                           
  7626                           ;RF_Control_B1.c: 293: }
  7627  0737  0008               	return
  7628  0738                     l8229:	
  7629                           
  7630                           ;RF_Control_B1.c: 298: else if (RF_Data[15] == 0x03) {
  7631  0738  0022               	movlb	2	; select bank2
  7632  0739  082F               	movf	(_RF_Data^(0+256)+15),w
  7633  073A  3A03               	xorlw	3
  7634  073B  1D03               	skipz
  7635  073C  2F41               	goto	l8233
  7636                           
  7637                           ;RF_Control_B1.c: 299: setRFSW_Control(3);
  7638  073D  3003               	movlw	3
  7639  073E  318F  2770         	fcall	_setRFSW_Control
  7640                           
  7641                           ;RF_Control_B1.c: 300: }
  7642  0740  0008               	return
  7643  0741                     l8233:	
  7644                           
  7645                           ;RF_Control_B1.c: 302: else if (RF_Data[15] == 0x31) {
  7646  0741  0022               	movlb	2	; select bank2
  7647  0742  082F               	movf	(_RF_Data^(0+256)+15),w
  7648  0743  3A31               	xorlw	49
  7649  0744  1D03               	skipz
  7650  0745  0008               	return
  7651                           
  7652                           ;RF_Control_B1.c: 303: setRFSW_AdjControl(3);
  7653  0746  3003               	movlw	3
  7654  0747  3193  23B8         	fcall	_setRFSW_AdjControl
  7655  0749  0008               	return
  7656  074A                     __end_of_setControl_Lights_Table:	
  7657                           
  7658                           	psect	text32
  7659  0F70                     __ptext32:	
  7660 ;; *************** function _setRFSW_Control *****************
  7661 ;; Defined at:
  7662 ;;		line 333 in file "../src/RF_Control_B1.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  sw              1    wreg     unsigned char 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  sw              1   67[BANK0 ] unsigned char 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;		None               void
  7669 ;; Registers used:
  7670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;Total ram usage:        2 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    9
  7683 ;; This function calls:
  7684 ;;		_RfSWPointSelect
  7685 ;;		_setBuz
  7686 ;;		_setDelayOff_GO
  7687 ;;		_setDimmerLights_Switch
  7688 ;;		_setDimmerLights_Trigger
  7689 ;;		_setRF_DimmerLights
  7690 ;;		_setSw_Status
  7691 ;;		_setTxData
  7692 ;; This function is called by:
  7693 ;;		_setControl_Lights_Table
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _setRFSW_Control
  7699  0F70                     _setRFSW_Control:	
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7703                           ;setRFSW_Control@sw stored from wreg
  7704  0F70  0020               	movlb	0	; select bank0
  7705  0F71  00E3               	movwf	setRFSW_Control@sw
  7706                           
  7707                           ;RF_Control_B1.c: 334: RfSWPointSelect(sw);
  7708  0F72  0863               	movf	setRFSW_Control@sw,w
  7709  0F73  3190  20C1  318F   	fcall	_RfSWPointSelect
  7710                           
  7711                           ;RF_Control_B1.c: 335: if (RFSW->Status == 0) {
  7712  0F76  0021               	movlb	1	; select bank1
  7713  0F77  084D               	movf	_RFSW^(0+128),w
  7714  0F78  0086               	movwf	6
  7715  0F79  0187               	clrf	7
  7716  0F7A  1801               	btfsc	1,0
  7717  0F7B  2FB2               	goto	l6409
  7718                           
  7719                           ;RF_Control_B1.c: 336: if (RF_Data[16] == 0x80) {
  7720  0F7C  0022               	movlb	2	; select bank2
  7721  0F7D  0830               	movf	(_RF_Data^(0+256)+16),w
  7722  0F7E  3A80               	xorlw	128
  7723  0F7F  1D03               	skipz
  7724  0F80  2F8E               	goto	l6399
  7725                           
  7726                           ;RF_Control_B1.c: 337: setDelayOff_GO(sw, 1, RF_Data[17]);
  7727  0F81  0020               	movlb	0	; select bank0
  7728  0F82  01AA               	clrf	setDelayOff_GO@command
  7729  0F83  0AAA               	incf	setDelayOff_GO@command,f
  7730  0F84  0022               	movlb	2	; select bank2
  7731  0F85  0831               	movf	(_RF_Data^(0+256)+17),w
  7732  0F86  0020               	movlb	0	; select bank0
  7733  0F87  00E2               	movwf	??_setRFSW_Control
  7734  0F88  0862               	movf	??_setRFSW_Control,w
  7735  0F89  00AB               	movwf	setDelayOff_GO@value
  7736  0F8A  0863               	movf	setRFSW_Control@sw,w
  7737  0F8B  3189  21BD  318F   	fcall	_setDelayOff_GO
  7738  0F8E                     l6399:	
  7739                           
  7740                           ;RF_Control_B1.c: 338: }
  7741                           ;RF_Control_B1.c: 339: RFSW->Status = 1;
  7742  0F8E  0021               	movlb	1	; select bank1
  7743  0F8F  084D               	movf	_RFSW^(0+128),w
  7744  0F90  0086               	movwf	6
  7745  0F91  0187               	clrf	7
  7746  0F92  1401               	bsf	1,0
  7747                           
  7748                           ;RF_Control_B1.c: 340: setSw_Status(sw, 1);
  7749  0F93  0020               	movlb	0	; select bank0
  7750  0F94  01A1               	clrf	setSw_Status@command
  7751  0F95  0AA1               	incf	setSw_Status@command,f
  7752  0F96  0863               	movf	setRFSW_Control@sw,w
  7753  0F97  319D  2588  318F   	fcall	_setSw_Status
  7754                           
  7755                           ;RF_Control_B1.c: 342: setDimmerLights_Trigger(sw, 1);
  7756  0F9A  0020               	movlb	0	; select bank0
  7757  0F9B  01A2               	clrf	setDimmerLights_Trigger@command
  7758  0F9C  0AA2               	incf	setDimmerLights_Trigger@command,f
  7759  0F9D  0863               	movf	setRFSW_Control@sw,w
  7760  0F9E  319D  25F2  318F   	fcall	_setDimmerLights_Trigger
  7761                           
  7762                           ;RF_Control_B1.c: 343: setDimmerLights_Switch(sw, 1);
  7763  0FA1  0020               	movlb	0	; select bank0
  7764  0FA2  01A2               	clrf	setDimmerLights_Switch@command
  7765  0FA3  0AA2               	incf	setDimmerLights_Switch@command,f
  7766  0FA4  0863               	movf	setRFSW_Control@sw,w
  7767  0FA5  319D  25E2  318F   	fcall	_setDimmerLights_Switch
  7768                           
  7769                           ;RF_Control_B1.c: 345: setRF_DimmerLights(sw, RFSW->Status);
  7770  0FA8  0021               	movlb	1	; select bank1
  7771  0FA9  084D               	movf	_RFSW^(0+128),w
  7772  0FAA  0086               	movwf	6
  7773  0FAB  0187               	clrf	7
  7774  0FAC  3000               	movlw	0
  7775  0FAD  1801               	btfsc	1,0
  7776  0FAE  3001               	movlw	1
  7777  0FAF  0020               	movlb	0	; select bank0
  7778  0FB0  00DD               	movwf	setRF_DimmerLights@on
  7779  0FB1  2FF0               	goto	L6
  7780  0FB2                     l6409:	
  7781                           ;RF_Control_B1.c: 346: } else {
  7782                           
  7783                           
  7784                           ;RF_Control_B1.c: 347: if (RF_Data[16] == 0x80) {
  7785  0FB2  0022               	movlb	2	; select bank2
  7786  0FB3  0830               	movf	(_RF_Data^(0+256)+16),w
  7787  0FB4  3A80               	xorlw	128
  7788  0FB5  1D03               	skipz
  7789  0FB6  2FC8               	goto	l6413
  7790                           
  7791                           ;RF_Control_B1.c: 348: setDelayOff_GO(sw, 1, RF_Data[17]);
  7792  0FB7  0020               	movlb	0	; select bank0
  7793  0FB8  01AA               	clrf	setDelayOff_GO@command
  7794  0FB9  0AAA               	incf	setDelayOff_GO@command,f
  7795  0FBA  0022               	movlb	2	; select bank2
  7796  0FBB  0831               	movf	(_RF_Data^(0+256)+17),w
  7797  0FBC  0020               	movlb	0	; select bank0
  7798  0FBD  00E2               	movwf	??_setRFSW_Control
  7799  0FBE  0862               	movf	??_setRFSW_Control,w
  7800  0FBF  00AB               	movwf	setDelayOff_GO@value
  7801  0FC0  0863               	movf	setRFSW_Control@sw,w
  7802  0FC1  3189  21BD  318F   	fcall	_setDelayOff_GO
  7803                           
  7804                           ;RF_Control_B1.c: 349: setRF_DimmerLights(sw, 1);
  7805  0FC4  0020               	movlb	0	; select bank0
  7806  0FC5  01DD               	clrf	setRF_DimmerLights@on
  7807  0FC6  0ADD               	incf	setRF_DimmerLights@on,f
  7808  0FC7  2FF0               	goto	L6
  7809  0FC8                     l6413:	
  7810                           ;RF_Control_B1.c: 350: } else {
  7811                           
  7812                           
  7813                           ;RF_Control_B1.c: 351: RFSW->Status = 0;
  7814  0FC8  0021               	movlb	1	; select bank1
  7815  0FC9  084D               	movf	_RFSW^(0+128),w
  7816  0FCA  0086               	movwf	6
  7817  0FCB  0187               	clrf	7
  7818  0FCC  1001               	bcf	1,0
  7819                           
  7820                           ;RF_Control_B1.c: 352: setSw_Status(sw, 0);
  7821  0FCD  0020               	movlb	0	; select bank0
  7822  0FCE  01A1               	clrf	setSw_Status@command
  7823  0FCF  0863               	movf	setRFSW_Control@sw,w
  7824  0FD0  319D  2588  318F   	fcall	_setSw_Status
  7825                           
  7826                           ;RF_Control_B1.c: 354: setDimmerLights_Trigger(sw, 1);
  7827  0FD3  0020               	movlb	0	; select bank0
  7828  0FD4  01A2               	clrf	setDimmerLights_Trigger@command
  7829  0FD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  7830  0FD6  0863               	movf	setRFSW_Control@sw,w
  7831  0FD7  319D  25F2  318F   	fcall	_setDimmerLights_Trigger
  7832                           
  7833                           ;RF_Control_B1.c: 355: setDimmerLights_Switch(sw, RFSW->Status);
  7834  0FDA  0021               	movlb	1	; select bank1
  7835  0FDB  084D               	movf	_RFSW^(0+128),w
  7836  0FDC  0086               	movwf	6
  7837  0FDD  0187               	clrf	7
  7838  0FDE  3000               	movlw	0
  7839  0FDF  1801               	btfsc	1,0
  7840  0FE0  3001               	movlw	1
  7841  0FE1  0020               	movlb	0	; select bank0
  7842  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  7843  0FE3  0863               	movf	setRFSW_Control@sw,w
  7844  0FE4  319D  25E2  318F   	fcall	_setDimmerLights_Switch
  7845                           
  7846                           ;RF_Control_B1.c: 357: setDelayOff_GO(sw, 0, 0);
  7847  0FE7  0020               	movlb	0	; select bank0
  7848  0FE8  01AA               	clrf	setDelayOff_GO@command
  7849  0FE9  01AB               	clrf	setDelayOff_GO@value
  7850  0FEA  0863               	movf	setRFSW_Control@sw,w
  7851  0FEB  3189  21BD  318F   	fcall	_setDelayOff_GO
  7852                           
  7853                           ;RF_Control_B1.c: 358: setRF_DimmerLights(sw, 0);
  7854  0FEE  0020               	movlb	0	; select bank0
  7855  0FEF  01DD               	clrf	setRF_DimmerLights@on
  7856  0FF0                     L6:	
  7857  0FF0  0863               	movf	setRFSW_Control@sw,w
  7858  0FF1  318A  228E  318F   	fcall	_setRF_DimmerLights
  7859                           
  7860                           ;RF_Control_B1.c: 359: }
  7861                           ;RF_Control_B1.c: 360: }
  7862                           ;RF_Control_B1.c: 361: setBuz(1, 100);
  7863  0FF4  3064               	movlw	100
  7864  0FF5  0020               	movlb	0	; select bank0
  7865  0FF6  00A9               	movwf	setBuz@time
  7866  0FF7  3000               	movlw	0
  7867  0FF8  00AA               	movwf	setBuz@time+1
  7868  0FF9  3001               	movlw	1
  7869  0FFA  3197  27A7  318F   	fcall	_setBuz
  7870                           
  7871                           ;RF_Control_B1.c: 362: setTxData();
  7872  0FFD  3185  252E         	fcall	_setTxData
  7873  0FFF  0008               	return
  7874  1000                     __end_of_setRFSW_Control:	
  7875                           
  7876                           	psect	text33
  7877  09BD                     __ptext33:	
  7878 ;; *************** function _setDelayOff_GO *****************
  7879 ;; Defined at:
  7880 ;;		line 86 in file "../src/DelayOff_B1.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  sw              1    wreg     unsigned char 
  7883 ;;  command         1   10[BANK0 ] unsigned char 
  7884 ;;  value           1   11[BANK0 ] unsigned char 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  sw              1   14[BANK0 ] unsigned char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;		None               void
  7889 ;; Registers used:
  7890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7896 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;Total ram usage:        5 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    7
  7903 ;; This function calls:
  7904 ;;		_DelayOffPointSelect
  7905 ;;		_DelayTimejudge
  7906 ;; This function is called by:
  7907 ;;		_setRFSW_Control
  7908 ;;		_Sw_DimmerOffFunc
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           
  7913                           ;psect for function _setDelayOff_GO
  7914  09BD                     _setDelayOff_GO:	
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7918                           ;setDelayOff_GO@sw stored from wreg
  7919  09BD  0020               	movlb	0	; select bank0
  7920  09BE  00AE               	movwf	setDelayOff_GO@sw
  7921                           
  7922                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7923  09BF  082E               	movf	setDelayOff_GO@sw,w
  7924  09C0  319F  27A7  3189   	fcall	_DelayOffPointSelect
  7925                           
  7926                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7927  09C3  087A               	movf	_DelayOff,w
  7928  09C4  0086               	movwf	6
  7929  09C5  3001               	movlw	1	; select bank2/3
  7930  09C6  0087               	movwf	7
  7931  09C7  1C01               	btfss	1,0
  7932  09C8  0008               	return
  7933                           
  7934                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7935  09C9  0020               	movlb	0	; select bank0
  7936  09CA  082A               	movf	setDelayOff_GO@command,w
  7937  09CB  3A01               	xorlw	1
  7938  09CC  3000               	movlw	0
  7939  09CD  1903               	skipnz
  7940  09CE  3001               	movlw	1
  7941  09CF  00AC               	movwf	??_setDelayOff_GO
  7942  09D0  087A               	movf	_DelayOff,w
  7943  09D1  0086               	movwf	6
  7944  09D2  3001               	movlw	1	; select bank2/3
  7945  09D3  0087               	movwf	7
  7946  09D4  0DAC               	rlf	??_setDelayOff_GO,f
  7947  09D5  0801               	movf	1,w
  7948  09D6  062C               	xorwf	??_setDelayOff_GO,w
  7949  09D7  39FD               	andlw	-3
  7950  09D8  062C               	xorwf	??_setDelayOff_GO,w
  7951  09D9  0081               	movwf	1
  7952                           
  7953                           ;DelayOff_B1.c: 90: if (command == 1) {
  7954  09DA  082A               	movf	setDelayOff_GO@command,w
  7955  09DB  3A01               	xorlw	1
  7956  09DC  1D03               	skipz
  7957  09DD  2A08               	goto	l6191
  7958                           
  7959                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7960  09DE  082B               	movf	setDelayOff_GO@value,w
  7961  09DF  3192  2248  3189   	fcall	_DelayTimejudge
  7962  09E2  0020               	movlb	0	; select bank0
  7963  09E3  00AC               	movwf	??_setDelayOff_GO
  7964  09E4  0A7A               	incf	_DelayOff,w
  7965  09E5  0086               	movwf	6
  7966  09E6  3001               	movlw	1	; select bank2/3
  7967  09E7  0087               	movwf	7
  7968  09E8  082C               	movf	??_setDelayOff_GO,w
  7969  09E9  0081               	movwf	1
  7970                           
  7971                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7972  09EA  300F               	movlw	15
  7973  09EB  052B               	andwf	setDelayOff_GO@value,w
  7974  09EC  00AC               	movwf	??_setDelayOff_GO
  7975  09ED  082C               	movf	??_setDelayOff_GO,w
  7976  09EE  3A05               	xorlw	5
  7977  09EF  1903               	skipnz
  7978  09F0  29F5               	goto	l6185
  7979  09F1  082B               	movf	setDelayOff_GO@value,w
  7980  09F2  390F               	andlw	15
  7981  09F3  1D03               	btfss	3,2
  7982  09F4  29FB               	goto	l6189
  7983  09F5                     l6185:	
  7984  09F5  3026               	movlw	38
  7985  09F6  022B               	subwf	setDelayOff_GO@value,w
  7986  09F7  1803               	skipnc
  7987  09F8  29FB               	goto	l6189
  7988                           
  7989                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7990  09F9  082B               	movf	setDelayOff_GO@value,w
  7991  09FA  29FC               	goto	L7
  7992  09FB                     l6189:	
  7993                           ;DelayOff_B1.c: 94: } else {
  7994                           
  7995                           
  7996                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7997  09FB  3005               	movlw	5
  7998  09FC                     L7:	
  7999  09FC  00AC               	movwf	??_setDelayOff_GO
  8000  09FD  082E               	movf	setDelayOff_GO@sw,w
  8001  09FE  3E1A               	addlw	26
  8002  09FF  076F               	addwf	_product,w
  8003  0A00  00AD               	movwf	??_setDelayOff_GO+1
  8004  0A01  082D               	movf	??_setDelayOff_GO+1,w
  8005  0A02  0086               	movwf	6
  8006  0A03  3002               	movlw	2	; select bank4/5
  8007  0A04  0087               	movwf	7
  8008  0A05  082C               	movf	??_setDelayOff_GO,w
  8009  0A06  0081               	movwf	1
  8010                           
  8011                           ;DelayOff_B1.c: 96: }
  8012                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8013  0A07  2A14               	goto	l6195
  8014  0A08                     l6191:	
  8015  0A08  08AA               	movf	setDelayOff_GO@command,f
  8016  0A09  1D03               	skipz
  8017  0A0A  2A14               	goto	l6195
  8018                           
  8019                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8020  0A0B  082E               	movf	setDelayOff_GO@sw,w
  8021  0A0C  3E1A               	addlw	26
  8022  0A0D  076F               	addwf	_product,w
  8023  0A0E  00AC               	movwf	??_setDelayOff_GO
  8024  0A0F  082C               	movf	??_setDelayOff_GO,w
  8025  0A10  0086               	movwf	6
  8026  0A11  3002               	movlw	2	; select bank4/5
  8027  0A12  0087               	movwf	7
  8028  0A13  0181               	clrf	1
  8029  0A14                     l6195:	
  8030                           
  8031                           ;DelayOff_B1.c: 99: }
  8032                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8033  0A14  087A               	movf	_DelayOff,w
  8034  0A15  3E02               	addlw	2
  8035  0A16  0086               	movwf	6
  8036  0A17  3001               	movlw	1	; select bank2/3
  8037  0A18  0087               	movwf	7
  8038  0A19  3000               	movlw	0
  8039  0A1A  3FC0               	movwi [0]fsr1
  8040  0A1B  3FC1               	movwi [1]fsr1
  8041                           
  8042                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8043  0A1C  087A               	movf	_DelayOff,w
  8044  0A1D  3E04               	addlw	4
  8045  0A1E  0086               	movwf	6
  8046  0A1F  3001               	movlw	1	; select bank2/3
  8047  0A20  0087               	movwf	7
  8048  0A21  0181               	clrf	1
  8049  0A22  0008               	return
  8050  0A23                     __end_of_setDelayOff_GO:	
  8051                           
  8052                           	psect	text34
  8053  1248                     __ptext34:	
  8054 ;; *************** function _DelayTimejudge *****************
  8055 ;; Defined at:
  8056 ;;		line 106 in file "../src/DelayOff_B1.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  value           1    wreg     unsigned char 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  value           1    9[BANK0 ] unsigned char 
  8061 ;;  k               1    8[BANK0 ] unsigned char 
  8062 ;;  j               1    7[BANK0 ] unsigned char 
  8063 ;;  i               1    6[BANK0 ] unsigned char 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  1    wreg      unsigned char 
  8066 ;; Registers used:
  8067 ;;		wreg, status,2, status,0, pclath, cstack
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;Total ram usage:        6 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    6
  8080 ;; This function calls:
  8081 ;;		___bmul
  8082 ;; This function is called by:
  8083 ;;		_setDelayOff_GO
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _DelayTimejudge
  8089  1248                     _DelayTimejudge:	
  8090                           
  8091                           ;incstack = 0
  8092                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8093                           ;DelayTimejudge@value stored from wreg
  8094  1248  0020               	movlb	0	; select bank0
  8095  1249  00A9               	movwf	DelayTimejudge@value
  8096                           
  8097                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8098  124A  3005               	movlw	5
  8099  124B  00A4               	movwf	??_DelayTimejudge
  8100  124C  0824               	movf	??_DelayTimejudge,w
  8101  124D  00A6               	movwf	DelayTimejudge@i
  8102  124E  01A7               	clrf	DelayTimejudge@j
  8103  124F  01A8               	clrf	DelayTimejudge@k
  8104                           
  8105                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8106  1250  3031               	movlw	49
  8107  1251  0229               	subwf	DelayTimejudge@value,w
  8108  1252  1803               	skipnc
  8109  1253  2A70               	goto	l5967
  8110                           
  8111                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8112  1254  0829               	movf	DelayTimejudge@value,w
  8113  1255  390F               	andlw	15
  8114  1256  00A4               	movwf	??_DelayTimejudge
  8115  1257  0824               	movf	??_DelayTimejudge,w
  8116  1258  00A7               	movwf	DelayTimejudge@j
  8117                           
  8118                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8119  1259  0829               	movf	DelayTimejudge@value,w
  8120  125A  00A4               	movwf	??_DelayTimejudge
  8121  125B  3004               	movlw	4
  8122  125C                     u4665:	
  8123  125C  36A4               	lsrf	??_DelayTimejudge,f
  8124  125D  0B89               	decfsz	9,f
  8125  125E  2A5C               	goto	u4665
  8126  125F  0824               	movf	??_DelayTimejudge,w
  8127  1260  390F               	andlw	15
  8128  1261  00A5               	movwf	??_DelayTimejudge+1
  8129  1262  0825               	movf	??_DelayTimejudge+1,w
  8130  1263  00A8               	movwf	DelayTimejudge@k
  8131                           
  8132                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8133  1264  300A               	movlw	10
  8134  1265  00A4               	movwf	??_DelayTimejudge
  8135  1266  0824               	movf	??_DelayTimejudge,w
  8136  1267  00A0               	movwf	___bmul@multiplicand
  8137  1268  0828               	movf	DelayTimejudge@k,w
  8138  1269  319E  2676         	fcall	___bmul
  8139  126B  0020               	movlb	0	; select bank0
  8140  126C  0727               	addwf	DelayTimejudge@j,w
  8141  126D  00A5               	movwf	??_DelayTimejudge+1
  8142  126E  0825               	movf	??_DelayTimejudge+1,w
  8143  126F  00A6               	movwf	DelayTimejudge@i
  8144  1270                     l5967:	
  8145                           
  8146                           ;DelayOff_B1.c: 112: }
  8147                           ;DelayOff_B1.c: 133: return i;
  8148  1270  0826               	movf	DelayTimejudge@i,w
  8149  1271  0008               	return
  8150  1272                     __end_of_DelayTimejudge:	
  8151                           
  8152                           	psect	text35
  8153  1E76                     __ptext35:	
  8154 ;; *************** function ___bmul *****************
  8155 ;; Defined at:
  8156 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  multiplier      1    wreg     unsigned char 
  8159 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8162 ;;  product         1    2[BANK0 ] unsigned char 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      unsigned char 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        4 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    5
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_DelayTimejudge
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function ___bmul
  8188  1E76                     ___bmul:	
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8192                           ;___bmul@multiplier stored from wreg
  8193  1E76  0020               	movlb	0	; select bank0
  8194  1E77  00A3               	movwf	___bmul@multiplier
  8195  1E78  01A2               	clrf	___bmul@product
  8196  1E79                     l5929:	
  8197  1E79  1C23               	btfss	___bmul@multiplier,0
  8198  1E7A  2E7F               	goto	l5933
  8199  1E7B  0820               	movf	___bmul@multiplicand,w
  8200  1E7C  00A1               	movwf	??___bmul
  8201  1E7D  0821               	movf	??___bmul,w
  8202  1E7E  07A2               	addwf	___bmul@product,f
  8203  1E7F                     l5933:	
  8204  1E7F  1003               	clrc
  8205  1E80  0DA0               	rlf	___bmul@multiplicand,f
  8206  1E81  1003               	clrc
  8207  1E82  0CA3               	rrf	___bmul@multiplier,f
  8208  1E83  08A3               	movf	___bmul@multiplier,f
  8209  1E84  1D03               	skipz
  8210  1E85  2E79               	goto	l5929
  8211  1E86  0822               	movf	___bmul@product,w
  8212  1E87  0008               	return
  8213  1E88                     __end_of___bmul:	
  8214                           
  8215                           	psect	text36
  8216  13B8                     __ptext36:	
  8217 ;; *************** function _setRFSW_AdjControl *****************
  8218 ;; Defined at:
  8219 ;;		line 366 in file "../src/RF_Control_B1.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  sw              1    wreg     unsigned char 
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;  sw              1   70[BANK0 ] unsigned char 
  8224 ;; Return value:  Size  Location     Type
  8225 ;;		None               void
  8226 ;; Registers used:
  8227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;Total ram usage:        3 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:   10
  8240 ;; This function calls:
  8241 ;;		_RfSWPointSelect
  8242 ;;		_setRF_DimmerValue
  8243 ;;		_setTxData
  8244 ;; This function is called by:
  8245 ;;		_setControl_Lights_Table
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           
  8250                           ;psect for function _setRFSW_AdjControl
  8251  13B8                     _setRFSW_AdjControl:	
  8252                           
  8253                           ;incstack = 0
  8254                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8255                           ;setRFSW_AdjControl@sw stored from wreg
  8256  13B8  0020               	movlb	0	; select bank0
  8257  13B9  00E6               	movwf	setRFSW_AdjControl@sw
  8258                           
  8259                           ;RF_Control_B1.c: 367: RfSWPointSelect(sw);
  8260  13BA  0866               	movf	setRFSW_AdjControl@sw,w
  8261  13BB  3190  20C1  3193   	fcall	_RfSWPointSelect
  8262                           
  8263                           ;RF_Control_B1.c: 368: if (RFSW->Status == 1) {
  8264  13BE  0021               	movlb	1	; select bank1
  8265  13BF  084D               	movf	_RFSW^(0+128),w
  8266  13C0  0086               	movwf	6
  8267  13C1  0187               	clrf	7
  8268  13C2  1C01               	btfss	1,0
  8269  13C3  2BCC               	goto	l6437
  8270                           
  8271                           ;RF_Control_B1.c: 369: Memory.Modify=1;
  8272  13C4  0023               	movlb	3	; select bank3
  8273  13C5  1444               	bsf	(_Memory^(0+384)+36),0
  8274                           
  8275                           ;RF_Control_B1.c: 370: setRF_DimmerValue(sw);
  8276  13C6  0020               	movlb	0	; select bank0
  8277  13C7  0866               	movf	setRFSW_AdjControl@sw,w
  8278  13C8  3193  2383  3193   	fcall	_setRF_DimmerValue
  8279                           
  8280                           ;RF_Control_B1.c: 371: } else {
  8281  13CB  2BDE               	goto	l2338
  8282  13CC                     l6437:	
  8283                           
  8284                           ;RF_Control_B1.c: 372: product->Data[9]=product->Data[20 + sw];
  8285  13CC  0020               	movlb	0	; select bank0
  8286  13CD  0866               	movf	setRFSW_AdjControl@sw,w
  8287  13CE  3E14               	addlw	20
  8288  13CF  076F               	addwf	_product,w
  8289  13D0  00E4               	movwf	??_setRFSW_AdjControl
  8290  13D1  0864               	movf	??_setRFSW_AdjControl,w
  8291  13D2  0086               	movwf	6
  8292  13D3  3002               	movlw	2	; select bank4/5
  8293  13D4  0087               	movwf	7
  8294  13D5  0801               	movf	1,w
  8295  13D6  00E5               	movwf	??_setRFSW_AdjControl+1
  8296  13D7  086F               	movf	_product,w
  8297  13D8  3E09               	addlw	9
  8298  13D9  0086               	movwf	6
  8299  13DA  3002               	movlw	2	; select bank4/5
  8300  13DB  0087               	movwf	7
  8301  13DC  0865               	movf	??_setRFSW_AdjControl+1,w
  8302  13DD  0081               	movwf	1
  8303  13DE                     l2338:	
  8304                           
  8305                           ;RF_Control_B1.c: 373: }
  8306                           ;RF_Control_B1.c: 374: product->Data[17]=product->Data[26 + sw];
  8307  13DE  0020               	movlb	0	; select bank0
  8308  13DF  0866               	movf	setRFSW_AdjControl@sw,w
  8309  13E0  3E1A               	addlw	26
  8310  13E1  076F               	addwf	_product,w
  8311  13E2  00E4               	movwf	??_setRFSW_AdjControl
  8312  13E3  0864               	movf	??_setRFSW_AdjControl,w
  8313  13E4  0086               	movwf	6
  8314  13E5  3002               	movlw	2	; select bank4/5
  8315  13E6  0087               	movwf	7
  8316  13E7  0801               	movf	1,w
  8317  13E8  00E5               	movwf	??_setRFSW_AdjControl+1
  8318  13E9  086F               	movf	_product,w
  8319  13EA  3E11               	addlw	17
  8320  13EB  0086               	movwf	6
  8321  13EC  3002               	movlw	2	; select bank4/5
  8322  13ED  0087               	movwf	7
  8323  13EE  0865               	movf	??_setRFSW_AdjControl+1,w
  8324  13EF  0081               	movwf	1
  8325                           
  8326                           ;RF_Control_B1.c: 375: setTxData();
  8327  13F0  3185  252E         	fcall	_setTxData
  8328  13F2  0008               	return
  8329  13F3                     __end_of_setRFSW_AdjControl:	
  8330                           
  8331                           	psect	text37
  8332  1383                     __ptext37:	
  8333 ;; *************** function _setRF_DimmerValue *****************
  8334 ;; Defined at:
  8335 ;;		line 386 in file "../src/RF_Control_B1.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  lights          1    wreg     unsigned char 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  lights          1   67[BANK0 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        3 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    9
  8356 ;; This function calls:
  8357 ;;		_setDimmerLights_AdjRF
  8358 ;; This function is called by:
  8359 ;;		_setRFSW_AdjControl
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _setRF_DimmerValue
  8365  1383                     _setRF_DimmerValue:	
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8369                           ;setRF_DimmerValue@lights stored from wreg
  8370  1383  0020               	movlb	0	; select bank0
  8371  1384  00E3               	movwf	setRF_DimmerValue@lights
  8372                           
  8373                           ;RF_Control_B1.c: 387: if (RF_Data[9] > 0x64) {
  8374  1385  3065               	movlw	101
  8375  1386  0022               	movlb	2	; select bank2
  8376  1387  0229               	subwf	(_RF_Data^(0+256)+9),w
  8377  1388  1C03               	skipc
  8378  1389  2B90               	goto	l6271
  8379                           
  8380                           ;RF_Control_B1.c: 388: RF_Data[9] = 0x64;
  8381  138A  3064               	movlw	100
  8382  138B  0020               	movlb	0	; select bank0
  8383  138C  00E1               	movwf	??_setRF_DimmerValue
  8384  138D  0861               	movf	??_setRF_DimmerValue,w
  8385  138E  0022               	movlb	2	; select bank2
  8386  138F  00A9               	movwf	(_RF_Data^(0+256)+9)
  8387  1390                     l6271:	
  8388                           
  8389                           ;RF_Control_B1.c: 389: }
  8390                           ;RF_Control_B1.c: 390: product->Data[9]=RF_Data[9];
  8391  1390  0829               	movf	(_RF_Data^(0+256)+9),w
  8392  1391  0020               	movlb	0	; select bank0
  8393  1392  00E1               	movwf	??_setRF_DimmerValue
  8394  1393  086F               	movf	_product,w
  8395  1394  3E09               	addlw	9
  8396  1395  0086               	movwf	6
  8397  1396  3002               	movlw	2	; select bank4/5
  8398  1397  0087               	movwf	7
  8399  1398  0861               	movf	??_setRF_DimmerValue,w
  8400  1399  0081               	movwf	1
  8401                           
  8402                           ;RF_Control_B1.c: 391: product->Data[11]=lights;
  8403  139A  0863               	movf	setRF_DimmerValue@lights,w
  8404  139B  00E1               	movwf	??_setRF_DimmerValue
  8405  139C  086F               	movf	_product,w
  8406  139D  3E0B               	addlw	11
  8407  139E  0086               	movwf	6
  8408  139F  3002               	movlw	2	; select bank4/5
  8409  13A0  0087               	movwf	7
  8410  13A1  0861               	movf	??_setRF_DimmerValue,w
  8411  13A2  0081               	movwf	1
  8412                           
  8413                           ;RF_Control_B1.c: 392: product->Data[(20 + lights)]=product->Data[9];
  8414  13A3  086F               	movf	_product,w
  8415  13A4  3E09               	addlw	9
  8416  13A5  0086               	movwf	6
  8417  13A6  3002               	movlw	2	; select bank4/5
  8418  13A7  0087               	movwf	7
  8419  13A8  0801               	movf	1,w
  8420  13A9  00E1               	movwf	??_setRF_DimmerValue
  8421  13AA  0863               	movf	setRF_DimmerValue@lights,w
  8422  13AB  3E14               	addlw	20
  8423  13AC  076F               	addwf	_product,w
  8424  13AD  00E2               	movwf	??_setRF_DimmerValue+1
  8425  13AE  0862               	movf	??_setRF_DimmerValue+1,w
  8426  13AF  0086               	movwf	6
  8427  13B0  3002               	movlw	2	; select bank4/5
  8428  13B1  0087               	movwf	7
  8429  13B2  0861               	movf	??_setRF_DimmerValue,w
  8430  13B3  0081               	movwf	1
  8431                           
  8432                           ;RF_Control_B1.c: 393: setDimmerLights_AdjRF(lights);
  8433  13B4  0863               	movf	setRF_DimmerValue@lights,w
  8434  13B5  3191  2187         	fcall	_setDimmerLights_AdjRF
  8435  13B7  0008               	return
  8436  13B8                     __end_of_setRF_DimmerValue:	
  8437                           
  8438                           	psect	text38
  8439  1187                     __ptext38:	
  8440 ;; *************** function _setDimmerLights_AdjRF *****************
  8441 ;; Defined at:
  8442 ;;		line 679 in file "../src/Dimmer_B1.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;  lights          1    wreg     unsigned char 
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;  lights          1   64[BANK0 ] unsigned char 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;		None               void
  8449 ;; Registers used:
  8450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;Total ram usage:        2 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    8
  8463 ;; This function calls:
  8464 ;;		_DimmerLightsPointSelect
  8465 ;;		_getPercentValue
  8466 ;; This function is called by:
  8467 ;;		_setRF_DimmerValue
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _setDimmerLights_AdjRF
  8473  1187                     _setDimmerLights_AdjRF:	
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8477                           ;setDimmerLights_AdjRF@lights stored from wreg
  8478  1187  0020               	movlb	0	; select bank0
  8479  1188  00E0               	movwf	setDimmerLights_AdjRF@lights
  8480                           
  8481                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  8482  1189  0860               	movf	setDimmerLights_AdjRF@lights,w
  8483  118A  319F  276F  3191   	fcall	_DimmerLightsPointSelect
  8484                           
  8485                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  8486  118D  087B               	movf	_DimmerLights,w
  8487  118E  0086               	movwf	6
  8488  118F  3001               	movlw	1	; select bank2/3
  8489  1190  0087               	movwf	7
  8490  1191  1501               	bsf	1,2
  8491                           
  8492                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  8493  1192  087B               	movf	_DimmerLights,w
  8494  1193  0086               	movwf	6
  8495  1194  3001               	movlw	1	; select bank2/3
  8496  1195  0087               	movwf	7
  8497  1196  1481               	bsf	1,1
  8498                           
  8499                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8500  1197  0020               	movlb	0	; select bank0
  8501  1198  086F               	movf	_product,w
  8502  1199  3E09               	addlw	9
  8503  119A  0086               	movwf	6
  8504  119B  3002               	movlw	2	; select bank4/5
  8505  119C  0087               	movwf	7
  8506  119D  0801               	movf	1,w
  8507  119E  3188  2038         	fcall	_getPercentValue
  8508  11A0  0020               	movlb	0	; select bank0
  8509  11A1  00DF               	movwf	??_setDimmerLights_AdjRF
  8510  11A2  087B               	movf	_DimmerLights,w
  8511  11A3  3E05               	addlw	5
  8512  11A4  0086               	movwf	6
  8513  11A5  3001               	movlw	1	; select bank2/3
  8514  11A6  0087               	movwf	7
  8515  11A7  085F               	movf	??_setDimmerLights_AdjRF,w
  8516  11A8  0081               	movwf	1
  8517  11A9  0008               	return
  8518  11AA                     __end_of_setDimmerLights_AdjRF:	
  8519                           
  8520                           	psect	text39
  8521  0838                     __ptext39:	
  8522 ;; *************** function _getPercentValue *****************
  8523 ;; Defined at:
  8524 ;;		line 752 in file "../src/Dimmer_B1.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  value           1    wreg     unsigned char 
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  value           1   59[BANK0 ] unsigned char 
  8529 ;;  i               3   60[BANK0 ] float 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      unsigned char 
  8532 ;; Registers used:
  8533 ;;		wreg, status,2, status,0, pclath, cstack
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;Total ram usage:        6 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:    7
  8546 ;; This function calls:
  8547 ;;		___awtoft
  8548 ;;		___ftadd
  8549 ;;		___ftdiv
  8550 ;;		___ftmul
  8551 ;;		___fttol
  8552 ;; This function is called by:
  8553 ;;		_setDimmerLights_AdjRF
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function _getPercentValue
  8559  0838                     _getPercentValue:	
  8560                           
  8561                           ;incstack = 0
  8562                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8563                           ;getPercentValue@value stored from wreg
  8564  0838  0020               	movlb	0	; select bank0
  8565  0839  00DB               	movwf	getPercentValue@value
  8566                           
  8567                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
  8568  083A  3000               	movlw	0
  8569  083B  00DC               	movwf	getPercentValue@i
  8570  083C  3060               	movlw	96
  8571  083D  00DD               	movwf	getPercentValue@i+1
  8572  083E  3042               	movlw	66
  8573  083F  00DE               	movwf	getPercentValue@i+2
  8574                           
  8575                           ;Dimmer_B1.c: 755: i /= 100;
  8576  0840  3000               	movlw	0
  8577  0841  00AE               	movwf	___ftdiv@f2
  8578  0842  30C8               	movlw	200
  8579  0843  00AF               	movwf	___ftdiv@f2+1
  8580  0844  3042               	movlw	66
  8581  0845  00B0               	movwf	___ftdiv@f2+2
  8582  0846  085C               	movf	getPercentValue@i,w
  8583  0847  00B1               	movwf	___ftdiv@f1
  8584  0848  085D               	movf	getPercentValue@i+1,w
  8585  0849  00B2               	movwf	___ftdiv@f1+1
  8586  084A  085E               	movf	getPercentValue@i+2,w
  8587  084B  00B3               	movwf	___ftdiv@f1+2
  8588  084C  3187  274A  3188   	fcall	___ftdiv
  8589  084F  0020               	movlb	0	; select bank0
  8590  0850  082E               	movf	?___ftdiv,w
  8591  0851  00DC               	movwf	getPercentValue@i
  8592  0852  082F               	movf	?___ftdiv+1,w
  8593  0853  00DD               	movwf	getPercentValue@i+1
  8594  0854  0830               	movf	?___ftdiv+2,w
  8595  0855  00DE               	movwf	getPercentValue@i+2
  8596                           
  8597                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-95)*0.8)));
  8598  0856  085B               	movf	getPercentValue@value,w
  8599  0857  00D9               	movwf	??_getPercentValue
  8600  0858  01DA               	clrf	??_getPercentValue+1
  8601  0859  09D9               	comf	??_getPercentValue,f
  8602  085A  09DA               	comf	??_getPercentValue+1,f
  8603  085B  0AD9               	incf	??_getPercentValue,f
  8604  085C  1903               	skipnz
  8605  085D  0ADA               	incf	??_getPercentValue+1,f
  8606  085E  0859               	movf	??_getPercentValue,w
  8607  085F  3E64               	addlw	100
  8608  0860  00A8               	movwf	___awtoft@c
  8609  0861  3000               	movlw	0
  8610  0862  3D5A               	addwfc	??_getPercentValue+1,w
  8611  0863  00A9               	movwf	___awtoft@c+1
  8612  0864  3191  2142  3188   	fcall	___awtoft
  8613  0867  0020               	movlb	0	; select bank0
  8614  0868  0828               	movf	?___awtoft,w
  8615  0869  00B1               	movwf	___ftmul@f2
  8616  086A  0829               	movf	?___awtoft+1,w
  8617  086B  00B2               	movwf	___ftmul@f2+1
  8618  086C  082A               	movf	?___awtoft+2,w
  8619  086D  00B3               	movwf	___ftmul@f2+2
  8620  086E  085C               	movf	getPercentValue@i,w
  8621  086F  00AE               	movwf	___ftmul@f1
  8622  0870  085D               	movf	getPercentValue@i+1,w
  8623  0871  00AF               	movwf	___ftmul@f1+1
  8624  0872  085E               	movf	getPercentValue@i+2,w
  8625  0873  00B0               	movwf	___ftmul@f1+2
  8626  0874  3185  25E7  3188   	fcall	___ftmul
  8627  0877  0020               	movlb	0	; select bank0
  8628  0878  082E               	movf	?___ftmul,w
  8629  0879  00C1               	movwf	___ftadd@f2
  8630  087A  082F               	movf	?___ftmul+1,w
  8631  087B  00C2               	movwf	___ftadd@f2+1
  8632  087C  0830               	movf	?___ftmul+2,w
  8633  087D  00C3               	movwf	___ftadd@f2+2
  8634  087E  3000               	movlw	0
  8635  087F  00BE               	movwf	___ftadd@f1
  8636  0880  3080               	movlw	128
  8637  0881  00BF               	movwf	___ftadd@f1+1
  8638  0882  3040               	movlw	64
  8639  0883  00C0               	movwf	___ftadd@f1+2
  8640  0884  3183  2371  3188   	fcall	___ftadd
  8641  0887  0020               	movlb	0	; select bank0
  8642  0888  083E               	movf	?___ftadd,w
  8643  0889  00CB               	movwf	___fttol@f1
  8644  088A  083F               	movf	?___ftadd+1,w
  8645  088B  00CC               	movwf	___fttol@f1+1
  8646  088C  0840               	movf	?___ftadd+2,w
  8647  088D  00CD               	movwf	___fttol@f1+2
  8648  088E  318D  25D1         	fcall	___fttol
  8649  0890  0020               	movlb	0	; select bank0
  8650  0891  084B               	movf	?___fttol,w
  8651  0892  0008               	return
  8652  0893                     __end_of_getPercentValue:	
  8653                           
  8654                           	psect	text40
  8655  05E7                     __ptext40:	
  8656 ;; *************** function ___ftmul *****************
  8657 ;; Defined at:
  8658 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  f1              3   14[BANK0 ] float 
  8661 ;;  f2              3   17[BANK0 ] float 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8664 ;;  sign            1   29[BANK0 ] unsigned char 
  8665 ;;  cntr            1   28[BANK0 ] unsigned char 
  8666 ;;  exp             1   24[BANK0 ] unsigned char 
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  3   14[BANK0 ] float 
  8669 ;; Registers used:
  8670 ;;		wreg, status,2, status,0, pclath, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8676 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;Total ram usage:       16 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    6
  8683 ;; This function calls:
  8684 ;;		___ftpack
  8685 ;; This function is called by:
  8686 ;;		_getPercentValue
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function ___ftmul
  8692  05E7                     ___ftmul:	
  8693                           
  8694                           ;incstack = 0
  8695                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8696  05E7  0020               	movlb	0	; select bank0
  8697  05E8  082E               	movf	___ftmul@f1,w
  8698  05E9  00B4               	movwf	??___ftmul
  8699  05EA  082F               	movf	___ftmul@f1+1,w
  8700  05EB  00B5               	movwf	??___ftmul+1
  8701  05EC  0830               	movf	___ftmul@f1+2,w
  8702  05ED  00B6               	movwf	??___ftmul+2
  8703  05EE  1003               	clrc
  8704  05EF  0D35               	rlf	??___ftmul+1,w
  8705  05F0  0D36               	rlf	??___ftmul+2,w
  8706  05F1  00B7               	movwf	??___ftmul+3
  8707  05F2  0837               	movf	??___ftmul+3,w
  8708  05F3  00B8               	movwf	___ftmul@exp
  8709  05F4  08B8               	movf	___ftmul@exp,f
  8710  05F5  1D03               	skipz
  8711  05F6  2DFE               	goto	l5823
  8712  05F7  3000               	movlw	0
  8713  05F8  00AE               	movwf	?___ftmul
  8714  05F9  3000               	movlw	0
  8715  05FA  00AF               	movwf	?___ftmul+1
  8716  05FB  3000               	movlw	0
  8717  05FC  00B0               	movwf	?___ftmul+2
  8718  05FD  0008               	return
  8719  05FE                     l5823:	
  8720  05FE  0831               	movf	___ftmul@f2,w
  8721  05FF  00B4               	movwf	??___ftmul
  8722  0600  0832               	movf	___ftmul@f2+1,w
  8723  0601  00B5               	movwf	??___ftmul+1
  8724  0602  0833               	movf	___ftmul@f2+2,w
  8725  0603  00B6               	movwf	??___ftmul+2
  8726  0604  1003               	clrc
  8727  0605  0D35               	rlf	??___ftmul+1,w
  8728  0606  0D36               	rlf	??___ftmul+2,w
  8729  0607  00B7               	movwf	??___ftmul+3
  8730  0608  0837               	movf	??___ftmul+3,w
  8731  0609  00BD               	movwf	___ftmul@sign
  8732  060A  08BD               	movf	___ftmul@sign,f
  8733  060B  1D03               	skipz
  8734  060C  2E14               	goto	l5829
  8735  060D  3000               	movlw	0
  8736  060E  00AE               	movwf	?___ftmul
  8737  060F  3000               	movlw	0
  8738  0610  00AF               	movwf	?___ftmul+1
  8739  0611  3000               	movlw	0
  8740  0612  00B0               	movwf	?___ftmul+2
  8741  0613  0008               	return
  8742  0614                     l5829:	
  8743  0614  083D               	movf	___ftmul@sign,w
  8744  0615  3E7B               	addlw	123
  8745  0616  00B4               	movwf	??___ftmul
  8746  0617  0834               	movf	??___ftmul,w
  8747  0618  07B8               	addwf	___ftmul@exp,f
  8748  0619  082E               	movf	___ftmul@f1,w
  8749  061A  00B4               	movwf	??___ftmul
  8750  061B  082F               	movf	___ftmul@f1+1,w
  8751  061C  00B5               	movwf	??___ftmul+1
  8752  061D  0830               	movf	___ftmul@f1+2,w
  8753  061E  00B6               	movwf	??___ftmul+2
  8754  061F  3010               	movlw	16
  8755  0620                     u4375:	
  8756  0620  36B6               	lsrf	??___ftmul+2,f
  8757  0621  0CB5               	rrf	??___ftmul+1,f
  8758  0622  0CB4               	rrf	??___ftmul,f
  8759  0623  0B89               	decfsz	9,f
  8760  0624  2E20               	goto	u4375
  8761  0625  0834               	movf	??___ftmul,w
  8762  0626  00B7               	movwf	??___ftmul+3
  8763  0627  0837               	movf	??___ftmul+3,w
  8764  0628  00BD               	movwf	___ftmul@sign
  8765  0629  0831               	movf	___ftmul@f2,w
  8766  062A  00B4               	movwf	??___ftmul
  8767  062B  0832               	movf	___ftmul@f2+1,w
  8768  062C  00B5               	movwf	??___ftmul+1
  8769  062D  0833               	movf	___ftmul@f2+2,w
  8770  062E  00B6               	movwf	??___ftmul+2
  8771  062F  3010               	movlw	16
  8772  0630                     u4385:	
  8773  0630  36B6               	lsrf	??___ftmul+2,f
  8774  0631  0CB5               	rrf	??___ftmul+1,f
  8775  0632  0CB4               	rrf	??___ftmul,f
  8776  0633  0B89               	decfsz	9,f
  8777  0634  2E30               	goto	u4385
  8778  0635  0834               	movf	??___ftmul,w
  8779  0636  00B7               	movwf	??___ftmul+3
  8780  0637  0837               	movf	??___ftmul+3,w
  8781  0638  06BD               	xorwf	___ftmul@sign,f
  8782  0639  3080               	movlw	128
  8783  063A  00B4               	movwf	??___ftmul
  8784  063B  0834               	movf	??___ftmul,w
  8785  063C  05BD               	andwf	___ftmul@sign,f
  8786  063D  17AF               	bsf	___ftmul@f1+1,7
  8787  063E  17B2               	bsf	___ftmul@f2+1,7
  8788  063F  30FF               	movlw	255
  8789  0640  05B1               	andwf	___ftmul@f2,f
  8790  0641  30FF               	movlw	255
  8791  0642  05B2               	andwf	___ftmul@f2+1,f
  8792  0643  3000               	movlw	0
  8793  0644  05B3               	andwf	___ftmul@f2+2,f
  8794  0645  3000               	movlw	0
  8795  0646  00B9               	movwf	___ftmul@f3_as_product
  8796  0647  3000               	movlw	0
  8797  0648  00BA               	movwf	___ftmul@f3_as_product+1
  8798  0649  3000               	movlw	0
  8799  064A  00BB               	movwf	___ftmul@f3_as_product+2
  8800  064B  3007               	movlw	7
  8801  064C  00B4               	movwf	??___ftmul
  8802  064D  0834               	movf	??___ftmul,w
  8803  064E  00BC               	movwf	___ftmul@cntr
  8804  064F                     l5841:	
  8805  064F  1C2E               	btfss	___ftmul@f1,0
  8806  0650  2E57               	goto	l5845
  8807  0651  0831               	movf	___ftmul@f2,w
  8808  0652  07B9               	addwf	___ftmul@f3_as_product,f
  8809  0653  0832               	movf	___ftmul@f2+1,w
  8810  0654  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8811  0655  0833               	movf	___ftmul@f2+2,w
  8812  0656  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8813  0657                     l5845:	
  8814  0657  3001               	movlw	1
  8815  0658                     u4405:	
  8816  0658  36B0               	lsrf	___ftmul@f1+2,f
  8817  0659  0CAF               	rrf	___ftmul@f1+1,f
  8818  065A  0CAE               	rrf	___ftmul@f1,f
  8819  065B  0B89               	decfsz	9,f
  8820  065C  2E58               	goto	u4405
  8821  065D  3001               	movlw	1
  8822  065E                     u4415:	
  8823  065E  35B1               	lslf	___ftmul@f2,f
  8824  065F  0DB2               	rlf	___ftmul@f2+1,f
  8825  0660  0DB3               	rlf	___ftmul@f2+2,f
  8826  0661  0B89               	decfsz	9,f
  8827  0662  2E5E               	goto	u4415
  8828  0663  3001               	movlw	1
  8829  0664  02BC               	subwf	___ftmul@cntr,f
  8830  0665  1D03               	btfss	3,2
  8831  0666  2E4F               	goto	l5841
  8832  0667  3009               	movlw	9
  8833  0668  00B4               	movwf	??___ftmul
  8834  0669  0834               	movf	??___ftmul,w
  8835  066A  00BC               	movwf	___ftmul@cntr
  8836  066B                     l5853:	
  8837  066B  1C2E               	btfss	___ftmul@f1,0
  8838  066C  2E73               	goto	l5857
  8839  066D  0831               	movf	___ftmul@f2,w
  8840  066E  07B9               	addwf	___ftmul@f3_as_product,f
  8841  066F  0832               	movf	___ftmul@f2+1,w
  8842  0670  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8843  0671  0833               	movf	___ftmul@f2+2,w
  8844  0672  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8845  0673                     l5857:	
  8846  0673  3001               	movlw	1
  8847  0674                     u4445:	
  8848  0674  36B0               	lsrf	___ftmul@f1+2,f
  8849  0675  0CAF               	rrf	___ftmul@f1+1,f
  8850  0676  0CAE               	rrf	___ftmul@f1,f
  8851  0677  0B89               	decfsz	9,f
  8852  0678  2E74               	goto	u4445
  8853  0679  3001               	movlw	1
  8854  067A                     u4455:	
  8855  067A  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8856  067B  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8857  067C  0CB9               	rrf	___ftmul@f3_as_product,f
  8858  067D  0B89               	decfsz	9,f
  8859  067E  2E7A               	goto	u4455
  8860  067F  3001               	movlw	1
  8861  0680  02BC               	subwf	___ftmul@cntr,f
  8862  0681  1D03               	btfss	3,2
  8863  0682  2E6B               	goto	l5853
  8864  0683  0839               	movf	___ftmul@f3_as_product,w
  8865  0684  00A0               	movwf	___ftpack@arg
  8866  0685  083A               	movf	___ftmul@f3_as_product+1,w
  8867  0686  00A1               	movwf	___ftpack@arg+1
  8868  0687  083B               	movf	___ftmul@f3_as_product+2,w
  8869  0688  00A2               	movwf	___ftpack@arg+2
  8870  0689  0838               	movf	___ftmul@exp,w
  8871  068A  00B4               	movwf	??___ftmul
  8872  068B  0834               	movf	??___ftmul,w
  8873  068C  00A3               	movwf	___ftpack@exp
  8874  068D  083D               	movf	___ftmul@sign,w
  8875  068E  00B5               	movwf	??___ftmul+1
  8876  068F  0835               	movf	??___ftmul+1,w
  8877  0690  00A4               	movwf	___ftpack@sign
  8878  0691  3188  2093         	fcall	___ftpack
  8879  0693  0020               	movlb	0	; select bank0
  8880  0694  0820               	movf	?___ftpack,w
  8881  0695  00AE               	movwf	?___ftmul
  8882  0696  0821               	movf	?___ftpack+1,w
  8883  0697  00AF               	movwf	?___ftmul+1
  8884  0698  0822               	movf	?___ftpack+2,w
  8885  0699  00B0               	movwf	?___ftmul+2
  8886  069A  0008               	return
  8887  069B                     __end_of___ftmul:	
  8888                           
  8889                           	psect	text41
  8890  0371                     __ptext41:	
  8891 ;; *************** function ___ftadd *****************
  8892 ;; Defined at:
  8893 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;  f1              3   30[BANK0 ] float 
  8896 ;;  f2              3   33[BANK0 ] float 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  exp1            1   42[BANK0 ] unsigned char 
  8899 ;;  exp2            1   41[BANK0 ] unsigned char 
  8900 ;;  sign            1   40[BANK0 ] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  3   30[BANK0 ] float 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:       13 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    6
  8917 ;; This function calls:
  8918 ;;		___ftpack
  8919 ;; This function is called by:
  8920 ;;		_getPercentValue
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           
  8925                           ;psect for function ___ftadd
  8926  0371                     ___ftadd:	
  8927                           
  8928                           ;incstack = 0
  8929                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8930  0371  0020               	movlb	0	; select bank0
  8931  0372  083E               	movf	___ftadd@f1,w
  8932  0373  00C4               	movwf	??___ftadd
  8933  0374  083F               	movf	___ftadd@f1+1,w
  8934  0375  00C5               	movwf	??___ftadd+1
  8935  0376  0840               	movf	___ftadd@f1+2,w
  8936  0377  00C6               	movwf	??___ftadd+2
  8937  0378  1003               	clrc
  8938  0379  0D45               	rlf	??___ftadd+1,w
  8939  037A  0D46               	rlf	??___ftadd+2,w
  8940  037B  00C7               	movwf	??___ftadd+3
  8941  037C  0847               	movf	??___ftadd+3,w
  8942  037D  00CA               	movwf	___ftadd@exp1
  8943  037E  0841               	movf	___ftadd@f2,w
  8944  037F  00C4               	movwf	??___ftadd
  8945  0380  0842               	movf	___ftadd@f2+1,w
  8946  0381  00C5               	movwf	??___ftadd+1
  8947  0382  0843               	movf	___ftadd@f2+2,w
  8948  0383  00C6               	movwf	??___ftadd+2
  8949  0384  1003               	clrc
  8950  0385  0D45               	rlf	??___ftadd+1,w
  8951  0386  0D46               	rlf	??___ftadd+2,w
  8952  0387  00C7               	movwf	??___ftadd+3
  8953  0388  0847               	movf	??___ftadd+3,w
  8954  0389  00C9               	movwf	___ftadd@exp2
  8955  038A  084A               	movf	___ftadd@exp1,w
  8956  038B  1903               	btfsc	3,2
  8957  038C  2B99               	goto	l5711
  8958  038D  0849               	movf	___ftadd@exp2,w
  8959  038E  024A               	subwf	___ftadd@exp1,w
  8960  038F  1803               	skipnc
  8961  0390  2BA0               	goto	l5715
  8962  0391  034A               	decf	___ftadd@exp1,w
  8963  0392  3AFF               	xorlw	255
  8964  0393  0749               	addwf	___ftadd@exp2,w
  8965  0394  00C4               	movwf	??___ftadd
  8966  0395  3019               	movlw	25
  8967  0396  0244               	subwf	??___ftadd,w
  8968  0397  1C03               	skipc
  8969  0398  2BA0               	goto	l5715
  8970  0399                     l5711:	
  8971  0399  0841               	movf	___ftadd@f2,w
  8972  039A  00BE               	movwf	?___ftadd
  8973  039B  0842               	movf	___ftadd@f2+1,w
  8974  039C  00BF               	movwf	?___ftadd+1
  8975  039D  0843               	movf	___ftadd@f2+2,w
  8976  039E  00C0               	movwf	?___ftadd+2
  8977  039F  0008               	return
  8978  03A0                     l5715:	
  8979  03A0  0849               	movf	___ftadd@exp2,w
  8980  03A1  1903               	btfsc	3,2
  8981  03A2  0008               	return
  8982  03A3  084A               	movf	___ftadd@exp1,w
  8983  03A4  0249               	subwf	___ftadd@exp2,w
  8984  03A5  1803               	skipnc
  8985  03A6  2BAF               	goto	l5721
  8986  03A7  0349               	decf	___ftadd@exp2,w
  8987  03A8  3AFF               	xorlw	255
  8988  03A9  074A               	addwf	___ftadd@exp1,w
  8989  03AA  00C4               	movwf	??___ftadd
  8990  03AB  3019               	movlw	25
  8991  03AC  0244               	subwf	??___ftadd,w
  8992  03AD  1803               	btfsc	3,0
  8993  03AE  0008               	return
  8994  03AF                     l5721:	
  8995  03AF  3006               	movlw	6
  8996  03B0  00C4               	movwf	??___ftadd
  8997  03B1  0844               	movf	??___ftadd,w
  8998  03B2  00C8               	movwf	___ftadd@sign
  8999  03B3  1BC0               	btfsc	___ftadd@f1+2,7
  9000  03B4  17C8               	bsf	___ftadd@sign,7
  9001  03B5  1BC3               	btfsc	___ftadd@f2+2,7
  9002  03B6  1748               	bsf	___ftadd@sign,6
  9003  03B7  17BF               	bsf	___ftadd@f1+1,7
  9004  03B8  30FF               	movlw	255
  9005  03B9  05BE               	andwf	___ftadd@f1,f
  9006  03BA  30FF               	movlw	255
  9007  03BB  05BF               	andwf	___ftadd@f1+1,f
  9008  03BC  3000               	movlw	0
  9009  03BD  05C0               	andwf	___ftadd@f1+2,f
  9010  03BE  17C2               	bsf	___ftadd@f2+1,7
  9011  03BF  30FF               	movlw	255
  9012  03C0  05C1               	andwf	___ftadd@f2,f
  9013  03C1  30FF               	movlw	255
  9014  03C2  05C2               	andwf	___ftadd@f2+1,f
  9015  03C3  3000               	movlw	0
  9016  03C4  05C3               	andwf	___ftadd@f2+2,f
  9017  03C5  0849               	movf	___ftadd@exp2,w
  9018  03C6  024A               	subwf	___ftadd@exp1,w
  9019  03C7  1803               	skipnc
  9020  03C8  2BEB               	goto	l5743
  9021  03C9                     l5733:	
  9022  03C9  3001               	movlw	1
  9023  03CA                     u4135:	
  9024  03CA  35C1               	lslf	___ftadd@f2,f
  9025  03CB  0DC2               	rlf	___ftadd@f2+1,f
  9026  03CC  0DC3               	rlf	___ftadd@f2+2,f
  9027  03CD  0B89               	decfsz	9,f
  9028  03CE  2BCA               	goto	u4135
  9029  03CF  3001               	movlw	1
  9030  03D0  02C9               	subwf	___ftadd@exp2,f
  9031  03D1  0849               	movf	___ftadd@exp2,w
  9032  03D2  064A               	xorwf	___ftadd@exp1,w
  9033  03D3  1903               	skipnz
  9034  03D4  2BE6               	goto	l5741
  9035  03D5  3001               	movlw	1
  9036  03D6  02C8               	subwf	___ftadd@sign,f
  9037  03D7  0848               	movf	___ftadd@sign,w
  9038  03D8  3907               	andlw	7
  9039  03D9  1903               	btfsc	3,2
  9040  03DA  2BE6               	goto	l5741
  9041  03DB  2BC9               	goto	l5733
  9042  03DC                     l5739:	
  9043  03DC  3001               	movlw	1
  9044  03DD                     u4165:	
  9045  03DD  36C0               	lsrf	___ftadd@f1+2,f
  9046  03DE  0CBF               	rrf	___ftadd@f1+1,f
  9047  03DF  0CBE               	rrf	___ftadd@f1,f
  9048  03E0  0B89               	decfsz	9,f
  9049  03E1  2BDD               	goto	u4165
  9050  03E2  3001               	movlw	1
  9051  03E3  00C4               	movwf	??___ftadd
  9052  03E4  0844               	movf	??___ftadd,w
  9053  03E5  07CA               	addwf	___ftadd@exp1,f
  9054  03E6                     l5741:	
  9055  03E6  084A               	movf	___ftadd@exp1,w
  9056  03E7  0649               	xorwf	___ftadd@exp2,w
  9057  03E8  1903               	btfsc	3,2
  9058  03E9  2C10               	goto	l3088
  9059  03EA  2BDC               	goto	l5739
  9060  03EB                     l5743:	
  9061  03EB  084A               	movf	___ftadd@exp1,w
  9062  03EC  0249               	subwf	___ftadd@exp2,w
  9063  03ED  1803               	skipnc
  9064  03EE  2C10               	goto	l3088
  9065  03EF                     l5745:	
  9066  03EF  3001               	movlw	1
  9067  03F0                     u4195:	
  9068  03F0  35BE               	lslf	___ftadd@f1,f
  9069  03F1  0DBF               	rlf	___ftadd@f1+1,f
  9070  03F2  0DC0               	rlf	___ftadd@f1+2,f
  9071  03F3  0B89               	decfsz	9,f
  9072  03F4  2BF0               	goto	u4195
  9073  03F5  3001               	movlw	1
  9074  03F6  02CA               	subwf	___ftadd@exp1,f
  9075  03F7  0849               	movf	___ftadd@exp2,w
  9076  03F8  064A               	xorwf	___ftadd@exp1,w
  9077  03F9  1903               	skipnz
  9078  03FA  2C0C               	goto	l5753
  9079  03FB  3001               	movlw	1
  9080  03FC  02C8               	subwf	___ftadd@sign,f
  9081  03FD  0848               	movf	___ftadd@sign,w
  9082  03FE  3907               	andlw	7
  9083  03FF  1903               	btfsc	3,2
  9084  0400  2C0C               	goto	l5753
  9085  0401  2BEF               	goto	l5745
  9086  0402                     l5751:	
  9087  0402  3001               	movlw	1
  9088  0403                     u4225:	
  9089  0403  36C3               	lsrf	___ftadd@f2+2,f
  9090  0404  0CC2               	rrf	___ftadd@f2+1,f
  9091  0405  0CC1               	rrf	___ftadd@f2,f
  9092  0406  0B89               	decfsz	9,f
  9093  0407  2C03               	goto	u4225
  9094  0408  3001               	movlw	1
  9095  0409  00C4               	movwf	??___ftadd
  9096  040A  0844               	movf	??___ftadd,w
  9097  040B  07C9               	addwf	___ftadd@exp2,f
  9098  040C                     l5753:	
  9099  040C  084A               	movf	___ftadd@exp1,w
  9100  040D  0649               	xorwf	___ftadd@exp2,w
  9101  040E  1D03               	skipz
  9102  040F  2C02               	goto	l5751
  9103  0410                     l3088:	
  9104  0410  1FC8               	btfss	___ftadd@sign,7
  9105  0411  2C22               	goto	l5757
  9106  0412  30FF               	movlw	255
  9107  0413  06BE               	xorwf	___ftadd@f1,f
  9108  0414  30FF               	movlw	255
  9109  0415  06BF               	xorwf	___ftadd@f1+1,f
  9110  0416  30FF               	movlw	255
  9111  0417  06C0               	xorwf	___ftadd@f1+2,f
  9112  0418  3001               	movlw	1
  9113  0419  07BE               	addwf	___ftadd@f1,f
  9114  041A  3000               	movlw	0
  9115  041B  1803               	skipnc
  9116  041C  3001               	movlw	1
  9117  041D  07BF               	addwf	___ftadd@f1+1,f
  9118  041E  3000               	movlw	0
  9119  041F  1803               	skipnc
  9120  0420  3001               	movlw	1
  9121  0421  07C0               	addwf	___ftadd@f1+2,f
  9122  0422                     l5757:	
  9123  0422  1F48               	btfss	___ftadd@sign,6
  9124  0423  2C34               	goto	l5761
  9125  0424  30FF               	movlw	255
  9126  0425  06C1               	xorwf	___ftadd@f2,f
  9127  0426  30FF               	movlw	255
  9128  0427  06C2               	xorwf	___ftadd@f2+1,f
  9129  0428  30FF               	movlw	255
  9130  0429  06C3               	xorwf	___ftadd@f2+2,f
  9131  042A  3001               	movlw	1
  9132  042B  07C1               	addwf	___ftadd@f2,f
  9133  042C  3000               	movlw	0
  9134  042D  1803               	skipnc
  9135  042E  3001               	movlw	1
  9136  042F  07C2               	addwf	___ftadd@f2+1,f
  9137  0430  3000               	movlw	0
  9138  0431  1803               	skipnc
  9139  0432  3001               	movlw	1
  9140  0433  07C3               	addwf	___ftadd@f2+2,f
  9141  0434                     l5761:	
  9142  0434  01C8               	clrf	___ftadd@sign
  9143  0435  083E               	movf	___ftadd@f1,w
  9144  0436  07C1               	addwf	___ftadd@f2,f
  9145  0437  083F               	movf	___ftadd@f1+1,w
  9146  0438  3DC2               	addwfc	___ftadd@f2+1,f
  9147  0439  0840               	movf	___ftadd@f1+2,w
  9148  043A  3DC3               	addwfc	___ftadd@f2+2,f
  9149  043B  1FC3               	btfss	___ftadd@f2+2,7
  9150  043C  2C4F               	goto	l5771
  9151  043D  30FF               	movlw	255
  9152  043E  06C1               	xorwf	___ftadd@f2,f
  9153  043F  30FF               	movlw	255
  9154  0440  06C2               	xorwf	___ftadd@f2+1,f
  9155  0441  30FF               	movlw	255
  9156  0442  06C3               	xorwf	___ftadd@f2+2,f
  9157  0443  3001               	movlw	1
  9158  0444  07C1               	addwf	___ftadd@f2,f
  9159  0445  3000               	movlw	0
  9160  0446  1803               	skipnc
  9161  0447  3001               	movlw	1
  9162  0448  07C2               	addwf	___ftadd@f2+1,f
  9163  0449  3000               	movlw	0
  9164  044A  1803               	skipnc
  9165  044B  3001               	movlw	1
  9166  044C  07C3               	addwf	___ftadd@f2+2,f
  9167  044D  01C8               	clrf	___ftadd@sign
  9168  044E  0AC8               	incf	___ftadd@sign,f
  9169  044F                     l5771:	
  9170  044F  0841               	movf	___ftadd@f2,w
  9171  0450  00A0               	movwf	___ftpack@arg
  9172  0451  0842               	movf	___ftadd@f2+1,w
  9173  0452  00A1               	movwf	___ftpack@arg+1
  9174  0453  0843               	movf	___ftadd@f2+2,w
  9175  0454  00A2               	movwf	___ftpack@arg+2
  9176  0455  084A               	movf	___ftadd@exp1,w
  9177  0456  00C4               	movwf	??___ftadd
  9178  0457  0844               	movf	??___ftadd,w
  9179  0458  00A3               	movwf	___ftpack@exp
  9180  0459  0848               	movf	___ftadd@sign,w
  9181  045A  00C5               	movwf	??___ftadd+1
  9182  045B  0845               	movf	??___ftadd+1,w
  9183  045C  00A4               	movwf	___ftpack@sign
  9184  045D  3188  2093         	fcall	___ftpack
  9185  045F  0020               	movlb	0	; select bank0
  9186  0460  0820               	movf	?___ftpack,w
  9187  0461  00BE               	movwf	?___ftadd
  9188  0462  0821               	movf	?___ftpack+1,w
  9189  0463  00BF               	movwf	?___ftadd+1
  9190  0464  0822               	movf	?___ftpack+2,w
  9191  0465  00C0               	movwf	?___ftadd+2
  9192  0466  0008               	return
  9193  0467                     __end_of___ftadd:	
  9194                           
  9195                           	psect	text42
  9196  1E42                     __ptext42:	
  9197 ;; *************** function _getBuz_GO *****************
  9198 ;; Defined at:
  9199 ;;		line 82 in file "../src/Buzzer_B1.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  i               2    4[BANK0 ] int 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  2    0[BANK0 ] int 
  9206 ;; Registers used:
  9207 ;;		wreg, status,2, status,0
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        6 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    5
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_setRF_Main
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _getBuz_GO
  9229  1E42                     _getBuz_GO:	
  9230                           
  9231                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9235  1E42  0021               	movlb	1	; select bank1
  9236  1E43  0C32               	rrf	_Buz1^(0+128),w
  9237  1E44  3901               	andlw	1
  9238  1E45  0020               	movlb	0	; select bank0
  9239  1E46  00A2               	movwf	??_getBuz_GO
  9240  1E47  01A3               	clrf	??_getBuz_GO+1
  9241  1E48  0822               	movf	??_getBuz_GO,w
  9242  1E49  00A4               	movwf	getBuz_GO@i
  9243  1E4A  0823               	movf	??_getBuz_GO+1,w
  9244  1E4B  00A5               	movwf	getBuz_GO@i+1
  9245                           
  9246                           ;Buzzer_B1.c: 84: return i;
  9247  1E4C  0825               	movf	getBuz_GO@i+1,w
  9248  1E4D  01A1               	clrf	?_getBuz_GO+1
  9249  1E4E  07A1               	addwf	?_getBuz_GO+1,f
  9250  1E4F  0824               	movf	getBuz_GO@i,w
  9251  1E50  01A0               	clrf	?_getBuz_GO
  9252  1E51  07A0               	addwf	?_getBuz_GO,f
  9253  1E52  0008               	return
  9254  1E53                     __end_of_getBuz_GO:	
  9255                           
  9256                           	psect	text43
  9257  1DB5                     __ptext43:	
  9258 ;; *************** function _RF_RxDisable *****************
  9259 ;; Defined at:
  9260 ;;		line 190 in file "../src/RF_Control_B1.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;		None               void
  9267 ;; Registers used:
  9268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;Total ram usage:        0 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    7
  9281 ;; This function calls:
  9282 ;;		_CC2500_WriteCommand
  9283 ;; This function is called by:
  9284 ;;		_setRF_Main
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           
  9289                           ;psect for function _RF_RxDisable
  9290  1DB5                     _RF_RxDisable:	
  9291                           
  9292                           ;RF_Control_B1.c: 191: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9296  1DB5  0021               	movlb	1	; select bank1
  9297  1DB6  18BE               	btfsc	_RF1^(0+128),1
  9298  1DB7  2DBA               	goto	l2283
  9299  1DB8  1DBE               	btfss	_RF1^(0+128),3
  9300  1DB9  0008               	return
  9301  1DBA                     l2283:	
  9302                           
  9303                           ;RF_Control_B1.c: 192: RF1.RxStatus = 0;
  9304  1DBA  11BE               	bcf	_RF1^(0+128),3
  9305                           
  9306                           ;RF_Control_B1.c: 193: RF1.ReceiveGO = 0;
  9307  1DBB  10BE               	bcf	_RF1^(0+128),1
  9308                           
  9309                           ;RF_Control_B1.c: 194: CC2500_WriteCommand(0x36);
  9310  1DBC  3036               	movlw	54
  9311  1DBD  319F  273B  319D   	fcall	_CC2500_WriteCommand
  9312                           
  9313                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x3A);
  9314  1DC0  303A               	movlw	58
  9315  1DC1  319F  273B         	fcall	_CC2500_WriteCommand
  9316  1DC3  0008               	return
  9317  1DC4                     __end_of_RF_RxDisable:	
  9318                           
  9319                           	psect	text44
  9320  08F4                     __ptext44:	
  9321 ;; *************** function _CC2500_TxData *****************
  9322 ;; Defined at:
  9323 ;;		line 32 in file "../src/CC2500_B1.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;		None
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9328 ;; Return value:  Size  Location     Type
  9329 ;;		None               void
  9330 ;; Registers used:
  9331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;Total ram usage:        2 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; Hardware stack levels required when called:    7
  9344 ;; This function calls:
  9345 ;;		_CC2500_WriteByte
  9346 ;;		_CC2500_WriteCommand
  9347 ;;		_Timeout_Counter
  9348 ;;		_set_TimeoutCleared
  9349 ;; This function is called by:
  9350 ;;		_setRF_Main
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _CC2500_TxData
  9356  08F4                     _CC2500_TxData:	
  9357                           
  9358                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9359                           ;CC2500_B1.c: 35: RC4 = 0;
  9360                           
  9361                           ;incstack = 0
  9362                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9363  08F4  0020               	movlb	0	; select bank0
  9364  08F5  120E               	bcf	14,4	;volatile
  9365                           
  9366                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9367  08F6  307F               	movlw	127
  9368  08F7  00A4               	movwf	??_CC2500_TxData
  9369  08F8  0824               	movf	??_CC2500_TxData,w
  9370  08F9  0021               	movlb	1	; select bank1
  9371  08FA  00D0               	movwf	_SPI0Buffer^(0+128)
  9372                           
  9373                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9374  08FB  28FF               	goto	l6619
  9375  08FC                     l6617:	
  9376                           
  9377                           ;CC2500_B1.c: 38: Timeout_Counter();
  9378  08FC  319E  26B0  3188   	fcall	_Timeout_Counter
  9379  08FF                     l6619:	
  9380  08FF  0020               	movlb	0	; select bank0
  9381  0900  1D0E               	btfss	14,2	;volatile
  9382  0901  2905               	goto	l6623
  9383  0902  0021               	movlb	1	; select bank1
  9384  0903  1D2F               	btfss	(_myMain^(0+128)+15),2
  9385  0904  28FC               	goto	l6617
  9386  0905                     l6623:	
  9387                           
  9388                           ;CC2500_B1.c: 39: };
  9389                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9390  0905  319C  24BC  3188   	fcall	_set_TimeoutCleared
  9391                           
  9392                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9393  0908  319F  2708  3188   	fcall	_CC2500_WriteByte
  9394                           
  9395                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9396  090B  0021               	movlb	1	; select bank1
  9397  090C  0851               	movf	_Tx_Length^(0+128),w
  9398  090D  0020               	movlb	0	; select bank0
  9399  090E  00A4               	movwf	??_CC2500_TxData
  9400  090F  0824               	movf	??_CC2500_TxData,w
  9401  0910  0021               	movlb	1	; select bank1
  9402  0911  00D0               	movwf	_SPI0Buffer^(0+128)
  9403                           
  9404                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9405  0912  319F  2708  3188   	fcall	_CC2500_WriteByte
  9406                           
  9407                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9408  0915  0020               	movlb	0	; select bank0
  9409  0916  01A5               	clrf	CC2500_TxData@loop_e
  9410  0917                     l6637:	
  9411  0917  0021               	movlb	1	; select bank1
  9412  0918  0851               	movf	_Tx_Length^(0+128),w
  9413  0919  0020               	movlb	0	; select bank0
  9414  091A  0225               	subwf	CC2500_TxData@loop_e,w
  9415  091B  1803               	btfsc	3,0
  9416  091C  2930               	goto	l283
  9417                           
  9418                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9419  091D  0825               	movf	CC2500_TxData@loop_e,w
  9420  091E  3E20               	addlw	_RF_Data& (0+255)
  9421  091F  0086               	movwf	6
  9422  0920  3001               	movlw	1	; select bank2/3
  9423  0921  0087               	movwf	7
  9424  0922  0801               	movf	1,w
  9425  0923  00A4               	movwf	??_CC2500_TxData
  9426  0924  0824               	movf	??_CC2500_TxData,w
  9427  0925  0021               	movlb	1	; select bank1
  9428  0926  00D0               	movwf	_SPI0Buffer^(0+128)
  9429                           
  9430                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9431  0927  319F  2708  3188   	fcall	_CC2500_WriteByte
  9432  092A  3001               	movlw	1
  9433  092B  0020               	movlb	0	; select bank0
  9434  092C  00A4               	movwf	??_CC2500_TxData
  9435  092D  0824               	movf	??_CC2500_TxData,w
  9436  092E  07A5               	addwf	CC2500_TxData@loop_e,f
  9437  092F  2917               	goto	l6637
  9438  0930                     l283:	
  9439                           
  9440                           ;CC2500_B1.c: 48: }
  9441                           ;CC2500_B1.c: 49: RC4 = 1;
  9442  0930  160E               	bsf	14,4	;volatile
  9443                           
  9444                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9445  0931  3035               	movlw	53
  9446  0932  319F  273B  3188   	fcall	_CC2500_WriteCommand
  9447                           
  9448                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9449  0935  2939               	goto	l6643
  9450  0936                     l6641:	
  9451                           
  9452                           ;CC2500_B1.c: 52: Timeout_Counter();
  9453  0936  319E  26B0  3188   	fcall	_Timeout_Counter
  9454  0939                     l6643:	
  9455  0939  0020               	movlb	0	; select bank0
  9456  093A  180D               	btfsc	13,0	;volatile
  9457  093B  293F               	goto	l6647
  9458  093C  0021               	movlb	1	; select bank1
  9459  093D  1D2F               	btfss	(_myMain^(0+128)+15),2
  9460  093E  2936               	goto	l6641
  9461  093F                     l6647:	
  9462                           
  9463                           ;CC2500_B1.c: 53: };
  9464                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9465  093F  319C  24BC  3188   	fcall	_set_TimeoutCleared
  9466                           
  9467                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9468  0942  2946               	goto	l6651
  9469  0943                     l6649:	
  9470                           
  9471                           ;CC2500_B1.c: 57: Timeout_Counter();
  9472  0943  319E  26B0  3188   	fcall	_Timeout_Counter
  9473  0946                     l6651:	
  9474  0946  0020               	movlb	0	; select bank0
  9475  0947  1C0D               	btfss	13,0	;volatile
  9476  0948  294C               	goto	l6655
  9477  0949  0021               	movlb	1	; select bank1
  9478  094A  1D2F               	btfss	(_myMain^(0+128)+15),2
  9479  094B  2943               	goto	l6649
  9480  094C                     l6655:	
  9481                           
  9482                           ;CC2500_B1.c: 58: };
  9483                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9484  094C  319C  24BC  3188   	fcall	_set_TimeoutCleared
  9485                           
  9486                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9487  094F  3036               	movlw	54
  9488  0950  319F  273B  3188   	fcall	_CC2500_WriteCommand
  9489                           
  9490                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9491  0953  303B               	movlw	59
  9492  0954  319F  273B         	fcall	_CC2500_WriteCommand
  9493                           
  9494                           ;CC2500_B1.c: 63: Transceive_OK = 1;
  9495  0956  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9496  0957  0008               	return
  9497  0958                     __end_of_CC2500_TxData:	
  9498                           
  9499                           	psect	text45
  9500  0CD2                     __ptext45:	
  9501 ;; *************** function _CC2500_RxData *****************
  9502 ;; Defined at:
  9503 ;;		line 69 in file "../src/CC2500_B1.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;		None
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;		None               void
  9510 ;; Registers used:
  9511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;Total ram usage:        2 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    7
  9524 ;; This function calls:
  9525 ;;		_CC2500_ReadByte
  9526 ;;		_CC2500_ReadStatus
  9527 ;;		_CC2500_WriteByte
  9528 ;;		_CC2500_WriteCommand
  9529 ;;		_Timeout_Counter
  9530 ;;		_set_TimeoutCleared
  9531 ;; This function is called by:
  9532 ;;		_setRF_Main
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _CC2500_RxData
  9538  0CD2                     _CC2500_RxData:	
  9539                           
  9540                           ;CC2500_B1.c: 70: unsigned char loop_f;
  9541                           ;CC2500_B1.c: 74: if (RB0 == 1)
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9545  0CD2  0020               	movlb	0	; select bank0
  9546  0CD3  180D               	btfsc	13,0	;volatile
  9547  0CD4  2CD9               	goto	l6669
  9548  0CD5  2CE2               	goto	l6675
  9549  0CD6                     l6667:	
  9550                           ;CC2500_B1.c: 75: {
  9551                           ;CC2500_B1.c: 76: while (RB0 == 1 && myMain.Timeout == 0) {
  9552                           
  9553                           
  9554                           ;CC2500_B1.c: 77: Timeout_Counter();
  9555  0CD6  319E  26B0  318C   	fcall	_Timeout_Counter
  9556  0CD9                     l6669:	
  9557  0CD9  0020               	movlb	0	; select bank0
  9558  0CDA  1C0D               	btfss	13,0	;volatile
  9559  0CDB  2CDF               	goto	l6673
  9560  0CDC  0021               	movlb	1	; select bank1
  9561  0CDD  1D2F               	btfss	(_myMain^(0+128)+15),2
  9562  0CDE  2CD6               	goto	l6667
  9563  0CDF                     l6673:	
  9564                           
  9565                           ;CC2500_B1.c: 78: };
  9566                           ;CC2500_B1.c: 79: set_TimeoutCleared();
  9567  0CDF  319C  24BC  318C   	fcall	_set_TimeoutCleared
  9568  0CE2                     l6675:	
  9569                           
  9570                           ;CC2500_B1.c: 80: }
  9571                           ;CC2500_B1.c: 82: CC2500_ReadStatus(0x3B);
  9572  0CE2  303B               	movlw	59
  9573  0CE3  3191  21AA  318C   	fcall	_CC2500_ReadStatus
  9574                           
  9575                           ;CC2500_B1.c: 83: if (s_data != 0) {
  9576  0CE6  0021               	movlb	1	; select bank1
  9577  0CE7  0854               	movf	_s_data^(0+128),w
  9578  0CE8  1903               	btfsc	3,2
  9579  0CE9  0008               	return
  9580                           
  9581                           ;CC2500_B1.c: 84: RC4 = 0;
  9582  0CEA  0020               	movlb	0	; select bank0
  9583  0CEB  120E               	bcf	14,4	;volatile
  9584                           
  9585                           ;CC2500_B1.c: 85: SPI0Buffer = 0x3F + 0xC0;
  9586  0CEC  30FF               	movlw	255
  9587  0CED  00A4               	movwf	??_CC2500_RxData
  9588  0CEE  0824               	movf	??_CC2500_RxData,w
  9589  0CEF  0021               	movlb	1	; select bank1
  9590  0CF0  00D0               	movwf	_SPI0Buffer^(0+128)
  9591                           
  9592                           ;CC2500_B1.c: 86: while (RC2 == 1 && myMain.Timeout == 0) {
  9593  0CF1  2CF8               	goto	l6685
  9594  0CF2                     l6687:	
  9595  0CF2  0021               	movlb	1	; select bank1
  9596  0CF3  192F               	btfsc	(_myMain^(0+128)+15),2
  9597  0CF4  2CFB               	goto	l308
  9598                           
  9599                           ;CC2500_B1.c: 87: Timeout_Counter();
  9600  0CF5  319E  26B0  318C   	fcall	_Timeout_Counter
  9601  0CF8                     l6685:	
  9602  0CF8  0020               	movlb	0	; select bank0
  9603  0CF9  190E               	btfsc	14,2	;volatile
  9604  0CFA  2CF2               	goto	l6687
  9605  0CFB                     l308:	
  9606                           
  9607                           ;CC2500_B1.c: 88: };
  9608                           ;CC2500_B1.c: 89: if (myMain.Timeout == 0) {
  9609  0CFB  0021               	movlb	1	; select bank1
  9610  0CFC  192F               	btfsc	(_myMain^(0+128)+15),2
  9611  0CFD  2D4B               	goto	l309
  9612                           
  9613                           ;CC2500_B1.c: 90: CC2500_WriteByte();
  9614  0CFE  319F  2708  318C   	fcall	_CC2500_WriteByte
  9615                           
  9616                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  9617  0D01  3190  2066  318C   	fcall	_CC2500_ReadByte
  9618                           
  9619                           ;CC2500_B1.c: 93: Rx_Length = SPI0Buffer;
  9620  0D04  0021               	movlb	1	; select bank1
  9621  0D05  0850               	movf	_SPI0Buffer^(0+128),w
  9622  0D06  0020               	movlb	0	; select bank0
  9623  0D07  00A4               	movwf	??_CC2500_RxData
  9624  0D08  0824               	movf	??_CC2500_RxData,w
  9625  0D09  0021               	movlb	1	; select bank1
  9626  0D0A  00CF               	movwf	_Rx_Length^(0+128)
  9627                           
  9628                           ;CC2500_B1.c: 94: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9629  0D0B  0020               	movlb	0	; select bank0
  9630  0D0C  01A5               	clrf	CC2500_RxData@loop_f
  9631  0D0D                     l6701:	
  9632  0D0D  0021               	movlb	1	; select bank1
  9633  0D0E  084F               	movf	_Rx_Length^(0+128),w
  9634  0D0F  0020               	movlb	0	; select bank0
  9635  0D10  0225               	subwf	CC2500_RxData@loop_f,w
  9636  0D11  1803               	btfsc	3,0
  9637  0D12  2D26               	goto	l6703
  9638                           
  9639                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9640  0D13  3190  2066  318C   	fcall	_CC2500_ReadByte
  9641                           
  9642                           ;CC2500_B1.c: 96: RF_Data[loop_f] = SPI0Buffer;
  9643  0D16  0021               	movlb	1	; select bank1
  9644  0D17  0850               	movf	_SPI0Buffer^(0+128),w
  9645  0D18  0020               	movlb	0	; select bank0
  9646  0D19  00A4               	movwf	??_CC2500_RxData
  9647  0D1A  0825               	movf	CC2500_RxData@loop_f,w
  9648  0D1B  3E20               	addlw	_RF_Data& (0+255)
  9649  0D1C  0086               	movwf	6
  9650  0D1D  3001               	movlw	1	; select bank2/3
  9651  0D1E  0087               	movwf	7
  9652  0D1F  0824               	movf	??_CC2500_RxData,w
  9653  0D20  0081               	movwf	1
  9654  0D21  3001               	movlw	1
  9655  0D22  00A4               	movwf	??_CC2500_RxData
  9656  0D23  0824               	movf	??_CC2500_RxData,w
  9657  0D24  07A5               	addwf	CC2500_RxData@loop_f,f
  9658  0D25  2D0D               	goto	l6701
  9659  0D26                     l6703:	
  9660                           
  9661                           ;CC2500_B1.c: 97: }
  9662                           ;CC2500_B1.c: 98: CC2500_ReadByte();
  9663  0D26  3190  2066  318C   	fcall	_CC2500_ReadByte
  9664                           
  9665                           ;CC2500_B1.c: 99: RSSI = SPI0Buffer;
  9666  0D29  0021               	movlb	1	; select bank1
  9667  0D2A  0850               	movf	_SPI0Buffer^(0+128),w
  9668  0D2B  0020               	movlb	0	; select bank0
  9669  0D2C  00A4               	movwf	??_CC2500_RxData
  9670  0D2D  0824               	movf	??_CC2500_RxData,w
  9671  0D2E  0021               	movlb	1	; select bank1
  9672  0D2F  00CE               	movwf	_RSSI^(0+128)
  9673                           
  9674                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9675  0D30  3190  2066  318C   	fcall	_CC2500_ReadByte
  9676                           
  9677                           ;CC2500_B1.c: 101: CRC = SPI0Buffer;
  9678  0D33  0021               	movlb	1	; select bank1
  9679  0D34  0850               	movf	_SPI0Buffer^(0+128),w
  9680  0D35  0020               	movlb	0	; select bank0
  9681  0D36  00A4               	movwf	??_CC2500_RxData
  9682  0D37  0824               	movf	??_CC2500_RxData,w
  9683  0D38  0021               	movlb	1	; select bank1
  9684  0D39  00C7               	movwf	_CRC^(0+128)
  9685                           
  9686                           ;CC2500_B1.c: 102: RC4 = 1;
  9687  0D3A  0020               	movlb	0	; select bank0
  9688  0D3B  160E               	bsf	14,4	;volatile
  9689                           
  9690                           ;CC2500_B1.c: 103: if (CRC & 0x80)
  9691  0D3C  0021               	movlb	1	; select bank1
  9692  0D3D  1BC7               	btfsc	_CRC^(0+128),7
  9693                           
  9694                           ;CC2500_B1.c: 104: Receive_OK = 1;
  9695  0D3E  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9696                           
  9697                           ;CC2500_B1.c: 106: CC2500_WriteCommand(0x36);
  9698  0D3F  3036               	movlw	54
  9699  0D40  319F  273B  318C   	fcall	_CC2500_WriteCommand
  9700                           
  9701                           ;CC2500_B1.c: 107: CC2500_WriteCommand(0x3A);
  9702  0D43  303A               	movlw	58
  9703  0D44  319F  273B  318C   	fcall	_CC2500_WriteCommand
  9704                           
  9705                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9706  0D47  0021               	movlb	1	; select bank1
  9707  0D48  11BE               	bcf	_RF1^(0+128),3
  9708                           
  9709                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9710  0D49  14BE               	bsf	_RF1^(0+128),1
  9711                           
  9712                           ;CC2500_B1.c: 110: } else {
  9713  0D4A  2D4D               	goto	l6721
  9714  0D4B                     l309:	
  9715                           
  9716                           ;CC2500_B1.c: 111: RC4 = 1;
  9717  0D4B  0020               	movlb	0	; select bank0
  9718  0D4C  160E               	bsf	14,4	;volatile
  9719  0D4D                     l6721:	
  9720                           
  9721                           ;CC2500_B1.c: 112: }
  9722                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9723  0D4D  319C  24BC         	fcall	_set_TimeoutCleared
  9724  0D4F  0021               	movlb	1	; select bank1
  9725  0D50  0008               	return
  9726  0D51                     __end_of_CC2500_RxData:	
  9727                           
  9728                           	psect	text46
  9729  11AA                     __ptext46:	
  9730 ;; *************** function _CC2500_ReadStatus *****************
  9731 ;; Defined at:
  9732 ;;		line 304 in file "../src/CC2500_B1.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;  status_addr     1    wreg     unsigned char 
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;		None               void
  9739 ;; Registers used:
  9740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        2 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    6
  9753 ;; This function calls:
  9754 ;;		_CC2500_ReadByte
  9755 ;;		_CC2500_WriteByte
  9756 ;;		_Timeout_Counter
  9757 ;;		_set_TimeoutCleared
  9758 ;; This function is called by:
  9759 ;;		_CC2500_RxData
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _CC2500_ReadStatus
  9765  11AA                     _CC2500_ReadStatus:	
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9769                           ;CC2500_ReadStatus@status_addr stored from wreg
  9770  11AA  0020               	movlb	0	; select bank0
  9771  11AB  00A3               	movwf	CC2500_ReadStatus@status_addr
  9772                           
  9773                           ;CC2500_B1.c: 305: RC4 = 0;
  9774  11AC  120E               	bcf	14,4	;volatile
  9775                           
  9776                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9777  11AD  0823               	movf	CC2500_ReadStatus@status_addr,w
  9778  11AE  3EC0               	addlw	192
  9779  11AF  00A2               	movwf	??_CC2500_ReadStatus
  9780  11B0  0822               	movf	??_CC2500_ReadStatus,w
  9781  11B1  0021               	movlb	1	; select bank1
  9782  11B2  00D0               	movwf	_SPI0Buffer^(0+128)
  9783                           
  9784                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9785  11B3  29B7               	goto	l6463
  9786  11B4                     l6461:	
  9787                           
  9788                           ;CC2500_B1.c: 309: Timeout_Counter();
  9789  11B4  319E  26B0  3191   	fcall	_Timeout_Counter
  9790  11B7                     l6463:	
  9791  11B7  0020               	movlb	0	; select bank0
  9792  11B8  1D0E               	btfss	14,2	;volatile
  9793  11B9  29BD               	goto	l6467
  9794  11BA  0021               	movlb	1	; select bank1
  9795  11BB  1D2F               	btfss	(_myMain^(0+128)+15),2
  9796  11BC  29B4               	goto	l6461
  9797  11BD                     l6467:	
  9798                           
  9799                           ;CC2500_B1.c: 310: };
  9800                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9801  11BD  319C  24BC  3191   	fcall	_set_TimeoutCleared
  9802                           
  9803                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9804  11C0  319F  2708  3191   	fcall	_CC2500_WriteByte
  9805                           
  9806                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9807  11C3  3190  2066         	fcall	_CC2500_ReadByte
  9808                           
  9809                           ;CC2500_B1.c: 315: RC4 = 1;
  9810  11C5  0020               	movlb	0	; select bank0
  9811  11C6  160E               	bsf	14,4	;volatile
  9812                           
  9813                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9814  11C7  0021               	movlb	1	; select bank1
  9815  11C8  0850               	movf	_SPI0Buffer^(0+128),w
  9816  11C9  0020               	movlb	0	; select bank0
  9817  11CA  00A2               	movwf	??_CC2500_ReadStatus
  9818  11CB  0822               	movf	??_CC2500_ReadStatus,w
  9819  11CC  0021               	movlb	1	; select bank1
  9820  11CD  00D4               	movwf	_s_data^(0+128)
  9821  11CE  0008               	return
  9822  11CF                     __end_of_CC2500_ReadStatus:	
  9823                           
  9824                           	psect	text47
  9825  1066                     __ptext47:	
  9826 ;; *************** function _CC2500_ReadByte *****************
  9827 ;; Defined at:
  9828 ;;		line 238 in file "../src/CC2500_B1.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;		None
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9833 ;; Return value:  Size  Location     Type
  9834 ;;		None               void
  9835 ;; Registers used:
  9836 ;;		wreg, status,2, status,0
  9837 ;; Tracked objects:
  9838 ;;		On entry : 0/0
  9839 ;;		On exit  : 0/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;Total ram usage:        2 bytes
  9847 ;; Hardware stack levels used:    1
  9848 ;; Hardware stack levels required when called:    5
  9849 ;; This function calls:
  9850 ;;		Nothing
  9851 ;; This function is called by:
  9852 ;;		_CC2500_RxData
  9853 ;;		_CC2500_ReadStatus
  9854 ;;		_CC2500_ReadREG
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           
  9859                           ;psect for function _CC2500_ReadByte
  9860  1066                     _CC2500_ReadByte:	
  9861                           
  9862                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9863                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9864                           
  9865                           ;incstack = 0
  9866                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9867  1066  0020               	movlb	0	; select bank0
  9868  1067  01A1               	clrf	CC2500_ReadByte@loop_b
  9869  1068                     L8:	
  9870  1068  3008               	movlw	8
  9871  1069  0221               	subwf	CC2500_ReadByte@loop_b,w
  9872  106A  1803               	btfsc	3,0
  9873  106B  0008               	return
  9874                           
  9875                           ;CC2500_B1.c: 241: RC1 = 1;
  9876  106C  148E               	bsf	14,1	;volatile
  9877                           
  9878                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9879  106D  1003               	clrc
  9880  106E  0021               	movlb	1	; select bank1
  9881  106F  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9882                           
  9883                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9884  1070  0020               	movlb	0	; select bank0
  9885  1071  1D0E               	btfss	14,2	;volatile
  9886  1072  2876               	goto	l6319
  9887                           
  9888                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9889  1073  0021               	movlb	1	; select bank1
  9890  1074  1450               	bsf	_SPI0Buffer^(0+128),0
  9891  1075  287C               	goto	l6321
  9892  1076                     l6319:	
  9893                           
  9894                           ;CC2500_B1.c: 245: else
  9895                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9896  1076  30FE               	movlw	254
  9897  1077  0020               	movlb	0	; select bank0
  9898  1078  00A0               	movwf	??_CC2500_ReadByte
  9899  1079  0820               	movf	??_CC2500_ReadByte,w
  9900  107A  0021               	movlb	1	; select bank1
  9901  107B  05D0               	andwf	_SPI0Buffer^(0+128),f
  9902  107C                     l6321:	
  9903                           
  9904                           ;CC2500_B1.c: 247: RC1 = 0;
  9905  107C  0020               	movlb	0	; select bank0
  9906  107D  108E               	bcf	14,1	;volatile
  9907  107E  3001               	movlw	1
  9908  107F  00A0               	movwf	??_CC2500_ReadByte
  9909  1080  0820               	movf	??_CC2500_ReadByte,w
  9910  1081  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9911  1082  2868               	goto	L8
  9912  1083                     __end_of_CC2500_ReadByte:	
  9913                           
  9914                           	psect	text48
  9915  1C9D                     __ptext48:	
  9916 ;; *************** function _RF_Initialization *****************
  9917 ;; Defined at:
  9918 ;;		line 9 in file "../src/RF_Control_B1.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;		None
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;		None
  9923 ;; Return value:  Size  Location     Type
  9924 ;;		None               void
  9925 ;; Registers used:
  9926 ;;		wreg, status,2, status,0, pclath, cstack
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;Total ram usage:        0 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    6
  9939 ;; This function calls:
  9940 ;;		_setRF_Initialization
  9941 ;; This function is called by:
  9942 ;;		_main
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _RF_Initialization
  9948  1C9D                     _RF_Initialization:	
  9949                           
  9950                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9951                           
  9952                           ;incstack = 0
  9953                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9954  1C9D  319C  24DB         	fcall	_setRF_Initialization
  9955  1C9F  0008               	return
  9956  1CA0                     __end_of_RF_Initialization:	
  9957                           
  9958                           	psect	text49
  9959  1CDB                     __ptext49:	
  9960 ;; *************** function _setRF_Initialization *****************
  9961 ;; Defined at:
  9962 ;;		line 43 in file "../src/RF_Control_B1.c"
  9963 ;; Parameters:    Size  Location     Type
  9964 ;;		None
  9965 ;; Auto vars:     Size  Location     Type
  9966 ;;		None
  9967 ;; Return value:  Size  Location     Type
  9968 ;;		None               void
  9969 ;; Registers used:
  9970 ;;		wreg
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;Total ram usage:        1 bytes
  9981 ;; Hardware stack levels used:    1
  9982 ;; Hardware stack levels required when called:    5
  9983 ;; This function calls:
  9984 ;;		Nothing
  9985 ;; This function is called by:
  9986 ;;		_RF_Initialization
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _setRF_Initialization
  9992  1CDB                     _setRF_Initialization:	
  9993                           
  9994                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _setRF_Initialization: [wreg]
  9998  1CDB  3015               	movlw	21
  9999  1CDC  0020               	movlb	0	; select bank0
 10000  1CDD  00A0               	movwf	??_setRF_Initialization
 10001  1CDE  0820               	movf	??_setRF_Initialization,w
 10002  1CDF  0021               	movlb	1	; select bank1
 10003  1CE0  00D1               	movwf	_Tx_Length^(0+128)
 10004  1CE1  0008               	return
 10005  1CE2                     __end_of_setRF_Initialization:	
 10006                           
 10007                           	psect	text50
 10008  1DA6                     __ptext50:	
 10009 ;; *************** function _Mcu_Initialization *****************
 10010 ;; Defined at:
 10011 ;;		line 30 in file "../src/MCU_B1.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;		None
 10014 ;; Auto vars:     Size  Location     Type
 10015 ;;		None
 10016 ;; Return value:  Size  Location     Type
 10017 ;;		None               void
 10018 ;; Registers used:
 10019 ;;		wreg, status,2, status,0, pclath, cstack
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;Total ram usage:        0 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:    6
 10032 ;; This function calls:
 10033 ;;		_ADC_Set
 10034 ;;		_Fosc_Set
 10035 ;;		_IOC_Set
 10036 ;;		_IO_Set
 10037 ;;		_TMR0_Set
 10038 ;; This function is called by:
 10039 ;;		_main
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           
 10044                           ;psect for function _Mcu_Initialization
 10045  1DA6                     _Mcu_Initialization:	
 10046                           
 10047                           ;MCU_B1.c: 32: Fosc_Set();
 10048                           
 10049                           ;incstack = 0
 10050                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10051  1DA6  319C  24B8  319D   	fcall	_Fosc_Set
 10052                           
 10053                           ;MCU_B1.c: 34: IO_Set();
 10054  1DA9  319E  26F0  319D   	fcall	_IO_Set
 10055                           
 10056                           ;MCU_B1.c: 36: TMR0_Set();
 10057  1DAC  319C  24E2  319D   	fcall	_TMR0_Set
 10058                           
 10059                           ;MCU_B1.c: 38: ;;
 10060                           ;MCU_B1.c: 40: ADC_Set();
 10061  1DAF  319C  24D4  319D   	fcall	_ADC_Set
 10062                           
 10063                           ;MCU_B1.c: 44: ;;
 10064                           ;MCU_B1.c: 46: IOC_Set();
 10065  1DB2  3187  27F3         	fcall	_IOC_Set
 10066  1DB4  0008               	return
 10067  1DB5                     __end_of_Mcu_Initialization:	
 10068                           
 10069                           	psect	text51
 10070  1CE2                     __ptext51:	
 10071 ;; *************** function _TMR0_Set *****************
 10072 ;; Defined at:
 10073 ;;		line 126 in file "../src/MCU_B1.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;		None
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;		None
 10078 ;; Return value:  Size  Location     Type
 10079 ;;		None               void
 10080 ;; Registers used:
 10081 ;;		wreg, status,2
 10082 ;; Tracked objects:
 10083 ;;		On entry : 0/0
 10084 ;;		On exit  : 0/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;Total ram usage:        0 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:    5
 10094 ;; This function calls:
 10095 ;;		Nothing
 10096 ;; This function is called by:
 10097 ;;		_Mcu_Initialization
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           
 10102                           ;psect for function _TMR0_Set
 10103  1CE2                     _TMR0_Set:	
 10104                           
 10105                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10106                           
 10107                           ;incstack = 0
 10108                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10109  1CE2  0021               	movlb	1	; select bank1
 10110  1CE3  0195               	clrf	21	;volatile
 10111                           
 10112                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10113  1CE4  3042               	movlw	66
 10114  1CE5  0020               	movlb	0	; select bank0
 10115  1CE6  0095               	movwf	21	;volatile
 10116                           
 10117                           ;MCU_B1.c: 130: TMR0IE = 1;
 10118  1CE7  168B               	bsf	11,5	;volatile
 10119                           
 10120                           ;MCU_B1.c: 131: GIE = 1;
 10121  1CE8  178B               	bsf	11,7	;volatile
 10122  1CE9  0008               	return
 10123  1CEA                     __end_of_TMR0_Set:	
 10124                           
 10125                           	psect	text52
 10126  1EF0                     __ptext52:	
 10127 ;; *************** function _IO_Set *****************
 10128 ;; Defined at:
 10129 ;;		line 60 in file "../src/MCU_B1.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg, status,2
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;Total ram usage:        0 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    5
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_Mcu_Initialization
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _IO_Set
 10159  1EF0                     _IO_Set:	
 10160                           
 10161                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10162                           
 10163                           ;incstack = 0
 10164                           ; Regs used in _IO_Set: [wreg+status,2]
 10165  1EF0  3077               	movlw	119
 10166  1EF1  0021               	movlb	1	; select bank1
 10167  1EF2  008C               	movwf	12	;volatile
 10168                           
 10169                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
 10170  1EF3  3005               	movlw	5
 10171  1EF4  008D               	movwf	13	;volatile
 10172                           
 10173                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10174  1EF5  300C               	movlw	12
 10175  1EF6  008E               	movwf	14	;volatile
 10176                           
 10177                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10178  1EF7  0022               	movlb	2	; select bank2
 10179  1EF8  018C               	clrf	12	;volatile
 10180                           
 10181                           ;MCU_B1.c: 92: LATB = 0b00000000;;
 10182  1EF9  018D               	clrf	13	;volatile
 10183                           
 10184                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10185  1EFA  018E               	clrf	14	;volatile
 10186                           
 10187                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
 10188  1EFB  3002               	movlw	2
 10189  1EFC  0023               	movlb	3	; select bank3
 10190  1EFD  008C               	movwf	12	;volatile
 10191                           
 10192                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10193  1EFE  018D               	clrf	13	;volatile
 10194                           
 10195                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10196  1EFF  018E               	clrf	14	;volatile
 10197                           
 10198                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10199  1F00  3077               	movlw	119
 10200  1F01  0020               	movlb	0	; select bank0
 10201  1F02  008C               	movwf	12	;volatile
 10202                           
 10203                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
 10204  1F03  3005               	movlw	5
 10205  1F04  008D               	movwf	13	;volatile
 10206                           
 10207                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10208  1F05  300C               	movlw	12
 10209  1F06  008E               	movwf	14	;volatile
 10210  1F07  0008               	return
 10211  1F08                     __end_of_IO_Set:	
 10212                           
 10213                           	psect	text53
 10214  07F3                     __ptext53:	
 10215 ;; *************** function _IOC_Set *****************
 10216 ;; Defined at:
 10217 ;;		line 263 in file "../src/MCU_B1.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;		None
 10220 ;; Auto vars:     Size  Location     Type
 10221 ;;		None
 10222 ;; Return value:  Size  Location     Type
 10223 ;;		None               void
 10224 ;; Registers used:
 10225 ;;		wreg, status,2
 10226 ;; Tracked objects:
 10227 ;;		On entry : 0/0
 10228 ;;		On exit  : 0/0
 10229 ;;		Unchanged: 0/0
 10230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;Total ram usage:        0 bytes
 10236 ;; Hardware stack levels used:    1
 10237 ;; Hardware stack levels required when called:    5
 10238 ;; This function calls:
 10239 ;;		Nothing
 10240 ;; This function is called by:
 10241 ;;		_Mcu_Initialization
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           
 10246                           ;psect for function _IOC_Set
 10247  07F3                     _IOC_Set:	
 10248                           
 10249                           ;MCU_B1.c: 264: WPUB2 = 0;
 10250                           
 10251                           ;incstack = 0
 10252                           ; Regs used in _IOC_Set: [wreg+status,2]
 10253  07F3  0024               	movlb	4	; select bank4
 10254  07F4  110D               	bcf	13,2	;volatile
 10255                           
 10256                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 10257  07F5  3004               	movlw	4
 10258  07F6  0027               	movlb	7	; select bank7
 10259  07F7  0094               	movwf	20	;volatile
 10260                           
 10261                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 10262  07F8  3004               	movlw	4
 10263  07F9  0095               	movwf	21	;volatile
 10264                           
 10265                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 10266  07FA  0196               	clrf	22	;volatile
 10267                           
 10268                           ;MCU_B1.c: 284: IOCIE = 1;
 10269  07FB  158B               	bsf	11,3	;volatile
 10270                           
 10271                           ;MCU_B1.c: 285: IOCIF = 0;
 10272  07FC  100B               	bcf	11,0	;volatile
 10273                           
 10274                           ;MCU_B1.c: 286: PEIE = 1;
 10275  07FD  170B               	bsf	11,6	;volatile
 10276                           
 10277                           ;MCU_B1.c: 287: GIE = 1;
 10278  07FE  178B               	bsf	11,7	;volatile
 10279  07FF  0008               	return
 10280  0800                     __end_of_IOC_Set:	
 10281                           
 10282                           	psect	text54
 10283  1CB8                     __ptext54:	
 10284 ;; *************** function _Fosc_Set *****************
 10285 ;; Defined at:
 10286 ;;		line 56 in file "../src/MCU_B1.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;		None
 10291 ;; Return value:  Size  Location     Type
 10292 ;;		None               void
 10293 ;; Registers used:
 10294 ;;		wreg
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;Total ram usage:        0 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    5
 10307 ;; This function calls:
 10308 ;;		Nothing
 10309 ;; This function is called by:
 10310 ;;		_Mcu_Initialization
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           
 10315                           ;psect for function _Fosc_Set
 10316  1CB8                     _Fosc_Set:	
 10317                           
 10318                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10319                           
 10320                           ;incstack = 0
 10321                           ; Regs used in _Fosc_Set: [wreg]
 10322  1CB8  3078               	movlw	120
 10323  1CB9  0021               	movlb	1	; select bank1
 10324  1CBA  0099               	movwf	25	;volatile
 10325  1CBB  0008               	return
 10326  1CBC                     __end_of_Fosc_Set:	
 10327                           
 10328                           	psect	text55
 10329  1CD4                     __ptext55:	
 10330 ;; *************** function _ADC_Set *****************
 10331 ;; Defined at:
 10332 ;;		line 309 in file "../src/MCU_B1.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;		None
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;		None
 10337 ;; Return value:  Size  Location     Type
 10338 ;;		None               void
 10339 ;; Registers used:
 10340 ;;		wreg
 10341 ;; Tracked objects:
 10342 ;;		On entry : 0/0
 10343 ;;		On exit  : 0/0
 10344 ;;		Unchanged: 0/0
 10345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;Total ram usage:        0 bytes
 10351 ;; Hardware stack levels used:    1
 10352 ;; Hardware stack levels required when called:    5
 10353 ;; This function calls:
 10354 ;;		Nothing
 10355 ;; This function is called by:
 10356 ;;		_Mcu_Initialization
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           
 10361                           ;psect for function _ADC_Set
 10362  1CD4                     _ADC_Set:	
 10363                           
 10364                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 10365                           
 10366                           ;incstack = 0
 10367                           ; Regs used in _ADC_Set: [wreg]
 10368  1CD4  30F2               	movlw	242
 10369  1CD5  0021               	movlb	1	; select bank1
 10370  1CD6  009E               	movwf	30	;volatile
 10371                           
 10372                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 10373  1CD7  30C0               	movlw	192
 10374  1CD8  0022               	movlb	2	; select bank2
 10375  1CD9  0097               	movwf	23	;volatile
 10376  1CDA  0008               	return
 10377  1CDB                     __end_of_ADC_Set:	
 10378                           
 10379                           	psect	text56
 10380  1E12                     __ptext56:	
 10381 ;; *************** function _LED_Main *****************
 10382 ;; Defined at:
 10383 ;;		line 47 in file "../src/LED_B1.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;		None
 10388 ;; Return value:  Size  Location     Type
 10389 ;;		None               void
 10390 ;; Registers used:
 10391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;Total ram usage:        0 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    7
 10404 ;; This function calls:
 10405 ;;		_setLED_Main
 10406 ;; This function is called by:
 10407 ;;		_main
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function _LED_Main
 10413  1E12                     _LED_Main:	
 10414                           
 10415                           ;LED_B1.c: 49: setLED_Main(1);
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10419  1E12  3001               	movlw	1
 10420  1E13  3196  2660  319E   	fcall	_setLED_Main
 10421                           
 10422                           ;LED_B1.c: 52: setLED_Main(2);
 10423  1E16  3002               	movlw	2
 10424  1E17  3196  2660  319E   	fcall	_setLED_Main
 10425                           
 10426                           ;LED_B1.c: 55: setLED_Main(3);
 10427  1E1A  3003               	movlw	3
 10428  1E1B  3196  2660  319E   	fcall	_setLED_Main
 10429                           
 10430                           ;LED_B1.c: 58: setLED_Main(99);
 10431  1E1E  3063               	movlw	99
 10432  1E1F  3196  2660         	fcall	_setLED_Main
 10433  1E21  0008               	return
 10434  1E22                     __end_of_LED_Main:	
 10435                           
 10436                           	psect	text57
 10437  1660                     __ptext57:	
 10438 ;; *************** function _setLED_Main *****************
 10439 ;; Defined at:
 10440 ;;		line 192 in file "../src/LED_B1.c"
 10441 ;; Parameters:    Size  Location     Type
 10442 ;;  led             1    wreg     unsigned char 
 10443 ;; Auto vars:     Size  Location     Type
 10444 ;;  led             1    3[BANK0 ] unsigned char 
 10445 ;; Return value:  Size  Location     Type
 10446 ;;		None               void
 10447 ;; Registers used:
 10448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10449 ;; Tracked objects:
 10450 ;;		On entry : 0/0
 10451 ;;		On exit  : 0/0
 10452 ;;		Unchanged: 0/0
 10453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;Total ram usage:        3 bytes
 10459 ;; Hardware stack levels used:    1
 10460 ;; Hardware stack levels required when called:    6
 10461 ;; This function calls:
 10462 ;;		_LedPointSelect
 10463 ;; This function is called by:
 10464 ;;		_LED_Main
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           
 10469                           ;psect for function _setLED_Main
 10470  1660                     _setLED_Main:	
 10471                           
 10472                           ;incstack = 0
 10473                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10474                           ;setLED_Main@led stored from wreg
 10475  1660  0020               	movlb	0	; select bank0
 10476  1661  00A3               	movwf	setLED_Main@led
 10477                           
 10478                           ;LED_B1.c: 193: LedPointSelect(led);
 10479  1662  0823               	movf	setLED_Main@led,w
 10480  1663  3192  22F5  3196   	fcall	_LedPointSelect
 10481                           
 10482                           ;LED_B1.c: 194: if (LED->GO == 1) {
 10483  1666  0021               	movlb	1	; select bank1
 10484  1667  0843               	movf	_LED^(0+128),w
 10485  1668  0086               	movwf	6
 10486  1669  0844               	movf	(_LED+1)^(0+128),w
 10487  166A  0087               	movwf	7
 10488  166B  1C81               	btfss	1,1
 10489  166C  0008               	return
 10490                           
 10491                           ;LED_B1.c: 195: LED->Time++;
 10492  166D  0843               	movf	_LED^(0+128),w
 10493  166E  0086               	movwf	6
 10494  166F  0844               	movf	(_LED+1)^(0+128),w
 10495  1670  0087               	movwf	7
 10496  1671  3141               	addfsr 1,1
 10497  1672  3001               	movlw	1
 10498  1673  0781               	addwf	1,f
 10499  1674  3141               	addfsr 1,1
 10500  1675  1803               	skipnc
 10501  1676  0A81               	incf	1,f
 10502                           
 10503                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 10504  1677  0843               	movf	_LED^(0+128),w
 10505  1678  0086               	movwf	6
 10506  1679  0844               	movf	(_LED+1)^(0+128),w
 10507  167A  0087               	movwf	7
 10508  167B  3141               	addfsr 1,1
 10509  167C  3F40               	moviw [0]fsr1
 10510  167D  0020               	movlb	0	; select bank0
 10511  167E  00A1               	movwf	??_setLED_Main
 10512  167F  3F41               	moviw [1]fsr1
 10513  1680  00A2               	movwf	??_setLED_Main+1
 10514  1681  3000               	movlw	0
 10515  1682  0222               	subwf	??_setLED_Main+1,w
 10516  1683  3032               	movlw	50
 10517  1684  1903               	skipnz
 10518  1685  0221               	subwf	??_setLED_Main,w
 10519  1686  1C03               	skipc
 10520  1687  0008               	return
 10521                           
 10522                           ;LED_B1.c: 197: LED->Time = 0;
 10523  1688  0021               	movlb	1	; select bank1
 10524  1689  0843               	movf	_LED^(0+128),w
 10525  168A  0086               	movwf	6
 10526  168B  0844               	movf	(_LED+1)^(0+128),w
 10527  168C  0087               	movwf	7
 10528  168D  3141               	addfsr 1,1
 10529  168E  3000               	movlw	0
 10530  168F  3FC0               	movwi [0]fsr1
 10531  1690  3FC1               	movwi [1]fsr1
 10532                           
 10533                           ;LED_B1.c: 199: if (led == 1) {
 10534  1691  0020               	movlb	0	; select bank0
 10535  1692  0823               	movf	setLED_Main@led,w
 10536  1693  3A01               	xorlw	1
 10537  1694  1D03               	skipz
 10538  1695  2E99               	goto	l8369
 10539                           
 10540                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
 10541  1696  3080               	movlw	128
 10542  1697  068E               	xorwf	14,f
 10543                           
 10544                           ;LED_B1.c: 201: }
 10545  1698  0008               	return
 10546  1699                     l8369:	
 10547                           
 10548                           ;LED_B1.c: 204: else if (led == 2) {
 10549  1699  0823               	movf	setLED_Main@led,w
 10550  169A  3A02               	xorlw	2
 10551  169B  1D03               	skipz
 10552  169C  2EA0               	goto	l8373
 10553                           
 10554                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
 10555  169D  3008               	movlw	8
 10556  169E  068C               	xorwf	12,f
 10557                           
 10558                           ;LED_B1.c: 206: }
 10559  169F  0008               	return
 10560  16A0                     l8373:	
 10561                           
 10562                           ;LED_B1.c: 209: else if (led == 3) {
 10563  16A0  0823               	movf	setLED_Main@led,w
 10564  16A1  3A03               	xorlw	3
 10565  16A2  1D03               	skipz
 10566  16A3  2EA7               	goto	l8377
 10567                           
 10568                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
 10569  16A4  3040               	movlw	64
 10570  16A5  068E               	xorwf	14,f
 10571                           
 10572                           ;LED_B1.c: 211: }
 10573  16A6  0008               	return
 10574  16A7                     l8377:	
 10575                           
 10576                           ;LED_B1.c: 214: else if (led == 99) {
 10577  16A7  0823               	movf	setLED_Main@led,w
 10578  16A8  3A63               	xorlw	99
 10579  16A9  1D03               	skipz
 10580  16AA  0008               	return
 10581                           
 10582                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 10583  16AB  3020               	movlw	32
 10584  16AC  068D               	xorwf	13,f
 10585  16AD  0008               	return
 10586  16AE                     __end_of_setLED_Main:	
 10587                           
 10588                           	psect	text58
 10589  1E02                     __ptext58:	
 10590 ;; *************** function _LED_Initialization *****************
 10591 ;; Defined at:
 10592 ;;		line 31 in file "../src/LED_B1.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;		None
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;		None               void
 10599 ;; Registers used:
 10600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10601 ;; Tracked objects:
 10602 ;;		On entry : 0/0
 10603 ;;		On exit  : 0/0
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;Total ram usage:        0 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; Hardware stack levels required when called:    8
 10613 ;; This function calls:
 10614 ;;		_setLED_Initialization
 10615 ;; This function is called by:
 10616 ;;		_main
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           
 10621                           ;psect for function _LED_Initialization
 10622  1E02                     _LED_Initialization:	
 10623                           
 10624                           ;LED_B1.c: 33: setLED_Initialization(1);
 10625                           
 10626                           ;incstack = 0
 10627                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10628  1E02  3001               	movlw	1
 10629  1E03  319E  2664  319E   	fcall	_setLED_Initialization
 10630                           
 10631                           ;LED_B1.c: 36: setLED_Initialization(2);
 10632  1E06  3002               	movlw	2
 10633  1E07  319E  2664  319E   	fcall	_setLED_Initialization
 10634                           
 10635                           ;LED_B1.c: 39: setLED_Initialization(3);
 10636  1E0A  3003               	movlw	3
 10637  1E0B  319E  2664  319E   	fcall	_setLED_Initialization
 10638                           
 10639                           ;LED_B1.c: 42: setLED_Initialization(99);
 10640  1E0E  3063               	movlw	99
 10641  1E0F  319E  2664         	fcall	_setLED_Initialization
 10642  1E11  0008               	return
 10643  1E12                     __end_of_LED_Initialization:	
 10644                           
 10645                           	psect	text59
 10646  1E64                     __ptext59:	
 10647 ;; *************** function _setLED_Initialization *****************
 10648 ;; Defined at:
 10649 ;;		line 63 in file "../src/LED_B1.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;  led             1    wreg     unsigned char 
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;  led             1    3[BANK0 ] unsigned char 
 10654 ;; Return value:  Size  Location     Type
 10655 ;;		None               void
 10656 ;; Registers used:
 10657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;Total ram usage:        1 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    7
 10670 ;; This function calls:
 10671 ;;		_LedPointSelect
 10672 ;;		_setLED
 10673 ;; This function is called by:
 10674 ;;		_LED_Initialization
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           
 10679                           ;psect for function _setLED_Initialization
 10680  1E64                     _setLED_Initialization:	
 10681                           
 10682                           ;incstack = 0
 10683                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10684                           ;setLED_Initialization@led stored from wreg
 10685  1E64  0020               	movlb	0	; select bank0
 10686  1E65  00A3               	movwf	setLED_Initialization@led
 10687                           
 10688                           ;LED_B1.c: 64: LedPointSelect(led);
 10689  1E66  0823               	movf	setLED_Initialization@led,w
 10690  1E67  3192  22F5  319E   	fcall	_LedPointSelect
 10691                           
 10692                           ;LED_B1.c: 65: LED->Enable = 1;
 10693  1E6A  0021               	movlb	1	; select bank1
 10694  1E6B  0843               	movf	_LED^(0+128),w
 10695  1E6C  0086               	movwf	6
 10696  1E6D  0844               	movf	(_LED+1)^(0+128),w
 10697  1E6E  0087               	movwf	7
 10698  1E6F  1401               	bsf	1,0
 10699                           
 10700                           ;LED_B1.c: 66: setLED(led, 0);
 10701  1E70  0020               	movlb	0	; select bank0
 10702  1E71  01A1               	clrf	setLED@command
 10703  1E72  0823               	movf	setLED_Initialization@led,w
 10704  1E73  318B  236B         	fcall	_setLED
 10705  1E75  0008               	return
 10706  1E76                     __end_of_setLED_Initialization:	
 10707                           
 10708                           	psect	text60
 10709  10A2                     __ptext60:	
 10710 ;; *************** function _Flash_Memory_Main *****************
 10711 ;; Defined at:
 10712 ;;		line 790 in file "../src/MCU_B1.c"
 10713 ;; Parameters:    Size  Location     Type
 10714 ;;		None
 10715 ;; Auto vars:     Size  Location     Type
 10716 ;;		None
 10717 ;; Return value:  Size  Location     Type
 10718 ;;		None               void
 10719 ;; Registers used:
 10720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10721 ;; Tracked objects:
 10722 ;;		On entry : 0/0
 10723 ;;		On exit  : 0/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;Total ram usage:        0 bytes
 10731 ;; Hardware stack levels used:    1
 10732 ;; Hardware stack levels required when called:    8
 10733 ;; This function calls:
 10734 ;;		_Flash_Memory_Modify
 10735 ;; This function is called by:
 10736 ;;		_main
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           
 10741                           ;psect for function _Flash_Memory_Main
 10742  10A2                     _Flash_Memory_Main:	
 10743                           
 10744                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 10745                           
 10746                           ;incstack = 0
 10747                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10748  10A2  0023               	movlb	3	; select bank3
 10749  10A3  1CC4               	btfss	(_Memory^(0+384)+36),1
 10750  10A4  0008               	return
 10751                           
 10752                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 10753  10A5  1C44               	btfss	(_Memory^(0+384)+36),0
 10754  10A6  28BF               	goto	l1417
 10755                           
 10756                           ;MCU_B1.c: 793: Memory.Time++;
 10757  10A7  3001               	movlw	1
 10758  10A8  07C2               	addwf	(_Memory^(0+384)+34),f
 10759  10A9  3000               	movlw	0
 10760  10AA  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 10761                           
 10762                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 10763  10AB  3022               	movlw	34
 10764  10AC  3EA0               	addlw	_Memory& (0+255)
 10765  10AD  0086               	movwf	6
 10766  10AE  3001               	movlw	1	; select bank3/4
 10767  10AF  0087               	movwf	7
 10768  10B0  3F40               	moviw [0]fsr1
 10769  10B1  3A19               	xorlw	25
 10770  10B2  1D03               	skipz
 10771  10B3  28B6               	goto	u7615
 10772  10B4  3F41               	moviw [1]fsr1
 10773  10B5  3A00               	xorlw	0
 10774  10B6                     u7615:	
 10775  10B6  1D03               	skipz
 10776  10B7  0008               	return
 10777                           
 10778                           ;MCU_B1.c: 795: {
 10779                           ;MCU_B1.c: 796: Memory.Time = 0;
 10780  10B8  01C2               	clrf	(_Memory^(0+384)+34)
 10781  10B9  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10782                           
 10783                           ;MCU_B1.c: 797: Memory.Modify = 0;
 10784  10BA  1044               	bcf	(_Memory^(0+384)+36),0
 10785                           
 10786                           ;MCU_B1.c: 798: Memory.GO = 0;
 10787  10BB  10C4               	bcf	(_Memory^(0+384)+36),1
 10788                           
 10789                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 10790  10BC  3194  24B3         	fcall	_Flash_Memory_Modify
 10791                           
 10792                           ;MCU_B1.c: 800: }
 10793                           ;MCU_B1.c: 801: } else {
 10794  10BE  0008               	return
 10795  10BF                     l1417:	
 10796                           
 10797                           ;MCU_B1.c: 802: Memory.GO = 0;
 10798  10BF  10C4               	bcf	(_Memory^(0+384)+36),1
 10799  10C0  0008               	return
 10800  10C1                     __end_of_Flash_Memory_Main:	
 10801                           
 10802                           	psect	text61
 10803  14B3                     __ptext61:	
 10804 ;; *************** function _Flash_Memory_Modify *****************
 10805 ;; Defined at:
 10806 ;;		line 859 in file "../src/MCU_B1.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;		None
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;  i               1    5[BANK0 ] unsigned char 
 10811 ;; Return value:  Size  Location     Type
 10812 ;;		None               void
 10813 ;; Registers used:
 10814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;Total ram usage:        2 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    7
 10827 ;; This function calls:
 10828 ;;		_Flash_Memory_Erasing
 10829 ;;		_Flash_Memory_Read
 10830 ;;		_Flash_Memory_Write
 10831 ;; This function is called by:
 10832 ;;		_Flash_Memory_Main
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           
 10837                           ;psect for function _Flash_Memory_Modify
 10838  14B3                     _Flash_Memory_Modify:	
 10839                           
 10840                           ;MCU_B1.c: 860: char i = 0;
 10841                           
 10842                           ;incstack = 0
 10843                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10844  14B3  0020               	movlb	0	; select bank0
 10845  14B4  01A5               	clrf	Flash_Memory_Modify@i
 10846                           
 10847                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 10848  14B5  01A5               	clrf	Flash_Memory_Modify@i
 10849  14B6  3020               	movlw	32
 10850  14B7  0225               	subwf	Flash_Memory_Modify@i,w
 10851  14B8  1803               	btfsc	3,0
 10852  14B9  2CCF               	goto	l7453
 10853  14BA                     l7447:	
 10854                           
 10855                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 10856  14BA  0825               	movf	Flash_Memory_Modify@i,w
 10857  14BB  319F  2755  3194   	fcall	_Flash_Memory_Read
 10858  14BE  0020               	movlb	0	; select bank0
 10859  14BF  00A4               	movwf	??_Flash_Memory_Modify
 10860  14C0  0825               	movf	Flash_Memory_Modify@i,w
 10861  14C1  3EA0               	addlw	_Memory& (0+255)
 10862  14C2  0086               	movwf	6
 10863  14C3  3001               	movlw	1	; select bank3/4
 10864  14C4  0087               	movwf	7
 10865  14C5  0824               	movf	??_Flash_Memory_Modify,w
 10866  14C6  0081               	movwf	1
 10867  14C7  3001               	movlw	1
 10868  14C8  00A4               	movwf	??_Flash_Memory_Modify
 10869  14C9  0824               	movf	??_Flash_Memory_Modify,w
 10870  14CA  07A5               	addwf	Flash_Memory_Modify@i,f
 10871  14CB  3020               	movlw	32
 10872  14CC  0225               	subwf	Flash_Memory_Modify@i,w
 10873  14CD  1C03               	skipc
 10874  14CE  2CBA               	goto	l7447
 10875  14CF                     l7453:	
 10876                           
 10877                           ;MCU_B1.c: 863: }
 10878                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 10879  14CF  086F               	movf	_product,w
 10880  14D0  0086               	movwf	6
 10881  14D1  3002               	movlw	2	; select bank4/5
 10882  14D2  0087               	movwf	7
 10883  14D3  3002               	movlw	2	; select bank4/5
 10884  14D4  3F4C               	moviw [12]fsr1
 10885  14D5  0023               	movlb	3	; select bank3
 10886  14D6  00A0               	movwf	_Memory^(0+384)
 10887                           
 10888                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 10889  14D7  0020               	movlb	0	; select bank0
 10890  14D8  086F               	movf	_product,w
 10891  14D9  0086               	movwf	6
 10892  14DA  3002               	movlw	2	; select bank4/5
 10893  14DB  0087               	movwf	7
 10894  14DC  3002               	movlw	2	; select bank4/5
 10895  14DD  3F4D               	moviw [13]fsr1
 10896  14DE  0023               	movlb	3	; select bank3
 10897  14DF  00A1               	movwf	(_Memory^(0+384)+1)
 10898                           
 10899                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 10900  14E0  0020               	movlb	0	; select bank0
 10901  14E1  086F               	movf	_product,w
 10902  14E2  0086               	movwf	6
 10903  14E3  3002               	movlw	2	; select bank4/5
 10904  14E4  0087               	movwf	7
 10905  14E5  3002               	movlw	2	; select bank4/5
 10906  14E6  3F4E               	moviw [14]fsr1
 10907  14E7  0023               	movlb	3	; select bank3
 10908  14E8  00A2               	movwf	(_Memory^(0+384)+2)
 10909                           
 10910                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 10911  14E9  1D44               	btfss	(_Memory^(0+384)+36),2
 10912  14EA  2CEF               	goto	l1439
 10913                           
 10914                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 10915  14EB  1144               	bcf	(_Memory^(0+384)+36),2
 10916                           
 10917                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 10918  14EC  0021               	movlb	1	; select bank1
 10919  14ED  12A0               	bcf	_myMain^(0+128),5
 10920                           
 10921                           ;MCU_B1.c: 875: myMain.First = 0;
 10922  14EE  13A0               	bcf	_myMain^(0+128),7
 10923  14EF                     l1439:	
 10924                           
 10925                           ;MCU_B1.c: 877: }
 10926                           ;MCU_B1.c: 878: GIE = 0;
 10927  14EF  138B               	bcf	11,7	;volatile
 10928                           
 10929                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 10930  14F0  319D  2546  3194   	fcall	_Flash_Memory_Erasing
 10931                           
 10932                           ;MCU_B1.c: 880: Flash_Memory_Write();
 10933  14F3  3193  2322         	fcall	_Flash_Memory_Write
 10934                           
 10935                           ;MCU_B1.c: 881: GIE = 1;
 10936  14F5  178B               	bsf	11,7	;volatile
 10937  14F6  0008               	return
 10938  14F7                     __end_of_Flash_Memory_Modify:	
 10939                           
 10940                           	psect	text62
 10941  1D46                     __ptext62:	
 10942 ;; *************** function _Flash_Memory_Erasing *****************
 10943 ;; Defined at:
 10944 ;;		line 848 in file "../src/MCU_B1.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;		None
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;		None
 10949 ;; Return value:  Size  Location     Type
 10950 ;;		None               void
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0, pclath, cstack
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;Total ram usage:        0 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    6
 10965 ;; This function calls:
 10966 ;;		_Flash_Memory_Unlock
 10967 ;; This function is called by:
 10968 ;;		_Flash_Memory_Modify
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           
 10973                           ;psect for function _Flash_Memory_Erasing
 10974  1D46                     _Flash_Memory_Erasing:	
 10975                           
 10976                           ;MCU_B1.c: 849: CFGS = 0;
 10977                           
 10978                           ;incstack = 0
 10979                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10980  1D46  0023               	movlb	3	; select bank3
 10981  1D47  1315               	bcf	21,6	;volatile
 10982                           
 10983                           ;MCU_B1.c: 850: PMADRH = 0x30;
 10984  1D48  3030               	movlw	48
 10985  1D49  0092               	movwf	18	;volatile
 10986                           
 10987                           ;MCU_B1.c: 851: PMADRL = 0x00;
 10988  1D4A  0191               	clrf	17	;volatile
 10989                           
 10990                           ;MCU_B1.c: 852: FREE = 1;
 10991  1D4B  1615               	bsf	21,4	;volatile
 10992                           
 10993                           ;MCU_B1.c: 853: WREN = 1;
 10994  1D4C  1515               	bsf	21,2	;volatile
 10995                           
 10996                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 10997  1D4D  319D  2502         	fcall	_Flash_Memory_Unlock
 10998                           
 10999                           ;MCU_B1.c: 855: WREN = 0;
 11000  1D4F  0023               	movlb	3	; select bank3
 11001  1D50  1115               	bcf	21,2	;volatile
 11002  1D51  0008               	return
 11003  1D52                     __end_of_Flash_Memory_Erasing:	
 11004                           
 11005                           	psect	text63
 11006  0467                     __ptext63:	
 11007 ;; *************** function _Flash_Memory_Initialization *****************
 11008 ;; Defined at:
 11009 ;;		line 749 in file "../src/MCU_B1.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;		None
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  i               1   62[BANK0 ] unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;		None               void
 11016 ;; Registers used:
 11017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;Total ram usage:        2 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    8
 11030 ;; This function calls:
 11031 ;;		_Flash_Memory_Read
 11032 ;;		_Flash_Memory_Write
 11033 ;;		_setPercentValue
 11034 ;; This function is called by:
 11035 ;;		_main
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           
 11040                           ;psect for function _Flash_Memory_Initialization
 11041  0467                     _Flash_Memory_Initialization:	
 11042                           
 11043                           ;MCU_B1.c: 750: char i = 0;
 11044                           
 11045                           ;incstack = 0
 11046                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11047  0467  0020               	movlb	0	; select bank0
 11048  0468  01DE               	clrf	Flash_Memory_Initialization@i
 11049                           
 11050                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 11051  0469  301F               	movlw	31
 11052  046A  319F  2755  3184   	fcall	_Flash_Memory_Read
 11053  046D  3AAA               	xorlw	170
 11054  046E  1D03               	skipz
 11055  046F  2CD9               	goto	l7801
 11056                           
 11057                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 11058  0470  3000               	movlw	0
 11059  0471  319F  2755  3184   	fcall	_Flash_Memory_Read
 11060  0474  0020               	movlb	0	; select bank0
 11061  0475  00DD               	movwf	??_Flash_Memory_Initialization
 11062  0476  086F               	movf	_product,w
 11063  0477  3E0C               	addlw	12
 11064  0478  0086               	movwf	6
 11065  0479  3002               	movlw	2	; select bank4/5
 11066  047A  0087               	movwf	7
 11067  047B  085D               	movf	??_Flash_Memory_Initialization,w
 11068  047C  0081               	movwf	1
 11069                           
 11070                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 11071  047D  3001               	movlw	1
 11072  047E  319F  2755  3184   	fcall	_Flash_Memory_Read
 11073  0481  0020               	movlb	0	; select bank0
 11074  0482  00DD               	movwf	??_Flash_Memory_Initialization
 11075  0483  086F               	movf	_product,w
 11076  0484  3E0D               	addlw	13
 11077  0485  0086               	movwf	6
 11078  0486  3002               	movlw	2	; select bank4/5
 11079  0487  0087               	movwf	7
 11080  0488  085D               	movf	??_Flash_Memory_Initialization,w
 11081  0489  0081               	movwf	1
 11082                           
 11083                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 11084  048A  3002               	movlw	2
 11085  048B  319F  2755  3184   	fcall	_Flash_Memory_Read
 11086  048E  0020               	movlb	0	; select bank0
 11087  048F  00DD               	movwf	??_Flash_Memory_Initialization
 11088  0490  086F               	movf	_product,w
 11089  0491  3E0E               	addlw	14
 11090  0492  0086               	movwf	6
 11091  0493  3002               	movlw	2	; select bank4/5
 11092  0494  0087               	movwf	7
 11093  0495  085D               	movf	??_Flash_Memory_Initialization,w
 11094  0496  0081               	movwf	1
 11095                           
 11096                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-95)*0.8)));
 11097  0497  3004               	movlw	4
 11098  0498  3194  24F7  3184   	fcall	_setPercentValue
 11099  049B  0020               	movlb	0	; select bank0
 11100  049C  00DD               	movwf	??_Flash_Memory_Initialization
 11101  049D  085D               	movf	??_Flash_Memory_Initialization,w
 11102  049E  00DE               	movwf	Flash_Memory_Initialization@i
 11103                           
 11104                           ;MCU_B1.c: 761: product->Data[21] = i;
 11105  049F  085E               	movf	Flash_Memory_Initialization@i,w
 11106  04A0  00DD               	movwf	??_Flash_Memory_Initialization
 11107  04A1  086F               	movf	_product,w
 11108  04A2  3E15               	addlw	21
 11109  04A3  0086               	movwf	6
 11110  04A4  3002               	movlw	2	; select bank4/5
 11111  04A5  0087               	movwf	7
 11112  04A6  085D               	movf	??_Flash_Memory_Initialization,w
 11113  04A7  0081               	movwf	1
 11114                           
 11115                           ;MCU_B1.c: 762: product->Data[22] = i;
 11116  04A8  085E               	movf	Flash_Memory_Initialization@i,w
 11117  04A9  00DD               	movwf	??_Flash_Memory_Initialization
 11118  04AA  086F               	movf	_product,w
 11119  04AB  3E16               	addlw	22
 11120  04AC  0086               	movwf	6
 11121  04AD  3002               	movlw	2	; select bank4/5
 11122  04AE  0087               	movwf	7
 11123  04AF  085D               	movf	??_Flash_Memory_Initialization,w
 11124  04B0  0081               	movwf	1
 11125                           
 11126                           ;MCU_B1.c: 763: product->Data[23] = i;
 11127  04B1  085E               	movf	Flash_Memory_Initialization@i,w
 11128  04B2  00DD               	movwf	??_Flash_Memory_Initialization
 11129  04B3  086F               	movf	_product,w
 11130  04B4  3E17               	addlw	23
 11131  04B5  0086               	movwf	6
 11132  04B6  3002               	movlw	2	; select bank4/5
 11133  04B7  0087               	movwf	7
 11134  04B8  085D               	movf	??_Flash_Memory_Initialization,w
 11135  04B9  0081               	movwf	1
 11136                           
 11137                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11138  04BA  086F               	movf	_product,w
 11139  04BB  3E0C               	addlw	12
 11140  04BC  0086               	movwf	6
 11141  04BD  3002               	movlw	2	; select bank4/5
 11142  04BE  0087               	movwf	7
 11143  04BF  0801               	movf	1,w
 11144  04C0  3AFF               	xorlw	255
 11145  04C1  1D03               	skipz
 11146  04C2  0008               	return
 11147  04C3  086F               	movf	_product,w
 11148  04C4  3E0D               	addlw	13
 11149  04C5  0086               	movwf	6
 11150  04C6  3002               	movlw	2	; select bank4/5
 11151  04C7  0087               	movwf	7
 11152  04C8  0801               	movf	1,w
 11153  04C9  3AFF               	xorlw	255
 11154  04CA  1D03               	skipz
 11155  04CB  0008               	return
 11156  04CC  086F               	movf	_product,w
 11157  04CD  3E0E               	addlw	14
 11158  04CE  0086               	movwf	6
 11159  04CF  3002               	movlw	2	; select bank4/5
 11160  04D0  0087               	movwf	7
 11161  04D1  0801               	movf	1,w
 11162  04D2  3AFF               	xorlw	255
 11163  04D3  1D03               	skipz
 11164  04D4  0008               	return
 11165                           
 11166                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 11167  04D5  0021               	movlb	1	; select bank1
 11168  04D6  16A0               	bsf	_myMain^(0+128),5
 11169                           
 11170                           ;MCU_B1.c: 767: myMain.First = 1;
 11171  04D7  17A0               	bsf	_myMain^(0+128),7
 11172                           
 11173                           ;MCU_B1.c: 768: }
 11174                           ;MCU_B1.c: 769: } else {
 11175  04D8  0008               	return
 11176  04D9                     l7801:	
 11177                           
 11178                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-95)*0.8)));
 11179  04D9  3004               	movlw	4
 11180  04DA  3194  24F7  3184   	fcall	_setPercentValue
 11181  04DD  0020               	movlb	0	; select bank0
 11182  04DE  00DD               	movwf	??_Flash_Memory_Initialization
 11183  04DF  085D               	movf	??_Flash_Memory_Initialization,w
 11184  04E0  00DE               	movwf	Flash_Memory_Initialization@i
 11185                           
 11186                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 11187  04E1  30FF               	movlw	255
 11188  04E2  00DD               	movwf	??_Flash_Memory_Initialization
 11189  04E3  085D               	movf	??_Flash_Memory_Initialization,w
 11190  04E4  0023               	movlb	3	; select bank3
 11191  04E5  00A0               	movwf	_Memory^(0+384)
 11192                           
 11193                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 11194  04E6  30FF               	movlw	255
 11195  04E7  0020               	movlb	0	; select bank0
 11196  04E8  00DD               	movwf	??_Flash_Memory_Initialization
 11197  04E9  085D               	movf	??_Flash_Memory_Initialization,w
 11198  04EA  0023               	movlb	3	; select bank3
 11199  04EB  00A1               	movwf	(_Memory^(0+384)+1)
 11200                           
 11201                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 11202  04EC  30FF               	movlw	255
 11203  04ED  0020               	movlb	0	; select bank0
 11204  04EE  00DD               	movwf	??_Flash_Memory_Initialization
 11205  04EF  085D               	movf	??_Flash_Memory_Initialization,w
 11206  04F0  0023               	movlb	3	; select bank3
 11207  04F1  00A2               	movwf	(_Memory^(0+384)+2)
 11208                           
 11209                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 11210  04F2  30FF               	movlw	255
 11211  04F3  0020               	movlb	0	; select bank0
 11212  04F4  00DD               	movwf	??_Flash_Memory_Initialization
 11213  04F5  085D               	movf	??_Flash_Memory_Initialization,w
 11214  04F6  0023               	movlb	3	; select bank3
 11215  04F7  00A3               	movwf	(_Memory^(0+384)+3)
 11216                           
 11217                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 11218  04F8  30FF               	movlw	255
 11219  04F9  0020               	movlb	0	; select bank0
 11220  04FA  00DD               	movwf	??_Flash_Memory_Initialization
 11221  04FB  085D               	movf	??_Flash_Memory_Initialization,w
 11222  04FC  0023               	movlb	3	; select bank3
 11223  04FD  00A4               	movwf	(_Memory^(0+384)+4)
 11224                           
 11225                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 11226  04FE  30FF               	movlw	255
 11227  04FF  0020               	movlb	0	; select bank0
 11228  0500  00DD               	movwf	??_Flash_Memory_Initialization
 11229  0501  085D               	movf	??_Flash_Memory_Initialization,w
 11230  0502  0023               	movlb	3	; select bank3
 11231  0503  00A5               	movwf	(_Memory^(0+384)+5)
 11232                           
 11233                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 11234  0504  30AA               	movlw	170
 11235  0505  0020               	movlb	0	; select bank0
 11236  0506  00DD               	movwf	??_Flash_Memory_Initialization
 11237  0507  085D               	movf	??_Flash_Memory_Initialization,w
 11238  0508  0023               	movlb	3	; select bank3
 11239  0509  00BF               	movwf	(_Memory^(0+384)+31)
 11240                           
 11241                           ;MCU_B1.c: 778: product->Data[21] = i;
 11242  050A  0020               	movlb	0	; select bank0
 11243  050B  085E               	movf	Flash_Memory_Initialization@i,w
 11244  050C  00DD               	movwf	??_Flash_Memory_Initialization
 11245  050D  086F               	movf	_product,w
 11246  050E  3E15               	addlw	21
 11247  050F  0086               	movwf	6
 11248  0510  3002               	movlw	2	; select bank4/5
 11249  0511  0087               	movwf	7
 11250  0512  085D               	movf	??_Flash_Memory_Initialization,w
 11251  0513  0081               	movwf	1
 11252                           
 11253                           ;MCU_B1.c: 779: product->Data[22] = i;
 11254  0514  085E               	movf	Flash_Memory_Initialization@i,w
 11255  0515  00DD               	movwf	??_Flash_Memory_Initialization
 11256  0516  086F               	movf	_product,w
 11257  0517  3E16               	addlw	22
 11258  0518  0086               	movwf	6
 11259  0519  3002               	movlw	2	; select bank4/5
 11260  051A  0087               	movwf	7
 11261  051B  085D               	movf	??_Flash_Memory_Initialization,w
 11262  051C  0081               	movwf	1
 11263                           
 11264                           ;MCU_B1.c: 780: product->Data[23] = i;
 11265  051D  085E               	movf	Flash_Memory_Initialization@i,w
 11266  051E  00DD               	movwf	??_Flash_Memory_Initialization
 11267  051F  086F               	movf	_product,w
 11268  0520  3E17               	addlw	23
 11269  0521  0086               	movwf	6
 11270  0522  3002               	movlw	2	; select bank4/5
 11271  0523  0087               	movwf	7
 11272  0524  085D               	movf	??_Flash_Memory_Initialization,w
 11273  0525  0081               	movwf	1
 11274                           
 11275                           ;MCU_B1.c: 781: GIE = 0;
 11276  0526  138B               	bcf	11,7	;volatile
 11277                           
 11278                           ;MCU_B1.c: 782: Flash_Memory_Write();
 11279  0527  3193  2322         	fcall	_Flash_Memory_Write
 11280                           
 11281                           ;MCU_B1.c: 783: GIE = 1;
 11282  0529  178B               	bsf	11,7	;volatile
 11283                           
 11284                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 11285  052A  0021               	movlb	1	; select bank1
 11286  052B  16A0               	bsf	_myMain^(0+128),5
 11287                           
 11288                           ;MCU_B1.c: 785: myMain.First = 1;
 11289  052C  17A0               	bsf	_myMain^(0+128),7
 11290  052D  0008               	return
 11291  052E                     __end_of_Flash_Memory_Initialization:	
 11292                           
 11293                           	psect	text64
 11294  1322                     __ptext64:	
 11295 ;; *************** function _Flash_Memory_Write *****************
 11296 ;; Defined at:
 11297 ;;		line 829 in file "../src/MCU_B1.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;		None
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  i               1    1[BANK0 ] unsigned char 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;		None               void
 11304 ;; Registers used:
 11305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;Total ram usage:        2 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    6
 11318 ;; This function calls:
 11319 ;;		_Flash_Memory_Unlock
 11320 ;; This function is called by:
 11321 ;;		_Flash_Memory_Initialization
 11322 ;;		_Flash_Memory_Modify
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           
 11327                           ;psect for function _Flash_Memory_Write
 11328  1322                     _Flash_Memory_Write:	
 11329                           
 11330                           ;MCU_B1.c: 830: char i = 0;
 11331                           
 11332                           ;incstack = 0
 11333                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11334  1322  0020               	movlb	0	; select bank0
 11335  1323  01A1               	clrf	Flash_Memory_Write@i
 11336                           
 11337                           ;MCU_B1.c: 831: CFGS = 0;
 11338  1324  0023               	movlb	3	; select bank3
 11339  1325  1315               	bcf	21,6	;volatile
 11340                           
 11341                           ;MCU_B1.c: 832: PMADRH = 0x30;
 11342  1326  3030               	movlw	48
 11343  1327  0092               	movwf	18	;volatile
 11344                           
 11345                           ;MCU_B1.c: 833: PMDATH = 0;
 11346  1328  0194               	clrf	20	;volatile
 11347                           
 11348                           ;MCU_B1.c: 834: FREE = 0;
 11349  1329  1215               	bcf	21,4	;volatile
 11350                           
 11351                           ;MCU_B1.c: 835: LWLO = 1;
 11352  132A  1695               	bsf	21,5	;volatile
 11353                           
 11354                           ;MCU_B1.c: 836: WREN = 1;
 11355  132B  1515               	bsf	21,2	;volatile
 11356                           
 11357                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 11358  132C  0020               	movlb	0	; select bank0
 11359  132D  01A1               	clrf	Flash_Memory_Write@i
 11360  132E  3020               	movlw	32
 11361  132F  0221               	subwf	Flash_Memory_Write@i,w
 11362  1330  1803               	btfsc	3,0
 11363  1331  2B4A               	goto	l1430
 11364  1332                     l6821:	
 11365                           
 11366                           ;MCU_B1.c: 838: PMADRL = i;
 11367  1332  0821               	movf	Flash_Memory_Write@i,w
 11368  1333  0023               	movlb	3	; select bank3
 11369  1334  0091               	movwf	17	;volatile
 11370                           
 11371                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 11372  1335  0020               	movlb	0	; select bank0
 11373  1336  0821               	movf	Flash_Memory_Write@i,w
 11374  1337  3EA0               	addlw	_Memory& (0+255)
 11375  1338  0086               	movwf	6
 11376  1339  3001               	movlw	1	; select bank3/4
 11377  133A  0087               	movwf	7
 11378  133B  0801               	movf	1,w
 11379  133C  0023               	movlb	3	; select bank3
 11380  133D  0093               	movwf	19	;volatile
 11381                           
 11382                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 11383  133E  319D  2502  3193   	fcall	_Flash_Memory_Unlock
 11384  1341  3001               	movlw	1
 11385  1342  0020               	movlb	0	; select bank0
 11386  1343  00A0               	movwf	??_Flash_Memory_Write
 11387  1344  0820               	movf	??_Flash_Memory_Write,w
 11388  1345  07A1               	addwf	Flash_Memory_Write@i,f
 11389  1346  3020               	movlw	32
 11390  1347  0221               	subwf	Flash_Memory_Write@i,w
 11391  1348  1C03               	skipc
 11392  1349  2B32               	goto	l6821
 11393  134A                     l1430:	
 11394                           
 11395                           ;MCU_B1.c: 841: }
 11396                           ;MCU_B1.c: 842: LWLO = 0;
 11397  134A  0023               	movlb	3	; select bank3
 11398  134B  1295               	bcf	21,5	;volatile
 11399                           
 11400                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 11401  134C  319D  2502         	fcall	_Flash_Memory_Unlock
 11402                           
 11403                           ;MCU_B1.c: 844: WREN = 0;
 11404  134E  0023               	movlb	3	; select bank3
 11405  134F  1115               	bcf	21,2	;volatile
 11406  1350  0008               	return
 11407  1351                     __end_of_Flash_Memory_Write:	
 11408                           
 11409                           	psect	text65
 11410  1D02                     __ptext65:	
 11411 ;; *************** function _Flash_Memory_Unlock *****************
 11412 ;; Defined at:
 11413 ;;		line 808 in file "../src/MCU_B1.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;		None
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;		None
 11418 ;; Return value:  Size  Location     Type
 11419 ;;		None               void
 11420 ;; Registers used:
 11421 ;;		wreg
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;Total ram usage:        0 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; Hardware stack levels required when called:    5
 11434 ;; This function calls:
 11435 ;;		Nothing
 11436 ;; This function is called by:
 11437 ;;		_Flash_Memory_Write
 11438 ;;		_Flash_Memory_Erasing
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           
 11443                           ;psect for function _Flash_Memory_Unlock
 11444  1D02                     _Flash_Memory_Unlock:	
 11445                           
 11446                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11450  1D02  3055               	movlw	85
 11451  1D03  0023               	movlb	3	; select bank3
 11452  1D04  0096               	movwf	22	;volatile
 11453                           
 11454                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 11455  1D05  30AA               	movlw	170
 11456  1D06  0096               	movwf	22	;volatile
 11457                           
 11458                           ;MCU_B1.c: 811: WR = 1;
 11459  1D07  1495               	bsf	21,1	;volatile
 11460                           
 11461                           ;MCU_B1.c: 812: __nop();
 11462  1D08  0000               	nop
 11463                           
 11464                           ;MCU_B1.c: 813: __nop();
 11465  1D09  0000               	nop
 11466  1D0A  0008               	return
 11467  1D0B                     __end_of_Flash_Memory_Unlock:	
 11468                           
 11469                           	psect	text66
 11470  1F55                     __ptext66:	
 11471 ;; *************** function _Flash_Memory_Read *****************
 11472 ;; Defined at:
 11473 ;;		line 817 in file "../src/MCU_B1.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  address         1    wreg     unsigned char 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  address         1    2[BANK0 ] unsigned char 
 11478 ;;  ret             1    3[BANK0 ] unsigned char 
 11479 ;;  i               1    1[BANK0 ] unsigned char 
 11480 ;; Return value:  Size  Location     Type
 11481 ;;                  1    wreg      unsigned char 
 11482 ;; Registers used:
 11483 ;;		wreg, status,2
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;Total ram usage:        4 bytes
 11494 ;; Hardware stack levels used:    1
 11495 ;; Hardware stack levels required when called:    5
 11496 ;; This function calls:
 11497 ;;		Nothing
 11498 ;; This function is called by:
 11499 ;;		_Flash_Memory_Initialization
 11500 ;;		_Flash_Memory_Modify
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           
 11505                           ;psect for function _Flash_Memory_Read
 11506  1F55                     _Flash_Memory_Read:	
 11507                           
 11508                           ;incstack = 0
 11509                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11510                           ;Flash_Memory_Read@address stored from wreg
 11511  1F55  0020               	movlb	0	; select bank0
 11512  1F56  00A2               	movwf	Flash_Memory_Read@address
 11513                           
 11514                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 11515  1F57  01A1               	clrf	Flash_Memory_Read@i
 11516  1F58  01A3               	clrf	Flash_Memory_Read@ret
 11517                           
 11518                           ;MCU_B1.c: 819: PMADRH = 0x30;
 11519  1F59  3030               	movlw	48
 11520  1F5A  0023               	movlb	3	; select bank3
 11521  1F5B  0092               	movwf	18	;volatile
 11522                           
 11523                           ;MCU_B1.c: 820: PMADRL = address;
 11524  1F5C  0020               	movlb	0	; select bank0
 11525  1F5D  0822               	movf	Flash_Memory_Read@address,w
 11526  1F5E  0023               	movlb	3	; select bank3
 11527  1F5F  0091               	movwf	17	;volatile
 11528                           
 11529                           ;MCU_B1.c: 821: CFGS = 0;
 11530  1F60  1315               	bcf	21,6	;volatile
 11531                           
 11532                           ;MCU_B1.c: 822: RD = 1;
 11533  1F61  1415               	bsf	21,0	;volatile
 11534                           
 11535                           ;MCU_B1.c: 823: i = PMDATH;
 11536  1F62  0814               	movf	20,w	;volatile
 11537  1F63  0020               	movlb	0	; select bank0
 11538  1F64  00A0               	movwf	??_Flash_Memory_Read
 11539  1F65  0820               	movf	??_Flash_Memory_Read,w
 11540  1F66  00A1               	movwf	Flash_Memory_Read@i
 11541                           
 11542                           ;MCU_B1.c: 824: ret = PMDATL;
 11543  1F67  0023               	movlb	3	; select bank3
 11544  1F68  0813               	movf	19,w	;volatile
 11545  1F69  0020               	movlb	0	; select bank0
 11546  1F6A  00A0               	movwf	??_Flash_Memory_Read
 11547  1F6B  0820               	movf	??_Flash_Memory_Read,w
 11548  1F6C  00A3               	movwf	Flash_Memory_Read@ret
 11549                           
 11550                           ;MCU_B1.c: 825: return ret;
 11551  1F6D  0823               	movf	Flash_Memory_Read@ret,w
 11552  1F6E  0008               	return
 11553  1F6F                     __end_of_Flash_Memory_Read:	
 11554                           
 11555                           	psect	text67
 11556  1D97                     __ptext67:	
 11557 ;; *************** function _DimmerLights_Main *****************
 11558 ;; Defined at:
 11559 ;;		line 407 in file "../src/Dimmer_B1.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;		None
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;		None               void
 11566 ;; Registers used:
 11567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        0 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; Hardware stack levels required when called:   11
 11580 ;; This function calls:
 11581 ;;		_DimmerLights_Close
 11582 ;;		_setDimmerLights_Main
 11583 ;; This function is called by:
 11584 ;;		_main
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           
 11589                           ;psect for function _DimmerLights_Main
 11590  1D97                     _DimmerLights_Main:	
 11591                           
 11592                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11593                           
 11594                           ;incstack = 0
 11595                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11596  1D97  3001               	movlw	1
 11597  1D98  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11598                           
 11599                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 11600  1D9B  3002               	movlw	2
 11601  1D9C  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11602                           
 11603                           ;Dimmer_B1.c: 418: setDimmerLights_Main(3);
 11604  1D9F  3003               	movlw	3
 11605  1DA0  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11606                           
 11607                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11608  1DA3  319E  269C         	fcall	_DimmerLights_Close
 11609  1DA5  0008               	return
 11610  1DA6                     __end_of_DimmerLights_Main:	
 11611                           
 11612                           	psect	text68
 11613  0EE2                     __ptext68:	
 11614 ;; *************** function _setDimmerLights_Main *****************
 11615 ;; Defined at:
 11616 ;;		line 425 in file "../src/Dimmer_B1.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  lights          1    wreg     unsigned char 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  lights          1   74[BANK0 ] unsigned char 
 11621 ;;  clear           1   73[BANK0 ] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;		None               void
 11624 ;; Registers used:
 11625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        6 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:   10
 11638 ;; This function calls:
 11639 ;;		_DimmerLightsPointSelect
 11640 ;;		_setBuz
 11641 ;;		_setDimmerLights
 11642 ;;		_setDimmerLights_Adj
 11643 ;; This function is called by:
 11644 ;;		_DimmerLights_Main
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           
 11649                           ;psect for function _setDimmerLights_Main
 11650  0EE2                     _setDimmerLights_Main:	
 11651                           
 11652                           ;incstack = 0
 11653                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11654                           ;setDimmerLights_Main@lights stored from wreg
 11655  0EE2  0020               	movlb	0	; select bank0
 11656  0EE3  00EA               	movwf	setDimmerLights_Main@lights
 11657                           
 11658                           ;Dimmer_B1.c: 426: char clear = 1;
 11659  0EE4  01E9               	clrf	setDimmerLights_Main@clear
 11660  0EE5  0AE9               	incf	setDimmerLights_Main@clear,f
 11661                           
 11662                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11663  0EE6  086A               	movf	setDimmerLights_Main@lights,w
 11664  0EE7  319F  276F  318E   	fcall	_DimmerLightsPointSelect
 11665                           
 11666                           ;Dimmer_B1.c: 430: if (lights == 1) {
 11667  0EEA  0020               	movlb	0	; select bank0
 11668  0EEB  086A               	movf	setDimmerLights_Main@lights,w
 11669  0EEC  3A01               	xorlw	1
 11670  0EED  1D03               	skipz
 11671  0EEE  2EFA               	goto	l8303
 11672                           
 11673                           ;Dimmer_B1.c: 431: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11674  0EEF  01E6               	clrf	_setDimmerLights_Main$2121
 11675  0EF0  0023               	movlb	3	; select bank3
 11676  0EF1  194E               	btfsc	(_DimmerLights2^(0+384)+9),2
 11677  0EF2  1D5D               	btfss	(_DimmerLights3^(0+384)+9),2
 11678  0EF3  2EF7               	goto	l8301
 11679  0EF4  0020               	movlb	0	; select bank0
 11680  0EF5  01E6               	clrf	_setDimmerLights_Main$2121
 11681  0EF6  0AE6               	incf	_setDimmerLights_Main$2121,f
 11682  0EF7                     l8301:	
 11683  0EF7  0020               	movlb	0	; select bank0
 11684  0EF8  0866               	movf	_setDimmerLights_Main$2121,w
 11685  0EF9  2F1B               	goto	L10
 11686  0EFA                     l8303:	
 11687                           ;Dimmer_B1.c: 432: } else if (lights == 2) {
 11688                           
 11689  0EFA  086A               	movf	setDimmerLights_Main@lights,w
 11690  0EFB  3A02               	xorlw	2
 11691  0EFC  1D03               	skipz
 11692  0EFD  2F0B               	goto	l8315
 11693                           
 11694                           ;Dimmer_B1.c: 433: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11695  0EFE  01E7               	clrf	_setDimmerLights_Main$2122
 11696  0EFF  0022               	movlb	2	; select bank2
 11697  0F00  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 11698  0F01  2F08               	goto	l8313
 11699  0F02  0023               	movlb	3	; select bank3
 11700  0F03  1D5D               	btfss	(_DimmerLights3^(0+384)+9),2
 11701  0F04  2F08               	goto	l8313
 11702  0F05  0020               	movlb	0	; select bank0
 11703  0F06  01E7               	clrf	_setDimmerLights_Main$2122
 11704  0F07  0AE7               	incf	_setDimmerLights_Main$2122,f
 11705  0F08                     l8313:	
 11706  0F08  0020               	movlb	0	; select bank0
 11707  0F09  0867               	movf	_setDimmerLights_Main$2122,w
 11708  0F0A  2F1B               	goto	L10
 11709  0F0B                     l8315:	
 11710                           ;Dimmer_B1.c: 434: } else if (lights == 3) {
 11711                           
 11712  0F0B  086A               	movf	setDimmerLights_Main@lights,w
 11713  0F0C  3A03               	xorlw	3
 11714  0F0D  1D03               	skipz
 11715  0F0E  2F1E               	goto	l8327
 11716                           
 11717                           ;Dimmer_B1.c: 435: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 11718  0F0F  01E8               	clrf	_setDimmerLights_Main$2123
 11719  0F10  0022               	movlb	2	; select bank2
 11720  0F11  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 11721  0F12  2F19               	goto	l8325
 11722  0F13  0023               	movlb	3	; select bank3
 11723  0F14  1D4E               	btfss	(_DimmerLights2^(0+384)+9),2
 11724  0F15  2F19               	goto	l8325
 11725  0F16  0020               	movlb	0	; select bank0
 11726  0F17  01E8               	clrf	_setDimmerLights_Main$2123
 11727  0F18  0AE8               	incf	_setDimmerLights_Main$2123,f
 11728  0F19                     l8325:	
 11729  0F19  0020               	movlb	0	; select bank0
 11730  0F1A  0868               	movf	_setDimmerLights_Main$2123,w
 11731  0F1B                     L10:	
 11732  0F1B  00E5               	movwf	??_setDimmerLights_Main
 11733  0F1C  0865               	movf	??_setDimmerLights_Main,w
 11734  0F1D  00E9               	movwf	setDimmerLights_Main@clear
 11735  0F1E                     l8327:	
 11736                           
 11737                           ;Dimmer_B1.c: 436: }
 11738                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11739  0F1E  087B               	movf	_DimmerLights,w
 11740  0F1F  3E08               	addlw	8
 11741  0F20  0086               	movwf	6
 11742  0F21  3001               	movlw	1	; select bank2/3
 11743  0F22  0087               	movwf	7
 11744  0F23  1D01               	btfss	1,2
 11745  0F24  2F42               	goto	l8337
 11746                           
 11747                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11748  0F25  0869               	movf	setDimmerLights_Main@clear,w
 11749  0F26  3A01               	xorlw	1
 11750  0F27  1D03               	skipz
 11751  0F28  0008               	return
 11752                           
 11753                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 11754  0F29  087B               	movf	_DimmerLights,w
 11755  0F2A  3E08               	addlw	8
 11756  0F2B  0086               	movwf	6
 11757  0F2C  3001               	movlw	1	; select bank2/3
 11758  0F2D  0087               	movwf	7
 11759  0F2E  1101               	bcf	1,2
 11760                           
 11761                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 11762  0F2F  087B               	movf	_DimmerLights,w
 11763  0F30  3E08               	addlw	8
 11764  0F31  0086               	movwf	6
 11765  0F32  3001               	movlw	1	; select bank2/3
 11766  0F33  0087               	movwf	7
 11767  0F34  1C81               	btfss	1,1
 11768  0F35  2F3C               	goto	l8335
 11769                           
 11770                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 11771  0F36  01A3               	clrf	setDimmerLights@status
 11772  0F37  0AA3               	incf	setDimmerLights@status,f
 11773  0F38  086A               	movf	setDimmerLights_Main@lights,w
 11774  0F39  318D  2551         	fcall	_setDimmerLights
 11775                           
 11776                           ;Dimmer_B1.c: 452: } else {
 11777  0F3B  0008               	return
 11778  0F3C                     l8335:	
 11779                           
 11780                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 11781  0F3C  0020               	movlb	0	; select bank0
 11782  0F3D  01A3               	clrf	setDimmerLights@status
 11783  0F3E  086A               	movf	setDimmerLights_Main@lights,w
 11784  0F3F  318D  2551         	fcall	_setDimmerLights
 11785                           
 11786                           ;Dimmer_B1.c: 454: }
 11787                           ;Dimmer_B1.c: 458: }
 11788                           ;Dimmer_B1.c: 459: } else {
 11789  0F41  0008               	return
 11790  0F42                     l8337:	
 11791                           
 11792                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 11793  0F42  087B               	movf	_DimmerLights,w
 11794  0F43  3E08               	addlw	8
 11795  0F44  0086               	movwf	6
 11796  0F45  3001               	movlw	1	; select bank2/3
 11797  0F46  0087               	movwf	7
 11798  0F47  1E01               	btfss	1,4
 11799  0F48  0008               	return
 11800                           
 11801                           ;Dimmer_B1.c: 461: if (clear == 1) {
 11802  0F49  0020               	movlb	0	; select bank0
 11803  0F4A  0869               	movf	setDimmerLights_Main@clear,w
 11804  0F4B  3A01               	xorlw	1
 11805  0F4C  1D03               	skipz
 11806  0F4D  0008               	return
 11807                           
 11808                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 11809  0F4E  087B               	movf	_DimmerLights,w
 11810  0F4F  3E08               	addlw	8
 11811  0F50  0086               	movwf	6
 11812  0F51  3001               	movlw	1	; select bank2/3
 11813  0F52  0087               	movwf	7
 11814  0F53  1201               	bcf	1,4
 11815                           
 11816                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 11817  0F54  087B               	movf	_DimmerLights,w
 11818  0F55  3E08               	addlw	8
 11819  0F56  0086               	movwf	6
 11820  0F57  3001               	movlw	1	; select bank2/3
 11821  0F58  0087               	movwf	7
 11822  0F59  1D81               	btfss	1,3
 11823  0F5A  2F6A               	goto	l8347
 11824                           
 11825                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 11826  0F5B  01E2               	clrf	setDimmerLights_Adj@status
 11827  0F5C  0AE2               	incf	setDimmerLights_Adj@status,f
 11828  0F5D  086A               	movf	setDimmerLights_Main@lights,w
 11829  0F5E  3193  23F3  318E   	fcall	_setDimmerLights_Adj
 11830                           
 11831                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 11832  0F61  3064               	movlw	100
 11833  0F62  0020               	movlb	0	; select bank0
 11834  0F63  00A9               	movwf	setBuz@time
 11835  0F64  3000               	movlw	0
 11836  0F65  00AA               	movwf	setBuz@time+1
 11837  0F66  3001               	movlw	1
 11838  0F67  3197  27A7         	fcall	_setBuz
 11839                           
 11840                           ;Dimmer_B1.c: 466: } else {
 11841  0F69  0008               	return
 11842  0F6A                     l8347:	
 11843                           
 11844                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 11845  0F6A  0020               	movlb	0	; select bank0
 11846  0F6B  01E2               	clrf	setDimmerLights_Adj@status
 11847  0F6C  086A               	movf	setDimmerLights_Main@lights,w
 11848  0F6D  3193  23F3         	fcall	_setDimmerLights_Adj
 11849  0F6F  0008               	return
 11850  0F70                     __end_of_setDimmerLights_Main:	
 11851                           
 11852                           	psect	text69
 11853  13F3                     __ptext69:	
 11854 ;; *************** function _setDimmerLights_Adj *****************
 11855 ;; Defined at:
 11856 ;;		line 646 in file "../src/Dimmer_B1.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;  lights          1    wreg     unsigned char 
 11859 ;;  status          1   66[BANK0 ] unsigned char 
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;  lights          1   68[BANK0 ] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;		None               void
 11864 ;; Registers used:
 11865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;Total ram usage:        3 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    9
 11878 ;; This function calls:
 11879 ;;		_DimmerLightsPointSelect
 11880 ;;		_setRF_DimmerLights
 11881 ;;		_setTxData
 11882 ;; This function is called by:
 11883 ;;		_setDimmerLights_Main
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _setDimmerLights_Adj
 11889  13F3                     _setDimmerLights_Adj:	
 11890                           
 11891                           ;incstack = 0
 11892                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11893                           ;setDimmerLights_Adj@lights stored from wreg
 11894  13F3  0020               	movlb	0	; select bank0
 11895  13F4  00E4               	movwf	setDimmerLights_Adj@lights
 11896                           
 11897                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 11898  13F5  0864               	movf	setDimmerLights_Adj@lights,w
 11899  13F6  319F  276F  3193   	fcall	_DimmerLightsPointSelect
 11900                           
 11901                           ;Dimmer_B1.c: 648: if (status == 1) {
 11902  13F9  0020               	movlb	0	; select bank0
 11903  13FA  0862               	movf	setDimmerLights_Adj@status,w
 11904  13FB  3A01               	xorlw	1
 11905  13FC  1D03               	skipz
 11906  13FD  2C09               	goto	l6775
 11907                           
 11908                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 11909  13FE  087B               	movf	_DimmerLights,w
 11910  13FF  0086               	movwf	6
 11911  1400  3001               	movlw	1	; select bank2/3
 11912  1401  0087               	movwf	7
 11913  1402  1581               	bsf	1,3
 11914                           
 11915                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 11916  1403  087B               	movf	_DimmerLights,w
 11917  1404  0086               	movwf	6
 11918  1405  3001               	movlw	1	; select bank2/3
 11919  1406  0087               	movwf	7
 11920  1407  1481               	bsf	1,1
 11921                           
 11922                           ;Dimmer_B1.c: 651: } else {
 11923  1408  0008               	return
 11924  1409                     l6775:	
 11925                           
 11926                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 11927  1409  087B               	movf	_DimmerLights,w
 11928  140A  0086               	movwf	6
 11929  140B  3001               	movlw	1	; select bank2/3
 11930  140C  0087               	movwf	7
 11931  140D  1D81               	btfss	1,3
 11932  140E  0008               	return
 11933                           
 11934                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 11935  140F  087B               	movf	_DimmerLights,w
 11936  1410  0086               	movwf	6
 11937  1411  3001               	movlw	1	; select bank2/3
 11938  1412  0087               	movwf	7
 11939  1413  1081               	bcf	1,1
 11940                           
 11941                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 11942  1414  087B               	movf	_DimmerLights,w
 11943  1415  0086               	movwf	6
 11944  1416  3001               	movlw	1	; select bank2/3
 11945  1417  0087               	movwf	7
 11946  1418  1181               	bcf	1,3
 11947                           
 11948                           ;Dimmer_B1.c: 656: ;;
 11949                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11950  1419  087B               	movf	_DimmerLights,w
 11951  141A  3E04               	addlw	4
 11952  141B  0086               	movwf	6
 11953  141C  3001               	movlw	1	; select bank2/3
 11954  141D  0087               	movwf	7
 11955  141E  0801               	movf	1,w
 11956  141F  00E3               	movwf	??_setDimmerLights_Adj
 11957  1420  087B               	movf	_DimmerLights,w
 11958  1421  3E05               	addlw	5
 11959  1422  0086               	movwf	6
 11960  1423  3001               	movlw	1	; select bank2/3
 11961  1424  0087               	movwf	7
 11962  1425  0863               	movf	??_setDimmerLights_Adj,w
 11963  1426  0081               	movwf	1
 11964                           
 11965                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 11966  1427  01DD               	clrf	setRF_DimmerLights@on
 11967  1428  0ADD               	incf	setRF_DimmerLights@on,f
 11968  1429  0864               	movf	setDimmerLights_Adj@lights,w
 11969  142A  318A  228E  3193   	fcall	_setRF_DimmerLights
 11970                           
 11971                           ;Dimmer_B1.c: 666: setTxData();
 11972  142D  3185  252E         	fcall	_setTxData
 11973  142F  0008               	return
 11974  1430                     __end_of_setDimmerLights_Adj:	
 11975                           
 11976                           	psect	text70
 11977  0D51                     __ptext70:	
 11978 ;; *************** function _setDimmerLights *****************
 11979 ;; Defined at:
 11980 ;;		line 593 in file "../src/Dimmer_B1.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;  lights          1    wreg     unsigned char 
 11983 ;;  status          1    3[BANK0 ] unsigned char 
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;  lights          1    5[BANK0 ] unsigned char 
 11986 ;; Return value:  Size  Location     Type
 11987 ;;		None               void
 11988 ;; Registers used:
 11989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11995 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;Total ram usage:        3 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    7
 12002 ;; This function calls:
 12003 ;;		_DimmerLightsPointSelect
 12004 ;;		_setLED
 12005 ;;		_setMemory_GO
 12006 ;; This function is called by:
 12007 ;;		_setDimmerLights_Main
 12008 ;;		_setControl_Lights_Table
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _setDimmerLights
 12014  0D51                     _setDimmerLights:	
 12015                           
 12016                           ;incstack = 0
 12017                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12018                           ;setDimmerLights@lights stored from wreg
 12019  0D51  0020               	movlb	0	; select bank0
 12020  0D52  00A5               	movwf	setDimmerLights@lights
 12021                           
 12022                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12023  0D53  0825               	movf	setDimmerLights@lights,w
 12024  0D54  319F  276F  318D   	fcall	_DimmerLightsPointSelect
 12025                           
 12026                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12027  0D57  0020               	movlb	0	; select bank0
 12028  0D58  0825               	movf	setDimmerLights@lights,w
 12029  0D59  00A4               	movwf	??_setDimmerLights
 12030  0D5A  0021               	movlb	1	; select bank1
 12031  0D5B  0A48               	incf	_Dimmer^(0+128),w
 12032  0D5C  0086               	movwf	6
 12033  0D5D  0187               	clrf	7
 12034  0D5E  0020               	movlb	0	; select bank0
 12035  0D5F  0824               	movf	??_setDimmerLights,w
 12036  0D60  0081               	movwf	1
 12037                           
 12038                           ;Dimmer_B1.c: 596: if (status == 1) {
 12039  0D61  0823               	movf	setDimmerLights@status,w
 12040  0D62  3A01               	xorlw	1
 12041  0D63  1D03               	skipz
 12042  0D64  2DA5               	goto	l8149
 12043                           
 12044                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12045  0D65  087B               	movf	_DimmerLights,w
 12046  0D66  0086               	movwf	6
 12047  0D67  3001               	movlw	1	; select bank2/3
 12048  0D68  0087               	movwf	7
 12049  0D69  1681               	bsf	1,5
 12050                           
 12051                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12052  0D6A  01A1               	clrf	setLED@command
 12053  0D6B  0825               	movf	setDimmerLights@lights,w
 12054  0D6C  318B  236B  318D   	fcall	_setLED
 12055                           
 12056                           ;Dimmer_B1.c: 600: ;;
 12057                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12058  0D6F  087B               	movf	_DimmerLights,w
 12059  0D70  0086               	movwf	6
 12060  0D71  3001               	movlw	1	; select bank2/3
 12061  0D72  0087               	movwf	7
 12062  0D73  1481               	bsf	1,1
 12063                           
 12064                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12065  0D74  3007               	movlw	7
 12066  0D75  0020               	movlb	0	; select bank0
 12067  0D76  00A4               	movwf	??_setDimmerLights
 12068  0D77  087B               	movf	_DimmerLights,w
 12069  0D78  3E02               	addlw	2
 12070  0D79  0086               	movwf	6
 12071  0D7A  3001               	movlw	1	; select bank2/3
 12072  0D7B  0087               	movwf	7
 12073  0D7C  0824               	movf	??_setDimmerLights,w
 12074  0D7D  0081               	movwf	1
 12075                           
 12076                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12077  0D7E  087B               	movf	_DimmerLights,w
 12078  0D7F  0086               	movwf	6
 12079  0D80  3001               	movlw	1	; select bank2/3
 12080  0D81  0087               	movwf	7
 12081  0D82  1B01               	btfsc	1,6
 12082  0D83  0008               	return
 12083                           
 12084                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12085  0D84  087B               	movf	_DimmerLights,w
 12086  0D85  0086               	movwf	6
 12087  0D86  3001               	movlw	1	; select bank2/3
 12088  0D87  0087               	movwf	7
 12089  0D88  1701               	bsf	1,6
 12090                           
 12091                           ;Dimmer_B1.c: 607: ;;
 12092                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12093  0D89  3000               	movlw	0
 12094  0D8A  319E  26DA         	fcall	_setMemory_GO
 12095                           
 12096                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12097  0D8C  087B               	movf	_DimmerLights,w
 12098  0D8D  3E05               	addlw	5
 12099  0D8E  0086               	movwf	6
 12100  0D8F  3001               	movlw	1	; select bank2/3
 12101  0D90  0087               	movwf	7
 12102  0D91  0801               	movf	1,w
 12103  0D92  0020               	movlb	0	; select bank0
 12104  0D93  00A4               	movwf	??_setDimmerLights
 12105  0D94  087B               	movf	_DimmerLights,w
 12106  0D95  3E04               	addlw	4
 12107  0D96  0086               	movwf	6
 12108  0D97  3001               	movlw	1	; select bank2/3
 12109  0D98  0087               	movwf	7
 12110  0D99  0824               	movf	??_setDimmerLights,w
 12111  0D9A  0081               	movwf	1
 12112                           
 12113                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-95)*0.8));
 12114  0D9B  3004               	movlw	4
 12115  0D9C  00A4               	movwf	??_setDimmerLights
 12116  0D9D  087B               	movf	_DimmerLights,w
 12117  0D9E  3E04               	addlw	4
 12118  0D9F  0086               	movwf	6
 12119  0DA0  3001               	movlw	1	; select bank2/3
 12120  0DA1  0087               	movwf	7
 12121  0DA2  0824               	movf	??_setDimmerLights,w
 12122  0DA3  0081               	movwf	1
 12123                           
 12124                           ;Dimmer_B1.c: 617: }
 12125                           ;Dimmer_B1.c: 618: } else {
 12126  0DA4  0008               	return
 12127  0DA5                     l8149:	
 12128                           
 12129                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12130  0DA5  087B               	movf	_DimmerLights,w
 12131  0DA6  0086               	movwf	6
 12132  0DA7  3001               	movlw	1	; select bank2/3
 12133  0DA8  0087               	movwf	7
 12134  0DA9  1281               	bcf	1,5
 12135                           
 12136                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12137  0DAA  087B               	movf	_DimmerLights,w
 12138  0DAB  3E06               	addlw	6
 12139  0DAC  0086               	movwf	6
 12140  0DAD  3001               	movlw	1	; select bank2/3
 12141  0DAE  0087               	movwf	7
 12142  0DAF  0801               	movf	1,w
 12143  0DB0  00A4               	movwf	??_setDimmerLights
 12144  0DB1  087B               	movf	_DimmerLights,w
 12145  0DB2  3E04               	addlw	4
 12146  0DB3  0086               	movwf	6
 12147  0DB4  3001               	movlw	1	; select bank2/3
 12148  0DB5  0087               	movwf	7
 12149  0DB6  0824               	movf	??_setDimmerLights,w
 12150  0DB7  0081               	movwf	1
 12151                           
 12152                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12153  0DB8  087B               	movf	_DimmerLights,w
 12154  0DB9  0086               	movwf	6
 12155  0DBA  3001               	movlw	1	; select bank2/3
 12156  0DBB  0087               	movwf	7
 12157  0DBC  1481               	bsf	1,1
 12158                           
 12159                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12160  0DBD  087B               	movf	_DimmerLights,w
 12161  0DBE  0086               	movwf	6
 12162  0DBF  3001               	movlw	1	; select bank2/3
 12163  0DC0  0087               	movwf	7
 12164  0DC1  1181               	bcf	1,3
 12165                           
 12166                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12167  0DC2  087B               	movf	_DimmerLights,w
 12168  0DC3  0086               	movwf	6
 12169  0DC4  3001               	movlw	1	; select bank2/3
 12170  0DC5  0087               	movwf	7
 12171  0DC6  1201               	bcf	1,4
 12172                           
 12173                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12174  0DC7  3007               	movlw	7
 12175  0DC8  00A4               	movwf	??_setDimmerLights
 12176  0DC9  087B               	movf	_DimmerLights,w
 12177  0DCA  3E02               	addlw	2
 12178  0DCB  0086               	movwf	6
 12179  0DCC  3001               	movlw	1	; select bank2/3
 12180  0DCD  0087               	movwf	7
 12181  0DCE  0824               	movf	??_setDimmerLights,w
 12182  0DCF  0081               	movwf	1
 12183  0DD0  0008               	return
 12184  0DD1                     __end_of_setDimmerLights:	
 12185                           
 12186                           	psect	text71
 12187  0B6B                     __ptext71:	
 12188 ;; *************** function _setLED *****************
 12189 ;; Defined at:
 12190 ;;		line 70 in file "../src/LED_B1.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  led             1    wreg     unsigned char 
 12193 ;;  command         1    1[BANK0 ] unsigned char 
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  led             1    2[BANK0 ] unsigned char 
 12196 ;; Return value:  Size  Location     Type
 12197 ;;		None               void
 12198 ;; Registers used:
 12199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12205 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;Total ram usage:        2 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; Hardware stack levels required when called:    6
 12212 ;; This function calls:
 12213 ;;		_LedPointSelect
 12214 ;; This function is called by:
 12215 ;;		_setDimmerLights_ERROR
 12216 ;;		_setDimmerLights
 12217 ;;		_setLED_Initialization
 12218 ;;		_setOverTemp_Exceptions
 12219 ;;		_setSw_Initialization
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           
 12224                           ;psect for function _setLED
 12225  0B6B                     _setLED:	
 12226                           
 12227                           ;incstack = 0
 12228                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12229                           ;setLED@led stored from wreg
 12230  0B6B  0020               	movlb	0	; select bank0
 12231  0B6C  00A2               	movwf	setLED@led
 12232                           
 12233                           ;LED_B1.c: 71: LedPointSelect(led);
 12234  0B6D  0822               	movf	setLED@led,w
 12235  0B6E  3192  22F5  318B   	fcall	_LedPointSelect
 12236                           
 12237                           ;LED_B1.c: 72: if (command == 0) {
 12238  0B71  0020               	movlb	0	; select bank0
 12239  0B72  08A1               	movf	setLED@command,f
 12240  0B73  1D03               	skipz
 12241  0B74  2B8D               	goto	l8083
 12242                           
 12243                           ;LED_B1.c: 74: if (led == 1) {
 12244  0B75  0822               	movf	setLED@led,w
 12245  0B76  3A01               	xorlw	1
 12246  0B77  1D03               	skipz
 12247  0B78  2B7B               	goto	l8071
 12248                           
 12249                           ;LED_B1.c: 78: RC7 = 1;
 12250  0B79  178E               	bsf	14,7	;volatile
 12251                           
 12252                           ;LED_B1.c: 80: }
 12253  0B7A  0008               	return
 12254  0B7B                     l8071:	
 12255                           
 12256                           ;LED_B1.c: 83: else if (led == 2) {
 12257  0B7B  0822               	movf	setLED@led,w
 12258  0B7C  3A02               	xorlw	2
 12259  0B7D  1D03               	skipz
 12260  0B7E  2B81               	goto	l8075
 12261                           
 12262                           ;LED_B1.c: 87: RA3 = 1;
 12263  0B7F  158C               	bsf	12,3	;volatile
 12264                           
 12265                           ;LED_B1.c: 89: }
 12266  0B80  0008               	return
 12267  0B81                     l8075:	
 12268                           
 12269                           ;LED_B1.c: 92: else if (led == 3) {
 12270  0B81  0822               	movf	setLED@led,w
 12271  0B82  3A03               	xorlw	3
 12272  0B83  1D03               	skipz
 12273  0B84  2B87               	goto	l8079
 12274                           
 12275                           ;LED_B1.c: 96: RC6 = 1;
 12276  0B85  170E               	bsf	14,6	;volatile
 12277                           
 12278                           ;LED_B1.c: 98: }
 12279  0B86  0008               	return
 12280  0B87                     l8079:	
 12281                           
 12282                           ;LED_B1.c: 101: else if (led == 99) {
 12283  0B87  0822               	movf	setLED@led,w
 12284  0B88  3A63               	xorlw	99
 12285  0B89  1D03               	skipz
 12286  0B8A  0008               	return
 12287                           
 12288                           ;LED_B1.c: 105: RB5 = 1;
 12289  0B8B  168D               	bsf	13,5	;volatile
 12290                           
 12291                           ;LED_B1.c: 107: }
 12292                           ;LED_B1.c: 109: } else if (command == 1) {
 12293  0B8C  0008               	return
 12294  0B8D                     l8083:	
 12295  0B8D  0821               	movf	setLED@command,w
 12296  0B8E  3A01               	xorlw	1
 12297  0B8F  1D03               	skipz
 12298  0B90  2BA9               	goto	l8101
 12299                           
 12300                           ;LED_B1.c: 111: if (led == 1) {
 12301  0B91  0822               	movf	setLED@led,w
 12302  0B92  3A01               	xorlw	1
 12303  0B93  1D03               	skipz
 12304  0B94  2B97               	goto	l8089
 12305                           
 12306                           ;LED_B1.c: 115: RC7 = 0;
 12307  0B95  138E               	bcf	14,7	;volatile
 12308                           
 12309                           ;LED_B1.c: 117: }
 12310  0B96  0008               	return
 12311  0B97                     l8089:	
 12312                           
 12313                           ;LED_B1.c: 120: else if (led == 2) {
 12314  0B97  0822               	movf	setLED@led,w
 12315  0B98  3A02               	xorlw	2
 12316  0B99  1D03               	skipz
 12317  0B9A  2B9D               	goto	l8093
 12318                           
 12319                           ;LED_B1.c: 124: RA3 = 0;
 12320  0B9B  118C               	bcf	12,3	;volatile
 12321                           
 12322                           ;LED_B1.c: 126: }
 12323  0B9C  0008               	return
 12324  0B9D                     l8093:	
 12325                           
 12326                           ;LED_B1.c: 129: else if (led == 3) {
 12327  0B9D  0822               	movf	setLED@led,w
 12328  0B9E  3A03               	xorlw	3
 12329  0B9F  1D03               	skipz
 12330  0BA0  2BA3               	goto	l8097
 12331                           
 12332                           ;LED_B1.c: 133: RC6 = 0;
 12333  0BA1  130E               	bcf	14,6	;volatile
 12334                           
 12335                           ;LED_B1.c: 135: }
 12336  0BA2  0008               	return
 12337  0BA3                     l8097:	
 12338                           
 12339                           ;LED_B1.c: 138: else if (led == 99) {
 12340  0BA3  0822               	movf	setLED@led,w
 12341  0BA4  3A63               	xorlw	99
 12342  0BA5  1D03               	skipz
 12343  0BA6  0008               	return
 12344                           
 12345                           ;LED_B1.c: 142: RB5 = 0;
 12346  0BA7  128D               	bcf	13,5	;volatile
 12347                           
 12348                           ;LED_B1.c: 144: }
 12349                           ;LED_B1.c: 146: } else if (command == 10) {
 12350  0BA8  0008               	return
 12351  0BA9                     l8101:	
 12352  0BA9  0821               	movf	setLED@command,w
 12353  0BAA  3A0A               	xorlw	10
 12354  0BAB  1D03               	skipz
 12355  0BAC  2BD4               	goto	l8121
 12356                           
 12357                           ;LED_B1.c: 147: LED->GO = 0;
 12358  0BAD  0021               	movlb	1	; select bank1
 12359  0BAE  0843               	movf	_LED^(0+128),w
 12360  0BAF  0086               	movwf	6
 12361  0BB0  0844               	movf	(_LED+1)^(0+128),w
 12362  0BB1  0087               	movwf	7
 12363  0BB2  1081               	bcf	1,1
 12364                           
 12365                           ;LED_B1.c: 148: LED->Time = 0;
 12366  0BB3  0843               	movf	_LED^(0+128),w
 12367  0BB4  0086               	movwf	6
 12368  0BB5  0844               	movf	(_LED+1)^(0+128),w
 12369  0BB6  0087               	movwf	7
 12370  0BB7  3141               	addfsr 1,1
 12371  0BB8  3000               	movlw	0
 12372  0BB9  3FC0               	movwi [0]fsr1
 12373  0BBA  3FC1               	movwi [1]fsr1
 12374                           
 12375                           ;LED_B1.c: 150: if (led == 1) {
 12376  0BBB  0020               	movlb	0	; select bank0
 12377  0BBC  0822               	movf	setLED@led,w
 12378  0BBD  3A01               	xorlw	1
 12379  0BBE  1D03               	skipz
 12380  0BBF  2BC2               	goto	l8109
 12381                           
 12382                           ;LED_B1.c: 154: RC7 = 1;
 12383  0BC0  178E               	bsf	14,7	;volatile
 12384                           
 12385                           ;LED_B1.c: 156: }
 12386  0BC1  0008               	return
 12387  0BC2                     l8109:	
 12388                           
 12389                           ;LED_B1.c: 159: else if (led == 2) {
 12390  0BC2  0822               	movf	setLED@led,w
 12391  0BC3  3A02               	xorlw	2
 12392  0BC4  1D03               	skipz
 12393  0BC5  2BC8               	goto	l8113
 12394                           
 12395                           ;LED_B1.c: 163: RA3 = 1;
 12396  0BC6  158C               	bsf	12,3	;volatile
 12397                           
 12398                           ;LED_B1.c: 165: }
 12399  0BC7  0008               	return
 12400  0BC8                     l8113:	
 12401                           
 12402                           ;LED_B1.c: 168: else if (led == 3) {
 12403  0BC8  0822               	movf	setLED@led,w
 12404  0BC9  3A03               	xorlw	3
 12405  0BCA  1D03               	skipz
 12406  0BCB  2BCE               	goto	l8117
 12407                           
 12408                           ;LED_B1.c: 172: RC6 = 1;
 12409  0BCC  170E               	bsf	14,6	;volatile
 12410                           
 12411                           ;LED_B1.c: 174: }
 12412  0BCD  0008               	return
 12413  0BCE                     l8117:	
 12414                           
 12415                           ;LED_B1.c: 177: else if (led == 99) {
 12416  0BCE  0822               	movf	setLED@led,w
 12417  0BCF  3A63               	xorlw	99
 12418  0BD0  1D03               	skipz
 12419  0BD1  0008               	return
 12420                           
 12421                           ;LED_B1.c: 181: RB5 = 1;
 12422  0BD2  168D               	bsf	13,5	;volatile
 12423                           
 12424                           ;LED_B1.c: 183: }
 12425                           ;LED_B1.c: 185: } else if (command == 11) {
 12426  0BD3  0008               	return
 12427  0BD4                     l8121:	
 12428  0BD4  0821               	movf	setLED@command,w
 12429  0BD5  3A0B               	xorlw	11
 12430  0BD6  1D03               	skipz
 12431  0BD7  0008               	return
 12432                           
 12433                           ;LED_B1.c: 186: LED->GO = 1;
 12434  0BD8  0021               	movlb	1	; select bank1
 12435  0BD9  0843               	movf	_LED^(0+128),w
 12436  0BDA  0086               	movwf	6
 12437  0BDB  0844               	movf	(_LED+1)^(0+128),w
 12438  0BDC  0087               	movwf	7
 12439  0BDD  1481               	bsf	1,1
 12440  0BDE  0008               	return
 12441  0BDF                     __end_of_setLED:	
 12442                           
 12443                           	psect	text72
 12444  12F5                     __ptext72:	
 12445 ;; *************** function _LedPointSelect *****************
 12446 ;; Defined at:
 12447 ;;		line 7 in file "../src/LED_B1.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  led             1    wreg     unsigned char 
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;  led             1    0[BANK0 ] unsigned char 
 12452 ;; Return value:  Size  Location     Type
 12453 ;;		None               void
 12454 ;; Registers used:
 12455 ;;		wreg, status,2, status,0
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        1 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:    5
 12468 ;; This function calls:
 12469 ;;		Nothing
 12470 ;; This function is called by:
 12471 ;;		_setLED_Initialization
 12472 ;;		_setLED
 12473 ;;		_setLED_Main
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           
 12478                           ;psect for function _LedPointSelect
 12479  12F5                     _LedPointSelect:	
 12480                           
 12481                           ;incstack = 0
 12482                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 12483                           ;LedPointSelect@led stored from wreg
 12484  12F5  0020               	movlb	0	; select bank0
 12485  12F6  00A0               	movwf	LedPointSelect@led
 12486                           
 12487                           ;LED_B1.c: 9: if (led == 1) {
 12488  12F7  0820               	movf	LedPointSelect@led,w
 12489  12F8  3A01               	xorlw	1
 12490  12F9  1D03               	skipz
 12491  12FA  2B01               	goto	l8051
 12492                           
 12493                           ;LED_B1.c: 10: LED = &VarLED1;
 12494  12FB  3064               	movlw	low _VarLED1
 12495  12FC  0021               	movlb	1	; select bank1
 12496  12FD  00C3               	movwf	_LED^(0+128)
 12497  12FE  3001               	movlw	high _VarLED1
 12498  12FF  00C4               	movwf	(_LED+1)^(0+128)
 12499                           
 12500                           ;LED_B1.c: 11: }
 12501  1300  0008               	return
 12502  1301                     l8051:	
 12503                           
 12504                           ;LED_B1.c: 14: else if (led == 2) {
 12505  1301  0020               	movlb	0	; select bank0
 12506  1302  0820               	movf	LedPointSelect@led,w
 12507  1303  3A02               	xorlw	2
 12508  1304  1D03               	skipz
 12509  1305  2B0C               	goto	l8055
 12510                           
 12511                           ;LED_B1.c: 15: LED = &VarLED2;
 12512  1306  3068               	movlw	low _VarLED2
 12513  1307  0021               	movlb	1	; select bank1
 12514  1308  00C3               	movwf	_LED^(0+128)
 12515  1309  3001               	movlw	high _VarLED2
 12516  130A  00C4               	movwf	(_LED+1)^(0+128)
 12517                           
 12518                           ;LED_B1.c: 16: }
 12519  130B  0008               	return
 12520  130C                     l8055:	
 12521                           
 12522                           ;LED_B1.c: 19: else if (led == 3) {
 12523  130C  0020               	movlb	0	; select bank0
 12524  130D  0820               	movf	LedPointSelect@led,w
 12525  130E  3A03               	xorlw	3
 12526  130F  1D03               	skipz
 12527  1310  2B17               	goto	l8059
 12528                           
 12529                           ;LED_B1.c: 20: LED = &VarLED3;
 12530  1311  306C               	movlw	low _VarLED3
 12531  1312  0021               	movlb	1	; select bank1
 12532  1313  00C3               	movwf	_LED^(0+128)
 12533  1314  3001               	movlw	high _VarLED3
 12534  1315  00C4               	movwf	(_LED+1)^(0+128)
 12535                           
 12536                           ;LED_B1.c: 21: }
 12537  1316  0008               	return
 12538  1317                     l8059:	
 12539                           
 12540                           ;LED_B1.c: 24: else if (led == 99) {
 12541  1317  0020               	movlb	0	; select bank0
 12542  1318  0820               	movf	LedPointSelect@led,w
 12543  1319  3A63               	xorlw	99
 12544  131A  1D03               	skipz
 12545  131B  0008               	return
 12546                           
 12547                           ;LED_B1.c: 25: LED = &VarErrLED;
 12548  131C  30E3               	movlw	low _VarErrLED
 12549  131D  0021               	movlb	1	; select bank1
 12550  131E  00C3               	movwf	_LED^(0+128)
 12551  131F  3000               	movlw	high _VarErrLED
 12552  1320  00C4               	movwf	(_LED+1)^(0+128)
 12553  1321  0008               	return
 12554  1322                     __end_of_LedPointSelect:	
 12555                           
 12556                           	psect	text73
 12557  1E9C                     __ptext73:	
 12558 ;; *************** function _DimmerLights_Close *****************
 12559 ;; Defined at:
 12560 ;;		line 396 in file "../src/Dimmer_B1.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;		None
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;		None
 12565 ;; Return value:  Size  Location     Type
 12566 ;;		None               void
 12567 ;; Registers used:
 12568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;Total ram usage:        0 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    6
 12581 ;; This function calls:
 12582 ;;		_getDimmerLights_StatusFlag
 12583 ;;		_setMemory_GO
 12584 ;; This function is called by:
 12585 ;;		_DimmerLights_Main
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           
 12590                           ;psect for function _DimmerLights_Close
 12591  1E9C                     _DimmerLights_Close:	
 12592                           
 12593                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12594                           
 12595                           ;incstack = 0
 12596                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12597  1E9C  0021               	movlb	1	; select bank1
 12598  1E9D  0848               	movf	_Dimmer^(0+128),w
 12599  1E9E  0086               	movwf	6
 12600  1E9F  0187               	clrf	7
 12601  1EA0  1C01               	btfss	1,0
 12602  1EA1  0008               	return
 12603                           
 12604                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12605  1EA2  0848               	movf	_Dimmer^(0+128),w
 12606  1EA3  0086               	movwf	6
 12607  1EA4  0187               	clrf	7
 12608  1EA5  1001               	bcf	1,0
 12609                           
 12610                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12611  1EA6  319E  2688  319E   	fcall	_getDimmerLights_StatusFlag
 12612  1EA9  3800               	iorlw	0
 12613  1EAA  1D03               	skipz
 12614  1EAB  0008               	return
 12615                           
 12616                           ;Dimmer_B1.c: 400: ;;
 12617                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12618  1EAC  3001               	movlw	1
 12619  1EAD  319E  26DA         	fcall	_setMemory_GO
 12620  1EAF  0008               	return
 12621  1EB0                     __end_of_DimmerLights_Close:	
 12622                           
 12623                           	psect	text74
 12624  1EDA                     __ptext74:	
 12625 ;; *************** function _setMemory_GO *****************
 12626 ;; Defined at:
 12627 ;;		line 885 in file "../src/MCU_B1.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;  command         1    wreg     unsigned char 
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;  command         1    2[BANK0 ] unsigned char 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;		None               void
 12634 ;; Registers used:
 12635 ;;		wreg, status,2, status,0
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;Total ram usage:        3 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    5
 12648 ;; This function calls:
 12649 ;;		Nothing
 12650 ;; This function is called by:
 12651 ;;		_DimmerLights_Close
 12652 ;;		_setDimmerLights
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           
 12657                           ;psect for function _setMemory_GO
 12658  1EDA                     _setMemory_GO:	
 12659                           
 12660                           ;incstack = 0
 12661                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 12662                           ;setMemory_GO@command stored from wreg
 12663  1EDA  0020               	movlb	0	; select bank0
 12664  1EDB  00A2               	movwf	setMemory_GO@command
 12665                           
 12666                           ;MCU_B1.c: 886: Memory.GO = command;
 12667  1EDC  0822               	movf	setMemory_GO@command,w
 12668  1EDD  0023               	movlb	3	; select bank3
 12669  1EDE  10C4               	bcf	(_Memory^(0+384)+36),1
 12670  1EDF  1D03               	skipz
 12671  1EE0  14C4               	bsf	(_Memory^(0+384)+36),1
 12672                           
 12673                           ;MCU_B1.c: 887: if (command == 0) {
 12674  1EE1  0020               	movlb	0	; select bank0
 12675  1EE2  08A2               	movf	setMemory_GO@command,f
 12676  1EE3  1D03               	skipz
 12677  1EE4  0008               	return
 12678                           
 12679                           ;MCU_B1.c: 888: Memory.Time = command;
 12680  1EE5  0822               	movf	setMemory_GO@command,w
 12681  1EE6  00A0               	movwf	??_setMemory_GO
 12682  1EE7  01A1               	clrf	??_setMemory_GO+1
 12683  1EE8  0820               	movf	??_setMemory_GO,w
 12684  1EE9  0023               	movlb	3	; select bank3
 12685  1EEA  00C2               	movwf	(_Memory^(0+384)+34)
 12686  1EEB  0020               	movlb	0	; select bank0
 12687  1EEC  0821               	movf	??_setMemory_GO+1,w
 12688  1EED  0023               	movlb	3	; select bank3
 12689  1EEE  00C3               	movwf	((_Memory+1)^(0+384)+34)
 12690  1EEF  0008               	return
 12691  1EF0                     __end_of_setMemory_GO:	
 12692                           
 12693                           	psect	text75
 12694  1E88                     __ptext75:	
 12695 ;; *************** function _getDimmerLights_StatusFlag *****************
 12696 ;; Defined at:
 12697 ;;		line 475 in file "../src/Dimmer_B1.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;		None
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;  Status          1    1[BANK0 ] unsigned char 
 12702 ;; Return value:  Size  Location     Type
 12703 ;;                  1    wreg      unsigned char 
 12704 ;; Registers used:
 12705 ;;		wreg, status,2
 12706 ;; Tracked objects:
 12707 ;;		On entry : 0/0
 12708 ;;		On exit  : 0/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;Total ram usage:        3 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:    5
 12718 ;; This function calls:
 12719 ;;		Nothing
 12720 ;; This function is called by:
 12721 ;;		_DimmerLights_Close
 12722 ;;		_DimmerLights_Exceptions
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           
 12727                           ;psect for function _getDimmerLights_StatusFlag
 12728  1E88                     _getDimmerLights_StatusFlag:	
 12729                           
 12730                           ;Dimmer_B1.c: 476: char Status = 0;
 12731                           
 12732                           ;incstack = 0
 12733                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12734  1E88  0020               	movlb	0	; select bank0
 12735  1E89  01A1               	clrf	getDimmerLights_StatusFlag@Status
 12736                           
 12737                           ;Dimmer_B1.c: 479: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 12738  1E8A  01A2               	clrf	_getDimmerLights_StatusFlag$2126
 12739  1E8B  0AA2               	incf	_getDimmerLights_StatusFlag$2126,f
 12740  1E8C  0022               	movlb	2	; select bank2
 12741  1E8D  1B3D               	btfsc	_DimmerLights1^(0+256),6
 12742  1E8E  2E95               	goto	l6337
 12743  1E8F  0023               	movlb	3	; select bank3
 12744  1E90  1F45               	btfss	_DimmerLights2^(0+384),6
 12745  1E91  1B54               	btfsc	_DimmerLights3^(0+384),6
 12746  1E92  2E95               	goto	l6337
 12747  1E93  0020               	movlb	0	; select bank0
 12748  1E94  01A2               	clrf	_getDimmerLights_StatusFlag$2126
 12749  1E95                     l6337:	
 12750  1E95  0020               	movlb	0	; select bank0
 12751  1E96  0822               	movf	_getDimmerLights_StatusFlag$2126,w
 12752  1E97  00A0               	movwf	??_getDimmerLights_StatusFlag
 12753  1E98  0820               	movf	??_getDimmerLights_StatusFlag,w
 12754  1E99  00A1               	movwf	getDimmerLights_StatusFlag@Status
 12755                           
 12756                           ;Dimmer_B1.c: 490: return Status;
 12757  1E9A  0821               	movf	getDimmerLights_StatusFlag@Status,w
 12758  1E9B  0008               	return
 12759  1E9C                     __end_of_getDimmerLights_StatusFlag:	
 12760                           
 12761                           	psect	text76
 12762  1121                     __ptext76:	
 12763 ;; *************** function _DimmerLights_Initialization *****************
 12764 ;; Defined at:
 12765 ;;		line 334 in file "../src/Dimmer_B1.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;		None
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;		None
 12770 ;; Return value:  Size  Location     Type
 12771 ;;		None               void
 12772 ;; Registers used:
 12773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12782 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12783 ;;Total ram usage:        1 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; Hardware stack levels required when called:    7
 12786 ;; This function calls:
 12787 ;;		_Dimmer_Initialization
 12788 ;;		_setDimmerLights_Initialization
 12789 ;; This function is called by:
 12790 ;;		_main
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           
 12795                           ;psect for function _DimmerLights_Initialization
 12796  1121                     _DimmerLights_Initialization:	
 12797                           
 12798                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 12799                           
 12800                           ;incstack = 0
 12801                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12802  1121  303D               	movlw	_DimmerLights1& (0+255)
 12803  1122  0020               	movlb	0	; select bank0
 12804  1123  00A4               	movwf	??_DimmerLights_Initialization
 12805  1124  0824               	movf	??_DimmerLights_Initialization,w
 12806  1125  0021               	movlb	1	; select bank1
 12807  1126  00C9               	movwf	_DimmerLights11^(0+128)
 12808                           
 12809                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 12810  1127  3001               	movlw	1
 12811  1128  3192  22C8  3191   	fcall	_setDimmerLights_Initialization
 12812                           
 12813                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 12814  112B  30C5               	movlw	_DimmerLights2& (0+255)
 12815  112C  0020               	movlb	0	; select bank0
 12816  112D  00A4               	movwf	??_DimmerLights_Initialization
 12817  112E  0824               	movf	??_DimmerLights_Initialization,w
 12818  112F  0021               	movlb	1	; select bank1
 12819  1130  00CA               	movwf	_DimmerLights22^(0+128)
 12820                           
 12821                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 12822  1131  3002               	movlw	2
 12823  1132  3192  22C8  3191   	fcall	_setDimmerLights_Initialization
 12824                           
 12825                           ;Dimmer_B1.c: 347: DimmerLights33 = &DimmerLights3;
 12826  1135  30D4               	movlw	_DimmerLights3& (0+255)
 12827  1136  0020               	movlb	0	; select bank0
 12828  1137  00A4               	movwf	??_DimmerLights_Initialization
 12829  1138  0824               	movf	??_DimmerLights_Initialization,w
 12830  1139  0021               	movlb	1	; select bank1
 12831  113A  00CB               	movwf	_DimmerLights33^(0+128)
 12832                           
 12833                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(3);
 12834  113B  3003               	movlw	3
 12835  113C  3192  22C8  3191   	fcall	_setDimmerLights_Initialization
 12836                           
 12837                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 12838  113F  319C  24CD         	fcall	_Dimmer_Initialization
 12839  1141  0008               	return
 12840  1142                     __end_of_DimmerLights_Initialization:	
 12841                           
 12842                           	psect	text77
 12843  12C8                     __ptext77:	
 12844 ;; *************** function _setDimmerLights_Initialization *****************
 12845 ;; Defined at:
 12846 ;;		line 357 in file "../src/Dimmer_B1.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;  lights          1    wreg     unsigned char 
 12849 ;; Auto vars:     Size  Location     Type
 12850 ;;  lights          1    3[BANK0 ] unsigned char 
 12851 ;; Return value:  Size  Location     Type
 12852 ;;		None               void
 12853 ;; Registers used:
 12854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12864 ;;Total ram usage:        2 bytes
 12865 ;; Hardware stack levels used:    1
 12866 ;; Hardware stack levels required when called:    6
 12867 ;; This function calls:
 12868 ;;		_DimmerLightsPointSelect
 12869 ;; This function is called by:
 12870 ;;		_DimmerLights_Initialization
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           
 12875                           ;psect for function _setDimmerLights_Initialization
 12876  12C8                     _setDimmerLights_Initialization:	
 12877                           
 12878                           ;incstack = 0
 12879                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12880                           ;setDimmerLights_Initialization@lights stored from wreg
 12881  12C8  0020               	movlb	0	; select bank0
 12882  12C9  00A3               	movwf	setDimmerLights_Initialization@lights
 12883                           
 12884                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 12885  12CA  0823               	movf	setDimmerLights_Initialization@lights,w
 12886  12CB  319F  276F         	fcall	_DimmerLightsPointSelect
 12887                           
 12888                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 12889  12CD  087B               	movf	_DimmerLights,w
 12890  12CE  3E09               	addlw	9
 12891  12CF  0086               	movwf	6
 12892  12D0  3001               	movlw	1	; select bank2/3
 12893  12D1  0087               	movwf	7
 12894  12D2  1501               	bsf	1,2
 12895                           
 12896                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-95)*0.8));
 12897  12D3  3004               	movlw	4
 12898  12D4  0020               	movlb	0	; select bank0
 12899  12D5  00A2               	movwf	??_setDimmerLights_Initialization
 12900  12D6  087B               	movf	_DimmerLights,w
 12901  12D7  3E05               	addlw	5
 12902  12D8  0086               	movwf	6
 12903  12D9  3001               	movlw	1	; select bank2/3
 12904  12DA  0087               	movwf	7
 12905  12DB  0822               	movf	??_setDimmerLights_Initialization,w
 12906  12DC  0081               	movwf	1
 12907                           
 12908                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 12909  12DD  303C               	movlw	60
 12910  12DE  00A2               	movwf	??_setDimmerLights_Initialization
 12911  12DF  087B               	movf	_DimmerLights,w
 12912  12E0  3E06               	addlw	6
 12913  12E1  0086               	movwf	6
 12914  12E2  3001               	movlw	1	; select bank2/3
 12915  12E3  0087               	movwf	7
 12916  12E4  0822               	movf	??_setDimmerLights_Initialization,w
 12917  12E5  0081               	movwf	1
 12918                           
 12919                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12920  12E6  087B               	movf	_DimmerLights,w
 12921  12E7  3E06               	addlw	6
 12922  12E8  0086               	movwf	6
 12923  12E9  3001               	movlw	1	; select bank2/3
 12924  12EA  0087               	movwf	7
 12925  12EB  0801               	movf	1,w
 12926  12EC  00A2               	movwf	??_setDimmerLights_Initialization
 12927  12ED  087B               	movf	_DimmerLights,w
 12928  12EE  3E04               	addlw	4
 12929  12EF  0086               	movwf	6
 12930  12F0  3001               	movlw	1	; select bank2/3
 12931  12F1  0087               	movwf	7
 12932  12F2  0822               	movf	??_setDimmerLights_Initialization,w
 12933  12F3  0081               	movwf	1
 12934  12F4  0008               	return
 12935  12F5                     __end_of_setDimmerLights_Initialization:	
 12936                           
 12937                           	psect	text78
 12938  1CCD                     __ptext78:	
 12939 ;; *************** function _Dimmer_Initialization *****************
 12940 ;; Defined at:
 12941 ;;		line 786 in file "../src/Dimmer_B1.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;		None
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;		None
 12946 ;; Return value:  Size  Location     Type
 12947 ;;		None               void
 12948 ;; Registers used:
 12949 ;;		wreg
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12959 ;;Total ram usage:        1 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    5
 12962 ;; This function calls:
 12963 ;;		Nothing
 12964 ;; This function is called by:
 12965 ;;		_DimmerLights_Initialization
 12966 ;; This function uses a non-reentrant model
 12967 ;;
 12968                           
 12969                           
 12970                           ;psect for function _Dimmer_Initialization
 12971  1CCD                     _Dimmer_Initialization:	
 12972                           
 12973                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 12974                           
 12975                           ;incstack = 0
 12976                           ; Regs used in _Dimmer_Initialization: [wreg]
 12977  1CCD  30E7               	movlw	_Dimmer1& (0+255)
 12978  1CCE  0020               	movlb	0	; select bank0
 12979  1CCF  00A0               	movwf	??_Dimmer_Initialization
 12980  1CD0  0820               	movf	??_Dimmer_Initialization,w
 12981  1CD1  0021               	movlb	1	; select bank1
 12982  1CD2  00C8               	movwf	_Dimmer^(0+128)
 12983  1CD3  0008               	return
 12984  1CD4                     __end_of_Dimmer_Initialization:	
 12985                           
 12986                           	psect	text79
 12987  1D3A                     __ptext79:	
 12988 ;; *************** function _DelayOff_Main *****************
 12989 ;; Defined at:
 12990 ;;		line 41 in file "../src/DelayOff_B1.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;		None
 12993 ;; Auto vars:     Size  Location     Type
 12994 ;;		None
 12995 ;; Return value:  Size  Location     Type
 12996 ;;		None               void
 12997 ;; Registers used:
 12998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12999 ;; Tracked objects:
 13000 ;;		On entry : 0/0
 13001 ;;		On exit  : 0/0
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;Total ram usage:        0 bytes
 13009 ;; Hardware stack levels used:    1
 13010 ;; Hardware stack levels required when called:   10
 13011 ;; This function calls:
 13012 ;;		_DlyOff_Main
 13013 ;; This function is called by:
 13014 ;;		_main
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           
 13019                           ;psect for function _DelayOff_Main
 13020  1D3A                     _DelayOff_Main:	
 13021                           
 13022                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13023                           
 13024                           ;incstack = 0
 13025                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13026  1D3A  3001               	movlw	1
 13027  1D3B  318C  2458  319D   	fcall	_DlyOff_Main
 13028                           
 13029                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13030  1D3E  3002               	movlw	2
 13031  1D3F  318C  2458  319D   	fcall	_DlyOff_Main
 13032                           
 13033                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 13034  1D42  3003               	movlw	3
 13035  1D43  318C  2458         	fcall	_DlyOff_Main
 13036  1D45  0008               	return
 13037  1D46                     __end_of_DelayOff_Main:	
 13038                           
 13039                           	psect	text80
 13040  0C58                     __ptext80:	
 13041 ;; *************** function _DlyOff_Main *****************
 13042 ;; Defined at:
 13043 ;;		line 62 in file "../src/DelayOff_B1.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;  sw              1    wreg     unsigned char 
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;  sw              1   68[BANK0 ] unsigned char 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;		None               void
 13050 ;; Registers used:
 13051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;Total ram usage:        3 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    9
 13064 ;; This function calls:
 13065 ;;		_DelayOffPointSelect
 13066 ;;		_setBuz
 13067 ;;		_setDimmerLights_Switch
 13068 ;;		_setDimmerLights_Trigger
 13069 ;;		_setRFSW_Status
 13070 ;;		_setRF_DimmerLights
 13071 ;;		_setSw_Status
 13072 ;;		_setTxData
 13073 ;; This function is called by:
 13074 ;;		_DelayOff_Main
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           
 13079                           ;psect for function _DlyOff_Main
 13080  0C58                     _DlyOff_Main:	
 13081                           
 13082                           ;incstack = 0
 13083                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13084                           ;DlyOff_Main@sw stored from wreg
 13085  0C58  0020               	movlb	0	; select bank0
 13086  0C59  00E4               	movwf	DlyOff_Main@sw
 13087                           
 13088                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13089  0C5A  0864               	movf	DlyOff_Main@sw,w
 13090  0C5B  319F  27A7  318C   	fcall	_DelayOffPointSelect
 13091                           
 13092                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13093  0C5E  087A               	movf	_DelayOff,w
 13094  0C5F  0086               	movwf	6
 13095  0C60  3001               	movlw	1	; select bank2/3
 13096  0C61  0087               	movwf	7
 13097  0C62  1C81               	btfss	1,1
 13098  0C63  0008               	return
 13099                           
 13100                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13101  0C64  087A               	movf	_DelayOff,w
 13102  0C65  3E02               	addlw	2
 13103  0C66  0086               	movwf	6
 13104  0C67  3001               	movlw	1	; select bank2/3
 13105  0C68  0087               	movwf	7
 13106  0C69  3001               	movlw	1
 13107  0C6A  0781               	addwf	1,f
 13108  0C6B  3141               	addfsr 1,1
 13109  0C6C  1803               	skipnc
 13110  0C6D  0A81               	incf	1,f
 13111                           
 13112                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13113  0C6E  087A               	movf	_DelayOff,w
 13114  0C6F  3E02               	addlw	2
 13115  0C70  0086               	movwf	6
 13116  0C71  3001               	movlw	1	; select bank2/3
 13117  0C72  0087               	movwf	7
 13118  0C73  3F40               	moviw [0]fsr1
 13119  0C74  0020               	movlb	0	; select bank0
 13120  0C75  00E2               	movwf	??_DlyOff_Main
 13121  0C76  3F41               	moviw [1]fsr1
 13122  0C77  00E3               	movwf	??_DlyOff_Main+1
 13123  0C78  3016               	movlw	22
 13124  0C79  0263               	subwf	??_DlyOff_Main+1,w
 13125  0C7A  3012               	movlw	18
 13126  0C7B  1903               	skipnz
 13127  0C7C  0262               	subwf	??_DlyOff_Main,w
 13128  0C7D  1C03               	skipc
 13129  0C7E  0008               	return
 13130                           
 13131                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13132  0C7F  087A               	movf	_DelayOff,w
 13133  0C80  3E02               	addlw	2
 13134  0C81  0086               	movwf	6
 13135  0C82  3001               	movlw	1	; select bank2/3
 13136  0C83  0087               	movwf	7
 13137  0C84  3000               	movlw	0
 13138  0C85  3FC0               	movwi [0]fsr1
 13139  0C86  3FC1               	movwi [1]fsr1
 13140                           
 13141                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13142  0C87  3001               	movlw	1
 13143  0C88  00E2               	movwf	??_DlyOff_Main
 13144  0C89  087A               	movf	_DelayOff,w
 13145  0C8A  3E04               	addlw	4
 13146  0C8B  0086               	movwf	6
 13147  0C8C  3001               	movlw	1	; select bank2/3
 13148  0C8D  0087               	movwf	7
 13149  0C8E  0862               	movf	??_DlyOff_Main,w
 13150  0C8F  0781               	addwf	1,f
 13151                           
 13152                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13153  0C90  087A               	movf	_DelayOff,w
 13154  0C91  3E04               	addlw	4
 13155  0C92  0086               	movwf	6
 13156  0C93  3001               	movlw	1	; select bank2/3
 13157  0C94  0087               	movwf	7
 13158  0C95  0A7A               	incf	_DelayOff,w
 13159  0C96  0084               	movwf	4
 13160  0C97  3001               	movlw	1	; select bank2/3
 13161  0C98  0085               	movwf	5
 13162  0C99  0800               	movf	0,w
 13163  0C9A  0201               	subwf	1,w
 13164  0C9B  1C03               	skipc
 13165  0C9C  0008               	return
 13166                           
 13167                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13168  0C9D  087A               	movf	_DelayOff,w
 13169  0C9E  3E04               	addlw	4
 13170  0C9F  0086               	movwf	6
 13171  0CA0  3001               	movlw	1	; select bank2/3
 13172  0CA1  0087               	movwf	7
 13173  0CA2  0181               	clrf	1
 13174                           
 13175                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13176  0CA3  087A               	movf	_DelayOff,w
 13177  0CA4  0086               	movwf	6
 13178  0CA5  3001               	movlw	1	; select bank2/3
 13179  0CA6  0087               	movwf	7
 13180  0CA7  1081               	bcf	1,1
 13181                           
 13182                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13183  0CA8  01A1               	clrf	setSw_Status@command
 13184  0CA9  0864               	movf	DlyOff_Main@sw,w
 13185  0CAA  319D  2588  318C   	fcall	_setSw_Status
 13186                           
 13187                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13188  0CAD  0020               	movlb	0	; select bank0
 13189  0CAE  01A2               	clrf	setRFSW_Status@command
 13190  0CAF  0864               	movf	DlyOff_Main@sw,w
 13191  0CB0  319D  2579  318C   	fcall	_setRFSW_Status
 13192                           
 13193                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13194  0CB3  0020               	movlb	0	; select bank0
 13195  0CB4  01DD               	clrf	setRF_DimmerLights@on
 13196  0CB5  0864               	movf	DlyOff_Main@sw,w
 13197  0CB6  318A  228E  318C   	fcall	_setRF_DimmerLights
 13198                           
 13199                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13200  0CB9  0020               	movlb	0	; select bank0
 13201  0CBA  01A2               	clrf	setDimmerLights_Trigger@command
 13202  0CBB  0AA2               	incf	setDimmerLights_Trigger@command,f
 13203  0CBC  0864               	movf	DlyOff_Main@sw,w
 13204  0CBD  319D  25F2  318C   	fcall	_setDimmerLights_Trigger
 13205                           
 13206                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13207  0CC0  0020               	movlb	0	; select bank0
 13208  0CC1  01A2               	clrf	setDimmerLights_Switch@command
 13209  0CC2  0864               	movf	DlyOff_Main@sw,w
 13210  0CC3  319D  25E2  318C   	fcall	_setDimmerLights_Switch
 13211                           
 13212                           ;DelayOff_B1.c: 78: setTxData();
 13213  0CC6  3185  252E  318C   	fcall	_setTxData
 13214                           
 13215                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13216  0CC9  3064               	movlw	100
 13217  0CCA  0020               	movlb	0	; select bank0
 13218  0CCB  00A9               	movwf	setBuz@time
 13219  0CCC  3000               	movlw	0
 13220  0CCD  00AA               	movwf	setBuz@time+1
 13221  0CCE  3001               	movlw	1
 13222  0CCF  3197  27A7         	fcall	_setBuz
 13223  0CD1  0008               	return
 13224  0CD2                     __end_of_DlyOff_Main:	
 13225                           
 13226                           	psect	text81
 13227  052E                     __ptext81:	
 13228 ;; *************** function _setTxData *****************
 13229 ;; Defined at:
 13230 ;;		line 138 in file "../src/RF_Control_B1.c"
 13231 ;; Parameters:    Size  Location     Type
 13232 ;;		None
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;  i               1    0        unsigned char 
 13235 ;; Return value:  Size  Location     Type
 13236 ;;		None               void
 13237 ;; Registers used:
 13238 ;;		wreg, fsr1l, fsr1h
 13239 ;; Tracked objects:
 13240 ;;		On entry : 0/0
 13241 ;;		On exit  : 0/0
 13242 ;;		Unchanged: 0/0
 13243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;Total ram usage:        1 bytes
 13249 ;; Hardware stack levels used:    1
 13250 ;; Hardware stack levels required when called:    5
 13251 ;; This function calls:
 13252 ;;		Nothing
 13253 ;; This function is called by:
 13254 ;;		_DlyOff_Main
 13255 ;;		_setDimmerLights_Adj
 13256 ;;		_setControl_Lights_Table
 13257 ;;		_setRFSW_Control
 13258 ;;		_setRFSW_AdjControl
 13259 ;;		_Sw_DimmerOnFunc
 13260 ;;		_Sw_DimmerOffFunc
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function _setTxData
 13266  052E                     _setTxData:	
 13267                           
 13268                           ;RF_Control_B1.c: 139: char i;
 13269                           ;RF_Control_B1.c: 140: if (RF1.Enable == 1) {
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _setTxData: [wregfsr1]
 13273  052E  0021               	movlb	1	; select bank1
 13274  052F  1C3E               	btfss	_RF1^(0+128),0
 13275  0530  0008               	return
 13276                           
 13277                           ;RF_Control_B1.c: 142: RF1.TransceiveGO = 1;
 13278  0531  153E               	bsf	_RF1^(0+128),2
 13279                           
 13280                           ;RF_Control_B1.c: 152: RF_Data[0] = 0x63;
 13281  0532  3063               	movlw	99
 13282  0533  0020               	movlb	0	; select bank0
 13283  0534  00A0               	movwf	??_setTxData
 13284  0535  0820               	movf	??_setTxData,w
 13285  0536  0022               	movlb	2	; select bank2
 13286  0537  00A0               	movwf	_RF_Data^(0+256)
 13287                           
 13288                           ;RF_Control_B1.c: 153: RF_Data[1] = 0x02;
 13289  0538  3002               	movlw	2
 13290  0539  0020               	movlb	0	; select bank0
 13291  053A  00A0               	movwf	??_setTxData
 13292  053B  0820               	movf	??_setTxData,w
 13293  053C  0022               	movlb	2	; select bank2
 13294  053D  00A1               	movwf	(_RF_Data^(0+256)+1)
 13295                           
 13296                           ;RF_Control_B1.c: 154: RF_Data[2] = product->Data[2];
 13297  053E  0020               	movlb	0	; select bank0
 13298  053F  086F               	movf	_product,w
 13299  0540  0086               	movwf	6
 13300  0541  3002               	movlw	2	; select bank4/5
 13301  0542  0087               	movwf	7
 13302  0543  3002               	movlw	2	; select bank4/5
 13303  0544  3F42               	moviw [2]fsr1
 13304  0545  0022               	movlb	2	; select bank2
 13305  0546  00A2               	movwf	(_RF_Data^(0+256)+2)
 13306                           
 13307                           ;RF_Control_B1.c: 155: RF_Data[3] = product->Data[3];
 13308  0547  0020               	movlb	0	; select bank0
 13309  0548  086F               	movf	_product,w
 13310  0549  0086               	movwf	6
 13311  054A  3002               	movlw	2	; select bank4/5
 13312  054B  0087               	movwf	7
 13313  054C  3002               	movlw	2	; select bank4/5
 13314  054D  3F43               	moviw [3]fsr1
 13315  054E  0022               	movlb	2	; select bank2
 13316  054F  00A3               	movwf	(_RF_Data^(0+256)+3)
 13317                           
 13318                           ;RF_Control_B1.c: 156: RF_Data[4] = product->Data[4];
 13319  0550  0020               	movlb	0	; select bank0
 13320  0551  086F               	movf	_product,w
 13321  0552  0086               	movwf	6
 13322  0553  3002               	movlw	2	; select bank4/5
 13323  0554  0087               	movwf	7
 13324  0555  3002               	movlw	2	; select bank4/5
 13325  0556  3F44               	moviw [4]fsr1
 13326  0557  0022               	movlb	2	; select bank2
 13327  0558  00A4               	movwf	(_RF_Data^(0+256)+4)
 13328                           
 13329                           ;RF_Control_B1.c: 157: RF_Data[5] = product->Data[5];
 13330  0559  0020               	movlb	0	; select bank0
 13331  055A  086F               	movf	_product,w
 13332  055B  0086               	movwf	6
 13333  055C  3002               	movlw	2	; select bank4/5
 13334  055D  0087               	movwf	7
 13335  055E  3002               	movlw	2	; select bank4/5
 13336  055F  3F45               	moviw [5]fsr1
 13337  0560  0022               	movlb	2	; select bank2
 13338  0561  00A5               	movwf	(_RF_Data^(0+256)+5)
 13339                           
 13340                           ;RF_Control_B1.c: 158: RF_Data[6] = product->Data[6];
 13341  0562  0020               	movlb	0	; select bank0
 13342  0563  086F               	movf	_product,w
 13343  0564  0086               	movwf	6
 13344  0565  3002               	movlw	2	; select bank4/5
 13345  0566  0087               	movwf	7
 13346  0567  3002               	movlw	2	; select bank4/5
 13347  0568  3F46               	moviw [6]fsr1
 13348  0569  0022               	movlb	2	; select bank2
 13349  056A  00A6               	movwf	(_RF_Data^(0+256)+6)
 13350                           
 13351                           ;RF_Control_B1.c: 159: RF_Data[7] = product->Data[7];
 13352  056B  0020               	movlb	0	; select bank0
 13353  056C  086F               	movf	_product,w
 13354  056D  0086               	movwf	6
 13355  056E  3002               	movlw	2	; select bank4/5
 13356  056F  0087               	movwf	7
 13357  0570  3002               	movlw	2	; select bank4/5
 13358  0571  3F47               	moviw [7]fsr1
 13359  0572  0022               	movlb	2	; select bank2
 13360  0573  00A7               	movwf	(_RF_Data^(0+256)+7)
 13361                           
 13362                           ;RF_Control_B1.c: 160: RF_Data[8] = product->Data[8];
 13363  0574  0020               	movlb	0	; select bank0
 13364  0575  086F               	movf	_product,w
 13365  0576  0086               	movwf	6
 13366  0577  3002               	movlw	2	; select bank4/5
 13367  0578  0087               	movwf	7
 13368  0579  3002               	movlw	2	; select bank4/5
 13369  057A  3F48               	moviw [8]fsr1
 13370  057B  0022               	movlb	2	; select bank2
 13371  057C  00A8               	movwf	(_RF_Data^(0+256)+8)
 13372                           
 13373                           ;RF_Control_B1.c: 161: RF_Data[9] = product->Data[9];
 13374  057D  0020               	movlb	0	; select bank0
 13375  057E  086F               	movf	_product,w
 13376  057F  0086               	movwf	6
 13377  0580  3002               	movlw	2	; select bank4/5
 13378  0581  0087               	movwf	7
 13379  0582  3002               	movlw	2	; select bank4/5
 13380  0583  3F49               	moviw [9]fsr1
 13381  0584  0022               	movlb	2	; select bank2
 13382  0585  00A9               	movwf	(_RF_Data^(0+256)+9)
 13383                           
 13384                           ;RF_Control_B1.c: 162: RF_Data[10] = product->Data[10];
 13385  0586  0020               	movlb	0	; select bank0
 13386  0587  086F               	movf	_product,w
 13387  0588  0086               	movwf	6
 13388  0589  3002               	movlw	2	; select bank4/5
 13389  058A  0087               	movwf	7
 13390  058B  3002               	movlw	2	; select bank4/5
 13391  058C  3F4A               	moviw [10]fsr1
 13392  058D  0022               	movlb	2	; select bank2
 13393  058E  00AA               	movwf	(_RF_Data^(0+256)+10)
 13394                           
 13395                           ;RF_Control_B1.c: 163: RF_Data[11] = product->Data[11];
 13396  058F  0020               	movlb	0	; select bank0
 13397  0590  086F               	movf	_product,w
 13398  0591  0086               	movwf	6
 13399  0592  3002               	movlw	2	; select bank4/5
 13400  0593  0087               	movwf	7
 13401  0594  3002               	movlw	2	; select bank4/5
 13402  0595  3F4B               	moviw [11]fsr1
 13403  0596  0022               	movlb	2	; select bank2
 13404  0597  00AB               	movwf	(_RF_Data^(0+256)+11)
 13405                           
 13406                           ;RF_Control_B1.c: 164: RF_Data[12] = product->Data[12];
 13407  0598  0020               	movlb	0	; select bank0
 13408  0599  086F               	movf	_product,w
 13409  059A  0086               	movwf	6
 13410  059B  3002               	movlw	2	; select bank4/5
 13411  059C  0087               	movwf	7
 13412  059D  3002               	movlw	2	; select bank4/5
 13413  059E  3F4C               	moviw [12]fsr1
 13414  059F  0022               	movlb	2	; select bank2
 13415  05A0  00AC               	movwf	(_RF_Data^(0+256)+12)
 13416                           
 13417                           ;RF_Control_B1.c: 165: RF_Data[13] = product->Data[13];
 13418  05A1  0020               	movlb	0	; select bank0
 13419  05A2  086F               	movf	_product,w
 13420  05A3  0086               	movwf	6
 13421  05A4  3002               	movlw	2	; select bank4/5
 13422  05A5  0087               	movwf	7
 13423  05A6  3002               	movlw	2	; select bank4/5
 13424  05A7  3F4D               	moviw [13]fsr1
 13425  05A8  0022               	movlb	2	; select bank2
 13426  05A9  00AD               	movwf	(_RF_Data^(0+256)+13)
 13427                           
 13428                           ;RF_Control_B1.c: 166: RF_Data[14] = product->Data[14];
 13429  05AA  0020               	movlb	0	; select bank0
 13430  05AB  086F               	movf	_product,w
 13431  05AC  0086               	movwf	6
 13432  05AD  3002               	movlw	2	; select bank4/5
 13433  05AE  0087               	movwf	7
 13434  05AF  3002               	movlw	2	; select bank4/5
 13435  05B0  3F4E               	moviw [14]fsr1
 13436  05B1  0022               	movlb	2	; select bank2
 13437  05B2  00AE               	movwf	(_RF_Data^(0+256)+14)
 13438                           
 13439                           ;RF_Control_B1.c: 167: RF_Data[15] = product->Data[15];
 13440  05B3  0020               	movlb	0	; select bank0
 13441  05B4  086F               	movf	_product,w
 13442  05B5  0086               	movwf	6
 13443  05B6  3002               	movlw	2	; select bank4/5
 13444  05B7  0087               	movwf	7
 13445  05B8  3002               	movlw	2	; select bank4/5
 13446  05B9  3F4F               	moviw [15]fsr1
 13447  05BA  0022               	movlb	2	; select bank2
 13448  05BB  00AF               	movwf	(_RF_Data^(0+256)+15)
 13449                           
 13450                           ;RF_Control_B1.c: 168: RF_Data[16] = product->Data[16];
 13451  05BC  0020               	movlb	0	; select bank0
 13452  05BD  086F               	movf	_product,w
 13453  05BE  0086               	movwf	6
 13454  05BF  3002               	movlw	2	; select bank4/5
 13455  05C0  0087               	movwf	7
 13456  05C1  3002               	movlw	2	; select bank4/5
 13457  05C2  3F50               	moviw [16]fsr1
 13458  05C3  0022               	movlb	2	; select bank2
 13459  05C4  00B0               	movwf	(_RF_Data^(0+256)+16)
 13460                           
 13461                           ;RF_Control_B1.c: 169: RF_Data[17] = product->Data[17];
 13462  05C5  0020               	movlb	0	; select bank0
 13463  05C6  086F               	movf	_product,w
 13464  05C7  0086               	movwf	6
 13465  05C8  3002               	movlw	2	; select bank4/5
 13466  05C9  0087               	movwf	7
 13467  05CA  3002               	movlw	2	; select bank4/5
 13468  05CB  3F51               	moviw [17]fsr1
 13469  05CC  0022               	movlb	2	; select bank2
 13470  05CD  00B1               	movwf	(_RF_Data^(0+256)+17)
 13471                           
 13472                           ;RF_Control_B1.c: 170: RF_Data[18] = product->Data[18];
 13473  05CE  0020               	movlb	0	; select bank0
 13474  05CF  086F               	movf	_product,w
 13475  05D0  0086               	movwf	6
 13476  05D1  3002               	movlw	2	; select bank4/5
 13477  05D2  0087               	movwf	7
 13478  05D3  3002               	movlw	2	; select bank4/5
 13479  05D4  3F52               	moviw [18]fsr1
 13480  05D5  0022               	movlb	2	; select bank2
 13481  05D6  00B2               	movwf	(_RF_Data^(0+256)+18)
 13482                           
 13483                           ;RF_Control_B1.c: 171: RF_Data[19] = product->Data[19];
 13484  05D7  0020               	movlb	0	; select bank0
 13485  05D8  086F               	movf	_product,w
 13486  05D9  0086               	movwf	6
 13487  05DA  3002               	movlw	2	; select bank4/5
 13488  05DB  0087               	movwf	7
 13489  05DC  3002               	movlw	2	; select bank4/5
 13490  05DD  3F53               	moviw [19]fsr1
 13491  05DE  0022               	movlb	2	; select bank2
 13492  05DF  00B3               	movwf	(_RF_Data^(0+256)+19)
 13493                           
 13494                           ;RF_Control_B1.c: 172: RF_Data[20] = 211;
 13495  05E0  30D3               	movlw	211
 13496  05E1  0020               	movlb	0	; select bank0
 13497  05E2  00A0               	movwf	??_setTxData
 13498  05E3  0820               	movf	??_setTxData,w
 13499  05E4  0022               	movlb	2	; select bank2
 13500  05E5  00B4               	movwf	(_RF_Data^(0+256)+20)
 13501  05E6  0008               	return
 13502  05E7                     __end_of_setTxData:	
 13503                           
 13504                           	psect	text82
 13505  1D88                     __ptext82:	
 13506 ;; *************** function _setSw_Status *****************
 13507 ;; Defined at:
 13508 ;;		line 111 in file "../src/Switch_B1.c"
 13509 ;; Parameters:    Size  Location     Type
 13510 ;;  sw              1    wreg     unsigned char 
 13511 ;;  command         1    1[BANK0 ] unsigned char 
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;  sw              1    2[BANK0 ] unsigned char 
 13514 ;; Return value:  Size  Location     Type
 13515 ;;		None               void
 13516 ;; Registers used:
 13517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13518 ;; Tracked objects:
 13519 ;;		On entry : 0/0
 13520 ;;		On exit  : 0/0
 13521 ;;		Unchanged: 0/0
 13522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13523 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;Total ram usage:        2 bytes
 13528 ;; Hardware stack levels used:    1
 13529 ;; Hardware stack levels required when called:    6
 13530 ;; This function calls:
 13531 ;;		_SwPointSelect
 13532 ;; This function is called by:
 13533 ;;		_DlyOff_Main
 13534 ;;		_setDimmerLights_ERROR
 13535 ;;		_setControl_Lights_Table
 13536 ;;		_setRFSW_Control
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           
 13541                           ;psect for function _setSw_Status
 13542  1D88                     _setSw_Status:	
 13543                           
 13544                           ;incstack = 0
 13545                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13546                           ;setSw_Status@sw stored from wreg
 13547  1D88  0020               	movlb	0	; select bank0
 13548  1D89  00A2               	movwf	setSw_Status@sw
 13549                           
 13550                           ;Switch_B1.c: 112: SwPointSelect(sw);
 13551  1D8A  0822               	movf	setSw_Status@sw,w
 13552  1D8B  319F  27C4         	fcall	_SwPointSelect
 13553                           
 13554                           ;Switch_B1.c: 113: Sw->Status = command;
 13555  1D8D  0878               	movf	_Sw,w
 13556  1D8E  0086               	movwf	6
 13557  1D8F  0879               	movf	_Sw+1,w
 13558  1D90  0087               	movwf	7
 13559  1D91  0020               	movlb	0	; select bank0
 13560  1D92  0821               	movf	setSw_Status@command,w
 13561  1D93  1301               	bcf	1,6
 13562  1D94  1D03               	skipz
 13563  1D95  1701               	bsf	1,6
 13564  1D96  0008               	return
 13565  1D97                     __end_of_setSw_Status:	
 13566                           
 13567                           	psect	text83
 13568  1FC4                     __ptext83:	
 13569 ;; *************** function _SwPointSelect *****************
 13570 ;; Defined at:
 13571 ;;		line 21 in file "../src/Switch_B1.c"
 13572 ;; Parameters:    Size  Location     Type
 13573 ;;  sw              1    wreg     unsigned char 
 13574 ;; Auto vars:     Size  Location     Type
 13575 ;;  sw              1    0[BANK0 ] unsigned char 
 13576 ;; Return value:  Size  Location     Type
 13577 ;;		None               void
 13578 ;; Registers used:
 13579 ;;		wreg, status,2, status,0
 13580 ;; Tracked objects:
 13581 ;;		On entry : 0/0
 13582 ;;		On exit  : 0/0
 13583 ;;		Unchanged: 0/0
 13584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13588 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13589 ;;Total ram usage:        1 bytes
 13590 ;; Hardware stack levels used:    1
 13591 ;; Hardware stack levels required when called:    5
 13592 ;; This function calls:
 13593 ;;		Nothing
 13594 ;; This function is called by:
 13595 ;;		_setSw_Enable
 13596 ;;		_setSw_Status
 13597 ;;		_setSw_Main
 13598 ;;		_Sw_Detect
 13599 ;; This function uses a non-reentrant model
 13600 ;;
 13601                           
 13602                           
 13603                           ;psect for function _SwPointSelect
 13604  1FC4                     _SwPointSelect:	
 13605                           
 13606                           ;incstack = 0
 13607                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
 13608                           ;SwPointSelect@sw stored from wreg
 13609  1FC4  0020               	movlb	0	; select bank0
 13610  1FC5  00A0               	movwf	SwPointSelect@sw
 13611                           
 13612                           ;Switch_B1.c: 24: if (sw == 1) {
 13613  1FC6  0820               	movf	SwPointSelect@sw,w
 13614  1FC7  3A01               	xorlw	1
 13615  1FC8  1D03               	skipz
 13616  1FC9  2FCF               	goto	l6015
 13617                           
 13618                           ;Switch_B1.c: 25: Sw = &Sw1;
 13619  1FCA  304C               	movlw	low _Sw1
 13620  1FCB  00F8               	movwf	_Sw
 13621  1FCC  3001               	movlw	high _Sw1
 13622  1FCD  00F9               	movwf	_Sw+1
 13623                           
 13624                           ;Switch_B1.c: 26: }
 13625  1FCE  0008               	return
 13626  1FCF                     l6015:	
 13627                           
 13628                           ;Switch_B1.c: 29: else if (sw == 2) {
 13629  1FCF  0820               	movf	SwPointSelect@sw,w
 13630  1FD0  3A02               	xorlw	2
 13631  1FD1  1D03               	skipz
 13632  1FD2  2FD8               	goto	l6019
 13633                           
 13634                           ;Switch_B1.c: 30: Sw = &Sw2;
 13635  1FD3  30E3               	movlw	low _Sw2
 13636  1FD4  00F8               	movwf	_Sw
 13637  1FD5  3001               	movlw	high _Sw2
 13638  1FD6  00F9               	movwf	_Sw+1
 13639                           
 13640                           ;Switch_B1.c: 31: }
 13641  1FD7  0008               	return
 13642  1FD8                     l6019:	
 13643                           
 13644                           ;Switch_B1.c: 34: else if (sw == 3) {
 13645  1FD8  0820               	movf	SwPointSelect@sw,w
 13646  1FD9  3A03               	xorlw	3
 13647  1FDA  1D03               	skipz
 13648  1FDB  0008               	return
 13649                           
 13650                           ;Switch_B1.c: 35: Sw = &Sw3;
 13651  1FDC  3040               	movlw	low _Sw3
 13652  1FDD  00F8               	movwf	_Sw
 13653  1FDE  3002               	movlw	high _Sw3
 13654  1FDF  00F9               	movwf	_Sw+1
 13655  1FE0  0008               	return
 13656  1FE1                     __end_of_SwPointSelect:	
 13657                           
 13658                           	psect	text84
 13659  0A8E                     __ptext84:	
 13660 ;; *************** function _setRF_DimmerLights *****************
 13661 ;; Defined at:
 13662 ;;		line 397 in file "../src/RF_Control_B1.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;  lights          1    wreg     unsigned char 
 13665 ;;  on              1   61[BANK0 ] unsigned char 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  lights          1   65[BANK0 ] unsigned char 
 13668 ;;  status          1   64[BANK0 ] unsigned char 
 13669 ;; Return value:  Size  Location     Type
 13670 ;;		None               void
 13671 ;; Registers used:
 13672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13673 ;; Tracked objects:
 13674 ;;		On entry : 0/0
 13675 ;;		On exit  : 0/0
 13676 ;;		Unchanged: 0/0
 13677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13678 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13682 ;;Total ram usage:        5 bytes
 13683 ;; Hardware stack levels used:    1
 13684 ;; Hardware stack levels required when called:    8
 13685 ;; This function calls:
 13686 ;;		_setPercentValue
 13687 ;; This function is called by:
 13688 ;;		_DlyOff_Main
 13689 ;;		_setDimmerLights_Adj
 13690 ;;		_setRFSW_Control
 13691 ;;		_Sw_DimmerOnFunc
 13692 ;;		_Sw_DimmerOffFunc
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           
 13697                           ;psect for function _setRF_DimmerLights
 13698  0A8E                     _setRF_DimmerLights:	
 13699                           
 13700                           ;incstack = 0
 13701                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13702                           ;setRF_DimmerLights@lights stored from wreg
 13703  0A8E  0020               	movlb	0	; select bank0
 13704  0A8F  00E1               	movwf	setRF_DimmerLights@lights
 13705                           
 13706                           ;RF_Control_B1.c: 398: char status;
 13707                           ;RF_Control_B1.c: 399: status = 1;
 13708  0A90  01E0               	clrf	setRF_DimmerLights@status
 13709  0A91  0AE0               	incf	setRF_DimmerLights@status,f
 13710                           
 13711                           ;RF_Control_B1.c: 400: status <<= (lights - 1);
 13712  0A92  0861               	movf	setRF_DimmerLights@lights,w
 13713  0A93  3EFF               	addlw	-1
 13714  0A94  0A89               	incf	9,f
 13715  0A95  2A98               	goto	u4910
 13716  0A96                     u4915:	
 13717  0A96  1003               	clrc
 13718  0A97  0DE0               	rlf	setRF_DimmerLights@status,f
 13719  0A98                     u4910:	
 13720  0A98  3EFF               	addlw	-1
 13721  0A99  1D03               	skipz
 13722  0A9A  2A96               	goto	u4915
 13723                           
 13724                           ;RF_Control_B1.c: 401: product->Data[11]=lights;
 13725  0A9B  0861               	movf	setRF_DimmerLights@lights,w
 13726  0A9C  00DE               	movwf	??_setRF_DimmerLights
 13727  0A9D  086F               	movf	_product,w
 13728  0A9E  3E0B               	addlw	11
 13729  0A9F  0086               	movwf	6
 13730  0AA0  3002               	movlw	2	; select bank4/5
 13731  0AA1  0087               	movwf	7
 13732  0AA2  085E               	movf	??_setRF_DimmerLights,w
 13733  0AA3  0081               	movwf	1
 13734                           
 13735                           ;RF_Control_B1.c: 404: product->Data[(20 + lights)]=setPercentValue(((char)((100-95)*0.8
      +                          )));
 13736  0AA4  3004               	movlw	4
 13737  0AA5  3194  24F7  318A   	fcall	_setPercentValue
 13738  0AA8  0020               	movlb	0	; select bank0
 13739  0AA9  00DE               	movwf	??_setRF_DimmerLights
 13740  0AAA  0861               	movf	setRF_DimmerLights@lights,w
 13741  0AAB  3E14               	addlw	20
 13742  0AAC  076F               	addwf	_product,w
 13743  0AAD  00DF               	movwf	??_setRF_DimmerLights+1
 13744  0AAE  085F               	movf	??_setRF_DimmerLights+1,w
 13745  0AAF  0086               	movwf	6
 13746  0AB0  3002               	movlw	2	; select bank4/5
 13747  0AB1  0087               	movwf	7
 13748  0AB2  085E               	movf	??_setRF_DimmerLights,w
 13749  0AB3  0081               	movwf	1
 13750                           
 13751                           ;RF_Control_B1.c: 407: product->Data[9]=product->Data[20 + lights];
 13752  0AB4  0861               	movf	setRF_DimmerLights@lights,w
 13753  0AB5  3E14               	addlw	20
 13754  0AB6  076F               	addwf	_product,w
 13755  0AB7  00DE               	movwf	??_setRF_DimmerLights
 13756  0AB8  085E               	movf	??_setRF_DimmerLights,w
 13757  0AB9  0086               	movwf	6
 13758  0ABA  3002               	movlw	2	; select bank4/5
 13759  0ABB  0087               	movwf	7
 13760  0ABC  0801               	movf	1,w
 13761  0ABD  00DF               	movwf	??_setRF_DimmerLights+1
 13762  0ABE  086F               	movf	_product,w
 13763  0ABF  3E09               	addlw	9
 13764  0AC0  0086               	movwf	6
 13765  0AC1  3002               	movlw	2	; select bank4/5
 13766  0AC2  0087               	movwf	7
 13767  0AC3  085F               	movf	??_setRF_DimmerLights+1,w
 13768  0AC4  0081               	movwf	1
 13769                           
 13770                           ;RF_Control_B1.c: 408: product->Data[17]=product->Data[26 + lights];
 13771  0AC5  0861               	movf	setRF_DimmerLights@lights,w
 13772  0AC6  3E1A               	addlw	26
 13773  0AC7  076F               	addwf	_product,w
 13774  0AC8  00DE               	movwf	??_setRF_DimmerLights
 13775  0AC9  085E               	movf	??_setRF_DimmerLights,w
 13776  0ACA  0086               	movwf	6
 13777  0ACB  3002               	movlw	2	; select bank4/5
 13778  0ACC  0087               	movwf	7
 13779  0ACD  0801               	movf	1,w
 13780  0ACE  00DF               	movwf	??_setRF_DimmerLights+1
 13781  0ACF  086F               	movf	_product,w
 13782  0AD0  3E11               	addlw	17
 13783  0AD1  0086               	movwf	6
 13784  0AD2  3002               	movlw	2	; select bank4/5
 13785  0AD3  0087               	movwf	7
 13786  0AD4  085F               	movf	??_setRF_DimmerLights+1,w
 13787  0AD5  0081               	movwf	1
 13788                           
 13789                           ;RF_Control_B1.c: 409: if (on == 1) {
 13790  0AD6  085D               	movf	setRF_DimmerLights@on,w
 13791  0AD7  3A01               	xorlw	1
 13792  0AD8  1D03               	skipz
 13793  0AD9  2AEA               	goto	l6119
 13794                           
 13795                           ;RF_Control_B1.c: 410: product->Data[15]=(product->Data[15] | status);
 13796  0ADA  086F               	movf	_product,w
 13797  0ADB  3E0F               	addlw	15
 13798  0ADC  0086               	movwf	6
 13799  0ADD  3002               	movlw	2	; select bank4/5
 13800  0ADE  0087               	movwf	7
 13801  0ADF  0801               	movf	1,w
 13802  0AE0  0460               	iorwf	setRF_DimmerLights@status,w
 13803  0AE1  00DE               	movwf	??_setRF_DimmerLights
 13804  0AE2  086F               	movf	_product,w
 13805  0AE3  3E0F               	addlw	15
 13806  0AE4  0086               	movwf	6
 13807  0AE5  3002               	movlw	2	; select bank4/5
 13808  0AE6  0087               	movwf	7
 13809  0AE7  085E               	movf	??_setRF_DimmerLights,w
 13810  0AE8  0081               	movwf	1
 13811                           
 13812                           ;RF_Control_B1.c: 411: } else {
 13813  0AE9  0008               	return
 13814  0AEA                     l6119:	
 13815                           
 13816                           ;RF_Control_B1.c: 412: product->Data[15]=(product->Data[15]&(~status));
 13817  0AEA  086F               	movf	_product,w
 13818  0AEB  3E0F               	addlw	15
 13819  0AEC  0086               	movwf	6
 13820  0AED  3002               	movlw	2	; select bank4/5
 13821  0AEE  0087               	movwf	7
 13822  0AEF  0960               	comf	setRF_DimmerLights@status,w
 13823  0AF0  0501               	andwf	1,w
 13824  0AF1  00DE               	movwf	??_setRF_DimmerLights
 13825  0AF2  086F               	movf	_product,w
 13826  0AF3  3E0F               	addlw	15
 13827  0AF4  0086               	movwf	6
 13828  0AF5  3002               	movlw	2	; select bank4/5
 13829  0AF6  0087               	movwf	7
 13830  0AF7  085E               	movf	??_setRF_DimmerLights,w
 13831  0AF8  0081               	movwf	1
 13832  0AF9  0008               	return
 13833  0AFA                     __end_of_setRF_DimmerLights:	
 13834                           
 13835                           	psect	text85
 13836  14F7                     __ptext85:	
 13837 ;; *************** function _setPercentValue *****************
 13838 ;; Defined at:
 13839 ;;		line 768 in file "../src/Dimmer_B1.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;  value           1    wreg     unsigned char 
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  value           1   57[BANK0 ] unsigned char 
 13844 ;;  i               3   58[BANK0 ] float 
 13845 ;; Return value:  Size  Location     Type
 13846 ;;                  1    wreg      unsigned char 
 13847 ;; Registers used:
 13848 ;;		wreg, status,2, status,0, pclath, cstack
 13849 ;; Tracked objects:
 13850 ;;		On entry : 0/0
 13851 ;;		On exit  : 0/0
 13852 ;;		Unchanged: 0/0
 13853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13858 ;;Total ram usage:        4 bytes
 13859 ;; Hardware stack levels used:    1
 13860 ;; Hardware stack levels required when called:    7
 13861 ;; This function calls:
 13862 ;;		___awtoft
 13863 ;;		___ftdiv
 13864 ;;		___fttol
 13865 ;; This function is called by:
 13866 ;;		_Flash_Memory_Initialization
 13867 ;;		_setRF_DimmerLights
 13868 ;; This function uses a non-reentrant model
 13869 ;;
 13870                           
 13871                           
 13872                           ;psect for function _setPercentValue
 13873  14F7                     _setPercentValue:	
 13874                           
 13875                           ;incstack = 0
 13876                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13877                           ;setPercentValue@value stored from wreg
 13878  14F7  0020               	movlb	0	; select bank0
 13879  14F8  00D9               	movwf	setPercentValue@value
 13880                           
 13881                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
 13882  14F9  3000               	movlw	0
 13883  14FA  00DA               	movwf	setPercentValue@i
 13884  14FB  3060               	movlw	96
 13885  14FC  00DB               	movwf	setPercentValue@i+1
 13886  14FD  3042               	movlw	66
 13887  14FE  00DC               	movwf	setPercentValue@i+2
 13888                           
 13889                           ;Dimmer_B1.c: 771: i /= 100;
 13890  14FF  3000               	movlw	0
 13891  1500  00AE               	movwf	___ftdiv@f2
 13892  1501  30C8               	movlw	200
 13893  1502  00AF               	movwf	___ftdiv@f2+1
 13894  1503  3042               	movlw	66
 13895  1504  00B0               	movwf	___ftdiv@f2+2
 13896  1505  085A               	movf	setPercentValue@i,w
 13897  1506  00B1               	movwf	___ftdiv@f1
 13898  1507  085B               	movf	setPercentValue@i+1,w
 13899  1508  00B2               	movwf	___ftdiv@f1+1
 13900  1509  085C               	movf	setPercentValue@i+2,w
 13901  150A  00B3               	movwf	___ftdiv@f1+2
 13902  150B  3187  274A  3194   	fcall	___ftdiv
 13903  150E  0020               	movlb	0	; select bank0
 13904  150F  082E               	movf	?___ftdiv,w
 13905  1510  00DA               	movwf	setPercentValue@i
 13906  1511  082F               	movf	?___ftdiv+1,w
 13907  1512  00DB               	movwf	setPercentValue@i+1
 13908  1513  0830               	movf	?___ftdiv+2,w
 13909  1514  00DC               	movwf	setPercentValue@i+2
 13910                           
 13911                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-95)*0.8))) / i));
 13912  1515  0859               	movf	setPercentValue@value,w
 13913  1516  3EFC               	addlw	252
 13914  1517  00A8               	movwf	___awtoft@c
 13915  1518  30FF               	movlw	255
 13916  1519  1803               	skipnc
 13917  151A  3000               	movlw	0
 13918  151B  00A9               	movwf	___awtoft@c+1
 13919  151C  3191  2142  3194   	fcall	___awtoft
 13920  151F  0020               	movlb	0	; select bank0
 13921  1520  0828               	movf	?___awtoft,w
 13922  1521  00B1               	movwf	___ftdiv@f1
 13923  1522  0829               	movf	?___awtoft+1,w
 13924  1523  00B2               	movwf	___ftdiv@f1+1
 13925  1524  082A               	movf	?___awtoft+2,w
 13926  1525  00B3               	movwf	___ftdiv@f1+2
 13927  1526  085A               	movf	setPercentValue@i,w
 13928  1527  00AE               	movwf	___ftdiv@f2
 13929  1528  085B               	movf	setPercentValue@i+1,w
 13930  1529  00AF               	movwf	___ftdiv@f2+1
 13931  152A  085C               	movf	setPercentValue@i+2,w
 13932  152B  00B0               	movwf	___ftdiv@f2+2
 13933  152C  3187  274A  3194   	fcall	___ftdiv
 13934  152F  0020               	movlb	0	; select bank0
 13935  1530  082E               	movf	?___ftdiv,w
 13936  1531  00CB               	movwf	___fttol@f1
 13937  1532  082F               	movf	?___ftdiv+1,w
 13938  1533  00CC               	movwf	___fttol@f1+1
 13939  1534  0830               	movf	?___ftdiv+2,w
 13940  1535  00CD               	movwf	___fttol@f1+2
 13941  1536  318D  25D1         	fcall	___fttol
 13942  1538  0020               	movlb	0	; select bank0
 13943  1539  034B               	decf	?___fttol,w
 13944  153A  3AFF               	xorlw	255
 13945  153B  3E64               	addlw	100
 13946  153C  0008               	return
 13947  153D                     __end_of_setPercentValue:	
 13948                           
 13949                           	psect	text86
 13950  0DD1                     __ptext86:	
 13951 ;; *************** function ___fttol *****************
 13952 ;; Defined at:
 13953 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;  f1              3   43[BANK0 ] float 
 13956 ;; Auto vars:     Size  Location     Type
 13957 ;;  lval            4   52[BANK0 ] unsigned long 
 13958 ;;  exp1            1   56[BANK0 ] unsigned char 
 13959 ;;  sign1           1   51[BANK0 ] unsigned char 
 13960 ;; Return value:  Size  Location     Type
 13961 ;;                  4   43[BANK0 ] long 
 13962 ;; Registers used:
 13963 ;;		wreg, status,2, status,0
 13964 ;; Tracked objects:
 13965 ;;		On entry : 0/0
 13966 ;;		On exit  : 0/0
 13967 ;;		Unchanged: 0/0
 13968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13971 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;Total ram usage:       14 bytes
 13974 ;; Hardware stack levels used:    1
 13975 ;; Hardware stack levels required when called:    5
 13976 ;; This function calls:
 13977 ;;		Nothing
 13978 ;; This function is called by:
 13979 ;;		_getPercentValue
 13980 ;;		_setPercentValue
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           
 13985                           ;psect for function ___fttol
 13986  0DD1                     ___fttol:	
 13987                           
 13988                           ;incstack = 0
 13989                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13990  0DD1  0020               	movlb	0	; select bank0
 13991  0DD2  084B               	movf	___fttol@f1,w
 13992  0DD3  00CF               	movwf	??___fttol
 13993  0DD4  084C               	movf	___fttol@f1+1,w
 13994  0DD5  00D0               	movwf	??___fttol+1
 13995  0DD6  084D               	movf	___fttol@f1+2,w
 13996  0DD7  00D1               	movwf	??___fttol+2
 13997  0DD8  1003               	clrc
 13998  0DD9  0D50               	rlf	??___fttol+1,w
 13999  0DDA  0D51               	rlf	??___fttol+2,w
 14000  0DDB  00D2               	movwf	??___fttol+3
 14001  0DDC  0852               	movf	??___fttol+3,w
 14002  0DDD  00D8               	movwf	___fttol@exp1
 14003  0DDE  08D8               	movf	___fttol@exp1,f
 14004  0DDF  1D03               	skipz
 14005  0DE0  2DEA               	goto	l5873
 14006  0DE1  3000               	movlw	0
 14007  0DE2  00CE               	movwf	?___fttol+3
 14008  0DE3  3000               	movlw	0
 14009  0DE4  00CD               	movwf	?___fttol+2
 14010  0DE5  3000               	movlw	0
 14011  0DE6  00CC               	movwf	?___fttol+1
 14012  0DE7  3000               	movlw	0
 14013  0DE8  00CB               	movwf	?___fttol
 14014  0DE9  0008               	return
 14015  0DEA                     l5873:	
 14016  0DEA  084B               	movf	___fttol@f1,w
 14017  0DEB  00CF               	movwf	??___fttol
 14018  0DEC  084C               	movf	___fttol@f1+1,w
 14019  0DED  00D0               	movwf	??___fttol+1
 14020  0DEE  084D               	movf	___fttol@f1+2,w
 14021  0DEF  00D1               	movwf	??___fttol+2
 14022  0DF0  3017               	movlw	23
 14023  0DF1                     u4485:	
 14024  0DF1  36D1               	lsrf	??___fttol+2,f
 14025  0DF2  0CD0               	rrf	??___fttol+1,f
 14026  0DF3  0CCF               	rrf	??___fttol,f
 14027  0DF4  0B89               	decfsz	9,f
 14028  0DF5  2DF1               	goto	u4485
 14029  0DF6  084F               	movf	??___fttol,w
 14030  0DF7  00D2               	movwf	??___fttol+3
 14031  0DF8  0852               	movf	??___fttol+3,w
 14032  0DF9  00D3               	movwf	___fttol@sign1
 14033  0DFA  17CC               	bsf	___fttol@f1+1,7
 14034  0DFB  30FF               	movlw	255
 14035  0DFC  05CB               	andwf	___fttol@f1,f
 14036  0DFD  30FF               	movlw	255
 14037  0DFE  05CC               	andwf	___fttol@f1+1,f
 14038  0DFF  3000               	movlw	0
 14039  0E00  05CD               	andwf	___fttol@f1+2,f
 14040  0E01  084B               	movf	___fttol@f1,w
 14041  0E02  00D4               	movwf	___fttol@lval
 14042  0E03  084C               	movf	___fttol@f1+1,w
 14043  0E04  00D5               	movwf	___fttol@lval+1
 14044  0E05  084D               	movf	___fttol@f1+2,w
 14045  0E06  00D6               	movwf	___fttol@lval+2
 14046  0E07  01D7               	clrf	___fttol@lval+3
 14047  0E08  308E               	movlw	142
 14048  0E09  02D8               	subwf	___fttol@exp1,f
 14049  0E0A  1FD8               	btfss	___fttol@exp1,7
 14050  0E0B  2E28               	goto	l5893
 14051  0E0C  0858               	movf	___fttol@exp1,w
 14052  0E0D  3A80               	xorlw	128
 14053  0E0E  3E8F               	addlw	143
 14054  0E0F  1803               	skipnc
 14055  0E10  2E1A               	goto	l5891
 14056  0E11  3000               	movlw	0
 14057  0E12  00CE               	movwf	?___fttol+3
 14058  0E13  3000               	movlw	0
 14059  0E14  00CD               	movwf	?___fttol+2
 14060  0E15  3000               	movlw	0
 14061  0E16  00CC               	movwf	?___fttol+1
 14062  0E17  3000               	movlw	0
 14063  0E18  00CB               	movwf	?___fttol
 14064  0E19  0008               	return
 14065  0E1A                     l5891:	
 14066  0E1A  3001               	movlw	1
 14067  0E1B                     u4515:	
 14068  0E1B  36D7               	lsrf	___fttol@lval+3,f
 14069  0E1C  0CD6               	rrf	___fttol@lval+2,f
 14070  0E1D  0CD5               	rrf	___fttol@lval+1,f
 14071  0E1E  0CD4               	rrf	___fttol@lval,f
 14072  0E1F  0B89               	decfsz	9,f
 14073  0E20  2E1B               	goto	u4515
 14074  0E21  3001               	movlw	1
 14075  0E22  00CF               	movwf	??___fttol
 14076  0E23  084F               	movf	??___fttol,w
 14077  0E24  07D8               	addwf	___fttol@exp1,f
 14078  0E25  1903               	btfsc	3,2
 14079  0E26  2E41               	goto	l5903
 14080  0E27  2E1A               	goto	l5891
 14081  0E28                     l5893:	
 14082  0E28  3018               	movlw	24
 14083  0E29  0258               	subwf	___fttol@exp1,w
 14084  0E2A  1C03               	skipc
 14085  0E2B  2E3E               	goto	l5901
 14086  0E2C  3000               	movlw	0
 14087  0E2D  00CE               	movwf	?___fttol+3
 14088  0E2E  3000               	movlw	0
 14089  0E2F  00CD               	movwf	?___fttol+2
 14090  0E30  3000               	movlw	0
 14091  0E31  00CC               	movwf	?___fttol+1
 14092  0E32  3000               	movlw	0
 14093  0E33  00CB               	movwf	?___fttol
 14094  0E34  0008               	return
 14095  0E35                     l5899:	
 14096  0E35  3001               	movlw	1
 14097  0E36                     u4545:	
 14098  0E36  35D4               	lslf	___fttol@lval,f
 14099  0E37  0DD5               	rlf	___fttol@lval+1,f
 14100  0E38  0DD6               	rlf	___fttol@lval+2,f
 14101  0E39  0DD7               	rlf	___fttol@lval+3,f
 14102  0E3A  0B89               	decfsz	9,f
 14103  0E3B  2E36               	goto	u4545
 14104  0E3C  3001               	movlw	1
 14105  0E3D  02D8               	subwf	___fttol@exp1,f
 14106  0E3E                     l5901:	
 14107  0E3E  08D8               	movf	___fttol@exp1,f
 14108  0E3F  1D03               	skipz
 14109  0E40  2E35               	goto	l5899
 14110  0E41                     l5903:	
 14111  0E41  0853               	movf	___fttol@sign1,w
 14112  0E42  1903               	btfsc	3,2
 14113  0E43  2E4F               	goto	l5907
 14114  0E44  09D4               	comf	___fttol@lval,f
 14115  0E45  09D5               	comf	___fttol@lval+1,f
 14116  0E46  09D6               	comf	___fttol@lval+2,f
 14117  0E47  09D7               	comf	___fttol@lval+3,f
 14118  0E48  0AD4               	incf	___fttol@lval,f
 14119  0E49  1903               	skipnz
 14120  0E4A  0AD5               	incf	___fttol@lval+1,f
 14121  0E4B  1903               	skipnz
 14122  0E4C  0AD6               	incf	___fttol@lval+2,f
 14123  0E4D  1903               	skipnz
 14124  0E4E  0AD7               	incf	___fttol@lval+3,f
 14125  0E4F                     l5907:	
 14126  0E4F  0857               	movf	___fttol@lval+3,w
 14127  0E50  00CE               	movwf	?___fttol+3
 14128  0E51  0856               	movf	___fttol@lval+2,w
 14129  0E52  00CD               	movwf	?___fttol+2
 14130  0E53  0855               	movf	___fttol@lval+1,w
 14131  0E54  00CC               	movwf	?___fttol+1
 14132  0E55  0854               	movf	___fttol@lval,w
 14133  0E56  00CB               	movwf	?___fttol
 14134  0E57  0008               	return
 14135  0E58                     __end_of___fttol:	
 14136                           
 14137                           	psect	text87
 14138  074A                     __ptext87:	
 14139 ;; *************** function ___ftdiv *****************
 14140 ;; Defined at:
 14141 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;  f2              3   14[BANK0 ] float 
 14144 ;;  f1              3   17[BANK0 ] float 
 14145 ;; Auto vars:     Size  Location     Type
 14146 ;;  f3              3   25[BANK0 ] float 
 14147 ;;  sign            1   29[BANK0 ] unsigned char 
 14148 ;;  exp             1   28[BANK0 ] unsigned char 
 14149 ;;  cntr            1   24[BANK0 ] unsigned char 
 14150 ;; Return value:  Size  Location     Type
 14151 ;;                  3   14[BANK0 ] float 
 14152 ;; Registers used:
 14153 ;;		wreg, status,2, status,0, pclath, cstack
 14154 ;; Tracked objects:
 14155 ;;		On entry : 0/0
 14156 ;;		On exit  : 0/0
 14157 ;;		Unchanged: 0/0
 14158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14159 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;Total ram usage:       16 bytes
 14164 ;; Hardware stack levels used:    1
 14165 ;; Hardware stack levels required when called:    6
 14166 ;; This function calls:
 14167 ;;		___ftpack
 14168 ;; This function is called by:
 14169 ;;		_getPercentValue
 14170 ;;		_setPercentValue
 14171 ;; This function uses a non-reentrant model
 14172 ;;
 14173                           
 14174                           
 14175                           ;psect for function ___ftdiv
 14176  074A                     ___ftdiv:	
 14177                           
 14178                           ;incstack = 0
 14179                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14180  074A  0020               	movlb	0	; select bank0
 14181  074B  0831               	movf	___ftdiv@f1,w
 14182  074C  00B4               	movwf	??___ftdiv
 14183  074D  0832               	movf	___ftdiv@f1+1,w
 14184  074E  00B5               	movwf	??___ftdiv+1
 14185  074F  0833               	movf	___ftdiv@f1+2,w
 14186  0750  00B6               	movwf	??___ftdiv+2
 14187  0751  1003               	clrc
 14188  0752  0D35               	rlf	??___ftdiv+1,w
 14189  0753  0D36               	rlf	??___ftdiv+2,w
 14190  0754  00B7               	movwf	??___ftdiv+3
 14191  0755  0837               	movf	??___ftdiv+3,w
 14192  0756  00BC               	movwf	___ftdiv@exp
 14193  0757  08BC               	movf	___ftdiv@exp,f
 14194  0758  1D03               	skipz
 14195  0759  2F61               	goto	l5781
 14196  075A  3000               	movlw	0
 14197  075B  00AE               	movwf	?___ftdiv
 14198  075C  3000               	movlw	0
 14199  075D  00AF               	movwf	?___ftdiv+1
 14200  075E  3000               	movlw	0
 14201  075F  00B0               	movwf	?___ftdiv+2
 14202  0760  0008               	return
 14203  0761                     l5781:	
 14204  0761  082E               	movf	___ftdiv@f2,w
 14205  0762  00B4               	movwf	??___ftdiv
 14206  0763  082F               	movf	___ftdiv@f2+1,w
 14207  0764  00B5               	movwf	??___ftdiv+1
 14208  0765  0830               	movf	___ftdiv@f2+2,w
 14209  0766  00B6               	movwf	??___ftdiv+2
 14210  0767  1003               	clrc
 14211  0768  0D35               	rlf	??___ftdiv+1,w
 14212  0769  0D36               	rlf	??___ftdiv+2,w
 14213  076A  00B7               	movwf	??___ftdiv+3
 14214  076B  0837               	movf	??___ftdiv+3,w
 14215  076C  00BD               	movwf	___ftdiv@sign
 14216  076D  08BD               	movf	___ftdiv@sign,f
 14217  076E  1D03               	skipz
 14218  076F  2F77               	goto	l5787
 14219  0770  3000               	movlw	0
 14220  0771  00AE               	movwf	?___ftdiv
 14221  0772  3000               	movlw	0
 14222  0773  00AF               	movwf	?___ftdiv+1
 14223  0774  3000               	movlw	0
 14224  0775  00B0               	movwf	?___ftdiv+2
 14225  0776  0008               	return
 14226  0777                     l5787:	
 14227  0777  3000               	movlw	0
 14228  0778  00B9               	movwf	___ftdiv@f3
 14229  0779  3000               	movlw	0
 14230  077A  00BA               	movwf	___ftdiv@f3+1
 14231  077B  3000               	movlw	0
 14232  077C  00BB               	movwf	___ftdiv@f3+2
 14233  077D  3089               	movlw	137
 14234  077E  073D               	addwf	___ftdiv@sign,w
 14235  077F  00B4               	movwf	??___ftdiv
 14236  0780  0834               	movf	??___ftdiv,w
 14237  0781  02BC               	subwf	___ftdiv@exp,f
 14238  0782  0831               	movf	___ftdiv@f1,w
 14239  0783  00B4               	movwf	??___ftdiv
 14240  0784  0832               	movf	___ftdiv@f1+1,w
 14241  0785  00B5               	movwf	??___ftdiv+1
 14242  0786  0833               	movf	___ftdiv@f1+2,w
 14243  0787  00B6               	movwf	??___ftdiv+2
 14244  0788  3010               	movlw	16
 14245  0789                     u4295:	
 14246  0789  36B6               	lsrf	??___ftdiv+2,f
 14247  078A  0CB5               	rrf	??___ftdiv+1,f
 14248  078B  0CB4               	rrf	??___ftdiv,f
 14249  078C  0B89               	decfsz	9,f
 14250  078D  2F89               	goto	u4295
 14251  078E  0834               	movf	??___ftdiv,w
 14252  078F  00B7               	movwf	??___ftdiv+3
 14253  0790  0837               	movf	??___ftdiv+3,w
 14254  0791  00BD               	movwf	___ftdiv@sign
 14255  0792  082E               	movf	___ftdiv@f2,w
 14256  0793  00B4               	movwf	??___ftdiv
 14257  0794  082F               	movf	___ftdiv@f2+1,w
 14258  0795  00B5               	movwf	??___ftdiv+1
 14259  0796  0830               	movf	___ftdiv@f2+2,w
 14260  0797  00B6               	movwf	??___ftdiv+2
 14261  0798  3010               	movlw	16
 14262  0799                     u4305:	
 14263  0799  36B6               	lsrf	??___ftdiv+2,f
 14264  079A  0CB5               	rrf	??___ftdiv+1,f
 14265  079B  0CB4               	rrf	??___ftdiv,f
 14266  079C  0B89               	decfsz	9,f
 14267  079D  2F99               	goto	u4305
 14268  079E  0834               	movf	??___ftdiv,w
 14269  079F  00B7               	movwf	??___ftdiv+3
 14270  07A0  0837               	movf	??___ftdiv+3,w
 14271  07A1  06BD               	xorwf	___ftdiv@sign,f
 14272  07A2  3080               	movlw	128
 14273  07A3  00B4               	movwf	??___ftdiv
 14274  07A4  0834               	movf	??___ftdiv,w
 14275  07A5  05BD               	andwf	___ftdiv@sign,f
 14276  07A6  17B2               	bsf	___ftdiv@f1+1,7
 14277  07A7  30FF               	movlw	255
 14278  07A8  05B1               	andwf	___ftdiv@f1,f
 14279  07A9  30FF               	movlw	255
 14280  07AA  05B2               	andwf	___ftdiv@f1+1,f
 14281  07AB  3000               	movlw	0
 14282  07AC  05B3               	andwf	___ftdiv@f1+2,f
 14283  07AD  17AF               	bsf	___ftdiv@f2+1,7
 14284  07AE  30FF               	movlw	255
 14285  07AF  05AE               	andwf	___ftdiv@f2,f
 14286  07B0  30FF               	movlw	255
 14287  07B1  05AF               	andwf	___ftdiv@f2+1,f
 14288  07B2  3000               	movlw	0
 14289  07B3  05B0               	andwf	___ftdiv@f2+2,f
 14290  07B4  3018               	movlw	24
 14291  07B5  00B4               	movwf	??___ftdiv
 14292  07B6  0834               	movf	??___ftdiv,w
 14293  07B7  00B8               	movwf	___ftdiv@cntr
 14294  07B8                     l5801:	
 14295  07B8  3001               	movlw	1
 14296  07B9                     u4315:	
 14297  07B9  35B9               	lslf	___ftdiv@f3,f
 14298  07BA  0DBA               	rlf	___ftdiv@f3+1,f
 14299  07BB  0DBB               	rlf	___ftdiv@f3+2,f
 14300  07BC  0B89               	decfsz	9,f
 14301  07BD  2FB9               	goto	u4315
 14302  07BE  0830               	movf	___ftdiv@f2+2,w
 14303  07BF  0233               	subwf	___ftdiv@f1+2,w
 14304  07C0  1D03               	skipz
 14305  07C1  2FC8               	goto	u4325
 14306  07C2  082F               	movf	___ftdiv@f2+1,w
 14307  07C3  0232               	subwf	___ftdiv@f1+1,w
 14308  07C4  1D03               	skipz
 14309  07C5  2FC8               	goto	u4325
 14310  07C6  082E               	movf	___ftdiv@f2,w
 14311  07C7  0231               	subwf	___ftdiv@f1,w
 14312  07C8                     u4325:	
 14313  07C8  1C03               	skipc
 14314  07C9  2FD1               	goto	l5809
 14315  07CA  082E               	movf	___ftdiv@f2,w
 14316  07CB  02B1               	subwf	___ftdiv@f1,f
 14317  07CC  082F               	movf	___ftdiv@f2+1,w
 14318  07CD  3BB2               	subwfb	___ftdiv@f1+1,f
 14319  07CE  0830               	movf	___ftdiv@f2+2,w
 14320  07CF  3BB3               	subwfb	___ftdiv@f1+2,f
 14321  07D0  1439               	bsf	___ftdiv@f3,0
 14322  07D1                     l5809:	
 14323  07D1  3001               	movlw	1
 14324  07D2                     u4335:	
 14325  07D2  35B1               	lslf	___ftdiv@f1,f
 14326  07D3  0DB2               	rlf	___ftdiv@f1+1,f
 14327  07D4  0DB3               	rlf	___ftdiv@f1+2,f
 14328  07D5  0B89               	decfsz	9,f
 14329  07D6  2FD2               	goto	u4335
 14330  07D7  3001               	movlw	1
 14331  07D8  02B8               	subwf	___ftdiv@cntr,f
 14332  07D9  1D03               	btfss	3,2
 14333  07DA  2FB8               	goto	l5801
 14334  07DB  0839               	movf	___ftdiv@f3,w
 14335  07DC  00A0               	movwf	___ftpack@arg
 14336  07DD  083A               	movf	___ftdiv@f3+1,w
 14337  07DE  00A1               	movwf	___ftpack@arg+1
 14338  07DF  083B               	movf	___ftdiv@f3+2,w
 14339  07E0  00A2               	movwf	___ftpack@arg+2
 14340  07E1  083C               	movf	___ftdiv@exp,w
 14341  07E2  00B4               	movwf	??___ftdiv
 14342  07E3  0834               	movf	??___ftdiv,w
 14343  07E4  00A3               	movwf	___ftpack@exp
 14344  07E5  083D               	movf	___ftdiv@sign,w
 14345  07E6  00B5               	movwf	??___ftdiv+1
 14346  07E7  0835               	movf	??___ftdiv+1,w
 14347  07E8  00A4               	movwf	___ftpack@sign
 14348  07E9  3188  2093         	fcall	___ftpack
 14349  07EB  0020               	movlb	0	; select bank0
 14350  07EC  0820               	movf	?___ftpack,w
 14351  07ED  00AE               	movwf	?___ftdiv
 14352  07EE  0821               	movf	?___ftpack+1,w
 14353  07EF  00AF               	movwf	?___ftdiv+1
 14354  07F0  0822               	movf	?___ftpack+2,w
 14355  07F1  00B0               	movwf	?___ftdiv+2
 14356  07F2  0008               	return
 14357  07F3                     __end_of___ftdiv:	
 14358                           
 14359                           	psect	text88
 14360  1142                     __ptext88:	
 14361 ;; *************** function ___awtoft *****************
 14362 ;; Defined at:
 14363 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14364 ;; Parameters:    Size  Location     Type
 14365 ;;  c               2    8[BANK0 ] int 
 14366 ;; Auto vars:     Size  Location     Type
 14367 ;;  sign            1   13[BANK0 ] unsigned char 
 14368 ;; Return value:  Size  Location     Type
 14369 ;;                  3    8[BANK0 ] float 
 14370 ;; Registers used:
 14371 ;;		wreg, status,2, status,0, pclath, cstack
 14372 ;; Tracked objects:
 14373 ;;		On entry : 0/0
 14374 ;;		On exit  : 0/0
 14375 ;;		Unchanged: 0/0
 14376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14377 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;Total ram usage:        6 bytes
 14382 ;; Hardware stack levels used:    1
 14383 ;; Hardware stack levels required when called:    6
 14384 ;; This function calls:
 14385 ;;		___ftpack
 14386 ;; This function is called by:
 14387 ;;		_getPercentValue
 14388 ;;		_setPercentValue
 14389 ;; This function uses a non-reentrant model
 14390 ;;
 14391                           
 14392                           
 14393                           ;psect for function ___awtoft
 14394  1142                     ___awtoft:	
 14395                           
 14396                           ;incstack = 0
 14397                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14398  1142  0020               	movlb	0	; select bank0
 14399  1143  01AD               	clrf	___awtoft@sign
 14400  1144  1FA9               	btfss	___awtoft@c+1,7
 14401  1145  294D               	goto	l5699
 14402  1146  09A8               	comf	___awtoft@c,f
 14403  1147  09A9               	comf	___awtoft@c+1,f
 14404  1148  0AA8               	incf	___awtoft@c,f
 14405  1149  1903               	skipnz
 14406  114A  0AA9               	incf	___awtoft@c+1,f
 14407  114B  01AD               	clrf	___awtoft@sign
 14408  114C  0AAD               	incf	___awtoft@sign,f
 14409  114D                     l5699:	
 14410  114D  0828               	movf	___awtoft@c,w
 14411  114E  00A0               	movwf	___ftpack@arg
 14412  114F  0829               	movf	___awtoft@c+1,w
 14413  1150  00A1               	movwf	___ftpack@arg+1
 14414  1151  01A2               	clrf	___ftpack@arg+2
 14415  1152  308E               	movlw	142
 14416  1153  00AB               	movwf	??___awtoft
 14417  1154  082B               	movf	??___awtoft,w
 14418  1155  00A3               	movwf	___ftpack@exp
 14419  1156  082D               	movf	___awtoft@sign,w
 14420  1157  00AC               	movwf	??___awtoft+1
 14421  1158  082C               	movf	??___awtoft+1,w
 14422  1159  00A4               	movwf	___ftpack@sign
 14423  115A  3188  2093         	fcall	___ftpack
 14424  115C  0020               	movlb	0	; select bank0
 14425  115D  0820               	movf	?___ftpack,w
 14426  115E  00A8               	movwf	?___awtoft
 14427  115F  0821               	movf	?___ftpack+1,w
 14428  1160  00A9               	movwf	?___awtoft+1
 14429  1161  0822               	movf	?___ftpack+2,w
 14430  1162  00AA               	movwf	?___awtoft+2
 14431  1163  0008               	return
 14432  1164                     __end_of___awtoft:	
 14433                           
 14434                           	psect	text89
 14435  0893                     __ptext89:	
 14436 ;; *************** function ___ftpack *****************
 14437 ;; Defined at:
 14438 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14439 ;; Parameters:    Size  Location     Type
 14440 ;;  arg             3    0[BANK0 ] unsigned um
 14441 ;;  exp             1    3[BANK0 ] unsigned char 
 14442 ;;  sign            1    4[BANK0 ] unsigned char 
 14443 ;; Auto vars:     Size  Location     Type
 14444 ;;		None
 14445 ;; Return value:  Size  Location     Type
 14446 ;;                  3    0[BANK0 ] float 
 14447 ;; Registers used:
 14448 ;;		wreg, status,2, status,0
 14449 ;; Tracked objects:
 14450 ;;		On entry : 0/0
 14451 ;;		On exit  : 0/0
 14452 ;;		Unchanged: 0/0
 14453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14454 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14458 ;;Total ram usage:        8 bytes
 14459 ;; Hardware stack levels used:    1
 14460 ;; Hardware stack levels required when called:    5
 14461 ;; This function calls:
 14462 ;;		Nothing
 14463 ;; This function is called by:
 14464 ;;		___awtoft
 14465 ;;		___ftadd
 14466 ;;		___ftdiv
 14467 ;;		___ftmul
 14468 ;; This function uses a non-reentrant model
 14469 ;;
 14470                           
 14471                           
 14472                           ;psect for function ___ftpack
 14473  0893                     ___ftpack:	
 14474                           
 14475                           ;incstack = 0
 14476                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14477  0893  0020               	movlb	0	; select bank0
 14478  0894  0823               	movf	___ftpack@exp,w
 14479  0895  1903               	btfsc	3,2
 14480  0896  289C               	goto	l5665
 14481  0897  0822               	movf	___ftpack@arg+2,w
 14482  0898  0421               	iorwf	___ftpack@arg+1,w
 14483  0899  0420               	iorwf	___ftpack@arg,w
 14484  089A  1D03               	skipz
 14485  089B  28AD               	goto	l5671
 14486  089C                     l5665:	
 14487  089C  3000               	movlw	0
 14488  089D  00A0               	movwf	?___ftpack
 14489  089E  3000               	movlw	0
 14490  089F  00A1               	movwf	?___ftpack+1
 14491  08A0  3000               	movlw	0
 14492  08A1  00A2               	movwf	?___ftpack+2
 14493  08A2  0008               	return
 14494  08A3                     l5669:	
 14495  08A3  3001               	movlw	1
 14496  08A4  00A5               	movwf	??___ftpack
 14497  08A5  0825               	movf	??___ftpack,w
 14498  08A6  07A3               	addwf	___ftpack@exp,f
 14499  08A7  3001               	movlw	1
 14500  08A8                     u3945:	
 14501  08A8  36A2               	lsrf	___ftpack@arg+2,f
 14502  08A9  0CA1               	rrf	___ftpack@arg+1,f
 14503  08AA  0CA0               	rrf	___ftpack@arg,f
 14504  08AB  0B89               	decfsz	9,f
 14505  08AC  28A8               	goto	u3945
 14506  08AD                     l5671:	
 14507  08AD  30FE               	movlw	254
 14508  08AE  0522               	andwf	___ftpack@arg+2,w
 14509  08AF  1903               	btfsc	3,2
 14510  08B0  28C6               	goto	l3059
 14511  08B1  28A3               	goto	l5669
 14512  08B2                     l5673:	
 14513  08B2  3001               	movlw	1
 14514  08B3  00A5               	movwf	??___ftpack
 14515  08B4  0825               	movf	??___ftpack,w
 14516  08B5  07A3               	addwf	___ftpack@exp,f
 14517  08B6  3001               	movlw	1
 14518  08B7  07A0               	addwf	___ftpack@arg,f
 14519  08B8  3000               	movlw	0
 14520  08B9  1803               	skipnc
 14521  08BA  3001               	movlw	1
 14522  08BB  07A1               	addwf	___ftpack@arg+1,f
 14523  08BC  3000               	movlw	0
 14524  08BD  1803               	skipnc
 14525  08BE  3001               	movlw	1
 14526  08BF  07A2               	addwf	___ftpack@arg+2,f
 14527  08C0  3001               	movlw	1
 14528  08C1                     u3965:	
 14529  08C1  36A2               	lsrf	___ftpack@arg+2,f
 14530  08C2  0CA1               	rrf	___ftpack@arg+1,f
 14531  08C3  0CA0               	rrf	___ftpack@arg,f
 14532  08C4  0B89               	decfsz	9,f
 14533  08C5  28C1               	goto	u3965
 14534  08C6                     l3059:	
 14535  08C6  30FF               	movlw	255
 14536  08C7  0522               	andwf	___ftpack@arg+2,w
 14537  08C8  1903               	btfsc	3,2
 14538  08C9  28D3               	goto	l5681
 14539  08CA  28B2               	goto	l5673
 14540  08CB                     l5679:	
 14541  08CB  3001               	movlw	1
 14542  08CC  02A3               	subwf	___ftpack@exp,f
 14543  08CD  3001               	movlw	1
 14544  08CE                     u3985:	
 14545  08CE  35A0               	lslf	___ftpack@arg,f
 14546  08CF  0DA1               	rlf	___ftpack@arg+1,f
 14547  08D0  0DA2               	rlf	___ftpack@arg+2,f
 14548  08D1  0B89               	decfsz	9,f
 14549  08D2  28CE               	goto	u3985
 14550  08D3                     l5681:	
 14551  08D3  1FA1               	btfss	___ftpack@arg+1,7
 14552  08D4  28CB               	goto	l5679
 14553  08D5  1823               	btfsc	___ftpack@exp,0
 14554  08D6  28DD               	goto	l3065
 14555  08D7  30FF               	movlw	255
 14556  08D8  05A0               	andwf	___ftpack@arg,f
 14557  08D9  307F               	movlw	127
 14558  08DA  05A1               	andwf	___ftpack@arg+1,f
 14559  08DB  30FF               	movlw	255
 14560  08DC  05A2               	andwf	___ftpack@arg+2,f
 14561  08DD                     l3065:	
 14562  08DD  1003               	clrc
 14563  08DE  0CA3               	rrf	___ftpack@exp,f
 14564  08DF  0823               	movf	___ftpack@exp,w
 14565  08E0  00A5               	movwf	??___ftpack
 14566  08E1  01A6               	clrf	??___ftpack+1
 14567  08E2  01A7               	clrf	??___ftpack+2
 14568  08E3  3010               	movlw	16
 14569  08E4                     u4015:	
 14570  08E4  35A5               	lslf	??___ftpack,f
 14571  08E5  0DA6               	rlf	??___ftpack+1,f
 14572  08E6  0DA7               	rlf	??___ftpack+2,f
 14573  08E7  0B89               	decfsz	9,f
 14574  08E8  28E4               	goto	u4015
 14575  08E9  0825               	movf	??___ftpack,w
 14576  08EA  04A0               	iorwf	___ftpack@arg,f
 14577  08EB  0826               	movf	??___ftpack+1,w
 14578  08EC  04A1               	iorwf	___ftpack@arg+1,f
 14579  08ED  0827               	movf	??___ftpack+2,w
 14580  08EE  04A2               	iorwf	___ftpack@arg+2,f
 14581  08EF  0824               	movf	___ftpack@sign,w
 14582  08F0  1903               	btfsc	3,2
 14583  08F1  0008               	return
 14584  08F2  17A2               	bsf	___ftpack@arg+2,7
 14585  08F3  0008               	return
 14586  08F4                     __end_of___ftpack:	
 14587                           
 14588                           	psect	text90
 14589  1D79                     __ptext90:	
 14590 ;; *************** function _setRFSW_Status *****************
 14591 ;; Defined at:
 14592 ;;		line 379 in file "../src/RF_Control_B1.c"
 14593 ;; Parameters:    Size  Location     Type
 14594 ;;  sw              1    wreg     unsigned char 
 14595 ;;  command         1    2[BANK0 ] unsigned char 
 14596 ;; Auto vars:     Size  Location     Type
 14597 ;;  sw              1    3[BANK0 ] unsigned char 
 14598 ;; Return value:  Size  Location     Type
 14599 ;;		None               void
 14600 ;; Registers used:
 14601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14602 ;; Tracked objects:
 14603 ;;		On entry : 0/0
 14604 ;;		On exit  : 0/0
 14605 ;;		Unchanged: 0/0
 14606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14607 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14611 ;;Total ram usage:        2 bytes
 14612 ;; Hardware stack levels used:    1
 14613 ;; Hardware stack levels required when called:    6
 14614 ;; This function calls:
 14615 ;;		_RfSWPointSelect
 14616 ;; This function is called by:
 14617 ;;		_DlyOff_Main
 14618 ;;		_setDimmerLights_ERROR
 14619 ;;		_setControl_Lights_Table
 14620 ;;		_Sw_DimmerOnFunc
 14621 ;;		_Sw_DimmerAdjFunc
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           
 14626                           ;psect for function _setRFSW_Status
 14627  1D79                     _setRFSW_Status:	
 14628                           
 14629                           ;incstack = 0
 14630                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14631                           ;setRFSW_Status@sw stored from wreg
 14632  1D79  0020               	movlb	0	; select bank0
 14633  1D7A  00A3               	movwf	setRFSW_Status@sw
 14634                           
 14635                           ;RF_Control_B1.c: 380: RfSWPointSelect(sw);
 14636  1D7B  0823               	movf	setRFSW_Status@sw,w
 14637  1D7C  3190  20C1         	fcall	_RfSWPointSelect
 14638                           
 14639                           ;RF_Control_B1.c: 381: RFSW->Status = command;
 14640  1D7E  0021               	movlb	1	; select bank1
 14641  1D7F  084D               	movf	_RFSW^(0+128),w
 14642  1D80  0086               	movwf	6
 14643  1D81  0187               	clrf	7
 14644  1D82  0020               	movlb	0	; select bank0
 14645  1D83  0822               	movf	setRFSW_Status@command,w
 14646  1D84  1001               	bcf	1,0
 14647  1D85  1D03               	skipz
 14648  1D86  1401               	bsf	1,0
 14649  1D87  0008               	return
 14650  1D88                     __end_of_setRFSW_Status:	
 14651                           
 14652                           	psect	text91
 14653  10C1                     __ptext91:	
 14654 ;; *************** function _RfSWPointSelect *****************
 14655 ;; Defined at:
 14656 ;;		line 314 in file "../src/RF_Control_B1.c"
 14657 ;; Parameters:    Size  Location     Type
 14658 ;;  sw              1    wreg     unsigned char 
 14659 ;; Auto vars:     Size  Location     Type
 14660 ;;  sw              1    1[BANK0 ] unsigned char 
 14661 ;; Return value:  Size  Location     Type
 14662 ;;		None               void
 14663 ;; Registers used:
 14664 ;;		wreg
 14665 ;; Tracked objects:
 14666 ;;		On entry : 0/0
 14667 ;;		On exit  : 0/0
 14668 ;;		Unchanged: 0/0
 14669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;Total ram usage:        2 bytes
 14675 ;; Hardware stack levels used:    1
 14676 ;; Hardware stack levels required when called:    5
 14677 ;; This function calls:
 14678 ;;		Nothing
 14679 ;; This function is called by:
 14680 ;;		_setRFSW_Control
 14681 ;;		_setRFSW_AdjControl
 14682 ;;		_setRFSW_Status
 14683 ;; This function uses a non-reentrant model
 14684 ;;
 14685                           
 14686                           
 14687                           ;psect for function _RfSWPointSelect
 14688  10C1                     _RfSWPointSelect:	
 14689                           
 14690                           ;incstack = 0
 14691                           ; Regs used in _RfSWPointSelect: [wreg]
 14692                           ;RfSWPointSelect@sw stored from wreg
 14693  10C1  0020               	movlb	0	; select bank0
 14694  10C2  00A1               	movwf	RfSWPointSelect@sw
 14695                           
 14696                           ;RF_Control_B1.c: 316: if (sw == 1) {
 14697  10C3  0821               	movf	RfSWPointSelect@sw,w
 14698  10C4  3A01               	xorlw	1
 14699  10C5  1D03               	skipz
 14700  10C6  28CC               	goto	l2323
 14701                           
 14702                           ;RF_Control_B1.c: 317: RFSW = &RFSW1;
 14703  10C7  30EA               	movlw	_RFSW1& (0+255)
 14704  10C8  00A0               	movwf	??_RfSWPointSelect
 14705  10C9  0820               	movf	??_RfSWPointSelect,w
 14706  10CA  0021               	movlb	1	; select bank1
 14707  10CB  00CD               	movwf	_RFSW^(0+128)
 14708  10CC                     l2323:	
 14709                           
 14710                           ;RF_Control_B1.c: 318: }
 14711                           ;RF_Control_B1.c: 321: if (sw == 2) {
 14712  10CC  0020               	movlb	0	; select bank0
 14713  10CD  0821               	movf	RfSWPointSelect@sw,w
 14714  10CE  3A02               	xorlw	2
 14715  10CF  1D03               	skipz
 14716  10D0  28D6               	goto	l2324
 14717                           
 14718                           ;RF_Control_B1.c: 322: RFSW = &RFSW2;
 14719  10D1  30EB               	movlw	_RFSW2& (0+255)
 14720  10D2  00A0               	movwf	??_RfSWPointSelect
 14721  10D3  0820               	movf	??_RfSWPointSelect,w
 14722  10D4  0021               	movlb	1	; select bank1
 14723  10D5  00CD               	movwf	_RFSW^(0+128)
 14724  10D6                     l2324:	
 14725                           
 14726                           ;RF_Control_B1.c: 323: }
 14727                           ;RF_Control_B1.c: 326: if (sw == 3) {
 14728  10D6  0020               	movlb	0	; select bank0
 14729  10D7  0821               	movf	RfSWPointSelect@sw,w
 14730  10D8  3A03               	xorlw	3
 14731  10D9  1D03               	skipz
 14732  10DA  0008               	return
 14733                           
 14734                           ;RF_Control_B1.c: 327: RFSW = &RFSW3;
 14735  10DB  30EC               	movlw	_RFSW3& (0+255)
 14736  10DC  00A0               	movwf	??_RfSWPointSelect
 14737  10DD  0820               	movf	??_RfSWPointSelect,w
 14738  10DE  0021               	movlb	1	; select bank1
 14739  10DF  00CD               	movwf	_RFSW^(0+128)
 14740  10E0  0008               	return
 14741  10E1                     __end_of_RfSWPointSelect:	
 14742                           
 14743                           	psect	text92
 14744  1DF2                     __ptext92:	
 14745 ;; *************** function _setDimmerLights_Trigger *****************
 14746 ;; Defined at:
 14747 ;;		line 705 in file "../src/Dimmer_B1.c"
 14748 ;; Parameters:    Size  Location     Type
 14749 ;;  lights          1    wreg     unsigned char 
 14750 ;;  command         1    2[BANK0 ] unsigned char 
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;  lights          1    3[BANK0 ] unsigned char 
 14753 ;; Return value:  Size  Location     Type
 14754 ;;		None               void
 14755 ;; Registers used:
 14756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14757 ;; Tracked objects:
 14758 ;;		On entry : 0/0
 14759 ;;		On exit  : 0/0
 14760 ;;		Unchanged: 0/0
 14761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14762 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;Total ram usage:        2 bytes
 14767 ;; Hardware stack levels used:    1
 14768 ;; Hardware stack levels required when called:    6
 14769 ;; This function calls:
 14770 ;;		_DimmerLightsPointSelect
 14771 ;; This function is called by:
 14772 ;;		_DlyOff_Main
 14773 ;;		_setRFSW_Control
 14774 ;;		_Sw_DimmerOnFunc
 14775 ;;		_Sw_DimmerOffFunc
 14776 ;; This function uses a non-reentrant model
 14777 ;;
 14778                           
 14779                           
 14780                           ;psect for function _setDimmerLights_Trigger
 14781  1DF2                     _setDimmerLights_Trigger:	
 14782                           
 14783                           ;incstack = 0
 14784                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14785                           ;setDimmerLights_Trigger@lights stored from wreg
 14786  1DF2  0020               	movlb	0	; select bank0
 14787  1DF3  00A3               	movwf	setDimmerLights_Trigger@lights
 14788                           
 14789                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14790  1DF4  0823               	movf	setDimmerLights_Trigger@lights,w
 14791  1DF5  319F  276F         	fcall	_DimmerLightsPointSelect
 14792                           
 14793                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 14794  1DF7  087B               	movf	_DimmerLights,w
 14795  1DF8  3E08               	addlw	8
 14796  1DF9  0086               	movwf	6
 14797  1DFA  3001               	movlw	1	; select bank2/3
 14798  1DFB  0087               	movwf	7
 14799  1DFC  0020               	movlb	0	; select bank0
 14800  1DFD  0822               	movf	setDimmerLights_Trigger@command,w
 14801  1DFE  1101               	bcf	1,2
 14802  1DFF  1D03               	skipz
 14803  1E00  1501               	bsf	1,2
 14804  1E01  0008               	return
 14805  1E02                     __end_of_setDimmerLights_Trigger:	
 14806                           
 14807                           	psect	text93
 14808  1DE2                     __ptext93:	
 14809 ;; *************** function _setDimmerLights_Switch *****************
 14810 ;; Defined at:
 14811 ;;		line 693 in file "../src/Dimmer_B1.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;  lights          1    wreg     unsigned char 
 14814 ;;  command         1    2[BANK0 ] unsigned char 
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;  lights          1    3[BANK0 ] unsigned char 
 14817 ;; Return value:  Size  Location     Type
 14818 ;;		None               void
 14819 ;; Registers used:
 14820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14821 ;; Tracked objects:
 14822 ;;		On entry : 0/0
 14823 ;;		On exit  : 0/0
 14824 ;;		Unchanged: 0/0
 14825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;Total ram usage:        2 bytes
 14831 ;; Hardware stack levels used:    1
 14832 ;; Hardware stack levels required when called:    6
 14833 ;; This function calls:
 14834 ;;		_DimmerLightsPointSelect
 14835 ;; This function is called by:
 14836 ;;		_DlyOff_Main
 14837 ;;		_setRFSW_Control
 14838 ;;		_Sw_DimmerOnFunc
 14839 ;;		_Sw_DimmerOffFunc
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           
 14844                           ;psect for function _setDimmerLights_Switch
 14845  1DE2                     _setDimmerLights_Switch:	
 14846                           
 14847                           ;incstack = 0
 14848                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14849                           ;setDimmerLights_Switch@lights stored from wreg
 14850  1DE2  0020               	movlb	0	; select bank0
 14851  1DE3  00A3               	movwf	setDimmerLights_Switch@lights
 14852                           
 14853                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 14854  1DE4  0823               	movf	setDimmerLights_Switch@lights,w
 14855  1DE5  319F  276F         	fcall	_DimmerLightsPointSelect
 14856                           
 14857                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 14858  1DE7  087B               	movf	_DimmerLights,w
 14859  1DE8  3E08               	addlw	8
 14860  1DE9  0086               	movwf	6
 14861  1DEA  3001               	movlw	1	; select bank2/3
 14862  1DEB  0087               	movwf	7
 14863  1DEC  0020               	movlb	0	; select bank0
 14864  1DED  0822               	movf	setDimmerLights_Switch@command,w
 14865  1DEE  1081               	bcf	1,1
 14866  1DEF  1D03               	skipz
 14867  1DF0  1481               	bsf	1,1
 14868  1DF1  0008               	return
 14869  1DF2                     __end_of_setDimmerLights_Switch:	
 14870                           
 14871                           	psect	text94
 14872  1F6F                     __ptext94:	
 14873 ;; *************** function _DimmerLightsPointSelect *****************
 14874 ;; Defined at:
 14875 ;;		line 315 in file "../src/Dimmer_B1.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;  lights          1    wreg     unsigned char 
 14878 ;; Auto vars:     Size  Location     Type
 14879 ;;  lights          1    1[BANK0 ] unsigned char 
 14880 ;; Return value:  Size  Location     Type
 14881 ;;		None               void
 14882 ;; Registers used:
 14883 ;;		wreg
 14884 ;; Tracked objects:
 14885 ;;		On entry : 0/0
 14886 ;;		On exit  : 0/0
 14887 ;;		Unchanged: 0/0
 14888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14893 ;;Total ram usage:        2 bytes
 14894 ;; Hardware stack levels used:    1
 14895 ;; Hardware stack levels required when called:    5
 14896 ;; This function calls:
 14897 ;;		Nothing
 14898 ;; This function is called by:
 14899 ;;		_setDimmerLights_Initialization
 14900 ;;		_setDimmerLights_Main
 14901 ;;		_setDimmerLights_ERROR
 14902 ;;		_setDimmerLights_TriggerERROR
 14903 ;;		_setDimmerLights
 14904 ;;		_setDimmerLights_Adj
 14905 ;;		_setDimmerLights_AdjRF
 14906 ;;		_setDimmerLights_Switch
 14907 ;;		_setDimmerLights_AdjGo
 14908 ;;		_setDimmerLights_Trigger
 14909 ;;		_setDimmerLights_TriggerAdj
 14910 ;;		_setDimmerLights_GO
 14911 ;;		_setDimmerLights_MaxmumValue
 14912 ;;		_setDimmerLights_Clear
 14913 ;; This function uses a non-reentrant model
 14914 ;;
 14915                           
 14916                           
 14917                           ;psect for function _DimmerLightsPointSelect
 14918  1F6F                     _DimmerLightsPointSelect:	
 14919                           
 14920                           ;incstack = 0
 14921                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14922                           ;DimmerLightsPointSelect@lights stored from wreg
 14923  1F6F  0020               	movlb	0	; select bank0
 14924  1F70  00A1               	movwf	DimmerLightsPointSelect@lights
 14925                           
 14926                           ;Dimmer_B1.c: 317: if (lights == 1) {
 14927  1F71  0821               	movf	DimmerLightsPointSelect@lights,w
 14928  1F72  3A01               	xorlw	1
 14929  1F73  1D03               	skipz
 14930  1F74  2F79               	goto	l863
 14931                           
 14932                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 14933  1F75  303D               	movlw	_DimmerLights1& (0+255)
 14934  1F76  00A0               	movwf	??_DimmerLightsPointSelect
 14935  1F77  0820               	movf	??_DimmerLightsPointSelect,w
 14936  1F78  00FB               	movwf	_DimmerLights
 14937  1F79                     l863:	
 14938                           
 14939                           ;Dimmer_B1.c: 319: }
 14940                           ;Dimmer_B1.c: 322: if (lights == 2) {
 14941  1F79  0821               	movf	DimmerLightsPointSelect@lights,w
 14942  1F7A  3A02               	xorlw	2
 14943  1F7B  1D03               	skipz
 14944  1F7C  2F81               	goto	l864
 14945                           
 14946                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 14947  1F7D  30C5               	movlw	_DimmerLights2& (0+255)
 14948  1F7E  00A0               	movwf	??_DimmerLightsPointSelect
 14949  1F7F  0820               	movf	??_DimmerLightsPointSelect,w
 14950  1F80  00FB               	movwf	_DimmerLights
 14951  1F81                     l864:	
 14952                           
 14953                           ;Dimmer_B1.c: 324: }
 14954                           ;Dimmer_B1.c: 327: if (lights == 3) {
 14955  1F81  0821               	movf	DimmerLightsPointSelect@lights,w
 14956  1F82  3A03               	xorlw	3
 14957  1F83  1D03               	skipz
 14958  1F84  0008               	return
 14959                           
 14960                           ;Dimmer_B1.c: 328: DimmerLights = &DimmerLights3;
 14961  1F85  30D4               	movlw	_DimmerLights3& (0+255)
 14962  1F86  00A0               	movwf	??_DimmerLightsPointSelect
 14963  1F87  0820               	movf	??_DimmerLightsPointSelect,w
 14964  1F88  00FB               	movwf	_DimmerLights
 14965  1F89  0008               	return
 14966  1F8A                     __end_of_DimmerLightsPointSelect:	
 14967                           
 14968                           	psect	text95
 14969  17A7                     __ptext95:	
 14970 ;; *************** function _setBuz *****************
 14971 ;; Defined at:
 14972 ;;		line 22 in file "../src/Buzzer_B1.c"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  count           1    wreg     unsigned char 
 14975 ;;  time            2    9[BANK0 ] int 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  count           1   12[BANK0 ] unsigned char 
 14978 ;; Return value:  Size  Location     Type
 14979 ;;		None               void
 14980 ;; Registers used:
 14981 ;;		wreg, status,2, status,0, pclath, cstack
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14987 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;Total ram usage:        4 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    6
 14994 ;; This function calls:
 14995 ;;		___awdiv
 14996 ;; This function is called by:
 14997 ;;		_DlyOff_Main
 14998 ;;		_setDimmerLights_Main
 14999 ;;		_DimmerLights_Exceptions
 15000 ;;		_my_Main
 15001 ;;		_setOverTemp_Exceptions
 15002 ;;		_setLog_Code
 15003 ;;		_setControl_Lights_Table
 15004 ;;		_setRFSW_Control
 15005 ;;		_setSw_Main
 15006 ;;		_Sw_DimmerOnFunc
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           
 15011                           ;psect for function _setBuz
 15012  17A7                     _setBuz:	
 15013                           
 15014                           ;incstack = 0
 15015                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15016                           ;setBuz@count stored from wreg
 15017  17A7  0020               	movlb	0	; select bank0
 15018  17A8  00AC               	movwf	setBuz@count
 15019                           
 15020                           ;Buzzer_B1.c: 23: time /= 10;
 15021  17A9  300A               	movlw	10
 15022  17AA  00A0               	movwf	___awdiv@divisor
 15023  17AB  3000               	movlw	0
 15024  17AC  00A1               	movwf	___awdiv@divisor+1
 15025  17AD  082A               	movf	setBuz@time+1,w
 15026  17AE  01A3               	clrf	___awdiv@dividend+1
 15027  17AF  07A3               	addwf	___awdiv@dividend+1,f
 15028  17B0  0829               	movf	setBuz@time,w
 15029  17B1  01A2               	clrf	___awdiv@dividend
 15030  17B2  07A2               	addwf	___awdiv@dividend,f
 15031  17B3  3196  26FE  3197   	fcall	___awdiv
 15032  17B6  0020               	movlb	0	; select bank0
 15033  17B7  0821               	movf	?___awdiv+1,w
 15034  17B8  01AA               	clrf	setBuz@time+1
 15035  17B9  07AA               	addwf	setBuz@time+1,f
 15036  17BA  0820               	movf	?___awdiv,w
 15037  17BB  01A9               	clrf	setBuz@time
 15038  17BC  07A9               	addwf	setBuz@time,f
 15039                           
 15040                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15041  17BD  0021               	movlb	1	; select bank1
 15042  17BE  1C32               	btfss	_Buz1^(0+128),0
 15043  17BF  0008               	return
 15044                           
 15045                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15046  17C0  18B2               	btfsc	_Buz1^(0+128),1
 15047  17C1  2FD8               	goto	l110
 15048                           
 15049                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15050  17C2  14B2               	bsf	_Buz1^(0+128),1
 15051                           
 15052                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15053  17C3  01B3               	clrf	(_Buz1^(0+128)+1)
 15054  17C4  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15055                           
 15056                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15057  17C5  0020               	movlb	0	; select bank0
 15058  17C6  082C               	movf	setBuz@count,w
 15059  17C7  00AB               	movwf	??_setBuz
 15060  17C8  082B               	movf	??_setBuz,w
 15061  17C9  0021               	movlb	1	; select bank1
 15062  17CA  00B5               	movwf	(_Buz1^(0+128)+3)
 15063                           
 15064                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15065  17CB  0020               	movlb	0	; select bank0
 15066  17CC  082A               	movf	setBuz@time+1,w
 15067  17CD  0021               	movlb	1	; select bank1
 15068  17CE  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15069  17CF  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15070  17D0  0020               	movlb	0	; select bank0
 15071  17D1  0829               	movf	setBuz@time,w
 15072  17D2  0021               	movlb	1	; select bank1
 15073  17D3  01B8               	clrf	(_Buz1^(0+128)+6)
 15074  17D4  07B8               	addwf	(_Buz1^(0+128)+6),f
 15075                           
 15076                           ;Buzzer_B1.c: 30: RB3 = 1;
 15077  17D5  0020               	movlb	0	; select bank0
 15078  17D6  158D               	bsf	13,3	;volatile
 15079                           
 15080                           ;Buzzer_B1.c: 31: } else {
 15081  17D7  0008               	return
 15082  17D8                     l110:	
 15083                           
 15084                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15085  17D8  19B2               	btfsc	_Buz1^(0+128),3
 15086  17D9  2FEC               	goto	l112
 15087                           
 15088                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15089  17DA  15B2               	bsf	_Buz1^(0+128),3
 15090                           
 15091                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15092  17DB  0020               	movlb	0	; select bank0
 15093  17DC  082C               	movf	setBuz@count,w
 15094  17DD  00AB               	movwf	??_setBuz
 15095  17DE  082B               	movf	??_setBuz,w
 15096  17DF  0021               	movlb	1	; select bank1
 15097  17E0  00B6               	movwf	(_Buz1^(0+128)+4)
 15098                           
 15099                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15100  17E1  0020               	movlb	0	; select bank0
 15101  17E2  082A               	movf	setBuz@time+1,w
 15102  17E3  0021               	movlb	1	; select bank1
 15103  17E4  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15104  17E5  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15105  17E6  0020               	movlb	0	; select bank0
 15106  17E7  0829               	movf	setBuz@time,w
 15107  17E8  0021               	movlb	1	; select bank1
 15108  17E9  01BA               	clrf	(_Buz1^(0+128)+8)
 15109  17EA  07BA               	addwf	(_Buz1^(0+128)+8),f
 15110                           
 15111                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15112  17EB  0008               	return
 15113  17EC                     l112:	
 15114  17EC  1A32               	btfsc	_Buz1^(0+128),4
 15115  17ED  0008               	return
 15116                           
 15117                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15118  17EE  1632               	bsf	_Buz1^(0+128),4
 15119                           
 15120                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15121  17EF  0020               	movlb	0	; select bank0
 15122  17F0  082C               	movf	setBuz@count,w
 15123  17F1  00AB               	movwf	??_setBuz
 15124  17F2  082B               	movf	??_setBuz,w
 15125  17F3  0021               	movlb	1	; select bank1
 15126  17F4  00B7               	movwf	(_Buz1^(0+128)+5)
 15127                           
 15128                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15129  17F5  0020               	movlb	0	; select bank0
 15130  17F6  082A               	movf	setBuz@time+1,w
 15131  17F7  0021               	movlb	1	; select bank1
 15132  17F8  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15133  17F9  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15134  17FA  0020               	movlb	0	; select bank0
 15135  17FB  0829               	movf	setBuz@time,w
 15136  17FC  0021               	movlb	1	; select bank1
 15137  17FD  01BC               	clrf	(_Buz1^(0+128)+10)
 15138  17FE  07BC               	addwf	(_Buz1^(0+128)+10),f
 15139  17FF  0008               	return
 15140  1800                     __end_of_setBuz:	
 15141                           
 15142                           	psect	text96
 15143  16FE                     __ptext96:	
 15144 ;; *************** function ___awdiv *****************
 15145 ;; Defined at:
 15146 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15147 ;; Parameters:    Size  Location     Type
 15148 ;;  divisor         2    0[BANK0 ] int 
 15149 ;;  dividend        2    2[BANK0 ] int 
 15150 ;; Auto vars:     Size  Location     Type
 15151 ;;  quotient        2    7[BANK0 ] int 
 15152 ;;  sign            1    6[BANK0 ] unsigned char 
 15153 ;;  counter         1    5[BANK0 ] unsigned char 
 15154 ;; Return value:  Size  Location     Type
 15155 ;;                  2    0[BANK0 ] int 
 15156 ;; Registers used:
 15157 ;;		wreg, status,2, status,0
 15158 ;; Tracked objects:
 15159 ;;		On entry : 0/0
 15160 ;;		On exit  : 0/0
 15161 ;;		Unchanged: 0/0
 15162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;Total ram usage:        9 bytes
 15168 ;; Hardware stack levels used:    1
 15169 ;; Hardware stack levels required when called:    5
 15170 ;; This function calls:
 15171 ;;		Nothing
 15172 ;; This function is called by:
 15173 ;;		_setBuz
 15174 ;; This function uses a non-reentrant model
 15175 ;;
 15176                           
 15177                           
 15178                           ;psect for function ___awdiv
 15179  16FE                     ___awdiv:	
 15180                           
 15181                           ;incstack = 0
 15182                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15183  16FE  0020               	movlb	0	; select bank0
 15184  16FF  01A6               	clrf	___awdiv@sign
 15185  1700  1FA1               	btfss	___awdiv@divisor+1,7
 15186  1701  2F09               	goto	l6031
 15187  1702  09A0               	comf	___awdiv@divisor,f
 15188  1703  09A1               	comf	___awdiv@divisor+1,f
 15189  1704  0AA0               	incf	___awdiv@divisor,f
 15190  1705  1903               	skipnz
 15191  1706  0AA1               	incf	___awdiv@divisor+1,f
 15192  1707  01A6               	clrf	___awdiv@sign
 15193  1708  0AA6               	incf	___awdiv@sign,f
 15194  1709                     l6031:	
 15195  1709  1FA3               	btfss	___awdiv@dividend+1,7
 15196  170A  2F14               	goto	l6037
 15197  170B  09A2               	comf	___awdiv@dividend,f
 15198  170C  09A3               	comf	___awdiv@dividend+1,f
 15199  170D  0AA2               	incf	___awdiv@dividend,f
 15200  170E  1903               	skipnz
 15201  170F  0AA3               	incf	___awdiv@dividend+1,f
 15202  1710  3001               	movlw	1
 15203  1711  00A4               	movwf	??___awdiv
 15204  1712  0824               	movf	??___awdiv,w
 15205  1713  06A6               	xorwf	___awdiv@sign,f
 15206  1714                     l6037:	
 15207  1714  01A7               	clrf	___awdiv@quotient
 15208  1715  01A8               	clrf	___awdiv@quotient+1
 15209  1716  0821               	movf	___awdiv@divisor+1,w
 15210  1717  0420               	iorwf	___awdiv@divisor,w
 15211  1718  1903               	skipnz
 15212  1719  2F43               	goto	l6059
 15213  171A  01A5               	clrf	___awdiv@counter
 15214  171B  0AA5               	incf	___awdiv@counter,f
 15215  171C                     l6047:	
 15216  171C  1BA1               	btfsc	___awdiv@divisor+1,7
 15217  171D  2F28               	goto	l6049
 15218  171E  3001               	movlw	1
 15219  171F                     u4805:	
 15220  171F  35A0               	lslf	___awdiv@divisor,f
 15221  1720  0DA1               	rlf	___awdiv@divisor+1,f
 15222  1721  0B89               	decfsz	9,f
 15223  1722  2F1F               	goto	u4805
 15224  1723  3001               	movlw	1
 15225  1724  00A4               	movwf	??___awdiv
 15226  1725  0824               	movf	??___awdiv,w
 15227  1726  07A5               	addwf	___awdiv@counter,f
 15228  1727  2F1C               	goto	l6047
 15229  1728                     l6049:	
 15230  1728  3001               	movlw	1
 15231  1729                     u4825:	
 15232  1729  35A7               	lslf	___awdiv@quotient,f
 15233  172A  0DA8               	rlf	___awdiv@quotient+1,f
 15234  172B  0B89               	decfsz	9,f
 15235  172C  2F29               	goto	u4825
 15236  172D  0821               	movf	___awdiv@divisor+1,w
 15237  172E  0223               	subwf	___awdiv@dividend+1,w
 15238  172F  1D03               	skipz
 15239  1730  2F33               	goto	u4835
 15240  1731  0820               	movf	___awdiv@divisor,w
 15241  1732  0222               	subwf	___awdiv@dividend,w
 15242  1733                     u4835:	
 15243  1733  1C03               	skipc
 15244  1734  2F3A               	goto	l6055
 15245  1735  0820               	movf	___awdiv@divisor,w
 15246  1736  02A2               	subwf	___awdiv@dividend,f
 15247  1737  0821               	movf	___awdiv@divisor+1,w
 15248  1738  3BA3               	subwfb	___awdiv@dividend+1,f
 15249  1739  1427               	bsf	___awdiv@quotient,0
 15250  173A                     l6055:	
 15251  173A  3001               	movlw	1
 15252  173B                     u4845:	
 15253  173B  36A1               	lsrf	___awdiv@divisor+1,f
 15254  173C  0CA0               	rrf	___awdiv@divisor,f
 15255  173D  0B89               	decfsz	9,f
 15256  173E  2F3B               	goto	u4845
 15257  173F  3001               	movlw	1
 15258  1740  02A5               	subwf	___awdiv@counter,f
 15259  1741  1D03               	btfss	3,2
 15260  1742  2F28               	goto	l6049
 15261  1743                     l6059:	
 15262  1743  0826               	movf	___awdiv@sign,w
 15263  1744  1903               	btfsc	3,2
 15264  1745  2F4B               	goto	l6063
 15265  1746  09A7               	comf	___awdiv@quotient,f
 15266  1747  09A8               	comf	___awdiv@quotient+1,f
 15267  1748  0AA7               	incf	___awdiv@quotient,f
 15268  1749  1903               	skipnz
 15269  174A  0AA8               	incf	___awdiv@quotient+1,f
 15270  174B                     l6063:	
 15271  174B  0828               	movf	___awdiv@quotient+1,w
 15272  174C  01A1               	clrf	?___awdiv+1
 15273  174D  07A1               	addwf	?___awdiv+1,f
 15274  174E  0827               	movf	___awdiv@quotient,w
 15275  174F  01A0               	clrf	?___awdiv
 15276  1750  07A0               	addwf	?___awdiv,f
 15277  1751  0008               	return
 15278  1752                     __end_of___awdiv:	
 15279                           
 15280                           	psect	text97
 15281  1D2E                     __ptext97:	
 15282 ;; *************** function _DelayOff_Initialization *****************
 15283 ;; Defined at:
 15284 ;;		line 26 in file "../src/DelayOff_B1.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;		None
 15287 ;; Auto vars:     Size  Location     Type
 15288 ;;		None
 15289 ;; Return value:  Size  Location     Type
 15290 ;;		None               void
 15291 ;; Registers used:
 15292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15293 ;; Tracked objects:
 15294 ;;		On entry : 0/0
 15295 ;;		On exit  : 0/0
 15296 ;;		Unchanged: 0/0
 15297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;Total ram usage:        0 bytes
 15303 ;; Hardware stack levels used:    1
 15304 ;; Hardware stack levels required when called:    7
 15305 ;; This function calls:
 15306 ;;		_DlyOff_Initialization
 15307 ;; This function is called by:
 15308 ;;		_main
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           
 15313                           ;psect for function _DelayOff_Initialization
 15314  1D2E                     _DelayOff_Initialization:	
 15315                           
 15316                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15317                           
 15318                           ;incstack = 0
 15319                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15320  1D2E  3001               	movlw	1
 15321  1D2F  319D  250B  319D   	fcall	_DlyOff_Initialization
 15322                           
 15323                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 15324  1D32  3002               	movlw	2
 15325  1D33  319D  250B  319D   	fcall	_DlyOff_Initialization
 15326                           
 15327                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 15328  1D36  3003               	movlw	3
 15329  1D37  319D  250B         	fcall	_DlyOff_Initialization
 15330  1D39  0008               	return
 15331  1D3A                     __end_of_DelayOff_Initialization:	
 15332                           
 15333                           	psect	text98
 15334  1D0B                     __ptext98:	
 15335 ;; *************** function _DlyOff_Initialization *****************
 15336 ;; Defined at:
 15337 ;;		line 56 in file "../src/DelayOff_B1.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;  sw              1    wreg     unsigned char 
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;  sw              1    2[BANK0 ] unsigned char 
 15342 ;; Return value:  Size  Location     Type
 15343 ;;		None               void
 15344 ;; Registers used:
 15345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15346 ;; Tracked objects:
 15347 ;;		On entry : 0/0
 15348 ;;		On exit  : 0/0
 15349 ;;		Unchanged: 0/0
 15350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15355 ;;Total ram usage:        1 bytes
 15356 ;; Hardware stack levels used:    1
 15357 ;; Hardware stack levels required when called:    6
 15358 ;; This function calls:
 15359 ;;		_DelayOffPointSelect
 15360 ;; This function is called by:
 15361 ;;		_DelayOff_Initialization
 15362 ;; This function uses a non-reentrant model
 15363 ;;
 15364                           
 15365                           
 15366                           ;psect for function _DlyOff_Initialization
 15367  1D0B                     _DlyOff_Initialization:	
 15368                           
 15369                           ;incstack = 0
 15370                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15371                           ;DlyOff_Initialization@sw stored from wreg
 15372  1D0B  0020               	movlb	0	; select bank0
 15373  1D0C  00A2               	movwf	DlyOff_Initialization@sw
 15374                           
 15375                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15376  1D0D  0822               	movf	DlyOff_Initialization@sw,w
 15377  1D0E  319F  27A7         	fcall	_DelayOffPointSelect
 15378                           
 15379                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15380  1D10  087A               	movf	_DelayOff,w
 15381  1D11  0086               	movwf	6
 15382  1D12  3001               	movlw	1	; select bank2/3
 15383  1D13  0087               	movwf	7
 15384  1D14  1401               	bsf	1,0
 15385  1D15  0008               	return
 15386  1D16                     __end_of_DlyOff_Initialization:	
 15387                           
 15388                           	psect	text99
 15389  1FA7                     __ptext99:	
 15390 ;; *************** function _DelayOffPointSelect *****************
 15391 ;; Defined at:
 15392 ;;		line 7 in file "../src/DelayOff_B1.c"
 15393 ;; Parameters:    Size  Location     Type
 15394 ;;  sw              1    wreg     unsigned char 
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;  sw              1    1[BANK0 ] unsigned char 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;		None               void
 15399 ;; Registers used:
 15400 ;;		wreg
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;Total ram usage:        2 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    5
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_DlyOff_Initialization
 15417 ;;		_DlyOff_Main
 15418 ;;		_setDelayOff_GO
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           
 15423                           ;psect for function _DelayOffPointSelect
 15424  1FA7                     _DelayOffPointSelect:	
 15425                           
 15426                           ;incstack = 0
 15427                           ; Regs used in _DelayOffPointSelect: [wreg]
 15428                           ;DelayOffPointSelect@sw stored from wreg
 15429  1FA7  0020               	movlb	0	; select bank0
 15430  1FA8  00A1               	movwf	DelayOffPointSelect@sw
 15431                           
 15432                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15433  1FA9  0821               	movf	DelayOffPointSelect@sw,w
 15434  1FAA  3A01               	xorlw	1
 15435  1FAB  1D03               	skipz
 15436  1FAC  2FB2               	goto	l5947
 15437                           
 15438                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15439  1FAD  3055               	movlw	_DlySw1& (0+255)
 15440  1FAE  00A0               	movwf	??_DelayOffPointSelect
 15441  1FAF  0820               	movf	??_DelayOffPointSelect,w
 15442  1FB0  00FA               	movwf	_DelayOff
 15443                           
 15444                           ;DelayOff_B1.c: 11: }
 15445  1FB1  0008               	return
 15446  1FB2                     l5947:	
 15447                           
 15448                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 15449  1FB2  0821               	movf	DelayOffPointSelect@sw,w
 15450  1FB3  3A02               	xorlw	2
 15451  1FB4  1D03               	skipz
 15452  1FB5  2FBB               	goto	l5951
 15453                           
 15454                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 15455  1FB6  305A               	movlw	_DlySw2& (0+255)
 15456  1FB7  00A0               	movwf	??_DelayOffPointSelect
 15457  1FB8  0820               	movf	??_DelayOffPointSelect,w
 15458  1FB9  00FA               	movwf	_DelayOff
 15459                           
 15460                           ;DelayOff_B1.c: 16: }
 15461  1FBA  0008               	return
 15462  1FBB                     l5951:	
 15463                           
 15464                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 15465  1FBB  0821               	movf	DelayOffPointSelect@sw,w
 15466  1FBC  3A03               	xorlw	3
 15467  1FBD  1D03               	skipz
 15468  1FBE  0008               	return
 15469                           
 15470                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 15471  1FBF  305F               	movlw	_DlySw3& (0+255)
 15472  1FC0  00A0               	movwf	??_DelayOffPointSelect
 15473  1FC1  0820               	movf	??_DelayOffPointSelect,w
 15474  1FC2  00FA               	movwf	_DelayOff
 15475  1FC3  0008               	return
 15476  1FC4                     __end_of_DelayOffPointSelect:	
 15477                           
 15478                           	psect	text100
 15479  1EC5                     __ptext100:	
 15480 ;; *************** function _CC2500_PowerOnInitial *****************
 15481 ;; Defined at:
 15482 ;;		line 122 in file "../src/CC2500_B1.c"
 15483 ;; Parameters:    Size  Location     Type
 15484 ;;		None
 15485 ;; Auto vars:     Size  Location     Type
 15486 ;;		None
 15487 ;; Return value:  Size  Location     Type
 15488 ;;		None               void
 15489 ;; Registers used:
 15490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15491 ;; Tracked objects:
 15492 ;;		On entry : 0/0
 15493 ;;		On exit  : 0/0
 15494 ;;		Unchanged: 0/0
 15495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;Total ram usage:        0 bytes
 15501 ;; Hardware stack levels used:    1
 15502 ;; Hardware stack levels required when called:    8
 15503 ;; This function calls:
 15504 ;;		_CC2500_ClearRXFIFO
 15505 ;;		_CC2500_ClearTXFIFO
 15506 ;;		_CC2500_FrequencyCabr
 15507 ;;		_CC2500_InitPATable
 15508 ;;		_CC2500_InitSetREG
 15509 ;;		_CC2500_PowerRST
 15510 ;;		_CC2500_SIDLEMode
 15511 ;; This function is called by:
 15512 ;;		_main
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           
 15517                           ;psect for function _CC2500_PowerOnInitial
 15518  1EC5                     _CC2500_PowerOnInitial:	
 15519                           
 15520                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 15521                           
 15522                           ;incstack = 0
 15523                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15524  1EC5  3194  246F  319E   	fcall	_CC2500_PowerRST
 15525                           
 15526                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 15527  1EC8  3192  221E  319E   	fcall	_CC2500_InitSetREG
 15528                           
 15529                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 15530  1ECB  3190  2083  319E   	fcall	_CC2500_InitPATable
 15531                           
 15532                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 15533  1ECE  319C  24B0  319E   	fcall	_CC2500_ClearTXFIFO
 15534                           
 15535                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 15536  1ED1  319C  24AC  319E   	fcall	_CC2500_ClearRXFIFO
 15537                           
 15538                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 15539  1ED4  319D  2522  319E   	fcall	_CC2500_FrequencyCabr
 15540                           
 15541                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 15542  1ED7  319C  24B4         	fcall	_CC2500_SIDLEMode
 15543  1ED9  0008               	return
 15544  1EDA                     __end_of_CC2500_PowerOnInitial:	
 15545                           
 15546                           	psect	text101
 15547  1CB4                     __ptext101:	
 15548 ;; *************** function _CC2500_SIDLEMode *****************
 15549 ;; Defined at:
 15550 ;;		line 212 in file "../src/CC2500_B1.c"
 15551 ;; Parameters:    Size  Location     Type
 15552 ;;		None
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;		None
 15555 ;; Return value:  Size  Location     Type
 15556 ;;		None               void
 15557 ;; Registers used:
 15558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15559 ;; Tracked objects:
 15560 ;;		On entry : 0/0
 15561 ;;		On exit  : 0/0
 15562 ;;		Unchanged: 0/0
 15563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;Total ram usage:        0 bytes
 15569 ;; Hardware stack levels used:    1
 15570 ;; Hardware stack levels required when called:    7
 15571 ;; This function calls:
 15572 ;;		_CC2500_WriteCommand
 15573 ;; This function is called by:
 15574 ;;		_CC2500_PowerOnInitial
 15575 ;; This function uses a non-reentrant model
 15576 ;;
 15577                           
 15578                           
 15579                           ;psect for function _CC2500_SIDLEMode
 15580  1CB4                     _CC2500_SIDLEMode:	
 15581                           
 15582                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 15583                           
 15584                           ;incstack = 0
 15585                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15586  1CB4  3036               	movlw	54
 15587  1CB5  319F  273B         	fcall	_CC2500_WriteCommand
 15588  1CB7  0008               	return
 15589  1CB8                     __end_of_CC2500_SIDLEMode:	
 15590                           
 15591                           	psect	text102
 15592  146F                     __ptext102:	
 15593 ;; *************** function _CC2500_PowerRST *****************
 15594 ;; Defined at:
 15595 ;;		line 135 in file "../src/CC2500_B1.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;		None
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;		None
 15600 ;; Return value:  Size  Location     Type
 15601 ;;		None               void
 15602 ;; Registers used:
 15603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15604 ;; Tracked objects:
 15605 ;;		On entry : 0/0
 15606 ;;		On exit  : 0/0
 15607 ;;		Unchanged: 0/0
 15608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;Total ram usage:        1 bytes
 15614 ;; Hardware stack levels used:    1
 15615 ;; Hardware stack levels required when called:    6
 15616 ;; This function calls:
 15617 ;;		_CC2500_WriteByte
 15618 ;;		_DelayTime_1us
 15619 ;;		_Timeout_Counter
 15620 ;;		_set_TimeoutCleared
 15621 ;; This function is called by:
 15622 ;;		_CC2500_PowerOnInitial
 15623 ;; This function uses a non-reentrant model
 15624 ;;
 15625                           
 15626                           
 15627                           ;psect for function _CC2500_PowerRST
 15628  146F                     _CC2500_PowerRST:	
 15629                           
 15630                           ;CC2500_B1.c: 136: RC1 = 0;
 15631                           
 15632                           ;incstack = 0
 15633                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15634  146F  0020               	movlb	0	; select bank0
 15635  1470  108E               	bcf	14,1	;volatile
 15636                           
 15637                           ;CC2500_B1.c: 137: RC0 = 0;
 15638  1471  100E               	bcf	14,0	;volatile
 15639                           
 15640                           ;CC2500_B1.c: 138: RC4 = 1;
 15641  1472  160E               	bsf	14,4	;volatile
 15642                           
 15643                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 15644  1473  300A               	movlw	10
 15645  1474  00A0               	movwf	DelayTime_1us@count
 15646  1475  3000               	movlw	0
 15647  1476  00A1               	movwf	DelayTime_1us@count+1
 15648  1477  3191  21CF  3194   	fcall	_DelayTime_1us
 15649                           
 15650                           ;CC2500_B1.c: 140: RC4 = 0;
 15651  147A  0020               	movlb	0	; select bank0
 15652  147B  120E               	bcf	14,4	;volatile
 15653                           
 15654                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 15655  147C  300A               	movlw	10
 15656  147D  00A0               	movwf	DelayTime_1us@count
 15657  147E  3000               	movlw	0
 15658  147F  00A1               	movwf	DelayTime_1us@count+1
 15659  1480  3191  21CF  3194   	fcall	_DelayTime_1us
 15660                           
 15661                           ;CC2500_B1.c: 142: RC4 = 1;
 15662  1483  0020               	movlb	0	; select bank0
 15663  1484  160E               	bsf	14,4	;volatile
 15664                           
 15665                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 15666  1485  3028               	movlw	40
 15667  1486  00A0               	movwf	DelayTime_1us@count
 15668  1487  3000               	movlw	0
 15669  1488  00A1               	movwf	DelayTime_1us@count+1
 15670  1489  3191  21CF  3194   	fcall	_DelayTime_1us
 15671                           
 15672                           ;CC2500_B1.c: 144: RC4 = 0;
 15673  148C  0020               	movlb	0	; select bank0
 15674  148D  120E               	bcf	14,4	;volatile
 15675                           
 15676                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 15677  148E  3030               	movlw	48
 15678  148F  00A6               	movwf	??_CC2500_PowerRST
 15679  1490  0826               	movf	??_CC2500_PowerRST,w
 15680  1491  0021               	movlb	1	; select bank1
 15681  1492  00D0               	movwf	_SPI0Buffer^(0+128)
 15682                           
 15683                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 15684  1493  2C97               	goto	l7049
 15685  1494                     l7047:	
 15686                           
 15687                           ;CC2500_B1.c: 147: Timeout_Counter();
 15688  1494  319E  26B0  3194   	fcall	_Timeout_Counter
 15689  1497                     l7049:	
 15690  1497  0020               	movlb	0	; select bank0
 15691  1498  1D0E               	btfss	14,2	;volatile
 15692  1499  2C9D               	goto	l7053
 15693  149A  0021               	movlb	1	; select bank1
 15694  149B  1D2F               	btfss	(_myMain^(0+128)+15),2
 15695  149C  2C94               	goto	l7047
 15696  149D                     l7053:	
 15697                           
 15698                           ;CC2500_B1.c: 148: };
 15699                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 15700  149D  319C  24BC  3194   	fcall	_set_TimeoutCleared
 15701                           
 15702                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 15703  14A0  319F  2708  3194   	fcall	_CC2500_WriteByte
 15704                           
 15705                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 15706  14A3  2CA7               	goto	l7059
 15707  14A4                     l7057:	
 15708                           
 15709                           ;CC2500_B1.c: 152: Timeout_Counter();
 15710  14A4  319E  26B0  3194   	fcall	_Timeout_Counter
 15711  14A7                     l7059:	
 15712  14A7  0020               	movlb	0	; select bank0
 15713  14A8  1D0E               	btfss	14,2	;volatile
 15714  14A9  2CAD               	goto	l7063
 15715  14AA  0021               	movlb	1	; select bank1
 15716  14AB  1D2F               	btfss	(_myMain^(0+128)+15),2
 15717  14AC  2CA4               	goto	l7057
 15718  14AD                     l7063:	
 15719                           
 15720                           ;CC2500_B1.c: 153: };
 15721                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 15722  14AD  319C  24BC         	fcall	_set_TimeoutCleared
 15723                           
 15724                           ;CC2500_B1.c: 155: RC0 = 0;
 15725  14AF  0020               	movlb	0	; select bank0
 15726  14B0  100E               	bcf	14,0	;volatile
 15727                           
 15728                           ;CC2500_B1.c: 156: RC4 = 1;
 15729  14B1  160E               	bsf	14,4	;volatile
 15730  14B2  0008               	return
 15731  14B3                     __end_of_CC2500_PowerRST:	
 15732                           
 15733                           	psect	text103
 15734  121E                     __ptext103:	
 15735 ;; *************** function _CC2500_InitSetREG *****************
 15736 ;; Defined at:
 15737 ;;		line 162 in file "../src/CC2500_B1.c"
 15738 ;; Parameters:    Size  Location     Type
 15739 ;;		None
 15740 ;; Auto vars:     Size  Location     Type
 15741 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15742 ;;  temp2           1    7[BANK0 ] unsigned char 
 15743 ;;  temp1           1    6[BANK0 ] unsigned char 
 15744 ;; Return value:  Size  Location     Type
 15745 ;;		None               void
 15746 ;; Registers used:
 15747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15748 ;; Tracked objects:
 15749 ;;		On entry : 0/0
 15750 ;;		On exit  : 0/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;Total ram usage:        4 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; Hardware stack levels required when called:    7
 15760 ;; This function calls:
 15761 ;;		_CC2500_WriteREG
 15762 ;; This function is called by:
 15763 ;;		_CC2500_PowerOnInitial
 15764 ;; This function uses a non-reentrant model
 15765 ;;
 15766                           
 15767                           
 15768                           ;psect for function _CC2500_InitSetREG
 15769  121E                     _CC2500_InitSetREG:	
 15770                           
 15771                           ;CC2500_B1.c: 163: unsigned char loop_c;
 15772                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 15773                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 15774                           
 15775                           ;incstack = 0
 15776                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15777  121E  0020               	movlb	0	; select bank0
 15778  121F  01A8               	clrf	CC2500_InitSetREG@loop_c
 15779  1220                     L11:	
 15780  1220  302F               	movlw	47
 15781  1221  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15782  1222  1803               	btfsc	3,0
 15783  1223  0008               	return
 15784                           
 15785                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 15786  1224  0828               	movf	CC2500_InitSetREG@loop_c,w
 15787  1225  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15788  1226  0084               	movwf	4
 15789  1227  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15790  1228  1803               	skipnc
 15791  1229  3E01               	addlw	1
 15792  122A  0085               	movwf	5
 15793  122B  0800               	movf	0,w	;code access
 15794  122C  00A5               	movwf	??_CC2500_InitSetREG
 15795  122D  0825               	movf	??_CC2500_InitSetREG,w
 15796  122E  00A6               	movwf	CC2500_InitSetREG@temp1
 15797                           
 15798                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 15799  122F  0828               	movf	CC2500_InitSetREG@loop_c,w
 15800  1230  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15801  1231  0084               	movwf	4
 15802  1232  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15803  1233  1803               	skipnc
 15804  1234  3E01               	addlw	1
 15805  1235  0085               	movwf	5
 15806  1236  0800               	movf	0,w	;code access
 15807  1237  00A5               	movwf	??_CC2500_InitSetREG
 15808  1238  0825               	movf	??_CC2500_InitSetREG,w
 15809  1239  00A7               	movwf	CC2500_InitSetREG@temp2
 15810                           
 15811                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 15812  123A  0827               	movf	CC2500_InitSetREG@temp2,w
 15813  123B  00A5               	movwf	??_CC2500_InitSetREG
 15814  123C  0825               	movf	??_CC2500_InitSetREG,w
 15815  123D  00A2               	movwf	CC2500_WriteREG@value
 15816  123E  0826               	movf	CC2500_InitSetREG@temp1,w
 15817  123F  3191  2164  3192   	fcall	_CC2500_WriteREG
 15818  1242  3001               	movlw	1
 15819  1243  0020               	movlb	0	; select bank0
 15820  1244  00A5               	movwf	??_CC2500_InitSetREG
 15821  1245  0825               	movf	??_CC2500_InitSetREG,w
 15822  1246  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15823  1247  2A20               	goto	L11
 15824  1248                     __end_of_CC2500_InitSetREG:	
 15825                           
 15826                           	psect	text104
 15827  1083                     __ptext104:	
 15828 ;; *************** function _CC2500_InitPATable *****************
 15829 ;; Defined at:
 15830 ;;		line 177 in file "../src/CC2500_B1.c"
 15831 ;; Parameters:    Size  Location     Type
 15832 ;;		None
 15833 ;; Auto vars:     Size  Location     Type
 15834 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15835 ;;  temp            1    6[BANK0 ] unsigned char 
 15836 ;; Return value:  Size  Location     Type
 15837 ;;		None               void
 15838 ;; Registers used:
 15839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15840 ;; Tracked objects:
 15841 ;;		On entry : 0/0
 15842 ;;		On exit  : 0/0
 15843 ;;		Unchanged: 0/0
 15844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15848 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;Total ram usage:        3 bytes
 15850 ;; Hardware stack levels used:    1
 15851 ;; Hardware stack levels required when called:    7
 15852 ;; This function calls:
 15853 ;;		_CC2500_WriteREG
 15854 ;; This function is called by:
 15855 ;;		_CC2500_PowerOnInitial
 15856 ;; This function uses a non-reentrant model
 15857 ;;
 15858                           
 15859                           
 15860                           ;psect for function _CC2500_InitPATable
 15861  1083                     _CC2500_InitPATable:	
 15862                           
 15863                           ;CC2500_B1.c: 178: unsigned char loop_d;
 15864                           ;CC2500_B1.c: 179: unsigned char temp;
 15865                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 15866                           
 15867                           ;incstack = 0
 15868                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15869  1083  0020               	movlb	0	; select bank0
 15870  1084  01A7               	clrf	CC2500_InitPATable@loop_d
 15871  1085                     L12:	
 15872  1085  3008               	movlw	8
 15873  1086  0227               	subwf	CC2500_InitPATable@loop_d,w
 15874  1087  1803               	btfsc	3,0
 15875  1088  0008               	return
 15876                           
 15877                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 15878  1089  0827               	movf	CC2500_InitPATable@loop_d,w
 15879  108A  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15880  108B  0084               	movwf	4
 15881  108C  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15882  108D  1803               	skipnc
 15883  108E  3E01               	addlw	1
 15884  108F  0085               	movwf	5
 15885  1090  0800               	movf	0,w	;code access
 15886  1091  00A5               	movwf	??_CC2500_InitPATable
 15887  1092  0825               	movf	??_CC2500_InitPATable,w
 15888  1093  00A6               	movwf	CC2500_InitPATable@temp
 15889                           
 15890                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 15891  1094  0826               	movf	CC2500_InitPATable@temp,w
 15892  1095  00A5               	movwf	??_CC2500_InitPATable
 15893  1096  0825               	movf	??_CC2500_InitPATable,w
 15894  1097  00A2               	movwf	CC2500_WriteREG@value
 15895  1098  303E               	movlw	62
 15896  1099  3191  2164  3190   	fcall	_CC2500_WriteREG
 15897  109C  3001               	movlw	1
 15898  109D  0020               	movlb	0	; select bank0
 15899  109E  00A5               	movwf	??_CC2500_InitPATable
 15900  109F  0825               	movf	??_CC2500_InitPATable,w
 15901  10A0  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15902  10A1  2885               	goto	L12
 15903  10A2                     __end_of_CC2500_InitPATable:	
 15904                           
 15905                           	psect	text105
 15906  1164                     __ptext105:	
 15907 ;; *************** function _CC2500_WriteREG *****************
 15908 ;; Defined at:
 15909 ;;		line 254 in file "../src/CC2500_B1.c"
 15910 ;; Parameters:    Size  Location     Type
 15911 ;;  w_addr          1    wreg     unsigned char 
 15912 ;;  value           1    2[BANK0 ] unsigned char 
 15913 ;; Auto vars:     Size  Location     Type
 15914 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15915 ;; Return value:  Size  Location     Type
 15916 ;;		None               void
 15917 ;; Registers used:
 15918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15919 ;; Tracked objects:
 15920 ;;		On entry : 0/0
 15921 ;;		On exit  : 0/0
 15922 ;;		Unchanged: 0/0
 15923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15924 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;Total ram usage:        3 bytes
 15929 ;; Hardware stack levels used:    1
 15930 ;; Hardware stack levels required when called:    6
 15931 ;; This function calls:
 15932 ;;		_CC2500_WriteByte
 15933 ;;		_Timeout_Counter
 15934 ;;		_set_TimeoutCleared
 15935 ;; This function is called by:
 15936 ;;		_CC2500_InitSetREG
 15937 ;;		_CC2500_InitPATable
 15938 ;; This function uses a non-reentrant model
 15939 ;;
 15940                           
 15941                           
 15942                           ;psect for function _CC2500_WriteREG
 15943  1164                     _CC2500_WriteREG:	
 15944                           
 15945                           ;incstack = 0
 15946                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15947                           ;CC2500_WriteREG@w_addr stored from wreg
 15948  1164  0020               	movlb	0	; select bank0
 15949  1165  00A4               	movwf	CC2500_WriteREG@w_addr
 15950                           
 15951                           ;CC2500_B1.c: 255: RC4 = 0;
 15952  1166  120E               	bcf	14,4	;volatile
 15953                           
 15954                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 15955  1167  0824               	movf	CC2500_WriteREG@w_addr,w
 15956  1168  00A3               	movwf	??_CC2500_WriteREG
 15957  1169  0823               	movf	??_CC2500_WriteREG,w
 15958  116A  0021               	movlb	1	; select bank1
 15959  116B  00D0               	movwf	_SPI0Buffer^(0+128)
 15960                           
 15961                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 15962  116C  2970               	goto	l6741
 15963  116D                     l6739:	
 15964                           
 15965                           ;CC2500_B1.c: 258: Timeout_Counter();
 15966  116D  319E  26B0  3191   	fcall	_Timeout_Counter
 15967  1170                     l6741:	
 15968  1170  0020               	movlb	0	; select bank0
 15969  1171  1D0E               	btfss	14,2	;volatile
 15970  1172  2976               	goto	l6745
 15971  1173  0021               	movlb	1	; select bank1
 15972  1174  1D2F               	btfss	(_myMain^(0+128)+15),2
 15973  1175  296D               	goto	l6739
 15974  1176                     l6745:	
 15975                           
 15976                           ;CC2500_B1.c: 259: };
 15977                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15978  1176  319C  24BC  3191   	fcall	_set_TimeoutCleared
 15979                           
 15980                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15981  1179  319F  2708  3191   	fcall	_CC2500_WriteByte
 15982                           
 15983                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15984  117C  0020               	movlb	0	; select bank0
 15985  117D  0822               	movf	CC2500_WriteREG@value,w
 15986  117E  00A3               	movwf	??_CC2500_WriteREG
 15987  117F  0823               	movf	??_CC2500_WriteREG,w
 15988  1180  0021               	movlb	1	; select bank1
 15989  1181  00D0               	movwf	_SPI0Buffer^(0+128)
 15990                           
 15991                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15992  1182  319F  2708         	fcall	_CC2500_WriteByte
 15993                           
 15994                           ;CC2500_B1.c: 265: RC4 = 1;
 15995  1184  0020               	movlb	0	; select bank0
 15996  1185  160E               	bsf	14,4	;volatile
 15997  1186  0008               	return
 15998  1187                     __end_of_CC2500_WriteREG:	
 15999                           
 16000                           	psect	text106
 16001  1D22                     __ptext106:	
 16002 ;; *************** function _CC2500_FrequencyCabr *****************
 16003 ;; Defined at:
 16004 ;;		line 204 in file "../src/CC2500_B1.c"
 16005 ;; Parameters:    Size  Location     Type
 16006 ;;		None
 16007 ;; Auto vars:     Size  Location     Type
 16008 ;;		None
 16009 ;; Return value:  Size  Location     Type
 16010 ;;		None               void
 16011 ;; Registers used:
 16012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16013 ;; Tracked objects:
 16014 ;;		On entry : 0/0
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;Total ram usage:        0 bytes
 16023 ;; Hardware stack levels used:    1
 16024 ;; Hardware stack levels required when called:    7
 16025 ;; This function calls:
 16026 ;;		_CC2500_WriteCommand
 16027 ;;		_DelayTime_1us
 16028 ;; This function is called by:
 16029 ;;		_CC2500_PowerOnInitial
 16030 ;; This function uses a non-reentrant model
 16031 ;;
 16032                           
 16033                           
 16034                           ;psect for function _CC2500_FrequencyCabr
 16035  1D22                     _CC2500_FrequencyCabr:	
 16036                           
 16037                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 16038                           
 16039                           ;incstack = 0
 16040                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16041  1D22  3033               	movlw	51
 16042  1D23  319F  273B  319D   	fcall	_CC2500_WriteCommand
 16043                           
 16044                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 16045  1D26  30E8               	movlw	232
 16046  1D27  0020               	movlb	0	; select bank0
 16047  1D28  00A0               	movwf	DelayTime_1us@count
 16048  1D29  3003               	movlw	3
 16049  1D2A  00A1               	movwf	DelayTime_1us@count+1
 16050  1D2B  3191  21CF         	fcall	_DelayTime_1us
 16051  1D2D  0008               	return
 16052  1D2E                     __end_of_CC2500_FrequencyCabr:	
 16053                           
 16054                           	psect	text107
 16055  11CF                     __ptext107:	
 16056 ;; *************** function _DelayTime_1us *****************
 16057 ;; Defined at:
 16058 ;;		line 323 in file "../src/CC2500_B1.c"
 16059 ;; Parameters:    Size  Location     Type
 16060 ;;  count           2    0[BANK0 ] int 
 16061 ;; Auto vars:     Size  Location     Type
 16062 ;;  j               2    4[BANK0 ] unsigned int 
 16063 ;;  i               2    2[BANK0 ] unsigned int 
 16064 ;; Return value:  Size  Location     Type
 16065 ;;		None               void
 16066 ;; Registers used:
 16067 ;;		wreg, status,2
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16073 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16074 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;Total ram usage:        6 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:    5
 16080 ;; This function calls:
 16081 ;;		Nothing
 16082 ;; This function is called by:
 16083 ;;		_CC2500_PowerRST
 16084 ;;		_CC2500_FrequencyCabr
 16085 ;; This function uses a non-reentrant model
 16086 ;;
 16087                           
 16088                           
 16089                           ;psect for function _DelayTime_1us
 16090  11CF                     _DelayTime_1us:	
 16091                           
 16092                           ;CC2500_B1.c: 324: unsigned int i, j;
 16093                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 16094                           
 16095                           ;incstack = 0
 16096                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16097  11CF  3001               	movlw	1
 16098  11D0  0020               	movlb	0	; select bank0
 16099  11D1  00A2               	movwf	DelayTime_1us@i
 16100  11D2  3000               	movlw	0
 16101  11D3  00A3               	movwf	DelayTime_1us@i+1
 16102  11D4                     l402:	
 16103  11D4  0821               	movf	DelayTime_1us@count+1,w
 16104  11D5  0223               	subwf	DelayTime_1us@i+1,w
 16105  11D6  1D03               	skipz
 16106  11D7  29DA               	goto	u5745
 16107  11D8  0820               	movf	DelayTime_1us@count,w
 16108  11D9  0222               	subwf	DelayTime_1us@i,w
 16109  11DA                     u5745:	
 16110  11DA  1803               	btfsc	3,0
 16111  11DB  0008               	return
 16112                           
 16113                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 16114  11DC  01A4               	clrf	DelayTime_1us@j
 16115  11DD  01A5               	clrf	DelayTime_1us@j+1
 16116  11DE  3000               	movlw	0
 16117  11DF  0225               	subwf	DelayTime_1us@j+1,w
 16118  11E0  3002               	movlw	2
 16119  11E1  1903               	skipnz
 16120  11E2  0224               	subwf	DelayTime_1us@j,w
 16121  11E3  1803               	btfsc	3,0
 16122  11E4  29F0               	goto	l6733
 16123  11E5                     l6731:	
 16124  11E5  3001               	movlw	1
 16125  11E6  07A4               	addwf	DelayTime_1us@j,f
 16126  11E7  3000               	movlw	0
 16127  11E8  3DA5               	addwfc	DelayTime_1us@j+1,f
 16128  11E9  3000               	movlw	0
 16129  11EA  0225               	subwf	DelayTime_1us@j+1,w
 16130  11EB  3002               	movlw	2
 16131  11EC  1903               	skipnz
 16132  11ED  0224               	subwf	DelayTime_1us@j,w
 16133  11EE  1C03               	skipc
 16134  11EF  29E5               	goto	l6731
 16135  11F0                     l6733:	
 16136  11F0  3001               	movlw	1
 16137  11F1  07A2               	addwf	DelayTime_1us@i,f
 16138  11F2  3000               	movlw	0
 16139  11F3  3DA3               	addwfc	DelayTime_1us@i+1,f
 16140  11F4  29D4               	goto	l402
 16141  11F5                     __end_of_DelayTime_1us:	
 16142                           
 16143                           	psect	text108
 16144  1CB0                     __ptext108:	
 16145 ;; *************** function _CC2500_ClearTXFIFO *****************
 16146 ;; Defined at:
 16147 ;;		line 190 in file "../src/CC2500_B1.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;		None
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;		None
 16152 ;; Return value:  Size  Location     Type
 16153 ;;		None               void
 16154 ;; Registers used:
 16155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16156 ;; Tracked objects:
 16157 ;;		On entry : 0/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;Total ram usage:        0 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    7
 16168 ;; This function calls:
 16169 ;;		_CC2500_WriteCommand
 16170 ;; This function is called by:
 16171 ;;		_CC2500_PowerOnInitial
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           
 16176                           ;psect for function _CC2500_ClearTXFIFO
 16177  1CB0                     _CC2500_ClearTXFIFO:	
 16178                           
 16179                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 16180                           
 16181                           ;incstack = 0
 16182                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16183  1CB0  303B               	movlw	59
 16184  1CB1  319F  273B         	fcall	_CC2500_WriteCommand
 16185  1CB3  0008               	return
 16186  1CB4                     __end_of_CC2500_ClearTXFIFO:	
 16187                           
 16188                           	psect	text109
 16189  1CAC                     __ptext109:	
 16190 ;; *************** function _CC2500_ClearRXFIFO *****************
 16191 ;; Defined at:
 16192 ;;		line 197 in file "../src/CC2500_B1.c"
 16193 ;; Parameters:    Size  Location     Type
 16194 ;;		None
 16195 ;; Auto vars:     Size  Location     Type
 16196 ;;		None
 16197 ;; Return value:  Size  Location     Type
 16198 ;;		None               void
 16199 ;; Registers used:
 16200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;Total ram usage:        0 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    7
 16213 ;; This function calls:
 16214 ;;		_CC2500_WriteCommand
 16215 ;; This function is called by:
 16216 ;;		_CC2500_PowerOnInitial
 16217 ;; This function uses a non-reentrant model
 16218 ;;
 16219                           
 16220                           
 16221                           ;psect for function _CC2500_ClearRXFIFO
 16222  1CAC                     _CC2500_ClearRXFIFO:	
 16223                           
 16224                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 16225                           
 16226                           ;incstack = 0
 16227                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16228  1CAC  303A               	movlw	58
 16229  1CAD  319F  273B         	fcall	_CC2500_WriteCommand
 16230  1CAF  0008               	return
 16231  1CB0                     __end_of_CC2500_ClearRXFIFO:	
 16232                           
 16233                           	psect	text110
 16234  1F3B                     __ptext110:	
 16235 ;; *************** function _CC2500_WriteCommand *****************
 16236 ;; Defined at:
 16237 ;;		line 288 in file "../src/CC2500_B1.c"
 16238 ;; Parameters:    Size  Location     Type
 16239 ;;  command         1    wreg     unsigned char 
 16240 ;; Auto vars:     Size  Location     Type
 16241 ;;  command         1    3[BANK0 ] unsigned char 
 16242 ;; Return value:  Size  Location     Type
 16243 ;;		None               void
 16244 ;; Registers used:
 16245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16246 ;; Tracked objects:
 16247 ;;		On entry : 0/0
 16248 ;;		On exit  : 0/0
 16249 ;;		Unchanged: 0/0
 16250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16255 ;;Total ram usage:        2 bytes
 16256 ;; Hardware stack levels used:    1
 16257 ;; Hardware stack levels required when called:    6
 16258 ;; This function calls:
 16259 ;;		_CC2500_WriteByte
 16260 ;;		_Timeout_Counter
 16261 ;;		_set_TimeoutCleared
 16262 ;; This function is called by:
 16263 ;;		_CC2500_TxData
 16264 ;;		_CC2500_RxData
 16265 ;;		_CC2500_ClearTXFIFO
 16266 ;;		_CC2500_ClearRXFIFO
 16267 ;;		_CC2500_FrequencyCabr
 16268 ;;		_CC2500_SIDLEMode
 16269 ;;		_setRF_Main
 16270 ;;		_RF_RxDisable
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274                           
 16275                           ;psect for function _CC2500_WriteCommand
 16276  1F3B                     _CC2500_WriteCommand:	
 16277                           
 16278                           ;incstack = 0
 16279                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16280                           ;CC2500_WriteCommand@command stored from wreg
 16281  1F3B  0020               	movlb	0	; select bank0
 16282  1F3C  00A3               	movwf	CC2500_WriteCommand@command
 16283                           
 16284                           ;CC2500_B1.c: 289: RC4 = 0;
 16285  1F3D  120E               	bcf	14,4	;volatile
 16286                           
 16287                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 16288  1F3E  0823               	movf	CC2500_WriteCommand@command,w
 16289  1F3F  00A2               	movwf	??_CC2500_WriteCommand
 16290  1F40  0822               	movf	??_CC2500_WriteCommand,w
 16291  1F41  0021               	movlb	1	; select bank1
 16292  1F42  00D0               	movwf	_SPI0Buffer^(0+128)
 16293                           
 16294                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 16295  1F43  2F47               	goto	l6447
 16296  1F44                     l6445:	
 16297                           
 16298                           ;CC2500_B1.c: 293: Timeout_Counter();
 16299  1F44  319E  26B0  319F   	fcall	_Timeout_Counter
 16300  1F47                     l6447:	
 16301  1F47  0020               	movlb	0	; select bank0
 16302  1F48  1D0E               	btfss	14,2	;volatile
 16303  1F49  2F4D               	goto	l6451
 16304  1F4A  0021               	movlb	1	; select bank1
 16305  1F4B  1D2F               	btfss	(_myMain^(0+128)+15),2
 16306  1F4C  2F44               	goto	l6445
 16307  1F4D                     l6451:	
 16308                           
 16309                           ;CC2500_B1.c: 294: };
 16310                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 16311  1F4D  319C  24BC  319F   	fcall	_set_TimeoutCleared
 16312                           
 16313                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 16314  1F50  319F  2708         	fcall	_CC2500_WriteByte
 16315                           
 16316                           ;CC2500_B1.c: 298: RC4 = 1;
 16317  1F52  0020               	movlb	0	; select bank0
 16318  1F53  160E               	bsf	14,4	;volatile
 16319  1F54  0008               	return
 16320  1F55                     __end_of_CC2500_WriteCommand:	
 16321                           
 16322                           	psect	text111
 16323  1CBC                     __ptext111:	
 16324 ;; *************** function _set_TimeoutCleared *****************
 16325 ;; Defined at:
 16326 ;;		line 218 in file "../src/Main_B1.c"
 16327 ;; Parameters:    Size  Location     Type
 16328 ;;		None
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;		None
 16331 ;; Return value:  Size  Location     Type
 16332 ;;		None               void
 16333 ;; Registers used:
 16334 ;;		status,2
 16335 ;; Tracked objects:
 16336 ;;		On entry : 0/0
 16337 ;;		On exit  : 0/0
 16338 ;;		Unchanged: 0/0
 16339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;Total ram usage:        0 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; Hardware stack levels required when called:    5
 16347 ;; This function calls:
 16348 ;;		Nothing
 16349 ;; This function is called by:
 16350 ;;		_CC2500_TxData
 16351 ;;		_CC2500_RxData
 16352 ;;		_CC2500_PowerRST
 16353 ;;		_CC2500_WriteREG
 16354 ;;		_CC2500_WriteCommand
 16355 ;;		_CC2500_ReadStatus
 16356 ;;		_getAD
 16357 ;;		_TouchPower
 16358 ;;		_CC2500_ReadREG
 16359 ;; This function uses a non-reentrant model
 16360 ;;
 16361                           
 16362                           
 16363                           ;psect for function _set_TimeoutCleared
 16364  1CBC                     _set_TimeoutCleared:	
 16365                           
 16366                           ;Main_B1.c: 219: myMain.Timeout = 0;
 16367                           
 16368                           ;incstack = 0
 16369                           ; Regs used in _set_TimeoutCleared: [status,2]
 16370  1CBC  0021               	movlb	1	; select bank1
 16371  1CBD  112F               	bcf	(_myMain^(0+128)+15),2
 16372                           
 16373                           ;Main_B1.c: 220: myMain.Timeout_Counter = 0;
 16374  1CBE  01B0               	clrf	(_myMain^(0+128)+16)
 16375  1CBF  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16376  1CC0  0008               	return
 16377  1CC1                     __end_of_set_TimeoutCleared:	
 16378                           
 16379                           	psect	text112
 16380  1EB0                     __ptext112:	
 16381 ;; *************** function _Timeout_Counter *****************
 16382 ;; Defined at:
 16383 ;;		line 209 in file "../src/Main_B1.c"
 16384 ;; Parameters:    Size  Location     Type
 16385 ;;		None
 16386 ;; Auto vars:     Size  Location     Type
 16387 ;;		None
 16388 ;; Return value:  Size  Location     Type
 16389 ;;		None               void
 16390 ;; Registers used:
 16391 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16392 ;; Tracked objects:
 16393 ;;		On entry : 0/0
 16394 ;;		On exit  : 0/0
 16395 ;;		Unchanged: 0/0
 16396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;Total ram usage:        0 bytes
 16402 ;; Hardware stack levels used:    1
 16403 ;; Hardware stack levels required when called:    5
 16404 ;; This function calls:
 16405 ;;		Nothing
 16406 ;; This function is called by:
 16407 ;;		_CC2500_TxData
 16408 ;;		_CC2500_RxData
 16409 ;;		_CC2500_PowerRST
 16410 ;;		_CC2500_WriteREG
 16411 ;;		_CC2500_WriteCommand
 16412 ;;		_CC2500_ReadStatus
 16413 ;;		_getAD
 16414 ;;		_TouchPower
 16415 ;;		_CC2500_ReadREG
 16416 ;; This function uses a non-reentrant model
 16417 ;;
 16418                           
 16419                           
 16420                           ;psect for function _Timeout_Counter
 16421  1EB0                     _Timeout_Counter:	
 16422                           
 16423                           ;Main_B1.c: 210: myMain.Timeout_Counter++;
 16424                           
 16425                           ;incstack = 0
 16426                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16427  1EB0  3001               	movlw	1
 16428  1EB1  0021               	movlb	1	; select bank1
 16429  1EB2  07B0               	addwf	(_myMain^(0+128)+16),f
 16430  1EB3  3000               	movlw	0
 16431  1EB4  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16432                           
 16433                           ;Main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 16434  1EB5  3010               	movlw	16
 16435  1EB6  3EA0               	addlw	_myMain& (0+255)
 16436  1EB7  0086               	movwf	6
 16437  1EB8  0187               	clrf	7
 16438  1EB9  3F40               	moviw [0]fsr1
 16439  1EBA  3A10               	xorlw	16
 16440  1EBB  1D03               	skipz
 16441  1EBC  2EBF               	goto	u5185
 16442  1EBD  3F41               	moviw [1]fsr1
 16443  1EBE  3A27               	xorlw	39
 16444  1EBF                     u5185:	
 16445  1EBF  1D03               	skipz
 16446  1EC0  0008               	return
 16447                           
 16448                           ;Main_B1.c: 212: myMain.Timeout_Counter = 0;
 16449  1EC1  01B0               	clrf	(_myMain^(0+128)+16)
 16450  1EC2  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16451                           
 16452                           ;Main_B1.c: 213: myMain.Timeout = 1;
 16453  1EC3  152F               	bsf	(_myMain^(0+128)+15),2
 16454  1EC4  0008               	return
 16455  1EC5                     __end_of_Timeout_Counter:	
 16456                           
 16457                           	psect	text113
 16458  1F08                     __ptext113:	
 16459 ;; *************** function _CC2500_WriteByte *****************
 16460 ;; Defined at:
 16461 ;;		line 222 in file "../src/CC2500_B1.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;		None
 16464 ;; Auto vars:     Size  Location     Type
 16465 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16466 ;; Return value:  Size  Location     Type
 16467 ;;		None               void
 16468 ;; Registers used:
 16469 ;;		wreg, status,2, status,0
 16470 ;; Tracked objects:
 16471 ;;		On entry : 0/0
 16472 ;;		On exit  : 0/0
 16473 ;;		Unchanged: 0/0
 16474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;Total ram usage:        2 bytes
 16480 ;; Hardware stack levels used:    1
 16481 ;; Hardware stack levels required when called:    5
 16482 ;; This function calls:
 16483 ;;		Nothing
 16484 ;; This function is called by:
 16485 ;;		_CC2500_TxData
 16486 ;;		_CC2500_RxData
 16487 ;;		_CC2500_PowerRST
 16488 ;;		_CC2500_WriteREG
 16489 ;;		_CC2500_WriteCommand
 16490 ;;		_CC2500_ReadStatus
 16491 ;;		_CC2500_ReadREG
 16492 ;; This function uses a non-reentrant model
 16493 ;;
 16494                           
 16495                           
 16496                           ;psect for function _CC2500_WriteByte
 16497  1F08                     _CC2500_WriteByte:	
 16498                           
 16499                           ;CC2500_B1.c: 223: unsigned char loop_a;
 16500                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 16501                           
 16502                           ;incstack = 0
 16503                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16504  1F08  0020               	movlb	0	; select bank0
 16505  1F09  01A1               	clrf	CC2500_WriteByte@loop_a
 16506  1F0A                     L13:	
 16507  1F0A  3008               	movlw	8
 16508  1F0B  0221               	subwf	CC2500_WriteByte@loop_a,w
 16509  1F0C  1803               	btfsc	3,0
 16510  1F0D  0008               	return
 16511                           
 16512                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 16513  1F0E  0021               	movlb	1	; select bank1
 16514  1F0F  1FD0               	btfss	_SPI0Buffer^(0+128),7
 16515  1F10  2F14               	goto	l358
 16516                           
 16517                           ;CC2500_B1.c: 226: RC0 = 1;
 16518  1F11  0020               	movlb	0	; select bank0
 16519  1F12  140E               	bsf	14,0	;volatile
 16520  1F13  2F16               	goto	l359
 16521  1F14                     l358:	
 16522                           
 16523                           ;CC2500_B1.c: 227: else
 16524                           ;CC2500_B1.c: 228: RC0 = 0;
 16525  1F14  0020               	movlb	0	; select bank0
 16526  1F15  100E               	bcf	14,0	;volatile
 16527  1F16                     l359:	
 16528                           
 16529                           ;CC2500_B1.c: 229: RC1 = 1;
 16530  1F16  148E               	bsf	14,1	;volatile
 16531                           
 16532                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 16533  1F17  1003               	clrc
 16534  1F18  0021               	movlb	1	; select bank1
 16535  1F19  0DD0               	rlf	_SPI0Buffer^(0+128),f
 16536                           
 16537                           ;CC2500_B1.c: 231: RC1 = 0;
 16538  1F1A  0020               	movlb	0	; select bank0
 16539  1F1B  108E               	bcf	14,1	;volatile
 16540  1F1C  3001               	movlw	1
 16541  1F1D  00A0               	movwf	??_CC2500_WriteByte
 16542  1F1E  0820               	movf	??_CC2500_WriteByte,w
 16543  1F1F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16544  1F20  2F0A               	goto	L13
 16545  1F21                     __end_of_CC2500_WriteByte:	
 16546                           
 16547                           	psect	text114
 16548  15CB                     __ptext114:	
 16549 ;; *************** function _Buzzer_Main *****************
 16550 ;; Defined at:
 16551 ;;		line 46 in file "../src/Buzzer_B1.c"
 16552 ;; Parameters:    Size  Location     Type
 16553 ;;		None
 16554 ;; Auto vars:     Size  Location     Type
 16555 ;;		None
 16556 ;; Return value:  Size  Location     Type
 16557 ;;		None               void
 16558 ;; Registers used:
 16559 ;;		wreg, status,2, status,0
 16560 ;; Tracked objects:
 16561 ;;		On entry : 0/0
 16562 ;;		On exit  : 0/0
 16563 ;;		Unchanged: 0/0
 16564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;Total ram usage:        1 bytes
 16570 ;; Hardware stack levels used:    1
 16571 ;; Hardware stack levels required when called:    5
 16572 ;; This function calls:
 16573 ;;		Nothing
 16574 ;; This function is called by:
 16575 ;;		_main
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           
 16580                           ;psect for function _Buzzer_Main
 16581  15CB                     _Buzzer_Main:	
 16582                           
 16583                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16584                           
 16585                           ;incstack = 0
 16586                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16587  15CB  0021               	movlb	1	; select bank1
 16588  15CC  1CB2               	btfss	_Buz1^(0+128),1
 16589  15CD  0008               	return
 16590                           
 16591                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16592  15CE  3001               	movlw	1
 16593  15CF  07B3               	addwf	(_Buz1^(0+128)+1),f
 16594  15D0  3000               	movlw	0
 16595  15D1  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16596                           
 16597                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16598  15D2  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16599  15D3  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16600  15D4  1D03               	skipz
 16601  15D5  2DD8               	goto	u7435
 16602  15D6  0838               	movf	(_Buz1^(0+128)+6),w
 16603  15D7  0233               	subwf	(_Buz1^(0+128)+1),w
 16604  15D8                     u7435:	
 16605  15D8  1C03               	skipc
 16606  15D9  0008               	return
 16607                           
 16608                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16609  15DA  01B3               	clrf	(_Buz1^(0+128)+1)
 16610  15DB  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16611                           
 16612                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16613  15DC  12B2               	bcf	_Buz1^(0+128),5
 16614  15DD  0020               	movlb	0	; select bank0
 16615  15DE  1D8D               	btfss	13,3	;volatile
 16616  15DF  2DE2               	goto	l7699
 16617  15E0  0021               	movlb	1	; select bank1
 16618  15E1  16B2               	bsf	_Buz1^(0+128),5
 16619  15E2                     l7699:	
 16620                           
 16621                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16622  15E2  0021               	movlb	1	; select bank1
 16623  15E3  1AB2               	btfsc	_Buz1^(0+128),5
 16624  15E4  2E0E               	goto	l120
 16625                           
 16626                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16627  15E5  08B5               	movf	(_Buz1^(0+128)+3),f
 16628  15E6  1D03               	skipz
 16629  15E7  2E0A               	goto	l121
 16630                           
 16631                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16632  15E8  1DB2               	btfss	_Buz1^(0+128),3
 16633  15E9  2DF8               	goto	l122
 16634                           
 16635                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16636  15EA  11B2               	bcf	_Buz1^(0+128),3
 16637                           
 16638                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16639  15EB  0836               	movf	(_Buz1^(0+128)+4),w
 16640  15EC  0020               	movlb	0	; select bank0
 16641  15ED  00A0               	movwf	??_Buzzer_Main
 16642  15EE  0820               	movf	??_Buzzer_Main,w
 16643  15EF  0021               	movlb	1	; select bank1
 16644  15F0  00B5               	movwf	(_Buz1^(0+128)+3)
 16645                           
 16646                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16647  15F1  083B               	movf	((_Buz1+1)^(0+128)+8),w
 16648  15F2  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16649  15F3  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16650  15F4  083A               	movf	(_Buz1^(0+128)+8),w
 16651  15F5  01B8               	clrf	(_Buz1^(0+128)+6)
 16652  15F6  07B8               	addwf	(_Buz1^(0+128)+6),f
 16653                           
 16654                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16655  15F7  0008               	return
 16656  15F8                     l122:	
 16657  15F8  1E32               	btfss	_Buz1^(0+128),4
 16658  15F9  2E08               	goto	l124
 16659                           
 16660                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16661  15FA  1232               	bcf	_Buz1^(0+128),4
 16662                           
 16663                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16664  15FB  0837               	movf	(_Buz1^(0+128)+5),w
 16665  15FC  0020               	movlb	0	; select bank0
 16666  15FD  00A0               	movwf	??_Buzzer_Main
 16667  15FE  0820               	movf	??_Buzzer_Main,w
 16668  15FF  0021               	movlb	1	; select bank1
 16669  1600  00B5               	movwf	(_Buz1^(0+128)+3)
 16670                           
 16671                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16672  1601  083D               	movf	((_Buz1+1)^(0+128)+10),w
 16673  1602  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16674  1603  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16675  1604  083C               	movf	(_Buz1^(0+128)+10),w
 16676  1605  01B8               	clrf	(_Buz1^(0+128)+6)
 16677  1606  07B8               	addwf	(_Buz1^(0+128)+6),f
 16678                           
 16679                           ;Buzzer_B1.c: 62: } else {
 16680  1607  0008               	return
 16681  1608                     l124:	
 16682                           
 16683                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16684  1608  10B2               	bcf	_Buz1^(0+128),1
 16685                           
 16686                           ;Buzzer_B1.c: 64: }
 16687                           ;Buzzer_B1.c: 65: } else {
 16688  1609  0008               	return
 16689  160A                     l121:	
 16690                           
 16691                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16692  160A  16B2               	bsf	_Buz1^(0+128),5
 16693                           
 16694                           ;Buzzer_B1.c: 68: RB3 = 1;
 16695  160B  0020               	movlb	0	; select bank0
 16696  160C  158D               	bsf	13,3	;volatile
 16697                           
 16698                           ;Buzzer_B1.c: 69: }
 16699                           ;Buzzer_B1.c: 70: } else {
 16700  160D  0008               	return
 16701  160E                     l120:	
 16702                           
 16703                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16704  160E  12B2               	bcf	_Buz1^(0+128),5
 16705                           
 16706                           ;Buzzer_B1.c: 73: RB3 = 0;
 16707  160F  0020               	movlb	0	; select bank0
 16708  1610  118D               	bcf	13,3	;volatile
 16709                           
 16710                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16711  1611  3001               	movlw	1
 16712  1612  0021               	movlb	1	; select bank1
 16713  1613  02B5               	subwf	(_Buz1^(0+128)+3),f
 16714  1614  0008               	return
 16715  1615                     __end_of_Buzzer_Main:	
 16716                           
 16717                           	psect	text115
 16718  1C9A                     __ptext115:	
 16719 ;; *************** function _Buzzer_Initialization *****************
 16720 ;; Defined at:
 16721 ;;		line 11 in file "../src/Buzzer_B1.c"
 16722 ;; Parameters:    Size  Location     Type
 16723 ;;		None
 16724 ;; Auto vars:     Size  Location     Type
 16725 ;;		None
 16726 ;; Return value:  Size  Location     Type
 16727 ;;		None               void
 16728 ;; Registers used:
 16729 ;;		None
 16730 ;; Tracked objects:
 16731 ;;		On entry : 0/0
 16732 ;;		On exit  : 0/0
 16733 ;;		Unchanged: 0/0
 16734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;Total ram usage:        0 bytes
 16740 ;; Hardware stack levels used:    1
 16741 ;; Hardware stack levels required when called:    5
 16742 ;; This function calls:
 16743 ;;		Nothing
 16744 ;; This function is called by:
 16745 ;;		_main
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           
 16750                           ;psect for function _Buzzer_Initialization
 16751  1C9A                     _Buzzer_Initialization:	
 16752                           
 16753                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16754                           
 16755                           ;incstack = 0
 16756                           ; Regs used in _Buzzer_Initialization: []
 16757  1C9A  0021               	movlb	1	; select bank1
 16758  1C9B  1432               	bsf	_Buz1^(0+128),0
 16759  1C9C  0008               	return
 16760  1C9D                     __end_of_Buzzer_Initialization:	
 16761                           
 16762                           	psect	intentry
 16763  0004                     __pintentry:	
 16764 ;; *************** function _ISR *****************
 16765 ;; Defined at:
 16766 ;;		line 107 in file "../src/MCU_B1.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;		None
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;		None
 16771 ;; Return value:  Size  Location     Type
 16772 ;;		None               void
 16773 ;; Registers used:
 16774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;Total ram usage:        1 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    4
 16787 ;; This function calls:
 16788 ;;		_IOC_ISR
 16789 ;;		_TMR0_ISR
 16790 ;; This function is called by:
 16791 ;;		Interrupt level 1
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795  0004                     _ISR:	
 16796                           
 16797                           ;incstack = 0
 16798                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16799  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16800  0005  3180               	pagesel	$
 16801  0006  0020               	movlb	0	; select bank0
 16802  0007  087F               	movf	127,w
 16803  0008  00F7               	movwf	??_ISR
 16804                           
 16805                           ;MCU_B1.c: 109: IOC_ISR();
 16806  0009  319D  255E  3180   	fcall	_IOC_ISR
 16807                           
 16808                           ;MCU_B1.c: 111: TMR0_ISR();
 16809  000C  3192  2272         	fcall	_TMR0_ISR
 16810  000E  0877               	movf	??_ISR,w
 16811  000F  0020               	movlb	0	; select bank0
 16812  0010  00FF               	movwf	127
 16813  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16814  0012  0009               	retfie
 16815  0013                     __end_of_ISR:	
 16816                           
 16817                           	psect	text117
 16818  1272                     __ptext117:	
 16819 ;; *************** function _TMR0_ISR *****************
 16820 ;; Defined at:
 16821 ;;		line 135 in file "../src/MCU_B1.c"
 16822 ;; Parameters:    Size  Location     Type
 16823 ;;		None
 16824 ;; Auto vars:     Size  Location     Type
 16825 ;;		None
 16826 ;; Return value:  Size  Location     Type
 16827 ;;		None               void
 16828 ;; Registers used:
 16829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16830 ;; Tracked objects:
 16831 ;;		On entry : 0/0
 16832 ;;		On exit  : 0/0
 16833 ;;		Unchanged: 0/0
 16834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;Total ram usage:        0 bytes
 16840 ;; Hardware stack levels used:    1
 16841 ;; Hardware stack levels required when called:    2
 16842 ;; This function calls:
 16843 ;;		_setDimmerLights_IntrControl
 16844 ;; This function is called by:
 16845 ;;		_ISR
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           
 16850                           ;psect for function _TMR0_ISR
 16851  1272                     _TMR0_ISR:	
 16852                           
 16853                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 16854                           
 16855                           ;incstack = 0
 16856                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16857  1272  1E8B               	btfss	11,5	;volatile
 16858  1273  0008               	return
 16859  1274  1D0B               	btfss	11,2	;volatile
 16860  1275  0008               	return
 16861                           
 16862                           ;MCU_B1.c: 138: TMR0 = (256-190);
 16863  1276  3042               	movlw	66
 16864  1277  0020               	movlb	0	; select bank0
 16865  1278  0095               	movwf	21	;volatile
 16866                           
 16867                           ;MCU_B1.c: 139: TMR0IF = 0;
 16868  1279  110B               	bcf	11,2	;volatile
 16869                           
 16870                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 16871  127A  3001               	movlw	1
 16872  127B  3180  204A  3192   	fcall	_setDimmerLights_IntrControl
 16873                           
 16874                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 16875  127E  3002               	movlw	2
 16876  127F  3180  204A  3192   	fcall	_setDimmerLights_IntrControl
 16877                           
 16878                           ;MCU_B1.c: 154: setDimmerLights_IntrControl(3);
 16879  1282  3003               	movlw	3
 16880  1283  3180  204A  3192   	fcall	_setDimmerLights_IntrControl
 16881                           
 16882                           ;MCU_B1.c: 160: Timer0.Count++;
 16883  1286  3001               	movlw	1
 16884  1287  0022               	movlb	2	; select bank2
 16885  1288  07B6               	addwf	(_Timer0^(0+256)+1),f
 16886  1289  3000               	movlw	0
 16887  128A  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 16888                           
 16889                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 16890  128B  3001               	movlw	1
 16891  128C  3E35               	addlw	_Timer0& (0+255)
 16892  128D  0086               	movwf	6
 16893  128E  3001               	movlw	1	; select bank2/3
 16894  128F  0087               	movwf	7
 16895  1290  3F40               	moviw [0]fsr1
 16896  1291  3A64               	xorlw	100
 16897  1292  1D03               	skipz
 16898  1293  2A96               	goto	u754_25
 16899  1294  3F41               	moviw [1]fsr1
 16900  1295  3A00               	xorlw	0
 16901  1296                     u754_25:	
 16902  1296  1D03               	skipz
 16903  1297  0008               	return
 16904                           
 16905                           ;MCU_B1.c: 162: Timer0.Count = 0;
 16906  1298  01B6               	clrf	(_Timer0^(0+256)+1)
 16907  1299  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 16908                           
 16909                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 16910  129A  0021               	movlb	1	; select bank1
 16911  129B  14A0               	bsf	_myMain^(0+128),1
 16912  129C  0008               	return
 16913  129D                     __end_of_TMR0_ISR:	
 16914                           
 16915                           	psect	text118
 16916  004A                     __ptext118:	
 16917 ;; *************** function _setDimmerLights_IntrControl *****************
 16918 ;; Defined at:
 16919 ;;		line 87 in file "../src/Dimmer_B1.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;  lights          1    wreg     unsigned char 
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;  lights          1    6[COMMON] unsigned char 
 16924 ;; Return value:  Size  Location     Type
 16925 ;;		None               void
 16926 ;; Registers used:
 16927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16928 ;; Tracked objects:
 16929 ;;		On entry : 0/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;Total ram usage:        5 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; Hardware stack levels required when called:    1
 16940 ;; This function calls:
 16941 ;;		_DimmerIntrPointSelect
 16942 ;; This function is called by:
 16943 ;;		_TMR0_ISR
 16944 ;; This function uses a non-reentrant model
 16945 ;;
 16946                           
 16947                           
 16948                           ;psect for function _setDimmerLights_IntrControl
 16949  004A                     _setDimmerLights_IntrControl:	
 16950                           
 16951                           ;incstack = 0
 16952                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16953                           ;setDimmerLights_IntrControl@lights stored from wreg
 16954  004A  00F6               	movwf	setDimmerLights_IntrControl@lights
 16955                           
 16956                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 16957  004B  0876               	movf	setDimmerLights_IntrControl@lights,w
 16958  004C  319F  2721  3180   	fcall	_DimmerIntrPointSelect
 16959                           
 16960                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 16961  004F  087C               	movf	_DimmerLightsIntr,w
 16962  0050  0086               	movwf	6
 16963  0051  3001               	movlw	1	; select bank2/3
 16964  0052  0087               	movwf	7
 16965  0053  1C01               	btfss	1,0
 16966  0054  28B5               	goto	i1l7169
 16967                           
 16968                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 16969  0055  3001               	movlw	1
 16970  0056  00F2               	movwf	??_setDimmerLights_IntrControl
 16971  0057  087C               	movf	_DimmerLightsIntr,w
 16972  0058  3E03               	addlw	3
 16973  0059  0086               	movwf	6
 16974  005A  3001               	movlw	1	; select bank2/3
 16975  005B  0087               	movwf	7
 16976  005C  0872               	movf	??_setDimmerLights_IntrControl,w
 16977  005D  0781               	addwf	1,f
 16978                           
 16979                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 16980  005E  0021               	movlb	1	; select bank1
 16981  005F  0848               	movf	_Dimmer^(0+128),w
 16982  0060  3E02               	addlw	2
 16983  0061  0086               	movwf	6
 16984  0062  0187               	clrf	7
 16985  0063  0801               	movf	1,w
 16986  0064  00F2               	movwf	??_setDimmerLights_IntrControl
 16987  0065  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16988  0066  09F2               	comf	??_setDimmerLights_IntrControl,f
 16989  0067  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16990  0068  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16991  0069  1903               	skipnz
 16992  006A  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16993  006B  087C               	movf	_DimmerLightsIntr,w
 16994  006C  3E04               	addlw	4
 16995  006D  0086               	movwf	6
 16996  006E  3001               	movlw	1	; select bank2/3
 16997  006F  0087               	movwf	7
 16998  0070  0801               	movf	1,w
 16999  0071  0772               	addwf	??_setDimmerLights_IntrControl,w
 17000  0072  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17001  0073  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17002  0074  1803               	skipnc
 17003  0075  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17004  0076  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17005  0077  087C               	movf	_DimmerLightsIntr,w
 17006  0078  3E03               	addlw	3
 17007  0079  0086               	movwf	6
 17008  007A  3001               	movlw	1	; select bank2/3
 17009  007B  0087               	movwf	7
 17010  007C  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17011  007D  3A80               	xorlw	128
 17012  007E  3C80               	sublw	128
 17013  007F  1D03               	skipz
 17014  0080  2883               	goto	u638_25
 17015  0081  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17016  0082  0201               	subwf	1,w
 17017  0083                     u638_25:	
 17018  0083  1C03               	skipc
 17019  0084  29C4               	goto	i1l7235
 17020                           
 17021                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17022  0085  087C               	movf	_DimmerLightsIntr,w
 17023  0086  3E03               	addlw	3
 17024  0087  0086               	movwf	6
 17025  0088  3001               	movlw	1	; select bank2/3
 17026  0089  0087               	movwf	7
 17027  008A  0181               	clrf	1
 17028                           
 17029                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17030  008B  087C               	movf	_DimmerLightsIntr,w
 17031  008C  0086               	movwf	6
 17032  008D  3001               	movlw	1	; select bank2/3
 17033  008E  0087               	movwf	7
 17034  008F  1001               	bcf	1,0
 17035                           
 17036                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17037  0090  087C               	movf	_DimmerLightsIntr,w
 17038  0091  0086               	movwf	6
 17039  0092  3001               	movlw	1	; select bank2/3
 17040  0093  0087               	movwf	7
 17041  0094  1F01               	btfss	1,6
 17042  0095  29C4               	goto	i1l7235
 17043                           
 17044                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17045  0096  087C               	movf	_DimmerLightsIntr,w
 17046  0097  3E08               	addlw	8
 17047  0098  0086               	movwf	6
 17048  0099  3001               	movlw	1	; select bank2/3
 17049  009A  0087               	movwf	7
 17050  009B  1401               	bsf	1,0
 17051                           
 17052                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17053  009C  087C               	movf	_DimmerLightsIntr,w
 17054  009D  3E08               	addlw	8
 17055  009E  0086               	movwf	6
 17056  009F  3001               	movlw	1	; select bank2/3
 17057  00A0  0087               	movwf	7
 17058  00A1  1681               	bsf	1,5
 17059                           
 17060                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17061  00A2  0876               	movf	setDimmerLights_IntrControl@lights,w
 17062  00A3  3A01               	xorlw	1
 17063  00A4  1D03               	skipz
 17064  00A5  28A8               	goto	i1l7161
 17065                           
 17066                           ;Dimmer_B1.c: 101: RB4 = 1;
 17067  00A6  0020               	movlb	0	; select bank0
 17068  00A7  160D               	bsf	13,4	;volatile
 17069  00A8                     i1l7161:	
 17070                           ;Dimmer_B1.c: 102: ;;
 17071                           
 17072                           
 17073                           ;Dimmer_B1.c: 103: }
 17074                           ;Dimmer_B1.c: 106: if (lights == 2) {
 17075  00A8  0876               	movf	setDimmerLights_IntrControl@lights,w
 17076  00A9  3A02               	xorlw	2
 17077  00AA  1D03               	skipz
 17078  00AB  28AE               	goto	i1l7165
 17079                           
 17080                           ;Dimmer_B1.c: 107: RA7 = 1;
 17081  00AC  0020               	movlb	0	; select bank0
 17082  00AD  178C               	bsf	12,7	;volatile
 17083  00AE                     i1l7165:	
 17084                           
 17085                           ;Dimmer_B1.c: 108: }
 17086                           ;Dimmer_B1.c: 111: if (lights == 3) {
 17087  00AE  0876               	movf	setDimmerLights_IntrControl@lights,w
 17088  00AF  3A03               	xorlw	3
 17089  00B0  1D03               	skipz
 17090  00B1  29C4               	goto	i1l7235
 17091                           
 17092                           ;Dimmer_B1.c: 112: RB1 = 1;
 17093  00B2  0020               	movlb	0	; select bank0
 17094  00B3  148D               	bsf	13,1	;volatile
 17095                           
 17096                           ;Dimmer_B1.c: 113: }
 17097                           ;Dimmer_B1.c: 115: }
 17098                           ;Dimmer_B1.c: 116: }
 17099                           ;Dimmer_B1.c: 117: } else {
 17100  00B4  29C4               	goto	i1l7235
 17101  00B5                     i1l7169:	
 17102                           
 17103                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17104  00B5  087C               	movf	_DimmerLightsIntr,w
 17105  00B6  3E08               	addlw	8
 17106  00B7  0086               	movwf	6
 17107  00B8  3001               	movlw	1	; select bank2/3
 17108  00B9  0087               	movwf	7
 17109  00BA  1C01               	btfss	1,0
 17110  00BB  29C4               	goto	i1l7235
 17111                           
 17112                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17113  00BC  087C               	movf	_DimmerLightsIntr,w
 17114  00BD  3E08               	addlw	8
 17115  00BE  0086               	movwf	6
 17116  00BF  3001               	movlw	1	; select bank2/3
 17117  00C0  0087               	movwf	7
 17118  00C1  1001               	bcf	1,0
 17119                           
 17120                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17121  00C2  087C               	movf	_DimmerLightsIntr,w
 17122  00C3  0086               	movwf	6
 17123  00C4  3001               	movlw	1	; select bank2/3
 17124  00C5  0087               	movwf	7
 17125  00C6  1C81               	btfss	1,1
 17126  00C7  29C4               	goto	i1l7235
 17127                           
 17128                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17129  00C8  3001               	movlw	1
 17130  00C9  00F2               	movwf	??_setDimmerLights_IntrControl
 17131  00CA  0A7C               	incf	_DimmerLightsIntr,w
 17132  00CB  0086               	movwf	6
 17133  00CC  3001               	movlw	1	; select bank2/3
 17134  00CD  0087               	movwf	7
 17135  00CE  0872               	movf	??_setDimmerLights_IntrControl,w
 17136  00CF  0781               	addwf	1,f
 17137                           
 17138                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17139  00D0  0A7C               	incf	_DimmerLightsIntr,w
 17140  00D1  0086               	movwf	6
 17141  00D2  3001               	movlw	1	; select bank2/3
 17142  00D3  0087               	movwf	7
 17143  00D4  087C               	movf	_DimmerLightsIntr,w
 17144  00D5  3E02               	addlw	2
 17145  00D6  0084               	movwf	4
 17146  00D7  3001               	movlw	1	; select bank2/3
 17147  00D8  0085               	movwf	5
 17148  00D9  0800               	movf	0,w
 17149  00DA  0201               	subwf	1,w
 17150  00DB  1C03               	skipc
 17151  00DC  29C4               	goto	i1l7235
 17152                           
 17153                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17154  00DD  0A7C               	incf	_DimmerLightsIntr,w
 17155  00DE  0086               	movwf	6
 17156  00DF  3001               	movlw	1	; select bank2/3
 17157  00E0  0087               	movwf	7
 17158  00E1  0181               	clrf	1
 17159                           
 17160                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17161  00E2  087C               	movf	_DimmerLightsIntr,w
 17162  00E3  0086               	movwf	6
 17163  00E4  3001               	movlw	1	; select bank2/3
 17164  00E5  0087               	movwf	7
 17165  00E6  1D81               	btfss	1,3
 17166  00E7  291E               	goto	i1l7195
 17167                           
 17168                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17169  00E8  087C               	movf	_DimmerLightsIntr,w
 17170  00E9  0086               	movwf	6
 17171  00EA  3001               	movlw	1	; select bank2/3
 17172  00EB  0087               	movwf	7
 17173  00EC  1A01               	btfsc	1,4
 17174  00ED  2905               	goto	i1l7189
 17175                           
 17176                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-95)*0.8))) {
 17177  00EE  087C               	movf	_DimmerLightsIntr,w
 17178  00EF  3E04               	addlw	4
 17179  00F0  0086               	movwf	6
 17180  00F1  3001               	movlw	1	; select bank2/3
 17181  00F2  0087               	movwf	7
 17182  00F3  3005               	movlw	5
 17183  00F4  0201               	subwf	1,w
 17184  00F5  1C03               	skipc
 17185  00F6  28FF               	goto	i1l7187
 17186                           
 17187                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17188  00F7  087C               	movf	_DimmerLightsIntr,w
 17189  00F8  3E04               	addlw	4
 17190  00F9  0086               	movwf	6
 17191  00FA  3001               	movlw	1	; select bank2/3
 17192  00FB  0087               	movwf	7
 17193  00FC  3001               	movlw	1
 17194  00FD  0281               	subwf	1,f
 17195                           
 17196                           ;Dimmer_B1.c: 128: } else {
 17197  00FE  29C4               	goto	i1l7235
 17198  00FF                     i1l7187:	
 17199                           
 17200                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17201  00FF  087C               	movf	_DimmerLightsIntr,w
 17202  0100  0086               	movwf	6
 17203  0101  3001               	movlw	1	; select bank2/3
 17204  0102  0087               	movwf	7
 17205  0103  1601               	bsf	1,4
 17206                           
 17207                           ;Dimmer_B1.c: 130: }
 17208                           ;Dimmer_B1.c: 131: } else {
 17209  0104  29C4               	goto	i1l7235
 17210  0105                     i1l7189:	
 17211                           
 17212                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17213  0105  087C               	movf	_DimmerLightsIntr,w
 17214  0106  3E04               	addlw	4
 17215  0107  0086               	movwf	6
 17216  0108  3001               	movlw	1	; select bank2/3
 17217  0109  0087               	movwf	7
 17218  010A  303C               	movlw	60
 17219  010B  0201               	subwf	1,w
 17220  010C  1803               	skipnc
 17221  010D  2918               	goto	i1l7193
 17222                           
 17223                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17224  010E  3001               	movlw	1
 17225  010F  00F2               	movwf	??_setDimmerLights_IntrControl
 17226  0110  087C               	movf	_DimmerLightsIntr,w
 17227  0111  3E04               	addlw	4
 17228  0112  0086               	movwf	6
 17229  0113  3001               	movlw	1	; select bank2/3
 17230  0114  0087               	movwf	7
 17231  0115  0872               	movf	??_setDimmerLights_IntrControl,w
 17232  0116  0781               	addwf	1,f
 17233                           
 17234                           ;Dimmer_B1.c: 134: } else {
 17235  0117  29C4               	goto	i1l7235
 17236  0118                     i1l7193:	
 17237                           
 17238                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17239  0118  087C               	movf	_DimmerLightsIntr,w
 17240  0119  0086               	movwf	6
 17241  011A  3001               	movlw	1	; select bank2/3
 17242  011B  0087               	movwf	7
 17243  011C  1201               	bcf	1,4
 17244                           
 17245                           ;Dimmer_B1.c: 136: }
 17246                           ;Dimmer_B1.c: 137: }
 17247                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17248  011D  29C4               	goto	i1l7235
 17249  011E                     i1l7195:	
 17250  011E  087C               	movf	_DimmerLightsIntr,w
 17251  011F  0086               	movwf	6
 17252  0120  3001               	movlw	1	; select bank2/3
 17253  0121  0087               	movwf	7
 17254  0122  1D01               	btfss	1,2
 17255  0123  2965               	goto	i1l7209
 17256                           
 17257                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17258  0124  087C               	movf	_DimmerLightsIntr,w
 17259  0125  3E05               	addlw	5
 17260  0126  0086               	movwf	6
 17261  0127  3001               	movlw	1	; select bank2/3
 17262  0128  0087               	movwf	7
 17263  0129  087C               	movf	_DimmerLightsIntr,w
 17264  012A  3E04               	addlw	4
 17265  012B  0084               	movwf	4
 17266  012C  3001               	movlw	1	; select bank2/3
 17267  012D  0085               	movwf	5
 17268  012E  0800               	movf	0,w
 17269  012F  0201               	subwf	1,w
 17270  0130  1803               	skipnc
 17271  0131  293A               	goto	i1l7201
 17272                           
 17273                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17274  0132  087C               	movf	_DimmerLightsIntr,w
 17275  0133  3E04               	addlw	4
 17276  0134  0086               	movwf	6
 17277  0135  3001               	movlw	1	; select bank2/3
 17278  0136  0087               	movwf	7
 17279  0137  3001               	movlw	1
 17280  0138  0281               	subwf	1,f
 17281                           
 17282                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17283  0139  2951               	goto	i1l7205
 17284  013A                     i1l7201:	
 17285  013A  087C               	movf	_DimmerLightsIntr,w
 17286  013B  3E04               	addlw	4
 17287  013C  0086               	movwf	6
 17288  013D  3001               	movlw	1	; select bank2/3
 17289  013E  0087               	movwf	7
 17290  013F  087C               	movf	_DimmerLightsIntr,w
 17291  0140  3E05               	addlw	5
 17292  0141  0084               	movwf	4
 17293  0142  3001               	movlw	1	; select bank2/3
 17294  0143  0085               	movwf	5
 17295  0144  0800               	movf	0,w
 17296  0145  0201               	subwf	1,w
 17297  0146  1803               	skipnc
 17298  0147  2951               	goto	i1l7205
 17299                           
 17300                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17301  0148  3001               	movlw	1
 17302  0149  00F2               	movwf	??_setDimmerLights_IntrControl
 17303  014A  087C               	movf	_DimmerLightsIntr,w
 17304  014B  3E04               	addlw	4
 17305  014C  0086               	movwf	6
 17306  014D  3001               	movlw	1	; select bank2/3
 17307  014E  0087               	movwf	7
 17308  014F  0872               	movf	??_setDimmerLights_IntrControl,w
 17309  0150  0781               	addwf	1,f
 17310  0151                     i1l7205:	
 17311                           
 17312                           ;Dimmer_B1.c: 143: }
 17313                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17314  0151  087C               	movf	_DimmerLightsIntr,w
 17315  0152  3E05               	addlw	5
 17316  0153  0086               	movwf	6
 17317  0154  3001               	movlw	1	; select bank2/3
 17318  0155  0087               	movwf	7
 17319  0156  087C               	movf	_DimmerLightsIntr,w
 17320  0157  3E04               	addlw	4
 17321  0158  0084               	movwf	4
 17322  0159  3001               	movlw	1	; select bank2/3
 17323  015A  0085               	movwf	5
 17324  015B  0800               	movf	0,w
 17325  015C  0601               	xorwf	1,w
 17326  015D  1D03               	skipz
 17327  015E  29C4               	goto	i1l7235
 17328                           
 17329                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17330  015F  087C               	movf	_DimmerLightsIntr,w
 17331  0160  0086               	movwf	6
 17332  0161  3001               	movlw	1	; select bank2/3
 17333  0162  0087               	movwf	7
 17334  0163  1101               	bcf	1,2
 17335  0164  2980               	goto	i1l7215
 17336  0165                     i1l7209:	
 17337                           ;Dimmer_B1.c: 147: }
 17338                           ;Dimmer_B1.c: 148: } else {
 17339                           
 17340                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17341                           
 17342                           
 17343                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17344  0165  087C               	movf	_DimmerLightsIntr,w
 17345  0166  0086               	movwf	6
 17346  0167  3001               	movlw	1	; select bank2/3
 17347  0168  0087               	movwf	7
 17348  0169  1E81               	btfss	1,5
 17349  016A  2986               	goto	i1l7217
 17350                           
 17351                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17352  016B  087C               	movf	_DimmerLightsIntr,w
 17353  016C  3E04               	addlw	4
 17354  016D  0086               	movwf	6
 17355  016E  3001               	movlw	1	; select bank2/3
 17356  016F  0087               	movwf	7
 17357  0170  3001               	movlw	1
 17358  0171  0281               	subwf	1,f
 17359                           
 17360                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17361  0172  087C               	movf	_DimmerLightsIntr,w
 17362  0173  3E05               	addlw	5
 17363  0174  0086               	movwf	6
 17364  0175  3001               	movlw	1	; select bank2/3
 17365  0176  0087               	movwf	7
 17366  0177  087C               	movf	_DimmerLightsIntr,w
 17367  0178  3E04               	addlw	4
 17368  0179  0084               	movwf	4
 17369  017A  3001               	movlw	1	; select bank2/3
 17370  017B  0085               	movwf	5
 17371  017C  0800               	movf	0,w
 17372  017D  0201               	subwf	1,w
 17373  017E  1C03               	skipc
 17374  017F  29C4               	goto	i1l7235
 17375  0180                     i1l7215:	
 17376                           
 17377                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17378  0180  087C               	movf	_DimmerLightsIntr,w
 17379  0181  0086               	movwf	6
 17380  0182  3001               	movlw	1	; select bank2/3
 17381  0183  0087               	movwf	7
 17382  0184  1081               	bcf	1,1
 17383                           
 17384                           ;Dimmer_B1.c: 153: }
 17385                           ;Dimmer_B1.c: 154: } else {
 17386  0185  29C4               	goto	i1l7235
 17387  0186                     i1l7217:	
 17388                           
 17389                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17390  0186  3001               	movlw	1
 17391  0187  00F2               	movwf	??_setDimmerLights_IntrControl
 17392  0188  087C               	movf	_DimmerLightsIntr,w
 17393  0189  3E04               	addlw	4
 17394  018A  0086               	movwf	6
 17395  018B  3001               	movlw	1	; select bank2/3
 17396  018C  0087               	movwf	7
 17397  018D  0872               	movf	??_setDimmerLights_IntrControl,w
 17398  018E  0781               	addwf	1,f
 17399                           
 17400                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17401  018F  087C               	movf	_DimmerLightsIntr,w
 17402  0190  3E04               	addlw	4
 17403  0191  0086               	movwf	6
 17404  0192  3001               	movlw	1	; select bank2/3
 17405  0193  0087               	movwf	7
 17406  0194  087C               	movf	_DimmerLightsIntr,w
 17407  0195  3E06               	addlw	6
 17408  0196  0084               	movwf	4
 17409  0197  3001               	movlw	1	; select bank2/3
 17410  0198  0085               	movwf	5
 17411  0199  0800               	movf	0,w
 17412  019A  0201               	subwf	1,w
 17413  019B  1C03               	skipc
 17414  019C  29C4               	goto	i1l7235
 17415                           
 17416                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17417  019D  087C               	movf	_DimmerLightsIntr,w
 17418  019E  0086               	movwf	6
 17419  019F  3001               	movlw	1	; select bank2/3
 17420  01A0  0087               	movwf	7
 17421  01A1  1081               	bcf	1,1
 17422                           
 17423                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17424  01A2  087C               	movf	_DimmerLightsIntr,w
 17425  01A3  0086               	movwf	6
 17426  01A4  3001               	movlw	1	; select bank2/3
 17427  01A5  0087               	movwf	7
 17428  01A6  1301               	bcf	1,6
 17429                           
 17430                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17431  01A7  087C               	movf	_DimmerLightsIntr,w
 17432  01A8  3E09               	addlw	9
 17433  01A9  0086               	movwf	6
 17434  01AA  3001               	movlw	1	; select bank2/3
 17435  01AB  0087               	movwf	7
 17436  01AC  1501               	bsf	1,2
 17437                           
 17438                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17439  01AD  0021               	movlb	1	; select bank1
 17440  01AE  0848               	movf	_Dimmer^(0+128),w
 17441  01AF  0086               	movwf	6
 17442  01B0  0187               	clrf	7
 17443  01B1  1401               	bsf	1,0
 17444                           
 17445                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17446  01B2  0876               	movf	setDimmerLights_IntrControl@lights,w
 17447  01B3  3A01               	xorlw	1
 17448  01B4  1D03               	skipz
 17449  01B5  29B8               	goto	i1l7227
 17450                           
 17451                           ;Dimmer_B1.c: 163: RC7 = 0;
 17452  01B6  0020               	movlb	0	; select bank0
 17453  01B7  138E               	bcf	14,7	;volatile
 17454  01B8                     i1l7227:	
 17455                           
 17456                           ;Dimmer_B1.c: 165: }
 17457                           ;Dimmer_B1.c: 168: if (lights == 2) {
 17458  01B8  0876               	movf	setDimmerLights_IntrControl@lights,w
 17459  01B9  3A02               	xorlw	2
 17460  01BA  1D03               	skipz
 17461  01BB  29BE               	goto	i1l7231
 17462                           
 17463                           ;Dimmer_B1.c: 169: RA3 = 0;
 17464  01BC  0020               	movlb	0	; select bank0
 17465  01BD  118C               	bcf	12,3	;volatile
 17466  01BE                     i1l7231:	
 17467                           
 17468                           ;Dimmer_B1.c: 170: }
 17469                           ;Dimmer_B1.c: 173: if (lights == 3) {
 17470  01BE  0876               	movf	setDimmerLights_IntrControl@lights,w
 17471  01BF  3A03               	xorlw	3
 17472  01C0  1D03               	skipz
 17473  01C1  29C4               	goto	i1l7235
 17474                           
 17475                           ;Dimmer_B1.c: 174: RC6 = 0;
 17476  01C2  0020               	movlb	0	; select bank0
 17477  01C3  130E               	bcf	14,6	;volatile
 17478  01C4                     i1l7235:	
 17479                           ;Dimmer_B1.c: 175: }
 17480                           ;Dimmer_B1.c: 177: ;;
 17481                           
 17482                           
 17483                           ;Dimmer_B1.c: 178: }
 17484                           ;Dimmer_B1.c: 179: }
 17485                           ;Dimmer_B1.c: 180: }
 17486                           ;Dimmer_B1.c: 181: }
 17487                           ;Dimmer_B1.c: 182: }
 17488                           ;Dimmer_B1.c: 183: }
 17489                           ;Dimmer_B1.c: 184: }
 17490                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17491  01C4  087C               	movf	_DimmerLightsIntr,w
 17492  01C5  3E08               	addlw	8
 17493  01C6  0086               	movwf	6
 17494  01C7  3001               	movlw	1	; select bank2/3
 17495  01C8  0087               	movwf	7
 17496  01C9  1E81               	btfss	1,5
 17497  01CA  29FB               	goto	i1l7257
 17498                           
 17499                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17500  01CB  3001               	movlw	1
 17501  01CC  00F2               	movwf	??_setDimmerLights_IntrControl
 17502  01CD  087C               	movf	_DimmerLightsIntr,w
 17503  01CE  3E07               	addlw	7
 17504  01CF  0086               	movwf	6
 17505  01D0  3001               	movlw	1	; select bank2/3
 17506  01D1  0087               	movwf	7
 17507  01D2  0872               	movf	??_setDimmerLights_IntrControl,w
 17508  01D3  0781               	addwf	1,f
 17509                           
 17510                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17511  01D4  087C               	movf	_DimmerLightsIntr,w
 17512  01D5  3E07               	addlw	7
 17513  01D6  0086               	movwf	6
 17514  01D7  3001               	movlw	1	; select bank2/3
 17515  01D8  0087               	movwf	7
 17516  01D9  3005               	movlw	5
 17517  01DA  0201               	subwf	1,w
 17518  01DB  1C03               	skipc
 17519  01DC  29FB               	goto	i1l7257
 17520                           
 17521                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17522  01DD  087C               	movf	_DimmerLightsIntr,w
 17523  01DE  3E07               	addlw	7
 17524  01DF  0086               	movwf	6
 17525  01E0  3001               	movlw	1	; select bank2/3
 17526  01E1  0087               	movwf	7
 17527  01E2  0181               	clrf	1
 17528                           
 17529                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17530  01E3  087C               	movf	_DimmerLightsIntr,w
 17531  01E4  3E08               	addlw	8
 17532  01E5  0086               	movwf	6
 17533  01E6  3001               	movlw	1	; select bank2/3
 17534  01E7  0087               	movwf	7
 17535  01E8  1281               	bcf	1,5
 17536                           
 17537                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17538  01E9  0876               	movf	setDimmerLights_IntrControl@lights,w
 17539  01EA  3A01               	xorlw	1
 17540  01EB  1D03               	skipz
 17541  01EC  29EF               	goto	i1l7249
 17542                           
 17543                           ;Dimmer_B1.c: 193: RB4 = 0;
 17544  01ED  0020               	movlb	0	; select bank0
 17545  01EE  120D               	bcf	13,4	;volatile
 17546  01EF                     i1l7249:	
 17547                           ;Dimmer_B1.c: 194: ;;
 17548                           
 17549                           
 17550                           ;Dimmer_B1.c: 195: }
 17551                           ;Dimmer_B1.c: 198: if (lights == 2) {
 17552  01EF  0876               	movf	setDimmerLights_IntrControl@lights,w
 17553  01F0  3A02               	xorlw	2
 17554  01F1  1D03               	skipz
 17555  01F2  29F5               	goto	i1l7253
 17556                           
 17557                           ;Dimmer_B1.c: 199: RA7 = 0;
 17558  01F3  0020               	movlb	0	; select bank0
 17559  01F4  138C               	bcf	12,7	;volatile
 17560  01F5                     i1l7253:	
 17561                           
 17562                           ;Dimmer_B1.c: 200: }
 17563                           ;Dimmer_B1.c: 203: if (lights == 3) {
 17564  01F5  0876               	movf	setDimmerLights_IntrControl@lights,w
 17565  01F6  3A03               	xorlw	3
 17566  01F7  1D03               	skipz
 17567  01F8  29FB               	goto	i1l7257
 17568                           
 17569                           ;Dimmer_B1.c: 204: RB1 = 0;
 17570  01F9  0020               	movlb	0	; select bank0
 17571  01FA  108D               	bcf	13,1	;volatile
 17572  01FB                     i1l7257:	
 17573                           
 17574                           ;Dimmer_B1.c: 205: }
 17575                           ;Dimmer_B1.c: 207: }
 17576                           ;Dimmer_B1.c: 208: }
 17577                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17578  01FB  087C               	movf	_DimmerLightsIntr,w
 17579  01FC  3E09               	addlw	9
 17580  01FD  0086               	movwf	6
 17581  01FE  3001               	movlw	1	; select bank2/3
 17582  01FF  0087               	movwf	7
 17583  0200  1E81               	btfss	1,5
 17584  0201  0008               	return
 17585                           
 17586                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17587  0202  3001               	movlw	1
 17588  0203  00F2               	movwf	??_setDimmerLights_IntrControl
 17589  0204  087C               	movf	_DimmerLightsIntr,w
 17590  0205  3E0A               	addlw	10
 17591  0206  0086               	movwf	6
 17592  0207  3001               	movlw	1	; select bank2/3
 17593  0208  0087               	movwf	7
 17594  0209  0872               	movf	??_setDimmerLights_IntrControl,w
 17595  020A  0781               	addwf	1,f
 17596                           
 17597                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17598  020B  087C               	movf	_DimmerLightsIntr,w
 17599  020C  3E0A               	addlw	10
 17600  020D  0086               	movwf	6
 17601  020E  3001               	movlw	1	; select bank2/3
 17602  020F  0087               	movwf	7
 17603  0210  0801               	movf	1,w
 17604  0211  3A46               	xorlw	70
 17605  0212  1D03               	skipz
 17606  0213  0008               	return
 17607                           
 17608                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17609  0214  087C               	movf	_DimmerLightsIntr,w
 17610  0215  3E0A               	addlw	10
 17611  0216  0086               	movwf	6
 17612  0217  3001               	movlw	1	; select bank2/3
 17613  0218  0087               	movwf	7
 17614  0219  0181               	clrf	1
 17615                           
 17616                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17617  021A  087C               	movf	_DimmerLightsIntr,w
 17618  021B  3E09               	addlw	9
 17619  021C  0086               	movwf	6
 17620  021D  3001               	movlw	1	; select bank2/3
 17621  021E  0087               	movwf	7
 17622  021F  1281               	bcf	1,5
 17623  0220  0008               	return
 17624  0221                     __end_of_setDimmerLights_IntrControl:	
 17625                           
 17626                           	psect	text119
 17627  1F21                     __ptext119:	
 17628 ;; *************** function _DimmerIntrPointSelect *****************
 17629 ;; Defined at:
 17630 ;;		line 65 in file "../src/Dimmer_B1.c"
 17631 ;; Parameters:    Size  Location     Type
 17632 ;;  lights          1    wreg     unsigned char 
 17633 ;; Auto vars:     Size  Location     Type
 17634 ;;  lights          1    1[COMMON] unsigned char 
 17635 ;; Return value:  Size  Location     Type
 17636 ;;		None               void
 17637 ;; Registers used:
 17638 ;;		wreg
 17639 ;; Tracked objects:
 17640 ;;		On entry : 0/0
 17641 ;;		On exit  : 0/0
 17642 ;;		Unchanged: 0/0
 17643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17648 ;;Total ram usage:        2 bytes
 17649 ;; Hardware stack levels used:    1
 17650 ;; This function calls:
 17651 ;;		Nothing
 17652 ;; This function is called by:
 17653 ;;		_setDimmerLights_IntrControl
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           
 17658                           ;psect for function _DimmerIntrPointSelect
 17659  1F21                     _DimmerIntrPointSelect:	
 17660                           
 17661                           ;incstack = 0
 17662                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17663                           ;DimmerIntrPointSelect@lights stored from wreg
 17664  1F21  00F1               	movwf	DimmerIntrPointSelect@lights
 17665                           
 17666                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17667  1F22  0871               	movf	DimmerIntrPointSelect@lights,w
 17668  1F23  3A01               	xorlw	1
 17669  1F24  1D03               	skipz
 17670  1F25  2F2A               	goto	i1l816
 17671                           
 17672                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17673  1F26  303D               	movlw	_DimmerLights1& (0+255)
 17674  1F27  00F0               	movwf	??_DimmerIntrPointSelect
 17675  1F28  0870               	movf	??_DimmerIntrPointSelect,w
 17676  1F29  00FC               	movwf	_DimmerLightsIntr
 17677  1F2A                     i1l816:	
 17678                           
 17679                           ;Dimmer_B1.c: 69: }
 17680                           ;Dimmer_B1.c: 72: if (lights == 2) {
 17681  1F2A  0871               	movf	DimmerIntrPointSelect@lights,w
 17682  1F2B  3A02               	xorlw	2
 17683  1F2C  1D03               	skipz
 17684  1F2D  2F32               	goto	i1l817
 17685                           
 17686                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 17687  1F2E  30C5               	movlw	_DimmerLights2& (0+255)
 17688  1F2F  00F0               	movwf	??_DimmerIntrPointSelect
 17689  1F30  0870               	movf	??_DimmerIntrPointSelect,w
 17690  1F31  00FC               	movwf	_DimmerLightsIntr
 17691  1F32                     i1l817:	
 17692                           
 17693                           ;Dimmer_B1.c: 74: }
 17694                           ;Dimmer_B1.c: 78: if (lights == 3) {
 17695  1F32  0871               	movf	DimmerIntrPointSelect@lights,w
 17696  1F33  3A03               	xorlw	3
 17697  1F34  1D03               	skipz
 17698  1F35  0008               	return
 17699                           
 17700                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights3;
 17701  1F36  30D4               	movlw	_DimmerLights3& (0+255)
 17702  1F37  00F0               	movwf	??_DimmerIntrPointSelect
 17703  1F38  0870               	movf	??_DimmerIntrPointSelect,w
 17704  1F39  00FC               	movwf	_DimmerLightsIntr
 17705  1F3A  0008               	return
 17706  1F3B                     __end_of_DimmerIntrPointSelect:	
 17707                           
 17708                           	psect	text120
 17709  1D5E                     __ptext120:	
 17710 ;; *************** function _IOC_ISR *****************
 17711 ;; Defined at:
 17712 ;;		line 291 in file "../src/MCU_B1.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;		None
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;		None
 17717 ;; Return value:  Size  Location     Type
 17718 ;;		None               void
 17719 ;; Registers used:
 17720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/0
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;Total ram usage:        0 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:    3
 17733 ;; This function calls:
 17734 ;;		_setDimmerReClock
 17735 ;; This function is called by:
 17736 ;;		_ISR
 17737 ;; This function uses a non-reentrant model
 17738 ;;
 17739                           
 17740                           
 17741                           ;psect for function _IOC_ISR
 17742  1D5E                     _IOC_ISR:	
 17743                           
 17744                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 17745                           
 17746                           ;incstack = 0
 17747                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17748  1D5E  1D8B               	btfss	11,3	;volatile
 17749  1D5F  0008               	return
 17750  1D60  0027               	movlb	7	; select bank7
 17751  1D61  1D16               	btfss	22,2	;volatile
 17752  1D62  0008               	return
 17753                           
 17754                           ;MCU_B1.c: 293: IOCBF2 = 0;
 17755  1D63  1116               	bcf	22,2	;volatile
 17756                           
 17757                           ;MCU_B1.c: 294: IOCIF = 0;
 17758  1D64  100B               	bcf	11,0	;volatile
 17759                           
 17760                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 17761  1D65  0021               	movlb	1	; select bank1
 17762  1D66  1C20               	btfss	_myMain^(0+128),0
 17763  1D67  0008               	return
 17764                           
 17765                           ;MCU_B1.c: 297: setDimmerReClock();
 17766  1D68  319D  2516         	fcall	_setDimmerReClock
 17767  1D6A  0008               	return
 17768  1D6B                     __end_of_IOC_ISR:	
 17769                           
 17770                           	psect	text121
 17771  1D16                     __ptext121:	
 17772 ;; *************** function _setDimmerReClock *****************
 17773 ;; Defined at:
 17774 ;;		line 169 in file "../src/MCU_B1.c"
 17775 ;; Parameters:    Size  Location     Type
 17776 ;;		None
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;		None
 17779 ;; Return value:  Size  Location     Type
 17780 ;;		None               void
 17781 ;; Registers used:
 17782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17783 ;; Tracked objects:
 17784 ;;		On entry : 0/0
 17785 ;;		On exit  : 0/0
 17786 ;;		Unchanged: 0/0
 17787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;Total ram usage:        0 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    2
 17795 ;; This function calls:
 17796 ;;		_setDimmerLights_IntrIOC_GO
 17797 ;; This function is called by:
 17798 ;;		_IOC_ISR
 17799 ;; This function uses a non-reentrant model
 17800 ;;
 17801                           
 17802                           
 17803                           ;psect for function _setDimmerReClock
 17804  1D16                     _setDimmerReClock:	
 17805                           
 17806                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 17807                           
 17808                           ;incstack = 0
 17809                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17810  1D16  3001               	movlw	1
 17811  1D17  319F  27E1  319D   	fcall	_setDimmerLights_IntrIOC_GO
 17812                           
 17813                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 17814  1D1A  3002               	movlw	2
 17815  1D1B  319F  27E1  319D   	fcall	_setDimmerLights_IntrIOC_GO
 17816                           
 17817                           ;MCU_B1.c: 182: setDimmerLights_IntrIOC_GO(3);
 17818  1D1E  3003               	movlw	3
 17819  1D1F  319F  27E1         	fcall	_setDimmerLights_IntrIOC_GO
 17820  1D21  0008               	return
 17821  1D22                     __end_of_setDimmerReClock:	
 17822                           
 17823                           	psect	text122
 17824  1FE1                     __ptext122:	
 17825 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17826 ;; Defined at:
 17827 ;;		line 28 in file "../src/Dimmer_B1.c"
 17828 ;; Parameters:    Size  Location     Type
 17829 ;;  lights          1    wreg     unsigned char 
 17830 ;; Auto vars:     Size  Location     Type
 17831 ;;  lights          1    2[COMMON] unsigned char 
 17832 ;; Return value:  Size  Location     Type
 17833 ;;		None               void
 17834 ;; Registers used:
 17835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17836 ;; Tracked objects:
 17837 ;;		On entry : 0/0
 17838 ;;		On exit  : 0/0
 17839 ;;		Unchanged: 0/0
 17840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17845 ;;Total ram usage:        1 bytes
 17846 ;; Hardware stack levels used:    1
 17847 ;; Hardware stack levels required when called:    1
 17848 ;; This function calls:
 17849 ;;		_DimmerIntrIOCPointSelect
 17850 ;; This function is called by:
 17851 ;;		_setDimmerReClock
 17852 ;; This function uses a non-reentrant model
 17853 ;;
 17854                           
 17855                           
 17856                           ;psect for function _setDimmerLights_IntrIOC_GO
 17857  1FE1                     _setDimmerLights_IntrIOC_GO:	
 17858                           
 17859                           ;incstack = 0
 17860                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17861                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17862  1FE1  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17863                           
 17864                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17865  1FE2  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17866  1FE3  319F  278A  319F   	fcall	_DimmerIntrIOCPointSelect
 17867                           
 17868                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17869  1FE6  0021               	movlb	1	; select bank1
 17870  1FE7  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17871  1FE8  0086               	movwf	6
 17872  1FE9  3001               	movlw	1	; select bank2/3
 17873  1FEA  0087               	movwf	7
 17874  1FEB  1801               	btfsc	1,0
 17875  1FEC  0008               	return
 17876  1FED  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17877  1FEE  3E09               	addlw	9
 17878  1FEF  0086               	movwf	6
 17879  1FF0  3001               	movlw	1	; select bank2/3
 17880  1FF1  0087               	movwf	7
 17881  1FF2  1A81               	btfsc	1,5
 17882  1FF3  0008               	return
 17883                           
 17884                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17885  1FF4  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17886  1FF5  0086               	movwf	6
 17887  1FF6  3001               	movlw	1	; select bank2/3
 17888  1FF7  0087               	movwf	7
 17889  1FF8  1401               	bsf	1,0
 17890                           
 17891                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17892  1FF9  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17893  1FFA  3E09               	addlw	9
 17894  1FFB  0086               	movwf	6
 17895  1FFC  3001               	movlw	1	; select bank2/3
 17896  1FFD  0087               	movwf	7
 17897  1FFE  1681               	bsf	1,5
 17898  1FFF  0008               	return
 17899  2000                     __end_of_setDimmerLights_IntrIOC_GO:	
 17900                           
 17901                           	psect	text123
 17902  1F8A                     __ptext123:	
 17903 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17904 ;; Defined at:
 17905 ;;		line 8 in file "../src/Dimmer_B1.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  lights          1    wreg     unsigned char 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;  lights          1    1[COMMON] unsigned char 
 17910 ;; Return value:  Size  Location     Type
 17911 ;;		None               void
 17912 ;; Registers used:
 17913 ;;		wreg
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;Total ram usage:        2 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; This function calls:
 17926 ;;		Nothing
 17927 ;; This function is called by:
 17928 ;;		_setDimmerLights_IntrIOC_GO
 17929 ;; This function uses a non-reentrant model
 17930 ;;
 17931                           
 17932                           
 17933                           ;psect for function _DimmerIntrIOCPointSelect
 17934  1F8A                     _DimmerIntrIOCPointSelect:	
 17935                           
 17936                           ;incstack = 0
 17937                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17938                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17939  1F8A  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17940                           
 17941                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17942  1F8B  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17943  1F8C  3A01               	xorlw	1
 17944  1F8D  1D03               	skipz
 17945  1F8E  2F94               	goto	i1l806
 17946                           
 17947                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17948  1F8F  303D               	movlw	_DimmerLights1& (0+255)
 17949  1F90  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17950  1F91  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17951  1F92  0021               	movlb	1	; select bank1
 17952  1F93  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17953  1F94                     i1l806:	
 17954                           
 17955                           ;Dimmer_B1.c: 12: }
 17956                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17957  1F94  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17958  1F95  3A02               	xorlw	2
 17959  1F96  1D03               	skipz
 17960  1F97  2F9D               	goto	i1l807
 17961                           
 17962                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17963  1F98  30C5               	movlw	_DimmerLights2& (0+255)
 17964  1F99  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17965  1F9A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17966  1F9B  0021               	movlb	1	; select bank1
 17967  1F9C  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17968  1F9D                     i1l807:	
 17969                           
 17970                           ;Dimmer_B1.c: 17: }
 17971                           ;Dimmer_B1.c: 21: if (lights == 3) {
 17972  1F9D  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17973  1F9E  3A03               	xorlw	3
 17974  1F9F  1D03               	skipz
 17975  1FA0  0008               	return
 17976                           
 17977                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 17978  1FA1  30D4               	movlw	_DimmerLights3& (0+255)
 17979  1FA2  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17980  1FA3  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17981  1FA4  0021               	movlb	1	; select bank1
 17982  1FA5  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17983  1FA6  0008               	return
 17984  1FA7                     __end_of_DimmerIntrIOCPointSelect:	
 17985  007E                     btemp	set	126	;btemp
 17986  007E                     pic14e$flags	set	126
 17987  007E                     wtemp	set	126
 17988  007E                     wtemp0	set	126
 17989  0080                     wtemp1	set	128
 17990  0082                     wtemp2	set	130
 17991  0084                     wtemp3	set	132
 17992  0086                     wtemp4	set	134
 17993  0088                     wtemp5	set	136
 17994  007F                     wtemp6	set	127
 17995  007E                     ttemp	set	126
 17996  007E                     ttemp0	set	126
 17997  0081                     ttemp1	set	129
 17998  0084                     ttemp2	set	132
 17999  0087                     ttemp3	set	135
 18000  007F                     ttemp4	set	127
 18001  007E                     ltemp	set	126
 18002  007E                     ltemp0	set	126
 18003  0082                     ltemp1	set	130
 18004  0086                     ltemp2	set	134
 18005  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         247
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     79      80
    BANK1            80      0      77
    BANK2            80      0      80
    BANK3            80      0      76
    BANK4            80      0      41
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK4[9]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK2[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw3(BANK2[5]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   87025
                                             75 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1463
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     130
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6930
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    6930
                                             17 BANK0      1     1      0
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    6930
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     132
                                              1 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4202
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     368
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2406
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20782
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   20782
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0    9160
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8765
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1328
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1067
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1067
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27772
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   27772
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   27096
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25809
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10310
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1136
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11201
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11135
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1222
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1222
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9954
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0    9840
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6377
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1677
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1036
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      88
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      88
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9642
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9642
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     558
                                              1 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     622
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     430
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     430
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      88
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      88
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     286
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      29      13       51.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     170      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     170      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 21 16:58:57 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1187  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0078       __end_of_getDimmerLights_StatusFlag 1E9C  
             _getDimmerLights_StatusFlag 1E88                   __end_of_setDelayOff_GO 0A23  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0EE2  
                           ___ftadd@sign 0048                                      l110 17D8  
                                    l120 160E                                      l112 17EC  
                                    l121 160A                                      l122 15F8  
                                    l124 1608                                      l402 11D4  
                                    l308 0CFB                                      l309 0D4B  
                                    l283 0930                                      l358 1F14  
                                    l359 1F16                                      l918 178C  
                                    l863 1F79                                      l864 1F81  
                                    _GIE 005F                                      _CRC 00C7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0021                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00C3  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC6 0076  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _Sw1 014C  
                                    _Sw2 01E3                                      _Sw3 0240  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1F21  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1C9A  
                        __end_of_ADC_Set 1CDB                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0D51                    _setDimmerLights_ERROR 16AE  
                  _setDimmerLights_AdjRF 1187                    _setDimmerLights_AdjGo 1E22  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1D6B  
                           ___ftdiv@sign 003D                                     l2301 1380  
                                   l1430 134A                                     l1417 10BF  
               ?_DimmerLightsPointSelect 0070                                     l2323 10CC  
                                   l1611 1581                                     l2324 10D6  
                                   l2260 0A41                                     l1439 14EF  
                                   l3065 08DD                                     l2265 0A68  
                                   l2338 13DE                                     l3059 08C6  
                                   l2283 1DBA                                     l2267 0A79  
                        __end_of_IOC_Set 0800                                     l3088 0410  
                                   l6031 1709                                     l6015 1FCF  
                                   l2729 0253                                     l6019 1FD8  
                                   l7003 098A                                     l2755 0E8F  
                                   l6037 1714                                     l6063 174B  
                                   l6055 173A                                     l6047 171C  
                                   l6119 0AEA                                     l6049 1728  
                                   l6321 107C                                     l2697 1DC5  
                                   l7033 0B47                                     l6059 1743  
                                   l2779 098F                                     l7053 149D  
                                   l8101 0BA9                                     l6413 0FC8  
                                   l7063 14AD                                     l7047 1494  
                                   l6319 1076                                     l5711 0399  
                                   l6271 1390                                     l6191 0A08  
                                   l7057 14A4                                     l7049 1497  
                                   l5801 07B8                                     l6337 1E95  
                                   l8113 0BC8                                     l8121 0BD4  
                                   l5721 03AF                                     l6185 09F5  
                                   l6409 0FB2                                     l6451 1F4D  
                                   l7059 14A7                                     l8051 1301  
                                   l5715 03A0                                     l6195 0A14  
                                   l6445 1F44                                     l5901 0E3E  
                                   l8117 0BCE                                     l8109 0BC2  
                                   l8301 0EF7                                     l6461 11B4  
                                   l6701 0D0D                                     l5741 03E6  
                                   l5733 03C9                                     l6437 13CC  
                                   l6189 09FB                                     l8221 0726  
                                   l8213 0714                                     l6447 1F47  
                                   l5671 08AD                                     l5903 0E41  
                                   l8055 130C                                     l8071 0B7B  
                                   l8303 0EFA                                     l6463 11B7  
                                   l6703 0D26                                     l6623 0905  
                                   l5751 0402                                     l5743 03EB  
                                   l5823 05FE                                     l8207 06F9  
                                   l7431 10EF                                     l5681 08D3  
                                   l5673 08B2                                     l5665 089C  
                                   l5809 07D1                                     l8313 0F08  
                                   l6721 0D4D                                     l6641 0936  
                                   l6617 08FC                                     l5761 0434  
                                   l5753 040C                                     l5745 03EF  
                                   l5841 064F                                     l8233 0741  
                                   l8225 072F                                     l8217 071D  
                                   l8241 144F                                     l6731 11E5  
                                   l5907 0E4F                                     l8059 1317  
                                   l8075 0B81                                     l8083 0B8D  
                                   l8315 0F0B                                     l6467 11BD  
                                   l6651 0946                                     l6643 0939  
                                   l6619 08FF                                     l5771 044F  
                                   l5739 03DC                                     l7435 10F4  
                                   l6733 11F0                                     l6741 1170  
                                   l5669 08A3                                     l5781 0761  
                                   l8093 0B9D                                     l8149 0DA5  
                                   l8325 0F19                                     l6821 1332  
                                   l7453 14CF                                     l6637 0917  
                                   l5757 0422                                     l5853 066B  
                                   l5845 0657                                     l5829 0614  
                                   l5933 1E7F                                     l8229 0738  
                                   l7613 0247                                     l8181 177B  
                                   l8245 145B                                     l7429 10EC  
                                   l5951 1FBB                                     l5679 08CB  
                                   l8079 0B87                                     l8335 0F3C  
                                   l8327 0F1E                                     l7447 14BA  
                                   l6655 094C                                     l6647 093F  
                                   l6399 0F8E                                     l8183 1780  
                                   l8175 1768                                     l6745 1176  
                                   l5873 0DEA                                     l8097 0BA3  
                                   l8089 0B97                                     l8337 0F42  
                                   l7801 04D9                                     l6673 0CDF  
                                   l6649 0943                                     l5857 0673  
                                   l5929 1E79                                     l8257 1591  
                                   l6921 0E6B                                     l7609 023A  
                                   l8417 0C21                                     l6739 116D  
                                   l5947 1FB2                                     l5699 114D  
                                   l5787 0777                                     l5891 0E1A  
                                   l8347 0F6A                                     l6667 0CD6  
                                   l6675 0CE2                                     l6931 0E79  
                                   l8427 0C38                                     l5893 0E28  
                                   l8373 16A0                                     l6685 0CF8  
                                   l6669 0CD9                                     l8269 15A7  
                                   l6933 0E7C                                     l7653 02EC  
                                   l7629 0281                                     l8429 0C3A  
                                   l6775 1409                                     l6687 0CF2  
                                   l5967 1270                                     l6943 0E8A  
                                   l6919 0E68                                     l7639 02AE  
                                   l7663 031E                                     l8535 1636  
                                   l8377 16A7                                     l8369 1699  
                                   l8449 0A35                                     l7593 1DCA  
                                   l5899 0E35                                     l6963 0ED0  
                                   l8395 0BF4                                     l8539 163D  
                                   l8469 0A51                                     l7597 1DD0  
                                   l6981 096B                    _myMain_Initialization 1DD3  
                                   l6991 0979                                     l6993 097C  
                                   l7699 15E2                                     l6979 0968  
                                   l7867 0829                                     l7891 156A  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4015 08E4  
                                   u4135 03CA                                     u4305 0799  
                                   u4225 0403                                     u4315 07B9  
                                   u4325 07C8                                     u4165 03DD  
                                   u4405 0658                                     u4335 07D2  
                                   u4415 065E                                     u4515 0E1B  
                                   u4195 03F0                                     _PEIE 005E  
                                   u4445 0674                                     u4295 0789  
                                   u4455 067A                                     u4375 0620  
                                   u5185 1EBF                                     u4545 0E36  
                                   u4385 0630                                     u4805 171F  
                                   u4485 0DF1                                     u4910 0A98  
                                   u4825 1729                                     u3945 08A8  
                                   u4665 125C                                     u4835 1733  
                                   u4915 0A96                                     u4845 173B  
                                   u3965 08C1                                     u5745 11DA  
                                   u3985 08CE                                     u7435 15D8  
                                   u7615 10B6                                     u7635 0820  
                                   u7645 082F                                     u7665 154E  
                                   u7675 1579                                     _LWLO 0CAD  
                                   _RFSW 00CD                                     _TMR0 0015  
                                   _RSSI 00CE                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 1615  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0CD2  
                        __end_of_RF_Main 1CA3                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1D16                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 13F3  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1E22            __end_of_DimmerIntrPointSelect 1F3B  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                                  ?_main 006B                          __end_of___awdiv 1752  
                        __end_of___ftadd 0467                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 07F3                          __end_of___ftmul 069B  
                        ___awdiv@divisor 0020                          __end_of___fttol 0E58  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l806 1F94                                    i1l807 1F9D  
                                  i1l816 1F2A                                    i1l817 1F32  
                 _setDimmerLights_Switch 1DE2                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EA  
                                  _RFSW2 00EB                                    _RFSW3 00EC  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1EC5                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D5       __end_of_setDimmerLights_IntrIOC_GO 2000  
             _setDimmerLights_IntrIOC_GO 1FE1                         __end_of_TMR0_ISR 129D  
           __size_of_CC2500_WriteCommand 001A                         __end_of_TMR0_Set 1CEA  
                                  _getAD 10E1                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 17A7            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 1583              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012            __end_of_setLED_Initialization 1E76  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                   _Sw_DimmerOnFunc$5423 0063                     _Sw_DimmerOnFunc$5424 0064  
                   _Sw_DimmerOnFunc$5425 0065                       _setRF_DimmerLights 0A8E  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0022  
       __size_of_DelayOff_Initialization 000C                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0838  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1660  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1CBC  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0DD1                     _setSw_Initialization 1CEA  
                setOverTemp_Exceptions@i 002F                                   ??_main 006F  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 069B                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 001D                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1F8A  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0024                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0C58  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                         __end_of___awtoft 1164  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 08F4  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1DF2  
                                 i1l7201 013A                                   i1l7205 0151  
                                 i1l7231 01BE                                   i1l7215 0180  
                                 i1l7217 0186                                   i1l7209 0165  
                                 i1l7161 00A8                                   i1l7227 01B8  
                                 i1l7235 01C4                                   i1l7253 01F5  
                                 i1l7165 00AE                                   i1l7249 01EF  
                                 i1l7257 01FB                                   i1l7193 0118  
                                 i1l7169 00B5                                   i1l7187 00FF  
                                 i1l7195 011E                                   i1l7189 0105  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u638_25 0083  
                                 u754_25 1296                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1EF0  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1CCD  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1EDA  
                                 _Dimmer 00C8                                   _DlySw1 0155  
                                 _DlySw2 015A                                   _DlySw3 015F  
             __end_of_Mcu_Initialization 1DB5                      __end_of_Buzzer_Main 1615  
                                 _Memory 01A0                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1E42               _setDimmerLights_TriggerAdj 1E32  
                                 ___bmul 1E76            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 001D                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D3                                   _s_data 00D4  
                                 _setLED 0B6B                                   _myMain 00A0  
              _setDimmerLights_Main$2121 0066                _setDimmerLights_Main$2122 0067  
              _setDimmerLights_Main$2123 0068                         _DimmerLightsIntr 007C  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0023  
                       ___awdiv@quotient 0027                                   _setBuz 17A7  
                     __size_of_Temp_Main 0003         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 0221              _setDimmerLights_IntrControl 004A  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 1FE1  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1CFA  
                        _RfSWPointSelect 10C1             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 002D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1DC4  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0893  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0046  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0021  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 1101  
                          __end_of_getAD 1101                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1E02                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0055                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0023                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1CC1                 __end_of_setDimmerReClock 1D22  
                     __size_of_getRxData 0048                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 1D02                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00C9  
                         _DimmerLights22 00CA                           _DimmerLights33 00CB  
                   __size_of_setLED_Main 004E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1CA6  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0240  
                              ?_Fosc_Set 0070                              _Buzzer_Main 15CB  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1CAC  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0024                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1D2E  
                          ??_Switch_Main 006B                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 007B                        LedPointSelect@led 0020  
                 __size_of_DelayOff_Main 000C                     __size_of_setRF_Learn 0008  
                            setBuz@count 002C                               __pmaintext 1615  
                    _CC2500_WriteCommand 1F3B                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 001B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0023                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00B9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0028                                  ?_setLED 0021  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1CD4  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 0802  
           __end_of_setRF_Initialization 1CE2                            ?_setSw_Status 0021  
                     _setRFSW_AdjControl 13B8                  __end_of_RfSWPointSelect 10E1  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1D5E  
                        ?_setTemp_Enable 0070                                  _IOC_Set 07F3  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 10A2                        _Flash_Memory_Read 1F55  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 007F  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1CA0                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 074A  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0E58                          _setPercentValue 14F7  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 00E7             __end_of_CC2500_FrequencyCabr 1D2E  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1E53  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0164                                  _VarLED2 0168  
                                _VarLED3 016C                        __end_of_getRxData 15CB  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1FA7  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1E02  
                   ??_setRFSW_AdjControl 0064                           ??_setTemp_Main 0031  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1DF2  
                                ___awdiv 16FE                                  ___ftadd 0371  
                         ??_setSw_Enable 0021                                  ___ftdiv 074A  
                                ___ftmul 05E7                                  ___fttol 0DD1  
                    __end_of_Switch_Main 1D5E                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0074  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0059                           ??_setSw_Status 0022  
                                __ptext1 153D                                  __ptext2 1CFA  
                                __ptext3 1DD3                                  __ptext4 0802  
                                __ptext5 10E1                                  __ptext6 1CA9  
                                __ptext7 0BDF                                  __ptext8 1430  
                                __ptext9 11F5                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0066                    _DimmerIntrPointSelect 1F21  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 10C1  
              __end_of_Flash_Memory_Read 1F6F                               _setRF_Main 0A23  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1D3A  
                      _DimmerLights_Main 1D97                                  _my_Main 153D  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1D16               __end_of_CC2500_ClearRXFIFO 1CB0  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1CB4  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006F  
                         _LedPointSelect 12F5                      _DelayOffPointSelect 1FA7  
                                clrloop0 1CC8           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1E64                     end_of_initialization 0046  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 121E  
                          _DelayTime_1us 11CF                        __end_of_setTxData 05E7  
             __end_of_Flash_Memory_Write 1351                                  init_ram 1CC1  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 006B  
                   Flash_Memory_Read@ret 0023                                  initloop 1CC2  
                             _setSw_Main 0221                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 11AA                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1E64                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0CD2  
                          _CC2500_TxData 08F4                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1D79              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14B3                  _DimmerLights_Exceptions 1752  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1D02  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1DA6  
                     _Mcu_Initialization 1DA6                 __size_of_CC2500_PowerRST 0044  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1322  
                __end_of_Sw_DimmerOnFunc 0EE2                  __end_of_setPercentValue 153D  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 1248  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 13F3                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 11CF                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1F08  
                   _setRF_Initialization 1CDB                              _Switch_Main 1D52  
                      __size_of_LED_Main 0010                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1F6F  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1EC5  
                   ??_Mcu_Initialization 0020                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1E88  
              __size_of_Sw_DimmerAdjFunc 0065                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1F8A                        __size_of_TMR0_ISR 002B  
        __size_of_setOverTemp_Exceptions 003F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1EF0  
          __size_of_setDimmerLights_Main 008E                           __end_of_setLED 0BDF  
                         __end_of_setBuz 1800          _getDimmerLights_StatusFlag$2126 0022  
                   _CC2500_FrequencyCabr 1D22                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0F70  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 1383                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1EB0                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 10A2  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0C58  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 121E  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1CBC  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00E3                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0036  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1D97  
                     Sw_DimmerAdjFunc@sw 0029                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 1CA9  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                                _Rx_Length 00CF  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00D1                              __pdataBANK4 0220  
                               ??_setLED 0022                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1CB4               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 13B8                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4557 0068                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 0025                   _setOverTemp_Exceptions 1430  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013D                            _DimmerLights2 01C5  
                          _DimmerLights3 01D4                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 006B  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1CA3                                _getBuz_GO 1E42  
    __end_of_Flash_Memory_Initialization 052E              _Flash_Memory_Initialization 0467  
                               ?___awdiv 0020                                __ptext100 1EC5  
                              __ptext101 1CB4                                __ptext110 1F3B  
                              __ptext102 146F                                __ptext111 1CBC  
                              __ptext103 121E                                __ptext120 1D5E  
                              __ptext112 1EB0                                __ptext104 1083  
                              __ptext121 1D16                                __ptext113 1F08  
                              __ptext105 1164                                __ptext122 1FE1  
                              __ptext114 15CB                                __ptext106 1D22  
                              __ptext123 1F8A                                __ptext115 1C9A  
                              __ptext107 11CF                                __ptext108 1CB0  
                              __ptext117 1272                                __ptext109 1CAC  
                               ?___ftadd 003E                                __ptext118 004A  
                              __ptext119 1F21                                _getRxData 1583  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 1000  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1C9D                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1DD3       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0050                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0150  
          __end_of_setDimmerLights_ERROR 16FE             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 11AA            __end_of_setDimmerLights_AdjGo 1E32  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00D2           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1DE2  
                         __size_of_getAD 0020                             _setRF_Enable 1D6B  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1FC4  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 16AE  
                    _DimmerLightsIntrIOC 00CC                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1CA9                        _CC2500_rfSettings 102F  
                               _LED_Main 1E12                          SwPointSelect@sw 0020  
                              clear_ram0 1CC7                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 052E      __end_of_DimmerLights_Initialization 1142  
            _DimmerLights_Initialization 1121                       _CC2500_ClearRXFIFO 1CAC  
                     _CC2500_ClearTXFIFO 1CB0           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1CFA                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1322  
                             ?_getRxData 0070                                 _TMR0_ISR 1272  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1CE2                         _Sw_DimmerAdjFunc 0958  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C5  
                   __end_of_RF_RxDisable 1DC4                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1F55                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0AFA                    _Sw_DimmerAdjFunc$5433 0025  
                  _Sw_DimmerAdjFunc$5434 0026                    _Sw_DimmerAdjFunc$5435 0027  
                  __size_of_setTemp_Main 0079                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 0029                                 _DelayOff 007A  
                           setSw_Main@sw 006A         setDimmerLights_IntrIOC_GO@lights 0072  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1D52  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0023  
                    __end_of_setLog_Code 1383                    _DlyOff_Initialization 1D0B  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1CB8  
                  _Switch_Initialization 1E53                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0024                           _setRFSW_Status 1D79  
                           _setMemory_GO 1EDA                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 0838                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1F08             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        setRFSW_Control@sw 0063  
                              setLED@led 0022     __end_of_setDimmerLights_TriggerERROR 12C8  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 129D  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0BDF  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 11F5                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 1142  
                       ??_LedPointSelect 0020                                 ___ftpack 0893  
                           _setSw_Status 1D88                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1660                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0AFA                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                         __size_of_my_Main 0046  
                               __ptext10 1D6B                                 __ptext11 1752  
                               __ptext20 0AFA                                 __ptext12 129D  
                               __ptext21 0958                                 __ptext13 16AE  
                               __ptext30 1351                                 __ptext22 1E32  
                               __ptext14 1CA6                                 __ptext31 069B  
                               __ptext23 1E22                                 __ptext15 1CA3  
                               __ptext40 05E7                                 __ptext32 0F70  
                               __ptext24 1E53                                 __ptext16 1D52  
                               __ptext41 0371                                 __ptext33 09BD  
                               __ptext25 1CEA                                 __ptext17 0221  
                               __ptext50 1DA6                                 __ptext42 1E42  
                               __ptext34 1248                                 __ptext26 1DC4  
                               __ptext18 1CF2                                 __ptext51 1CE2  
                               __ptext43 1DB5                                 __ptext35 1E76  
                               __ptext27 1CA0                                 __ptext19 0E58  
                               __ptext60 10A2                                 __ptext52 1EF0  
                               __ptext44 08F4                                 __ptext36 13B8  
                               __ptext28 0A23                                 __ptext61 14B3  
                               __ptext53 07F3                                 __ptext45 0CD2  
                               __ptext37 1383                                 __ptext29 1583  
                               __ptext70 0D51                                 __ptext62 1D46  
                               __ptext54 1CB8                                 __ptext46 11AA  
                               __ptext38 1187                                 __ptext71 0B6B  
                               __ptext63 0467                                 __ptext55 1CD4  
                               __ptext47 1066                                 __ptext39 0838  
                               __ptext80 0C58                                 __ptext72 12F5  
                               __ptext64 1322                                 __ptext56 1E12  
                               __ptext48 1C9D                                 __ptext81 052E  
                               __ptext73 1E9C                                 __ptext65 1D02  
                               __ptext57 1660                                 __ptext49 1CDB  
                               __ptext90 1D79                                 __ptext82 1D88  
                               __ptext74 1EDA                                 __ptext66 1F55  
                               __ptext58 1E02                                 __ptext91 10C1  
                               __ptext83 1FC4                                 __ptext75 1E88  
                               __ptext67 1D97                                 __ptext59 1E64  
                               __ptext92 1DF2                                 __ptext84 0A8E  
                               __ptext76 1121                                 __ptext68 0EE2  
                               __ptext93 1DE2                                 __ptext85 14F7  
                               __ptext77 12C8                                 __ptext69 13F3  
                               __ptext94 1F6F                                 __ptext86 0DD1  
                               __ptext78 1CCD                                 __ptext95 17A7  
                               __ptext87 074A                                 __ptext79 1D3A  
                               __ptext96 16FE                                 __ptext88 1142  
                               __ptext97 1D2E                                 __ptext89 0893  
                               __ptext98 1D0B                                 __ptext99 1FA7  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1D88  
          __end_of_Dimmer_Initialization 1CD4             __end_of_setDimmerLights_Main 0F70  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0068  
                          setLED@command 0021                            __size_of_main 004B  
                            _setRF_Learn 1CF2                 __end_of_CC2500_SIDLEMode 1CB8  
             setDimmerLights_Main@lights 006A              __end_of_DelayOffPointSelect 1FC4  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1E9C  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000C  
                        _CC2500_ReadByte 1066                       _CC2500_InitPATable 1083  
    __size_of_getDimmerLights_StatusFlag 0014            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0A8E                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 000F                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006B  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006D  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 146F  
            __end_of_Flash_Memory_Modify 14F7                        ??_getPercentValue 0059  
                            _setLog_Code 1351              __end_of_Flash_Memory_Unlock 1D0B  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1164  
                     __end_of_setSw_Main 0371                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1248                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 12F5  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 12C8  
            __end_of_setDimmerLights_Adj 1430                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1C9D  
   __size_of_setDimmerLights_IntrControl 01D7                     _Flash_Memory_Erasing 1D46  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00D0  
        __end_of_DelayOff_Initialization 1D3A      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 1D46  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 09BD  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 1272  
         __end_of_setOverTemp_Exceptions 146F     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 11F5                 __end_of_Sw_DimmerAdjFunc 09BD  
                __end_of_CC2500_ReadByte 1083             __end_of_setSw_Initialization 1CF2  
                        _Timeout_Counter 1EB0                     getPercentValue@value 005B  
                           _RF_RxDisable 1DB5               __end_of_LED_Initialization 1E12  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1CA6  
               __size_of_Sw_DimmerOnFunc 008A                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1CA0                 __end_of_Sw_DimmerOffFunc 0B6B  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0D51                    __end_of_CC2500_TxData 0958  
                    setSw_Status@command 0021                  __end_of_CC2500_PowerRST 14B3  
