

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Oct 18 15:12:16 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	intentry,global,class=CODE,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	dabs	1,0x7E,2
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  0116                     	;# 
   198  0117                     	;# 
   199  011D                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202  018E                     	;# 
   203  0191                     	;# 
   204  0191                     	;# 
   205  0192                     	;# 
   206  0193                     	;# 
   207  0193                     	;# 
   208  0194                     	;# 
   209  0195                     	;# 
   210  0196                     	;# 
   211  0197                     	;# 
   212  0199                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019C                     	;# 
   220  019D                     	;# 
   221  019E                     	;# 
   222  019F                     	;# 
   223  020D                     	;# 
   224  0210                     	;# 
   225  0211                     	;# 
   226  0211                     	;# 
   227  0212                     	;# 
   228  0212                     	;# 
   229  0213                     	;# 
   230  0213                     	;# 
   231  0214                     	;# 
   232  0214                     	;# 
   233  0215                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0291                     	;# 
   241  0291                     	;# 
   242  0292                     	;# 
   243  0293                     	;# 
   244  0298                     	;# 
   245  0298                     	;# 
   246  0299                     	;# 
   247  029A                     	;# 
   248  0394                     	;# 
   249  0395                     	;# 
   250  0396                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  0090                     	;# 
   293  0091                     	;# 
   294  0092                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  010E                     	;# 
   308  0116                     	;# 
   309  0117                     	;# 
   310  011D                     	;# 
   311  018C                     	;# 
   312  018D                     	;# 
   313  018E                     	;# 
   314  0191                     	;# 
   315  0191                     	;# 
   316  0192                     	;# 
   317  0193                     	;# 
   318  0193                     	;# 
   319  0194                     	;# 
   320  0195                     	;# 
   321  0196                     	;# 
   322  0197                     	;# 
   323  0199                     	;# 
   324  019A                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019C                     	;# 
   330  019C                     	;# 
   331  019D                     	;# 
   332  019E                     	;# 
   333  019F                     	;# 
   334  020D                     	;# 
   335  0210                     	;# 
   336  0211                     	;# 
   337  0211                     	;# 
   338  0212                     	;# 
   339  0212                     	;# 
   340  0213                     	;# 
   341  0213                     	;# 
   342  0214                     	;# 
   343  0214                     	;# 
   344  0215                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0216                     	;# 
   348  0216                     	;# 
   349  0217                     	;# 
   350  0217                     	;# 
   351  0291                     	;# 
   352  0291                     	;# 
   353  0292                     	;# 
   354  0293                     	;# 
   355  0298                     	;# 
   356  0298                     	;# 
   357  0299                     	;# 
   358  029A                     	;# 
   359  0394                     	;# 
   360  0395                     	;# 
   361  0396                     	;# 
   362  0FE4                     	;# 
   363  0FE5                     	;# 
   364  0FE6                     	;# 
   365  0FE7                     	;# 
   366  0FE8                     	;# 
   367  0FE9                     	;# 
   368  0FEA                     	;# 
   369  0FEB                     	;# 
   370  0FED                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  000D                     	;# 
   387  000E                     	;# 
   388  0010                     	;# 
   389  0011                     	;# 
   390  0012                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  008C                     	;# 
   401  008D                     	;# 
   402  008E                     	;# 
   403  0090                     	;# 
   404  0091                     	;# 
   405  0092                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0097                     	;# 
   409  0099                     	;# 
   410  009A                     	;# 
   411  009B                     	;# 
   412  009B                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009E                     	;# 
   416  010C                     	;# 
   417  010D                     	;# 
   418  010E                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  011D                     	;# 
   422  018C                     	;# 
   423  018D                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019C                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019F                     	;# 
   445  020D                     	;# 
   446  0210                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0216                     	;# 
   459  0216                     	;# 
   460  0217                     	;# 
   461  0217                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0298                     	;# 
   467  0298                     	;# 
   468  0299                     	;# 
   469  029A                     	;# 
   470  0394                     	;# 
   471  0395                     	;# 
   472  0396                     	;# 
   473  0FE4                     	;# 
   474  0FE5                     	;# 
   475  0FE6                     	;# 
   476  0FE7                     	;# 
   477  0FE8                     	;# 
   478  0FE9                     	;# 
   479  0FEA                     	;# 
   480  0FEB                     	;# 
   481  0FED                     	;# 
   482  0FEE                     	;# 
   483  0FEF                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0008                     	;# 
   493  0009                     	;# 
   494  000A                     	;# 
   495  000B                     	;# 
   496  000C                     	;# 
   497  000D                     	;# 
   498  000E                     	;# 
   499  0010                     	;# 
   500  0011                     	;# 
   501  0012                     	;# 
   502  0015                     	;# 
   503  0016                     	;# 
   504  0016                     	;# 
   505  0017                     	;# 
   506  0018                     	;# 
   507  0019                     	;# 
   508  001A                     	;# 
   509  001B                     	;# 
   510  001C                     	;# 
   511  008C                     	;# 
   512  008D                     	;# 
   513  008E                     	;# 
   514  0090                     	;# 
   515  0091                     	;# 
   516  0092                     	;# 
   517  0095                     	;# 
   518  0096                     	;# 
   519  0097                     	;# 
   520  0099                     	;# 
   521  009A                     	;# 
   522  009B                     	;# 
   523  009B                     	;# 
   524  009C                     	;# 
   525  009D                     	;# 
   526  009E                     	;# 
   527  010C                     	;# 
   528  010D                     	;# 
   529  010E                     	;# 
   530  0116                     	;# 
   531  0117                     	;# 
   532  011D                     	;# 
   533  018C                     	;# 
   534  018D                     	;# 
   535  018E                     	;# 
   536  0191                     	;# 
   537  0191                     	;# 
   538  0192                     	;# 
   539  0193                     	;# 
   540  0193                     	;# 
   541  0194                     	;# 
   542  0195                     	;# 
   543  0196                     	;# 
   544  0197                     	;# 
   545  0199                     	;# 
   546  019A                     	;# 
   547  019B                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019C                     	;# 
   552  019C                     	;# 
   553  019D                     	;# 
   554  019E                     	;# 
   555  019F                     	;# 
   556  020D                     	;# 
   557  0210                     	;# 
   558  0211                     	;# 
   559  0211                     	;# 
   560  0212                     	;# 
   561  0212                     	;# 
   562  0213                     	;# 
   563  0213                     	;# 
   564  0214                     	;# 
   565  0214                     	;# 
   566  0215                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0216                     	;# 
   570  0216                     	;# 
   571  0217                     	;# 
   572  0217                     	;# 
   573  0291                     	;# 
   574  0291                     	;# 
   575  0292                     	;# 
   576  0293                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  0394                     	;# 
   582  0395                     	;# 
   583  0396                     	;# 
   584  0FE4                     	;# 
   585  0FE5                     	;# 
   586  0FE6                     	;# 
   587  0FE7                     	;# 
   588  0FE8                     	;# 
   589  0FE9                     	;# 
   590  0FEA                     	;# 
   591  0FEB                     	;# 
   592  0FED                     	;# 
   593  0FEE                     	;# 
   594  0FEF                     	;# 
   595  0000                     	;# 
   596  0001                     	;# 
   597  0002                     	;# 
   598  0003                     	;# 
   599  0004                     	;# 
   600  0005                     	;# 
   601  0006                     	;# 
   602  0007                     	;# 
   603  0008                     	;# 
   604  0009                     	;# 
   605  000A                     	;# 
   606  000B                     	;# 
   607  000C                     	;# 
   608  000D                     	;# 
   609  000E                     	;# 
   610  0010                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  008C                     	;# 
   623  008D                     	;# 
   624  008E                     	;# 
   625  0090                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009B                     	;# 
   635  009C                     	;# 
   636  009D                     	;# 
   637  009E                     	;# 
   638  010C                     	;# 
   639  010D                     	;# 
   640  010E                     	;# 
   641  0116                     	;# 
   642  0117                     	;# 
   643  011D                     	;# 
   644  018C                     	;# 
   645  018D                     	;# 
   646  018E                     	;# 
   647  0191                     	;# 
   648  0191                     	;# 
   649  0192                     	;# 
   650  0193                     	;# 
   651  0193                     	;# 
   652  0194                     	;# 
   653  0195                     	;# 
   654  0196                     	;# 
   655  0197                     	;# 
   656  0199                     	;# 
   657  019A                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019C                     	;# 
   663  019C                     	;# 
   664  019D                     	;# 
   665  019E                     	;# 
   666  019F                     	;# 
   667  020D                     	;# 
   668  0210                     	;# 
   669  0211                     	;# 
   670  0211                     	;# 
   671  0212                     	;# 
   672  0212                     	;# 
   673  0213                     	;# 
   674  0213                     	;# 
   675  0214                     	;# 
   676  0214                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0216                     	;# 
   681  0216                     	;# 
   682  0217                     	;# 
   683  0217                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  0394                     	;# 
   693  0395                     	;# 
   694  0396                     	;# 
   695  0FE4                     	;# 
   696  0FE5                     	;# 
   697  0FE6                     	;# 
   698  0FE7                     	;# 
   699  0FE8                     	;# 
   700  0FE9                     	;# 
   701  0FEA                     	;# 
   702  0FEB                     	;# 
   703  0FED                     	;# 
   704  0FEE                     	;# 
   705  0FEF                     	;# 
   706  0000                     	;# 
   707  0001                     	;# 
   708  0002                     	;# 
   709  0003                     	;# 
   710  0004                     	;# 
   711  0005                     	;# 
   712  0006                     	;# 
   713  0007                     	;# 
   714  0008                     	;# 
   715  0009                     	;# 
   716  000A                     	;# 
   717  000B                     	;# 
   718  000C                     	;# 
   719  000D                     	;# 
   720  000E                     	;# 
   721  0010                     	;# 
   722  0011                     	;# 
   723  0012                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0016                     	;# 
   727  0017                     	;# 
   728  0018                     	;# 
   729  0019                     	;# 
   730  001A                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  008C                     	;# 
   734  008D                     	;# 
   735  008E                     	;# 
   736  0090                     	;# 
   737  0091                     	;# 
   738  0092                     	;# 
   739  0095                     	;# 
   740  0096                     	;# 
   741  0097                     	;# 
   742  0099                     	;# 
   743  009A                     	;# 
   744  009B                     	;# 
   745  009B                     	;# 
   746  009C                     	;# 
   747  009D                     	;# 
   748  009E                     	;# 
   749  010C                     	;# 
   750  010D                     	;# 
   751  010E                     	;# 
   752  0116                     	;# 
   753  0117                     	;# 
   754  011D                     	;# 
   755  018C                     	;# 
   756  018D                     	;# 
   757  018E                     	;# 
   758  0191                     	;# 
   759  0191                     	;# 
   760  0192                     	;# 
   761  0193                     	;# 
   762  0193                     	;# 
   763  0194                     	;# 
   764  0195                     	;# 
   765  0196                     	;# 
   766  0197                     	;# 
   767  0199                     	;# 
   768  019A                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019C                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020D                     	;# 
   779  0210                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0217                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0298                     	;# 
   800  0298                     	;# 
   801  0299                     	;# 
   802  029A                     	;# 
   803  0394                     	;# 
   804  0395                     	;# 
   805  0396                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000D                     	;# 
   831  000E                     	;# 
   832  0010                     	;# 
   833  0011                     	;# 
   834  0012                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  0090                     	;# 
   848  0091                     	;# 
   849  0092                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  010C                     	;# 
   861  010D                     	;# 
   862  010E                     	;# 
   863  0116                     	;# 
   864  0117                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018D                     	;# 
   868  018E                     	;# 
   869  0191                     	;# 
   870  0191                     	;# 
   871  0192                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0197                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019C                     	;# 
   885  019C                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019F                     	;# 
   889  020D                     	;# 
   890  0210                     	;# 
   891  0211                     	;# 
   892  0211                     	;# 
   893  0212                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0213                     	;# 
   897  0214                     	;# 
   898  0214                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0216                     	;# 
   903  0216                     	;# 
   904  0217                     	;# 
   905  0217                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0298                     	;# 
   911  0298                     	;# 
   912  0299                     	;# 
   913  029A                     	;# 
   914  0394                     	;# 
   915  0395                     	;# 
   916  0396                     	;# 
   917  0FE4                     	;# 
   918  0FE5                     	;# 
   919  0FE6                     	;# 
   920  0FE7                     	;# 
   921  0FE8                     	;# 
   922  0FE9                     	;# 
   923  0FEA                     	;# 
   924  0FEB                     	;# 
   925  0FED                     	;# 
   926  0FEE                     	;# 
   927  0FEF                     	;# 
   928  0000                     	;# 
   929  0001                     	;# 
   930  0002                     	;# 
   931  0003                     	;# 
   932  0004                     	;# 
   933  0005                     	;# 
   934  0006                     	;# 
   935  0007                     	;# 
   936  0008                     	;# 
   937  0009                     	;# 
   938  000A                     	;# 
   939  000B                     	;# 
   940  000C                     	;# 
   941  000D                     	;# 
   942  000E                     	;# 
   943  0010                     	;# 
   944  0011                     	;# 
   945  0012                     	;# 
   946  0015                     	;# 
   947  0016                     	;# 
   948  0016                     	;# 
   949  0017                     	;# 
   950  0018                     	;# 
   951  0019                     	;# 
   952  001A                     	;# 
   953  001B                     	;# 
   954  001C                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0090                     	;# 
   959  0091                     	;# 
   960  0092                     	;# 
   961  0095                     	;# 
   962  0096                     	;# 
   963  0097                     	;# 
   964  0099                     	;# 
   965  009A                     	;# 
   966  009B                     	;# 
   967  009B                     	;# 
   968  009C                     	;# 
   969  009D                     	;# 
   970  009E                     	;# 
   971  010C                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  0116                     	;# 
   975  0117                     	;# 
   976  011D                     	;# 
   977  018C                     	;# 
   978  018D                     	;# 
   979  018E                     	;# 
   980  0191                     	;# 
   981  0191                     	;# 
   982  0192                     	;# 
   983  0193                     	;# 
   984  0193                     	;# 
   985  0194                     	;# 
   986  0195                     	;# 
   987  0196                     	;# 
   988  0197                     	;# 
   989  0199                     	;# 
   990  019A                     	;# 
   991  019B                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019C                     	;# 
   996  019C                     	;# 
   997  019D                     	;# 
   998  019E                     	;# 
   999  019F                     	;# 
  1000  020D                     	;# 
  1001  0210                     	;# 
  1002  0211                     	;# 
  1003  0211                     	;# 
  1004  0212                     	;# 
  1005  0212                     	;# 
  1006  0213                     	;# 
  1007  0213                     	;# 
  1008  0214                     	;# 
  1009  0214                     	;# 
  1010  0215                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0216                     	;# 
  1014  0216                     	;# 
  1015  0217                     	;# 
  1016  0217                     	;# 
  1017  0291                     	;# 
  1018  0291                     	;# 
  1019  0292                     	;# 
  1020  0293                     	;# 
  1021  0298                     	;# 
  1022  0298                     	;# 
  1023  0299                     	;# 
  1024  029A                     	;# 
  1025  0394                     	;# 
  1026  0395                     	;# 
  1027  0396                     	;# 
  1028  0FE4                     	;# 
  1029  0FE5                     	;# 
  1030  0FE6                     	;# 
  1031  0FE7                     	;# 
  1032  0FE8                     	;# 
  1033  0FE9                     	;# 
  1034  0FEA                     	;# 
  1035  0FEB                     	;# 
  1036  0FED                     	;# 
  1037  0FEE                     	;# 
  1038  0FEF                     	;# 
  1039  0000                     	;# 
  1040  0001                     	;# 
  1041  0002                     	;# 
  1042  0003                     	;# 
  1043  0004                     	;# 
  1044  0005                     	;# 
  1045  0006                     	;# 
  1046  0007                     	;# 
  1047  0008                     	;# 
  1048  0009                     	;# 
  1049  000A                     	;# 
  1050  000B                     	;# 
  1051  000C                     	;# 
  1052  000D                     	;# 
  1053  000E                     	;# 
  1054  0010                     	;# 
  1055  0011                     	;# 
  1056  0012                     	;# 
  1057  0015                     	;# 
  1058  0016                     	;# 
  1059  0016                     	;# 
  1060  0017                     	;# 
  1061  0018                     	;# 
  1062  0019                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001C                     	;# 
  1066  008C                     	;# 
  1067  008D                     	;# 
  1068  008E                     	;# 
  1069  0090                     	;# 
  1070  0091                     	;# 
  1071  0092                     	;# 
  1072  0095                     	;# 
  1073  0096                     	;# 
  1074  0097                     	;# 
  1075  0099                     	;# 
  1076  009A                     	;# 
  1077  009B                     	;# 
  1078  009B                     	;# 
  1079  009C                     	;# 
  1080  009D                     	;# 
  1081  009E                     	;# 
  1082  010C                     	;# 
  1083  010D                     	;# 
  1084  010E                     	;# 
  1085  0116                     	;# 
  1086  0117                     	;# 
  1087  011D                     	;# 
  1088  018C                     	;# 
  1089  018D                     	;# 
  1090  018E                     	;# 
  1091  0191                     	;# 
  1092  0191                     	;# 
  1093  0192                     	;# 
  1094  0193                     	;# 
  1095  0193                     	;# 
  1096  0194                     	;# 
  1097  0195                     	;# 
  1098  0196                     	;# 
  1099  0197                     	;# 
  1100  0199                     	;# 
  1101  019A                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019C                     	;# 
  1107  019C                     	;# 
  1108  019D                     	;# 
  1109  019E                     	;# 
  1110  019F                     	;# 
  1111  020D                     	;# 
  1112  0210                     	;# 
  1113  0211                     	;# 
  1114  0211                     	;# 
  1115  0212                     	;# 
  1116  0212                     	;# 
  1117  0213                     	;# 
  1118  0213                     	;# 
  1119  0214                     	;# 
  1120  0214                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0216                     	;# 
  1125  0216                     	;# 
  1126  0217                     	;# 
  1127  0217                     	;# 
  1128  0291                     	;# 
  1129  0291                     	;# 
  1130  0292                     	;# 
  1131  0293                     	;# 
  1132  0298                     	;# 
  1133  0298                     	;# 
  1134  0299                     	;# 
  1135  029A                     	;# 
  1136  0394                     	;# 
  1137  0395                     	;# 
  1138  0396                     	;# 
  1139  0FE4                     	;# 
  1140  0FE5                     	;# 
  1141  0FE6                     	;# 
  1142  0FE7                     	;# 
  1143  0FE8                     	;# 
  1144  0FE9                     	;# 
  1145  0FEA                     	;# 
  1146  0FEB                     	;# 
  1147  0FED                     	;# 
  1148  0FEE                     	;# 
  1149  0FEF                     	;# 
  1150  0000                     	;# 
  1151  0001                     	;# 
  1152  0002                     	;# 
  1153  0003                     	;# 
  1154  0004                     	;# 
  1155  0005                     	;# 
  1156  0006                     	;# 
  1157  0007                     	;# 
  1158  0008                     	;# 
  1159  0009                     	;# 
  1160  000A                     	;# 
  1161  000B                     	;# 
  1162  000C                     	;# 
  1163  000D                     	;# 
  1164  000E                     	;# 
  1165  0010                     	;# 
  1166  0011                     	;# 
  1167  0012                     	;# 
  1168  0015                     	;# 
  1169  0016                     	;# 
  1170  0016                     	;# 
  1171  0017                     	;# 
  1172  0018                     	;# 
  1173  0019                     	;# 
  1174  001A                     	;# 
  1175  001B                     	;# 
  1176  001C                     	;# 
  1177  008C                     	;# 
  1178  008D                     	;# 
  1179  008E                     	;# 
  1180  0090                     	;# 
  1181  0091                     	;# 
  1182  0092                     	;# 
  1183  0095                     	;# 
  1184  0096                     	;# 
  1185  0097                     	;# 
  1186  0099                     	;# 
  1187  009A                     	;# 
  1188  009B                     	;# 
  1189  009B                     	;# 
  1190  009C                     	;# 
  1191  009D                     	;# 
  1192  009E                     	;# 
  1193  010C                     	;# 
  1194  010D                     	;# 
  1195  010E                     	;# 
  1196  0116                     	;# 
  1197  0117                     	;# 
  1198  011D                     	;# 
  1199  018C                     	;# 
  1200  018D                     	;# 
  1201  018E                     	;# 
  1202  0191                     	;# 
  1203  0191                     	;# 
  1204  0192                     	;# 
  1205  0193                     	;# 
  1206  0193                     	;# 
  1207  0194                     	;# 
  1208  0195                     	;# 
  1209  0196                     	;# 
  1210  0197                     	;# 
  1211  0199                     	;# 
  1212  019A                     	;# 
  1213  019B                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019C                     	;# 
  1218  019C                     	;# 
  1219  019D                     	;# 
  1220  019E                     	;# 
  1221  019F                     	;# 
  1222  020D                     	;# 
  1223  0210                     	;# 
  1224  0211                     	;# 
  1225  0211                     	;# 
  1226  0212                     	;# 
  1227  0212                     	;# 
  1228  0213                     	;# 
  1229  0213                     	;# 
  1230  0214                     	;# 
  1231  0214                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0216                     	;# 
  1236  0216                     	;# 
  1237  0217                     	;# 
  1238  0217                     	;# 
  1239  0291                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0298                     	;# 
  1244  0298                     	;# 
  1245  0299                     	;# 
  1246  029A                     	;# 
  1247  0394                     	;# 
  1248  0395                     	;# 
  1249  0396                     	;# 
  1250  0FE4                     	;# 
  1251  0FE5                     	;# 
  1252  0FE6                     	;# 
  1253  0FE7                     	;# 
  1254  0FE8                     	;# 
  1255  0FE9                     	;# 
  1256  0FEA                     	;# 
  1257  0FEB                     	;# 
  1258  0FED                     	;# 
  1259  0FEE                     	;# 
  1260  0FEF                     	;# 
  1261  0000                     	;# 
  1262  0001                     	;# 
  1263  0002                     	;# 
  1264  0003                     	;# 
  1265  0004                     	;# 
  1266  0005                     	;# 
  1267  0006                     	;# 
  1268  0007                     	;# 
  1269  0008                     	;# 
  1270  0009                     	;# 
  1271  000A                     	;# 
  1272  000B                     	;# 
  1273  000C                     	;# 
  1274  000D                     	;# 
  1275  000E                     	;# 
  1276  0010                     	;# 
  1277  0011                     	;# 
  1278  0012                     	;# 
  1279  0015                     	;# 
  1280  0016                     	;# 
  1281  0016                     	;# 
  1282  0017                     	;# 
  1283  0018                     	;# 
  1284  0019                     	;# 
  1285  001A                     	;# 
  1286  001B                     	;# 
  1287  001C                     	;# 
  1288  008C                     	;# 
  1289  008D                     	;# 
  1290  008E                     	;# 
  1291  0090                     	;# 
  1292  0091                     	;# 
  1293  0092                     	;# 
  1294  0095                     	;# 
  1295  0096                     	;# 
  1296  0097                     	;# 
  1297  0099                     	;# 
  1298  009A                     	;# 
  1299  009B                     	;# 
  1300  009B                     	;# 
  1301  009C                     	;# 
  1302  009D                     	;# 
  1303  009E                     	;# 
  1304  010C                     	;# 
  1305  010D                     	;# 
  1306  010E                     	;# 
  1307  0116                     	;# 
  1308  0117                     	;# 
  1309  011D                     	;# 
  1310  018C                     	;# 
  1311  018D                     	;# 
  1312  018E                     	;# 
  1313  0191                     	;# 
  1314  0191                     	;# 
  1315  0192                     	;# 
  1316  0193                     	;# 
  1317  0193                     	;# 
  1318  0194                     	;# 
  1319  0195                     	;# 
  1320  0196                     	;# 
  1321  0197                     	;# 
  1322  0199                     	;# 
  1323  019A                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019C                     	;# 
  1329  019C                     	;# 
  1330  019D                     	;# 
  1331  019E                     	;# 
  1332  019F                     	;# 
  1333  020D                     	;# 
  1334  0210                     	;# 
  1335  0211                     	;# 
  1336  0211                     	;# 
  1337  0212                     	;# 
  1338  0212                     	;# 
  1339  0213                     	;# 
  1340  0213                     	;# 
  1341  0214                     	;# 
  1342  0214                     	;# 
  1343  0215                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0216                     	;# 
  1347  0216                     	;# 
  1348  0217                     	;# 
  1349  0217                     	;# 
  1350  0291                     	;# 
  1351  0291                     	;# 
  1352  0292                     	;# 
  1353  0293                     	;# 
  1354  0298                     	;# 
  1355  0298                     	;# 
  1356  0299                     	;# 
  1357  029A                     	;# 
  1358  0394                     	;# 
  1359  0395                     	;# 
  1360  0396                     	;# 
  1361  0FE4                     	;# 
  1362  0FE5                     	;# 
  1363  0FE6                     	;# 
  1364  0FE7                     	;# 
  1365  0FE8                     	;# 
  1366  0FE9                     	;# 
  1367  0FEA                     	;# 
  1368  0FEB                     	;# 
  1369  0FED                     	;# 
  1370  0FEE                     	;# 
  1371  0FEF                     	;# 
  1372  0000                     	;# 
  1373  0001                     	;# 
  1374  0002                     	;# 
  1375  0003                     	;# 
  1376  0004                     	;# 
  1377  0005                     	;# 
  1378  0006                     	;# 
  1379  0007                     	;# 
  1380  0008                     	;# 
  1381  0009                     	;# 
  1382  000A                     	;# 
  1383  000B                     	;# 
  1384  000C                     	;# 
  1385  000D                     	;# 
  1386  000E                     	;# 
  1387  0010                     	;# 
  1388  0011                     	;# 
  1389  0012                     	;# 
  1390  0015                     	;# 
  1391  0016                     	;# 
  1392  0016                     	;# 
  1393  0017                     	;# 
  1394  0018                     	;# 
  1395  0019                     	;# 
  1396  001A                     	;# 
  1397  001B                     	;# 
  1398  001C                     	;# 
  1399  008C                     	;# 
  1400  008D                     	;# 
  1401  008E                     	;# 
  1402  0090                     	;# 
  1403  0091                     	;# 
  1404  0092                     	;# 
  1405  0095                     	;# 
  1406  0096                     	;# 
  1407  0097                     	;# 
  1408  0099                     	;# 
  1409  009A                     	;# 
  1410  009B                     	;# 
  1411  009B                     	;# 
  1412  009C                     	;# 
  1413  009D                     	;# 
  1414  009E                     	;# 
  1415  010C                     	;# 
  1416  010D                     	;# 
  1417  010E                     	;# 
  1418  0116                     	;# 
  1419  0117                     	;# 
  1420  011D                     	;# 
  1421  018C                     	;# 
  1422  018D                     	;# 
  1423  018E                     	;# 
  1424  0191                     	;# 
  1425  0191                     	;# 
  1426  0192                     	;# 
  1427  0193                     	;# 
  1428  0193                     	;# 
  1429  0194                     	;# 
  1430  0195                     	;# 
  1431  0196                     	;# 
  1432  0197                     	;# 
  1433  0199                     	;# 
  1434  019A                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019C                     	;# 
  1440  019C                     	;# 
  1441  019D                     	;# 
  1442  019E                     	;# 
  1443  019F                     	;# 
  1444  020D                     	;# 
  1445  0210                     	;# 
  1446  0211                     	;# 
  1447  0211                     	;# 
  1448  0212                     	;# 
  1449  0212                     	;# 
  1450  0213                     	;# 
  1451  0213                     	;# 
  1452  0214                     	;# 
  1453  0214                     	;# 
  1454  0215                     	;# 
  1455  0215                     	;# 
  1456  0215                     	;# 
  1457  0216                     	;# 
  1458  0216                     	;# 
  1459  0217                     	;# 
  1460  0217                     	;# 
  1461  0291                     	;# 
  1462  0291                     	;# 
  1463  0292                     	;# 
  1464  0293                     	;# 
  1465  0298                     	;# 
  1466  0298                     	;# 
  1467  0299                     	;# 
  1468  029A                     	;# 
  1469  0394                     	;# 
  1470  0395                     	;# 
  1471  0396                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0010                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0015                     	;# 
  1502  0016                     	;# 
  1503  0016                     	;# 
  1504  0017                     	;# 
  1505  0018                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0090                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  010C                     	;# 
  1527  010D                     	;# 
  1528  010E                     	;# 
  1529  0116                     	;# 
  1530  0117                     	;# 
  1531  011D                     	;# 
  1532  018C                     	;# 
  1533  018D                     	;# 
  1534  018E                     	;# 
  1535  0191                     	;# 
  1536  0191                     	;# 
  1537  0192                     	;# 
  1538  0193                     	;# 
  1539  0193                     	;# 
  1540  0194                     	;# 
  1541  0195                     	;# 
  1542  0196                     	;# 
  1543  0197                     	;# 
  1544  0199                     	;# 
  1545  019A                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019C                     	;# 
  1551  019C                     	;# 
  1552  019D                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  020D                     	;# 
  1556  0210                     	;# 
  1557  0211                     	;# 
  1558  0211                     	;# 
  1559  0212                     	;# 
  1560  0212                     	;# 
  1561  0213                     	;# 
  1562  0213                     	;# 
  1563  0214                     	;# 
  1564  0214                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0216                     	;# 
  1569  0216                     	;# 
  1570  0217                     	;# 
  1571  0217                     	;# 
  1572  0291                     	;# 
  1573  0291                     	;# 
  1574  0292                     	;# 
  1575  0293                     	;# 
  1576  0298                     	;# 
  1577  0298                     	;# 
  1578  0299                     	;# 
  1579  029A                     	;# 
  1580  0394                     	;# 
  1581  0395                     	;# 
  1582  0396                     	;# 
  1583  0FE4                     	;# 
  1584  0FE5                     	;# 
  1585  0FE6                     	;# 
  1586  0FE7                     	;# 
  1587  0FE8                     	;# 
  1588  0FE9                     	;# 
  1589  0FEA                     	;# 
  1590  0FEB                     	;# 
  1591  0FED                     	;# 
  1592  0FEE                     	;# 
  1593  0FEF                     	;# 
  1594  0000                     	;# 
  1595  0001                     	;# 
  1596  0002                     	;# 
  1597  0003                     	;# 
  1598  0004                     	;# 
  1599  0005                     	;# 
  1600  0006                     	;# 
  1601  0007                     	;# 
  1602  0008                     	;# 
  1603  0009                     	;# 
  1604  000A                     	;# 
  1605  000B                     	;# 
  1606  000C                     	;# 
  1607  000D                     	;# 
  1608  000E                     	;# 
  1609  0010                     	;# 
  1610  0011                     	;# 
  1611  0012                     	;# 
  1612  0015                     	;# 
  1613  0016                     	;# 
  1614  0016                     	;# 
  1615  0017                     	;# 
  1616  0018                     	;# 
  1617  0019                     	;# 
  1618  001A                     	;# 
  1619  001B                     	;# 
  1620  001C                     	;# 
  1621  008C                     	;# 
  1622  008D                     	;# 
  1623  008E                     	;# 
  1624  0090                     	;# 
  1625  0091                     	;# 
  1626  0092                     	;# 
  1627  0095                     	;# 
  1628  0096                     	;# 
  1629  0097                     	;# 
  1630  0099                     	;# 
  1631  009A                     	;# 
  1632  009B                     	;# 
  1633  009B                     	;# 
  1634  009C                     	;# 
  1635  009D                     	;# 
  1636  009E                     	;# 
  1637  010C                     	;# 
  1638  010D                     	;# 
  1639  010E                     	;# 
  1640  0116                     	;# 
  1641  0117                     	;# 
  1642  011D                     	;# 
  1643  018C                     	;# 
  1644  018D                     	;# 
  1645  018E                     	;# 
  1646  0191                     	;# 
  1647  0191                     	;# 
  1648  0192                     	;# 
  1649  0193                     	;# 
  1650  0193                     	;# 
  1651  0194                     	;# 
  1652  0195                     	;# 
  1653  0196                     	;# 
  1654  0197                     	;# 
  1655  0199                     	;# 
  1656  019A                     	;# 
  1657  019B                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019C                     	;# 
  1662  019C                     	;# 
  1663  019D                     	;# 
  1664  019E                     	;# 
  1665  019F                     	;# 
  1666  020D                     	;# 
  1667  0210                     	;# 
  1668  0211                     	;# 
  1669  0211                     	;# 
  1670  0212                     	;# 
  1671  0212                     	;# 
  1672  0213                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0214                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0216                     	;# 
  1680  0216                     	;# 
  1681  0217                     	;# 
  1682  0217                     	;# 
  1683  0291                     	;# 
  1684  0291                     	;# 
  1685  0292                     	;# 
  1686  0293                     	;# 
  1687  0298                     	;# 
  1688  0298                     	;# 
  1689  0299                     	;# 
  1690  029A                     	;# 
  1691  0394                     	;# 
  1692  0395                     	;# 
  1693  0396                     	;# 
  1694  0FE4                     	;# 
  1695  0FE5                     	;# 
  1696  0FE6                     	;# 
  1697  0FE7                     	;# 
  1698  0FE8                     	;# 
  1699  0FE9                     	;# 
  1700  0FEA                     	;# 
  1701  0FEB                     	;# 
  1702  0FED                     	;# 
  1703  0FEE                     	;# 
  1704  0FEF                     	;# 
  1705  0000                     	;# 
  1706  0001                     	;# 
  1707  0002                     	;# 
  1708  0003                     	;# 
  1709  0004                     	;# 
  1710  0005                     	;# 
  1711  0006                     	;# 
  1712  0007                     	;# 
  1713  0008                     	;# 
  1714  0009                     	;# 
  1715  000A                     	;# 
  1716  000B                     	;# 
  1717  000C                     	;# 
  1718  000D                     	;# 
  1719  000E                     	;# 
  1720  0010                     	;# 
  1721  0011                     	;# 
  1722  0012                     	;# 
  1723  0015                     	;# 
  1724  0016                     	;# 
  1725  0016                     	;# 
  1726  0017                     	;# 
  1727  0018                     	;# 
  1728  0019                     	;# 
  1729  001A                     	;# 
  1730  001B                     	;# 
  1731  001C                     	;# 
  1732  008C                     	;# 
  1733  008D                     	;# 
  1734  008E                     	;# 
  1735  0090                     	;# 
  1736  0091                     	;# 
  1737  0092                     	;# 
  1738  0095                     	;# 
  1739  0096                     	;# 
  1740  0097                     	;# 
  1741  0099                     	;# 
  1742  009A                     	;# 
  1743  009B                     	;# 
  1744  009B                     	;# 
  1745  009C                     	;# 
  1746  009D                     	;# 
  1747  009E                     	;# 
  1748  010C                     	;# 
  1749  010D                     	;# 
  1750  010E                     	;# 
  1751  0116                     	;# 
  1752  0117                     	;# 
  1753  011D                     	;# 
  1754  018C                     	;# 
  1755  018D                     	;# 
  1756  018E                     	;# 
  1757  0191                     	;# 
  1758  0191                     	;# 
  1759  0192                     	;# 
  1760  0193                     	;# 
  1761  0193                     	;# 
  1762  0194                     	;# 
  1763  0195                     	;# 
  1764  0196                     	;# 
  1765  0197                     	;# 
  1766  0199                     	;# 
  1767  019A                     	;# 
  1768  019B                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019C                     	;# 
  1773  019C                     	;# 
  1774  019D                     	;# 
  1775  019E                     	;# 
  1776  019F                     	;# 
  1777  020D                     	;# 
  1778  0210                     	;# 
  1779  0211                     	;# 
  1780  0211                     	;# 
  1781  0212                     	;# 
  1782  0212                     	;# 
  1783  0213                     	;# 
  1784  0213                     	;# 
  1785  0214                     	;# 
  1786  0214                     	;# 
  1787  0215                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0216                     	;# 
  1791  0216                     	;# 
  1792  0217                     	;# 
  1793  0217                     	;# 
  1794  0291                     	;# 
  1795  0291                     	;# 
  1796  0292                     	;# 
  1797  0293                     	;# 
  1798  0298                     	;# 
  1799  0298                     	;# 
  1800  0299                     	;# 
  1801  029A                     	;# 
  1802  0394                     	;# 
  1803  0395                     	;# 
  1804  0396                     	;# 
  1805  0FE4                     	;# 
  1806  0FE5                     	;# 
  1807  0FE6                     	;# 
  1808  0FE7                     	;# 
  1809  0FE8                     	;# 
  1810  0FE9                     	;# 
  1811  0FEA                     	;# 
  1812  0FEB                     	;# 
  1813  0FED                     	;# 
  1814  0FEE                     	;# 
  1815  0FEF                     	;# 
  1816  0000                     	;# 
  1817  0001                     	;# 
  1818  0002                     	;# 
  1819  0003                     	;# 
  1820  0004                     	;# 
  1821  0005                     	;# 
  1822  0006                     	;# 
  1823  0007                     	;# 
  1824  0008                     	;# 
  1825  0009                     	;# 
  1826  000A                     	;# 
  1827  000B                     	;# 
  1828  000C                     	;# 
  1829  000D                     	;# 
  1830  000E                     	;# 
  1831  0010                     	;# 
  1832  0011                     	;# 
  1833  0012                     	;# 
  1834  0015                     	;# 
  1835  0016                     	;# 
  1836  0016                     	;# 
  1837  0017                     	;# 
  1838  0018                     	;# 
  1839  0019                     	;# 
  1840  001A                     	;# 
  1841  001B                     	;# 
  1842  001C                     	;# 
  1843  008C                     	;# 
  1844  008D                     	;# 
  1845  008E                     	;# 
  1846  0090                     	;# 
  1847  0091                     	;# 
  1848  0092                     	;# 
  1849  0095                     	;# 
  1850  0096                     	;# 
  1851  0097                     	;# 
  1852  0099                     	;# 
  1853  009A                     	;# 
  1854  009B                     	;# 
  1855  009B                     	;# 
  1856  009C                     	;# 
  1857  009D                     	;# 
  1858  009E                     	;# 
  1859  010C                     	;# 
  1860  010D                     	;# 
  1861  010E                     	;# 
  1862  0116                     	;# 
  1863  0117                     	;# 
  1864  011D                     	;# 
  1865  018C                     	;# 
  1866  018D                     	;# 
  1867  018E                     	;# 
  1868  0191                     	;# 
  1869  0191                     	;# 
  1870  0192                     	;# 
  1871  0193                     	;# 
  1872  0193                     	;# 
  1873  0194                     	;# 
  1874  0195                     	;# 
  1875  0196                     	;# 
  1876  0197                     	;# 
  1877  0199                     	;# 
  1878  019A                     	;# 
  1879  019B                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019C                     	;# 
  1884  019C                     	;# 
  1885  019D                     	;# 
  1886  019E                     	;# 
  1887  019F                     	;# 
  1888  020D                     	;# 
  1889  0210                     	;# 
  1890  0211                     	;# 
  1891  0211                     	;# 
  1892  0212                     	;# 
  1893  0212                     	;# 
  1894  0213                     	;# 
  1895  0213                     	;# 
  1896  0214                     	;# 
  1897  0214                     	;# 
  1898  0215                     	;# 
  1899  0215                     	;# 
  1900  0215                     	;# 
  1901  0216                     	;# 
  1902  0216                     	;# 
  1903  0217                     	;# 
  1904  0217                     	;# 
  1905  0291                     	;# 
  1906  0291                     	;# 
  1907  0292                     	;# 
  1908  0293                     	;# 
  1909  0298                     	;# 
  1910  0298                     	;# 
  1911  0299                     	;# 
  1912  029A                     	;# 
  1913  0394                     	;# 
  1914  0395                     	;# 
  1915  0396                     	;# 
  1916  0FE4                     	;# 
  1917  0FE5                     	;# 
  1918  0FE6                     	;# 
  1919  0FE7                     	;# 
  1920  0FE8                     	;# 
  1921  0FE9                     	;# 
  1922  0FEA                     	;# 
  1923  0FEB                     	;# 
  1924  0FED                     	;# 
  1925  0FEE                     	;# 
  1926  0FEF                     	;# 
  1927  0000                     	;# 
  1928  0001                     	;# 
  1929  0002                     	;# 
  1930  0003                     	;# 
  1931  0004                     	;# 
  1932  0005                     	;# 
  1933  0006                     	;# 
  1934  0007                     	;# 
  1935  0008                     	;# 
  1936  0009                     	;# 
  1937  000A                     	;# 
  1938  000B                     	;# 
  1939  000C                     	;# 
  1940  000D                     	;# 
  1941  000E                     	;# 
  1942  0010                     	;# 
  1943  0011                     	;# 
  1944  0012                     	;# 
  1945  0015                     	;# 
  1946  0016                     	;# 
  1947  0016                     	;# 
  1948  0017                     	;# 
  1949  0018                     	;# 
  1950  0019                     	;# 
  1951  001A                     	;# 
  1952  001B                     	;# 
  1953  001C                     	;# 
  1954  008C                     	;# 
  1955  008D                     	;# 
  1956  008E                     	;# 
  1957  0090                     	;# 
  1958  0091                     	;# 
  1959  0092                     	;# 
  1960  0095                     	;# 
  1961  0096                     	;# 
  1962  0097                     	;# 
  1963  0099                     	;# 
  1964  009A                     	;# 
  1965  009B                     	;# 
  1966  009B                     	;# 
  1967  009C                     	;# 
  1968  009D                     	;# 
  1969  009E                     	;# 
  1970  010C                     	;# 
  1971  010D                     	;# 
  1972  010E                     	;# 
  1973  0116                     	;# 
  1974  0117                     	;# 
  1975  011D                     	;# 
  1976  018C                     	;# 
  1977  018D                     	;# 
  1978  018E                     	;# 
  1979  0191                     	;# 
  1980  0191                     	;# 
  1981  0192                     	;# 
  1982  0193                     	;# 
  1983  0193                     	;# 
  1984  0194                     	;# 
  1985  0195                     	;# 
  1986  0196                     	;# 
  1987  0197                     	;# 
  1988  0199                     	;# 
  1989  019A                     	;# 
  1990  019B                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019C                     	;# 
  1995  019C                     	;# 
  1996  019D                     	;# 
  1997  019E                     	;# 
  1998  019F                     	;# 
  1999  020D                     	;# 
  2000  0210                     	;# 
  2001  0211                     	;# 
  2002  0211                     	;# 
  2003  0212                     	;# 
  2004  0212                     	;# 
  2005  0213                     	;# 
  2006  0213                     	;# 
  2007  0214                     	;# 
  2008  0214                     	;# 
  2009  0215                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0216                     	;# 
  2013  0216                     	;# 
  2014  0217                     	;# 
  2015  0217                     	;# 
  2016  0291                     	;# 
  2017  0291                     	;# 
  2018  0292                     	;# 
  2019  0293                     	;# 
  2020  0298                     	;# 
  2021  0298                     	;# 
  2022  0299                     	;# 
  2023  029A                     	;# 
  2024  0394                     	;# 
  2025  0395                     	;# 
  2026  0396                     	;# 
  2027  0FE4                     	;# 
  2028  0FE5                     	;# 
  2029  0FE6                     	;# 
  2030  0FE7                     	;# 
  2031  0FE8                     	;# 
  2032  0FE9                     	;# 
  2033  0FEA                     	;# 
  2034  0FEB                     	;# 
  2035  0FED                     	;# 
  2036  0FEE                     	;# 
  2037  0FEF                     	;# 
  2038                           
  2039                           	psect	idataBANK4
  2040  1108                     __pidataBANK4:	
  2041                           
  2042                           ;initializer for __product
  2043  1108  3463               	retlw	99
  2044  1109  3402               	retlw	2
  2045  110A  3400               	retlw	0
  2046  110B  3400               	retlw	0
  2047  110C  3400               	retlw	0
  2048  110D  3400               	retlw	0
  2049  110E  3400               	retlw	0
  2050  110F  3400               	retlw	0
  2051  1110  3400               	retlw	0
  2052  1111  3400               	retlw	0
  2053  1112  3400               	retlw	0
  2054  1113  3400               	retlw	0
  2055  1114  34FF               	retlw	255
  2056  1115  34FF               	retlw	255
  2057  1116  34FF               	retlw	255
  2058  1117  3400               	retlw	0
  2059  1118  3400               	retlw	0
  2060  1119  3400               	retlw	0
  2061  111A  3400               	retlw	0
  2062  111B  3400               	retlw	0
  2063  111C  3400               	retlw	0
  2064  111D  3400               	retlw	0
  2065  111E  3400               	retlw	0
  2066  111F  3400               	retlw	0
  2067  1120  3400               	retlw	0
  2068  1121  3400               	retlw	0
  2069  1122  3400               	retlw	0
  2070  1123  3400               	retlw	0
  2071  1124  3400               	retlw	0
  2072  1125  3400               	retlw	0
  2073  1126  3400               	retlw	0
  2074  1127  3400               	retlw	0
  2075                           
  2076                           	psect	stringtext
  2077  1000                     __pstringtext:	
  2078  1000                     _CC2500_registers_address:	
  2079  1000  3403               	retlw	3
  2080  1001  3416               	retlw	22
  2081  1002  3417               	retlw	23
  2082  1003  341E               	retlw	30
  2083  1004  341F               	retlw	31
  2084  1005  3420               	retlw	32
  2085  1006  342A               	retlw	42
  2086  1007  342B               	retlw	43
  2087  1008  340B               	retlw	11
  2088  1009  340C               	retlw	12
  2089  100A  340D               	retlw	13
  2090  100B  340E               	retlw	14
  2091  100C  340F               	retlw	15
  2092  100D  3410               	retlw	16
  2093  100E  3411               	retlw	17
  2094  100F  3412               	retlw	18
  2095  1010  3413               	retlw	19
  2096  1011  3414               	retlw	20
  2097  1012  340A               	retlw	10
  2098  1013  3415               	retlw	21
  2099  1014  3421               	retlw	33
  2100  1015  3422               	retlw	34
  2101  1016  3418               	retlw	24
  2102  1017  3419               	retlw	25
  2103  1018  341A               	retlw	26
  2104  1019  341B               	retlw	27
  2105  101A  341C               	retlw	28
  2106  101B  341D               	retlw	29
  2107  101C  3423               	retlw	35
  2108  101D  3424               	retlw	36
  2109  101E  3425               	retlw	37
  2110  101F  3426               	retlw	38
  2111  1020  3429               	retlw	41
  2112  1021  342C               	retlw	44
  2113  1022  342D               	retlw	45
  2114  1023  342E               	retlw	46
  2115  1024  3400               	retlw	0
  2116  1025  3401               	retlw	1
  2117  1026  3402               	retlw	2
  2118  1027  3407               	retlw	7
  2119  1028  3408               	retlw	8
  2120  1029  3409               	retlw	9
  2121  102A  3406               	retlw	6
  2122  102B  3404               	retlw	4
  2123  102C  3405               	retlw	5
  2124  102D  3427               	retlw	39
  2125  102E  3428               	retlw	40
  2126  102F                     __end_of_CC2500_registers_address:	
  2127  102F                     _CC2500_rfSettings:	
  2128  102F  3407               	retlw	7
  2129  1030  3407               	retlw	7
  2130  1031  3430               	retlw	48
  2131  1032  3487               	retlw	135
  2132  1033  346B               	retlw	107
  2133  1034  34F8               	retlw	248
  2134  1035  347F               	retlw	127
  2135  1036  343F               	retlw	63
  2136  1037  3409               	retlw	9
  2137  1038  3400               	retlw	0
  2138  1039  345C               	retlw	92
  2139  103A  34A7               	retlw	167
  2140  103B  3462               	retlw	98
  2141  103C  3486               	retlw	134
  2142  103D  3483               	retlw	131
  2143  103E  3403               	retlw	3
  2144  103F  3422               	retlw	34
  2145  1040  34F8               	retlw	248
  2146  1041  3400               	retlw	0
  2147  1042  3444               	retlw	68
  2148  1043  34B6               	retlw	182
  2149  1044  3410               	retlw	16
  2150  1045  3418               	retlw	24
  2151  1046  341D               	retlw	29
  2152  1047  341C               	retlw	28
  2153  1048  34C7               	retlw	199
  2154  1049  3400               	retlw	0
  2155  104A  34B2               	retlw	178
  2156  104B  34EA               	retlw	234
  2157  104C  340A               	retlw	10
  2158  104D  3400               	retlw	0
  2159  104E  3411               	retlw	17
  2160  104F  3459               	retlw	89
  2161  1050  3488               	retlw	136
  2162  1051  3431               	retlw	49
  2163  1052  340B               	retlw	11
  2164  1053  342F               	retlw	47
  2165  1054  342E               	retlw	46
  2166  1055  3406               	retlw	6
  2167  1056  3404               	retlw	4
  2168  1057  3405               	retlw	5
  2169  1058  3400               	retlw	0
  2170  1059  3430               	retlw	48
  2171  105A  34D3               	retlw	211
  2172  105B  3491               	retlw	145
  2173  105C  3441               	retlw	65
  2174  105D  3400               	retlw	0
  2175  105E                     __end_of_CC2500_rfSettings:	
  2176  105E                     _CC2500_patable_vaule:	
  2177  105E  34FE               	retlw	254
  2178  105F  34FE               	retlw	254
  2179  1060  34FE               	retlw	254
  2180  1061  34FE               	retlw	254
  2181  1062  34FE               	retlw	254
  2182  1063  34FE               	retlw	254
  2183  1064  34FE               	retlw	254
  2184  1065  34FE               	retlw	254
  2185  1066                     __end_of_CC2500_patable_vaule:	
  2186                           
  2187                           	psect	nvBANK0
  2188  006F                     __pnvBANK0:	
  2189  006F                     _product:	
  2190  006F                     	ds	1
  2191                           
  2192                           	psect	nvBANK1
  2193  00EE                     __pnvBANK1:	
  2194  00EE                     _WDT:	
  2195  00EE                     	ds	1
  2196  000C                     _PORTA	set	12
  2197  000D                     _PORTB	set	13
  2198  000E                     _PORTC	set	14
  2199  0015                     _TMR0	set	21
  2200  005F                     _GIE	set	95
  2201  005C                     _INTE	set	92
  2202  0059                     _INTF	set	89
  2203  005B                     _IOCIE	set	91
  2204  0058                     _IOCIF	set	88
  2205  005E                     _PEIE	set	94
  2206  0060                     _RA0	set	96
  2207  0063                     _RA3	set	99
  2208  0064                     _RA4	set	100
  2209  0066                     _RA6	set	102
  2210  0067                     _RA7	set	103
  2211  0068                     _RB0	set	104
  2212  0069                     _RB1	set	105
  2213  006B                     _RB3	set	107
  2214  006C                     _RB4	set	108
  2215  006D                     _RB5	set	109
  2216  0070                     _RC0	set	112
  2217  0071                     _RC1	set	113
  2218  0072                     _RC2	set	114
  2219  0074                     _RC4	set	116
  2220  0075                     _RC5	set	117
  2221  0076                     _RC6	set	118
  2222  0077                     _RC7	set	119
  2223  005D                     _TMR0IE	set	93
  2224  005A                     _TMR0IF	set	90
  2225  009D                     _ADCON0	set	157
  2226  009E                     _ADCON1	set	158
  2227  009C                     _ADRESH	set	156
  2228  009B                     _ADRESL	set	155
  2229  0095                     _OPTION_REG	set	149
  2230  0099                     _OSCCON	set	153
  2231  008C                     _TRISA	set	140
  2232  008D                     _TRISB	set	141
  2233  008E                     _TRISC	set	142
  2234  0097                     _WDTCON	set	151
  2235  04E9                     _GO_nDONE	set	1257
  2236  0117                     _FVRCON	set	279
  2237  010C                     _LATA	set	268
  2238  010D                     _LATB	set	269
  2239  010E                     _LATC	set	270
  2240  018C                     _ANSELA	set	396
  2241  018D                     _ANSELB	set	397
  2242  018E                     _ANSELC	set	398
  2243  0192                     _PMADRH	set	402
  2244  0191                     _PMADRL	set	401
  2245  0196                     _PMCON2	set	406
  2246  0194                     _PMDATH	set	404
  2247  0193                     _PMDATL	set	403
  2248  0CAE                     _CFGS	set	3246
  2249  0CAC                     _FREE	set	3244
  2250  0CAD                     _LWLO	set	3245
  2251  0CA8                     _RD	set	3240
  2252  0CA9                     _WR	set	3241
  2253  0CAA                     _WREN	set	3242
  2254  1068                     _WPUB0	set	4200
  2255  1069                     _WPUB1	set	4201
  2256  106A                     _WPUB2	set	4202
  2257  0396                     _IOCBF	set	918
  2258  0395                     _IOCBN	set	917
  2259  0394                     _IOCBP	set	916
  2260  1CB2                     _IOCBF2	set	7346
  2261                           
  2262                           ; #config settings
  2263  0000                     
  2264                           	psect	cinit
  2265  0018                     start_initialization:	
  2266  0018                     __initialization:	
  2267                           
  2268                           ; Clear objects allocated to BITCOMMON
  2269  0018  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2270                           
  2271                           ; Clear objects allocated to COMMON
  2272  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2273  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2274  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2275  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2276  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK1
  2279  001E  30A0               	movlw	low __pbssBANK1
  2280  001F  0084               	movwf	4
  2281  0020  3000               	movlw	high __pbssBANK1
  2282  0021  0085               	movwf	5
  2283  0022  304E               	movlw	78
  2284  0023  319C  2471  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK2
  2287  0026  3020               	movlw	low __pbssBANK2
  2288  0027  0084               	movwf	4
  2289  0028  3001               	movlw	high __pbssBANK2
  2290  0029  0085               	movwf	5
  2291  002A  304B               	movlw	75
  2292  002B  319C  2471  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK3
  2295  002E  30A0               	movlw	low __pbssBANK3
  2296  002F  0084               	movwf	4
  2297  0030  3001               	movlw	high __pbssBANK3
  2298  0031  0085               	movwf	5
  2299  0032  304C               	movlw	76
  2300  0033  319C  2471  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Clear objects allocated to BANK4
  2303  0036  3040               	movlw	low __pbssBANK4
  2304  0037  0084               	movwf	4
  2305  0038  3002               	movlw	high __pbssBANK4
  2306  0039  0085               	movwf	5
  2307  003A  3012               	movlw	18
  2308  003B  319C  2471  3180   	fcall	clear_ram0
  2309                           
  2310                           ; Initialize objects allocated to BANK4
  2311  003E  3008               	movlw	low __pidataBANK4
  2312  003F  0084               	movwf	4
  2313  0040  3091               	movlw	(high __pidataBANK4)| (0+128)
  2314  0041  0085               	movwf	5
  2315  0042  3020               	movlw	low __pdataBANK4
  2316  0043  0086               	movwf	6
  2317  0044  3002               	movlw	high __pdataBANK4
  2318  0045  0087               	movwf	7
  2319  0046  3020               	movlw	32
  2320  0047  319C  246B         	fcall	init_ram
  2321  0049                     end_of_initialization:	
  2322                           ;End of C runtime variable initialization code
  2323                           
  2324  0049                     __end_of__initialization:	
  2325  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2326  004A  0020               	movlb	0
  2327  004B  3196  2E60         	ljmp	_main	;jump to C main() function
  2328                           
  2329                           	psect	bitbssCOMMON
  2330  03E8                     __pbitbssCOMMON:	
  2331  03E8                     _Receive_OK:	
  2332  03E8                     	ds	1
  2333  03E9                     _Transceive_OK:	
  2334  03E9                     	ds	1
  2335                           
  2336                           	psect	bssCOMMON
  2337  0078                     __pbssCOMMON:	
  2338  0078                     _Sw:	
  2339  0078                     	ds	2
  2340  007A                     _DelayOff:	
  2341  007A                     	ds	1
  2342  007B                     _DimmerLights:	
  2343  007B                     	ds	1
  2344  007C                     _DimmerLightsIntr:	
  2345  007C                     	ds	1
  2346                           
  2347                           	psect	bssBANK1
  2348  00A0                     __pbssBANK1:	
  2349  00A0                     _myMain:	
  2350  00A0                     	ds	22
  2351  00B6                     _Buz1:	
  2352  00B6                     	ds	12
  2353  00C2                     _RF1:	
  2354  00C2                     	ds	5
  2355  00C7                     _RF_Count:	
  2356  00C7                     	ds	2
  2357  00C9                     _CRC:	
  2358  00C9                     	ds	1
  2359  00CA                     _Dimmer:	
  2360  00CA                     	ds	1
  2361  00CB                     _DimmerLights11:	
  2362  00CB                     	ds	1
  2363  00CC                     _DimmerLights22:	
  2364  00CC                     	ds	1
  2365  00CD                     _DimmerLights33:	
  2366  00CD                     	ds	1
  2367  00CE                     _DimmerLightsIntrIOC:	
  2368  00CE                     	ds	1
  2369  00CF                     _LED:	
  2370  00CF                     	ds	1
  2371  00D0                     _RFSW:	
  2372  00D0                     	ds	1
  2373  00D1                     _RSSI:	
  2374  00D1                     	ds	1
  2375  00D2                     _Rx_Length:	
  2376  00D2                     	ds	1
  2377  00D3                     _SPI0Buffer:	
  2378  00D3                     	ds	1
  2379  00D4                     _Tx_Length:	
  2380  00D4                     	ds	1
  2381  00D5                     _r_address:	
  2382  00D5                     	ds	1
  2383  00D6                     _r_data:	
  2384  00D6                     	ds	1
  2385  00D7                     _s_data:	
  2386  00D7                     	ds	1
  2387  00D8                     _Temp1:	
  2388  00D8                     	ds	14
  2389  00E6                     _Dimmer1:	
  2390  00E6                     	ds	3
  2391  00E9                     __WDT:	
  2392  00E9                     	ds	2
  2393  00EB                     _RFSW1:	
  2394  00EB                     	ds	1
  2395  00EC                     _RFSW2:	
  2396  00EC                     	ds	1
  2397  00ED                     _RFSW3:	
  2398  00ED                     	ds	1
  2399                           
  2400                           	psect	bssBANK2
  2401  0120                     __pbssBANK2:	
  2402  0120                     _RF_Data:	
  2403  0120                     	ds	21
  2404  0135                     _Timer0:	
  2405  0135                     	ds	8
  2406  013D                     _DimmerLights1:	
  2407  013D                     	ds	15
  2408  014C                     _DlySw1:	
  2409  014C                     	ds	5
  2410  0151                     _DlySw2:	
  2411  0151                     	ds	5
  2412  0156                     _DlySw3:	
  2413  0156                     	ds	5
  2414  015B                     _VarErrLED:	
  2415  015B                     	ds	4
  2416  015F                     _VarLED1:	
  2417  015F                     	ds	4
  2418  0163                     _VarLED2:	
  2419  0163                     	ds	4
  2420  0167                     _VarLED3:	
  2421  0167                     	ds	4
  2422                           
  2423                           	psect	bssBANK3
  2424  01A0                     __pbssBANK3:	
  2425  01A0                     _Memory:	
  2426  01A0                     	ds	37
  2427  01C5                     _DimmerLights2:	
  2428  01C5                     	ds	15
  2429  01D4                     _DimmerLights3:	
  2430  01D4                     	ds	15
  2431  01E3                     _Sw1:	
  2432  01E3                     	ds	9
  2433                           
  2434                           	psect	bssBANK4
  2435  0240                     __pbssBANK4:	
  2436  0240                     _Sw2:	
  2437  0240                     	ds	9
  2438  0249                     _Sw3:	
  2439  0249                     	ds	9
  2440                           
  2441                           	psect	dataBANK4
  2442  0220                     __pdataBANK4:	
  2443  0220                     __product:	
  2444  0220                     	ds	32
  2445                           
  2446                           	psect	clrtext
  2447  1C71                     clear_ram0:	
  2448                           ;	Called with FSR0 containing the base address, and
  2449                           ;	WREG with the size to clear
  2450                           
  2451  1C71  0064               	clrwdt	;clear the watchdog before getting into this loop
  2452  1C72                     clrloop0:	
  2453  1C72  0180               	clrf	0	;clear RAM location pointed to by FSR
  2454  1C73  3101               	addfsr 0,1
  2455  1C74  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2456  1C75  2C72               	goto	clrloop0	;have we reached the end yet?
  2457  1C76  3400               	retlw	0	;all done for this memory range, return
  2458                           
  2459                           	psect	inittext
  2460  1C6B                     init_ram:	
  2461  1C6B  00FE               	movwf	126
  2462  1C6C                     initloop:	
  2463  1C6C  0012               	moviw fsr0++
  2464  1C6D  001E               	movwi fsr1++
  2465  1C6E  0BFE               	decfsz	126,f
  2466  1C6F  2C6C               	goto	initloop
  2467  1C70  3400               	retlw	0
  2468                           
  2469                           	psect	cstackCOMMON
  2470  0070                     __pcstackCOMMON:	
  2471  0070                     ?_Timeout_Counter:	
  2472  0070                     ?_set_TimeoutCleared:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_WriteByte:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_WriteCommand:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_CC2500_ReadStatus:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_CC2500_ReadByte:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_PowerRST:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_CC2500_InitSetREG:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_CC2500_InitPATable:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_CC2500_ClearTXFIFO:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_CC2500_ClearRXFIFO:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_CC2500_FrequencyCabr:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_SIDLEMode:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_DlyOff_Initialization:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_DlyOff_Main:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_setTxData:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setDimmerLights_Initialization:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_Dimmer_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_setMemory_GO:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_setDimmerLights_Main:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setDimmerLights_ERROR:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setLED_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setLED_Main:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_Fosc_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_IO_Set:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_TMR0_Set:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_ADC_Set:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_INT_Set:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_IOC_Set:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_WDT_Set:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_IOC_ISR:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_TMR0_ISR:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_INT_ISR:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_setRF_ReceiveGO:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ??_setRF_ReceiveGO:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_Flash_Memory_Write:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_Flash_Memory_Modify:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_WDT_Clearing:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_myMain_Initialization:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Temp_Initialization:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Switch_Initialization:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_RF_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_getTemp_AD:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_my_Main:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Temp_Main:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_Switch_Main:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_RF_Main:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_setTemp_Enable:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setSw_Enable:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_setRF_Enable:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_setTemp_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setTemp_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setOverTemp_Exceptions:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setRF_Initialization:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setRF_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_RF_RxDisable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_getRxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setLog_Code:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setControl_Lights_Table:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setRFSW_Control:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setRFSW_AdjControl:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setRF_DimmerValue:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setSw_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setSw_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_Sw_DimmerOnFunc:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Sw_DimmerAdjFunc:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_Sw_DimmerOffFunc:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_Buzzer_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Buzzer_Main:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_CC2500_TxData:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_CC2500_RxData:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_CC2500_PowerOnInitial:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_DelayOffPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_DelayOff_Initialization:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_DelayOff_Main:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_DimmerIntrIOCPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ??_DimmerIntrIOCPointSelect:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_DimmerIntrPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ??_DimmerIntrPointSelect:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setDimmerLights_IntrControl:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_DimmerLightsPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DimmerLights_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_DimmerLights_Close:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_DimmerLights_Main:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_DimmerLights_Exceptions:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setDimmerLights_AdjRF:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_LedPointSelect:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_LED_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_LED_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Mcu_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_ISR:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setDimmerReClock:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Flash_Memory_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_Flash_Memory_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_Flash_Memory_Unlock:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_Flash_Memory_Erasing:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_WDT_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setRF_Learn:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_RfSWPointSelect:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_TouchPower:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_SwPointSelect:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_DelayTimejudge:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_getDimmerLights_StatusFlag:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_getPercentValue:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_Flash_Memory_Read:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_setPercentValue:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     setRF_ReceiveGO@command:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793                           
  2794                           ; 1 bytes @ 0x0
  2795  0070                     	ds	1
  2796  0071                     ??_INT_ISR:	
  2797  0071                     DimmerIntrIOCPointSelect@lights:	
  2798                           ; 0 bytes @ 0x1
  2799                           
  2800  0071                     DimmerIntrPointSelect@lights:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803                           
  2804                           ; 1 bytes @ 0x1
  2805  0071                     	ds	1
  2806  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2807  0072                     ??_setDimmerLights_IntrControl:	
  2808                           ; 0 bytes @ 0x2
  2809                           
  2810  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2811                           ; 0 bytes @ 0x2
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0x2
  2815  0072                     	ds	1
  2816  0073                     ??_IOC_ISR:	
  2817  0073                     ??_setDimmerReClock:	
  2818                           ; 0 bytes @ 0x3
  2819                           
  2820                           
  2821                           ; 0 bytes @ 0x3
  2822  0073                     	ds	3
  2823  0076                     setDimmerLights_IntrControl@lights:	
  2824                           
  2825                           ; 1 bytes @ 0x6
  2826  0076                     	ds	1
  2827  0077                     ??_TMR0_ISR:	
  2828  0077                     ??_ISR:	
  2829                           ; 0 bytes @ 0x7
  2830                           
  2831                           
  2832                           ; 0 bytes @ 0x7
  2833  0077                     	ds	1
  2834                           
  2835                           	psect	cstackBANK0
  2836  0020                     __pcstackBANK0:	
  2837  0020                     ??_Timeout_Counter:	
  2838  0020                     ??_set_TimeoutCleared:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_CC2500_WriteByte:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_CC2500_ReadByte:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ?_DelayTime_1us:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setTxData:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Dimmer_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_getDimmerLights_StatusFlag:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_setMemory_GO:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_Fosc_Set:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_IO_Set:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_TMR0_Set:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_ADC_Set:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_INT_Set:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_IOC_Set:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_WDT_Set:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Flash_Memory_Read:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Flash_Memory_Write:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_WDT_Clearing:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_myMain_Initialization:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_Temp_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_setTemp_Enable:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setRF_Enable:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_setTemp_Initialization:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setRF_Initialization:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_Buzzer_Initialization:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_Buzzer_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_DelayOffPointSelect:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_DimmerLightsPointSelect:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_LedPointSelect:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_Flash_Memory_Unlock:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ??_Flash_Memory_Erasing:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_WDT_Main:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_setRF_Learn:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_RfSWPointSelect:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_TouchPower:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_SwPointSelect:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ?___bmul:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ?_getBuz_GO:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ?_getAD:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ?___awdiv:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958  0020                     ?___ftpack:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     getAD@adcon1:	
  2962                           ; 3 bytes @ 0x0
  2963                           
  2964  0020                     setTemp_Enable@command:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0020                     setRF_Learn@command:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0020                     setRF_Enable@command:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0020                     SwPointSelect@sw:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0020                     ___bmul@multiplicand:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0020                     DelayTime_1us@count:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0020                     ___awdiv@divisor:	
  2983                           ; 2 bytes @ 0x0
  2984                           
  2985  0020                     ___ftpack@arg:	
  2986                           ; 2 bytes @ 0x0
  2987                           
  2988                           
  2989                           ; 3 bytes @ 0x0
  2990  0020                     	ds	1
  2991  0021                     ?_setSw_Status:	
  2992  0021                     ??_RF_Initialization:	
  2993                           ; 0 bytes @ 0x1
  2994                           
  2995  0021                     ??_setSw_Enable:	
  2996                           ; 0 bytes @ 0x1
  2997                           
  2998  0021                     ??_Mcu_Initialization:	
  2999                           ; 0 bytes @ 0x1
  3000                           
  3001  0021                     ??___bmul:	
  3002                           ; 0 bytes @ 0x1
  3003                           
  3004  0021                     CC2500_WriteByte@loop_a:	
  3005                           ; 0 bytes @ 0x1
  3006                           
  3007  0021                     CC2500_ReadByte@loop_b:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0021                     DelayOffPointSelect@sw:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0021                     DimmerLightsPointSelect@lights:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0021                     getDimmerLights_StatusFlag@Status:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0021                     LedPointSelect@led:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0021                     Flash_Memory_Read@i:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0021                     Flash_Memory_Write@i:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0021                     RfSWPointSelect@sw:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031  0021                     setSw_Enable@command:	
  3032                           ; 1 bytes @ 0x1
  3033                           
  3034  0021                     setSw_Status@command:	
  3035                           ; 1 bytes @ 0x1
  3036                           
  3037                           
  3038                           ; 1 bytes @ 0x1
  3039  0021                     	ds	1
  3040  0022                     ??_CC2500_WriteCommand:	
  3041  0022                     ??_CC2500_ReadStatus:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ??_DelayTime_1us:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_CC2500_WriteREG:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ??_DlyOff_Initialization:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ??_setSw_Status:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ?_setRFSW_Status:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ?_setDimmerLights_Trigger:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_Switch:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     ??_setDimmerLights_Initialization:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     ?_setDimmerLights_TriggerERROR:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0022                     ?_setLED:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0022                     ??_setLED_Main:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0022                     ??_getBuz_GO:	
  3078                           ; 0 bytes @ 0x2
  3079                           
  3080  0022                     ?_setDimmerLights_AdjGo:	
  3081                           ; 0 bytes @ 0x2
  3082                           
  3083  0022                     ?_setDimmerLights_TriggerAdj:	
  3084                           ; 0 bytes @ 0x2
  3085                           
  3086  0022                     CC2500_WriteREG@value:	
  3087                           ; 0 bytes @ 0x2
  3088                           
  3089  0022                     DlyOff_Initialization@sw:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     _getDimmerLights_StatusFlag$2156:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setDimmerLights_TriggerERROR@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setDimmerLights_Switch@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setDimmerLights_AdjGo@command:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     setDimmerLights_Trigger@command:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     setDimmerLights_TriggerAdj@command:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     setLED@command:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113  0022                     Flash_Memory_Read@address:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116  0022                     setMemory_GO@command:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0022                     setRFSW_Status@command:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0022                     setSw_Status@sw:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0022                     ___bmul@product:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0022                     DelayTime_1us@i:	
  3129                           ; 1 bytes @ 0x2
  3130                           
  3131  0022                     ___awdiv@dividend:	
  3132                           ; 2 bytes @ 0x2
  3133                           
  3134                           
  3135                           ; 2 bytes @ 0x2
  3136  0022                     	ds	1
  3137  0023                     ??_CC2500_WriteREG:	
  3138  0023                     ??_setRFSW_Status:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setDimmerLights_Trigger:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setDimmerLights_Switch:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_TriggerERROR:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setLED:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     ??_DelayOff_Initialization:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     ??_DimmerLights_Close:	
  3157                           ; 0 bytes @ 0x3
  3158                           
  3159  0023                     ??_setDimmerLights_AdjGo:	
  3160                           ; 0 bytes @ 0x3
  3161                           
  3162  0023                     ??_setDimmerLights_TriggerAdj:	
  3163                           ; 0 bytes @ 0x3
  3164                           
  3165  0023                     ??_getAD:	
  3166                           ; 0 bytes @ 0x3
  3167                           
  3168  0023                     CC2500_WriteCommand@command:	
  3169                           ; 0 bytes @ 0x3
  3170                           
  3171  0023                     CC2500_ReadStatus@status_addr:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     setDimmerLights_Initialization@lights:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setDimmerLights_TriggerERROR@lights:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setDimmerLights_Switch@lights:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     setDimmerLights_AdjGo@lights:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     setDimmerLights_Trigger@lights:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setDimmerLights_TriggerAdj@lights:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setLED@led:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     getAD@adcon0:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     Flash_Memory_Read@ret:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setRFSW_Status@sw:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     ___bmul@multiplier:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207  0023                     ___ftpack@exp:	
  3208                           ; 1 bytes @ 0x3
  3209                           
  3210                           
  3211                           ; 1 bytes @ 0x3
  3212  0023                     	ds	1
  3213  0024                     ??_CC2500_ClearTXFIFO:	
  3214  0024                     ??_CC2500_ClearRXFIFO:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     ??_CC2500_SIDLEMode:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_DelayTimejudge:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ?_setDimmerLights:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ??_setDimmerLights_ERROR:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_setLED_Initialization:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_Flash_Memory_Modify:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_getTemp_AD:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_RF_RxDisable:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_setSw_Initialization:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??_Sw_DimmerAdjFunc:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     ??_CC2500_TxData:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_CC2500_RxData:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ??_DimmerLights_Initialization:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??___awdiv:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     CC2500_WriteREG@w_addr:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     setDimmerLights@status:	
  3263                           ; 1 bytes @ 0x4
  3264                           
  3265  0024                     setLED_Initialization@led:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268  0024                     setLED_Main@led:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271  0024                     setSw_Initialization@sw:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274  0024                     ___ftpack@sign:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277  0024                     getBuz_GO@i:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280  0024                     DelayTime_1us@j:	
  3281                           ; 2 bytes @ 0x4
  3282                           
  3283                           
  3284                           ; 2 bytes @ 0x4
  3285  0024                     	ds	1
  3286  0025                     ??_CC2500_InitSetREG:	
  3287  0025                     ??_CC2500_InitPATable:	
  3288                           ; 0 bytes @ 0x5
  3289                           
  3290  0025                     ??_setDimmerLights:	
  3291                           ; 0 bytes @ 0x5
  3292                           
  3293  0025                     ??_Switch_Initialization:	
  3294                           ; 0 bytes @ 0x5
  3295                           
  3296  0025                     ??___ftpack:	
  3297                           ; 0 bytes @ 0x5
  3298                           
  3299  0025                     ??_LED_Initialization:	
  3300                           ; 0 bytes @ 0x5
  3301                           
  3302  0025                     ??_LED_Main:	
  3303                           ; 0 bytes @ 0x5
  3304                           
  3305  0025                     CC2500_TxData@loop_e:	
  3306                           ; 0 bytes @ 0x5
  3307                           
  3308  0025                     CC2500_RxData@loop_f:	
  3309                           ; 1 bytes @ 0x5
  3310                           
  3311  0025                     setDimmerLights_ERROR@lights:	
  3312                           ; 1 bytes @ 0x5
  3313                           
  3314  0025                     Flash_Memory_Modify@i:	
  3315                           ; 1 bytes @ 0x5
  3316                           
  3317  0025                     getTemp_AD@channel:	
  3318                           ; 1 bytes @ 0x5
  3319                           
  3320  0025                     _Sw_DimmerAdjFunc$5567:	
  3321                           ; 1 bytes @ 0x5
  3322                           
  3323  0025                     ___awdiv@counter:	
  3324                           ; 1 bytes @ 0x5
  3325                           
  3326                           
  3327                           ; 1 bytes @ 0x5
  3328  0025                     	ds	1
  3329  0026                     ??_CC2500_PowerRST:	
  3330  0026                     ??_CC2500_FrequencyCabr:	
  3331                           ; 0 bytes @ 0x6
  3332                           
  3333  0026                     ??_Flash_Memory_Main:	
  3334                           ; 0 bytes @ 0x6
  3335                           
  3336  0026                     CC2500_InitSetREG@temp1:	
  3337                           ; 0 bytes @ 0x6
  3338                           
  3339  0026                     CC2500_InitPATable@temp:	
  3340                           ; 1 bytes @ 0x6
  3341                           
  3342  0026                     DelayTimejudge@i:	
  3343                           ; 1 bytes @ 0x6
  3344                           
  3345  0026                     setDimmerLights@lights:	
  3346                           ; 1 bytes @ 0x6
  3347                           
  3348  0026                     _Sw_DimmerAdjFunc$5568:	
  3349                           ; 1 bytes @ 0x6
  3350                           
  3351  0026                     ___awdiv@sign:	
  3352                           ; 1 bytes @ 0x6
  3353                           
  3354                           
  3355                           ; 1 bytes @ 0x6
  3356  0026                     	ds	1
  3357  0027                     CC2500_InitSetREG@temp2:	
  3358  0027                     CC2500_InitPATable@loop_d:	
  3359                           ; 1 bytes @ 0x7
  3360                           
  3361  0027                     DelayTimejudge@j:	
  3362                           ; 1 bytes @ 0x7
  3363                           
  3364  0027                     _Sw_DimmerAdjFunc$5569:	
  3365                           ; 1 bytes @ 0x7
  3366                           
  3367  0027                     ___awdiv@quotient:	
  3368                           ; 1 bytes @ 0x7
  3369                           
  3370                           
  3371                           ; 2 bytes @ 0x7
  3372  0027                     	ds	1
  3373  0028                     ?___awtoft:	
  3374  0028                     CC2500_InitSetREG@loop_c:	
  3375                           ; 3 bytes @ 0x8
  3376                           
  3377  0028                     DelayTimejudge@k:	
  3378                           ; 1 bytes @ 0x8
  3379                           
  3380  0028                     Sw_DimmerAdjFunc@Idle:	
  3381                           ; 1 bytes @ 0x8
  3382                           
  3383  0028                     ___awtoft@c:	
  3384                           ; 1 bytes @ 0x8
  3385                           
  3386                           
  3387                           ; 2 bytes @ 0x8
  3388  0028                     	ds	1
  3389  0029                     ?_setBuz:	
  3390  0029                     ??_CC2500_PowerOnInitial:	
  3391                           ; 0 bytes @ 0x9
  3392                           
  3393  0029                     DelayTimejudge@value:	
  3394                           ; 0 bytes @ 0x9
  3395                           
  3396  0029                     Sw_DimmerAdjFunc@sw:	
  3397                           ; 1 bytes @ 0x9
  3398                           
  3399  0029                     setBuz@time:	
  3400                           ; 1 bytes @ 0x9
  3401                           
  3402                           
  3403                           ; 2 bytes @ 0x9
  3404  0029                     	ds	1
  3405  002A                     ?_setDelayOff_GO:	
  3406  002A                     setDelayOff_GO@command:	
  3407                           ; 0 bytes @ 0xA
  3408                           
  3409                           
  3410                           ; 1 bytes @ 0xA
  3411  002A                     	ds	1
  3412  002B                     ??_setBuz:	
  3413  002B                     ??___awtoft:	
  3414                           ; 0 bytes @ 0xB
  3415                           
  3416  002B                     setDelayOff_GO@value:	
  3417                           ; 0 bytes @ 0xB
  3418                           
  3419                           
  3420                           ; 1 bytes @ 0xB
  3421  002B                     	ds	1
  3422  002C                     ??_setDelayOff_GO:	
  3423  002C                     setBuz@count:	
  3424                           ; 0 bytes @ 0xC
  3425                           
  3426                           
  3427                           ; 1 bytes @ 0xC
  3428  002C                     	ds	1
  3429  002D                     ??_my_Main:	
  3430  002D                     ??_setLog_Code:	
  3431                           ; 0 bytes @ 0xD
  3432                           
  3433  002D                     ??_DimmerLights_Exceptions:	
  3434                           ; 0 bytes @ 0xD
  3435                           
  3436  002D                     DimmerLights_Exceptions@status:	
  3437                           ; 0 bytes @ 0xD
  3438                           
  3439  002D                     ___awtoft@sign:	
  3440                           ; 1 bytes @ 0xD
  3441                           
  3442                           
  3443                           ; 1 bytes @ 0xD
  3444  002D                     	ds	1
  3445  002E                     ??_setOverTemp_Exceptions:	
  3446  002E                     ?___ftdiv:	
  3447                           ; 0 bytes @ 0xE
  3448                           
  3449  002E                     ?___ftmul:	
  3450                           ; 3 bytes @ 0xE
  3451                           
  3452  002E                     setDelayOff_GO@sw:	
  3453                           ; 3 bytes @ 0xE
  3454                           
  3455  002E                     ___ftdiv@f2:	
  3456                           ; 1 bytes @ 0xE
  3457                           
  3458  002E                     ___ftmul@f1:	
  3459                           ; 3 bytes @ 0xE
  3460                           
  3461                           
  3462                           ; 3 bytes @ 0xE
  3463  002E                     	ds	1
  3464  002F                     setOverTemp_Exceptions@i:	
  3465                           
  3466                           ; 1 bytes @ 0xF
  3467  002F                     	ds	1
  3468  0030                     setOverTemp_Exceptions@command:	
  3469                           
  3470                           ; 1 bytes @ 0x10
  3471  0030                     	ds	1
  3472  0031                     ??_setTemp_Main:	
  3473  0031                     ___ftdiv@f1:	
  3474                           ; 0 bytes @ 0x11
  3475                           
  3476  0031                     ___ftmul@f2:	
  3477                           ; 3 bytes @ 0x11
  3478                           
  3479                           
  3480                           ; 3 bytes @ 0x11
  3481  0031                     	ds	1
  3482  0032                     ??_Temp_Main:	
  3483                           
  3484                           ; 0 bytes @ 0x12
  3485  0032                     	ds	2
  3486  0034                     ??___ftdiv:	
  3487  0034                     ??___ftmul:	
  3488                           ; 0 bytes @ 0x14
  3489                           
  3490                           
  3491                           ; 0 bytes @ 0x14
  3492  0034                     	ds	4
  3493  0038                     ___ftdiv@cntr:	
  3494  0038                     ___ftmul@exp:	
  3495                           ; 1 bytes @ 0x18
  3496                           
  3497                           
  3498                           ; 1 bytes @ 0x18
  3499  0038                     	ds	1
  3500  0039                     ___ftdiv@f3:	
  3501  0039                     ___ftmul@f3_as_product:	
  3502                           ; 3 bytes @ 0x19
  3503                           
  3504                           
  3505                           ; 3 bytes @ 0x19
  3506  0039                     	ds	3
  3507  003C                     ___ftdiv@exp:	
  3508  003C                     ___ftmul@cntr:	
  3509                           ; 1 bytes @ 0x1C
  3510                           
  3511                           
  3512                           ; 1 bytes @ 0x1C
  3513  003C                     	ds	1
  3514  003D                     ___ftdiv@sign:	
  3515  003D                     ___ftmul@sign:	
  3516                           ; 1 bytes @ 0x1D
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x1D
  3520  003D                     	ds	1
  3521  003E                     ?___ftadd:	
  3522  003E                     ___ftadd@f1:	
  3523                           ; 3 bytes @ 0x1E
  3524                           
  3525                           
  3526                           ; 3 bytes @ 0x1E
  3527  003E                     	ds	3
  3528  0041                     ___ftadd@f2:	
  3529                           
  3530                           ; 3 bytes @ 0x21
  3531  0041                     	ds	3
  3532  0044                     ??___ftadd:	
  3533                           
  3534                           ; 0 bytes @ 0x24
  3535  0044                     	ds	4
  3536  0048                     ___ftadd@sign:	
  3537                           
  3538                           ; 1 bytes @ 0x28
  3539  0048                     	ds	1
  3540  0049                     ___ftadd@exp2:	
  3541                           
  3542                           ; 1 bytes @ 0x29
  3543  0049                     	ds	1
  3544  004A                     ___ftadd@exp1:	
  3545                           
  3546                           ; 1 bytes @ 0x2A
  3547  004A                     	ds	1
  3548  004B                     ?___fttol:	
  3549  004B                     ___fttol@f1:	
  3550                           ; 4 bytes @ 0x2B
  3551                           
  3552                           
  3553                           ; 3 bytes @ 0x2B
  3554  004B                     	ds	4
  3555  004F                     ??___fttol:	
  3556                           
  3557                           ; 0 bytes @ 0x2F
  3558  004F                     	ds	4
  3559  0053                     ___fttol@sign1:	
  3560                           
  3561                           ; 1 bytes @ 0x33
  3562  0053                     	ds	1
  3563  0054                     ___fttol@lval:	
  3564                           
  3565                           ; 4 bytes @ 0x34
  3566  0054                     	ds	4
  3567  0058                     ___fttol@exp1:	
  3568                           
  3569                           ; 1 bytes @ 0x38
  3570  0058                     	ds	1
  3571  0059                     ??_getPercentValue:	
  3572  0059                     ??_setPercentValue:	
  3573                           ; 0 bytes @ 0x39
  3574                           
  3575  0059                     setPercentValue@value:	
  3576                           ; 0 bytes @ 0x39
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x39
  3580  0059                     	ds	1
  3581  005A                     setPercentValue@i:	
  3582                           
  3583                           ; 3 bytes @ 0x3A
  3584  005A                     	ds	1
  3585  005B                     getPercentValue@value:	
  3586                           
  3587                           ; 1 bytes @ 0x3B
  3588  005B                     	ds	1
  3589  005C                     getPercentValue@i:	
  3590                           
  3591                           ; 3 bytes @ 0x3C
  3592  005C                     	ds	1
  3593  005D                     ?_setRF_DimmerLights:	
  3594  005D                     ??_Flash_Memory_Initialization:	
  3595                           ; 0 bytes @ 0x3D
  3596                           
  3597  005D                     setRF_DimmerLights@on:	
  3598                           ; 0 bytes @ 0x3D
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0x3D
  3602  005D                     	ds	1
  3603  005E                     ??_setRF_DimmerLights:	
  3604  005E                     Flash_Memory_Initialization@i:	
  3605                           ; 0 bytes @ 0x3E
  3606                           
  3607                           
  3608                           ; 1 bytes @ 0x3E
  3609  005E                     	ds	1
  3610  005F                     ??_setDimmerLights_AdjRF:	
  3611                           
  3612                           ; 0 bytes @ 0x3F
  3613  005F                     	ds	1
  3614  0060                     setDimmerLights_AdjRF@lights:	
  3615  0060                     setRF_DimmerLights@status:	
  3616                           ; 1 bytes @ 0x40
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x40
  3620  0060                     	ds	1
  3621  0061                     ??_setRF_DimmerValue:	
  3622  0061                     setRF_DimmerLights@lights:	
  3623                           ; 0 bytes @ 0x41
  3624                           
  3625                           
  3626                           ; 1 bytes @ 0x41
  3627  0061                     	ds	1
  3628  0062                     ??_DlyOff_Main:	
  3629  0062                     ?_setDimmerLights_Adj:	
  3630                           ; 0 bytes @ 0x42
  3631                           
  3632  0062                     ??_setRFSW_Control:	
  3633                           ; 0 bytes @ 0x42
  3634                           
  3635  0062                     ??_Sw_DimmerOnFunc:	
  3636                           ; 0 bytes @ 0x42
  3637                           
  3638  0062                     ??_Sw_DimmerOffFunc:	
  3639                           ; 0 bytes @ 0x42
  3640                           
  3641  0062                     setDimmerLights_Adj@status:	
  3642                           ; 0 bytes @ 0x42
  3643                           
  3644                           
  3645                           ; 1 bytes @ 0x42
  3646  0062                     	ds	1
  3647  0063                     ??_setDimmerLights_Adj:	
  3648  0063                     setRFSW_Control@sw:	
  3649                           ; 0 bytes @ 0x43
  3650                           
  3651  0063                     setRF_DimmerValue@lights:	
  3652                           ; 1 bytes @ 0x43
  3653                           
  3654  0063                     _Sw_DimmerOnFunc$5557:	
  3655                           ; 1 bytes @ 0x43
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x43
  3659  0063                     	ds	1
  3660  0064                     ??_setRFSW_AdjControl:	
  3661  0064                     DlyOff_Main@sw:	
  3662                           ; 0 bytes @ 0x44
  3663                           
  3664  0064                     setDimmerLights_Adj@lights:	
  3665                           ; 1 bytes @ 0x44
  3666                           
  3667  0064                     _Sw_DimmerOnFunc$5558:	
  3668                           ; 1 bytes @ 0x44
  3669                           
  3670  0064                     Sw_DimmerOffFunc@sw:	
  3671                           ; 1 bytes @ 0x44
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0x44
  3675  0064                     	ds	1
  3676  0065                     ??_setDimmerLights_Main:	
  3677  0065                     ??_DelayOff_Main:	
  3678                           ; 0 bytes @ 0x45
  3679                           
  3680  0065                     _Sw_DimmerOnFunc$5559:	
  3681                           ; 0 bytes @ 0x45
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x45
  3685  0065                     	ds	1
  3686  0066                     _setDimmerLights_Main$2151:	
  3687  0066                     setRFSW_AdjControl@sw:	
  3688                           ; 1 bytes @ 0x46
  3689                           
  3690  0066                     Sw_DimmerOnFunc@Idle:	
  3691                           ; 1 bytes @ 0x46
  3692                           
  3693                           
  3694                           ; 1 bytes @ 0x46
  3695  0066                     	ds	1
  3696  0067                     ??_setRF_Main:	
  3697  0067                     ??_getRxData:	
  3698                           ; 0 bytes @ 0x47
  3699                           
  3700  0067                     ??_setControl_Lights_Table:	
  3701                           ; 0 bytes @ 0x47
  3702                           
  3703  0067                     _setDimmerLights_Main$2152:	
  3704                           ; 0 bytes @ 0x47
  3705                           
  3706  0067                     Sw_DimmerOnFunc@sw:	
  3707                           ; 1 bytes @ 0x47
  3708                           
  3709                           
  3710                           ; 1 bytes @ 0x47
  3711  0067                     	ds	1
  3712  0068                     ??_setSw_Main:	
  3713  0068                     _setDimmerLights_Main$2153:	
  3714                           ; 0 bytes @ 0x48
  3715                           
  3716  0068                     _setRF_Main$4670:	
  3717                           ; 1 bytes @ 0x48
  3718                           
  3719                           
  3720                           ; 1 bytes @ 0x48
  3721  0068                     	ds	1
  3722  0069                     ??_RF_Main:	
  3723  0069                     setDimmerLights_Main@clear:	
  3724                           ; 0 bytes @ 0x49
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x49
  3728  0069                     	ds	1
  3729  006A                     setDimmerLights_Main@lights:	
  3730  006A                     setSw_Main@sw:	
  3731                           ; 1 bytes @ 0x4A
  3732                           
  3733                           
  3734                           ; 1 bytes @ 0x4A
  3735  006A                     	ds	1
  3736  006B                     ??_Switch_Main:	
  3737  006B                     ??_DimmerLights_Main:	
  3738                           ; 0 bytes @ 0x4B
  3739                           
  3740  006B                     ?_main:	
  3741                           ; 0 bytes @ 0x4B
  3742                           
  3743  006B                     main@argc:	
  3744                           ; 2 bytes @ 0x4B
  3745                           
  3746                           
  3747                           ; 2 bytes @ 0x4B
  3748  006B                     	ds	2
  3749  006D                     main@argv:	
  3750                           
  3751                           ; 2 bytes @ 0x4D
  3752  006D                     	ds	2
  3753  006F                     ??_main:	
  3754                           
  3755                           	psect	maintext
  3756  1660                     __pmaintext:	
  3757                           ; 0 bytes @ 0x4F
  3758 ;;
  3759 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3760 ;;
  3761 ;; *************** function _main *****************
  3762 ;; Defined at:
  3763 ;;		line 7 in file "../src/Main_B1.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  argc            2   75[BANK0 ] int 
  3766 ;;  argv            2   77[BANK0 ] PTR PTR unsigned char 
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  2   75[BANK0 ] int 
  3771 ;; Registers used:
  3772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 17F/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3778 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;Total ram usage:        4 bytes
  3783 ;; Hardware stack levels required when called:   15
  3784 ;; This function calls:
  3785 ;;		_Buzzer_Initialization
  3786 ;;		_Buzzer_Main
  3787 ;;		_CC2500_PowerOnInitial
  3788 ;;		_DelayOff_Initialization
  3789 ;;		_DelayOff_Main
  3790 ;;		_DimmerLights_Initialization
  3791 ;;		_DimmerLights_Main
  3792 ;;		_Flash_Memory_Initialization
  3793 ;;		_Flash_Memory_Main
  3794 ;;		_LED_Initialization
  3795 ;;		_LED_Main
  3796 ;;		_Mcu_Initialization
  3797 ;;		_RF_Initialization
  3798 ;;		_RF_Main
  3799 ;;		_Switch_Initialization
  3800 ;;		_Switch_Main
  3801 ;;		_Temp_Initialization
  3802 ;;		_Temp_Main
  3803 ;;		_WDT_Main
  3804 ;;		_getTemp_AD
  3805 ;;		_myMain_Initialization
  3806 ;;		_my_Main
  3807 ;; This function is called by:
  3808 ;;		Startup code after reset
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _main
  3814  1660                     _main:	
  3815                           
  3816                           ;Main_B1.c: 9: myMain_Initialization();
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3820  1660  319D  2589  3196   	fcall	_myMain_Initialization
  3821                           
  3822                           ;Main_B1.c: 10: Mcu_Initialization();
  3823  1663  319E  267B  3196   	fcall	_Mcu_Initialization
  3824                           
  3825                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3826  1666  3184  246A  3196   	fcall	_Flash_Memory_Initialization
  3827                           
  3828                           ;Main_B1.c: 12: LED_Initialization();
  3829  1669  319D  25B8  3196   	fcall	_LED_Initialization
  3830                           
  3831                           ;Main_B1.c: 13: Buzzer_Initialization();
  3832  166C  319C  2443  3196   	fcall	_Buzzer_Initialization
  3833                           
  3834                           ;Main_B1.c: 15: ;;
  3835                           ;Main_B1.c: 16: Temp_Initialization();
  3836  166F  319C  244F  3196   	fcall	_Temp_Initialization
  3837                           
  3838                           ;Main_B1.c: 17: ;;
  3839                           ;Main_B1.c: 18: ;;
  3840                           ;Main_B1.c: 19: DelayOff_Initialization();
  3841  1672  319C  24D7  3196   	fcall	_DelayOff_Initialization
  3842                           
  3843                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3844  1675  3191  2128  3196   	fcall	_DimmerLights_Initialization
  3845                           
  3846                           ;Main_B1.c: 22: ;;
  3847                           ;Main_B1.c: 23: ;;
  3848                           ;Main_B1.c: 24: ;;
  3849                           ;Main_B1.c: 25: Switch_Initialization();
  3850  1678  319E  2609  3196   	fcall	_Switch_Initialization
  3851                           
  3852                           ;Main_B1.c: 26: RF_Initialization();
  3853  167B  319C  2446  3196   	fcall	_RF_Initialization
  3854                           
  3855                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3856  167E  319E  2666  3196   	fcall	_CC2500_PowerOnInitial
  3857  1681                     l8686:	
  3858                           ;Main_B1.c: 28: ;;
  3859                           ;Main_B1.c: 31: while (1) {
  3860                           
  3861                           
  3862                           ;Main_B1.c: 33: if (myMain.PowerON) {
  3863  1681  0021               	movlb	1	; select bank1
  3864  1682  1C20               	btfss	_myMain^(0+128),0
  3865  1683  2E88               	goto	l8690
  3866                           
  3867                           ;Main_B1.c: 35: ;;
  3868                           ;Main_B1.c: 39: ;;
  3869                           ;Main_B1.c: 43: getTemp_AD(0x09);
  3870  1684  3009               	movlw	9
  3871  1685  3193  23BF  3196   	fcall	_getTemp_AD
  3872  1688                     l8690:	
  3873                           ;Main_B1.c: 47: ;;
  3874                           
  3875                           
  3876                           ;Main_B1.c: 62: }
  3877                           ;Main_B1.c: 65: if (myMain.T0_Timerout) {
  3878  1688  0021               	movlb	1	; select bank1
  3879  1689  1CA0               	btfss	_myMain^(0+128),1
  3880  168A  2E81               	goto	l8686
  3881                           
  3882                           ;Main_B1.c: 66: myMain.T0_Timerout = 0;
  3883  168B  10A0               	bcf	_myMain^(0+128),1
  3884                           
  3885                           ;Main_B1.c: 67: my_Main();
  3886  168C  3195  253D  3196   	fcall	_my_Main
  3887                           
  3888                           ;Main_B1.c: 68: WDT_Main();
  3889  168F  319F  2770  3196   	fcall	_WDT_Main
  3890                           
  3891                           ;Main_B1.c: 69: ;;
  3892                           ;Main_B1.c: 70: ;;
  3893                           ;Main_B1.c: 71: if (myMain.PowerON) {
  3894  1692  0021               	movlb	1	; select bank1
  3895  1693  1C20               	btfss	_myMain^(0+128),0
  3896  1694  2E81               	goto	l8686
  3897                           
  3898                           ;Main_B1.c: 72: Flash_Memory_Main();
  3899  1695  3190  20A9  3196   	fcall	_Flash_Memory_Main
  3900                           
  3901                           ;Main_B1.c: 74: LED_Main();
  3902  1698  319D  25C8  3196   	fcall	_LED_Main
  3903                           
  3904                           ;Main_B1.c: 75: Buzzer_Main();
  3905  169B  3195  25CB  3196   	fcall	_Buzzer_Main
  3906                           
  3907                           ;Main_B1.c: 77: ;;
  3908                           ;Main_B1.c: 78: Temp_Main();
  3909  169E  319C  2452  3196   	fcall	_Temp_Main
  3910                           
  3911                           ;Main_B1.c: 79: ;;
  3912                           ;Main_B1.c: 80: ;;
  3913                           ;Main_B1.c: 82: ;;
  3914                           ;Main_B1.c: 83: DimmerLights_Main();
  3915  16A1  319D  255C  3196   	fcall	_DimmerLights_Main
  3916                           
  3917                           ;Main_B1.c: 84: Switch_Main();
  3918  16A4  319C  24FB  3196   	fcall	_Switch_Main
  3919                           
  3920                           ;Main_B1.c: 85: ;;
  3921                           ;Main_B1.c: 86: ;;
  3922                           ;Main_B1.c: 88: RF_Main();
  3923  16A7  319C  2449  3196   	fcall	_RF_Main
  3924                           
  3925                           ;Main_B1.c: 89: DelayOff_Main();
  3926  16AA  319C  24E3  3196   	fcall	_DelayOff_Main
  3927                           
  3928                           ;Main_B1.c: 90: ;;
  3929  16AD  2E81               	goto	l8686
  3930  16AE                     __end_of_main:	
  3931                           ;Main_B1.c: 91: }
  3932                           ;Main_B1.c: 92: }
  3933                           ;Main_B1.c: 110: }
  3934                           ;Main_B1.c: 111: return (0);
  3935                           ;	Return value of _main is never used
  3936                           
  3937                           
  3938                           	psect	text1
  3939  153D                     __ptext1:	
  3940 ;; *************** function _my_Main *****************
  3941 ;; Defined at:
  3942 ;;		line 128 in file "../src/Main_B1.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;		None               void
  3949 ;; Registers used:
  3950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    7
  3963 ;; This function calls:
  3964 ;;		_setBuz
  3965 ;;		_setRF_Enable
  3966 ;;		_setSw_Enable
  3967 ;;		_setTemp_Enable
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function _my_Main
  3975  153D                     _my_Main:	
  3976                           
  3977                           ;Main_B1.c: 130: if (myMain.PowerON == 0) {
  3978                           
  3979                           ;incstack = 0
  3980                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3981  153D  0021               	movlb	1	; select bank1
  3982  153E  1820               	btfsc	_myMain^(0+128),0
  3983  153F  2D6A               	goto	l8070
  3984                           
  3985                           ;Main_B1.c: 131: myMain.PowerCount++;
  3986  1540  3001               	movlw	1
  3987  1541  07A1               	addwf	(_myMain^(0+128)+1),f
  3988  1542  3000               	movlw	0
  3989  1543  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3990                           
  3991                           ;Main_B1.c: 132: if (myMain.PowerCount == 150)
  3992  1544  3001               	movlw	1
  3993  1545  3EA0               	addlw	_myMain& (0+255)
  3994  1546  0086               	movwf	6
  3995  1547  0187               	clrf	7
  3996  1548  3F40               	moviw [0]fsr1
  3997  1549  3A96               	xorlw	150
  3998  154A  1D03               	skipz
  3999  154B  2D4E               	goto	u7775
  4000  154C  3F41               	moviw [1]fsr1
  4001  154D  3A00               	xorlw	0
  4002  154E                     u7775:	
  4003  154E  1D03               	skipz
  4004  154F  0008               	return
  4005                           
  4006                           ;Main_B1.c: 133: {
  4007                           ;Main_B1.c: 134: myMain.PowerCount = 0;
  4008  1550  01A1               	clrf	(_myMain^(0+128)+1)
  4009  1551  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4010                           
  4011                           ;Main_B1.c: 135: myMain.PowerON = 1;
  4012  1552  1420               	bsf	_myMain^(0+128),0
  4013                           
  4014                           ;Main_B1.c: 138: setTemp_Enable(1);
  4015  1553  3001               	movlw	1
  4016  1554  319C  24A4  3195   	fcall	_setTemp_Enable
  4017                           
  4018                           ;Main_B1.c: 142: ;;
  4019                           ;Main_B1.c: 148: setBuz(3, 50);
  4020  1557  3032               	movlw	50
  4021  1558  0020               	movlb	0	; select bank0
  4022  1559  00A9               	movwf	setBuz@time
  4023  155A  3000               	movlw	0
  4024  155B  00AA               	movwf	setBuz@time+1
  4025  155C  3003               	movlw	3
  4026  155D  3197  27A7  3195   	fcall	_setBuz
  4027                           
  4028                           ;Main_B1.c: 149: myMain.SelfTest = 1;
  4029  1560  0021               	movlb	1	; select bank1
  4030  1561  1720               	bsf	_myMain^(0+128),6
  4031                           
  4032                           ;Main_B1.c: 151: setSw_Enable(1);
  4033  1562  3001               	movlw	1
  4034  1563  3191  21FC  3195   	fcall	_setSw_Enable
  4035                           
  4036                           ;Main_B1.c: 154: setRF_Enable(1);
  4037  1566  3001               	movlw	1
  4038  1567  319D  2521         	fcall	_setRF_Enable
  4039                           
  4040                           ;Main_B1.c: 158: }
  4041                           ;Main_B1.c: 159: } else {
  4042  1569  0008               	return
  4043  156A                     l8070:	
  4044                           
  4045                           ;Main_B1.c: 167: myMain.Count1++;
  4046  156A  3001               	movlw	1
  4047  156B  0021               	movlb	1	; select bank1
  4048  156C  07A5               	addwf	(_myMain^(0+128)+5),f
  4049  156D  3000               	movlw	0
  4050  156E  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4051                           
  4052                           ;Main_B1.c: 168: if (myMain.Count1 == 100)
  4053  156F  3005               	movlw	5
  4054  1570  3EA0               	addlw	_myMain& (0+255)
  4055  1571  0086               	movwf	6
  4056  1572  0187               	clrf	7
  4057  1573  3F40               	moviw [0]fsr1
  4058  1574  3A64               	xorlw	100
  4059  1575  1D03               	skipz
  4060  1576  2D79               	goto	u7785
  4061  1577  3F41               	moviw [1]fsr1
  4062  1578  3A00               	xorlw	0
  4063  1579                     u7785:	
  4064  1579  1D03               	skipz
  4065  157A  0008               	return
  4066                           
  4067                           ;Main_B1.c: 169: {
  4068                           ;Main_B1.c: 170: myMain.Count1 = 0;
  4069  157B  01A5               	clrf	(_myMain^(0+128)+5)
  4070  157C  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4071                           
  4072                           ;Main_B1.c: 183: if (myMain.Flag) {
  4073  157D  1DA0               	btfss	_myMain^(0+128),3
  4074  157E  2D81               	goto	l1684
  4075                           
  4076                           ;Main_B1.c: 184: myMain.Flag = 0;
  4077  157F  11A0               	bcf	_myMain^(0+128),3
  4078                           
  4079                           ;Main_B1.c: 193: } else {
  4080  1580  0008               	return
  4081  1581                     l1684:	
  4082                           
  4083                           ;Main_B1.c: 194: myMain.Flag = 1;
  4084  1581  15A0               	bsf	_myMain^(0+128),3
  4085  1582  0008               	return
  4086  1583                     __end_of_my_Main:	
  4087                           
  4088                           	psect	text2
  4089  1CA4                     __ptext2:	
  4090 ;; *************** function _setTemp_Enable *****************
  4091 ;; Defined at:
  4092 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;  command         1    wreg     unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  command         1    0[BANK0 ] unsigned char 
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		wreg
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4110 ;;Total ram usage:        1 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    5
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_my_Main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _setTemp_Enable
  4122  1CA4                     _setTemp_Enable:	
  4123                           
  4124                           ;incstack = 0
  4125                           ; Regs used in _setTemp_Enable: [wreg]
  4126                           ;setTemp_Enable@command stored from wreg
  4127  1CA4  0020               	movlb	0	; select bank0
  4128  1CA5  00A0               	movwf	setTemp_Enable@command
  4129                           
  4130                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4131  1CA6  0820               	movf	setTemp_Enable@command,w
  4132  1CA7  0021               	movlb	1	; select bank1
  4133  1CA8  1058               	bcf	_Temp1^(0+128),0
  4134  1CA9  1D03               	skipz
  4135  1CAA  1458               	bsf	_Temp1^(0+128),0
  4136  1CAB  0008               	return
  4137  1CAC                     __end_of_setTemp_Enable:	
  4138                           
  4139                           	psect	text3
  4140  1D89                     __ptext3:	
  4141 ;; *************** function _myMain_Initialization *****************
  4142 ;; Defined at:
  4143 ;;		line 116 in file "../src/Main_B1.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;		None               void
  4150 ;; Registers used:
  4151 ;;		wreg, fsr1l, fsr1h
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4161 ;;Total ram usage:        1 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    5
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_main
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _myMain_Initialization
  4173  1D89                     _myMain_Initialization:	
  4174                           
  4175                           ;Main_B1.c: 118: product = &_product;
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4179  1D89  3020               	movlw	__product& (0+255)
  4180  1D8A  0020               	movlb	0	; select bank0
  4181  1D8B  00A0               	movwf	??_myMain_Initialization
  4182  1D8C  0820               	movf	??_myMain_Initialization,w
  4183  1D8D  00EF               	movwf	_product
  4184                           
  4185                           ;Main_B1.c: 119: product->Data[20] = 211;
  4186  1D8E  30D3               	movlw	211
  4187  1D8F  00A0               	movwf	??_myMain_Initialization
  4188  1D90  086F               	movf	_product,w
  4189  1D91  3E14               	addlw	20
  4190  1D92  0086               	movwf	6
  4191  1D93  3002               	movlw	2	; select bank4/5
  4192  1D94  0087               	movwf	7
  4193  1D95  0820               	movf	??_myMain_Initialization,w
  4194  1D96  0081               	movwf	1
  4195  1D97  0008               	return
  4196  1D98                     __end_of_myMain_Initialization:	
  4197                           
  4198                           	psect	text4
  4199  13BF                     __ptext4:	
  4200 ;; *************** function _getTemp_AD *****************
  4201 ;; Defined at:
  4202 ;;		line 31 in file "../src/OverTemperature_B1.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  channel         1    wreg     unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  channel         1    5[BANK0 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;		None               void
  4209 ;; Registers used:
  4210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;Total ram usage:        2 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    7
  4223 ;; This function calls:
  4224 ;;		_getAD
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _getTemp_AD
  4232  13BF                     _getTemp_AD:	
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4236                           ;getTemp_AD@channel stored from wreg
  4237  13BF  0020               	movlb	0	; select bank0
  4238  13C0  00A5               	movwf	getTemp_AD@channel
  4239                           
  4240                           ;OverTemperature_B1.c: 32: if (Temp1.ADtoGO == 1) {
  4241  13C1  0021               	movlb	1	; select bank1
  4242  13C2  1D58               	btfss	_Temp1^(0+128),2
  4243  13C3  0008               	return
  4244                           
  4245                           ;OverTemperature_B1.c: 33: Temp1.ADRES = getAD(channel, 0xf0);
  4246  13C4  30F0               	movlw	240
  4247  13C5  0020               	movlb	0	; select bank0
  4248  13C6  00A4               	movwf	??_getTemp_AD
  4249  13C7  0824               	movf	??_getTemp_AD,w
  4250  13C8  00A0               	movwf	getAD@adcon1
  4251  13C9  0825               	movf	getTemp_AD@channel,w
  4252  13CA  3190  20E8  3193   	fcall	_getAD
  4253  13CD  0020               	movlb	0	; select bank0
  4254  13CE  0821               	movf	?_getAD+1,w
  4255  13CF  0021               	movlb	1	; select bank1
  4256  13D0  01E5               	clrf	((_Temp1+1)^(0+128)+12)
  4257  13D1  07E5               	addwf	((_Temp1+1)^(0+128)+12),f
  4258  13D2  0020               	movlb	0	; select bank0
  4259  13D3  0820               	movf	?_getAD,w
  4260  13D4  0021               	movlb	1	; select bank1
  4261  13D5  01E4               	clrf	(_Temp1^(0+128)+12)
  4262  13D6  07E4               	addwf	(_Temp1^(0+128)+12),f
  4263                           
  4264                           ;OverTemperature_B1.c: 34: if (Temp1.ADH[0] < Temp1.ADRES) {
  4265  13D7  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4266  13D8  0261               	subwf	((_Temp1+1)^(0+128)+8),w
  4267  13D9  1D03               	skipz
  4268  13DA  2BDD               	goto	u7745
  4269  13DB  0864               	movf	(_Temp1^(0+128)+12),w
  4270  13DC  0260               	subwf	(_Temp1^(0+128)+8),w
  4271  13DD                     u7745:	
  4272  13DD  1803               	skipnc
  4273  13DE  2BE6               	goto	l8046
  4274                           
  4275                           ;OverTemperature_B1.c: 35: Temp1.ADH[0] = Temp1.ADRES;
  4276  13DF  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4277  13E0  01E1               	clrf	((_Temp1+1)^(0+128)+8)
  4278  13E1  07E1               	addwf	((_Temp1+1)^(0+128)+8),f
  4279  13E2  0864               	movf	(_Temp1^(0+128)+12),w
  4280  13E3  01E0               	clrf	(_Temp1^(0+128)+8)
  4281  13E4  07E0               	addwf	(_Temp1^(0+128)+8),f
  4282                           
  4283                           ;OverTemperature_B1.c: 36: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4284  13E5  0008               	return
  4285  13E6                     l8046:	
  4286  13E6  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4287  13E7  0263               	subwf	((_Temp1+1)^(0+128)+10),w
  4288  13E8  1D03               	skipz
  4289  13E9  2BEC               	goto	u7755
  4290  13EA  0864               	movf	(_Temp1^(0+128)+12),w
  4291  13EB  0262               	subwf	(_Temp1^(0+128)+10),w
  4292  13EC                     u7755:	
  4293  13EC  1803               	skipnc
  4294  13ED  0008               	return
  4295                           
  4296                           ;OverTemperature_B1.c: 37: Temp1.ADH[1] = Temp1.ADRES;
  4297  13EE  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4298  13EF  01E3               	clrf	((_Temp1+1)^(0+128)+10)
  4299  13F0  07E3               	addwf	((_Temp1+1)^(0+128)+10),f
  4300  13F1  0864               	movf	(_Temp1^(0+128)+12),w
  4301  13F2  01E2               	clrf	(_Temp1^(0+128)+10)
  4302  13F3  07E2               	addwf	(_Temp1^(0+128)+10),f
  4303  13F4  0008               	return
  4304  13F5                     __end_of_getTemp_AD:	
  4305                           
  4306                           	psect	text5
  4307  10E8                     __ptext5:	
  4308 ;; *************** function _getAD *****************
  4309 ;; Defined at:
  4310 ;;		line 346 in file "../src/MCU_B1.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  adcon0          1    wreg     unsigned char 
  4313 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  2    0[BANK0 ] int 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4325 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;Total ram usage:        4 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    6
  4332 ;; This function calls:
  4333 ;;		_Timeout_Counter
  4334 ;;		_set_TimeoutCleared
  4335 ;; This function is called by:
  4336 ;;		_getTemp_AD
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function _getAD
  4342  10E8                     _getAD:	
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4346                           ;getAD@adcon0 stored from wreg
  4347  10E8  0020               	movlb	0	; select bank0
  4348  10E9  00A3               	movwf	getAD@adcon0
  4349                           
  4350                           ;MCU_B1.c: 347: ADCON0 = adcon0;
  4351  10EA  0823               	movf	getAD@adcon0,w
  4352  10EB  0021               	movlb	1	; select bank1
  4353  10EC  009D               	movwf	29	;volatile
  4354                           
  4355                           ;MCU_B1.c: 348: ADCON1 = adcon1;
  4356  10ED  0020               	movlb	0	; select bank0
  4357  10EE  0820               	movf	getAD@adcon1,w
  4358  10EF  0021               	movlb	1	; select bank1
  4359  10F0  009E               	movwf	30	;volatile
  4360                           
  4361                           ;MCU_B1.c: 349: GO_nDONE = 1;
  4362  10F1  149D               	bsf	29,1	;volatile
  4363                           
  4364                           ;MCU_B1.c: 350: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4365  10F2  28F6               	goto	l7584
  4366  10F3                     l7582:	
  4367                           
  4368                           ;MCU_B1.c: 351: Timeout_Counter();
  4369  10F3  319E  26A6  3190   	fcall	_Timeout_Counter
  4370  10F6                     l7584:	
  4371  10F6  0021               	movlb	1	; select bank1
  4372  10F7  1C9D               	btfss	29,1	;volatile
  4373  10F8  28FB               	goto	l7588
  4374  10F9  1D2F               	btfss	(_myMain^(0+128)+15),2
  4375  10FA  28F3               	goto	l7582
  4376  10FB                     l7588:	
  4377                           
  4378                           ;MCU_B1.c: 352: };
  4379                           ;MCU_B1.c: 353: set_TimeoutCleared();
  4380  10FB  3190  2066         	fcall	_set_TimeoutCleared
  4381                           
  4382                           ;MCU_B1.c: 354: return ((ADRESH*256)+ADRESL);
  4383  10FD  0021               	movlb	1	; select bank1
  4384  10FE  081C               	movf	28,w	;volatile
  4385  10FF  0020               	movlb	0	; select bank0
  4386  1100  01A1               	clrf	?_getAD+1
  4387  1101  07A1               	addwf	?_getAD+1,f
  4388  1102  0021               	movlb	1	; select bank1
  4389  1103  081B               	movf	27,w	;volatile
  4390  1104  0020               	movlb	0	; select bank0
  4391  1105  01A0               	clrf	?_getAD
  4392  1106  07A0               	addwf	?_getAD,f
  4393  1107  0008               	return
  4394  1108                     __end_of_getAD:	
  4395                           
  4396                           	psect	text6
  4397  1F70                     __ptext6:	
  4398 ;; *************** function _WDT_Main *****************
  4399 ;; Defined at:
  4400 ;;		line 906 in file "../src/MCU_B1.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;		None
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;		None
  4405 ;; Return value:  Size  Location     Type
  4406 ;;		None               void
  4407 ;; Registers used:
  4408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;Total ram usage:        1 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    6
  4421 ;; This function calls:
  4422 ;;		_WDT_Clearing
  4423 ;; This function is called by:
  4424 ;;		_main
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _WDT_Main
  4430  1F70                     _WDT_Main:	
  4431                           
  4432                           ;MCU_B1.c: 907: if (WDT->Enable == 1) {
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4436  1F70  0021               	movlb	1	; select bank1
  4437  1F71  086E               	movf	_WDT^(0+128),w
  4438  1F72  0086               	movwf	6
  4439  1F73  0187               	clrf	7
  4440  1F74  1C01               	btfss	1,0
  4441  1F75  0008               	return
  4442                           
  4443                           ;MCU_B1.c: 908: if (WDT->Count-- > 0) {
  4444  1F76  0A6E               	incf	_WDT^(0+128),w
  4445  1F77  0086               	movwf	6
  4446  1F78  0187               	clrf	7
  4447  1F79  3001               	movlw	1
  4448  1F7A  0281               	subwf	1,f
  4449  1F7B  0801               	movf	1,w
  4450  1F7C  3AFF               	xorlw	255
  4451  1F7D  1903               	skipnz
  4452  1F7E  0008               	return
  4453                           
  4454                           ;MCU_B1.c: 909: WDT->Count = 10;
  4455  1F7F  300A               	movlw	10
  4456  1F80  0020               	movlb	0	; select bank0
  4457  1F81  00A0               	movwf	??_WDT_Main
  4458  1F82  0021               	movlb	1	; select bank1
  4459  1F83  0A6E               	incf	_WDT^(0+128),w
  4460  1F84  0086               	movwf	6
  4461  1F85  0187               	clrf	7
  4462  1F86  0020               	movlb	0	; select bank0
  4463  1F87  0820               	movf	??_WDT_Main,w
  4464  1F88  0081               	movwf	1
  4465                           
  4466                           ;MCU_B1.c: 910: WDT_Clearing();
  4467  1F89  3180  2002         	fcall	_WDT_Clearing
  4468  1F8B  0008               	return
  4469  1F8C                     __end_of_WDT_Main:	
  4470                           
  4471                           	psect	text7
  4472  0002                     __ptext7:	
  4473 ;; *************** function _WDT_Clearing *****************
  4474 ;; Defined at:
  4475 ;;		line 916 in file "../src/MCU_B1.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		None
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    5
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_WDT_Main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _WDT_Clearing
  4505  0002                     _WDT_Clearing:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _WDT_Clearing: []
  4509  0002  0064               	clrwdt	;# 
  4510  0003  0008               	return
  4511  0004                     __end_of_WDT_Clearing:	
  4512                           
  4513                           	psect	text8
  4514  1C52                     __ptext8:	
  4515 ;; *************** function _Temp_Main *****************
  4516 ;; Defined at:
  4517 ;;		line 48 in file "../src/OverTemperature_B1.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;		None
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;		None
  4522 ;; Return value:  Size  Location     Type
  4523 ;;		None               void
  4524 ;; Registers used:
  4525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;Total ram usage:        0 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:   11
  4538 ;; This function calls:
  4539 ;;		_setTemp_Main
  4540 ;; This function is called by:
  4541 ;;		_main
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _Temp_Main
  4547  1C52                     _Temp_Main:	
  4548                           
  4549                           ;OverTemperature_B1.c: 50: setTemp_Main();
  4550                           
  4551                           ;incstack = 0
  4552                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4553  1C52  318C  245E         	fcall	_setTemp_Main
  4554  1C54  0008               	return
  4555  1C55                     __end_of_Temp_Main:	
  4556                           
  4557                           	psect	text9
  4558  0C5E                     __ptext9:	
  4559 ;; *************** function _setTemp_Main *****************
  4560 ;; Defined at:
  4561 ;;		line 55 in file "../src/OverTemperature_B1.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;		None               void
  4568 ;; Registers used:
  4569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:        1 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:   10
  4582 ;; This function calls:
  4583 ;;		_setOverTemp_Exceptions
  4584 ;; This function is called by:
  4585 ;;		_Temp_Main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _setTemp_Main
  4591  0C5E                     _setTemp_Main:	
  4592                           
  4593                           ;OverTemperature_B1.c: 56: if (Temp1.Enable == 1) {
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4597  0C5E  0021               	movlb	1	; select bank1
  4598  0C5F  1C58               	btfss	_Temp1^(0+128),0
  4599  0C60  0008               	return
  4600                           
  4601                           ;OverTemperature_B1.c: 57: if (Temp1.ADtoGO == 0) {
  4602  0C61  1958               	btfsc	_Temp1^(0+128),2
  4603  0C62  2C73               	goto	l8554
  4604                           
  4605                           ;OverTemperature_B1.c: 58: Temp1.Time++;
  4606  0C63  3001               	movlw	1
  4607  0C64  07D9               	addwf	(_Temp1^(0+128)+1),f
  4608  0C65  3000               	movlw	0
  4609  0C66  3DDA               	addwfc	((_Temp1+1)^(0+128)+1),f
  4610                           
  4611                           ;OverTemperature_B1.c: 60: {
  4612                           ;OverTemperature_B1.c: 61: if (1 == 1 && 1 == 1) {
  4613  0C67  3001               	movlw	1
  4614  0C68  025A               	subwf	((_Temp1+1)^(0+128)+1),w
  4615  0C69  30F4               	movlw	244
  4616  0C6A  1903               	skipnz
  4617  0C6B  0259               	subwf	(_Temp1^(0+128)+1),w
  4618  0C6C  1C03               	skipc
  4619  0C6D  0008               	return
  4620                           
  4621                           ;OverTemperature_B1.c: 62: Temp1.Time = 0;
  4622  0C6E  01D9               	clrf	(_Temp1^(0+128)+1)
  4623  0C6F  01DA               	clrf	((_Temp1+1)^(0+128)+1)
  4624                           
  4625                           ;OverTemperature_B1.c: 63: Temp1.ADtoGO = 0;
  4626  0C70  1158               	bcf	_Temp1^(0+128),2
  4627                           
  4628                           ;OverTemperature_B1.c: 64: Temp1.Safe = 0;
  4629  0C71  1258               	bcf	_Temp1^(0+128),4
  4630                           
  4631                           ;OverTemperature_B1.c: 65: } else {
  4632  0C72  0008               	return
  4633  0C73                     l8554:	
  4634                           ;OverTemperature_B1.c: 67: }
  4635                           ;OverTemperature_B1.c: 68: }
  4636                           ;OverTemperature_B1.c: 69: } else {
  4637                           
  4638                           ;OverTemperature_B1.c: 66: Temp1.Time = 1000;
  4639                           
  4640                           
  4641                           ;OverTemperature_B1.c: 70: Temp1.Time++;
  4642  0C73  3001               	movlw	1
  4643  0C74  07D9               	addwf	(_Temp1^(0+128)+1),f
  4644  0C75  3000               	movlw	0
  4645  0C76  3DDA               	addwfc	((_Temp1+1)^(0+128)+1),f
  4646                           
  4647                           ;OverTemperature_B1.c: 71: if (Temp1.Time >= 4)
  4648  0C77  3000               	movlw	0
  4649  0C78  025A               	subwf	((_Temp1+1)^(0+128)+1),w
  4650  0C79  3004               	movlw	4
  4651  0C7A  1903               	skipnz
  4652  0C7B  0259               	subwf	(_Temp1^(0+128)+1),w
  4653  0C7C  1C03               	skipc
  4654  0C7D  0008               	return
  4655                           
  4656                           ;OverTemperature_B1.c: 72: {
  4657                           ;OverTemperature_B1.c: 73: Temp1.Time = 0;
  4658  0C7E  01D9               	clrf	(_Temp1^(0+128)+1)
  4659  0C7F  01DA               	clrf	((_Temp1+1)^(0+128)+1)
  4660                           
  4661                           ;OverTemperature_B1.c: 74: Temp1.ADtoGO = 0;
  4662  0C80  1158               	bcf	_Temp1^(0+128),2
  4663                           
  4664                           ;OverTemperature_B1.c: 75: Temp1.AD = Temp1.ADH[1];
  4665  0C81  0863               	movf	((_Temp1+1)^(0+128)+10),w
  4666  0C82  01DF               	clrf	((_Temp1+1)^(0+128)+6)
  4667  0C83  07DF               	addwf	((_Temp1+1)^(0+128)+6),f
  4668  0C84  0862               	movf	(_Temp1^(0+128)+10),w
  4669  0C85  01DE               	clrf	(_Temp1^(0+128)+6)
  4670  0C86  07DE               	addwf	(_Temp1^(0+128)+6),f
  4671                           
  4672                           ;OverTemperature_B1.c: 76: if (Temp1.ERROR == 1) {
  4673  0C87  1CD8               	btfss	_Temp1^(0+128),1
  4674  0C88  2CA0               	goto	l8576
  4675                           
  4676                           ;OverTemperature_B1.c: 77: if (Temp1.AD >= 600) {
  4677  0C89  3002               	movlw	2
  4678  0C8A  025F               	subwf	((_Temp1+1)^(0+128)+6),w
  4679  0C8B  3058               	movlw	88
  4680  0C8C  1903               	skipnz
  4681  0C8D  025E               	subwf	(_Temp1^(0+128)+6),w
  4682  0C8E  1C03               	skipc
  4683  0C8F  2CB7               	goto	l8586
  4684                           
  4685                           ;OverTemperature_B1.c: 78: Temp1.Count++;
  4686  0C90  3001               	movlw	1
  4687  0C91  0020               	movlb	0	; select bank0
  4688  0C92  00B1               	movwf	??_setTemp_Main
  4689  0C93  0831               	movf	??_setTemp_Main,w
  4690  0C94  0021               	movlb	1	; select bank1
  4691  0C95  07DB               	addwf	(_Temp1^(0+128)+3),f
  4692                           
  4693                           ;OverTemperature_B1.c: 79: if (Temp1.Count >= 3) {
  4694  0C96  3003               	movlw	3
  4695  0C97  025B               	subwf	(_Temp1^(0+128)+3),w
  4696  0C98  1C03               	skipc
  4697  0C99  2CB9               	goto	l8588
  4698                           
  4699                           ;OverTemperature_B1.c: 80: Temp1.Count = 0;
  4700  0C9A  01DB               	clrf	(_Temp1^(0+128)+3)
  4701                           
  4702                           ;OverTemperature_B1.c: 81: setOverTemp_Exceptions(0);
  4703  0C9B  3000               	movlw	0
  4704  0C9C  3194  2430  318C   	fcall	_setOverTemp_Exceptions
  4705                           
  4706                           ;OverTemperature_B1.c: 82: }
  4707                           ;OverTemperature_B1.c: 83: } else {
  4708  0C9F  2CB9               	goto	l8588
  4709  0CA0                     l8576:	
  4710                           ;OverTemperature_B1.c: 85: }
  4711                           ;OverTemperature_B1.c: 86: } else {
  4712                           
  4713                           ;OverTemperature_B1.c: 84: Temp1.Count = 0;
  4714                           
  4715                           
  4716                           ;OverTemperature_B1.c: 87: if (Temp1.AD <= 550) {
  4717  0CA0  3002               	movlw	2
  4718  0CA1  025F               	subwf	((_Temp1+1)^(0+128)+6),w
  4719  0CA2  3027               	movlw	39
  4720  0CA3  1903               	skipnz
  4721  0CA4  025E               	subwf	(_Temp1^(0+128)+6),w
  4722  0CA5  1803               	skipnc
  4723  0CA6  2CB7               	goto	l8586
  4724                           
  4725                           ;OverTemperature_B1.c: 88: Temp1.Count++;
  4726  0CA7  3001               	movlw	1
  4727  0CA8  0020               	movlb	0	; select bank0
  4728  0CA9  00B1               	movwf	??_setTemp_Main
  4729  0CAA  0831               	movf	??_setTemp_Main,w
  4730  0CAB  0021               	movlb	1	; select bank1
  4731  0CAC  07DB               	addwf	(_Temp1^(0+128)+3),f
  4732                           
  4733                           ;OverTemperature_B1.c: 89: if (Temp1.Count >= 3) {
  4734  0CAD  3003               	movlw	3
  4735  0CAE  025B               	subwf	(_Temp1^(0+128)+3),w
  4736  0CAF  1C03               	skipc
  4737  0CB0  2CB9               	goto	l8588
  4738                           
  4739                           ;OverTemperature_B1.c: 90: Temp1.Count = 0;
  4740  0CB1  01DB               	clrf	(_Temp1^(0+128)+3)
  4741                           
  4742                           ;OverTemperature_B1.c: 91: setOverTemp_Exceptions(1);
  4743  0CB2  3001               	movlw	1
  4744  0CB3  3194  2430  318C   	fcall	_setOverTemp_Exceptions
  4745                           
  4746                           ;OverTemperature_B1.c: 92: }
  4747                           ;OverTemperature_B1.c: 93: } else {
  4748  0CB6  2CB9               	goto	l8588
  4749  0CB7                     l8586:	
  4750                           
  4751                           ;OverTemperature_B1.c: 94: Temp1.Count = 0;
  4752  0CB7  0021               	movlb	1	; select bank1
  4753  0CB8  01DB               	clrf	(_Temp1^(0+128)+3)
  4754  0CB9                     l8588:	
  4755                           
  4756                           ;OverTemperature_B1.c: 95: }
  4757                           ;OverTemperature_B1.c: 96: }
  4758                           ;OverTemperature_B1.c: 97: if (Temp1.ERROR == 0) {
  4759  0CB9  0021               	movlb	1	; select bank1
  4760  0CBA  1CD8               	btfss	_Temp1^(0+128),1
  4761                           
  4762                           ;OverTemperature_B1.c: 98: Temp1.Safe = 1;
  4763  0CBB  1658               	bsf	_Temp1^(0+128),4
  4764                           
  4765                           ;OverTemperature_B1.c: 99: }
  4766                           ;OverTemperature_B1.c: 100: product->Data[24]=Temp1.AD >> 8;
  4767  0CBC  085F               	movf	((_Temp1+1)^(0+128)+6),w
  4768  0CBD  0020               	movlb	0	; select bank0
  4769  0CBE  00B1               	movwf	??_setTemp_Main
  4770  0CBF  086F               	movf	_product,w
  4771  0CC0  3E18               	addlw	24
  4772  0CC1  0086               	movwf	6
  4773  0CC2  3002               	movlw	2	; select bank4/5
  4774  0CC3  0087               	movwf	7
  4775  0CC4  0831               	movf	??_setTemp_Main,w
  4776  0CC5  0081               	movwf	1
  4777                           
  4778                           ;OverTemperature_B1.c: 101: product->Data[25]=Temp1.AD;
  4779  0CC6  0021               	movlb	1	; select bank1
  4780  0CC7  085E               	movf	(_Temp1^(0+128)+6),w
  4781  0CC8  0020               	movlb	0	; select bank0
  4782  0CC9  00B1               	movwf	??_setTemp_Main
  4783  0CCA  086F               	movf	_product,w
  4784  0CCB  3E19               	addlw	25
  4785  0CCC  0086               	movwf	6
  4786  0CCD  3002               	movlw	2	; select bank4/5
  4787  0CCE  0087               	movwf	7
  4788  0CCF  0831               	movf	??_setTemp_Main,w
  4789  0CD0  0081               	movwf	1
  4790                           
  4791                           ;OverTemperature_B1.c: 102: Temp1.ADH[0] = 0;
  4792  0CD1  0021               	movlb	1	; select bank1
  4793  0CD2  01E0               	clrf	(_Temp1^(0+128)+8)
  4794  0CD3  01E1               	clrf	((_Temp1+1)^(0+128)+8)
  4795                           
  4796                           ;OverTemperature_B1.c: 103: Temp1.ADH[1] = 0;
  4797  0CD4  01E2               	clrf	(_Temp1^(0+128)+10)
  4798  0CD5  01E3               	clrf	((_Temp1+1)^(0+128)+10)
  4799  0CD6  0008               	return
  4800  0CD7                     __end_of_setTemp_Main:	
  4801                           
  4802                           	psect	text10
  4803  1430                     __ptext10:	
  4804 ;; *************** function _setOverTemp_Exceptions *****************
  4805 ;; Defined at:
  4806 ;;		line 110 in file "../src/OverTemperature_B1.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  command         1    wreg     unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  command         1   16[BANK0 ] unsigned char 
  4811 ;;  i               1   15[BANK0 ] unsigned char 
  4812 ;; Return value:  Size  Location     Type
  4813 ;;		None               void
  4814 ;; Registers used:
  4815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;Total ram usage:        3 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    9
  4828 ;; This function calls:
  4829 ;;		_DimmerLights_Exceptions
  4830 ;;		_setBuz
  4831 ;;		_setLED
  4832 ;;		_setRF_Enable
  4833 ;;		_setSw_Enable
  4834 ;; This function is called by:
  4835 ;;		_setTemp_Main
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _setOverTemp_Exceptions
  4841  1430                     _setOverTemp_Exceptions:	
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4845                           ;setOverTemp_Exceptions@command stored from wreg
  4846  1430  0020               	movlb	0	; select bank0
  4847  1431  00B0               	movwf	setOverTemp_Exceptions@command
  4848                           
  4849                           ;OverTemperature_B1.c: 111: char i = command == 1 ? 0 : 1;
  4850  1432  0830               	movf	setOverTemp_Exceptions@command,w
  4851  1433  3A01               	xorlw	1
  4852  1434  3000               	movlw	0
  4853  1435  1D03               	skipz
  4854  1436  3001               	movlw	1
  4855  1437  00AE               	movwf	??_setOverTemp_Exceptions
  4856  1438  082E               	movf	??_setOverTemp_Exceptions,w
  4857  1439  00AF               	movwf	setOverTemp_Exceptions@i
  4858                           
  4859                           ;OverTemperature_B1.c: 112: Temp1.ERROR = command;
  4860  143A  0830               	movf	setOverTemp_Exceptions@command,w
  4861  143B  0021               	movlb	1	; select bank1
  4862  143C  10D8               	bcf	_Temp1^(0+128),1
  4863  143D  1D03               	skipz
  4864  143E  14D8               	bsf	_Temp1^(0+128),1
  4865                           
  4866                           ;OverTemperature_B1.c: 113: Temp1.Safe = i;
  4867  143F  0020               	movlb	0	; select bank0
  4868  1440  082F               	movf	setOverTemp_Exceptions@i,w
  4869  1441  0021               	movlb	1	; select bank1
  4870  1442  1258               	bcf	_Temp1^(0+128),4
  4871  1443  1D03               	skipz
  4872  1444  1658               	bsf	_Temp1^(0+128),4
  4873                           
  4874                           ;OverTemperature_B1.c: 114: if (command == 1) {
  4875  1445  0020               	movlb	0	; select bank0
  4876  1446  0830               	movf	setOverTemp_Exceptions@command,w
  4877  1447  3A01               	xorlw	1
  4878  1448  1D03               	skipz
  4879  1449  2C4F               	goto	l8400
  4880                           
  4881                           ;OverTemperature_B1.c: 115: DimmerLights_Exceptions(1);
  4882  144A  3001               	movlw	1
  4883  144B  3197  2752  3194   	fcall	_DimmerLights_Exceptions
  4884                           
  4885                           ;OverTemperature_B1.c: 119: } else if (command == 0) {
  4886  144E  2C5B               	goto	l8404
  4887  144F                     l8400:	
  4888  144F  0020               	movlb	0	; select bank0
  4889  1450  08B0               	movf	setOverTemp_Exceptions@command,f
  4890  1451  1D03               	skipz
  4891  1452  2C5B               	goto	l8404
  4892                           
  4893                           ;OverTemperature_B1.c: 120: setBuz(2, 100);
  4894  1453  3064               	movlw	100
  4895  1454  00A9               	movwf	setBuz@time
  4896  1455  3000               	movlw	0
  4897  1456  00AA               	movwf	setBuz@time+1
  4898  1457  3002               	movlw	2
  4899  1458  3197  27A7  3194   	fcall	_setBuz
  4900  145B                     l8404:	
  4901                           
  4902                           ;OverTemperature_B1.c: 121: }
  4903                           ;OverTemperature_B1.c: 124: setLED(99, command + 10);
  4904  145B  0020               	movlb	0	; select bank0
  4905  145C  0830               	movf	setOverTemp_Exceptions@command,w
  4906  145D  3E0A               	addlw	10
  4907  145E  00AE               	movwf	??_setOverTemp_Exceptions
  4908  145F  082E               	movf	??_setOverTemp_Exceptions,w
  4909  1460  00A2               	movwf	setLED@command
  4910  1461  3063               	movlw	99
  4911  1462  318B  2376  3194   	fcall	_setLED
  4912                           
  4913                           ;OverTemperature_B1.c: 126: setSw_Enable(i);
  4914  1465  0020               	movlb	0	; select bank0
  4915  1466  082F               	movf	setOverTemp_Exceptions@i,w
  4916  1467  3191  21FC  3194   	fcall	_setSw_Enable
  4917                           
  4918                           ;OverTemperature_B1.c: 128: setRF_Enable(i);
  4919  146A  0020               	movlb	0	; select bank0
  4920  146B  082F               	movf	setOverTemp_Exceptions@i,w
  4921  146C  319D  2521         	fcall	_setRF_Enable
  4922  146E  0008               	return
  4923  146F                     __end_of_setOverTemp_Exceptions:	
  4924                           
  4925                           	psect	text11
  4926  11FC                     __ptext11:	
  4927 ;; *************** function _setSw_Enable *****************
  4928 ;; Defined at:
  4929 ;;		line 89 in file "../src/Switch_B1.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  command         1    wreg     unsigned char 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  command         1    1[BANK0 ] unsigned char 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;		None               void
  4936 ;; Registers used:
  4937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;Total ram usage:        1 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    6
  4950 ;; This function calls:
  4951 ;;		_SwPointSelect
  4952 ;; This function is called by:
  4953 ;;		_my_Main
  4954 ;;		_setOverTemp_Exceptions
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           
  4959                           ;psect for function _setSw_Enable
  4960  11FC                     _setSw_Enable:	
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4964                           ;setSw_Enable@command stored from wreg
  4965  11FC  0020               	movlb	0	; select bank0
  4966  11FD  00A1               	movwf	setSw_Enable@command
  4967                           
  4968                           ;Switch_B1.c: 92: SwPointSelect(1);
  4969  11FE  3001               	movlw	1
  4970  11FF  319F  27C6  3191   	fcall	_SwPointSelect
  4971                           
  4972                           ;Switch_B1.c: 93: Sw->Enable = command;
  4973  1202  0878               	movf	_Sw,w
  4974  1203  0086               	movwf	6
  4975  1204  0879               	movf	_Sw+1,w
  4976  1205  0087               	movwf	7
  4977  1206  0020               	movlb	0	; select bank0
  4978  1207  0821               	movf	setSw_Enable@command,w
  4979  1208  1001               	bcf	1,0
  4980  1209  1D03               	skipz
  4981  120A  1401               	bsf	1,0
  4982                           
  4983                           ;Switch_B1.c: 97: SwPointSelect(2);
  4984  120B  3002               	movlw	2
  4985  120C  319F  27C6  3191   	fcall	_SwPointSelect
  4986                           
  4987                           ;Switch_B1.c: 98: Sw->Enable = command;
  4988  120F  0878               	movf	_Sw,w
  4989  1210  0086               	movwf	6
  4990  1211  0879               	movf	_Sw+1,w
  4991  1212  0087               	movwf	7
  4992  1213  0020               	movlb	0	; select bank0
  4993  1214  0821               	movf	setSw_Enable@command,w
  4994  1215  1001               	bcf	1,0
  4995  1216  1D03               	skipz
  4996  1217  1401               	bsf	1,0
  4997                           
  4998                           ;Switch_B1.c: 102: SwPointSelect(3);
  4999  1218  3003               	movlw	3
  5000  1219  319F  27C6         	fcall	_SwPointSelect
  5001                           
  5002                           ;Switch_B1.c: 103: Sw->Enable = command;
  5003  121B  0878               	movf	_Sw,w
  5004  121C  0086               	movwf	6
  5005  121D  0879               	movf	_Sw+1,w
  5006  121E  0087               	movwf	7
  5007  121F  0020               	movlb	0	; select bank0
  5008  1220  0821               	movf	setSw_Enable@command,w
  5009  1221  1001               	bcf	1,0
  5010  1222  1D03               	skipz
  5011  1223  1401               	bsf	1,0
  5012  1224  0008               	return
  5013  1225                     __end_of_setSw_Enable:	
  5014                           
  5015                           	psect	text12
  5016  1D21                     __ptext12:	
  5017 ;; *************** function _setRF_Enable *****************
  5018 ;; Defined at:
  5019 ;;		line 193 in file "../src/RF_Control_B1.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  command         1    wreg     unsigned char 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  command         1    0[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;		None               void
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;Total ram usage:        1 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    5
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_my_Main
  5044 ;;		_setOverTemp_Exceptions
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _setRF_Enable
  5050  1D21                     _setRF_Enable:	
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _setRF_Enable: [wreg+status,2]
  5054                           ;setRF_Enable@command stored from wreg
  5055  1D21  0020               	movlb	0	; select bank0
  5056  1D22  00A0               	movwf	setRF_Enable@command
  5057                           
  5058                           ;RF_Control_B1.c: 194: RF1.Enable = command;
  5059  1D23  0820               	movf	setRF_Enable@command,w
  5060  1D24  0021               	movlb	1	; select bank1
  5061  1D25  1042               	bcf	_RF1^(0+128),0
  5062  1D26  1D03               	skipz
  5063  1D27  1442               	bsf	_RF1^(0+128),0
  5064                           
  5065                           ;RF_Control_B1.c: 195: RF1.Learn = 0;
  5066  1D28  1342               	bcf	_RF1^(0+128),6
  5067                           
  5068                           ;RF_Control_B1.c: 196: RF1.TransceiveGO = 0;
  5069  1D29  1142               	bcf	_RF1^(0+128),2
  5070                           
  5071                           ;RF_Control_B1.c: 197: RF1.RxStatus = 0;
  5072  1D2A  11C2               	bcf	_RF1^(0+128),3
  5073                           
  5074                           ;RF_Control_B1.c: 198: RF1.ReceiveGO = 0;
  5075  1D2B  10C2               	bcf	_RF1^(0+128),1
  5076                           
  5077                           ;RF_Control_B1.c: 199: RF1.DebounceTime = 0;
  5078  1D2C  01C6               	clrf	(_RF1^(0+128)+4)
  5079                           
  5080                           ;RF_Control_B1.c: 200: RF1.Debounce = 0;
  5081  1D2D  12C2               	bcf	_RF1^(0+128),5
  5082  1D2E  0008               	return
  5083  1D2F                     __end_of_setRF_Enable:	
  5084                           
  5085                           	psect	text13
  5086  1752                     __ptext13:	
  5087 ;; *************** function _DimmerLights_Exceptions *****************
  5088 ;; Defined at:
  5089 ;;		line 513 in file "../src/Dimmer_B1.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  status          1    wreg     unsigned char 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  status          1   13[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        1 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    8
  5110 ;; This function calls:
  5111 ;;		_getDimmerLights_StatusFlag
  5112 ;;		_setBuz
  5113 ;;		_setDimmerLights_ERROR
  5114 ;;		_setDimmerLights_TriggerERROR
  5115 ;; This function is called by:
  5116 ;;		_setOverTemp_Exceptions
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _DimmerLights_Exceptions
  5122  1752                     _DimmerLights_Exceptions:	
  5123                           
  5124                           ;incstack = 0
  5125                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5126                           ;DimmerLights_Exceptions@status stored from wreg
  5127  1752  0020               	movlb	0	; select bank0
  5128  1753  00AD               	movwf	DimmerLights_Exceptions@status
  5129                           
  5130                           ;Dimmer_B1.c: 514: if (status == 1) {
  5131  1754  082D               	movf	DimmerLights_Exceptions@status,w
  5132  1755  3A01               	xorlw	1
  5133  1756  1D03               	skipz
  5134  1757  2F68               	goto	l8334
  5135                           
  5136                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  5137  1758  319E  263E  3197   	fcall	_getDimmerLights_StatusFlag
  5138  175B  3A01               	xorlw	1
  5139  175C  1D03               	skipz
  5140  175D  2F80               	goto	l8342
  5141                           
  5142                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  5143  175E  302C               	movlw	44
  5144  175F  0020               	movlb	0	; select bank0
  5145  1760  00A9               	movwf	setBuz@time
  5146  1761  3001               	movlw	1
  5147  1762  00AA               	movwf	setBuz@time+1
  5148  1763  300A               	movlw	10
  5149  1764  3197  27A7  3197   	fcall	_setBuz
  5150  1767  2F80               	goto	l8342
  5151  1768                     l8334:	
  5152                           ;Dimmer_B1.c: 528: } else if (status == 2)
  5153                           
  5154                           ;Dimmer_B1.c: 526: setDimmerLights_ERROR(3);
  5155                           
  5156                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
  5157                           
  5158                           ;Dimmer_B1.c: 517: }
  5159                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  5160                           
  5161  1768  0020               	movlb	0	; select bank0
  5162  1769  082D               	movf	DimmerLights_Exceptions@status,w
  5163  176A  3A02               	xorlw	2
  5164  176B  1D03               	skipz
  5165  176C  2F7B               	goto	l8340
  5166                           
  5167                           ;Dimmer_B1.c: 529: {
  5168                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  5169  176D  302C               	movlw	44
  5170  176E  00A9               	movwf	setBuz@time
  5171  176F  3001               	movlw	1
  5172  1770  00AA               	movwf	setBuz@time+1
  5173  1771  3005               	movlw	5
  5174  1772  3197  27A7  3197   	fcall	_setBuz
  5175                           
  5176                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  5177  1775  0021               	movlb	1	; select bank1
  5178  1776  0A4A               	incf	_Dimmer^(0+128),w
  5179  1777  0086               	movwf	6
  5180  1778  0187               	clrf	7
  5181  1779  0801               	movf	1,w
  5182  177A  2F89               	goto	L1
  5183  177B                     l8340:	
  5184                           ;Dimmer_B1.c: 532: } else if (status == 3)
  5185                           
  5186  177B  0020               	movlb	0	; select bank0
  5187  177C  082D               	movf	DimmerLights_Exceptions@status,w
  5188  177D  3A03               	xorlw	3
  5189  177E  1D03               	skipz
  5190  177F  2F8C               	goto	l936
  5191  1780                     l8342:	
  5192                           
  5193                           ;Dimmer_B1.c: 533: {
  5194                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  5195  1780  3001               	movlw	1
  5196  1781  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5197                           
  5198                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
  5199  1784  3002               	movlw	2
  5200  1785  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5201                           
  5202                           ;Dimmer_B1.c: 541: setDimmerLights_ERROR(3);
  5203  1788  3003               	movlw	3
  5204  1789                     L1:	
  5205  1789  3196  26AE  3197   	fcall	_setDimmerLights_ERROR
  5206  178C                     l936:	
  5207                           
  5208                           ;Dimmer_B1.c: 543: }
  5209                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  5210  178C  0020               	movlb	0	; select bank0
  5211  178D  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5212  178E  3001               	movlw	1
  5213  178F  3192  22A4  3197   	fcall	_setDimmerLights_TriggerERROR
  5214                           
  5215                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
  5216  1792  0020               	movlb	0	; select bank0
  5217  1793  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5218  1794  3002               	movlw	2
  5219  1795  3192  22A4  3197   	fcall	_setDimmerLights_TriggerERROR
  5220                           
  5221                           ;Dimmer_B1.c: 552: setDimmerLights_TriggerERROR(3, 0);
  5222  1798  0020               	movlb	0	; select bank0
  5223  1799  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5224  179A  3003               	movlw	3
  5225  179B  3192  22A4  3197   	fcall	_setDimmerLights_TriggerERROR
  5226                           
  5227                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
  5228  179E  0021               	movlb	1	; select bank1
  5229  179F  1B20               	btfsc	_myMain^(0+128),6
  5230  17A0  0008               	return
  5231                           
  5232                           ;Dimmer_B1.c: 556: myMain.i = 0;
  5233  17A1  102E               	bcf	(_myMain^(0+128)+14),0
  5234                           
  5235                           ;Dimmer_B1.c: 557: myMain.j = 0;
  5236  17A2  10AE               	bcf	(_myMain^(0+128)+14),1
  5237                           
  5238                           ;Dimmer_B1.c: 558: myMain.k = 1;
  5239  17A3  152E               	bsf	(_myMain^(0+128)+14),2
  5240                           
  5241                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
  5242  17A4  01A7               	clrf	(_myMain^(0+128)+7)
  5243  17A5  01A8               	clrf	((_myMain+1)^(0+128)+7)
  5244  17A6  0008               	return
  5245  17A7                     __end_of_DimmerLights_Exceptions:	
  5246                           
  5247                           	psect	text14
  5248  12A4                     __ptext14:	
  5249 ;; *************** function _setDimmerLights_TriggerERROR *****************
  5250 ;; Defined at:
  5251 ;;		line 582 in file "../src/Dimmer_B1.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  lights          1    wreg     unsigned char 
  5254 ;;  command         1    2[BANK0 ] unsigned char 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  lights          1    3[BANK0 ] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;		None               void
  5259 ;; Registers used:
  5260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5266 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;Total ram usage:        2 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    6
  5273 ;; This function calls:
  5274 ;;		_DimmerLightsPointSelect
  5275 ;; This function is called by:
  5276 ;;		_DimmerLights_Exceptions
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _setDimmerLights_TriggerERROR
  5282  12A4                     _setDimmerLights_TriggerERROR:	
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  5286                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  5287  12A4  0020               	movlb	0	; select bank0
  5288  12A5  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  5289                           
  5290                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
  5291  12A6  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  5292  12A7  319F  2755         	fcall	_DimmerLightsPointSelect
  5293                           
  5294                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
  5295  12A9  087B               	movf	_DimmerLights,w
  5296  12AA  3E08               	addlw	8
  5297  12AB  0086               	movwf	6
  5298  12AC  3001               	movlw	1	; select bank2/3
  5299  12AD  0087               	movwf	7
  5300  12AE  0020               	movlb	0	; select bank0
  5301  12AF  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5302  12B0  1101               	bcf	1,2
  5303  12B1  1D03               	skipz
  5304  12B2  1501               	bsf	1,2
  5305                           
  5306                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
  5307  12B3  087B               	movf	_DimmerLights,w
  5308  12B4  3E08               	addlw	8
  5309  12B5  0086               	movwf	6
  5310  12B6  3001               	movlw	1	; select bank2/3
  5311  12B7  0087               	movwf	7
  5312  12B8  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5313  12B9  1081               	bcf	1,1
  5314  12BA  1D03               	skipz
  5315  12BB  1481               	bsf	1,1
  5316                           
  5317                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
  5318  12BC  087B               	movf	_DimmerLights,w
  5319  12BD  3E08               	addlw	8
  5320  12BE  0086               	movwf	6
  5321  12BF  3001               	movlw	1	; select bank2/3
  5322  12C0  0087               	movwf	7
  5323  12C1  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5324  12C2  1201               	bcf	1,4
  5325  12C3  1D03               	skipz
  5326  12C4  1601               	bsf	1,4
  5327                           
  5328                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
  5329  12C5  087B               	movf	_DimmerLights,w
  5330  12C6  3E08               	addlw	8
  5331  12C7  0086               	movwf	6
  5332  12C8  3001               	movlw	1	; select bank2/3
  5333  12C9  0087               	movwf	7
  5334  12CA  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5335  12CB  1181               	bcf	1,3
  5336  12CC  1D03               	skipz
  5337  12CD  1581               	bsf	1,3
  5338  12CE  0008               	return
  5339  12CF                     __end_of_setDimmerLights_TriggerERROR:	
  5340                           
  5341                           	psect	text15
  5342  16AE                     __ptext15:	
  5343 ;; *************** function _setDimmerLights_ERROR *****************
  5344 ;; Defined at:
  5345 ;;		line 564 in file "../src/Dimmer_B1.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  lights          1    wreg     unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  lights          1    5[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;Total ram usage:        2 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    7
  5366 ;; This function calls:
  5367 ;;		_DimmerLightsPointSelect
  5368 ;;		_setLED
  5369 ;;		_setRFSW_Status
  5370 ;;		_setSw_Status
  5371 ;; This function is called by:
  5372 ;;		_DimmerLights_Exceptions
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _setDimmerLights_ERROR
  5378  16AE                     _setDimmerLights_ERROR:	
  5379                           
  5380                           ;incstack = 0
  5381                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5382                           ;setDimmerLights_ERROR@lights stored from wreg
  5383  16AE  0020               	movlb	0	; select bank0
  5384  16AF  00A5               	movwf	setDimmerLights_ERROR@lights
  5385                           
  5386                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
  5387  16B0  0825               	movf	setDimmerLights_ERROR@lights,w
  5388  16B1  319F  2755  3196   	fcall	_DimmerLightsPointSelect
  5389                           
  5390                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
  5391  16B4  087B               	movf	_DimmerLights,w
  5392  16B5  0086               	movwf	6
  5393  16B6  3001               	movlw	1	; select bank2/3
  5394  16B7  0087               	movwf	7
  5395  16B8  1E81               	btfss	1,5
  5396  16B9  0008               	return
  5397                           
  5398                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
  5399  16BA  087B               	movf	_DimmerLights,w
  5400  16BB  0086               	movwf	6
  5401  16BC  3001               	movlw	1	; select bank2/3
  5402  16BD  0087               	movwf	7
  5403  16BE  1081               	bcf	1,1
  5404                           
  5405                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
  5406  16BF  087B               	movf	_DimmerLights,w
  5407  16C0  0086               	movwf	6
  5408  16C1  3001               	movlw	1	; select bank2/3
  5409  16C2  0087               	movwf	7
  5410  16C3  1181               	bcf	1,3
  5411                           
  5412                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
  5413  16C4  087B               	movf	_DimmerLights,w
  5414  16C5  0086               	movwf	6
  5415  16C6  3001               	movlw	1	; select bank2/3
  5416  16C7  0087               	movwf	7
  5417  16C8  1201               	bcf	1,4
  5418                           
  5419                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
  5420  16C9  087B               	movf	_DimmerLights,w
  5421  16CA  0086               	movwf	6
  5422  16CB  3001               	movlw	1	; select bank2/3
  5423  16CC  0087               	movwf	7
  5424  16CD  1301               	bcf	1,6
  5425                           
  5426                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
  5427  16CE  3007               	movlw	7
  5428  16CF  0020               	movlb	0	; select bank0
  5429  16D0  00A4               	movwf	??_setDimmerLights_ERROR
  5430  16D1  087B               	movf	_DimmerLights,w
  5431  16D2  3E02               	addlw	2
  5432  16D3  0086               	movwf	6
  5433  16D4  3001               	movlw	1	; select bank2/3
  5434  16D5  0087               	movwf	7
  5435  16D6  0824               	movf	??_setDimmerLights_ERROR,w
  5436  16D7  0081               	movwf	1
  5437                           
  5438                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  5439  16D8  087B               	movf	_DimmerLights,w
  5440  16D9  3E06               	addlw	6
  5441  16DA  0086               	movwf	6
  5442  16DB  3001               	movlw	1	; select bank2/3
  5443  16DC  0087               	movwf	7
  5444  16DD  0801               	movf	1,w
  5445  16DE  00A4               	movwf	??_setDimmerLights_ERROR
  5446  16DF  087B               	movf	_DimmerLights,w
  5447  16E0  3E04               	addlw	4
  5448  16E1  0086               	movwf	6
  5449  16E2  3001               	movlw	1	; select bank2/3
  5450  16E3  0087               	movwf	7
  5451  16E4  0824               	movf	??_setDimmerLights_ERROR,w
  5452  16E5  0081               	movwf	1
  5453                           
  5454                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
  5455  16E6  0021               	movlb	1	; select bank1
  5456  16E7  084A               	movf	_Dimmer^(0+128),w
  5457  16E8  0086               	movwf	6
  5458  16E9  0187               	clrf	7
  5459  16EA  1401               	bsf	1,0
  5460                           
  5461                           ;Dimmer_B1.c: 575: ;;
  5462                           ;Dimmer_B1.c: 576: setLED(lights, 1);
  5463  16EB  0020               	movlb	0	; select bank0
  5464  16EC  01A2               	clrf	setLED@command
  5465  16ED  0AA2               	incf	setLED@command,f
  5466  16EE  0825               	movf	setDimmerLights_ERROR@lights,w
  5467  16EF  318B  2376  3196   	fcall	_setLED
  5468                           
  5469                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
  5470  16F2  0020               	movlb	0	; select bank0
  5471  16F3  01A1               	clrf	setSw_Status@command
  5472  16F4  0825               	movf	setDimmerLights_ERROR@lights,w
  5473  16F5  319D  254D  3196   	fcall	_setSw_Status
  5474                           
  5475                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
  5476  16F8  0020               	movlb	0	; select bank0
  5477  16F9  01A2               	clrf	setRFSW_Status@command
  5478  16FA  0825               	movf	setDimmerLights_ERROR@lights,w
  5479  16FB  319D  253E         	fcall	_setRFSW_Status
  5480  16FD  0008               	return
  5481  16FE                     __end_of_setDimmerLights_ERROR:	
  5482                           
  5483                           	psect	text16
  5484  1C4F                     __ptext16:	
  5485 ;; *************** function _Temp_Initialization *****************
  5486 ;; Defined at:
  5487 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;		None               void
  5494 ;; Registers used:
  5495 ;;		status,2, status,0, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;Total ram usage:        0 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    6
  5508 ;; This function calls:
  5509 ;;		_setTemp_Initialization
  5510 ;; This function is called by:
  5511 ;;		_main
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _Temp_Initialization
  5517  1C4F                     _Temp_Initialization:	
  5518                           
  5519                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5523  1C4F  319C  244C         	fcall	_setTemp_Initialization
  5524  1C51  0008               	return
  5525  1C52                     __end_of_Temp_Initialization:	
  5526                           
  5527                           	psect	text17
  5528  1C4C                     __ptext17:	
  5529 ;; *************** function _setTemp_Initialization *****************
  5530 ;; Defined at:
  5531 ;;		line 43 in file "../src/OverTemperature_B1.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		None
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    5
  5552 ;; This function calls:
  5553 ;;		Nothing
  5554 ;; This function is called by:
  5555 ;;		_Temp_Initialization
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _setTemp_Initialization
  5561  1C4C                     _setTemp_Initialization:	
  5562                           
  5563                           ;OverTemperature_B1.c: 44: Temp1.Safe = 1;
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _setTemp_Initialization: []
  5567  1C4C  0021               	movlb	1	; select bank1
  5568  1C4D  1658               	bsf	_Temp1^(0+128),4
  5569  1C4E  0008               	return
  5570  1C4F                     __end_of_setTemp_Initialization:	
  5571                           
  5572                           	psect	text18
  5573  1CFB                     __ptext18:	
  5574 ;; *************** function _Switch_Main *****************
  5575 ;; Defined at:
  5576 ;;		line 65 in file "../src/Switch_B1.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;		None
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;		None
  5581 ;; Return value:  Size  Location     Type
  5582 ;;		None               void
  5583 ;; Registers used:
  5584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;Total ram usage:        0 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:   11
  5597 ;; This function calls:
  5598 ;;		_setSw_Main
  5599 ;; This function is called by:
  5600 ;;		_main
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           
  5605                           ;psect for function _Switch_Main
  5606  1CFB                     _Switch_Main:	
  5607                           
  5608                           ;Switch_B1.c: 67: setSw_Main(1);
  5609                           
  5610                           ;incstack = 0
  5611                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5612  1CFB  3001               	movlw	1
  5613  1CFC  3182  2224  319C   	fcall	_setSw_Main
  5614                           
  5615                           ;Switch_B1.c: 71: setSw_Main(2);
  5616  1CFF  3002               	movlw	2
  5617  1D00  3182  2224  319C   	fcall	_setSw_Main
  5618                           
  5619                           ;Switch_B1.c: 75: setSw_Main(3);
  5620  1D03  3003               	movlw	3
  5621  1D04  3182  2224         	fcall	_setSw_Main
  5622  1D06  0008               	return
  5623  1D07                     __end_of_Switch_Main:	
  5624                           
  5625                           	psect	text19
  5626  0224                     __ptext19:	
  5627 ;; *************** function _setSw_Main *****************
  5628 ;; Defined at:
  5629 ;;		line 115 in file "../src/Switch_B1.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  sw              1    wreg     unsigned char 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  sw              1   74[BANK0 ] unsigned char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;Total ram usage:        3 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:   10
  5650 ;; This function calls:
  5651 ;;		_SwPointSelect
  5652 ;;		_Sw_DimmerAdjFunc
  5653 ;;		_Sw_DimmerOffFunc
  5654 ;;		_Sw_DimmerOnFunc
  5655 ;;		_setBuz
  5656 ;;		_setRF_Learn
  5657 ;; This function is called by:
  5658 ;;		_Switch_Main
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           
  5663                           ;psect for function _setSw_Main
  5664  0224                     _setSw_Main:	
  5665                           
  5666                           ;incstack = 0
  5667                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5668                           ;setSw_Main@sw stored from wreg
  5669  0224  0020               	movlb	0	; select bank0
  5670  0225  00EA               	movwf	setSw_Main@sw
  5671                           
  5672                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5673  0226  086A               	movf	setSw_Main@sw,w
  5674  0227  319F  27C6  3182   	fcall	_SwPointSelect
  5675                           
  5676                           ;Switch_B1.c: 117: if (Sw->Enable == 1) {
  5677  022A  0878               	movf	_Sw,w
  5678  022B  0086               	movwf	6
  5679  022C  0879               	movf	_Sw+1,w
  5680  022D  0087               	movwf	7
  5681  022E  1C01               	btfss	1,0
  5682  022F  0008               	return
  5683                           
  5684                           ;Switch_B1.c: 119: if (sw == 1) {
  5685  0230  0020               	movlb	0	; select bank0
  5686  0231  086A               	movf	setSw_Main@sw,w
  5687  0232  3A01               	xorlw	1
  5688  0233  1D03               	skipz
  5689  0234  2A3D               	goto	l7766
  5690                           
  5691                           ;Switch_B1.c: 120: Sw->Touch = (RA0 == 1) ? 1 : 0;
  5692  0235  0878               	movf	_Sw,w
  5693  0236  0086               	movwf	6
  5694  0237  0879               	movf	_Sw+1,w
  5695  0238  0087               	movwf	7
  5696  0239  1081               	bcf	1,1
  5697  023A  180C               	btfsc	12,0	;volatile
  5698  023B  1481               	bsf	1,1
  5699                           
  5700                           ;Switch_B1.c: 121: } else if (sw == 2) {
  5701  023C  2A56               	goto	l2834
  5702  023D                     l7766:	
  5703  023D  0020               	movlb	0	; select bank0
  5704  023E  086A               	movf	setSw_Main@sw,w
  5705  023F  3A02               	xorlw	2
  5706  0240  1D03               	skipz
  5707  0241  2A4A               	goto	l7770
  5708                           
  5709                           ;Switch_B1.c: 122: Sw->Touch = (RA6 == 1) ? 1 : 0;
  5710  0242  0878               	movf	_Sw,w
  5711  0243  0086               	movwf	6
  5712  0244  0879               	movf	_Sw+1,w
  5713  0245  0087               	movwf	7
  5714  0246  1081               	bcf	1,1
  5715  0247  1B0C               	btfsc	12,6	;volatile
  5716  0248  1481               	bsf	1,1
  5717                           
  5718                           ;Switch_B1.c: 123: } else if (sw == 3) {
  5719  0249  2A56               	goto	l2834
  5720  024A                     l7770:	
  5721  024A  0020               	movlb	0	; select bank0
  5722  024B  086A               	movf	setSw_Main@sw,w
  5723  024C  3A03               	xorlw	3
  5724  024D  1D03               	skipz
  5725  024E  2A56               	goto	l2834
  5726                           
  5727                           ;Switch_B1.c: 124: Sw->Touch = (RA4 == 1) ? 1 : 0;
  5728  024F  0878               	movf	_Sw,w
  5729  0250  0086               	movwf	6
  5730  0251  0879               	movf	_Sw+1,w
  5731  0252  0087               	movwf	7
  5732  0253  1081               	bcf	1,1
  5733  0254  1A0C               	btfsc	12,4	;volatile
  5734  0255  1481               	bsf	1,1
  5735  0256                     l2834:	
  5736                           
  5737                           ;Switch_B1.c: 125: }
  5738                           ;Switch_B1.c: 139: if (Sw->Touch == 1) {
  5739  0256  0878               	movf	_Sw,w
  5740  0257  0086               	movwf	6
  5741  0258  0879               	movf	_Sw+1,w
  5742  0259  0087               	movwf	7
  5743  025A  1C81               	btfss	1,1
  5744  025B  2B21               	goto	l7820
  5745                           
  5746                           ;Switch_B1.c: 140: if (Sw->Debounce == 0) {
  5747  025C  0878               	movf	_Sw,w
  5748  025D  0086               	movwf	6
  5749  025E  0879               	movf	_Sw+1,w
  5750  025F  0087               	movwf	7
  5751  0260  1901               	btfsc	1,2
  5752  0261  2A84               	goto	l7786
  5753                           
  5754                           ;Switch_B1.c: 141: Sw->DebounceTime++;
  5755  0262  3001               	movlw	1
  5756  0263  0020               	movlb	0	; select bank0
  5757  0264  00E8               	movwf	??_setSw_Main
  5758  0265  0878               	movf	_Sw,w
  5759  0266  0086               	movwf	6
  5760  0267  0879               	movf	_Sw+1,w
  5761  0268  0087               	movwf	7
  5762  0269  3142               	addfsr 1,2
  5763  026A  0868               	movf	??_setSw_Main,w
  5764  026B  0781               	addwf	1,f
  5765                           
  5766                           ;Switch_B1.c: 142: if (Sw->DebounceTime >= 5) {
  5767  026C  0878               	movf	_Sw,w
  5768  026D  0086               	movwf	6
  5769  026E  0879               	movf	_Sw+1,w
  5770  026F  0087               	movwf	7
  5771  0270  3142               	addfsr 1,2
  5772  0271  3005               	movlw	5
  5773  0272  0201               	subwf	1,w
  5774  0273  1C03               	skipc
  5775  0274  0008               	return
  5776                           
  5777                           ;Switch_B1.c: 143: Sw->DebounceTime = 0;
  5778  0275  0878               	movf	_Sw,w
  5779  0276  0086               	movwf	6
  5780  0277  0879               	movf	_Sw+1,w
  5781  0278  0087               	movwf	7
  5782  0279  3142               	addfsr 1,2
  5783  027A  0181               	clrf	1
  5784                           
  5785                           ;Switch_B1.c: 144: Sw->Debounce = 1;
  5786  027B  0878               	movf	_Sw,w
  5787  027C  0086               	movwf	6
  5788  027D  0879               	movf	_Sw+1,w
  5789  027E  0087               	movwf	7
  5790  027F  1501               	bsf	1,2
  5791                           
  5792                           ;Switch_B1.c: 147: Sw_DimmerOnFunc(sw);
  5793  0280  086A               	movf	setSw_Main@sw,w
  5794  0281  318E  2658         	fcall	_Sw_DimmerOnFunc
  5795                           
  5796                           ;Switch_B1.c: 149: }
  5797                           ;Switch_B1.c: 150: } else {
  5798  0283  0008               	return
  5799  0284                     l7786:	
  5800                           
  5801                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  5802  0284  0878               	movf	_Sw,w
  5803  0285  0086               	movwf	6
  5804  0286  0879               	movf	_Sw+1,w
  5805  0287  0087               	movwf	7
  5806  0288  1981               	btfsc	1,3
  5807  0289  2AB1               	goto	l7796
  5808                           
  5809                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  5810  028A  0878               	movf	_Sw,w
  5811  028B  0086               	movwf	6
  5812  028C  0879               	movf	_Sw+1,w
  5813  028D  0087               	movwf	7
  5814  028E  3143               	addfsr 1,3
  5815  028F  3001               	movlw	1
  5816  0290  0781               	addwf	1,f
  5817  0291  3141               	addfsr 1,1
  5818  0292  1803               	skipnc
  5819  0293  0A81               	incf	1,f
  5820                           
  5821                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  5822  0294  0878               	movf	_Sw,w
  5823  0295  0086               	movwf	6
  5824  0296  0879               	movf	_Sw+1,w
  5825  0297  0087               	movwf	7
  5826  0298  3143               	addfsr 1,3
  5827  0299  3F40               	moviw [0]fsr1
  5828  029A  0020               	movlb	0	; select bank0
  5829  029B  00E8               	movwf	??_setSw_Main
  5830  029C  3F41               	moviw [1]fsr1
  5831  029D  00E9               	movwf	??_setSw_Main+1
  5832  029E  3000               	movlw	0
  5833  029F  0269               	subwf	??_setSw_Main+1,w
  5834  02A0  3096               	movlw	150
  5835  02A1  1903               	skipnz
  5836  02A2  0268               	subwf	??_setSw_Main,w
  5837  02A3  1C03               	skipc
  5838  02A4  0008               	return
  5839                           
  5840                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  5841  02A5  0878               	movf	_Sw,w
  5842  02A6  0086               	movwf	6
  5843  02A7  0879               	movf	_Sw+1,w
  5844  02A8  0087               	movwf	7
  5845  02A9  3143               	addfsr 1,3
  5846  02AA  3000               	movlw	0
  5847  02AB  3FC0               	movwi [0]fsr1
  5848  02AC  3FC1               	movwi [1]fsr1
  5849                           
  5850                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5851  02AD  086A               	movf	setSw_Main@sw,w
  5852  02AE  3189  215D         	fcall	_Sw_DimmerAdjFunc
  5853                           
  5854                           ;Switch_B1.c: 160: }
  5855                           ;Switch_B1.c: 161: } else {
  5856  02B0  0008               	return
  5857  02B1                     l7796:	
  5858                           
  5859                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5860  02B1  0878               	movf	_Sw,w
  5861  02B2  0086               	movwf	6
  5862  02B3  0879               	movf	_Sw+1,w
  5863  02B4  0087               	movwf	7
  5864  02B5  1A01               	btfsc	1,4
  5865  02B6  2AEF               	goto	l7810
  5866                           
  5867                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5868  02B7  0878               	movf	_Sw,w
  5869  02B8  0086               	movwf	6
  5870  02B9  0879               	movf	_Sw+1,w
  5871  02BA  0087               	movwf	7
  5872  02BB  3145               	addfsr 1,5
  5873  02BC  3001               	movlw	1
  5874  02BD  0781               	addwf	1,f
  5875  02BE  3141               	addfsr 1,1
  5876  02BF  1803               	skipnc
  5877  02C0  0A81               	incf	1,f
  5878                           
  5879                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5880  02C1  0878               	movf	_Sw,w
  5881  02C2  0086               	movwf	6
  5882  02C3  0879               	movf	_Sw+1,w
  5883  02C4  0087               	movwf	7
  5884  02C5  3145               	addfsr 1,5
  5885  02C6  3F40               	moviw [0]fsr1
  5886  02C7  0020               	movlb	0	; select bank0
  5887  02C8  00E8               	movwf	??_setSw_Main
  5888  02C9  3F41               	moviw [1]fsr1
  5889  02CA  00E9               	movwf	??_setSw_Main+1
  5890  02CB  3000               	movlw	0
  5891  02CC  0269               	subwf	??_setSw_Main+1,w
  5892  02CD  3096               	movlw	150
  5893  02CE  1903               	skipnz
  5894  02CF  0268               	subwf	??_setSw_Main,w
  5895  02D0  1C03               	skipc
  5896  02D1  0008               	return
  5897                           
  5898                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5899  02D2  0878               	movf	_Sw,w
  5900  02D3  0086               	movwf	6
  5901  02D4  0879               	movf	_Sw+1,w
  5902  02D5  0087               	movwf	7
  5903  02D6  3145               	addfsr 1,5
  5904  02D7  3000               	movlw	0
  5905  02D8  3FC0               	movwi [0]fsr1
  5906  02D9  3FC1               	movwi [1]fsr1
  5907                           
  5908                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5909  02DA  0878               	movf	_Sw,w
  5910  02DB  0086               	movwf	6
  5911  02DC  0879               	movf	_Sw+1,w
  5912  02DD  0087               	movwf	7
  5913  02DE  1601               	bsf	1,4
  5914                           
  5915                           ;Switch_B1.c: 169: setRF_Learn(1);
  5916  02DF  3001               	movlw	1
  5917  02E0  319C  249C  3182   	fcall	_setRF_Learn
  5918                           
  5919                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5920  02E3  0021               	movlb	1	; select bank1
  5921  02E4  1FA0               	btfss	_myMain^(0+128),7
  5922  02E5  0008               	return
  5923                           
  5924                           ;Switch_B1.c: 172: setBuz(2, 100);
  5925  02E6  3064               	movlw	100
  5926  02E7  0020               	movlb	0	; select bank0
  5927  02E8  00A9               	movwf	setBuz@time
  5928  02E9  3000               	movlw	0
  5929  02EA  00AA               	movwf	setBuz@time+1
  5930  02EB  3002               	movlw	2
  5931  02EC  3197  27A7         	fcall	_setBuz
  5932                           
  5933                           ;Switch_B1.c: 173: }
  5934                           ;Switch_B1.c: 175: }
  5935                           ;Switch_B1.c: 176: } else {
  5936  02EE  0008               	return
  5937  02EF                     l7810:	
  5938                           
  5939                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5940  02EF  0878               	movf	_Sw,w
  5941  02F0  0086               	movwf	6
  5942  02F1  0879               	movf	_Sw+1,w
  5943  02F2  0087               	movwf	7
  5944  02F3  1A81               	btfsc	1,5
  5945  02F4  0008               	return
  5946                           
  5947                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5948  02F5  0878               	movf	_Sw,w
  5949  02F6  0086               	movwf	6
  5950  02F7  0879               	movf	_Sw+1,w
  5951  02F8  0087               	movwf	7
  5952  02F9  3147               	addfsr 1,7
  5953  02FA  3001               	movlw	1
  5954  02FB  0781               	addwf	1,f
  5955  02FC  3141               	addfsr 1,1
  5956  02FD  1803               	skipnc
  5957  02FE  0A81               	incf	1,f
  5958                           
  5959                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5960  02FF  0878               	movf	_Sw,w
  5961  0300  0086               	movwf	6
  5962  0301  0879               	movf	_Sw+1,w
  5963  0302  0087               	movwf	7
  5964  0303  3147               	addfsr 1,7
  5965  0304  3F40               	moviw [0]fsr1
  5966  0305  0020               	movlb	0	; select bank0
  5967  0306  00E8               	movwf	??_setSw_Main
  5968  0307  3F41               	moviw [1]fsr1
  5969  0308  00E9               	movwf	??_setSw_Main+1
  5970  0309  3001               	movlw	1
  5971  030A  0269               	subwf	??_setSw_Main+1,w
  5972  030B  302C               	movlw	44
  5973  030C  1903               	skipnz
  5974  030D  0268               	subwf	??_setSw_Main,w
  5975  030E  1C03               	skipc
  5976  030F  0008               	return
  5977                           
  5978                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5979  0310  0878               	movf	_Sw,w
  5980  0311  0086               	movwf	6
  5981  0312  0879               	movf	_Sw+1,w
  5982  0313  0087               	movwf	7
  5983  0314  3147               	addfsr 1,7
  5984  0315  3000               	movlw	0
  5985  0316  3FC0               	movwi [0]fsr1
  5986  0317  3FC1               	movwi [1]fsr1
  5987                           
  5988                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5989  0318  0878               	movf	_Sw,w
  5990  0319  0086               	movwf	6
  5991  031A  0879               	movf	_Sw+1,w
  5992  031B  0087               	movwf	7
  5993  031C  1681               	bsf	1,5
  5994                           
  5995                           ;Switch_B1.c: 184: setRF_Learn(0);
  5996  031D  3000               	movlw	0
  5997  031E  319C  249C         	fcall	_setRF_Learn
  5998                           
  5999                           ;Switch_B1.c: 187: }
  6000                           ;Switch_B1.c: 188: }
  6001                           ;Switch_B1.c: 189: }
  6002                           ;Switch_B1.c: 190: }
  6003                           ;Switch_B1.c: 191: }
  6004                           ;Switch_B1.c: 192: } else {
  6005  0320  0008               	return
  6006  0321                     l7820:	
  6007                           
  6008                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  6009  0321  0878               	movf	_Sw,w
  6010  0322  0086               	movwf	6
  6011  0323  0879               	movf	_Sw+1,w
  6012  0324  0087               	movwf	7
  6013  0325  1D01               	btfss	1,2
  6014  0326  0008               	return
  6015                           
  6016                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  6017  0327  3001               	movlw	1
  6018  0328  0020               	movlb	0	; select bank0
  6019  0329  00E8               	movwf	??_setSw_Main
  6020  032A  0878               	movf	_Sw,w
  6021  032B  0086               	movwf	6
  6022  032C  0879               	movf	_Sw+1,w
  6023  032D  0087               	movwf	7
  6024  032E  3142               	addfsr 1,2
  6025  032F  0868               	movf	??_setSw_Main,w
  6026  0330  0781               	addwf	1,f
  6027                           
  6028                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  6029  0331  0878               	movf	_Sw,w
  6030  0332  0086               	movwf	6
  6031  0333  0879               	movf	_Sw+1,w
  6032  0334  0087               	movwf	7
  6033  0335  3142               	addfsr 1,2
  6034  0336  3005               	movlw	5
  6035  0337  0201               	subwf	1,w
  6036  0338  1C03               	skipc
  6037  0339  0008               	return
  6038                           
  6039                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  6040  033A  0878               	movf	_Sw,w
  6041  033B  0086               	movwf	6
  6042  033C  0879               	movf	_Sw+1,w
  6043  033D  0087               	movwf	7
  6044  033E  3142               	addfsr 1,2
  6045  033F  0181               	clrf	1
  6046                           
  6047                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  6048  0340  0878               	movf	_Sw,w
  6049  0341  0086               	movwf	6
  6050  0342  0879               	movf	_Sw+1,w
  6051  0343  0087               	movwf	7
  6052  0344  1101               	bcf	1,2
  6053                           
  6054                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  6055  0345  0878               	movf	_Sw,w
  6056  0346  0086               	movwf	6
  6057  0347  0879               	movf	_Sw+1,w
  6058  0348  0087               	movwf	7
  6059  0349  3143               	addfsr 1,3
  6060  034A  3000               	movlw	0
  6061  034B  3FC0               	movwi [0]fsr1
  6062  034C  3FC1               	movwi [1]fsr1
  6063                           
  6064                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  6065  034D  0878               	movf	_Sw,w
  6066  034E  0086               	movwf	6
  6067  034F  0879               	movf	_Sw+1,w
  6068  0350  0087               	movwf	7
  6069  0351  1181               	bcf	1,3
  6070                           
  6071                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  6072  0352  0878               	movf	_Sw,w
  6073  0353  0086               	movwf	6
  6074  0354  0879               	movf	_Sw+1,w
  6075  0355  0087               	movwf	7
  6076  0356  3145               	addfsr 1,5
  6077  0357  3000               	movlw	0
  6078  0358  3FC0               	movwi [0]fsr1
  6079  0359  3FC1               	movwi [1]fsr1
  6080                           
  6081                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  6082  035A  0878               	movf	_Sw,w
  6083  035B  0086               	movwf	6
  6084  035C  0879               	movf	_Sw+1,w
  6085  035D  0087               	movwf	7
  6086  035E  1201               	bcf	1,4
  6087                           
  6088                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  6089  035F  0878               	movf	_Sw,w
  6090  0360  0086               	movwf	6
  6091  0361  0879               	movf	_Sw+1,w
  6092  0362  0087               	movwf	7
  6093  0363  3147               	addfsr 1,7
  6094  0364  3000               	movlw	0
  6095  0365  3FC0               	movwi [0]fsr1
  6096  0366  3FC1               	movwi [1]fsr1
  6097                           
  6098                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  6099  0367  0878               	movf	_Sw,w
  6100  0368  0086               	movwf	6
  6101  0369  0879               	movf	_Sw+1,w
  6102  036A  0087               	movwf	7
  6103  036B  1281               	bcf	1,5
  6104                           
  6105                           ;Switch_B1.c: 205: Sw_DimmerOffFunc(sw);
  6106  036C  086A               	movf	setSw_Main@sw,w
  6107  036D  318B  2305  3182   	fcall	_Sw_DimmerOffFunc
  6108                           
  6109                           ;Switch_B1.c: 208: setRF_Learn(0);
  6110  0370  3000               	movlw	0
  6111  0371  319C  249C         	fcall	_setRF_Learn
  6112  0373  0008               	return
  6113  0374                     __end_of_setSw_Main:	
  6114                           
  6115                           	psect	text20
  6116  1C9C                     __ptext20:	
  6117 ;; *************** function _setRF_Learn *****************
  6118 ;; Defined at:
  6119 ;;		line 23 in file "../src/RF_Control_B1.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  command         1    wreg     unsigned char 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  command         1    0[BANK0 ] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;		None               void
  6126 ;; Registers used:
  6127 ;;		wreg
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        1 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    5
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_setSw_Main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _setRF_Learn
  6149  1C9C                     _setRF_Learn:	
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _setRF_Learn: [wreg]
  6153                           ;setRF_Learn@command stored from wreg
  6154  1C9C  0020               	movlb	0	; select bank0
  6155  1C9D  00A0               	movwf	setRF_Learn@command
  6156                           
  6157                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6158  1C9E  0820               	movf	setRF_Learn@command,w
  6159  1C9F  0021               	movlb	1	; select bank1
  6160  1CA0  1342               	bcf	_RF1^(0+128),6
  6161  1CA1  1D03               	skipz
  6162  1CA2  1742               	bsf	_RF1^(0+128),6
  6163  1CA3  0008               	return
  6164  1CA4                     __end_of_setRF_Learn:	
  6165                           
  6166                           	psect	text21
  6167  0E58                     __ptext21:	
  6168 ;; *************** function _Sw_DimmerOnFunc *****************
  6169 ;; Defined at:
  6170 ;;		line 217 in file "../src/Switch_B1.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  sw              1    wreg     unsigned char 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  sw              1   71[BANK0 ] unsigned char 
  6175 ;;  Idle            1   70[BANK0 ] unsigned char 
  6176 ;; Return value:  Size  Location     Type
  6177 ;;		None               void
  6178 ;; Registers used:
  6179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;Total ram usage:        6 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:    9
  6192 ;; This function calls:
  6193 ;;		_setBuz
  6194 ;;		_setDimmerLights_Switch
  6195 ;;		_setDimmerLights_Trigger
  6196 ;;		_setRFSW_Status
  6197 ;;		_setRF_DimmerLights
  6198 ;;		_setTxData
  6199 ;; This function is called by:
  6200 ;;		_setSw_Main
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           
  6205                           ;psect for function _Sw_DimmerOnFunc
  6206  0E58                     _Sw_DimmerOnFunc:	
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6210                           ;Sw_DimmerOnFunc@sw stored from wreg
  6211  0E58  0020               	movlb	0	; select bank0
  6212  0E59  00E7               	movwf	Sw_DimmerOnFunc@sw
  6213                           
  6214                           ;Switch_B1.c: 218: char Idle = 1;
  6215  0E5A  01E6               	clrf	Sw_DimmerOnFunc@Idle
  6216  0E5B  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  6217                           
  6218                           ;Switch_B1.c: 222: if (sw == 1) {
  6219  0E5C  0867               	movf	Sw_DimmerOnFunc@sw,w
  6220  0E5D  3A01               	xorlw	1
  6221  0E5E  1D03               	skipz
  6222  0E5F  2E6B               	goto	l7058
  6223                           
  6224                           ;Switch_B1.c: 223: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6225  0E60  01E3               	clrf	_Sw_DimmerOnFunc$5557
  6226  0E61  0023               	movlb	3	; select bank3
  6227  0E62  1DCD               	btfss	(_DimmerLights2^(0+384)+8),3
  6228  0E63  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6229  0E64  2E68               	goto	l7056
  6230  0E65  0020               	movlb	0	; select bank0
  6231  0E66  01E3               	clrf	_Sw_DimmerOnFunc$5557
  6232  0E67  0AE3               	incf	_Sw_DimmerOnFunc$5557,f
  6233  0E68                     l7056:	
  6234  0E68  0020               	movlb	0	; select bank0
  6235  0E69  0863               	movf	_Sw_DimmerOnFunc$5557,w
  6236  0E6A  2E8C               	goto	L3
  6237  0E6B                     l7058:	
  6238                           ;Switch_B1.c: 224: } else if (sw == 2) {
  6239                           
  6240  0E6B  0867               	movf	Sw_DimmerOnFunc@sw,w
  6241  0E6C  3A02               	xorlw	2
  6242  0E6D  1D03               	skipz
  6243  0E6E  2E7C               	goto	l7070
  6244                           
  6245                           ;Switch_B1.c: 225: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6246  0E6F  01E4               	clrf	_Sw_DimmerOnFunc$5558
  6247  0E70  0022               	movlb	2	; select bank2
  6248  0E71  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6249  0E72  2E79               	goto	l7068
  6250  0E73  0023               	movlb	3	; select bank3
  6251  0E74  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6252  0E75  2E79               	goto	l7068
  6253  0E76  0020               	movlb	0	; select bank0
  6254  0E77  01E4               	clrf	_Sw_DimmerOnFunc$5558
  6255  0E78  0AE4               	incf	_Sw_DimmerOnFunc$5558,f
  6256  0E79                     l7068:	
  6257  0E79  0020               	movlb	0	; select bank0
  6258  0E7A  0864               	movf	_Sw_DimmerOnFunc$5558,w
  6259  0E7B  2E8C               	goto	L3
  6260  0E7C                     l7070:	
  6261                           ;Switch_B1.c: 226: } else if (sw == 3) {
  6262                           
  6263  0E7C  0867               	movf	Sw_DimmerOnFunc@sw,w
  6264  0E7D  3A03               	xorlw	3
  6265  0E7E  1D03               	skipz
  6266  0E7F  2E8F               	goto	l2860
  6267                           
  6268                           ;Switch_B1.c: 227: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6269  0E80  01E5               	clrf	_Sw_DimmerOnFunc$5559
  6270  0E81  0022               	movlb	2	; select bank2
  6271  0E82  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6272  0E83  2E8A               	goto	l7080
  6273  0E84  0023               	movlb	3	; select bank3
  6274  0E85  19CD               	btfsc	(_DimmerLights2^(0+384)+8),3
  6275  0E86  2E8A               	goto	l7080
  6276  0E87  0020               	movlb	0	; select bank0
  6277  0E88  01E5               	clrf	_Sw_DimmerOnFunc$5559
  6278  0E89  0AE5               	incf	_Sw_DimmerOnFunc$5559,f
  6279  0E8A                     l7080:	
  6280  0E8A  0020               	movlb	0	; select bank0
  6281  0E8B  0865               	movf	_Sw_DimmerOnFunc$5559,w
  6282  0E8C                     L3:	
  6283  0E8C  00E2               	movwf	??_Sw_DimmerOnFunc
  6284  0E8D  0862               	movf	??_Sw_DimmerOnFunc,w
  6285  0E8E  00E6               	movwf	Sw_DimmerOnFunc@Idle
  6286  0E8F                     l2860:	
  6287                           
  6288                           ;Switch_B1.c: 228: }
  6289                           ;Switch_B1.c: 239: if (Idle == 1) {
  6290  0E8F  0866               	movf	Sw_DimmerOnFunc@Idle,w
  6291  0E90  3A01               	xorlw	1
  6292  0E91  1D03               	skipz
  6293  0E92  0008               	return
  6294                           
  6295                           ;Switch_B1.c: 240: Sw->Flag = 1;
  6296  0E93  0878               	movf	_Sw,w
  6297  0E94  0086               	movwf	6
  6298  0E95  0879               	movf	_Sw+1,w
  6299  0E96  0087               	movwf	7
  6300  0E97  1781               	bsf	1,7
  6301                           
  6302                           ;Switch_B1.c: 241: setBuz(1, 100);
  6303  0E98  3064               	movlw	100
  6304  0E99  00A9               	movwf	setBuz@time
  6305  0E9A  3000               	movlw	0
  6306  0E9B  00AA               	movwf	setBuz@time+1
  6307  0E9C  3001               	movlw	1
  6308  0E9D  3197  27A7  318E   	fcall	_setBuz
  6309                           
  6310                           ;Switch_B1.c: 242: if (Sw->Status == 0) {
  6311  0EA0  0878               	movf	_Sw,w
  6312  0EA1  0086               	movwf	6
  6313  0EA2  0879               	movf	_Sw+1,w
  6314  0EA3  0087               	movwf	7
  6315  0EA4  1B01               	btfsc	1,6
  6316  0EA5  2ED0               	goto	l7100
  6317                           
  6318                           ;Switch_B1.c: 243: Sw->Status = 1;
  6319  0EA6  0878               	movf	_Sw,w
  6320  0EA7  0086               	movwf	6
  6321  0EA8  0879               	movf	_Sw+1,w
  6322  0EA9  0087               	movwf	7
  6323  0EAA  1701               	bsf	1,6
  6324                           
  6325                           ;Switch_B1.c: 244: setRFSW_Status(sw, 1);
  6326  0EAB  0020               	movlb	0	; select bank0
  6327  0EAC  01A2               	clrf	setRFSW_Status@command
  6328  0EAD  0AA2               	incf	setRFSW_Status@command,f
  6329  0EAE  0867               	movf	Sw_DimmerOnFunc@sw,w
  6330  0EAF  319D  253E  318E   	fcall	_setRFSW_Status
  6331                           
  6332                           ;Switch_B1.c: 246: setDimmerLights_Trigger(sw, 1);
  6333  0EB2  0020               	movlb	0	; select bank0
  6334  0EB3  01A2               	clrf	setDimmerLights_Trigger@command
  6335  0EB4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6336  0EB5  0867               	movf	Sw_DimmerOnFunc@sw,w
  6337  0EB6  319D  25A8  318E   	fcall	_setDimmerLights_Trigger
  6338                           
  6339                           ;Switch_B1.c: 247: setDimmerLights_Switch(sw, 1);
  6340  0EB9  0020               	movlb	0	; select bank0
  6341  0EBA  01A2               	clrf	setDimmerLights_Switch@command
  6342  0EBB  0AA2               	incf	setDimmerLights_Switch@command,f
  6343  0EBC  0867               	movf	Sw_DimmerOnFunc@sw,w
  6344  0EBD  319D  2598  318E   	fcall	_setDimmerLights_Switch
  6345                           
  6346                           ;Switch_B1.c: 249: setRF_DimmerLights(sw, Sw->Status);
  6347  0EC0  0878               	movf	_Sw,w
  6348  0EC1  0086               	movwf	6
  6349  0EC2  0879               	movf	_Sw+1,w
  6350  0EC3  0087               	movwf	7
  6351  0EC4  3000               	movlw	0
  6352  0EC5  1B01               	btfsc	1,6
  6353  0EC6  3001               	movlw	1
  6354  0EC7  0020               	movlb	0	; select bank0
  6355  0EC8  00DD               	movwf	setRF_DimmerLights@on
  6356  0EC9  0867               	movf	Sw_DimmerOnFunc@sw,w
  6357  0ECA  318A  2228  318E   	fcall	_setRF_DimmerLights
  6358                           
  6359                           ;Switch_B1.c: 250: setTxData();
  6360  0ECD  3185  2531         	fcall	_setTxData
  6361                           
  6362                           ;Switch_B1.c: 252: } else {
  6363  0ECF  0008               	return
  6364  0ED0                     l7100:	
  6365                           
  6366                           ;Switch_B1.c: 253: Sw->Status = 0;
  6367  0ED0  0878               	movf	_Sw,w
  6368  0ED1  0086               	movwf	6
  6369  0ED2  0879               	movf	_Sw+1,w
  6370  0ED3  0087               	movwf	7
  6371  0ED4  1301               	bcf	1,6
  6372                           
  6373                           ;Switch_B1.c: 254: setRFSW_Status(sw, Sw->Status);
  6374  0ED5  0878               	movf	_Sw,w
  6375  0ED6  0086               	movwf	6
  6376  0ED7  0879               	movf	_Sw+1,w
  6377  0ED8  0087               	movwf	7
  6378  0ED9  3000               	movlw	0
  6379  0EDA  1B01               	btfsc	1,6
  6380  0EDB  3001               	movlw	1
  6381  0EDC  0020               	movlb	0	; select bank0
  6382  0EDD  00A2               	movwf	setRFSW_Status@command
  6383  0EDE  0867               	movf	Sw_DimmerOnFunc@sw,w
  6384  0EDF  319D  253E         	fcall	_setRFSW_Status
  6385  0EE1  0008               	return
  6386  0EE2                     __end_of_Sw_DimmerOnFunc:	
  6387                           
  6388                           	psect	text22
  6389  0B05                     __ptext22:	
  6390 ;; *************** function _Sw_DimmerOffFunc *****************
  6391 ;; Defined at:
  6392 ;;		line 260 in file "../src/Switch_B1.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  sw              1    wreg     unsigned char 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  sw              1   68[BANK0 ] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;		None               void
  6399 ;; Registers used:
  6400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;Total ram usage:        3 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    9
  6413 ;; This function calls:
  6414 ;;		_setDelayOff_GO
  6415 ;;		_setDimmerLights_AdjGo
  6416 ;;		_setDimmerLights_Switch
  6417 ;;		_setDimmerLights_Trigger
  6418 ;;		_setDimmerLights_TriggerAdj
  6419 ;;		_setRF_DimmerLights
  6420 ;;		_setTxData
  6421 ;; This function is called by:
  6422 ;;		_setSw_Main
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           
  6427                           ;psect for function _Sw_DimmerOffFunc
  6428  0B05                     _Sw_DimmerOffFunc:	
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6432                           ;Sw_DimmerOffFunc@sw stored from wreg
  6433  0B05  0020               	movlb	0	; select bank0
  6434  0B06  00E4               	movwf	Sw_DimmerOffFunc@sw
  6435                           
  6436                           ;Switch_B1.c: 261: if (Sw->Flag == 1) {
  6437  0B07  0878               	movf	_Sw,w
  6438  0B08  0086               	movwf	6
  6439  0B09  0879               	movf	_Sw+1,w
  6440  0B0A  0087               	movwf	7
  6441  0B0B  1F81               	btfss	1,7
  6442  0B0C  0008               	return
  6443                           
  6444                           ;Switch_B1.c: 262: Sw->Flag = 0;
  6445  0B0D  0878               	movf	_Sw,w
  6446  0B0E  0086               	movwf	6
  6447  0B0F  0879               	movf	_Sw+1,w
  6448  0B10  0087               	movwf	7
  6449  0B11  1381               	bcf	1,7
  6450                           
  6451                           ;Switch_B1.c: 263: if (Sw->Status == 1) {
  6452  0B12  0878               	movf	_Sw,w
  6453  0B13  0086               	movwf	6
  6454  0B14  0879               	movf	_Sw+1,w
  6455  0B15  0087               	movwf	7
  6456  0B16  1F01               	btfss	1,6
  6457  0B17  2B52               	goto	l7170
  6458                           
  6459                           ;Switch_B1.c: 264: if (Sw->Adj == 1) {
  6460  0B18  0878               	movf	_Sw,w
  6461  0B19  0086               	movwf	6
  6462  0B1A  0879               	movf	_Sw+1,w
  6463  0B1B  0087               	movwf	7
  6464  0B1C  3141               	addfsr 1,1
  6465  0B1D  1C01               	btfss	1,0
  6466  0B1E  0008               	return
  6467                           
  6468                           ;Switch_B1.c: 265: Sw->Adj = 0;
  6469  0B1F  0878               	movf	_Sw,w
  6470  0B20  0086               	movwf	6
  6471  0B21  0879               	movf	_Sw+1,w
  6472  0B22  0087               	movwf	7
  6473  0B23  3141               	addfsr 1,1
  6474  0B24  1001               	bcf	1,0
  6475                           
  6476                           ;Switch_B1.c: 266: setDimmerLights_TriggerAdj(sw, 1);
  6477  0B25  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6478  0B26  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6479  0B27  0864               	movf	Sw_DimmerOffFunc@sw,w
  6480  0B28  319D  25E8  318B   	fcall	_setDimmerLights_TriggerAdj
  6481                           
  6482                           ;Switch_B1.c: 267: setDimmerLights_AdjGo(sw, 0);
  6483  0B2B  0020               	movlb	0	; select bank0
  6484  0B2C  01A2               	clrf	setDimmerLights_AdjGo@command
  6485  0B2D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6486  0B2E  319D  25D8  318B   	fcall	_setDimmerLights_AdjGo
  6487                           
  6488                           ;Switch_B1.c: 269: product->Data[17]=product->Data[26 + sw];
  6489  0B31  0020               	movlb	0	; select bank0
  6490  0B32  0864               	movf	Sw_DimmerOffFunc@sw,w
  6491  0B33  3E1A               	addlw	26
  6492  0B34  076F               	addwf	_product,w
  6493  0B35  00E2               	movwf	??_Sw_DimmerOffFunc
  6494  0B36  0862               	movf	??_Sw_DimmerOffFunc,w
  6495  0B37  0086               	movwf	6
  6496  0B38  3002               	movlw	2	; select bank4/5
  6497  0B39  0087               	movwf	7
  6498  0B3A  0801               	movf	1,w
  6499  0B3B  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6500  0B3C  086F               	movf	_product,w
  6501  0B3D  3E11               	addlw	17
  6502  0B3E  0086               	movwf	6
  6503  0B3F  3002               	movlw	2	; select bank4/5
  6504  0B40  0087               	movwf	7
  6505  0B41  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6506  0B42  0081               	movwf	1
  6507                           
  6508                           ;Switch_B1.c: 270: setRF_DimmerLights(sw, Sw->Status);
  6509  0B43  0878               	movf	_Sw,w
  6510  0B44  0086               	movwf	6
  6511  0B45  0879               	movf	_Sw+1,w
  6512  0B46  0087               	movwf	7
  6513  0B47  3000               	movlw	0
  6514  0B48  1B01               	btfsc	1,6
  6515  0B49  3001               	movlw	1
  6516  0B4A  00DD               	movwf	setRF_DimmerLights@on
  6517  0B4B  0864               	movf	Sw_DimmerOffFunc@sw,w
  6518  0B4C  318A  2228  318B   	fcall	_setRF_DimmerLights
  6519                           
  6520                           ;Switch_B1.c: 271: setTxData();
  6521  0B4F  3185  2531         	fcall	_setTxData
  6522                           
  6523                           ;Switch_B1.c: 273: }
  6524                           ;Switch_B1.c: 274: } else {
  6525  0B51  0008               	return
  6526  0B52                     l7170:	
  6527                           
  6528                           ;Switch_B1.c: 275: setDimmerLights_Trigger(sw, 1);
  6529  0B52  0020               	movlb	0	; select bank0
  6530  0B53  01A2               	clrf	setDimmerLights_Trigger@command
  6531  0B54  0AA2               	incf	setDimmerLights_Trigger@command,f
  6532  0B55  0864               	movf	Sw_DimmerOffFunc@sw,w
  6533  0B56  319D  25A8  318B   	fcall	_setDimmerLights_Trigger
  6534                           
  6535                           ;Switch_B1.c: 276: setDimmerLights_Switch(sw, 0);
  6536  0B59  0020               	movlb	0	; select bank0
  6537  0B5A  01A2               	clrf	setDimmerLights_Switch@command
  6538  0B5B  0864               	movf	Sw_DimmerOffFunc@sw,w
  6539  0B5C  319D  2598  318B   	fcall	_setDimmerLights_Switch
  6540                           
  6541                           ;Switch_B1.c: 278: setDelayOff_GO(sw, 0, 0);
  6542  0B5F  0020               	movlb	0	; select bank0
  6543  0B60  01AA               	clrf	setDelayOff_GO@command
  6544  0B61  01AB               	clrf	setDelayOff_GO@value
  6545  0B62  0864               	movf	Sw_DimmerOffFunc@sw,w
  6546  0B63  3189  21C2  318B   	fcall	_setDelayOff_GO
  6547                           
  6548                           ;Switch_B1.c: 279: setRF_DimmerLights(sw, Sw->Status);
  6549  0B66  0878               	movf	_Sw,w
  6550  0B67  0086               	movwf	6
  6551  0B68  0879               	movf	_Sw+1,w
  6552  0B69  0087               	movwf	7
  6553  0B6A  3000               	movlw	0
  6554  0B6B  1B01               	btfsc	1,6
  6555  0B6C  3001               	movlw	1
  6556  0B6D  0020               	movlb	0	; select bank0
  6557  0B6E  00DD               	movwf	setRF_DimmerLights@on
  6558  0B6F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6559  0B70  318A  2228  318B   	fcall	_setRF_DimmerLights
  6560                           
  6561                           ;Switch_B1.c: 280: setTxData();
  6562  0B73  3185  2531         	fcall	_setTxData
  6563  0B75  0008               	return
  6564  0B76                     __end_of_Sw_DimmerOffFunc:	
  6565                           
  6566                           	psect	text23
  6567  095D                     __ptext23:	
  6568 ;; *************** function _Sw_DimmerAdjFunc *****************
  6569 ;; Defined at:
  6570 ;;		line 287 in file "../src/Switch_B1.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  sw              1    wreg     unsigned char 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  sw              1    9[BANK0 ] unsigned char 
  6575 ;;  Idle            1    8[BANK0 ] unsigned char 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;Total ram usage:        6 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    7
  6592 ;; This function calls:
  6593 ;;		_setDimmerLights_AdjGo
  6594 ;;		_setDimmerLights_TriggerAdj
  6595 ;;		_setRFSW_Status
  6596 ;; This function is called by:
  6597 ;;		_setSw_Main
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           
  6602                           ;psect for function _Sw_DimmerAdjFunc
  6603  095D                     _Sw_DimmerAdjFunc:	
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6607                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6608  095D  0020               	movlb	0	; select bank0
  6609  095E  00A9               	movwf	Sw_DimmerAdjFunc@sw
  6610                           
  6611                           ;Switch_B1.c: 288: char Idle = 1;
  6612  095F  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  6613  0960  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  6614                           
  6615                           ;Switch_B1.c: 291: if (sw == 1) {
  6616  0961  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6617  0962  3A01               	xorlw	1
  6618  0963  1D03               	skipz
  6619  0964  2970               	goto	l7118
  6620                           
  6621                           ;Switch_B1.c: 292: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6622  0965  01A5               	clrf	_Sw_DimmerAdjFunc$5567
  6623  0966  0023               	movlb	3	; select bank3
  6624  0967  1DCD               	btfss	(_DimmerLights2^(0+384)+8),3
  6625  0968  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6626  0969  296D               	goto	l7116
  6627  096A  0020               	movlb	0	; select bank0
  6628  096B  01A5               	clrf	_Sw_DimmerAdjFunc$5567
  6629  096C  0AA5               	incf	_Sw_DimmerAdjFunc$5567,f
  6630  096D                     l7116:	
  6631  096D  0020               	movlb	0	; select bank0
  6632  096E  0825               	movf	_Sw_DimmerAdjFunc$5567,w
  6633  096F  2991               	goto	L5
  6634  0970                     l7118:	
  6635                           ;Switch_B1.c: 293: } else if (sw == 2) {
  6636                           
  6637  0970  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6638  0971  3A02               	xorlw	2
  6639  0972  1D03               	skipz
  6640  0973  2981               	goto	l7130
  6641                           
  6642                           ;Switch_B1.c: 294: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6643  0974  01A6               	clrf	_Sw_DimmerAdjFunc$5568
  6644  0975  0022               	movlb	2	; select bank2
  6645  0976  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6646  0977  297E               	goto	l7128
  6647  0978  0023               	movlb	3	; select bank3
  6648  0979  19DC               	btfsc	(_DimmerLights3^(0+384)+8),3
  6649  097A  297E               	goto	l7128
  6650  097B  0020               	movlb	0	; select bank0
  6651  097C  01A6               	clrf	_Sw_DimmerAdjFunc$5568
  6652  097D  0AA6               	incf	_Sw_DimmerAdjFunc$5568,f
  6653  097E                     l7128:	
  6654  097E  0020               	movlb	0	; select bank0
  6655  097F  0826               	movf	_Sw_DimmerAdjFunc$5568,w
  6656  0980  2991               	goto	L5
  6657  0981                     l7130:	
  6658                           ;Switch_B1.c: 295: } else if (sw == 3) {
  6659                           
  6660  0981  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6661  0982  3A03               	xorlw	3
  6662  0983  1D03               	skipz
  6663  0984  2994               	goto	l2884
  6664                           
  6665                           ;Switch_B1.c: 296: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6666  0985  01A7               	clrf	_Sw_DimmerAdjFunc$5569
  6667  0986  0022               	movlb	2	; select bank2
  6668  0987  19C5               	btfsc	(_DimmerLights1^(0+256)+8),3
  6669  0988  298F               	goto	l7140
  6670  0989  0023               	movlb	3	; select bank3
  6671  098A  19CD               	btfsc	(_DimmerLights2^(0+384)+8),3
  6672  098B  298F               	goto	l7140
  6673  098C  0020               	movlb	0	; select bank0
  6674  098D  01A7               	clrf	_Sw_DimmerAdjFunc$5569
  6675  098E  0AA7               	incf	_Sw_DimmerAdjFunc$5569,f
  6676  098F                     l7140:	
  6677  098F  0020               	movlb	0	; select bank0
  6678  0990  0827               	movf	_Sw_DimmerAdjFunc$5569,w
  6679  0991                     L5:	
  6680  0991  00A4               	movwf	??_Sw_DimmerAdjFunc
  6681  0992  0824               	movf	??_Sw_DimmerAdjFunc,w
  6682  0993  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  6683  0994                     l2884:	
  6684                           
  6685                           ;Switch_B1.c: 297: }
  6686                           ;Switch_B1.c: 308: if (Idle == 1) {
  6687  0994  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  6688  0995  3A01               	xorlw	1
  6689  0996  1D03               	skipz
  6690  0997  0008               	return
  6691                           
  6692                           ;Switch_B1.c: 309: if (Sw->Flag == 1) {
  6693  0998  0878               	movf	_Sw,w
  6694  0999  0086               	movwf	6
  6695  099A  0879               	movf	_Sw+1,w
  6696  099B  0087               	movwf	7
  6697  099C  1F81               	btfss	1,7
  6698  099D  0008               	return
  6699                           
  6700                           ;Switch_B1.c: 310: Sw->Hold1 = 1;
  6701  099E  0878               	movf	_Sw,w
  6702  099F  0086               	movwf	6
  6703  09A0  0879               	movf	_Sw+1,w
  6704  09A1  0087               	movwf	7
  6705  09A2  1581               	bsf	1,3
  6706                           
  6707                           ;Switch_B1.c: 311: Sw->Adj = 1;
  6708  09A3  0878               	movf	_Sw,w
  6709  09A4  0086               	movwf	6
  6710  09A5  0879               	movf	_Sw+1,w
  6711  09A6  0087               	movwf	7
  6712  09A7  3141               	addfsr 1,1
  6713  09A8  1401               	bsf	1,0
  6714                           
  6715                           ;Switch_B1.c: 312: Sw->Status = 1;
  6716  09A9  0878               	movf	_Sw,w
  6717  09AA  0086               	movwf	6
  6718  09AB  0879               	movf	_Sw+1,w
  6719  09AC  0087               	movwf	7
  6720  09AD  1701               	bsf	1,6
  6721                           
  6722                           ;Switch_B1.c: 313: setRFSW_Status(sw, 1);
  6723  09AE  01A2               	clrf	setRFSW_Status@command
  6724  09AF  0AA2               	incf	setRFSW_Status@command,f
  6725  09B0  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6726  09B1  319D  253E  3189   	fcall	_setRFSW_Status
  6727                           
  6728                           ;Switch_B1.c: 315: setDimmerLights_TriggerAdj(sw, 1);
  6729  09B4  0020               	movlb	0	; select bank0
  6730  09B5  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6731  09B6  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6732  09B7  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6733  09B8  319D  25E8  3189   	fcall	_setDimmerLights_TriggerAdj
  6734                           
  6735                           ;Switch_B1.c: 316: setDimmerLights_AdjGo(sw, 1);
  6736  09BB  0020               	movlb	0	; select bank0
  6737  09BC  01A2               	clrf	setDimmerLights_AdjGo@command
  6738  09BD  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6739  09BE  0829               	movf	Sw_DimmerAdjFunc@sw,w
  6740  09BF  319D  25D8         	fcall	_setDimmerLights_AdjGo
  6741  09C1  0008               	return
  6742  09C2                     __end_of_Sw_DimmerAdjFunc:	
  6743                           
  6744                           	psect	text24
  6745  1DE8                     __ptext24:	
  6746 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6747 ;; Defined at:
  6748 ;;		line 711 in file "../src/Dimmer_B1.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  lights          1    wreg     unsigned char 
  6751 ;;  command         1    2[BANK0 ] unsigned char 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  lights          1    3[BANK0 ] unsigned char 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:        2 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    6
  6770 ;; This function calls:
  6771 ;;		_DimmerLightsPointSelect
  6772 ;; This function is called by:
  6773 ;;		_Sw_DimmerOffFunc
  6774 ;;		_Sw_DimmerAdjFunc
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function _setDimmerLights_TriggerAdj
  6780  1DE8                     _setDimmerLights_TriggerAdj:	
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6784                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6785  1DE8  0020               	movlb	0	; select bank0
  6786  1DE9  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6787                           
  6788                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6789  1DEA  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6790  1DEB  319F  2755         	fcall	_DimmerLightsPointSelect
  6791                           
  6792                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6793  1DED  087B               	movf	_DimmerLights,w
  6794  1DEE  3E08               	addlw	8
  6795  1DEF  0086               	movwf	6
  6796  1DF0  3001               	movlw	1	; select bank2/3
  6797  1DF1  0087               	movwf	7
  6798  1DF2  0020               	movlb	0	; select bank0
  6799  1DF3  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6800  1DF4  1201               	bcf	1,4
  6801  1DF5  1D03               	skipz
  6802  1DF6  1601               	bsf	1,4
  6803  1DF7  0008               	return
  6804  1DF8                     __end_of_setDimmerLights_TriggerAdj:	
  6805                           
  6806                           	psect	text25
  6807  1DD8                     __ptext25:	
  6808 ;; *************** function _setDimmerLights_AdjGo *****************
  6809 ;; Defined at:
  6810 ;;		line 699 in file "../src/Dimmer_B1.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  lights          1    wreg     unsigned char 
  6813 ;;  command         1    2[BANK0 ] unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  lights          1    3[BANK0 ] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;		None               void
  6818 ;; Registers used:
  6819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6825 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;Total ram usage:        2 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    6
  6832 ;; This function calls:
  6833 ;;		_DimmerLightsPointSelect
  6834 ;; This function is called by:
  6835 ;;		_Sw_DimmerOffFunc
  6836 ;;		_Sw_DimmerAdjFunc
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           
  6841                           ;psect for function _setDimmerLights_AdjGo
  6842  1DD8                     _setDimmerLights_AdjGo:	
  6843                           
  6844                           ;incstack = 0
  6845                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6846                           ;setDimmerLights_AdjGo@lights stored from wreg
  6847  1DD8  0020               	movlb	0	; select bank0
  6848  1DD9  00A3               	movwf	setDimmerLights_AdjGo@lights
  6849                           
  6850                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6851  1DDA  0823               	movf	setDimmerLights_AdjGo@lights,w
  6852  1DDB  319F  2755         	fcall	_DimmerLightsPointSelect
  6853                           
  6854                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6855  1DDD  087B               	movf	_DimmerLights,w
  6856  1DDE  3E08               	addlw	8
  6857  1DDF  0086               	movwf	6
  6858  1DE0  3001               	movlw	1	; select bank2/3
  6859  1DE1  0087               	movwf	7
  6860  1DE2  0020               	movlb	0	; select bank0
  6861  1DE3  0822               	movf	setDimmerLights_AdjGo@command,w
  6862  1DE4  1181               	bcf	1,3
  6863  1DE5  1D03               	skipz
  6864  1DE6  1581               	bsf	1,3
  6865  1DE7  0008               	return
  6866  1DE8                     __end_of_setDimmerLights_AdjGo:	
  6867                           
  6868                           	psect	text26
  6869  1E09                     __ptext26:	
  6870 ;; *************** function _Switch_Initialization *****************
  6871 ;; Defined at:
  6872 ;;		line 41 in file "../src/Switch_B1.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;		None
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;		None
  6877 ;; Return value:  Size  Location     Type
  6878 ;;		None               void
  6879 ;; Registers used:
  6880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;Total ram usage:        0 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    8
  6893 ;; This function calls:
  6894 ;;		_TouchPower
  6895 ;;		_setSw_Initialization
  6896 ;; This function is called by:
  6897 ;;		_main
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           
  6902                           ;psect for function _Switch_Initialization
  6903  1E09                     _Switch_Initialization:	
  6904                           
  6905                           ;Switch_B1.c: 42: TouchPower();
  6906                           
  6907                           ;incstack = 0
  6908                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6909  1E09  319D  257A  319E   	fcall	_TouchPower
  6910                           
  6911                           ;Switch_B1.c: 44: WPUB1 = 0;
  6912  1E0C  0024               	movlb	4	; select bank4
  6913  1E0D  108D               	bcf	13,1	;volatile
  6914                           
  6915                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6916  1E0E  3001               	movlw	1
  6917  1E0F  319C  2494  319E   	fcall	_setSw_Initialization
  6918                           
  6919                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6920  1E12  3002               	movlw	2
  6921  1E13  319C  2494  319E   	fcall	_setSw_Initialization
  6922                           
  6923                           ;Switch_B1.c: 59: setSw_Initialization(3);
  6924  1E16  3003               	movlw	3
  6925  1E17  319C  2494         	fcall	_setSw_Initialization
  6926  1E19  0008               	return
  6927  1E1A                     __end_of_Switch_Initialization:	
  6928                           
  6929                           	psect	text27
  6930  1C94                     __ptext27:	
  6931 ;; *************** function _setSw_Initialization *****************
  6932 ;; Defined at:
  6933 ;;		line 81 in file "../src/Switch_B1.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;  sw              1    wreg     unsigned char 
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  sw              1    4[BANK0 ] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;		None               void
  6940 ;; Registers used:
  6941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;Total ram usage:        1 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    7
  6954 ;; This function calls:
  6955 ;;		_setLED
  6956 ;; This function is called by:
  6957 ;;		_Switch_Initialization
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           
  6962                           ;psect for function _setSw_Initialization
  6963  1C94                     _setSw_Initialization:	
  6964                           
  6965                           ;incstack = 0
  6966                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6967                           ;setSw_Initialization@sw stored from wreg
  6968  1C94  0020               	movlb	0	; select bank0
  6969  1C95  00A4               	movwf	setSw_Initialization@sw
  6970                           
  6971                           ;Switch_B1.c: 82: setLED(sw, 1);
  6972  1C96  01A2               	clrf	setLED@command
  6973  1C97  0AA2               	incf	setLED@command,f
  6974  1C98  0824               	movf	setSw_Initialization@sw,w
  6975  1C99  318B  2376         	fcall	_setLED
  6976  1C9B  0008               	return
  6977  1C9C                     __end_of_setSw_Initialization:	
  6978                           
  6979                           	psect	text28
  6980  1D7A                     __ptext28:	
  6981 ;; *************** function _TouchPower *****************
  6982 ;; Defined at:
  6983 ;;		line 10 in file "../src/Switch_B1.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;		None
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;		None
  6988 ;; Return value:  Size  Location     Type
  6989 ;;		None               void
  6990 ;; Registers used:
  6991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 0/0
  6994 ;;		On exit  : 0/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;Total ram usage:        0 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:    6
  7004 ;; This function calls:
  7005 ;;		_Timeout_Counter
  7006 ;;		_set_TimeoutCleared
  7007 ;; This function is called by:
  7008 ;;		_Switch_Initialization
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           
  7013                           ;psect for function _TouchPower
  7014  1D7A                     _TouchPower:	
  7015                           
  7016                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  7017                           
  7018                           ;incstack = 0
  7019                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7020  1D7A  2D80               	goto	l7750
  7021  1D7B                     l2802:	
  7022                           
  7023                           ;Switch_B1.c: 12: RC5 = 1;
  7024  1D7B  0020               	movlb	0	; select bank0
  7025  1D7C  168E               	bsf	14,5	;volatile
  7026                           
  7027                           ;Switch_B1.c: 13: Timeout_Counter();
  7028  1D7D  319E  26A6  319D   	fcall	_Timeout_Counter
  7029  1D80                     l7750:	
  7030  1D80  0020               	movlb	0	; select bank0
  7031  1D81  1A8E               	btfsc	14,5	;volatile
  7032  1D82  2D86               	goto	l7754
  7033  1D83  0021               	movlb	1	; select bank1
  7034  1D84  1D2F               	btfss	(_myMain^(0+128)+15),2
  7035  1D85  2D7B               	goto	l2802
  7036  1D86                     l7754:	
  7037                           
  7038                           ;Switch_B1.c: 14: }
  7039                           ;Switch_B1.c: 15: set_TimeoutCleared();
  7040  1D86  3190  2066         	fcall	_set_TimeoutCleared
  7041  1D88  0008               	return
  7042  1D89                     __end_of_TouchPower:	
  7043                           
  7044                           	psect	text29
  7045  1C49                     __ptext29:	
  7046 ;; *************** function _RF_Main *****************
  7047 ;; Defined at:
  7048 ;;		line 16 in file "../src/RF_Control_B1.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:   14
  7069 ;; This function calls:
  7070 ;;		_setRF_Main
  7071 ;; This function is called by:
  7072 ;;		_main
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           
  7077                           ;psect for function _RF_Main
  7078  1C49                     _RF_Main:	
  7079                           
  7080                           ;RF_Control_B1.c: 18: setRF_Main();
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7084  1C49  318A  2294         	fcall	_setRF_Main
  7085  1C4B  0008               	return
  7086  1C4C                     __end_of_RF_Main:	
  7087                           
  7088                           	psect	text30
  7089  0A94                     __ptext30:	
  7090 ;; *************** function _setRF_Main *****************
  7091 ;; Defined at:
  7092 ;;		line 51 in file "../src/RF_Control_B1.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;		None
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;		None
  7097 ;; Return value:  Size  Location     Type
  7098 ;;		None               void
  7099 ;; Registers used:
  7100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;Total ram usage:        2 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:   13
  7113 ;; This function calls:
  7114 ;;		_CC2500_RxData
  7115 ;;		_CC2500_TxData
  7116 ;;		_CC2500_WriteCommand
  7117 ;;		_RF_RxDisable
  7118 ;;		_getBuz_GO
  7119 ;;		_getRxData
  7120 ;; This function is called by:
  7121 ;;		_RF_Main
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _setRF_Main
  7127  0A94                     _setRF_Main:	
  7128                           
  7129                           ;RF_Control_B1.c: 52: if (RF1.Enable == 1) {
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7133  0A94  0021               	movlb	1	; select bank1
  7134  0A95  1C42               	btfss	_RF1^(0+128),0
  7135  0A96  0008               	return
  7136                           
  7137                           ;RF_Control_B1.c: 55: if (getBuz_GO() == 0) {
  7138  0A97  319D  25F8  318A   	fcall	_getBuz_GO
  7139  0A9A  0020               	movlb	0	; select bank0
  7140  0A9B  0821               	movf	?_getBuz_GO+1,w
  7141  0A9C  0420               	iorwf	?_getBuz_GO,w
  7142  0A9D  1D03               	skipz
  7143  0A9E  0008               	return
  7144                           
  7145                           ;RF_Control_B1.c: 57: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  7146  0A9F  01E8               	clrf	_setRF_Main$4670
  7147  0AA0  0AE8               	incf	_setRF_Main$4670,f
  7148  0AA1  1C0C               	btfss	12,0	;volatile
  7149  0AA2  1B0C               	btfsc	12,6	;volatile
  7150  0AA3  2AA6               	goto	l8608
  7151  0AA4  1E0C               	btfss	12,4	;volatile
  7152  0AA5  01E8               	clrf	_setRF_Main$4670
  7153  0AA6                     l8608:	
  7154  0AA6  0868               	movf	_setRF_Main$4670,w
  7155  0AA7  0021               	movlb	1	; select bank1
  7156  0AA8  13C2               	bcf	_RF1^(0+128),7
  7157  0AA9  1D03               	skipz
  7158  0AAA  17C2               	bsf	_RF1^(0+128),7
  7159                           
  7160                           ;RF_Control_B1.c: 67: if (RF1.Key == 1 && RF1.Learn == 0) {
  7161  0AAB  1BC2               	btfsc	_RF1^(0+128),7
  7162  0AAC  1B42               	btfsc	_RF1^(0+128),6
  7163  0AAD  2AB2               	goto	l2351
  7164                           
  7165                           ;RF_Control_B1.c: 68: RF1.Run = 1;
  7166  0AAE  14C3               	bsf	(_RF1^(0+128)+1),1
  7167                           
  7168                           ;RF_Control_B1.c: 69: RF_RxDisable();
  7169  0AAF  319D  256B         	fcall	_RF_RxDisable
  7170                           
  7171                           ;RF_Control_B1.c: 70: } else {
  7172  0AB1  0008               	return
  7173  0AB2                     l2351:	
  7174                           
  7175                           ;RF_Control_B1.c: 71: if (RF1.Run == 1 && RF1.Learn == 0) {
  7176  0AB2  18C3               	btfsc	(_RF1^(0+128)+1),1
  7177  0AB3  1B42               	btfsc	_RF1^(0+128),6
  7178  0AB4  2AC2               	goto	l8628
  7179                           
  7180                           ;RF_Control_B1.c: 72: RF1.Count++;
  7181  0AB5  3001               	movlw	1
  7182  0AB6  0020               	movlb	0	; select bank0
  7183  0AB7  00E7               	movwf	??_setRF_Main
  7184  0AB8  0867               	movf	??_setRF_Main,w
  7185  0AB9  0021               	movlb	1	; select bank1
  7186  0ABA  07C5               	addwf	(_RF1^(0+128)+3),f
  7187                           
  7188                           ;RF_Control_B1.c: 73: if (RF1.Count == 5) {
  7189  0ABB  0845               	movf	(_RF1^(0+128)+3),w
  7190  0ABC  3A05               	xorlw	5
  7191  0ABD  1D03               	skipz
  7192  0ABE  0008               	return
  7193                           
  7194                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  7195  0ABF  01C5               	clrf	(_RF1^(0+128)+3)
  7196                           
  7197                           ;RF_Control_B1.c: 75: RF1.Run = 0;
  7198  0AC0  10C3               	bcf	(_RF1^(0+128)+1),1
  7199                           
  7200                           ;RF_Control_B1.c: 76: }
  7201                           ;RF_Control_B1.c: 77: } else {
  7202  0AC1  0008               	return
  7203  0AC2                     l8628:	
  7204                           
  7205                           ;RF_Control_B1.c: 78: RF1.Count = 0;
  7206  0AC2  01C5               	clrf	(_RF1^(0+128)+3)
  7207                           
  7208                           ;RF_Control_B1.c: 79: RF1.Run = 0;
  7209  0AC3  10C3               	bcf	(_RF1^(0+128)+1),1
  7210                           
  7211                           ;RF_Control_B1.c: 89: if (RF1.ReceiveGO == 1) {
  7212  0AC4  1CC2               	btfss	_RF1^(0+128),1
  7213  0AC5  2ACF               	goto	l2356
  7214                           
  7215                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  7216  0AC6  10C2               	bcf	_RF1^(0+128),1
  7217                           
  7218                           ;RF_Control_B1.c: 91: CC2500_RxData();
  7219  0AC7  318B  23E9  318A   	fcall	_CC2500_RxData
  7220                           
  7221                           ;RF_Control_B1.c: 98: getRxData();
  7222  0ACA  3195  2583         	fcall	_getRxData
  7223                           
  7224                           ;RF_Control_B1.c: 100: RF1.Run = 1;
  7225  0ACC  0021               	movlb	1	; select bank1
  7226  0ACD  14C3               	bsf	(_RF1^(0+128)+1),1
  7227                           
  7228                           ;RF_Control_B1.c: 102: } else {
  7229  0ACE  0008               	return
  7230  0ACF                     l2356:	
  7231                           
  7232                           ;RF_Control_B1.c: 103: if (RF1.Learn == 0) {
  7233  0ACF  1B42               	btfsc	_RF1^(0+128),6
  7234  0AD0  2AF4               	goto	l2358
  7235                           
  7236                           ;RF_Control_B1.c: 104: if (RF1.TransceiveGO == 1) {
  7237  0AD1  1D42               	btfss	_RF1^(0+128),2
  7238  0AD2  2AE3               	goto	l2359
  7239                           
  7240                           ;RF_Control_B1.c: 105: RF1.TransceiveGO = 0;
  7241  0AD3  1142               	bcf	_RF1^(0+128),2
  7242                           
  7243                           ;RF_Control_B1.c: 106: RF1.RxStatus = 0;
  7244  0AD4  11C2               	bcf	_RF1^(0+128),3
  7245                           
  7246                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  7247  0AD5  10C2               	bcf	_RF1^(0+128),1
  7248                           
  7249                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x36);
  7250  0AD6  3036               	movlw	54
  7251  0AD7  319F  2721  318A   	fcall	_CC2500_WriteCommand
  7252                           
  7253                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x3B);
  7254  0ADA  303B               	movlw	59
  7255  0ADB  319F  2721  318A   	fcall	_CC2500_WriteCommand
  7256                           
  7257                           ;RF_Control_B1.c: 111: CC2500_TxData();
  7258  0ADE  3188  20F9         	fcall	_CC2500_TxData
  7259                           
  7260                           ;RF_Control_B1.c: 112: RF1.Run = 1;
  7261  0AE0  0021               	movlb	1	; select bank1
  7262  0AE1  14C3               	bsf	(_RF1^(0+128)+1),1
  7263                           
  7264                           ;RF_Control_B1.c: 113: } else {
  7265  0AE2  0008               	return
  7266  0AE3                     l2359:	
  7267                           
  7268                           ;RF_Control_B1.c: 115: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7269  0AE3  19C2               	btfsc	_RF1^(0+128),3
  7270  0AE4  0008               	return
  7271  0AE5  18C2               	btfsc	_RF1^(0+128),1
  7272  0AE6  0008               	return
  7273                           
  7274                           ;RF_Control_B1.c: 116: RF1.RxStatus = 1;
  7275  0AE7  15C2               	bsf	_RF1^(0+128),3
  7276                           
  7277                           ;RF_Control_B1.c: 117: CC2500_WriteCommand(0x36);
  7278  0AE8  3036               	movlw	54
  7279  0AE9  319F  2721  318A   	fcall	_CC2500_WriteCommand
  7280                           
  7281                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x3A);
  7282  0AEC  303A               	movlw	58
  7283  0AED  319F  2721  318A   	fcall	_CC2500_WriteCommand
  7284                           
  7285                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x34);
  7286  0AF0  3034               	movlw	52
  7287  0AF1  319F  2721         	fcall	_CC2500_WriteCommand
  7288                           
  7289                           ;RF_Control_B1.c: 121: }
  7290                           ;RF_Control_B1.c: 124: }
  7291                           ;RF_Control_B1.c: 125: } else {
  7292  0AF3  0008               	return
  7293  0AF4                     l2358:	
  7294                           
  7295                           ;RF_Control_B1.c: 127: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7296  0AF4  19C2               	btfsc	_RF1^(0+128),3
  7297  0AF5  0008               	return
  7298  0AF6  18C2               	btfsc	_RF1^(0+128),1
  7299  0AF7  0008               	return
  7300                           
  7301                           ;RF_Control_B1.c: 128: RF1.RxStatus = 1;
  7302  0AF8  15C2               	bsf	_RF1^(0+128),3
  7303                           
  7304                           ;RF_Control_B1.c: 129: CC2500_WriteCommand(0x36);
  7305  0AF9  3036               	movlw	54
  7306  0AFA  319F  2721  318A   	fcall	_CC2500_WriteCommand
  7307                           
  7308                           ;RF_Control_B1.c: 130: CC2500_WriteCommand(0x3A);
  7309  0AFD  303A               	movlw	58
  7310  0AFE  319F  2721  318A   	fcall	_CC2500_WriteCommand
  7311                           
  7312                           ;RF_Control_B1.c: 131: CC2500_WriteCommand(0x34);
  7313  0B01  3034               	movlw	52
  7314  0B02  319F  2721         	fcall	_CC2500_WriteCommand
  7315  0B04  0008               	return
  7316  0B05                     __end_of_setRF_Main:	
  7317                           
  7318                           	psect	text31
  7319  1583                     __ptext31:	
  7320 ;; *************** function _getRxData *****************
  7321 ;; Defined at:
  7322 ;;		line 216 in file "../src/RF_Control_B1.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;		None
  7327 ;; Return value:  Size  Location     Type
  7328 ;;		None               void
  7329 ;; Registers used:
  7330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;Total ram usage:        0 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:   12
  7343 ;; This function calls:
  7344 ;;		_setControl_Lights_Table
  7345 ;;		_setLog_Code
  7346 ;; This function is called by:
  7347 ;;		_setRF_Main
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           
  7352                           ;psect for function _getRxData
  7353  1583                     _getRxData:	
  7354                           
  7355                           ;RF_Control_B1.c: 217: if (RF1.Learn == 1) {
  7356                           
  7357                           ;incstack = 0
  7358                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7359  1583  0021               	movlb	1	; select bank1
  7360  1584  1F42               	btfss	_RF1^(0+128),6
  7361  1585  2D91               	goto	l8416
  7362                           
  7363                           ;RF_Control_B1.c: 218: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7364  1586  0022               	movlb	2	; select bank2
  7365  1587  08A0               	movf	_RF_Data^(0+256),f
  7366  1588  1D03               	skipz
  7367  1589  0008               	return
  7368  158A  0821               	movf	(_RF_Data^(0+256)+1),w
  7369  158B  3A64               	xorlw	100
  7370  158C  1D03               	skipz
  7371  158D  0008               	return
  7372                           
  7373                           ;RF_Control_B1.c: 219: {
  7374                           ;RF_Control_B1.c: 220: setLog_Code();
  7375  158E  3193  2358         	fcall	_setLog_Code
  7376                           
  7377                           ;RF_Control_B1.c: 221: }
  7378                           ;RF_Control_B1.c: 222: } else {
  7379  1590  0008               	return
  7380  1591                     l8416:	
  7381                           
  7382                           ;RF_Control_B1.c: 223: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7383  1591  0022               	movlb	2	; select bank2
  7384  1592  08A0               	movf	_RF_Data^(0+256),f
  7385  1593  1D03               	skipz
  7386  1594  0008               	return
  7387  1595  0821               	movf	(_RF_Data^(0+256)+1),w
  7388  1596  3A02               	xorlw	2
  7389  1597  1D03               	skipz
  7390  1598  0008               	return
  7391                           
  7392                           ;RF_Control_B1.c: 224: {
  7393                           ;RF_Control_B1.c: 225: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7394  1599  082C               	movf	(_RF_Data^(0+256)+12),w
  7395  159A  3AFF               	xorlw	255
  7396  159B  1D03               	skipz
  7397  159C  2DA7               	goto	l8428
  7398  159D  082D               	movf	(_RF_Data^(0+256)+13),w
  7399  159E  3AFF               	xorlw	255
  7400  159F  1D03               	skipz
  7401  15A0  2DA7               	goto	l8428
  7402  15A1  082E               	movf	(_RF_Data^(0+256)+14),w
  7403  15A2  3AFF               	xorlw	255
  7404  15A3  1D03               	skipz
  7405  15A4  2DA7               	goto	l8428
  7406                           
  7407                           ;RF_Control_B1.c: 226: __nop();
  7408  15A5  0000               	nop
  7409                           
  7410                           ;RF_Control_B1.c: 227: } else {
  7411  15A6  0008               	return
  7412  15A7                     l8428:	
  7413                           
  7414                           ;RF_Control_B1.c: 228: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7415  15A7  0020               	movlb	0	; select bank0
  7416  15A8  086F               	movf	_product,w
  7417  15A9  3E0C               	addlw	12
  7418  15AA  0086               	movwf	6
  7419  15AB  3002               	movlw	2	; select bank4/5
  7420  15AC  0087               	movwf	7
  7421  15AD  0022               	movlb	2	; select bank2
  7422  15AE  082C               	movf	(_RF_Data^(0+256)+12),w
  7423  15AF  0601               	xorwf	1,w
  7424  15B0  1D03               	skipz
  7425  15B1  0008               	return
  7426  15B2  0020               	movlb	0	; select bank0
  7427  15B3  086F               	movf	_product,w
  7428  15B4  3E0D               	addlw	13
  7429  15B5  0086               	movwf	6
  7430  15B6  3002               	movlw	2	; select bank4/5
  7431  15B7  0087               	movwf	7
  7432  15B8  0022               	movlb	2	; select bank2
  7433  15B9  082D               	movf	(_RF_Data^(0+256)+13),w
  7434  15BA  0601               	xorwf	1,w
  7435  15BB  1D03               	skipz
  7436  15BC  0008               	return
  7437  15BD  0020               	movlb	0	; select bank0
  7438  15BE  086F               	movf	_product,w
  7439  15BF  3E0E               	addlw	14
  7440  15C0  0086               	movwf	6
  7441  15C1  3002               	movlw	2	; select bank4/5
  7442  15C2  0087               	movwf	7
  7443  15C3  0022               	movlb	2	; select bank2
  7444  15C4  082E               	movf	(_RF_Data^(0+256)+14),w
  7445  15C5  0601               	xorwf	1,w
  7446  15C6  1D03               	skipz
  7447  15C7  0008               	return
  7448                           
  7449                           ;RF_Control_B1.c: 229: setControl_Lights_Table();
  7450  15C8  3186  269E         	fcall	_setControl_Lights_Table
  7451                           
  7452                           ;RF_Control_B1.c: 236: {
  7453                           ;RF_Control_B1.c: 237: ;
  7454                           
  7455                           ;RF_Control_B1.c: 233: {
  7456                           ;RF_Control_B1.c: 234: ;
  7457                           ;RF_Control_B1.c: 235: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7458                           
  7459                           ;RF_Control_B1.c: 230: }
  7460                           ;RF_Control_B1.c: 231: }
  7461                           ;RF_Control_B1.c: 232: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7462  15CA  0008               	return
  7463  15CB                     __end_of_getRxData:	
  7464                           
  7465                           	psect	text32
  7466  1358                     __ptext32:	
  7467 ;; *************** function _setLog_Code *****************
  7468 ;; Defined at:
  7469 ;;		line 247 in file "../src/RF_Control_B1.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        1 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    7
  7490 ;; This function calls:
  7491 ;;		_setBuz
  7492 ;; This function is called by:
  7493 ;;		_getRxData
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           
  7498                           ;psect for function _setLog_Code
  7499  1358                     _setLog_Code:	
  7500                           
  7501                           ;RF_Control_B1.c: 248: product->Data[12]=RF_Data[12];
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7505  1358  0022               	movlb	2	; select bank2
  7506  1359  082C               	movf	(_RF_Data^(0+256)+12),w
  7507  135A  0020               	movlb	0	; select bank0
  7508  135B  00AD               	movwf	??_setLog_Code
  7509  135C  086F               	movf	_product,w
  7510  135D  3E0C               	addlw	12
  7511  135E  0086               	movwf	6
  7512  135F  3002               	movlw	2	; select bank4/5
  7513  1360  0087               	movwf	7
  7514  1361  082D               	movf	??_setLog_Code,w
  7515  1362  0081               	movwf	1
  7516                           
  7517                           ;RF_Control_B1.c: 249: product->Data[13]=RF_Data[13];
  7518  1363  0022               	movlb	2	; select bank2
  7519  1364  082D               	movf	(_RF_Data^(0+256)+13),w
  7520  1365  0020               	movlb	0	; select bank0
  7521  1366  00AD               	movwf	??_setLog_Code
  7522  1367  086F               	movf	_product,w
  7523  1368  3E0D               	addlw	13
  7524  1369  0086               	movwf	6
  7525  136A  3002               	movlw	2	; select bank4/5
  7526  136B  0087               	movwf	7
  7527  136C  082D               	movf	??_setLog_Code,w
  7528  136D  0081               	movwf	1
  7529                           
  7530                           ;RF_Control_B1.c: 250: product->Data[14]=RF_Data[14];
  7531  136E  0022               	movlb	2	; select bank2
  7532  136F  082E               	movf	(_RF_Data^(0+256)+14),w
  7533  1370  0020               	movlb	0	; select bank0
  7534  1371  00AD               	movwf	??_setLog_Code
  7535  1372  086F               	movf	_product,w
  7536  1373  3E0E               	addlw	14
  7537  1374  0086               	movwf	6
  7538  1375  3002               	movlw	2	; select bank4/5
  7539  1376  0087               	movwf	7
  7540  1377  082D               	movf	??_setLog_Code,w
  7541  1378  0081               	movwf	1
  7542                           
  7543                           ;RF_Control_B1.c: 251: setBuz(1, 100);
  7544  1379  3064               	movlw	100
  7545  137A  00A9               	movwf	setBuz@time
  7546  137B  3000               	movlw	0
  7547  137C  00AA               	movwf	setBuz@time+1
  7548  137D  3001               	movlw	1
  7549  137E  3197  27A7  3193   	fcall	_setBuz
  7550                           
  7551                           ;RF_Control_B1.c: 252: RF1.Learn = 0;
  7552  1381  0021               	movlb	1	; select bank1
  7553  1382  1342               	bcf	_RF1^(0+128),6
  7554                           
  7555                           ;RF_Control_B1.c: 253: if (myMain.First) {
  7556  1383  1FA0               	btfss	_myMain^(0+128),7
  7557  1384  2B87               	goto	l2394
  7558                           
  7559                           ;RF_Control_B1.c: 254: Memory.LoopSave=1;
  7560  1385  0023               	movlb	3	; select bank3
  7561  1386  1544               	bsf	(_Memory^(0+384)+36),2
  7562  1387                     l2394:	
  7563                           
  7564                           ;RF_Control_B1.c: 255: }
  7565                           ;RF_Control_B1.c: 256: Memory.Modify=1;
  7566  1387  0023               	movlb	3	; select bank3
  7567  1388  1444               	bsf	(_Memory^(0+384)+36),0
  7568  1389  0008               	return
  7569  138A                     __end_of_setLog_Code:	
  7570                           
  7571                           	psect	text33
  7572  069E                     __ptext33:	
  7573 ;; *************** function _setControl_Lights_Table *****************
  7574 ;; Defined at:
  7575 ;;		line 260 in file "../src/RF_Control_B1.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;		None               void
  7582 ;; Registers used:
  7583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;Total ram usage:        0 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; Hardware stack levels required when called:   11
  7596 ;; This function calls:
  7597 ;;		_setBuz
  7598 ;;		_setDimmerLights
  7599 ;;		_setRFSW_AdjControl
  7600 ;;		_setRFSW_Control
  7601 ;;		_setRFSW_Status
  7602 ;;		_setSw_Status
  7603 ;;		_setTxData
  7604 ;; This function is called by:
  7605 ;;		_getRxData
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _setControl_Lights_Table
  7611  069E                     _setControl_Lights_Table:	
  7612                           
  7613                           ;RF_Control_B1.c: 261: if (RF_Data[15] == 0x00) {
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7617  069E  0022               	movlb	2	; select bank2
  7618  069F  08AF               	movf	(_RF_Data^(0+256)+15),f
  7619  06A0  1D03               	skipz
  7620  06A1  2EFC               	goto	l8366
  7621                           
  7622                           ;RF_Control_B1.c: 263: setDimmerLights(1, 0);
  7623  06A2  0020               	movlb	0	; select bank0
  7624  06A3  01A4               	clrf	setDimmerLights@status
  7625  06A4  3001               	movlw	1
  7626  06A5  318D  2551  3186   	fcall	_setDimmerLights
  7627                           
  7628                           ;RF_Control_B1.c: 264: setRFSW_Status(1, 0);
  7629  06A8  0020               	movlb	0	; select bank0
  7630  06A9  01A2               	clrf	setRFSW_Status@command
  7631  06AA  3001               	movlw	1
  7632  06AB  319D  253E  3186   	fcall	_setRFSW_Status
  7633                           
  7634                           ;RF_Control_B1.c: 265: setSw_Status(1, 0);
  7635  06AE  0020               	movlb	0	; select bank0
  7636  06AF  01A1               	clrf	setSw_Status@command
  7637  06B0  3001               	movlw	1
  7638  06B1  319D  254D  3186   	fcall	_setSw_Status
  7639                           
  7640                           ;RF_Control_B1.c: 268: setDimmerLights(2, 0);
  7641  06B4  0020               	movlb	0	; select bank0
  7642  06B5  01A4               	clrf	setDimmerLights@status
  7643  06B6  3002               	movlw	2
  7644  06B7  318D  2551  3186   	fcall	_setDimmerLights
  7645                           
  7646                           ;RF_Control_B1.c: 269: setRFSW_Status(2, 0);
  7647  06BA  0020               	movlb	0	; select bank0
  7648  06BB  01A2               	clrf	setRFSW_Status@command
  7649  06BC  3002               	movlw	2
  7650  06BD  319D  253E  3186   	fcall	_setRFSW_Status
  7651                           
  7652                           ;RF_Control_B1.c: 270: setSw_Status(2, 0);
  7653  06C0  0020               	movlb	0	; select bank0
  7654  06C1  01A1               	clrf	setSw_Status@command
  7655  06C2  3002               	movlw	2
  7656  06C3  319D  254D  3186   	fcall	_setSw_Status
  7657                           
  7658                           ;RF_Control_B1.c: 273: setDimmerLights(3, 0);
  7659  06C6  0020               	movlb	0	; select bank0
  7660  06C7  01A4               	clrf	setDimmerLights@status
  7661  06C8  3003               	movlw	3
  7662  06C9  318D  2551  3186   	fcall	_setDimmerLights
  7663                           
  7664                           ;RF_Control_B1.c: 274: setRFSW_Status(3, 0);
  7665  06CC  0020               	movlb	0	; select bank0
  7666  06CD  01A2               	clrf	setRFSW_Status@command
  7667  06CE  3003               	movlw	3
  7668  06CF  319D  253E  3186   	fcall	_setRFSW_Status
  7669                           
  7670                           ;RF_Control_B1.c: 275: setSw_Status(3, 0);
  7671  06D2  0020               	movlb	0	; select bank0
  7672  06D3  01A1               	clrf	setSw_Status@command
  7673  06D4  3003               	movlw	3
  7674  06D5  319D  254D  3186   	fcall	_setSw_Status
  7675                           
  7676                           ;RF_Control_B1.c: 278: product->Data[9]=0;
  7677  06D8  0020               	movlb	0	; select bank0
  7678  06D9  086F               	movf	_product,w
  7679  06DA  3E09               	addlw	9
  7680  06DB  0086               	movwf	6
  7681  06DC  3002               	movlw	2	; select bank4/5
  7682  06DD  0087               	movwf	7
  7683  06DE  0181               	clrf	1
  7684                           
  7685                           ;RF_Control_B1.c: 279: product->Data[11]=0;
  7686  06DF  086F               	movf	_product,w
  7687  06E0  3E0B               	addlw	11
  7688  06E1  0086               	movwf	6
  7689  06E2  3002               	movlw	2	; select bank4/5
  7690  06E3  0087               	movwf	7
  7691  06E4  0181               	clrf	1
  7692                           
  7693                           ;RF_Control_B1.c: 280: product->Data[15]=0;
  7694  06E5  086F               	movf	_product,w
  7695  06E6  3E0F               	addlw	15
  7696  06E7  0086               	movwf	6
  7697  06E8  3002               	movlw	2	; select bank4/5
  7698  06E9  0087               	movwf	7
  7699  06EA  0181               	clrf	1
  7700                           
  7701                           ;RF_Control_B1.c: 281: product->Data[17]=0;
  7702  06EB  086F               	movf	_product,w
  7703  06EC  3E11               	addlw	17
  7704  06ED  0086               	movwf	6
  7705  06EE  3002               	movlw	2	; select bank4/5
  7706  06EF  0087               	movwf	7
  7707  06F0  0181               	clrf	1
  7708                           
  7709                           ;RF_Control_B1.c: 282: setBuz(1, 100);
  7710  06F1  3064               	movlw	100
  7711  06F2  00A9               	movwf	setBuz@time
  7712  06F3  3000               	movlw	0
  7713  06F4  00AA               	movwf	setBuz@time+1
  7714  06F5  3001               	movlw	1
  7715  06F6  3197  27A7  3186   	fcall	_setBuz
  7716                           
  7717                           ;RF_Control_B1.c: 283: setTxData();
  7718  06F9  3185  2531         	fcall	_setTxData
  7719                           
  7720                           ;RF_Control_B1.c: 284: } else if (RF_Data[15] == 0x20) {
  7721  06FB  0008               	return
  7722  06FC                     l8366:	
  7723  06FC  0022               	movlb	2	; select bank2
  7724  06FD  082F               	movf	(_RF_Data^(0+256)+15),w
  7725  06FE  3A20               	xorlw	32
  7726  06FF  1D03               	skipz
  7727  0700  2F17               	goto	l8372
  7728                           
  7729                           ;RF_Control_B1.c: 285: product->Data[9]=0;
  7730  0701  0020               	movlb	0	; select bank0
  7731  0702  086F               	movf	_product,w
  7732  0703  3E09               	addlw	9
  7733  0704  0086               	movwf	6
  7734  0705  3002               	movlw	2	; select bank4/5
  7735  0706  0087               	movwf	7
  7736  0707  0181               	clrf	1
  7737                           
  7738                           ;RF_Control_B1.c: 286: product->Data[11]=0;
  7739  0708  086F               	movf	_product,w
  7740  0709  3E0B               	addlw	11
  7741  070A  0086               	movwf	6
  7742  070B  3002               	movlw	2	; select bank4/5
  7743  070C  0087               	movwf	7
  7744  070D  0181               	clrf	1
  7745                           
  7746                           ;RF_Control_B1.c: 287: product->Data[17]=0;
  7747  070E  086F               	movf	_product,w
  7748  070F  3E11               	addlw	17
  7749  0710  0086               	movwf	6
  7750  0711  3002               	movlw	2	; select bank4/5
  7751  0712  0087               	movwf	7
  7752  0713  0181               	clrf	1
  7753                           
  7754                           ;RF_Control_B1.c: 288: setTxData();
  7755  0714  3185  2531         	fcall	_setTxData
  7756                           
  7757                           ;RF_Control_B1.c: 289: }
  7758  0716  0008               	return
  7759  0717                     l8372:	
  7760                           
  7761                           ;RF_Control_B1.c: 291: else if (RF_Data[15] == 0x01) {
  7762  0717  0022               	movlb	2	; select bank2
  7763  0718  082F               	movf	(_RF_Data^(0+256)+15),w
  7764  0719  3A01               	xorlw	1
  7765  071A  1D03               	skipz
  7766  071B  2F20               	goto	l8376
  7767                           
  7768                           ;RF_Control_B1.c: 292: setRFSW_Control(1);
  7769  071C  3001               	movlw	1
  7770  071D  318F  2770         	fcall	_setRFSW_Control
  7771                           
  7772                           ;RF_Control_B1.c: 293: }
  7773  071F  0008               	return
  7774  0720                     l8376:	
  7775                           
  7776                           ;RF_Control_B1.c: 295: else if (RF_Data[15] == 0x11) {
  7777  0720  0022               	movlb	2	; select bank2
  7778  0721  082F               	movf	(_RF_Data^(0+256)+15),w
  7779  0722  3A11               	xorlw	17
  7780  0723  1D03               	skipz
  7781  0724  2F29               	goto	l8380
  7782                           
  7783                           ;RF_Control_B1.c: 296: setRFSW_AdjControl(1);
  7784  0725  3001               	movlw	1
  7785  0726  3193  23F5         	fcall	_setRFSW_AdjControl
  7786                           
  7787                           ;RF_Control_B1.c: 297: }
  7788  0728  0008               	return
  7789  0729                     l8380:	
  7790                           
  7791                           ;RF_Control_B1.c: 302: else if (RF_Data[15] == 0x02) {
  7792  0729  0022               	movlb	2	; select bank2
  7793  072A  082F               	movf	(_RF_Data^(0+256)+15),w
  7794  072B  3A02               	xorlw	2
  7795  072C  1D03               	skipz
  7796  072D  2F32               	goto	l8384
  7797                           
  7798                           ;RF_Control_B1.c: 303: setRFSW_Control(2);
  7799  072E  3002               	movlw	2
  7800  072F  318F  2770         	fcall	_setRFSW_Control
  7801                           
  7802                           ;RF_Control_B1.c: 304: }
  7803  0731  0008               	return
  7804  0732                     l8384:	
  7805                           
  7806                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x21) {
  7807  0732  0022               	movlb	2	; select bank2
  7808  0733  082F               	movf	(_RF_Data^(0+256)+15),w
  7809  0734  3A21               	xorlw	33
  7810  0735  1D03               	skipz
  7811  0736  2F3B               	goto	l8388
  7812                           
  7813                           ;RF_Control_B1.c: 307: setRFSW_AdjControl(2);
  7814  0737  3002               	movlw	2
  7815  0738  3193  23F5         	fcall	_setRFSW_AdjControl
  7816                           
  7817                           ;RF_Control_B1.c: 308: }
  7818  073A  0008               	return
  7819  073B                     l8388:	
  7820                           
  7821                           ;RF_Control_B1.c: 313: else if (RF_Data[15] == 0x03) {
  7822  073B  0022               	movlb	2	; select bank2
  7823  073C  082F               	movf	(_RF_Data^(0+256)+15),w
  7824  073D  3A03               	xorlw	3
  7825  073E  1D03               	skipz
  7826  073F  2F44               	goto	l8392
  7827                           
  7828                           ;RF_Control_B1.c: 314: setRFSW_Control(3);
  7829  0740  3003               	movlw	3
  7830  0741  318F  2770         	fcall	_setRFSW_Control
  7831                           
  7832                           ;RF_Control_B1.c: 315: }
  7833  0743  0008               	return
  7834  0744                     l8392:	
  7835                           
  7836                           ;RF_Control_B1.c: 317: else if (RF_Data[15] == 0x31) {
  7837  0744  0022               	movlb	2	; select bank2
  7838  0745  082F               	movf	(_RF_Data^(0+256)+15),w
  7839  0746  3A31               	xorlw	49
  7840  0747  1D03               	skipz
  7841  0748  0008               	return
  7842                           
  7843                           ;RF_Control_B1.c: 318: setRFSW_AdjControl(3);
  7844  0749  3003               	movlw	3
  7845  074A  3193  23F5         	fcall	_setRFSW_AdjControl
  7846  074C  0008               	return
  7847  074D                     __end_of_setControl_Lights_Table:	
  7848                           
  7849                           	psect	text34
  7850  0F70                     __ptext34:	
  7851 ;; *************** function _setRFSW_Control *****************
  7852 ;; Defined at:
  7853 ;;		line 348 in file "../src/RF_Control_B1.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;  sw              1    wreg     unsigned char 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  sw              1   67[BANK0 ] unsigned char 
  7858 ;; Return value:  Size  Location     Type
  7859 ;;		None               void
  7860 ;; Registers used:
  7861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;Total ram usage:        2 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    9
  7874 ;; This function calls:
  7875 ;;		_RfSWPointSelect
  7876 ;;		_setBuz
  7877 ;;		_setDelayOff_GO
  7878 ;;		_setDimmerLights_Switch
  7879 ;;		_setDimmerLights_Trigger
  7880 ;;		_setRF_DimmerLights
  7881 ;;		_setSw_Status
  7882 ;;		_setTxData
  7883 ;; This function is called by:
  7884 ;;		_setControl_Lights_Table
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _setRFSW_Control
  7890  0F70                     _setRFSW_Control:	
  7891                           
  7892                           ;incstack = 0
  7893                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7894                           ;setRFSW_Control@sw stored from wreg
  7895  0F70  0020               	movlb	0	; select bank0
  7896  0F71  00E3               	movwf	setRFSW_Control@sw
  7897                           
  7898                           ;RF_Control_B1.c: 349: RfSWPointSelect(sw);
  7899  0F72  0863               	movf	setRFSW_Control@sw,w
  7900  0F73  3190  20C8  318F   	fcall	_RfSWPointSelect
  7901                           
  7902                           ;RF_Control_B1.c: 350: if (RFSW->Status == 0) {
  7903  0F76  0021               	movlb	1	; select bank1
  7904  0F77  0850               	movf	_RFSW^(0+128),w
  7905  0F78  0086               	movwf	6
  7906  0F79  0187               	clrf	7
  7907  0F7A  1801               	btfsc	1,0
  7908  0F7B  2FB2               	goto	l6548
  7909                           
  7910                           ;RF_Control_B1.c: 351: if (RF_Data[16] == 0x80) {
  7911  0F7C  0022               	movlb	2	; select bank2
  7912  0F7D  0830               	movf	(_RF_Data^(0+256)+16),w
  7913  0F7E  3A80               	xorlw	128
  7914  0F7F  1D03               	skipz
  7915  0F80  2F8E               	goto	l6538
  7916                           
  7917                           ;RF_Control_B1.c: 352: setDelayOff_GO(sw, 1, RF_Data[17]);
  7918  0F81  0020               	movlb	0	; select bank0
  7919  0F82  01AA               	clrf	setDelayOff_GO@command
  7920  0F83  0AAA               	incf	setDelayOff_GO@command,f
  7921  0F84  0022               	movlb	2	; select bank2
  7922  0F85  0831               	movf	(_RF_Data^(0+256)+17),w
  7923  0F86  0020               	movlb	0	; select bank0
  7924  0F87  00E2               	movwf	??_setRFSW_Control
  7925  0F88  0862               	movf	??_setRFSW_Control,w
  7926  0F89  00AB               	movwf	setDelayOff_GO@value
  7927  0F8A  0863               	movf	setRFSW_Control@sw,w
  7928  0F8B  3189  21C2  318F   	fcall	_setDelayOff_GO
  7929  0F8E                     l6538:	
  7930                           
  7931                           ;RF_Control_B1.c: 353: }
  7932                           ;RF_Control_B1.c: 354: RFSW->Status = 1;
  7933  0F8E  0021               	movlb	1	; select bank1
  7934  0F8F  0850               	movf	_RFSW^(0+128),w
  7935  0F90  0086               	movwf	6
  7936  0F91  0187               	clrf	7
  7937  0F92  1401               	bsf	1,0
  7938                           
  7939                           ;RF_Control_B1.c: 355: setSw_Status(sw, 1);
  7940  0F93  0020               	movlb	0	; select bank0
  7941  0F94  01A1               	clrf	setSw_Status@command
  7942  0F95  0AA1               	incf	setSw_Status@command,f
  7943  0F96  0863               	movf	setRFSW_Control@sw,w
  7944  0F97  319D  254D  318F   	fcall	_setSw_Status
  7945                           
  7946                           ;RF_Control_B1.c: 357: setDimmerLights_Trigger(sw, 1);
  7947  0F9A  0020               	movlb	0	; select bank0
  7948  0F9B  01A2               	clrf	setDimmerLights_Trigger@command
  7949  0F9C  0AA2               	incf	setDimmerLights_Trigger@command,f
  7950  0F9D  0863               	movf	setRFSW_Control@sw,w
  7951  0F9E  319D  25A8  318F   	fcall	_setDimmerLights_Trigger
  7952                           
  7953                           ;RF_Control_B1.c: 358: setDimmerLights_Switch(sw, 1);
  7954  0FA1  0020               	movlb	0	; select bank0
  7955  0FA2  01A2               	clrf	setDimmerLights_Switch@command
  7956  0FA3  0AA2               	incf	setDimmerLights_Switch@command,f
  7957  0FA4  0863               	movf	setRFSW_Control@sw,w
  7958  0FA5  319D  2598  318F   	fcall	_setDimmerLights_Switch
  7959                           
  7960                           ;RF_Control_B1.c: 360: setRF_DimmerLights(sw, RFSW->Status);
  7961  0FA8  0021               	movlb	1	; select bank1
  7962  0FA9  0850               	movf	_RFSW^(0+128),w
  7963  0FAA  0086               	movwf	6
  7964  0FAB  0187               	clrf	7
  7965  0FAC  3000               	movlw	0
  7966  0FAD  1801               	btfsc	1,0
  7967  0FAE  3001               	movlw	1
  7968  0FAF  0020               	movlb	0	; select bank0
  7969  0FB0  00DD               	movwf	setRF_DimmerLights@on
  7970  0FB1  2FF0               	goto	L6
  7971  0FB2                     l6548:	
  7972                           ;RF_Control_B1.c: 361: } else {
  7973                           
  7974                           
  7975                           ;RF_Control_B1.c: 362: if (RF_Data[16] == 0x80) {
  7976  0FB2  0022               	movlb	2	; select bank2
  7977  0FB3  0830               	movf	(_RF_Data^(0+256)+16),w
  7978  0FB4  3A80               	xorlw	128
  7979  0FB5  1D03               	skipz
  7980  0FB6  2FC8               	goto	l6552
  7981                           
  7982                           ;RF_Control_B1.c: 363: setDelayOff_GO(sw, 1, RF_Data[17]);
  7983  0FB7  0020               	movlb	0	; select bank0
  7984  0FB8  01AA               	clrf	setDelayOff_GO@command
  7985  0FB9  0AAA               	incf	setDelayOff_GO@command,f
  7986  0FBA  0022               	movlb	2	; select bank2
  7987  0FBB  0831               	movf	(_RF_Data^(0+256)+17),w
  7988  0FBC  0020               	movlb	0	; select bank0
  7989  0FBD  00E2               	movwf	??_setRFSW_Control
  7990  0FBE  0862               	movf	??_setRFSW_Control,w
  7991  0FBF  00AB               	movwf	setDelayOff_GO@value
  7992  0FC0  0863               	movf	setRFSW_Control@sw,w
  7993  0FC1  3189  21C2  318F   	fcall	_setDelayOff_GO
  7994                           
  7995                           ;RF_Control_B1.c: 364: setRF_DimmerLights(sw, 1);
  7996  0FC4  0020               	movlb	0	; select bank0
  7997  0FC5  01DD               	clrf	setRF_DimmerLights@on
  7998  0FC6  0ADD               	incf	setRF_DimmerLights@on,f
  7999  0FC7  2FF0               	goto	L6
  8000  0FC8                     l6552:	
  8001                           ;RF_Control_B1.c: 365: } else {
  8002                           
  8003                           
  8004                           ;RF_Control_B1.c: 366: RFSW->Status = 0;
  8005  0FC8  0021               	movlb	1	; select bank1
  8006  0FC9  0850               	movf	_RFSW^(0+128),w
  8007  0FCA  0086               	movwf	6
  8008  0FCB  0187               	clrf	7
  8009  0FCC  1001               	bcf	1,0
  8010                           
  8011                           ;RF_Control_B1.c: 367: setSw_Status(sw, 0);
  8012  0FCD  0020               	movlb	0	; select bank0
  8013  0FCE  01A1               	clrf	setSw_Status@command
  8014  0FCF  0863               	movf	setRFSW_Control@sw,w
  8015  0FD0  319D  254D  318F   	fcall	_setSw_Status
  8016                           
  8017                           ;RF_Control_B1.c: 369: setDimmerLights_Trigger(sw, 1);
  8018  0FD3  0020               	movlb	0	; select bank0
  8019  0FD4  01A2               	clrf	setDimmerLights_Trigger@command
  8020  0FD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  8021  0FD6  0863               	movf	setRFSW_Control@sw,w
  8022  0FD7  319D  25A8  318F   	fcall	_setDimmerLights_Trigger
  8023                           
  8024                           ;RF_Control_B1.c: 370: setDimmerLights_Switch(sw, RFSW->Status);
  8025  0FDA  0021               	movlb	1	; select bank1
  8026  0FDB  0850               	movf	_RFSW^(0+128),w
  8027  0FDC  0086               	movwf	6
  8028  0FDD  0187               	clrf	7
  8029  0FDE  3000               	movlw	0
  8030  0FDF  1801               	btfsc	1,0
  8031  0FE0  3001               	movlw	1
  8032  0FE1  0020               	movlb	0	; select bank0
  8033  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  8034  0FE3  0863               	movf	setRFSW_Control@sw,w
  8035  0FE4  319D  2598  318F   	fcall	_setDimmerLights_Switch
  8036                           
  8037                           ;RF_Control_B1.c: 372: setDelayOff_GO(sw, 0, 0);
  8038  0FE7  0020               	movlb	0	; select bank0
  8039  0FE8  01AA               	clrf	setDelayOff_GO@command
  8040  0FE9  01AB               	clrf	setDelayOff_GO@value
  8041  0FEA  0863               	movf	setRFSW_Control@sw,w
  8042  0FEB  3189  21C2  318F   	fcall	_setDelayOff_GO
  8043                           
  8044                           ;RF_Control_B1.c: 373: setRF_DimmerLights(sw, 0);
  8045  0FEE  0020               	movlb	0	; select bank0
  8046  0FEF  01DD               	clrf	setRF_DimmerLights@on
  8047  0FF0                     L6:	
  8048  0FF0  0863               	movf	setRFSW_Control@sw,w
  8049  0FF1  318A  2228  318F   	fcall	_setRF_DimmerLights
  8050                           
  8051                           ;RF_Control_B1.c: 374: }
  8052                           ;RF_Control_B1.c: 375: }
  8053                           ;RF_Control_B1.c: 376: setBuz(1, 100);
  8054  0FF4  3064               	movlw	100
  8055  0FF5  0020               	movlb	0	; select bank0
  8056  0FF6  00A9               	movwf	setBuz@time
  8057  0FF7  3000               	movlw	0
  8058  0FF8  00AA               	movwf	setBuz@time+1
  8059  0FF9  3001               	movlw	1
  8060  0FFA  3197  27A7  318F   	fcall	_setBuz
  8061                           
  8062                           ;RF_Control_B1.c: 377: setTxData();
  8063  0FFD  3185  2531         	fcall	_setTxData
  8064  0FFF  0008               	return
  8065  1000                     __end_of_setRFSW_Control:	
  8066                           
  8067                           	psect	text35
  8068  09C2                     __ptext35:	
  8069 ;; *************** function _setDelayOff_GO *****************
  8070 ;; Defined at:
  8071 ;;		line 86 in file "../src/DelayOff_B1.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  sw              1    wreg     unsigned char 
  8074 ;;  command         1   10[BANK0 ] unsigned char 
  8075 ;;  value           1   11[BANK0 ] unsigned char 
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;  sw              1   14[BANK0 ] unsigned char 
  8078 ;; Return value:  Size  Location     Type
  8079 ;;		None               void
  8080 ;; Registers used:
  8081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;Total ram usage:        5 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    7
  8094 ;; This function calls:
  8095 ;;		_DelayOffPointSelect
  8096 ;;		_DelayTimejudge
  8097 ;; This function is called by:
  8098 ;;		_setRFSW_Control
  8099 ;;		_Sw_DimmerOffFunc
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           
  8104                           ;psect for function _setDelayOff_GO
  8105  09C2                     _setDelayOff_GO:	
  8106                           
  8107                           ;incstack = 0
  8108                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8109                           ;setDelayOff_GO@sw stored from wreg
  8110  09C2  0020               	movlb	0	; select bank0
  8111  09C3  00AE               	movwf	setDelayOff_GO@sw
  8112                           
  8113                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8114  09C4  082E               	movf	setDelayOff_GO@sw,w
  8115  09C5  319F  27A9  3189   	fcall	_DelayOffPointSelect
  8116                           
  8117                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8118  09C8  087A               	movf	_DelayOff,w
  8119  09C9  0086               	movwf	6
  8120  09CA  3001               	movlw	1	; select bank2/3
  8121  09CB  0087               	movwf	7
  8122  09CC  1C01               	btfss	1,0
  8123  09CD  0008               	return
  8124                           
  8125                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8126  09CE  0020               	movlb	0	; select bank0
  8127  09CF  082A               	movf	setDelayOff_GO@command,w
  8128  09D0  3A01               	xorlw	1
  8129  09D1  3000               	movlw	0
  8130  09D2  1903               	skipnz
  8131  09D3  3001               	movlw	1
  8132  09D4  00AC               	movwf	??_setDelayOff_GO
  8133  09D5  087A               	movf	_DelayOff,w
  8134  09D6  0086               	movwf	6
  8135  09D7  3001               	movlw	1	; select bank2/3
  8136  09D8  0087               	movwf	7
  8137  09D9  0DAC               	rlf	??_setDelayOff_GO,f
  8138  09DA  0801               	movf	1,w
  8139  09DB  062C               	xorwf	??_setDelayOff_GO,w
  8140  09DC  39FD               	andlw	-3
  8141  09DD  062C               	xorwf	??_setDelayOff_GO,w
  8142  09DE  0081               	movwf	1
  8143                           
  8144                           ;DelayOff_B1.c: 90: if (command == 1) {
  8145  09DF  082A               	movf	setDelayOff_GO@command,w
  8146  09E0  3A01               	xorlw	1
  8147  09E1  1D03               	skipz
  8148  09E2  2A0D               	goto	l6328
  8149                           
  8150                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8151  09E3  082B               	movf	setDelayOff_GO@value,w
  8152  09E4  3192  224F  3189   	fcall	_DelayTimejudge
  8153  09E7  0020               	movlb	0	; select bank0
  8154  09E8  00AC               	movwf	??_setDelayOff_GO
  8155  09E9  0A7A               	incf	_DelayOff,w
  8156  09EA  0086               	movwf	6
  8157  09EB  3001               	movlw	1	; select bank2/3
  8158  09EC  0087               	movwf	7
  8159  09ED  082C               	movf	??_setDelayOff_GO,w
  8160  09EE  0081               	movwf	1
  8161                           
  8162                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8163  09EF  300F               	movlw	15
  8164  09F0  052B               	andwf	setDelayOff_GO@value,w
  8165  09F1  00AC               	movwf	??_setDelayOff_GO
  8166  09F2  082C               	movf	??_setDelayOff_GO,w
  8167  09F3  3A05               	xorlw	5
  8168  09F4  1903               	skipnz
  8169  09F5  29FA               	goto	l6322
  8170  09F6  082B               	movf	setDelayOff_GO@value,w
  8171  09F7  390F               	andlw	15
  8172  09F8  1D03               	btfss	3,2
  8173  09F9  2A00               	goto	l6326
  8174  09FA                     l6322:	
  8175  09FA  3026               	movlw	38
  8176  09FB  022B               	subwf	setDelayOff_GO@value,w
  8177  09FC  1803               	skipnc
  8178  09FD  2A00               	goto	l6326
  8179                           
  8180                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8181  09FE  082B               	movf	setDelayOff_GO@value,w
  8182  09FF  2A01               	goto	L7
  8183  0A00                     l6326:	
  8184                           ;DelayOff_B1.c: 94: } else {
  8185                           
  8186                           
  8187                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8188  0A00  3005               	movlw	5
  8189  0A01                     L7:	
  8190  0A01  00AC               	movwf	??_setDelayOff_GO
  8191  0A02  082E               	movf	setDelayOff_GO@sw,w
  8192  0A03  3E1A               	addlw	26
  8193  0A04  076F               	addwf	_product,w
  8194  0A05  00AD               	movwf	??_setDelayOff_GO+1
  8195  0A06  082D               	movf	??_setDelayOff_GO+1,w
  8196  0A07  0086               	movwf	6
  8197  0A08  3002               	movlw	2	; select bank4/5
  8198  0A09  0087               	movwf	7
  8199  0A0A  082C               	movf	??_setDelayOff_GO,w
  8200  0A0B  0081               	movwf	1
  8201                           
  8202                           ;DelayOff_B1.c: 96: }
  8203                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8204  0A0C  2A19               	goto	l6332
  8205  0A0D                     l6328:	
  8206  0A0D  08AA               	movf	setDelayOff_GO@command,f
  8207  0A0E  1D03               	skipz
  8208  0A0F  2A19               	goto	l6332
  8209                           
  8210                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8211  0A10  082E               	movf	setDelayOff_GO@sw,w
  8212  0A11  3E1A               	addlw	26
  8213  0A12  076F               	addwf	_product,w
  8214  0A13  00AC               	movwf	??_setDelayOff_GO
  8215  0A14  082C               	movf	??_setDelayOff_GO,w
  8216  0A15  0086               	movwf	6
  8217  0A16  3002               	movlw	2	; select bank4/5
  8218  0A17  0087               	movwf	7
  8219  0A18  0181               	clrf	1
  8220  0A19                     l6332:	
  8221                           
  8222                           ;DelayOff_B1.c: 99: }
  8223                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8224  0A19  087A               	movf	_DelayOff,w
  8225  0A1A  3E02               	addlw	2
  8226  0A1B  0086               	movwf	6
  8227  0A1C  3001               	movlw	1	; select bank2/3
  8228  0A1D  0087               	movwf	7
  8229  0A1E  3000               	movlw	0
  8230  0A1F  3FC0               	movwi [0]fsr1
  8231  0A20  3FC1               	movwi [1]fsr1
  8232                           
  8233                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8234  0A21  087A               	movf	_DelayOff,w
  8235  0A22  3E04               	addlw	4
  8236  0A23  0086               	movwf	6
  8237  0A24  3001               	movlw	1	; select bank2/3
  8238  0A25  0087               	movwf	7
  8239  0A26  0181               	clrf	1
  8240  0A27  0008               	return
  8241  0A28                     __end_of_setDelayOff_GO:	
  8242                           
  8243                           	psect	text36
  8244  124F                     __ptext36:	
  8245 ;; *************** function _DelayTimejudge *****************
  8246 ;; Defined at:
  8247 ;;		line 106 in file "../src/DelayOff_B1.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  value           1    wreg     unsigned char 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  value           1    9[BANK0 ] unsigned char 
  8252 ;;  k               1    8[BANK0 ] unsigned char 
  8253 ;;  j               1    7[BANK0 ] unsigned char 
  8254 ;;  i               1    6[BANK0 ] unsigned char 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      unsigned char 
  8257 ;; Registers used:
  8258 ;;		wreg, status,2, status,0, pclath, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;Total ram usage:        6 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    6
  8271 ;; This function calls:
  8272 ;;		___bmul
  8273 ;; This function is called by:
  8274 ;;		_setDelayOff_GO
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function _DelayTimejudge
  8280  124F                     _DelayTimejudge:	
  8281                           
  8282                           ;incstack = 0
  8283                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8284                           ;DelayTimejudge@value stored from wreg
  8285  124F  0020               	movlb	0	; select bank0
  8286  1250  00A9               	movwf	DelayTimejudge@value
  8287                           
  8288                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8289  1251  3005               	movlw	5
  8290  1252  00A4               	movwf	??_DelayTimejudge
  8291  1253  0824               	movf	??_DelayTimejudge,w
  8292  1254  00A6               	movwf	DelayTimejudge@i
  8293  1255  01A7               	clrf	DelayTimejudge@j
  8294  1256  01A8               	clrf	DelayTimejudge@k
  8295                           
  8296                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8297  1257  3031               	movlw	49
  8298  1258  0229               	subwf	DelayTimejudge@value,w
  8299  1259  1803               	skipnc
  8300  125A  2A77               	goto	l6104
  8301                           
  8302                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8303  125B  0829               	movf	DelayTimejudge@value,w
  8304  125C  390F               	andlw	15
  8305  125D  00A4               	movwf	??_DelayTimejudge
  8306  125E  0824               	movf	??_DelayTimejudge,w
  8307  125F  00A7               	movwf	DelayTimejudge@j
  8308                           
  8309                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8310  1260  0829               	movf	DelayTimejudge@value,w
  8311  1261  00A4               	movwf	??_DelayTimejudge
  8312  1262  3004               	movlw	4
  8313  1263                     u4725:	
  8314  1263  36A4               	lsrf	??_DelayTimejudge,f
  8315  1264  0B89               	decfsz	9,f
  8316  1265  2A63               	goto	u4725
  8317  1266  0824               	movf	??_DelayTimejudge,w
  8318  1267  390F               	andlw	15
  8319  1268  00A5               	movwf	??_DelayTimejudge+1
  8320  1269  0825               	movf	??_DelayTimejudge+1,w
  8321  126A  00A8               	movwf	DelayTimejudge@k
  8322                           
  8323                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8324  126B  300A               	movlw	10
  8325  126C  00A4               	movwf	??_DelayTimejudge
  8326  126D  0824               	movf	??_DelayTimejudge,w
  8327  126E  00A0               	movwf	___bmul@multiplicand
  8328  126F  0828               	movf	DelayTimejudge@k,w
  8329  1270  319E  262C         	fcall	___bmul
  8330  1272  0020               	movlb	0	; select bank0
  8331  1273  0727               	addwf	DelayTimejudge@j,w
  8332  1274  00A5               	movwf	??_DelayTimejudge+1
  8333  1275  0825               	movf	??_DelayTimejudge+1,w
  8334  1276  00A6               	movwf	DelayTimejudge@i
  8335  1277                     l6104:	
  8336                           
  8337                           ;DelayOff_B1.c: 112: }
  8338                           ;DelayOff_B1.c: 133: return i;
  8339  1277  0826               	movf	DelayTimejudge@i,w
  8340  1278  0008               	return
  8341  1279                     __end_of_DelayTimejudge:	
  8342                           
  8343                           	psect	text37
  8344  1E2C                     __ptext37:	
  8345 ;; *************** function ___bmul *****************
  8346 ;; Defined at:
  8347 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;  multiplier      1    wreg     unsigned char 
  8350 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8353 ;;  product         1    2[BANK0 ] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      unsigned char 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8363 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;Total ram usage:        4 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    5
  8370 ;; This function calls:
  8371 ;;		Nothing
  8372 ;; This function is called by:
  8373 ;;		_DelayTimejudge
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function ___bmul
  8379  1E2C                     ___bmul:	
  8380                           
  8381                           ;incstack = 0
  8382                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8383                           ;___bmul@multiplier stored from wreg
  8384  1E2C  0020               	movlb	0	; select bank0
  8385  1E2D  00A3               	movwf	___bmul@multiplier
  8386  1E2E  01A2               	clrf	___bmul@product
  8387  1E2F                     l6066:	
  8388  1E2F  1C23               	btfss	___bmul@multiplier,0
  8389  1E30  2E35               	goto	l6070
  8390  1E31  0820               	movf	___bmul@multiplicand,w
  8391  1E32  00A1               	movwf	??___bmul
  8392  1E33  0821               	movf	??___bmul,w
  8393  1E34  07A2               	addwf	___bmul@product,f
  8394  1E35                     l6070:	
  8395  1E35  1003               	clrc
  8396  1E36  0DA0               	rlf	___bmul@multiplicand,f
  8397  1E37  1003               	clrc
  8398  1E38  0CA3               	rrf	___bmul@multiplier,f
  8399  1E39  08A3               	movf	___bmul@multiplier,f
  8400  1E3A  1D03               	skipz
  8401  1E3B  2E2F               	goto	l6066
  8402  1E3C  0822               	movf	___bmul@product,w
  8403  1E3D  0008               	return
  8404  1E3E                     __end_of___bmul:	
  8405                           
  8406                           	psect	text38
  8407  13F5                     __ptext38:	
  8408 ;; *************** function _setRFSW_AdjControl *****************
  8409 ;; Defined at:
  8410 ;;		line 381 in file "../src/RF_Control_B1.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  sw              1    wreg     unsigned char 
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;  sw              1   70[BANK0 ] unsigned char 
  8415 ;; Return value:  Size  Location     Type
  8416 ;;		None               void
  8417 ;; Registers used:
  8418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;Total ram usage:        3 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:   10
  8431 ;; This function calls:
  8432 ;;		_RfSWPointSelect
  8433 ;;		_setRF_DimmerValue
  8434 ;;		_setTxData
  8435 ;; This function is called by:
  8436 ;;		_setControl_Lights_Table
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           
  8441                           ;psect for function _setRFSW_AdjControl
  8442  13F5                     _setRFSW_AdjControl:	
  8443                           
  8444                           ;incstack = 0
  8445                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8446                           ;setRFSW_AdjControl@sw stored from wreg
  8447  13F5  0020               	movlb	0	; select bank0
  8448  13F6  00E6               	movwf	setRFSW_AdjControl@sw
  8449                           
  8450                           ;RF_Control_B1.c: 382: RfSWPointSelect(sw);
  8451  13F7  0866               	movf	setRFSW_AdjControl@sw,w
  8452  13F8  3190  20C8  3193   	fcall	_RfSWPointSelect
  8453                           
  8454                           ;RF_Control_B1.c: 383: if (RFSW->Status == 1) {
  8455  13FB  0021               	movlb	1	; select bank1
  8456  13FC  0850               	movf	_RFSW^(0+128),w
  8457  13FD  0086               	movwf	6
  8458  13FE  0187               	clrf	7
  8459  13FF  1C01               	btfss	1,0
  8460  1400  2C09               	goto	l6576
  8461                           
  8462                           ;RF_Control_B1.c: 384: Memory.Modify=1;
  8463  1401  0023               	movlb	3	; select bank3
  8464  1402  1444               	bsf	(_Memory^(0+384)+36),0
  8465                           
  8466                           ;RF_Control_B1.c: 385: setRF_DimmerValue(sw);
  8467  1403  0020               	movlb	0	; select bank0
  8468  1404  0866               	movf	setRFSW_AdjControl@sw,w
  8469  1405  3193  238A  3193   	fcall	_setRF_DimmerValue
  8470                           
  8471                           ;RF_Control_B1.c: 386: } else {
  8472  1408  2C1B               	goto	l2431
  8473  1409                     l6576:	
  8474                           
  8475                           ;RF_Control_B1.c: 387: product->Data[9]=product->Data[20 + sw];
  8476  1409  0020               	movlb	0	; select bank0
  8477  140A  0866               	movf	setRFSW_AdjControl@sw,w
  8478  140B  3E14               	addlw	20
  8479  140C  076F               	addwf	_product,w
  8480  140D  00E4               	movwf	??_setRFSW_AdjControl
  8481  140E  0864               	movf	??_setRFSW_AdjControl,w
  8482  140F  0086               	movwf	6
  8483  1410  3002               	movlw	2	; select bank4/5
  8484  1411  0087               	movwf	7
  8485  1412  0801               	movf	1,w
  8486  1413  00E5               	movwf	??_setRFSW_AdjControl+1
  8487  1414  086F               	movf	_product,w
  8488  1415  3E09               	addlw	9
  8489  1416  0086               	movwf	6
  8490  1417  3002               	movlw	2	; select bank4/5
  8491  1418  0087               	movwf	7
  8492  1419  0865               	movf	??_setRFSW_AdjControl+1,w
  8493  141A  0081               	movwf	1
  8494  141B                     l2431:	
  8495                           
  8496                           ;RF_Control_B1.c: 388: }
  8497                           ;RF_Control_B1.c: 389: product->Data[17]=product->Data[26 + sw];
  8498  141B  0020               	movlb	0	; select bank0
  8499  141C  0866               	movf	setRFSW_AdjControl@sw,w
  8500  141D  3E1A               	addlw	26
  8501  141E  076F               	addwf	_product,w
  8502  141F  00E4               	movwf	??_setRFSW_AdjControl
  8503  1420  0864               	movf	??_setRFSW_AdjControl,w
  8504  1421  0086               	movwf	6
  8505  1422  3002               	movlw	2	; select bank4/5
  8506  1423  0087               	movwf	7
  8507  1424  0801               	movf	1,w
  8508  1425  00E5               	movwf	??_setRFSW_AdjControl+1
  8509  1426  086F               	movf	_product,w
  8510  1427  3E11               	addlw	17
  8511  1428  0086               	movwf	6
  8512  1429  3002               	movlw	2	; select bank4/5
  8513  142A  0087               	movwf	7
  8514  142B  0865               	movf	??_setRFSW_AdjControl+1,w
  8515  142C  0081               	movwf	1
  8516                           
  8517                           ;RF_Control_B1.c: 390: setTxData();
  8518  142D  3185  2531         	fcall	_setTxData
  8519  142F  0008               	return
  8520  1430                     __end_of_setRFSW_AdjControl:	
  8521                           
  8522                           	psect	text39
  8523  138A                     __ptext39:	
  8524 ;; *************** function _setRF_DimmerValue *****************
  8525 ;; Defined at:
  8526 ;;		line 401 in file "../src/RF_Control_B1.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  lights          1    wreg     unsigned char 
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;  lights          1   67[BANK0 ] unsigned char 
  8531 ;; Return value:  Size  Location     Type
  8532 ;;		None               void
  8533 ;; Registers used:
  8534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;Total ram usage:        3 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    9
  8547 ;; This function calls:
  8548 ;;		_setDimmerLights_AdjRF
  8549 ;; This function is called by:
  8550 ;;		_setRFSW_AdjControl
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           
  8555                           ;psect for function _setRF_DimmerValue
  8556  138A                     _setRF_DimmerValue:	
  8557                           
  8558                           ;incstack = 0
  8559                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8560                           ;setRF_DimmerValue@lights stored from wreg
  8561  138A  0020               	movlb	0	; select bank0
  8562  138B  00E3               	movwf	setRF_DimmerValue@lights
  8563                           
  8564                           ;RF_Control_B1.c: 402: if (RF_Data[9] > 0x64) {
  8565  138C  3065               	movlw	101
  8566  138D  0022               	movlb	2	; select bank2
  8567  138E  0229               	subwf	(_RF_Data^(0+256)+9),w
  8568  138F  1C03               	skipc
  8569  1390  2B97               	goto	l6408
  8570                           
  8571                           ;RF_Control_B1.c: 403: RF_Data[9] = 0x64;
  8572  1391  3064               	movlw	100
  8573  1392  0020               	movlb	0	; select bank0
  8574  1393  00E1               	movwf	??_setRF_DimmerValue
  8575  1394  0861               	movf	??_setRF_DimmerValue,w
  8576  1395  0022               	movlb	2	; select bank2
  8577  1396  00A9               	movwf	(_RF_Data^(0+256)+9)
  8578  1397                     l6408:	
  8579                           
  8580                           ;RF_Control_B1.c: 404: }
  8581                           ;RF_Control_B1.c: 405: product->Data[9]=RF_Data[9];
  8582  1397  0829               	movf	(_RF_Data^(0+256)+9),w
  8583  1398  0020               	movlb	0	; select bank0
  8584  1399  00E1               	movwf	??_setRF_DimmerValue
  8585  139A  086F               	movf	_product,w
  8586  139B  3E09               	addlw	9
  8587  139C  0086               	movwf	6
  8588  139D  3002               	movlw	2	; select bank4/5
  8589  139E  0087               	movwf	7
  8590  139F  0861               	movf	??_setRF_DimmerValue,w
  8591  13A0  0081               	movwf	1
  8592                           
  8593                           ;RF_Control_B1.c: 406: product->Data[11]=lights;
  8594  13A1  0863               	movf	setRF_DimmerValue@lights,w
  8595  13A2  00E1               	movwf	??_setRF_DimmerValue
  8596  13A3  086F               	movf	_product,w
  8597  13A4  3E0B               	addlw	11
  8598  13A5  0086               	movwf	6
  8599  13A6  3002               	movlw	2	; select bank4/5
  8600  13A7  0087               	movwf	7
  8601  13A8  0861               	movf	??_setRF_DimmerValue,w
  8602  13A9  0081               	movwf	1
  8603                           
  8604                           ;RF_Control_B1.c: 407: product->Data[(20 + lights)]=product->Data[9];
  8605  13AA  086F               	movf	_product,w
  8606  13AB  3E09               	addlw	9
  8607  13AC  0086               	movwf	6
  8608  13AD  3002               	movlw	2	; select bank4/5
  8609  13AE  0087               	movwf	7
  8610  13AF  0801               	movf	1,w
  8611  13B0  00E1               	movwf	??_setRF_DimmerValue
  8612  13B1  0863               	movf	setRF_DimmerValue@lights,w
  8613  13B2  3E14               	addlw	20
  8614  13B3  076F               	addwf	_product,w
  8615  13B4  00E2               	movwf	??_setRF_DimmerValue+1
  8616  13B5  0862               	movf	??_setRF_DimmerValue+1,w
  8617  13B6  0086               	movwf	6
  8618  13B7  3002               	movlw	2	; select bank4/5
  8619  13B8  0087               	movwf	7
  8620  13B9  0861               	movf	??_setRF_DimmerValue,w
  8621  13BA  0081               	movwf	1
  8622                           
  8623                           ;RF_Control_B1.c: 408: setDimmerLights_AdjRF(lights);
  8624  13BB  0863               	movf	setRF_DimmerValue@lights,w
  8625  13BC  3191  218E         	fcall	_setDimmerLights_AdjRF
  8626  13BE  0008               	return
  8627  13BF                     __end_of_setRF_DimmerValue:	
  8628                           
  8629                           	psect	text40
  8630  118E                     __ptext40:	
  8631 ;; *************** function _setDimmerLights_AdjRF *****************
  8632 ;; Defined at:
  8633 ;;		line 679 in file "../src/Dimmer_B1.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  lights          1    wreg     unsigned char 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  lights          1   64[BANK0 ] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;		None               void
  8640 ;; Registers used:
  8641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;Total ram usage:        2 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    8
  8654 ;; This function calls:
  8655 ;;		_DimmerLightsPointSelect
  8656 ;;		_getPercentValue
  8657 ;; This function is called by:
  8658 ;;		_setRF_DimmerValue
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _setDimmerLights_AdjRF
  8664  118E                     _setDimmerLights_AdjRF:	
  8665                           
  8666                           ;incstack = 0
  8667                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8668                           ;setDimmerLights_AdjRF@lights stored from wreg
  8669  118E  0020               	movlb	0	; select bank0
  8670  118F  00E0               	movwf	setDimmerLights_AdjRF@lights
  8671                           
  8672                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  8673  1190  0860               	movf	setDimmerLights_AdjRF@lights,w
  8674  1191  319F  2755  3191   	fcall	_DimmerLightsPointSelect
  8675                           
  8676                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  8677  1194  087B               	movf	_DimmerLights,w
  8678  1195  0086               	movwf	6
  8679  1196  3001               	movlw	1	; select bank2/3
  8680  1197  0087               	movwf	7
  8681  1198  1501               	bsf	1,2
  8682                           
  8683                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  8684  1199  087B               	movf	_DimmerLights,w
  8685  119A  0086               	movwf	6
  8686  119B  3001               	movlw	1	; select bank2/3
  8687  119C  0087               	movwf	7
  8688  119D  1481               	bsf	1,1
  8689                           
  8690                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8691  119E  0020               	movlb	0	; select bank0
  8692  119F  086F               	movf	_product,w
  8693  11A0  3E09               	addlw	9
  8694  11A1  0086               	movwf	6
  8695  11A2  3002               	movlw	2	; select bank4/5
  8696  11A3  0087               	movwf	7
  8697  11A4  0801               	movf	1,w
  8698  11A5  3188  203D         	fcall	_getPercentValue
  8699  11A7  0020               	movlb	0	; select bank0
  8700  11A8  00DF               	movwf	??_setDimmerLights_AdjRF
  8701  11A9  087B               	movf	_DimmerLights,w
  8702  11AA  3E05               	addlw	5
  8703  11AB  0086               	movwf	6
  8704  11AC  3001               	movlw	1	; select bank2/3
  8705  11AD  0087               	movwf	7
  8706  11AE  085F               	movf	??_setDimmerLights_AdjRF,w
  8707  11AF  0081               	movwf	1
  8708  11B0  0008               	return
  8709  11B1                     __end_of_setDimmerLights_AdjRF:	
  8710                           
  8711                           	psect	text41
  8712  083D                     __ptext41:	
  8713 ;; *************** function _getPercentValue *****************
  8714 ;; Defined at:
  8715 ;;		line 752 in file "../src/Dimmer_B1.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  value           1    wreg     unsigned char 
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;  value           1   59[BANK0 ] unsigned char 
  8720 ;;  i               3   60[BANK0 ] float 
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  1    wreg      unsigned char 
  8723 ;; Registers used:
  8724 ;;		wreg, status,2, status,0, pclath, cstack
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;Total ram usage:        6 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; Hardware stack levels required when called:    7
  8737 ;; This function calls:
  8738 ;;		___awtoft
  8739 ;;		___ftadd
  8740 ;;		___ftdiv
  8741 ;;		___ftmul
  8742 ;;		___fttol
  8743 ;; This function is called by:
  8744 ;;		_setDimmerLights_AdjRF
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           
  8749                           ;psect for function _getPercentValue
  8750  083D                     _getPercentValue:	
  8751                           
  8752                           ;incstack = 0
  8753                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8754                           ;getPercentValue@value stored from wreg
  8755  083D  0020               	movlb	0	; select bank0
  8756  083E  00DB               	movwf	getPercentValue@value
  8757                           
  8758                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
  8759  083F  3000               	movlw	0
  8760  0840  00DC               	movwf	getPercentValue@i
  8761  0841  3060               	movlw	96
  8762  0842  00DD               	movwf	getPercentValue@i+1
  8763  0843  3042               	movlw	66
  8764  0844  00DE               	movwf	getPercentValue@i+2
  8765                           
  8766                           ;Dimmer_B1.c: 755: i /= 100;
  8767  0845  3000               	movlw	0
  8768  0846  00AE               	movwf	___ftdiv@f2
  8769  0847  30C8               	movlw	200
  8770  0848  00AF               	movwf	___ftdiv@f2+1
  8771  0849  3042               	movlw	66
  8772  084A  00B0               	movwf	___ftdiv@f2+2
  8773  084B  085C               	movf	getPercentValue@i,w
  8774  084C  00B1               	movwf	___ftdiv@f1
  8775  084D  085D               	movf	getPercentValue@i+1,w
  8776  084E  00B2               	movwf	___ftdiv@f1+1
  8777  084F  085E               	movf	getPercentValue@i+2,w
  8778  0850  00B3               	movwf	___ftdiv@f1+2
  8779  0851  3187  274D  3188   	fcall	___ftdiv
  8780  0854  0020               	movlb	0	; select bank0
  8781  0855  082E               	movf	?___ftdiv,w
  8782  0856  00DC               	movwf	getPercentValue@i
  8783  0857  082F               	movf	?___ftdiv+1,w
  8784  0858  00DD               	movwf	getPercentValue@i+1
  8785  0859  0830               	movf	?___ftdiv+2,w
  8786  085A  00DE               	movwf	getPercentValue@i+2
  8787                           
  8788                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-95)*0.8)));
  8789  085B  085B               	movf	getPercentValue@value,w
  8790  085C  00D9               	movwf	??_getPercentValue
  8791  085D  01DA               	clrf	??_getPercentValue+1
  8792  085E  09D9               	comf	??_getPercentValue,f
  8793  085F  09DA               	comf	??_getPercentValue+1,f
  8794  0860  0AD9               	incf	??_getPercentValue,f
  8795  0861  1903               	skipnz
  8796  0862  0ADA               	incf	??_getPercentValue+1,f
  8797  0863  0859               	movf	??_getPercentValue,w
  8798  0864  3E64               	addlw	100
  8799  0865  00A8               	movwf	___awtoft@c
  8800  0866  3000               	movlw	0
  8801  0867  3D5A               	addwfc	??_getPercentValue+1,w
  8802  0868  00A9               	movwf	___awtoft@c+1
  8803  0869  3191  2149  3188   	fcall	___awtoft
  8804  086C  0020               	movlb	0	; select bank0
  8805  086D  0828               	movf	?___awtoft,w
  8806  086E  00B1               	movwf	___ftmul@f2
  8807  086F  0829               	movf	?___awtoft+1,w
  8808  0870  00B2               	movwf	___ftmul@f2+1
  8809  0871  082A               	movf	?___awtoft+2,w
  8810  0872  00B3               	movwf	___ftmul@f2+2
  8811  0873  085C               	movf	getPercentValue@i,w
  8812  0874  00AE               	movwf	___ftmul@f1
  8813  0875  085D               	movf	getPercentValue@i+1,w
  8814  0876  00AF               	movwf	___ftmul@f1+1
  8815  0877  085E               	movf	getPercentValue@i+2,w
  8816  0878  00B0               	movwf	___ftmul@f1+2
  8817  0879  3185  25EA  3188   	fcall	___ftmul
  8818  087C  0020               	movlb	0	; select bank0
  8819  087D  082E               	movf	?___ftmul,w
  8820  087E  00C1               	movwf	___ftadd@f2
  8821  087F  082F               	movf	?___ftmul+1,w
  8822  0880  00C2               	movwf	___ftadd@f2+1
  8823  0881  0830               	movf	?___ftmul+2,w
  8824  0882  00C3               	movwf	___ftadd@f2+2
  8825  0883  3000               	movlw	0
  8826  0884  00BE               	movwf	___ftadd@f1
  8827  0885  3080               	movlw	128
  8828  0886  00BF               	movwf	___ftadd@f1+1
  8829  0887  3040               	movlw	64
  8830  0888  00C0               	movwf	___ftadd@f1+2
  8831  0889  3183  2374  3188   	fcall	___ftadd
  8832  088C  0020               	movlb	0	; select bank0
  8833  088D  083E               	movf	?___ftadd,w
  8834  088E  00CB               	movwf	___fttol@f1
  8835  088F  083F               	movf	?___ftadd+1,w
  8836  0890  00CC               	movwf	___fttol@f1+1
  8837  0891  0840               	movf	?___ftadd+2,w
  8838  0892  00CD               	movwf	___fttol@f1+2
  8839  0893  318D  25D1         	fcall	___fttol
  8840  0895  0020               	movlb	0	; select bank0
  8841  0896  084B               	movf	?___fttol,w
  8842  0897  0008               	return
  8843  0898                     __end_of_getPercentValue:	
  8844                           
  8845                           	psect	text42
  8846  05EA                     __ptext42:	
  8847 ;; *************** function ___ftmul *****************
  8848 ;; Defined at:
  8849 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  f1              3   14[BANK0 ] float 
  8852 ;;  f2              3   17[BANK0 ] float 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8855 ;;  sign            1   29[BANK0 ] unsigned char 
  8856 ;;  cntr            1   28[BANK0 ] unsigned char 
  8857 ;;  exp             1   24[BANK0 ] unsigned char 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  3   14[BANK0 ] float 
  8860 ;; Registers used:
  8861 ;;		wreg, status,2, status,0, pclath, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8867 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;Total ram usage:       16 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    6
  8874 ;; This function calls:
  8875 ;;		___ftpack
  8876 ;; This function is called by:
  8877 ;;		_getPercentValue
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function ___ftmul
  8883  05EA                     ___ftmul:	
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8887  05EA  0020               	movlb	0	; select bank0
  8888  05EB  082E               	movf	___ftmul@f1,w
  8889  05EC  00B4               	movwf	??___ftmul
  8890  05ED  082F               	movf	___ftmul@f1+1,w
  8891  05EE  00B5               	movwf	??___ftmul+1
  8892  05EF  0830               	movf	___ftmul@f1+2,w
  8893  05F0  00B6               	movwf	??___ftmul+2
  8894  05F1  1003               	clrc
  8895  05F2  0D35               	rlf	??___ftmul+1,w
  8896  05F3  0D36               	rlf	??___ftmul+2,w
  8897  05F4  00B7               	movwf	??___ftmul+3
  8898  05F5  0837               	movf	??___ftmul+3,w
  8899  05F6  00B8               	movwf	___ftmul@exp
  8900  05F7  08B8               	movf	___ftmul@exp,f
  8901  05F8  1D03               	skipz
  8902  05F9  2E01               	goto	l5960
  8903  05FA  3000               	movlw	0
  8904  05FB  00AE               	movwf	?___ftmul
  8905  05FC  3000               	movlw	0
  8906  05FD  00AF               	movwf	?___ftmul+1
  8907  05FE  3000               	movlw	0
  8908  05FF  00B0               	movwf	?___ftmul+2
  8909  0600  0008               	return
  8910  0601                     l5960:	
  8911  0601  0831               	movf	___ftmul@f2,w
  8912  0602  00B4               	movwf	??___ftmul
  8913  0603  0832               	movf	___ftmul@f2+1,w
  8914  0604  00B5               	movwf	??___ftmul+1
  8915  0605  0833               	movf	___ftmul@f2+2,w
  8916  0606  00B6               	movwf	??___ftmul+2
  8917  0607  1003               	clrc
  8918  0608  0D35               	rlf	??___ftmul+1,w
  8919  0609  0D36               	rlf	??___ftmul+2,w
  8920  060A  00B7               	movwf	??___ftmul+3
  8921  060B  0837               	movf	??___ftmul+3,w
  8922  060C  00BD               	movwf	___ftmul@sign
  8923  060D  08BD               	movf	___ftmul@sign,f
  8924  060E  1D03               	skipz
  8925  060F  2E17               	goto	l5966
  8926  0610  3000               	movlw	0
  8927  0611  00AE               	movwf	?___ftmul
  8928  0612  3000               	movlw	0
  8929  0613  00AF               	movwf	?___ftmul+1
  8930  0614  3000               	movlw	0
  8931  0615  00B0               	movwf	?___ftmul+2
  8932  0616  0008               	return
  8933  0617                     l5966:	
  8934  0617  083D               	movf	___ftmul@sign,w
  8935  0618  3E7B               	addlw	123
  8936  0619  00B4               	movwf	??___ftmul
  8937  061A  0834               	movf	??___ftmul,w
  8938  061B  07B8               	addwf	___ftmul@exp,f
  8939  061C  082E               	movf	___ftmul@f1,w
  8940  061D  00B4               	movwf	??___ftmul
  8941  061E  082F               	movf	___ftmul@f1+1,w
  8942  061F  00B5               	movwf	??___ftmul+1
  8943  0620  0830               	movf	___ftmul@f1+2,w
  8944  0621  00B6               	movwf	??___ftmul+2
  8945  0622  3010               	movlw	16
  8946  0623                     u4435:	
  8947  0623  36B6               	lsrf	??___ftmul+2,f
  8948  0624  0CB5               	rrf	??___ftmul+1,f
  8949  0625  0CB4               	rrf	??___ftmul,f
  8950  0626  0B89               	decfsz	9,f
  8951  0627  2E23               	goto	u4435
  8952  0628  0834               	movf	??___ftmul,w
  8953  0629  00B7               	movwf	??___ftmul+3
  8954  062A  0837               	movf	??___ftmul+3,w
  8955  062B  00BD               	movwf	___ftmul@sign
  8956  062C  0831               	movf	___ftmul@f2,w
  8957  062D  00B4               	movwf	??___ftmul
  8958  062E  0832               	movf	___ftmul@f2+1,w
  8959  062F  00B5               	movwf	??___ftmul+1
  8960  0630  0833               	movf	___ftmul@f2+2,w
  8961  0631  00B6               	movwf	??___ftmul+2
  8962  0632  3010               	movlw	16
  8963  0633                     u4445:	
  8964  0633  36B6               	lsrf	??___ftmul+2,f
  8965  0634  0CB5               	rrf	??___ftmul+1,f
  8966  0635  0CB4               	rrf	??___ftmul,f
  8967  0636  0B89               	decfsz	9,f
  8968  0637  2E33               	goto	u4445
  8969  0638  0834               	movf	??___ftmul,w
  8970  0639  00B7               	movwf	??___ftmul+3
  8971  063A  0837               	movf	??___ftmul+3,w
  8972  063B  06BD               	xorwf	___ftmul@sign,f
  8973  063C  3080               	movlw	128
  8974  063D  00B4               	movwf	??___ftmul
  8975  063E  0834               	movf	??___ftmul,w
  8976  063F  05BD               	andwf	___ftmul@sign,f
  8977  0640  17AF               	bsf	___ftmul@f1+1,7
  8978  0641  17B2               	bsf	___ftmul@f2+1,7
  8979  0642  30FF               	movlw	255
  8980  0643  05B1               	andwf	___ftmul@f2,f
  8981  0644  30FF               	movlw	255
  8982  0645  05B2               	andwf	___ftmul@f2+1,f
  8983  0646  3000               	movlw	0
  8984  0647  05B3               	andwf	___ftmul@f2+2,f
  8985  0648  3000               	movlw	0
  8986  0649  00B9               	movwf	___ftmul@f3_as_product
  8987  064A  3000               	movlw	0
  8988  064B  00BA               	movwf	___ftmul@f3_as_product+1
  8989  064C  3000               	movlw	0
  8990  064D  00BB               	movwf	___ftmul@f3_as_product+2
  8991  064E  3007               	movlw	7
  8992  064F  00B4               	movwf	??___ftmul
  8993  0650  0834               	movf	??___ftmul,w
  8994  0651  00BC               	movwf	___ftmul@cntr
  8995  0652                     l5978:	
  8996  0652  1C2E               	btfss	___ftmul@f1,0
  8997  0653  2E5A               	goto	l5982
  8998  0654  0831               	movf	___ftmul@f2,w
  8999  0655  07B9               	addwf	___ftmul@f3_as_product,f
  9000  0656  0832               	movf	___ftmul@f2+1,w
  9001  0657  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9002  0658  0833               	movf	___ftmul@f2+2,w
  9003  0659  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9004  065A                     l5982:	
  9005  065A  3001               	movlw	1
  9006  065B                     u4465:	
  9007  065B  36B0               	lsrf	___ftmul@f1+2,f
  9008  065C  0CAF               	rrf	___ftmul@f1+1,f
  9009  065D  0CAE               	rrf	___ftmul@f1,f
  9010  065E  0B89               	decfsz	9,f
  9011  065F  2E5B               	goto	u4465
  9012  0660  3001               	movlw	1
  9013  0661                     u4475:	
  9014  0661  35B1               	lslf	___ftmul@f2,f
  9015  0662  0DB2               	rlf	___ftmul@f2+1,f
  9016  0663  0DB3               	rlf	___ftmul@f2+2,f
  9017  0664  0B89               	decfsz	9,f
  9018  0665  2E61               	goto	u4475
  9019  0666  3001               	movlw	1
  9020  0667  02BC               	subwf	___ftmul@cntr,f
  9021  0668  1D03               	btfss	3,2
  9022  0669  2E52               	goto	l5978
  9023  066A  3009               	movlw	9
  9024  066B  00B4               	movwf	??___ftmul
  9025  066C  0834               	movf	??___ftmul,w
  9026  066D  00BC               	movwf	___ftmul@cntr
  9027  066E                     l5990:	
  9028  066E  1C2E               	btfss	___ftmul@f1,0
  9029  066F  2E76               	goto	l5994
  9030  0670  0831               	movf	___ftmul@f2,w
  9031  0671  07B9               	addwf	___ftmul@f3_as_product,f
  9032  0672  0832               	movf	___ftmul@f2+1,w
  9033  0673  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9034  0674  0833               	movf	___ftmul@f2+2,w
  9035  0675  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9036  0676                     l5994:	
  9037  0676  3001               	movlw	1
  9038  0677                     u4505:	
  9039  0677  36B0               	lsrf	___ftmul@f1+2,f
  9040  0678  0CAF               	rrf	___ftmul@f1+1,f
  9041  0679  0CAE               	rrf	___ftmul@f1,f
  9042  067A  0B89               	decfsz	9,f
  9043  067B  2E77               	goto	u4505
  9044  067C  3001               	movlw	1
  9045  067D                     u4515:	
  9046  067D  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9047  067E  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9048  067F  0CB9               	rrf	___ftmul@f3_as_product,f
  9049  0680  0B89               	decfsz	9,f
  9050  0681  2E7D               	goto	u4515
  9051  0682  3001               	movlw	1
  9052  0683  02BC               	subwf	___ftmul@cntr,f
  9053  0684  1D03               	btfss	3,2
  9054  0685  2E6E               	goto	l5990
  9055  0686  0839               	movf	___ftmul@f3_as_product,w
  9056  0687  00A0               	movwf	___ftpack@arg
  9057  0688  083A               	movf	___ftmul@f3_as_product+1,w
  9058  0689  00A1               	movwf	___ftpack@arg+1
  9059  068A  083B               	movf	___ftmul@f3_as_product+2,w
  9060  068B  00A2               	movwf	___ftpack@arg+2
  9061  068C  0838               	movf	___ftmul@exp,w
  9062  068D  00B4               	movwf	??___ftmul
  9063  068E  0834               	movf	??___ftmul,w
  9064  068F  00A3               	movwf	___ftpack@exp
  9065  0690  083D               	movf	___ftmul@sign,w
  9066  0691  00B5               	movwf	??___ftmul+1
  9067  0692  0835               	movf	??___ftmul+1,w
  9068  0693  00A4               	movwf	___ftpack@sign
  9069  0694  3188  2098         	fcall	___ftpack
  9070  0696  0020               	movlb	0	; select bank0
  9071  0697  0820               	movf	?___ftpack,w
  9072  0698  00AE               	movwf	?___ftmul
  9073  0699  0821               	movf	?___ftpack+1,w
  9074  069A  00AF               	movwf	?___ftmul+1
  9075  069B  0822               	movf	?___ftpack+2,w
  9076  069C  00B0               	movwf	?___ftmul+2
  9077  069D  0008               	return
  9078  069E                     __end_of___ftmul:	
  9079                           
  9080                           	psect	text43
  9081  0374                     __ptext43:	
  9082 ;; *************** function ___ftadd *****************
  9083 ;; Defined at:
  9084 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  f1              3   30[BANK0 ] float 
  9087 ;;  f2              3   33[BANK0 ] float 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;  exp1            1   42[BANK0 ] unsigned char 
  9090 ;;  exp2            1   41[BANK0 ] unsigned char 
  9091 ;;  sign            1   40[BANK0 ] unsigned char 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  3   30[BANK0 ] float 
  9094 ;; Registers used:
  9095 ;;		wreg, status,2, status,0, pclath, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9101 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;Total ram usage:       13 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    6
  9108 ;; This function calls:
  9109 ;;		___ftpack
  9110 ;; This function is called by:
  9111 ;;		_getPercentValue
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function ___ftadd
  9117  0374                     ___ftadd:	
  9118                           
  9119                           ;incstack = 0
  9120                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9121  0374  0020               	movlb	0	; select bank0
  9122  0375  083E               	movf	___ftadd@f1,w
  9123  0376  00C4               	movwf	??___ftadd
  9124  0377  083F               	movf	___ftadd@f1+1,w
  9125  0378  00C5               	movwf	??___ftadd+1
  9126  0379  0840               	movf	___ftadd@f1+2,w
  9127  037A  00C6               	movwf	??___ftadd+2
  9128  037B  1003               	clrc
  9129  037C  0D45               	rlf	??___ftadd+1,w
  9130  037D  0D46               	rlf	??___ftadd+2,w
  9131  037E  00C7               	movwf	??___ftadd+3
  9132  037F  0847               	movf	??___ftadd+3,w
  9133  0380  00CA               	movwf	___ftadd@exp1
  9134  0381  0841               	movf	___ftadd@f2,w
  9135  0382  00C4               	movwf	??___ftadd
  9136  0383  0842               	movf	___ftadd@f2+1,w
  9137  0384  00C5               	movwf	??___ftadd+1
  9138  0385  0843               	movf	___ftadd@f2+2,w
  9139  0386  00C6               	movwf	??___ftadd+2
  9140  0387  1003               	clrc
  9141  0388  0D45               	rlf	??___ftadd+1,w
  9142  0389  0D46               	rlf	??___ftadd+2,w
  9143  038A  00C7               	movwf	??___ftadd+3
  9144  038B  0847               	movf	??___ftadd+3,w
  9145  038C  00C9               	movwf	___ftadd@exp2
  9146  038D  084A               	movf	___ftadd@exp1,w
  9147  038E  1903               	btfsc	3,2
  9148  038F  2B9C               	goto	l5848
  9149  0390  0849               	movf	___ftadd@exp2,w
  9150  0391  024A               	subwf	___ftadd@exp1,w
  9151  0392  1803               	skipnc
  9152  0393  2BA3               	goto	l5852
  9153  0394  034A               	decf	___ftadd@exp1,w
  9154  0395  3AFF               	xorlw	255
  9155  0396  0749               	addwf	___ftadd@exp2,w
  9156  0397  00C4               	movwf	??___ftadd
  9157  0398  3019               	movlw	25
  9158  0399  0244               	subwf	??___ftadd,w
  9159  039A  1C03               	skipc
  9160  039B  2BA3               	goto	l5852
  9161  039C                     l5848:	
  9162  039C  0841               	movf	___ftadd@f2,w
  9163  039D  00BE               	movwf	?___ftadd
  9164  039E  0842               	movf	___ftadd@f2+1,w
  9165  039F  00BF               	movwf	?___ftadd+1
  9166  03A0  0843               	movf	___ftadd@f2+2,w
  9167  03A1  00C0               	movwf	?___ftadd+2
  9168  03A2  0008               	return
  9169  03A3                     l5852:	
  9170  03A3  0849               	movf	___ftadd@exp2,w
  9171  03A4  1903               	btfsc	3,2
  9172  03A5  0008               	return
  9173  03A6  084A               	movf	___ftadd@exp1,w
  9174  03A7  0249               	subwf	___ftadd@exp2,w
  9175  03A8  1803               	skipnc
  9176  03A9  2BB2               	goto	l5858
  9177  03AA  0349               	decf	___ftadd@exp2,w
  9178  03AB  3AFF               	xorlw	255
  9179  03AC  074A               	addwf	___ftadd@exp1,w
  9180  03AD  00C4               	movwf	??___ftadd
  9181  03AE  3019               	movlw	25
  9182  03AF  0244               	subwf	??___ftadd,w
  9183  03B0  1803               	btfsc	3,0
  9184  03B1  0008               	return
  9185  03B2                     l5858:	
  9186  03B2  3006               	movlw	6
  9187  03B3  00C4               	movwf	??___ftadd
  9188  03B4  0844               	movf	??___ftadd,w
  9189  03B5  00C8               	movwf	___ftadd@sign
  9190  03B6  1BC0               	btfsc	___ftadd@f1+2,7
  9191  03B7  17C8               	bsf	___ftadd@sign,7
  9192  03B8  1BC3               	btfsc	___ftadd@f2+2,7
  9193  03B9  1748               	bsf	___ftadd@sign,6
  9194  03BA  17BF               	bsf	___ftadd@f1+1,7
  9195  03BB  30FF               	movlw	255
  9196  03BC  05BE               	andwf	___ftadd@f1,f
  9197  03BD  30FF               	movlw	255
  9198  03BE  05BF               	andwf	___ftadd@f1+1,f
  9199  03BF  3000               	movlw	0
  9200  03C0  05C0               	andwf	___ftadd@f1+2,f
  9201  03C1  17C2               	bsf	___ftadd@f2+1,7
  9202  03C2  30FF               	movlw	255
  9203  03C3  05C1               	andwf	___ftadd@f2,f
  9204  03C4  30FF               	movlw	255
  9205  03C5  05C2               	andwf	___ftadd@f2+1,f
  9206  03C6  3000               	movlw	0
  9207  03C7  05C3               	andwf	___ftadd@f2+2,f
  9208  03C8  0849               	movf	___ftadd@exp2,w
  9209  03C9  024A               	subwf	___ftadd@exp1,w
  9210  03CA  1803               	skipnc
  9211  03CB  2BEE               	goto	l5880
  9212  03CC                     l5870:	
  9213  03CC  3001               	movlw	1
  9214  03CD                     u4195:	
  9215  03CD  35C1               	lslf	___ftadd@f2,f
  9216  03CE  0DC2               	rlf	___ftadd@f2+1,f
  9217  03CF  0DC3               	rlf	___ftadd@f2+2,f
  9218  03D0  0B89               	decfsz	9,f
  9219  03D1  2BCD               	goto	u4195
  9220  03D2  3001               	movlw	1
  9221  03D3  02C9               	subwf	___ftadd@exp2,f
  9222  03D4  0849               	movf	___ftadd@exp2,w
  9223  03D5  064A               	xorwf	___ftadd@exp1,w
  9224  03D6  1903               	skipnz
  9225  03D7  2BE9               	goto	l5878
  9226  03D8  3001               	movlw	1
  9227  03D9  02C8               	subwf	___ftadd@sign,f
  9228  03DA  0848               	movf	___ftadd@sign,w
  9229  03DB  3907               	andlw	7
  9230  03DC  1903               	btfsc	3,2
  9231  03DD  2BE9               	goto	l5878
  9232  03DE  2BCC               	goto	l5870
  9233  03DF                     l5876:	
  9234  03DF  3001               	movlw	1
  9235  03E0                     u4225:	
  9236  03E0  36C0               	lsrf	___ftadd@f1+2,f
  9237  03E1  0CBF               	rrf	___ftadd@f1+1,f
  9238  03E2  0CBE               	rrf	___ftadd@f1,f
  9239  03E3  0B89               	decfsz	9,f
  9240  03E4  2BE0               	goto	u4225
  9241  03E5  3001               	movlw	1
  9242  03E6  00C4               	movwf	??___ftadd
  9243  03E7  0844               	movf	??___ftadd,w
  9244  03E8  07CA               	addwf	___ftadd@exp1,f
  9245  03E9                     l5878:	
  9246  03E9  084A               	movf	___ftadd@exp1,w
  9247  03EA  0649               	xorwf	___ftadd@exp2,w
  9248  03EB  1903               	btfsc	3,2
  9249  03EC  2C13               	goto	l3197
  9250  03ED  2BDF               	goto	l5876
  9251  03EE                     l5880:	
  9252  03EE  084A               	movf	___ftadd@exp1,w
  9253  03EF  0249               	subwf	___ftadd@exp2,w
  9254  03F0  1803               	skipnc
  9255  03F1  2C13               	goto	l3197
  9256  03F2                     l5882:	
  9257  03F2  3001               	movlw	1
  9258  03F3                     u4255:	
  9259  03F3  35BE               	lslf	___ftadd@f1,f
  9260  03F4  0DBF               	rlf	___ftadd@f1+1,f
  9261  03F5  0DC0               	rlf	___ftadd@f1+2,f
  9262  03F6  0B89               	decfsz	9,f
  9263  03F7  2BF3               	goto	u4255
  9264  03F8  3001               	movlw	1
  9265  03F9  02CA               	subwf	___ftadd@exp1,f
  9266  03FA  0849               	movf	___ftadd@exp2,w
  9267  03FB  064A               	xorwf	___ftadd@exp1,w
  9268  03FC  1903               	skipnz
  9269  03FD  2C0F               	goto	l5890
  9270  03FE  3001               	movlw	1
  9271  03FF  02C8               	subwf	___ftadd@sign,f
  9272  0400  0848               	movf	___ftadd@sign,w
  9273  0401  3907               	andlw	7
  9274  0402  1903               	btfsc	3,2
  9275  0403  2C0F               	goto	l5890
  9276  0404  2BF2               	goto	l5882
  9277  0405                     l5888:	
  9278  0405  3001               	movlw	1
  9279  0406                     u4285:	
  9280  0406  36C3               	lsrf	___ftadd@f2+2,f
  9281  0407  0CC2               	rrf	___ftadd@f2+1,f
  9282  0408  0CC1               	rrf	___ftadd@f2,f
  9283  0409  0B89               	decfsz	9,f
  9284  040A  2C06               	goto	u4285
  9285  040B  3001               	movlw	1
  9286  040C  00C4               	movwf	??___ftadd
  9287  040D  0844               	movf	??___ftadd,w
  9288  040E  07C9               	addwf	___ftadd@exp2,f
  9289  040F                     l5890:	
  9290  040F  084A               	movf	___ftadd@exp1,w
  9291  0410  0649               	xorwf	___ftadd@exp2,w
  9292  0411  1D03               	skipz
  9293  0412  2C05               	goto	l5888
  9294  0413                     l3197:	
  9295  0413  1FC8               	btfss	___ftadd@sign,7
  9296  0414  2C25               	goto	l5894
  9297  0415  30FF               	movlw	255
  9298  0416  06BE               	xorwf	___ftadd@f1,f
  9299  0417  30FF               	movlw	255
  9300  0418  06BF               	xorwf	___ftadd@f1+1,f
  9301  0419  30FF               	movlw	255
  9302  041A  06C0               	xorwf	___ftadd@f1+2,f
  9303  041B  3001               	movlw	1
  9304  041C  07BE               	addwf	___ftadd@f1,f
  9305  041D  3000               	movlw	0
  9306  041E  1803               	skipnc
  9307  041F  3001               	movlw	1
  9308  0420  07BF               	addwf	___ftadd@f1+1,f
  9309  0421  3000               	movlw	0
  9310  0422  1803               	skipnc
  9311  0423  3001               	movlw	1
  9312  0424  07C0               	addwf	___ftadd@f1+2,f
  9313  0425                     l5894:	
  9314  0425  1F48               	btfss	___ftadd@sign,6
  9315  0426  2C37               	goto	l5898
  9316  0427  30FF               	movlw	255
  9317  0428  06C1               	xorwf	___ftadd@f2,f
  9318  0429  30FF               	movlw	255
  9319  042A  06C2               	xorwf	___ftadd@f2+1,f
  9320  042B  30FF               	movlw	255
  9321  042C  06C3               	xorwf	___ftadd@f2+2,f
  9322  042D  3001               	movlw	1
  9323  042E  07C1               	addwf	___ftadd@f2,f
  9324  042F  3000               	movlw	0
  9325  0430  1803               	skipnc
  9326  0431  3001               	movlw	1
  9327  0432  07C2               	addwf	___ftadd@f2+1,f
  9328  0433  3000               	movlw	0
  9329  0434  1803               	skipnc
  9330  0435  3001               	movlw	1
  9331  0436  07C3               	addwf	___ftadd@f2+2,f
  9332  0437                     l5898:	
  9333  0437  01C8               	clrf	___ftadd@sign
  9334  0438  083E               	movf	___ftadd@f1,w
  9335  0439  07C1               	addwf	___ftadd@f2,f
  9336  043A  083F               	movf	___ftadd@f1+1,w
  9337  043B  3DC2               	addwfc	___ftadd@f2+1,f
  9338  043C  0840               	movf	___ftadd@f1+2,w
  9339  043D  3DC3               	addwfc	___ftadd@f2+2,f
  9340  043E  1FC3               	btfss	___ftadd@f2+2,7
  9341  043F  2C52               	goto	l5908
  9342  0440  30FF               	movlw	255
  9343  0441  06C1               	xorwf	___ftadd@f2,f
  9344  0442  30FF               	movlw	255
  9345  0443  06C2               	xorwf	___ftadd@f2+1,f
  9346  0444  30FF               	movlw	255
  9347  0445  06C3               	xorwf	___ftadd@f2+2,f
  9348  0446  3001               	movlw	1
  9349  0447  07C1               	addwf	___ftadd@f2,f
  9350  0448  3000               	movlw	0
  9351  0449  1803               	skipnc
  9352  044A  3001               	movlw	1
  9353  044B  07C2               	addwf	___ftadd@f2+1,f
  9354  044C  3000               	movlw	0
  9355  044D  1803               	skipnc
  9356  044E  3001               	movlw	1
  9357  044F  07C3               	addwf	___ftadd@f2+2,f
  9358  0450  01C8               	clrf	___ftadd@sign
  9359  0451  0AC8               	incf	___ftadd@sign,f
  9360  0452                     l5908:	
  9361  0452  0841               	movf	___ftadd@f2,w
  9362  0453  00A0               	movwf	___ftpack@arg
  9363  0454  0842               	movf	___ftadd@f2+1,w
  9364  0455  00A1               	movwf	___ftpack@arg+1
  9365  0456  0843               	movf	___ftadd@f2+2,w
  9366  0457  00A2               	movwf	___ftpack@arg+2
  9367  0458  084A               	movf	___ftadd@exp1,w
  9368  0459  00C4               	movwf	??___ftadd
  9369  045A  0844               	movf	??___ftadd,w
  9370  045B  00A3               	movwf	___ftpack@exp
  9371  045C  0848               	movf	___ftadd@sign,w
  9372  045D  00C5               	movwf	??___ftadd+1
  9373  045E  0845               	movf	??___ftadd+1,w
  9374  045F  00A4               	movwf	___ftpack@sign
  9375  0460  3188  2098         	fcall	___ftpack
  9376  0462  0020               	movlb	0	; select bank0
  9377  0463  0820               	movf	?___ftpack,w
  9378  0464  00BE               	movwf	?___ftadd
  9379  0465  0821               	movf	?___ftpack+1,w
  9380  0466  00BF               	movwf	?___ftadd+1
  9381  0467  0822               	movf	?___ftpack+2,w
  9382  0468  00C0               	movwf	?___ftadd+2
  9383  0469  0008               	return
  9384  046A                     __end_of___ftadd:	
  9385                           
  9386                           	psect	text44
  9387  1DF8                     __ptext44:	
  9388 ;; *************** function _getBuz_GO *****************
  9389 ;; Defined at:
  9390 ;;		line 82 in file "../src/Buzzer_B1.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  i               2    4[BANK0 ] int 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  2    0[BANK0 ] int 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2, status,0
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        6 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    5
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		_setRF_Main
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _getBuz_GO
  9420  1DF8                     _getBuz_GO:	
  9421                           
  9422                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9426  1DF8  0021               	movlb	1	; select bank1
  9427  1DF9  0C36               	rrf	_Buz1^(0+128),w
  9428  1DFA  3901               	andlw	1
  9429  1DFB  0020               	movlb	0	; select bank0
  9430  1DFC  00A2               	movwf	??_getBuz_GO
  9431  1DFD  01A3               	clrf	??_getBuz_GO+1
  9432  1DFE  0822               	movf	??_getBuz_GO,w
  9433  1DFF  00A4               	movwf	getBuz_GO@i
  9434  1E00  0823               	movf	??_getBuz_GO+1,w
  9435  1E01  00A5               	movwf	getBuz_GO@i+1
  9436                           
  9437                           ;Buzzer_B1.c: 84: return i;
  9438  1E02  0825               	movf	getBuz_GO@i+1,w
  9439  1E03  01A1               	clrf	?_getBuz_GO+1
  9440  1E04  07A1               	addwf	?_getBuz_GO+1,f
  9441  1E05  0824               	movf	getBuz_GO@i,w
  9442  1E06  01A0               	clrf	?_getBuz_GO
  9443  1E07  07A0               	addwf	?_getBuz_GO,f
  9444  1E08  0008               	return
  9445  1E09                     __end_of_getBuz_GO:	
  9446                           
  9447                           	psect	text45
  9448  1D6B                     __ptext45:	
  9449 ;; *************** function _RF_RxDisable *****************
  9450 ;; Defined at:
  9451 ;;		line 205 in file "../src/RF_Control_B1.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;		None
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;		None
  9456 ;; Return value:  Size  Location     Type
  9457 ;;		None               void
  9458 ;; Registers used:
  9459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;Total ram usage:        0 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:    7
  9472 ;; This function calls:
  9473 ;;		_CC2500_WriteCommand
  9474 ;; This function is called by:
  9475 ;;		_setRF_Main
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _RF_RxDisable
  9481  1D6B                     _RF_RxDisable:	
  9482                           
  9483                           ;RF_Control_B1.c: 206: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9484                           
  9485                           ;incstack = 0
  9486                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9487  1D6B  0021               	movlb	1	; select bank1
  9488  1D6C  18C2               	btfsc	_RF1^(0+128),1
  9489  1D6D  2D70               	goto	l2376
  9490  1D6E  1DC2               	btfss	_RF1^(0+128),3
  9491  1D6F  0008               	return
  9492  1D70                     l2376:	
  9493                           
  9494                           ;RF_Control_B1.c: 207: RF1.RxStatus = 0;
  9495  1D70  11C2               	bcf	_RF1^(0+128),3
  9496                           
  9497                           ;RF_Control_B1.c: 208: RF1.ReceiveGO = 0;
  9498  1D71  10C2               	bcf	_RF1^(0+128),1
  9499                           
  9500                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x36);
  9501  1D72  3036               	movlw	54
  9502  1D73  319F  2721  319D   	fcall	_CC2500_WriteCommand
  9503                           
  9504                           ;RF_Control_B1.c: 210: CC2500_WriteCommand(0x3A);
  9505  1D76  303A               	movlw	58
  9506  1D77  319F  2721         	fcall	_CC2500_WriteCommand
  9507  1D79  0008               	return
  9508  1D7A                     __end_of_RF_RxDisable:	
  9509                           
  9510                           	psect	text46
  9511  08F9                     __ptext46:	
  9512 ;; *************** function _CC2500_TxData *****************
  9513 ;; Defined at:
  9514 ;;		line 32 in file "../src/CC2500_B1.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;		None
  9517 ;; Auto vars:     Size  Location     Type
  9518 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9519 ;; Return value:  Size  Location     Type
  9520 ;;		None               void
  9521 ;; Registers used:
  9522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;Total ram usage:        2 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    7
  9535 ;; This function calls:
  9536 ;;		_CC2500_WriteByte
  9537 ;;		_CC2500_WriteCommand
  9538 ;;		_Timeout_Counter
  9539 ;;		_set_TimeoutCleared
  9540 ;; This function is called by:
  9541 ;;		_setRF_Main
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           
  9546                           ;psect for function _CC2500_TxData
  9547  08F9                     _CC2500_TxData:	
  9548                           
  9549                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9550                           ;CC2500_B1.c: 35: RC4 = 0;
  9551                           
  9552                           ;incstack = 0
  9553                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9554  08F9  0020               	movlb	0	; select bank0
  9555  08FA  120E               	bcf	14,4	;volatile
  9556                           
  9557                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9558  08FB  307F               	movlw	127
  9559  08FC  00A4               	movwf	??_CC2500_TxData
  9560  08FD  0824               	movf	??_CC2500_TxData,w
  9561  08FE  0021               	movlb	1	; select bank1
  9562  08FF  00D3               	movwf	_SPI0Buffer^(0+128)
  9563                           
  9564                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9565  0900  2904               	goto	l6758
  9566  0901                     l6756:	
  9567                           
  9568                           ;CC2500_B1.c: 38: Timeout_Counter();
  9569  0901  319E  26A6  3188   	fcall	_Timeout_Counter
  9570  0904                     l6758:	
  9571  0904  0020               	movlb	0	; select bank0
  9572  0905  1D0E               	btfss	14,2	;volatile
  9573  0906  290A               	goto	l6762
  9574  0907  0021               	movlb	1	; select bank1
  9575  0908  1D2F               	btfss	(_myMain^(0+128)+15),2
  9576  0909  2901               	goto	l6756
  9577  090A                     l6762:	
  9578                           
  9579                           ;CC2500_B1.c: 39: };
  9580                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9581  090A  3190  2066  3188   	fcall	_set_TimeoutCleared
  9582                           
  9583                           ;CC2500_B1.c: 41: CC2500_WriteByte();
  9584  090D  319E  26EE  3188   	fcall	_CC2500_WriteByte
  9585                           
  9586                           ;CC2500_B1.c: 42: SPI0Buffer = Tx_Length;
  9587  0910  0021               	movlb	1	; select bank1
  9588  0911  0854               	movf	_Tx_Length^(0+128),w
  9589  0912  0020               	movlb	0	; select bank0
  9590  0913  00A4               	movwf	??_CC2500_TxData
  9591  0914  0824               	movf	??_CC2500_TxData,w
  9592  0915  0021               	movlb	1	; select bank1
  9593  0916  00D3               	movwf	_SPI0Buffer^(0+128)
  9594                           
  9595                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9596  0917  319E  26EE  3188   	fcall	_CC2500_WriteByte
  9597                           
  9598                           ;CC2500_B1.c: 44: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9599  091A  0020               	movlb	0	; select bank0
  9600  091B  01A5               	clrf	CC2500_TxData@loop_e
  9601  091C                     l6776:	
  9602  091C  0021               	movlb	1	; select bank1
  9603  091D  0854               	movf	_Tx_Length^(0+128),w
  9604  091E  0020               	movlb	0	; select bank0
  9605  091F  0225               	subwf	CC2500_TxData@loop_e,w
  9606  0920  1803               	btfsc	3,0
  9607  0921  2935               	goto	l291
  9608                           
  9609                           ;CC2500_B1.c: 45: SPI0Buffer = RF_Data[loop_e];
  9610  0922  0825               	movf	CC2500_TxData@loop_e,w
  9611  0923  3E20               	addlw	_RF_Data& (0+255)
  9612  0924  0086               	movwf	6
  9613  0925  3001               	movlw	1	; select bank2/3
  9614  0926  0087               	movwf	7
  9615  0927  0801               	movf	1,w
  9616  0928  00A4               	movwf	??_CC2500_TxData
  9617  0929  0824               	movf	??_CC2500_TxData,w
  9618  092A  0021               	movlb	1	; select bank1
  9619  092B  00D3               	movwf	_SPI0Buffer^(0+128)
  9620                           
  9621                           ;CC2500_B1.c: 46: CC2500_WriteByte();
  9622  092C  319E  26EE  3188   	fcall	_CC2500_WriteByte
  9623  092F  3001               	movlw	1
  9624  0930  0020               	movlb	0	; select bank0
  9625  0931  00A4               	movwf	??_CC2500_TxData
  9626  0932  0824               	movf	??_CC2500_TxData,w
  9627  0933  07A5               	addwf	CC2500_TxData@loop_e,f
  9628  0934  291C               	goto	l6776
  9629  0935                     l291:	
  9630                           
  9631                           ;CC2500_B1.c: 47: }
  9632                           ;CC2500_B1.c: 48: RC4 = 1;
  9633  0935  160E               	bsf	14,4	;volatile
  9634                           
  9635                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x35);
  9636  0936  3035               	movlw	53
  9637  0937  319F  2721  3188   	fcall	_CC2500_WriteCommand
  9638                           
  9639                           ;CC2500_B1.c: 50: while (RB0 == 0 && myMain.Timeout == 0) {
  9640  093A  293E               	goto	l6782
  9641  093B                     l6780:	
  9642                           
  9643                           ;CC2500_B1.c: 51: Timeout_Counter();
  9644  093B  319E  26A6  3188   	fcall	_Timeout_Counter
  9645  093E                     l6782:	
  9646  093E  0020               	movlb	0	; select bank0
  9647  093F  180D               	btfsc	13,0	;volatile
  9648  0940  2944               	goto	l6786
  9649  0941  0021               	movlb	1	; select bank1
  9650  0942  1D2F               	btfss	(_myMain^(0+128)+15),2
  9651  0943  293B               	goto	l6780
  9652  0944                     l6786:	
  9653                           
  9654                           ;CC2500_B1.c: 52: };
  9655                           ;CC2500_B1.c: 53: set_TimeoutCleared();
  9656  0944  3190  2066  3188   	fcall	_set_TimeoutCleared
  9657                           
  9658                           ;CC2500_B1.c: 54: while (RB0 == 1 && myMain.Timeout == 0) {
  9659  0947  294B               	goto	l6790
  9660  0948                     l6788:	
  9661                           
  9662                           ;CC2500_B1.c: 55: Timeout_Counter();
  9663  0948  319E  26A6  3188   	fcall	_Timeout_Counter
  9664  094B                     l6790:	
  9665  094B  0020               	movlb	0	; select bank0
  9666  094C  1C0D               	btfss	13,0	;volatile
  9667  094D  2951               	goto	l6794
  9668  094E  0021               	movlb	1	; select bank1
  9669  094F  1D2F               	btfss	(_myMain^(0+128)+15),2
  9670  0950  2948               	goto	l6788
  9671  0951                     l6794:	
  9672                           
  9673                           ;CC2500_B1.c: 56: };
  9674                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  9675  0951  3190  2066  3188   	fcall	_set_TimeoutCleared
  9676                           
  9677                           ;CC2500_B1.c: 58: CC2500_WriteCommand(0x36);
  9678  0954  3036               	movlw	54
  9679  0955  319F  2721  3188   	fcall	_CC2500_WriteCommand
  9680                           
  9681                           ;CC2500_B1.c: 59: CC2500_WriteCommand(0x3B);
  9682  0958  303B               	movlw	59
  9683  0959  319F  2721         	fcall	_CC2500_WriteCommand
  9684                           
  9685                           ;CC2500_B1.c: 60: Transceive_OK = 1;
  9686  095B  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9687  095C  0008               	return
  9688  095D                     __end_of_CC2500_TxData:	
  9689                           
  9690                           	psect	text47
  9691  0BE9                     __ptext47:	
  9692 ;; *************** function _CC2500_RxData *****************
  9693 ;; Defined at:
  9694 ;;		line 66 in file "../src/CC2500_B1.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;		None
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;		None               void
  9701 ;; Registers used:
  9702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;Total ram usage:        2 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    7
  9715 ;; This function calls:
  9716 ;;		_CC2500_ReadByte
  9717 ;;		_CC2500_ReadStatus
  9718 ;;		_CC2500_WriteByte
  9719 ;;		_CC2500_WriteCommand
  9720 ;;		_Timeout_Counter
  9721 ;;		_set_TimeoutCleared
  9722 ;; This function is called by:
  9723 ;;		_setRF_Main
  9724 ;; This function uses a non-reentrant model
  9725 ;;
  9726                           
  9727                           
  9728                           ;psect for function _CC2500_RxData
  9729  0BE9                     _CC2500_RxData:	
  9730                           
  9731                           ;CC2500_B1.c: 67: unsigned char loop_f;
  9732                           ;CC2500_B1.c: 71: if (RB0 == 1)
  9733                           
  9734                           ;incstack = 0
  9735                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9736  0BE9  0020               	movlb	0	; select bank0
  9737  0BEA  180D               	btfsc	13,0	;volatile
  9738  0BEB  2BF0               	goto	l6808
  9739  0BEC  2BF9               	goto	l6814
  9740  0BED                     l6806:	
  9741                           ;CC2500_B1.c: 72: {
  9742                           ;CC2500_B1.c: 73: while (RB0 == 1 && myMain.Timeout == 0) {
  9743                           
  9744                           
  9745                           ;CC2500_B1.c: 74: Timeout_Counter();
  9746  0BED  319E  26A6  318B   	fcall	_Timeout_Counter
  9747  0BF0                     l6808:	
  9748  0BF0  0020               	movlb	0	; select bank0
  9749  0BF1  1C0D               	btfss	13,0	;volatile
  9750  0BF2  2BF6               	goto	l6812
  9751  0BF3  0021               	movlb	1	; select bank1
  9752  0BF4  1D2F               	btfss	(_myMain^(0+128)+15),2
  9753  0BF5  2BED               	goto	l6806
  9754  0BF6                     l6812:	
  9755                           
  9756                           ;CC2500_B1.c: 75: };
  9757                           ;CC2500_B1.c: 76: set_TimeoutCleared();
  9758  0BF6  3190  2066  318B   	fcall	_set_TimeoutCleared
  9759  0BF9                     l6814:	
  9760                           
  9761                           ;CC2500_B1.c: 77: }
  9762                           ;CC2500_B1.c: 79: CC2500_ReadStatus(0x3B);
  9763  0BF9  303B               	movlw	59
  9764  0BFA  3191  21B1  318B   	fcall	_CC2500_ReadStatus
  9765                           
  9766                           ;CC2500_B1.c: 80: if (s_data != 0) {
  9767  0BFD  0021               	movlb	1	; select bank1
  9768  0BFE  0857               	movf	_s_data^(0+128),w
  9769  0BFF  1903               	btfsc	3,2
  9770  0C00  2C56               	goto	l6858
  9771                           
  9772                           ;CC2500_B1.c: 81: RC4 = 0;
  9773  0C01  0020               	movlb	0	; select bank0
  9774  0C02  120E               	bcf	14,4	;volatile
  9775                           
  9776                           ;CC2500_B1.c: 82: SPI0Buffer = 0x3F + 0xC0;
  9777  0C03  30FF               	movlw	255
  9778  0C04  00A4               	movwf	??_CC2500_RxData
  9779  0C05  0824               	movf	??_CC2500_RxData,w
  9780  0C06  0021               	movlb	1	; select bank1
  9781  0C07  00D3               	movwf	_SPI0Buffer^(0+128)
  9782                           
  9783                           ;CC2500_B1.c: 83: while (RC2 == 1 && myMain.Timeout == 0) {
  9784  0C08  2C0C               	goto	l6824
  9785  0C09                     l6822:	
  9786                           
  9787                           ;CC2500_B1.c: 84: Timeout_Counter();
  9788  0C09  319E  26A6  318B   	fcall	_Timeout_Counter
  9789  0C0C                     l6824:	
  9790  0C0C  0020               	movlb	0	; select bank0
  9791  0C0D  1D0E               	btfss	14,2	;volatile
  9792  0C0E  2C12               	goto	l6828
  9793  0C0F  0021               	movlb	1	; select bank1
  9794  0C10  1D2F               	btfss	(_myMain^(0+128)+15),2
  9795  0C11  2C09               	goto	l6822
  9796  0C12                     l6828:	
  9797                           
  9798                           ;CC2500_B1.c: 85: };
  9799                           ;CC2500_B1.c: 86: set_TimeoutCleared();
  9800  0C12  3190  2066  318B   	fcall	_set_TimeoutCleared
  9801                           
  9802                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  9803  0C15  319E  26EE  318B   	fcall	_CC2500_WriteByte
  9804                           
  9805                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  9806  0C18  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9807                           
  9808                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  9809  0C1B  0021               	movlb	1	; select bank1
  9810  0C1C  0853               	movf	_SPI0Buffer^(0+128),w
  9811  0C1D  0020               	movlb	0	; select bank0
  9812  0C1E  00A4               	movwf	??_CC2500_RxData
  9813  0C1F  0824               	movf	??_CC2500_RxData,w
  9814  0C20  0021               	movlb	1	; select bank1
  9815  0C21  00D2               	movwf	_Rx_Length^(0+128)
  9816                           
  9817                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9818  0C22  0020               	movlb	0	; select bank0
  9819  0C23  01A5               	clrf	CC2500_RxData@loop_f
  9820  0C24                     l6844:	
  9821  0C24  0021               	movlb	1	; select bank1
  9822  0C25  0852               	movf	_Rx_Length^(0+128),w
  9823  0C26  0020               	movlb	0	; select bank0
  9824  0C27  0225               	subwf	CC2500_RxData@loop_f,w
  9825  0C28  1803               	btfsc	3,0
  9826  0C29  2C3D               	goto	l6846
  9827                           
  9828                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  9829  0C2A  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9830                           
  9831                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  9832  0C2D  0021               	movlb	1	; select bank1
  9833  0C2E  0853               	movf	_SPI0Buffer^(0+128),w
  9834  0C2F  0020               	movlb	0	; select bank0
  9835  0C30  00A4               	movwf	??_CC2500_RxData
  9836  0C31  0825               	movf	CC2500_RxData@loop_f,w
  9837  0C32  3E20               	addlw	_RF_Data& (0+255)
  9838  0C33  0086               	movwf	6
  9839  0C34  3001               	movlw	1	; select bank2/3
  9840  0C35  0087               	movwf	7
  9841  0C36  0824               	movf	??_CC2500_RxData,w
  9842  0C37  0081               	movwf	1
  9843  0C38  3001               	movlw	1
  9844  0C39  00A4               	movwf	??_CC2500_RxData
  9845  0C3A  0824               	movf	??_CC2500_RxData,w
  9846  0C3B  07A5               	addwf	CC2500_RxData@loop_f,f
  9847  0C3C  2C24               	goto	l6844
  9848  0C3D                     l6846:	
  9849                           
  9850                           ;CC2500_B1.c: 94: }
  9851                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9852  0C3D  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9853                           
  9854                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  9855  0C40  0021               	movlb	1	; select bank1
  9856  0C41  0853               	movf	_SPI0Buffer^(0+128),w
  9857  0C42  0020               	movlb	0	; select bank0
  9858  0C43  00A4               	movwf	??_CC2500_RxData
  9859  0C44  0824               	movf	??_CC2500_RxData,w
  9860  0C45  0021               	movlb	1	; select bank1
  9861  0C46  00D1               	movwf	_RSSI^(0+128)
  9862                           
  9863                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9864  0C47  319F  27E3  318B   	fcall	_CC2500_ReadByte
  9865                           
  9866                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  9867  0C4A  0021               	movlb	1	; select bank1
  9868  0C4B  0853               	movf	_SPI0Buffer^(0+128),w
  9869  0C4C  0020               	movlb	0	; select bank0
  9870  0C4D  00A4               	movwf	??_CC2500_RxData
  9871  0C4E  0824               	movf	??_CC2500_RxData,w
  9872  0C4F  0021               	movlb	1	; select bank1
  9873  0C50  00C9               	movwf	_CRC^(0+128)
  9874                           
  9875                           ;CC2500_B1.c: 99: RC4 = 1;
  9876  0C51  0020               	movlb	0	; select bank0
  9877  0C52  160E               	bsf	14,4	;volatile
  9878                           
  9879                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  9880  0C53  0021               	movlb	1	; select bank1
  9881  0C54  1BC9               	btfsc	_CRC^(0+128),7
  9882                           
  9883                           ;CC2500_B1.c: 101: Receive_OK = 1;
  9884  0C55  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9885  0C56                     l6858:	
  9886                           
  9887                           ;CC2500_B1.c: 102: }
  9888                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  9889  0C56  3036               	movlw	54
  9890  0C57  319F  2721  318B   	fcall	_CC2500_WriteCommand
  9891                           
  9892                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  9893  0C5A  303A               	movlw	58
  9894  0C5B  319F  2721         	fcall	_CC2500_WriteCommand
  9895  0C5D  0008               	return
  9896  0C5E                     __end_of_CC2500_RxData:	
  9897                           
  9898                           	psect	text48
  9899  11B1                     __ptext48:	
  9900 ;; *************** function _CC2500_ReadStatus *****************
  9901 ;; Defined at:
  9902 ;;		line 290 in file "../src/CC2500_B1.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;  status_addr     1    wreg     unsigned char 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;		None               void
  9909 ;; Registers used:
  9910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;Total ram usage:        2 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    6
  9923 ;; This function calls:
  9924 ;;		_CC2500_ReadByte
  9925 ;;		_CC2500_WriteByte
  9926 ;;		_Timeout_Counter
  9927 ;;		_set_TimeoutCleared
  9928 ;; This function is called by:
  9929 ;;		_CC2500_RxData
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _CC2500_ReadStatus
  9935  11B1                     _CC2500_ReadStatus:	
  9936                           
  9937                           ;incstack = 0
  9938                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9939                           ;CC2500_ReadStatus@status_addr stored from wreg
  9940  11B1  0020               	movlb	0	; select bank0
  9941  11B2  00A3               	movwf	CC2500_ReadStatus@status_addr
  9942                           
  9943                           ;CC2500_B1.c: 291: RC4 = 0;
  9944  11B3  120E               	bcf	14,4	;volatile
  9945                           
  9946                           ;CC2500_B1.c: 292: SPI0Buffer = status_addr + 0xC0;
  9947  11B4  0823               	movf	CC2500_ReadStatus@status_addr,w
  9948  11B5  3EC0               	addlw	192
  9949  11B6  00A2               	movwf	??_CC2500_ReadStatus
  9950  11B7  0822               	movf	??_CC2500_ReadStatus,w
  9951  11B8  0021               	movlb	1	; select bank1
  9952  11B9  00D3               	movwf	_SPI0Buffer^(0+128)
  9953                           
  9954                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
  9955  11BA  29BE               	goto	l6602
  9956  11BB                     l6600:	
  9957                           
  9958                           ;CC2500_B1.c: 295: Timeout_Counter();
  9959  11BB  319E  26A6  3191   	fcall	_Timeout_Counter
  9960  11BE                     l6602:	
  9961  11BE  0020               	movlb	0	; select bank0
  9962  11BF  1D0E               	btfss	14,2	;volatile
  9963  11C0  29C4               	goto	l6606
  9964  11C1  0021               	movlb	1	; select bank1
  9965  11C2  1D2F               	btfss	(_myMain^(0+128)+15),2
  9966  11C3  29BB               	goto	l6600
  9967  11C4                     l6606:	
  9968                           
  9969                           ;CC2500_B1.c: 296: };
  9970                           ;CC2500_B1.c: 297: set_TimeoutCleared();
  9971  11C4  3190  2066  3191   	fcall	_set_TimeoutCleared
  9972                           
  9973                           ;CC2500_B1.c: 298: CC2500_WriteByte();
  9974  11C7  319E  26EE  3191   	fcall	_CC2500_WriteByte
  9975                           
  9976                           ;CC2500_B1.c: 299: CC2500_ReadByte();
  9977  11CA  319F  27E3         	fcall	_CC2500_ReadByte
  9978                           
  9979                           ;CC2500_B1.c: 300: RC4 = 1;
  9980  11CC  0020               	movlb	0	; select bank0
  9981  11CD  160E               	bsf	14,4	;volatile
  9982                           
  9983                           ;CC2500_B1.c: 302: s_data = SPI0Buffer;
  9984  11CE  0021               	movlb	1	; select bank1
  9985  11CF  0853               	movf	_SPI0Buffer^(0+128),w
  9986  11D0  0020               	movlb	0	; select bank0
  9987  11D1  00A2               	movwf	??_CC2500_ReadStatus
  9988  11D2  0822               	movf	??_CC2500_ReadStatus,w
  9989  11D3  0021               	movlb	1	; select bank1
  9990  11D4  00D7               	movwf	_s_data^(0+128)
  9991  11D5  0008               	return
  9992  11D6                     __end_of_CC2500_ReadStatus:	
  9993                           
  9994                           	psect	text49
  9995  1FE3                     __ptext49:	
  9996 ;; *************** function _CC2500_ReadByte *****************
  9997 ;; Defined at:
  9998 ;;		line 227 in file "../src/CC2500_B1.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;		None
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;		None               void
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;Total ram usage:        2 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    5
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_CC2500_RxData
 10023 ;;		_CC2500_ReadStatus
 10024 ;;		_CC2500_ReadREG
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           
 10029                           ;psect for function _CC2500_ReadByte
 10030  1FE3                     _CC2500_ReadByte:	
 10031                           
 10032                           ;CC2500_B1.c: 228: unsigned char loop_b;
 10033                           ;CC2500_B1.c: 229: for (loop_b = 0; loop_b < 8; loop_b++) {
 10034                           
 10035                           ;incstack = 0
 10036                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10037  1FE3  0020               	movlb	0	; select bank0
 10038  1FE4  01A1               	clrf	CC2500_ReadByte@loop_b
 10039  1FE5                     L8:	
 10040  1FE5  3008               	movlw	8
 10041  1FE6  0221               	subwf	CC2500_ReadByte@loop_b,w
 10042  1FE7  1803               	btfsc	3,0
 10043  1FE8  0008               	return
 10044                           
 10045                           ;CC2500_B1.c: 230: RC1 = 1;
 10046  1FE9  148E               	bsf	14,1	;volatile
 10047                           
 10048                           ;CC2500_B1.c: 231: SPI0Buffer <<= 1;
 10049  1FEA  1003               	clrc
 10050  1FEB  0021               	movlb	1	; select bank1
 10051  1FEC  0DD3               	rlf	_SPI0Buffer^(0+128),f
 10052                           
 10053                           ;CC2500_B1.c: 232: if (RC2 == 1)
 10054  1FED  0020               	movlb	0	; select bank0
 10055  1FEE  1D0E               	btfss	14,2	;volatile
 10056  1FEF  2FF3               	goto	l6458
 10057                           
 10058                           ;CC2500_B1.c: 233: SPI0Buffer |= 0x01;
 10059  1FF0  0021               	movlb	1	; select bank1
 10060  1FF1  1453               	bsf	_SPI0Buffer^(0+128),0
 10061  1FF2  2FF9               	goto	l6460
 10062  1FF3                     l6458:	
 10063                           
 10064                           ;CC2500_B1.c: 234: else
 10065                           ;CC2500_B1.c: 235: SPI0Buffer &= 0xFE;
 10066  1FF3  30FE               	movlw	254
 10067  1FF4  0020               	movlb	0	; select bank0
 10068  1FF5  00A0               	movwf	??_CC2500_ReadByte
 10069  1FF6  0820               	movf	??_CC2500_ReadByte,w
 10070  1FF7  0021               	movlb	1	; select bank1
 10071  1FF8  05D3               	andwf	_SPI0Buffer^(0+128),f
 10072  1FF9                     l6460:	
 10073                           
 10074                           ;CC2500_B1.c: 236: RC1 = 0;
 10075  1FF9  0020               	movlb	0	; select bank0
 10076  1FFA  108E               	bcf	14,1	;volatile
 10077  1FFB  3001               	movlw	1
 10078  1FFC  00A0               	movwf	??_CC2500_ReadByte
 10079  1FFD  0820               	movf	??_CC2500_ReadByte,w
 10080  1FFE  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10081  1FFF  2FE5               	goto	L8
 10082  2000                     __end_of_CC2500_ReadByte:	
 10083                           
 10084                           	psect	text50
 10085  1C46                     __ptext50:	
 10086 ;; *************** function _RF_Initialization *****************
 10087 ;; Defined at:
 10088 ;;		line 9 in file "../src/RF_Control_B1.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;		None
 10093 ;; Return value:  Size  Location     Type
 10094 ;;		None               void
 10095 ;; Registers used:
 10096 ;;		wreg, status,2, status,0, pclath, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;Total ram usage:        0 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    6
 10109 ;; This function calls:
 10110 ;;		_setRF_Initialization
 10111 ;; This function is called by:
 10112 ;;		_main
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _RF_Initialization
 10118  1C46                     _RF_Initialization:	
 10119                           
 10120                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10124  1C46  319C  2485         	fcall	_setRF_Initialization
 10125  1C48  0008               	return
 10126  1C49                     __end_of_RF_Initialization:	
 10127                           
 10128                           	psect	text51
 10129  1C85                     __ptext51:	
 10130 ;; *************** function _setRF_Initialization *****************
 10131 ;; Defined at:
 10132 ;;		line 43 in file "../src/RF_Control_B1.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;		None
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;		None
 10137 ;; Return value:  Size  Location     Type
 10138 ;;		None               void
 10139 ;; Registers used:
 10140 ;;		wreg
 10141 ;; Tracked objects:
 10142 ;;		On entry : 0/0
 10143 ;;		On exit  : 0/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;Total ram usage:        1 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    5
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_RF_Initialization
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           
 10161                           ;psect for function _setRF_Initialization
 10162  1C85                     _setRF_Initialization:	
 10163                           
 10164                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in _setRF_Initialization: [wreg]
 10168  1C85  3015               	movlw	21
 10169  1C86  0020               	movlb	0	; select bank0
 10170  1C87  00A0               	movwf	??_setRF_Initialization
 10171  1C88  0820               	movf	??_setRF_Initialization,w
 10172  1C89  0021               	movlb	1	; select bank1
 10173  1C8A  00D4               	movwf	_Tx_Length^(0+128)
 10174  1C8B  0008               	return
 10175  1C8C                     __end_of_setRF_Initialization:	
 10176                           
 10177                           	psect	text52
 10178  1E7B                     __ptext52:	
 10179 ;; *************** function _Mcu_Initialization *****************
 10180 ;; Defined at:
 10181 ;;		line 30 in file "../src/MCU_B1.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;		None
 10184 ;; Auto vars:     Size  Location     Type
 10185 ;;		None
 10186 ;; Return value:  Size  Location     Type
 10187 ;;		None               void
 10188 ;; Registers used:
 10189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10190 ;; Tracked objects:
 10191 ;;		On entry : 0/0
 10192 ;;		On exit  : 0/0
 10193 ;;		Unchanged: 0/0
 10194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;Total ram usage:        0 bytes
 10200 ;; Hardware stack levels used:    1
 10201 ;; Hardware stack levels required when called:    6
 10202 ;; This function calls:
 10203 ;;		_ADC_Set
 10204 ;;		_Fosc_Set
 10205 ;;		_INT_Set
 10206 ;;		_IOC_Set
 10207 ;;		_IO_Set
 10208 ;;		_TMR0_Set
 10209 ;;		_WDT_Set
 10210 ;; This function is called by:
 10211 ;;		_main
 10212 ;; This function uses a non-reentrant model
 10213 ;;
 10214                           
 10215                           
 10216                           ;psect for function _Mcu_Initialization
 10217  1E7B                     _Mcu_Initialization:	
 10218                           
 10219                           ;MCU_B1.c: 32: Fosc_Set();
 10220                           
 10221                           ;incstack = 0
 10222                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10223  1E7B  319C  2461  319E   	fcall	_Fosc_Set
 10224                           
 10225                           ;MCU_B1.c: 34: IO_Set();
 10226  1E7E  319E  26BE  319E   	fcall	_IO_Set
 10227                           
 10228                           ;MCU_B1.c: 36: TMR0_Set();
 10229  1E81  319C  248C  319E   	fcall	_TMR0_Set
 10230                           
 10231                           ;MCU_B1.c: 38: ;;
 10232                           ;MCU_B1.c: 40: ADC_Set();
 10233  1E84  319C  247E  319E   	fcall	_ADC_Set
 10234                           
 10235                           ;MCU_B1.c: 44: INT_Set();
 10236  1E87  319C  2465  319E   	fcall	_INT_Set
 10237                           
 10238                           ;MCU_B1.c: 46: IOC_Set();
 10239  1E8A  319D  2514  319E   	fcall	_IOC_Set
 10240                           
 10241                           ;MCU_B1.c: 48: ;;
 10242                           ;MCU_B1.c: 50: ;;
 10243                           ;MCU_B1.c: 52: WDT_Set();
 10244  1E8D  319E  26D6         	fcall	_WDT_Set
 10245  1E8F  0008               	return
 10246  1E90                     __end_of_Mcu_Initialization:	
 10247                           
 10248                           	psect	text53
 10249  1ED6                     __ptext53:	
 10250 ;; *************** function _WDT_Set *****************
 10251 ;; Defined at:
 10252 ;;		line 898 in file "../src/MCU_B1.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;		None               void
 10259 ;; Registers used:
 10260 ;;		wreg, fsr1l, fsr1h
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;Total ram usage:        1 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    5
 10273 ;; This function calls:
 10274 ;;		Nothing
 10275 ;; This function is called by:
 10276 ;;		_Mcu_Initialization
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           
 10281                           ;psect for function _WDT_Set
 10282  1ED6                     _WDT_Set:	
 10283                           
 10284                           ;MCU_B1.c: 899: WDTCON = 0b00010111;;
 10285                           
 10286                           ;incstack = 0
 10287                           ; Regs used in _WDT_Set: [wregfsr1]
 10288  1ED6  3017               	movlw	23
 10289  1ED7  0021               	movlb	1	; select bank1
 10290  1ED8  0097               	movwf	23	;volatile
 10291                           
 10292                           ;MCU_B1.c: 900: WDT = &_WDT;
 10293  1ED9  30E9               	movlw	__WDT& (0+255)
 10294  1EDA  0020               	movlb	0	; select bank0
 10295  1EDB  00A0               	movwf	??_WDT_Set
 10296  1EDC  0820               	movf	??_WDT_Set,w
 10297  1EDD  0021               	movlb	1	; select bank1
 10298  1EDE  00EE               	movwf	_WDT^(0+128)
 10299                           
 10300                           ;MCU_B1.c: 901: WDT->Enable = 1;
 10301  1EDF  086E               	movf	_WDT^(0+128),w
 10302  1EE0  0086               	movwf	6
 10303  1EE1  0187               	clrf	7
 10304  1EE2  1401               	bsf	1,0
 10305                           
 10306                           ;MCU_B1.c: 902: WDT->Count = 10;
 10307  1EE3  300A               	movlw	10
 10308  1EE4  0020               	movlb	0	; select bank0
 10309  1EE5  00A0               	movwf	??_WDT_Set
 10310  1EE6  0021               	movlb	1	; select bank1
 10311  1EE7  0A6E               	incf	_WDT^(0+128),w
 10312  1EE8  0086               	movwf	6
 10313  1EE9  0187               	clrf	7
 10314  1EEA  0020               	movlb	0	; select bank0
 10315  1EEB  0820               	movf	??_WDT_Set,w
 10316  1EEC  0081               	movwf	1
 10317  1EED  0008               	return
 10318  1EEE                     __end_of_WDT_Set:	
 10319                           
 10320                           	psect	text54
 10321  1C8C                     __ptext54:	
 10322 ;; *************** function _TMR0_Set *****************
 10323 ;; Defined at:
 10324 ;;		line 126 in file "../src/MCU_B1.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;		None
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;		None
 10329 ;; Return value:  Size  Location     Type
 10330 ;;		None               void
 10331 ;; Registers used:
 10332 ;;		wreg, status,2
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;Total ram usage:        0 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    5
 10345 ;; This function calls:
 10346 ;;		Nothing
 10347 ;; This function is called by:
 10348 ;;		_Mcu_Initialization
 10349 ;; This function uses a non-reentrant model
 10350 ;;
 10351                           
 10352                           
 10353                           ;psect for function _TMR0_Set
 10354  1C8C                     _TMR0_Set:	
 10355                           
 10356                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10357                           
 10358                           ;incstack = 0
 10359                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10360  1C8C  0021               	movlb	1	; select bank1
 10361  1C8D  0195               	clrf	21	;volatile
 10362                           
 10363                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10364  1C8E  3042               	movlw	66
 10365  1C8F  0020               	movlb	0	; select bank0
 10366  1C90  0095               	movwf	21	;volatile
 10367                           
 10368                           ;MCU_B1.c: 130: TMR0IE = 1;
 10369  1C91  168B               	bsf	11,5	;volatile
 10370                           
 10371                           ;MCU_B1.c: 131: GIE = 1;
 10372  1C92  178B               	bsf	11,7	;volatile
 10373  1C93  0008               	return
 10374  1C94                     __end_of_TMR0_Set:	
 10375                           
 10376                           	psect	text55
 10377  1EBE                     __ptext55:	
 10378 ;; *************** function _IO_Set *****************
 10379 ;; Defined at:
 10380 ;;		line 60 in file "../src/MCU_B1.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;		None               void
 10387 ;; Registers used:
 10388 ;;		wreg, status,2
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;Total ram usage:        0 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    5
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_Mcu_Initialization
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function _IO_Set
 10410  1EBE                     _IO_Set:	
 10411                           
 10412                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in _IO_Set: [wreg+status,2]
 10416  1EBE  3077               	movlw	119
 10417  1EBF  0021               	movlb	1	; select bank1
 10418  1EC0  008C               	movwf	12	;volatile
 10419                           
 10420                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
 10421  1EC1  3005               	movlw	5
 10422  1EC2  008D               	movwf	13	;volatile
 10423                           
 10424                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10425  1EC3  300C               	movlw	12
 10426  1EC4  008E               	movwf	14	;volatile
 10427                           
 10428                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10429  1EC5  0022               	movlb	2	; select bank2
 10430  1EC6  018C               	clrf	12	;volatile
 10431                           
 10432                           ;MCU_B1.c: 92: LATB = 0b00000000;;
 10433  1EC7  018D               	clrf	13	;volatile
 10434                           
 10435                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10436  1EC8  018E               	clrf	14	;volatile
 10437                           
 10438                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
 10439  1EC9  3002               	movlw	2
 10440  1ECA  0023               	movlb	3	; select bank3
 10441  1ECB  008C               	movwf	12	;volatile
 10442                           
 10443                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10444  1ECC  018D               	clrf	13	;volatile
 10445                           
 10446                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10447  1ECD  018E               	clrf	14	;volatile
 10448                           
 10449                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10450  1ECE  3077               	movlw	119
 10451  1ECF  0020               	movlb	0	; select bank0
 10452  1ED0  008C               	movwf	12	;volatile
 10453                           
 10454                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
 10455  1ED1  3005               	movlw	5
 10456  1ED2  008D               	movwf	13	;volatile
 10457                           
 10458                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10459  1ED3  300C               	movlw	12
 10460  1ED4  008E               	movwf	14	;volatile
 10461  1ED5  0008               	return
 10462  1ED6                     __end_of_IO_Set:	
 10463                           
 10464                           	psect	text56
 10465  1D14                     __ptext56:	
 10466 ;; *************** function _IOC_Set *****************
 10467 ;; Defined at:
 10468 ;;		line 267 in file "../src/MCU_B1.c"
 10469 ;; Parameters:    Size  Location     Type
 10470 ;;		None
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;		None
 10473 ;; Return value:  Size  Location     Type
 10474 ;;		None               void
 10475 ;; Registers used:
 10476 ;;		wreg, status,2
 10477 ;; Tracked objects:
 10478 ;;		On entry : 0/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;Total ram usage:        0 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:    5
 10489 ;; This function calls:
 10490 ;;		Nothing
 10491 ;; This function is called by:
 10492 ;;		_Mcu_Initialization
 10493 ;; This function uses a non-reentrant model
 10494 ;;
 10495                           
 10496                           
 10497                           ;psect for function _IOC_Set
 10498  1D14                     _IOC_Set:	
 10499                           
 10500                           ;MCU_B1.c: 268: WPUB2 = 0;
 10501                           
 10502                           ;incstack = 0
 10503                           ; Regs used in _IOC_Set: [wreg+status,2]
 10504  1D14  0024               	movlb	4	; select bank4
 10505  1D15  110D               	bcf	13,2	;volatile
 10506                           
 10507                           ;MCU_B1.c: 270: IOCBP = 0b00000100;
 10508  1D16  3004               	movlw	4
 10509  1D17  0027               	movlb	7	; select bank7
 10510  1D18  0094               	movwf	20	;volatile
 10511                           
 10512                           ;MCU_B1.c: 271: IOCBN = 0b00000100;
 10513  1D19  3004               	movlw	4
 10514  1D1A  0095               	movwf	21	;volatile
 10515                           
 10516                           ;MCU_B1.c: 286: IOCBF = 0b00000000;
 10517  1D1B  0196               	clrf	22	;volatile
 10518                           
 10519                           ;MCU_B1.c: 288: IOCIE = 1;
 10520  1D1C  158B               	bsf	11,3	;volatile
 10521                           
 10522                           ;MCU_B1.c: 289: IOCIF = 0;
 10523  1D1D  100B               	bcf	11,0	;volatile
 10524                           
 10525                           ;MCU_B1.c: 290: PEIE = 1;
 10526  1D1E  170B               	bsf	11,6	;volatile
 10527                           
 10528                           ;MCU_B1.c: 291: GIE = 1;
 10529  1D1F  178B               	bsf	11,7	;volatile
 10530  1D20  0008               	return
 10531  1D21                     __end_of_IOC_Set:	
 10532                           
 10533                           	psect	text57
 10534  1C65                     __ptext57:	
 10535 ;; *************** function _INT_Set *****************
 10536 ;; Defined at:
 10537 ;;		line 240 in file "../src/MCU_B1.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;		None
 10542 ;; Return value:  Size  Location     Type
 10543 ;;		None               void
 10544 ;; Registers used:
 10545 ;;		None
 10546 ;; Tracked objects:
 10547 ;;		On entry : 0/0
 10548 ;;		On exit  : 0/0
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;Total ram usage:        0 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    5
 10558 ;; This function calls:
 10559 ;;		Nothing
 10560 ;; This function is called by:
 10561 ;;		_Mcu_Initialization
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           
 10566                           ;psect for function _INT_Set
 10567  1C65                     _INT_Set:	
 10568                           
 10569                           ;MCU_B1.c: 241: WPUB0 = 0;
 10570                           
 10571                           ;incstack = 0
 10572                           ; Regs used in _INT_Set: []
 10573  1C65  0024               	movlb	4	; select bank4
 10574  1C66  100D               	bcf	13,0	;volatile
 10575                           
 10576                           ;MCU_B1.c: 242: INTE = 0;
 10577  1C67  120B               	bcf	11,4	;volatile
 10578                           
 10579                           ;MCU_B1.c: 243: PEIE = 1;
 10580  1C68  170B               	bsf	11,6	;volatile
 10581                           
 10582                           ;MCU_B1.c: 244: GIE = 1;
 10583  1C69  178B               	bsf	11,7	;volatile
 10584  1C6A  0008               	return
 10585  1C6B                     __end_of_INT_Set:	
 10586                           
 10587                           	psect	text58
 10588  1C61                     __ptext58:	
 10589 ;; *************** function _Fosc_Set *****************
 10590 ;; Defined at:
 10591 ;;		line 56 in file "../src/MCU_B1.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;		None               void
 10598 ;; Registers used:
 10599 ;;		wreg
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    5
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_Mcu_Initialization
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _Fosc_Set
 10621  1C61                     _Fosc_Set:	
 10622                           
 10623                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10624                           
 10625                           ;incstack = 0
 10626                           ; Regs used in _Fosc_Set: [wreg]
 10627  1C61  3078               	movlw	120
 10628  1C62  0021               	movlb	1	; select bank1
 10629  1C63  0099               	movwf	25	;volatile
 10630  1C64  0008               	return
 10631  1C65                     __end_of_Fosc_Set:	
 10632                           
 10633                           	psect	text59
 10634  1C7E                     __ptext59:	
 10635 ;; *************** function _ADC_Set *****************
 10636 ;; Defined at:
 10637 ;;		line 313 in file "../src/MCU_B1.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;		None               void
 10644 ;; Registers used:
 10645 ;;		wreg
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;Total ram usage:        0 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    5
 10658 ;; This function calls:
 10659 ;;		Nothing
 10660 ;; This function is called by:
 10661 ;;		_Mcu_Initialization
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function _ADC_Set
 10667  1C7E                     _ADC_Set:	
 10668                           
 10669                           ;MCU_B1.c: 314: ADCON1 = 0xf2;
 10670                           
 10671                           ;incstack = 0
 10672                           ; Regs used in _ADC_Set: [wreg]
 10673  1C7E  30F2               	movlw	242
 10674  1C7F  0021               	movlb	1	; select bank1
 10675  1C80  009E               	movwf	30	;volatile
 10676                           
 10677                           ;MCU_B1.c: 315: FVRCON = 0xc0;
 10678  1C81  30C0               	movlw	192
 10679  1C82  0022               	movlb	2	; select bank2
 10680  1C83  0097               	movwf	23	;volatile
 10681  1C84  0008               	return
 10682  1C85                     __end_of_ADC_Set:	
 10683                           
 10684                           	psect	text60
 10685  1DC8                     __ptext60:	
 10686 ;; *************** function _LED_Main *****************
 10687 ;; Defined at:
 10688 ;;		line 47 in file "../src/LED_B1.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;		None
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;		None
 10693 ;; Return value:  Size  Location     Type
 10694 ;;		None               void
 10695 ;; Registers used:
 10696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10697 ;; Tracked objects:
 10698 ;;		On entry : 0/0
 10699 ;;		On exit  : 0/0
 10700 ;;		Unchanged: 0/0
 10701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;Total ram usage:        0 bytes
 10707 ;; Hardware stack levels used:    1
 10708 ;; Hardware stack levels required when called:    7
 10709 ;; This function calls:
 10710 ;;		_setLED_Main
 10711 ;; This function is called by:
 10712 ;;		_main
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           
 10717                           ;psect for function _LED_Main
 10718  1DC8                     _LED_Main:	
 10719                           
 10720                           ;LED_B1.c: 49: setLED_Main(1);
 10721                           
 10722                           ;incstack = 0
 10723                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10724  1DC8  3001               	movlw	1
 10725  1DC9  3196  2615  319D   	fcall	_setLED_Main
 10726                           
 10727                           ;LED_B1.c: 52: setLED_Main(2);
 10728  1DCC  3002               	movlw	2
 10729  1DCD  3196  2615  319D   	fcall	_setLED_Main
 10730                           
 10731                           ;LED_B1.c: 55: setLED_Main(3);
 10732  1DD0  3003               	movlw	3
 10733  1DD1  3196  2615  319D   	fcall	_setLED_Main
 10734                           
 10735                           ;LED_B1.c: 58: setLED_Main(99);
 10736  1DD4  3063               	movlw	99
 10737  1DD5  3196  2615         	fcall	_setLED_Main
 10738  1DD7  0008               	return
 10739  1DD8                     __end_of_LED_Main:	
 10740                           
 10741                           	psect	text61
 10742  1615                     __ptext61:	
 10743 ;; *************** function _setLED_Main *****************
 10744 ;; Defined at:
 10745 ;;		line 192 in file "../src/LED_B1.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;  led             1    wreg     unsigned char 
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;  led             1    4[BANK0 ] unsigned char 
 10750 ;; Return value:  Size  Location     Type
 10751 ;;		None               void
 10752 ;; Registers used:
 10753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10754 ;; Tracked objects:
 10755 ;;		On entry : 0/0
 10756 ;;		On exit  : 0/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;Total ram usage:        3 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; Hardware stack levels required when called:    6
 10766 ;; This function calls:
 10767 ;;		_LedPointSelect
 10768 ;; This function is called by:
 10769 ;;		_LED_Main
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           
 10774                           ;psect for function _setLED_Main
 10775  1615                     _setLED_Main:	
 10776                           
 10777                           ;incstack = 0
 10778                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10779                           ;setLED_Main@led stored from wreg
 10780  1615  0020               	movlb	0	; select bank0
 10781  1616  00A4               	movwf	setLED_Main@led
 10782                           
 10783                           ;LED_B1.c: 193: LedPointSelect(led);
 10784  1617  0824               	movf	setLED_Main@led,w
 10785  1618  3192  22FC  3196   	fcall	_LedPointSelect
 10786                           
 10787                           ;LED_B1.c: 194: if (LED->GO == 1) {
 10788  161B  0021               	movlb	1	; select bank1
 10789  161C  084F               	movf	_LED^(0+128),w
 10790  161D  0086               	movwf	6
 10791  161E  3001               	movlw	1	; select bank2/3
 10792  161F  0087               	movwf	7
 10793  1620  1C81               	btfss	1,1
 10794  1621  0008               	return
 10795                           
 10796                           ;LED_B1.c: 195: LED->Time++;
 10797  1622  0A4F               	incf	_LED^(0+128),w
 10798  1623  0086               	movwf	6
 10799  1624  3001               	movlw	1	; select bank2/3
 10800  1625  0087               	movwf	7
 10801  1626  3001               	movlw	1
 10802  1627  0781               	addwf	1,f
 10803  1628  3141               	addfsr 1,1
 10804  1629  1803               	skipnc
 10805  162A  0A81               	incf	1,f
 10806                           
 10807                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 10808  162B  0A4F               	incf	_LED^(0+128),w
 10809  162C  0086               	movwf	6
 10810  162D  3001               	movlw	1	; select bank2/3
 10811  162E  0087               	movwf	7
 10812  162F  3F40               	moviw [0]fsr1
 10813  1630  0020               	movlb	0	; select bank0
 10814  1631  00A2               	movwf	??_setLED_Main
 10815  1632  3F41               	moviw [1]fsr1
 10816  1633  00A3               	movwf	??_setLED_Main+1
 10817  1634  3000               	movlw	0
 10818  1635  0223               	subwf	??_setLED_Main+1,w
 10819  1636  3032               	movlw	50
 10820  1637  1903               	skipnz
 10821  1638  0222               	subwf	??_setLED_Main,w
 10822  1639  1C03               	skipc
 10823  163A  0008               	return
 10824                           
 10825                           ;LED_B1.c: 197: LED->Time = 0;
 10826  163B  0021               	movlb	1	; select bank1
 10827  163C  0A4F               	incf	_LED^(0+128),w
 10828  163D  0086               	movwf	6
 10829  163E  3001               	movlw	1	; select bank2/3
 10830  163F  0087               	movwf	7
 10831  1640  3000               	movlw	0
 10832  1641  3FC0               	movwi [0]fsr1
 10833  1642  3FC1               	movwi [1]fsr1
 10834                           
 10835                           ;LED_B1.c: 199: if (led == 1) {
 10836  1643  0020               	movlb	0	; select bank0
 10837  1644  0824               	movf	setLED_Main@led,w
 10838  1645  3A01               	xorlw	1
 10839  1646  1D03               	skipz
 10840  1647  2E4B               	goto	l8528
 10841                           
 10842                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
 10843  1648  3080               	movlw	128
 10844  1649  068E               	xorwf	14,f
 10845                           
 10846                           ;LED_B1.c: 201: }
 10847  164A  0008               	return
 10848  164B                     l8528:	
 10849                           
 10850                           ;LED_B1.c: 204: else if (led == 2) {
 10851  164B  0824               	movf	setLED_Main@led,w
 10852  164C  3A02               	xorlw	2
 10853  164D  1D03               	skipz
 10854  164E  2E52               	goto	l8532
 10855                           
 10856                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
 10857  164F  3008               	movlw	8
 10858  1650  068C               	xorwf	12,f
 10859                           
 10860                           ;LED_B1.c: 206: }
 10861  1651  0008               	return
 10862  1652                     l8532:	
 10863                           
 10864                           ;LED_B1.c: 209: else if (led == 3) {
 10865  1652  0824               	movf	setLED_Main@led,w
 10866  1653  3A03               	xorlw	3
 10867  1654  1D03               	skipz
 10868  1655  2E59               	goto	l8536
 10869                           
 10870                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
 10871  1656  3040               	movlw	64
 10872  1657  068E               	xorwf	14,f
 10873                           
 10874                           ;LED_B1.c: 211: }
 10875  1658  0008               	return
 10876  1659                     l8536:	
 10877                           
 10878                           ;LED_B1.c: 214: else if (led == 99) {
 10879  1659  0824               	movf	setLED_Main@led,w
 10880  165A  3A63               	xorlw	99
 10881  165B  1D03               	skipz
 10882  165C  0008               	return
 10883                           
 10884                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 10885  165D  3020               	movlw	32
 10886  165E  068D               	xorwf	13,f
 10887  165F  0008               	return
 10888  1660                     __end_of_setLED_Main:	
 10889                           
 10890                           	psect	text62
 10891  1DB8                     __ptext62:	
 10892 ;; *************** function _LED_Initialization *****************
 10893 ;; Defined at:
 10894 ;;		line 31 in file "../src/LED_B1.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;		None
 10899 ;; Return value:  Size  Location     Type
 10900 ;;		None               void
 10901 ;; Registers used:
 10902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        0 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    8
 10915 ;; This function calls:
 10916 ;;		_setLED_Initialization
 10917 ;; This function is called by:
 10918 ;;		_main
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function _LED_Initialization
 10924  1DB8                     _LED_Initialization:	
 10925                           
 10926                           ;LED_B1.c: 33: setLED_Initialization(1);
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10930  1DB8  3001               	movlw	1
 10931  1DB9  319E  261A  319D   	fcall	_setLED_Initialization
 10932                           
 10933                           ;LED_B1.c: 36: setLED_Initialization(2);
 10934  1DBC  3002               	movlw	2
 10935  1DBD  319E  261A  319D   	fcall	_setLED_Initialization
 10936                           
 10937                           ;LED_B1.c: 39: setLED_Initialization(3);
 10938  1DC0  3003               	movlw	3
 10939  1DC1  319E  261A  319D   	fcall	_setLED_Initialization
 10940                           
 10941                           ;LED_B1.c: 42: setLED_Initialization(99);
 10942  1DC4  3063               	movlw	99
 10943  1DC5  319E  261A         	fcall	_setLED_Initialization
 10944  1DC7  0008               	return
 10945  1DC8                     __end_of_LED_Initialization:	
 10946                           
 10947                           	psect	text63
 10948  1E1A                     __ptext63:	
 10949 ;; *************** function _setLED_Initialization *****************
 10950 ;; Defined at:
 10951 ;;		line 63 in file "../src/LED_B1.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  led             1    wreg     unsigned char 
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;  led             1    4[BANK0 ] unsigned char 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;		None               void
 10958 ;; Registers used:
 10959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;Total ram usage:        1 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    7
 10972 ;; This function calls:
 10973 ;;		_LedPointSelect
 10974 ;;		_setLED
 10975 ;; This function is called by:
 10976 ;;		_LED_Initialization
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           
 10981                           ;psect for function _setLED_Initialization
 10982  1E1A                     _setLED_Initialization:	
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10986                           ;setLED_Initialization@led stored from wreg
 10987  1E1A  0020               	movlb	0	; select bank0
 10988  1E1B  00A4               	movwf	setLED_Initialization@led
 10989                           
 10990                           ;LED_B1.c: 64: LedPointSelect(led);
 10991  1E1C  0824               	movf	setLED_Initialization@led,w
 10992  1E1D  3192  22FC  319E   	fcall	_LedPointSelect
 10993                           
 10994                           ;LED_B1.c: 65: LED->Enable = 1;
 10995  1E20  0021               	movlb	1	; select bank1
 10996  1E21  084F               	movf	_LED^(0+128),w
 10997  1E22  0086               	movwf	6
 10998  1E23  3001               	movlw	1	; select bank2/3
 10999  1E24  0087               	movwf	7
 11000  1E25  1401               	bsf	1,0
 11001                           
 11002                           ;LED_B1.c: 66: setLED(led, 0);
 11003  1E26  0020               	movlb	0	; select bank0
 11004  1E27  01A2               	clrf	setLED@command
 11005  1E28  0824               	movf	setLED_Initialization@led,w
 11006  1E29  318B  2376         	fcall	_setLED
 11007  1E2B  0008               	return
 11008  1E2C                     __end_of_setLED_Initialization:	
 11009                           
 11010                           	psect	text64
 11011  10A9                     __ptext64:	
 11012 ;; *************** function _Flash_Memory_Main *****************
 11013 ;; Defined at:
 11014 ;;		line 793 in file "../src/MCU_B1.c"
 11015 ;; Parameters:    Size  Location     Type
 11016 ;;		None
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;		None
 11019 ;; Return value:  Size  Location     Type
 11020 ;;		None               void
 11021 ;; Registers used:
 11022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;Total ram usage:        0 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; Hardware stack levels required when called:    8
 11035 ;; This function calls:
 11036 ;;		_Flash_Memory_Modify
 11037 ;; This function is called by:
 11038 ;;		_main
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           
 11043                           ;psect for function _Flash_Memory_Main
 11044  10A9                     _Flash_Memory_Main:	
 11045                           
 11046                           ;MCU_B1.c: 794: if (Memory.GO == 1) {
 11047                           
 11048                           ;incstack = 0
 11049                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11050  10A9  0023               	movlb	3	; select bank3
 11051  10AA  1CC4               	btfss	(_Memory^(0+384)+36),1
 11052  10AB  0008               	return
 11053                           
 11054                           ;MCU_B1.c: 795: if (Memory.Modify == 1) {
 11055  10AC  1C44               	btfss	(_Memory^(0+384)+36),0
 11056  10AD  28C6               	goto	l1471
 11057                           
 11058                           ;MCU_B1.c: 796: Memory.Time++;
 11059  10AE  3001               	movlw	1
 11060  10AF  07C2               	addwf	(_Memory^(0+384)+34),f
 11061  10B0  3000               	movlw	0
 11062  10B1  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11063                           
 11064                           ;MCU_B1.c: 797: if (Memory.Time == 25)
 11065  10B2  3022               	movlw	34
 11066  10B3  3EA0               	addlw	_Memory& (0+255)
 11067  10B4  0086               	movwf	6
 11068  10B5  3001               	movlw	1	; select bank3/4
 11069  10B6  0087               	movwf	7
 11070  10B7  3F40               	moviw [0]fsr1
 11071  10B8  3A19               	xorlw	25
 11072  10B9  1D03               	skipz
 11073  10BA  28BD               	goto	u7705
 11074  10BB  3F41               	moviw [1]fsr1
 11075  10BC  3A00               	xorlw	0
 11076  10BD                     u7705:	
 11077  10BD  1D03               	skipz
 11078  10BE  0008               	return
 11079                           
 11080                           ;MCU_B1.c: 798: {
 11081                           ;MCU_B1.c: 799: Memory.Time = 0;
 11082  10BF  01C2               	clrf	(_Memory^(0+384)+34)
 11083  10C0  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11084                           
 11085                           ;MCU_B1.c: 800: Memory.Modify = 0;
 11086  10C1  1044               	bcf	(_Memory^(0+384)+36),0
 11087                           
 11088                           ;MCU_B1.c: 801: Memory.GO = 0;
 11089  10C2  10C4               	bcf	(_Memory^(0+384)+36),1
 11090                           
 11091                           ;MCU_B1.c: 802: Flash_Memory_Modify();
 11092  10C3  3194  24B3         	fcall	_Flash_Memory_Modify
 11093                           
 11094                           ;MCU_B1.c: 803: }
 11095                           ;MCU_B1.c: 804: } else {
 11096  10C5  0008               	return
 11097  10C6                     l1471:	
 11098                           
 11099                           ;MCU_B1.c: 805: Memory.GO = 0;
 11100  10C6  10C4               	bcf	(_Memory^(0+384)+36),1
 11101  10C7  0008               	return
 11102  10C8                     __end_of_Flash_Memory_Main:	
 11103                           
 11104                           	psect	text65
 11105  14B3                     __ptext65:	
 11106 ;; *************** function _Flash_Memory_Modify *****************
 11107 ;; Defined at:
 11108 ;;		line 862 in file "../src/MCU_B1.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;		None
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;  i               1    5[BANK0 ] unsigned char 
 11113 ;; Return value:  Size  Location     Type
 11114 ;;		None               void
 11115 ;; Registers used:
 11116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;Total ram usage:        2 bytes
 11127 ;; Hardware stack levels used:    1
 11128 ;; Hardware stack levels required when called:    7
 11129 ;; This function calls:
 11130 ;;		_Flash_Memory_Erasing
 11131 ;;		_Flash_Memory_Read
 11132 ;;		_Flash_Memory_Write
 11133 ;; This function is called by:
 11134 ;;		_Flash_Memory_Main
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function _Flash_Memory_Modify
 11140  14B3                     _Flash_Memory_Modify:	
 11141                           
 11142                           ;MCU_B1.c: 863: char i = 0;
 11143                           
 11144                           ;incstack = 0
 11145                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11146  14B3  0020               	movlb	0	; select bank0
 11147  14B4  01A5               	clrf	Flash_Memory_Modify@i
 11148                           
 11149                           ;MCU_B1.c: 864: for (i = 0; i < 32; i++) {
 11150  14B5  01A5               	clrf	Flash_Memory_Modify@i
 11151  14B6  3020               	movlw	32
 11152  14B7  0225               	subwf	Flash_Memory_Modify@i,w
 11153  14B8  1803               	btfsc	3,0
 11154  14B9  2CCF               	goto	l7606
 11155  14BA                     l7600:	
 11156                           
 11157                           ;MCU_B1.c: 865: Memory.Data[i] = Flash_Memory_Read(i);
 11158  14BA  0825               	movf	Flash_Memory_Modify@i,w
 11159  14BB  319F  273B  3194   	fcall	_Flash_Memory_Read
 11160  14BE  0020               	movlb	0	; select bank0
 11161  14BF  00A4               	movwf	??_Flash_Memory_Modify
 11162  14C0  0825               	movf	Flash_Memory_Modify@i,w
 11163  14C1  3EA0               	addlw	_Memory& (0+255)
 11164  14C2  0086               	movwf	6
 11165  14C3  3001               	movlw	1	; select bank3/4
 11166  14C4  0087               	movwf	7
 11167  14C5  0824               	movf	??_Flash_Memory_Modify,w
 11168  14C6  0081               	movwf	1
 11169  14C7  3001               	movlw	1
 11170  14C8  00A4               	movwf	??_Flash_Memory_Modify
 11171  14C9  0824               	movf	??_Flash_Memory_Modify,w
 11172  14CA  07A5               	addwf	Flash_Memory_Modify@i,f
 11173  14CB  3020               	movlw	32
 11174  14CC  0225               	subwf	Flash_Memory_Modify@i,w
 11175  14CD  1C03               	skipc
 11176  14CE  2CBA               	goto	l7600
 11177  14CF                     l7606:	
 11178                           
 11179                           ;MCU_B1.c: 866: }
 11180                           ;MCU_B1.c: 867: Memory.Data[0]=product->Data[12];
 11181  14CF  086F               	movf	_product,w
 11182  14D0  0086               	movwf	6
 11183  14D1  3002               	movlw	2	; select bank4/5
 11184  14D2  0087               	movwf	7
 11185  14D3  3002               	movlw	2	; select bank4/5
 11186  14D4  3F4C               	moviw [12]fsr1
 11187  14D5  0023               	movlb	3	; select bank3
 11188  14D6  00A0               	movwf	_Memory^(0+384)
 11189                           
 11190                           ;MCU_B1.c: 868: Memory.Data[1]=product->Data[13];
 11191  14D7  0020               	movlb	0	; select bank0
 11192  14D8  086F               	movf	_product,w
 11193  14D9  0086               	movwf	6
 11194  14DA  3002               	movlw	2	; select bank4/5
 11195  14DB  0087               	movwf	7
 11196  14DC  3002               	movlw	2	; select bank4/5
 11197  14DD  3F4D               	moviw [13]fsr1
 11198  14DE  0023               	movlb	3	; select bank3
 11199  14DF  00A1               	movwf	(_Memory^(0+384)+1)
 11200                           
 11201                           ;MCU_B1.c: 869: Memory.Data[2]=product->Data[14];
 11202  14E0  0020               	movlb	0	; select bank0
 11203  14E1  086F               	movf	_product,w
 11204  14E2  0086               	movwf	6
 11205  14E3  3002               	movlw	2	; select bank4/5
 11206  14E4  0087               	movwf	7
 11207  14E5  3002               	movlw	2	; select bank4/5
 11208  14E6  3F4E               	moviw [14]fsr1
 11209  14E7  0023               	movlb	3	; select bank3
 11210  14E8  00A2               	movwf	(_Memory^(0+384)+2)
 11211                           
 11212                           ;MCU_B1.c: 875: if (Memory.LoopSave == 1) {
 11213  14E9  1D44               	btfss	(_Memory^(0+384)+36),2
 11214  14EA  2CEF               	goto	l1493
 11215                           
 11216                           ;MCU_B1.c: 876: Memory.LoopSave = 0;
 11217  14EB  1144               	bcf	(_Memory^(0+384)+36),2
 11218                           
 11219                           ;MCU_B1.c: 877: myMain.FirstOpen = 0;
 11220  14EC  0021               	movlb	1	; select bank1
 11221  14ED  12A0               	bcf	_myMain^(0+128),5
 11222                           
 11223                           ;MCU_B1.c: 878: myMain.First = 0;
 11224  14EE  13A0               	bcf	_myMain^(0+128),7
 11225  14EF                     l1493:	
 11226                           
 11227                           ;MCU_B1.c: 880: }
 11228                           ;MCU_B1.c: 881: GIE = 0;
 11229  14EF  138B               	bcf	11,7	;volatile
 11230                           
 11231                           ;MCU_B1.c: 882: Flash_Memory_Erasing();
 11232  14F0  319C  24EF  3194   	fcall	_Flash_Memory_Erasing
 11233                           
 11234                           ;MCU_B1.c: 883: Flash_Memory_Write();
 11235  14F3  3193  2329         	fcall	_Flash_Memory_Write
 11236                           
 11237                           ;MCU_B1.c: 884: GIE = 1;
 11238  14F5  178B               	bsf	11,7	;volatile
 11239  14F6  0008               	return
 11240  14F7                     __end_of_Flash_Memory_Modify:	
 11241                           
 11242                           	psect	text66
 11243  1CEF                     __ptext66:	
 11244 ;; *************** function _Flash_Memory_Erasing *****************
 11245 ;; Defined at:
 11246 ;;		line 851 in file "../src/MCU_B1.c"
 11247 ;; Parameters:    Size  Location     Type
 11248 ;;		None
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;		None
 11251 ;; Return value:  Size  Location     Type
 11252 ;;		None               void
 11253 ;; Registers used:
 11254 ;;		wreg, status,2, status,0, pclath, cstack
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;Total ram usage:        0 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; Hardware stack levels required when called:    6
 11267 ;; This function calls:
 11268 ;;		_Flash_Memory_Unlock
 11269 ;; This function is called by:
 11270 ;;		_Flash_Memory_Modify
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           
 11275                           ;psect for function _Flash_Memory_Erasing
 11276  1CEF                     _Flash_Memory_Erasing:	
 11277                           
 11278                           ;MCU_B1.c: 852: CFGS = 0;
 11279                           
 11280                           ;incstack = 0
 11281                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11282  1CEF  0023               	movlb	3	; select bank3
 11283  1CF0  1315               	bcf	21,6	;volatile
 11284                           
 11285                           ;MCU_B1.c: 853: PMADRH = 0x30;
 11286  1CF1  3030               	movlw	48
 11287  1CF2  0092               	movwf	18	;volatile
 11288                           
 11289                           ;MCU_B1.c: 854: PMADRL = 0x00;
 11290  1CF3  0191               	clrf	17	;volatile
 11291                           
 11292                           ;MCU_B1.c: 855: FREE = 1;
 11293  1CF4  1615               	bsf	21,4	;volatile
 11294                           
 11295                           ;MCU_B1.c: 856: WREN = 1;
 11296  1CF5  1515               	bsf	21,2	;volatile
 11297                           
 11298                           ;MCU_B1.c: 857: Flash_Memory_Unlock();
 11299  1CF6  3187  27F6         	fcall	_Flash_Memory_Unlock
 11300                           
 11301                           ;MCU_B1.c: 858: WREN = 0;
 11302  1CF8  0023               	movlb	3	; select bank3
 11303  1CF9  1115               	bcf	21,2	;volatile
 11304  1CFA  0008               	return
 11305  1CFB                     __end_of_Flash_Memory_Erasing:	
 11306                           
 11307                           	psect	text67
 11308  046A                     __ptext67:	
 11309 ;; *************** function _Flash_Memory_Initialization *****************
 11310 ;; Defined at:
 11311 ;;		line 752 in file "../src/MCU_B1.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;		None
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;  i               1   62[BANK0 ] unsigned char 
 11316 ;; Return value:  Size  Location     Type
 11317 ;;		None               void
 11318 ;; Registers used:
 11319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;Total ram usage:        2 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    8
 11332 ;; This function calls:
 11333 ;;		_Flash_Memory_Read
 11334 ;;		_Flash_Memory_Write
 11335 ;;		_setPercentValue
 11336 ;; This function is called by:
 11337 ;;		_main
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           
 11342                           ;psect for function _Flash_Memory_Initialization
 11343  046A                     _Flash_Memory_Initialization:	
 11344                           
 11345                           ;MCU_B1.c: 753: char i = 0;
 11346                           
 11347                           ;incstack = 0
 11348                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11349  046A  0020               	movlb	0	; select bank0
 11350  046B  01DE               	clrf	Flash_Memory_Initialization@i
 11351                           
 11352                           ;MCU_B1.c: 754: if (Flash_Memory_Read(31) == 0xaa) {
 11353  046C  301F               	movlw	31
 11354  046D  319F  273B  3184   	fcall	_Flash_Memory_Read
 11355  0470  3AAA               	xorlw	170
 11356  0471  1D03               	skipz
 11357  0472  2CDC               	goto	l7972
 11358                           
 11359                           ;MCU_B1.c: 755: product->Data[12] = Flash_Memory_Read(0);
 11360  0473  3000               	movlw	0
 11361  0474  319F  273B  3184   	fcall	_Flash_Memory_Read
 11362  0477  0020               	movlb	0	; select bank0
 11363  0478  00DD               	movwf	??_Flash_Memory_Initialization
 11364  0479  086F               	movf	_product,w
 11365  047A  3E0C               	addlw	12
 11366  047B  0086               	movwf	6
 11367  047C  3002               	movlw	2	; select bank4/5
 11368  047D  0087               	movwf	7
 11369  047E  085D               	movf	??_Flash_Memory_Initialization,w
 11370  047F  0081               	movwf	1
 11371                           
 11372                           ;MCU_B1.c: 756: product->Data[13] = Flash_Memory_Read(1);
 11373  0480  3001               	movlw	1
 11374  0481  319F  273B  3184   	fcall	_Flash_Memory_Read
 11375  0484  0020               	movlb	0	; select bank0
 11376  0485  00DD               	movwf	??_Flash_Memory_Initialization
 11377  0486  086F               	movf	_product,w
 11378  0487  3E0D               	addlw	13
 11379  0488  0086               	movwf	6
 11380  0489  3002               	movlw	2	; select bank4/5
 11381  048A  0087               	movwf	7
 11382  048B  085D               	movf	??_Flash_Memory_Initialization,w
 11383  048C  0081               	movwf	1
 11384                           
 11385                           ;MCU_B1.c: 757: product->Data[14] = Flash_Memory_Read(2);
 11386  048D  3002               	movlw	2
 11387  048E  319F  273B  3184   	fcall	_Flash_Memory_Read
 11388  0491  0020               	movlb	0	; select bank0
 11389  0492  00DD               	movwf	??_Flash_Memory_Initialization
 11390  0493  086F               	movf	_product,w
 11391  0494  3E0E               	addlw	14
 11392  0495  0086               	movwf	6
 11393  0496  3002               	movlw	2	; select bank4/5
 11394  0497  0087               	movwf	7
 11395  0498  085D               	movf	??_Flash_Memory_Initialization,w
 11396  0499  0081               	movwf	1
 11397                           
 11398                           ;MCU_B1.c: 763: i = setPercentValue(((char)((100-95)*0.8)));
 11399  049A  3004               	movlw	4
 11400  049B  3194  24F7  3184   	fcall	_setPercentValue
 11401  049E  0020               	movlb	0	; select bank0
 11402  049F  00DD               	movwf	??_Flash_Memory_Initialization
 11403  04A0  085D               	movf	??_Flash_Memory_Initialization,w
 11404  04A1  00DE               	movwf	Flash_Memory_Initialization@i
 11405                           
 11406                           ;MCU_B1.c: 764: product->Data[21] = i;
 11407  04A2  085E               	movf	Flash_Memory_Initialization@i,w
 11408  04A3  00DD               	movwf	??_Flash_Memory_Initialization
 11409  04A4  086F               	movf	_product,w
 11410  04A5  3E15               	addlw	21
 11411  04A6  0086               	movwf	6
 11412  04A7  3002               	movlw	2	; select bank4/5
 11413  04A8  0087               	movwf	7
 11414  04A9  085D               	movf	??_Flash_Memory_Initialization,w
 11415  04AA  0081               	movwf	1
 11416                           
 11417                           ;MCU_B1.c: 765: product->Data[22] = i;
 11418  04AB  085E               	movf	Flash_Memory_Initialization@i,w
 11419  04AC  00DD               	movwf	??_Flash_Memory_Initialization
 11420  04AD  086F               	movf	_product,w
 11421  04AE  3E16               	addlw	22
 11422  04AF  0086               	movwf	6
 11423  04B0  3002               	movlw	2	; select bank4/5
 11424  04B1  0087               	movwf	7
 11425  04B2  085D               	movf	??_Flash_Memory_Initialization,w
 11426  04B3  0081               	movwf	1
 11427                           
 11428                           ;MCU_B1.c: 766: product->Data[23] = i;
 11429  04B4  085E               	movf	Flash_Memory_Initialization@i,w
 11430  04B5  00DD               	movwf	??_Flash_Memory_Initialization
 11431  04B6  086F               	movf	_product,w
 11432  04B7  3E17               	addlw	23
 11433  04B8  0086               	movwf	6
 11434  04B9  3002               	movlw	2	; select bank4/5
 11435  04BA  0087               	movwf	7
 11436  04BB  085D               	movf	??_Flash_Memory_Initialization,w
 11437  04BC  0081               	movwf	1
 11438                           
 11439                           ;MCU_B1.c: 768: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11440  04BD  086F               	movf	_product,w
 11441  04BE  3E0C               	addlw	12
 11442  04BF  0086               	movwf	6
 11443  04C0  3002               	movlw	2	; select bank4/5
 11444  04C1  0087               	movwf	7
 11445  04C2  0801               	movf	1,w
 11446  04C3  3AFF               	xorlw	255
 11447  04C4  1D03               	skipz
 11448  04C5  0008               	return
 11449  04C6  086F               	movf	_product,w
 11450  04C7  3E0D               	addlw	13
 11451  04C8  0086               	movwf	6
 11452  04C9  3002               	movlw	2	; select bank4/5
 11453  04CA  0087               	movwf	7
 11454  04CB  0801               	movf	1,w
 11455  04CC  3AFF               	xorlw	255
 11456  04CD  1D03               	skipz
 11457  04CE  0008               	return
 11458  04CF  086F               	movf	_product,w
 11459  04D0  3E0E               	addlw	14
 11460  04D1  0086               	movwf	6
 11461  04D2  3002               	movlw	2	; select bank4/5
 11462  04D3  0087               	movwf	7
 11463  04D4  0801               	movf	1,w
 11464  04D5  3AFF               	xorlw	255
 11465  04D6  1D03               	skipz
 11466  04D7  0008               	return
 11467                           
 11468                           ;MCU_B1.c: 769: myMain.FirstOpen = 1;
 11469  04D8  0021               	movlb	1	; select bank1
 11470  04D9  16A0               	bsf	_myMain^(0+128),5
 11471                           
 11472                           ;MCU_B1.c: 770: myMain.First = 1;
 11473  04DA  17A0               	bsf	_myMain^(0+128),7
 11474                           
 11475                           ;MCU_B1.c: 771: }
 11476                           ;MCU_B1.c: 772: } else {
 11477  04DB  0008               	return
 11478  04DC                     l7972:	
 11479                           
 11480                           ;MCU_B1.c: 773: i = setPercentValue(((char)((100-95)*0.8)));
 11481  04DC  3004               	movlw	4
 11482  04DD  3194  24F7  3184   	fcall	_setPercentValue
 11483  04E0  0020               	movlb	0	; select bank0
 11484  04E1  00DD               	movwf	??_Flash_Memory_Initialization
 11485  04E2  085D               	movf	??_Flash_Memory_Initialization,w
 11486  04E3  00DE               	movwf	Flash_Memory_Initialization@i
 11487                           
 11488                           ;MCU_B1.c: 774: Memory.Data[0]=0xff;
 11489  04E4  30FF               	movlw	255
 11490  04E5  00DD               	movwf	??_Flash_Memory_Initialization
 11491  04E6  085D               	movf	??_Flash_Memory_Initialization,w
 11492  04E7  0023               	movlb	3	; select bank3
 11493  04E8  00A0               	movwf	_Memory^(0+384)
 11494                           
 11495                           ;MCU_B1.c: 775: Memory.Data[1]=0xff;
 11496  04E9  30FF               	movlw	255
 11497  04EA  0020               	movlb	0	; select bank0
 11498  04EB  00DD               	movwf	??_Flash_Memory_Initialization
 11499  04EC  085D               	movf	??_Flash_Memory_Initialization,w
 11500  04ED  0023               	movlb	3	; select bank3
 11501  04EE  00A1               	movwf	(_Memory^(0+384)+1)
 11502                           
 11503                           ;MCU_B1.c: 776: Memory.Data[2]=0xff;
 11504  04EF  30FF               	movlw	255
 11505  04F0  0020               	movlb	0	; select bank0
 11506  04F1  00DD               	movwf	??_Flash_Memory_Initialization
 11507  04F2  085D               	movf	??_Flash_Memory_Initialization,w
 11508  04F3  0023               	movlb	3	; select bank3
 11509  04F4  00A2               	movwf	(_Memory^(0+384)+2)
 11510                           
 11511                           ;MCU_B1.c: 777: Memory.Data[3]=0xff;
 11512  04F5  30FF               	movlw	255
 11513  04F6  0020               	movlb	0	; select bank0
 11514  04F7  00DD               	movwf	??_Flash_Memory_Initialization
 11515  04F8  085D               	movf	??_Flash_Memory_Initialization,w
 11516  04F9  0023               	movlb	3	; select bank3
 11517  04FA  00A3               	movwf	(_Memory^(0+384)+3)
 11518                           
 11519                           ;MCU_B1.c: 778: Memory.Data[4]=0xff;
 11520  04FB  30FF               	movlw	255
 11521  04FC  0020               	movlb	0	; select bank0
 11522  04FD  00DD               	movwf	??_Flash_Memory_Initialization
 11523  04FE  085D               	movf	??_Flash_Memory_Initialization,w
 11524  04FF  0023               	movlb	3	; select bank3
 11525  0500  00A4               	movwf	(_Memory^(0+384)+4)
 11526                           
 11527                           ;MCU_B1.c: 779: Memory.Data[5]=0xff;
 11528  0501  30FF               	movlw	255
 11529  0502  0020               	movlb	0	; select bank0
 11530  0503  00DD               	movwf	??_Flash_Memory_Initialization
 11531  0504  085D               	movf	??_Flash_Memory_Initialization,w
 11532  0505  0023               	movlb	3	; select bank3
 11533  0506  00A5               	movwf	(_Memory^(0+384)+5)
 11534                           
 11535                           ;MCU_B1.c: 780: Memory.Data[31]=0xaa;
 11536  0507  30AA               	movlw	170
 11537  0508  0020               	movlb	0	; select bank0
 11538  0509  00DD               	movwf	??_Flash_Memory_Initialization
 11539  050A  085D               	movf	??_Flash_Memory_Initialization,w
 11540  050B  0023               	movlb	3	; select bank3
 11541  050C  00BF               	movwf	(_Memory^(0+384)+31)
 11542                           
 11543                           ;MCU_B1.c: 781: product->Data[21] = i;
 11544  050D  0020               	movlb	0	; select bank0
 11545  050E  085E               	movf	Flash_Memory_Initialization@i,w
 11546  050F  00DD               	movwf	??_Flash_Memory_Initialization
 11547  0510  086F               	movf	_product,w
 11548  0511  3E15               	addlw	21
 11549  0512  0086               	movwf	6
 11550  0513  3002               	movlw	2	; select bank4/5
 11551  0514  0087               	movwf	7
 11552  0515  085D               	movf	??_Flash_Memory_Initialization,w
 11553  0516  0081               	movwf	1
 11554                           
 11555                           ;MCU_B1.c: 782: product->Data[22] = i;
 11556  0517  085E               	movf	Flash_Memory_Initialization@i,w
 11557  0518  00DD               	movwf	??_Flash_Memory_Initialization
 11558  0519  086F               	movf	_product,w
 11559  051A  3E16               	addlw	22
 11560  051B  0086               	movwf	6
 11561  051C  3002               	movlw	2	; select bank4/5
 11562  051D  0087               	movwf	7
 11563  051E  085D               	movf	??_Flash_Memory_Initialization,w
 11564  051F  0081               	movwf	1
 11565                           
 11566                           ;MCU_B1.c: 783: product->Data[23] = i;
 11567  0520  085E               	movf	Flash_Memory_Initialization@i,w
 11568  0521  00DD               	movwf	??_Flash_Memory_Initialization
 11569  0522  086F               	movf	_product,w
 11570  0523  3E17               	addlw	23
 11571  0524  0086               	movwf	6
 11572  0525  3002               	movlw	2	; select bank4/5
 11573  0526  0087               	movwf	7
 11574  0527  085D               	movf	??_Flash_Memory_Initialization,w
 11575  0528  0081               	movwf	1
 11576                           
 11577                           ;MCU_B1.c: 784: GIE = 0;
 11578  0529  138B               	bcf	11,7	;volatile
 11579                           
 11580                           ;MCU_B1.c: 785: Flash_Memory_Write();
 11581  052A  3193  2329         	fcall	_Flash_Memory_Write
 11582                           
 11583                           ;MCU_B1.c: 786: GIE = 1;
 11584  052C  178B               	bsf	11,7	;volatile
 11585                           
 11586                           ;MCU_B1.c: 787: myMain.FirstOpen = 1;
 11587  052D  0021               	movlb	1	; select bank1
 11588  052E  16A0               	bsf	_myMain^(0+128),5
 11589                           
 11590                           ;MCU_B1.c: 788: myMain.First = 1;
 11591  052F  17A0               	bsf	_myMain^(0+128),7
 11592  0530  0008               	return
 11593  0531                     __end_of_Flash_Memory_Initialization:	
 11594                           
 11595                           	psect	text68
 11596  1329                     __ptext68:	
 11597 ;; *************** function _Flash_Memory_Write *****************
 11598 ;; Defined at:
 11599 ;;		line 832 in file "../src/MCU_B1.c"
 11600 ;; Parameters:    Size  Location     Type
 11601 ;;		None
 11602 ;; Auto vars:     Size  Location     Type
 11603 ;;  i               1    1[BANK0 ] unsigned char 
 11604 ;; Return value:  Size  Location     Type
 11605 ;;		None               void
 11606 ;; Registers used:
 11607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11608 ;; Tracked objects:
 11609 ;;		On entry : 0/0
 11610 ;;		On exit  : 0/0
 11611 ;;		Unchanged: 0/0
 11612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;Total ram usage:        2 bytes
 11618 ;; Hardware stack levels used:    1
 11619 ;; Hardware stack levels required when called:    6
 11620 ;; This function calls:
 11621 ;;		_Flash_Memory_Unlock
 11622 ;; This function is called by:
 11623 ;;		_Flash_Memory_Initialization
 11624 ;;		_Flash_Memory_Modify
 11625 ;; This function uses a non-reentrant model
 11626 ;;
 11627                           
 11628                           
 11629                           ;psect for function _Flash_Memory_Write
 11630  1329                     _Flash_Memory_Write:	
 11631                           
 11632                           ;MCU_B1.c: 833: char i = 0;
 11633                           
 11634                           ;incstack = 0
 11635                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11636  1329  0020               	movlb	0	; select bank0
 11637  132A  01A1               	clrf	Flash_Memory_Write@i
 11638                           
 11639                           ;MCU_B1.c: 834: CFGS = 0;
 11640  132B  0023               	movlb	3	; select bank3
 11641  132C  1315               	bcf	21,6	;volatile
 11642                           
 11643                           ;MCU_B1.c: 835: PMADRH = 0x30;
 11644  132D  3030               	movlw	48
 11645  132E  0092               	movwf	18	;volatile
 11646                           
 11647                           ;MCU_B1.c: 836: PMDATH = 0;
 11648  132F  0194               	clrf	20	;volatile
 11649                           
 11650                           ;MCU_B1.c: 837: FREE = 0;
 11651  1330  1215               	bcf	21,4	;volatile
 11652                           
 11653                           ;MCU_B1.c: 838: LWLO = 1;
 11654  1331  1695               	bsf	21,5	;volatile
 11655                           
 11656                           ;MCU_B1.c: 839: WREN = 1;
 11657  1332  1515               	bsf	21,2	;volatile
 11658                           
 11659                           ;MCU_B1.c: 840: for (i = 0; i < 32; i++) {
 11660  1333  0020               	movlb	0	; select bank0
 11661  1334  01A1               	clrf	Flash_Memory_Write@i
 11662  1335  3020               	movlw	32
 11663  1336  0221               	subwf	Flash_Memory_Write@i,w
 11664  1337  1803               	btfsc	3,0
 11665  1338  2B51               	goto	l1484
 11666  1339                     l6958:	
 11667                           
 11668                           ;MCU_B1.c: 841: PMADRL = i;
 11669  1339  0821               	movf	Flash_Memory_Write@i,w
 11670  133A  0023               	movlb	3	; select bank3
 11671  133B  0091               	movwf	17	;volatile
 11672                           
 11673                           ;MCU_B1.c: 842: PMDATL = Memory.Data[i];
 11674  133C  0020               	movlb	0	; select bank0
 11675  133D  0821               	movf	Flash_Memory_Write@i,w
 11676  133E  3EA0               	addlw	_Memory& (0+255)
 11677  133F  0086               	movwf	6
 11678  1340  3001               	movlw	1	; select bank3/4
 11679  1341  0087               	movwf	7
 11680  1342  0801               	movf	1,w
 11681  1343  0023               	movlb	3	; select bank3
 11682  1344  0093               	movwf	19	;volatile
 11683                           
 11684                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 11685  1345  3187  27F6  3193   	fcall	_Flash_Memory_Unlock
 11686  1348  3001               	movlw	1
 11687  1349  0020               	movlb	0	; select bank0
 11688  134A  00A0               	movwf	??_Flash_Memory_Write
 11689  134B  0820               	movf	??_Flash_Memory_Write,w
 11690  134C  07A1               	addwf	Flash_Memory_Write@i,f
 11691  134D  3020               	movlw	32
 11692  134E  0221               	subwf	Flash_Memory_Write@i,w
 11693  134F  1C03               	skipc
 11694  1350  2B39               	goto	l6958
 11695  1351                     l1484:	
 11696                           
 11697                           ;MCU_B1.c: 844: }
 11698                           ;MCU_B1.c: 845: LWLO = 0;
 11699  1351  0023               	movlb	3	; select bank3
 11700  1352  1295               	bcf	21,5	;volatile
 11701                           
 11702                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 11703  1353  3187  27F6         	fcall	_Flash_Memory_Unlock
 11704                           
 11705                           ;MCU_B1.c: 847: WREN = 0;
 11706  1355  0023               	movlb	3	; select bank3
 11707  1356  1115               	bcf	21,2	;volatile
 11708  1357  0008               	return
 11709  1358                     __end_of_Flash_Memory_Write:	
 11710                           
 11711                           	psect	text69
 11712  07F6                     __ptext69:	
 11713 ;; *************** function _Flash_Memory_Unlock *****************
 11714 ;; Defined at:
 11715 ;;		line 811 in file "../src/MCU_B1.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;		None
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;		None
 11720 ;; Return value:  Size  Location     Type
 11721 ;;		None               void
 11722 ;; Registers used:
 11723 ;;		wreg
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        0 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; Hardware stack levels required when called:    5
 11736 ;; This function calls:
 11737 ;;		Nothing
 11738 ;; This function is called by:
 11739 ;;		_Flash_Memory_Write
 11740 ;;		_Flash_Memory_Erasing
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _Flash_Memory_Unlock
 11746  07F6                     _Flash_Memory_Unlock:	
 11747                           
 11748                           ;MCU_B1.c: 812: PMCON2 = 0x55;
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11752  07F6  3055               	movlw	85
 11753  07F7  0023               	movlb	3	; select bank3
 11754  07F8  0096               	movwf	22	;volatile
 11755                           
 11756                           ;MCU_B1.c: 813: PMCON2 = 0xaa;
 11757  07F9  30AA               	movlw	170
 11758  07FA  0096               	movwf	22	;volatile
 11759                           
 11760                           ;MCU_B1.c: 814: WR = 1;
 11761  07FB  1495               	bsf	21,1	;volatile
 11762                           
 11763                           ;MCU_B1.c: 815: __nop();
 11764  07FC  0000               	nop
 11765                           
 11766                           ;MCU_B1.c: 816: __nop();
 11767  07FD  0000               	nop
 11768  07FE  0008               	return
 11769  07FF                     __end_of_Flash_Memory_Unlock:	
 11770                           
 11771                           	psect	text70
 11772  1F3B                     __ptext70:	
 11773 ;; *************** function _Flash_Memory_Read *****************
 11774 ;; Defined at:
 11775 ;;		line 820 in file "../src/MCU_B1.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;  address         1    wreg     unsigned char 
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;  address         1    2[BANK0 ] unsigned char 
 11780 ;;  ret             1    3[BANK0 ] unsigned char 
 11781 ;;  i               1    1[BANK0 ] unsigned char 
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  1    wreg      unsigned char 
 11784 ;; Registers used:
 11785 ;;		wreg, status,2
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;Total ram usage:        4 bytes
 11796 ;; Hardware stack levels used:    1
 11797 ;; Hardware stack levels required when called:    5
 11798 ;; This function calls:
 11799 ;;		Nothing
 11800 ;; This function is called by:
 11801 ;;		_Flash_Memory_Initialization
 11802 ;;		_Flash_Memory_Modify
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           
 11807                           ;psect for function _Flash_Memory_Read
 11808  1F3B                     _Flash_Memory_Read:	
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11812                           ;Flash_Memory_Read@address stored from wreg
 11813  1F3B  0020               	movlb	0	; select bank0
 11814  1F3C  00A2               	movwf	Flash_Memory_Read@address
 11815                           
 11816                           ;MCU_B1.c: 821: char i = 0, ret = 0;
 11817  1F3D  01A1               	clrf	Flash_Memory_Read@i
 11818  1F3E  01A3               	clrf	Flash_Memory_Read@ret
 11819                           
 11820                           ;MCU_B1.c: 822: PMADRH = 0x30;
 11821  1F3F  3030               	movlw	48
 11822  1F40  0023               	movlb	3	; select bank3
 11823  1F41  0092               	movwf	18	;volatile
 11824                           
 11825                           ;MCU_B1.c: 823: PMADRL = address;
 11826  1F42  0020               	movlb	0	; select bank0
 11827  1F43  0822               	movf	Flash_Memory_Read@address,w
 11828  1F44  0023               	movlb	3	; select bank3
 11829  1F45  0091               	movwf	17	;volatile
 11830                           
 11831                           ;MCU_B1.c: 824: CFGS = 0;
 11832  1F46  1315               	bcf	21,6	;volatile
 11833                           
 11834                           ;MCU_B1.c: 825: RD = 1;
 11835  1F47  1415               	bsf	21,0	;volatile
 11836                           
 11837                           ;MCU_B1.c: 826: i = PMDATH;
 11838  1F48  0814               	movf	20,w	;volatile
 11839  1F49  0020               	movlb	0	; select bank0
 11840  1F4A  00A0               	movwf	??_Flash_Memory_Read
 11841  1F4B  0820               	movf	??_Flash_Memory_Read,w
 11842  1F4C  00A1               	movwf	Flash_Memory_Read@i
 11843                           
 11844                           ;MCU_B1.c: 827: ret = PMDATL;
 11845  1F4D  0023               	movlb	3	; select bank3
 11846  1F4E  0813               	movf	19,w	;volatile
 11847  1F4F  0020               	movlb	0	; select bank0
 11848  1F50  00A0               	movwf	??_Flash_Memory_Read
 11849  1F51  0820               	movf	??_Flash_Memory_Read,w
 11850  1F52  00A3               	movwf	Flash_Memory_Read@ret
 11851                           
 11852                           ;MCU_B1.c: 828: return ret;
 11853  1F53  0823               	movf	Flash_Memory_Read@ret,w
 11854  1F54  0008               	return
 11855  1F55                     __end_of_Flash_Memory_Read:	
 11856                           
 11857                           	psect	text71
 11858  1D5C                     __ptext71:	
 11859 ;; *************** function _DimmerLights_Main *****************
 11860 ;; Defined at:
 11861 ;;		line 407 in file "../src/Dimmer_B1.c"
 11862 ;; Parameters:    Size  Location     Type
 11863 ;;		None
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;		None
 11866 ;; Return value:  Size  Location     Type
 11867 ;;		None               void
 11868 ;; Registers used:
 11869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;Total ram usage:        0 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:   11
 11882 ;; This function calls:
 11883 ;;		_DimmerLights_Close
 11884 ;;		_setDimmerLights_Main
 11885 ;; This function is called by:
 11886 ;;		_main
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890                           
 11891                           ;psect for function _DimmerLights_Main
 11892  1D5C                     _DimmerLights_Main:	
 11893                           
 11894                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11895                           
 11896                           ;incstack = 0
 11897                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11898  1D5C  3001               	movlw	1
 11899  1D5D  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11900                           
 11901                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 11902  1D60  3002               	movlw	2
 11903  1D61  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11904                           
 11905                           ;Dimmer_B1.c: 418: setDimmerLights_Main(3);
 11906  1D64  3003               	movlw	3
 11907  1D65  318E  26E2  319D   	fcall	_setDimmerLights_Main
 11908                           
 11909                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11910  1D68  319E  2652         	fcall	_DimmerLights_Close
 11911  1D6A  0008               	return
 11912  1D6B                     __end_of_DimmerLights_Main:	
 11913                           
 11914                           	psect	text72
 11915  0EE2                     __ptext72:	
 11916 ;; *************** function _setDimmerLights_Main *****************
 11917 ;; Defined at:
 11918 ;;		line 425 in file "../src/Dimmer_B1.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;  lights          1    wreg     unsigned char 
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;  lights          1   74[BANK0 ] unsigned char 
 11923 ;;  clear           1   73[BANK0 ] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;Total ram usage:        6 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:   10
 11940 ;; This function calls:
 11941 ;;		_DimmerLightsPointSelect
 11942 ;;		_setBuz
 11943 ;;		_setDimmerLights
 11944 ;;		_setDimmerLights_Adj
 11945 ;; This function is called by:
 11946 ;;		_DimmerLights_Main
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           
 11951                           ;psect for function _setDimmerLights_Main
 11952  0EE2                     _setDimmerLights_Main:	
 11953                           
 11954                           ;incstack = 0
 11955                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11956                           ;setDimmerLights_Main@lights stored from wreg
 11957  0EE2  0020               	movlb	0	; select bank0
 11958  0EE3  00EA               	movwf	setDimmerLights_Main@lights
 11959                           
 11960                           ;Dimmer_B1.c: 426: char clear = 1;
 11961  0EE4  01E9               	clrf	setDimmerLights_Main@clear
 11962  0EE5  0AE9               	incf	setDimmerLights_Main@clear,f
 11963                           
 11964                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11965  0EE6  086A               	movf	setDimmerLights_Main@lights,w
 11966  0EE7  319F  2755  318E   	fcall	_DimmerLightsPointSelect
 11967                           
 11968                           ;Dimmer_B1.c: 430: if (lights == 1) {
 11969  0EEA  0020               	movlb	0	; select bank0
 11970  0EEB  086A               	movf	setDimmerLights_Main@lights,w
 11971  0EEC  3A01               	xorlw	1
 11972  0EED  1D03               	skipz
 11973  0EEE  2EFA               	goto	l8462
 11974                           
 11975                           ;Dimmer_B1.c: 431: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11976  0EEF  01E6               	clrf	_setDimmerLights_Main$2151
 11977  0EF0  0023               	movlb	3	; select bank3
 11978  0EF1  194E               	btfsc	(_DimmerLights2^(0+384)+9),2
 11979  0EF2  1D5D               	btfss	(_DimmerLights3^(0+384)+9),2
 11980  0EF3  2EF7               	goto	l8460
 11981  0EF4  0020               	movlb	0	; select bank0
 11982  0EF5  01E6               	clrf	_setDimmerLights_Main$2151
 11983  0EF6  0AE6               	incf	_setDimmerLights_Main$2151,f
 11984  0EF7                     l8460:	
 11985  0EF7  0020               	movlb	0	; select bank0
 11986  0EF8  0866               	movf	_setDimmerLights_Main$2151,w
 11987  0EF9  2F1B               	goto	L10
 11988  0EFA                     l8462:	
 11989                           ;Dimmer_B1.c: 432: } else if (lights == 2) {
 11990                           
 11991  0EFA  086A               	movf	setDimmerLights_Main@lights,w
 11992  0EFB  3A02               	xorlw	2
 11993  0EFC  1D03               	skipz
 11994  0EFD  2F0B               	goto	l8474
 11995                           
 11996                           ;Dimmer_B1.c: 433: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11997  0EFE  01E7               	clrf	_setDimmerLights_Main$2152
 11998  0EFF  0022               	movlb	2	; select bank2
 11999  0F00  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 12000  0F01  2F08               	goto	l8472
 12001  0F02  0023               	movlb	3	; select bank3
 12002  0F03  1D5D               	btfss	(_DimmerLights3^(0+384)+9),2
 12003  0F04  2F08               	goto	l8472
 12004  0F05  0020               	movlb	0	; select bank0
 12005  0F06  01E7               	clrf	_setDimmerLights_Main$2152
 12006  0F07  0AE7               	incf	_setDimmerLights_Main$2152,f
 12007  0F08                     l8472:	
 12008  0F08  0020               	movlb	0	; select bank0
 12009  0F09  0867               	movf	_setDimmerLights_Main$2152,w
 12010  0F0A  2F1B               	goto	L10
 12011  0F0B                     l8474:	
 12012                           ;Dimmer_B1.c: 434: } else if (lights == 3) {
 12013                           
 12014  0F0B  086A               	movf	setDimmerLights_Main@lights,w
 12015  0F0C  3A03               	xorlw	3
 12016  0F0D  1D03               	skipz
 12017  0F0E  2F1E               	goto	l8486
 12018                           
 12019                           ;Dimmer_B1.c: 435: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 12020  0F0F  01E8               	clrf	_setDimmerLights_Main$2153
 12021  0F10  0022               	movlb	2	; select bank2
 12022  0F11  1D46               	btfss	(_DimmerLights1^(0+256)+9),2
 12023  0F12  2F19               	goto	l8484
 12024  0F13  0023               	movlb	3	; select bank3
 12025  0F14  1D4E               	btfss	(_DimmerLights2^(0+384)+9),2
 12026  0F15  2F19               	goto	l8484
 12027  0F16  0020               	movlb	0	; select bank0
 12028  0F17  01E8               	clrf	_setDimmerLights_Main$2153
 12029  0F18  0AE8               	incf	_setDimmerLights_Main$2153,f
 12030  0F19                     l8484:	
 12031  0F19  0020               	movlb	0	; select bank0
 12032  0F1A  0868               	movf	_setDimmerLights_Main$2153,w
 12033  0F1B                     L10:	
 12034  0F1B  00E5               	movwf	??_setDimmerLights_Main
 12035  0F1C  0865               	movf	??_setDimmerLights_Main,w
 12036  0F1D  00E9               	movwf	setDimmerLights_Main@clear
 12037  0F1E                     l8486:	
 12038                           
 12039                           ;Dimmer_B1.c: 436: }
 12040                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 12041  0F1E  087B               	movf	_DimmerLights,w
 12042  0F1F  3E08               	addlw	8
 12043  0F20  0086               	movwf	6
 12044  0F21  3001               	movlw	1	; select bank2/3
 12045  0F22  0087               	movwf	7
 12046  0F23  1D01               	btfss	1,2
 12047  0F24  2F42               	goto	l8496
 12048                           
 12049                           ;Dimmer_B1.c: 448: if (clear == 1) {
 12050  0F25  0869               	movf	setDimmerLights_Main@clear,w
 12051  0F26  3A01               	xorlw	1
 12052  0F27  1D03               	skipz
 12053  0F28  0008               	return
 12054                           
 12055                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 12056  0F29  087B               	movf	_DimmerLights,w
 12057  0F2A  3E08               	addlw	8
 12058  0F2B  0086               	movwf	6
 12059  0F2C  3001               	movlw	1	; select bank2/3
 12060  0F2D  0087               	movwf	7
 12061  0F2E  1101               	bcf	1,2
 12062                           
 12063                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 12064  0F2F  087B               	movf	_DimmerLights,w
 12065  0F30  3E08               	addlw	8
 12066  0F31  0086               	movwf	6
 12067  0F32  3001               	movlw	1	; select bank2/3
 12068  0F33  0087               	movwf	7
 12069  0F34  1C81               	btfss	1,1
 12070  0F35  2F3C               	goto	l8494
 12071                           
 12072                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 12073  0F36  01A4               	clrf	setDimmerLights@status
 12074  0F37  0AA4               	incf	setDimmerLights@status,f
 12075  0F38  086A               	movf	setDimmerLights_Main@lights,w
 12076  0F39  318D  2551         	fcall	_setDimmerLights
 12077                           
 12078                           ;Dimmer_B1.c: 452: } else {
 12079  0F3B  0008               	return
 12080  0F3C                     l8494:	
 12081                           
 12082                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 12083  0F3C  0020               	movlb	0	; select bank0
 12084  0F3D  01A4               	clrf	setDimmerLights@status
 12085  0F3E  086A               	movf	setDimmerLights_Main@lights,w
 12086  0F3F  318D  2551         	fcall	_setDimmerLights
 12087                           
 12088                           ;Dimmer_B1.c: 454: }
 12089                           ;Dimmer_B1.c: 458: }
 12090                           ;Dimmer_B1.c: 459: } else {
 12091  0F41  0008               	return
 12092  0F42                     l8496:	
 12093                           
 12094                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 12095  0F42  087B               	movf	_DimmerLights,w
 12096  0F43  3E08               	addlw	8
 12097  0F44  0086               	movwf	6
 12098  0F45  3001               	movlw	1	; select bank2/3
 12099  0F46  0087               	movwf	7
 12100  0F47  1E01               	btfss	1,4
 12101  0F48  0008               	return
 12102                           
 12103                           ;Dimmer_B1.c: 461: if (clear == 1) {
 12104  0F49  0020               	movlb	0	; select bank0
 12105  0F4A  0869               	movf	setDimmerLights_Main@clear,w
 12106  0F4B  3A01               	xorlw	1
 12107  0F4C  1D03               	skipz
 12108  0F4D  0008               	return
 12109                           
 12110                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 12111  0F4E  087B               	movf	_DimmerLights,w
 12112  0F4F  3E08               	addlw	8
 12113  0F50  0086               	movwf	6
 12114  0F51  3001               	movlw	1	; select bank2/3
 12115  0F52  0087               	movwf	7
 12116  0F53  1201               	bcf	1,4
 12117                           
 12118                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 12119  0F54  087B               	movf	_DimmerLights,w
 12120  0F55  3E08               	addlw	8
 12121  0F56  0086               	movwf	6
 12122  0F57  3001               	movlw	1	; select bank2/3
 12123  0F58  0087               	movwf	7
 12124  0F59  1D81               	btfss	1,3
 12125  0F5A  2F6A               	goto	l8506
 12126                           
 12127                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 12128  0F5B  01E2               	clrf	setDimmerLights_Adj@status
 12129  0F5C  0AE2               	incf	setDimmerLights_Adj@status,f
 12130  0F5D  086A               	movf	setDimmerLights_Main@lights,w
 12131  0F5E  3188  2000  318E   	fcall	_setDimmerLights_Adj
 12132                           
 12133                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12134  0F61  3064               	movlw	100
 12135  0F62  0020               	movlb	0	; select bank0
 12136  0F63  00A9               	movwf	setBuz@time
 12137  0F64  3000               	movlw	0
 12138  0F65  00AA               	movwf	setBuz@time+1
 12139  0F66  3001               	movlw	1
 12140  0F67  3197  27A7         	fcall	_setBuz
 12141                           
 12142                           ;Dimmer_B1.c: 466: } else {
 12143  0F69  0008               	return
 12144  0F6A                     l8506:	
 12145                           
 12146                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12147  0F6A  0020               	movlb	0	; select bank0
 12148  0F6B  01E2               	clrf	setDimmerLights_Adj@status
 12149  0F6C  086A               	movf	setDimmerLights_Main@lights,w
 12150  0F6D  3188  2000         	fcall	_setDimmerLights_Adj
 12151  0F6F  0008               	return
 12152  0F70                     __end_of_setDimmerLights_Main:	
 12153                           
 12154                           	psect	text73
 12155  0800                     __ptext73:	
 12156 ;; *************** function _setDimmerLights_Adj *****************
 12157 ;; Defined at:
 12158 ;;		line 646 in file "../src/Dimmer_B1.c"
 12159 ;; Parameters:    Size  Location     Type
 12160 ;;  lights          1    wreg     unsigned char 
 12161 ;;  status          1   66[BANK0 ] unsigned char 
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;  lights          1   68[BANK0 ] unsigned char 
 12164 ;; Return value:  Size  Location     Type
 12165 ;;		None               void
 12166 ;; Registers used:
 12167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12173 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;Total ram usage:        3 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; Hardware stack levels required when called:    9
 12180 ;; This function calls:
 12181 ;;		_DimmerLightsPointSelect
 12182 ;;		_setRF_DimmerLights
 12183 ;;		_setTxData
 12184 ;; This function is called by:
 12185 ;;		_setDimmerLights_Main
 12186 ;; This function uses a non-reentrant model
 12187 ;;
 12188                           
 12189                           
 12190                           ;psect for function _setDimmerLights_Adj
 12191  0800                     _setDimmerLights_Adj:	
 12192                           
 12193                           ;incstack = 0
 12194                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12195                           ;setDimmerLights_Adj@lights stored from wreg
 12196  0800  0020               	movlb	0	; select bank0
 12197  0801  00E4               	movwf	setDimmerLights_Adj@lights
 12198                           
 12199                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12200  0802  0864               	movf	setDimmerLights_Adj@lights,w
 12201  0803  319F  2755  3188   	fcall	_DimmerLightsPointSelect
 12202                           
 12203                           ;Dimmer_B1.c: 648: if (status == 1) {
 12204  0806  0020               	movlb	0	; select bank0
 12205  0807  0862               	movf	setDimmerLights_Adj@status,w
 12206  0808  3A01               	xorlw	1
 12207  0809  1D03               	skipz
 12208  080A  2816               	goto	l6912
 12209                           
 12210                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12211  080B  087B               	movf	_DimmerLights,w
 12212  080C  0086               	movwf	6
 12213  080D  3001               	movlw	1	; select bank2/3
 12214  080E  0087               	movwf	7
 12215  080F  1581               	bsf	1,3
 12216                           
 12217                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12218  0810  087B               	movf	_DimmerLights,w
 12219  0811  0086               	movwf	6
 12220  0812  3001               	movlw	1	; select bank2/3
 12221  0813  0087               	movwf	7
 12222  0814  1481               	bsf	1,1
 12223                           
 12224                           ;Dimmer_B1.c: 651: } else {
 12225  0815  0008               	return
 12226  0816                     l6912:	
 12227                           
 12228                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12229  0816  087B               	movf	_DimmerLights,w
 12230  0817  0086               	movwf	6
 12231  0818  3001               	movlw	1	; select bank2/3
 12232  0819  0087               	movwf	7
 12233  081A  1D81               	btfss	1,3
 12234  081B  0008               	return
 12235                           
 12236                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12237  081C  087B               	movf	_DimmerLights,w
 12238  081D  0086               	movwf	6
 12239  081E  3001               	movlw	1	; select bank2/3
 12240  081F  0087               	movwf	7
 12241  0820  1081               	bcf	1,1
 12242                           
 12243                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12244  0821  087B               	movf	_DimmerLights,w
 12245  0822  0086               	movwf	6
 12246  0823  3001               	movlw	1	; select bank2/3
 12247  0824  0087               	movwf	7
 12248  0825  1181               	bcf	1,3
 12249                           
 12250                           ;Dimmer_B1.c: 656: ;;
 12251                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12252  0826  087B               	movf	_DimmerLights,w
 12253  0827  3E04               	addlw	4
 12254  0828  0086               	movwf	6
 12255  0829  3001               	movlw	1	; select bank2/3
 12256  082A  0087               	movwf	7
 12257  082B  0801               	movf	1,w
 12258  082C  00E3               	movwf	??_setDimmerLights_Adj
 12259  082D  087B               	movf	_DimmerLights,w
 12260  082E  3E05               	addlw	5
 12261  082F  0086               	movwf	6
 12262  0830  3001               	movlw	1	; select bank2/3
 12263  0831  0087               	movwf	7
 12264  0832  0863               	movf	??_setDimmerLights_Adj,w
 12265  0833  0081               	movwf	1
 12266                           
 12267                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12268  0834  01DD               	clrf	setRF_DimmerLights@on
 12269  0835  0ADD               	incf	setRF_DimmerLights@on,f
 12270  0836  0864               	movf	setDimmerLights_Adj@lights,w
 12271  0837  318A  2228  3188   	fcall	_setRF_DimmerLights
 12272                           
 12273                           ;Dimmer_B1.c: 666: setTxData();
 12274  083A  3185  2531         	fcall	_setTxData
 12275  083C  0008               	return
 12276  083D                     __end_of_setDimmerLights_Adj:	
 12277                           
 12278                           	psect	text74
 12279  0D51                     __ptext74:	
 12280 ;; *************** function _setDimmerLights *****************
 12281 ;; Defined at:
 12282 ;;		line 593 in file "../src/Dimmer_B1.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;  lights          1    wreg     unsigned char 
 12285 ;;  status          1    4[BANK0 ] unsigned char 
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;  lights          1    6[BANK0 ] unsigned char 
 12288 ;; Return value:  Size  Location     Type
 12289 ;;		None               void
 12290 ;; Registers used:
 12291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12297 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;Total ram usage:        3 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    7
 12304 ;; This function calls:
 12305 ;;		_DimmerLightsPointSelect
 12306 ;;		_setLED
 12307 ;;		_setMemory_GO
 12308 ;; This function is called by:
 12309 ;;		_setDimmerLights_Main
 12310 ;;		_setControl_Lights_Table
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           
 12315                           ;psect for function _setDimmerLights
 12316  0D51                     _setDimmerLights:	
 12317                           
 12318                           ;incstack = 0
 12319                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12320                           ;setDimmerLights@lights stored from wreg
 12321  0D51  0020               	movlb	0	; select bank0
 12322  0D52  00A6               	movwf	setDimmerLights@lights
 12323                           
 12324                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12325  0D53  0826               	movf	setDimmerLights@lights,w
 12326  0D54  319F  2755  318D   	fcall	_DimmerLightsPointSelect
 12327                           
 12328                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12329  0D57  0020               	movlb	0	; select bank0
 12330  0D58  0826               	movf	setDimmerLights@lights,w
 12331  0D59  00A5               	movwf	??_setDimmerLights
 12332  0D5A  0021               	movlb	1	; select bank1
 12333  0D5B  0A4A               	incf	_Dimmer^(0+128),w
 12334  0D5C  0086               	movwf	6
 12335  0D5D  0187               	clrf	7
 12336  0D5E  0020               	movlb	0	; select bank0
 12337  0D5F  0825               	movf	??_setDimmerLights,w
 12338  0D60  0081               	movwf	1
 12339                           
 12340                           ;Dimmer_B1.c: 596: if (status == 1) {
 12341  0D61  0824               	movf	setDimmerLights@status,w
 12342  0D62  3A01               	xorlw	1
 12343  0D63  1D03               	skipz
 12344  0D64  2DA5               	goto	l8308
 12345                           
 12346                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12347  0D65  087B               	movf	_DimmerLights,w
 12348  0D66  0086               	movwf	6
 12349  0D67  3001               	movlw	1	; select bank2/3
 12350  0D68  0087               	movwf	7
 12351  0D69  1681               	bsf	1,5
 12352                           
 12353                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12354  0D6A  01A2               	clrf	setLED@command
 12355  0D6B  0826               	movf	setDimmerLights@lights,w
 12356  0D6C  318B  2376  318D   	fcall	_setLED
 12357                           
 12358                           ;Dimmer_B1.c: 600: ;;
 12359                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12360  0D6F  087B               	movf	_DimmerLights,w
 12361  0D70  0086               	movwf	6
 12362  0D71  3001               	movlw	1	; select bank2/3
 12363  0D72  0087               	movwf	7
 12364  0D73  1481               	bsf	1,1
 12365                           
 12366                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12367  0D74  3007               	movlw	7
 12368  0D75  0020               	movlb	0	; select bank0
 12369  0D76  00A5               	movwf	??_setDimmerLights
 12370  0D77  087B               	movf	_DimmerLights,w
 12371  0D78  3E02               	addlw	2
 12372  0D79  0086               	movwf	6
 12373  0D7A  3001               	movlw	1	; select bank2/3
 12374  0D7B  0087               	movwf	7
 12375  0D7C  0825               	movf	??_setDimmerLights,w
 12376  0D7D  0081               	movwf	1
 12377                           
 12378                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12379  0D7E  087B               	movf	_DimmerLights,w
 12380  0D7F  0086               	movwf	6
 12381  0D80  3001               	movlw	1	; select bank2/3
 12382  0D81  0087               	movwf	7
 12383  0D82  1B01               	btfsc	1,6
 12384  0D83  0008               	return
 12385                           
 12386                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12387  0D84  087B               	movf	_DimmerLights,w
 12388  0D85  0086               	movwf	6
 12389  0D86  3001               	movlw	1	; select bank2/3
 12390  0D87  0087               	movwf	7
 12391  0D88  1701               	bsf	1,6
 12392                           
 12393                           ;Dimmer_B1.c: 607: ;;
 12394                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12395  0D89  3000               	movlw	0
 12396  0D8A  319E  2690         	fcall	_setMemory_GO
 12397                           
 12398                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12399  0D8C  087B               	movf	_DimmerLights,w
 12400  0D8D  3E05               	addlw	5
 12401  0D8E  0086               	movwf	6
 12402  0D8F  3001               	movlw	1	; select bank2/3
 12403  0D90  0087               	movwf	7
 12404  0D91  0801               	movf	1,w
 12405  0D92  0020               	movlb	0	; select bank0
 12406  0D93  00A5               	movwf	??_setDimmerLights
 12407  0D94  087B               	movf	_DimmerLights,w
 12408  0D95  3E04               	addlw	4
 12409  0D96  0086               	movwf	6
 12410  0D97  3001               	movlw	1	; select bank2/3
 12411  0D98  0087               	movwf	7
 12412  0D99  0825               	movf	??_setDimmerLights,w
 12413  0D9A  0081               	movwf	1
 12414                           
 12415                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-95)*0.8));
 12416  0D9B  3004               	movlw	4
 12417  0D9C  00A5               	movwf	??_setDimmerLights
 12418  0D9D  087B               	movf	_DimmerLights,w
 12419  0D9E  3E04               	addlw	4
 12420  0D9F  0086               	movwf	6
 12421  0DA0  3001               	movlw	1	; select bank2/3
 12422  0DA1  0087               	movwf	7
 12423  0DA2  0825               	movf	??_setDimmerLights,w
 12424  0DA3  0081               	movwf	1
 12425                           
 12426                           ;Dimmer_B1.c: 617: }
 12427                           ;Dimmer_B1.c: 618: } else {
 12428  0DA4  0008               	return
 12429  0DA5                     l8308:	
 12430                           
 12431                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12432  0DA5  087B               	movf	_DimmerLights,w
 12433  0DA6  0086               	movwf	6
 12434  0DA7  3001               	movlw	1	; select bank2/3
 12435  0DA8  0087               	movwf	7
 12436  0DA9  1281               	bcf	1,5
 12437                           
 12438                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12439  0DAA  087B               	movf	_DimmerLights,w
 12440  0DAB  3E06               	addlw	6
 12441  0DAC  0086               	movwf	6
 12442  0DAD  3001               	movlw	1	; select bank2/3
 12443  0DAE  0087               	movwf	7
 12444  0DAF  0801               	movf	1,w
 12445  0DB0  00A5               	movwf	??_setDimmerLights
 12446  0DB1  087B               	movf	_DimmerLights,w
 12447  0DB2  3E04               	addlw	4
 12448  0DB3  0086               	movwf	6
 12449  0DB4  3001               	movlw	1	; select bank2/3
 12450  0DB5  0087               	movwf	7
 12451  0DB6  0825               	movf	??_setDimmerLights,w
 12452  0DB7  0081               	movwf	1
 12453                           
 12454                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12455  0DB8  087B               	movf	_DimmerLights,w
 12456  0DB9  0086               	movwf	6
 12457  0DBA  3001               	movlw	1	; select bank2/3
 12458  0DBB  0087               	movwf	7
 12459  0DBC  1481               	bsf	1,1
 12460                           
 12461                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12462  0DBD  087B               	movf	_DimmerLights,w
 12463  0DBE  0086               	movwf	6
 12464  0DBF  3001               	movlw	1	; select bank2/3
 12465  0DC0  0087               	movwf	7
 12466  0DC1  1181               	bcf	1,3
 12467                           
 12468                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12469  0DC2  087B               	movf	_DimmerLights,w
 12470  0DC3  0086               	movwf	6
 12471  0DC4  3001               	movlw	1	; select bank2/3
 12472  0DC5  0087               	movwf	7
 12473  0DC6  1201               	bcf	1,4
 12474                           
 12475                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12476  0DC7  3007               	movlw	7
 12477  0DC8  00A5               	movwf	??_setDimmerLights
 12478  0DC9  087B               	movf	_DimmerLights,w
 12479  0DCA  3E02               	addlw	2
 12480  0DCB  0086               	movwf	6
 12481  0DCC  3001               	movlw	1	; select bank2/3
 12482  0DCD  0087               	movwf	7
 12483  0DCE  0825               	movf	??_setDimmerLights,w
 12484  0DCF  0081               	movwf	1
 12485  0DD0  0008               	return
 12486  0DD1                     __end_of_setDimmerLights:	
 12487                           
 12488                           	psect	text75
 12489  0B76                     __ptext75:	
 12490 ;; *************** function _setLED *****************
 12491 ;; Defined at:
 12492 ;;		line 70 in file "../src/LED_B1.c"
 12493 ;; Parameters:    Size  Location     Type
 12494 ;;  led             1    wreg     unsigned char 
 12495 ;;  command         1    2[BANK0 ] unsigned char 
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;  led             1    3[BANK0 ] unsigned char 
 12498 ;; Return value:  Size  Location     Type
 12499 ;;		None               void
 12500 ;; Registers used:
 12501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12507 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;Total ram usage:        2 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    6
 12514 ;; This function calls:
 12515 ;;		_LedPointSelect
 12516 ;; This function is called by:
 12517 ;;		_setDimmerLights_ERROR
 12518 ;;		_setDimmerLights
 12519 ;;		_setLED_Initialization
 12520 ;;		_setOverTemp_Exceptions
 12521 ;;		_setSw_Initialization
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           
 12526                           ;psect for function _setLED
 12527  0B76                     _setLED:	
 12528                           
 12529                           ;incstack = 0
 12530                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12531                           ;setLED@led stored from wreg
 12532  0B76  0020               	movlb	0	; select bank0
 12533  0B77  00A3               	movwf	setLED@led
 12534                           
 12535                           ;LED_B1.c: 71: LedPointSelect(led);
 12536  0B78  0823               	movf	setLED@led,w
 12537  0B79  3192  22FC  318B   	fcall	_LedPointSelect
 12538                           
 12539                           ;LED_B1.c: 72: if (command == 0) {
 12540  0B7C  0020               	movlb	0	; select bank0
 12541  0B7D  08A2               	movf	setLED@command,f
 12542  0B7E  1D03               	skipz
 12543  0B7F  2B98               	goto	l8242
 12544                           
 12545                           ;LED_B1.c: 74: if (led == 1) {
 12546  0B80  0823               	movf	setLED@led,w
 12547  0B81  3A01               	xorlw	1
 12548  0B82  1D03               	skipz
 12549  0B83  2B86               	goto	l8230
 12550                           
 12551                           ;LED_B1.c: 78: RC7 = 1;
 12552  0B84  178E               	bsf	14,7	;volatile
 12553                           
 12554                           ;LED_B1.c: 80: }
 12555  0B85  0008               	return
 12556  0B86                     l8230:	
 12557                           
 12558                           ;LED_B1.c: 83: else if (led == 2) {
 12559  0B86  0823               	movf	setLED@led,w
 12560  0B87  3A02               	xorlw	2
 12561  0B88  1D03               	skipz
 12562  0B89  2B8C               	goto	l8234
 12563                           
 12564                           ;LED_B1.c: 87: RA3 = 1;
 12565  0B8A  158C               	bsf	12,3	;volatile
 12566                           
 12567                           ;LED_B1.c: 89: }
 12568  0B8B  0008               	return
 12569  0B8C                     l8234:	
 12570                           
 12571                           ;LED_B1.c: 92: else if (led == 3) {
 12572  0B8C  0823               	movf	setLED@led,w
 12573  0B8D  3A03               	xorlw	3
 12574  0B8E  1D03               	skipz
 12575  0B8F  2B92               	goto	l8238
 12576                           
 12577                           ;LED_B1.c: 96: RC6 = 1;
 12578  0B90  170E               	bsf	14,6	;volatile
 12579                           
 12580                           ;LED_B1.c: 98: }
 12581  0B91  0008               	return
 12582  0B92                     l8238:	
 12583                           
 12584                           ;LED_B1.c: 101: else if (led == 99) {
 12585  0B92  0823               	movf	setLED@led,w
 12586  0B93  3A63               	xorlw	99
 12587  0B94  1D03               	skipz
 12588  0B95  0008               	return
 12589                           
 12590                           ;LED_B1.c: 105: RB5 = 1;
 12591  0B96  168D               	bsf	13,5	;volatile
 12592                           
 12593                           ;LED_B1.c: 107: }
 12594                           ;LED_B1.c: 109: } else if (command == 1) {
 12595  0B97  0008               	return
 12596  0B98                     l8242:	
 12597  0B98  0822               	movf	setLED@command,w
 12598  0B99  3A01               	xorlw	1
 12599  0B9A  1D03               	skipz
 12600  0B9B  2BB4               	goto	l8260
 12601                           
 12602                           ;LED_B1.c: 111: if (led == 1) {
 12603  0B9C  0823               	movf	setLED@led,w
 12604  0B9D  3A01               	xorlw	1
 12605  0B9E  1D03               	skipz
 12606  0B9F  2BA2               	goto	l8248
 12607                           
 12608                           ;LED_B1.c: 115: RC7 = 0;
 12609  0BA0  138E               	bcf	14,7	;volatile
 12610                           
 12611                           ;LED_B1.c: 117: }
 12612  0BA1  0008               	return
 12613  0BA2                     l8248:	
 12614                           
 12615                           ;LED_B1.c: 120: else if (led == 2) {
 12616  0BA2  0823               	movf	setLED@led,w
 12617  0BA3  3A02               	xorlw	2
 12618  0BA4  1D03               	skipz
 12619  0BA5  2BA8               	goto	l8252
 12620                           
 12621                           ;LED_B1.c: 124: RA3 = 0;
 12622  0BA6  118C               	bcf	12,3	;volatile
 12623                           
 12624                           ;LED_B1.c: 126: }
 12625  0BA7  0008               	return
 12626  0BA8                     l8252:	
 12627                           
 12628                           ;LED_B1.c: 129: else if (led == 3) {
 12629  0BA8  0823               	movf	setLED@led,w
 12630  0BA9  3A03               	xorlw	3
 12631  0BAA  1D03               	skipz
 12632  0BAB  2BAE               	goto	l8256
 12633                           
 12634                           ;LED_B1.c: 133: RC6 = 0;
 12635  0BAC  130E               	bcf	14,6	;volatile
 12636                           
 12637                           ;LED_B1.c: 135: }
 12638  0BAD  0008               	return
 12639  0BAE                     l8256:	
 12640                           
 12641                           ;LED_B1.c: 138: else if (led == 99) {
 12642  0BAE  0823               	movf	setLED@led,w
 12643  0BAF  3A63               	xorlw	99
 12644  0BB0  1D03               	skipz
 12645  0BB1  0008               	return
 12646                           
 12647                           ;LED_B1.c: 142: RB5 = 0;
 12648  0BB2  128D               	bcf	13,5	;volatile
 12649                           
 12650                           ;LED_B1.c: 144: }
 12651                           ;LED_B1.c: 146: } else if (command == 10) {
 12652  0BB3  0008               	return
 12653  0BB4                     l8260:	
 12654  0BB4  0822               	movf	setLED@command,w
 12655  0BB5  3A0A               	xorlw	10
 12656  0BB6  1D03               	skipz
 12657  0BB7  2BDE               	goto	l8280
 12658                           
 12659                           ;LED_B1.c: 147: LED->GO = 0;
 12660  0BB8  0021               	movlb	1	; select bank1
 12661  0BB9  084F               	movf	_LED^(0+128),w
 12662  0BBA  0086               	movwf	6
 12663  0BBB  3001               	movlw	1	; select bank2/3
 12664  0BBC  0087               	movwf	7
 12665  0BBD  1081               	bcf	1,1
 12666                           
 12667                           ;LED_B1.c: 148: LED->Time = 0;
 12668  0BBE  0A4F               	incf	_LED^(0+128),w
 12669  0BBF  0086               	movwf	6
 12670  0BC0  3001               	movlw	1	; select bank2/3
 12671  0BC1  0087               	movwf	7
 12672  0BC2  3000               	movlw	0
 12673  0BC3  3FC0               	movwi [0]fsr1
 12674  0BC4  3FC1               	movwi [1]fsr1
 12675                           
 12676                           ;LED_B1.c: 150: if (led == 1) {
 12677  0BC5  0020               	movlb	0	; select bank0
 12678  0BC6  0823               	movf	setLED@led,w
 12679  0BC7  3A01               	xorlw	1
 12680  0BC8  1D03               	skipz
 12681  0BC9  2BCC               	goto	l8268
 12682                           
 12683                           ;LED_B1.c: 154: RC7 = 1;
 12684  0BCA  178E               	bsf	14,7	;volatile
 12685                           
 12686                           ;LED_B1.c: 156: }
 12687  0BCB  0008               	return
 12688  0BCC                     l8268:	
 12689                           
 12690                           ;LED_B1.c: 159: else if (led == 2) {
 12691  0BCC  0823               	movf	setLED@led,w
 12692  0BCD  3A02               	xorlw	2
 12693  0BCE  1D03               	skipz
 12694  0BCF  2BD2               	goto	l8272
 12695                           
 12696                           ;LED_B1.c: 163: RA3 = 1;
 12697  0BD0  158C               	bsf	12,3	;volatile
 12698                           
 12699                           ;LED_B1.c: 165: }
 12700  0BD1  0008               	return
 12701  0BD2                     l8272:	
 12702                           
 12703                           ;LED_B1.c: 168: else if (led == 3) {
 12704  0BD2  0823               	movf	setLED@led,w
 12705  0BD3  3A03               	xorlw	3
 12706  0BD4  1D03               	skipz
 12707  0BD5  2BD8               	goto	l8276
 12708                           
 12709                           ;LED_B1.c: 172: RC6 = 1;
 12710  0BD6  170E               	bsf	14,6	;volatile
 12711                           
 12712                           ;LED_B1.c: 174: }
 12713  0BD7  0008               	return
 12714  0BD8                     l8276:	
 12715                           
 12716                           ;LED_B1.c: 177: else if (led == 99) {
 12717  0BD8  0823               	movf	setLED@led,w
 12718  0BD9  3A63               	xorlw	99
 12719  0BDA  1D03               	skipz
 12720  0BDB  0008               	return
 12721                           
 12722                           ;LED_B1.c: 181: RB5 = 1;
 12723  0BDC  168D               	bsf	13,5	;volatile
 12724                           
 12725                           ;LED_B1.c: 183: }
 12726                           ;LED_B1.c: 185: } else if (command == 11) {
 12727  0BDD  0008               	return
 12728  0BDE                     l8280:	
 12729  0BDE  0822               	movf	setLED@command,w
 12730  0BDF  3A0B               	xorlw	11
 12731  0BE0  1D03               	skipz
 12732  0BE1  0008               	return
 12733                           
 12734                           ;LED_B1.c: 186: LED->GO = 1;
 12735  0BE2  0021               	movlb	1	; select bank1
 12736  0BE3  084F               	movf	_LED^(0+128),w
 12737  0BE4  0086               	movwf	6
 12738  0BE5  3001               	movlw	1	; select bank2/3
 12739  0BE6  0087               	movwf	7
 12740  0BE7  1481               	bsf	1,1
 12741  0BE8  0008               	return
 12742  0BE9                     __end_of_setLED:	
 12743                           
 12744                           	psect	text76
 12745  12FC                     __ptext76:	
 12746 ;; *************** function _LedPointSelect *****************
 12747 ;; Defined at:
 12748 ;;		line 7 in file "../src/LED_B1.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  led             1    wreg     unsigned char 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  led             1    1[BANK0 ] unsigned char 
 12753 ;; Return value:  Size  Location     Type
 12754 ;;		None               void
 12755 ;; Registers used:
 12756 ;;		wreg
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;Total ram usage:        2 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    5
 12769 ;; This function calls:
 12770 ;;		Nothing
 12771 ;; This function is called by:
 12772 ;;		_setLED_Initialization
 12773 ;;		_setLED
 12774 ;;		_setLED_Main
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778                           
 12779                           ;psect for function _LedPointSelect
 12780  12FC                     _LedPointSelect:	
 12781                           
 12782                           ;incstack = 0
 12783                           ; Regs used in _LedPointSelect: [wreg]
 12784                           ;LedPointSelect@led stored from wreg
 12785  12FC  0020               	movlb	0	; select bank0
 12786  12FD  00A1               	movwf	LedPointSelect@led
 12787                           
 12788                           ;LED_B1.c: 9: if (led == 1) {
 12789  12FE  0821               	movf	LedPointSelect@led,w
 12790  12FF  3A01               	xorlw	1
 12791  1300  1D03               	skipz
 12792  1301  2B08               	goto	l8210
 12793                           
 12794                           ;LED_B1.c: 10: LED = &VarLED1;
 12795  1302  305F               	movlw	_VarLED1& (0+255)
 12796  1303  00A0               	movwf	??_LedPointSelect
 12797  1304  0820               	movf	??_LedPointSelect,w
 12798  1305  0021               	movlb	1	; select bank1
 12799  1306  00CF               	movwf	_LED^(0+128)
 12800                           
 12801                           ;LED_B1.c: 11: }
 12802  1307  0008               	return
 12803  1308                     l8210:	
 12804                           
 12805                           ;LED_B1.c: 14: else if (led == 2) {
 12806  1308  0020               	movlb	0	; select bank0
 12807  1309  0821               	movf	LedPointSelect@led,w
 12808  130A  3A02               	xorlw	2
 12809  130B  1D03               	skipz
 12810  130C  2B13               	goto	l8214
 12811                           
 12812                           ;LED_B1.c: 15: LED = &VarLED2;
 12813  130D  3063               	movlw	_VarLED2& (0+255)
 12814  130E  00A0               	movwf	??_LedPointSelect
 12815  130F  0820               	movf	??_LedPointSelect,w
 12816  1310  0021               	movlb	1	; select bank1
 12817  1311  00CF               	movwf	_LED^(0+128)
 12818                           
 12819                           ;LED_B1.c: 16: }
 12820  1312  0008               	return
 12821  1313                     l8214:	
 12822                           
 12823                           ;LED_B1.c: 19: else if (led == 3) {
 12824  1313  0020               	movlb	0	; select bank0
 12825  1314  0821               	movf	LedPointSelect@led,w
 12826  1315  3A03               	xorlw	3
 12827  1316  1D03               	skipz
 12828  1317  2B1E               	goto	l8218
 12829                           
 12830                           ;LED_B1.c: 20: LED = &VarLED3;
 12831  1318  3067               	movlw	_VarLED3& (0+255)
 12832  1319  00A0               	movwf	??_LedPointSelect
 12833  131A  0820               	movf	??_LedPointSelect,w
 12834  131B  0021               	movlb	1	; select bank1
 12835  131C  00CF               	movwf	_LED^(0+128)
 12836                           
 12837                           ;LED_B1.c: 21: }
 12838  131D  0008               	return
 12839  131E                     l8218:	
 12840                           
 12841                           ;LED_B1.c: 24: else if (led == 99) {
 12842  131E  0020               	movlb	0	; select bank0
 12843  131F  0821               	movf	LedPointSelect@led,w
 12844  1320  3A63               	xorlw	99
 12845  1321  1D03               	skipz
 12846  1322  0008               	return
 12847                           
 12848                           ;LED_B1.c: 25: LED = &VarErrLED;
 12849  1323  305B               	movlw	_VarErrLED& (0+255)
 12850  1324  00A0               	movwf	??_LedPointSelect
 12851  1325  0820               	movf	??_LedPointSelect,w
 12852  1326  0021               	movlb	1	; select bank1
 12853  1327  00CF               	movwf	_LED^(0+128)
 12854  1328  0008               	return
 12855  1329                     __end_of_LedPointSelect:	
 12856                           
 12857                           	psect	text77
 12858  1E52                     __ptext77:	
 12859 ;; *************** function _DimmerLights_Close *****************
 12860 ;; Defined at:
 12861 ;;		line 396 in file "../src/Dimmer_B1.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;		None
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;		None
 12866 ;; Return value:  Size  Location     Type
 12867 ;;		None               void
 12868 ;; Registers used:
 12869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;Total ram usage:        0 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    6
 12882 ;; This function calls:
 12883 ;;		_getDimmerLights_StatusFlag
 12884 ;;		_setMemory_GO
 12885 ;; This function is called by:
 12886 ;;		_DimmerLights_Main
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           
 12891                           ;psect for function _DimmerLights_Close
 12892  1E52                     _DimmerLights_Close:	
 12893                           
 12894                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12898  1E52  0021               	movlb	1	; select bank1
 12899  1E53  084A               	movf	_Dimmer^(0+128),w
 12900  1E54  0086               	movwf	6
 12901  1E55  0187               	clrf	7
 12902  1E56  1C01               	btfss	1,0
 12903  1E57  0008               	return
 12904                           
 12905                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12906  1E58  084A               	movf	_Dimmer^(0+128),w
 12907  1E59  0086               	movwf	6
 12908  1E5A  0187               	clrf	7
 12909  1E5B  1001               	bcf	1,0
 12910                           
 12911                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12912  1E5C  319E  263E  319E   	fcall	_getDimmerLights_StatusFlag
 12913  1E5F  3800               	iorlw	0
 12914  1E60  1D03               	skipz
 12915  1E61  0008               	return
 12916                           
 12917                           ;Dimmer_B1.c: 400: ;;
 12918                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12919  1E62  3001               	movlw	1
 12920  1E63  319E  2690         	fcall	_setMemory_GO
 12921  1E65  0008               	return
 12922  1E66                     __end_of_DimmerLights_Close:	
 12923                           
 12924                           	psect	text78
 12925  1E90                     __ptext78:	
 12926 ;; *************** function _setMemory_GO *****************
 12927 ;; Defined at:
 12928 ;;		line 889 in file "../src/MCU_B1.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;  command         1    wreg     unsigned char 
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;  command         1    2[BANK0 ] unsigned char 
 12933 ;; Return value:  Size  Location     Type
 12934 ;;		None               void
 12935 ;; Registers used:
 12936 ;;		wreg, status,2, status,0
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12946 ;;Total ram usage:        3 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    5
 12949 ;; This function calls:
 12950 ;;		Nothing
 12951 ;; This function is called by:
 12952 ;;		_DimmerLights_Close
 12953 ;;		_setDimmerLights
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           
 12958                           ;psect for function _setMemory_GO
 12959  1E90                     _setMemory_GO:	
 12960                           
 12961                           ;incstack = 0
 12962                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 12963                           ;setMemory_GO@command stored from wreg
 12964  1E90  0020               	movlb	0	; select bank0
 12965  1E91  00A2               	movwf	setMemory_GO@command
 12966                           
 12967                           ;MCU_B1.c: 890: Memory.GO = command;
 12968  1E92  0822               	movf	setMemory_GO@command,w
 12969  1E93  0023               	movlb	3	; select bank3
 12970  1E94  10C4               	bcf	(_Memory^(0+384)+36),1
 12971  1E95  1D03               	skipz
 12972  1E96  14C4               	bsf	(_Memory^(0+384)+36),1
 12973                           
 12974                           ;MCU_B1.c: 891: if (command == 0) {
 12975  1E97  0020               	movlb	0	; select bank0
 12976  1E98  08A2               	movf	setMemory_GO@command,f
 12977  1E99  1D03               	skipz
 12978  1E9A  0008               	return
 12979                           
 12980                           ;MCU_B1.c: 892: Memory.Time = command;
 12981  1E9B  0822               	movf	setMemory_GO@command,w
 12982  1E9C  00A0               	movwf	??_setMemory_GO
 12983  1E9D  01A1               	clrf	??_setMemory_GO+1
 12984  1E9E  0820               	movf	??_setMemory_GO,w
 12985  1E9F  0023               	movlb	3	; select bank3
 12986  1EA0  00C2               	movwf	(_Memory^(0+384)+34)
 12987  1EA1  0020               	movlb	0	; select bank0
 12988  1EA2  0821               	movf	??_setMemory_GO+1,w
 12989  1EA3  0023               	movlb	3	; select bank3
 12990  1EA4  00C3               	movwf	((_Memory+1)^(0+384)+34)
 12991  1EA5  0008               	return
 12992  1EA6                     __end_of_setMemory_GO:	
 12993                           
 12994                           	psect	text79
 12995  1E3E                     __ptext79:	
 12996 ;; *************** function _getDimmerLights_StatusFlag *****************
 12997 ;; Defined at:
 12998 ;;		line 475 in file "../src/Dimmer_B1.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;		None
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  Status          1    1[BANK0 ] unsigned char 
 13003 ;; Return value:  Size  Location     Type
 13004 ;;                  1    wreg      unsigned char 
 13005 ;; Registers used:
 13006 ;;		wreg, status,2
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;Total ram usage:        3 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; Hardware stack levels required when called:    5
 13019 ;; This function calls:
 13020 ;;		Nothing
 13021 ;; This function is called by:
 13022 ;;		_DimmerLights_Close
 13023 ;;		_DimmerLights_Exceptions
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           
 13028                           ;psect for function _getDimmerLights_StatusFlag
 13029  1E3E                     _getDimmerLights_StatusFlag:	
 13030                           
 13031                           ;Dimmer_B1.c: 476: char Status = 0;
 13032                           
 13033                           ;incstack = 0
 13034                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13035  1E3E  0020               	movlb	0	; select bank0
 13036  1E3F  01A1               	clrf	getDimmerLights_StatusFlag@Status
 13037                           
 13038                           ;Dimmer_B1.c: 479: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 13039  1E40  01A2               	clrf	_getDimmerLights_StatusFlag$2156
 13040  1E41  0AA2               	incf	_getDimmerLights_StatusFlag$2156,f
 13041  1E42  0022               	movlb	2	; select bank2
 13042  1E43  1B3D               	btfsc	_DimmerLights1^(0+256),6
 13043  1E44  2E4B               	goto	l6476
 13044  1E45  0023               	movlb	3	; select bank3
 13045  1E46  1F45               	btfss	_DimmerLights2^(0+384),6
 13046  1E47  1B54               	btfsc	_DimmerLights3^(0+384),6
 13047  1E48  2E4B               	goto	l6476
 13048  1E49  0020               	movlb	0	; select bank0
 13049  1E4A  01A2               	clrf	_getDimmerLights_StatusFlag$2156
 13050  1E4B                     l6476:	
 13051  1E4B  0020               	movlb	0	; select bank0
 13052  1E4C  0822               	movf	_getDimmerLights_StatusFlag$2156,w
 13053  1E4D  00A0               	movwf	??_getDimmerLights_StatusFlag
 13054  1E4E  0820               	movf	??_getDimmerLights_StatusFlag,w
 13055  1E4F  00A1               	movwf	getDimmerLights_StatusFlag@Status
 13056                           
 13057                           ;Dimmer_B1.c: 490: return Status;
 13058  1E50  0821               	movf	getDimmerLights_StatusFlag@Status,w
 13059  1E51  0008               	return
 13060  1E52                     __end_of_getDimmerLights_StatusFlag:	
 13061                           
 13062                           	psect	text80
 13063  1128                     __ptext80:	
 13064 ;; *************** function _DimmerLights_Initialization *****************
 13065 ;; Defined at:
 13066 ;;		line 334 in file "../src/Dimmer_B1.c"
 13067 ;; Parameters:    Size  Location     Type
 13068 ;;		None
 13069 ;; Auto vars:     Size  Location     Type
 13070 ;;		None
 13071 ;; Return value:  Size  Location     Type
 13072 ;;		None               void
 13073 ;; Registers used:
 13074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;Total ram usage:        1 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    7
 13087 ;; This function calls:
 13088 ;;		_Dimmer_Initialization
 13089 ;;		_setDimmerLights_Initialization
 13090 ;; This function is called by:
 13091 ;;		_main
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           
 13096                           ;psect for function _DimmerLights_Initialization
 13097  1128                     _DimmerLights_Initialization:	
 13098                           
 13099                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 13100                           
 13101                           ;incstack = 0
 13102                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13103  1128  303D               	movlw	_DimmerLights1& (0+255)
 13104  1129  0020               	movlb	0	; select bank0
 13105  112A  00A4               	movwf	??_DimmerLights_Initialization
 13106  112B  0824               	movf	??_DimmerLights_Initialization,w
 13107  112C  0021               	movlb	1	; select bank1
 13108  112D  00CB               	movwf	_DimmerLights11^(0+128)
 13109                           
 13110                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 13111  112E  3001               	movlw	1
 13112  112F  3192  22CF  3191   	fcall	_setDimmerLights_Initialization
 13113                           
 13114                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 13115  1132  30C5               	movlw	_DimmerLights2& (0+255)
 13116  1133  0020               	movlb	0	; select bank0
 13117  1134  00A4               	movwf	??_DimmerLights_Initialization
 13118  1135  0824               	movf	??_DimmerLights_Initialization,w
 13119  1136  0021               	movlb	1	; select bank1
 13120  1137  00CC               	movwf	_DimmerLights22^(0+128)
 13121                           
 13122                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 13123  1138  3002               	movlw	2
 13124  1139  3192  22CF  3191   	fcall	_setDimmerLights_Initialization
 13125                           
 13126                           ;Dimmer_B1.c: 347: DimmerLights33 = &DimmerLights3;
 13127  113C  30D4               	movlw	_DimmerLights3& (0+255)
 13128  113D  0020               	movlb	0	; select bank0
 13129  113E  00A4               	movwf	??_DimmerLights_Initialization
 13130  113F  0824               	movf	??_DimmerLights_Initialization,w
 13131  1140  0021               	movlb	1	; select bank1
 13132  1141  00CD               	movwf	_DimmerLights33^(0+128)
 13133                           
 13134                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(3);
 13135  1142  3003               	movlw	3
 13136  1143  3192  22CF  3191   	fcall	_setDimmerLights_Initialization
 13137                           
 13138                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 13139  1146  319C  2477         	fcall	_Dimmer_Initialization
 13140  1148  0008               	return
 13141  1149                     __end_of_DimmerLights_Initialization:	
 13142                           
 13143                           	psect	text81
 13144  12CF                     __ptext81:	
 13145 ;; *************** function _setDimmerLights_Initialization *****************
 13146 ;; Defined at:
 13147 ;;		line 357 in file "../src/Dimmer_B1.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;  lights          1    wreg     unsigned char 
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;  lights          1    3[BANK0 ] unsigned char 
 13152 ;; Return value:  Size  Location     Type
 13153 ;;		None               void
 13154 ;; Registers used:
 13155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;Total ram usage:        2 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    6
 13168 ;; This function calls:
 13169 ;;		_DimmerLightsPointSelect
 13170 ;; This function is called by:
 13171 ;;		_DimmerLights_Initialization
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           
 13176                           ;psect for function _setDimmerLights_Initialization
 13177  12CF                     _setDimmerLights_Initialization:	
 13178                           
 13179                           ;incstack = 0
 13180                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13181                           ;setDimmerLights_Initialization@lights stored from wreg
 13182  12CF  0020               	movlb	0	; select bank0
 13183  12D0  00A3               	movwf	setDimmerLights_Initialization@lights
 13184                           
 13185                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 13186  12D1  0823               	movf	setDimmerLights_Initialization@lights,w
 13187  12D2  319F  2755         	fcall	_DimmerLightsPointSelect
 13188                           
 13189                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 13190  12D4  087B               	movf	_DimmerLights,w
 13191  12D5  3E09               	addlw	9
 13192  12D6  0086               	movwf	6
 13193  12D7  3001               	movlw	1	; select bank2/3
 13194  12D8  0087               	movwf	7
 13195  12D9  1501               	bsf	1,2
 13196                           
 13197                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-95)*0.8));
 13198  12DA  3004               	movlw	4
 13199  12DB  0020               	movlb	0	; select bank0
 13200  12DC  00A2               	movwf	??_setDimmerLights_Initialization
 13201  12DD  087B               	movf	_DimmerLights,w
 13202  12DE  3E05               	addlw	5
 13203  12DF  0086               	movwf	6
 13204  12E0  3001               	movlw	1	; select bank2/3
 13205  12E1  0087               	movwf	7
 13206  12E2  0822               	movf	??_setDimmerLights_Initialization,w
 13207  12E3  0081               	movwf	1
 13208                           
 13209                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13210  12E4  303C               	movlw	60
 13211  12E5  00A2               	movwf	??_setDimmerLights_Initialization
 13212  12E6  087B               	movf	_DimmerLights,w
 13213  12E7  3E06               	addlw	6
 13214  12E8  0086               	movwf	6
 13215  12E9  3001               	movlw	1	; select bank2/3
 13216  12EA  0087               	movwf	7
 13217  12EB  0822               	movf	??_setDimmerLights_Initialization,w
 13218  12EC  0081               	movwf	1
 13219                           
 13220                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13221  12ED  087B               	movf	_DimmerLights,w
 13222  12EE  3E06               	addlw	6
 13223  12EF  0086               	movwf	6
 13224  12F0  3001               	movlw	1	; select bank2/3
 13225  12F1  0087               	movwf	7
 13226  12F2  0801               	movf	1,w
 13227  12F3  00A2               	movwf	??_setDimmerLights_Initialization
 13228  12F4  087B               	movf	_DimmerLights,w
 13229  12F5  3E04               	addlw	4
 13230  12F6  0086               	movwf	6
 13231  12F7  3001               	movlw	1	; select bank2/3
 13232  12F8  0087               	movwf	7
 13233  12F9  0822               	movf	??_setDimmerLights_Initialization,w
 13234  12FA  0081               	movwf	1
 13235  12FB  0008               	return
 13236  12FC                     __end_of_setDimmerLights_Initialization:	
 13237                           
 13238                           	psect	text82
 13239  1C77                     __ptext82:	
 13240 ;; *************** function _Dimmer_Initialization *****************
 13241 ;; Defined at:
 13242 ;;		line 786 in file "../src/Dimmer_B1.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;		None
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;		None
 13247 ;; Return value:  Size  Location     Type
 13248 ;;		None               void
 13249 ;; Registers used:
 13250 ;;		wreg
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : 0/0
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;Total ram usage:        1 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    5
 13263 ;; This function calls:
 13264 ;;		Nothing
 13265 ;; This function is called by:
 13266 ;;		_DimmerLights_Initialization
 13267 ;; This function uses a non-reentrant model
 13268 ;;
 13269                           
 13270                           
 13271                           ;psect for function _Dimmer_Initialization
 13272  1C77                     _Dimmer_Initialization:	
 13273                           
 13274                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13275                           
 13276                           ;incstack = 0
 13277                           ; Regs used in _Dimmer_Initialization: [wreg]
 13278  1C77  30E6               	movlw	_Dimmer1& (0+255)
 13279  1C78  0020               	movlb	0	; select bank0
 13280  1C79  00A0               	movwf	??_Dimmer_Initialization
 13281  1C7A  0820               	movf	??_Dimmer_Initialization,w
 13282  1C7B  0021               	movlb	1	; select bank1
 13283  1C7C  00CA               	movwf	_Dimmer^(0+128)
 13284  1C7D  0008               	return
 13285  1C7E                     __end_of_Dimmer_Initialization:	
 13286                           
 13287                           	psect	text83
 13288  1CE3                     __ptext83:	
 13289 ;; *************** function _DelayOff_Main *****************
 13290 ;; Defined at:
 13291 ;;		line 41 in file "../src/DelayOff_B1.c"
 13292 ;; Parameters:    Size  Location     Type
 13293 ;;		None
 13294 ;; Auto vars:     Size  Location     Type
 13295 ;;		None
 13296 ;; Return value:  Size  Location     Type
 13297 ;;		None               void
 13298 ;; Registers used:
 13299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13300 ;; Tracked objects:
 13301 ;;		On entry : 0/0
 13302 ;;		On exit  : 0/0
 13303 ;;		Unchanged: 0/0
 13304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13309 ;;Total ram usage:        0 bytes
 13310 ;; Hardware stack levels used:    1
 13311 ;; Hardware stack levels required when called:   10
 13312 ;; This function calls:
 13313 ;;		_DlyOff_Main
 13314 ;; This function is called by:
 13315 ;;		_main
 13316 ;; This function uses a non-reentrant model
 13317 ;;
 13318                           
 13319                           
 13320                           ;psect for function _DelayOff_Main
 13321  1CE3                     _DelayOff_Main:	
 13322                           
 13323                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13324                           
 13325                           ;incstack = 0
 13326                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13327  1CE3  3001               	movlw	1
 13328  1CE4  318C  24D7  319C   	fcall	_DlyOff_Main
 13329                           
 13330                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13331  1CE7  3002               	movlw	2
 13332  1CE8  318C  24D7  319C   	fcall	_DlyOff_Main
 13333                           
 13334                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 13335  1CEB  3003               	movlw	3
 13336  1CEC  318C  24D7         	fcall	_DlyOff_Main
 13337  1CEE  0008               	return
 13338  1CEF                     __end_of_DelayOff_Main:	
 13339                           
 13340                           	psect	text84
 13341  0CD7                     __ptext84:	
 13342 ;; *************** function _DlyOff_Main *****************
 13343 ;; Defined at:
 13344 ;;		line 62 in file "../src/DelayOff_B1.c"
 13345 ;; Parameters:    Size  Location     Type
 13346 ;;  sw              1    wreg     unsigned char 
 13347 ;; Auto vars:     Size  Location     Type
 13348 ;;  sw              1   68[BANK0 ] unsigned char 
 13349 ;; Return value:  Size  Location     Type
 13350 ;;		None               void
 13351 ;; Registers used:
 13352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13353 ;; Tracked objects:
 13354 ;;		On entry : 0/0
 13355 ;;		On exit  : 0/0
 13356 ;;		Unchanged: 0/0
 13357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;Total ram usage:        3 bytes
 13363 ;; Hardware stack levels used:    1
 13364 ;; Hardware stack levels required when called:    9
 13365 ;; This function calls:
 13366 ;;		_DelayOffPointSelect
 13367 ;;		_setBuz
 13368 ;;		_setDimmerLights_Switch
 13369 ;;		_setDimmerLights_Trigger
 13370 ;;		_setRFSW_Status
 13371 ;;		_setRF_DimmerLights
 13372 ;;		_setSw_Status
 13373 ;;		_setTxData
 13374 ;; This function is called by:
 13375 ;;		_DelayOff_Main
 13376 ;; This function uses a non-reentrant model
 13377 ;;
 13378                           
 13379                           
 13380                           ;psect for function _DlyOff_Main
 13381  0CD7                     _DlyOff_Main:	
 13382                           
 13383                           ;incstack = 0
 13384                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13385                           ;DlyOff_Main@sw stored from wreg
 13386  0CD7  0020               	movlb	0	; select bank0
 13387  0CD8  00E4               	movwf	DlyOff_Main@sw
 13388                           
 13389                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13390  0CD9  0864               	movf	DlyOff_Main@sw,w
 13391  0CDA  319F  27A9  318C   	fcall	_DelayOffPointSelect
 13392                           
 13393                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13394  0CDD  087A               	movf	_DelayOff,w
 13395  0CDE  0086               	movwf	6
 13396  0CDF  3001               	movlw	1	; select bank2/3
 13397  0CE0  0087               	movwf	7
 13398  0CE1  1C81               	btfss	1,1
 13399  0CE2  0008               	return
 13400                           
 13401                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13402  0CE3  087A               	movf	_DelayOff,w
 13403  0CE4  3E02               	addlw	2
 13404  0CE5  0086               	movwf	6
 13405  0CE6  3001               	movlw	1	; select bank2/3
 13406  0CE7  0087               	movwf	7
 13407  0CE8  3001               	movlw	1
 13408  0CE9  0781               	addwf	1,f
 13409  0CEA  3141               	addfsr 1,1
 13410  0CEB  1803               	skipnc
 13411  0CEC  0A81               	incf	1,f
 13412                           
 13413                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13414  0CED  087A               	movf	_DelayOff,w
 13415  0CEE  3E02               	addlw	2
 13416  0CEF  0086               	movwf	6
 13417  0CF0  3001               	movlw	1	; select bank2/3
 13418  0CF1  0087               	movwf	7
 13419  0CF2  3F40               	moviw [0]fsr1
 13420  0CF3  0020               	movlb	0	; select bank0
 13421  0CF4  00E2               	movwf	??_DlyOff_Main
 13422  0CF5  3F41               	moviw [1]fsr1
 13423  0CF6  00E3               	movwf	??_DlyOff_Main+1
 13424  0CF7  3016               	movlw	22
 13425  0CF8  0263               	subwf	??_DlyOff_Main+1,w
 13426  0CF9  3012               	movlw	18
 13427  0CFA  1903               	skipnz
 13428  0CFB  0262               	subwf	??_DlyOff_Main,w
 13429  0CFC  1C03               	skipc
 13430  0CFD  0008               	return
 13431                           
 13432                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13433  0CFE  087A               	movf	_DelayOff,w
 13434  0CFF  3E02               	addlw	2
 13435  0D00  0086               	movwf	6
 13436  0D01  3001               	movlw	1	; select bank2/3
 13437  0D02  0087               	movwf	7
 13438  0D03  3000               	movlw	0
 13439  0D04  3FC0               	movwi [0]fsr1
 13440  0D05  3FC1               	movwi [1]fsr1
 13441                           
 13442                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13443  0D06  3001               	movlw	1
 13444  0D07  00E2               	movwf	??_DlyOff_Main
 13445  0D08  087A               	movf	_DelayOff,w
 13446  0D09  3E04               	addlw	4
 13447  0D0A  0086               	movwf	6
 13448  0D0B  3001               	movlw	1	; select bank2/3
 13449  0D0C  0087               	movwf	7
 13450  0D0D  0862               	movf	??_DlyOff_Main,w
 13451  0D0E  0781               	addwf	1,f
 13452                           
 13453                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13454  0D0F  087A               	movf	_DelayOff,w
 13455  0D10  3E04               	addlw	4
 13456  0D11  0086               	movwf	6
 13457  0D12  3001               	movlw	1	; select bank2/3
 13458  0D13  0087               	movwf	7
 13459  0D14  0A7A               	incf	_DelayOff,w
 13460  0D15  0084               	movwf	4
 13461  0D16  3001               	movlw	1	; select bank2/3
 13462  0D17  0085               	movwf	5
 13463  0D18  0800               	movf	0,w
 13464  0D19  0201               	subwf	1,w
 13465  0D1A  1C03               	skipc
 13466  0D1B  0008               	return
 13467                           
 13468                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13469  0D1C  087A               	movf	_DelayOff,w
 13470  0D1D  3E04               	addlw	4
 13471  0D1E  0086               	movwf	6
 13472  0D1F  3001               	movlw	1	; select bank2/3
 13473  0D20  0087               	movwf	7
 13474  0D21  0181               	clrf	1
 13475                           
 13476                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13477  0D22  087A               	movf	_DelayOff,w
 13478  0D23  0086               	movwf	6
 13479  0D24  3001               	movlw	1	; select bank2/3
 13480  0D25  0087               	movwf	7
 13481  0D26  1081               	bcf	1,1
 13482                           
 13483                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13484  0D27  01A1               	clrf	setSw_Status@command
 13485  0D28  0864               	movf	DlyOff_Main@sw,w
 13486  0D29  319D  254D  318C   	fcall	_setSw_Status
 13487                           
 13488                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13489  0D2C  0020               	movlb	0	; select bank0
 13490  0D2D  01A2               	clrf	setRFSW_Status@command
 13491  0D2E  0864               	movf	DlyOff_Main@sw,w
 13492  0D2F  319D  253E  318C   	fcall	_setRFSW_Status
 13493                           
 13494                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13495  0D32  0020               	movlb	0	; select bank0
 13496  0D33  01DD               	clrf	setRF_DimmerLights@on
 13497  0D34  0864               	movf	DlyOff_Main@sw,w
 13498  0D35  318A  2228  318C   	fcall	_setRF_DimmerLights
 13499                           
 13500                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13501  0D38  0020               	movlb	0	; select bank0
 13502  0D39  01A2               	clrf	setDimmerLights_Trigger@command
 13503  0D3A  0AA2               	incf	setDimmerLights_Trigger@command,f
 13504  0D3B  0864               	movf	DlyOff_Main@sw,w
 13505  0D3C  319D  25A8  318C   	fcall	_setDimmerLights_Trigger
 13506                           
 13507                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13508  0D3F  0020               	movlb	0	; select bank0
 13509  0D40  01A2               	clrf	setDimmerLights_Switch@command
 13510  0D41  0864               	movf	DlyOff_Main@sw,w
 13511  0D42  319D  2598  318C   	fcall	_setDimmerLights_Switch
 13512                           
 13513                           ;DelayOff_B1.c: 78: setTxData();
 13514  0D45  3185  2531  318C   	fcall	_setTxData
 13515                           
 13516                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13517  0D48  3064               	movlw	100
 13518  0D49  0020               	movlb	0	; select bank0
 13519  0D4A  00A9               	movwf	setBuz@time
 13520  0D4B  3000               	movlw	0
 13521  0D4C  00AA               	movwf	setBuz@time+1
 13522  0D4D  3001               	movlw	1
 13523  0D4E  3197  27A7         	fcall	_setBuz
 13524  0D50  0008               	return
 13525  0D51                     __end_of_DlyOff_Main:	
 13526                           
 13527                           	psect	text85
 13528  0531                     __ptext85:	
 13529 ;; *************** function _setTxData *****************
 13530 ;; Defined at:
 13531 ;;		line 153 in file "../src/RF_Control_B1.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;		None
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;  i               1    0        unsigned char 
 13536 ;; Return value:  Size  Location     Type
 13537 ;;		None               void
 13538 ;; Registers used:
 13539 ;;		wreg, fsr1l, fsr1h
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;Total ram usage:        1 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    5
 13552 ;; This function calls:
 13553 ;;		Nothing
 13554 ;; This function is called by:
 13555 ;;		_DlyOff_Main
 13556 ;;		_setDimmerLights_Adj
 13557 ;;		_setControl_Lights_Table
 13558 ;;		_setRFSW_Control
 13559 ;;		_setRFSW_AdjControl
 13560 ;;		_Sw_DimmerOnFunc
 13561 ;;		_Sw_DimmerOffFunc
 13562 ;; This function uses a non-reentrant model
 13563 ;;
 13564                           
 13565                           
 13566                           ;psect for function _setTxData
 13567  0531                     _setTxData:	
 13568                           
 13569                           ;RF_Control_B1.c: 154: char i;
 13570                           ;RF_Control_B1.c: 155: if (RF1.Enable == 1) {
 13571                           
 13572                           ;incstack = 0
 13573                           ; Regs used in _setTxData: [wregfsr1]
 13574  0531  0021               	movlb	1	; select bank1
 13575  0532  1C42               	btfss	_RF1^(0+128),0
 13576  0533  0008               	return
 13577                           
 13578                           ;RF_Control_B1.c: 157: RF1.TransceiveGO = 1;
 13579  0534  1542               	bsf	_RF1^(0+128),2
 13580                           
 13581                           ;RF_Control_B1.c: 167: RF_Data[0] = 0x63;
 13582  0535  3063               	movlw	99
 13583  0536  0020               	movlb	0	; select bank0
 13584  0537  00A0               	movwf	??_setTxData
 13585  0538  0820               	movf	??_setTxData,w
 13586  0539  0022               	movlb	2	; select bank2
 13587  053A  00A0               	movwf	_RF_Data^(0+256)
 13588                           
 13589                           ;RF_Control_B1.c: 168: RF_Data[1] = 0x02;
 13590  053B  3002               	movlw	2
 13591  053C  0020               	movlb	0	; select bank0
 13592  053D  00A0               	movwf	??_setTxData
 13593  053E  0820               	movf	??_setTxData,w
 13594  053F  0022               	movlb	2	; select bank2
 13595  0540  00A1               	movwf	(_RF_Data^(0+256)+1)
 13596                           
 13597                           ;RF_Control_B1.c: 169: RF_Data[2] = product->Data[2];
 13598  0541  0020               	movlb	0	; select bank0
 13599  0542  086F               	movf	_product,w
 13600  0543  0086               	movwf	6
 13601  0544  3002               	movlw	2	; select bank4/5
 13602  0545  0087               	movwf	7
 13603  0546  3002               	movlw	2	; select bank4/5
 13604  0547  3F42               	moviw [2]fsr1
 13605  0548  0022               	movlb	2	; select bank2
 13606  0549  00A2               	movwf	(_RF_Data^(0+256)+2)
 13607                           
 13608                           ;RF_Control_B1.c: 170: RF_Data[3] = product->Data[3];
 13609  054A  0020               	movlb	0	; select bank0
 13610  054B  086F               	movf	_product,w
 13611  054C  0086               	movwf	6
 13612  054D  3002               	movlw	2	; select bank4/5
 13613  054E  0087               	movwf	7
 13614  054F  3002               	movlw	2	; select bank4/5
 13615  0550  3F43               	moviw [3]fsr1
 13616  0551  0022               	movlb	2	; select bank2
 13617  0552  00A3               	movwf	(_RF_Data^(0+256)+3)
 13618                           
 13619                           ;RF_Control_B1.c: 171: RF_Data[4] = product->Data[4];
 13620  0553  0020               	movlb	0	; select bank0
 13621  0554  086F               	movf	_product,w
 13622  0555  0086               	movwf	6
 13623  0556  3002               	movlw	2	; select bank4/5
 13624  0557  0087               	movwf	7
 13625  0558  3002               	movlw	2	; select bank4/5
 13626  0559  3F44               	moviw [4]fsr1
 13627  055A  0022               	movlb	2	; select bank2
 13628  055B  00A4               	movwf	(_RF_Data^(0+256)+4)
 13629                           
 13630                           ;RF_Control_B1.c: 172: RF_Data[5] = product->Data[5];
 13631  055C  0020               	movlb	0	; select bank0
 13632  055D  086F               	movf	_product,w
 13633  055E  0086               	movwf	6
 13634  055F  3002               	movlw	2	; select bank4/5
 13635  0560  0087               	movwf	7
 13636  0561  3002               	movlw	2	; select bank4/5
 13637  0562  3F45               	moviw [5]fsr1
 13638  0563  0022               	movlb	2	; select bank2
 13639  0564  00A5               	movwf	(_RF_Data^(0+256)+5)
 13640                           
 13641                           ;RF_Control_B1.c: 173: RF_Data[6] = product->Data[6];
 13642  0565  0020               	movlb	0	; select bank0
 13643  0566  086F               	movf	_product,w
 13644  0567  0086               	movwf	6
 13645  0568  3002               	movlw	2	; select bank4/5
 13646  0569  0087               	movwf	7
 13647  056A  3002               	movlw	2	; select bank4/5
 13648  056B  3F46               	moviw [6]fsr1
 13649  056C  0022               	movlb	2	; select bank2
 13650  056D  00A6               	movwf	(_RF_Data^(0+256)+6)
 13651                           
 13652                           ;RF_Control_B1.c: 174: RF_Data[7] = product->Data[7];
 13653  056E  0020               	movlb	0	; select bank0
 13654  056F  086F               	movf	_product,w
 13655  0570  0086               	movwf	6
 13656  0571  3002               	movlw	2	; select bank4/5
 13657  0572  0087               	movwf	7
 13658  0573  3002               	movlw	2	; select bank4/5
 13659  0574  3F47               	moviw [7]fsr1
 13660  0575  0022               	movlb	2	; select bank2
 13661  0576  00A7               	movwf	(_RF_Data^(0+256)+7)
 13662                           
 13663                           ;RF_Control_B1.c: 175: RF_Data[8] = product->Data[8];
 13664  0577  0020               	movlb	0	; select bank0
 13665  0578  086F               	movf	_product,w
 13666  0579  0086               	movwf	6
 13667  057A  3002               	movlw	2	; select bank4/5
 13668  057B  0087               	movwf	7
 13669  057C  3002               	movlw	2	; select bank4/5
 13670  057D  3F48               	moviw [8]fsr1
 13671  057E  0022               	movlb	2	; select bank2
 13672  057F  00A8               	movwf	(_RF_Data^(0+256)+8)
 13673                           
 13674                           ;RF_Control_B1.c: 176: RF_Data[9] = product->Data[9];
 13675  0580  0020               	movlb	0	; select bank0
 13676  0581  086F               	movf	_product,w
 13677  0582  0086               	movwf	6
 13678  0583  3002               	movlw	2	; select bank4/5
 13679  0584  0087               	movwf	7
 13680  0585  3002               	movlw	2	; select bank4/5
 13681  0586  3F49               	moviw [9]fsr1
 13682  0587  0022               	movlb	2	; select bank2
 13683  0588  00A9               	movwf	(_RF_Data^(0+256)+9)
 13684                           
 13685                           ;RF_Control_B1.c: 177: RF_Data[10] = product->Data[10];
 13686  0589  0020               	movlb	0	; select bank0
 13687  058A  086F               	movf	_product,w
 13688  058B  0086               	movwf	6
 13689  058C  3002               	movlw	2	; select bank4/5
 13690  058D  0087               	movwf	7
 13691  058E  3002               	movlw	2	; select bank4/5
 13692  058F  3F4A               	moviw [10]fsr1
 13693  0590  0022               	movlb	2	; select bank2
 13694  0591  00AA               	movwf	(_RF_Data^(0+256)+10)
 13695                           
 13696                           ;RF_Control_B1.c: 178: RF_Data[11] = product->Data[11];
 13697  0592  0020               	movlb	0	; select bank0
 13698  0593  086F               	movf	_product,w
 13699  0594  0086               	movwf	6
 13700  0595  3002               	movlw	2	; select bank4/5
 13701  0596  0087               	movwf	7
 13702  0597  3002               	movlw	2	; select bank4/5
 13703  0598  3F4B               	moviw [11]fsr1
 13704  0599  0022               	movlb	2	; select bank2
 13705  059A  00AB               	movwf	(_RF_Data^(0+256)+11)
 13706                           
 13707                           ;RF_Control_B1.c: 179: RF_Data[12] = product->Data[12];
 13708  059B  0020               	movlb	0	; select bank0
 13709  059C  086F               	movf	_product,w
 13710  059D  0086               	movwf	6
 13711  059E  3002               	movlw	2	; select bank4/5
 13712  059F  0087               	movwf	7
 13713  05A0  3002               	movlw	2	; select bank4/5
 13714  05A1  3F4C               	moviw [12]fsr1
 13715  05A2  0022               	movlb	2	; select bank2
 13716  05A3  00AC               	movwf	(_RF_Data^(0+256)+12)
 13717                           
 13718                           ;RF_Control_B1.c: 180: RF_Data[13] = product->Data[13];
 13719  05A4  0020               	movlb	0	; select bank0
 13720  05A5  086F               	movf	_product,w
 13721  05A6  0086               	movwf	6
 13722  05A7  3002               	movlw	2	; select bank4/5
 13723  05A8  0087               	movwf	7
 13724  05A9  3002               	movlw	2	; select bank4/5
 13725  05AA  3F4D               	moviw [13]fsr1
 13726  05AB  0022               	movlb	2	; select bank2
 13727  05AC  00AD               	movwf	(_RF_Data^(0+256)+13)
 13728                           
 13729                           ;RF_Control_B1.c: 181: RF_Data[14] = product->Data[14];
 13730  05AD  0020               	movlb	0	; select bank0
 13731  05AE  086F               	movf	_product,w
 13732  05AF  0086               	movwf	6
 13733  05B0  3002               	movlw	2	; select bank4/5
 13734  05B1  0087               	movwf	7
 13735  05B2  3002               	movlw	2	; select bank4/5
 13736  05B3  3F4E               	moviw [14]fsr1
 13737  05B4  0022               	movlb	2	; select bank2
 13738  05B5  00AE               	movwf	(_RF_Data^(0+256)+14)
 13739                           
 13740                           ;RF_Control_B1.c: 182: RF_Data[15] = product->Data[15];
 13741  05B6  0020               	movlb	0	; select bank0
 13742  05B7  086F               	movf	_product,w
 13743  05B8  0086               	movwf	6
 13744  05B9  3002               	movlw	2	; select bank4/5
 13745  05BA  0087               	movwf	7
 13746  05BB  3002               	movlw	2	; select bank4/5
 13747  05BC  3F4F               	moviw [15]fsr1
 13748  05BD  0022               	movlb	2	; select bank2
 13749  05BE  00AF               	movwf	(_RF_Data^(0+256)+15)
 13750                           
 13751                           ;RF_Control_B1.c: 183: RF_Data[16] = product->Data[16];
 13752  05BF  0020               	movlb	0	; select bank0
 13753  05C0  086F               	movf	_product,w
 13754  05C1  0086               	movwf	6
 13755  05C2  3002               	movlw	2	; select bank4/5
 13756  05C3  0087               	movwf	7
 13757  05C4  3002               	movlw	2	; select bank4/5
 13758  05C5  3F50               	moviw [16]fsr1
 13759  05C6  0022               	movlb	2	; select bank2
 13760  05C7  00B0               	movwf	(_RF_Data^(0+256)+16)
 13761                           
 13762                           ;RF_Control_B1.c: 184: RF_Data[17] = product->Data[17];
 13763  05C8  0020               	movlb	0	; select bank0
 13764  05C9  086F               	movf	_product,w
 13765  05CA  0086               	movwf	6
 13766  05CB  3002               	movlw	2	; select bank4/5
 13767  05CC  0087               	movwf	7
 13768  05CD  3002               	movlw	2	; select bank4/5
 13769  05CE  3F51               	moviw [17]fsr1
 13770  05CF  0022               	movlb	2	; select bank2
 13771  05D0  00B1               	movwf	(_RF_Data^(0+256)+17)
 13772                           
 13773                           ;RF_Control_B1.c: 185: RF_Data[18] = product->Data[18];
 13774  05D1  0020               	movlb	0	; select bank0
 13775  05D2  086F               	movf	_product,w
 13776  05D3  0086               	movwf	6
 13777  05D4  3002               	movlw	2	; select bank4/5
 13778  05D5  0087               	movwf	7
 13779  05D6  3002               	movlw	2	; select bank4/5
 13780  05D7  3F52               	moviw [18]fsr1
 13781  05D8  0022               	movlb	2	; select bank2
 13782  05D9  00B2               	movwf	(_RF_Data^(0+256)+18)
 13783                           
 13784                           ;RF_Control_B1.c: 186: RF_Data[19] = product->Data[19];
 13785  05DA  0020               	movlb	0	; select bank0
 13786  05DB  086F               	movf	_product,w
 13787  05DC  0086               	movwf	6
 13788  05DD  3002               	movlw	2	; select bank4/5
 13789  05DE  0087               	movwf	7
 13790  05DF  3002               	movlw	2	; select bank4/5
 13791  05E0  3F53               	moviw [19]fsr1
 13792  05E1  0022               	movlb	2	; select bank2
 13793  05E2  00B3               	movwf	(_RF_Data^(0+256)+19)
 13794                           
 13795                           ;RF_Control_B1.c: 187: RF_Data[20] = 211;
 13796  05E3  30D3               	movlw	211
 13797  05E4  0020               	movlb	0	; select bank0
 13798  05E5  00A0               	movwf	??_setTxData
 13799  05E6  0820               	movf	??_setTxData,w
 13800  05E7  0022               	movlb	2	; select bank2
 13801  05E8  00B4               	movwf	(_RF_Data^(0+256)+20)
 13802  05E9  0008               	return
 13803  05EA                     __end_of_setTxData:	
 13804                           
 13805                           	psect	text86
 13806  1D4D                     __ptext86:	
 13807 ;; *************** function _setSw_Status *****************
 13808 ;; Defined at:
 13809 ;;		line 109 in file "../src/Switch_B1.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;  sw              1    wreg     unsigned char 
 13812 ;;  command         1    1[BANK0 ] unsigned char 
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;  sw              1    2[BANK0 ] unsigned char 
 13815 ;; Return value:  Size  Location     Type
 13816 ;;		None               void
 13817 ;; Registers used:
 13818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13824 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;Total ram usage:        2 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:    6
 13831 ;; This function calls:
 13832 ;;		_SwPointSelect
 13833 ;; This function is called by:
 13834 ;;		_DlyOff_Main
 13835 ;;		_setDimmerLights_ERROR
 13836 ;;		_setControl_Lights_Table
 13837 ;;		_setRFSW_Control
 13838 ;; This function uses a non-reentrant model
 13839 ;;
 13840                           
 13841                           
 13842                           ;psect for function _setSw_Status
 13843  1D4D                     _setSw_Status:	
 13844                           
 13845                           ;incstack = 0
 13846                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13847                           ;setSw_Status@sw stored from wreg
 13848  1D4D  0020               	movlb	0	; select bank0
 13849  1D4E  00A2               	movwf	setSw_Status@sw
 13850                           
 13851                           ;Switch_B1.c: 110: SwPointSelect(sw);
 13852  1D4F  0822               	movf	setSw_Status@sw,w
 13853  1D50  319F  27C6         	fcall	_SwPointSelect
 13854                           
 13855                           ;Switch_B1.c: 111: Sw->Status = command;
 13856  1D52  0878               	movf	_Sw,w
 13857  1D53  0086               	movwf	6
 13858  1D54  0879               	movf	_Sw+1,w
 13859  1D55  0087               	movwf	7
 13860  1D56  0020               	movlb	0	; select bank0
 13861  1D57  0821               	movf	setSw_Status@command,w
 13862  1D58  1301               	bcf	1,6
 13863  1D59  1D03               	skipz
 13864  1D5A  1701               	bsf	1,6
 13865  1D5B  0008               	return
 13866  1D5C                     __end_of_setSw_Status:	
 13867                           
 13868                           	psect	text87
 13869  1FC6                     __ptext87:	
 13870 ;; *************** function _SwPointSelect *****************
 13871 ;; Defined at:
 13872 ;;		line 21 in file "../src/Switch_B1.c"
 13873 ;; Parameters:    Size  Location     Type
 13874 ;;  sw              1    wreg     unsigned char 
 13875 ;; Auto vars:     Size  Location     Type
 13876 ;;  sw              1    0[BANK0 ] unsigned char 
 13877 ;; Return value:  Size  Location     Type
 13878 ;;		None               void
 13879 ;; Registers used:
 13880 ;;		wreg, status,2, status,0
 13881 ;; Tracked objects:
 13882 ;;		On entry : 0/0
 13883 ;;		On exit  : 0/0
 13884 ;;		Unchanged: 0/0
 13885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;Total ram usage:        1 bytes
 13891 ;; Hardware stack levels used:    1
 13892 ;; Hardware stack levels required when called:    5
 13893 ;; This function calls:
 13894 ;;		Nothing
 13895 ;; This function is called by:
 13896 ;;		_setSw_Enable
 13897 ;;		_setSw_Status
 13898 ;;		_setSw_Main
 13899 ;;		_Sw_Detect
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           
 13904                           ;psect for function _SwPointSelect
 13905  1FC6                     _SwPointSelect:	
 13906                           
 13907                           ;incstack = 0
 13908                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
 13909                           ;SwPointSelect@sw stored from wreg
 13910  1FC6  0020               	movlb	0	; select bank0
 13911  1FC7  00A0               	movwf	SwPointSelect@sw
 13912                           
 13913                           ;Switch_B1.c: 24: if (sw == 1) {
 13914  1FC8  0820               	movf	SwPointSelect@sw,w
 13915  1FC9  3A01               	xorlw	1
 13916  1FCA  1D03               	skipz
 13917  1FCB  2FD1               	goto	l6152
 13918                           
 13919                           ;Switch_B1.c: 25: Sw = &Sw1;
 13920  1FCC  30E3               	movlw	low _Sw1
 13921  1FCD  00F8               	movwf	_Sw
 13922  1FCE  3001               	movlw	high _Sw1
 13923  1FCF  00F9               	movwf	_Sw+1
 13924                           
 13925                           ;Switch_B1.c: 26: }
 13926  1FD0  0008               	return
 13927  1FD1                     l6152:	
 13928                           
 13929                           ;Switch_B1.c: 29: else if (sw == 2) {
 13930  1FD1  0820               	movf	SwPointSelect@sw,w
 13931  1FD2  3A02               	xorlw	2
 13932  1FD3  1D03               	skipz
 13933  1FD4  2FDA               	goto	l6156
 13934                           
 13935                           ;Switch_B1.c: 30: Sw = &Sw2;
 13936  1FD5  3040               	movlw	low _Sw2
 13937  1FD6  00F8               	movwf	_Sw
 13938  1FD7  3002               	movlw	high _Sw2
 13939  1FD8  00F9               	movwf	_Sw+1
 13940                           
 13941                           ;Switch_B1.c: 31: }
 13942  1FD9  0008               	return
 13943  1FDA                     l6156:	
 13944                           
 13945                           ;Switch_B1.c: 34: else if (sw == 3) {
 13946  1FDA  0820               	movf	SwPointSelect@sw,w
 13947  1FDB  3A03               	xorlw	3
 13948  1FDC  1D03               	skipz
 13949  1FDD  0008               	return
 13950                           
 13951                           ;Switch_B1.c: 35: Sw = &Sw3;
 13952  1FDE  3049               	movlw	low _Sw3
 13953  1FDF  00F8               	movwf	_Sw
 13954  1FE0  3002               	movlw	high _Sw3
 13955  1FE1  00F9               	movwf	_Sw+1
 13956  1FE2  0008               	return
 13957  1FE3                     __end_of_SwPointSelect:	
 13958                           
 13959                           	psect	text88
 13960  0A28                     __ptext88:	
 13961 ;; *************** function _setRF_DimmerLights *****************
 13962 ;; Defined at:
 13963 ;;		line 412 in file "../src/RF_Control_B1.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  lights          1    wreg     unsigned char 
 13966 ;;  on              1   61[BANK0 ] unsigned char 
 13967 ;; Auto vars:     Size  Location     Type
 13968 ;;  lights          1   65[BANK0 ] unsigned char 
 13969 ;;  status          1   64[BANK0 ] unsigned char 
 13970 ;; Return value:  Size  Location     Type
 13971 ;;		None               void
 13972 ;; Registers used:
 13973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13974 ;; Tracked objects:
 13975 ;;		On entry : 0/0
 13976 ;;		On exit  : 0/0
 13977 ;;		Unchanged: 0/0
 13978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13979 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;Total ram usage:        5 bytes
 13984 ;; Hardware stack levels used:    1
 13985 ;; Hardware stack levels required when called:    8
 13986 ;; This function calls:
 13987 ;;		_setPercentValue
 13988 ;; This function is called by:
 13989 ;;		_DlyOff_Main
 13990 ;;		_setDimmerLights_Adj
 13991 ;;		_setRFSW_Control
 13992 ;;		_Sw_DimmerOnFunc
 13993 ;;		_Sw_DimmerOffFunc
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           
 13998                           ;psect for function _setRF_DimmerLights
 13999  0A28                     _setRF_DimmerLights:	
 14000                           
 14001                           ;incstack = 0
 14002                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14003                           ;setRF_DimmerLights@lights stored from wreg
 14004  0A28  0020               	movlb	0	; select bank0
 14005  0A29  00E1               	movwf	setRF_DimmerLights@lights
 14006                           
 14007                           ;RF_Control_B1.c: 413: char status;
 14008                           ;RF_Control_B1.c: 414: status = 1;
 14009  0A2A  01E0               	clrf	setRF_DimmerLights@status
 14010  0A2B  0AE0               	incf	setRF_DimmerLights@status,f
 14011                           
 14012                           ;RF_Control_B1.c: 415: status <<= (lights - 1);
 14013  0A2C  0861               	movf	setRF_DimmerLights@lights,w
 14014  0A2D  3EFF               	addlw	-1
 14015  0A2E  0A89               	incf	9,f
 14016  0A2F  2A32               	goto	u4970
 14017  0A30                     u4975:	
 14018  0A30  1003               	clrc
 14019  0A31  0DE0               	rlf	setRF_DimmerLights@status,f
 14020  0A32                     u4970:	
 14021  0A32  3EFF               	addlw	-1
 14022  0A33  1D03               	skipz
 14023  0A34  2A30               	goto	u4975
 14024                           
 14025                           ;RF_Control_B1.c: 416: product->Data[11]=lights;
 14026  0A35  0861               	movf	setRF_DimmerLights@lights,w
 14027  0A36  00DE               	movwf	??_setRF_DimmerLights
 14028  0A37  086F               	movf	_product,w
 14029  0A38  3E0B               	addlw	11
 14030  0A39  0086               	movwf	6
 14031  0A3A  3002               	movlw	2	; select bank4/5
 14032  0A3B  0087               	movwf	7
 14033  0A3C  085E               	movf	??_setRF_DimmerLights,w
 14034  0A3D  0081               	movwf	1
 14035                           
 14036                           ;RF_Control_B1.c: 419: product->Data[(20 + lights)]=setPercentValue(((char)((100-95)*0.8
      +                          )));
 14037  0A3E  3004               	movlw	4
 14038  0A3F  3194  24F7  318A   	fcall	_setPercentValue
 14039  0A42  0020               	movlb	0	; select bank0
 14040  0A43  00DE               	movwf	??_setRF_DimmerLights
 14041  0A44  0861               	movf	setRF_DimmerLights@lights,w
 14042  0A45  3E14               	addlw	20
 14043  0A46  076F               	addwf	_product,w
 14044  0A47  00DF               	movwf	??_setRF_DimmerLights+1
 14045  0A48  085F               	movf	??_setRF_DimmerLights+1,w
 14046  0A49  0086               	movwf	6
 14047  0A4A  3002               	movlw	2	; select bank4/5
 14048  0A4B  0087               	movwf	7
 14049  0A4C  085E               	movf	??_setRF_DimmerLights,w
 14050  0A4D  0081               	movwf	1
 14051                           
 14052                           ;RF_Control_B1.c: 422: product->Data[9]=product->Data[20 + lights];
 14053  0A4E  0861               	movf	setRF_DimmerLights@lights,w
 14054  0A4F  3E14               	addlw	20
 14055  0A50  076F               	addwf	_product,w
 14056  0A51  00DE               	movwf	??_setRF_DimmerLights
 14057  0A52  085E               	movf	??_setRF_DimmerLights,w
 14058  0A53  0086               	movwf	6
 14059  0A54  3002               	movlw	2	; select bank4/5
 14060  0A55  0087               	movwf	7
 14061  0A56  0801               	movf	1,w
 14062  0A57  00DF               	movwf	??_setRF_DimmerLights+1
 14063  0A58  086F               	movf	_product,w
 14064  0A59  3E09               	addlw	9
 14065  0A5A  0086               	movwf	6
 14066  0A5B  3002               	movlw	2	; select bank4/5
 14067  0A5C  0087               	movwf	7
 14068  0A5D  085F               	movf	??_setRF_DimmerLights+1,w
 14069  0A5E  0081               	movwf	1
 14070                           
 14071                           ;RF_Control_B1.c: 423: product->Data[17]=product->Data[26 + lights];
 14072  0A5F  0861               	movf	setRF_DimmerLights@lights,w
 14073  0A60  3E1A               	addlw	26
 14074  0A61  076F               	addwf	_product,w
 14075  0A62  00DE               	movwf	??_setRF_DimmerLights
 14076  0A63  085E               	movf	??_setRF_DimmerLights,w
 14077  0A64  0086               	movwf	6
 14078  0A65  3002               	movlw	2	; select bank4/5
 14079  0A66  0087               	movwf	7
 14080  0A67  0801               	movf	1,w
 14081  0A68  00DF               	movwf	??_setRF_DimmerLights+1
 14082  0A69  086F               	movf	_product,w
 14083  0A6A  3E11               	addlw	17
 14084  0A6B  0086               	movwf	6
 14085  0A6C  3002               	movlw	2	; select bank4/5
 14086  0A6D  0087               	movwf	7
 14087  0A6E  085F               	movf	??_setRF_DimmerLights+1,w
 14088  0A6F  0081               	movwf	1
 14089                           
 14090                           ;RF_Control_B1.c: 424: if (on == 1) {
 14091  0A70  085D               	movf	setRF_DimmerLights@on,w
 14092  0A71  3A01               	xorlw	1
 14093  0A72  1D03               	skipz
 14094  0A73  2A84               	goto	l6256
 14095                           
 14096                           ;RF_Control_B1.c: 425: product->Data[15]=(product->Data[15] | status);
 14097  0A74  086F               	movf	_product,w
 14098  0A75  3E0F               	addlw	15
 14099  0A76  0086               	movwf	6
 14100  0A77  3002               	movlw	2	; select bank4/5
 14101  0A78  0087               	movwf	7
 14102  0A79  0801               	movf	1,w
 14103  0A7A  0460               	iorwf	setRF_DimmerLights@status,w
 14104  0A7B  00DE               	movwf	??_setRF_DimmerLights
 14105  0A7C  086F               	movf	_product,w
 14106  0A7D  3E0F               	addlw	15
 14107  0A7E  0086               	movwf	6
 14108  0A7F  3002               	movlw	2	; select bank4/5
 14109  0A80  0087               	movwf	7
 14110  0A81  085E               	movf	??_setRF_DimmerLights,w
 14111  0A82  0081               	movwf	1
 14112                           
 14113                           ;RF_Control_B1.c: 426: } else {
 14114  0A83  0008               	return
 14115  0A84                     l6256:	
 14116                           
 14117                           ;RF_Control_B1.c: 427: product->Data[15]=(product->Data[15]&(~status));
 14118  0A84  086F               	movf	_product,w
 14119  0A85  3E0F               	addlw	15
 14120  0A86  0086               	movwf	6
 14121  0A87  3002               	movlw	2	; select bank4/5
 14122  0A88  0087               	movwf	7
 14123  0A89  0960               	comf	setRF_DimmerLights@status,w
 14124  0A8A  0501               	andwf	1,w
 14125  0A8B  00DE               	movwf	??_setRF_DimmerLights
 14126  0A8C  086F               	movf	_product,w
 14127  0A8D  3E0F               	addlw	15
 14128  0A8E  0086               	movwf	6
 14129  0A8F  3002               	movlw	2	; select bank4/5
 14130  0A90  0087               	movwf	7
 14131  0A91  085E               	movf	??_setRF_DimmerLights,w
 14132  0A92  0081               	movwf	1
 14133  0A93  0008               	return
 14134  0A94                     __end_of_setRF_DimmerLights:	
 14135                           
 14136                           	psect	text89
 14137  14F7                     __ptext89:	
 14138 ;; *************** function _setPercentValue *****************
 14139 ;; Defined at:
 14140 ;;		line 768 in file "../src/Dimmer_B1.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;  value           1    wreg     unsigned char 
 14143 ;; Auto vars:     Size  Location     Type
 14144 ;;  value           1   57[BANK0 ] unsigned char 
 14145 ;;  i               3   58[BANK0 ] float 
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  1    wreg      unsigned char 
 14148 ;; Registers used:
 14149 ;;		wreg, status,2, status,0, pclath, cstack
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/0
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;Total ram usage:        4 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    7
 14162 ;; This function calls:
 14163 ;;		___awtoft
 14164 ;;		___ftdiv
 14165 ;;		___fttol
 14166 ;; This function is called by:
 14167 ;;		_Flash_Memory_Initialization
 14168 ;;		_setRF_DimmerLights
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           
 14173                           ;psect for function _setPercentValue
 14174  14F7                     _setPercentValue:	
 14175                           
 14176                           ;incstack = 0
 14177                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14178                           ;setPercentValue@value stored from wreg
 14179  14F7  0020               	movlb	0	; select bank0
 14180  14F8  00D9               	movwf	setPercentValue@value
 14181                           
 14182                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
 14183  14F9  3000               	movlw	0
 14184  14FA  00DA               	movwf	setPercentValue@i
 14185  14FB  3060               	movlw	96
 14186  14FC  00DB               	movwf	setPercentValue@i+1
 14187  14FD  3042               	movlw	66
 14188  14FE  00DC               	movwf	setPercentValue@i+2
 14189                           
 14190                           ;Dimmer_B1.c: 771: i /= 100;
 14191  14FF  3000               	movlw	0
 14192  1500  00AE               	movwf	___ftdiv@f2
 14193  1501  30C8               	movlw	200
 14194  1502  00AF               	movwf	___ftdiv@f2+1
 14195  1503  3042               	movlw	66
 14196  1504  00B0               	movwf	___ftdiv@f2+2
 14197  1505  085A               	movf	setPercentValue@i,w
 14198  1506  00B1               	movwf	___ftdiv@f1
 14199  1507  085B               	movf	setPercentValue@i+1,w
 14200  1508  00B2               	movwf	___ftdiv@f1+1
 14201  1509  085C               	movf	setPercentValue@i+2,w
 14202  150A  00B3               	movwf	___ftdiv@f1+2
 14203  150B  3187  274D  3194   	fcall	___ftdiv
 14204  150E  0020               	movlb	0	; select bank0
 14205  150F  082E               	movf	?___ftdiv,w
 14206  1510  00DA               	movwf	setPercentValue@i
 14207  1511  082F               	movf	?___ftdiv+1,w
 14208  1512  00DB               	movwf	setPercentValue@i+1
 14209  1513  0830               	movf	?___ftdiv+2,w
 14210  1514  00DC               	movwf	setPercentValue@i+2
 14211                           
 14212                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-95)*0.8))) / i));
 14213  1515  0859               	movf	setPercentValue@value,w
 14214  1516  3EFC               	addlw	252
 14215  1517  00A8               	movwf	___awtoft@c
 14216  1518  30FF               	movlw	255
 14217  1519  1803               	skipnc
 14218  151A  3000               	movlw	0
 14219  151B  00A9               	movwf	___awtoft@c+1
 14220  151C  3191  2149  3194   	fcall	___awtoft
 14221  151F  0020               	movlb	0	; select bank0
 14222  1520  0828               	movf	?___awtoft,w
 14223  1521  00B1               	movwf	___ftdiv@f1
 14224  1522  0829               	movf	?___awtoft+1,w
 14225  1523  00B2               	movwf	___ftdiv@f1+1
 14226  1524  082A               	movf	?___awtoft+2,w
 14227  1525  00B3               	movwf	___ftdiv@f1+2
 14228  1526  085A               	movf	setPercentValue@i,w
 14229  1527  00AE               	movwf	___ftdiv@f2
 14230  1528  085B               	movf	setPercentValue@i+1,w
 14231  1529  00AF               	movwf	___ftdiv@f2+1
 14232  152A  085C               	movf	setPercentValue@i+2,w
 14233  152B  00B0               	movwf	___ftdiv@f2+2
 14234  152C  3187  274D  3194   	fcall	___ftdiv
 14235  152F  0020               	movlb	0	; select bank0
 14236  1530  082E               	movf	?___ftdiv,w
 14237  1531  00CB               	movwf	___fttol@f1
 14238  1532  082F               	movf	?___ftdiv+1,w
 14239  1533  00CC               	movwf	___fttol@f1+1
 14240  1534  0830               	movf	?___ftdiv+2,w
 14241  1535  00CD               	movwf	___fttol@f1+2
 14242  1536  318D  25D1         	fcall	___fttol
 14243  1538  0020               	movlb	0	; select bank0
 14244  1539  034B               	decf	?___fttol,w
 14245  153A  3AFF               	xorlw	255
 14246  153B  3E64               	addlw	100
 14247  153C  0008               	return
 14248  153D                     __end_of_setPercentValue:	
 14249                           
 14250                           	psect	text90
 14251  0DD1                     __ptext90:	
 14252 ;; *************** function ___fttol *****************
 14253 ;; Defined at:
 14254 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;  f1              3   43[BANK0 ] float 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;  lval            4   52[BANK0 ] unsigned long 
 14259 ;;  exp1            1   56[BANK0 ] unsigned char 
 14260 ;;  sign1           1   51[BANK0 ] unsigned char 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  4   43[BANK0 ] long 
 14263 ;; Registers used:
 14264 ;;		wreg, status,2, status,0
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;Total ram usage:       14 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    5
 14277 ;; This function calls:
 14278 ;;		Nothing
 14279 ;; This function is called by:
 14280 ;;		_getPercentValue
 14281 ;;		_setPercentValue
 14282 ;; This function uses a non-reentrant model
 14283 ;;
 14284                           
 14285                           
 14286                           ;psect for function ___fttol
 14287  0DD1                     ___fttol:	
 14288                           
 14289                           ;incstack = 0
 14290                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14291  0DD1  0020               	movlb	0	; select bank0
 14292  0DD2  084B               	movf	___fttol@f1,w
 14293  0DD3  00CF               	movwf	??___fttol
 14294  0DD4  084C               	movf	___fttol@f1+1,w
 14295  0DD5  00D0               	movwf	??___fttol+1
 14296  0DD6  084D               	movf	___fttol@f1+2,w
 14297  0DD7  00D1               	movwf	??___fttol+2
 14298  0DD8  1003               	clrc
 14299  0DD9  0D50               	rlf	??___fttol+1,w
 14300  0DDA  0D51               	rlf	??___fttol+2,w
 14301  0DDB  00D2               	movwf	??___fttol+3
 14302  0DDC  0852               	movf	??___fttol+3,w
 14303  0DDD  00D8               	movwf	___fttol@exp1
 14304  0DDE  08D8               	movf	___fttol@exp1,f
 14305  0DDF  1D03               	skipz
 14306  0DE0  2DEA               	goto	l6010
 14307  0DE1  3000               	movlw	0
 14308  0DE2  00CE               	movwf	?___fttol+3
 14309  0DE3  3000               	movlw	0
 14310  0DE4  00CD               	movwf	?___fttol+2
 14311  0DE5  3000               	movlw	0
 14312  0DE6  00CC               	movwf	?___fttol+1
 14313  0DE7  3000               	movlw	0
 14314  0DE8  00CB               	movwf	?___fttol
 14315  0DE9  0008               	return
 14316  0DEA                     l6010:	
 14317  0DEA  084B               	movf	___fttol@f1,w
 14318  0DEB  00CF               	movwf	??___fttol
 14319  0DEC  084C               	movf	___fttol@f1+1,w
 14320  0DED  00D0               	movwf	??___fttol+1
 14321  0DEE  084D               	movf	___fttol@f1+2,w
 14322  0DEF  00D1               	movwf	??___fttol+2
 14323  0DF0  3017               	movlw	23
 14324  0DF1                     u4545:	
 14325  0DF1  36D1               	lsrf	??___fttol+2,f
 14326  0DF2  0CD0               	rrf	??___fttol+1,f
 14327  0DF3  0CCF               	rrf	??___fttol,f
 14328  0DF4  0B89               	decfsz	9,f
 14329  0DF5  2DF1               	goto	u4545
 14330  0DF6  084F               	movf	??___fttol,w
 14331  0DF7  00D2               	movwf	??___fttol+3
 14332  0DF8  0852               	movf	??___fttol+3,w
 14333  0DF9  00D3               	movwf	___fttol@sign1
 14334  0DFA  17CC               	bsf	___fttol@f1+1,7
 14335  0DFB  30FF               	movlw	255
 14336  0DFC  05CB               	andwf	___fttol@f1,f
 14337  0DFD  30FF               	movlw	255
 14338  0DFE  05CC               	andwf	___fttol@f1+1,f
 14339  0DFF  3000               	movlw	0
 14340  0E00  05CD               	andwf	___fttol@f1+2,f
 14341  0E01  084B               	movf	___fttol@f1,w
 14342  0E02  00D4               	movwf	___fttol@lval
 14343  0E03  084C               	movf	___fttol@f1+1,w
 14344  0E04  00D5               	movwf	___fttol@lval+1
 14345  0E05  084D               	movf	___fttol@f1+2,w
 14346  0E06  00D6               	movwf	___fttol@lval+2
 14347  0E07  01D7               	clrf	___fttol@lval+3
 14348  0E08  308E               	movlw	142
 14349  0E09  02D8               	subwf	___fttol@exp1,f
 14350  0E0A  1FD8               	btfss	___fttol@exp1,7
 14351  0E0B  2E28               	goto	l6030
 14352  0E0C  0858               	movf	___fttol@exp1,w
 14353  0E0D  3A80               	xorlw	128
 14354  0E0E  3E8F               	addlw	143
 14355  0E0F  1803               	skipnc
 14356  0E10  2E1A               	goto	l6028
 14357  0E11  3000               	movlw	0
 14358  0E12  00CE               	movwf	?___fttol+3
 14359  0E13  3000               	movlw	0
 14360  0E14  00CD               	movwf	?___fttol+2
 14361  0E15  3000               	movlw	0
 14362  0E16  00CC               	movwf	?___fttol+1
 14363  0E17  3000               	movlw	0
 14364  0E18  00CB               	movwf	?___fttol
 14365  0E19  0008               	return
 14366  0E1A                     l6028:	
 14367  0E1A  3001               	movlw	1
 14368  0E1B                     u4575:	
 14369  0E1B  36D7               	lsrf	___fttol@lval+3,f
 14370  0E1C  0CD6               	rrf	___fttol@lval+2,f
 14371  0E1D  0CD5               	rrf	___fttol@lval+1,f
 14372  0E1E  0CD4               	rrf	___fttol@lval,f
 14373  0E1F  0B89               	decfsz	9,f
 14374  0E20  2E1B               	goto	u4575
 14375  0E21  3001               	movlw	1
 14376  0E22  00CF               	movwf	??___fttol
 14377  0E23  084F               	movf	??___fttol,w
 14378  0E24  07D8               	addwf	___fttol@exp1,f
 14379  0E25  1903               	btfsc	3,2
 14380  0E26  2E41               	goto	l6040
 14381  0E27  2E1A               	goto	l6028
 14382  0E28                     l6030:	
 14383  0E28  3018               	movlw	24
 14384  0E29  0258               	subwf	___fttol@exp1,w
 14385  0E2A  1C03               	skipc
 14386  0E2B  2E3E               	goto	l6038
 14387  0E2C  3000               	movlw	0
 14388  0E2D  00CE               	movwf	?___fttol+3
 14389  0E2E  3000               	movlw	0
 14390  0E2F  00CD               	movwf	?___fttol+2
 14391  0E30  3000               	movlw	0
 14392  0E31  00CC               	movwf	?___fttol+1
 14393  0E32  3000               	movlw	0
 14394  0E33  00CB               	movwf	?___fttol
 14395  0E34  0008               	return
 14396  0E35                     l6036:	
 14397  0E35  3001               	movlw	1
 14398  0E36                     u4605:	
 14399  0E36  35D4               	lslf	___fttol@lval,f
 14400  0E37  0DD5               	rlf	___fttol@lval+1,f
 14401  0E38  0DD6               	rlf	___fttol@lval+2,f
 14402  0E39  0DD7               	rlf	___fttol@lval+3,f
 14403  0E3A  0B89               	decfsz	9,f
 14404  0E3B  2E36               	goto	u4605
 14405  0E3C  3001               	movlw	1
 14406  0E3D  02D8               	subwf	___fttol@exp1,f
 14407  0E3E                     l6038:	
 14408  0E3E  08D8               	movf	___fttol@exp1,f
 14409  0E3F  1D03               	skipz
 14410  0E40  2E35               	goto	l6036
 14411  0E41                     l6040:	
 14412  0E41  0853               	movf	___fttol@sign1,w
 14413  0E42  1903               	btfsc	3,2
 14414  0E43  2E4F               	goto	l6044
 14415  0E44  09D4               	comf	___fttol@lval,f
 14416  0E45  09D5               	comf	___fttol@lval+1,f
 14417  0E46  09D6               	comf	___fttol@lval+2,f
 14418  0E47  09D7               	comf	___fttol@lval+3,f
 14419  0E48  0AD4               	incf	___fttol@lval,f
 14420  0E49  1903               	skipnz
 14421  0E4A  0AD5               	incf	___fttol@lval+1,f
 14422  0E4B  1903               	skipnz
 14423  0E4C  0AD6               	incf	___fttol@lval+2,f
 14424  0E4D  1903               	skipnz
 14425  0E4E  0AD7               	incf	___fttol@lval+3,f
 14426  0E4F                     l6044:	
 14427  0E4F  0857               	movf	___fttol@lval+3,w
 14428  0E50  00CE               	movwf	?___fttol+3
 14429  0E51  0856               	movf	___fttol@lval+2,w
 14430  0E52  00CD               	movwf	?___fttol+2
 14431  0E53  0855               	movf	___fttol@lval+1,w
 14432  0E54  00CC               	movwf	?___fttol+1
 14433  0E55  0854               	movf	___fttol@lval,w
 14434  0E56  00CB               	movwf	?___fttol
 14435  0E57  0008               	return
 14436  0E58                     __end_of___fttol:	
 14437                           
 14438                           	psect	text91
 14439  074D                     __ptext91:	
 14440 ;; *************** function ___ftdiv *****************
 14441 ;; Defined at:
 14442 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;  f2              3   14[BANK0 ] float 
 14445 ;;  f1              3   17[BANK0 ] float 
 14446 ;; Auto vars:     Size  Location     Type
 14447 ;;  f3              3   25[BANK0 ] float 
 14448 ;;  sign            1   29[BANK0 ] unsigned char 
 14449 ;;  exp             1   28[BANK0 ] unsigned char 
 14450 ;;  cntr            1   24[BANK0 ] unsigned char 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  3   14[BANK0 ] float 
 14453 ;; Registers used:
 14454 ;;		wreg, status,2, status,0, pclath, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14460 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;Total ram usage:       16 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    6
 14467 ;; This function calls:
 14468 ;;		___ftpack
 14469 ;; This function is called by:
 14470 ;;		_getPercentValue
 14471 ;;		_setPercentValue
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           
 14476                           ;psect for function ___ftdiv
 14477  074D                     ___ftdiv:	
 14478                           
 14479                           ;incstack = 0
 14480                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14481  074D  0020               	movlb	0	; select bank0
 14482  074E  0831               	movf	___ftdiv@f1,w
 14483  074F  00B4               	movwf	??___ftdiv
 14484  0750  0832               	movf	___ftdiv@f1+1,w
 14485  0751  00B5               	movwf	??___ftdiv+1
 14486  0752  0833               	movf	___ftdiv@f1+2,w
 14487  0753  00B6               	movwf	??___ftdiv+2
 14488  0754  1003               	clrc
 14489  0755  0D35               	rlf	??___ftdiv+1,w
 14490  0756  0D36               	rlf	??___ftdiv+2,w
 14491  0757  00B7               	movwf	??___ftdiv+3
 14492  0758  0837               	movf	??___ftdiv+3,w
 14493  0759  00BC               	movwf	___ftdiv@exp
 14494  075A  08BC               	movf	___ftdiv@exp,f
 14495  075B  1D03               	skipz
 14496  075C  2F64               	goto	l5918
 14497  075D  3000               	movlw	0
 14498  075E  00AE               	movwf	?___ftdiv
 14499  075F  3000               	movlw	0
 14500  0760  00AF               	movwf	?___ftdiv+1
 14501  0761  3000               	movlw	0
 14502  0762  00B0               	movwf	?___ftdiv+2
 14503  0763  0008               	return
 14504  0764                     l5918:	
 14505  0764  082E               	movf	___ftdiv@f2,w
 14506  0765  00B4               	movwf	??___ftdiv
 14507  0766  082F               	movf	___ftdiv@f2+1,w
 14508  0767  00B5               	movwf	??___ftdiv+1
 14509  0768  0830               	movf	___ftdiv@f2+2,w
 14510  0769  00B6               	movwf	??___ftdiv+2
 14511  076A  1003               	clrc
 14512  076B  0D35               	rlf	??___ftdiv+1,w
 14513  076C  0D36               	rlf	??___ftdiv+2,w
 14514  076D  00B7               	movwf	??___ftdiv+3
 14515  076E  0837               	movf	??___ftdiv+3,w
 14516  076F  00BD               	movwf	___ftdiv@sign
 14517  0770  08BD               	movf	___ftdiv@sign,f
 14518  0771  1D03               	skipz
 14519  0772  2F7A               	goto	l5924
 14520  0773  3000               	movlw	0
 14521  0774  00AE               	movwf	?___ftdiv
 14522  0775  3000               	movlw	0
 14523  0776  00AF               	movwf	?___ftdiv+1
 14524  0777  3000               	movlw	0
 14525  0778  00B0               	movwf	?___ftdiv+2
 14526  0779  0008               	return
 14527  077A                     l5924:	
 14528  077A  3000               	movlw	0
 14529  077B  00B9               	movwf	___ftdiv@f3
 14530  077C  3000               	movlw	0
 14531  077D  00BA               	movwf	___ftdiv@f3+1
 14532  077E  3000               	movlw	0
 14533  077F  00BB               	movwf	___ftdiv@f3+2
 14534  0780  3089               	movlw	137
 14535  0781  073D               	addwf	___ftdiv@sign,w
 14536  0782  00B4               	movwf	??___ftdiv
 14537  0783  0834               	movf	??___ftdiv,w
 14538  0784  02BC               	subwf	___ftdiv@exp,f
 14539  0785  0831               	movf	___ftdiv@f1,w
 14540  0786  00B4               	movwf	??___ftdiv
 14541  0787  0832               	movf	___ftdiv@f1+1,w
 14542  0788  00B5               	movwf	??___ftdiv+1
 14543  0789  0833               	movf	___ftdiv@f1+2,w
 14544  078A  00B6               	movwf	??___ftdiv+2
 14545  078B  3010               	movlw	16
 14546  078C                     u4355:	
 14547  078C  36B6               	lsrf	??___ftdiv+2,f
 14548  078D  0CB5               	rrf	??___ftdiv+1,f
 14549  078E  0CB4               	rrf	??___ftdiv,f
 14550  078F  0B89               	decfsz	9,f
 14551  0790  2F8C               	goto	u4355
 14552  0791  0834               	movf	??___ftdiv,w
 14553  0792  00B7               	movwf	??___ftdiv+3
 14554  0793  0837               	movf	??___ftdiv+3,w
 14555  0794  00BD               	movwf	___ftdiv@sign
 14556  0795  082E               	movf	___ftdiv@f2,w
 14557  0796  00B4               	movwf	??___ftdiv
 14558  0797  082F               	movf	___ftdiv@f2+1,w
 14559  0798  00B5               	movwf	??___ftdiv+1
 14560  0799  0830               	movf	___ftdiv@f2+2,w
 14561  079A  00B6               	movwf	??___ftdiv+2
 14562  079B  3010               	movlw	16
 14563  079C                     u4365:	
 14564  079C  36B6               	lsrf	??___ftdiv+2,f
 14565  079D  0CB5               	rrf	??___ftdiv+1,f
 14566  079E  0CB4               	rrf	??___ftdiv,f
 14567  079F  0B89               	decfsz	9,f
 14568  07A0  2F9C               	goto	u4365
 14569  07A1  0834               	movf	??___ftdiv,w
 14570  07A2  00B7               	movwf	??___ftdiv+3
 14571  07A3  0837               	movf	??___ftdiv+3,w
 14572  07A4  06BD               	xorwf	___ftdiv@sign,f
 14573  07A5  3080               	movlw	128
 14574  07A6  00B4               	movwf	??___ftdiv
 14575  07A7  0834               	movf	??___ftdiv,w
 14576  07A8  05BD               	andwf	___ftdiv@sign,f
 14577  07A9  17B2               	bsf	___ftdiv@f1+1,7
 14578  07AA  30FF               	movlw	255
 14579  07AB  05B1               	andwf	___ftdiv@f1,f
 14580  07AC  30FF               	movlw	255
 14581  07AD  05B2               	andwf	___ftdiv@f1+1,f
 14582  07AE  3000               	movlw	0
 14583  07AF  05B3               	andwf	___ftdiv@f1+2,f
 14584  07B0  17AF               	bsf	___ftdiv@f2+1,7
 14585  07B1  30FF               	movlw	255
 14586  07B2  05AE               	andwf	___ftdiv@f2,f
 14587  07B3  30FF               	movlw	255
 14588  07B4  05AF               	andwf	___ftdiv@f2+1,f
 14589  07B5  3000               	movlw	0
 14590  07B6  05B0               	andwf	___ftdiv@f2+2,f
 14591  07B7  3018               	movlw	24
 14592  07B8  00B4               	movwf	??___ftdiv
 14593  07B9  0834               	movf	??___ftdiv,w
 14594  07BA  00B8               	movwf	___ftdiv@cntr
 14595  07BB                     l5938:	
 14596  07BB  3001               	movlw	1
 14597  07BC                     u4375:	
 14598  07BC  35B9               	lslf	___ftdiv@f3,f
 14599  07BD  0DBA               	rlf	___ftdiv@f3+1,f
 14600  07BE  0DBB               	rlf	___ftdiv@f3+2,f
 14601  07BF  0B89               	decfsz	9,f
 14602  07C0  2FBC               	goto	u4375
 14603  07C1  0830               	movf	___ftdiv@f2+2,w
 14604  07C2  0233               	subwf	___ftdiv@f1+2,w
 14605  07C3  1D03               	skipz
 14606  07C4  2FCB               	goto	u4385
 14607  07C5  082F               	movf	___ftdiv@f2+1,w
 14608  07C6  0232               	subwf	___ftdiv@f1+1,w
 14609  07C7  1D03               	skipz
 14610  07C8  2FCB               	goto	u4385
 14611  07C9  082E               	movf	___ftdiv@f2,w
 14612  07CA  0231               	subwf	___ftdiv@f1,w
 14613  07CB                     u4385:	
 14614  07CB  1C03               	skipc
 14615  07CC  2FD4               	goto	l5946
 14616  07CD  082E               	movf	___ftdiv@f2,w
 14617  07CE  02B1               	subwf	___ftdiv@f1,f
 14618  07CF  082F               	movf	___ftdiv@f2+1,w
 14619  07D0  3BB2               	subwfb	___ftdiv@f1+1,f
 14620  07D1  0830               	movf	___ftdiv@f2+2,w
 14621  07D2  3BB3               	subwfb	___ftdiv@f1+2,f
 14622  07D3  1439               	bsf	___ftdiv@f3,0
 14623  07D4                     l5946:	
 14624  07D4  3001               	movlw	1
 14625  07D5                     u4395:	
 14626  07D5  35B1               	lslf	___ftdiv@f1,f
 14627  07D6  0DB2               	rlf	___ftdiv@f1+1,f
 14628  07D7  0DB3               	rlf	___ftdiv@f1+2,f
 14629  07D8  0B89               	decfsz	9,f
 14630  07D9  2FD5               	goto	u4395
 14631  07DA  3001               	movlw	1
 14632  07DB  02B8               	subwf	___ftdiv@cntr,f
 14633  07DC  1D03               	btfss	3,2
 14634  07DD  2FBB               	goto	l5938
 14635  07DE  0839               	movf	___ftdiv@f3,w
 14636  07DF  00A0               	movwf	___ftpack@arg
 14637  07E0  083A               	movf	___ftdiv@f3+1,w
 14638  07E1  00A1               	movwf	___ftpack@arg+1
 14639  07E2  083B               	movf	___ftdiv@f3+2,w
 14640  07E3  00A2               	movwf	___ftpack@arg+2
 14641  07E4  083C               	movf	___ftdiv@exp,w
 14642  07E5  00B4               	movwf	??___ftdiv
 14643  07E6  0834               	movf	??___ftdiv,w
 14644  07E7  00A3               	movwf	___ftpack@exp
 14645  07E8  083D               	movf	___ftdiv@sign,w
 14646  07E9  00B5               	movwf	??___ftdiv+1
 14647  07EA  0835               	movf	??___ftdiv+1,w
 14648  07EB  00A4               	movwf	___ftpack@sign
 14649  07EC  3188  2098         	fcall	___ftpack
 14650  07EE  0020               	movlb	0	; select bank0
 14651  07EF  0820               	movf	?___ftpack,w
 14652  07F0  00AE               	movwf	?___ftdiv
 14653  07F1  0821               	movf	?___ftpack+1,w
 14654  07F2  00AF               	movwf	?___ftdiv+1
 14655  07F3  0822               	movf	?___ftpack+2,w
 14656  07F4  00B0               	movwf	?___ftdiv+2
 14657  07F5  0008               	return
 14658  07F6                     __end_of___ftdiv:	
 14659                           
 14660                           	psect	text92
 14661  1149                     __ptext92:	
 14662 ;; *************** function ___awtoft *****************
 14663 ;; Defined at:
 14664 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14665 ;; Parameters:    Size  Location     Type
 14666 ;;  c               2    8[BANK0 ] int 
 14667 ;; Auto vars:     Size  Location     Type
 14668 ;;  sign            1   13[BANK0 ] unsigned char 
 14669 ;; Return value:  Size  Location     Type
 14670 ;;                  3    8[BANK0 ] float 
 14671 ;; Registers used:
 14672 ;;		wreg, status,2, status,0, pclath, cstack
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14678 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;Total ram usage:        6 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; Hardware stack levels required when called:    6
 14685 ;; This function calls:
 14686 ;;		___ftpack
 14687 ;; This function is called by:
 14688 ;;		_getPercentValue
 14689 ;;		_setPercentValue
 14690 ;; This function uses a non-reentrant model
 14691 ;;
 14692                           
 14693                           
 14694                           ;psect for function ___awtoft
 14695  1149                     ___awtoft:	
 14696                           
 14697                           ;incstack = 0
 14698                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14699  1149  0020               	movlb	0	; select bank0
 14700  114A  01AD               	clrf	___awtoft@sign
 14701  114B  1FA9               	btfss	___awtoft@c+1,7
 14702  114C  2954               	goto	l5836
 14703  114D  09A8               	comf	___awtoft@c,f
 14704  114E  09A9               	comf	___awtoft@c+1,f
 14705  114F  0AA8               	incf	___awtoft@c,f
 14706  1150  1903               	skipnz
 14707  1151  0AA9               	incf	___awtoft@c+1,f
 14708  1152  01AD               	clrf	___awtoft@sign
 14709  1153  0AAD               	incf	___awtoft@sign,f
 14710  1154                     l5836:	
 14711  1154  0828               	movf	___awtoft@c,w
 14712  1155  00A0               	movwf	___ftpack@arg
 14713  1156  0829               	movf	___awtoft@c+1,w
 14714  1157  00A1               	movwf	___ftpack@arg+1
 14715  1158  01A2               	clrf	___ftpack@arg+2
 14716  1159  308E               	movlw	142
 14717  115A  00AB               	movwf	??___awtoft
 14718  115B  082B               	movf	??___awtoft,w
 14719  115C  00A3               	movwf	___ftpack@exp
 14720  115D  082D               	movf	___awtoft@sign,w
 14721  115E  00AC               	movwf	??___awtoft+1
 14722  115F  082C               	movf	??___awtoft+1,w
 14723  1160  00A4               	movwf	___ftpack@sign
 14724  1161  3188  2098         	fcall	___ftpack
 14725  1163  0020               	movlb	0	; select bank0
 14726  1164  0820               	movf	?___ftpack,w
 14727  1165  00A8               	movwf	?___awtoft
 14728  1166  0821               	movf	?___ftpack+1,w
 14729  1167  00A9               	movwf	?___awtoft+1
 14730  1168  0822               	movf	?___ftpack+2,w
 14731  1169  00AA               	movwf	?___awtoft+2
 14732  116A  0008               	return
 14733  116B                     __end_of___awtoft:	
 14734                           
 14735                           	psect	text93
 14736  0898                     __ptext93:	
 14737 ;; *************** function ___ftpack *****************
 14738 ;; Defined at:
 14739 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;  arg             3    0[BANK0 ] unsigned um
 14742 ;;  exp             1    3[BANK0 ] unsigned char 
 14743 ;;  sign            1    4[BANK0 ] unsigned char 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;		None
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  3    0[BANK0 ] float 
 14748 ;; Registers used:
 14749 ;;		wreg, status,2, status,0
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        8 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    5
 14762 ;; This function calls:
 14763 ;;		Nothing
 14764 ;; This function is called by:
 14765 ;;		___awtoft
 14766 ;;		___ftadd
 14767 ;;		___ftdiv
 14768 ;;		___ftmul
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           
 14773                           ;psect for function ___ftpack
 14774  0898                     ___ftpack:	
 14775                           
 14776                           ;incstack = 0
 14777                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14778  0898  0020               	movlb	0	; select bank0
 14779  0899  0823               	movf	___ftpack@exp,w
 14780  089A  1903               	btfsc	3,2
 14781  089B  28A1               	goto	l5802
 14782  089C  0822               	movf	___ftpack@arg+2,w
 14783  089D  0421               	iorwf	___ftpack@arg+1,w
 14784  089E  0420               	iorwf	___ftpack@arg,w
 14785  089F  1D03               	skipz
 14786  08A0  28B2               	goto	l5808
 14787  08A1                     l5802:	
 14788  08A1  3000               	movlw	0
 14789  08A2  00A0               	movwf	?___ftpack
 14790  08A3  3000               	movlw	0
 14791  08A4  00A1               	movwf	?___ftpack+1
 14792  08A5  3000               	movlw	0
 14793  08A6  00A2               	movwf	?___ftpack+2
 14794  08A7  0008               	return
 14795  08A8                     l5806:	
 14796  08A8  3001               	movlw	1
 14797  08A9  00A5               	movwf	??___ftpack
 14798  08AA  0825               	movf	??___ftpack,w
 14799  08AB  07A3               	addwf	___ftpack@exp,f
 14800  08AC  3001               	movlw	1
 14801  08AD                     u4005:	
 14802  08AD  36A2               	lsrf	___ftpack@arg+2,f
 14803  08AE  0CA1               	rrf	___ftpack@arg+1,f
 14804  08AF  0CA0               	rrf	___ftpack@arg,f
 14805  08B0  0B89               	decfsz	9,f
 14806  08B1  28AD               	goto	u4005
 14807  08B2                     l5808:	
 14808  08B2  30FE               	movlw	254
 14809  08B3  0522               	andwf	___ftpack@arg+2,w
 14810  08B4  1903               	btfsc	3,2
 14811  08B5  28CB               	goto	l3168
 14812  08B6  28A8               	goto	l5806
 14813  08B7                     l5810:	
 14814  08B7  3001               	movlw	1
 14815  08B8  00A5               	movwf	??___ftpack
 14816  08B9  0825               	movf	??___ftpack,w
 14817  08BA  07A3               	addwf	___ftpack@exp,f
 14818  08BB  3001               	movlw	1
 14819  08BC  07A0               	addwf	___ftpack@arg,f
 14820  08BD  3000               	movlw	0
 14821  08BE  1803               	skipnc
 14822  08BF  3001               	movlw	1
 14823  08C0  07A1               	addwf	___ftpack@arg+1,f
 14824  08C1  3000               	movlw	0
 14825  08C2  1803               	skipnc
 14826  08C3  3001               	movlw	1
 14827  08C4  07A2               	addwf	___ftpack@arg+2,f
 14828  08C5  3001               	movlw	1
 14829  08C6                     u4025:	
 14830  08C6  36A2               	lsrf	___ftpack@arg+2,f
 14831  08C7  0CA1               	rrf	___ftpack@arg+1,f
 14832  08C8  0CA0               	rrf	___ftpack@arg,f
 14833  08C9  0B89               	decfsz	9,f
 14834  08CA  28C6               	goto	u4025
 14835  08CB                     l3168:	
 14836  08CB  30FF               	movlw	255
 14837  08CC  0522               	andwf	___ftpack@arg+2,w
 14838  08CD  1903               	btfsc	3,2
 14839  08CE  28D8               	goto	l5818
 14840  08CF  28B7               	goto	l5810
 14841  08D0                     l5816:	
 14842  08D0  3001               	movlw	1
 14843  08D1  02A3               	subwf	___ftpack@exp,f
 14844  08D2  3001               	movlw	1
 14845  08D3                     u4045:	
 14846  08D3  35A0               	lslf	___ftpack@arg,f
 14847  08D4  0DA1               	rlf	___ftpack@arg+1,f
 14848  08D5  0DA2               	rlf	___ftpack@arg+2,f
 14849  08D6  0B89               	decfsz	9,f
 14850  08D7  28D3               	goto	u4045
 14851  08D8                     l5818:	
 14852  08D8  1FA1               	btfss	___ftpack@arg+1,7
 14853  08D9  28D0               	goto	l5816
 14854  08DA  1823               	btfsc	___ftpack@exp,0
 14855  08DB  28E2               	goto	l3174
 14856  08DC  30FF               	movlw	255
 14857  08DD  05A0               	andwf	___ftpack@arg,f
 14858  08DE  307F               	movlw	127
 14859  08DF  05A1               	andwf	___ftpack@arg+1,f
 14860  08E0  30FF               	movlw	255
 14861  08E1  05A2               	andwf	___ftpack@arg+2,f
 14862  08E2                     l3174:	
 14863  08E2  1003               	clrc
 14864  08E3  0CA3               	rrf	___ftpack@exp,f
 14865  08E4  0823               	movf	___ftpack@exp,w
 14866  08E5  00A5               	movwf	??___ftpack
 14867  08E6  01A6               	clrf	??___ftpack+1
 14868  08E7  01A7               	clrf	??___ftpack+2
 14869  08E8  3010               	movlw	16
 14870  08E9                     u4075:	
 14871  08E9  35A5               	lslf	??___ftpack,f
 14872  08EA  0DA6               	rlf	??___ftpack+1,f
 14873  08EB  0DA7               	rlf	??___ftpack+2,f
 14874  08EC  0B89               	decfsz	9,f
 14875  08ED  28E9               	goto	u4075
 14876  08EE  0825               	movf	??___ftpack,w
 14877  08EF  04A0               	iorwf	___ftpack@arg,f
 14878  08F0  0826               	movf	??___ftpack+1,w
 14879  08F1  04A1               	iorwf	___ftpack@arg+1,f
 14880  08F2  0827               	movf	??___ftpack+2,w
 14881  08F3  04A2               	iorwf	___ftpack@arg+2,f
 14882  08F4  0824               	movf	___ftpack@sign,w
 14883  08F5  1903               	btfsc	3,2
 14884  08F6  0008               	return
 14885  08F7  17A2               	bsf	___ftpack@arg+2,7
 14886  08F8  0008               	return
 14887  08F9                     __end_of___ftpack:	
 14888                           
 14889                           	psect	text94
 14890  1D3E                     __ptext94:	
 14891 ;; *************** function _setRFSW_Status *****************
 14892 ;; Defined at:
 14893 ;;		line 394 in file "../src/RF_Control_B1.c"
 14894 ;; Parameters:    Size  Location     Type
 14895 ;;  sw              1    wreg     unsigned char 
 14896 ;;  command         1    2[BANK0 ] unsigned char 
 14897 ;; Auto vars:     Size  Location     Type
 14898 ;;  sw              1    3[BANK0 ] unsigned char 
 14899 ;; Return value:  Size  Location     Type
 14900 ;;		None               void
 14901 ;; Registers used:
 14902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14903 ;; Tracked objects:
 14904 ;;		On entry : 0/0
 14905 ;;		On exit  : 0/0
 14906 ;;		Unchanged: 0/0
 14907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14908 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;Total ram usage:        2 bytes
 14913 ;; Hardware stack levels used:    1
 14914 ;; Hardware stack levels required when called:    6
 14915 ;; This function calls:
 14916 ;;		_RfSWPointSelect
 14917 ;; This function is called by:
 14918 ;;		_DlyOff_Main
 14919 ;;		_setDimmerLights_ERROR
 14920 ;;		_setControl_Lights_Table
 14921 ;;		_Sw_DimmerOnFunc
 14922 ;;		_Sw_DimmerAdjFunc
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           
 14927                           ;psect for function _setRFSW_Status
 14928  1D3E                     _setRFSW_Status:	
 14929                           
 14930                           ;incstack = 0
 14931                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14932                           ;setRFSW_Status@sw stored from wreg
 14933  1D3E  0020               	movlb	0	; select bank0
 14934  1D3F  00A3               	movwf	setRFSW_Status@sw
 14935                           
 14936                           ;RF_Control_B1.c: 395: RfSWPointSelect(sw);
 14937  1D40  0823               	movf	setRFSW_Status@sw,w
 14938  1D41  3190  20C8         	fcall	_RfSWPointSelect
 14939                           
 14940                           ;RF_Control_B1.c: 396: RFSW->Status = command;
 14941  1D43  0021               	movlb	1	; select bank1
 14942  1D44  0850               	movf	_RFSW^(0+128),w
 14943  1D45  0086               	movwf	6
 14944  1D46  0187               	clrf	7
 14945  1D47  0020               	movlb	0	; select bank0
 14946  1D48  0822               	movf	setRFSW_Status@command,w
 14947  1D49  1001               	bcf	1,0
 14948  1D4A  1D03               	skipz
 14949  1D4B  1401               	bsf	1,0
 14950  1D4C  0008               	return
 14951  1D4D                     __end_of_setRFSW_Status:	
 14952                           
 14953                           	psect	text95
 14954  10C8                     __ptext95:	
 14955 ;; *************** function _RfSWPointSelect *****************
 14956 ;; Defined at:
 14957 ;;		line 329 in file "../src/RF_Control_B1.c"
 14958 ;; Parameters:    Size  Location     Type
 14959 ;;  sw              1    wreg     unsigned char 
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  sw              1    1[BANK0 ] unsigned char 
 14962 ;; Return value:  Size  Location     Type
 14963 ;;		None               void
 14964 ;; Registers used:
 14965 ;;		wreg
 14966 ;; Tracked objects:
 14967 ;;		On entry : 0/0
 14968 ;;		On exit  : 0/0
 14969 ;;		Unchanged: 0/0
 14970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;Total ram usage:        2 bytes
 14976 ;; Hardware stack levels used:    1
 14977 ;; Hardware stack levels required when called:    5
 14978 ;; This function calls:
 14979 ;;		Nothing
 14980 ;; This function is called by:
 14981 ;;		_setRFSW_Control
 14982 ;;		_setRFSW_AdjControl
 14983 ;;		_setRFSW_Status
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           
 14988                           ;psect for function _RfSWPointSelect
 14989  10C8                     _RfSWPointSelect:	
 14990                           
 14991                           ;incstack = 0
 14992                           ; Regs used in _RfSWPointSelect: [wreg]
 14993                           ;RfSWPointSelect@sw stored from wreg
 14994  10C8  0020               	movlb	0	; select bank0
 14995  10C9  00A1               	movwf	RfSWPointSelect@sw
 14996                           
 14997                           ;RF_Control_B1.c: 331: if (sw == 1) {
 14998  10CA  0821               	movf	RfSWPointSelect@sw,w
 14999  10CB  3A01               	xorlw	1
 15000  10CC  1D03               	skipz
 15001  10CD  28D3               	goto	l2416
 15002                           
 15003                           ;RF_Control_B1.c: 332: RFSW = &RFSW1;
 15004  10CE  30EB               	movlw	_RFSW1& (0+255)
 15005  10CF  00A0               	movwf	??_RfSWPointSelect
 15006  10D0  0820               	movf	??_RfSWPointSelect,w
 15007  10D1  0021               	movlb	1	; select bank1
 15008  10D2  00D0               	movwf	_RFSW^(0+128)
 15009  10D3                     l2416:	
 15010                           
 15011                           ;RF_Control_B1.c: 333: }
 15012                           ;RF_Control_B1.c: 336: if (sw == 2) {
 15013  10D3  0020               	movlb	0	; select bank0
 15014  10D4  0821               	movf	RfSWPointSelect@sw,w
 15015  10D5  3A02               	xorlw	2
 15016  10D6  1D03               	skipz
 15017  10D7  28DD               	goto	l2417
 15018                           
 15019                           ;RF_Control_B1.c: 337: RFSW = &RFSW2;
 15020  10D8  30EC               	movlw	_RFSW2& (0+255)
 15021  10D9  00A0               	movwf	??_RfSWPointSelect
 15022  10DA  0820               	movf	??_RfSWPointSelect,w
 15023  10DB  0021               	movlb	1	; select bank1
 15024  10DC  00D0               	movwf	_RFSW^(0+128)
 15025  10DD                     l2417:	
 15026                           
 15027                           ;RF_Control_B1.c: 338: }
 15028                           ;RF_Control_B1.c: 341: if (sw == 3) {
 15029  10DD  0020               	movlb	0	; select bank0
 15030  10DE  0821               	movf	RfSWPointSelect@sw,w
 15031  10DF  3A03               	xorlw	3
 15032  10E0  1D03               	skipz
 15033  10E1  0008               	return
 15034                           
 15035                           ;RF_Control_B1.c: 342: RFSW = &RFSW3;
 15036  10E2  30ED               	movlw	_RFSW3& (0+255)
 15037  10E3  00A0               	movwf	??_RfSWPointSelect
 15038  10E4  0820               	movf	??_RfSWPointSelect,w
 15039  10E5  0021               	movlb	1	; select bank1
 15040  10E6  00D0               	movwf	_RFSW^(0+128)
 15041  10E7  0008               	return
 15042  10E8                     __end_of_RfSWPointSelect:	
 15043                           
 15044                           	psect	text96
 15045  1DA8                     __ptext96:	
 15046 ;; *************** function _setDimmerLights_Trigger *****************
 15047 ;; Defined at:
 15048 ;;		line 705 in file "../src/Dimmer_B1.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  lights          1    wreg     unsigned char 
 15051 ;;  command         1    2[BANK0 ] unsigned char 
 15052 ;; Auto vars:     Size  Location     Type
 15053 ;;  lights          1    3[BANK0 ] unsigned char 
 15054 ;; Return value:  Size  Location     Type
 15055 ;;		None               void
 15056 ;; Registers used:
 15057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15058 ;; Tracked objects:
 15059 ;;		On entry : 0/0
 15060 ;;		On exit  : 0/0
 15061 ;;		Unchanged: 0/0
 15062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15063 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;Total ram usage:        2 bytes
 15068 ;; Hardware stack levels used:    1
 15069 ;; Hardware stack levels required when called:    6
 15070 ;; This function calls:
 15071 ;;		_DimmerLightsPointSelect
 15072 ;; This function is called by:
 15073 ;;		_DlyOff_Main
 15074 ;;		_setRFSW_Control
 15075 ;;		_Sw_DimmerOnFunc
 15076 ;;		_Sw_DimmerOffFunc
 15077 ;; This function uses a non-reentrant model
 15078 ;;
 15079                           
 15080                           
 15081                           ;psect for function _setDimmerLights_Trigger
 15082  1DA8                     _setDimmerLights_Trigger:	
 15083                           
 15084                           ;incstack = 0
 15085                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15086                           ;setDimmerLights_Trigger@lights stored from wreg
 15087  1DA8  0020               	movlb	0	; select bank0
 15088  1DA9  00A3               	movwf	setDimmerLights_Trigger@lights
 15089                           
 15090                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 15091  1DAA  0823               	movf	setDimmerLights_Trigger@lights,w
 15092  1DAB  319F  2755         	fcall	_DimmerLightsPointSelect
 15093                           
 15094                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 15095  1DAD  087B               	movf	_DimmerLights,w
 15096  1DAE  3E08               	addlw	8
 15097  1DAF  0086               	movwf	6
 15098  1DB0  3001               	movlw	1	; select bank2/3
 15099  1DB1  0087               	movwf	7
 15100  1DB2  0020               	movlb	0	; select bank0
 15101  1DB3  0822               	movf	setDimmerLights_Trigger@command,w
 15102  1DB4  1101               	bcf	1,2
 15103  1DB5  1D03               	skipz
 15104  1DB6  1501               	bsf	1,2
 15105  1DB7  0008               	return
 15106  1DB8                     __end_of_setDimmerLights_Trigger:	
 15107                           
 15108                           	psect	text97
 15109  1D98                     __ptext97:	
 15110 ;; *************** function _setDimmerLights_Switch *****************
 15111 ;; Defined at:
 15112 ;;		line 693 in file "../src/Dimmer_B1.c"
 15113 ;; Parameters:    Size  Location     Type
 15114 ;;  lights          1    wreg     unsigned char 
 15115 ;;  command         1    2[BANK0 ] unsigned char 
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;  lights          1    3[BANK0 ] unsigned char 
 15118 ;; Return value:  Size  Location     Type
 15119 ;;		None               void
 15120 ;; Registers used:
 15121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15127 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;Total ram usage:        2 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:    6
 15134 ;; This function calls:
 15135 ;;		_DimmerLightsPointSelect
 15136 ;; This function is called by:
 15137 ;;		_DlyOff_Main
 15138 ;;		_setRFSW_Control
 15139 ;;		_Sw_DimmerOnFunc
 15140 ;;		_Sw_DimmerOffFunc
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           
 15145                           ;psect for function _setDimmerLights_Switch
 15146  1D98                     _setDimmerLights_Switch:	
 15147                           
 15148                           ;incstack = 0
 15149                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15150                           ;setDimmerLights_Switch@lights stored from wreg
 15151  1D98  0020               	movlb	0	; select bank0
 15152  1D99  00A3               	movwf	setDimmerLights_Switch@lights
 15153                           
 15154                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 15155  1D9A  0823               	movf	setDimmerLights_Switch@lights,w
 15156  1D9B  319F  2755         	fcall	_DimmerLightsPointSelect
 15157                           
 15158                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 15159  1D9D  087B               	movf	_DimmerLights,w
 15160  1D9E  3E08               	addlw	8
 15161  1D9F  0086               	movwf	6
 15162  1DA0  3001               	movlw	1	; select bank2/3
 15163  1DA1  0087               	movwf	7
 15164  1DA2  0020               	movlb	0	; select bank0
 15165  1DA3  0822               	movf	setDimmerLights_Switch@command,w
 15166  1DA4  1081               	bcf	1,1
 15167  1DA5  1D03               	skipz
 15168  1DA6  1481               	bsf	1,1
 15169  1DA7  0008               	return
 15170  1DA8                     __end_of_setDimmerLights_Switch:	
 15171                           
 15172                           	psect	text98
 15173  1F55                     __ptext98:	
 15174 ;; *************** function _DimmerLightsPointSelect *****************
 15175 ;; Defined at:
 15176 ;;		line 315 in file "../src/Dimmer_B1.c"
 15177 ;; Parameters:    Size  Location     Type
 15178 ;;  lights          1    wreg     unsigned char 
 15179 ;; Auto vars:     Size  Location     Type
 15180 ;;  lights          1    1[BANK0 ] unsigned char 
 15181 ;; Return value:  Size  Location     Type
 15182 ;;		None               void
 15183 ;; Registers used:
 15184 ;;		wreg
 15185 ;; Tracked objects:
 15186 ;;		On entry : 0/0
 15187 ;;		On exit  : 0/0
 15188 ;;		Unchanged: 0/0
 15189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;Total ram usage:        2 bytes
 15195 ;; Hardware stack levels used:    1
 15196 ;; Hardware stack levels required when called:    5
 15197 ;; This function calls:
 15198 ;;		Nothing
 15199 ;; This function is called by:
 15200 ;;		_setDimmerLights_Initialization
 15201 ;;		_setDimmerLights_Main
 15202 ;;		_setDimmerLights_ERROR
 15203 ;;		_setDimmerLights_TriggerERROR
 15204 ;;		_setDimmerLights
 15205 ;;		_setDimmerLights_Adj
 15206 ;;		_setDimmerLights_AdjRF
 15207 ;;		_setDimmerLights_Switch
 15208 ;;		_setDimmerLights_AdjGo
 15209 ;;		_setDimmerLights_Trigger
 15210 ;;		_setDimmerLights_TriggerAdj
 15211 ;;		_setDimmerLights_GO
 15212 ;;		_setDimmerLights_MaxmumValue
 15213 ;;		_setDimmerLights_Clear
 15214 ;; This function uses a non-reentrant model
 15215 ;;
 15216                           
 15217                           
 15218                           ;psect for function _DimmerLightsPointSelect
 15219  1F55                     _DimmerLightsPointSelect:	
 15220                           
 15221                           ;incstack = 0
 15222                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15223                           ;DimmerLightsPointSelect@lights stored from wreg
 15224  1F55  0020               	movlb	0	; select bank0
 15225  1F56  00A1               	movwf	DimmerLightsPointSelect@lights
 15226                           
 15227                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15228  1F57  0821               	movf	DimmerLightsPointSelect@lights,w
 15229  1F58  3A01               	xorlw	1
 15230  1F59  1D03               	skipz
 15231  1F5A  2F5F               	goto	l881
 15232                           
 15233                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15234  1F5B  303D               	movlw	_DimmerLights1& (0+255)
 15235  1F5C  00A0               	movwf	??_DimmerLightsPointSelect
 15236  1F5D  0820               	movf	??_DimmerLightsPointSelect,w
 15237  1F5E  00FB               	movwf	_DimmerLights
 15238  1F5F                     l881:	
 15239                           
 15240                           ;Dimmer_B1.c: 319: }
 15241                           ;Dimmer_B1.c: 322: if (lights == 2) {
 15242  1F5F  0821               	movf	DimmerLightsPointSelect@lights,w
 15243  1F60  3A02               	xorlw	2
 15244  1F61  1D03               	skipz
 15245  1F62  2F67               	goto	l882
 15246                           
 15247                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 15248  1F63  30C5               	movlw	_DimmerLights2& (0+255)
 15249  1F64  00A0               	movwf	??_DimmerLightsPointSelect
 15250  1F65  0820               	movf	??_DimmerLightsPointSelect,w
 15251  1F66  00FB               	movwf	_DimmerLights
 15252  1F67                     l882:	
 15253                           
 15254                           ;Dimmer_B1.c: 324: }
 15255                           ;Dimmer_B1.c: 327: if (lights == 3) {
 15256  1F67  0821               	movf	DimmerLightsPointSelect@lights,w
 15257  1F68  3A03               	xorlw	3
 15258  1F69  1D03               	skipz
 15259  1F6A  0008               	return
 15260                           
 15261                           ;Dimmer_B1.c: 328: DimmerLights = &DimmerLights3;
 15262  1F6B  30D4               	movlw	_DimmerLights3& (0+255)
 15263  1F6C  00A0               	movwf	??_DimmerLightsPointSelect
 15264  1F6D  0820               	movf	??_DimmerLightsPointSelect,w
 15265  1F6E  00FB               	movwf	_DimmerLights
 15266  1F6F  0008               	return
 15267  1F70                     __end_of_DimmerLightsPointSelect:	
 15268                           
 15269                           	psect	text99
 15270  17A7                     __ptext99:	
 15271 ;; *************** function _setBuz *****************
 15272 ;; Defined at:
 15273 ;;		line 22 in file "../src/Buzzer_B1.c"
 15274 ;; Parameters:    Size  Location     Type
 15275 ;;  count           1    wreg     unsigned char 
 15276 ;;  time            2    9[BANK0 ] int 
 15277 ;; Auto vars:     Size  Location     Type
 15278 ;;  count           1   12[BANK0 ] unsigned char 
 15279 ;; Return value:  Size  Location     Type
 15280 ;;		None               void
 15281 ;; Registers used:
 15282 ;;		wreg, status,2, status,0, pclath, cstack
 15283 ;; Tracked objects:
 15284 ;;		On entry : 0/0
 15285 ;;		On exit  : 0/0
 15286 ;;		Unchanged: 0/0
 15287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15288 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;Total ram usage:        4 bytes
 15293 ;; Hardware stack levels used:    1
 15294 ;; Hardware stack levels required when called:    6
 15295 ;; This function calls:
 15296 ;;		___awdiv
 15297 ;; This function is called by:
 15298 ;;		_DlyOff_Main
 15299 ;;		_setDimmerLights_Main
 15300 ;;		_DimmerLights_Exceptions
 15301 ;;		_my_Main
 15302 ;;		_setOverTemp_Exceptions
 15303 ;;		_setLog_Code
 15304 ;;		_setControl_Lights_Table
 15305 ;;		_setRFSW_Control
 15306 ;;		_setSw_Main
 15307 ;;		_Sw_DimmerOnFunc
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           
 15312                           ;psect for function _setBuz
 15313  17A7                     _setBuz:	
 15314                           
 15315                           ;incstack = 0
 15316                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15317                           ;setBuz@count stored from wreg
 15318  17A7  0020               	movlb	0	; select bank0
 15319  17A8  00AC               	movwf	setBuz@count
 15320                           
 15321                           ;Buzzer_B1.c: 23: time /= 10;
 15322  17A9  300A               	movlw	10
 15323  17AA  00A0               	movwf	___awdiv@divisor
 15324  17AB  3000               	movlw	0
 15325  17AC  00A1               	movwf	___awdiv@divisor+1
 15326  17AD  082A               	movf	setBuz@time+1,w
 15327  17AE  01A3               	clrf	___awdiv@dividend+1
 15328  17AF  07A3               	addwf	___awdiv@dividend+1,f
 15329  17B0  0829               	movf	setBuz@time,w
 15330  17B1  01A2               	clrf	___awdiv@dividend
 15331  17B2  07A2               	addwf	___awdiv@dividend,f
 15332  17B3  3196  26FE  3197   	fcall	___awdiv
 15333  17B6  0020               	movlb	0	; select bank0
 15334  17B7  0821               	movf	?___awdiv+1,w
 15335  17B8  01AA               	clrf	setBuz@time+1
 15336  17B9  07AA               	addwf	setBuz@time+1,f
 15337  17BA  0820               	movf	?___awdiv,w
 15338  17BB  01A9               	clrf	setBuz@time
 15339  17BC  07A9               	addwf	setBuz@time,f
 15340                           
 15341                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15342  17BD  0021               	movlb	1	; select bank1
 15343  17BE  1C36               	btfss	_Buz1^(0+128),0
 15344  17BF  0008               	return
 15345                           
 15346                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15347  17C0  18B6               	btfsc	_Buz1^(0+128),1
 15348  17C1  2FD8               	goto	l114
 15349                           
 15350                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15351  17C2  14B6               	bsf	_Buz1^(0+128),1
 15352                           
 15353                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15354  17C3  01B7               	clrf	(_Buz1^(0+128)+1)
 15355  17C4  01B8               	clrf	((_Buz1+1)^(0+128)+1)
 15356                           
 15357                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15358  17C5  0020               	movlb	0	; select bank0
 15359  17C6  082C               	movf	setBuz@count,w
 15360  17C7  00AB               	movwf	??_setBuz
 15361  17C8  082B               	movf	??_setBuz,w
 15362  17C9  0021               	movlb	1	; select bank1
 15363  17CA  00B9               	movwf	(_Buz1^(0+128)+3)
 15364                           
 15365                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15366  17CB  0020               	movlb	0	; select bank0
 15367  17CC  082A               	movf	setBuz@time+1,w
 15368  17CD  0021               	movlb	1	; select bank1
 15369  17CE  01BD               	clrf	((_Buz1+1)^(0+128)+6)
 15370  17CF  07BD               	addwf	((_Buz1+1)^(0+128)+6),f
 15371  17D0  0020               	movlb	0	; select bank0
 15372  17D1  0829               	movf	setBuz@time,w
 15373  17D2  0021               	movlb	1	; select bank1
 15374  17D3  01BC               	clrf	(_Buz1^(0+128)+6)
 15375  17D4  07BC               	addwf	(_Buz1^(0+128)+6),f
 15376                           
 15377                           ;Buzzer_B1.c: 30: RB3 = 1;
 15378  17D5  0020               	movlb	0	; select bank0
 15379  17D6  158D               	bsf	13,3	;volatile
 15380                           
 15381                           ;Buzzer_B1.c: 31: } else {
 15382  17D7  0008               	return
 15383  17D8                     l114:	
 15384                           
 15385                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15386  17D8  19B6               	btfsc	_Buz1^(0+128),3
 15387  17D9  2FEC               	goto	l116
 15388                           
 15389                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15390  17DA  15B6               	bsf	_Buz1^(0+128),3
 15391                           
 15392                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15393  17DB  0020               	movlb	0	; select bank0
 15394  17DC  082C               	movf	setBuz@count,w
 15395  17DD  00AB               	movwf	??_setBuz
 15396  17DE  082B               	movf	??_setBuz,w
 15397  17DF  0021               	movlb	1	; select bank1
 15398  17E0  00BA               	movwf	(_Buz1^(0+128)+4)
 15399                           
 15400                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15401  17E1  0020               	movlb	0	; select bank0
 15402  17E2  082A               	movf	setBuz@time+1,w
 15403  17E3  0021               	movlb	1	; select bank1
 15404  17E4  01BF               	clrf	((_Buz1+1)^(0+128)+8)
 15405  17E5  07BF               	addwf	((_Buz1+1)^(0+128)+8),f
 15406  17E6  0020               	movlb	0	; select bank0
 15407  17E7  0829               	movf	setBuz@time,w
 15408  17E8  0021               	movlb	1	; select bank1
 15409  17E9  01BE               	clrf	(_Buz1^(0+128)+8)
 15410  17EA  07BE               	addwf	(_Buz1^(0+128)+8),f
 15411                           
 15412                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15413  17EB  0008               	return
 15414  17EC                     l116:	
 15415  17EC  1A36               	btfsc	_Buz1^(0+128),4
 15416  17ED  0008               	return
 15417                           
 15418                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15419  17EE  1636               	bsf	_Buz1^(0+128),4
 15420                           
 15421                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15422  17EF  0020               	movlb	0	; select bank0
 15423  17F0  082C               	movf	setBuz@count,w
 15424  17F1  00AB               	movwf	??_setBuz
 15425  17F2  082B               	movf	??_setBuz,w
 15426  17F3  0021               	movlb	1	; select bank1
 15427  17F4  00BB               	movwf	(_Buz1^(0+128)+5)
 15428                           
 15429                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15430  17F5  0020               	movlb	0	; select bank0
 15431  17F6  082A               	movf	setBuz@time+1,w
 15432  17F7  0021               	movlb	1	; select bank1
 15433  17F8  01C1               	clrf	((_Buz1+1)^(0+128)+10)
 15434  17F9  07C1               	addwf	((_Buz1+1)^(0+128)+10),f
 15435  17FA  0020               	movlb	0	; select bank0
 15436  17FB  0829               	movf	setBuz@time,w
 15437  17FC  0021               	movlb	1	; select bank1
 15438  17FD  01C0               	clrf	(_Buz1^(0+128)+10)
 15439  17FE  07C0               	addwf	(_Buz1^(0+128)+10),f
 15440  17FF  0008               	return
 15441  1800                     __end_of_setBuz:	
 15442                           
 15443                           	psect	text100
 15444  16FE                     __ptext100:	
 15445 ;; *************** function ___awdiv *****************
 15446 ;; Defined at:
 15447 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15448 ;; Parameters:    Size  Location     Type
 15449 ;;  divisor         2    0[BANK0 ] int 
 15450 ;;  dividend        2    2[BANK0 ] int 
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;  quotient        2    7[BANK0 ] int 
 15453 ;;  sign            1    6[BANK0 ] unsigned char 
 15454 ;;  counter         1    5[BANK0 ] unsigned char 
 15455 ;; Return value:  Size  Location     Type
 15456 ;;                  2    0[BANK0 ] int 
 15457 ;; Registers used:
 15458 ;;		wreg, status,2, status,0
 15459 ;; Tracked objects:
 15460 ;;		On entry : 0/0
 15461 ;;		On exit  : 0/0
 15462 ;;		Unchanged: 0/0
 15463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15464 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15465 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15467 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15468 ;;Total ram usage:        9 bytes
 15469 ;; Hardware stack levels used:    1
 15470 ;; Hardware stack levels required when called:    5
 15471 ;; This function calls:
 15472 ;;		Nothing
 15473 ;; This function is called by:
 15474 ;;		_setBuz
 15475 ;; This function uses a non-reentrant model
 15476 ;;
 15477                           
 15478                           
 15479                           ;psect for function ___awdiv
 15480  16FE                     ___awdiv:	
 15481                           
 15482                           ;incstack = 0
 15483                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15484  16FE  0020               	movlb	0	; select bank0
 15485  16FF  01A6               	clrf	___awdiv@sign
 15486  1700  1FA1               	btfss	___awdiv@divisor+1,7
 15487  1701  2F09               	goto	l6168
 15488  1702  09A0               	comf	___awdiv@divisor,f
 15489  1703  09A1               	comf	___awdiv@divisor+1,f
 15490  1704  0AA0               	incf	___awdiv@divisor,f
 15491  1705  1903               	skipnz
 15492  1706  0AA1               	incf	___awdiv@divisor+1,f
 15493  1707  01A6               	clrf	___awdiv@sign
 15494  1708  0AA6               	incf	___awdiv@sign,f
 15495  1709                     l6168:	
 15496  1709  1FA3               	btfss	___awdiv@dividend+1,7
 15497  170A  2F14               	goto	l6174
 15498  170B  09A2               	comf	___awdiv@dividend,f
 15499  170C  09A3               	comf	___awdiv@dividend+1,f
 15500  170D  0AA2               	incf	___awdiv@dividend,f
 15501  170E  1903               	skipnz
 15502  170F  0AA3               	incf	___awdiv@dividend+1,f
 15503  1710  3001               	movlw	1
 15504  1711  00A4               	movwf	??___awdiv
 15505  1712  0824               	movf	??___awdiv,w
 15506  1713  06A6               	xorwf	___awdiv@sign,f
 15507  1714                     l6174:	
 15508  1714  01A7               	clrf	___awdiv@quotient
 15509  1715  01A8               	clrf	___awdiv@quotient+1
 15510  1716  0821               	movf	___awdiv@divisor+1,w
 15511  1717  0420               	iorwf	___awdiv@divisor,w
 15512  1718  1903               	skipnz
 15513  1719  2F43               	goto	l6196
 15514  171A  01A5               	clrf	___awdiv@counter
 15515  171B  0AA5               	incf	___awdiv@counter,f
 15516  171C                     l6184:	
 15517  171C  1BA1               	btfsc	___awdiv@divisor+1,7
 15518  171D  2F28               	goto	l6186
 15519  171E  3001               	movlw	1
 15520  171F                     u4865:	
 15521  171F  35A0               	lslf	___awdiv@divisor,f
 15522  1720  0DA1               	rlf	___awdiv@divisor+1,f
 15523  1721  0B89               	decfsz	9,f
 15524  1722  2F1F               	goto	u4865
 15525  1723  3001               	movlw	1
 15526  1724  00A4               	movwf	??___awdiv
 15527  1725  0824               	movf	??___awdiv,w
 15528  1726  07A5               	addwf	___awdiv@counter,f
 15529  1727  2F1C               	goto	l6184
 15530  1728                     l6186:	
 15531  1728  3001               	movlw	1
 15532  1729                     u4885:	
 15533  1729  35A7               	lslf	___awdiv@quotient,f
 15534  172A  0DA8               	rlf	___awdiv@quotient+1,f
 15535  172B  0B89               	decfsz	9,f
 15536  172C  2F29               	goto	u4885
 15537  172D  0821               	movf	___awdiv@divisor+1,w
 15538  172E  0223               	subwf	___awdiv@dividend+1,w
 15539  172F  1D03               	skipz
 15540  1730  2F33               	goto	u4895
 15541  1731  0820               	movf	___awdiv@divisor,w
 15542  1732  0222               	subwf	___awdiv@dividend,w
 15543  1733                     u4895:	
 15544  1733  1C03               	skipc
 15545  1734  2F3A               	goto	l6192
 15546  1735  0820               	movf	___awdiv@divisor,w
 15547  1736  02A2               	subwf	___awdiv@dividend,f
 15548  1737  0821               	movf	___awdiv@divisor+1,w
 15549  1738  3BA3               	subwfb	___awdiv@dividend+1,f
 15550  1739  1427               	bsf	___awdiv@quotient,0
 15551  173A                     l6192:	
 15552  173A  3001               	movlw	1
 15553  173B                     u4905:	
 15554  173B  36A1               	lsrf	___awdiv@divisor+1,f
 15555  173C  0CA0               	rrf	___awdiv@divisor,f
 15556  173D  0B89               	decfsz	9,f
 15557  173E  2F3B               	goto	u4905
 15558  173F  3001               	movlw	1
 15559  1740  02A5               	subwf	___awdiv@counter,f
 15560  1741  1D03               	btfss	3,2
 15561  1742  2F28               	goto	l6186
 15562  1743                     l6196:	
 15563  1743  0826               	movf	___awdiv@sign,w
 15564  1744  1903               	btfsc	3,2
 15565  1745  2F4B               	goto	l6200
 15566  1746  09A7               	comf	___awdiv@quotient,f
 15567  1747  09A8               	comf	___awdiv@quotient+1,f
 15568  1748  0AA7               	incf	___awdiv@quotient,f
 15569  1749  1903               	skipnz
 15570  174A  0AA8               	incf	___awdiv@quotient+1,f
 15571  174B                     l6200:	
 15572  174B  0828               	movf	___awdiv@quotient+1,w
 15573  174C  01A1               	clrf	?___awdiv+1
 15574  174D  07A1               	addwf	?___awdiv+1,f
 15575  174E  0827               	movf	___awdiv@quotient,w
 15576  174F  01A0               	clrf	?___awdiv
 15577  1750  07A0               	addwf	?___awdiv,f
 15578  1751  0008               	return
 15579  1752                     __end_of___awdiv:	
 15580                           
 15581                           	psect	text101
 15582  1CD7                     __ptext101:	
 15583 ;; *************** function _DelayOff_Initialization *****************
 15584 ;; Defined at:
 15585 ;;		line 26 in file "../src/DelayOff_B1.c"
 15586 ;; Parameters:    Size  Location     Type
 15587 ;;		None
 15588 ;; Auto vars:     Size  Location     Type
 15589 ;;		None
 15590 ;; Return value:  Size  Location     Type
 15591 ;;		None               void
 15592 ;; Registers used:
 15593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15594 ;; Tracked objects:
 15595 ;;		On entry : 0/0
 15596 ;;		On exit  : 0/0
 15597 ;;		Unchanged: 0/0
 15598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;Total ram usage:        0 bytes
 15604 ;; Hardware stack levels used:    1
 15605 ;; Hardware stack levels required when called:    7
 15606 ;; This function calls:
 15607 ;;		_DlyOff_Initialization
 15608 ;; This function is called by:
 15609 ;;		_main
 15610 ;; This function uses a non-reentrant model
 15611 ;;
 15612                           
 15613                           
 15614                           ;psect for function _DelayOff_Initialization
 15615  1CD7                     _DelayOff_Initialization:	
 15616                           
 15617                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15618                           
 15619                           ;incstack = 0
 15620                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15621  1CD7  3001               	movlw	1
 15622  1CD8  319C  24C0  319C   	fcall	_DlyOff_Initialization
 15623                           
 15624                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 15625  1CDB  3002               	movlw	2
 15626  1CDC  319C  24C0  319C   	fcall	_DlyOff_Initialization
 15627                           
 15628                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 15629  1CDF  3003               	movlw	3
 15630  1CE0  319C  24C0         	fcall	_DlyOff_Initialization
 15631  1CE2  0008               	return
 15632  1CE3                     __end_of_DelayOff_Initialization:	
 15633                           
 15634                           	psect	text102
 15635  1CC0                     __ptext102:	
 15636 ;; *************** function _DlyOff_Initialization *****************
 15637 ;; Defined at:
 15638 ;;		line 56 in file "../src/DelayOff_B1.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  sw              1    wreg     unsigned char 
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;  sw              1    2[BANK0 ] unsigned char 
 15643 ;; Return value:  Size  Location     Type
 15644 ;;		None               void
 15645 ;; Registers used:
 15646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/0
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;Total ram usage:        1 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    6
 15659 ;; This function calls:
 15660 ;;		_DelayOffPointSelect
 15661 ;; This function is called by:
 15662 ;;		_DelayOff_Initialization
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           
 15667                           ;psect for function _DlyOff_Initialization
 15668  1CC0                     _DlyOff_Initialization:	
 15669                           
 15670                           ;incstack = 0
 15671                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15672                           ;DlyOff_Initialization@sw stored from wreg
 15673  1CC0  0020               	movlb	0	; select bank0
 15674  1CC1  00A2               	movwf	DlyOff_Initialization@sw
 15675                           
 15676                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15677  1CC2  0822               	movf	DlyOff_Initialization@sw,w
 15678  1CC3  319F  27A9         	fcall	_DelayOffPointSelect
 15679                           
 15680                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15681  1CC5  087A               	movf	_DelayOff,w
 15682  1CC6  0086               	movwf	6
 15683  1CC7  3001               	movlw	1	; select bank2/3
 15684  1CC8  0087               	movwf	7
 15685  1CC9  1401               	bsf	1,0
 15686  1CCA  0008               	return
 15687  1CCB                     __end_of_DlyOff_Initialization:	
 15688                           
 15689                           	psect	text103
 15690  1FA9                     __ptext103:	
 15691 ;; *************** function _DelayOffPointSelect *****************
 15692 ;; Defined at:
 15693 ;;		line 7 in file "../src/DelayOff_B1.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;  sw              1    wreg     unsigned char 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;  sw              1    1[BANK0 ] unsigned char 
 15698 ;; Return value:  Size  Location     Type
 15699 ;;		None               void
 15700 ;; Registers used:
 15701 ;;		wreg
 15702 ;; Tracked objects:
 15703 ;;		On entry : 0/0
 15704 ;;		On exit  : 0/0
 15705 ;;		Unchanged: 0/0
 15706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15711 ;;Total ram usage:        2 bytes
 15712 ;; Hardware stack levels used:    1
 15713 ;; Hardware stack levels required when called:    5
 15714 ;; This function calls:
 15715 ;;		Nothing
 15716 ;; This function is called by:
 15717 ;;		_DlyOff_Initialization
 15718 ;;		_DlyOff_Main
 15719 ;;		_setDelayOff_GO
 15720 ;; This function uses a non-reentrant model
 15721 ;;
 15722                           
 15723                           
 15724                           ;psect for function _DelayOffPointSelect
 15725  1FA9                     _DelayOffPointSelect:	
 15726                           
 15727                           ;incstack = 0
 15728                           ; Regs used in _DelayOffPointSelect: [wreg]
 15729                           ;DelayOffPointSelect@sw stored from wreg
 15730  1FA9  0020               	movlb	0	; select bank0
 15731  1FAA  00A1               	movwf	DelayOffPointSelect@sw
 15732                           
 15733                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15734  1FAB  0821               	movf	DelayOffPointSelect@sw,w
 15735  1FAC  3A01               	xorlw	1
 15736  1FAD  1D03               	skipz
 15737  1FAE  2FB4               	goto	l6084
 15738                           
 15739                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15740  1FAF  304C               	movlw	_DlySw1& (0+255)
 15741  1FB0  00A0               	movwf	??_DelayOffPointSelect
 15742  1FB1  0820               	movf	??_DelayOffPointSelect,w
 15743  1FB2  00FA               	movwf	_DelayOff
 15744                           
 15745                           ;DelayOff_B1.c: 11: }
 15746  1FB3  0008               	return
 15747  1FB4                     l6084:	
 15748                           
 15749                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 15750  1FB4  0821               	movf	DelayOffPointSelect@sw,w
 15751  1FB5  3A02               	xorlw	2
 15752  1FB6  1D03               	skipz
 15753  1FB7  2FBD               	goto	l6088
 15754                           
 15755                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 15756  1FB8  3051               	movlw	_DlySw2& (0+255)
 15757  1FB9  00A0               	movwf	??_DelayOffPointSelect
 15758  1FBA  0820               	movf	??_DelayOffPointSelect,w
 15759  1FBB  00FA               	movwf	_DelayOff
 15760                           
 15761                           ;DelayOff_B1.c: 16: }
 15762  1FBC  0008               	return
 15763  1FBD                     l6088:	
 15764                           
 15765                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 15766  1FBD  0821               	movf	DelayOffPointSelect@sw,w
 15767  1FBE  3A03               	xorlw	3
 15768  1FBF  1D03               	skipz
 15769  1FC0  0008               	return
 15770                           
 15771                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 15772  1FC1  3056               	movlw	_DlySw3& (0+255)
 15773  1FC2  00A0               	movwf	??_DelayOffPointSelect
 15774  1FC3  0820               	movf	??_DelayOffPointSelect,w
 15775  1FC4  00FA               	movwf	_DelayOff
 15776  1FC5  0008               	return
 15777  1FC6                     __end_of_DelayOffPointSelect:	
 15778                           
 15779                           	psect	text104
 15780  1E66                     __ptext104:	
 15781 ;; *************** function _CC2500_PowerOnInitial *****************
 15782 ;; Defined at:
 15783 ;;		line 111 in file "../src/CC2500_B1.c"
 15784 ;; Parameters:    Size  Location     Type
 15785 ;;		None
 15786 ;; Auto vars:     Size  Location     Type
 15787 ;;		None
 15788 ;; Return value:  Size  Location     Type
 15789 ;;		None               void
 15790 ;; Registers used:
 15791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15792 ;; Tracked objects:
 15793 ;;		On entry : 0/0
 15794 ;;		On exit  : 0/0
 15795 ;;		Unchanged: 0/0
 15796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;Total ram usage:        0 bytes
 15802 ;; Hardware stack levels used:    1
 15803 ;; Hardware stack levels required when called:    8
 15804 ;; This function calls:
 15805 ;;		_CC2500_ClearRXFIFO
 15806 ;;		_CC2500_ClearTXFIFO
 15807 ;;		_CC2500_FrequencyCabr
 15808 ;;		_CC2500_InitPATable
 15809 ;;		_CC2500_InitSetREG
 15810 ;;		_CC2500_PowerRST
 15811 ;;		_CC2500_SIDLEMode
 15812 ;; This function is called by:
 15813 ;;		_main
 15814 ;; This function uses a non-reentrant model
 15815 ;;
 15816                           
 15817                           
 15818                           ;psect for function _CC2500_PowerOnInitial
 15819  1E66                     _CC2500_PowerOnInitial:	
 15820                           
 15821                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 15822                           
 15823                           ;incstack = 0
 15824                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15825  1E66  3194  246F  319E   	fcall	_CC2500_PowerRST
 15826                           
 15827                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 15828  1E69  3192  2225  319E   	fcall	_CC2500_InitSetREG
 15829                           
 15830                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 15831  1E6C  3190  208A  319E   	fcall	_CC2500_InitPATable
 15832                           
 15833                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 15834  1E6F  319C  2459  319E   	fcall	_CC2500_ClearTXFIFO
 15835                           
 15836                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 15837  1E72  319C  2455  319E   	fcall	_CC2500_ClearRXFIFO
 15838                           
 15839                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 15840  1E75  319C  24CB  319E   	fcall	_CC2500_FrequencyCabr
 15841                           
 15842                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 15843  1E78  319C  245D         	fcall	_CC2500_SIDLEMode
 15844  1E7A  0008               	return
 15845  1E7B                     __end_of_CC2500_PowerOnInitial:	
 15846                           
 15847                           	psect	text105
 15848  1C5D                     __ptext105:	
 15849 ;; *************** function _CC2500_SIDLEMode *****************
 15850 ;; Defined at:
 15851 ;;		line 201 in file "../src/CC2500_B1.c"
 15852 ;; Parameters:    Size  Location     Type
 15853 ;;		None
 15854 ;; Auto vars:     Size  Location     Type
 15855 ;;		None
 15856 ;; Return value:  Size  Location     Type
 15857 ;;		None               void
 15858 ;; Registers used:
 15859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15860 ;; Tracked objects:
 15861 ;;		On entry : 0/0
 15862 ;;		On exit  : 0/0
 15863 ;;		Unchanged: 0/0
 15864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15869 ;;Total ram usage:        0 bytes
 15870 ;; Hardware stack levels used:    1
 15871 ;; Hardware stack levels required when called:    7
 15872 ;; This function calls:
 15873 ;;		_CC2500_WriteCommand
 15874 ;; This function is called by:
 15875 ;;		_CC2500_PowerOnInitial
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           
 15880                           ;psect for function _CC2500_SIDLEMode
 15881  1C5D                     _CC2500_SIDLEMode:	
 15882                           
 15883                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x36);
 15884                           
 15885                           ;incstack = 0
 15886                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15887  1C5D  3036               	movlw	54
 15888  1C5E  319F  2721         	fcall	_CC2500_WriteCommand
 15889  1C60  0008               	return
 15890  1C61                     __end_of_CC2500_SIDLEMode:	
 15891                           
 15892                           	psect	text106
 15893  146F                     __ptext106:	
 15894 ;; *************** function _CC2500_PowerRST *****************
 15895 ;; Defined at:
 15896 ;;		line 124 in file "../src/CC2500_B1.c"
 15897 ;; Parameters:    Size  Location     Type
 15898 ;;		None
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;		None
 15901 ;; Return value:  Size  Location     Type
 15902 ;;		None               void
 15903 ;; Registers used:
 15904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15905 ;; Tracked objects:
 15906 ;;		On entry : 0/0
 15907 ;;		On exit  : 0/0
 15908 ;;		Unchanged: 0/0
 15909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;Total ram usage:        1 bytes
 15915 ;; Hardware stack levels used:    1
 15916 ;; Hardware stack levels required when called:    6
 15917 ;; This function calls:
 15918 ;;		_CC2500_WriteByte
 15919 ;;		_DelayTime_1us
 15920 ;;		_Timeout_Counter
 15921 ;;		_set_TimeoutCleared
 15922 ;; This function is called by:
 15923 ;;		_CC2500_PowerOnInitial
 15924 ;; This function uses a non-reentrant model
 15925 ;;
 15926                           
 15927                           
 15928                           ;psect for function _CC2500_PowerRST
 15929  146F                     _CC2500_PowerRST:	
 15930                           
 15931                           ;CC2500_B1.c: 125: RC1 = 0;
 15932                           
 15933                           ;incstack = 0
 15934                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15935  146F  0020               	movlb	0	; select bank0
 15936  1470  108E               	bcf	14,1	;volatile
 15937                           
 15938                           ;CC2500_B1.c: 126: RC0 = 0;
 15939  1471  100E               	bcf	14,0	;volatile
 15940                           
 15941                           ;CC2500_B1.c: 127: RC4 = 1;
 15942  1472  160E               	bsf	14,4	;volatile
 15943                           
 15944                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 15945  1473  300A               	movlw	10
 15946  1474  00A0               	movwf	DelayTime_1us@count
 15947  1475  3000               	movlw	0
 15948  1476  00A1               	movwf	DelayTime_1us@count+1
 15949  1477  3191  21D6  3194   	fcall	_DelayTime_1us
 15950                           
 15951                           ;CC2500_B1.c: 129: RC4 = 0;
 15952  147A  0020               	movlb	0	; select bank0
 15953  147B  120E               	bcf	14,4	;volatile
 15954                           
 15955                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 15956  147C  300A               	movlw	10
 15957  147D  00A0               	movwf	DelayTime_1us@count
 15958  147E  3000               	movlw	0
 15959  147F  00A1               	movwf	DelayTime_1us@count+1
 15960  1480  3191  21D6  3194   	fcall	_DelayTime_1us
 15961                           
 15962                           ;CC2500_B1.c: 131: RC4 = 1;
 15963  1483  0020               	movlb	0	; select bank0
 15964  1484  160E               	bsf	14,4	;volatile
 15965                           
 15966                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 15967  1485  3028               	movlw	40
 15968  1486  00A0               	movwf	DelayTime_1us@count
 15969  1487  3000               	movlw	0
 15970  1488  00A1               	movwf	DelayTime_1us@count+1
 15971  1489  3191  21D6  3194   	fcall	_DelayTime_1us
 15972                           
 15973                           ;CC2500_B1.c: 133: RC4 = 0;
 15974  148C  0020               	movlb	0	; select bank0
 15975  148D  120E               	bcf	14,4	;volatile
 15976                           
 15977                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 15978  148E  3030               	movlw	48
 15979  148F  00A6               	movwf	??_CC2500_PowerRST
 15980  1490  0826               	movf	??_CC2500_PowerRST,w
 15981  1491  0021               	movlb	1	; select bank1
 15982  1492  00D3               	movwf	_SPI0Buffer^(0+128)
 15983                           
 15984                           ;CC2500_B1.c: 135: while (RC2 == 1 && myMain.Timeout == 0) {
 15985  1493  2C97               	goto	l7186
 15986  1494                     l7184:	
 15987                           
 15988                           ;CC2500_B1.c: 136: Timeout_Counter();
 15989  1494  319E  26A6  3194   	fcall	_Timeout_Counter
 15990  1497                     l7186:	
 15991  1497  0020               	movlb	0	; select bank0
 15992  1498  1D0E               	btfss	14,2	;volatile
 15993  1499  2C9D               	goto	l7190
 15994  149A  0021               	movlb	1	; select bank1
 15995  149B  1D2F               	btfss	(_myMain^(0+128)+15),2
 15996  149C  2C94               	goto	l7184
 15997  149D                     l7190:	
 15998                           
 15999                           ;CC2500_B1.c: 137: };
 16000                           ;CC2500_B1.c: 138: set_TimeoutCleared();
 16001  149D  3190  2066  3194   	fcall	_set_TimeoutCleared
 16002                           
 16003                           ;CC2500_B1.c: 139: CC2500_WriteByte();
 16004  14A0  319E  26EE  3194   	fcall	_CC2500_WriteByte
 16005                           
 16006                           ;CC2500_B1.c: 140: while (RC2 == 1 && myMain.Timeout == 0) {
 16007  14A3  2CA7               	goto	l7196
 16008  14A4                     l7194:	
 16009                           
 16010                           ;CC2500_B1.c: 141: Timeout_Counter();
 16011  14A4  319E  26A6  3194   	fcall	_Timeout_Counter
 16012  14A7                     l7196:	
 16013  14A7  0020               	movlb	0	; select bank0
 16014  14A8  1D0E               	btfss	14,2	;volatile
 16015  14A9  2CAD               	goto	l7200
 16016  14AA  0021               	movlb	1	; select bank1
 16017  14AB  1D2F               	btfss	(_myMain^(0+128)+15),2
 16018  14AC  2CA4               	goto	l7194
 16019  14AD                     l7200:	
 16020                           
 16021                           ;CC2500_B1.c: 142: };
 16022                           ;CC2500_B1.c: 143: set_TimeoutCleared();
 16023  14AD  3190  2066         	fcall	_set_TimeoutCleared
 16024                           
 16025                           ;CC2500_B1.c: 144: RC0 = 0;
 16026  14AF  0020               	movlb	0	; select bank0
 16027  14B0  100E               	bcf	14,0	;volatile
 16028                           
 16029                           ;CC2500_B1.c: 145: RC4 = 1;
 16030  14B1  160E               	bsf	14,4	;volatile
 16031  14B2  0008               	return
 16032  14B3                     __end_of_CC2500_PowerRST:	
 16033                           
 16034                           	psect	text107
 16035  1225                     __ptext107:	
 16036 ;; *************** function _CC2500_InitSetREG *****************
 16037 ;; Defined at:
 16038 ;;		line 151 in file "../src/CC2500_B1.c"
 16039 ;; Parameters:    Size  Location     Type
 16040 ;;		None
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16043 ;;  temp2           1    7[BANK0 ] unsigned char 
 16044 ;;  temp1           1    6[BANK0 ] unsigned char 
 16045 ;; Return value:  Size  Location     Type
 16046 ;;		None               void
 16047 ;; Registers used:
 16048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16049 ;; Tracked objects:
 16050 ;;		On entry : 0/0
 16051 ;;		On exit  : 0/0
 16052 ;;		Unchanged: 0/0
 16053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;Total ram usage:        4 bytes
 16059 ;; Hardware stack levels used:    1
 16060 ;; Hardware stack levels required when called:    7
 16061 ;; This function calls:
 16062 ;;		_CC2500_WriteREG
 16063 ;; This function is called by:
 16064 ;;		_CC2500_PowerOnInitial
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _CC2500_InitSetREG
 16070  1225                     _CC2500_InitSetREG:	
 16071                           
 16072                           ;CC2500_B1.c: 152: unsigned char loop_c;
 16073                           ;CC2500_B1.c: 153: unsigned char temp1, temp2;
 16074                           ;CC2500_B1.c: 155: for (loop_c = 0; loop_c < 47; loop_c++) {
 16075                           
 16076                           ;incstack = 0
 16077                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16078  1225  0020               	movlb	0	; select bank0
 16079  1226  01A8               	clrf	CC2500_InitSetREG@loop_c
 16080  1227                     L11:	
 16081  1227  302F               	movlw	47
 16082  1228  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16083  1229  1803               	btfsc	3,0
 16084  122A  0008               	return
 16085                           
 16086                           ;CC2500_B1.c: 156: temp1 = CC2500_registers_address[loop_c];
 16087  122B  0828               	movf	CC2500_InitSetREG@loop_c,w
 16088  122C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16089  122D  0084               	movwf	4
 16090  122E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16091  122F  1803               	skipnc
 16092  1230  3E01               	addlw	1
 16093  1231  0085               	movwf	5
 16094  1232  0800               	movf	0,w	;code access
 16095  1233  00A5               	movwf	??_CC2500_InitSetREG
 16096  1234  0825               	movf	??_CC2500_InitSetREG,w
 16097  1235  00A6               	movwf	CC2500_InitSetREG@temp1
 16098                           
 16099                           ;CC2500_B1.c: 157: temp2 = CC2500_rfSettings[loop_c];
 16100  1236  0828               	movf	CC2500_InitSetREG@loop_c,w
 16101  1237  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16102  1238  0084               	movwf	4
 16103  1239  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16104  123A  1803               	skipnc
 16105  123B  3E01               	addlw	1
 16106  123C  0085               	movwf	5
 16107  123D  0800               	movf	0,w	;code access
 16108  123E  00A5               	movwf	??_CC2500_InitSetREG
 16109  123F  0825               	movf	??_CC2500_InitSetREG,w
 16110  1240  00A7               	movwf	CC2500_InitSetREG@temp2
 16111                           
 16112                           ;CC2500_B1.c: 159: CC2500_WriteREG(temp1, temp2);
 16113  1241  0827               	movf	CC2500_InitSetREG@temp2,w
 16114  1242  00A5               	movwf	??_CC2500_InitSetREG
 16115  1243  0825               	movf	??_CC2500_InitSetREG,w
 16116  1244  00A2               	movwf	CC2500_WriteREG@value
 16117  1245  0826               	movf	CC2500_InitSetREG@temp1,w
 16118  1246  3191  216B  3192   	fcall	_CC2500_WriteREG
 16119  1249  3001               	movlw	1
 16120  124A  0020               	movlb	0	; select bank0
 16121  124B  00A5               	movwf	??_CC2500_InitSetREG
 16122  124C  0825               	movf	??_CC2500_InitSetREG,w
 16123  124D  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16124  124E  2A27               	goto	L11
 16125  124F                     __end_of_CC2500_InitSetREG:	
 16126                           
 16127                           	psect	text108
 16128  108A                     __ptext108:	
 16129 ;; *************** function _CC2500_InitPATable *****************
 16130 ;; Defined at:
 16131 ;;		line 166 in file "../src/CC2500_B1.c"
 16132 ;; Parameters:    Size  Location     Type
 16133 ;;		None
 16134 ;; Auto vars:     Size  Location     Type
 16135 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16136 ;;  temp            1    6[BANK0 ] unsigned char 
 16137 ;; Return value:  Size  Location     Type
 16138 ;;		None               void
 16139 ;; Registers used:
 16140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16141 ;; Tracked objects:
 16142 ;;		On entry : 0/0
 16143 ;;		On exit  : 0/0
 16144 ;;		Unchanged: 0/0
 16145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;Total ram usage:        3 bytes
 16151 ;; Hardware stack levels used:    1
 16152 ;; Hardware stack levels required when called:    7
 16153 ;; This function calls:
 16154 ;;		_CC2500_WriteREG
 16155 ;; This function is called by:
 16156 ;;		_CC2500_PowerOnInitial
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           
 16161                           ;psect for function _CC2500_InitPATable
 16162  108A                     _CC2500_InitPATable:	
 16163                           
 16164                           ;CC2500_B1.c: 167: unsigned char loop_d;
 16165                           ;CC2500_B1.c: 168: unsigned char temp;
 16166                           ;CC2500_B1.c: 170: for (loop_d = 0; loop_d < 8; loop_d++) {
 16167                           
 16168                           ;incstack = 0
 16169                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16170  108A  0020               	movlb	0	; select bank0
 16171  108B  01A7               	clrf	CC2500_InitPATable@loop_d
 16172  108C                     L12:	
 16173  108C  3008               	movlw	8
 16174  108D  0227               	subwf	CC2500_InitPATable@loop_d,w
 16175  108E  1803               	btfsc	3,0
 16176  108F  0008               	return
 16177                           
 16178                           ;CC2500_B1.c: 171: temp = CC2500_patable_vaule[loop_d];
 16179  1090  0827               	movf	CC2500_InitPATable@loop_d,w
 16180  1091  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16181  1092  0084               	movwf	4
 16182  1093  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16183  1094  1803               	skipnc
 16184  1095  3E01               	addlw	1
 16185  1096  0085               	movwf	5
 16186  1097  0800               	movf	0,w	;code access
 16187  1098  00A5               	movwf	??_CC2500_InitPATable
 16188  1099  0825               	movf	??_CC2500_InitPATable,w
 16189  109A  00A6               	movwf	CC2500_InitPATable@temp
 16190                           
 16191                           ;CC2500_B1.c: 172: CC2500_WriteREG(0x3E, temp);
 16192  109B  0826               	movf	CC2500_InitPATable@temp,w
 16193  109C  00A5               	movwf	??_CC2500_InitPATable
 16194  109D  0825               	movf	??_CC2500_InitPATable,w
 16195  109E  00A2               	movwf	CC2500_WriteREG@value
 16196  109F  303E               	movlw	62
 16197  10A0  3191  216B  3190   	fcall	_CC2500_WriteREG
 16198  10A3  3001               	movlw	1
 16199  10A4  0020               	movlb	0	; select bank0
 16200  10A5  00A5               	movwf	??_CC2500_InitPATable
 16201  10A6  0825               	movf	??_CC2500_InitPATable,w
 16202  10A7  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16203  10A8  288C               	goto	L12
 16204  10A9                     __end_of_CC2500_InitPATable:	
 16205                           
 16206                           	psect	text109
 16207  116B                     __ptext109:	
 16208 ;; *************** function _CC2500_WriteREG *****************
 16209 ;; Defined at:
 16210 ;;		line 243 in file "../src/CC2500_B1.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  w_addr          1    wreg     unsigned char 
 16213 ;;  value           1    2[BANK0 ] unsigned char 
 16214 ;; Auto vars:     Size  Location     Type
 16215 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16216 ;; Return value:  Size  Location     Type
 16217 ;;		None               void
 16218 ;; Registers used:
 16219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16220 ;; Tracked objects:
 16221 ;;		On entry : 0/0
 16222 ;;		On exit  : 0/0
 16223 ;;		Unchanged: 0/0
 16224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16225 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;Total ram usage:        3 bytes
 16230 ;; Hardware stack levels used:    1
 16231 ;; Hardware stack levels required when called:    6
 16232 ;; This function calls:
 16233 ;;		_CC2500_WriteByte
 16234 ;;		_Timeout_Counter
 16235 ;;		_set_TimeoutCleared
 16236 ;; This function is called by:
 16237 ;;		_CC2500_InitSetREG
 16238 ;;		_CC2500_InitPATable
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           
 16243                           ;psect for function _CC2500_WriteREG
 16244  116B                     _CC2500_WriteREG:	
 16245                           
 16246                           ;incstack = 0
 16247                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16248                           ;CC2500_WriteREG@w_addr stored from wreg
 16249  116B  0020               	movlb	0	; select bank0
 16250  116C  00A4               	movwf	CC2500_WriteREG@w_addr
 16251                           
 16252                           ;CC2500_B1.c: 244: RC4 = 0;
 16253  116D  120E               	bcf	14,4	;volatile
 16254                           
 16255                           ;CC2500_B1.c: 245: SPI0Buffer = w_addr;
 16256  116E  0824               	movf	CC2500_WriteREG@w_addr,w
 16257  116F  00A3               	movwf	??_CC2500_WriteREG
 16258  1170  0823               	movf	??_CC2500_WriteREG,w
 16259  1171  0021               	movlb	1	; select bank1
 16260  1172  00D3               	movwf	_SPI0Buffer^(0+128)
 16261                           
 16262                           ;CC2500_B1.c: 246: while (RC2 == 1 && myMain.Timeout == 0) {
 16263  1173  2977               	goto	l6878
 16264  1174                     l6876:	
 16265                           
 16266                           ;CC2500_B1.c: 247: Timeout_Counter();
 16267  1174  319E  26A6  3191   	fcall	_Timeout_Counter
 16268  1177                     l6878:	
 16269  1177  0020               	movlb	0	; select bank0
 16270  1178  1D0E               	btfss	14,2	;volatile
 16271  1179  297D               	goto	l6882
 16272  117A  0021               	movlb	1	; select bank1
 16273  117B  1D2F               	btfss	(_myMain^(0+128)+15),2
 16274  117C  2974               	goto	l6876
 16275  117D                     l6882:	
 16276                           
 16277                           ;CC2500_B1.c: 248: };
 16278                           ;CC2500_B1.c: 249: set_TimeoutCleared();
 16279  117D  3190  2066  3191   	fcall	_set_TimeoutCleared
 16280                           
 16281                           ;CC2500_B1.c: 250: CC2500_WriteByte();
 16282  1180  319E  26EE  3191   	fcall	_CC2500_WriteByte
 16283                           
 16284                           ;CC2500_B1.c: 251: SPI0Buffer = value;
 16285  1183  0020               	movlb	0	; select bank0
 16286  1184  0822               	movf	CC2500_WriteREG@value,w
 16287  1185  00A3               	movwf	??_CC2500_WriteREG
 16288  1186  0823               	movf	??_CC2500_WriteREG,w
 16289  1187  0021               	movlb	1	; select bank1
 16290  1188  00D3               	movwf	_SPI0Buffer^(0+128)
 16291                           
 16292                           ;CC2500_B1.c: 252: CC2500_WriteByte();
 16293  1189  319E  26EE         	fcall	_CC2500_WriteByte
 16294                           
 16295                           ;CC2500_B1.c: 253: RC4 = 1;
 16296  118B  0020               	movlb	0	; select bank0
 16297  118C  160E               	bsf	14,4	;volatile
 16298  118D  0008               	return
 16299  118E                     __end_of_CC2500_WriteREG:	
 16300                           
 16301                           	psect	text110
 16302  1CCB                     __ptext110:	
 16303 ;; *************** function _CC2500_FrequencyCabr *****************
 16304 ;; Defined at:
 16305 ;;		line 193 in file "../src/CC2500_B1.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;		None
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;		None
 16310 ;; Return value:  Size  Location     Type
 16311 ;;		None               void
 16312 ;; Registers used:
 16313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;Total ram usage:        0 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    7
 16326 ;; This function calls:
 16327 ;;		_CC2500_WriteCommand
 16328 ;;		_DelayTime_1us
 16329 ;; This function is called by:
 16330 ;;		_CC2500_PowerOnInitial
 16331 ;; This function uses a non-reentrant model
 16332 ;;
 16333                           
 16334                           
 16335                           ;psect for function _CC2500_FrequencyCabr
 16336  1CCB                     _CC2500_FrequencyCabr:	
 16337                           
 16338                           ;CC2500_B1.c: 194: CC2500_WriteCommand(0x33);
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16342  1CCB  3033               	movlw	51
 16343  1CCC  319F  2721  319C   	fcall	_CC2500_WriteCommand
 16344                           
 16345                           ;CC2500_B1.c: 195: DelayTime_1us(1000);
 16346  1CCF  30E8               	movlw	232
 16347  1CD0  0020               	movlb	0	; select bank0
 16348  1CD1  00A0               	movwf	DelayTime_1us@count
 16349  1CD2  3003               	movlw	3
 16350  1CD3  00A1               	movwf	DelayTime_1us@count+1
 16351  1CD4  3191  21D6         	fcall	_DelayTime_1us
 16352  1CD6  0008               	return
 16353  1CD7                     __end_of_CC2500_FrequencyCabr:	
 16354                           
 16355                           	psect	text111
 16356  11D6                     __ptext111:	
 16357 ;; *************** function _DelayTime_1us *****************
 16358 ;; Defined at:
 16359 ;;		line 308 in file "../src/CC2500_B1.c"
 16360 ;; Parameters:    Size  Location     Type
 16361 ;;  count           2    0[BANK0 ] int 
 16362 ;; Auto vars:     Size  Location     Type
 16363 ;;  j               2    4[BANK0 ] unsigned int 
 16364 ;;  i               2    2[BANK0 ] unsigned int 
 16365 ;; Return value:  Size  Location     Type
 16366 ;;		None               void
 16367 ;; Registers used:
 16368 ;;		wreg, status,2
 16369 ;; Tracked objects:
 16370 ;;		On entry : 0/0
 16371 ;;		On exit  : 0/0
 16372 ;;		Unchanged: 0/0
 16373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16374 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16375 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;Total ram usage:        6 bytes
 16379 ;; Hardware stack levels used:    1
 16380 ;; Hardware stack levels required when called:    5
 16381 ;; This function calls:
 16382 ;;		Nothing
 16383 ;; This function is called by:
 16384 ;;		_CC2500_PowerRST
 16385 ;;		_CC2500_FrequencyCabr
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function _DelayTime_1us
 16391  11D6                     _DelayTime_1us:	
 16392                           
 16393                           ;CC2500_B1.c: 309: unsigned int i, j;
 16394                           ;CC2500_B1.c: 310: for (i = 1; i < count; i++)
 16395                           
 16396                           ;incstack = 0
 16397                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16398  11D6  3001               	movlw	1
 16399  11D7  0020               	movlb	0	; select bank0
 16400  11D8  00A2               	movwf	DelayTime_1us@i
 16401  11D9  3000               	movlw	0
 16402  11DA  00A3               	movwf	DelayTime_1us@i+1
 16403  11DB                     l408:	
 16404  11DB  0821               	movf	DelayTime_1us@count+1,w
 16405  11DC  0223               	subwf	DelayTime_1us@i+1,w
 16406  11DD  1D03               	skipz
 16407  11DE  29E1               	goto	u5795
 16408  11DF  0820               	movf	DelayTime_1us@count,w
 16409  11E0  0222               	subwf	DelayTime_1us@i,w
 16410  11E1                     u5795:	
 16411  11E1  1803               	btfsc	3,0
 16412  11E2  0008               	return
 16413                           
 16414                           ;CC2500_B1.c: 311: for (j = 0; j <= 1; j++);
 16415  11E3  01A4               	clrf	DelayTime_1us@j
 16416  11E4  01A5               	clrf	DelayTime_1us@j+1
 16417  11E5  3000               	movlw	0
 16418  11E6  0225               	subwf	DelayTime_1us@j+1,w
 16419  11E7  3002               	movlw	2
 16420  11E8  1903               	skipnz
 16421  11E9  0224               	subwf	DelayTime_1us@j,w
 16422  11EA  1803               	btfsc	3,0
 16423  11EB  29F7               	goto	l6870
 16424  11EC                     l6868:	
 16425  11EC  3001               	movlw	1
 16426  11ED  07A4               	addwf	DelayTime_1us@j,f
 16427  11EE  3000               	movlw	0
 16428  11EF  3DA5               	addwfc	DelayTime_1us@j+1,f
 16429  11F0  3000               	movlw	0
 16430  11F1  0225               	subwf	DelayTime_1us@j+1,w
 16431  11F2  3002               	movlw	2
 16432  11F3  1903               	skipnz
 16433  11F4  0224               	subwf	DelayTime_1us@j,w
 16434  11F5  1C03               	skipc
 16435  11F6  29EC               	goto	l6868
 16436  11F7                     l6870:	
 16437  11F7  3001               	movlw	1
 16438  11F8  07A2               	addwf	DelayTime_1us@i,f
 16439  11F9  3000               	movlw	0
 16440  11FA  3DA3               	addwfc	DelayTime_1us@i+1,f
 16441  11FB  29DB               	goto	l408
 16442  11FC                     __end_of_DelayTime_1us:	
 16443                           
 16444                           	psect	text112
 16445  1C59                     __ptext112:	
 16446 ;; *************** function _CC2500_ClearTXFIFO *****************
 16447 ;; Defined at:
 16448 ;;		line 179 in file "../src/CC2500_B1.c"
 16449 ;; Parameters:    Size  Location     Type
 16450 ;;		None
 16451 ;; Auto vars:     Size  Location     Type
 16452 ;;		None
 16453 ;; Return value:  Size  Location     Type
 16454 ;;		None               void
 16455 ;; Registers used:
 16456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16457 ;; Tracked objects:
 16458 ;;		On entry : 0/0
 16459 ;;		On exit  : 0/0
 16460 ;;		Unchanged: 0/0
 16461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16466 ;;Total ram usage:        0 bytes
 16467 ;; Hardware stack levels used:    1
 16468 ;; Hardware stack levels required when called:    7
 16469 ;; This function calls:
 16470 ;;		_CC2500_WriteCommand
 16471 ;; This function is called by:
 16472 ;;		_CC2500_PowerOnInitial
 16473 ;; This function uses a non-reentrant model
 16474 ;;
 16475                           
 16476                           
 16477                           ;psect for function _CC2500_ClearTXFIFO
 16478  1C59                     _CC2500_ClearTXFIFO:	
 16479                           
 16480                           ;CC2500_B1.c: 180: CC2500_WriteCommand(0x3B);
 16481                           
 16482                           ;incstack = 0
 16483                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16484  1C59  303B               	movlw	59
 16485  1C5A  319F  2721         	fcall	_CC2500_WriteCommand
 16486  1C5C  0008               	return
 16487  1C5D                     __end_of_CC2500_ClearTXFIFO:	
 16488                           
 16489                           	psect	text113
 16490  1C55                     __ptext113:	
 16491 ;; *************** function _CC2500_ClearRXFIFO *****************
 16492 ;; Defined at:
 16493 ;;		line 186 in file "../src/CC2500_B1.c"
 16494 ;; Parameters:    Size  Location     Type
 16495 ;;		None
 16496 ;; Auto vars:     Size  Location     Type
 16497 ;;		None
 16498 ;; Return value:  Size  Location     Type
 16499 ;;		None               void
 16500 ;; Registers used:
 16501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16502 ;; Tracked objects:
 16503 ;;		On entry : 0/0
 16504 ;;		On exit  : 0/0
 16505 ;;		Unchanged: 0/0
 16506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;Total ram usage:        0 bytes
 16512 ;; Hardware stack levels used:    1
 16513 ;; Hardware stack levels required when called:    7
 16514 ;; This function calls:
 16515 ;;		_CC2500_WriteCommand
 16516 ;; This function is called by:
 16517 ;;		_CC2500_PowerOnInitial
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           
 16522                           ;psect for function _CC2500_ClearRXFIFO
 16523  1C55                     _CC2500_ClearRXFIFO:	
 16524                           
 16525                           ;CC2500_B1.c: 187: CC2500_WriteCommand(0x3A);
 16526                           
 16527                           ;incstack = 0
 16528                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16529  1C55  303A               	movlw	58
 16530  1C56  319F  2721         	fcall	_CC2500_WriteCommand
 16531  1C58  0008               	return
 16532  1C59                     __end_of_CC2500_ClearRXFIFO:	
 16533                           
 16534                           	psect	text114
 16535  1F21                     __ptext114:	
 16536 ;; *************** function _CC2500_WriteCommand *****************
 16537 ;; Defined at:
 16538 ;;		line 275 in file "../src/CC2500_B1.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;  command         1    wreg     unsigned char 
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;  command         1    3[BANK0 ] unsigned char 
 16543 ;; Return value:  Size  Location     Type
 16544 ;;		None               void
 16545 ;; Registers used:
 16546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;Total ram usage:        2 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:    6
 16559 ;; This function calls:
 16560 ;;		_CC2500_WriteByte
 16561 ;;		_Timeout_Counter
 16562 ;;		_set_TimeoutCleared
 16563 ;; This function is called by:
 16564 ;;		_CC2500_TxData
 16565 ;;		_CC2500_RxData
 16566 ;;		_CC2500_ClearTXFIFO
 16567 ;;		_CC2500_ClearRXFIFO
 16568 ;;		_CC2500_FrequencyCabr
 16569 ;;		_CC2500_SIDLEMode
 16570 ;;		_setRF_Main
 16571 ;;		_RF_RxDisable
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           
 16576                           ;psect for function _CC2500_WriteCommand
 16577  1F21                     _CC2500_WriteCommand:	
 16578                           
 16579                           ;incstack = 0
 16580                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16581                           ;CC2500_WriteCommand@command stored from wreg
 16582  1F21  0020               	movlb	0	; select bank0
 16583  1F22  00A3               	movwf	CC2500_WriteCommand@command
 16584                           
 16585                           ;CC2500_B1.c: 276: RC4 = 0;
 16586  1F23  120E               	bcf	14,4	;volatile
 16587                           
 16588                           ;CC2500_B1.c: 277: SPI0Buffer = command;
 16589  1F24  0823               	movf	CC2500_WriteCommand@command,w
 16590  1F25  00A2               	movwf	??_CC2500_WriteCommand
 16591  1F26  0822               	movf	??_CC2500_WriteCommand,w
 16592  1F27  0021               	movlb	1	; select bank1
 16593  1F28  00D3               	movwf	_SPI0Buffer^(0+128)
 16594                           
 16595                           ;CC2500_B1.c: 279: while (RC2 == 1 && myMain.Timeout == 0) {
 16596  1F29  2F2D               	goto	l6586
 16597  1F2A                     l6584:	
 16598                           
 16599                           ;CC2500_B1.c: 280: Timeout_Counter();
 16600  1F2A  319E  26A6  319F   	fcall	_Timeout_Counter
 16601  1F2D                     l6586:	
 16602  1F2D  0020               	movlb	0	; select bank0
 16603  1F2E  1D0E               	btfss	14,2	;volatile
 16604  1F2F  2F33               	goto	l6590
 16605  1F30  0021               	movlb	1	; select bank1
 16606  1F31  1D2F               	btfss	(_myMain^(0+128)+15),2
 16607  1F32  2F2A               	goto	l6584
 16608  1F33                     l6590:	
 16609                           
 16610                           ;CC2500_B1.c: 281: };
 16611                           ;CC2500_B1.c: 282: set_TimeoutCleared();
 16612  1F33  3190  2066  319F   	fcall	_set_TimeoutCleared
 16613                           
 16614                           ;CC2500_B1.c: 283: CC2500_WriteByte();
 16615  1F36  319E  26EE         	fcall	_CC2500_WriteByte
 16616                           
 16617                           ;CC2500_B1.c: 284: RC4 = 1;
 16618  1F38  0020               	movlb	0	; select bank0
 16619  1F39  160E               	bsf	14,4	;volatile
 16620  1F3A  0008               	return
 16621  1F3B                     __end_of_CC2500_WriteCommand:	
 16622                           
 16623                           	psect	text115
 16624  1066                     __ptext115:	
 16625 ;; *************** function _set_TimeoutCleared *****************
 16626 ;; Defined at:
 16627 ;;		line 218 in file "../src/Main_B1.c"
 16628 ;; Parameters:    Size  Location     Type
 16629 ;;		None
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;		None
 16632 ;; Return value:  Size  Location     Type
 16633 ;;		None               void
 16634 ;; Registers used:
 16635 ;;		status,2
 16636 ;; Tracked objects:
 16637 ;;		On entry : 0/0
 16638 ;;		On exit  : 0/0
 16639 ;;		Unchanged: 0/0
 16640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;Total ram usage:        0 bytes
 16646 ;; Hardware stack levels used:    1
 16647 ;; Hardware stack levels required when called:    5
 16648 ;; This function calls:
 16649 ;;		Nothing
 16650 ;; This function is called by:
 16651 ;;		_CC2500_TxData
 16652 ;;		_CC2500_RxData
 16653 ;;		_CC2500_PowerRST
 16654 ;;		_CC2500_WriteREG
 16655 ;;		_CC2500_WriteCommand
 16656 ;;		_CC2500_ReadStatus
 16657 ;;		_getAD
 16658 ;;		_TouchPower
 16659 ;;		_CC2500_ReadREG
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           
 16664                           ;psect for function _set_TimeoutCleared
 16665  1066                     _set_TimeoutCleared:	
 16666                           
 16667                           ;Main_B1.c: 219: myMain.Timeout = 0;
 16668                           
 16669                           ;incstack = 0
 16670                           ; Regs used in _set_TimeoutCleared: [status,2]
 16671  1066  0021               	movlb	1	; select bank1
 16672  1067  112F               	bcf	(_myMain^(0+128)+15),2
 16673                           
 16674                           ;Main_B1.c: 220: myMain.Timeout_Counter = 0;
 16675  1068  01B4               	clrf	(_myMain^(0+128)+20)
 16676  1069  01B5               	clrf	((_myMain+1)^(0+128)+20)
 16677  106A  0008               	return
 16678  106B                     __end_of_set_TimeoutCleared:	
 16679                           
 16680                           	psect	text116
 16681  1EA6                     __ptext116:	
 16682 ;; *************** function _Timeout_Counter *****************
 16683 ;; Defined at:
 16684 ;;		line 209 in file "../src/Main_B1.c"
 16685 ;; Parameters:    Size  Location     Type
 16686 ;;		None
 16687 ;; Auto vars:     Size  Location     Type
 16688 ;;		None
 16689 ;; Return value:  Size  Location     Type
 16690 ;;		None               void
 16691 ;; Registers used:
 16692 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16693 ;; Tracked objects:
 16694 ;;		On entry : 0/0
 16695 ;;		On exit  : 0/0
 16696 ;;		Unchanged: 0/0
 16697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;Total ram usage:        0 bytes
 16703 ;; Hardware stack levels used:    1
 16704 ;; Hardware stack levels required when called:    5
 16705 ;; This function calls:
 16706 ;;		Nothing
 16707 ;; This function is called by:
 16708 ;;		_CC2500_TxData
 16709 ;;		_CC2500_RxData
 16710 ;;		_CC2500_PowerRST
 16711 ;;		_CC2500_WriteREG
 16712 ;;		_CC2500_WriteCommand
 16713 ;;		_CC2500_ReadStatus
 16714 ;;		_getAD
 16715 ;;		_TouchPower
 16716 ;;		_CC2500_ReadREG
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           
 16721                           ;psect for function _Timeout_Counter
 16722  1EA6                     _Timeout_Counter:	
 16723                           
 16724                           ;Main_B1.c: 210: myMain.Timeout_Counter++;
 16725                           
 16726                           ;incstack = 0
 16727                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16728  1EA6  3001               	movlw	1
 16729  1EA7  0021               	movlb	1	; select bank1
 16730  1EA8  07B4               	addwf	(_myMain^(0+128)+20),f
 16731  1EA9  3000               	movlw	0
 16732  1EAA  3DB5               	addwfc	((_myMain+1)^(0+128)+20),f
 16733                           
 16734                           ;Main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 16735  1EAB  3014               	movlw	20
 16736  1EAC  3EA0               	addlw	_myMain& (0+255)
 16737  1EAD  0086               	movwf	6
 16738  1EAE  0187               	clrf	7
 16739  1EAF  3F40               	moviw [0]fsr1
 16740  1EB0  3A10               	xorlw	16
 16741  1EB1  1D03               	skipz
 16742  1EB2  2EB5               	goto	u5245
 16743  1EB3  3F41               	moviw [1]fsr1
 16744  1EB4  3A27               	xorlw	39
 16745  1EB5                     u5245:	
 16746  1EB5  1D03               	skipz
 16747  1EB6  0008               	return
 16748                           
 16749                           ;Main_B1.c: 212: myMain.Timeout_Counter = 0;
 16750  1EB7  01B4               	clrf	(_myMain^(0+128)+20)
 16751  1EB8  01B5               	clrf	((_myMain+1)^(0+128)+20)
 16752                           
 16753                           ;Main_B1.c: 213: myMain.Timeout = 1;
 16754  1EB9  152F               	bsf	(_myMain^(0+128)+15),2
 16755                           
 16756                           ;Main_B1.c: 214: RB5 = RB5 == 1 ? 0 : 1;
 16757  1EBA  3020               	movlw	32
 16758  1EBB  0020               	movlb	0	; select bank0
 16759  1EBC  068D               	xorwf	13,f
 16760  1EBD  0008               	return
 16761  1EBE                     __end_of_Timeout_Counter:	
 16762                           
 16763                           	psect	text117
 16764  1EEE                     __ptext117:	
 16765 ;; *************** function _CC2500_WriteByte *****************
 16766 ;; Defined at:
 16767 ;;		line 211 in file "../src/CC2500_B1.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;		None
 16770 ;; Auto vars:     Size  Location     Type
 16771 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16772 ;; Return value:  Size  Location     Type
 16773 ;;		None               void
 16774 ;; Registers used:
 16775 ;;		wreg, status,2, status,0
 16776 ;; Tracked objects:
 16777 ;;		On entry : 0/0
 16778 ;;		On exit  : 0/0
 16779 ;;		Unchanged: 0/0
 16780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;Total ram usage:        2 bytes
 16786 ;; Hardware stack levels used:    1
 16787 ;; Hardware stack levels required when called:    5
 16788 ;; This function calls:
 16789 ;;		Nothing
 16790 ;; This function is called by:
 16791 ;;		_CC2500_TxData
 16792 ;;		_CC2500_RxData
 16793 ;;		_CC2500_PowerRST
 16794 ;;		_CC2500_WriteREG
 16795 ;;		_CC2500_WriteCommand
 16796 ;;		_CC2500_ReadStatus
 16797 ;;		_CC2500_ReadREG
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           
 16802                           ;psect for function _CC2500_WriteByte
 16803  1EEE                     _CC2500_WriteByte:	
 16804                           
 16805                           ;CC2500_B1.c: 212: unsigned char loop_a;
 16806                           ;CC2500_B1.c: 213: for (loop_a = 0; loop_a < 8; loop_a++) {
 16807                           
 16808                           ;incstack = 0
 16809                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16810  1EEE  0020               	movlb	0	; select bank0
 16811  1EEF  01A1               	clrf	CC2500_WriteByte@loop_a
 16812  1EF0                     L13:	
 16813  1EF0  3008               	movlw	8
 16814  1EF1  0221               	subwf	CC2500_WriteByte@loop_a,w
 16815  1EF2  1803               	btfsc	3,0
 16816  1EF3  0008               	return
 16817                           
 16818                           ;CC2500_B1.c: 214: if (SPI0Buffer & 0x80)
 16819  1EF4  0021               	movlb	1	; select bank1
 16820  1EF5  1FD3               	btfss	_SPI0Buffer^(0+128),7
 16821  1EF6  2EFA               	goto	l364
 16822                           
 16823                           ;CC2500_B1.c: 215: RC0 = 1;
 16824  1EF7  0020               	movlb	0	; select bank0
 16825  1EF8  140E               	bsf	14,0	;volatile
 16826  1EF9  2EFC               	goto	l365
 16827  1EFA                     l364:	
 16828                           
 16829                           ;CC2500_B1.c: 216: else
 16830                           ;CC2500_B1.c: 217: RC0 = 0;
 16831  1EFA  0020               	movlb	0	; select bank0
 16832  1EFB  100E               	bcf	14,0	;volatile
 16833  1EFC                     l365:	
 16834                           
 16835                           ;CC2500_B1.c: 218: RC1 = 1;
 16836  1EFC  148E               	bsf	14,1	;volatile
 16837                           
 16838                           ;CC2500_B1.c: 219: SPI0Buffer <<= 1;
 16839  1EFD  1003               	clrc
 16840  1EFE  0021               	movlb	1	; select bank1
 16841  1EFF  0DD3               	rlf	_SPI0Buffer^(0+128),f
 16842                           
 16843                           ;CC2500_B1.c: 220: RC1 = 0;
 16844  1F00  0020               	movlb	0	; select bank0
 16845  1F01  108E               	bcf	14,1	;volatile
 16846  1F02  3001               	movlw	1
 16847  1F03  00A0               	movwf	??_CC2500_WriteByte
 16848  1F04  0820               	movf	??_CC2500_WriteByte,w
 16849  1F05  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16850  1F06  2EF0               	goto	L13
 16851  1F07                     __end_of_CC2500_WriteByte:	
 16852                           
 16853                           	psect	text118
 16854  15CB                     __ptext118:	
 16855 ;; *************** function _Buzzer_Main *****************
 16856 ;; Defined at:
 16857 ;;		line 46 in file "../src/Buzzer_B1.c"
 16858 ;; Parameters:    Size  Location     Type
 16859 ;;		None
 16860 ;; Auto vars:     Size  Location     Type
 16861 ;;		None
 16862 ;; Return value:  Size  Location     Type
 16863 ;;		None               void
 16864 ;; Registers used:
 16865 ;;		wreg, status,2, status,0
 16866 ;; Tracked objects:
 16867 ;;		On entry : 0/0
 16868 ;;		On exit  : 0/0
 16869 ;;		Unchanged: 0/0
 16870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16874 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16875 ;;Total ram usage:        1 bytes
 16876 ;; Hardware stack levels used:    1
 16877 ;; Hardware stack levels required when called:    5
 16878 ;; This function calls:
 16879 ;;		Nothing
 16880 ;; This function is called by:
 16881 ;;		_main
 16882 ;; This function uses a non-reentrant model
 16883 ;;
 16884                           
 16885                           
 16886                           ;psect for function _Buzzer_Main
 16887  15CB                     _Buzzer_Main:	
 16888                           
 16889                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16890                           
 16891                           ;incstack = 0
 16892                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16893  15CB  0021               	movlb	1	; select bank1
 16894  15CC  1CB6               	btfss	_Buz1^(0+128),1
 16895  15CD  0008               	return
 16896                           
 16897                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16898  15CE  3001               	movlw	1
 16899  15CF  07B7               	addwf	(_Buz1^(0+128)+1),f
 16900  15D0  3000               	movlw	0
 16901  15D1  3DB8               	addwfc	((_Buz1+1)^(0+128)+1),f
 16902                           
 16903                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16904  15D2  083D               	movf	((_Buz1+1)^(0+128)+6),w
 16905  15D3  0238               	subwf	((_Buz1+1)^(0+128)+1),w
 16906  15D4  1D03               	skipz
 16907  15D5  2DD8               	goto	u7505
 16908  15D6  083C               	movf	(_Buz1^(0+128)+6),w
 16909  15D7  0237               	subwf	(_Buz1^(0+128)+1),w
 16910  15D8                     u7505:	
 16911  15D8  1C03               	skipc
 16912  15D9  0008               	return
 16913                           
 16914                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16915  15DA  01B7               	clrf	(_Buz1^(0+128)+1)
 16916  15DB  01B8               	clrf	((_Buz1+1)^(0+128)+1)
 16917                           
 16918                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16919  15DC  12B6               	bcf	_Buz1^(0+128),5
 16920  15DD  0020               	movlb	0	; select bank0
 16921  15DE  1D8D               	btfss	13,3	;volatile
 16922  15DF  2DE2               	goto	l7856
 16923  15E0  0021               	movlb	1	; select bank1
 16924  15E1  16B6               	bsf	_Buz1^(0+128),5
 16925  15E2                     l7856:	
 16926                           
 16927                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16928  15E2  0021               	movlb	1	; select bank1
 16929  15E3  1AB6               	btfsc	_Buz1^(0+128),5
 16930  15E4  2E0E               	goto	l124
 16931                           
 16932                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16933  15E5  08B9               	movf	(_Buz1^(0+128)+3),f
 16934  15E6  1D03               	skipz
 16935  15E7  2E0A               	goto	l125
 16936                           
 16937                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16938  15E8  1DB6               	btfss	_Buz1^(0+128),3
 16939  15E9  2DF8               	goto	l126
 16940                           
 16941                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16942  15EA  11B6               	bcf	_Buz1^(0+128),3
 16943                           
 16944                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16945  15EB  083A               	movf	(_Buz1^(0+128)+4),w
 16946  15EC  0020               	movlb	0	; select bank0
 16947  15ED  00A0               	movwf	??_Buzzer_Main
 16948  15EE  0820               	movf	??_Buzzer_Main,w
 16949  15EF  0021               	movlb	1	; select bank1
 16950  15F0  00B9               	movwf	(_Buz1^(0+128)+3)
 16951                           
 16952                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16953  15F1  083F               	movf	((_Buz1+1)^(0+128)+8),w
 16954  15F2  01BD               	clrf	((_Buz1+1)^(0+128)+6)
 16955  15F3  07BD               	addwf	((_Buz1+1)^(0+128)+6),f
 16956  15F4  083E               	movf	(_Buz1^(0+128)+8),w
 16957  15F5  01BC               	clrf	(_Buz1^(0+128)+6)
 16958  15F6  07BC               	addwf	(_Buz1^(0+128)+6),f
 16959                           
 16960                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16961  15F7  0008               	return
 16962  15F8                     l126:	
 16963  15F8  1E36               	btfss	_Buz1^(0+128),4
 16964  15F9  2E08               	goto	l128
 16965                           
 16966                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16967  15FA  1236               	bcf	_Buz1^(0+128),4
 16968                           
 16969                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16970  15FB  083B               	movf	(_Buz1^(0+128)+5),w
 16971  15FC  0020               	movlb	0	; select bank0
 16972  15FD  00A0               	movwf	??_Buzzer_Main
 16973  15FE  0820               	movf	??_Buzzer_Main,w
 16974  15FF  0021               	movlb	1	; select bank1
 16975  1600  00B9               	movwf	(_Buz1^(0+128)+3)
 16976                           
 16977                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16978  1601  0841               	movf	((_Buz1+1)^(0+128)+10),w
 16979  1602  01BD               	clrf	((_Buz1+1)^(0+128)+6)
 16980  1603  07BD               	addwf	((_Buz1+1)^(0+128)+6),f
 16981  1604  0840               	movf	(_Buz1^(0+128)+10),w
 16982  1605  01BC               	clrf	(_Buz1^(0+128)+6)
 16983  1606  07BC               	addwf	(_Buz1^(0+128)+6),f
 16984                           
 16985                           ;Buzzer_B1.c: 62: } else {
 16986  1607  0008               	return
 16987  1608                     l128:	
 16988                           
 16989                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16990  1608  10B6               	bcf	_Buz1^(0+128),1
 16991                           
 16992                           ;Buzzer_B1.c: 64: }
 16993                           ;Buzzer_B1.c: 65: } else {
 16994  1609  0008               	return
 16995  160A                     l125:	
 16996                           
 16997                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16998  160A  16B6               	bsf	_Buz1^(0+128),5
 16999                           
 17000                           ;Buzzer_B1.c: 68: RB3 = 1;
 17001  160B  0020               	movlb	0	; select bank0
 17002  160C  158D               	bsf	13,3	;volatile
 17003                           
 17004                           ;Buzzer_B1.c: 69: }
 17005                           ;Buzzer_B1.c: 70: } else {
 17006  160D  0008               	return
 17007  160E                     l124:	
 17008                           
 17009                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17010  160E  12B6               	bcf	_Buz1^(0+128),5
 17011                           
 17012                           ;Buzzer_B1.c: 73: RB3 = 0;
 17013  160F  0020               	movlb	0	; select bank0
 17014  1610  118D               	bcf	13,3	;volatile
 17015                           
 17016                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17017  1611  3001               	movlw	1
 17018  1612  0021               	movlb	1	; select bank1
 17019  1613  02B9               	subwf	(_Buz1^(0+128)+3),f
 17020  1614  0008               	return
 17021  1615                     __end_of_Buzzer_Main:	
 17022                           
 17023                           	psect	text119
 17024  1C43                     __ptext119:	
 17025 ;; *************** function _Buzzer_Initialization *****************
 17026 ;; Defined at:
 17027 ;;		line 11 in file "../src/Buzzer_B1.c"
 17028 ;; Parameters:    Size  Location     Type
 17029 ;;		None
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;		None
 17032 ;; Return value:  Size  Location     Type
 17033 ;;		None               void
 17034 ;; Registers used:
 17035 ;;		None
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;Total ram usage:        0 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    5
 17048 ;; This function calls:
 17049 ;;		Nothing
 17050 ;; This function is called by:
 17051 ;;		_main
 17052 ;; This function uses a non-reentrant model
 17053 ;;
 17054                           
 17055                           
 17056                           ;psect for function _Buzzer_Initialization
 17057  1C43                     _Buzzer_Initialization:	
 17058                           
 17059                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17060                           
 17061                           ;incstack = 0
 17062                           ; Regs used in _Buzzer_Initialization: []
 17063  1C43  0021               	movlb	1	; select bank1
 17064  1C44  1436               	bsf	_Buz1^(0+128),0
 17065  1C45  0008               	return
 17066  1C46                     __end_of_Buzzer_Initialization:	
 17067                           
 17068                           	psect	intentry
 17069  0004                     __pintentry:	
 17070 ;; *************** function _ISR *****************
 17071 ;; Defined at:
 17072 ;;		line 107 in file "../src/MCU_B1.c"
 17073 ;; Parameters:    Size  Location     Type
 17074 ;;		None
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;		None
 17077 ;; Return value:  Size  Location     Type
 17078 ;;		None               void
 17079 ;; Registers used:
 17080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;Total ram usage:        1 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    4
 17093 ;; This function calls:
 17094 ;;		_INT_ISR
 17095 ;;		_IOC_ISR
 17096 ;;		_TMR0_ISR
 17097 ;; This function is called by:
 17098 ;;		Interrupt level 1
 17099 ;; This function uses a non-reentrant model
 17100 ;;
 17101                           
 17102  0004                     _ISR:	
 17103                           
 17104                           ;incstack = 0
 17105                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17106  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17107  0005  3180               	pagesel	$
 17108  0006  0020               	movlb	0	; select bank0
 17109  0007  087F               	movf	127,w
 17110  0008  00F7               	movwf	??_ISR
 17111                           
 17112                           ;MCU_B1.c: 109: IOC_ISR();
 17113  0009  319D  2507  3180   	fcall	_IOC_ISR
 17114                           
 17115                           ;MCU_B1.c: 111: TMR0_ISR();
 17116  000C  3192  2279  3180   	fcall	_TMR0_ISR
 17117                           
 17118                           ;MCU_B1.c: 113: ;;
 17119                           ;MCU_B1.c: 117: INT_ISR();
 17120  000F  319C  24AC         	fcall	_INT_ISR
 17121  0011  0877               	movf	??_ISR,w
 17122  0012  0020               	movlb	0	; select bank0
 17123  0013  00FF               	movwf	127
 17124  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 17125  0015  0009               	retfie
 17126  0016                     __end_of_ISR:	
 17127                           
 17128                           	psect	text121
 17129  1279                     __ptext121:	
 17130 ;; *************** function _TMR0_ISR *****************
 17131 ;; Defined at:
 17132 ;;		line 135 in file "../src/MCU_B1.c"
 17133 ;; Parameters:    Size  Location     Type
 17134 ;;		None
 17135 ;; Auto vars:     Size  Location     Type
 17136 ;;		None
 17137 ;; Return value:  Size  Location     Type
 17138 ;;		None               void
 17139 ;; Registers used:
 17140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17141 ;; Tracked objects:
 17142 ;;		On entry : 0/0
 17143 ;;		On exit  : 0/0
 17144 ;;		Unchanged: 0/0
 17145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17150 ;;Total ram usage:        0 bytes
 17151 ;; Hardware stack levels used:    1
 17152 ;; Hardware stack levels required when called:    2
 17153 ;; This function calls:
 17154 ;;		_setDimmerLights_IntrControl
 17155 ;; This function is called by:
 17156 ;;		_ISR
 17157 ;; This function uses a non-reentrant model
 17158 ;;
 17159                           
 17160                           
 17161                           ;psect for function _TMR0_ISR
 17162  1279                     _TMR0_ISR:	
 17163                           
 17164                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 17165                           
 17166                           ;incstack = 0
 17167                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17168  1279  1E8B               	btfss	11,5	;volatile
 17169  127A  0008               	return
 17170  127B  1D0B               	btfss	11,2	;volatile
 17171  127C  0008               	return
 17172                           
 17173                           ;MCU_B1.c: 137: TMR0 = (256-190);
 17174  127D  3042               	movlw	66
 17175  127E  0020               	movlb	0	; select bank0
 17176  127F  0095               	movwf	21	;volatile
 17177                           
 17178                           ;MCU_B1.c: 138: TMR0IF = 0;
 17179  1280  110B               	bcf	11,2	;volatile
 17180                           
 17181                           ;MCU_B1.c: 143: setDimmerLights_IntrControl(1);
 17182  1281  3001               	movlw	1
 17183  1282  3180  204D  3192   	fcall	_setDimmerLights_IntrControl
 17184                           
 17185                           ;MCU_B1.c: 148: setDimmerLights_IntrControl(2);
 17186  1285  3002               	movlw	2
 17187  1286  3180  204D  3192   	fcall	_setDimmerLights_IntrControl
 17188                           
 17189                           ;MCU_B1.c: 153: setDimmerLights_IntrControl(3);
 17190  1289  3003               	movlw	3
 17191  128A  3180  204D  3192   	fcall	_setDimmerLights_IntrControl
 17192                           
 17193                           ;MCU_B1.c: 159: Timer0.Count++;
 17194  128D  3001               	movlw	1
 17195  128E  0022               	movlb	2	; select bank2
 17196  128F  07B6               	addwf	(_Timer0^(0+256)+1),f
 17197  1290  3000               	movlw	0
 17198  1291  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 17199                           
 17200                           ;MCU_B1.c: 160: if (Timer0.Count == 100) {
 17201  1292  3001               	movlw	1
 17202  1293  3E35               	addlw	_Timer0& (0+255)
 17203  1294  0086               	movwf	6
 17204  1295  3001               	movlw	1	; select bank2/3
 17205  1296  0087               	movwf	7
 17206  1297  3F40               	moviw [0]fsr1
 17207  1298  3A64               	xorlw	100
 17208  1299  1D03               	skipz
 17209  129A  2A9D               	goto	u761_25
 17210  129B  3F41               	moviw [1]fsr1
 17211  129C  3A00               	xorlw	0
 17212  129D                     u761_25:	
 17213  129D  1D03               	skipz
 17214  129E  0008               	return
 17215                           
 17216                           ;MCU_B1.c: 161: Timer0.Count = 0;
 17217  129F  01B6               	clrf	(_Timer0^(0+256)+1)
 17218  12A0  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 17219                           
 17220                           ;MCU_B1.c: 162: myMain.T0_Timerout = 1;
 17221  12A1  0021               	movlb	1	; select bank1
 17222  12A2  14A0               	bsf	_myMain^(0+128),1
 17223  12A3  0008               	return
 17224  12A4                     __end_of_TMR0_ISR:	
 17225                           
 17226                           	psect	text122
 17227  004D                     __ptext122:	
 17228 ;; *************** function _setDimmerLights_IntrControl *****************
 17229 ;; Defined at:
 17230 ;;		line 87 in file "../src/Dimmer_B1.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;  lights          1    wreg     unsigned char 
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;  lights          1    6[COMMON] unsigned char 
 17235 ;; Return value:  Size  Location     Type
 17236 ;;		None               void
 17237 ;; Registers used:
 17238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;Total ram usage:        5 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    1
 17251 ;; This function calls:
 17252 ;;		_DimmerIntrPointSelect
 17253 ;; This function is called by:
 17254 ;;		_TMR0_ISR
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _setDimmerLights_IntrControl
 17260  004D                     _setDimmerLights_IntrControl:	
 17261                           
 17262                           ;incstack = 0
 17263                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17264                           ;setDimmerLights_IntrControl@lights stored from wreg
 17265  004D  00F6               	movwf	setDimmerLights_IntrControl@lights
 17266                           
 17267                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 17268  004E  0876               	movf	setDimmerLights_IntrControl@lights,w
 17269  004F  319F  2707  3180   	fcall	_DimmerIntrPointSelect
 17270                           
 17271                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 17272  0052  087C               	movf	_DimmerLightsIntr,w
 17273  0053  0086               	movwf	6
 17274  0054  3001               	movlw	1	; select bank2/3
 17275  0055  0087               	movwf	7
 17276  0056  1C01               	btfss	1,0
 17277  0057  28B8               	goto	i1l7306
 17278                           
 17279                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 17280  0058  3001               	movlw	1
 17281  0059  00F2               	movwf	??_setDimmerLights_IntrControl
 17282  005A  087C               	movf	_DimmerLightsIntr,w
 17283  005B  3E03               	addlw	3
 17284  005C  0086               	movwf	6
 17285  005D  3001               	movlw	1	; select bank2/3
 17286  005E  0087               	movwf	7
 17287  005F  0872               	movf	??_setDimmerLights_IntrControl,w
 17288  0060  0781               	addwf	1,f
 17289                           
 17290                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 17291  0061  0021               	movlb	1	; select bank1
 17292  0062  084A               	movf	_Dimmer^(0+128),w
 17293  0063  3E02               	addlw	2
 17294  0064  0086               	movwf	6
 17295  0065  0187               	clrf	7
 17296  0066  0801               	movf	1,w
 17297  0067  00F2               	movwf	??_setDimmerLights_IntrControl
 17298  0068  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17299  0069  09F2               	comf	??_setDimmerLights_IntrControl,f
 17300  006A  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 17301  006B  0AF2               	incf	??_setDimmerLights_IntrControl,f
 17302  006C  1903               	skipnz
 17303  006D  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 17304  006E  087C               	movf	_DimmerLightsIntr,w
 17305  006F  3E04               	addlw	4
 17306  0070  0086               	movwf	6
 17307  0071  3001               	movlw	1	; select bank2/3
 17308  0072  0087               	movwf	7
 17309  0073  0801               	movf	1,w
 17310  0074  0772               	addwf	??_setDimmerLights_IntrControl,w
 17311  0075  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17312  0076  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17313  0077  1803               	skipnc
 17314  0078  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17315  0079  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17316  007A  087C               	movf	_DimmerLightsIntr,w
 17317  007B  3E03               	addlw	3
 17318  007C  0086               	movwf	6
 17319  007D  3001               	movlw	1	; select bank2/3
 17320  007E  0087               	movwf	7
 17321  007F  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17322  0080  3A80               	xorlw	128
 17323  0081  3C80               	sublw	128
 17324  0082  1D03               	skipz
 17325  0083  2886               	goto	u643_25
 17326  0084  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17327  0085  0201               	subwf	1,w
 17328  0086                     u643_25:	
 17329  0086  1C03               	skipc
 17330  0087  29C7               	goto	i1l7372
 17331                           
 17332                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17333  0088  087C               	movf	_DimmerLightsIntr,w
 17334  0089  3E03               	addlw	3
 17335  008A  0086               	movwf	6
 17336  008B  3001               	movlw	1	; select bank2/3
 17337  008C  0087               	movwf	7
 17338  008D  0181               	clrf	1
 17339                           
 17340                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17341  008E  087C               	movf	_DimmerLightsIntr,w
 17342  008F  0086               	movwf	6
 17343  0090  3001               	movlw	1	; select bank2/3
 17344  0091  0087               	movwf	7
 17345  0092  1001               	bcf	1,0
 17346                           
 17347                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17348  0093  087C               	movf	_DimmerLightsIntr,w
 17349  0094  0086               	movwf	6
 17350  0095  3001               	movlw	1	; select bank2/3
 17351  0096  0087               	movwf	7
 17352  0097  1F01               	btfss	1,6
 17353  0098  29C7               	goto	i1l7372
 17354                           
 17355                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17356  0099  087C               	movf	_DimmerLightsIntr,w
 17357  009A  3E08               	addlw	8
 17358  009B  0086               	movwf	6
 17359  009C  3001               	movlw	1	; select bank2/3
 17360  009D  0087               	movwf	7
 17361  009E  1401               	bsf	1,0
 17362                           
 17363                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17364  009F  087C               	movf	_DimmerLightsIntr,w
 17365  00A0  3E08               	addlw	8
 17366  00A1  0086               	movwf	6
 17367  00A2  3001               	movlw	1	; select bank2/3
 17368  00A3  0087               	movwf	7
 17369  00A4  1681               	bsf	1,5
 17370                           
 17371                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17372  00A5  0876               	movf	setDimmerLights_IntrControl@lights,w
 17373  00A6  3A01               	xorlw	1
 17374  00A7  1D03               	skipz
 17375  00A8  28AB               	goto	i1l7298
 17376                           
 17377                           ;Dimmer_B1.c: 101: RB4 = 1;
 17378  00A9  0020               	movlb	0	; select bank0
 17379  00AA  160D               	bsf	13,4	;volatile
 17380  00AB                     i1l7298:	
 17381                           ;Dimmer_B1.c: 102: ;;
 17382                           
 17383                           
 17384                           ;Dimmer_B1.c: 103: }
 17385                           ;Dimmer_B1.c: 106: if (lights == 2) {
 17386  00AB  0876               	movf	setDimmerLights_IntrControl@lights,w
 17387  00AC  3A02               	xorlw	2
 17388  00AD  1D03               	skipz
 17389  00AE  28B1               	goto	i1l7302
 17390                           
 17391                           ;Dimmer_B1.c: 107: RA7 = 1;
 17392  00AF  0020               	movlb	0	; select bank0
 17393  00B0  178C               	bsf	12,7	;volatile
 17394  00B1                     i1l7302:	
 17395                           
 17396                           ;Dimmer_B1.c: 108: }
 17397                           ;Dimmer_B1.c: 111: if (lights == 3) {
 17398  00B1  0876               	movf	setDimmerLights_IntrControl@lights,w
 17399  00B2  3A03               	xorlw	3
 17400  00B3  1D03               	skipz
 17401  00B4  29C7               	goto	i1l7372
 17402                           
 17403                           ;Dimmer_B1.c: 112: RB1 = 1;
 17404  00B5  0020               	movlb	0	; select bank0
 17405  00B6  148D               	bsf	13,1	;volatile
 17406                           
 17407                           ;Dimmer_B1.c: 113: }
 17408                           ;Dimmer_B1.c: 115: }
 17409                           ;Dimmer_B1.c: 116: }
 17410                           ;Dimmer_B1.c: 117: } else {
 17411  00B7  29C7               	goto	i1l7372
 17412  00B8                     i1l7306:	
 17413                           
 17414                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17415  00B8  087C               	movf	_DimmerLightsIntr,w
 17416  00B9  3E08               	addlw	8
 17417  00BA  0086               	movwf	6
 17418  00BB  3001               	movlw	1	; select bank2/3
 17419  00BC  0087               	movwf	7
 17420  00BD  1C01               	btfss	1,0
 17421  00BE  29C7               	goto	i1l7372
 17422                           
 17423                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17424  00BF  087C               	movf	_DimmerLightsIntr,w
 17425  00C0  3E08               	addlw	8
 17426  00C1  0086               	movwf	6
 17427  00C2  3001               	movlw	1	; select bank2/3
 17428  00C3  0087               	movwf	7
 17429  00C4  1001               	bcf	1,0
 17430                           
 17431                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17432  00C5  087C               	movf	_DimmerLightsIntr,w
 17433  00C6  0086               	movwf	6
 17434  00C7  3001               	movlw	1	; select bank2/3
 17435  00C8  0087               	movwf	7
 17436  00C9  1C81               	btfss	1,1
 17437  00CA  29C7               	goto	i1l7372
 17438                           
 17439                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17440  00CB  3001               	movlw	1
 17441  00CC  00F2               	movwf	??_setDimmerLights_IntrControl
 17442  00CD  0A7C               	incf	_DimmerLightsIntr,w
 17443  00CE  0086               	movwf	6
 17444  00CF  3001               	movlw	1	; select bank2/3
 17445  00D0  0087               	movwf	7
 17446  00D1  0872               	movf	??_setDimmerLights_IntrControl,w
 17447  00D2  0781               	addwf	1,f
 17448                           
 17449                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17450  00D3  0A7C               	incf	_DimmerLightsIntr,w
 17451  00D4  0086               	movwf	6
 17452  00D5  3001               	movlw	1	; select bank2/3
 17453  00D6  0087               	movwf	7
 17454  00D7  087C               	movf	_DimmerLightsIntr,w
 17455  00D8  3E02               	addlw	2
 17456  00D9  0084               	movwf	4
 17457  00DA  3001               	movlw	1	; select bank2/3
 17458  00DB  0085               	movwf	5
 17459  00DC  0800               	movf	0,w
 17460  00DD  0201               	subwf	1,w
 17461  00DE  1C03               	skipc
 17462  00DF  29C7               	goto	i1l7372
 17463                           
 17464                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17465  00E0  0A7C               	incf	_DimmerLightsIntr,w
 17466  00E1  0086               	movwf	6
 17467  00E2  3001               	movlw	1	; select bank2/3
 17468  00E3  0087               	movwf	7
 17469  00E4  0181               	clrf	1
 17470                           
 17471                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17472  00E5  087C               	movf	_DimmerLightsIntr,w
 17473  00E6  0086               	movwf	6
 17474  00E7  3001               	movlw	1	; select bank2/3
 17475  00E8  0087               	movwf	7
 17476  00E9  1D81               	btfss	1,3
 17477  00EA  2921               	goto	i1l7332
 17478                           
 17479                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17480  00EB  087C               	movf	_DimmerLightsIntr,w
 17481  00EC  0086               	movwf	6
 17482  00ED  3001               	movlw	1	; select bank2/3
 17483  00EE  0087               	movwf	7
 17484  00EF  1A01               	btfsc	1,4
 17485  00F0  2908               	goto	i1l7326
 17486                           
 17487                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-95)*0.8))) {
 17488  00F1  087C               	movf	_DimmerLightsIntr,w
 17489  00F2  3E04               	addlw	4
 17490  00F3  0086               	movwf	6
 17491  00F4  3001               	movlw	1	; select bank2/3
 17492  00F5  0087               	movwf	7
 17493  00F6  3005               	movlw	5
 17494  00F7  0201               	subwf	1,w
 17495  00F8  1C03               	skipc
 17496  00F9  2902               	goto	i1l7324
 17497                           
 17498                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17499  00FA  087C               	movf	_DimmerLightsIntr,w
 17500  00FB  3E04               	addlw	4
 17501  00FC  0086               	movwf	6
 17502  00FD  3001               	movlw	1	; select bank2/3
 17503  00FE  0087               	movwf	7
 17504  00FF  3001               	movlw	1
 17505  0100  0281               	subwf	1,f
 17506                           
 17507                           ;Dimmer_B1.c: 128: } else {
 17508  0101  29C7               	goto	i1l7372
 17509  0102                     i1l7324:	
 17510                           
 17511                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17512  0102  087C               	movf	_DimmerLightsIntr,w
 17513  0103  0086               	movwf	6
 17514  0104  3001               	movlw	1	; select bank2/3
 17515  0105  0087               	movwf	7
 17516  0106  1601               	bsf	1,4
 17517                           
 17518                           ;Dimmer_B1.c: 130: }
 17519                           ;Dimmer_B1.c: 131: } else {
 17520  0107  29C7               	goto	i1l7372
 17521  0108                     i1l7326:	
 17522                           
 17523                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17524  0108  087C               	movf	_DimmerLightsIntr,w
 17525  0109  3E04               	addlw	4
 17526  010A  0086               	movwf	6
 17527  010B  3001               	movlw	1	; select bank2/3
 17528  010C  0087               	movwf	7
 17529  010D  303C               	movlw	60
 17530  010E  0201               	subwf	1,w
 17531  010F  1803               	skipnc
 17532  0110  291B               	goto	i1l7330
 17533                           
 17534                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17535  0111  3001               	movlw	1
 17536  0112  00F2               	movwf	??_setDimmerLights_IntrControl
 17537  0113  087C               	movf	_DimmerLightsIntr,w
 17538  0114  3E04               	addlw	4
 17539  0115  0086               	movwf	6
 17540  0116  3001               	movlw	1	; select bank2/3
 17541  0117  0087               	movwf	7
 17542  0118  0872               	movf	??_setDimmerLights_IntrControl,w
 17543  0119  0781               	addwf	1,f
 17544                           
 17545                           ;Dimmer_B1.c: 134: } else {
 17546  011A  29C7               	goto	i1l7372
 17547  011B                     i1l7330:	
 17548                           
 17549                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17550  011B  087C               	movf	_DimmerLightsIntr,w
 17551  011C  0086               	movwf	6
 17552  011D  3001               	movlw	1	; select bank2/3
 17553  011E  0087               	movwf	7
 17554  011F  1201               	bcf	1,4
 17555                           
 17556                           ;Dimmer_B1.c: 136: }
 17557                           ;Dimmer_B1.c: 137: }
 17558                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17559  0120  29C7               	goto	i1l7372
 17560  0121                     i1l7332:	
 17561  0121  087C               	movf	_DimmerLightsIntr,w
 17562  0122  0086               	movwf	6
 17563  0123  3001               	movlw	1	; select bank2/3
 17564  0124  0087               	movwf	7
 17565  0125  1D01               	btfss	1,2
 17566  0126  2968               	goto	i1l7346
 17567                           
 17568                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17569  0127  087C               	movf	_DimmerLightsIntr,w
 17570  0128  3E05               	addlw	5
 17571  0129  0086               	movwf	6
 17572  012A  3001               	movlw	1	; select bank2/3
 17573  012B  0087               	movwf	7
 17574  012C  087C               	movf	_DimmerLightsIntr,w
 17575  012D  3E04               	addlw	4
 17576  012E  0084               	movwf	4
 17577  012F  3001               	movlw	1	; select bank2/3
 17578  0130  0085               	movwf	5
 17579  0131  0800               	movf	0,w
 17580  0132  0201               	subwf	1,w
 17581  0133  1803               	skipnc
 17582  0134  293D               	goto	i1l7338
 17583                           
 17584                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17585  0135  087C               	movf	_DimmerLightsIntr,w
 17586  0136  3E04               	addlw	4
 17587  0137  0086               	movwf	6
 17588  0138  3001               	movlw	1	; select bank2/3
 17589  0139  0087               	movwf	7
 17590  013A  3001               	movlw	1
 17591  013B  0281               	subwf	1,f
 17592                           
 17593                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17594  013C  2954               	goto	i1l7342
 17595  013D                     i1l7338:	
 17596  013D  087C               	movf	_DimmerLightsIntr,w
 17597  013E  3E04               	addlw	4
 17598  013F  0086               	movwf	6
 17599  0140  3001               	movlw	1	; select bank2/3
 17600  0141  0087               	movwf	7
 17601  0142  087C               	movf	_DimmerLightsIntr,w
 17602  0143  3E05               	addlw	5
 17603  0144  0084               	movwf	4
 17604  0145  3001               	movlw	1	; select bank2/3
 17605  0146  0085               	movwf	5
 17606  0147  0800               	movf	0,w
 17607  0148  0201               	subwf	1,w
 17608  0149  1803               	skipnc
 17609  014A  2954               	goto	i1l7342
 17610                           
 17611                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17612  014B  3001               	movlw	1
 17613  014C  00F2               	movwf	??_setDimmerLights_IntrControl
 17614  014D  087C               	movf	_DimmerLightsIntr,w
 17615  014E  3E04               	addlw	4
 17616  014F  0086               	movwf	6
 17617  0150  3001               	movlw	1	; select bank2/3
 17618  0151  0087               	movwf	7
 17619  0152  0872               	movf	??_setDimmerLights_IntrControl,w
 17620  0153  0781               	addwf	1,f
 17621  0154                     i1l7342:	
 17622                           
 17623                           ;Dimmer_B1.c: 143: }
 17624                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17625  0154  087C               	movf	_DimmerLightsIntr,w
 17626  0155  3E05               	addlw	5
 17627  0156  0086               	movwf	6
 17628  0157  3001               	movlw	1	; select bank2/3
 17629  0158  0087               	movwf	7
 17630  0159  087C               	movf	_DimmerLightsIntr,w
 17631  015A  3E04               	addlw	4
 17632  015B  0084               	movwf	4
 17633  015C  3001               	movlw	1	; select bank2/3
 17634  015D  0085               	movwf	5
 17635  015E  0800               	movf	0,w
 17636  015F  0601               	xorwf	1,w
 17637  0160  1D03               	skipz
 17638  0161  29C7               	goto	i1l7372
 17639                           
 17640                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17641  0162  087C               	movf	_DimmerLightsIntr,w
 17642  0163  0086               	movwf	6
 17643  0164  3001               	movlw	1	; select bank2/3
 17644  0165  0087               	movwf	7
 17645  0166  1101               	bcf	1,2
 17646  0167  2983               	goto	i1l7352
 17647  0168                     i1l7346:	
 17648                           ;Dimmer_B1.c: 147: }
 17649                           ;Dimmer_B1.c: 148: } else {
 17650                           
 17651                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17652                           
 17653                           
 17654                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17655  0168  087C               	movf	_DimmerLightsIntr,w
 17656  0169  0086               	movwf	6
 17657  016A  3001               	movlw	1	; select bank2/3
 17658  016B  0087               	movwf	7
 17659  016C  1E81               	btfss	1,5
 17660  016D  2989               	goto	i1l7354
 17661                           
 17662                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17663  016E  087C               	movf	_DimmerLightsIntr,w
 17664  016F  3E04               	addlw	4
 17665  0170  0086               	movwf	6
 17666  0171  3001               	movlw	1	; select bank2/3
 17667  0172  0087               	movwf	7
 17668  0173  3001               	movlw	1
 17669  0174  0281               	subwf	1,f
 17670                           
 17671                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17672  0175  087C               	movf	_DimmerLightsIntr,w
 17673  0176  3E05               	addlw	5
 17674  0177  0086               	movwf	6
 17675  0178  3001               	movlw	1	; select bank2/3
 17676  0179  0087               	movwf	7
 17677  017A  087C               	movf	_DimmerLightsIntr,w
 17678  017B  3E04               	addlw	4
 17679  017C  0084               	movwf	4
 17680  017D  3001               	movlw	1	; select bank2/3
 17681  017E  0085               	movwf	5
 17682  017F  0800               	movf	0,w
 17683  0180  0201               	subwf	1,w
 17684  0181  1C03               	skipc
 17685  0182  29C7               	goto	i1l7372
 17686  0183                     i1l7352:	
 17687                           
 17688                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17689  0183  087C               	movf	_DimmerLightsIntr,w
 17690  0184  0086               	movwf	6
 17691  0185  3001               	movlw	1	; select bank2/3
 17692  0186  0087               	movwf	7
 17693  0187  1081               	bcf	1,1
 17694                           
 17695                           ;Dimmer_B1.c: 153: }
 17696                           ;Dimmer_B1.c: 154: } else {
 17697  0188  29C7               	goto	i1l7372
 17698  0189                     i1l7354:	
 17699                           
 17700                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17701  0189  3001               	movlw	1
 17702  018A  00F2               	movwf	??_setDimmerLights_IntrControl
 17703  018B  087C               	movf	_DimmerLightsIntr,w
 17704  018C  3E04               	addlw	4
 17705  018D  0086               	movwf	6
 17706  018E  3001               	movlw	1	; select bank2/3
 17707  018F  0087               	movwf	7
 17708  0190  0872               	movf	??_setDimmerLights_IntrControl,w
 17709  0191  0781               	addwf	1,f
 17710                           
 17711                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17712  0192  087C               	movf	_DimmerLightsIntr,w
 17713  0193  3E04               	addlw	4
 17714  0194  0086               	movwf	6
 17715  0195  3001               	movlw	1	; select bank2/3
 17716  0196  0087               	movwf	7
 17717  0197  087C               	movf	_DimmerLightsIntr,w
 17718  0198  3E06               	addlw	6
 17719  0199  0084               	movwf	4
 17720  019A  3001               	movlw	1	; select bank2/3
 17721  019B  0085               	movwf	5
 17722  019C  0800               	movf	0,w
 17723  019D  0201               	subwf	1,w
 17724  019E  1C03               	skipc
 17725  019F  29C7               	goto	i1l7372
 17726                           
 17727                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17728  01A0  087C               	movf	_DimmerLightsIntr,w
 17729  01A1  0086               	movwf	6
 17730  01A2  3001               	movlw	1	; select bank2/3
 17731  01A3  0087               	movwf	7
 17732  01A4  1081               	bcf	1,1
 17733                           
 17734                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17735  01A5  087C               	movf	_DimmerLightsIntr,w
 17736  01A6  0086               	movwf	6
 17737  01A7  3001               	movlw	1	; select bank2/3
 17738  01A8  0087               	movwf	7
 17739  01A9  1301               	bcf	1,6
 17740                           
 17741                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17742  01AA  087C               	movf	_DimmerLightsIntr,w
 17743  01AB  3E09               	addlw	9
 17744  01AC  0086               	movwf	6
 17745  01AD  3001               	movlw	1	; select bank2/3
 17746  01AE  0087               	movwf	7
 17747  01AF  1501               	bsf	1,2
 17748                           
 17749                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17750  01B0  0021               	movlb	1	; select bank1
 17751  01B1  084A               	movf	_Dimmer^(0+128),w
 17752  01B2  0086               	movwf	6
 17753  01B3  0187               	clrf	7
 17754  01B4  1401               	bsf	1,0
 17755                           
 17756                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17757  01B5  0876               	movf	setDimmerLights_IntrControl@lights,w
 17758  01B6  3A01               	xorlw	1
 17759  01B7  1D03               	skipz
 17760  01B8  29BB               	goto	i1l7364
 17761                           
 17762                           ;Dimmer_B1.c: 163: RC7 = 0;
 17763  01B9  0020               	movlb	0	; select bank0
 17764  01BA  138E               	bcf	14,7	;volatile
 17765  01BB                     i1l7364:	
 17766                           
 17767                           ;Dimmer_B1.c: 165: }
 17768                           ;Dimmer_B1.c: 168: if (lights == 2) {
 17769  01BB  0876               	movf	setDimmerLights_IntrControl@lights,w
 17770  01BC  3A02               	xorlw	2
 17771  01BD  1D03               	skipz
 17772  01BE  29C1               	goto	i1l7368
 17773                           
 17774                           ;Dimmer_B1.c: 169: RA3 = 0;
 17775  01BF  0020               	movlb	0	; select bank0
 17776  01C0  118C               	bcf	12,3	;volatile
 17777  01C1                     i1l7368:	
 17778                           
 17779                           ;Dimmer_B1.c: 170: }
 17780                           ;Dimmer_B1.c: 173: if (lights == 3) {
 17781  01C1  0876               	movf	setDimmerLights_IntrControl@lights,w
 17782  01C2  3A03               	xorlw	3
 17783  01C3  1D03               	skipz
 17784  01C4  29C7               	goto	i1l7372
 17785                           
 17786                           ;Dimmer_B1.c: 174: RC6 = 0;
 17787  01C5  0020               	movlb	0	; select bank0
 17788  01C6  130E               	bcf	14,6	;volatile
 17789  01C7                     i1l7372:	
 17790                           ;Dimmer_B1.c: 175: }
 17791                           ;Dimmer_B1.c: 177: ;;
 17792                           
 17793                           
 17794                           ;Dimmer_B1.c: 178: }
 17795                           ;Dimmer_B1.c: 179: }
 17796                           ;Dimmer_B1.c: 180: }
 17797                           ;Dimmer_B1.c: 181: }
 17798                           ;Dimmer_B1.c: 182: }
 17799                           ;Dimmer_B1.c: 183: }
 17800                           ;Dimmer_B1.c: 184: }
 17801                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17802  01C7  087C               	movf	_DimmerLightsIntr,w
 17803  01C8  3E08               	addlw	8
 17804  01C9  0086               	movwf	6
 17805  01CA  3001               	movlw	1	; select bank2/3
 17806  01CB  0087               	movwf	7
 17807  01CC  1E81               	btfss	1,5
 17808  01CD  29FE               	goto	i1l7394
 17809                           
 17810                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17811  01CE  3001               	movlw	1
 17812  01CF  00F2               	movwf	??_setDimmerLights_IntrControl
 17813  01D0  087C               	movf	_DimmerLightsIntr,w
 17814  01D1  3E07               	addlw	7
 17815  01D2  0086               	movwf	6
 17816  01D3  3001               	movlw	1	; select bank2/3
 17817  01D4  0087               	movwf	7
 17818  01D5  0872               	movf	??_setDimmerLights_IntrControl,w
 17819  01D6  0781               	addwf	1,f
 17820                           
 17821                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17822  01D7  087C               	movf	_DimmerLightsIntr,w
 17823  01D8  3E07               	addlw	7
 17824  01D9  0086               	movwf	6
 17825  01DA  3001               	movlw	1	; select bank2/3
 17826  01DB  0087               	movwf	7
 17827  01DC  3005               	movlw	5
 17828  01DD  0201               	subwf	1,w
 17829  01DE  1C03               	skipc
 17830  01DF  29FE               	goto	i1l7394
 17831                           
 17832                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17833  01E0  087C               	movf	_DimmerLightsIntr,w
 17834  01E1  3E07               	addlw	7
 17835  01E2  0086               	movwf	6
 17836  01E3  3001               	movlw	1	; select bank2/3
 17837  01E4  0087               	movwf	7
 17838  01E5  0181               	clrf	1
 17839                           
 17840                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17841  01E6  087C               	movf	_DimmerLightsIntr,w
 17842  01E7  3E08               	addlw	8
 17843  01E8  0086               	movwf	6
 17844  01E9  3001               	movlw	1	; select bank2/3
 17845  01EA  0087               	movwf	7
 17846  01EB  1281               	bcf	1,5
 17847                           
 17848                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17849  01EC  0876               	movf	setDimmerLights_IntrControl@lights,w
 17850  01ED  3A01               	xorlw	1
 17851  01EE  1D03               	skipz
 17852  01EF  29F2               	goto	i1l7386
 17853                           
 17854                           ;Dimmer_B1.c: 193: RB4 = 0;
 17855  01F0  0020               	movlb	0	; select bank0
 17856  01F1  120D               	bcf	13,4	;volatile
 17857  01F2                     i1l7386:	
 17858                           ;Dimmer_B1.c: 194: ;;
 17859                           
 17860                           
 17861                           ;Dimmer_B1.c: 195: }
 17862                           ;Dimmer_B1.c: 198: if (lights == 2) {
 17863  01F2  0876               	movf	setDimmerLights_IntrControl@lights,w
 17864  01F3  3A02               	xorlw	2
 17865  01F4  1D03               	skipz
 17866  01F5  29F8               	goto	i1l7390
 17867                           
 17868                           ;Dimmer_B1.c: 199: RA7 = 0;
 17869  01F6  0020               	movlb	0	; select bank0
 17870  01F7  138C               	bcf	12,7	;volatile
 17871  01F8                     i1l7390:	
 17872                           
 17873                           ;Dimmer_B1.c: 200: }
 17874                           ;Dimmer_B1.c: 203: if (lights == 3) {
 17875  01F8  0876               	movf	setDimmerLights_IntrControl@lights,w
 17876  01F9  3A03               	xorlw	3
 17877  01FA  1D03               	skipz
 17878  01FB  29FE               	goto	i1l7394
 17879                           
 17880                           ;Dimmer_B1.c: 204: RB1 = 0;
 17881  01FC  0020               	movlb	0	; select bank0
 17882  01FD  108D               	bcf	13,1	;volatile
 17883  01FE                     i1l7394:	
 17884                           
 17885                           ;Dimmer_B1.c: 205: }
 17886                           ;Dimmer_B1.c: 207: }
 17887                           ;Dimmer_B1.c: 208: }
 17888                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17889  01FE  087C               	movf	_DimmerLightsIntr,w
 17890  01FF  3E09               	addlw	9
 17891  0200  0086               	movwf	6
 17892  0201  3001               	movlw	1	; select bank2/3
 17893  0202  0087               	movwf	7
 17894  0203  1E81               	btfss	1,5
 17895  0204  0008               	return
 17896                           
 17897                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17898  0205  3001               	movlw	1
 17899  0206  00F2               	movwf	??_setDimmerLights_IntrControl
 17900  0207  087C               	movf	_DimmerLightsIntr,w
 17901  0208  3E0A               	addlw	10
 17902  0209  0086               	movwf	6
 17903  020A  3001               	movlw	1	; select bank2/3
 17904  020B  0087               	movwf	7
 17905  020C  0872               	movf	??_setDimmerLights_IntrControl,w
 17906  020D  0781               	addwf	1,f
 17907                           
 17908                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17909  020E  087C               	movf	_DimmerLightsIntr,w
 17910  020F  3E0A               	addlw	10
 17911  0210  0086               	movwf	6
 17912  0211  3001               	movlw	1	; select bank2/3
 17913  0212  0087               	movwf	7
 17914  0213  0801               	movf	1,w
 17915  0214  3A46               	xorlw	70
 17916  0215  1D03               	skipz
 17917  0216  0008               	return
 17918                           
 17919                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17920  0217  087C               	movf	_DimmerLightsIntr,w
 17921  0218  3E0A               	addlw	10
 17922  0219  0086               	movwf	6
 17923  021A  3001               	movlw	1	; select bank2/3
 17924  021B  0087               	movwf	7
 17925  021C  0181               	clrf	1
 17926                           
 17927                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17928  021D  087C               	movf	_DimmerLightsIntr,w
 17929  021E  3E09               	addlw	9
 17930  021F  0086               	movwf	6
 17931  0220  3001               	movlw	1	; select bank2/3
 17932  0221  0087               	movwf	7
 17933  0222  1281               	bcf	1,5
 17934  0223  0008               	return
 17935  0224                     __end_of_setDimmerLights_IntrControl:	
 17936                           
 17937                           	psect	text123
 17938  1F07                     __ptext123:	
 17939 ;; *************** function _DimmerIntrPointSelect *****************
 17940 ;; Defined at:
 17941 ;;		line 65 in file "../src/Dimmer_B1.c"
 17942 ;; Parameters:    Size  Location     Type
 17943 ;;  lights          1    wreg     unsigned char 
 17944 ;; Auto vars:     Size  Location     Type
 17945 ;;  lights          1    1[COMMON] unsigned char 
 17946 ;; Return value:  Size  Location     Type
 17947 ;;		None               void
 17948 ;; Registers used:
 17949 ;;		wreg
 17950 ;; Tracked objects:
 17951 ;;		On entry : 0/0
 17952 ;;		On exit  : 0/0
 17953 ;;		Unchanged: 0/0
 17954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;Total ram usage:        2 bytes
 17960 ;; Hardware stack levels used:    1
 17961 ;; This function calls:
 17962 ;;		Nothing
 17963 ;; This function is called by:
 17964 ;;		_setDimmerLights_IntrControl
 17965 ;; This function uses a non-reentrant model
 17966 ;;
 17967                           
 17968                           
 17969                           ;psect for function _DimmerIntrPointSelect
 17970  1F07                     _DimmerIntrPointSelect:	
 17971                           
 17972                           ;incstack = 0
 17973                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17974                           ;DimmerIntrPointSelect@lights stored from wreg
 17975  1F07  00F1               	movwf	DimmerIntrPointSelect@lights
 17976                           
 17977                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17978  1F08  0871               	movf	DimmerIntrPointSelect@lights,w
 17979  1F09  3A01               	xorlw	1
 17980  1F0A  1D03               	skipz
 17981  1F0B  2F10               	goto	i1l834
 17982                           
 17983                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17984  1F0C  303D               	movlw	_DimmerLights1& (0+255)
 17985  1F0D  00F0               	movwf	??_DimmerIntrPointSelect
 17986  1F0E  0870               	movf	??_DimmerIntrPointSelect,w
 17987  1F0F  00FC               	movwf	_DimmerLightsIntr
 17988  1F10                     i1l834:	
 17989                           
 17990                           ;Dimmer_B1.c: 69: }
 17991                           ;Dimmer_B1.c: 72: if (lights == 2) {
 17992  1F10  0871               	movf	DimmerIntrPointSelect@lights,w
 17993  1F11  3A02               	xorlw	2
 17994  1F12  1D03               	skipz
 17995  1F13  2F18               	goto	i1l835
 17996                           
 17997                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 17998  1F14  30C5               	movlw	_DimmerLights2& (0+255)
 17999  1F15  00F0               	movwf	??_DimmerIntrPointSelect
 18000  1F16  0870               	movf	??_DimmerIntrPointSelect,w
 18001  1F17  00FC               	movwf	_DimmerLightsIntr
 18002  1F18                     i1l835:	
 18003                           
 18004                           ;Dimmer_B1.c: 74: }
 18005                           ;Dimmer_B1.c: 78: if (lights == 3) {
 18006  1F18  0871               	movf	DimmerIntrPointSelect@lights,w
 18007  1F19  3A03               	xorlw	3
 18008  1F1A  1D03               	skipz
 18009  1F1B  0008               	return
 18010                           
 18011                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights3;
 18012  1F1C  30D4               	movlw	_DimmerLights3& (0+255)
 18013  1F1D  00F0               	movwf	??_DimmerIntrPointSelect
 18014  1F1E  0870               	movf	??_DimmerIntrPointSelect,w
 18015  1F1F  00FC               	movwf	_DimmerLightsIntr
 18016  1F20  0008               	return
 18017  1F21                     __end_of_DimmerIntrPointSelect:	
 18018                           
 18019                           	psect	text124
 18020  1D07                     __ptext124:	
 18021 ;; *************** function _IOC_ISR *****************
 18022 ;; Defined at:
 18023 ;;		line 295 in file "../src/MCU_B1.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;		None
 18026 ;; Auto vars:     Size  Location     Type
 18027 ;;		None
 18028 ;; Return value:  Size  Location     Type
 18029 ;;		None               void
 18030 ;; Registers used:
 18031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18032 ;; Tracked objects:
 18033 ;;		On entry : 0/0
 18034 ;;		On exit  : 0/0
 18035 ;;		Unchanged: 0/0
 18036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;Total ram usage:        0 bytes
 18042 ;; Hardware stack levels used:    1
 18043 ;; Hardware stack levels required when called:    3
 18044 ;; This function calls:
 18045 ;;		_setDimmerReClock
 18046 ;; This function is called by:
 18047 ;;		_ISR
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           
 18052                           ;psect for function _IOC_ISR
 18053  1D07                     _IOC_ISR:	
 18054                           
 18055                           ;MCU_B1.c: 296: if (IOCIE == 1 && IOCBF2 == 1) {
 18056                           
 18057                           ;incstack = 0
 18058                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18059  1D07  1D8B               	btfss	11,3	;volatile
 18060  1D08  0008               	return
 18061  1D09  0027               	movlb	7	; select bank7
 18062  1D0A  1D16               	btfss	22,2	;volatile
 18063  1D0B  0008               	return
 18064                           
 18065                           ;MCU_B1.c: 297: IOCBF2 = 0;
 18066  1D0C  1116               	bcf	22,2	;volatile
 18067                           
 18068                           ;MCU_B1.c: 298: IOCIF = 0;
 18069  1D0D  100B               	bcf	11,0	;volatile
 18070                           
 18071                           ;MCU_B1.c: 299: if (myMain.PowerON == 1) {
 18072  1D0E  0021               	movlb	1	; select bank1
 18073  1D0F  1C20               	btfss	_myMain^(0+128),0
 18074  1D10  0008               	return
 18075                           
 18076                           ;MCU_B1.c: 301: setDimmerReClock();
 18077  1D11  319D  252F         	fcall	_setDimmerReClock
 18078  1D13  0008               	return
 18079  1D14                     __end_of_IOC_ISR:	
 18080                           
 18081                           	psect	text125
 18082  1D2F                     __ptext125:	
 18083 ;; *************** function _setDimmerReClock *****************
 18084 ;; Defined at:
 18085 ;;		line 173 in file "../src/MCU_B1.c"
 18086 ;; Parameters:    Size  Location     Type
 18087 ;;		None
 18088 ;; Auto vars:     Size  Location     Type
 18089 ;;		None
 18090 ;; Return value:  Size  Location     Type
 18091 ;;		None               void
 18092 ;; Registers used:
 18093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18094 ;; Tracked objects:
 18095 ;;		On entry : 0/0
 18096 ;;		On exit  : 0/0
 18097 ;;		Unchanged: 0/0
 18098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;Total ram usage:        0 bytes
 18104 ;; Hardware stack levels used:    1
 18105 ;; Hardware stack levels required when called:    2
 18106 ;; This function calls:
 18107 ;;		_setDimmerLights_IntrIOC_GO
 18108 ;; This function is called by:
 18109 ;;		_IOC_ISR
 18110 ;; This function uses a non-reentrant model
 18111 ;;
 18112                           
 18113                           
 18114                           ;psect for function _setDimmerReClock
 18115  1D2F                     _setDimmerReClock:	
 18116                           
 18117                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(1);
 18118                           
 18119                           ;incstack = 0
 18120                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18121  1D2F  3001               	movlw	1
 18122  1D30  3190  206B  319D   	fcall	_setDimmerLights_IntrIOC_GO
 18123                           
 18124                           ;MCU_B1.c: 182: setDimmerLights_IntrIOC_GO(2);
 18125  1D33  3002               	movlw	2
 18126  1D34  3190  206B  319D   	fcall	_setDimmerLights_IntrIOC_GO
 18127                           
 18128                           ;MCU_B1.c: 186: setDimmerLights_IntrIOC_GO(3);
 18129  1D37  3003               	movlw	3
 18130  1D38  3190  206B         	fcall	_setDimmerLights_IntrIOC_GO
 18131                           
 18132                           ;MCU_B1.c: 189: TMR0 = 255;
 18133  1D3A  30FF               	movlw	255
 18134  1D3B  0020               	movlb	0	; select bank0
 18135  1D3C  0095               	movwf	21	;volatile
 18136  1D3D  0008               	return
 18137  1D3E                     __end_of_setDimmerReClock:	
 18138                           
 18139                           	psect	text126
 18140  106B                     __ptext126:	
 18141 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18142 ;; Defined at:
 18143 ;;		line 28 in file "../src/Dimmer_B1.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;  lights          1    wreg     unsigned char 
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;  lights          1    2[COMMON] unsigned char 
 18148 ;; Return value:  Size  Location     Type
 18149 ;;		None               void
 18150 ;; Registers used:
 18151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;Total ram usage:        1 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    1
 18164 ;; This function calls:
 18165 ;;		_DimmerIntrIOCPointSelect
 18166 ;; This function is called by:
 18167 ;;		_setDimmerReClock
 18168 ;; This function uses a non-reentrant model
 18169 ;;
 18170                           
 18171                           
 18172                           ;psect for function _setDimmerLights_IntrIOC_GO
 18173  106B                     _setDimmerLights_IntrIOC_GO:	
 18174                           
 18175                           ;incstack = 0
 18176                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18177                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18178  106B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18179                           
 18180                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18181  106C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18182  106D  319F  278C  3190   	fcall	_DimmerIntrIOCPointSelect
 18183                           
 18184                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18185  1070  0021               	movlb	1	; select bank1
 18186  1071  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18187  1072  0086               	movwf	6
 18188  1073  3001               	movlw	1	; select bank2/3
 18189  1074  0087               	movwf	7
 18190  1075  1801               	btfsc	1,0
 18191  1076  0008               	return
 18192  1077  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18193  1078  3E09               	addlw	9
 18194  1079  0086               	movwf	6
 18195  107A  3001               	movlw	1	; select bank2/3
 18196  107B  0087               	movwf	7
 18197  107C  1A81               	btfsc	1,5
 18198  107D  0008               	return
 18199                           
 18200                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18201  107E  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18202  107F  0086               	movwf	6
 18203  1080  3001               	movlw	1	; select bank2/3
 18204  1081  0087               	movwf	7
 18205  1082  1401               	bsf	1,0
 18206                           
 18207                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18208  1083  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 18209  1084  3E09               	addlw	9
 18210  1085  0086               	movwf	6
 18211  1086  3001               	movlw	1	; select bank2/3
 18212  1087  0087               	movwf	7
 18213  1088  1681               	bsf	1,5
 18214  1089  0008               	return
 18215  108A                     __end_of_setDimmerLights_IntrIOC_GO:	
 18216                           
 18217                           	psect	text127
 18218  1F8C                     __ptext127:	
 18219 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18220 ;; Defined at:
 18221 ;;		line 8 in file "../src/Dimmer_B1.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;  lights          1    wreg     unsigned char 
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;  lights          1    1[COMMON] unsigned char 
 18226 ;; Return value:  Size  Location     Type
 18227 ;;		None               void
 18228 ;; Registers used:
 18229 ;;		wreg
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;Total ram usage:        2 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; This function calls:
 18242 ;;		Nothing
 18243 ;; This function is called by:
 18244 ;;		_setDimmerLights_IntrIOC_GO
 18245 ;; This function uses a non-reentrant model
 18246 ;;
 18247                           
 18248                           
 18249                           ;psect for function _DimmerIntrIOCPointSelect
 18250  1F8C                     _DimmerIntrIOCPointSelect:	
 18251                           
 18252                           ;incstack = 0
 18253                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18254                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18255  1F8C  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18256                           
 18257                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18258  1F8D  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18259  1F8E  3A01               	xorlw	1
 18260  1F8F  1D03               	skipz
 18261  1F90  2F96               	goto	i1l824
 18262                           
 18263                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18264  1F91  303D               	movlw	_DimmerLights1& (0+255)
 18265  1F92  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18266  1F93  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18267  1F94  0021               	movlb	1	; select bank1
 18268  1F95  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 18269  1F96                     i1l824:	
 18270                           
 18271                           ;Dimmer_B1.c: 12: }
 18272                           ;Dimmer_B1.c: 15: if (lights == 2) {
 18273  1F96  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18274  1F97  3A02               	xorlw	2
 18275  1F98  1D03               	skipz
 18276  1F99  2F9F               	goto	i1l825
 18277                           
 18278                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 18279  1F9A  30C5               	movlw	_DimmerLights2& (0+255)
 18280  1F9B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18281  1F9C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18282  1F9D  0021               	movlb	1	; select bank1
 18283  1F9E  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 18284  1F9F                     i1l825:	
 18285                           
 18286                           ;Dimmer_B1.c: 17: }
 18287                           ;Dimmer_B1.c: 21: if (lights == 3) {
 18288  1F9F  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18289  1FA0  3A03               	xorlw	3
 18290  1FA1  1D03               	skipz
 18291  1FA2  0008               	return
 18292                           
 18293                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 18294  1FA3  30D4               	movlw	_DimmerLights3& (0+255)
 18295  1FA4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18296  1FA5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18297  1FA6  0021               	movlb	1	; select bank1
 18298  1FA7  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 18299  1FA8  0008               	return
 18300  1FA9                     __end_of_DimmerIntrIOCPointSelect:	
 18301                           
 18302                           	psect	text128
 18303  1CAC                     __ptext128:	
 18304 ;; *************** function _INT_ISR *****************
 18305 ;; Defined at:
 18306 ;;		line 248 in file "../src/MCU_B1.c"
 18307 ;; Parameters:    Size  Location     Type
 18308 ;;		None
 18309 ;; Auto vars:     Size  Location     Type
 18310 ;;		None
 18311 ;; Return value:  Size  Location     Type
 18312 ;;		None               void
 18313 ;; Registers used:
 18314 ;;		wreg, status,2, status,0, pclath, cstack
 18315 ;; Tracked objects:
 18316 ;;		On entry : 0/0
 18317 ;;		On exit  : 0/0
 18318 ;;		Unchanged: 0/0
 18319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;Total ram usage:        0 bytes
 18325 ;; Hardware stack levels used:    1
 18326 ;; Hardware stack levels required when called:    1
 18327 ;; This function calls:
 18328 ;;		_setRF_ReceiveGO
 18329 ;; This function is called by:
 18330 ;;		_ISR
 18331 ;; This function uses a non-reentrant model
 18332 ;;
 18333                           
 18334                           
 18335                           ;psect for function _INT_ISR
 18336  1CAC                     _INT_ISR:	
 18337                           
 18338                           ;MCU_B1.c: 249: if (INTE == 1 && INTF == 1) {
 18339                           
 18340                           ;incstack = 0
 18341                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 18342  1CAC  1E0B               	btfss	11,4	;volatile
 18343  1CAD  0008               	return
 18344  1CAE  1C8B               	btfss	11,1	;volatile
 18345  1CAF  0008               	return
 18346                           
 18347                           ;MCU_B1.c: 250: INTF = 0;
 18348  1CB0  108B               	bcf	11,1	;volatile
 18349                           
 18350                           ;MCU_B1.c: 252: setRF_ReceiveGO(1);
 18351  1CB1  3001               	movlw	1
 18352  1CB2  319C  24B5         	fcall	_setRF_ReceiveGO
 18353  1CB4  0008               	return
 18354  1CB5                     __end_of_INT_ISR:	
 18355                           
 18356                           	psect	text129
 18357  1CB5                     __ptext129:	
 18358 ;; *************** function _setRF_ReceiveGO *****************
 18359 ;; Defined at:
 18360 ;;		line 28 in file "../src/RF_Control_B1.c"
 18361 ;; Parameters:    Size  Location     Type
 18362 ;;  command         1    wreg     unsigned char 
 18363 ;; Auto vars:     Size  Location     Type
 18364 ;;  command         1    0[COMMON] unsigned char 
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;Total ram usage:        1 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; This function calls:
 18381 ;;		Nothing
 18382 ;; This function is called by:
 18383 ;;		_INT_ISR
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           
 18388                           ;psect for function _setRF_ReceiveGO
 18389  1CB5                     _setRF_ReceiveGO:	
 18390                           
 18391                           ;incstack = 0
 18392                           ; Regs used in _setRF_ReceiveGO: [wreg]
 18393                           ;setRF_ReceiveGO@command stored from wreg
 18394  1CB5  00F0               	movwf	setRF_ReceiveGO@command
 18395                           
 18396                           ;RF_Control_B1.c: 29: if (RF1.RxStatus == 1) {
 18397  1CB6  0021               	movlb	1	; select bank1
 18398  1CB7  1DC2               	btfss	_RF1^(0+128),3
 18399  1CB8  0008               	return
 18400                           
 18401                           ;RF_Control_B1.c: 30: RF1.RxStatus = 0;
 18402  1CB9  11C2               	bcf	_RF1^(0+128),3
 18403                           
 18404                           ;RF_Control_B1.c: 31: RF1.Run = 1;
 18405  1CBA  14C3               	bsf	(_RF1^(0+128)+1),1
 18406                           
 18407                           ;RF_Control_B1.c: 32: RF1.ReceiveGO = command;
 18408  1CBB  0870               	movf	setRF_ReceiveGO@command,w
 18409  1CBC  10C2               	bcf	_RF1^(0+128),1
 18410  1CBD  1D03               	skipz
 18411  1CBE  14C2               	bsf	_RF1^(0+128),1
 18412  1CBF  0008               	return
 18413  1CC0                     __end_of_setRF_ReceiveGO:	
 18414  007E                     btemp	set	126	;btemp
 18415  007E                     pic14e$flags	set	126
 18416  007E                     wtemp	set	126
 18417  007E                     wtemp0	set	126
 18418  0080                     wtemp1	set	128
 18419  0082                     wtemp2	set	130
 18420  0084                     wtemp3	set	132
 18421  0086                     wtemp4	set	134
 18422  0088                     wtemp5	set	136
 18423  007F                     wtemp6	set	127
 18424  007E                     ttemp	set	126
 18425  007E                     ttemp0	set	126
 18426  0081                     ttemp1	set	129
 18427  0084                     ttemp2	set	132
 18428  0087                     ttemp3	set	135
 18429  007F                     ttemp4	set	127
 18430  007E                     ltemp	set	126
 18431  007E                     ltemp0	set	126
 18432  0082                     ltemp1	set	130
 18433  0086                     ltemp2	set	134
 18434  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         252
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     79      80
    BANK1            80      0      79
    BANK2            80      0      75
    BANK3            80      0      76
    BANK4            80      0      50
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK4[9]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK2[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK3[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw3(BANK2[5]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   87025
                                             75 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1463
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     130
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6930
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    6930
                                             17 BANK0      1     1      0
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    6930
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     132
                                              1 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4202
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     368
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2406
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20782
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   20782
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0    9160
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8765
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1328
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1067
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1067
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27772
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   27772
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   27096
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25809
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10310
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1136
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11201
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11135
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1222
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1222
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9954
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0    9840
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6377
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1677
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1036
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0     124
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      88
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      88
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9642
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9642
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     558
                                              1 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     622
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     430
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     430
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      88
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      88
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     396
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     286
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0      22
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      32      13       62.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     176      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Oct 18 15:12:16 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 118E                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 0078  
     __end_of_getDimmerLights_StatusFlag 1E52               _getDimmerLights_StatusFlag 1E3E  
                 __end_of_setDelayOff_GO 0A28                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0EE2                             ___ftadd@sign 0048  
                                    l114 17D8                                      l124 160E  
                                    l116 17EC                                      l125 160A  
                                    l126 15F8                                      l128 1608  
                                    l408 11DB                                      l291 0935  
                                    l364 1EFA                                      l365 1EFC  
                                    l936 178C                                      l881 1F5F  
                                    l882 1F67                                      _GIE 005F  
                                    _CRC 00C9                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0021  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00CF                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00C2                                      _ISR 0004  
                                    _WDT 00EE                                      _Sw1 01E3  
                                    _Sw2 0240                                      _Sw3 0249  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1F07  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1C43  
                        __end_of_ADC_Set 1C85                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0D51                    _setDimmerLights_ERROR 16AE  
                  _setDimmerLights_AdjRF 118E                    _setDimmerLights_AdjGo 1DD8  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1D14  
                           ___ftdiv@sign 003D                 ?_DimmerLightsPointSelect 0070  
                                   l1471 10C6                                     l2431 141B  
                                   l2351 0AB2                                     l2416 10D3  
                                   l2417 10DD                                     l1484 1351  
                                   l2356 0ACF                                     l1493 14EF  
                        __end_of_IOC_Set 1D21                                     l3174 08E2  
                                   l2358 0AF4                                     l2359 0AE3  
                                   l3168 08CB                                     l2376 1D70  
                                   l6010 0DEA                                     l2394 1387  
                                   l2802 1D7B                                     l1684 1581  
                                   l3197 0413                                     l6030 0E28  
                                   l6200 174B                                     l6040 0E41  
                                   l6104 1277                                     l2834 0256  
                                   l6044 0E4F                                     l6036 0E35  
                                   l6028 0E1A                                     l7100 0ED0  
                                   l2860 0E8F                                     l6038 0E3E  
                                   l6070 1E35                                     l7200 14AD  
                                   l6152 1FD1                                     l6066 1E2F  
                                   l6322 09FA                                     l7130 0981  
                                   l6084 1FB4                                     l6156 1FDA  
                                   l6332 0A19                                     l7140 098F  
                                   l2884 0994                                     l7116 096D  
                                   l6174 1714                                     l6326 0A00  
                                   l7118 0970                                     l7070 0E7C  
                                   l6088 1FBD                                     l6192 173A  
                                   l6184 171C                                     l6168 1709  
                                   l6256 0A84                                     l6600 11BB  
                                   l6408 1397                                     l6328 0A0D  
                                   l7128 097E                                     l7080 0E8A  
                                   l7056 0E68                                     l6186 1728  
                                   l5810 08B7                                     l5802 08A1  
                                   l8210 1308                                     l6602 11BE  
                                   l7170 0B52                                     l7058 0E6B  
                                   l6196 1743                                     l6460 1FF9  
                                   l7068 0E79                                     l7190 149D  
                                   l5806 08A8                                     l8214 1313  
                                   l8230 0B86                                     l6606 11C4  
                                   l8046 13E6                                     l8070 156A  
                                   l7184 1494                                     l5816 08D0  
                                   l5808 08B2                                     l7600 14BA  
                                   l6552 0FC8                                     l8400 144F  
                                   l7194 14A4                                     l7186 1497  
                                   l5818 08D8                                     l8218 131E  
                                   l8234 0B8C                                     l8242 0B98  
                                   l6458 1FF3                                     l6538 0F8E  
                                   l7196 14A7                                     l5836 1154  
                                   l5924 077A                                     l6476 1E4B  
                                   l8252 0BA8                                     l8260 0BB4  
                                   l8308 0DA5                                     l6812 0BF6  
                                   l5908 0452                                     l5852 03A3  
                                   l6548 0FB2                                     l8340 177B  
                                   l8404 145B                                     l6590 1F33  
                                   l5918 0764                                     l8238 0B92  
                                   l7606 14CF                                     l6822 0C09  
                                   l6806 0BED                                     l6814 0BF9  
                                   l5870 03CC                                     l8342 1780  
                                   l8334 1768                                     l6584 1F2A  
                                   l8272 0BD2                                     l8280 0BDE  
                                   l8256 0BAE                                     l8248 0BA2  
                                   l6912 0816                                     l6824 0C0C  
                                   l6808 0BF0                                     l5880 03EE  
                                   l5848 039C                                     l5960 0601  
                                   l6576 1409                                     l8416 1591  
                                   l6586 1F2D                                     l5946 07D4  
                                   l5938 07BB                                     l8506 0F6A  
                                   l6762 090A                                     l5890 040F  
                                   l5882 03F2                                     l5858 03B2  
                                   l7810 02EF                                     l8276 0BD8  
                                   l8268 0BCC                                     l8460 0EF7  
                                   l8532 1652                                     l6844 0C24  
                                   l6828 0C12                                     l6780 093B  
                                   l6756 0901                                     l5876 03DF  
                                   l8380 0729                                     l8372 0717  
                                   l8428 15A7                                     l7820 0321  
                                   l6870 11F7                                     l8462 0EFA  
                                   l6846 0C3D                                     l6790 094B  
                                   l6782 093E                                     l6758 0904  
                                   l5894 0425                                     l5878 03E9  
                                   l5990 066E                                     l5982 065A  
                                   l5966 0617                                     l8366 06FC  
                                   l7750 1D80                                     l7582 10F3  
                                   l8472 0F08                                     l8536 1659  
                                   l8528 164B                                     l6776 091C  
                                   l5888 0405                                     l8392 0744  
                                   l8384 0732                                     l8376 0720  
                                   l8608 0AA6                                     l7584 10F6  
                                   l6882 117D                                     l8474 0F0B  
                                   l6858 0C56                                     l6794 0951  
                                   l6786 0944                                     l5898 0437  
                                   l5994 0676                                     l5978 0652  
                                   l7754 1D86                                     l7770 024A  
                                   l8554 0C73                                     l6868 11EC  
                                   l6876 1174                                     l8484 0F19  
                                   l6788 0948                                     l8388 073B  
                                   l8628 0AC2                                     l7588 10FB  
                  _myMain_Initialization 1D89                                     l6878 1177  
                                   l8494 0F3C                                     l8486 0F1E  
                                   l6958 1339                                     l7766 023D  
                                   l7856 15E2                                     l8496 0F42  
                                   l8576 0CA0                                     l7786 0284  
                                   l8586 0CB7                                     l8690 1688  
                                   l7972 04DC                                     l7796 02B1  
                                   l8588 0CB9                                     l8686 1681  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1CB5                                     _LATC 010E  
                                   u4005 08AD                                     u4025 08C6  
                                   u4045 08D3                                     u4225 03E0  
                                   u4075 08E9                                     u4255 03F3  
                                   u4505 0677                                     u4355 078C  
                                   u4195 03CD                                     u4515 067D  
                                   u4435 0623                                     _PEIE 005E  
                                   u5245 1EB5                                     u4365 079C  
                                   u4605 0E36                                     u4285 0406  
                                   u4445 0633                                     _INTE 005C  
                                   _INTF 0059                                     u4375 07BC  
                                   u4385 07CB                                     u4545 0DF1  
                                   u4465 065B                                     u4395 07D5  
                                   u4475 0661                                     u4725 1263  
                                   u4575 0E1B                                     u4905 173B  
                                   u7505 15D8                                     u4865 171F  
                                   u4970 0A32                                     u4885 1729  
                                   u4895 1733                                     u4975 0A30  
                                   u7705 10BD                                     u5795 11E1  
                                   u7745 13DD                                     u7755 13EC  
                                   u7775 154E                                     u7785 1579  
                                   _LWLO 0CAD                                     _RFSW 00D0  
                                   _TMR0 0015                          __end_of_INT_Set 1C6B  
                                   _RSSI 00D1                                     _WREN 0CAA  
                                   _Buz1 00B6                                     __WDT 00E9  
                                   _main 1660                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0D51                          __end_of_RF_Main 1C4C  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1EEE  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1D2F                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1430  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1DD8            __end_of_DimmerIntrPointSelect 1F21  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                                  ?_main 006B                          __end_of___awdiv 1752  
                        __end_of___ftadd 046A                          __end_of___ftdiv 07F6  
                        __end_of___ftmul 069E                          ___awdiv@divisor 0020  
                        __end_of___fttol 0E58             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l824 1F96  
                                  i1l825 1F9F                                    i1l834 1F10  
                                  i1l835 1F18                   _setDimmerLights_Switch 1D98  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EB                                    _RFSW2 00EC  
                                  _RFSW3 00ED                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1EBE                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D8       __end_of_setDimmerLights_IntrIOC_GO 108A  
             _setDimmerLights_IntrIOC_GO 106B                         __end_of_TMR0_ISR 12A4  
           __size_of_CC2500_WriteCommand 001A                         __end_of_TMR0_Set 1C94  
                                  _getAD 10E8                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 17A7            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 1583              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1F8C  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0012  
          __end_of_setLED_Initialization 1E2C                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                     _Sw_DimmerOnFunc$5557 0063  
                   _Sw_DimmerOnFunc$5558 0064                     _Sw_DimmerOnFunc$5559 0065  
                     _setRF_DimmerLights 0A28              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0022         __size_of_DelayOff_Initialization 000C  
              setDimmerLights_Main@clear 0069                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 083D                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 16AE                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1C65                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0DD1  
                   _setSw_Initialization 1C94                  setOverTemp_Exceptions@i 002F  
                                 ??_main 006F                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 069E  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 001D  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1F70                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0071                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0CD7                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 116B  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 08F9  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1DA8  
                                 i1l7302 00B1                                   i1l7330 011B  
                                 i1l7306 00B8                                   i1l7324 0102  
                                 i1l7332 0121                                   i1l7342 0154  
                                 i1l7326 0108                                   i1l7352 0183  
                                 i1l7354 0189                                   i1l7338 013D  
                                 i1l7346 0168                                   i1l7364 01BB  
                                 i1l7372 01C7                                   i1l7390 01F8  
                                 i1l7368 01C1                                   i1l7386 01F2  
                                 i1l7394 01FE                                   i1l7298 00AB  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u643_25 0086  
                                 u761_25 129D                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1EBE  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1C77           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1E7B                                   _Dimmer 00CA  
                                 _DlySw1 014C                                   _DlySw2 0151  
                                 _DlySw3 0156               __end_of_Mcu_Initialization 1E90  
                    __end_of_Buzzer_Main 1615                                   _Memory 01A0  
                                 _Timer0 0135       __end_of_setDimmerLights_TriggerAdj 1DF8  
             _setDimmerLights_TriggerAdj 1DE8                                   ___bmul 1E2C  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 001D  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D6  
                                 _s_data 00D7                                   _setLED 0B76  
                                 _myMain 00A0                _setDimmerLights_Main$2151 0066  
              _setDimmerLights_Main$2152 0067                _setDimmerLights_Main$2153 0068  
                       _DimmerLightsIntr 007C                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 17A7                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0224  
            _setDimmerLights_IntrControl 004D                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1FE3                            ?_setRF_Enable 0070  
                         _setTemp_Enable 1CA4                          _RfSWPointSelect 10C8  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 002D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1D7A                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0898         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0049              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0021                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1108                            __end_of_getAD 1108  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1DB8  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0055  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000B  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 106B  
               __end_of_setDimmerReClock 1D3E                       __size_of_getRxData 0048  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1CAC  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CB                           _DimmerLights22 00CC  
                         _DimmerLights33 00CD                     __size_of_setLED_Main 004B  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1C4F                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0240                                ?_Fosc_Set 0070  
                            _Buzzer_Main 15CB                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1C55                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1CD7                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 007B  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 000C  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 1660                      _CC2500_WriteCommand 1F21  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 001B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1C7E                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13BF                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1C8C                            ?_setSw_Status 0021  
                     _setRFSW_AdjControl 13F5                  __end_of_RfSWPointSelect 10E8  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1D07  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1D14  
                   __size_of_setLog_Code 0032                                  _INT_ISR 1CAC  
                                _INT_Set 1C65                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 10A9                        _Flash_Memory_Read 1F3B  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0075  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1C49                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1ED6  
        __end_of_setControl_Lights_Table 074D                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0E58  
                        _setPercentValue 14F7                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E6  
           __end_of_CC2500_FrequencyCabr 1CD7                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1E09                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 015F  
                                _VarLED2 0163                                  _VarLED3 0167  
                      __end_of_getRxData 15CB                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1FA9                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1DB8                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1DA8                                  ___awdiv 16FE  
                                ___ftadd 0374                           ??_setSw_Enable 0021  
                                ___ftdiv 074D                                  ___ftmul 05EA  
                                ___fttol 0DD1                      __end_of_Switch_Main 1D07  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0073                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0022                                  __ptext1 153D  
                                __ptext2 1CA4                                  __ptext3 1D89  
                                __ptext4 13BF                                  __ptext5 10E8  
                                __ptext6 1F70                                  __ptext7 0002  
                                __ptext8 1C52                                  __ptext9 0C5E  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1F07                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 10C8                __end_of_Flash_Memory_Read 1F55  
                             _setRF_Main 0A94                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1CE3                        _DimmerLights_Main 1D5C  
                                _my_Main 153D           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1CCB  
                      ??_setRF_ReceiveGO 0070               __end_of_CC2500_ClearRXFIFO 1C59  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1C5D  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006F  
                         _LedPointSelect 12FC                      _DelayOffPointSelect 1FA9  
                                clrloop0 1C72           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1E1A                     end_of_initialization 0049  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1225  
                          _DelayTime_1us 11D6                        __end_of_setTxData 05EA  
             __end_of_Flash_Memory_Write 1358                                  init_ram 1C6B  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 006B  
                   Flash_Memory_Read@ret 0023                                  initloop 1C6C  
                             _setSw_Main 0224                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 11B1                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1E1A                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0BE9  
                          _CC2500_TxData 08F9                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1D2F              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14B3                  _DimmerLights_Exceptions 1752  
                           __pstringtext 1000                      _Flash_Memory_Unlock 07F6  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1D6B  
                     _Mcu_Initialization 1E7B                 __size_of_CC2500_PowerRST 0044  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1329  
                __end_of_Sw_DimmerOnFunc 0EE2                  __end_of_setPercentValue 153D  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 124F  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0800                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 11D6                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1ED6  
                   _setRF_Initialization 1C85                              _Switch_Main 1CFB  
                      __size_of_LED_Main 0010                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1F55  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E66  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1E3E                __size_of_Sw_DimmerAdjFunc 0065  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1F8C  
                      __size_of_TMR0_ISR 002B          __size_of_setOverTemp_Exceptions 003F  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR0_Set 0008  
                   __end_of_setMemory_GO 1EA6            __size_of_setDimmerLights_Main 008E  
                         __end_of_setLED 0BE9                           __end_of_setBuz 1800  
        _getDimmerLights_StatusFlag$2156 0022                     _CC2500_FrequencyCabr 1CCB  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0F70                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 138A                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1E66                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 10A9  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0CD7  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1225  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1066  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0018  
                              _VarErrLED 015B                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0036  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1D5C  
                     Sw_DimmerAdjFunc@sw 0029                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 1C52  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D2                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 001D                                _Tx_Length 00D4  
                            __pdataBANK4 0220                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1C5D  
             __size_of_DimmerLights_Main 000F                __end_of_setRF_DimmerValue 13BF  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4670 0068  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                               ?_INT_ISR 0070                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0080  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 0025                   _setOverTemp_Exceptions 1430  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013D                            _DimmerLights2 01C5  
                          _DimmerLights3 01D4                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                              __pnvBANK1 00EE              __size_of_LED_Initialization 0010  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 0071                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 1C4C  
                              _getBuz_GO 1DF8      __end_of_Flash_Memory_Initialization 0531  
            _Flash_Memory_Initialization 046A                                 ?___awdiv 0020  
                              __ptext100 16FE                                __ptext101 1CD7  
                              __ptext110 1CCB                                __ptext102 1CC0  
                              __ptext111 11D6                                __ptext103 1FA9  
                              __ptext112 1C59                                __ptext104 1E66  
                              __ptext121 1279                                __ptext113 1C55  
                              __ptext105 1C5D                                __ptext122 004D  
                              __ptext114 1F21                                __ptext106 146F  
                              __ptext123 1F07                                __ptext115 1066  
                              __ptext107 1225                                __ptext124 1D07  
                              __ptext116 1EA6                                __ptext108 108A  
                              __ptext125 1D2F                                __ptext117 1EEE  
                              __ptext109 116B                                 ?___ftadd 003E  
                              __ptext126 106B                                __ptext118 15CB  
                              __ptext127 1F8C                                __ptext119 1C43  
                              __ptext128 1CAC                                __ptext129 1CB5  
                              _getRxData 1583                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 1000                          _setRF_ReceiveGO 1CB5  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1C46                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1D89       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0050                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0150  
          __end_of_setDimmerLights_ERROR 16FE             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 11B1            __end_of_setDimmerLights_AdjGo 1DE8  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00D5           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1D98  
                       __CFG_WDTE$SWDTEN 0000                           __size_of_getAD 0020  
                           _setRF_Enable 1D21                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1FC6                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1660                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1C52  
                      _CC2500_rfSettings 102F                                 _LED_Main 1DC8  
                        SwPointSelect@sw 0020                                clear_ram0 1C71  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0531  
    __end_of_DimmerLights_Initialization 1149              _DimmerLights_Initialization 1128  
                     _CC2500_ClearRXFIFO 1C55                       _CC2500_ClearTXFIFO 1C59  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1CA4  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0070              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1329  
                             ?_getRxData 0070                                 _TMR0_ISR 1279  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1C8C                         _Sw_DimmerAdjFunc 095D  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C7  
                   __end_of_RF_RxDisable 1D7A                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1F3B                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1F70                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0B05  
                  __size_of_setTemp_Main 0079                    _Sw_DimmerAdjFunc$5567 0025  
                  _Sw_DimmerAdjFunc$5568 0026                    _Sw_DimmerAdjFunc$5569 0027  
                __size_of_setDelayOff_GO 0066                    __size_of_setSw_Enable 0029  
                               _DelayOff 007A                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1CFB                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 0009                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 138A                    _DlyOff_Initialization 1CC0  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1C61  
                       __size_of_WDT_Set 0018                    _Switch_Initialization 1E09  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1D3E                             _setMemory_GO 1E90  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 13F5  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1EEE  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 1CC0  
                            ??_Temp_Main 0032                        setRFSW_Control@sw 0063  
                              setLED@led 0023     __end_of_setDimmerLights_TriggerERROR 12CF  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 12A4  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0C5E  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 11FC                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 1149  
                       ??_LedPointSelect 0020                                 ___ftpack 0898  
                           _setSw_Status 1D4D                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1615                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0A94                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                         __size_of_my_Main 0046  
                               __ptext10 1430                                 __ptext11 11FC  
                               __ptext20 1C9C                                 __ptext12 1D21  
                               __ptext21 0E58                                 __ptext13 1752  
                               __ptext30 0A94                                 __ptext22 0B05  
                               __ptext14 12A4                                 __ptext31 1583  
                               __ptext23 095D                                 __ptext15 16AE  
                               __ptext40 118E                                 __ptext32 1358  
                               __ptext24 1DE8                                 __ptext16 1C4F  
                               __ptext41 083D                                 __ptext33 069E  
                               __ptext25 1DD8                                 __ptext17 1C4C  
                               __ptext50 1C46                                 __ptext42 05EA  
                               __ptext34 0F70                                 __ptext26 1E09  
                               __ptext18 1CFB                                 __ptext51 1C85  
                               __ptext43 0374                                 __ptext35 09C2  
                               __ptext27 1C94                                 __ptext19 0224  
                               __ptext60 1DC8                                 __ptext52 1E7B  
                               __ptext44 1DF8                                 __ptext36 124F  
                               __ptext28 1D7A                                 __ptext61 1615  
                               __ptext53 1ED6                                 __ptext45 1D6B  
                               __ptext37 1E2C                                 __ptext29 1C49  
                               __ptext70 1F3B                                 __ptext62 1DB8  
                               __ptext54 1C8C                                 __ptext46 08F9  
                               __ptext38 13F5                                 __ptext71 1D5C  
                               __ptext63 1E1A                                 __ptext55 1EBE  
                               __ptext47 0BE9                                 __ptext39 138A  
                               __ptext80 1128                                 __ptext72 0EE2  
                               __ptext64 10A9                                 __ptext56 1D14  
                               __ptext48 11B1                                 __ptext81 12CF  
                               __ptext73 0800                                 __ptext65 14B3  
                               __ptext57 1C65                                 __ptext49 1FE3  
                               __ptext90 0DD1                                 __ptext82 1C77  
                               __ptext74 0D51                                 __ptext66 1CEF  
                               __ptext58 1C61                                 __ptext91 074D  
                               __ptext83 1CE3                                 __ptext75 0B76  
                               __ptext67 046A                                 __ptext59 1C7E  
                               __ptext92 1149                                 __ptext84 0CD7  
                               __ptext76 12FC                                 __ptext68 1329  
                               __ptext93 0898                                 __ptext85 0531  
                               __ptext77 1E52                                 __ptext69 07F6  
                               __ptext94 1D3E                                 __ptext86 1D4D  
                               __ptext78 1E90                                 __ptext95 10C8  
                               __ptext87 1FC6                                 __ptext79 1E3E  
                               __ptext96 1DA8                                 __ptext88 0A28  
                               __ptext97 1D98                                 __ptext89 14F7  
                               __ptext98 1F55                                 __ptext99 17A7  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1D4D  
          __end_of_Dimmer_Initialization 1C7E             __end_of_setDimmerLights_Main 0F70  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0068  
                          setLED@command 0022                            __size_of_main 004E  
                            _setRF_Learn 1C9C                 __end_of_CC2500_SIDLEMode 1C61  
             setDimmerLights_Main@lights 006A              __end_of_DelayOffPointSelect 1FC6  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1E52  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000F  
                        _CC2500_ReadByte 1FE3                       _CC2500_InitPATable 108A  
    __size_of_getDimmerLights_StatusFlag 0014            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0B05                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0015                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006B  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006D  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 146F  
            __end_of_Flash_Memory_Modify 14F7                        ??_getPercentValue 0059  
                            _setLog_Code 1358              __end_of_Flash_Memory_Unlock 07FF  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 116B  
                     __end_of_setSw_Main 0374                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 124F                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 12FC  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 12CF  
            __end_of_setDimmerLights_Adj 083D                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                         ?_setRF_ReceiveGO 0070  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1C46     __size_of_setDimmerLights_IntrControl 01D7  
                   _Flash_Memory_Erasing 1CEF                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D3          __end_of_DelayOff_Initialization 1CE3  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1CEF  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 09C2  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 1279  
         __end_of_setOverTemp_Exceptions 146F     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 11FC                 __end_of_Sw_DimmerAdjFunc 09C2  
                __end_of_CC2500_ReadByte 2000             __end_of_setSw_Initialization 1C9C  
                        _Timeout_Counter 1EA6                     getPercentValue@value 005B  
                           _RF_RxDisable 1D6B               __end_of_LED_Initialization 1DC8  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1C4F  
               __size_of_Sw_DimmerOnFunc 008A                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1C49                 __end_of_Sw_DimmerOffFunc 0B76  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C5E                    __end_of_CC2500_TxData 095D  
                    setSw_Status@command 0021                  __end_of_CC2500_PowerRST 14B3  
