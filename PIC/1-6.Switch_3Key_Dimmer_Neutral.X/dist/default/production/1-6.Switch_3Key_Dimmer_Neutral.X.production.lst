

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 22 15:36:32 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	intentry,global,class=CODE,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	dabs	1,0x7E,2
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  008C                     	;# 
   162  008D                     	;# 
   163  008E                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0095                     	;# 
   168  0096                     	;# 
   169  0097                     	;# 
   170  0099                     	;# 
   171  009A                     	;# 
   172  009B                     	;# 
   173  009B                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  011D                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185  018E                     	;# 
   186  0191                     	;# 
   187  0191                     	;# 
   188  0192                     	;# 
   189  0193                     	;# 
   190  0193                     	;# 
   191  0194                     	;# 
   192  0195                     	;# 
   193  0196                     	;# 
   194  0197                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019C                     	;# 
   202  019C                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  020D                     	;# 
   207  0210                     	;# 
   208  0211                     	;# 
   209  0211                     	;# 
   210  0212                     	;# 
   211  0212                     	;# 
   212  0213                     	;# 
   213  0213                     	;# 
   214  0214                     	;# 
   215  0214                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0216                     	;# 
   220  0216                     	;# 
   221  0217                     	;# 
   222  0217                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0298                     	;# 
   228  0298                     	;# 
   229  0299                     	;# 
   230  029A                     	;# 
   231  0394                     	;# 
   232  0395                     	;# 
   233  0396                     	;# 
   234  0FE4                     	;# 
   235  0FE5                     	;# 
   236  0FE6                     	;# 
   237  0FE7                     	;# 
   238  0FE8                     	;# 
   239  0FE9                     	;# 
   240  0FEA                     	;# 
   241  0FEB                     	;# 
   242  0FED                     	;# 
   243  0FEE                     	;# 
   244  0FEF                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  0007                     	;# 
   253  0008                     	;# 
   254  0009                     	;# 
   255  000A                     	;# 
   256  000B                     	;# 
   257  000C                     	;# 
   258  000D                     	;# 
   259  000E                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0015                     	;# 
   264  0016                     	;# 
   265  0016                     	;# 
   266  0017                     	;# 
   267  0018                     	;# 
   268  0019                     	;# 
   269  001A                     	;# 
   270  001B                     	;# 
   271  001C                     	;# 
   272  008C                     	;# 
   273  008D                     	;# 
   274  008E                     	;# 
   275  0090                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  0116                     	;# 
   292  0117                     	;# 
   293  011D                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  018E                     	;# 
   297  0191                     	;# 
   298  0191                     	;# 
   299  0192                     	;# 
   300  0193                     	;# 
   301  0193                     	;# 
   302  0194                     	;# 
   303  0195                     	;# 
   304  0196                     	;# 
   305  0197                     	;# 
   306  0199                     	;# 
   307  019A                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019C                     	;# 
   313  019C                     	;# 
   314  019D                     	;# 
   315  019E                     	;# 
   316  019F                     	;# 
   317  020D                     	;# 
   318  0210                     	;# 
   319  0211                     	;# 
   320  0211                     	;# 
   321  0212                     	;# 
   322  0212                     	;# 
   323  0213                     	;# 
   324  0213                     	;# 
   325  0214                     	;# 
   326  0214                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0216                     	;# 
   331  0216                     	;# 
   332  0217                     	;# 
   333  0217                     	;# 
   334  0291                     	;# 
   335  0291                     	;# 
   336  0292                     	;# 
   337  0293                     	;# 
   338  0298                     	;# 
   339  0298                     	;# 
   340  0299                     	;# 
   341  029A                     	;# 
   342  0394                     	;# 
   343  0395                     	;# 
   344  0396                     	;# 
   345  0FE4                     	;# 
   346  0FE5                     	;# 
   347  0FE6                     	;# 
   348  0FE7                     	;# 
   349  0FE8                     	;# 
   350  0FE9                     	;# 
   351  0FEA                     	;# 
   352  0FEB                     	;# 
   353  0FED                     	;# 
   354  0FEE                     	;# 
   355  0FEF                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0015                     	;# 
   375  0016                     	;# 
   376  0016                     	;# 
   377  0017                     	;# 
   378  0018                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001C                     	;# 
   383  008C                     	;# 
   384  008D                     	;# 
   385  008E                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0095                     	;# 
   390  0096                     	;# 
   391  0097                     	;# 
   392  0099                     	;# 
   393  009A                     	;# 
   394  009B                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  010C                     	;# 
   400  010D                     	;# 
   401  010E                     	;# 
   402  0116                     	;# 
   403  0117                     	;# 
   404  011D                     	;# 
   405  018C                     	;# 
   406  018D                     	;# 
   407  018E                     	;# 
   408  0191                     	;# 
   409  0191                     	;# 
   410  0192                     	;# 
   411  0193                     	;# 
   412  0193                     	;# 
   413  0194                     	;# 
   414  0195                     	;# 
   415  0196                     	;# 
   416  0197                     	;# 
   417  0199                     	;# 
   418  019A                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019C                     	;# 
   424  019C                     	;# 
   425  019D                     	;# 
   426  019E                     	;# 
   427  019F                     	;# 
   428  020D                     	;# 
   429  0210                     	;# 
   430  0211                     	;# 
   431  0211                     	;# 
   432  0212                     	;# 
   433  0212                     	;# 
   434  0213                     	;# 
   435  0213                     	;# 
   436  0214                     	;# 
   437  0214                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0216                     	;# 
   442  0216                     	;# 
   443  0217                     	;# 
   444  0217                     	;# 
   445  0291                     	;# 
   446  0291                     	;# 
   447  0292                     	;# 
   448  0293                     	;# 
   449  0298                     	;# 
   450  0298                     	;# 
   451  0299                     	;# 
   452  029A                     	;# 
   453  0394                     	;# 
   454  0395                     	;# 
   455  0396                     	;# 
   456  0FE4                     	;# 
   457  0FE5                     	;# 
   458  0FE6                     	;# 
   459  0FE7                     	;# 
   460  0FE8                     	;# 
   461  0FE9                     	;# 
   462  0FEA                     	;# 
   463  0FEB                     	;# 
   464  0FED                     	;# 
   465  0FEE                     	;# 
   466  0FEF                     	;# 
   467  0000                     	;# 
   468  0001                     	;# 
   469  0002                     	;# 
   470  0003                     	;# 
   471  0004                     	;# 
   472  0005                     	;# 
   473  0006                     	;# 
   474  0007                     	;# 
   475  0008                     	;# 
   476  0009                     	;# 
   477  000A                     	;# 
   478  000B                     	;# 
   479  000C                     	;# 
   480  000D                     	;# 
   481  000E                     	;# 
   482  0010                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0015                     	;# 
   486  0016                     	;# 
   487  0016                     	;# 
   488  0017                     	;# 
   489  0018                     	;# 
   490  0019                     	;# 
   491  001A                     	;# 
   492  001B                     	;# 
   493  001C                     	;# 
   494  008C                     	;# 
   495  008D                     	;# 
   496  008E                     	;# 
   497  0090                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0097                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  0116                     	;# 
   514  0117                     	;# 
   515  011D                     	;# 
   516  018C                     	;# 
   517  018D                     	;# 
   518  018E                     	;# 
   519  0191                     	;# 
   520  0191                     	;# 
   521  0192                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0194                     	;# 
   525  0195                     	;# 
   526  0196                     	;# 
   527  0197                     	;# 
   528  0199                     	;# 
   529  019A                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019C                     	;# 
   535  019C                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  020D                     	;# 
   540  0210                     	;# 
   541  0211                     	;# 
   542  0211                     	;# 
   543  0212                     	;# 
   544  0212                     	;# 
   545  0213                     	;# 
   546  0213                     	;# 
   547  0214                     	;# 
   548  0214                     	;# 
   549  0215                     	;# 
   550  0215                     	;# 
   551  0215                     	;# 
   552  0216                     	;# 
   553  0216                     	;# 
   554  0217                     	;# 
   555  0217                     	;# 
   556  0291                     	;# 
   557  0291                     	;# 
   558  0292                     	;# 
   559  0293                     	;# 
   560  0298                     	;# 
   561  0298                     	;# 
   562  0299                     	;# 
   563  029A                     	;# 
   564  0394                     	;# 
   565  0395                     	;# 
   566  0396                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000D                     	;# 
   592  000E                     	;# 
   593  0010                     	;# 
   594  0011                     	;# 
   595  0012                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  008C                     	;# 
   606  008D                     	;# 
   607  008E                     	;# 
   608  0090                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0097                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  011D                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  018E                     	;# 
   630  0191                     	;# 
   631  0191                     	;# 
   632  0192                     	;# 
   633  0193                     	;# 
   634  0193                     	;# 
   635  0194                     	;# 
   636  0195                     	;# 
   637  0196                     	;# 
   638  0197                     	;# 
   639  0199                     	;# 
   640  019A                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  020D                     	;# 
   651  0210                     	;# 
   652  0211                     	;# 
   653  0211                     	;# 
   654  0212                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0216                     	;# 
   664  0216                     	;# 
   665  0217                     	;# 
   666  0217                     	;# 
   667  0291                     	;# 
   668  0291                     	;# 
   669  0292                     	;# 
   670  0293                     	;# 
   671  0298                     	;# 
   672  0298                     	;# 
   673  0299                     	;# 
   674  029A                     	;# 
   675  0394                     	;# 
   676  0395                     	;# 
   677  0396                     	;# 
   678  0FE4                     	;# 
   679  0FE5                     	;# 
   680  0FE6                     	;# 
   681  0FE7                     	;# 
   682  0FE8                     	;# 
   683  0FE9                     	;# 
   684  0FEA                     	;# 
   685  0FEB                     	;# 
   686  0FED                     	;# 
   687  0FEE                     	;# 
   688  0FEF                     	;# 
   689  0000                     	;# 
   690  0001                     	;# 
   691  0002                     	;# 
   692  0003                     	;# 
   693  0004                     	;# 
   694  0005                     	;# 
   695  0006                     	;# 
   696  0007                     	;# 
   697  0008                     	;# 
   698  0009                     	;# 
   699  000A                     	;# 
   700  000B                     	;# 
   701  000C                     	;# 
   702  000D                     	;# 
   703  000E                     	;# 
   704  0010                     	;# 
   705  0011                     	;# 
   706  0012                     	;# 
   707  0015                     	;# 
   708  0016                     	;# 
   709  0016                     	;# 
   710  0017                     	;# 
   711  0018                     	;# 
   712  0019                     	;# 
   713  001A                     	;# 
   714  001B                     	;# 
   715  001C                     	;# 
   716  008C                     	;# 
   717  008D                     	;# 
   718  008E                     	;# 
   719  0090                     	;# 
   720  0091                     	;# 
   721  0092                     	;# 
   722  0095                     	;# 
   723  0096                     	;# 
   724  0097                     	;# 
   725  0099                     	;# 
   726  009A                     	;# 
   727  009B                     	;# 
   728  009B                     	;# 
   729  009C                     	;# 
   730  009D                     	;# 
   731  009E                     	;# 
   732  010C                     	;# 
   733  010D                     	;# 
   734  010E                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  011D                     	;# 
   738  018C                     	;# 
   739  018D                     	;# 
   740  018E                     	;# 
   741  0191                     	;# 
   742  0191                     	;# 
   743  0192                     	;# 
   744  0193                     	;# 
   745  0193                     	;# 
   746  0194                     	;# 
   747  0195                     	;# 
   748  0196                     	;# 
   749  0197                     	;# 
   750  0199                     	;# 
   751  019A                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019C                     	;# 
   757  019C                     	;# 
   758  019D                     	;# 
   759  019E                     	;# 
   760  019F                     	;# 
   761  020D                     	;# 
   762  0210                     	;# 
   763  0211                     	;# 
   764  0211                     	;# 
   765  0212                     	;# 
   766  0212                     	;# 
   767  0213                     	;# 
   768  0213                     	;# 
   769  0214                     	;# 
   770  0214                     	;# 
   771  0215                     	;# 
   772  0215                     	;# 
   773  0215                     	;# 
   774  0216                     	;# 
   775  0216                     	;# 
   776  0217                     	;# 
   777  0217                     	;# 
   778  0291                     	;# 
   779  0291                     	;# 
   780  0292                     	;# 
   781  0293                     	;# 
   782  0298                     	;# 
   783  0298                     	;# 
   784  0299                     	;# 
   785  029A                     	;# 
   786  0394                     	;# 
   787  0395                     	;# 
   788  0396                     	;# 
   789  0FE4                     	;# 
   790  0FE5                     	;# 
   791  0FE6                     	;# 
   792  0FE7                     	;# 
   793  0FE8                     	;# 
   794  0FE9                     	;# 
   795  0FEA                     	;# 
   796  0FEB                     	;# 
   797  0FED                     	;# 
   798  0FEE                     	;# 
   799  0FEF                     	;# 
   800  0000                     	;# 
   801  0001                     	;# 
   802  0002                     	;# 
   803  0003                     	;# 
   804  0004                     	;# 
   805  0005                     	;# 
   806  0006                     	;# 
   807  0007                     	;# 
   808  0008                     	;# 
   809  0009                     	;# 
   810  000A                     	;# 
   811  000B                     	;# 
   812  000C                     	;# 
   813  000D                     	;# 
   814  000E                     	;# 
   815  0010                     	;# 
   816  0011                     	;# 
   817  0012                     	;# 
   818  0015                     	;# 
   819  0016                     	;# 
   820  0016                     	;# 
   821  0017                     	;# 
   822  0018                     	;# 
   823  0019                     	;# 
   824  001A                     	;# 
   825  001B                     	;# 
   826  001C                     	;# 
   827  008C                     	;# 
   828  008D                     	;# 
   829  008E                     	;# 
   830  0090                     	;# 
   831  0091                     	;# 
   832  0092                     	;# 
   833  0095                     	;# 
   834  0096                     	;# 
   835  0097                     	;# 
   836  0099                     	;# 
   837  009A                     	;# 
   838  009B                     	;# 
   839  009B                     	;# 
   840  009C                     	;# 
   841  009D                     	;# 
   842  009E                     	;# 
   843  010C                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  0116                     	;# 
   847  0117                     	;# 
   848  011D                     	;# 
   849  018C                     	;# 
   850  018D                     	;# 
   851  018E                     	;# 
   852  0191                     	;# 
   853  0191                     	;# 
   854  0192                     	;# 
   855  0193                     	;# 
   856  0193                     	;# 
   857  0194                     	;# 
   858  0195                     	;# 
   859  0196                     	;# 
   860  0197                     	;# 
   861  0199                     	;# 
   862  019A                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  020D                     	;# 
   873  0210                     	;# 
   874  0211                     	;# 
   875  0211                     	;# 
   876  0212                     	;# 
   877  0212                     	;# 
   878  0213                     	;# 
   879  0213                     	;# 
   880  0214                     	;# 
   881  0214                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0216                     	;# 
   886  0216                     	;# 
   887  0217                     	;# 
   888  0217                     	;# 
   889  0291                     	;# 
   890  0291                     	;# 
   891  0292                     	;# 
   892  0293                     	;# 
   893  0298                     	;# 
   894  0298                     	;# 
   895  0299                     	;# 
   896  029A                     	;# 
   897  0394                     	;# 
   898  0395                     	;# 
   899  0396                     	;# 
   900  0FE4                     	;# 
   901  0FE5                     	;# 
   902  0FE6                     	;# 
   903  0FE7                     	;# 
   904  0FE8                     	;# 
   905  0FE9                     	;# 
   906  0FEA                     	;# 
   907  0FEB                     	;# 
   908  0FED                     	;# 
   909  0FEE                     	;# 
   910  0FEF                     	;# 
   911  0000                     	;# 
   912  0001                     	;# 
   913  0002                     	;# 
   914  0003                     	;# 
   915  0004                     	;# 
   916  0005                     	;# 
   917  0006                     	;# 
   918  0007                     	;# 
   919  0008                     	;# 
   920  0009                     	;# 
   921  000A                     	;# 
   922  000B                     	;# 
   923  000C                     	;# 
   924  000D                     	;# 
   925  000E                     	;# 
   926  0010                     	;# 
   927  0011                     	;# 
   928  0012                     	;# 
   929  0015                     	;# 
   930  0016                     	;# 
   931  0016                     	;# 
   932  0017                     	;# 
   933  0018                     	;# 
   934  0019                     	;# 
   935  001A                     	;# 
   936  001B                     	;# 
   937  001C                     	;# 
   938  008C                     	;# 
   939  008D                     	;# 
   940  008E                     	;# 
   941  0090                     	;# 
   942  0091                     	;# 
   943  0092                     	;# 
   944  0095                     	;# 
   945  0096                     	;# 
   946  0097                     	;# 
   947  0099                     	;# 
   948  009A                     	;# 
   949  009B                     	;# 
   950  009B                     	;# 
   951  009C                     	;# 
   952  009D                     	;# 
   953  009E                     	;# 
   954  010C                     	;# 
   955  010D                     	;# 
   956  010E                     	;# 
   957  0116                     	;# 
   958  0117                     	;# 
   959  011D                     	;# 
   960  018C                     	;# 
   961  018D                     	;# 
   962  018E                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0194                     	;# 
   969  0195                     	;# 
   970  0196                     	;# 
   971  0197                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019C                     	;# 
   979  019C                     	;# 
   980  019D                     	;# 
   981  019E                     	;# 
   982  019F                     	;# 
   983  020D                     	;# 
   984  0210                     	;# 
   985  0211                     	;# 
   986  0211                     	;# 
   987  0212                     	;# 
   988  0212                     	;# 
   989  0213                     	;# 
   990  0213                     	;# 
   991  0214                     	;# 
   992  0214                     	;# 
   993  0215                     	;# 
   994  0215                     	;# 
   995  0215                     	;# 
   996  0216                     	;# 
   997  0216                     	;# 
   998  0217                     	;# 
   999  0217                     	;# 
  1000  0291                     	;# 
  1001  0291                     	;# 
  1002  0292                     	;# 
  1003  0293                     	;# 
  1004  0298                     	;# 
  1005  0298                     	;# 
  1006  0299                     	;# 
  1007  029A                     	;# 
  1008  0394                     	;# 
  1009  0395                     	;# 
  1010  0396                     	;# 
  1011  0FE4                     	;# 
  1012  0FE5                     	;# 
  1013  0FE6                     	;# 
  1014  0FE7                     	;# 
  1015  0FE8                     	;# 
  1016  0FE9                     	;# 
  1017  0FEA                     	;# 
  1018  0FEB                     	;# 
  1019  0FED                     	;# 
  1020  0FEE                     	;# 
  1021  0FEF                     	;# 
  1022  0000                     	;# 
  1023  0001                     	;# 
  1024  0002                     	;# 
  1025  0003                     	;# 
  1026  0004                     	;# 
  1027  0005                     	;# 
  1028  0006                     	;# 
  1029  0007                     	;# 
  1030  0008                     	;# 
  1031  0009                     	;# 
  1032  000A                     	;# 
  1033  000B                     	;# 
  1034  000C                     	;# 
  1035  000D                     	;# 
  1036  000E                     	;# 
  1037  0010                     	;# 
  1038  0011                     	;# 
  1039  0012                     	;# 
  1040  0015                     	;# 
  1041  0016                     	;# 
  1042  0016                     	;# 
  1043  0017                     	;# 
  1044  0018                     	;# 
  1045  0019                     	;# 
  1046  001A                     	;# 
  1047  001B                     	;# 
  1048  001C                     	;# 
  1049  008C                     	;# 
  1050  008D                     	;# 
  1051  008E                     	;# 
  1052  0090                     	;# 
  1053  0091                     	;# 
  1054  0092                     	;# 
  1055  0095                     	;# 
  1056  0096                     	;# 
  1057  0097                     	;# 
  1058  0099                     	;# 
  1059  009A                     	;# 
  1060  009B                     	;# 
  1061  009B                     	;# 
  1062  009C                     	;# 
  1063  009D                     	;# 
  1064  009E                     	;# 
  1065  010C                     	;# 
  1066  010D                     	;# 
  1067  010E                     	;# 
  1068  0116                     	;# 
  1069  0117                     	;# 
  1070  011D                     	;# 
  1071  018C                     	;# 
  1072  018D                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0194                     	;# 
  1080  0195                     	;# 
  1081  0196                     	;# 
  1082  0197                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019F                     	;# 
  1094  020D                     	;# 
  1095  0210                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0291                     	;# 
  1112  0291                     	;# 
  1113  0292                     	;# 
  1114  0293                     	;# 
  1115  0298                     	;# 
  1116  0298                     	;# 
  1117  0299                     	;# 
  1118  029A                     	;# 
  1119  0394                     	;# 
  1120  0395                     	;# 
  1121  0396                     	;# 
  1122  0FE4                     	;# 
  1123  0FE5                     	;# 
  1124  0FE6                     	;# 
  1125  0FE7                     	;# 
  1126  0FE8                     	;# 
  1127  0FE9                     	;# 
  1128  0FEA                     	;# 
  1129  0FEB                     	;# 
  1130  0FED                     	;# 
  1131  0FEE                     	;# 
  1132  0FEF                     	;# 
  1133  0000                     	;# 
  1134  0001                     	;# 
  1135  0002                     	;# 
  1136  0003                     	;# 
  1137  0004                     	;# 
  1138  0005                     	;# 
  1139  0006                     	;# 
  1140  0007                     	;# 
  1141  0008                     	;# 
  1142  0009                     	;# 
  1143  000A                     	;# 
  1144  000B                     	;# 
  1145  000C                     	;# 
  1146  000D                     	;# 
  1147  000E                     	;# 
  1148  0010                     	;# 
  1149  0011                     	;# 
  1150  0012                     	;# 
  1151  0015                     	;# 
  1152  0016                     	;# 
  1153  0016                     	;# 
  1154  0017                     	;# 
  1155  0018                     	;# 
  1156  0019                     	;# 
  1157  001A                     	;# 
  1158  001B                     	;# 
  1159  001C                     	;# 
  1160  008C                     	;# 
  1161  008D                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0097                     	;# 
  1169  0099                     	;# 
  1170  009A                     	;# 
  1171  009B                     	;# 
  1172  009B                     	;# 
  1173  009C                     	;# 
  1174  009D                     	;# 
  1175  009E                     	;# 
  1176  010C                     	;# 
  1177  010D                     	;# 
  1178  010E                     	;# 
  1179  0116                     	;# 
  1180  0117                     	;# 
  1181  011D                     	;# 
  1182  018C                     	;# 
  1183  018D                     	;# 
  1184  018E                     	;# 
  1185  0191                     	;# 
  1186  0191                     	;# 
  1187  0192                     	;# 
  1188  0193                     	;# 
  1189  0193                     	;# 
  1190  0194                     	;# 
  1191  0195                     	;# 
  1192  0196                     	;# 
  1193  0197                     	;# 
  1194  0199                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019C                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019E                     	;# 
  1204  019F                     	;# 
  1205  020D                     	;# 
  1206  0210                     	;# 
  1207  0211                     	;# 
  1208  0211                     	;# 
  1209  0212                     	;# 
  1210  0212                     	;# 
  1211  0213                     	;# 
  1212  0213                     	;# 
  1213  0214                     	;# 
  1214  0214                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0291                     	;# 
  1223  0291                     	;# 
  1224  0292                     	;# 
  1225  0293                     	;# 
  1226  0298                     	;# 
  1227  0298                     	;# 
  1228  0299                     	;# 
  1229  029A                     	;# 
  1230  0394                     	;# 
  1231  0395                     	;# 
  1232  0396                     	;# 
  1233  0FE4                     	;# 
  1234  0FE5                     	;# 
  1235  0FE6                     	;# 
  1236  0FE7                     	;# 
  1237  0FE8                     	;# 
  1238  0FE9                     	;# 
  1239  0FEA                     	;# 
  1240  0FEB                     	;# 
  1241  0FED                     	;# 
  1242  0FEE                     	;# 
  1243  0FEF                     	;# 
  1244  0000                     	;# 
  1245  0001                     	;# 
  1246  0002                     	;# 
  1247  0003                     	;# 
  1248  0004                     	;# 
  1249  0005                     	;# 
  1250  0006                     	;# 
  1251  0007                     	;# 
  1252  0008                     	;# 
  1253  0009                     	;# 
  1254  000A                     	;# 
  1255  000B                     	;# 
  1256  000C                     	;# 
  1257  000D                     	;# 
  1258  000E                     	;# 
  1259  0010                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0015                     	;# 
  1263  0016                     	;# 
  1264  0016                     	;# 
  1265  0017                     	;# 
  1266  0018                     	;# 
  1267  0019                     	;# 
  1268  001A                     	;# 
  1269  001B                     	;# 
  1270  001C                     	;# 
  1271  008C                     	;# 
  1272  008D                     	;# 
  1273  008E                     	;# 
  1274  0090                     	;# 
  1275  0091                     	;# 
  1276  0092                     	;# 
  1277  0095                     	;# 
  1278  0096                     	;# 
  1279  0097                     	;# 
  1280  0099                     	;# 
  1281  009A                     	;# 
  1282  009B                     	;# 
  1283  009B                     	;# 
  1284  009C                     	;# 
  1285  009D                     	;# 
  1286  009E                     	;# 
  1287  010C                     	;# 
  1288  010D                     	;# 
  1289  010E                     	;# 
  1290  0116                     	;# 
  1291  0117                     	;# 
  1292  011D                     	;# 
  1293  018C                     	;# 
  1294  018D                     	;# 
  1295  018E                     	;# 
  1296  0191                     	;# 
  1297  0191                     	;# 
  1298  0192                     	;# 
  1299  0193                     	;# 
  1300  0193                     	;# 
  1301  0194                     	;# 
  1302  0195                     	;# 
  1303  0196                     	;# 
  1304  0197                     	;# 
  1305  0199                     	;# 
  1306  019A                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019C                     	;# 
  1312  019C                     	;# 
  1313  019D                     	;# 
  1314  019E                     	;# 
  1315  019F                     	;# 
  1316  020D                     	;# 
  1317  0210                     	;# 
  1318  0211                     	;# 
  1319  0211                     	;# 
  1320  0212                     	;# 
  1321  0212                     	;# 
  1322  0213                     	;# 
  1323  0213                     	;# 
  1324  0214                     	;# 
  1325  0214                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0291                     	;# 
  1334  0291                     	;# 
  1335  0292                     	;# 
  1336  0293                     	;# 
  1337  0298                     	;# 
  1338  0298                     	;# 
  1339  0299                     	;# 
  1340  029A                     	;# 
  1341  0394                     	;# 
  1342  0395                     	;# 
  1343  0396                     	;# 
  1344  0FE4                     	;# 
  1345  0FE5                     	;# 
  1346  0FE6                     	;# 
  1347  0FE7                     	;# 
  1348  0FE8                     	;# 
  1349  0FE9                     	;# 
  1350  0FEA                     	;# 
  1351  0FEB                     	;# 
  1352  0FED                     	;# 
  1353  0FEE                     	;# 
  1354  0FEF                     	;# 
  1355  0000                     	;# 
  1356  0001                     	;# 
  1357  0002                     	;# 
  1358  0003                     	;# 
  1359  0004                     	;# 
  1360  0005                     	;# 
  1361  0006                     	;# 
  1362  0007                     	;# 
  1363  0008                     	;# 
  1364  0009                     	;# 
  1365  000A                     	;# 
  1366  000B                     	;# 
  1367  000C                     	;# 
  1368  000D                     	;# 
  1369  000E                     	;# 
  1370  0010                     	;# 
  1371  0011                     	;# 
  1372  0012                     	;# 
  1373  0015                     	;# 
  1374  0016                     	;# 
  1375  0016                     	;# 
  1376  0017                     	;# 
  1377  0018                     	;# 
  1378  0019                     	;# 
  1379  001A                     	;# 
  1380  001B                     	;# 
  1381  001C                     	;# 
  1382  008C                     	;# 
  1383  008D                     	;# 
  1384  008E                     	;# 
  1385  0090                     	;# 
  1386  0091                     	;# 
  1387  0092                     	;# 
  1388  0095                     	;# 
  1389  0096                     	;# 
  1390  0097                     	;# 
  1391  0099                     	;# 
  1392  009A                     	;# 
  1393  009B                     	;# 
  1394  009B                     	;# 
  1395  009C                     	;# 
  1396  009D                     	;# 
  1397  009E                     	;# 
  1398  010C                     	;# 
  1399  010D                     	;# 
  1400  010E                     	;# 
  1401  0116                     	;# 
  1402  0117                     	;# 
  1403  011D                     	;# 
  1404  018C                     	;# 
  1405  018D                     	;# 
  1406  018E                     	;# 
  1407  0191                     	;# 
  1408  0191                     	;# 
  1409  0192                     	;# 
  1410  0193                     	;# 
  1411  0193                     	;# 
  1412  0194                     	;# 
  1413  0195                     	;# 
  1414  0196                     	;# 
  1415  0197                     	;# 
  1416  0199                     	;# 
  1417  019A                     	;# 
  1418  019B                     	;# 
  1419  019B                     	;# 
  1420  019B                     	;# 
  1421  019B                     	;# 
  1422  019C                     	;# 
  1423  019C                     	;# 
  1424  019D                     	;# 
  1425  019E                     	;# 
  1426  019F                     	;# 
  1427  020D                     	;# 
  1428  0210                     	;# 
  1429  0211                     	;# 
  1430  0211                     	;# 
  1431  0212                     	;# 
  1432  0212                     	;# 
  1433  0213                     	;# 
  1434  0213                     	;# 
  1435  0214                     	;# 
  1436  0214                     	;# 
  1437  0215                     	;# 
  1438  0215                     	;# 
  1439  0215                     	;# 
  1440  0216                     	;# 
  1441  0216                     	;# 
  1442  0217                     	;# 
  1443  0217                     	;# 
  1444  0291                     	;# 
  1445  0291                     	;# 
  1446  0292                     	;# 
  1447  0293                     	;# 
  1448  0298                     	;# 
  1449  0298                     	;# 
  1450  0299                     	;# 
  1451  029A                     	;# 
  1452  0394                     	;# 
  1453  0395                     	;# 
  1454  0396                     	;# 
  1455  0FE4                     	;# 
  1456  0FE5                     	;# 
  1457  0FE6                     	;# 
  1458  0FE7                     	;# 
  1459  0FE8                     	;# 
  1460  0FE9                     	;# 
  1461  0FEA                     	;# 
  1462  0FEB                     	;# 
  1463  0FED                     	;# 
  1464  0FEE                     	;# 
  1465  0FEF                     	;# 
  1466  0000                     	;# 
  1467  0001                     	;# 
  1468  0002                     	;# 
  1469  0003                     	;# 
  1470  0004                     	;# 
  1471  0005                     	;# 
  1472  0006                     	;# 
  1473  0007                     	;# 
  1474  0008                     	;# 
  1475  0009                     	;# 
  1476  000A                     	;# 
  1477  000B                     	;# 
  1478  000C                     	;# 
  1479  000D                     	;# 
  1480  000E                     	;# 
  1481  0010                     	;# 
  1482  0011                     	;# 
  1483  0012                     	;# 
  1484  0015                     	;# 
  1485  0016                     	;# 
  1486  0016                     	;# 
  1487  0017                     	;# 
  1488  0018                     	;# 
  1489  0019                     	;# 
  1490  001A                     	;# 
  1491  001B                     	;# 
  1492  001C                     	;# 
  1493  008C                     	;# 
  1494  008D                     	;# 
  1495  008E                     	;# 
  1496  0090                     	;# 
  1497  0091                     	;# 
  1498  0092                     	;# 
  1499  0095                     	;# 
  1500  0096                     	;# 
  1501  0097                     	;# 
  1502  0099                     	;# 
  1503  009A                     	;# 
  1504  009B                     	;# 
  1505  009B                     	;# 
  1506  009C                     	;# 
  1507  009D                     	;# 
  1508  009E                     	;# 
  1509  010C                     	;# 
  1510  010D                     	;# 
  1511  010E                     	;# 
  1512  0116                     	;# 
  1513  0117                     	;# 
  1514  011D                     	;# 
  1515  018C                     	;# 
  1516  018D                     	;# 
  1517  018E                     	;# 
  1518  0191                     	;# 
  1519  0191                     	;# 
  1520  0192                     	;# 
  1521  0193                     	;# 
  1522  0193                     	;# 
  1523  0194                     	;# 
  1524  0195                     	;# 
  1525  0196                     	;# 
  1526  0197                     	;# 
  1527  0199                     	;# 
  1528  019A                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019C                     	;# 
  1534  019C                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019F                     	;# 
  1538  020D                     	;# 
  1539  0210                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0216                     	;# 
  1552  0216                     	;# 
  1553  0217                     	;# 
  1554  0217                     	;# 
  1555  0291                     	;# 
  1556  0291                     	;# 
  1557  0292                     	;# 
  1558  0293                     	;# 
  1559  0298                     	;# 
  1560  0298                     	;# 
  1561  0299                     	;# 
  1562  029A                     	;# 
  1563  0394                     	;# 
  1564  0395                     	;# 
  1565  0396                     	;# 
  1566  0FE4                     	;# 
  1567  0FE5                     	;# 
  1568  0FE6                     	;# 
  1569  0FE7                     	;# 
  1570  0FE8                     	;# 
  1571  0FE9                     	;# 
  1572  0FEA                     	;# 
  1573  0FEB                     	;# 
  1574  0FED                     	;# 
  1575  0FEE                     	;# 
  1576  0FEF                     	;# 
  1577  0000                     	;# 
  1578  0001                     	;# 
  1579  0002                     	;# 
  1580  0003                     	;# 
  1581  0004                     	;# 
  1582  0005                     	;# 
  1583  0006                     	;# 
  1584  0007                     	;# 
  1585  0008                     	;# 
  1586  0009                     	;# 
  1587  000A                     	;# 
  1588  000B                     	;# 
  1589  000C                     	;# 
  1590  000D                     	;# 
  1591  000E                     	;# 
  1592  0010                     	;# 
  1593  0011                     	;# 
  1594  0012                     	;# 
  1595  0015                     	;# 
  1596  0016                     	;# 
  1597  0016                     	;# 
  1598  0017                     	;# 
  1599  0018                     	;# 
  1600  0019                     	;# 
  1601  001A                     	;# 
  1602  001B                     	;# 
  1603  001C                     	;# 
  1604  008C                     	;# 
  1605  008D                     	;# 
  1606  008E                     	;# 
  1607  0090                     	;# 
  1608  0091                     	;# 
  1609  0092                     	;# 
  1610  0095                     	;# 
  1611  0096                     	;# 
  1612  0097                     	;# 
  1613  0099                     	;# 
  1614  009A                     	;# 
  1615  009B                     	;# 
  1616  009B                     	;# 
  1617  009C                     	;# 
  1618  009D                     	;# 
  1619  009E                     	;# 
  1620  010C                     	;# 
  1621  010D                     	;# 
  1622  010E                     	;# 
  1623  0116                     	;# 
  1624  0117                     	;# 
  1625  011D                     	;# 
  1626  018C                     	;# 
  1627  018D                     	;# 
  1628  018E                     	;# 
  1629  0191                     	;# 
  1630  0191                     	;# 
  1631  0192                     	;# 
  1632  0193                     	;# 
  1633  0193                     	;# 
  1634  0194                     	;# 
  1635  0195                     	;# 
  1636  0196                     	;# 
  1637  0197                     	;# 
  1638  0199                     	;# 
  1639  019A                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019C                     	;# 
  1645  019C                     	;# 
  1646  019D                     	;# 
  1647  019E                     	;# 
  1648  019F                     	;# 
  1649  020D                     	;# 
  1650  0210                     	;# 
  1651  0211                     	;# 
  1652  0211                     	;# 
  1653  0212                     	;# 
  1654  0212                     	;# 
  1655  0213                     	;# 
  1656  0213                     	;# 
  1657  0214                     	;# 
  1658  0214                     	;# 
  1659  0215                     	;# 
  1660  0215                     	;# 
  1661  0215                     	;# 
  1662  0216                     	;# 
  1663  0216                     	;# 
  1664  0217                     	;# 
  1665  0217                     	;# 
  1666  0291                     	;# 
  1667  0291                     	;# 
  1668  0292                     	;# 
  1669  0293                     	;# 
  1670  0298                     	;# 
  1671  0298                     	;# 
  1672  0299                     	;# 
  1673  029A                     	;# 
  1674  0394                     	;# 
  1675  0395                     	;# 
  1676  0396                     	;# 
  1677  0FE4                     	;# 
  1678  0FE5                     	;# 
  1679  0FE6                     	;# 
  1680  0FE7                     	;# 
  1681  0FE8                     	;# 
  1682  0FE9                     	;# 
  1683  0FEA                     	;# 
  1684  0FEB                     	;# 
  1685  0FED                     	;# 
  1686  0FEE                     	;# 
  1687  0FEF                     	;# 
  1688  0000                     	;# 
  1689  0001                     	;# 
  1690  0002                     	;# 
  1691  0003                     	;# 
  1692  0004                     	;# 
  1693  0005                     	;# 
  1694  0006                     	;# 
  1695  0007                     	;# 
  1696  0008                     	;# 
  1697  0009                     	;# 
  1698  000A                     	;# 
  1699  000B                     	;# 
  1700  000C                     	;# 
  1701  000D                     	;# 
  1702  000E                     	;# 
  1703  0010                     	;# 
  1704  0011                     	;# 
  1705  0012                     	;# 
  1706  0015                     	;# 
  1707  0016                     	;# 
  1708  0016                     	;# 
  1709  0017                     	;# 
  1710  0018                     	;# 
  1711  0019                     	;# 
  1712  001A                     	;# 
  1713  001B                     	;# 
  1714  001C                     	;# 
  1715  008C                     	;# 
  1716  008D                     	;# 
  1717  008E                     	;# 
  1718  0090                     	;# 
  1719  0091                     	;# 
  1720  0092                     	;# 
  1721  0095                     	;# 
  1722  0096                     	;# 
  1723  0097                     	;# 
  1724  0099                     	;# 
  1725  009A                     	;# 
  1726  009B                     	;# 
  1727  009B                     	;# 
  1728  009C                     	;# 
  1729  009D                     	;# 
  1730  009E                     	;# 
  1731  010C                     	;# 
  1732  010D                     	;# 
  1733  010E                     	;# 
  1734  0116                     	;# 
  1735  0117                     	;# 
  1736  011D                     	;# 
  1737  018C                     	;# 
  1738  018D                     	;# 
  1739  018E                     	;# 
  1740  0191                     	;# 
  1741  0191                     	;# 
  1742  0192                     	;# 
  1743  0193                     	;# 
  1744  0193                     	;# 
  1745  0194                     	;# 
  1746  0195                     	;# 
  1747  0196                     	;# 
  1748  0197                     	;# 
  1749  0199                     	;# 
  1750  019A                     	;# 
  1751  019B                     	;# 
  1752  019B                     	;# 
  1753  019B                     	;# 
  1754  019B                     	;# 
  1755  019C                     	;# 
  1756  019C                     	;# 
  1757  019D                     	;# 
  1758  019E                     	;# 
  1759  019F                     	;# 
  1760  020D                     	;# 
  1761  0210                     	;# 
  1762  0211                     	;# 
  1763  0211                     	;# 
  1764  0212                     	;# 
  1765  0212                     	;# 
  1766  0213                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0214                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0215                     	;# 
  1773  0216                     	;# 
  1774  0216                     	;# 
  1775  0217                     	;# 
  1776  0217                     	;# 
  1777  0291                     	;# 
  1778  0291                     	;# 
  1779  0292                     	;# 
  1780  0293                     	;# 
  1781  0298                     	;# 
  1782  0298                     	;# 
  1783  0299                     	;# 
  1784  029A                     	;# 
  1785  0394                     	;# 
  1786  0395                     	;# 
  1787  0396                     	;# 
  1788  0FE4                     	;# 
  1789  0FE5                     	;# 
  1790  0FE6                     	;# 
  1791  0FE7                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEB                     	;# 
  1796  0FED                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799  0000                     	;# 
  1800  0001                     	;# 
  1801  0002                     	;# 
  1802  0003                     	;# 
  1803  0004                     	;# 
  1804  0005                     	;# 
  1805  0006                     	;# 
  1806  0007                     	;# 
  1807  0008                     	;# 
  1808  0009                     	;# 
  1809  000A                     	;# 
  1810  000B                     	;# 
  1811  000C                     	;# 
  1812  000D                     	;# 
  1813  000E                     	;# 
  1814  0010                     	;# 
  1815  0011                     	;# 
  1816  0012                     	;# 
  1817  0015                     	;# 
  1818  0016                     	;# 
  1819  0016                     	;# 
  1820  0017                     	;# 
  1821  0018                     	;# 
  1822  0019                     	;# 
  1823  001A                     	;# 
  1824  001B                     	;# 
  1825  001C                     	;# 
  1826  008C                     	;# 
  1827  008D                     	;# 
  1828  008E                     	;# 
  1829  0090                     	;# 
  1830  0091                     	;# 
  1831  0092                     	;# 
  1832  0095                     	;# 
  1833  0096                     	;# 
  1834  0097                     	;# 
  1835  0099                     	;# 
  1836  009A                     	;# 
  1837  009B                     	;# 
  1838  009B                     	;# 
  1839  009C                     	;# 
  1840  009D                     	;# 
  1841  009E                     	;# 
  1842  010C                     	;# 
  1843  010D                     	;# 
  1844  010E                     	;# 
  1845  0116                     	;# 
  1846  0117                     	;# 
  1847  011D                     	;# 
  1848  018C                     	;# 
  1849  018D                     	;# 
  1850  018E                     	;# 
  1851  0191                     	;# 
  1852  0191                     	;# 
  1853  0192                     	;# 
  1854  0193                     	;# 
  1855  0193                     	;# 
  1856  0194                     	;# 
  1857  0195                     	;# 
  1858  0196                     	;# 
  1859  0197                     	;# 
  1860  0199                     	;# 
  1861  019A                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019C                     	;# 
  1867  019C                     	;# 
  1868  019D                     	;# 
  1869  019E                     	;# 
  1870  019F                     	;# 
  1871  020D                     	;# 
  1872  0210                     	;# 
  1873  0211                     	;# 
  1874  0211                     	;# 
  1875  0212                     	;# 
  1876  0212                     	;# 
  1877  0213                     	;# 
  1878  0213                     	;# 
  1879  0214                     	;# 
  1880  0214                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0216                     	;# 
  1885  0216                     	;# 
  1886  0217                     	;# 
  1887  0217                     	;# 
  1888  0291                     	;# 
  1889  0291                     	;# 
  1890  0292                     	;# 
  1891  0293                     	;# 
  1892  0298                     	;# 
  1893  0298                     	;# 
  1894  0299                     	;# 
  1895  029A                     	;# 
  1896  0394                     	;# 
  1897  0395                     	;# 
  1898  0396                     	;# 
  1899  0FE4                     	;# 
  1900  0FE5                     	;# 
  1901  0FE6                     	;# 
  1902  0FE7                     	;# 
  1903  0FE8                     	;# 
  1904  0FE9                     	;# 
  1905  0FEA                     	;# 
  1906  0FEB                     	;# 
  1907  0FED                     	;# 
  1908  0FEE                     	;# 
  1909  0FEF                     	;# 
  1910  0000                     	;# 
  1911  0001                     	;# 
  1912  0002                     	;# 
  1913  0003                     	;# 
  1914  0004                     	;# 
  1915  0005                     	;# 
  1916  0006                     	;# 
  1917  0007                     	;# 
  1918  0008                     	;# 
  1919  0009                     	;# 
  1920  000A                     	;# 
  1921  000B                     	;# 
  1922  000C                     	;# 
  1923  000D                     	;# 
  1924  000E                     	;# 
  1925  0010                     	;# 
  1926  0011                     	;# 
  1927  0012                     	;# 
  1928  0015                     	;# 
  1929  0016                     	;# 
  1930  0016                     	;# 
  1931  0017                     	;# 
  1932  0018                     	;# 
  1933  0019                     	;# 
  1934  001A                     	;# 
  1935  001B                     	;# 
  1936  001C                     	;# 
  1937  008C                     	;# 
  1938  008D                     	;# 
  1939  008E                     	;# 
  1940  0090                     	;# 
  1941  0091                     	;# 
  1942  0092                     	;# 
  1943  0095                     	;# 
  1944  0096                     	;# 
  1945  0097                     	;# 
  1946  0099                     	;# 
  1947  009A                     	;# 
  1948  009B                     	;# 
  1949  009B                     	;# 
  1950  009C                     	;# 
  1951  009D                     	;# 
  1952  009E                     	;# 
  1953  010C                     	;# 
  1954  010D                     	;# 
  1955  010E                     	;# 
  1956  0116                     	;# 
  1957  0117                     	;# 
  1958  011D                     	;# 
  1959  018C                     	;# 
  1960  018D                     	;# 
  1961  018E                     	;# 
  1962  0191                     	;# 
  1963  0191                     	;# 
  1964  0192                     	;# 
  1965  0193                     	;# 
  1966  0193                     	;# 
  1967  0194                     	;# 
  1968  0195                     	;# 
  1969  0196                     	;# 
  1970  0197                     	;# 
  1971  0199                     	;# 
  1972  019A                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019C                     	;# 
  1978  019C                     	;# 
  1979  019D                     	;# 
  1980  019E                     	;# 
  1981  019F                     	;# 
  1982  020D                     	;# 
  1983  0210                     	;# 
  1984  0211                     	;# 
  1985  0211                     	;# 
  1986  0212                     	;# 
  1987  0212                     	;# 
  1988  0213                     	;# 
  1989  0213                     	;# 
  1990  0214                     	;# 
  1991  0214                     	;# 
  1992  0215                     	;# 
  1993  0215                     	;# 
  1994  0215                     	;# 
  1995  0216                     	;# 
  1996  0216                     	;# 
  1997  0217                     	;# 
  1998  0217                     	;# 
  1999  0291                     	;# 
  2000  0291                     	;# 
  2001  0292                     	;# 
  2002  0293                     	;# 
  2003  0298                     	;# 
  2004  0298                     	;# 
  2005  0299                     	;# 
  2006  029A                     	;# 
  2007  0394                     	;# 
  2008  0395                     	;# 
  2009  0396                     	;# 
  2010  0FE4                     	;# 
  2011  0FE5                     	;# 
  2012  0FE6                     	;# 
  2013  0FE7                     	;# 
  2014  0FE8                     	;# 
  2015  0FE9                     	;# 
  2016  0FEA                     	;# 
  2017  0FEB                     	;# 
  2018  0FED                     	;# 
  2019  0FEE                     	;# 
  2020  0FEF                     	;# 
  2021                           
  2022                           	psect	idataBANK4
  2023  127B                     __pidataBANK4:	
  2024                           
  2025                           ;initializer for __product
  2026  127B  3463               	retlw	99
  2027  127C  3402               	retlw	2
  2028  127D  3400               	retlw	0
  2029  127E  3400               	retlw	0
  2030  127F  3400               	retlw	0
  2031  1280  3400               	retlw	0
  2032  1281  3400               	retlw	0
  2033  1282  3400               	retlw	0
  2034  1283  3400               	retlw	0
  2035  1284  3400               	retlw	0
  2036  1285  3400               	retlw	0
  2037  1286  3400               	retlw	0
  2038  1287  34FF               	retlw	255
  2039  1288  34FF               	retlw	255
  2040  1289  34FF               	retlw	255
  2041  128A  3400               	retlw	0
  2042  128B  3400               	retlw	0
  2043  128C  3400               	retlw	0
  2044  128D  3400               	retlw	0
  2045  128E  3400               	retlw	0
  2046  128F  3400               	retlw	0
  2047  1290  3400               	retlw	0
  2048  1291  3400               	retlw	0
  2049  1292  3400               	retlw	0
  2050  1293  3400               	retlw	0
  2051  1294  3400               	retlw	0
  2052  1295  3400               	retlw	0
  2053  1296  3400               	retlw	0
  2054  1297  3400               	retlw	0
  2055  1298  3400               	retlw	0
  2056  1299  3400               	retlw	0
  2057  129A  3400               	retlw	0
  2058                           
  2059                           	psect	stringtext
  2060  1000                     __pstringtext:	
  2061  1000                     _CC2500_registers_address:	
  2062  1000  3403               	retlw	3
  2063  1001  3416               	retlw	22
  2064  1002  3417               	retlw	23
  2065  1003  341E               	retlw	30
  2066  1004  341F               	retlw	31
  2067  1005  3420               	retlw	32
  2068  1006  342A               	retlw	42
  2069  1007  342B               	retlw	43
  2070  1008  340B               	retlw	11
  2071  1009  340C               	retlw	12
  2072  100A  340D               	retlw	13
  2073  100B  340E               	retlw	14
  2074  100C  340F               	retlw	15
  2075  100D  3410               	retlw	16
  2076  100E  3411               	retlw	17
  2077  100F  3412               	retlw	18
  2078  1010  3413               	retlw	19
  2079  1011  3414               	retlw	20
  2080  1012  340A               	retlw	10
  2081  1013  3415               	retlw	21
  2082  1014  3421               	retlw	33
  2083  1015  3422               	retlw	34
  2084  1016  3418               	retlw	24
  2085  1017  3419               	retlw	25
  2086  1018  341A               	retlw	26
  2087  1019  341B               	retlw	27
  2088  101A  341C               	retlw	28
  2089  101B  341D               	retlw	29
  2090  101C  3423               	retlw	35
  2091  101D  3424               	retlw	36
  2092  101E  3425               	retlw	37
  2093  101F  3426               	retlw	38
  2094  1020  3429               	retlw	41
  2095  1021  342C               	retlw	44
  2096  1022  342D               	retlw	45
  2097  1023  342E               	retlw	46
  2098  1024  3400               	retlw	0
  2099  1025  3401               	retlw	1
  2100  1026  3402               	retlw	2
  2101  1027  3407               	retlw	7
  2102  1028  3408               	retlw	8
  2103  1029  3409               	retlw	9
  2104  102A  3406               	retlw	6
  2105  102B  3404               	retlw	4
  2106  102C  3405               	retlw	5
  2107  102D  3427               	retlw	39
  2108  102E  3428               	retlw	40
  2109  102F                     __end_of_CC2500_registers_address:	
  2110  102F                     _CC2500_rfSettings:	
  2111  102F  3407               	retlw	7
  2112  1030  3407               	retlw	7
  2113  1031  3430               	retlw	48
  2114  1032  3487               	retlw	135
  2115  1033  346B               	retlw	107
  2116  1034  34F8               	retlw	248
  2117  1035  347F               	retlw	127
  2118  1036  343F               	retlw	63
  2119  1037  3409               	retlw	9
  2120  1038  3400               	retlw	0
  2121  1039  345C               	retlw	92
  2122  103A  34A7               	retlw	167
  2123  103B  3462               	retlw	98
  2124  103C  3486               	retlw	134
  2125  103D  3483               	retlw	131
  2126  103E  3403               	retlw	3
  2127  103F  3422               	retlw	34
  2128  1040  34F8               	retlw	248
  2129  1041  3400               	retlw	0
  2130  1042  3444               	retlw	68
  2131  1043  34B6               	retlw	182
  2132  1044  3410               	retlw	16
  2133  1045  3418               	retlw	24
  2134  1046  341D               	retlw	29
  2135  1047  341C               	retlw	28
  2136  1048  34C7               	retlw	199
  2137  1049  3400               	retlw	0
  2138  104A  34B2               	retlw	178
  2139  104B  34EA               	retlw	234
  2140  104C  340A               	retlw	10
  2141  104D  3400               	retlw	0
  2142  104E  3411               	retlw	17
  2143  104F  3459               	retlw	89
  2144  1050  3488               	retlw	136
  2145  1051  3431               	retlw	49
  2146  1052  340B               	retlw	11
  2147  1053  342F               	retlw	47
  2148  1054  342E               	retlw	46
  2149  1055  3406               	retlw	6
  2150  1056  3404               	retlw	4
  2151  1057  3405               	retlw	5
  2152  1058  3400               	retlw	0
  2153  1059  3430               	retlw	48
  2154  105A  34D3               	retlw	211
  2155  105B  3491               	retlw	145
  2156  105C  3441               	retlw	65
  2157  105D  3400               	retlw	0
  2158  105E                     __end_of_CC2500_rfSettings:	
  2159  105E                     _CC2500_patable_vaule:	
  2160  105E  34FE               	retlw	254
  2161  105F  34FE               	retlw	254
  2162  1060  34FE               	retlw	254
  2163  1061  34FE               	retlw	254
  2164  1062  34FE               	retlw	254
  2165  1063  34FE               	retlw	254
  2166  1064  34FE               	retlw	254
  2167  1065  34FE               	retlw	254
  2168  1066                     __end_of_CC2500_patable_vaule:	
  2169                           
  2170                           	psect	nvBANK0
  2171  006D                     __pnvBANK0:	
  2172  006D                     _product:	
  2173  006D                     	ds	1
  2174  000C                     _PORTA	set	12
  2175  000D                     _PORTB	set	13
  2176  000E                     _PORTC	set	14
  2177  0015                     _TMR0	set	21
  2178  005F                     _GIE	set	95
  2179  005B                     _IOCIE	set	91
  2180  0058                     _IOCIF	set	88
  2181  005E                     _PEIE	set	94
  2182  0060                     _RA0	set	96
  2183  0063                     _RA3	set	99
  2184  0064                     _RA4	set	100
  2185  0066                     _RA6	set	102
  2186  0067                     _RA7	set	103
  2187  0068                     _RB0	set	104
  2188  0069                     _RB1	set	105
  2189  006A                     _RB2	set	106
  2190  006B                     _RB3	set	107
  2191  006C                     _RB4	set	108
  2192  006D                     _RB5	set	109
  2193  0070                     _RC0	set	112
  2194  0071                     _RC1	set	113
  2195  0072                     _RC2	set	114
  2196  0074                     _RC4	set	116
  2197  0075                     _RC5	set	117
  2198  0076                     _RC6	set	118
  2199  0077                     _RC7	set	119
  2200  005D                     _TMR0IE	set	93
  2201  005A                     _TMR0IF	set	90
  2202  009D                     _ADCON0	set	157
  2203  009E                     _ADCON1	set	158
  2204  009C                     _ADRESH	set	156
  2205  009B                     _ADRESL	set	155
  2206  0095                     _OPTION_REG	set	149
  2207  0099                     _OSCCON	set	153
  2208  008C                     _TRISA	set	140
  2209  008D                     _TRISB	set	141
  2210  008E                     _TRISC	set	142
  2211  04E9                     _GO_nDONE	set	1257
  2212  0117                     _FVRCON	set	279
  2213  010C                     _LATA	set	268
  2214  010D                     _LATB	set	269
  2215  010E                     _LATC	set	270
  2216  018C                     _ANSELA	set	396
  2217  018D                     _ANSELB	set	397
  2218  018E                     _ANSELC	set	398
  2219  0192                     _PMADRH	set	402
  2220  0191                     _PMADRL	set	401
  2221  0196                     _PMCON2	set	406
  2222  0194                     _PMDATH	set	404
  2223  0193                     _PMDATL	set	403
  2224  0CAE                     _CFGS	set	3246
  2225  0CAC                     _FREE	set	3244
  2226  0CAD                     _LWLO	set	3245
  2227  0CA8                     _RD	set	3240
  2228  0CA9                     _WR	set	3241
  2229  0CAA                     _WREN	set	3242
  2230  1069                     _WPUB1	set	4201
  2231  106A                     _WPUB2	set	4202
  2232  0396                     _IOCBF	set	918
  2233  0395                     _IOCBN	set	917
  2234  0394                     _IOCBP	set	916
  2235  1CB2                     _IOCBF2	set	7346
  2236                           
  2237                           ; #config settings
  2238  0000                     
  2239                           	psect	cinit
  2240  0015                     start_initialization:	
  2241  0015                     __initialization:	
  2242                           
  2243                           ; Clear objects allocated to BITCOMMON
  2244  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2245                           
  2246                           ; Clear objects allocated to COMMON
  2247  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2248  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2249  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2250  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2251  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2252                           
  2253                           ; Clear objects allocated to BANK0
  2254  001B  01EB               	clrf	__pbssBANK0& (0+127)
  2255  001C  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2256                           
  2257                           ; Clear objects allocated to BANK1
  2258  001D  30A0               	movlw	low __pbssBANK1
  2259  001E  0084               	movwf	4
  2260  001F  3000               	movlw	high __pbssBANK1
  2261  0020  0085               	movwf	5
  2262  0021  304F               	movlw	79
  2263  0022  319E  26A0  3180   	fcall	clear_ram0
  2264                           
  2265                           ; Clear objects allocated to BANK2
  2266  0025  3020               	movlw	low __pbssBANK2
  2267  0026  0084               	movwf	4
  2268  0027  3001               	movlw	high __pbssBANK2
  2269  0028  0085               	movwf	5
  2270  0029  304E               	movlw	78
  2271  002A  319E  26A0  3180   	fcall	clear_ram0
  2272                           
  2273                           ; Clear objects allocated to BANK3
  2274  002D  30A0               	movlw	low __pbssBANK3
  2275  002E  0084               	movwf	4
  2276  002F  3001               	movlw	high __pbssBANK3
  2277  0030  0085               	movwf	5
  2278  0031  3046               	movlw	70
  2279  0032  319E  26A0  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Initialize objects allocated to BANK4
  2282  0035  307B               	movlw	low __pidataBANK4
  2283  0036  0084               	movwf	4
  2284  0037  3092               	movlw	(high __pidataBANK4)| (0+128)
  2285  0038  0085               	movwf	5
  2286  0039  3020               	movlw	low __pdataBANK4
  2287  003A  0086               	movwf	6
  2288  003B  3002               	movlw	high __pdataBANK4
  2289  003C  0087               	movwf	7
  2290  003D  3020               	movlw	32
  2291  003E  319E  269A         	fcall	init_ram
  2292  0040                     end_of_initialization:	
  2293                           ;End of C runtime variable initialization code
  2294                           
  2295  0040                     __end_of__initialization:	
  2296  0040  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2297  0041  0020               	movlb	0
  2298  0042  3195  2D74         	ljmp	_main	;jump to C main() function
  2299                           
  2300                           	psect	bitbssCOMMON
  2301  03D8                     __pbitbssCOMMON:	
  2302  03D8                     _Receive_OK:	
  2303  03D8                     	ds	1
  2304  03D9                     _Transceive_OK:	
  2305  03D9                     	ds	1
  2306                           
  2307                           	psect	bssCOMMON
  2308  0076                     __pbssCOMMON:	
  2309  0076                     _DelayOff:	
  2310  0076                     	ds	1
  2311  0077                     _Dimmer:	
  2312  0077                     	ds	1
  2313  0078                     _DimmerLightsIntr:	
  2314  0078                     	ds	1
  2315  0079                     _LED:	
  2316  0079                     	ds	1
  2317  007A                     _SPI0Buffer:	
  2318  007A                     	ds	1
  2319                           
  2320                           	psect	bssBANK0
  2321  006B                     __pbssBANK0:	
  2322  006B                     _DimmerLights:	
  2323  006B                     	ds	1
  2324  006C                     _Sw:	
  2325  006C                     	ds	1
  2326                           
  2327                           	psect	bssBANK1
  2328  00A0                     __pbssBANK1:	
  2329  00A0                     _RF_Data:	
  2330  00A0                     	ds	21
  2331  00B5                     _myMain:	
  2332  00B5                     	ds	18
  2333  00C7                     _Buz1:	
  2334  00C7                     	ds	12
  2335  00D3                     _RF1:	
  2336  00D3                     	ds	8
  2337  00DB                     _RF_Count:	
  2338  00DB                     	ds	2
  2339  00DD                     _CRC:	
  2340  00DD                     	ds	1
  2341  00DE                     _DimmerLights11:	
  2342  00DE                     	ds	1
  2343  00DF                     _DimmerLights22:	
  2344  00DF                     	ds	1
  2345  00E0                     _DimmerLights33:	
  2346  00E0                     	ds	1
  2347  00E1                     _DimmerLightsIntrIOC:	
  2348  00E1                     	ds	1
  2349  00E2                     _RFSW:	
  2350  00E2                     	ds	1
  2351  00E3                     _RSSI:	
  2352  00E3                     	ds	1
  2353  00E4                     _Rx_Length:	
  2354  00E4                     	ds	1
  2355  00E5                     _Tx_Length:	
  2356  00E5                     	ds	1
  2357  00E6                     _r_address:	
  2358  00E6                     	ds	1
  2359  00E7                     _r_data:	
  2360  00E7                     	ds	1
  2361  00E8                     _s_data:	
  2362  00E8                     	ds	1
  2363  00E9                     _Dimmer1:	
  2364  00E9                     	ds	3
  2365  00EC                     _RFSW1:	
  2366  00EC                     	ds	1
  2367  00ED                     _RFSW2:	
  2368  00ED                     	ds	1
  2369  00EE                     _RFSW3:	
  2370  00EE                     	ds	1
  2371                           
  2372                           	psect	bssBANK2
  2373  0120                     __pbssBANK2:	
  2374  0120                     _Timer0:	
  2375  0120                     	ds	8
  2376  0128                     _DimmerLights1:	
  2377  0128                     	ds	15
  2378  0137                     _DimmerLights2:	
  2379  0137                     	ds	15
  2380  0146                     _Sw1:	
  2381  0146                     	ds	9
  2382  014F                     _DlySw1:	
  2383  014F                     	ds	5
  2384  0154                     _DlySw2:	
  2385  0154                     	ds	5
  2386  0159                     _DlySw3:	
  2387  0159                     	ds	5
  2388  015E                     _VarErrLED:	
  2389  015E                     	ds	4
  2390  0162                     _VarLED1:	
  2391  0162                     	ds	4
  2392  0166                     _VarLED2:	
  2393  0166                     	ds	4
  2394  016A                     _VarLED3:	
  2395  016A                     	ds	4
  2396                           
  2397                           	psect	bssBANK3
  2398  01A0                     __pbssBANK3:	
  2399  01A0                     _Memory:	
  2400  01A0                     	ds	37
  2401  01C5                     _DimmerLights3:	
  2402  01C5                     	ds	15
  2403  01D4                     _Sw2:	
  2404  01D4                     	ds	9
  2405  01DD                     _Sw3:	
  2406  01DD                     	ds	9
  2407                           
  2408                           	psect	dataBANK4
  2409  0220                     __pdataBANK4:	
  2410  0220                     __product:	
  2411  0220                     	ds	32
  2412                           
  2413                           	psect	clrtext
  2414  1EA0                     clear_ram0:	
  2415                           ;	Called with FSR0 containing the base address, and
  2416                           ;	WREG with the size to clear
  2417                           
  2418  1EA0  0064               	clrwdt	;clear the watchdog before getting into this loop
  2419  1EA1                     clrloop0:	
  2420  1EA1  0180               	clrf	0	;clear RAM location pointed to by FSR
  2421  1EA2  3101               	addfsr 0,1
  2422  1EA3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2423  1EA4  2EA1               	goto	clrloop0	;have we reached the end yet?
  2424  1EA5  3400               	retlw	0	;all done for this memory range, return
  2425                           
  2426                           	psect	inittext
  2427  1E9A                     init_ram:	
  2428  1E9A  00FE               	movwf	126
  2429  1E9B                     initloop:	
  2430  1E9B  0012               	moviw fsr0++
  2431  1E9C  001E               	movwi fsr1++
  2432  1E9D  0BFE               	decfsz	126,f
  2433  1E9E  2E9B               	goto	initloop
  2434  1E9F  3400               	retlw	0
  2435                           
  2436                           	psect	cstackBANK3
  2437  01E6                     __pcstackBANK3:	
  2438  01E6                     ?_main:	
  2439  01E6                     main@argc:	
  2440                           ; 2 bytes @ 0x0
  2441                           
  2442                           
  2443                           ; 2 bytes @ 0x0
  2444  01E6                     	ds	2
  2445  01E8                     main@argv:	
  2446                           
  2447                           ; 2 bytes @ 0x2
  2448  01E8                     	ds	2
  2449                           
  2450                           	psect	cstackCOMMON
  2451  0070                     __pcstackCOMMON:	
  2452  0070                     ?_Timeout_Counter:	
  2453  0070                     ?_set_TimeoutCleared:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_WriteByte:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_WriteCommand:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_ReadStatus:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_ReadByte:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_PowerRST:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_InitSetREG:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_InitPATable:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_ClearTXFIFO:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_ClearRXFIFO:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_CC2500_FrequencyCabr:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_CC2500_SIDLEMode:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_DlyOff_Initialization:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_DlyOff_Main:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setTxData:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setDimmerLights_Initialization:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_Dimmer_Initialization:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_setMemory_GO:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_setDimmerLights_Main:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_setLED_Initialization:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_setLED_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_Fosc_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_IO_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_TMR0_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_ADC_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_IOC_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_IOC_ISR:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_TMR0_ISR:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Flash_Memory_Write:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_Flash_Memory_Modify:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_myMain_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_Switch_Initialization:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_RF_Initialization:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_my_MainTime:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_Switch_Main:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_RF_Main:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setSw_Enable:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setRF_Enable:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_Initialization:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setRF_Main:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_RF_RxDisable:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_getRxData:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_setLog_Code:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setControl_Lights_Table:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setRFSW_Control:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRFSW_AdjControl:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRF_DimmerValue:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setSw_Initialization:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setSw_Main:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_Sw_DimmerOnFunc:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_Sw_DimmerAdjFunc:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Sw_DimmerOffFunc:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Buzzer_Initialization:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Buzzer_Main:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_TxData:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_RxData:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_PowerOnInitial:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_DelayOffPointSelect:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DelayOff_Initialization:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DelayOff_Main:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DimmerIntrIOCPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ??_DimmerIntrIOCPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerIntrPointSelect:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ??_DimmerIntrPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_IntrControl:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DimmerLightsPointSelect:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerLights_Initialization:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_Close:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setDimmerLights_AdjRF:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_LedPointSelect:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_LED_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_LED_Main:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Mcu_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_ISR:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setDimmerReClock:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_Flash_Memory_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Main:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Unlock:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Flash_Memory_Erasing:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setRF_Learn:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_RfSWPointSelect:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_TouchPower:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_SwPointSelect:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_DelayTimejudge:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getDimmerLights_StatusFlag:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ?_getPercentValue:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Read:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ?_setPercentValue:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723                           
  2724                           ; 1 bytes @ 0x0
  2725  0070                     	ds	1
  2726  0071                     DimmerIntrIOCPointSelect@lights:	
  2727  0071                     DimmerIntrPointSelect@lights:	
  2728                           ; 1 bytes @ 0x1
  2729                           
  2730                           
  2731                           ; 1 bytes @ 0x1
  2732  0071                     	ds	1
  2733  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2734  0072                     ??_setDimmerLights_IntrControl:	
  2735                           ; 0 bytes @ 0x2
  2736                           
  2737  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2738                           ; 0 bytes @ 0x2
  2739                           
  2740                           
  2741                           ; 1 bytes @ 0x2
  2742  0072                     	ds	1
  2743  0073                     ??_IOC_ISR:	
  2744  0073                     ??_setDimmerReClock:	
  2745                           ; 0 bytes @ 0x3
  2746                           
  2747                           
  2748                           ; 0 bytes @ 0x3
  2749  0073                     	ds	1
  2750  0074                     setDimmerLights_IntrControl@lights:	
  2751                           
  2752                           ; 1 bytes @ 0x4
  2753  0074                     	ds	1
  2754  0075                     ??_TMR0_ISR:	
  2755  0075                     ??_ISR:	
  2756                           ; 0 bytes @ 0x5
  2757                           
  2758                           
  2759                           ; 0 bytes @ 0x5
  2760  0075                     	ds	1
  2761                           
  2762                           	psect	cstackBANK0
  2763  0020                     __pcstackBANK0:	
  2764  0020                     ??_Timeout_Counter:	
  2765  0020                     ??_set_TimeoutCleared:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0020                     ??_CC2500_WriteByte:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0020                     ??_CC2500_ReadByte:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0020                     ?_DelayTime_1us:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0020                     ??_setTxData:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0020                     ??_Dimmer_Initialization:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0020                     ??_getDimmerLights_StatusFlag:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ??_setMemory_GO:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_Fosc_Set:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_IO_Set:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_TMR0_Set:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_ADC_Set:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_IOC_Set:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_Flash_Memory_Read:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_Flash_Memory_Write:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_myMain_Initialization:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_setRF_Enable:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_setRF_Initialization:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_Buzzer_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_Buzzer_Main:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_DelayOffPointSelect:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_DimmerLightsPointSelect:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_LedPointSelect:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_Mcu_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_Flash_Memory_Unlock:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_Flash_Memory_Erasing:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_setRF_Learn:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_RfSWPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_TouchPower:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_SwPointSelect:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ?___bmul:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ?_getBuz_GO:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0020                     ?___awdiv:	
  2862                           ; 2 bytes @ 0x0
  2863                           
  2864  0020                     ?___ftpack:	
  2865                           ; 2 bytes @ 0x0
  2866                           
  2867  0020                     setRF_Learn@command:	
  2868                           ; 3 bytes @ 0x0
  2869                           
  2870  0020                     setRF_Enable@command:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0020                     ___bmul@multiplicand:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0020                     DelayTime_1us@count:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0020                     ___awdiv@divisor:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882  0020                     ___ftpack@arg:	
  2883                           ; 2 bytes @ 0x0
  2884                           
  2885                           
  2886                           ; 3 bytes @ 0x0
  2887  0020                     	ds	1
  2888  0021                     ??_RF_Initialization:	
  2889  0021                     ??___bmul:	
  2890                           ; 0 bytes @ 0x1
  2891                           
  2892  0021                     CC2500_WriteByte@loop_a:	
  2893                           ; 0 bytes @ 0x1
  2894                           
  2895  0021                     CC2500_ReadByte@loop_b:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0021                     DelayOffPointSelect@sw:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901  0021                     DimmerLightsPointSelect@lights:	
  2902                           ; 1 bytes @ 0x1
  2903                           
  2904  0021                     getDimmerLights_StatusFlag@Status:	
  2905                           ; 1 bytes @ 0x1
  2906                           
  2907  0021                     LedPointSelect@led:	
  2908                           ; 1 bytes @ 0x1
  2909                           
  2910  0021                     Flash_Memory_Read@i:	
  2911                           ; 1 bytes @ 0x1
  2912                           
  2913  0021                     Flash_Memory_Write@i:	
  2914                           ; 1 bytes @ 0x1
  2915                           
  2916  0021                     RfSWPointSelect@sw:	
  2917                           ; 1 bytes @ 0x1
  2918                           
  2919  0021                     SwPointSelect@sw:	
  2920                           ; 1 bytes @ 0x1
  2921                           
  2922                           
  2923                           ; 1 bytes @ 0x1
  2924  0021                     	ds	1
  2925  0022                     ??_CC2500_WriteCommand:	
  2926  0022                     ??_CC2500_ReadStatus:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0022                     ??_DelayTime_1us:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0022                     ?_CC2500_WriteREG:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0022                     ??_DlyOff_Initialization:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0022                     ?_setSw_Status:	
  2939                           ; 0 bytes @ 0x2
  2940                           
  2941  0022                     ?_setRFSW_Status:	
  2942                           ; 0 bytes @ 0x2
  2943                           
  2944  0022                     ?_setDimmerLights_Trigger:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0022                     ?_setDimmerLights_Switch:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0022                     ??_setDimmerLights_Initialization:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0022                     ?_setLED:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0022                     ??_setLED_Main:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0022                     ??_setSw_Enable:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0022                     ??_getBuz_GO:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ?_setDimmerLights_AdjGo:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ?_setDimmerLights_TriggerAdj:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     CC2500_WriteREG@value:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     DlyOff_Initialization@sw:	
  2975                           ; 1 bytes @ 0x2
  2976                           
  2977  0022                     _getDimmerLights_StatusFlag$2076:	
  2978                           ; 1 bytes @ 0x2
  2979                           
  2980  0022                     setDimmerLights_Switch@command:	
  2981                           ; 1 bytes @ 0x2
  2982                           
  2983  0022                     setDimmerLights_AdjGo@command:	
  2984                           ; 1 bytes @ 0x2
  2985                           
  2986  0022                     setDimmerLights_Trigger@command:	
  2987                           ; 1 bytes @ 0x2
  2988                           
  2989  0022                     setDimmerLights_TriggerAdj@command:	
  2990                           ; 1 bytes @ 0x2
  2991                           
  2992  0022                     setLED@command:	
  2993                           ; 1 bytes @ 0x2
  2994                           
  2995  0022                     Flash_Memory_Read@address:	
  2996                           ; 1 bytes @ 0x2
  2997                           
  2998  0022                     setMemory_GO@command:	
  2999                           ; 1 bytes @ 0x2
  3000                           
  3001  0022                     setRFSW_Status@command:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004  0022                     setSw_Enable@command:	
  3005                           ; 1 bytes @ 0x2
  3006                           
  3007  0022                     setSw_Status@command:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     ___bmul@product:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     DelayTime_1us@i:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     ___awdiv@dividend:	
  3017                           ; 2 bytes @ 0x2
  3018                           
  3019                           
  3020                           ; 2 bytes @ 0x2
  3021  0022                     	ds	1
  3022  0023                     ??_CC2500_WriteREG:	
  3023  0023                     ??_setSw_Status:	
  3024                           ; 0 bytes @ 0x3
  3025                           
  3026  0023                     ??_setRFSW_Status:	
  3027                           ; 0 bytes @ 0x3
  3028                           
  3029  0023                     ??_setDimmerLights_Trigger:	
  3030                           ; 0 bytes @ 0x3
  3031                           
  3032  0023                     ??_setDimmerLights_Switch:	
  3033                           ; 0 bytes @ 0x3
  3034                           
  3035  0023                     ??_setLED:	
  3036                           ; 0 bytes @ 0x3
  3037                           
  3038  0023                     ??_DelayOff_Initialization:	
  3039                           ; 0 bytes @ 0x3
  3040                           
  3041  0023                     ??_DimmerLights_Close:	
  3042                           ; 0 bytes @ 0x3
  3043                           
  3044  0023                     ??_setDimmerLights_AdjGo:	
  3045                           ; 0 bytes @ 0x3
  3046                           
  3047  0023                     ??_setDimmerLights_TriggerAdj:	
  3048                           ; 0 bytes @ 0x3
  3049                           
  3050  0023                     CC2500_WriteCommand@command:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0023                     CC2500_ReadStatus@status_addr:	
  3054                           ; 1 bytes @ 0x3
  3055                           
  3056  0023                     setDimmerLights_Initialization@lights:	
  3057                           ; 1 bytes @ 0x3
  3058                           
  3059  0023                     setDimmerLights_Switch@lights:	
  3060                           ; 1 bytes @ 0x3
  3061                           
  3062  0023                     setDimmerLights_AdjGo@lights:	
  3063                           ; 1 bytes @ 0x3
  3064                           
  3065  0023                     setDimmerLights_Trigger@lights:	
  3066                           ; 1 bytes @ 0x3
  3067                           
  3068  0023                     setDimmerLights_TriggerAdj@lights:	
  3069                           ; 1 bytes @ 0x3
  3070                           
  3071  0023                     setLED@led:	
  3072                           ; 1 bytes @ 0x3
  3073                           
  3074  0023                     Flash_Memory_Read@ret:	
  3075                           ; 1 bytes @ 0x3
  3076                           
  3077  0023                     setRFSW_Status@sw:	
  3078                           ; 1 bytes @ 0x3
  3079                           
  3080  0023                     setSw_Status@sw:	
  3081                           ; 1 bytes @ 0x3
  3082                           
  3083  0023                     ___bmul@multiplier:	
  3084                           ; 1 bytes @ 0x3
  3085                           
  3086  0023                     ___ftpack@exp:	
  3087                           ; 1 bytes @ 0x3
  3088                           
  3089                           
  3090                           ; 1 bytes @ 0x3
  3091  0023                     	ds	1
  3092  0024                     ??_CC2500_ClearTXFIFO:	
  3093  0024                     ??_CC2500_ClearRXFIFO:	
  3094                           ; 0 bytes @ 0x4
  3095                           
  3096  0024                     ??_CC2500_SIDLEMode:	
  3097                           ; 0 bytes @ 0x4
  3098                           
  3099  0024                     ??_DelayTimejudge:	
  3100                           ; 0 bytes @ 0x4
  3101                           
  3102  0024                     ?_setDimmerLights:	
  3103                           ; 0 bytes @ 0x4
  3104                           
  3105  0024                     ??_setLED_Initialization:	
  3106                           ; 0 bytes @ 0x4
  3107                           
  3108  0024                     ??_Flash_Memory_Modify:	
  3109                           ; 0 bytes @ 0x4
  3110                           
  3111  0024                     ??_RF_RxDisable:	
  3112                           ; 0 bytes @ 0x4
  3113                           
  3114  0024                     ??_setSw_Initialization:	
  3115                           ; 0 bytes @ 0x4
  3116                           
  3117  0024                     ??_Sw_DimmerAdjFunc:	
  3118                           ; 0 bytes @ 0x4
  3119                           
  3120  0024                     ??_CC2500_TxData:	
  3121                           ; 0 bytes @ 0x4
  3122                           
  3123  0024                     ??_CC2500_RxData:	
  3124                           ; 0 bytes @ 0x4
  3125                           
  3126  0024                     ??_DimmerLights_Initialization:	
  3127                           ; 0 bytes @ 0x4
  3128                           
  3129  0024                     ??___awdiv:	
  3130                           ; 0 bytes @ 0x4
  3131                           
  3132  0024                     CC2500_WriteREG@w_addr:	
  3133                           ; 0 bytes @ 0x4
  3134                           
  3135  0024                     setDimmerLights@status:	
  3136                           ; 1 bytes @ 0x4
  3137                           
  3138  0024                     setLED_Initialization@led:	
  3139                           ; 1 bytes @ 0x4
  3140                           
  3141  0024                     setLED_Main@led:	
  3142                           ; 1 bytes @ 0x4
  3143                           
  3144  0024                     setSw_Initialization@sw:	
  3145                           ; 1 bytes @ 0x4
  3146                           
  3147  0024                     ___ftpack@sign:	
  3148                           ; 1 bytes @ 0x4
  3149                           
  3150  0024                     getBuz_GO@i:	
  3151                           ; 1 bytes @ 0x4
  3152                           
  3153  0024                     DelayTime_1us@j:	
  3154                           ; 2 bytes @ 0x4
  3155                           
  3156                           
  3157                           ; 2 bytes @ 0x4
  3158  0024                     	ds	1
  3159  0025                     ??_CC2500_InitSetREG:	
  3160  0025                     ??_CC2500_InitPATable:	
  3161                           ; 0 bytes @ 0x5
  3162                           
  3163  0025                     ??_setDimmerLights:	
  3164                           ; 0 bytes @ 0x5
  3165                           
  3166  0025                     ??_Switch_Initialization:	
  3167                           ; 0 bytes @ 0x5
  3168                           
  3169  0025                     ??___ftpack:	
  3170                           ; 0 bytes @ 0x5
  3171                           
  3172  0025                     ??_LED_Initialization:	
  3173                           ; 0 bytes @ 0x5
  3174                           
  3175  0025                     ??_LED_Main:	
  3176                           ; 0 bytes @ 0x5
  3177                           
  3178  0025                     CC2500_TxData@loop_e:	
  3179                           ; 0 bytes @ 0x5
  3180                           
  3181  0025                     CC2500_RxData@loop_f:	
  3182                           ; 1 bytes @ 0x5
  3183                           
  3184  0025                     Flash_Memory_Modify@i:	
  3185                           ; 1 bytes @ 0x5
  3186                           
  3187  0025                     _Sw_DimmerAdjFunc$5215:	
  3188                           ; 1 bytes @ 0x5
  3189                           
  3190  0025                     ___awdiv@counter:	
  3191                           ; 1 bytes @ 0x5
  3192                           
  3193                           
  3194                           ; 1 bytes @ 0x5
  3195  0025                     	ds	1
  3196  0026                     ??_CC2500_PowerRST:	
  3197  0026                     ??_CC2500_FrequencyCabr:	
  3198                           ; 0 bytes @ 0x6
  3199                           
  3200  0026                     ??_Flash_Memory_Main:	
  3201                           ; 0 bytes @ 0x6
  3202                           
  3203  0026                     CC2500_InitSetREG@temp1:	
  3204                           ; 0 bytes @ 0x6
  3205                           
  3206  0026                     CC2500_InitPATable@temp:	
  3207                           ; 1 bytes @ 0x6
  3208                           
  3209  0026                     DelayTimejudge@i:	
  3210                           ; 1 bytes @ 0x6
  3211                           
  3212  0026                     setDimmerLights@lights:	
  3213                           ; 1 bytes @ 0x6
  3214                           
  3215  0026                     _Sw_DimmerAdjFunc$5216:	
  3216                           ; 1 bytes @ 0x6
  3217                           
  3218  0026                     ___awdiv@sign:	
  3219                           ; 1 bytes @ 0x6
  3220                           
  3221                           
  3222                           ; 1 bytes @ 0x6
  3223  0026                     	ds	1
  3224  0027                     CC2500_InitSetREG@temp2:	
  3225  0027                     CC2500_InitPATable@loop_d:	
  3226                           ; 1 bytes @ 0x7
  3227                           
  3228  0027                     DelayTimejudge@j:	
  3229                           ; 1 bytes @ 0x7
  3230                           
  3231  0027                     _Sw_DimmerAdjFunc$5217:	
  3232                           ; 1 bytes @ 0x7
  3233                           
  3234  0027                     ___awdiv@quotient:	
  3235                           ; 1 bytes @ 0x7
  3236                           
  3237                           
  3238                           ; 2 bytes @ 0x7
  3239  0027                     	ds	1
  3240  0028                     ?___awtoft:	
  3241  0028                     CC2500_InitSetREG@loop_c:	
  3242                           ; 3 bytes @ 0x8
  3243                           
  3244  0028                     DelayTimejudge@k:	
  3245                           ; 1 bytes @ 0x8
  3246                           
  3247  0028                     Sw_DimmerAdjFunc@Idle:	
  3248                           ; 1 bytes @ 0x8
  3249                           
  3250  0028                     ___awtoft@c:	
  3251                           ; 1 bytes @ 0x8
  3252                           
  3253                           
  3254                           ; 2 bytes @ 0x8
  3255  0028                     	ds	1
  3256  0029                     ?_setBuz:	
  3257  0029                     ??_CC2500_PowerOnInitial:	
  3258                           ; 0 bytes @ 0x9
  3259                           
  3260  0029                     DelayTimejudge@value:	
  3261                           ; 0 bytes @ 0x9
  3262                           
  3263  0029                     Sw_DimmerAdjFunc@sw:	
  3264                           ; 1 bytes @ 0x9
  3265                           
  3266  0029                     setBuz@time:	
  3267                           ; 1 bytes @ 0x9
  3268                           
  3269                           
  3270                           ; 2 bytes @ 0x9
  3271  0029                     	ds	1
  3272  002A                     ?_setDelayOff_GO:	
  3273  002A                     setDelayOff_GO@command:	
  3274                           ; 0 bytes @ 0xA
  3275                           
  3276                           
  3277                           ; 1 bytes @ 0xA
  3278  002A                     	ds	1
  3279  002B                     ??_setBuz:	
  3280  002B                     ??___awtoft:	
  3281                           ; 0 bytes @ 0xB
  3282                           
  3283  002B                     setDelayOff_GO@value:	
  3284                           ; 0 bytes @ 0xB
  3285                           
  3286                           
  3287                           ; 1 bytes @ 0xB
  3288  002B                     	ds	1
  3289  002C                     ??_setDelayOff_GO:	
  3290  002C                     setBuz@count:	
  3291                           ; 0 bytes @ 0xC
  3292                           
  3293                           
  3294                           ; 1 bytes @ 0xC
  3295  002C                     	ds	1
  3296  002D                     ??_my_MainTime:	
  3297  002D                     ??_setLog_Code:	
  3298                           ; 0 bytes @ 0xD
  3299                           
  3300  002D                     ___awtoft@sign:	
  3301                           ; 0 bytes @ 0xD
  3302                           
  3303                           
  3304                           ; 1 bytes @ 0xD
  3305  002D                     	ds	1
  3306  002E                     ?___ftdiv:	
  3307  002E                     ?___ftmul:	
  3308                           ; 3 bytes @ 0xE
  3309                           
  3310  002E                     setDelayOff_GO@sw:	
  3311                           ; 3 bytes @ 0xE
  3312                           
  3313  002E                     ___ftdiv@f2:	
  3314                           ; 1 bytes @ 0xE
  3315                           
  3316  002E                     ___ftmul@f1:	
  3317                           ; 3 bytes @ 0xE
  3318                           
  3319                           
  3320                           ; 3 bytes @ 0xE
  3321  002E                     	ds	3
  3322  0031                     ___ftdiv@f1:	
  3323  0031                     ___ftmul@f2:	
  3324                           ; 3 bytes @ 0x11
  3325                           
  3326                           
  3327                           ; 3 bytes @ 0x11
  3328  0031                     	ds	3
  3329  0034                     ??___ftdiv:	
  3330  0034                     ??___ftmul:	
  3331                           ; 0 bytes @ 0x14
  3332                           
  3333                           
  3334                           ; 0 bytes @ 0x14
  3335  0034                     	ds	4
  3336  0038                     ___ftdiv@cntr:	
  3337  0038                     ___ftmul@exp:	
  3338                           ; 1 bytes @ 0x18
  3339                           
  3340                           
  3341                           ; 1 bytes @ 0x18
  3342  0038                     	ds	1
  3343  0039                     ___ftdiv@f3:	
  3344  0039                     ___ftmul@f3_as_product:	
  3345                           ; 3 bytes @ 0x19
  3346                           
  3347                           
  3348                           ; 3 bytes @ 0x19
  3349  0039                     	ds	3
  3350  003C                     ___ftdiv@exp:	
  3351  003C                     ___ftmul@cntr:	
  3352                           ; 1 bytes @ 0x1C
  3353                           
  3354                           
  3355                           ; 1 bytes @ 0x1C
  3356  003C                     	ds	1
  3357  003D                     ___ftdiv@sign:	
  3358  003D                     ___ftmul@sign:	
  3359                           ; 1 bytes @ 0x1D
  3360                           
  3361                           
  3362                           ; 1 bytes @ 0x1D
  3363  003D                     	ds	1
  3364  003E                     ?___ftadd:	
  3365  003E                     ___ftadd@f1:	
  3366                           ; 3 bytes @ 0x1E
  3367                           
  3368                           
  3369                           ; 3 bytes @ 0x1E
  3370  003E                     	ds	3
  3371  0041                     ___ftadd@f2:	
  3372                           
  3373                           ; 3 bytes @ 0x21
  3374  0041                     	ds	3
  3375  0044                     ??___ftadd:	
  3376                           
  3377                           ; 0 bytes @ 0x24
  3378  0044                     	ds	4
  3379  0048                     ___ftadd@sign:	
  3380                           
  3381                           ; 1 bytes @ 0x28
  3382  0048                     	ds	1
  3383  0049                     ___ftadd@exp2:	
  3384                           
  3385                           ; 1 bytes @ 0x29
  3386  0049                     	ds	1
  3387  004A                     ___ftadd@exp1:	
  3388                           
  3389                           ; 1 bytes @ 0x2A
  3390  004A                     	ds	1
  3391  004B                     ?___fttol:	
  3392  004B                     ___fttol@f1:	
  3393                           ; 4 bytes @ 0x2B
  3394                           
  3395                           
  3396                           ; 3 bytes @ 0x2B
  3397  004B                     	ds	4
  3398  004F                     ??___fttol:	
  3399                           
  3400                           ; 0 bytes @ 0x2F
  3401  004F                     	ds	4
  3402  0053                     ___fttol@sign1:	
  3403                           
  3404                           ; 1 bytes @ 0x33
  3405  0053                     	ds	1
  3406  0054                     ___fttol@lval:	
  3407                           
  3408                           ; 4 bytes @ 0x34
  3409  0054                     	ds	4
  3410  0058                     ___fttol@exp1:	
  3411                           
  3412                           ; 1 bytes @ 0x38
  3413  0058                     	ds	1
  3414  0059                     ??_getPercentValue:	
  3415  0059                     ??_setPercentValue:	
  3416                           ; 0 bytes @ 0x39
  3417                           
  3418  0059                     setPercentValue@value:	
  3419                           ; 0 bytes @ 0x39
  3420                           
  3421                           
  3422                           ; 1 bytes @ 0x39
  3423  0059                     	ds	1
  3424  005A                     setPercentValue@i:	
  3425                           
  3426                           ; 3 bytes @ 0x3A
  3427  005A                     	ds	1
  3428  005B                     getPercentValue@value:	
  3429                           
  3430                           ; 1 bytes @ 0x3B
  3431  005B                     	ds	1
  3432  005C                     getPercentValue@i:	
  3433                           
  3434                           ; 3 bytes @ 0x3C
  3435  005C                     	ds	1
  3436  005D                     ?_setRF_DimmerLights:	
  3437  005D                     ??_Flash_Memory_Initialization:	
  3438                           ; 0 bytes @ 0x3D
  3439                           
  3440  005D                     setRF_DimmerLights@on:	
  3441                           ; 0 bytes @ 0x3D
  3442                           
  3443                           
  3444                           ; 1 bytes @ 0x3D
  3445  005D                     	ds	1
  3446  005E                     ??_setRF_DimmerLights:	
  3447  005E                     Flash_Memory_Initialization@i:	
  3448                           ; 0 bytes @ 0x3E
  3449                           
  3450                           
  3451                           ; 1 bytes @ 0x3E
  3452  005E                     	ds	1
  3453  005F                     ??_setDimmerLights_AdjRF:	
  3454                           
  3455                           ; 0 bytes @ 0x3F
  3456  005F                     	ds	1
  3457  0060                     setDimmerLights_AdjRF@lights:	
  3458  0060                     setRF_DimmerLights@status:	
  3459                           ; 1 bytes @ 0x40
  3460                           
  3461                           
  3462                           ; 1 bytes @ 0x40
  3463  0060                     	ds	1
  3464  0061                     ??_setRF_DimmerValue:	
  3465  0061                     setRF_DimmerLights@lights:	
  3466                           ; 0 bytes @ 0x41
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x41
  3470  0061                     	ds	1
  3471  0062                     ??_DlyOff_Main:	
  3472  0062                     ?_setDimmerLights_Adj:	
  3473                           ; 0 bytes @ 0x42
  3474                           
  3475  0062                     ??_setRFSW_Control:	
  3476                           ; 0 bytes @ 0x42
  3477                           
  3478  0062                     ??_Sw_DimmerOnFunc:	
  3479                           ; 0 bytes @ 0x42
  3480                           
  3481  0062                     ??_Sw_DimmerOffFunc:	
  3482                           ; 0 bytes @ 0x42
  3483                           
  3484  0062                     setDimmerLights_Adj@status:	
  3485                           ; 0 bytes @ 0x42
  3486                           
  3487                           
  3488                           ; 1 bytes @ 0x42
  3489  0062                     	ds	1
  3490  0063                     ??_setDimmerLights_Adj:	
  3491  0063                     setRFSW_Control@sw:	
  3492                           ; 0 bytes @ 0x43
  3493                           
  3494  0063                     setRF_DimmerValue@lights:	
  3495                           ; 1 bytes @ 0x43
  3496                           
  3497  0063                     _Sw_DimmerOnFunc$5205:	
  3498                           ; 1 bytes @ 0x43
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0x43
  3502  0063                     	ds	1
  3503  0064                     ??_setRFSW_AdjControl:	
  3504  0064                     DlyOff_Main@sw:	
  3505                           ; 0 bytes @ 0x44
  3506                           
  3507  0064                     setDimmerLights_Adj@lights:	
  3508                           ; 1 bytes @ 0x44
  3509                           
  3510  0064                     _Sw_DimmerOnFunc$5206:	
  3511                           ; 1 bytes @ 0x44
  3512                           
  3513  0064                     Sw_DimmerOffFunc@sw:	
  3514                           ; 1 bytes @ 0x44
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x44
  3518  0064                     	ds	1
  3519  0065                     ??_setDimmerLights_Main:	
  3520  0065                     ??_DelayOff_Main:	
  3521                           ; 0 bytes @ 0x45
  3522                           
  3523  0065                     _Sw_DimmerOnFunc$5207:	
  3524                           ; 0 bytes @ 0x45
  3525                           
  3526                           
  3527                           ; 1 bytes @ 0x45
  3528  0065                     	ds	1
  3529  0066                     _setDimmerLights_Main$2071:	
  3530  0066                     setRFSW_AdjControl@sw:	
  3531                           ; 1 bytes @ 0x46
  3532                           
  3533  0066                     Sw_DimmerOnFunc@Idle:	
  3534                           ; 1 bytes @ 0x46
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x46
  3538  0066                     	ds	1
  3539  0067                     ??_setRF_Main:	
  3540  0067                     ??_getRxData:	
  3541                           ; 0 bytes @ 0x47
  3542                           
  3543  0067                     ??_setControl_Lights_Table:	
  3544                           ; 0 bytes @ 0x47
  3545                           
  3546  0067                     _setDimmerLights_Main$2072:	
  3547                           ; 0 bytes @ 0x47
  3548                           
  3549  0067                     Sw_DimmerOnFunc@sw:	
  3550                           ; 1 bytes @ 0x47
  3551                           
  3552                           
  3553                           ; 1 bytes @ 0x47
  3554  0067                     	ds	1
  3555  0068                     ??_setSw_Main:	
  3556  0068                     _setDimmerLights_Main$2073:	
  3557                           ; 0 bytes @ 0x48
  3558                           
  3559  0068                     _setRF_Main$4370:	
  3560                           ; 1 bytes @ 0x48
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0x48
  3564  0068                     	ds	1
  3565  0069                     ??_RF_Main:	
  3566  0069                     setDimmerLights_Main@clear:	
  3567                           ; 0 bytes @ 0x49
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0x49
  3571  0069                     	ds	1
  3572  006A                     setDimmerLights_Main@lights:	
  3573  006A                     setSw_Main@sw:	
  3574                           ; 1 bytes @ 0x4A
  3575                           
  3576                           
  3577                           ; 1 bytes @ 0x4A
  3578  006A                     	ds	1
  3579  006B                     ??_Switch_Main:	
  3580  006B                     ??_DimmerLights_Main:	
  3581                           ; 0 bytes @ 0x4B
  3582                           
  3583  006B                     ??_main:	
  3584                           ; 0 bytes @ 0x4B
  3585                           
  3586                           
  3587                           	psect	maintext
  3588  1574                     __pmaintext:	
  3589                           ; 0 bytes @ 0x4B
  3590 ;;
  3591 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3592 ;;
  3593 ;; *************** function _main *****************
  3594 ;; Defined at:
  3595 ;;		line 7 in file "../src/Main_B1.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  argc            2    0[BANK3 ] int 
  3598 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;		None
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  2    0[BANK3 ] int 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 17F/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3610 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3613 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3614 ;;Total ram usage:        4 bytes
  3615 ;; Hardware stack levels required when called:   15
  3616 ;; This function calls:
  3617 ;;		_Buzzer_Initialization
  3618 ;;		_Buzzer_Main
  3619 ;;		_CC2500_PowerOnInitial
  3620 ;;		_DelayOff_Initialization
  3621 ;;		_DelayOff_Main
  3622 ;;		_DimmerLights_Initialization
  3623 ;;		_DimmerLights_Main
  3624 ;;		_Flash_Memory_Initialization
  3625 ;;		_Flash_Memory_Main
  3626 ;;		_LED_Initialization
  3627 ;;		_LED_Main
  3628 ;;		_Mcu_Initialization
  3629 ;;		_RF_Initialization
  3630 ;;		_RF_Main
  3631 ;;		_Switch_Initialization
  3632 ;;		_Switch_Main
  3633 ;;		_myMain_Initialization
  3634 ;;		_my_MainTime
  3635 ;; This function is called by:
  3636 ;;		Startup code after reset
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _main
  3642  1574                     _main:	
  3643                           
  3644                           ;Main_B1.c: 8: myMain_Initialization();
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3648  1574  319F  27A1  3195   	fcall	_myMain_Initialization
  3649                           
  3650                           ;Main_B1.c: 9: Mcu_Initialization();
  3651  1577  319F  2783  3195   	fcall	_Mcu_Initialization
  3652                           
  3653                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3654  157A  3184  2455  3195   	fcall	_Flash_Memory_Initialization
  3655                           
  3656                           ;Main_B1.c: 11: LED_Initialization();
  3657  157D  319F  27D0  3195   	fcall	_LED_Initialization
  3658                           
  3659                           ;Main_B1.c: 12: Buzzer_Initialization();
  3660  1580  319E  267B  3195   	fcall	_Buzzer_Initialization
  3661                           
  3662                           ;Main_B1.c: 14: ;;
  3663                           ;Main_B1.c: 15: ;;
  3664                           ;Main_B1.c: 16: ;;
  3665                           ;Main_B1.c: 17: ;;
  3666                           ;Main_B1.c: 18: DelayOff_Initialization();
  3667  1583  319E  26F1  3195   	fcall	_DelayOff_Initialization
  3668                           
  3669                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3670  1586  3192  22BC  3195   	fcall	_DimmerLights_Initialization
  3671                           
  3672                           ;Main_B1.c: 21: ;;
  3673                           ;Main_B1.c: 22: ;;
  3674                           ;Main_B1.c: 23: ;;
  3675                           ;Main_B1.c: 24: Switch_Initialization();
  3676  1589  3190  209D  3195   	fcall	_Switch_Initialization
  3677                           
  3678                           ;Main_B1.c: 25: RF_Initialization();
  3679  158C  319E  267E  3195   	fcall	_RF_Initialization
  3680                           
  3681                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3682  158F  3191  2123  3195   	fcall	_CC2500_PowerOnInitial
  3683  1592                     l1576:	
  3684                           ;Main_B1.c: 34: ;;
  3685                           ;Main_B1.c: 38: ;;
  3686                           ;Main_B1.c: 42: ;;
  3687                           ;Main_B1.c: 46: ;;
  3688                           
  3689                           ;Main_B1.c: 27: ;;
  3690                           ;Main_B1.c: 30: while (1) {
  3691                           
  3692                           
  3693                           ;Main_B1.c: 61: }
  3694                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  3695  1592  0021               	movlb	1	; select bank1
  3696  1593  1CB5               	btfss	_myMain^(0+128),1
  3697  1594  2D92               	goto	l1576
  3698                           
  3699                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  3700  1595  10B5               	bcf	_myMain^(0+128),1
  3701                           
  3702                           ;Main_B1.c: 66: my_MainTime();
  3703  1596  3195  25B2  3195   	fcall	_my_MainTime
  3704                           
  3705                           ;Main_B1.c: 67: ;;
  3706                           ;Main_B1.c: 68: ;;
  3707                           ;Main_B1.c: 69: ;;
  3708                           ;Main_B1.c: 70: if (myMain.PowerON) {
  3709  1599  0021               	movlb	1	; select bank1
  3710  159A  1C35               	btfss	_myMain^(0+128),0
  3711  159B  2D92               	goto	l1576
  3712                           
  3713                           ;Main_B1.c: 71: Flash_Memory_Main();
  3714  159C  3187  27E1  3195   	fcall	_Flash_Memory_Main
  3715                           
  3716                           ;Main_B1.c: 73: LED_Main();
  3717  159F  319F  27E0  3195   	fcall	_LED_Main
  3718                           
  3719                           ;Main_B1.c: 74: Buzzer_Main();
  3720  15A2  3197  2709  3195   	fcall	_Buzzer_Main
  3721                           
  3722                           ;Main_B1.c: 76: ;;
  3723                           ;Main_B1.c: 77: ;;
  3724                           ;Main_B1.c: 78: ;;
  3725                           ;Main_B1.c: 79: ;;
  3726                           ;Main_B1.c: 81: ;;
  3727                           ;Main_B1.c: 82: DimmerLights_Main();
  3728  15A5  319F  2774  3195   	fcall	_DimmerLights_Main
  3729                           
  3730                           ;Main_B1.c: 83: Switch_Main();
  3731  15A8  319F  2715  3195   	fcall	_Switch_Main
  3732                           
  3733                           ;Main_B1.c: 84: ;;
  3734                           ;Main_B1.c: 85: ;;
  3735                           ;Main_B1.c: 87: RF_Main();
  3736  15AB  319E  2681  3195   	fcall	_RF_Main
  3737                           
  3738                           ;Main_B1.c: 88: DelayOff_Main();
  3739  15AE  319E  26FD  3195   	fcall	_DelayOff_Main
  3740                           
  3741                           ;Main_B1.c: 89: ;;
  3742  15B1  2D92               	goto	l1576
  3743  15B2                     __end_of_main:	
  3744                           ;Main_B1.c: 90: }
  3745                           ;Main_B1.c: 91: }
  3746                           ;Main_B1.c: 109: }
  3747                           ;Main_B1.c: 110: return (0);
  3748                           ;	Return value of _main is never used
  3749                           
  3750                           
  3751                           	psect	text1
  3752  15B2                     __ptext1:	
  3753 ;; *************** function _my_MainTime *****************
  3754 ;; Defined at:
  3755 ;;		line 127 in file "../src/Main_B1.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;		None
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;		None
  3760 ;; Return value:  Size  Location     Type
  3761 ;;		None               void
  3762 ;; Registers used:
  3763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;Total ram usage:        0 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    7
  3776 ;; This function calls:
  3777 ;;		_setBuz
  3778 ;;		_setRF_Enable
  3779 ;;		_setSw_Enable
  3780 ;; This function is called by:
  3781 ;;		_main
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _my_MainTime
  3787  15B2                     _my_MainTime:	
  3788                           
  3789                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  3790                           
  3791                           ;incstack = 0
  3792                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3793  15B2  0021               	movlb	1	; select bank1
  3794  15B3  1835               	btfsc	_myMain^(0+128),0
  3795  15B4  2DDB               	goto	l9583
  3796                           
  3797                           ;Main_B1.c: 130: myMain.PowerCount++;
  3798  15B5  3001               	movlw	1
  3799  15B6  07B6               	addwf	(_myMain^(0+128)+1),f
  3800  15B7  3000               	movlw	0
  3801  15B8  3DB7               	addwfc	((_myMain+1)^(0+128)+1),f
  3802                           
  3803                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  3804  15B9  3001               	movlw	1
  3805  15BA  3EB5               	addlw	_myMain& (0+255)
  3806  15BB  0086               	movwf	6
  3807  15BC  0187               	clrf	7
  3808  15BD  3F40               	moviw [0]fsr1
  3809  15BE  3A96               	xorlw	150
  3810  15BF  1D03               	skipz
  3811  15C0  2DC3               	goto	u10335
  3812  15C1  3F41               	moviw [1]fsr1
  3813  15C2  3A00               	xorlw	0
  3814  15C3                     u10335:	
  3815  15C3  1D03               	skipz
  3816  15C4  0008               	return
  3817                           
  3818                           ;Main_B1.c: 132: {
  3819                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  3820  15C5  01B6               	clrf	(_myMain^(0+128)+1)
  3821  15C6  01B7               	clrf	((_myMain+1)^(0+128)+1)
  3822                           
  3823                           ;Main_B1.c: 134: myMain.PowerON = 1;
  3824  15C7  1435               	bsf	_myMain^(0+128),0
  3825                           
  3826                           ;Main_B1.c: 137: ;;
  3827                           ;Main_B1.c: 141: ;;
  3828                           ;Main_B1.c: 147: setBuz(3, 50);
  3829  15C8  3032               	movlw	50
  3830  15C9  0020               	movlb	0	; select bank0
  3831  15CA  00A9               	movwf	setBuz@time
  3832  15CB  3000               	movlw	0
  3833  15CC  00AA               	movwf	setBuz@time+1
  3834  15CD  3003               	movlw	3
  3835  15CE  3197  27A7  3195   	fcall	_setBuz
  3836                           
  3837                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  3838  15D1  0021               	movlb	1	; select bank1
  3839  15D2  1735               	bsf	_myMain^(0+128),6
  3840                           
  3841                           ;Main_B1.c: 150: setSw_Enable(1);
  3842  15D3  3001               	movlw	1
  3843  15D4  3193  2390  3195   	fcall	_setSw_Enable
  3844                           
  3845                           ;Main_B1.c: 153: setRF_Enable(1);
  3846  15D7  3001               	movlw	1
  3847  15D8  319F  2748         	fcall	_setRF_Enable
  3848                           
  3849                           ;Main_B1.c: 157: }
  3850                           ;Main_B1.c: 158: } else {
  3851  15DA  0008               	return
  3852  15DB                     l9583:	
  3853                           
  3854                           ;Main_B1.c: 166: myMain.Count1++;
  3855  15DB  3001               	movlw	1
  3856  15DC  0021               	movlb	1	; select bank1
  3857  15DD  07BA               	addwf	(_myMain^(0+128)+5),f
  3858  15DE  3000               	movlw	0
  3859  15DF  3DBB               	addwfc	((_myMain+1)^(0+128)+5),f
  3860                           
  3861                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  3862  15E0  3005               	movlw	5
  3863  15E1  3EB5               	addlw	_myMain& (0+255)
  3864  15E2  0086               	movwf	6
  3865  15E3  0187               	clrf	7
  3866  15E4  3F40               	moviw [0]fsr1
  3867  15E5  3A64               	xorlw	100
  3868  15E6  1D03               	skipz
  3869  15E7  2DEA               	goto	u10345
  3870  15E8  3F41               	moviw [1]fsr1
  3871  15E9  3A00               	xorlw	0
  3872  15EA                     u10345:	
  3873  15EA  1D03               	skipz
  3874  15EB  0008               	return
  3875                           
  3876                           ;Main_B1.c: 168: {
  3877                           ;Main_B1.c: 169: myMain.Count1 = 0;
  3878  15EC  01BA               	clrf	(_myMain^(0+128)+5)
  3879  15ED  01BB               	clrf	((_myMain+1)^(0+128)+5)
  3880                           
  3881                           ;Main_B1.c: 182: if (myMain.Flag) {
  3882  15EE  1DB5               	btfss	_myMain^(0+128),3
  3883  15EF  2DF2               	goto	l1591
  3884                           
  3885                           ;Main_B1.c: 183: myMain.Flag = 0;
  3886  15F0  11B5               	bcf	_myMain^(0+128),3
  3887                           
  3888                           ;Main_B1.c: 192: } else {
  3889  15F1  0008               	return
  3890  15F2                     l1591:	
  3891                           
  3892                           ;Main_B1.c: 193: myMain.Flag = 1;
  3893  15F2  15B5               	bsf	_myMain^(0+128),3
  3894  15F3  0008               	return
  3895  15F4                     __end_of_my_MainTime:	
  3896                           
  3897                           	psect	text2
  3898  1390                     __ptext2:	
  3899 ;; *************** function _setSw_Enable *****************
  3900 ;; Defined at:
  3901 ;;		line 91 in file "../src/Switch_B1.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  command         1    wreg     unsigned char 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  command         1    2[BANK0 ] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;		None               void
  3908 ;; Registers used:
  3909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;Total ram usage:        1 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    6
  3922 ;; This function calls:
  3923 ;;		_SwPointSelect
  3924 ;; This function is called by:
  3925 ;;		_my_MainTime
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _setSw_Enable
  3931  1390                     _setSw_Enable:	
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3935                           ;setSw_Enable@command stored from wreg
  3936  1390  0020               	movlb	0	; select bank0
  3937  1391  00A2               	movwf	setSw_Enable@command
  3938                           
  3939                           ;Switch_B1.c: 94: SwPointSelect(1);
  3940  1392  3001               	movlw	1
  3941  1393  3192  221F  3193   	fcall	_SwPointSelect
  3942                           
  3943                           ;Switch_B1.c: 95: Sw->Enable = command;
  3944  1396  0020               	movlb	0	; select bank0
  3945  1397  086C               	movf	_Sw,w
  3946  1398  0086               	movwf	6
  3947  1399  3001               	movlw	1	; select bank2/3
  3948  139A  0087               	movwf	7
  3949  139B  0822               	movf	setSw_Enable@command,w
  3950  139C  1001               	bcf	1,0
  3951  139D  1D03               	skipz
  3952  139E  1401               	bsf	1,0
  3953                           
  3954                           ;Switch_B1.c: 99: SwPointSelect(2);
  3955  139F  3002               	movlw	2
  3956  13A0  3192  221F  3193   	fcall	_SwPointSelect
  3957                           
  3958                           ;Switch_B1.c: 100: Sw->Enable = command;
  3959  13A3  0020               	movlb	0	; select bank0
  3960  13A4  086C               	movf	_Sw,w
  3961  13A5  0086               	movwf	6
  3962  13A6  3001               	movlw	1	; select bank2/3
  3963  13A7  0087               	movwf	7
  3964  13A8  0822               	movf	setSw_Enable@command,w
  3965  13A9  1001               	bcf	1,0
  3966  13AA  1D03               	skipz
  3967  13AB  1401               	bsf	1,0
  3968                           
  3969                           ;Switch_B1.c: 104: SwPointSelect(3);
  3970  13AC  3003               	movlw	3
  3971  13AD  3192  221F         	fcall	_SwPointSelect
  3972                           
  3973                           ;Switch_B1.c: 105: Sw->Enable = command;
  3974  13AF  0020               	movlb	0	; select bank0
  3975  13B0  086C               	movf	_Sw,w
  3976  13B1  0086               	movwf	6
  3977  13B2  3001               	movlw	1	; select bank2/3
  3978  13B3  0087               	movwf	7
  3979  13B4  0822               	movf	setSw_Enable@command,w
  3980  13B5  1001               	bcf	1,0
  3981  13B6  1D03               	skipz
  3982  13B7  1401               	bsf	1,0
  3983  13B8  0008               	return
  3984  13B9                     __end_of_setSw_Enable:	
  3985                           
  3986                           	psect	text3
  3987  1F48                     __ptext3:	
  3988 ;; *************** function _setRF_Enable *****************
  3989 ;; Defined at:
  3990 ;;		line 216 in file "../src/RF_Control_B1.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  command         1    wreg     unsigned char 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  command         1    0[BANK0 ] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;		None               void
  3997 ;; Registers used:
  3998 ;;		wreg, status,2
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;Total ram usage:        1 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    5
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_my_MainTime
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _setRF_Enable
  4020  1F48                     _setRF_Enable:	
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4024                           ;setRF_Enable@command stored from wreg
  4025  1F48  0020               	movlb	0	; select bank0
  4026  1F49  00A0               	movwf	setRF_Enable@command
  4027                           
  4028                           ;RF_Control_B1.c: 217: RF1.Enable = command;
  4029  1F4A  0820               	movf	setRF_Enable@command,w
  4030  1F4B  0021               	movlb	1	; select bank1
  4031  1F4C  1053               	bcf	_RF1^(0+128),0
  4032  1F4D  1D03               	skipz
  4033  1F4E  1453               	bsf	_RF1^(0+128),0
  4034                           
  4035                           ;RF_Control_B1.c: 218: RF1.Learn = 0;
  4036  1F4F  1353               	bcf	_RF1^(0+128),6
  4037                           
  4038                           ;RF_Control_B1.c: 219: RF1.TransceiveGO = 0;
  4039  1F50  1153               	bcf	_RF1^(0+128),2
  4040                           
  4041                           ;RF_Control_B1.c: 220: RF1.RxStatus = 0;
  4042  1F51  11D3               	bcf	_RF1^(0+128),3
  4043                           
  4044                           ;RF_Control_B1.c: 221: RF1.ReceiveGO = 0;
  4045  1F52  10D3               	bcf	_RF1^(0+128),1
  4046                           
  4047                           ;RF_Control_B1.c: 222: RF1.DebounceTime = 0;
  4048  1F53  01DA               	clrf	(_RF1^(0+128)+7)
  4049                           
  4050                           ;RF_Control_B1.c: 223: RF1.Debounce = 0;
  4051  1F54  12D3               	bcf	_RF1^(0+128),5
  4052  1F55  0008               	return
  4053  1F56                     __end_of_setRF_Enable:	
  4054                           
  4055                           	psect	text4
  4056  1FA1                     __ptext4:	
  4057 ;; *************** function _myMain_Initialization *****************
  4058 ;; Defined at:
  4059 ;;		line 115 in file "../src/Main_B1.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;		None               void
  4066 ;; Registers used:
  4067 ;;		wreg, fsr1l, fsr1h
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;Total ram usage:        1 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    5
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_main
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           
  4088                           ;psect for function _myMain_Initialization
  4089  1FA1                     _myMain_Initialization:	
  4090                           
  4091                           ;Main_B1.c: 117: product = &_product;
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4095  1FA1  3020               	movlw	__product& (0+255)
  4096  1FA2  0020               	movlb	0	; select bank0
  4097  1FA3  00A0               	movwf	??_myMain_Initialization
  4098  1FA4  0820               	movf	??_myMain_Initialization,w
  4099  1FA5  00ED               	movwf	_product
  4100                           
  4101                           ;Main_B1.c: 118: product->Data[20] = 211;
  4102  1FA6  30D3               	movlw	211
  4103  1FA7  00A0               	movwf	??_myMain_Initialization
  4104  1FA8  086D               	movf	_product,w
  4105  1FA9  3E14               	addlw	20
  4106  1FAA  0086               	movwf	6
  4107  1FAB  3002               	movlw	2	; select bank4/5
  4108  1FAC  0087               	movwf	7
  4109  1FAD  0820               	movf	??_myMain_Initialization,w
  4110  1FAE  0081               	movwf	1
  4111  1FAF  0008               	return
  4112  1FB0                     __end_of_myMain_Initialization:	
  4113                           
  4114                           	psect	text5
  4115  1F15                     __ptext5:	
  4116 ;; *************** function _Switch_Main *****************
  4117 ;; Defined at:
  4118 ;;		line 67 in file "../src/Switch_B1.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;		None               void
  4125 ;; Registers used:
  4126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;Total ram usage:        0 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:   11
  4139 ;; This function calls:
  4140 ;;		_setSw_Main
  4141 ;; This function is called by:
  4142 ;;		_main
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           
  4147                           ;psect for function _Switch_Main
  4148  1F15                     _Switch_Main:	
  4149                           
  4150                           ;Switch_B1.c: 69: setSw_Main(1);
  4151                           
  4152                           ;incstack = 0
  4153                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4154  1F15  3001               	movlw	1
  4155  1F16  3182  220F  319F   	fcall	_setSw_Main
  4156                           
  4157                           ;Switch_B1.c: 73: setSw_Main(2);
  4158  1F19  3002               	movlw	2
  4159  1F1A  3182  220F  319F   	fcall	_setSw_Main
  4160                           
  4161                           ;Switch_B1.c: 77: setSw_Main(3);
  4162  1F1D  3003               	movlw	3
  4163  1F1E  3182  220F         	fcall	_setSw_Main
  4164  1F20  0008               	return
  4165  1F21                     __end_of_Switch_Main:	
  4166                           
  4167                           	psect	text6
  4168  020F                     __ptext6:	
  4169 ;; *************** function _setSw_Main *****************
  4170 ;; Defined at:
  4171 ;;		line 117 in file "../src/Switch_B1.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  sw              1    wreg     unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  sw              1   74[BANK0 ] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;		None               void
  4178 ;; Registers used:
  4179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;Total ram usage:        3 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:   10
  4192 ;; This function calls:
  4193 ;;		_SwPointSelect
  4194 ;;		_Sw_DimmerAdjFunc
  4195 ;;		_Sw_DimmerOffFunc
  4196 ;;		_Sw_DimmerOnFunc
  4197 ;;		_setBuz
  4198 ;;		_setRF_Learn
  4199 ;; This function is called by:
  4200 ;;		_Switch_Main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           
  4205                           ;psect for function _setSw_Main
  4206  020F                     _setSw_Main:	
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4210                           ;setSw_Main@sw stored from wreg
  4211  020F  0020               	movlb	0	; select bank0
  4212  0210  00EA               	movwf	setSw_Main@sw
  4213                           
  4214                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4215  0211  086A               	movf	setSw_Main@sw,w
  4216  0212  3192  221F  3182   	fcall	_SwPointSelect
  4217                           
  4218                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4219  0215  0020               	movlb	0	; select bank0
  4220  0216  086C               	movf	_Sw,w
  4221  0217  0086               	movwf	6
  4222  0218  3001               	movlw	1	; select bank2/3
  4223  0219  0087               	movwf	7
  4224  021A  1C01               	btfss	1,0
  4225  021B  0008               	return
  4226                           
  4227                           ;Switch_B1.c: 121: if (sw == 1) {
  4228  021C  086A               	movf	setSw_Main@sw,w
  4229  021D  3A01               	xorlw	1
  4230  021E  1D03               	skipz
  4231  021F  2A28               	goto	l9347
  4232                           
  4233                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4234  0220  086C               	movf	_Sw,w
  4235  0221  0086               	movwf	6
  4236  0222  3001               	movlw	1	; select bank2/3
  4237  0223  0087               	movwf	7
  4238  0224  1081               	bcf	1,1
  4239  0225  180C               	btfsc	12,0	;volatile
  4240  0226  1481               	bsf	1,1
  4241                           
  4242                           ;Switch_B1.c: 123: } else if (sw == 2) {
  4243  0227  2A41               	goto	l2637
  4244  0228                     l9347:	
  4245  0228  0020               	movlb	0	; select bank0
  4246  0229  086A               	movf	setSw_Main@sw,w
  4247  022A  3A02               	xorlw	2
  4248  022B  1D03               	skipz
  4249  022C  2A35               	goto	l9351
  4250                           
  4251                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4252  022D  086C               	movf	_Sw,w
  4253  022E  0086               	movwf	6
  4254  022F  3001               	movlw	1	; select bank2/3
  4255  0230  0087               	movwf	7
  4256  0231  1081               	bcf	1,1
  4257  0232  1B0C               	btfsc	12,6	;volatile
  4258  0233  1481               	bsf	1,1
  4259                           
  4260                           ;Switch_B1.c: 125: } else if (sw == 3) {
  4261  0234  2A41               	goto	l2637
  4262  0235                     l9351:	
  4263  0235  0020               	movlb	0	; select bank0
  4264  0236  086A               	movf	setSw_Main@sw,w
  4265  0237  3A03               	xorlw	3
  4266  0238  1D03               	skipz
  4267  0239  2A41               	goto	l2637
  4268                           
  4269                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4270  023A  086C               	movf	_Sw,w
  4271  023B  0086               	movwf	6
  4272  023C  3001               	movlw	1	; select bank2/3
  4273  023D  0087               	movwf	7
  4274  023E  1081               	bcf	1,1
  4275  023F  1A0C               	btfsc	12,4	;volatile
  4276  0240  1481               	bsf	1,1
  4277  0241                     l2637:	
  4278                           
  4279                           ;Switch_B1.c: 127: }
  4280                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4281  0241  0020               	movlb	0	; select bank0
  4282  0242  086C               	movf	_Sw,w
  4283  0243  0086               	movwf	6
  4284  0244  3001               	movlw	1	; select bank2/3
  4285  0245  0087               	movwf	7
  4286  0246  1C81               	btfss	1,1
  4287  0247  2B0C               	goto	l9401
  4288                           
  4289                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4290  0248  086C               	movf	_Sw,w
  4291  0249  0086               	movwf	6
  4292  024A  3001               	movlw	1	; select bank2/3
  4293  024B  0087               	movwf	7
  4294  024C  1901               	btfsc	1,2
  4295  024D  2A6F               	goto	l9367
  4296                           
  4297                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4298  024E  3001               	movlw	1
  4299  024F  00E8               	movwf	??_setSw_Main
  4300  0250  086C               	movf	_Sw,w
  4301  0251  3E02               	addlw	2
  4302  0252  0086               	movwf	6
  4303  0253  3001               	movlw	1	; select bank2/3
  4304  0254  0087               	movwf	7
  4305  0255  0868               	movf	??_setSw_Main,w
  4306  0256  0781               	addwf	1,f
  4307                           
  4308                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4309  0257  086C               	movf	_Sw,w
  4310  0258  3E02               	addlw	2
  4311  0259  0086               	movwf	6
  4312  025A  3001               	movlw	1	; select bank2/3
  4313  025B  0087               	movwf	7
  4314  025C  3005               	movlw	5
  4315  025D  0201               	subwf	1,w
  4316  025E  1C03               	skipc
  4317  025F  0008               	return
  4318                           
  4319                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4320  0260  086C               	movf	_Sw,w
  4321  0261  3E02               	addlw	2
  4322  0262  0086               	movwf	6
  4323  0263  3001               	movlw	1	; select bank2/3
  4324  0264  0087               	movwf	7
  4325  0265  0181               	clrf	1
  4326                           
  4327                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4328  0266  086C               	movf	_Sw,w
  4329  0267  0086               	movwf	6
  4330  0268  3001               	movlw	1	; select bank2/3
  4331  0269  0087               	movwf	7
  4332  026A  1501               	bsf	1,2
  4333                           
  4334                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4335  026B  086A               	movf	setSw_Main@sw,w
  4336  026C  318D  25BD         	fcall	_Sw_DimmerOnFunc
  4337                           
  4338                           ;Switch_B1.c: 173: }
  4339                           ;Switch_B1.c: 174: } else {
  4340  026E  0008               	return
  4341  026F                     l9367:	
  4342                           
  4343                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4344  026F  0020               	movlb	0	; select bank0
  4345  0270  086C               	movf	_Sw,w
  4346  0271  0086               	movwf	6
  4347  0272  3001               	movlw	1	; select bank2/3
  4348  0273  0087               	movwf	7
  4349  0274  1981               	btfsc	1,3
  4350  0275  2A9C               	goto	l9377
  4351                           
  4352                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4353  0276  086C               	movf	_Sw,w
  4354  0277  3E03               	addlw	3
  4355  0278  0086               	movwf	6
  4356  0279  3001               	movlw	1	; select bank2/3
  4357  027A  0087               	movwf	7
  4358  027B  3001               	movlw	1
  4359  027C  0781               	addwf	1,f
  4360  027D  3141               	addfsr 1,1
  4361  027E  1803               	skipnc
  4362  027F  0A81               	incf	1,f
  4363                           
  4364                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4365  0280  086C               	movf	_Sw,w
  4366  0281  3E03               	addlw	3
  4367  0282  0086               	movwf	6
  4368  0283  3001               	movlw	1	; select bank2/3
  4369  0284  0087               	movwf	7
  4370  0285  3F40               	moviw [0]fsr1
  4371  0286  00E8               	movwf	??_setSw_Main
  4372  0287  3F41               	moviw [1]fsr1
  4373  0288  00E9               	movwf	??_setSw_Main+1
  4374  0289  3000               	movlw	0
  4375  028A  0269               	subwf	??_setSw_Main+1,w
  4376  028B  3096               	movlw	150
  4377  028C  1903               	skipnz
  4378  028D  0268               	subwf	??_setSw_Main,w
  4379  028E  1C03               	skipc
  4380  028F  0008               	return
  4381                           
  4382                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4383  0290  086C               	movf	_Sw,w
  4384  0291  3E03               	addlw	3
  4385  0292  0086               	movwf	6
  4386  0293  3001               	movlw	1	; select bank2/3
  4387  0294  0087               	movwf	7
  4388  0295  3000               	movlw	0
  4389  0296  3FC0               	movwi [0]fsr1
  4390  0297  3FC1               	movwi [1]fsr1
  4391                           
  4392                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4393  0298  086A               	movf	setSw_Main@sw,w
  4394  0299  3189  21AC         	fcall	_Sw_DimmerAdjFunc
  4395                           
  4396                           ;Switch_B1.c: 184: }
  4397                           ;Switch_B1.c: 185: } else {
  4398  029B  0008               	return
  4399  029C                     l9377:	
  4400                           
  4401                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4402  029C  0020               	movlb	0	; select bank0
  4403  029D  086C               	movf	_Sw,w
  4404  029E  0086               	movwf	6
  4405  029F  3001               	movlw	1	; select bank2/3
  4406  02A0  0087               	movwf	7
  4407  02A1  1A01               	btfsc	1,4
  4408  02A2  2ADA               	goto	l9391
  4409                           
  4410                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4411  02A3  086C               	movf	_Sw,w
  4412  02A4  3E05               	addlw	5
  4413  02A5  0086               	movwf	6
  4414  02A6  3001               	movlw	1	; select bank2/3
  4415  02A7  0087               	movwf	7
  4416  02A8  3001               	movlw	1
  4417  02A9  0781               	addwf	1,f
  4418  02AA  3141               	addfsr 1,1
  4419  02AB  1803               	skipnc
  4420  02AC  0A81               	incf	1,f
  4421                           
  4422                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4423  02AD  086C               	movf	_Sw,w
  4424  02AE  3E05               	addlw	5
  4425  02AF  0086               	movwf	6
  4426  02B0  3001               	movlw	1	; select bank2/3
  4427  02B1  0087               	movwf	7
  4428  02B2  3F40               	moviw [0]fsr1
  4429  02B3  00E8               	movwf	??_setSw_Main
  4430  02B4  3F41               	moviw [1]fsr1
  4431  02B5  00E9               	movwf	??_setSw_Main+1
  4432  02B6  3000               	movlw	0
  4433  02B7  0269               	subwf	??_setSw_Main+1,w
  4434  02B8  3096               	movlw	150
  4435  02B9  1903               	skipnz
  4436  02BA  0268               	subwf	??_setSw_Main,w
  4437  02BB  1C03               	skipc
  4438  02BC  0008               	return
  4439                           
  4440                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4441  02BD  086C               	movf	_Sw,w
  4442  02BE  3E05               	addlw	5
  4443  02BF  0086               	movwf	6
  4444  02C0  3001               	movlw	1	; select bank2/3
  4445  02C1  0087               	movwf	7
  4446  02C2  3000               	movlw	0
  4447  02C3  3FC0               	movwi [0]fsr1
  4448  02C4  3FC1               	movwi [1]fsr1
  4449                           
  4450                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4451  02C5  086C               	movf	_Sw,w
  4452  02C6  0086               	movwf	6
  4453  02C7  3001               	movlw	1	; select bank2/3
  4454  02C8  0087               	movwf	7
  4455  02C9  1601               	bsf	1,4
  4456                           
  4457                           ;Switch_B1.c: 193: setRF_Learn(1);
  4458  02CA  3001               	movlw	1
  4459  02CB  319E  26BD  3182   	fcall	_setRF_Learn
  4460                           
  4461                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4462  02CE  0021               	movlb	1	; select bank1
  4463  02CF  1FB5               	btfss	_myMain^(0+128),7
  4464  02D0  0008               	return
  4465                           
  4466                           ;Switch_B1.c: 196: setBuz(2, 100);
  4467  02D1  3064               	movlw	100
  4468  02D2  0020               	movlb	0	; select bank0
  4469  02D3  00A9               	movwf	setBuz@time
  4470  02D4  3000               	movlw	0
  4471  02D5  00AA               	movwf	setBuz@time+1
  4472  02D6  3002               	movlw	2
  4473  02D7  3197  27A7         	fcall	_setBuz
  4474                           
  4475                           ;Switch_B1.c: 197: }
  4476                           ;Switch_B1.c: 199: }
  4477                           ;Switch_B1.c: 200: } else {
  4478  02D9  0008               	return
  4479  02DA                     l9391:	
  4480                           
  4481                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4482  02DA  0020               	movlb	0	; select bank0
  4483  02DB  086C               	movf	_Sw,w
  4484  02DC  0086               	movwf	6
  4485  02DD  3001               	movlw	1	; select bank2/3
  4486  02DE  0087               	movwf	7
  4487  02DF  1A81               	btfsc	1,5
  4488  02E0  0008               	return
  4489                           
  4490                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4491  02E1  086C               	movf	_Sw,w
  4492  02E2  3E07               	addlw	7
  4493  02E3  0086               	movwf	6
  4494  02E4  3001               	movlw	1	; select bank2/3
  4495  02E5  0087               	movwf	7
  4496  02E6  3001               	movlw	1
  4497  02E7  0781               	addwf	1,f
  4498  02E8  3141               	addfsr 1,1
  4499  02E9  1803               	skipnc
  4500  02EA  0A81               	incf	1,f
  4501                           
  4502                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4503  02EB  086C               	movf	_Sw,w
  4504  02EC  3E07               	addlw	7
  4505  02ED  0086               	movwf	6
  4506  02EE  3001               	movlw	1	; select bank2/3
  4507  02EF  0087               	movwf	7
  4508  02F0  3F40               	moviw [0]fsr1
  4509  02F1  00E8               	movwf	??_setSw_Main
  4510  02F2  3F41               	moviw [1]fsr1
  4511  02F3  00E9               	movwf	??_setSw_Main+1
  4512  02F4  3001               	movlw	1
  4513  02F5  0269               	subwf	??_setSw_Main+1,w
  4514  02F6  302C               	movlw	44
  4515  02F7  1903               	skipnz
  4516  02F8  0268               	subwf	??_setSw_Main,w
  4517  02F9  1C03               	skipc
  4518  02FA  0008               	return
  4519                           
  4520                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4521  02FB  086C               	movf	_Sw,w
  4522  02FC  3E07               	addlw	7
  4523  02FD  0086               	movwf	6
  4524  02FE  3001               	movlw	1	; select bank2/3
  4525  02FF  0087               	movwf	7
  4526  0300  3000               	movlw	0
  4527  0301  3FC0               	movwi [0]fsr1
  4528  0302  3FC1               	movwi [1]fsr1
  4529                           
  4530                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4531  0303  086C               	movf	_Sw,w
  4532  0304  0086               	movwf	6
  4533  0305  3001               	movlw	1	; select bank2/3
  4534  0306  0087               	movwf	7
  4535  0307  1681               	bsf	1,5
  4536                           
  4537                           ;Switch_B1.c: 208: setRF_Learn(0);
  4538  0308  3000               	movlw	0
  4539  0309  319E  26BD         	fcall	_setRF_Learn
  4540                           
  4541                           ;Switch_B1.c: 211: }
  4542                           ;Switch_B1.c: 212: }
  4543                           ;Switch_B1.c: 213: }
  4544                           ;Switch_B1.c: 214: }
  4545                           ;Switch_B1.c: 215: }
  4546                           ;Switch_B1.c: 216: } else {
  4547  030B  0008               	return
  4548  030C                     l9401:	
  4549                           
  4550                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4551  030C  0020               	movlb	0	; select bank0
  4552  030D  086C               	movf	_Sw,w
  4553  030E  0086               	movwf	6
  4554  030F  3001               	movlw	1	; select bank2/3
  4555  0310  0087               	movwf	7
  4556  0311  1D01               	btfss	1,2
  4557  0312  0008               	return
  4558                           
  4559                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4560  0313  3001               	movlw	1
  4561  0314  00E8               	movwf	??_setSw_Main
  4562  0315  086C               	movf	_Sw,w
  4563  0316  3E02               	addlw	2
  4564  0317  0086               	movwf	6
  4565  0318  3001               	movlw	1	; select bank2/3
  4566  0319  0087               	movwf	7
  4567  031A  0868               	movf	??_setSw_Main,w
  4568  031B  0781               	addwf	1,f
  4569                           
  4570                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4571  031C  086C               	movf	_Sw,w
  4572  031D  3E02               	addlw	2
  4573  031E  0086               	movwf	6
  4574  031F  3001               	movlw	1	; select bank2/3
  4575  0320  0087               	movwf	7
  4576  0321  3005               	movlw	5
  4577  0322  0201               	subwf	1,w
  4578  0323  1C03               	skipc
  4579  0324  0008               	return
  4580                           
  4581                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4582  0325  086C               	movf	_Sw,w
  4583  0326  3E02               	addlw	2
  4584  0327  0086               	movwf	6
  4585  0328  3001               	movlw	1	; select bank2/3
  4586  0329  0087               	movwf	7
  4587  032A  0181               	clrf	1
  4588                           
  4589                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4590  032B  086C               	movf	_Sw,w
  4591  032C  0086               	movwf	6
  4592  032D  3001               	movlw	1	; select bank2/3
  4593  032E  0087               	movwf	7
  4594  032F  1101               	bcf	1,2
  4595                           
  4596                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4597  0330  086C               	movf	_Sw,w
  4598  0331  3E03               	addlw	3
  4599  0332  0086               	movwf	6
  4600  0333  3001               	movlw	1	; select bank2/3
  4601  0334  0087               	movwf	7
  4602  0335  3000               	movlw	0
  4603  0336  3FC0               	movwi [0]fsr1
  4604  0337  3FC1               	movwi [1]fsr1
  4605                           
  4606                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4607  0338  086C               	movf	_Sw,w
  4608  0339  0086               	movwf	6
  4609  033A  3001               	movlw	1	; select bank2/3
  4610  033B  0087               	movwf	7
  4611  033C  1181               	bcf	1,3
  4612                           
  4613                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4614  033D  086C               	movf	_Sw,w
  4615  033E  3E05               	addlw	5
  4616  033F  0086               	movwf	6
  4617  0340  3001               	movlw	1	; select bank2/3
  4618  0341  0087               	movwf	7
  4619  0342  3000               	movlw	0
  4620  0343  3FC0               	movwi [0]fsr1
  4621  0344  3FC1               	movwi [1]fsr1
  4622                           
  4623                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4624  0345  086C               	movf	_Sw,w
  4625  0346  0086               	movwf	6
  4626  0347  3001               	movlw	1	; select bank2/3
  4627  0348  0087               	movwf	7
  4628  0349  1201               	bcf	1,4
  4629                           
  4630                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4631  034A  086C               	movf	_Sw,w
  4632  034B  3E07               	addlw	7
  4633  034C  0086               	movwf	6
  4634  034D  3001               	movlw	1	; select bank2/3
  4635  034E  0087               	movwf	7
  4636  034F  3000               	movlw	0
  4637  0350  3FC0               	movwi [0]fsr1
  4638  0351  3FC1               	movwi [1]fsr1
  4639                           
  4640                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4641  0352  086C               	movf	_Sw,w
  4642  0353  0086               	movwf	6
  4643  0354  3001               	movlw	1	; select bank2/3
  4644  0355  0087               	movwf	7
  4645  0356  1281               	bcf	1,5
  4646                           
  4647                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4648  0357  086A               	movf	setSw_Main@sw,w
  4649  0358  318A  22E2  3182   	fcall	_Sw_DimmerOffFunc
  4650                           
  4651                           ;Switch_B1.c: 232: setRF_Learn(0);
  4652  035B  3000               	movlw	0
  4653  035C  319E  26BD         	fcall	_setRF_Learn
  4654  035E  0008               	return
  4655  035F                     __end_of_setSw_Main:	
  4656                           
  4657                           	psect	text7
  4658  1EBD                     __ptext7:	
  4659 ;; *************** function _setRF_Learn *****************
  4660 ;; Defined at:
  4661 ;;		line 23 in file "../src/RF_Control_B1.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  command         1    wreg     unsigned char 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  command         1    0[BANK0 ] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		wreg
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;Total ram usage:        1 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    5
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_setSw_Main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function _setRF_Learn
  4691  1EBD                     _setRF_Learn:	
  4692                           
  4693                           ;incstack = 0
  4694                           ; Regs used in _setRF_Learn: [wreg]
  4695                           ;setRF_Learn@command stored from wreg
  4696  1EBD  0020               	movlb	0	; select bank0
  4697  1EBE  00A0               	movwf	setRF_Learn@command
  4698                           
  4699                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4700  1EBF  0820               	movf	setRF_Learn@command,w
  4701  1EC0  0021               	movlb	1	; select bank1
  4702  1EC1  1353               	bcf	_RF1^(0+128),6
  4703  1EC2  1D03               	skipz
  4704  1EC3  1753               	bsf	_RF1^(0+128),6
  4705  1EC4  0008               	return
  4706  1EC5                     __end_of_setRF_Learn:	
  4707                           
  4708                           	psect	text8
  4709  0DBD                     __ptext8:	
  4710 ;; *************** function _Sw_DimmerOnFunc *****************
  4711 ;; Defined at:
  4712 ;;		line 241 in file "../src/Switch_B1.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  sw              1    wreg     unsigned char 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  sw              1   71[BANK0 ] unsigned char 
  4717 ;;  Idle            1   70[BANK0 ] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;		None               void
  4720 ;; Registers used:
  4721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;Total ram usage:        6 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    9
  4734 ;; This function calls:
  4735 ;;		_setBuz
  4736 ;;		_setDimmerLights_Switch
  4737 ;;		_setDimmerLights_Trigger
  4738 ;;		_setRFSW_Status
  4739 ;;		_setRF_DimmerLights
  4740 ;;		_setTxData
  4741 ;; This function is called by:
  4742 ;;		_setSw_Main
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           
  4747                           ;psect for function _Sw_DimmerOnFunc
  4748  0DBD                     _Sw_DimmerOnFunc:	
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4752                           ;Sw_DimmerOnFunc@sw stored from wreg
  4753  0DBD  0020               	movlb	0	; select bank0
  4754  0DBE  00E7               	movwf	Sw_DimmerOnFunc@sw
  4755                           
  4756                           ;Switch_B1.c: 242: char Idle = 1;
  4757  0DBF  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4758  0DC0  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4759                           
  4760                           ;Switch_B1.c: 246: if (sw == 1) {
  4761  0DC1  0867               	movf	Sw_DimmerOnFunc@sw,w
  4762  0DC2  3A01               	xorlw	1
  4763  0DC3  1D03               	skipz
  4764  0DC4  2DD2               	goto	l8789
  4765                           
  4766                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4767  0DC5  01E3               	clrf	_Sw_DimmerOnFunc$5205
  4768  0DC6  0022               	movlb	2	; select bank2
  4769  0DC7  19BF               	btfsc	(_DimmerLights2^(0+256)+8),3
  4770  0DC8  2DCF               	goto	l8787
  4771  0DC9  0023               	movlb	3	; select bank3
  4772  0DCA  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  4773  0DCB  2DCF               	goto	l8787
  4774  0DCC  0020               	movlb	0	; select bank0
  4775  0DCD  01E3               	clrf	_Sw_DimmerOnFunc$5205
  4776  0DCE  0AE3               	incf	_Sw_DimmerOnFunc$5205,f
  4777  0DCF                     l8787:	
  4778  0DCF  0020               	movlb	0	; select bank0
  4779  0DD0  0863               	movf	_Sw_DimmerOnFunc$5205,w
  4780  0DD1  2DF1               	goto	L2
  4781  0DD2                     l8789:	
  4782                           ;Switch_B1.c: 248: } else if (sw == 2) {
  4783                           
  4784  0DD2  0867               	movf	Sw_DimmerOnFunc@sw,w
  4785  0DD3  3A02               	xorlw	2
  4786  0DD4  1D03               	skipz
  4787  0DD5  2DE3               	goto	l8801
  4788                           
  4789                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4790  0DD6  01E4               	clrf	_Sw_DimmerOnFunc$5206
  4791  0DD7  0022               	movlb	2	; select bank2
  4792  0DD8  19B0               	btfsc	(_DimmerLights1^(0+256)+8),3
  4793  0DD9  2DE0               	goto	l8799
  4794  0DDA  0023               	movlb	3	; select bank3
  4795  0DDB  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  4796  0DDC  2DE0               	goto	l8799
  4797  0DDD  0020               	movlb	0	; select bank0
  4798  0DDE  01E4               	clrf	_Sw_DimmerOnFunc$5206
  4799  0DDF  0AE4               	incf	_Sw_DimmerOnFunc$5206,f
  4800  0DE0                     l8799:	
  4801  0DE0  0020               	movlb	0	; select bank0
  4802  0DE1  0864               	movf	_Sw_DimmerOnFunc$5206,w
  4803  0DE2  2DF1               	goto	L2
  4804  0DE3                     l8801:	
  4805                           ;Switch_B1.c: 250: } else if (sw == 3) {
  4806                           
  4807  0DE3  0867               	movf	Sw_DimmerOnFunc@sw,w
  4808  0DE4  3A03               	xorlw	3
  4809  0DE5  1D03               	skipz
  4810  0DE6  2DF4               	goto	l2663
  4811                           
  4812                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  4813  0DE7  01E5               	clrf	_Sw_DimmerOnFunc$5207
  4814  0DE8  0022               	movlb	2	; select bank2
  4815  0DE9  1DB0               	btfss	(_DimmerLights1^(0+256)+8),3
  4816  0DEA  19BF               	btfsc	(_DimmerLights2^(0+256)+8),3
  4817  0DEB  2DEF               	goto	l8811
  4818  0DEC  0020               	movlb	0	; select bank0
  4819  0DED  01E5               	clrf	_Sw_DimmerOnFunc$5207
  4820  0DEE  0AE5               	incf	_Sw_DimmerOnFunc$5207,f
  4821  0DEF                     l8811:	
  4822  0DEF  0020               	movlb	0	; select bank0
  4823  0DF0  0865               	movf	_Sw_DimmerOnFunc$5207,w
  4824  0DF1                     L2:	
  4825  0DF1  00E2               	movwf	??_Sw_DimmerOnFunc
  4826  0DF2  0862               	movf	??_Sw_DimmerOnFunc,w
  4827  0DF3  00E6               	movwf	Sw_DimmerOnFunc@Idle
  4828  0DF4                     l2663:	
  4829                           
  4830                           ;Switch_B1.c: 252: }
  4831                           ;Switch_B1.c: 263: if (Idle == 1) {
  4832  0DF4  0866               	movf	Sw_DimmerOnFunc@Idle,w
  4833  0DF5  3A01               	xorlw	1
  4834  0DF6  1D03               	skipz
  4835  0DF7  0008               	return
  4836                           
  4837                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4838  0DF8  086C               	movf	_Sw,w
  4839  0DF9  0086               	movwf	6
  4840  0DFA  3001               	movlw	1	; select bank2/3
  4841  0DFB  0087               	movwf	7
  4842  0DFC  1781               	bsf	1,7
  4843                           
  4844                           ;Switch_B1.c: 265: setBuz(1, 100);
  4845  0DFD  3064               	movlw	100
  4846  0DFE  00A9               	movwf	setBuz@time
  4847  0DFF  3000               	movlw	0
  4848  0E00  00AA               	movwf	setBuz@time+1
  4849  0E01  3001               	movlw	1
  4850  0E02  3197  27A7  318D   	fcall	_setBuz
  4851                           
  4852                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  4853  0E05  0020               	movlb	0	; select bank0
  4854  0E06  086C               	movf	_Sw,w
  4855  0E07  0086               	movwf	6
  4856  0E08  3001               	movlw	1	; select bank2/3
  4857  0E09  0087               	movwf	7
  4858  0E0A  1B01               	btfsc	1,6
  4859  0E0B  2E35               	goto	l8831
  4860                           
  4861                           ;Switch_B1.c: 267: Sw->Status = 1;
  4862  0E0C  086C               	movf	_Sw,w
  4863  0E0D  0086               	movwf	6
  4864  0E0E  3001               	movlw	1	; select bank2/3
  4865  0E0F  0087               	movwf	7
  4866  0E10  1701               	bsf	1,6
  4867                           
  4868                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  4869  0E11  01A2               	clrf	setRFSW_Status@command
  4870  0E12  0AA2               	incf	setRFSW_Status@command,f
  4871  0E13  0867               	movf	Sw_DimmerOnFunc@sw,w
  4872  0E14  319F  2756  318D   	fcall	_setRFSW_Status
  4873                           
  4874                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  4875  0E17  0020               	movlb	0	; select bank0
  4876  0E18  01A2               	clrf	setDimmerLights_Trigger@command
  4877  0E19  0AA2               	incf	setDimmerLights_Trigger@command,f
  4878  0E1A  0867               	movf	Sw_DimmerOnFunc@sw,w
  4879  0E1B  319F  27C0  318D   	fcall	_setDimmerLights_Trigger
  4880                           
  4881                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  4882  0E1E  0020               	movlb	0	; select bank0
  4883  0E1F  01A2               	clrf	setDimmerLights_Switch@command
  4884  0E20  0AA2               	incf	setDimmerLights_Switch@command,f
  4885  0E21  0867               	movf	Sw_DimmerOnFunc@sw,w
  4886  0E22  319F  27B0  318D   	fcall	_setDimmerLights_Switch
  4887                           
  4888                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  4889  0E25  0020               	movlb	0	; select bank0
  4890  0E26  086C               	movf	_Sw,w
  4891  0E27  0086               	movwf	6
  4892  0E28  3001               	movlw	1	; select bank2/3
  4893  0E29  0087               	movwf	7
  4894  0E2A  3000               	movlw	0
  4895  0E2B  1B01               	btfsc	1,6
  4896  0E2C  3001               	movlw	1
  4897  0E2D  00DD               	movwf	setRF_DimmerLights@on
  4898  0E2E  0867               	movf	Sw_DimmerOnFunc@sw,w
  4899  0E2F  318A  2276  318D   	fcall	_setRF_DimmerLights
  4900                           
  4901                           ;Switch_B1.c: 274: setTxData();
  4902  0E32  3185  251C         	fcall	_setTxData
  4903                           
  4904                           ;Switch_B1.c: 276: } else {
  4905  0E34  0008               	return
  4906  0E35                     l8831:	
  4907                           
  4908                           ;Switch_B1.c: 277: Sw->Status = 0;
  4909  0E35  0020               	movlb	0	; select bank0
  4910  0E36  086C               	movf	_Sw,w
  4911  0E37  0086               	movwf	6
  4912  0E38  3001               	movlw	1	; select bank2/3
  4913  0E39  0087               	movwf	7
  4914  0E3A  1301               	bcf	1,6
  4915                           
  4916                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  4917  0E3B  086C               	movf	_Sw,w
  4918  0E3C  0086               	movwf	6
  4919  0E3D  3001               	movlw	1	; select bank2/3
  4920  0E3E  0087               	movwf	7
  4921  0E3F  3000               	movlw	0
  4922  0E40  1B01               	btfsc	1,6
  4923  0E41  3001               	movlw	1
  4924  0E42  00A2               	movwf	setRFSW_Status@command
  4925  0E43  0867               	movf	Sw_DimmerOnFunc@sw,w
  4926  0E44  319F  2756         	fcall	_setRFSW_Status
  4927  0E46  0008               	return
  4928  0E47                     __end_of_Sw_DimmerOnFunc:	
  4929                           
  4930                           	psect	text9
  4931  0AE2                     __ptext9:	
  4932 ;; *************** function _Sw_DimmerOffFunc *****************
  4933 ;; Defined at:
  4934 ;;		line 284 in file "../src/Switch_B1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;  sw              1    wreg     unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  sw              1   68[BANK0 ] unsigned char 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        3 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    9
  4955 ;; This function calls:
  4956 ;;		_setDelayOff_GO
  4957 ;;		_setDimmerLights_AdjGo
  4958 ;;		_setDimmerLights_Switch
  4959 ;;		_setDimmerLights_Trigger
  4960 ;;		_setDimmerLights_TriggerAdj
  4961 ;;		_setRF_DimmerLights
  4962 ;;		_setTxData
  4963 ;; This function is called by:
  4964 ;;		_setSw_Main
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function _Sw_DimmerOffFunc
  4970  0AE2                     _Sw_DimmerOffFunc:	
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4974                           ;Sw_DimmerOffFunc@sw stored from wreg
  4975  0AE2  0020               	movlb	0	; select bank0
  4976  0AE3  00E4               	movwf	Sw_DimmerOffFunc@sw
  4977                           
  4978                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  4979  0AE4  086C               	movf	_Sw,w
  4980  0AE5  0086               	movwf	6
  4981  0AE6  3001               	movlw	1	; select bank2/3
  4982  0AE7  0087               	movwf	7
  4983  0AE8  1F81               	btfss	1,7
  4984  0AE9  0008               	return
  4985                           
  4986                           ;Switch_B1.c: 286: Sw->Flag = 0;
  4987  0AEA  086C               	movf	_Sw,w
  4988  0AEB  0086               	movwf	6
  4989  0AEC  3001               	movlw	1	; select bank2/3
  4990  0AED  0087               	movwf	7
  4991  0AEE  1381               	bcf	1,7
  4992                           
  4993                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  4994  0AEF  086C               	movf	_Sw,w
  4995  0AF0  0086               	movwf	6
  4996  0AF1  3001               	movlw	1	; select bank2/3
  4997  0AF2  0087               	movwf	7
  4998  0AF3  1F01               	btfss	1,6
  4999  0AF4  2B2D               	goto	l8901
  5000                           
  5001                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5002  0AF5  0A6C               	incf	_Sw,w
  5003  0AF6  0086               	movwf	6
  5004  0AF7  3001               	movlw	1	; select bank2/3
  5005  0AF8  0087               	movwf	7
  5006  0AF9  1C01               	btfss	1,0
  5007  0AFA  0008               	return
  5008                           
  5009                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5010  0AFB  0A6C               	incf	_Sw,w
  5011  0AFC  0086               	movwf	6
  5012  0AFD  3001               	movlw	1	; select bank2/3
  5013  0AFE  0087               	movwf	7
  5014  0AFF  1001               	bcf	1,0
  5015                           
  5016                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5017  0B00  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5018  0B01  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5019  0B02  0864               	movf	Sw_DimmerOffFunc@sw,w
  5020  0B03  3190  206B  318A   	fcall	_setDimmerLights_TriggerAdj
  5021                           
  5022                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5023  0B06  0020               	movlb	0	; select bank0
  5024  0B07  01A2               	clrf	setDimmerLights_AdjGo@command
  5025  0B08  0864               	movf	Sw_DimmerOffFunc@sw,w
  5026  0B09  319F  27F0  318A   	fcall	_setDimmerLights_AdjGo
  5027                           
  5028                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5029  0B0C  0020               	movlb	0	; select bank0
  5030  0B0D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5031  0B0E  3E1A               	addlw	26
  5032  0B0F  076D               	addwf	_product,w
  5033  0B10  00E2               	movwf	??_Sw_DimmerOffFunc
  5034  0B11  0862               	movf	??_Sw_DimmerOffFunc,w
  5035  0B12  0086               	movwf	6
  5036  0B13  3002               	movlw	2	; select bank4/5
  5037  0B14  0087               	movwf	7
  5038  0B15  0801               	movf	1,w
  5039  0B16  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5040  0B17  086D               	movf	_product,w
  5041  0B18  3E11               	addlw	17
  5042  0B19  0086               	movwf	6
  5043  0B1A  3002               	movlw	2	; select bank4/5
  5044  0B1B  0087               	movwf	7
  5045  0B1C  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5046  0B1D  0081               	movwf	1
  5047                           
  5048                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5049  0B1E  086C               	movf	_Sw,w
  5050  0B1F  0086               	movwf	6
  5051  0B20  3001               	movlw	1	; select bank2/3
  5052  0B21  0087               	movwf	7
  5053  0B22  3000               	movlw	0
  5054  0B23  1B01               	btfsc	1,6
  5055  0B24  3001               	movlw	1
  5056  0B25  00DD               	movwf	setRF_DimmerLights@on
  5057  0B26  0864               	movf	Sw_DimmerOffFunc@sw,w
  5058  0B27  318A  2276  318A   	fcall	_setRF_DimmerLights
  5059                           
  5060                           ;Switch_B1.c: 295: setTxData();
  5061  0B2A  3185  251C         	fcall	_setTxData
  5062                           
  5063                           ;Switch_B1.c: 297: }
  5064                           ;Switch_B1.c: 298: } else {
  5065  0B2C  0008               	return
  5066  0B2D                     l8901:	
  5067                           
  5068                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5069  0B2D  0020               	movlb	0	; select bank0
  5070  0B2E  01A2               	clrf	setDimmerLights_Trigger@command
  5071  0B2F  0AA2               	incf	setDimmerLights_Trigger@command,f
  5072  0B30  0864               	movf	Sw_DimmerOffFunc@sw,w
  5073  0B31  319F  27C0  318A   	fcall	_setDimmerLights_Trigger
  5074                           
  5075                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5076  0B34  0020               	movlb	0	; select bank0
  5077  0B35  01A2               	clrf	setDimmerLights_Switch@command
  5078  0B36  0864               	movf	Sw_DimmerOffFunc@sw,w
  5079  0B37  319F  27B0  318A   	fcall	_setDimmerLights_Switch
  5080                           
  5081                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5082  0B3A  0020               	movlb	0	; select bank0
  5083  0B3B  01AA               	clrf	setDelayOff_GO@command
  5084  0B3C  01AB               	clrf	setDelayOff_GO@value
  5085  0B3D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5086  0B3E  318A  2210  318A   	fcall	_setDelayOff_GO
  5087                           
  5088                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5089  0B41  0020               	movlb	0	; select bank0
  5090  0B42  086C               	movf	_Sw,w
  5091  0B43  0086               	movwf	6
  5092  0B44  3001               	movlw	1	; select bank2/3
  5093  0B45  0087               	movwf	7
  5094  0B46  3000               	movlw	0
  5095  0B47  1B01               	btfsc	1,6
  5096  0B48  3001               	movlw	1
  5097  0B49  00DD               	movwf	setRF_DimmerLights@on
  5098  0B4A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5099  0B4B  318A  2276  318A   	fcall	_setRF_DimmerLights
  5100                           
  5101                           ;Switch_B1.c: 304: setTxData();
  5102  0B4E  3185  251C         	fcall	_setTxData
  5103  0B50  0008               	return
  5104  0B51                     __end_of_Sw_DimmerOffFunc:	
  5105                           
  5106                           	psect	text10
  5107  09AC                     __ptext10:	
  5108 ;; *************** function _Sw_DimmerAdjFunc *****************
  5109 ;; Defined at:
  5110 ;;		line 311 in file "../src/Switch_B1.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;  sw              1    wreg     unsigned char 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  sw              1    9[BANK0 ] unsigned char 
  5115 ;;  Idle            1    8[BANK0 ] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;		None               void
  5118 ;; Registers used:
  5119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;Total ram usage:        6 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    7
  5132 ;; This function calls:
  5133 ;;		_setDimmerLights_AdjGo
  5134 ;;		_setDimmerLights_TriggerAdj
  5135 ;;		_setRFSW_Status
  5136 ;; This function is called by:
  5137 ;;		_setSw_Main
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           
  5142                           ;psect for function _Sw_DimmerAdjFunc
  5143  09AC                     _Sw_DimmerAdjFunc:	
  5144                           
  5145                           ;incstack = 0
  5146                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5147                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5148  09AC  0020               	movlb	0	; select bank0
  5149  09AD  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5150                           
  5151                           ;Switch_B1.c: 312: char Idle = 1;
  5152  09AE  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5153  09AF  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5154                           
  5155                           ;Switch_B1.c: 315: if (sw == 1) {
  5156  09B0  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5157  09B1  3A01               	xorlw	1
  5158  09B2  1D03               	skipz
  5159  09B3  29C1               	goto	l8849
  5160                           
  5161                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5162  09B4  01A5               	clrf	_Sw_DimmerAdjFunc$5215
  5163  09B5  0022               	movlb	2	; select bank2
  5164  09B6  19BF               	btfsc	(_DimmerLights2^(0+256)+8),3
  5165  09B7  29BE               	goto	l8847
  5166  09B8  0023               	movlb	3	; select bank3
  5167  09B9  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  5168  09BA  29BE               	goto	l8847
  5169  09BB  0020               	movlb	0	; select bank0
  5170  09BC  01A5               	clrf	_Sw_DimmerAdjFunc$5215
  5171  09BD  0AA5               	incf	_Sw_DimmerAdjFunc$5215,f
  5172  09BE                     l8847:	
  5173  09BE  0020               	movlb	0	; select bank0
  5174  09BF  0825               	movf	_Sw_DimmerAdjFunc$5215,w
  5175  09C0  29E0               	goto	L4
  5176  09C1                     l8849:	
  5177                           ;Switch_B1.c: 317: } else if (sw == 2) {
  5178                           
  5179  09C1  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5180  09C2  3A02               	xorlw	2
  5181  09C3  1D03               	skipz
  5182  09C4  29D2               	goto	l8861
  5183                           
  5184                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5185  09C5  01A6               	clrf	_Sw_DimmerAdjFunc$5216
  5186  09C6  0022               	movlb	2	; select bank2
  5187  09C7  19B0               	btfsc	(_DimmerLights1^(0+256)+8),3
  5188  09C8  29CF               	goto	l8859
  5189  09C9  0023               	movlb	3	; select bank3
  5190  09CA  19CD               	btfsc	(_DimmerLights3^(0+384)+8),3
  5191  09CB  29CF               	goto	l8859
  5192  09CC  0020               	movlb	0	; select bank0
  5193  09CD  01A6               	clrf	_Sw_DimmerAdjFunc$5216
  5194  09CE  0AA6               	incf	_Sw_DimmerAdjFunc$5216,f
  5195  09CF                     l8859:	
  5196  09CF  0020               	movlb	0	; select bank0
  5197  09D0  0826               	movf	_Sw_DimmerAdjFunc$5216,w
  5198  09D1  29E0               	goto	L4
  5199  09D2                     l8861:	
  5200                           ;Switch_B1.c: 319: } else if (sw == 3) {
  5201                           
  5202  09D2  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5203  09D3  3A03               	xorlw	3
  5204  09D4  1D03               	skipz
  5205  09D5  29E3               	goto	l2687
  5206                           
  5207                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5208  09D6  01A7               	clrf	_Sw_DimmerAdjFunc$5217
  5209  09D7  0022               	movlb	2	; select bank2
  5210  09D8  1DB0               	btfss	(_DimmerLights1^(0+256)+8),3
  5211  09D9  19BF               	btfsc	(_DimmerLights2^(0+256)+8),3
  5212  09DA  29DE               	goto	l8871
  5213  09DB  0020               	movlb	0	; select bank0
  5214  09DC  01A7               	clrf	_Sw_DimmerAdjFunc$5217
  5215  09DD  0AA7               	incf	_Sw_DimmerAdjFunc$5217,f
  5216  09DE                     l8871:	
  5217  09DE  0020               	movlb	0	; select bank0
  5218  09DF  0827               	movf	_Sw_DimmerAdjFunc$5217,w
  5219  09E0                     L4:	
  5220  09E0  00A4               	movwf	??_Sw_DimmerAdjFunc
  5221  09E1  0824               	movf	??_Sw_DimmerAdjFunc,w
  5222  09E2  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5223  09E3                     l2687:	
  5224                           
  5225                           ;Switch_B1.c: 321: }
  5226                           ;Switch_B1.c: 332: if (Idle == 1) {
  5227  09E3  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5228  09E4  3A01               	xorlw	1
  5229  09E5  1D03               	skipz
  5230  09E6  0008               	return
  5231                           
  5232                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5233  09E7  086C               	movf	_Sw,w
  5234  09E8  0086               	movwf	6
  5235  09E9  3001               	movlw	1	; select bank2/3
  5236  09EA  0087               	movwf	7
  5237  09EB  1F81               	btfss	1,7
  5238  09EC  0008               	return
  5239                           
  5240                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5241  09ED  086C               	movf	_Sw,w
  5242  09EE  0086               	movwf	6
  5243  09EF  3001               	movlw	1	; select bank2/3
  5244  09F0  0087               	movwf	7
  5245  09F1  1581               	bsf	1,3
  5246                           
  5247                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5248  09F2  0A6C               	incf	_Sw,w
  5249  09F3  0086               	movwf	6
  5250  09F4  3001               	movlw	1	; select bank2/3
  5251  09F5  0087               	movwf	7
  5252  09F6  1401               	bsf	1,0
  5253                           
  5254                           ;Switch_B1.c: 336: Sw->Status = 1;
  5255  09F7  086C               	movf	_Sw,w
  5256  09F8  0086               	movwf	6
  5257  09F9  3001               	movlw	1	; select bank2/3
  5258  09FA  0087               	movwf	7
  5259  09FB  1701               	bsf	1,6
  5260                           
  5261                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5262  09FC  01A2               	clrf	setRFSW_Status@command
  5263  09FD  0AA2               	incf	setRFSW_Status@command,f
  5264  09FE  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5265  09FF  319F  2756  3189   	fcall	_setRFSW_Status
  5266                           
  5267                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5268  0A02  0020               	movlb	0	; select bank0
  5269  0A03  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5270  0A04  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5271  0A05  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5272  0A06  3190  206B  3189   	fcall	_setDimmerLights_TriggerAdj
  5273                           
  5274                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5275  0A09  0020               	movlb	0	; select bank0
  5276  0A0A  01A2               	clrf	setDimmerLights_AdjGo@command
  5277  0A0B  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5278  0A0C  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5279  0A0D  319F  27F0         	fcall	_setDimmerLights_AdjGo
  5280  0A0F  0008               	return
  5281  0A10                     __end_of_Sw_DimmerAdjFunc:	
  5282                           
  5283                           	psect	text11
  5284  106B                     __ptext11:	
  5285 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5286 ;; Defined at:
  5287 ;;		line 722 in file "../src/Dimmer_B1.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  lights          1    wreg     unsigned char 
  5290 ;;  command         1    2[BANK0 ] unsigned char 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  lights          1    3[BANK0 ] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;		None               void
  5295 ;; Registers used:
  5296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5302 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;Total ram usage:        2 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    6
  5309 ;; This function calls:
  5310 ;;		_DimmerLightsPointSelect
  5311 ;; This function is called by:
  5312 ;;		_Sw_DimmerOffFunc
  5313 ;;		_Sw_DimmerAdjFunc
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _setDimmerLights_TriggerAdj
  5319  106B                     _setDimmerLights_TriggerAdj:	
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5323                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5324  106B  0020               	movlb	0	; select bank0
  5325  106C  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5326                           
  5327                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  5328  106D  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5329  106E  3191  21CA         	fcall	_DimmerLightsPointSelect
  5330                           
  5331                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  5332  1070  0020               	movlb	0	; select bank0
  5333  1071  086B               	movf	_DimmerLights,w
  5334  1072  3E08               	addlw	8
  5335  1073  0086               	movwf	6
  5336  1074  3001               	movlw	1	; select bank2/3
  5337  1075  0087               	movwf	7
  5338  1076  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5339  1077  1201               	bcf	1,4
  5340  1078  1D03               	skipz
  5341  1079  1601               	bsf	1,4
  5342  107A  0008               	return
  5343  107B                     __end_of_setDimmerLights_TriggerAdj:	
  5344                           
  5345                           	psect	text12
  5346  1FF0                     __ptext12:	
  5347 ;; *************** function _setDimmerLights_AdjGo *****************
  5348 ;; Defined at:
  5349 ;;		line 710 in file "../src/Dimmer_B1.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  lights          1    wreg     unsigned char 
  5352 ;;  command         1    2[BANK0 ] unsigned char 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  lights          1    3[BANK0 ] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5364 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;Total ram usage:        2 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    6
  5371 ;; This function calls:
  5372 ;;		_DimmerLightsPointSelect
  5373 ;; This function is called by:
  5374 ;;		_Sw_DimmerOffFunc
  5375 ;;		_Sw_DimmerAdjFunc
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _setDimmerLights_AdjGo
  5381  1FF0                     _setDimmerLights_AdjGo:	
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5385                           ;setDimmerLights_AdjGo@lights stored from wreg
  5386  1FF0  0020               	movlb	0	; select bank0
  5387  1FF1  00A3               	movwf	setDimmerLights_AdjGo@lights
  5388                           
  5389                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  5390  1FF2  0823               	movf	setDimmerLights_AdjGo@lights,w
  5391  1FF3  3191  21CA         	fcall	_DimmerLightsPointSelect
  5392                           
  5393                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  5394  1FF5  0020               	movlb	0	; select bank0
  5395  1FF6  086B               	movf	_DimmerLights,w
  5396  1FF7  3E08               	addlw	8
  5397  1FF8  0086               	movwf	6
  5398  1FF9  3001               	movlw	1	; select bank2/3
  5399  1FFA  0087               	movwf	7
  5400  1FFB  0822               	movf	setDimmerLights_AdjGo@command,w
  5401  1FFC  1181               	bcf	1,3
  5402  1FFD  1D03               	skipz
  5403  1FFE  1581               	bsf	1,3
  5404  1FFF  0008               	return
  5405  2000                     __end_of_setDimmerLights_AdjGo:	
  5406                           
  5407                           	psect	text13
  5408  109D                     __ptext13:	
  5409 ;; *************** function _Switch_Initialization *****************
  5410 ;; Defined at:
  5411 ;;		line 41 in file "../src/Switch_B1.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;		None               void
  5418 ;; Registers used:
  5419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;Total ram usage:        0 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    8
  5432 ;; This function calls:
  5433 ;;		_TouchPower
  5434 ;;		_setSw_Initialization
  5435 ;; This function is called by:
  5436 ;;		_main
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _Switch_Initialization
  5442  109D                     _Switch_Initialization:	
  5443                           
  5444                           ;Switch_B1.c: 42: TouchPower();
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5448  109D  319F  2792  3190   	fcall	_TouchPower
  5449                           
  5450                           ;Switch_B1.c: 44: WPUB1 = 0;
  5451  10A0  0024               	movlb	4	; select bank4
  5452  10A1  108D               	bcf	13,1	;volatile
  5453                           
  5454                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5455  10A2  3001               	movlw	1
  5456  10A3  319E  26B5  3190   	fcall	_setSw_Initialization
  5457                           
  5458                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5459  10A6  3002               	movlw	2
  5460  10A7  319E  26B5  3190   	fcall	_setSw_Initialization
  5461                           
  5462                           ;Switch_B1.c: 61: setSw_Initialization(3);
  5463  10AA  3003               	movlw	3
  5464  10AB  319E  26B5         	fcall	_setSw_Initialization
  5465  10AD  0008               	return
  5466  10AE                     __end_of_Switch_Initialization:	
  5467                           
  5468                           	psect	text14
  5469  1EB5                     __ptext14:	
  5470 ;; *************** function _setSw_Initialization *****************
  5471 ;; Defined at:
  5472 ;;		line 83 in file "../src/Switch_B1.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  sw              1    wreg     unsigned char 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  sw              1    4[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;Total ram usage:        1 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    7
  5493 ;; This function calls:
  5494 ;;		_setLED
  5495 ;; This function is called by:
  5496 ;;		_Switch_Initialization
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _setSw_Initialization
  5502  1EB5                     _setSw_Initialization:	
  5503                           
  5504                           ;incstack = 0
  5505                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5506                           ;setSw_Initialization@sw stored from wreg
  5507  1EB5  0020               	movlb	0	; select bank0
  5508  1EB6  00A4               	movwf	setSw_Initialization@sw
  5509                           
  5510                           ;Switch_B1.c: 84: setLED(sw, 1);
  5511  1EB7  01A2               	clrf	setLED@command
  5512  1EB8  0AA2               	incf	setLED@command,f
  5513  1EB9  0824               	movf	setSw_Initialization@sw,w
  5514  1EBA  318B  2351         	fcall	_setLED
  5515  1EBC  0008               	return
  5516  1EBD                     __end_of_setSw_Initialization:	
  5517                           
  5518                           	psect	text15
  5519  1F92                     __ptext15:	
  5520 ;; *************** function _TouchPower *****************
  5521 ;; Defined at:
  5522 ;;		line 10 in file "../src/Switch_B1.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;		None
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;		None               void
  5529 ;; Registers used:
  5530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;Total ram usage:        0 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    6
  5543 ;; This function calls:
  5544 ;;		_Timeout_Counter
  5545 ;;		_set_TimeoutCleared
  5546 ;; This function is called by:
  5547 ;;		_Switch_Initialization
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           
  5552                           ;psect for function _TouchPower
  5553  1F92                     _TouchPower:	
  5554                           
  5555                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5559  1F92  2F98               	goto	l9331
  5560  1F93                     l2605:	
  5561                           
  5562                           ;Switch_B1.c: 12: RC5 = 1;
  5563  1F93  0020               	movlb	0	; select bank0
  5564  1F94  168E               	bsf	14,5	;volatile
  5565                           
  5566                           ;Switch_B1.c: 13: Timeout_Counter();
  5567  1F95  3191  210E  319F   	fcall	_Timeout_Counter
  5568  1F98                     l9331:	
  5569  1F98  0020               	movlb	0	; select bank0
  5570  1F99  1A8E               	btfsc	14,5	;volatile
  5571  1F9A  2F9E               	goto	l9335
  5572  1F9B  0021               	movlb	1	; select bank1
  5573  1F9C  1D44               	btfss	(_myMain^(0+128)+15),2
  5574  1F9D  2F93               	goto	l2605
  5575  1F9E                     l9335:	
  5576                           
  5577                           ;Switch_B1.c: 14: }
  5578                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5579  1F9E  3190  2066         	fcall	_set_TimeoutCleared
  5580  1FA0  0008               	return
  5581  1FA1                     __end_of_TouchPower:	
  5582                           
  5583                           	psect	text16
  5584  1E81                     __ptext16:	
  5585 ;; *************** function _RF_Main *****************
  5586 ;; Defined at:
  5587 ;;		line 16 in file "../src/RF_Control_B1.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;		None               void
  5594 ;; Registers used:
  5595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;Total ram usage:        0 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:   14
  5608 ;; This function calls:
  5609 ;;		_setRF_Main
  5610 ;; This function is called by:
  5611 ;;		_main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _RF_Main
  5617  1E81                     _RF_Main:	
  5618                           
  5619                           ;RF_Control_B1.c: 18: setRF_Main();
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5623  1E81  318F  2764         	fcall	_setRF_Main
  5624  1E83  0008               	return
  5625  1E84                     __end_of_RF_Main:	
  5626                           
  5627                           	psect	text17
  5628  0F64                     __ptext17:	
  5629 ;; *************** function _setRF_Main *****************
  5630 ;; Defined at:
  5631 ;;		line 52 in file "../src/RF_Control_B1.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  Receive_OK      1    0        unsigned char 
  5636 ;;  loop_f          1    0        unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;		None               void
  5639 ;; Registers used:
  5640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:   13
  5653 ;; This function calls:
  5654 ;;		_CC2500_RxData
  5655 ;;		_CC2500_TxData
  5656 ;;		_CC2500_WriteCommand
  5657 ;;		_RF_RxDisable
  5658 ;;		_getBuz_GO
  5659 ;;		_getRxData
  5660 ;; This function is called by:
  5661 ;;		_RF_Main
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           
  5666                           ;psect for function _setRF_Main
  5667  0F64                     _setRF_Main:	
  5668                           
  5669                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5670                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5674  0F64  0021               	movlb	1	; select bank1
  5675  0F65  1C53               	btfss	_RF1^(0+128),0
  5676  0F66  0008               	return
  5677                           
  5678                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  5679  0F67  3190  208C  318F   	fcall	_getBuz_GO
  5680  0F6A  0020               	movlb	0	; select bank0
  5681  0F6B  0821               	movf	?_getBuz_GO+1,w
  5682  0F6C  0420               	iorwf	?_getBuz_GO,w
  5683  0F6D  1D03               	skipz
  5684  0F6E  0008               	return
  5685                           
  5686                           ;RF_Control_B1.c: 59: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5687  0F6F  01E8               	clrf	_setRF_Main$4370
  5688  0F70  0AE8               	incf	_setRF_Main$4370,f
  5689  0F71  1C0C               	btfss	12,0	;volatile
  5690  0F72  1B0C               	btfsc	12,6	;volatile
  5691  0F73  2F76               	goto	l9229
  5692  0F74  1E0C               	btfss	12,4	;volatile
  5693  0F75  01E8               	clrf	_setRF_Main$4370
  5694  0F76                     l9229:	
  5695  0F76  0868               	movf	_setRF_Main$4370,w
  5696  0F77  0021               	movlb	1	; select bank1
  5697  0F78  13D3               	bcf	_RF1^(0+128),7
  5698  0F79  1D03               	skipz
  5699  0F7A  17D3               	bsf	_RF1^(0+128),7
  5700                           
  5701                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  5702  0F7B  1BD3               	btfsc	_RF1^(0+128),7
  5703  0F7C  1B53               	btfsc	_RF1^(0+128),6
  5704  0F7D  2F83               	goto	l2162
  5705                           
  5706                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  5707  0F7E  01D6               	clrf	(_RF1^(0+128)+3)
  5708                           
  5709                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  5710  0F7F  14D4               	bsf	(_RF1^(0+128)+1),1
  5711                           
  5712                           ;RF_Control_B1.c: 72: RF_RxDisable();
  5713  0F80  3190  20D3         	fcall	_RF_RxDisable
  5714                           
  5715                           ;RF_Control_B1.c: 73: } else {
  5716  0F82  0008               	return
  5717  0F83                     l2162:	
  5718                           
  5719                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  5720  0F83  18D4               	btfsc	(_RF1^(0+128)+1),1
  5721  0F84  1B53               	btfsc	_RF1^(0+128),6
  5722  0F85  2F93               	goto	l9251
  5723                           
  5724                           ;RF_Control_B1.c: 75: RF1.Count++;
  5725  0F86  3001               	movlw	1
  5726  0F87  0020               	movlb	0	; select bank0
  5727  0F88  00E7               	movwf	??_setRF_Main
  5728  0F89  0867               	movf	??_setRF_Main,w
  5729  0F8A  0021               	movlb	1	; select bank1
  5730  0F8B  07D6               	addwf	(_RF1^(0+128)+3),f
  5731                           
  5732                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  5733  0F8C  0856               	movf	(_RF1^(0+128)+3),w
  5734  0F8D  0659               	xorwf	(_RF1^(0+128)+6),w
  5735  0F8E  1D03               	skipz
  5736  0F8F  2FDE               	goto	l9307
  5737                           
  5738                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  5739  0F90  01D6               	clrf	(_RF1^(0+128)+3)
  5740                           
  5741                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  5742  0F91  10D4               	bcf	(_RF1^(0+128)+1),1
  5743                           
  5744                           ;RF_Control_B1.c: 79: }
  5745                           ;RF_Control_B1.c: 80: } else {
  5746  0F92  2FDE               	goto	l9307
  5747  0F93                     l9251:	
  5748                           
  5749                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  5750  0F93  01D6               	clrf	(_RF1^(0+128)+3)
  5751                           
  5752                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  5753  0F94  10D4               	bcf	(_RF1^(0+128)+1),1
  5754                           
  5755                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5756  0F95  1953               	btfsc	_RF1^(0+128),2
  5757  0F96  1B53               	btfsc	_RF1^(0+128),6
  5758  0F97  2F9F               	goto	l2167
  5759                           
  5760                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  5761  0F98  1153               	bcf	_RF1^(0+128),2
  5762                           
  5763                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  5764  0F99  11D3               	bcf	_RF1^(0+128),3
  5765                           
  5766                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  5767  0F9A  10D3               	bcf	_RF1^(0+128),1
  5768                           
  5769                           ;RF_Control_B1.c: 92: CC2500_TxData();
  5770  0F9B  3189  2148  318F   	fcall	_CC2500_TxData
  5771                           
  5772                           ;RF_Control_B1.c: 94: } else {
  5773  0F9E  2FDE               	goto	l9307
  5774  0F9F                     l2167:	
  5775                           
  5776                           ;RF_Control_B1.c: 96: if (RF1.RxStatus == 1) {
  5777  0F9F  1DD3               	btfss	_RF1^(0+128),3
  5778  0FA0  2FD6               	goto	l2169
  5779                           
  5780                           ;RF_Control_B1.c: 97: CC2500_RxData();
  5781  0FA1  318C  243B  318F   	fcall	_CC2500_RxData
  5782                           
  5783                           ;RF_Control_B1.c: 98: if (RF1.ReceiveGO == 1) {
  5784  0FA4  0021               	movlb	1	; select bank1
  5785  0FA5  1CD3               	btfss	_RF1^(0+128),1
  5786  0FA6  2FDE               	goto	l9307
  5787                           
  5788                           ;RF_Control_B1.c: 99: RF1.ReceiveGO = 0;
  5789  0FA7  10D3               	bcf	_RF1^(0+128),1
  5790                           
  5791                           ;RF_Control_B1.c: 106: getRxData();
  5792  0FA8  3188  2088  318F   	fcall	_getRxData
  5793                           
  5794                           ;RF_Control_B1.c: 108: RF1.Run = 1;
  5795  0FAB  0021               	movlb	1	; select bank1
  5796  0FAC  14D4               	bsf	(_RF1^(0+128)+1),1
  5797                           
  5798                           ;RF_Control_B1.c: 109: if (RF1.Checked == 1) {
  5799  0FAD  1DD4               	btfss	(_RF1^(0+128)+1),3
  5800  0FAE  2FB7               	goto	l9281
  5801                           
  5802                           ;RF_Control_B1.c: 110: if (RF1.RunTime > 20) {
  5803  0FAF  3015               	movlw	21
  5804  0FB0  0259               	subwf	(_RF1^(0+128)+6),w
  5805  0FB1  1C03               	skipc
  5806  0FB2  2FB5               	goto	l9279
  5807                           
  5808                           ;RF_Control_B1.c: 111: RF1.RunTime -= 10;
  5809  0FB3  300A               	movlw	10
  5810  0FB4  02D9               	subwf	(_RF1^(0+128)+6),f
  5811  0FB5                     l9279:	
  5812                           
  5813                           ;RF_Control_B1.c: 112: }
  5814                           ;RF_Control_B1.c: 113: RF1.CheckCount = 0;
  5815  0FB5  01D7               	clrf	(_RF1^(0+128)+4)
  5816                           
  5817                           ;RF_Control_B1.c: 114: } else {
  5818  0FB6  2FD2               	goto	l9299
  5819  0FB7                     l9281:	
  5820                           
  5821                           ;RF_Control_B1.c: 115: RF1.CheckCount++;
  5822  0FB7  3001               	movlw	1
  5823  0FB8  0020               	movlb	0	; select bank0
  5824  0FB9  00E7               	movwf	??_setRF_Main
  5825  0FBA  0867               	movf	??_setRF_Main,w
  5826  0FBB  0021               	movlb	1	; select bank1
  5827  0FBC  07D7               	addwf	(_RF1^(0+128)+4),f
  5828                           
  5829                           ;RF_Control_B1.c: 116: if (RF1.CheckCount == 2) {
  5830  0FBD  0857               	movf	(_RF1^(0+128)+4),w
  5831  0FBE  3A02               	xorlw	2
  5832  0FBF  1D03               	skipz
  5833  0FC0  2FD2               	goto	l9299
  5834                           
  5835                           ;RF_Control_B1.c: 117: RF1.CheckCount = 0;
  5836  0FC1  01D7               	clrf	(_RF1^(0+128)+4)
  5837                           
  5838                           ;RF_Control_B1.c: 118: if (RF1.RxChecked == 0) {
  5839  0FC2  1A54               	btfsc	(_RF1^(0+128)+1),4
  5840  0FC3  2FC7               	goto	l9293
  5841                           
  5842                           ;RF_Control_B1.c: 119: RF1.RxChecked = 1;
  5843  0FC4  1654               	bsf	(_RF1^(0+128)+1),4
  5844                           
  5845                           ;RF_Control_B1.c: 120: RF1.CheckedCounter = 0;
  5846  0FC5  01D8               	clrf	(_RF1^(0+128)+5)
  5847                           
  5848                           ;RF_Control_B1.c: 121: } else {
  5849  0FC6  2FD2               	goto	l9299
  5850  0FC7                     l9293:	
  5851                           
  5852                           ;RF_Control_B1.c: 122: RF1.RunTime = 0;
  5853  0FC7  01D9               	clrf	(_RF1^(0+128)+6)
  5854                           
  5855                           ;RF_Control_B1.c: 123: if (RF1.RunTime < 100) {
  5856  0FC8  3064               	movlw	100
  5857  0FC9  0259               	subwf	(_RF1^(0+128)+6),w
  5858  0FCA  1803               	skipnc
  5859  0FCB  2FD2               	goto	l9299
  5860                           
  5861                           ;RF_Control_B1.c: 124: RF1.RunTime += 10;
  5862  0FCC  300A               	movlw	10
  5863  0FCD  0020               	movlb	0	; select bank0
  5864  0FCE  00E7               	movwf	??_setRF_Main
  5865  0FCF  0867               	movf	??_setRF_Main,w
  5866  0FD0  0021               	movlb	1	; select bank1
  5867  0FD1  07D9               	addwf	(_RF1^(0+128)+6),f
  5868  0FD2                     l9299:	
  5869                           
  5870                           ;RF_Control_B1.c: 125: }
  5871                           ;RF_Control_B1.c: 126: }
  5872                           ;RF_Control_B1.c: 127: }
  5873                           ;RF_Control_B1.c: 128: }
  5874                           ;RF_Control_B1.c: 130: RB5 = RB5 == 1 ? 0 : 1;
  5875  0FD2  3020               	movlw	32
  5876  0FD3  0020               	movlb	0	; select bank0
  5877  0FD4  068D               	xorwf	13,f
  5878                           
  5879                           ;RF_Control_B1.c: 132: }
  5880                           ;RF_Control_B1.c: 133: } else {
  5881  0FD5  2FDE               	goto	l9307
  5882  0FD6                     l2169:	
  5883                           
  5884                           ;RF_Control_B1.c: 135: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  5885  0FD6  1DD3               	btfss	_RF1^(0+128),3
  5886  0FD7  18D3               	btfsc	_RF1^(0+128),1
  5887  0FD8  2FDE               	goto	l9307
  5888                           
  5889                           ;RF_Control_B1.c: 136: RF1.RxStatus = 1;
  5890  0FD9  15D3               	bsf	_RF1^(0+128),3
  5891                           
  5892                           ;RF_Control_B1.c: 140: CC2500_WriteCommand(0x34);
  5893  0FDA  3034               	movlw	52
  5894  0FDB  3191  217D  318F   	fcall	_CC2500_WriteCommand
  5895  0FDE                     l9307:	
  5896                           
  5897                           ;RF_Control_B1.c: 142: }
  5898                           ;RF_Control_B1.c: 144: }
  5899                           ;RF_Control_B1.c: 145: }
  5900                           ;RF_Control_B1.c: 146: }
  5901                           ;RF_Control_B1.c: 147: if (RF1.RxChecked == 1) {
  5902  0FDE  0021               	movlb	1	; select bank1
  5903  0FDF  1E54               	btfss	(_RF1^(0+128)+1),4
  5904  0FE0  2FEE               	goto	l9317
  5905                           
  5906                           ;RF_Control_B1.c: 148: RF1.CheckedCounter++;
  5907  0FE1  3001               	movlw	1
  5908  0FE2  0020               	movlb	0	; select bank0
  5909  0FE3  00E7               	movwf	??_setRF_Main
  5910  0FE4  0867               	movf	??_setRF_Main,w
  5911  0FE5  0021               	movlb	1	; select bank1
  5912  0FE6  07D8               	addwf	(_RF1^(0+128)+5),f
  5913                           
  5914                           ;RF_Control_B1.c: 149: if (RF1.CheckedCounter == RF1.RunTime) {
  5915  0FE7  0858               	movf	(_RF1^(0+128)+5),w
  5916  0FE8  0659               	xorwf	(_RF1^(0+128)+6),w
  5917  0FE9  1D03               	skipz
  5918  0FEA  0008               	return
  5919                           
  5920                           ;RF_Control_B1.c: 150: RF1.CheckedCounter = 0;
  5921  0FEB  01D8               	clrf	(_RF1^(0+128)+5)
  5922                           
  5923                           ;RF_Control_B1.c: 151: RF1.RxChecked = 0;
  5924  0FEC  1254               	bcf	(_RF1^(0+128)+1),4
  5925                           
  5926                           ;RF_Control_B1.c: 152: }
  5927                           ;RF_Control_B1.c: 153: } else {
  5928  0FED  0008               	return
  5929  0FEE                     l9317:	
  5930                           
  5931                           ;RF_Control_B1.c: 154: if (RF1.RunTime > 20) {
  5932  0FEE  3015               	movlw	21
  5933  0FEF  0259               	subwf	(_RF1^(0+128)+6),w
  5934  0FF0  1C03               	skipc
  5935  0FF1  0008               	return
  5936                           
  5937                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  5938  0FF2  3001               	movlw	1
  5939  0FF3  0020               	movlb	0	; select bank0
  5940  0FF4  00E7               	movwf	??_setRF_Main
  5941  0FF5  0867               	movf	??_setRF_Main,w
  5942  0FF6  0021               	movlb	1	; select bank1
  5943  0FF7  07D8               	addwf	(_RF1^(0+128)+5),f
  5944                           
  5945                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == RF1.RunTime) {
  5946  0FF8  0858               	movf	(_RF1^(0+128)+5),w
  5947  0FF9  0659               	xorwf	(_RF1^(0+128)+6),w
  5948  0FFA  1D03               	skipz
  5949  0FFB  0008               	return
  5950                           
  5951                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  5952  0FFC  01D8               	clrf	(_RF1^(0+128)+5)
  5953                           
  5954                           ;RF_Control_B1.c: 158: RF1.RunTime -= 10;
  5955  0FFD  300A               	movlw	10
  5956  0FFE  02D9               	subwf	(_RF1^(0+128)+6),f
  5957  0FFF  0008               	return
  5958  1000                     __end_of_setRF_Main:	
  5959                           
  5960                           	psect	text18
  5961  0888                     __ptext18:	
  5962 ;; *************** function _getRxData *****************
  5963 ;; Defined at:
  5964 ;;		line 240 in file "../src/RF_Control_B1.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;		None               void
  5971 ;; Registers used:
  5972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:   12
  5985 ;; This function calls:
  5986 ;;		_setControl_Lights_Table
  5987 ;;		_setLog_Code
  5988 ;; This function is called by:
  5989 ;;		_setRF_Main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _getRxData
  5995  0888                     _getRxData:	
  5996                           
  5997                           ;RF_Control_B1.c: 241: if (RF1.Learn == 1) {
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6001  0888  0021               	movlb	1	; select bank1
  6002  0889  1F53               	btfss	_RF1^(0+128),6
  6003  088A  2899               	goto	l8741
  6004                           
  6005                           ;RF_Control_B1.c: 242: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6006  088B  08A0               	movf	_RF_Data^(0+128),f
  6007  088C  1D03               	skipz
  6008  088D  2897               	goto	l2202
  6009  088E  0821               	movf	(_RF_Data^(0+128)+1),w
  6010  088F  3A64               	xorlw	100
  6011  0890  1D03               	skipz
  6012  0891  2897               	goto	l2202
  6013                           
  6014                           ;RF_Control_B1.c: 243: setLog_Code();
  6015  0892  3194  2495         	fcall	_setLog_Code
  6016                           
  6017                           ;RF_Control_B1.c: 244: RF1.Checked = 1;
  6018  0894  0021               	movlb	1	; select bank1
  6019  0895  15D4               	bsf	(_RF1^(0+128)+1),3
  6020                           
  6021                           ;RF_Control_B1.c: 245: } else {
  6022  0896  0008               	return
  6023  0897                     l2202:	
  6024                           
  6025                           ;RF_Control_B1.c: 246: RF1.Checked = 0;
  6026  0897  11D4               	bcf	(_RF1^(0+128)+1),3
  6027                           
  6028                           ;RF_Control_B1.c: 247: }
  6029                           ;RF_Control_B1.c: 248: } else {
  6030  0898  0008               	return
  6031  0899                     l8741:	
  6032                           
  6033                           ;RF_Control_B1.c: 249: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6034  0899  08A0               	movf	_RF_Data^(0+128),f
  6035  089A  1D03               	skipz
  6036  089B  28D6               	goto	l8763
  6037  089C  0821               	movf	(_RF_Data^(0+128)+1),w
  6038  089D  3A02               	xorlw	2
  6039  089E  1D03               	skipz
  6040  089F  28D6               	goto	l8763
  6041                           
  6042                           ;RF_Control_B1.c: 251: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6043  08A0  082C               	movf	(_RF_Data^(0+128)+12),w
  6044  08A1  3AFF               	xorlw	255
  6045  08A2  1D03               	skipz
  6046  08A3  28B0               	goto	l8753
  6047  08A4  082D               	movf	(_RF_Data^(0+128)+13),w
  6048  08A5  3AFF               	xorlw	255
  6049  08A6  1D03               	skipz
  6050  08A7  28B0               	goto	l8753
  6051  08A8  082E               	movf	(_RF_Data^(0+128)+14),w
  6052  08A9  3AFF               	xorlw	255
  6053  08AA  1D03               	skipz
  6054  08AB  28B0               	goto	l8753
  6055                           
  6056                           ;RF_Control_B1.c: 252: __nop();
  6057  08AC  0000               	nop
  6058                           
  6059                           ;RF_Control_B1.c: 253: RF1.Checked = 0;
  6060  08AD  0021               	movlb	1	; select bank1
  6061  08AE  11D4               	bcf	(_RF1^(0+128)+1),3
  6062                           
  6063                           ;RF_Control_B1.c: 254: } else {
  6064  08AF  0008               	return
  6065  08B0                     l8753:	
  6066                           
  6067                           ;RF_Control_B1.c: 255: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6068  08B0  0020               	movlb	0	; select bank0
  6069  08B1  086D               	movf	_product,w
  6070  08B2  3E0C               	addlw	12
  6071  08B3  0086               	movwf	6
  6072  08B4  3002               	movlw	2	; select bank4/5
  6073  08B5  0087               	movwf	7
  6074  08B6  0021               	movlb	1	; select bank1
  6075  08B7  082C               	movf	(_RF_Data^(0+128)+12),w
  6076  08B8  0601               	xorwf	1,w
  6077  08B9  1D03               	skipz
  6078  08BA  0008               	return
  6079  08BB  0020               	movlb	0	; select bank0
  6080  08BC  086D               	movf	_product,w
  6081  08BD  3E0D               	addlw	13
  6082  08BE  0086               	movwf	6
  6083  08BF  3002               	movlw	2	; select bank4/5
  6084  08C0  0087               	movwf	7
  6085  08C1  0021               	movlb	1	; select bank1
  6086  08C2  082D               	movf	(_RF_Data^(0+128)+13),w
  6087  08C3  0601               	xorwf	1,w
  6088  08C4  1D03               	skipz
  6089  08C5  0008               	return
  6090  08C6  0020               	movlb	0	; select bank0
  6091  08C7  086D               	movf	_product,w
  6092  08C8  3E0E               	addlw	14
  6093  08C9  0086               	movwf	6
  6094  08CA  3002               	movlw	2	; select bank4/5
  6095  08CB  0087               	movwf	7
  6096  08CC  0021               	movlb	1	; select bank1
  6097  08CD  082E               	movf	(_RF_Data^(0+128)+14),w
  6098  08CE  0601               	xorwf	1,w
  6099  08CF  1D03               	skipz
  6100  08D0  0008               	return
  6101                           
  6102                           ;RF_Control_B1.c: 256: setControl_Lights_Table();
  6103  08D1  3186  2689         	fcall	_setControl_Lights_Table
  6104                           
  6105                           ;RF_Control_B1.c: 257: RF1.Checked = 1;
  6106  08D3  0021               	movlb	1	; select bank1
  6107  08D4  15D4               	bsf	(_RF1^(0+128)+1),3
  6108                           
  6109                           ;RF_Control_B1.c: 258: }
  6110                           ;RF_Control_B1.c: 259: }
  6111                           ;RF_Control_B1.c: 260: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6112  08D5  0008               	return
  6113  08D6                     l8763:	
  6114  08D6  0820               	movf	_RF_Data^(0+128),w
  6115  08D7  3AFF               	xorlw	255
  6116  08D8  1D03               	skipz
  6117  08D9  28DE               	goto	l8769
  6118  08DA  0821               	movf	(_RF_Data^(0+128)+1),w
  6119  08DB  3A02               	xorlw	2
  6120  08DC  1903               	btfsc	3,2
  6121  08DD  0008               	return
  6122  08DE                     l8769:	
  6123                           ;RF_Control_B1.c: 261: ;
  6124                           ;RF_Control_B1.c: 262: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6125                           
  6126  08DE  08A0               	movf	_RF_Data^(0+128),f
  6127  08DF  1D03               	skipz
  6128  08E0  28E5               	goto	l2212
  6129  08E1  0821               	movf	(_RF_Data^(0+128)+1),w
  6130  08E2  3A65               	xorlw	101
  6131  08E3  1903               	btfsc	3,2
  6132  08E4  0008               	return
  6133  08E5                     l2212:	
  6134                           ;RF_Control_B1.c: 263: ;
  6135                           ;RF_Control_B1.c: 264: } else {
  6136                           
  6137                           
  6138                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  6139  08E5  11D4               	bcf	(_RF1^(0+128)+1),3
  6140  08E6  0008               	return
  6141  08E7                     __end_of_getRxData:	
  6142                           
  6143                           	psect	text19
  6144  1495                     __ptext19:	
  6145 ;; *************** function _setLog_Code *****************
  6146 ;; Defined at:
  6147 ;;		line 275 in file "../src/RF_Control_B1.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;		None
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;		None
  6152 ;; Return value:  Size  Location     Type
  6153 ;;		None               void
  6154 ;; Registers used:
  6155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;Total ram usage:        1 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    7
  6168 ;; This function calls:
  6169 ;;		_setBuz
  6170 ;; This function is called by:
  6171 ;;		_getRxData
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           
  6176                           ;psect for function _setLog_Code
  6177  1495                     _setLog_Code:	
  6178                           
  6179                           ;RF_Control_B1.c: 276: product->Data[12]=RF_Data[12];
  6180                           
  6181                           ;incstack = 0
  6182                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6183  1495  0021               	movlb	1	; select bank1
  6184  1496  082C               	movf	(_RF_Data^(0+128)+12),w
  6185  1497  0020               	movlb	0	; select bank0
  6186  1498  00AD               	movwf	??_setLog_Code
  6187  1499  086D               	movf	_product,w
  6188  149A  3E0C               	addlw	12
  6189  149B  0086               	movwf	6
  6190  149C  3002               	movlw	2	; select bank4/5
  6191  149D  0087               	movwf	7
  6192  149E  082D               	movf	??_setLog_Code,w
  6193  149F  0081               	movwf	1
  6194                           
  6195                           ;RF_Control_B1.c: 277: product->Data[13]=RF_Data[13];
  6196  14A0  0021               	movlb	1	; select bank1
  6197  14A1  082D               	movf	(_RF_Data^(0+128)+13),w
  6198  14A2  0020               	movlb	0	; select bank0
  6199  14A3  00AD               	movwf	??_setLog_Code
  6200  14A4  086D               	movf	_product,w
  6201  14A5  3E0D               	addlw	13
  6202  14A6  0086               	movwf	6
  6203  14A7  3002               	movlw	2	; select bank4/5
  6204  14A8  0087               	movwf	7
  6205  14A9  082D               	movf	??_setLog_Code,w
  6206  14AA  0081               	movwf	1
  6207                           
  6208                           ;RF_Control_B1.c: 278: product->Data[14]=RF_Data[14];
  6209  14AB  0021               	movlb	1	; select bank1
  6210  14AC  082E               	movf	(_RF_Data^(0+128)+14),w
  6211  14AD  0020               	movlb	0	; select bank0
  6212  14AE  00AD               	movwf	??_setLog_Code
  6213  14AF  086D               	movf	_product,w
  6214  14B0  3E0E               	addlw	14
  6215  14B1  0086               	movwf	6
  6216  14B2  3002               	movlw	2	; select bank4/5
  6217  14B3  0087               	movwf	7
  6218  14B4  082D               	movf	??_setLog_Code,w
  6219  14B5  0081               	movwf	1
  6220                           
  6221                           ;RF_Control_B1.c: 279: setBuz(1, 100);
  6222  14B6  3064               	movlw	100
  6223  14B7  00A9               	movwf	setBuz@time
  6224  14B8  3000               	movlw	0
  6225  14B9  00AA               	movwf	setBuz@time+1
  6226  14BA  3001               	movlw	1
  6227  14BB  3197  27A7  3194   	fcall	_setBuz
  6228                           
  6229                           ;RF_Control_B1.c: 280: RF1.Learn = 0;
  6230  14BE  0021               	movlb	1	; select bank1
  6231  14BF  1353               	bcf	_RF1^(0+128),6
  6232                           
  6233                           ;RF_Control_B1.c: 281: if (myMain.First) {
  6234  14C0  1FB5               	btfss	_myMain^(0+128),7
  6235  14C1  2CC4               	goto	l2217
  6236                           
  6237                           ;RF_Control_B1.c: 282: Memory.LoopSave=1;
  6238  14C2  0023               	movlb	3	; select bank3
  6239  14C3  1544               	bsf	(_Memory^(0+384)+36),2
  6240  14C4                     l2217:	
  6241                           
  6242                           ;RF_Control_B1.c: 283: }
  6243                           ;RF_Control_B1.c: 284: Memory.Modify=1;
  6244  14C4  0023               	movlb	3	; select bank3
  6245  14C5  1444               	bsf	(_Memory^(0+384)+36),0
  6246  14C6  0008               	return
  6247  14C7                     __end_of_setLog_Code:	
  6248                           
  6249                           	psect	text20
  6250  0689                     __ptext20:	
  6251 ;; *************** function _setControl_Lights_Table *****************
  6252 ;; Defined at:
  6253 ;;		line 288 in file "../src/RF_Control_B1.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;		None               void
  6260 ;; Registers used:
  6261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:   11
  6274 ;; This function calls:
  6275 ;;		_setBuz
  6276 ;;		_setDimmerLights
  6277 ;;		_setRFSW_AdjControl
  6278 ;;		_setRFSW_Control
  6279 ;;		_setRFSW_Status
  6280 ;;		_setSw_Status
  6281 ;;		_setTxData
  6282 ;; This function is called by:
  6283 ;;		_getRxData
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _setControl_Lights_Table
  6289  0689                     _setControl_Lights_Table:	
  6290                           
  6291                           ;RF_Control_B1.c: 289: if (RF_Data[15] == 0x00) {
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6295  0689  0021               	movlb	1	; select bank1
  6296  068A  08AF               	movf	(_RF_Data^(0+128)+15),f
  6297  068B  1D03               	skipz
  6298  068C  2EE7               	goto	l8449
  6299                           
  6300                           ;RF_Control_B1.c: 291: setDimmerLights(1, 0);
  6301  068D  0020               	movlb	0	; select bank0
  6302  068E  01A4               	clrf	setDimmerLights@status
  6303  068F  3001               	movlw	1
  6304  0690  318C  24B8  3186   	fcall	_setDimmerLights
  6305                           
  6306                           ;RF_Control_B1.c: 292: setRFSW_Status(1, 0);
  6307  0693  0020               	movlb	0	; select bank0
  6308  0694  01A2               	clrf	setRFSW_Status@command
  6309  0695  3001               	movlw	1
  6310  0696  319F  2756  3186   	fcall	_setRFSW_Status
  6311                           
  6312                           ;RF_Control_B1.c: 293: setSw_Status(1, 0);
  6313  0699  0020               	movlb	0	; select bank0
  6314  069A  01A2               	clrf	setSw_Status@command
  6315  069B  3001               	movlw	1
  6316  069C  319F  2765  3186   	fcall	_setSw_Status
  6317                           
  6318                           ;RF_Control_B1.c: 296: setDimmerLights(2, 0);
  6319  069F  0020               	movlb	0	; select bank0
  6320  06A0  01A4               	clrf	setDimmerLights@status
  6321  06A1  3002               	movlw	2
  6322  06A2  318C  24B8  3186   	fcall	_setDimmerLights
  6323                           
  6324                           ;RF_Control_B1.c: 297: setRFSW_Status(2, 0);
  6325  06A5  0020               	movlb	0	; select bank0
  6326  06A6  01A2               	clrf	setRFSW_Status@command
  6327  06A7  3002               	movlw	2
  6328  06A8  319F  2756  3186   	fcall	_setRFSW_Status
  6329                           
  6330                           ;RF_Control_B1.c: 298: setSw_Status(2, 0);
  6331  06AB  0020               	movlb	0	; select bank0
  6332  06AC  01A2               	clrf	setSw_Status@command
  6333  06AD  3002               	movlw	2
  6334  06AE  319F  2765  3186   	fcall	_setSw_Status
  6335                           
  6336                           ;RF_Control_B1.c: 301: setDimmerLights(3, 0);
  6337  06B1  0020               	movlb	0	; select bank0
  6338  06B2  01A4               	clrf	setDimmerLights@status
  6339  06B3  3003               	movlw	3
  6340  06B4  318C  24B8  3186   	fcall	_setDimmerLights
  6341                           
  6342                           ;RF_Control_B1.c: 302: setRFSW_Status(3, 0);
  6343  06B7  0020               	movlb	0	; select bank0
  6344  06B8  01A2               	clrf	setRFSW_Status@command
  6345  06B9  3003               	movlw	3
  6346  06BA  319F  2756  3186   	fcall	_setRFSW_Status
  6347                           
  6348                           ;RF_Control_B1.c: 303: setSw_Status(3, 0);
  6349  06BD  0020               	movlb	0	; select bank0
  6350  06BE  01A2               	clrf	setSw_Status@command
  6351  06BF  3003               	movlw	3
  6352  06C0  319F  2765  3186   	fcall	_setSw_Status
  6353                           
  6354                           ;RF_Control_B1.c: 306: product->Data[9]=0;
  6355  06C3  0020               	movlb	0	; select bank0
  6356  06C4  086D               	movf	_product,w
  6357  06C5  3E09               	addlw	9
  6358  06C6  0086               	movwf	6
  6359  06C7  3002               	movlw	2	; select bank4/5
  6360  06C8  0087               	movwf	7
  6361  06C9  0181               	clrf	1
  6362                           
  6363                           ;RF_Control_B1.c: 307: product->Data[11]=0;
  6364  06CA  086D               	movf	_product,w
  6365  06CB  3E0B               	addlw	11
  6366  06CC  0086               	movwf	6
  6367  06CD  3002               	movlw	2	; select bank4/5
  6368  06CE  0087               	movwf	7
  6369  06CF  0181               	clrf	1
  6370                           
  6371                           ;RF_Control_B1.c: 308: product->Data[15]=0;
  6372  06D0  086D               	movf	_product,w
  6373  06D1  3E0F               	addlw	15
  6374  06D2  0086               	movwf	6
  6375  06D3  3002               	movlw	2	; select bank4/5
  6376  06D4  0087               	movwf	7
  6377  06D5  0181               	clrf	1
  6378                           
  6379                           ;RF_Control_B1.c: 309: product->Data[17]=0;
  6380  06D6  086D               	movf	_product,w
  6381  06D7  3E11               	addlw	17
  6382  06D8  0086               	movwf	6
  6383  06D9  3002               	movlw	2	; select bank4/5
  6384  06DA  0087               	movwf	7
  6385  06DB  0181               	clrf	1
  6386                           
  6387                           ;RF_Control_B1.c: 310: setBuz(1, 100);
  6388  06DC  3064               	movlw	100
  6389  06DD  00A9               	movwf	setBuz@time
  6390  06DE  3000               	movlw	0
  6391  06DF  00AA               	movwf	setBuz@time+1
  6392  06E0  3001               	movlw	1
  6393  06E1  3197  27A7  3186   	fcall	_setBuz
  6394                           
  6395                           ;RF_Control_B1.c: 311: setTxData();
  6396  06E4  3185  251C         	fcall	_setTxData
  6397                           
  6398                           ;RF_Control_B1.c: 312: } else if (RF_Data[15] == 0x20) {
  6399  06E6  0008               	return
  6400  06E7                     l8449:	
  6401  06E7  0021               	movlb	1	; select bank1
  6402  06E8  082F               	movf	(_RF_Data^(0+128)+15),w
  6403  06E9  3A20               	xorlw	32
  6404  06EA  1D03               	skipz
  6405  06EB  2F02               	goto	l8455
  6406                           
  6407                           ;RF_Control_B1.c: 313: product->Data[9]=0;
  6408  06EC  0020               	movlb	0	; select bank0
  6409  06ED  086D               	movf	_product,w
  6410  06EE  3E09               	addlw	9
  6411  06EF  0086               	movwf	6
  6412  06F0  3002               	movlw	2	; select bank4/5
  6413  06F1  0087               	movwf	7
  6414  06F2  0181               	clrf	1
  6415                           
  6416                           ;RF_Control_B1.c: 314: product->Data[11]=0;
  6417  06F3  086D               	movf	_product,w
  6418  06F4  3E0B               	addlw	11
  6419  06F5  0086               	movwf	6
  6420  06F6  3002               	movlw	2	; select bank4/5
  6421  06F7  0087               	movwf	7
  6422  06F8  0181               	clrf	1
  6423                           
  6424                           ;RF_Control_B1.c: 315: product->Data[17]=0;
  6425  06F9  086D               	movf	_product,w
  6426  06FA  3E11               	addlw	17
  6427  06FB  0086               	movwf	6
  6428  06FC  3002               	movlw	2	; select bank4/5
  6429  06FD  0087               	movwf	7
  6430  06FE  0181               	clrf	1
  6431                           
  6432                           ;RF_Control_B1.c: 316: setTxData();
  6433  06FF  3185  251C         	fcall	_setTxData
  6434                           
  6435                           ;RF_Control_B1.c: 317: }
  6436  0701  0008               	return
  6437  0702                     l8455:	
  6438                           
  6439                           ;RF_Control_B1.c: 319: else if (RF_Data[15] == 0x01) {
  6440  0702  0021               	movlb	1	; select bank1
  6441  0703  082F               	movf	(_RF_Data^(0+128)+15),w
  6442  0704  3A01               	xorlw	1
  6443  0705  1D03               	skipz
  6444  0706  2F0B               	goto	l8459
  6445                           
  6446                           ;RF_Control_B1.c: 320: setRFSW_Control(1);
  6447  0707  3001               	movlw	1
  6448  0708  318E  26D5         	fcall	_setRFSW_Control
  6449                           
  6450                           ;RF_Control_B1.c: 321: }
  6451  070A  0008               	return
  6452  070B                     l8459:	
  6453                           
  6454                           ;RF_Control_B1.c: 323: else if (RF_Data[15] == 0x11) {
  6455  070B  0021               	movlb	1	; select bank1
  6456  070C  082F               	movf	(_RF_Data^(0+128)+15),w
  6457  070D  3A11               	xorlw	17
  6458  070E  1D03               	skipz
  6459  070F  2F14               	goto	l8463
  6460                           
  6461                           ;RF_Control_B1.c: 324: setRFSW_AdjControl(1);
  6462  0710  3001               	movlw	1
  6463  0711  3194  24FC         	fcall	_setRFSW_AdjControl
  6464                           
  6465                           ;RF_Control_B1.c: 325: }
  6466  0713  0008               	return
  6467  0714                     l8463:	
  6468                           
  6469                           ;RF_Control_B1.c: 330: else if (RF_Data[15] == 0x02) {
  6470  0714  0021               	movlb	1	; select bank1
  6471  0715  082F               	movf	(_RF_Data^(0+128)+15),w
  6472  0716  3A02               	xorlw	2
  6473  0717  1D03               	skipz
  6474  0718  2F1D               	goto	l8467
  6475                           
  6476                           ;RF_Control_B1.c: 331: setRFSW_Control(2);
  6477  0719  3002               	movlw	2
  6478  071A  318E  26D5         	fcall	_setRFSW_Control
  6479                           
  6480                           ;RF_Control_B1.c: 332: }
  6481  071C  0008               	return
  6482  071D                     l8467:	
  6483                           
  6484                           ;RF_Control_B1.c: 334: else if (RF_Data[15] == 0x21) {
  6485  071D  0021               	movlb	1	; select bank1
  6486  071E  082F               	movf	(_RF_Data^(0+128)+15),w
  6487  071F  3A21               	xorlw	33
  6488  0720  1D03               	skipz
  6489  0721  2F26               	goto	l8471
  6490                           
  6491                           ;RF_Control_B1.c: 335: setRFSW_AdjControl(2);
  6492  0722  3002               	movlw	2
  6493  0723  3194  24FC         	fcall	_setRFSW_AdjControl
  6494                           
  6495                           ;RF_Control_B1.c: 336: }
  6496  0725  0008               	return
  6497  0726                     l8471:	
  6498                           
  6499                           ;RF_Control_B1.c: 341: else if (RF_Data[15] == 0x03) {
  6500  0726  0021               	movlb	1	; select bank1
  6501  0727  082F               	movf	(_RF_Data^(0+128)+15),w
  6502  0728  3A03               	xorlw	3
  6503  0729  1D03               	skipz
  6504  072A  2F2F               	goto	l8475
  6505                           
  6506                           ;RF_Control_B1.c: 342: setRFSW_Control(3);
  6507  072B  3003               	movlw	3
  6508  072C  318E  26D5         	fcall	_setRFSW_Control
  6509                           
  6510                           ;RF_Control_B1.c: 343: }
  6511  072E  0008               	return
  6512  072F                     l8475:	
  6513                           
  6514                           ;RF_Control_B1.c: 345: else if (RF_Data[15] == 0x31) {
  6515  072F  0021               	movlb	1	; select bank1
  6516  0730  082F               	movf	(_RF_Data^(0+128)+15),w
  6517  0731  3A31               	xorlw	49
  6518  0732  1D03               	skipz
  6519  0733  0008               	return
  6520                           
  6521                           ;RF_Control_B1.c: 346: setRFSW_AdjControl(3);
  6522  0734  3003               	movlw	3
  6523  0735  3194  24FC         	fcall	_setRFSW_AdjControl
  6524  0737  0008               	return
  6525  0738                     __end_of_setControl_Lights_Table:	
  6526                           
  6527                           	psect	text21
  6528  0ED5                     __ptext21:	
  6529 ;; *************** function _setRFSW_Control *****************
  6530 ;; Defined at:
  6531 ;;		line 376 in file "../src/RF_Control_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  sw              1    wreg     unsigned char 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  sw              1   67[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        2 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    9
  6552 ;; This function calls:
  6553 ;;		_RfSWPointSelect
  6554 ;;		_setBuz
  6555 ;;		_setDelayOff_GO
  6556 ;;		_setDimmerLights_Switch
  6557 ;;		_setDimmerLights_Trigger
  6558 ;;		_setRF_DimmerLights
  6559 ;;		_setSw_Status
  6560 ;;		_setTxData
  6561 ;; This function is called by:
  6562 ;;		_setControl_Lights_Table
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _setRFSW_Control
  6568  0ED5                     _setRFSW_Control:	
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6572                           ;setRFSW_Control@sw stored from wreg
  6573  0ED5  0020               	movlb	0	; select bank0
  6574  0ED6  00E3               	movwf	setRFSW_Control@sw
  6575                           
  6576                           ;RF_Control_B1.c: 377: RfSWPointSelect(sw);
  6577  0ED7  0863               	movf	setRFSW_Control@sw,w
  6578  0ED8  3192  225B  318E   	fcall	_RfSWPointSelect
  6579                           
  6580                           ;RF_Control_B1.c: 378: if (RFSW->Status == 0) {
  6581  0EDB  0021               	movlb	1	; select bank1
  6582  0EDC  0862               	movf	_RFSW^(0+128),w
  6583  0EDD  0086               	movwf	6
  6584  0EDE  0187               	clrf	7
  6585  0EDF  1801               	btfsc	1,0
  6586  0EE0  2F16               	goto	l8339
  6587                           
  6588                           ;RF_Control_B1.c: 379: if (RF_Data[16] == 0x80) {
  6589  0EE1  0830               	movf	(_RF_Data^(0+128)+16),w
  6590  0EE2  3A80               	xorlw	128
  6591  0EE3  1D03               	skipz
  6592  0EE4  2EF2               	goto	l8329
  6593                           
  6594                           ;RF_Control_B1.c: 380: setDelayOff_GO(sw, 1, RF_Data[17]);
  6595  0EE5  0020               	movlb	0	; select bank0
  6596  0EE6  01AA               	clrf	setDelayOff_GO@command
  6597  0EE7  0AAA               	incf	setDelayOff_GO@command,f
  6598  0EE8  0021               	movlb	1	; select bank1
  6599  0EE9  0831               	movf	(_RF_Data^(0+128)+17),w
  6600  0EEA  0020               	movlb	0	; select bank0
  6601  0EEB  00E2               	movwf	??_setRFSW_Control
  6602  0EEC  0862               	movf	??_setRFSW_Control,w
  6603  0EED  00AB               	movwf	setDelayOff_GO@value
  6604  0EEE  0863               	movf	setRFSW_Control@sw,w
  6605  0EEF  318A  2210  318E   	fcall	_setDelayOff_GO
  6606  0EF2                     l8329:	
  6607                           
  6608                           ;RF_Control_B1.c: 381: }
  6609                           ;RF_Control_B1.c: 382: RFSW->Status = 1;
  6610  0EF2  0021               	movlb	1	; select bank1
  6611  0EF3  0862               	movf	_RFSW^(0+128),w
  6612  0EF4  0086               	movwf	6
  6613  0EF5  0187               	clrf	7
  6614  0EF6  1401               	bsf	1,0
  6615                           
  6616                           ;RF_Control_B1.c: 383: setSw_Status(sw, 1);
  6617  0EF7  0020               	movlb	0	; select bank0
  6618  0EF8  01A2               	clrf	setSw_Status@command
  6619  0EF9  0AA2               	incf	setSw_Status@command,f
  6620  0EFA  0863               	movf	setRFSW_Control@sw,w
  6621  0EFB  319F  2765  318E   	fcall	_setSw_Status
  6622                           
  6623                           ;RF_Control_B1.c: 385: setDimmerLights_Trigger(sw, 1);
  6624  0EFE  0020               	movlb	0	; select bank0
  6625  0EFF  01A2               	clrf	setDimmerLights_Trigger@command
  6626  0F00  0AA2               	incf	setDimmerLights_Trigger@command,f
  6627  0F01  0863               	movf	setRFSW_Control@sw,w
  6628  0F02  319F  27C0  318E   	fcall	_setDimmerLights_Trigger
  6629                           
  6630                           ;RF_Control_B1.c: 386: setDimmerLights_Switch(sw, 1);
  6631  0F05  0020               	movlb	0	; select bank0
  6632  0F06  01A2               	clrf	setDimmerLights_Switch@command
  6633  0F07  0AA2               	incf	setDimmerLights_Switch@command,f
  6634  0F08  0863               	movf	setRFSW_Control@sw,w
  6635  0F09  319F  27B0  318E   	fcall	_setDimmerLights_Switch
  6636                           
  6637                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, RFSW->Status);
  6638  0F0C  0021               	movlb	1	; select bank1
  6639  0F0D  0862               	movf	_RFSW^(0+128),w
  6640  0F0E  0086               	movwf	6
  6641  0F0F  0187               	clrf	7
  6642  0F10  3000               	movlw	0
  6643  0F11  1801               	btfsc	1,0
  6644  0F12  3001               	movlw	1
  6645  0F13  0020               	movlb	0	; select bank0
  6646  0F14  00DD               	movwf	setRF_DimmerLights@on
  6647  0F15  2F54               	goto	L5
  6648  0F16                     l8339:	
  6649                           ;RF_Control_B1.c: 389: } else {
  6650                           
  6651                           
  6652                           ;RF_Control_B1.c: 390: if (RF_Data[16] == 0x80) {
  6653  0F16  0021               	movlb	1	; select bank1
  6654  0F17  0830               	movf	(_RF_Data^(0+128)+16),w
  6655  0F18  3A80               	xorlw	128
  6656  0F19  1D03               	skipz
  6657  0F1A  2F2C               	goto	l8343
  6658                           
  6659                           ;RF_Control_B1.c: 391: setDelayOff_GO(sw, 1, RF_Data[17]);
  6660  0F1B  0020               	movlb	0	; select bank0
  6661  0F1C  01AA               	clrf	setDelayOff_GO@command
  6662  0F1D  0AAA               	incf	setDelayOff_GO@command,f
  6663  0F1E  0021               	movlb	1	; select bank1
  6664  0F1F  0831               	movf	(_RF_Data^(0+128)+17),w
  6665  0F20  0020               	movlb	0	; select bank0
  6666  0F21  00E2               	movwf	??_setRFSW_Control
  6667  0F22  0862               	movf	??_setRFSW_Control,w
  6668  0F23  00AB               	movwf	setDelayOff_GO@value
  6669  0F24  0863               	movf	setRFSW_Control@sw,w
  6670  0F25  318A  2210  318E   	fcall	_setDelayOff_GO
  6671                           
  6672                           ;RF_Control_B1.c: 392: setRF_DimmerLights(sw, 1);
  6673  0F28  0020               	movlb	0	; select bank0
  6674  0F29  01DD               	clrf	setRF_DimmerLights@on
  6675  0F2A  0ADD               	incf	setRF_DimmerLights@on,f
  6676  0F2B  2F54               	goto	L5
  6677  0F2C                     l8343:	
  6678                           ;RF_Control_B1.c: 393: } else {
  6679                           
  6680                           
  6681                           ;RF_Control_B1.c: 394: RFSW->Status = 0;
  6682  0F2C  0021               	movlb	1	; select bank1
  6683  0F2D  0862               	movf	_RFSW^(0+128),w
  6684  0F2E  0086               	movwf	6
  6685  0F2F  0187               	clrf	7
  6686  0F30  1001               	bcf	1,0
  6687                           
  6688                           ;RF_Control_B1.c: 395: setSw_Status(sw, 0);
  6689  0F31  0020               	movlb	0	; select bank0
  6690  0F32  01A2               	clrf	setSw_Status@command
  6691  0F33  0863               	movf	setRFSW_Control@sw,w
  6692  0F34  319F  2765  318E   	fcall	_setSw_Status
  6693                           
  6694                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  6695  0F37  0020               	movlb	0	; select bank0
  6696  0F38  01A2               	clrf	setDimmerLights_Trigger@command
  6697  0F39  0AA2               	incf	setDimmerLights_Trigger@command,f
  6698  0F3A  0863               	movf	setRFSW_Control@sw,w
  6699  0F3B  319F  27C0  318E   	fcall	_setDimmerLights_Trigger
  6700                           
  6701                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, RFSW->Status);
  6702  0F3E  0021               	movlb	1	; select bank1
  6703  0F3F  0862               	movf	_RFSW^(0+128),w
  6704  0F40  0086               	movwf	6
  6705  0F41  0187               	clrf	7
  6706  0F42  3000               	movlw	0
  6707  0F43  1801               	btfsc	1,0
  6708  0F44  3001               	movlw	1
  6709  0F45  0020               	movlb	0	; select bank0
  6710  0F46  00A2               	movwf	setDimmerLights_Switch@command
  6711  0F47  0863               	movf	setRFSW_Control@sw,w
  6712  0F48  319F  27B0  318E   	fcall	_setDimmerLights_Switch
  6713                           
  6714                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 0, 0);
  6715  0F4B  0020               	movlb	0	; select bank0
  6716  0F4C  01AA               	clrf	setDelayOff_GO@command
  6717  0F4D  01AB               	clrf	setDelayOff_GO@value
  6718  0F4E  0863               	movf	setRFSW_Control@sw,w
  6719  0F4F  318A  2210  318E   	fcall	_setDelayOff_GO
  6720                           
  6721                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw, 0);
  6722  0F52  0020               	movlb	0	; select bank0
  6723  0F53  01DD               	clrf	setRF_DimmerLights@on
  6724  0F54                     L5:	
  6725  0F54  0863               	movf	setRFSW_Control@sw,w
  6726  0F55  318A  2276  318E   	fcall	_setRF_DimmerLights
  6727                           
  6728                           ;RF_Control_B1.c: 402: }
  6729                           ;RF_Control_B1.c: 403: }
  6730                           ;RF_Control_B1.c: 404: setBuz(1, 100);
  6731  0F58  3064               	movlw	100
  6732  0F59  0020               	movlb	0	; select bank0
  6733  0F5A  00A9               	movwf	setBuz@time
  6734  0F5B  3000               	movlw	0
  6735  0F5C  00AA               	movwf	setBuz@time+1
  6736  0F5D  3001               	movlw	1
  6737  0F5E  3197  27A7  318E   	fcall	_setBuz
  6738                           
  6739                           ;RF_Control_B1.c: 405: setTxData();
  6740  0F61  3185  251C         	fcall	_setTxData
  6741  0F63  0008               	return
  6742  0F64                     __end_of_setRFSW_Control:	
  6743                           
  6744                           	psect	text22
  6745  0A10                     __ptext22:	
  6746 ;; *************** function _setDelayOff_GO *****************
  6747 ;; Defined at:
  6748 ;;		line 86 in file "../src/DelayOff_B1.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  sw              1    wreg     unsigned char 
  6751 ;;  command         1   10[BANK0 ] unsigned char 
  6752 ;;  value           1   11[BANK0 ] unsigned char 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  sw              1   14[BANK0 ] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;		None               void
  6757 ;; Registers used:
  6758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6764 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;Total ram usage:        5 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; Hardware stack levels required when called:    7
  6771 ;; This function calls:
  6772 ;;		_DelayOffPointSelect
  6773 ;;		_DelayTimejudge
  6774 ;; This function is called by:
  6775 ;;		_setRFSW_Control
  6776 ;;		_Sw_DimmerOffFunc
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           
  6781                           ;psect for function _setDelayOff_GO
  6782  0A10                     _setDelayOff_GO:	
  6783                           
  6784                           ;incstack = 0
  6785                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6786                           ;setDelayOff_GO@sw stored from wreg
  6787  0A10  0020               	movlb	0	; select bank0
  6788  0A11  00AE               	movwf	setDelayOff_GO@sw
  6789                           
  6790                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  6791  0A12  082E               	movf	setDelayOff_GO@sw,w
  6792  0A13  3192  2202  318A   	fcall	_DelayOffPointSelect
  6793                           
  6794                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  6795  0A16  0876               	movf	_DelayOff,w
  6796  0A17  0086               	movwf	6
  6797  0A18  3001               	movlw	1	; select bank2/3
  6798  0A19  0087               	movwf	7
  6799  0A1A  1C01               	btfss	1,0
  6800  0A1B  0008               	return
  6801                           
  6802                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  6803  0A1C  0020               	movlb	0	; select bank0
  6804  0A1D  082A               	movf	setDelayOff_GO@command,w
  6805  0A1E  3A01               	xorlw	1
  6806  0A1F  3000               	movlw	0
  6807  0A20  1903               	skipnz
  6808  0A21  3001               	movlw	1
  6809  0A22  00AC               	movwf	??_setDelayOff_GO
  6810  0A23  0876               	movf	_DelayOff,w
  6811  0A24  0086               	movwf	6
  6812  0A25  3001               	movlw	1	; select bank2/3
  6813  0A26  0087               	movwf	7
  6814  0A27  0DAC               	rlf	??_setDelayOff_GO,f
  6815  0A28  0801               	movf	1,w
  6816  0A29  062C               	xorwf	??_setDelayOff_GO,w
  6817  0A2A  39FD               	andlw	-3
  6818  0A2B  062C               	xorwf	??_setDelayOff_GO,w
  6819  0A2C  0081               	movwf	1
  6820                           
  6821                           ;DelayOff_B1.c: 90: if (command == 1) {
  6822  0A2D  082A               	movf	setDelayOff_GO@command,w
  6823  0A2E  3A01               	xorlw	1
  6824  0A2F  1D03               	skipz
  6825  0A30  2A5B               	goto	l8149
  6826                           
  6827                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  6828  0A31  082B               	movf	setDelayOff_GO@value,w
  6829  0A32  3193  23E3  318A   	fcall	_DelayTimejudge
  6830  0A35  0020               	movlb	0	; select bank0
  6831  0A36  00AC               	movwf	??_setDelayOff_GO
  6832  0A37  0A76               	incf	_DelayOff,w
  6833  0A38  0086               	movwf	6
  6834  0A39  3001               	movlw	1	; select bank2/3
  6835  0A3A  0087               	movwf	7
  6836  0A3B  082C               	movf	??_setDelayOff_GO,w
  6837  0A3C  0081               	movwf	1
  6838                           
  6839                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  6840  0A3D  300F               	movlw	15
  6841  0A3E  052B               	andwf	setDelayOff_GO@value,w
  6842  0A3F  00AC               	movwf	??_setDelayOff_GO
  6843  0A40  082C               	movf	??_setDelayOff_GO,w
  6844  0A41  3A05               	xorlw	5
  6845  0A42  1903               	skipnz
  6846  0A43  2A48               	goto	l8143
  6847  0A44  082B               	movf	setDelayOff_GO@value,w
  6848  0A45  390F               	andlw	15
  6849  0A46  1D03               	btfss	3,2
  6850  0A47  2A4E               	goto	l8147
  6851  0A48                     l8143:	
  6852  0A48  3026               	movlw	38
  6853  0A49  022B               	subwf	setDelayOff_GO@value,w
  6854  0A4A  1803               	skipnc
  6855  0A4B  2A4E               	goto	l8147
  6856                           
  6857                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  6858  0A4C  082B               	movf	setDelayOff_GO@value,w
  6859  0A4D  2A4F               	goto	L6
  6860  0A4E                     l8147:	
  6861                           ;DelayOff_B1.c: 94: } else {
  6862                           
  6863                           
  6864                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  6865  0A4E  3005               	movlw	5
  6866  0A4F                     L6:	
  6867  0A4F  00AC               	movwf	??_setDelayOff_GO
  6868  0A50  082E               	movf	setDelayOff_GO@sw,w
  6869  0A51  3E1A               	addlw	26
  6870  0A52  076D               	addwf	_product,w
  6871  0A53  00AD               	movwf	??_setDelayOff_GO+1
  6872  0A54  082D               	movf	??_setDelayOff_GO+1,w
  6873  0A55  0086               	movwf	6
  6874  0A56  3002               	movlw	2	; select bank4/5
  6875  0A57  0087               	movwf	7
  6876  0A58  082C               	movf	??_setDelayOff_GO,w
  6877  0A59  0081               	movwf	1
  6878                           
  6879                           ;DelayOff_B1.c: 96: }
  6880                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  6881  0A5A  2A67               	goto	l8153
  6882  0A5B                     l8149:	
  6883  0A5B  08AA               	movf	setDelayOff_GO@command,f
  6884  0A5C  1D03               	skipz
  6885  0A5D  2A67               	goto	l8153
  6886                           
  6887                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  6888  0A5E  082E               	movf	setDelayOff_GO@sw,w
  6889  0A5F  3E1A               	addlw	26
  6890  0A60  076D               	addwf	_product,w
  6891  0A61  00AC               	movwf	??_setDelayOff_GO
  6892  0A62  082C               	movf	??_setDelayOff_GO,w
  6893  0A63  0086               	movwf	6
  6894  0A64  3002               	movlw	2	; select bank4/5
  6895  0A65  0087               	movwf	7
  6896  0A66  0181               	clrf	1
  6897  0A67                     l8153:	
  6898                           
  6899                           ;DelayOff_B1.c: 99: }
  6900                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  6901  0A67  0876               	movf	_DelayOff,w
  6902  0A68  3E02               	addlw	2
  6903  0A69  0086               	movwf	6
  6904  0A6A  3001               	movlw	1	; select bank2/3
  6905  0A6B  0087               	movwf	7
  6906  0A6C  3000               	movlw	0
  6907  0A6D  3FC0               	movwi [0]fsr1
  6908  0A6E  3FC1               	movwi [1]fsr1
  6909                           
  6910                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  6911  0A6F  0876               	movf	_DelayOff,w
  6912  0A70  3E04               	addlw	4
  6913  0A71  0086               	movwf	6
  6914  0A72  3001               	movlw	1	; select bank2/3
  6915  0A73  0087               	movwf	7
  6916  0A74  0181               	clrf	1
  6917  0A75  0008               	return
  6918  0A76                     __end_of_setDelayOff_GO:	
  6919                           
  6920                           	psect	text23
  6921  13E3                     __ptext23:	
  6922 ;; *************** function _DelayTimejudge *****************
  6923 ;; Defined at:
  6924 ;;		line 106 in file "../src/DelayOff_B1.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  value           1    wreg     unsigned char 
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;  value           1    9[BANK0 ] unsigned char 
  6929 ;;  k               1    8[BANK0 ] unsigned char 
  6930 ;;  j               1    7[BANK0 ] unsigned char 
  6931 ;;  i               1    6[BANK0 ] unsigned char 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  1    wreg      unsigned char 
  6934 ;; Registers used:
  6935 ;;		wreg, status,2, status,0, pclath, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;Total ram usage:        6 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    6
  6948 ;; This function calls:
  6949 ;;		___bmul
  6950 ;; This function is called by:
  6951 ;;		_setDelayOff_GO
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _DelayTimejudge
  6957  13E3                     _DelayTimejudge:	
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  6961                           ;DelayTimejudge@value stored from wreg
  6962  13E3  0020               	movlb	0	; select bank0
  6963  13E4  00A9               	movwf	DelayTimejudge@value
  6964                           
  6965                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  6966  13E5  3005               	movlw	5
  6967  13E6  00A4               	movwf	??_DelayTimejudge
  6968  13E7  0824               	movf	??_DelayTimejudge,w
  6969  13E8  00A6               	movwf	DelayTimejudge@i
  6970  13E9  01A7               	clrf	DelayTimejudge@j
  6971  13EA  01A8               	clrf	DelayTimejudge@k
  6972                           
  6973                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  6974  13EB  3031               	movlw	49
  6975  13EC  0229               	subwf	DelayTimejudge@value,w
  6976  13ED  1803               	skipnc
  6977  13EE  2C0B               	goto	l7937
  6978                           
  6979                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  6980  13EF  0829               	movf	DelayTimejudge@value,w
  6981  13F0  390F               	andlw	15
  6982  13F1  00A4               	movwf	??_DelayTimejudge
  6983  13F2  0824               	movf	??_DelayTimejudge,w
  6984  13F3  00A7               	movwf	DelayTimejudge@j
  6985                           
  6986                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  6987  13F4  0829               	movf	DelayTimejudge@value,w
  6988  13F5  00A4               	movwf	??_DelayTimejudge
  6989  13F6  3004               	movlw	4
  6990  13F7                     u7875:	
  6991  13F7  36A4               	lsrf	??_DelayTimejudge,f
  6992  13F8  0B89               	decfsz	9,f
  6993  13F9  2BF7               	goto	u7875
  6994  13FA  0824               	movf	??_DelayTimejudge,w
  6995  13FB  390F               	andlw	15
  6996  13FC  00A5               	movwf	??_DelayTimejudge+1
  6997  13FD  0825               	movf	??_DelayTimejudge+1,w
  6998  13FE  00A8               	movwf	DelayTimejudge@k
  6999                           
  7000                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7001  13FF  300A               	movlw	10
  7002  1400  00A4               	movwf	??_DelayTimejudge
  7003  1401  0824               	movf	??_DelayTimejudge,w
  7004  1402  00A0               	movwf	___bmul@multiplicand
  7005  1403  0828               	movf	DelayTimejudge@k,w
  7006  1404  3190  20AE         	fcall	___bmul
  7007  1406  0020               	movlb	0	; select bank0
  7008  1407  0727               	addwf	DelayTimejudge@j,w
  7009  1408  00A5               	movwf	??_DelayTimejudge+1
  7010  1409  0825               	movf	??_DelayTimejudge+1,w
  7011  140A  00A6               	movwf	DelayTimejudge@i
  7012  140B                     l7937:	
  7013                           
  7014                           ;DelayOff_B1.c: 112: }
  7015                           ;DelayOff_B1.c: 133: return i;
  7016  140B  0826               	movf	DelayTimejudge@i,w
  7017  140C  0008               	return
  7018  140D                     __end_of_DelayTimejudge:	
  7019                           
  7020                           	psect	text24
  7021  10AE                     __ptext24:	
  7022 ;; *************** function ___bmul *****************
  7023 ;; Defined at:
  7024 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  multiplier      1    wreg     unsigned char 
  7027 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7030 ;;  product         1    2[BANK0 ] unsigned char 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;                  1    wreg      unsigned char 
  7033 ;; Registers used:
  7034 ;;		wreg, status,2, status,0
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7040 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;Total ram usage:        4 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:    5
  7047 ;; This function calls:
  7048 ;;		Nothing
  7049 ;; This function is called by:
  7050 ;;		_DelayTimejudge
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           
  7055                           ;psect for function ___bmul
  7056  10AE                     ___bmul:	
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7060                           ;___bmul@multiplier stored from wreg
  7061  10AE  0020               	movlb	0	; select bank0
  7062  10AF  00A3               	movwf	___bmul@multiplier
  7063  10B0  01A2               	clrf	___bmul@product
  7064  10B1                     l7899:	
  7065  10B1  1C23               	btfss	___bmul@multiplier,0
  7066  10B2  28B7               	goto	l7903
  7067  10B3  0820               	movf	___bmul@multiplicand,w
  7068  10B4  00A1               	movwf	??___bmul
  7069  10B5  0821               	movf	??___bmul,w
  7070  10B6  07A2               	addwf	___bmul@product,f
  7071  10B7                     l7903:	
  7072  10B7  1003               	clrc
  7073  10B8  0DA0               	rlf	___bmul@multiplicand,f
  7074  10B9  1003               	clrc
  7075  10BA  0CA3               	rrf	___bmul@multiplier,f
  7076  10BB  08A3               	movf	___bmul@multiplier,f
  7077  10BC  1D03               	skipz
  7078  10BD  28B1               	goto	l7899
  7079  10BE  0822               	movf	___bmul@product,w
  7080  10BF  0008               	return
  7081  10C0                     __end_of___bmul:	
  7082                           
  7083                           	psect	text25
  7084  14FC                     __ptext25:	
  7085 ;; *************** function _setRFSW_AdjControl *****************
  7086 ;; Defined at:
  7087 ;;		line 409 in file "../src/RF_Control_B1.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  sw              1    wreg     unsigned char 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  sw              1   70[BANK0 ] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;		None               void
  7094 ;; Registers used:
  7095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        3 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:   10
  7108 ;; This function calls:
  7109 ;;		_RfSWPointSelect
  7110 ;;		_setRF_DimmerValue
  7111 ;;		_setTxData
  7112 ;; This function is called by:
  7113 ;;		_setControl_Lights_Table
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           
  7118                           ;psect for function _setRFSW_AdjControl
  7119  14FC                     _setRFSW_AdjControl:	
  7120                           
  7121                           ;incstack = 0
  7122                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7123                           ;setRFSW_AdjControl@sw stored from wreg
  7124  14FC  0020               	movlb	0	; select bank0
  7125  14FD  00E6               	movwf	setRFSW_AdjControl@sw
  7126                           
  7127                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  7128  14FE  0866               	movf	setRFSW_AdjControl@sw,w
  7129  14FF  3192  225B  3194   	fcall	_RfSWPointSelect
  7130                           
  7131                           ;RF_Control_B1.c: 411: if (RFSW->Status == 1) {
  7132  1502  0021               	movlb	1	; select bank1
  7133  1503  0862               	movf	_RFSW^(0+128),w
  7134  1504  0086               	movwf	6
  7135  1505  0187               	clrf	7
  7136  1506  1C01               	btfss	1,0
  7137  1507  2D10               	goto	l8367
  7138                           
  7139                           ;RF_Control_B1.c: 412: Memory.Modify=1;
  7140  1508  0023               	movlb	3	; select bank3
  7141  1509  1444               	bsf	(_Memory^(0+384)+36),0
  7142                           
  7143                           ;RF_Control_B1.c: 413: setRF_DimmerValue(sw);
  7144  150A  0020               	movlb	0	; select bank0
  7145  150B  0866               	movf	setRFSW_AdjControl@sw,w
  7146  150C  3194  24C7  3194   	fcall	_setRF_DimmerValue
  7147                           
  7148                           ;RF_Control_B1.c: 414: } else {
  7149  150F  2D22               	goto	l2254
  7150  1510                     l8367:	
  7151                           
  7152                           ;RF_Control_B1.c: 415: product->Data[9]=product->Data[20 + sw];
  7153  1510  0020               	movlb	0	; select bank0
  7154  1511  0866               	movf	setRFSW_AdjControl@sw,w
  7155  1512  3E14               	addlw	20
  7156  1513  076D               	addwf	_product,w
  7157  1514  00E4               	movwf	??_setRFSW_AdjControl
  7158  1515  0864               	movf	??_setRFSW_AdjControl,w
  7159  1516  0086               	movwf	6
  7160  1517  3002               	movlw	2	; select bank4/5
  7161  1518  0087               	movwf	7
  7162  1519  0801               	movf	1,w
  7163  151A  00E5               	movwf	??_setRFSW_AdjControl+1
  7164  151B  086D               	movf	_product,w
  7165  151C  3E09               	addlw	9
  7166  151D  0086               	movwf	6
  7167  151E  3002               	movlw	2	; select bank4/5
  7168  151F  0087               	movwf	7
  7169  1520  0865               	movf	??_setRFSW_AdjControl+1,w
  7170  1521  0081               	movwf	1
  7171  1522                     l2254:	
  7172                           
  7173                           ;RF_Control_B1.c: 416: }
  7174                           ;RF_Control_B1.c: 417: product->Data[17]=product->Data[26 + sw];
  7175  1522  0020               	movlb	0	; select bank0
  7176  1523  0866               	movf	setRFSW_AdjControl@sw,w
  7177  1524  3E1A               	addlw	26
  7178  1525  076D               	addwf	_product,w
  7179  1526  00E4               	movwf	??_setRFSW_AdjControl
  7180  1527  0864               	movf	??_setRFSW_AdjControl,w
  7181  1528  0086               	movwf	6
  7182  1529  3002               	movlw	2	; select bank4/5
  7183  152A  0087               	movwf	7
  7184  152B  0801               	movf	1,w
  7185  152C  00E5               	movwf	??_setRFSW_AdjControl+1
  7186  152D  086D               	movf	_product,w
  7187  152E  3E11               	addlw	17
  7188  152F  0086               	movwf	6
  7189  1530  3002               	movlw	2	; select bank4/5
  7190  1531  0087               	movwf	7
  7191  1532  0865               	movf	??_setRFSW_AdjControl+1,w
  7192  1533  0081               	movwf	1
  7193                           
  7194                           ;RF_Control_B1.c: 418: setTxData();
  7195  1534  3185  251C         	fcall	_setTxData
  7196  1536  0008               	return
  7197  1537                     __end_of_setRFSW_AdjControl:	
  7198                           
  7199                           	psect	text26
  7200  14C7                     __ptext26:	
  7201 ;; *************** function _setRF_DimmerValue *****************
  7202 ;; Defined at:
  7203 ;;		line 429 in file "../src/RF_Control_B1.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  lights          1    wreg     unsigned char 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;  lights          1   67[BANK0 ] unsigned char 
  7208 ;; Return value:  Size  Location     Type
  7209 ;;		None               void
  7210 ;; Registers used:
  7211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;Total ram usage:        3 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    9
  7224 ;; This function calls:
  7225 ;;		_setDimmerLights_AdjRF
  7226 ;; This function is called by:
  7227 ;;		_setRFSW_AdjControl
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           
  7232                           ;psect for function _setRF_DimmerValue
  7233  14C7                     _setRF_DimmerValue:	
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7237                           ;setRF_DimmerValue@lights stored from wreg
  7238  14C7  0020               	movlb	0	; select bank0
  7239  14C8  00E3               	movwf	setRF_DimmerValue@lights
  7240                           
  7241                           ;RF_Control_B1.c: 430: if (RF_Data[9] > 0x64) {
  7242  14C9  3065               	movlw	101
  7243  14CA  0021               	movlb	1	; select bank1
  7244  14CB  0229               	subwf	(_RF_Data^(0+128)+9),w
  7245  14CC  1C03               	skipc
  7246  14CD  2CD4               	goto	l8237
  7247                           
  7248                           ;RF_Control_B1.c: 431: RF_Data[9] = 0x64;
  7249  14CE  3064               	movlw	100
  7250  14CF  0020               	movlb	0	; select bank0
  7251  14D0  00E1               	movwf	??_setRF_DimmerValue
  7252  14D1  0861               	movf	??_setRF_DimmerValue,w
  7253  14D2  0021               	movlb	1	; select bank1
  7254  14D3  00A9               	movwf	(_RF_Data^(0+128)+9)
  7255  14D4                     l8237:	
  7256                           
  7257                           ;RF_Control_B1.c: 432: }
  7258                           ;RF_Control_B1.c: 433: product->Data[9]=RF_Data[9];
  7259  14D4  0829               	movf	(_RF_Data^(0+128)+9),w
  7260  14D5  0020               	movlb	0	; select bank0
  7261  14D6  00E1               	movwf	??_setRF_DimmerValue
  7262  14D7  086D               	movf	_product,w
  7263  14D8  3E09               	addlw	9
  7264  14D9  0086               	movwf	6
  7265  14DA  3002               	movlw	2	; select bank4/5
  7266  14DB  0087               	movwf	7
  7267  14DC  0861               	movf	??_setRF_DimmerValue,w
  7268  14DD  0081               	movwf	1
  7269                           
  7270                           ;RF_Control_B1.c: 434: product->Data[11]=lights;
  7271  14DE  0863               	movf	setRF_DimmerValue@lights,w
  7272  14DF  00E1               	movwf	??_setRF_DimmerValue
  7273  14E0  086D               	movf	_product,w
  7274  14E1  3E0B               	addlw	11
  7275  14E2  0086               	movwf	6
  7276  14E3  3002               	movlw	2	; select bank4/5
  7277  14E4  0087               	movwf	7
  7278  14E5  0861               	movf	??_setRF_DimmerValue,w
  7279  14E6  0081               	movwf	1
  7280                           
  7281                           ;RF_Control_B1.c: 435: product->Data[(20 + lights)]=product->Data[9];
  7282  14E7  086D               	movf	_product,w
  7283  14E8  3E09               	addlw	9
  7284  14E9  0086               	movwf	6
  7285  14EA  3002               	movlw	2	; select bank4/5
  7286  14EB  0087               	movwf	7
  7287  14EC  0801               	movf	1,w
  7288  14ED  00E1               	movwf	??_setRF_DimmerValue
  7289  14EE  0863               	movf	setRF_DimmerValue@lights,w
  7290  14EF  3E14               	addlw	20
  7291  14F0  076D               	addwf	_product,w
  7292  14F1  00E2               	movwf	??_setRF_DimmerValue+1
  7293  14F2  0862               	movf	??_setRF_DimmerValue+1,w
  7294  14F3  0086               	movwf	6
  7295  14F4  3002               	movlw	2	; select bank4/5
  7296  14F5  0087               	movwf	7
  7297  14F6  0861               	movf	??_setRF_DimmerValue,w
  7298  14F7  0081               	movwf	1
  7299                           
  7300                           ;RF_Control_B1.c: 436: setDimmerLights_AdjRF(lights);
  7301  14F8  0863               	movf	setRF_DimmerValue@lights,w
  7302  14F9  3193  2321         	fcall	_setDimmerLights_AdjRF
  7303  14FB  0008               	return
  7304  14FC                     __end_of_setRF_DimmerValue:	
  7305                           
  7306                           	psect	text27
  7307  1321                     __ptext27:	
  7308 ;; *************** function _setDimmerLights_AdjRF *****************
  7309 ;; Defined at:
  7310 ;;		line 690 in file "../src/Dimmer_B1.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  lights          1    wreg     unsigned char 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  lights          1   64[BANK0 ] unsigned char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;		None               void
  7317 ;; Registers used:
  7318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;Total ram usage:        2 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    8
  7331 ;; This function calls:
  7332 ;;		_DimmerLightsPointSelect
  7333 ;;		_getPercentValue
  7334 ;; This function is called by:
  7335 ;;		_setRF_DimmerValue
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _setDimmerLights_AdjRF
  7341  1321                     _setDimmerLights_AdjRF:	
  7342                           
  7343                           ;incstack = 0
  7344                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7345                           ;setDimmerLights_AdjRF@lights stored from wreg
  7346  1321  0020               	movlb	0	; select bank0
  7347  1322  00E0               	movwf	setDimmerLights_AdjRF@lights
  7348                           
  7349                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  7350  1323  0860               	movf	setDimmerLights_AdjRF@lights,w
  7351  1324  3191  21CA  3193   	fcall	_DimmerLightsPointSelect
  7352                           
  7353                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  7354  1327  0020               	movlb	0	; select bank0
  7355  1328  086B               	movf	_DimmerLights,w
  7356  1329  0086               	movwf	6
  7357  132A  3001               	movlw	1	; select bank2/3
  7358  132B  0087               	movwf	7
  7359  132C  1501               	bsf	1,2
  7360                           
  7361                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  7362  132D  086B               	movf	_DimmerLights,w
  7363  132E  0086               	movwf	6
  7364  132F  3001               	movlw	1	; select bank2/3
  7365  1330  0087               	movwf	7
  7366  1331  1481               	bsf	1,1
  7367                           
  7368                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7369  1332  086D               	movf	_product,w
  7370  1333  3E09               	addlw	9
  7371  1334  0086               	movwf	6
  7372  1335  3002               	movlw	2	; select bank4/5
  7373  1336  0087               	movwf	7
  7374  1337  0801               	movf	1,w
  7375  1338  3188  202D         	fcall	_getPercentValue
  7376  133A  0020               	movlb	0	; select bank0
  7377  133B  00DF               	movwf	??_setDimmerLights_AdjRF
  7378  133C  086B               	movf	_DimmerLights,w
  7379  133D  3E05               	addlw	5
  7380  133E  0086               	movwf	6
  7381  133F  3001               	movlw	1	; select bank2/3
  7382  1340  0087               	movwf	7
  7383  1341  085F               	movf	??_setDimmerLights_AdjRF,w
  7384  1342  0081               	movwf	1
  7385  1343  0008               	return
  7386  1344                     __end_of_setDimmerLights_AdjRF:	
  7387                           
  7388                           	psect	text28
  7389  082D                     __ptext28:	
  7390 ;; *************** function _getPercentValue *****************
  7391 ;; Defined at:
  7392 ;;		line 763 in file "../src/Dimmer_B1.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  value           1    wreg     unsigned char 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  value           1   59[BANK0 ] unsigned char 
  7397 ;;  i               3   60[BANK0 ] float 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      unsigned char 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0, pclath, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;Total ram usage:        6 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    7
  7414 ;; This function calls:
  7415 ;;		___awtoft
  7416 ;;		___ftadd
  7417 ;;		___ftdiv
  7418 ;;		___ftmul
  7419 ;;		___fttol
  7420 ;; This function is called by:
  7421 ;;		_setDimmerLights_AdjRF
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           
  7426                           ;psect for function _getPercentValue
  7427  082D                     _getPercentValue:	
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7431                           ;getPercentValue@value stored from wreg
  7432  082D  0020               	movlb	0	; select bank0
  7433  082E  00DB               	movwf	getPercentValue@value
  7434                           
  7435                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
  7436  082F  3000               	movlw	0
  7437  0830  00DC               	movwf	getPercentValue@i
  7438  0831  3050               	movlw	80
  7439  0832  00DD               	movwf	getPercentValue@i+1
  7440  0833  3042               	movlw	66
  7441  0834  00DE               	movwf	getPercentValue@i+2
  7442                           
  7443                           ;Dimmer_B1.c: 766: i /= 100;
  7444  0835  3000               	movlw	0
  7445  0836  00AE               	movwf	___ftdiv@f2
  7446  0837  30C8               	movlw	200
  7447  0838  00AF               	movwf	___ftdiv@f2+1
  7448  0839  3042               	movlw	66
  7449  083A  00B0               	movwf	___ftdiv@f2+2
  7450  083B  085C               	movf	getPercentValue@i,w
  7451  083C  00B1               	movwf	___ftdiv@f1
  7452  083D  085D               	movf	getPercentValue@i+1,w
  7453  083E  00B2               	movwf	___ftdiv@f1+1
  7454  083F  085E               	movf	getPercentValue@i+2,w
  7455  0840  00B3               	movwf	___ftdiv@f1+2
  7456  0841  3187  2738  3188   	fcall	___ftdiv
  7457  0844  0020               	movlb	0	; select bank0
  7458  0845  082E               	movf	?___ftdiv,w
  7459  0846  00DC               	movwf	getPercentValue@i
  7460  0847  082F               	movf	?___ftdiv+1,w
  7461  0848  00DD               	movwf	getPercentValue@i+1
  7462  0849  0830               	movf	?___ftdiv+2,w
  7463  084A  00DE               	movwf	getPercentValue@i+2
  7464                           
  7465                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-90)*0.8)));
  7466  084B  085B               	movf	getPercentValue@value,w
  7467  084C  00D9               	movwf	??_getPercentValue
  7468  084D  01DA               	clrf	??_getPercentValue+1
  7469  084E  09D9               	comf	??_getPercentValue,f
  7470  084F  09DA               	comf	??_getPercentValue+1,f
  7471  0850  0AD9               	incf	??_getPercentValue,f
  7472  0851  1903               	skipnz
  7473  0852  0ADA               	incf	??_getPercentValue+1,f
  7474  0853  0859               	movf	??_getPercentValue,w
  7475  0854  3E64               	addlw	100
  7476  0855  00A8               	movwf	___awtoft@c
  7477  0856  3000               	movlw	0
  7478  0857  3D5A               	addwfc	??_getPercentValue+1,w
  7479  0858  00A9               	movwf	___awtoft@c+1
  7480  0859  3192  22DD  3188   	fcall	___awtoft
  7481  085C  0020               	movlb	0	; select bank0
  7482  085D  0828               	movf	?___awtoft,w
  7483  085E  00B1               	movwf	___ftmul@f2
  7484  085F  0829               	movf	?___awtoft+1,w
  7485  0860  00B2               	movwf	___ftmul@f2+1
  7486  0861  082A               	movf	?___awtoft+2,w
  7487  0862  00B3               	movwf	___ftmul@f2+2
  7488  0863  085C               	movf	getPercentValue@i,w
  7489  0864  00AE               	movwf	___ftmul@f1
  7490  0865  085D               	movf	getPercentValue@i+1,w
  7491  0866  00AF               	movwf	___ftmul@f1+1
  7492  0867  085E               	movf	getPercentValue@i+2,w
  7493  0868  00B0               	movwf	___ftmul@f1+2
  7494  0869  3185  25D5  3188   	fcall	___ftmul
  7495  086C  0020               	movlb	0	; select bank0
  7496  086D  082E               	movf	?___ftmul,w
  7497  086E  00C1               	movwf	___ftadd@f2
  7498  086F  082F               	movf	?___ftmul+1,w
  7499  0870  00C2               	movwf	___ftadd@f2+1
  7500  0871  0830               	movf	?___ftmul+2,w
  7501  0872  00C3               	movwf	___ftadd@f2+2
  7502  0873  3000               	movlw	0
  7503  0874  00BE               	movwf	___ftadd@f1
  7504  0875  3000               	movlw	0
  7505  0876  00BF               	movwf	___ftadd@f1+1
  7506  0877  3041               	movlw	65
  7507  0878  00C0               	movwf	___ftadd@f1+2
  7508  0879  3183  235F  3188   	fcall	___ftadd
  7509  087C  0020               	movlb	0	; select bank0
  7510  087D  083E               	movf	?___ftadd,w
  7511  087E  00CB               	movwf	___fttol@f1
  7512  087F  083F               	movf	?___ftadd+1,w
  7513  0880  00CC               	movwf	___fttol@f1+1
  7514  0881  0840               	movf	?___ftadd+2,w
  7515  0882  00CD               	movwf	___fttol@f1+2
  7516  0883  318D  2536         	fcall	___fttol
  7517  0885  0020               	movlb	0	; select bank0
  7518  0886  084B               	movf	?___fttol,w
  7519  0887  0008               	return
  7520  0888                     __end_of_getPercentValue:	
  7521                           
  7522                           	psect	text29
  7523  05D5                     __ptext29:	
  7524 ;; *************** function ___ftmul *****************
  7525 ;; Defined at:
  7526 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  f1              3   14[BANK0 ] float 
  7529 ;;  f2              3   17[BANK0 ] float 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7532 ;;  sign            1   29[BANK0 ] unsigned char 
  7533 ;;  cntr            1   28[BANK0 ] unsigned char 
  7534 ;;  exp             1   24[BANK0 ] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  3   14[BANK0 ] float 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7544 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;Total ram usage:       16 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    6
  7551 ;; This function calls:
  7552 ;;		___ftpack
  7553 ;; This function is called by:
  7554 ;;		_getPercentValue
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           
  7559                           ;psect for function ___ftmul
  7560  05D5                     ___ftmul:	
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7564  05D5  0020               	movlb	0	; select bank0
  7565  05D6  082E               	movf	___ftmul@f1,w
  7566  05D7  00B4               	movwf	??___ftmul
  7567  05D8  082F               	movf	___ftmul@f1+1,w
  7568  05D9  00B5               	movwf	??___ftmul+1
  7569  05DA  0830               	movf	___ftmul@f1+2,w
  7570  05DB  00B6               	movwf	??___ftmul+2
  7571  05DC  1003               	clrc
  7572  05DD  0D35               	rlf	??___ftmul+1,w
  7573  05DE  0D36               	rlf	??___ftmul+2,w
  7574  05DF  00B7               	movwf	??___ftmul+3
  7575  05E0  0837               	movf	??___ftmul+3,w
  7576  05E1  00B8               	movwf	___ftmul@exp
  7577  05E2  08B8               	movf	___ftmul@exp,f
  7578  05E3  1D03               	skipz
  7579  05E4  2DEC               	goto	l5687
  7580  05E5  3000               	movlw	0
  7581  05E6  00AE               	movwf	?___ftmul
  7582  05E7  3000               	movlw	0
  7583  05E8  00AF               	movwf	?___ftmul+1
  7584  05E9  3000               	movlw	0
  7585  05EA  00B0               	movwf	?___ftmul+2
  7586  05EB  0008               	return
  7587  05EC                     l5687:	
  7588  05EC  0831               	movf	___ftmul@f2,w
  7589  05ED  00B4               	movwf	??___ftmul
  7590  05EE  0832               	movf	___ftmul@f2+1,w
  7591  05EF  00B5               	movwf	??___ftmul+1
  7592  05F0  0833               	movf	___ftmul@f2+2,w
  7593  05F1  00B6               	movwf	??___ftmul+2
  7594  05F2  1003               	clrc
  7595  05F3  0D35               	rlf	??___ftmul+1,w
  7596  05F4  0D36               	rlf	??___ftmul+2,w
  7597  05F5  00B7               	movwf	??___ftmul+3
  7598  05F6  0837               	movf	??___ftmul+3,w
  7599  05F7  00BD               	movwf	___ftmul@sign
  7600  05F8  08BD               	movf	___ftmul@sign,f
  7601  05F9  1D03               	skipz
  7602  05FA  2E02               	goto	l5693
  7603  05FB  3000               	movlw	0
  7604  05FC  00AE               	movwf	?___ftmul
  7605  05FD  3000               	movlw	0
  7606  05FE  00AF               	movwf	?___ftmul+1
  7607  05FF  3000               	movlw	0
  7608  0600  00B0               	movwf	?___ftmul+2
  7609  0601  0008               	return
  7610  0602                     l5693:	
  7611  0602  083D               	movf	___ftmul@sign,w
  7612  0603  3E7B               	addlw	123
  7613  0604  00B4               	movwf	??___ftmul
  7614  0605  0834               	movf	??___ftmul,w
  7615  0606  07B8               	addwf	___ftmul@exp,f
  7616  0607  082E               	movf	___ftmul@f1,w
  7617  0608  00B4               	movwf	??___ftmul
  7618  0609  082F               	movf	___ftmul@f1+1,w
  7619  060A  00B5               	movwf	??___ftmul+1
  7620  060B  0830               	movf	___ftmul@f1+2,w
  7621  060C  00B6               	movwf	??___ftmul+2
  7622  060D  3010               	movlw	16
  7623  060E                     u4345:	
  7624  060E  36B6               	lsrf	??___ftmul+2,f
  7625  060F  0CB5               	rrf	??___ftmul+1,f
  7626  0610  0CB4               	rrf	??___ftmul,f
  7627  0611  0B89               	decfsz	9,f
  7628  0612  2E0E               	goto	u4345
  7629  0613  0834               	movf	??___ftmul,w
  7630  0614  00B7               	movwf	??___ftmul+3
  7631  0615  0837               	movf	??___ftmul+3,w
  7632  0616  00BD               	movwf	___ftmul@sign
  7633  0617  0831               	movf	___ftmul@f2,w
  7634  0618  00B4               	movwf	??___ftmul
  7635  0619  0832               	movf	___ftmul@f2+1,w
  7636  061A  00B5               	movwf	??___ftmul+1
  7637  061B  0833               	movf	___ftmul@f2+2,w
  7638  061C  00B6               	movwf	??___ftmul+2
  7639  061D  3010               	movlw	16
  7640  061E                     u4355:	
  7641  061E  36B6               	lsrf	??___ftmul+2,f
  7642  061F  0CB5               	rrf	??___ftmul+1,f
  7643  0620  0CB4               	rrf	??___ftmul,f
  7644  0621  0B89               	decfsz	9,f
  7645  0622  2E1E               	goto	u4355
  7646  0623  0834               	movf	??___ftmul,w
  7647  0624  00B7               	movwf	??___ftmul+3
  7648  0625  0837               	movf	??___ftmul+3,w
  7649  0626  06BD               	xorwf	___ftmul@sign,f
  7650  0627  3080               	movlw	128
  7651  0628  00B4               	movwf	??___ftmul
  7652  0629  0834               	movf	??___ftmul,w
  7653  062A  05BD               	andwf	___ftmul@sign,f
  7654  062B  17AF               	bsf	___ftmul@f1+1,7
  7655  062C  17B2               	bsf	___ftmul@f2+1,7
  7656  062D  30FF               	movlw	255
  7657  062E  05B1               	andwf	___ftmul@f2,f
  7658  062F  30FF               	movlw	255
  7659  0630  05B2               	andwf	___ftmul@f2+1,f
  7660  0631  3000               	movlw	0
  7661  0632  05B3               	andwf	___ftmul@f2+2,f
  7662  0633  3000               	movlw	0
  7663  0634  00B9               	movwf	___ftmul@f3_as_product
  7664  0635  3000               	movlw	0
  7665  0636  00BA               	movwf	___ftmul@f3_as_product+1
  7666  0637  3000               	movlw	0
  7667  0638  00BB               	movwf	___ftmul@f3_as_product+2
  7668  0639  3007               	movlw	7
  7669  063A  00B4               	movwf	??___ftmul
  7670  063B  0834               	movf	??___ftmul,w
  7671  063C  00BC               	movwf	___ftmul@cntr
  7672  063D                     l5705:	
  7673  063D  1C2E               	btfss	___ftmul@f1,0
  7674  063E  2E45               	goto	l5709
  7675  063F  0831               	movf	___ftmul@f2,w
  7676  0640  07B9               	addwf	___ftmul@f3_as_product,f
  7677  0641  0832               	movf	___ftmul@f2+1,w
  7678  0642  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7679  0643  0833               	movf	___ftmul@f2+2,w
  7680  0644  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7681  0645                     l5709:	
  7682  0645  3001               	movlw	1
  7683  0646                     u4375:	
  7684  0646  36B0               	lsrf	___ftmul@f1+2,f
  7685  0647  0CAF               	rrf	___ftmul@f1+1,f
  7686  0648  0CAE               	rrf	___ftmul@f1,f
  7687  0649  0B89               	decfsz	9,f
  7688  064A  2E46               	goto	u4375
  7689  064B  3001               	movlw	1
  7690  064C                     u4385:	
  7691  064C  35B1               	lslf	___ftmul@f2,f
  7692  064D  0DB2               	rlf	___ftmul@f2+1,f
  7693  064E  0DB3               	rlf	___ftmul@f2+2,f
  7694  064F  0B89               	decfsz	9,f
  7695  0650  2E4C               	goto	u4385
  7696  0651  3001               	movlw	1
  7697  0652  02BC               	subwf	___ftmul@cntr,f
  7698  0653  1D03               	btfss	3,2
  7699  0654  2E3D               	goto	l5705
  7700  0655  3009               	movlw	9
  7701  0656  00B4               	movwf	??___ftmul
  7702  0657  0834               	movf	??___ftmul,w
  7703  0658  00BC               	movwf	___ftmul@cntr
  7704  0659                     l5717:	
  7705  0659  1C2E               	btfss	___ftmul@f1,0
  7706  065A  2E61               	goto	l5721
  7707  065B  0831               	movf	___ftmul@f2,w
  7708  065C  07B9               	addwf	___ftmul@f3_as_product,f
  7709  065D  0832               	movf	___ftmul@f2+1,w
  7710  065E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7711  065F  0833               	movf	___ftmul@f2+2,w
  7712  0660  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7713  0661                     l5721:	
  7714  0661  3001               	movlw	1
  7715  0662                     u4415:	
  7716  0662  36B0               	lsrf	___ftmul@f1+2,f
  7717  0663  0CAF               	rrf	___ftmul@f1+1,f
  7718  0664  0CAE               	rrf	___ftmul@f1,f
  7719  0665  0B89               	decfsz	9,f
  7720  0666  2E62               	goto	u4415
  7721  0667  3001               	movlw	1
  7722  0668                     u4425:	
  7723  0668  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7724  0669  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7725  066A  0CB9               	rrf	___ftmul@f3_as_product,f
  7726  066B  0B89               	decfsz	9,f
  7727  066C  2E68               	goto	u4425
  7728  066D  3001               	movlw	1
  7729  066E  02BC               	subwf	___ftmul@cntr,f
  7730  066F  1D03               	btfss	3,2
  7731  0670  2E59               	goto	l5717
  7732  0671  0839               	movf	___ftmul@f3_as_product,w
  7733  0672  00A0               	movwf	___ftpack@arg
  7734  0673  083A               	movf	___ftmul@f3_as_product+1,w
  7735  0674  00A1               	movwf	___ftpack@arg+1
  7736  0675  083B               	movf	___ftmul@f3_as_product+2,w
  7737  0676  00A2               	movwf	___ftpack@arg+2
  7738  0677  0838               	movf	___ftmul@exp,w
  7739  0678  00B4               	movwf	??___ftmul
  7740  0679  0834               	movf	??___ftmul,w
  7741  067A  00A3               	movwf	___ftpack@exp
  7742  067B  083D               	movf	___ftmul@sign,w
  7743  067C  00B5               	movwf	??___ftmul+1
  7744  067D  0835               	movf	??___ftmul+1,w
  7745  067E  00A4               	movwf	___ftpack@sign
  7746  067F  3188  20E7         	fcall	___ftpack
  7747  0681  0020               	movlb	0	; select bank0
  7748  0682  0820               	movf	?___ftpack,w
  7749  0683  00AE               	movwf	?___ftmul
  7750  0684  0821               	movf	?___ftpack+1,w
  7751  0685  00AF               	movwf	?___ftmul+1
  7752  0686  0822               	movf	?___ftpack+2,w
  7753  0687  00B0               	movwf	?___ftmul+2
  7754  0688  0008               	return
  7755  0689                     __end_of___ftmul:	
  7756                           
  7757                           	psect	text30
  7758  035F                     __ptext30:	
  7759 ;; *************** function ___ftadd *****************
  7760 ;; Defined at:
  7761 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;  f1              3   30[BANK0 ] float 
  7764 ;;  f2              3   33[BANK0 ] float 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  exp1            1   42[BANK0 ] unsigned char 
  7767 ;;  exp2            1   41[BANK0 ] unsigned char 
  7768 ;;  sign            1   40[BANK0 ] unsigned char 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  3   30[BANK0 ] float 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:       13 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		___ftpack
  7787 ;; This function is called by:
  7788 ;;		_getPercentValue
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function ___ftadd
  7794  035F                     ___ftadd:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7798  035F  0020               	movlb	0	; select bank0
  7799  0360  083E               	movf	___ftadd@f1,w
  7800  0361  00C4               	movwf	??___ftadd
  7801  0362  083F               	movf	___ftadd@f1+1,w
  7802  0363  00C5               	movwf	??___ftadd+1
  7803  0364  0840               	movf	___ftadd@f1+2,w
  7804  0365  00C6               	movwf	??___ftadd+2
  7805  0366  1003               	clrc
  7806  0367  0D45               	rlf	??___ftadd+1,w
  7807  0368  0D46               	rlf	??___ftadd+2,w
  7808  0369  00C7               	movwf	??___ftadd+3
  7809  036A  0847               	movf	??___ftadd+3,w
  7810  036B  00CA               	movwf	___ftadd@exp1
  7811  036C  0841               	movf	___ftadd@f2,w
  7812  036D  00C4               	movwf	??___ftadd
  7813  036E  0842               	movf	___ftadd@f2+1,w
  7814  036F  00C5               	movwf	??___ftadd+1
  7815  0370  0843               	movf	___ftadd@f2+2,w
  7816  0371  00C6               	movwf	??___ftadd+2
  7817  0372  1003               	clrc
  7818  0373  0D45               	rlf	??___ftadd+1,w
  7819  0374  0D46               	rlf	??___ftadd+2,w
  7820  0375  00C7               	movwf	??___ftadd+3
  7821  0376  0847               	movf	??___ftadd+3,w
  7822  0377  00C9               	movwf	___ftadd@exp2
  7823  0378  084A               	movf	___ftadd@exp1,w
  7824  0379  1903               	btfsc	3,2
  7825  037A  2B87               	goto	l5575
  7826  037B  0849               	movf	___ftadd@exp2,w
  7827  037C  024A               	subwf	___ftadd@exp1,w
  7828  037D  1803               	skipnc
  7829  037E  2B8E               	goto	l5579
  7830  037F  034A               	decf	___ftadd@exp1,w
  7831  0380  3AFF               	xorlw	255
  7832  0381  0749               	addwf	___ftadd@exp2,w
  7833  0382  00C4               	movwf	??___ftadd
  7834  0383  3019               	movlw	25
  7835  0384  0244               	subwf	??___ftadd,w
  7836  0385  1C03               	skipc
  7837  0386  2B8E               	goto	l5579
  7838  0387                     l5575:	
  7839  0387  0841               	movf	___ftadd@f2,w
  7840  0388  00BE               	movwf	?___ftadd
  7841  0389  0842               	movf	___ftadd@f2+1,w
  7842  038A  00BF               	movwf	?___ftadd+1
  7843  038B  0843               	movf	___ftadd@f2+2,w
  7844  038C  00C0               	movwf	?___ftadd+2
  7845  038D  0008               	return
  7846  038E                     l5579:	
  7847  038E  0849               	movf	___ftadd@exp2,w
  7848  038F  1903               	btfsc	3,2
  7849  0390  0008               	return
  7850  0391  084A               	movf	___ftadd@exp1,w
  7851  0392  0249               	subwf	___ftadd@exp2,w
  7852  0393  1803               	skipnc
  7853  0394  2B9D               	goto	l5585
  7854  0395  0349               	decf	___ftadd@exp2,w
  7855  0396  3AFF               	xorlw	255
  7856  0397  074A               	addwf	___ftadd@exp1,w
  7857  0398  00C4               	movwf	??___ftadd
  7858  0399  3019               	movlw	25
  7859  039A  0244               	subwf	??___ftadd,w
  7860  039B  1803               	btfsc	3,0
  7861  039C  0008               	return
  7862  039D                     l5585:	
  7863  039D  3006               	movlw	6
  7864  039E  00C4               	movwf	??___ftadd
  7865  039F  0844               	movf	??___ftadd,w
  7866  03A0  00C8               	movwf	___ftadd@sign
  7867  03A1  1BC0               	btfsc	___ftadd@f1+2,7
  7868  03A2  17C8               	bsf	___ftadd@sign,7
  7869  03A3  1BC3               	btfsc	___ftadd@f2+2,7
  7870  03A4  1748               	bsf	___ftadd@sign,6
  7871  03A5  17BF               	bsf	___ftadd@f1+1,7
  7872  03A6  30FF               	movlw	255
  7873  03A7  05BE               	andwf	___ftadd@f1,f
  7874  03A8  30FF               	movlw	255
  7875  03A9  05BF               	andwf	___ftadd@f1+1,f
  7876  03AA  3000               	movlw	0
  7877  03AB  05C0               	andwf	___ftadd@f1+2,f
  7878  03AC  17C2               	bsf	___ftadd@f2+1,7
  7879  03AD  30FF               	movlw	255
  7880  03AE  05C1               	andwf	___ftadd@f2,f
  7881  03AF  30FF               	movlw	255
  7882  03B0  05C2               	andwf	___ftadd@f2+1,f
  7883  03B1  3000               	movlw	0
  7884  03B2  05C3               	andwf	___ftadd@f2+2,f
  7885  03B3  0849               	movf	___ftadd@exp2,w
  7886  03B4  024A               	subwf	___ftadd@exp1,w
  7887  03B5  1803               	skipnc
  7888  03B6  2BD9               	goto	l5607
  7889  03B7                     l5597:	
  7890  03B7  3001               	movlw	1
  7891  03B8                     u4105:	
  7892  03B8  35C1               	lslf	___ftadd@f2,f
  7893  03B9  0DC2               	rlf	___ftadd@f2+1,f
  7894  03BA  0DC3               	rlf	___ftadd@f2+2,f
  7895  03BB  0B89               	decfsz	9,f
  7896  03BC  2BB8               	goto	u4105
  7897  03BD  3001               	movlw	1
  7898  03BE  02C9               	subwf	___ftadd@exp2,f
  7899  03BF  0849               	movf	___ftadd@exp2,w
  7900  03C0  064A               	xorwf	___ftadd@exp1,w
  7901  03C1  1903               	skipnz
  7902  03C2  2BD4               	goto	l5605
  7903  03C3  3001               	movlw	1
  7904  03C4  02C8               	subwf	___ftadd@sign,f
  7905  03C5  0848               	movf	___ftadd@sign,w
  7906  03C6  3907               	andlw	7
  7907  03C7  1903               	btfsc	3,2
  7908  03C8  2BD4               	goto	l5605
  7909  03C9  2BB7               	goto	l5597
  7910  03CA                     l5603:	
  7911  03CA  3001               	movlw	1
  7912  03CB                     u4135:	
  7913  03CB  36C0               	lsrf	___ftadd@f1+2,f
  7914  03CC  0CBF               	rrf	___ftadd@f1+1,f
  7915  03CD  0CBE               	rrf	___ftadd@f1,f
  7916  03CE  0B89               	decfsz	9,f
  7917  03CF  2BCB               	goto	u4135
  7918  03D0  3001               	movlw	1
  7919  03D1  00C4               	movwf	??___ftadd
  7920  03D2  0844               	movf	??___ftadd,w
  7921  03D3  07CA               	addwf	___ftadd@exp1,f
  7922  03D4                     l5605:	
  7923  03D4  084A               	movf	___ftadd@exp1,w
  7924  03D5  0649               	xorwf	___ftadd@exp2,w
  7925  03D6  1903               	btfsc	3,2
  7926  03D7  2BFE               	goto	l2994
  7927  03D8  2BCA               	goto	l5603
  7928  03D9                     l5607:	
  7929  03D9  084A               	movf	___ftadd@exp1,w
  7930  03DA  0249               	subwf	___ftadd@exp2,w
  7931  03DB  1803               	skipnc
  7932  03DC  2BFE               	goto	l2994
  7933  03DD                     l5609:	
  7934  03DD  3001               	movlw	1
  7935  03DE                     u4165:	
  7936  03DE  35BE               	lslf	___ftadd@f1,f
  7937  03DF  0DBF               	rlf	___ftadd@f1+1,f
  7938  03E0  0DC0               	rlf	___ftadd@f1+2,f
  7939  03E1  0B89               	decfsz	9,f
  7940  03E2  2BDE               	goto	u4165
  7941  03E3  3001               	movlw	1
  7942  03E4  02CA               	subwf	___ftadd@exp1,f
  7943  03E5  0849               	movf	___ftadd@exp2,w
  7944  03E6  064A               	xorwf	___ftadd@exp1,w
  7945  03E7  1903               	skipnz
  7946  03E8  2BFA               	goto	l5617
  7947  03E9  3001               	movlw	1
  7948  03EA  02C8               	subwf	___ftadd@sign,f
  7949  03EB  0848               	movf	___ftadd@sign,w
  7950  03EC  3907               	andlw	7
  7951  03ED  1903               	btfsc	3,2
  7952  03EE  2BFA               	goto	l5617
  7953  03EF  2BDD               	goto	l5609
  7954  03F0                     l5615:	
  7955  03F0  3001               	movlw	1
  7956  03F1                     u4195:	
  7957  03F1  36C3               	lsrf	___ftadd@f2+2,f
  7958  03F2  0CC2               	rrf	___ftadd@f2+1,f
  7959  03F3  0CC1               	rrf	___ftadd@f2,f
  7960  03F4  0B89               	decfsz	9,f
  7961  03F5  2BF1               	goto	u4195
  7962  03F6  3001               	movlw	1
  7963  03F7  00C4               	movwf	??___ftadd
  7964  03F8  0844               	movf	??___ftadd,w
  7965  03F9  07C9               	addwf	___ftadd@exp2,f
  7966  03FA                     l5617:	
  7967  03FA  084A               	movf	___ftadd@exp1,w
  7968  03FB  0649               	xorwf	___ftadd@exp2,w
  7969  03FC  1D03               	skipz
  7970  03FD  2BF0               	goto	l5615
  7971  03FE                     l2994:	
  7972  03FE  1FC8               	btfss	___ftadd@sign,7
  7973  03FF  2C10               	goto	l5621
  7974  0400  30FF               	movlw	255
  7975  0401  06BE               	xorwf	___ftadd@f1,f
  7976  0402  30FF               	movlw	255
  7977  0403  06BF               	xorwf	___ftadd@f1+1,f
  7978  0404  30FF               	movlw	255
  7979  0405  06C0               	xorwf	___ftadd@f1+2,f
  7980  0406  3001               	movlw	1
  7981  0407  07BE               	addwf	___ftadd@f1,f
  7982  0408  3000               	movlw	0
  7983  0409  1803               	skipnc
  7984  040A  3001               	movlw	1
  7985  040B  07BF               	addwf	___ftadd@f1+1,f
  7986  040C  3000               	movlw	0
  7987  040D  1803               	skipnc
  7988  040E  3001               	movlw	1
  7989  040F  07C0               	addwf	___ftadd@f1+2,f
  7990  0410                     l5621:	
  7991  0410  1F48               	btfss	___ftadd@sign,6
  7992  0411  2C22               	goto	l5625
  7993  0412  30FF               	movlw	255
  7994  0413  06C1               	xorwf	___ftadd@f2,f
  7995  0414  30FF               	movlw	255
  7996  0415  06C2               	xorwf	___ftadd@f2+1,f
  7997  0416  30FF               	movlw	255
  7998  0417  06C3               	xorwf	___ftadd@f2+2,f
  7999  0418  3001               	movlw	1
  8000  0419  07C1               	addwf	___ftadd@f2,f
  8001  041A  3000               	movlw	0
  8002  041B  1803               	skipnc
  8003  041C  3001               	movlw	1
  8004  041D  07C2               	addwf	___ftadd@f2+1,f
  8005  041E  3000               	movlw	0
  8006  041F  1803               	skipnc
  8007  0420  3001               	movlw	1
  8008  0421  07C3               	addwf	___ftadd@f2+2,f
  8009  0422                     l5625:	
  8010  0422  01C8               	clrf	___ftadd@sign
  8011  0423  083E               	movf	___ftadd@f1,w
  8012  0424  07C1               	addwf	___ftadd@f2,f
  8013  0425  083F               	movf	___ftadd@f1+1,w
  8014  0426  3DC2               	addwfc	___ftadd@f2+1,f
  8015  0427  0840               	movf	___ftadd@f1+2,w
  8016  0428  3DC3               	addwfc	___ftadd@f2+2,f
  8017  0429  1FC3               	btfss	___ftadd@f2+2,7
  8018  042A  2C3D               	goto	l5635
  8019  042B  30FF               	movlw	255
  8020  042C  06C1               	xorwf	___ftadd@f2,f
  8021  042D  30FF               	movlw	255
  8022  042E  06C2               	xorwf	___ftadd@f2+1,f
  8023  042F  30FF               	movlw	255
  8024  0430  06C3               	xorwf	___ftadd@f2+2,f
  8025  0431  3001               	movlw	1
  8026  0432  07C1               	addwf	___ftadd@f2,f
  8027  0433  3000               	movlw	0
  8028  0434  1803               	skipnc
  8029  0435  3001               	movlw	1
  8030  0436  07C2               	addwf	___ftadd@f2+1,f
  8031  0437  3000               	movlw	0
  8032  0438  1803               	skipnc
  8033  0439  3001               	movlw	1
  8034  043A  07C3               	addwf	___ftadd@f2+2,f
  8035  043B  01C8               	clrf	___ftadd@sign
  8036  043C  0AC8               	incf	___ftadd@sign,f
  8037  043D                     l5635:	
  8038  043D  0841               	movf	___ftadd@f2,w
  8039  043E  00A0               	movwf	___ftpack@arg
  8040  043F  0842               	movf	___ftadd@f2+1,w
  8041  0440  00A1               	movwf	___ftpack@arg+1
  8042  0441  0843               	movf	___ftadd@f2+2,w
  8043  0442  00A2               	movwf	___ftpack@arg+2
  8044  0443  084A               	movf	___ftadd@exp1,w
  8045  0444  00C4               	movwf	??___ftadd
  8046  0445  0844               	movf	??___ftadd,w
  8047  0446  00A3               	movwf	___ftpack@exp
  8048  0447  0848               	movf	___ftadd@sign,w
  8049  0448  00C5               	movwf	??___ftadd+1
  8050  0449  0845               	movf	??___ftadd+1,w
  8051  044A  00A4               	movwf	___ftpack@sign
  8052  044B  3188  20E7         	fcall	___ftpack
  8053  044D  0020               	movlb	0	; select bank0
  8054  044E  0820               	movf	?___ftpack,w
  8055  044F  00BE               	movwf	?___ftadd
  8056  0450  0821               	movf	?___ftpack+1,w
  8057  0451  00BF               	movwf	?___ftadd+1
  8058  0452  0822               	movf	?___ftpack+2,w
  8059  0453  00C0               	movwf	?___ftadd+2
  8060  0454  0008               	return
  8061  0455                     __end_of___ftadd:	
  8062                           
  8063                           	psect	text31
  8064  108C                     __ptext31:	
  8065 ;; *************** function _getBuz_GO *****************
  8066 ;; Defined at:
  8067 ;;		line 82 in file "../src/Buzzer_B1.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  i               2    4[BANK0 ] int 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  2    0[BANK0 ] int 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2, status,0
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8081 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;Total ram usage:        6 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    5
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_setRF_Main
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function _getBuz_GO
  8097  108C                     _getBuz_GO:	
  8098                           
  8099                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8103  108C  0021               	movlb	1	; select bank1
  8104  108D  0C47               	rrf	_Buz1^(0+128),w
  8105  108E  3901               	andlw	1
  8106  108F  0020               	movlb	0	; select bank0
  8107  1090  00A2               	movwf	??_getBuz_GO
  8108  1091  01A3               	clrf	??_getBuz_GO+1
  8109  1092  0822               	movf	??_getBuz_GO,w
  8110  1093  00A4               	movwf	getBuz_GO@i
  8111  1094  0823               	movf	??_getBuz_GO+1,w
  8112  1095  00A5               	movwf	getBuz_GO@i+1
  8113                           
  8114                           ;Buzzer_B1.c: 84: return i;
  8115  1096  0825               	movf	getBuz_GO@i+1,w
  8116  1097  01A1               	clrf	?_getBuz_GO+1
  8117  1098  07A1               	addwf	?_getBuz_GO+1,f
  8118  1099  0824               	movf	getBuz_GO@i,w
  8119  109A  01A0               	clrf	?_getBuz_GO
  8120  109B  07A0               	addwf	?_getBuz_GO,f
  8121  109C  0008               	return
  8122  109D                     __end_of_getBuz_GO:	
  8123                           
  8124                           	psect	text32
  8125  10D3                     __ptext32:	
  8126 ;; *************** function _RF_RxDisable *****************
  8127 ;; Defined at:
  8128 ;;		line 228 in file "../src/RF_Control_B1.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;		None
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;		None
  8133 ;; Return value:  Size  Location     Type
  8134 ;;		None               void
  8135 ;; Registers used:
  8136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;Total ram usage:        0 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    7
  8149 ;; This function calls:
  8150 ;;		_CC2500_WriteCommand
  8151 ;; This function is called by:
  8152 ;;		_setRF_Main
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function _RF_RxDisable
  8158  10D3                     _RF_RxDisable:	
  8159                           
  8160                           ;RF_Control_B1.c: 229: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8164  10D3  0021               	movlb	1	; select bank1
  8165  10D4  18D3               	btfsc	_RF1^(0+128),1
  8166  10D5  28D8               	goto	l2197
  8167  10D6  1DD3               	btfss	_RF1^(0+128),3
  8168  10D7  0008               	return
  8169  10D8                     l2197:	
  8170                           
  8171                           ;RF_Control_B1.c: 230: RF1.RxStatus = 0;
  8172  10D8  11D3               	bcf	_RF1^(0+128),3
  8173                           
  8174                           ;RF_Control_B1.c: 231: RF1.ReceiveGO = 0;
  8175  10D9  10D3               	bcf	_RF1^(0+128),1
  8176                           
  8177                           ;RF_Control_B1.c: 232: CC2500_WriteCommand(0x36);
  8178  10DA  3036               	movlw	54
  8179  10DB  3191  217D  3190   	fcall	_CC2500_WriteCommand
  8180                           
  8181                           ;RF_Control_B1.c: 233: CC2500_WriteCommand(0x3A);
  8182  10DE  303A               	movlw	58
  8183  10DF  3191  217D  3190   	fcall	_CC2500_WriteCommand
  8184                           
  8185                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x3B);
  8186  10E2  303B               	movlw	59
  8187  10E3  3191  217D         	fcall	_CC2500_WriteCommand
  8188  10E5  0008               	return
  8189  10E6                     __end_of_RF_RxDisable:	
  8190                           
  8191                           	psect	text33
  8192  0948                     __ptext33:	
  8193 ;; *************** function _CC2500_TxData *****************
  8194 ;; Defined at:
  8195 ;;		line 32 in file "../src/CC2500_B1.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;		None
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;		None               void
  8202 ;; Registers used:
  8203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;Total ram usage:        2 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    7
  8216 ;; This function calls:
  8217 ;;		_CC2500_WriteByte
  8218 ;;		_CC2500_WriteCommand
  8219 ;;		_Timeout_Counter
  8220 ;;		_set_TimeoutCleared
  8221 ;; This function is called by:
  8222 ;;		_setRF_Main
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _CC2500_TxData
  8228  0948                     _CC2500_TxData:	
  8229                           
  8230                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8231                           ;CC2500_B1.c: 35: RC4 = 0;
  8232                           
  8233                           ;incstack = 0
  8234                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8235  0948  0020               	movlb	0	; select bank0
  8236  0949  120E               	bcf	14,4	;volatile
  8237                           
  8238                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8239  094A  307F               	movlw	127
  8240  094B  00A4               	movwf	??_CC2500_TxData
  8241  094C  0824               	movf	??_CC2500_TxData,w
  8242  094D  00FA               	movwf	_SPI0Buffer
  8243                           
  8244                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8245  094E  2952               	goto	l8489
  8246  094F                     l8487:	
  8247                           
  8248                           ;CC2500_B1.c: 38: Timeout_Counter();
  8249  094F  3191  210E  3189   	fcall	_Timeout_Counter
  8250  0952                     l8489:	
  8251  0952  0020               	movlb	0	; select bank0
  8252  0953  1D0E               	btfss	14,2	;volatile
  8253  0954  2958               	goto	l8493
  8254  0955  0021               	movlb	1	; select bank1
  8255  0956  1D44               	btfss	(_myMain^(0+128)+15),2
  8256  0957  294F               	goto	l8487
  8257  0958                     l8493:	
  8258                           
  8259                           ;CC2500_B1.c: 39: };
  8260                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8261  0958  3190  2066  3189   	fcall	_set_TimeoutCleared
  8262                           
  8263                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8264  095B  3190  20E6  3189   	fcall	_CC2500_WriteByte
  8265                           
  8266                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8267  095E  0021               	movlb	1	; select bank1
  8268  095F  0865               	movf	_Tx_Length^(0+128),w
  8269  0960  0020               	movlb	0	; select bank0
  8270  0961  00A4               	movwf	??_CC2500_TxData
  8271  0962  0824               	movf	??_CC2500_TxData,w
  8272  0963  00FA               	movwf	_SPI0Buffer
  8273                           
  8274                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8275  0964  3190  20E6  3189   	fcall	_CC2500_WriteByte
  8276                           
  8277                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8278  0967  0020               	movlb	0	; select bank0
  8279  0968  01A5               	clrf	CC2500_TxData@loop_e
  8280  0969                     l8507:	
  8281  0969  0021               	movlb	1	; select bank1
  8282  096A  0865               	movf	_Tx_Length^(0+128),w
  8283  096B  0020               	movlb	0	; select bank0
  8284  096C  0225               	subwf	CC2500_TxData@loop_e,w
  8285  096D  1803               	btfsc	3,0
  8286  096E  2980               	goto	l279
  8287                           
  8288                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8289  096F  0825               	movf	CC2500_TxData@loop_e,w
  8290  0970  3EA0               	addlw	_RF_Data& (0+255)
  8291  0971  0086               	movwf	6
  8292  0972  0187               	clrf	7
  8293  0973  0801               	movf	1,w
  8294  0974  00A4               	movwf	??_CC2500_TxData
  8295  0975  0824               	movf	??_CC2500_TxData,w
  8296  0976  00FA               	movwf	_SPI0Buffer
  8297                           
  8298                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8299  0977  3190  20E6  3189   	fcall	_CC2500_WriteByte
  8300  097A  3001               	movlw	1
  8301  097B  0020               	movlb	0	; select bank0
  8302  097C  00A4               	movwf	??_CC2500_TxData
  8303  097D  0824               	movf	??_CC2500_TxData,w
  8304  097E  07A5               	addwf	CC2500_TxData@loop_e,f
  8305  097F  2969               	goto	l8507
  8306  0980                     l279:	
  8307                           
  8308                           ;CC2500_B1.c: 48: }
  8309                           ;CC2500_B1.c: 49: RC4 = 1;
  8310  0980  160E               	bsf	14,4	;volatile
  8311                           
  8312                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8313  0981  3035               	movlw	53
  8314  0982  3191  217D  3189   	fcall	_CC2500_WriteCommand
  8315                           
  8316                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8317  0985  2989               	goto	l8513
  8318  0986                     l8511:	
  8319                           
  8320                           ;CC2500_B1.c: 52: Timeout_Counter();
  8321  0986  3191  210E  3189   	fcall	_Timeout_Counter
  8322  0989                     l8513:	
  8323  0989  0020               	movlb	0	; select bank0
  8324  098A  180D               	btfsc	13,0	;volatile
  8325  098B  298F               	goto	l8517
  8326  098C  0021               	movlb	1	; select bank1
  8327  098D  1D44               	btfss	(_myMain^(0+128)+15),2
  8328  098E  2986               	goto	l8511
  8329  098F                     l8517:	
  8330                           
  8331                           ;CC2500_B1.c: 53: };
  8332                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8333  098F  3190  2066  3189   	fcall	_set_TimeoutCleared
  8334                           
  8335                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8336  0992  2996               	goto	l8521
  8337  0993                     l8519:	
  8338                           
  8339                           ;CC2500_B1.c: 57: Timeout_Counter();
  8340  0993  3191  210E  3189   	fcall	_Timeout_Counter
  8341  0996                     l8521:	
  8342  0996  0020               	movlb	0	; select bank0
  8343  0997  1C0D               	btfss	13,0	;volatile
  8344  0998  299C               	goto	l8525
  8345  0999  0021               	movlb	1	; select bank1
  8346  099A  1D44               	btfss	(_myMain^(0+128)+15),2
  8347  099B  2993               	goto	l8519
  8348  099C                     l8525:	
  8349                           
  8350                           ;CC2500_B1.c: 58: };
  8351                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8352  099C  3190  2066  3189   	fcall	_set_TimeoutCleared
  8353                           
  8354                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8355  099F  3036               	movlw	54
  8356  09A0  3191  217D  3189   	fcall	_CC2500_WriteCommand
  8357                           
  8358                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8359  09A3  303B               	movlw	59
  8360  09A4  3191  217D  3189   	fcall	_CC2500_WriteCommand
  8361                           
  8362                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8363  09A7  303A               	movlw	58
  8364  09A8  3191  217D         	fcall	_CC2500_WriteCommand
  8365                           
  8366                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8367  09AA  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8368  09AB  0008               	return
  8369  09AC                     __end_of_CC2500_TxData:	
  8370                           
  8371                           	psect	text34
  8372  0C3B                     __ptext34:	
  8373 ;; *************** function _CC2500_RxData *****************
  8374 ;; Defined at:
  8375 ;;		line 70 in file "../src/CC2500_B1.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;		None
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;		None               void
  8382 ;; Registers used:
  8383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;Total ram usage:        2 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    7
  8396 ;; This function calls:
  8397 ;;		_CC2500_ReadByte
  8398 ;;		_CC2500_ReadStatus
  8399 ;;		_CC2500_WriteByte
  8400 ;;		_CC2500_WriteCommand
  8401 ;;		_Timeout_Counter
  8402 ;;		_set_TimeoutCleared
  8403 ;; This function is called by:
  8404 ;;		_setRF_Main
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _CC2500_RxData
  8410  0C3B                     _CC2500_RxData:	
  8411                           
  8412                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8413                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8417  0C3B  0020               	movlb	0	; select bank0
  8418  0C3C  180D               	btfsc	13,0	;volatile
  8419  0C3D  2C42               	goto	l8541
  8420  0C3E  2C4B               	goto	l8547
  8421  0C3F                     l8539:	
  8422                           ;CC2500_B1.c: 76: {
  8423                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8424                           
  8425                           
  8426                           ;CC2500_B1.c: 78: Timeout_Counter();
  8427  0C3F  3191  210E  318C   	fcall	_Timeout_Counter
  8428  0C42                     l8541:	
  8429  0C42  0020               	movlb	0	; select bank0
  8430  0C43  1C0D               	btfss	13,0	;volatile
  8431  0C44  2C48               	goto	l8545
  8432  0C45  0021               	movlb	1	; select bank1
  8433  0C46  1D44               	btfss	(_myMain^(0+128)+15),2
  8434  0C47  2C3F               	goto	l8539
  8435  0C48                     l8545:	
  8436                           
  8437                           ;CC2500_B1.c: 79: };
  8438                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8439  0C48  3190  2066  318C   	fcall	_set_TimeoutCleared
  8440  0C4B                     l8547:	
  8441                           
  8442                           ;CC2500_B1.c: 81: }
  8443                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8444  0C4B  303B               	movlw	59
  8445  0C4C  3192  22FF  318C   	fcall	_CC2500_ReadStatus
  8446                           
  8447                           ;CC2500_B1.c: 84: if (s_data != 0) {
  8448  0C4F  0021               	movlb	1	; select bank1
  8449  0C50  0868               	movf	_s_data^(0+128),w
  8450  0C51  1903               	btfsc	3,2
  8451  0C52  0008               	return
  8452                           
  8453                           ;CC2500_B1.c: 85: RC4 = 0;
  8454  0C53  0020               	movlb	0	; select bank0
  8455  0C54  120E               	bcf	14,4	;volatile
  8456                           
  8457                           ;CC2500_B1.c: 86: SPI0Buffer = 0x3F + 0xC0;
  8458  0C55  30FF               	movlw	255
  8459  0C56  00A4               	movwf	??_CC2500_RxData
  8460  0C57  0824               	movf	??_CC2500_RxData,w
  8461  0C58  00FA               	movwf	_SPI0Buffer
  8462                           
  8463                           ;CC2500_B1.c: 87: while (RC2 == 1 && myMain.Timeout == 0) {
  8464  0C59  2C60               	goto	l8557
  8465  0C5A                     l8559:	
  8466  0C5A  0021               	movlb	1	; select bank1
  8467  0C5B  1944               	btfsc	(_myMain^(0+128)+15),2
  8468  0C5C  2C63               	goto	l304
  8469                           
  8470                           ;CC2500_B1.c: 88: Timeout_Counter();
  8471  0C5D  3191  210E  318C   	fcall	_Timeout_Counter
  8472  0C60                     l8557:	
  8473  0C60  0020               	movlb	0	; select bank0
  8474  0C61  190E               	btfsc	14,2	;volatile
  8475  0C62  2C5A               	goto	l8559
  8476  0C63                     l304:	
  8477                           
  8478                           ;CC2500_B1.c: 89: };
  8479                           ;CC2500_B1.c: 90: if (myMain.Timeout == 0) {
  8480  0C63  0021               	movlb	1	; select bank1
  8481  0C64  1944               	btfsc	(_myMain^(0+128)+15),2
  8482  0C65  2CB2               	goto	l305
  8483                           
  8484                           ;CC2500_B1.c: 91: CC2500_WriteByte();
  8485  0C66  3190  20E6  318C   	fcall	_CC2500_WriteByte
  8486                           
  8487                           ;CC2500_B1.c: 93: CC2500_ReadByte();
  8488  0C69  3191  214E  318C   	fcall	_CC2500_ReadByte
  8489                           
  8490                           ;CC2500_B1.c: 94: Rx_Length = SPI0Buffer;
  8491  0C6C  087A               	movf	_SPI0Buffer,w
  8492  0C6D  0020               	movlb	0	; select bank0
  8493  0C6E  00A4               	movwf	??_CC2500_RxData
  8494  0C6F  0824               	movf	??_CC2500_RxData,w
  8495  0C70  0021               	movlb	1	; select bank1
  8496  0C71  00E4               	movwf	_Rx_Length^(0+128)
  8497                           
  8498                           ;CC2500_B1.c: 95: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8499  0C72  0020               	movlb	0	; select bank0
  8500  0C73  01A5               	clrf	CC2500_RxData@loop_f
  8501  0C74                     l8573:	
  8502  0C74  0021               	movlb	1	; select bank1
  8503  0C75  0864               	movf	_Rx_Length^(0+128),w
  8504  0C76  0020               	movlb	0	; select bank0
  8505  0C77  0225               	subwf	CC2500_RxData@loop_f,w
  8506  0C78  1803               	btfsc	3,0
  8507  0C79  2C8B               	goto	l8575
  8508                           
  8509                           ;CC2500_B1.c: 96: CC2500_ReadByte();
  8510  0C7A  3191  214E  318C   	fcall	_CC2500_ReadByte
  8511                           
  8512                           ;CC2500_B1.c: 97: RF_Data[loop_f] = SPI0Buffer;
  8513  0C7D  087A               	movf	_SPI0Buffer,w
  8514  0C7E  0020               	movlb	0	; select bank0
  8515  0C7F  00A4               	movwf	??_CC2500_RxData
  8516  0C80  0825               	movf	CC2500_RxData@loop_f,w
  8517  0C81  3EA0               	addlw	_RF_Data& (0+255)
  8518  0C82  0086               	movwf	6
  8519  0C83  0187               	clrf	7
  8520  0C84  0824               	movf	??_CC2500_RxData,w
  8521  0C85  0081               	movwf	1
  8522  0C86  3001               	movlw	1
  8523  0C87  00A4               	movwf	??_CC2500_RxData
  8524  0C88  0824               	movf	??_CC2500_RxData,w
  8525  0C89  07A5               	addwf	CC2500_RxData@loop_f,f
  8526  0C8A  2C74               	goto	l8573
  8527  0C8B                     l8575:	
  8528                           
  8529                           ;CC2500_B1.c: 98: }
  8530                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8531  0C8B  3191  214E  318C   	fcall	_CC2500_ReadByte
  8532                           
  8533                           ;CC2500_B1.c: 100: RSSI = SPI0Buffer;
  8534  0C8E  087A               	movf	_SPI0Buffer,w
  8535  0C8F  0020               	movlb	0	; select bank0
  8536  0C90  00A4               	movwf	??_CC2500_RxData
  8537  0C91  0824               	movf	??_CC2500_RxData,w
  8538  0C92  0021               	movlb	1	; select bank1
  8539  0C93  00E3               	movwf	_RSSI^(0+128)
  8540                           
  8541                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  8542  0C94  3191  214E  318C   	fcall	_CC2500_ReadByte
  8543                           
  8544                           ;CC2500_B1.c: 102: CRC = SPI0Buffer;
  8545  0C97  087A               	movf	_SPI0Buffer,w
  8546  0C98  0020               	movlb	0	; select bank0
  8547  0C99  00A4               	movwf	??_CC2500_RxData
  8548  0C9A  0824               	movf	??_CC2500_RxData,w
  8549  0C9B  0021               	movlb	1	; select bank1
  8550  0C9C  00DD               	movwf	_CRC^(0+128)
  8551                           
  8552                           ;CC2500_B1.c: 103: RC4 = 1;
  8553  0C9D  0020               	movlb	0	; select bank0
  8554  0C9E  160E               	bsf	14,4	;volatile
  8555                           
  8556                           ;CC2500_B1.c: 104: if (CRC & 0x80)
  8557  0C9F  0021               	movlb	1	; select bank1
  8558  0CA0  1BDD               	btfsc	_CRC^(0+128),7
  8559                           
  8560                           ;CC2500_B1.c: 105: Receive_OK = 1;
  8561  0CA1  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8562                           
  8563                           ;CC2500_B1.c: 107: CC2500_WriteCommand(0x36);
  8564  0CA2  3036               	movlw	54
  8565  0CA3  3191  217D  318C   	fcall	_CC2500_WriteCommand
  8566                           
  8567                           ;CC2500_B1.c: 108: CC2500_WriteCommand(0x3A);
  8568  0CA6  303A               	movlw	58
  8569  0CA7  3191  217D  318C   	fcall	_CC2500_WriteCommand
  8570                           
  8571                           ;CC2500_B1.c: 109: CC2500_WriteCommand(0x3B);
  8572  0CAA  303B               	movlw	59
  8573  0CAB  3191  217D  318C   	fcall	_CC2500_WriteCommand
  8574                           
  8575                           ;CC2500_B1.c: 110: RF1.RxStatus = 0;
  8576  0CAE  0021               	movlb	1	; select bank1
  8577  0CAF  11D3               	bcf	_RF1^(0+128),3
  8578                           
  8579                           ;CC2500_B1.c: 111: RF1.ReceiveGO = 1;
  8580  0CB0  14D3               	bsf	_RF1^(0+128),1
  8581                           
  8582                           ;CC2500_B1.c: 112: } else {
  8583  0CB1  2CB4               	goto	l8593
  8584  0CB2                     l305:	
  8585                           
  8586                           ;CC2500_B1.c: 113: RC4 = 1;
  8587  0CB2  0020               	movlb	0	; select bank0
  8588  0CB3  160E               	bsf	14,4	;volatile
  8589  0CB4                     l8593:	
  8590                           
  8591                           ;CC2500_B1.c: 114: }
  8592                           ;CC2500_B1.c: 115: set_TimeoutCleared();
  8593  0CB4  3190  2066         	fcall	_set_TimeoutCleared
  8594  0CB6  0021               	movlb	1	; select bank1
  8595  0CB7  0008               	return
  8596  0CB8                     __end_of_CC2500_RxData:	
  8597                           
  8598                           	psect	text35
  8599  12FF                     __ptext35:	
  8600 ;; *************** function _CC2500_ReadStatus *****************
  8601 ;; Defined at:
  8602 ;;		line 306 in file "../src/CC2500_B1.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  status_addr     1    wreg     unsigned char 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;		None               void
  8609 ;; Registers used:
  8610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    6
  8623 ;; This function calls:
  8624 ;;		_CC2500_ReadByte
  8625 ;;		_CC2500_WriteByte
  8626 ;;		_Timeout_Counter
  8627 ;;		_set_TimeoutCleared
  8628 ;; This function is called by:
  8629 ;;		_CC2500_RxData
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _CC2500_ReadStatus
  8635  12FF                     _CC2500_ReadStatus:	
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8639                           ;CC2500_ReadStatus@status_addr stored from wreg
  8640  12FF  0020               	movlb	0	; select bank0
  8641  1300  00A3               	movwf	CC2500_ReadStatus@status_addr
  8642                           
  8643                           ;CC2500_B1.c: 307: RC4 = 0;
  8644  1301  120E               	bcf	14,4	;volatile
  8645                           
  8646                           ;CC2500_B1.c: 308: SPI0Buffer = status_addr + 0xC0;
  8647  1302  0823               	movf	CC2500_ReadStatus@status_addr,w
  8648  1303  3EC0               	addlw	192
  8649  1304  00A2               	movwf	??_CC2500_ReadStatus
  8650  1305  0822               	movf	??_CC2500_ReadStatus,w
  8651  1306  00FA               	movwf	_SPI0Buffer
  8652                           
  8653                           ;CC2500_B1.c: 310: while (RC2 == 1 && myMain.Timeout == 0) {
  8654  1307  2B0B               	goto	l8393
  8655  1308                     l8391:	
  8656                           
  8657                           ;CC2500_B1.c: 311: Timeout_Counter();
  8658  1308  3191  210E  3192   	fcall	_Timeout_Counter
  8659  130B                     l8393:	
  8660  130B  0020               	movlb	0	; select bank0
  8661  130C  1D0E               	btfss	14,2	;volatile
  8662  130D  2B11               	goto	l8397
  8663  130E  0021               	movlb	1	; select bank1
  8664  130F  1D44               	btfss	(_myMain^(0+128)+15),2
  8665  1310  2B08               	goto	l8391
  8666  1311                     l8397:	
  8667                           
  8668                           ;CC2500_B1.c: 312: };
  8669                           ;CC2500_B1.c: 313: set_TimeoutCleared();
  8670  1311  3190  2066  3192   	fcall	_set_TimeoutCleared
  8671                           
  8672                           ;CC2500_B1.c: 315: CC2500_WriteByte();
  8673  1314  3190  20E6  3192   	fcall	_CC2500_WriteByte
  8674                           
  8675                           ;CC2500_B1.c: 316: CC2500_ReadByte();
  8676  1317  3191  214E         	fcall	_CC2500_ReadByte
  8677                           
  8678                           ;CC2500_B1.c: 317: RC4 = 1;
  8679  1319  0020               	movlb	0	; select bank0
  8680  131A  160E               	bsf	14,4	;volatile
  8681                           
  8682                           ;CC2500_B1.c: 319: s_data = SPI0Buffer;
  8683  131B  087A               	movf	_SPI0Buffer,w
  8684  131C  00A2               	movwf	??_CC2500_ReadStatus
  8685  131D  0822               	movf	??_CC2500_ReadStatus,w
  8686  131E  0021               	movlb	1	; select bank1
  8687  131F  00E8               	movwf	_s_data^(0+128)
  8688  1320  0008               	return
  8689  1321                     __end_of_CC2500_ReadStatus:	
  8690                           
  8691                           	psect	text36
  8692  114E                     __ptext36:	
  8693 ;; *************** function _CC2500_ReadByte *****************
  8694 ;; Defined at:
  8695 ;;		line 240 in file "../src/CC2500_B1.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        2 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    5
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_CC2500_RxData
  8720 ;;		_CC2500_ReadStatus
  8721 ;;		_CC2500_ReadREG
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _CC2500_ReadByte
  8727  114E                     _CC2500_ReadByte:	
  8728                           
  8729                           ;CC2500_B1.c: 241: unsigned char loop_b;
  8730                           ;CC2500_B1.c: 242: for (loop_b = 0; loop_b < 8; loop_b++) {
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8734  114E  0020               	movlb	0	; select bank0
  8735  114F  01A1               	clrf	CC2500_ReadByte@loop_b
  8736  1150                     L7:	
  8737  1150  3008               	movlw	8
  8738  1151  0221               	subwf	CC2500_ReadByte@loop_b,w
  8739  1152  1803               	btfsc	3,0
  8740  1153  0008               	return
  8741                           
  8742                           ;CC2500_B1.c: 243: RC1 = 1;
  8743  1154  148E               	bsf	14,1	;volatile
  8744                           
  8745                           ;CC2500_B1.c: 244: SPI0Buffer <<= 1;
  8746  1155  1003               	clrc
  8747  1156  0DFA               	rlf	_SPI0Buffer,f
  8748                           
  8749                           ;CC2500_B1.c: 245: if (RC2 == 1)
  8750  1157  1D0E               	btfss	14,2	;volatile
  8751  1158  295B               	goto	l8285
  8752                           
  8753                           ;CC2500_B1.c: 246: SPI0Buffer |= 0x01;
  8754  1159  147A               	bsf	_SPI0Buffer,0
  8755  115A  295F               	goto	l8287
  8756  115B                     l8285:	
  8757                           
  8758                           ;CC2500_B1.c: 247: else
  8759                           ;CC2500_B1.c: 248: SPI0Buffer &= 0xFE;
  8760  115B  30FE               	movlw	254
  8761  115C  00A0               	movwf	??_CC2500_ReadByte
  8762  115D  0820               	movf	??_CC2500_ReadByte,w
  8763  115E  05FA               	andwf	_SPI0Buffer,f
  8764  115F                     l8287:	
  8765                           
  8766                           ;CC2500_B1.c: 249: RC1 = 0;
  8767  115F  108E               	bcf	14,1	;volatile
  8768  1160  3001               	movlw	1
  8769  1161  00A0               	movwf	??_CC2500_ReadByte
  8770  1162  0820               	movf	??_CC2500_ReadByte,w
  8771  1163  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8772  1164  2950               	goto	L7
  8773  1165                     __end_of_CC2500_ReadByte:	
  8774                           
  8775                           	psect	text37
  8776  1E7E                     __ptext37:	
  8777 ;; *************** function _RF_Initialization *****************
  8778 ;; Defined at:
  8779 ;;		line 9 in file "../src/RF_Control_B1.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;		None               void
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0, pclath, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;Total ram usage:        0 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    6
  8800 ;; This function calls:
  8801 ;;		_setRF_Initialization
  8802 ;; This function is called by:
  8803 ;;		_main
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _RF_Initialization
  8809  1E7E                     _RF_Initialization:	
  8810                           
  8811                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8815  1E7E  319F  273B         	fcall	_setRF_Initialization
  8816  1E80  0008               	return
  8817  1E81                     __end_of_RF_Initialization:	
  8818                           
  8819                           	psect	text38
  8820  1F3B                     __ptext38:	
  8821 ;; *************** function _setRF_Initialization *****************
  8822 ;; Defined at:
  8823 ;;		line 43 in file "../src/RF_Control_B1.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;		None
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;		None
  8828 ;; Return value:  Size  Location     Type
  8829 ;;		None               void
  8830 ;; Registers used:
  8831 ;;		wreg
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;Total ram usage:        1 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    5
  8844 ;; This function calls:
  8845 ;;		Nothing
  8846 ;; This function is called by:
  8847 ;;		_RF_Initialization
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function _setRF_Initialization
  8853  1F3B                     _setRF_Initialization:	
  8854                           
  8855                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8856                           
  8857                           ;incstack = 0
  8858                           ; Regs used in _setRF_Initialization: [wreg]
  8859  1F3B  3015               	movlw	21
  8860  1F3C  0020               	movlb	0	; select bank0
  8861  1F3D  00A0               	movwf	??_setRF_Initialization
  8862  1F3E  0820               	movf	??_setRF_Initialization,w
  8863  1F3F  0021               	movlb	1	; select bank1
  8864  1F40  00E5               	movwf	_Tx_Length^(0+128)
  8865                           
  8866                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  8867  1F41  3014               	movlw	20
  8868  1F42  0020               	movlb	0	; select bank0
  8869  1F43  00A0               	movwf	??_setRF_Initialization
  8870  1F44  0820               	movf	??_setRF_Initialization,w
  8871  1F45  0021               	movlb	1	; select bank1
  8872  1F46  00D9               	movwf	(_RF1^(0+128)+6)
  8873  1F47  0008               	return
  8874  1F48                     __end_of_setRF_Initialization:	
  8875                           
  8876                           	psect	text39
  8877  1F83                     __ptext39:	
  8878 ;; *************** function _Mcu_Initialization *****************
  8879 ;; Defined at:
  8880 ;;		line 30 in file "../src/MCU_B1.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:        0 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    6
  8901 ;; This function calls:
  8902 ;;		_ADC_Set
  8903 ;;		_Fosc_Set
  8904 ;;		_IOC_Set
  8905 ;;		_IO_Set
  8906 ;;		_TMR0_Set
  8907 ;; This function is called by:
  8908 ;;		_main
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           
  8913                           ;psect for function _Mcu_Initialization
  8914  1F83                     _Mcu_Initialization:	
  8915                           
  8916                           ;MCU_B1.c: 32: Fosc_Set();
  8917                           
  8918                           ;incstack = 0
  8919                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8920  1F83  319E  2690  319F   	fcall	_Fosc_Set
  8921                           
  8922                           ;MCU_B1.c: 34: IO_Set();
  8923  1F86  3191  2165  319F   	fcall	_IO_Set
  8924                           
  8925                           ;MCU_B1.c: 36: TMR0_Set();
  8926  1F89  319E  26AD  319F   	fcall	_TMR0_Set
  8927                           
  8928                           ;MCU_B1.c: 38: ;;
  8929                           ;MCU_B1.c: 40: ADC_Set();
  8930  1F8C  319E  26A6  319F   	fcall	_ADC_Set
  8931                           
  8932                           ;MCU_B1.c: 44: ;;
  8933                           ;MCU_B1.c: 46: IOC_Set();
  8934  1F8F  319F  272E         	fcall	_IOC_Set
  8935  1F91  0008               	return
  8936  1F92                     __end_of_Mcu_Initialization:	
  8937                           
  8938                           	psect	text40
  8939  1EAD                     __ptext40:	
  8940 ;; *************** function _TMR0_Set *****************
  8941 ;; Defined at:
  8942 ;;		line 126 in file "../src/MCU_B1.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, status,2
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    5
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_Mcu_Initialization
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _TMR0_Set
  8972  1EAD                     _TMR0_Set:	
  8973                           
  8974                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
  8975                           
  8976                           ;incstack = 0
  8977                           ; Regs used in _TMR0_Set: [wreg+status,2]
  8978  1EAD  0021               	movlb	1	; select bank1
  8979  1EAE  0195               	clrf	21	;volatile
  8980                           
  8981                           ;MCU_B1.c: 129: TMR0 = (256-190);
  8982  1EAF  3042               	movlw	66
  8983  1EB0  0020               	movlb	0	; select bank0
  8984  1EB1  0095               	movwf	21	;volatile
  8985                           
  8986                           ;MCU_B1.c: 130: TMR0IE = 1;
  8987  1EB2  168B               	bsf	11,5	;volatile
  8988                           
  8989                           ;MCU_B1.c: 131: GIE = 1;
  8990  1EB3  178B               	bsf	11,7	;volatile
  8991  1EB4  0008               	return
  8992  1EB5                     __end_of_TMR0_Set:	
  8993                           
  8994                           	psect	text41
  8995  1165                     __ptext41:	
  8996 ;; *************** function _IO_Set *****************
  8997 ;; Defined at:
  8998 ;;		line 60 in file "../src/MCU_B1.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;		None               void
  9005 ;; Registers used:
  9006 ;;		wreg, status,2
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;Total ram usage:        0 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    5
  9019 ;; This function calls:
  9020 ;;		Nothing
  9021 ;; This function is called by:
  9022 ;;		_Mcu_Initialization
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _IO_Set
  9028  1165                     _IO_Set:	
  9029                           
  9030                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9031                           
  9032                           ;incstack = 0
  9033                           ; Regs used in _IO_Set: [wreg+status,2]
  9034  1165  3077               	movlw	119
  9035  1166  0021               	movlb	1	; select bank1
  9036  1167  008C               	movwf	12	;volatile
  9037                           
  9038                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
  9039  1168  3005               	movlw	5
  9040  1169  008D               	movwf	13	;volatile
  9041                           
  9042                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9043  116A  300C               	movlw	12
  9044  116B  008E               	movwf	14	;volatile
  9045                           
  9046                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9047  116C  0022               	movlb	2	; select bank2
  9048  116D  018C               	clrf	12	;volatile
  9049                           
  9050                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9051  116E  018D               	clrf	13	;volatile
  9052                           
  9053                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9054  116F  018E               	clrf	14	;volatile
  9055                           
  9056                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
  9057  1170  3002               	movlw	2
  9058  1171  0023               	movlb	3	; select bank3
  9059  1172  008C               	movwf	12	;volatile
  9060                           
  9061                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9062  1173  018D               	clrf	13	;volatile
  9063                           
  9064                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9065  1174  018E               	clrf	14	;volatile
  9066                           
  9067                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9068  1175  3077               	movlw	119
  9069  1176  0020               	movlb	0	; select bank0
  9070  1177  008C               	movwf	12	;volatile
  9071                           
  9072                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
  9073  1178  3005               	movlw	5
  9074  1179  008D               	movwf	13	;volatile
  9075                           
  9076                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9077  117A  300C               	movlw	12
  9078  117B  008E               	movwf	14	;volatile
  9079  117C  0008               	return
  9080  117D                     __end_of_IO_Set:	
  9081                           
  9082                           	psect	text42
  9083  1F2E                     __ptext42:	
  9084 ;; *************** function _IOC_Set *****************
  9085 ;; Defined at:
  9086 ;;		line 263 in file "../src/MCU_B1.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;		None
  9091 ;; Return value:  Size  Location     Type
  9092 ;;		None               void
  9093 ;; Registers used:
  9094 ;;		wreg, status,2
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;Total ram usage:        0 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    5
  9107 ;; This function calls:
  9108 ;;		Nothing
  9109 ;; This function is called by:
  9110 ;;		_Mcu_Initialization
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           
  9115                           ;psect for function _IOC_Set
  9116  1F2E                     _IOC_Set:	
  9117                           
  9118                           ;MCU_B1.c: 264: WPUB2 = 0;
  9119                           
  9120                           ;incstack = 0
  9121                           ; Regs used in _IOC_Set: [wreg+status,2]
  9122  1F2E  0024               	movlb	4	; select bank4
  9123  1F2F  110D               	bcf	13,2	;volatile
  9124                           
  9125                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
  9126  1F30  3004               	movlw	4
  9127  1F31  0027               	movlb	7	; select bank7
  9128  1F32  0094               	movwf	20	;volatile
  9129                           
  9130                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
  9131  1F33  3004               	movlw	4
  9132  1F34  0095               	movwf	21	;volatile
  9133                           
  9134                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
  9135  1F35  0196               	clrf	22	;volatile
  9136                           
  9137                           ;MCU_B1.c: 284: IOCIE = 1;
  9138  1F36  158B               	bsf	11,3	;volatile
  9139                           
  9140                           ;MCU_B1.c: 285: IOCIF = 0;
  9141  1F37  100B               	bcf	11,0	;volatile
  9142                           
  9143                           ;MCU_B1.c: 286: PEIE = 1;
  9144  1F38  170B               	bsf	11,6	;volatile
  9145                           
  9146                           ;MCU_B1.c: 287: GIE = 1;
  9147  1F39  178B               	bsf	11,7	;volatile
  9148  1F3A  0008               	return
  9149  1F3B                     __end_of_IOC_Set:	
  9150                           
  9151                           	psect	text43
  9152  1E90                     __ptext43:	
  9153 ;; *************** function _Fosc_Set *****************
  9154 ;; Defined at:
  9155 ;;		line 56 in file "../src/MCU_B1.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;		None
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;		None
  9160 ;; Return value:  Size  Location     Type
  9161 ;;		None               void
  9162 ;; Registers used:
  9163 ;;		wreg
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;Total ram usage:        0 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    5
  9176 ;; This function calls:
  9177 ;;		Nothing
  9178 ;; This function is called by:
  9179 ;;		_Mcu_Initialization
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           
  9184                           ;psect for function _Fosc_Set
  9185  1E90                     _Fosc_Set:	
  9186                           
  9187                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in _Fosc_Set: [wreg]
  9191  1E90  3078               	movlw	120
  9192  1E91  0021               	movlb	1	; select bank1
  9193  1E92  0099               	movwf	25	;volatile
  9194  1E93  0008               	return
  9195  1E94                     __end_of_Fosc_Set:	
  9196                           
  9197                           	psect	text44
  9198  1EA6                     __ptext44:	
  9199 ;; *************** function _ADC_Set *****************
  9200 ;; Defined at:
  9201 ;;		line 309 in file "../src/MCU_B1.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;		None
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;		None
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;Total ram usage:        0 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    5
  9222 ;; This function calls:
  9223 ;;		Nothing
  9224 ;; This function is called by:
  9225 ;;		_Mcu_Initialization
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _ADC_Set
  9231  1EA6                     _ADC_Set:	
  9232                           
  9233                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _ADC_Set: [wreg]
  9237  1EA6  30F2               	movlw	242
  9238  1EA7  0021               	movlb	1	; select bank1
  9239  1EA8  009E               	movwf	30	;volatile
  9240                           
  9241                           ;MCU_B1.c: 311: FVRCON = 0xc0;
  9242  1EA9  30C0               	movlw	192
  9243  1EAA  0022               	movlb	2	; select bank2
  9244  1EAB  0097               	movwf	23	;volatile
  9245  1EAC  0008               	return
  9246  1EAD                     __end_of_ADC_Set:	
  9247                           
  9248                           	psect	text45
  9249  1FE0                     __ptext45:	
  9250 ;; *************** function _LED_Main *****************
  9251 ;; Defined at:
  9252 ;;		line 47 in file "../src/LED_B1.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;		None               void
  9259 ;; Registers used:
  9260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;Total ram usage:        0 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    7
  9273 ;; This function calls:
  9274 ;;		_setLED_Main
  9275 ;; This function is called by:
  9276 ;;		_main
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           
  9281                           ;psect for function _LED_Main
  9282  1FE0                     _LED_Main:	
  9283                           
  9284                           ;LED_B1.c: 49: setLED_Main(1);
  9285                           
  9286                           ;incstack = 0
  9287                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9288  1FE0  3001               	movlw	1
  9289  1FE1  3196  26C1  319F   	fcall	_setLED_Main
  9290                           
  9291                           ;LED_B1.c: 52: setLED_Main(2);
  9292  1FE4  3002               	movlw	2
  9293  1FE5  3196  26C1  319F   	fcall	_setLED_Main
  9294                           
  9295                           ;LED_B1.c: 55: setLED_Main(3);
  9296  1FE8  3003               	movlw	3
  9297  1FE9  3196  26C1  319F   	fcall	_setLED_Main
  9298                           
  9299                           ;LED_B1.c: 58: setLED_Main(99);
  9300  1FEC  3063               	movlw	99
  9301  1FED  3196  26C1         	fcall	_setLED_Main
  9302  1FEF  0008               	return
  9303  1FF0                     __end_of_LED_Main:	
  9304                           
  9305                           	psect	text46
  9306  16C1                     __ptext46:	
  9307 ;; *************** function _setLED_Main *****************
  9308 ;; Defined at:
  9309 ;;		line 192 in file "../src/LED_B1.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  led             1    wreg     unsigned char 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  led             1    4[BANK0 ] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        3 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		_LedPointSelect
  9332 ;; This function is called by:
  9333 ;;		_LED_Main
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _setLED_Main
  9339  16C1                     _setLED_Main:	
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9343                           ;setLED_Main@led stored from wreg
  9344  16C1  0020               	movlb	0	; select bank0
  9345  16C2  00A4               	movwf	setLED_Main@led
  9346                           
  9347                           ;LED_B1.c: 193: LedPointSelect(led);
  9348  16C3  0824               	movf	setLED_Main@led,w
  9349  16C4  3193  236A  3196   	fcall	_LedPointSelect
  9350                           
  9351                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9352  16C7  0879               	movf	_LED,w
  9353  16C8  0086               	movwf	6
  9354  16C9  3001               	movlw	1	; select bank2/3
  9355  16CA  0087               	movwf	7
  9356  16CB  1C81               	btfss	1,1
  9357  16CC  0008               	return
  9358                           
  9359                           ;LED_B1.c: 195: LED->Time++;
  9360  16CD  0A79               	incf	_LED,w
  9361  16CE  0086               	movwf	6
  9362  16CF  3001               	movlw	1	; select bank2/3
  9363  16D0  0087               	movwf	7
  9364  16D1  3001               	movlw	1
  9365  16D2  0781               	addwf	1,f
  9366  16D3  3141               	addfsr 1,1
  9367  16D4  1803               	skipnc
  9368  16D5  0A81               	incf	1,f
  9369                           
  9370                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9371  16D6  0A79               	incf	_LED,w
  9372  16D7  0086               	movwf	6
  9373  16D8  3001               	movlw	1	; select bank2/3
  9374  16D9  0087               	movwf	7
  9375  16DA  3F40               	moviw [0]fsr1
  9376  16DB  0020               	movlb	0	; select bank0
  9377  16DC  00A2               	movwf	??_setLED_Main
  9378  16DD  3F41               	moviw [1]fsr1
  9379  16DE  00A3               	movwf	??_setLED_Main+1
  9380  16DF  3000               	movlw	0
  9381  16E0  0223               	subwf	??_setLED_Main+1,w
  9382  16E1  3032               	movlw	50
  9383  16E2  1903               	skipnz
  9384  16E3  0222               	subwf	??_setLED_Main,w
  9385  16E4  1C03               	skipc
  9386  16E5  0008               	return
  9387                           
  9388                           ;LED_B1.c: 197: LED->Time = 0;
  9389  16E6  0A79               	incf	_LED,w
  9390  16E7  0086               	movwf	6
  9391  16E8  3001               	movlw	1	; select bank2/3
  9392  16E9  0087               	movwf	7
  9393  16EA  3000               	movlw	0
  9394  16EB  3FC0               	movwi [0]fsr1
  9395  16EC  3FC1               	movwi [1]fsr1
  9396                           
  9397                           ;LED_B1.c: 199: if (led == 1) {
  9398  16ED  0824               	movf	setLED_Main@led,w
  9399  16EE  3A01               	xorlw	1
  9400  16EF  1D03               	skipz
  9401  16F0  2EF4               	goto	l9113
  9402                           
  9403                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
  9404  16F1  3080               	movlw	128
  9405  16F2  068E               	xorwf	14,f
  9406                           
  9407                           ;LED_B1.c: 201: }
  9408  16F3  0008               	return
  9409  16F4                     l9113:	
  9410                           
  9411                           ;LED_B1.c: 204: else if (led == 2) {
  9412  16F4  0824               	movf	setLED_Main@led,w
  9413  16F5  3A02               	xorlw	2
  9414  16F6  1D03               	skipz
  9415  16F7  2EFB               	goto	l9117
  9416                           
  9417                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
  9418  16F8  3008               	movlw	8
  9419  16F9  068C               	xorwf	12,f
  9420                           
  9421                           ;LED_B1.c: 206: }
  9422  16FA  0008               	return
  9423  16FB                     l9117:	
  9424                           
  9425                           ;LED_B1.c: 209: else if (led == 3) {
  9426  16FB  0824               	movf	setLED_Main@led,w
  9427  16FC  3A03               	xorlw	3
  9428  16FD  1D03               	skipz
  9429  16FE  2F02               	goto	l9121
  9430                           
  9431                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
  9432  16FF  3040               	movlw	64
  9433  1700  068E               	xorwf	14,f
  9434                           
  9435                           ;LED_B1.c: 211: }
  9436  1701  0008               	return
  9437  1702                     l9121:	
  9438                           
  9439                           ;LED_B1.c: 214: else if (led == 99) {
  9440  1702  0824               	movf	setLED_Main@led,w
  9441  1703  3A63               	xorlw	99
  9442  1704  1D03               	skipz
  9443  1705  0008               	return
  9444                           
  9445                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9446  1706  3020               	movlw	32
  9447  1707  068D               	xorwf	13,f
  9448  1708  0008               	return
  9449  1709                     __end_of_setLED_Main:	
  9450                           
  9451                           	psect	text47
  9452  1FD0                     __ptext47:	
  9453 ;; *************** function _LED_Initialization *****************
  9454 ;; Defined at:
  9455 ;;		line 31 in file "../src/LED_B1.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;		None               void
  9462 ;; Registers used:
  9463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    8
  9476 ;; This function calls:
  9477 ;;		_setLED_Initialization
  9478 ;; This function is called by:
  9479 ;;		_main
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _LED_Initialization
  9485  1FD0                     _LED_Initialization:	
  9486                           
  9487                           ;LED_B1.c: 33: setLED_Initialization(1);
  9488                           
  9489                           ;incstack = 0
  9490                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9491  1FD0  3001               	movlw	1
  9492  1FD1  3190  207B  319F   	fcall	_setLED_Initialization
  9493                           
  9494                           ;LED_B1.c: 36: setLED_Initialization(2);
  9495  1FD4  3002               	movlw	2
  9496  1FD5  3190  207B  319F   	fcall	_setLED_Initialization
  9497                           
  9498                           ;LED_B1.c: 39: setLED_Initialization(3);
  9499  1FD8  3003               	movlw	3
  9500  1FD9  3190  207B  319F   	fcall	_setLED_Initialization
  9501                           
  9502                           ;LED_B1.c: 42: setLED_Initialization(99);
  9503  1FDC  3063               	movlw	99
  9504  1FDD  3190  207B         	fcall	_setLED_Initialization
  9505  1FDF  0008               	return
  9506  1FE0                     __end_of_LED_Initialization:	
  9507                           
  9508                           	psect	text48
  9509  107B                     __ptext48:	
  9510 ;; *************** function _setLED_Initialization *****************
  9511 ;; Defined at:
  9512 ;;		line 63 in file "../src/LED_B1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;  led             1    wreg     unsigned char 
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  led             1    4[BANK0 ] unsigned char 
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        1 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    7
  9533 ;; This function calls:
  9534 ;;		_LedPointSelect
  9535 ;;		_setLED
  9536 ;; This function is called by:
  9537 ;;		_LED_Initialization
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           
  9542                           ;psect for function _setLED_Initialization
  9543  107B                     _setLED_Initialization:	
  9544                           
  9545                           ;incstack = 0
  9546                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9547                           ;setLED_Initialization@led stored from wreg
  9548  107B  0020               	movlb	0	; select bank0
  9549  107C  00A4               	movwf	setLED_Initialization@led
  9550                           
  9551                           ;LED_B1.c: 64: LedPointSelect(led);
  9552  107D  0824               	movf	setLED_Initialization@led,w
  9553  107E  3193  236A  3190   	fcall	_LedPointSelect
  9554                           
  9555                           ;LED_B1.c: 65: LED->Enable = 1;
  9556  1081  0879               	movf	_LED,w
  9557  1082  0086               	movwf	6
  9558  1083  3001               	movlw	1	; select bank2/3
  9559  1084  0087               	movwf	7
  9560  1085  1401               	bsf	1,0
  9561                           
  9562                           ;LED_B1.c: 66: setLED(led, 0);
  9563  1086  0020               	movlb	0	; select bank0
  9564  1087  01A2               	clrf	setLED@command
  9565  1088  0824               	movf	setLED_Initialization@led,w
  9566  1089  318B  2351         	fcall	_setLED
  9567  108B  0008               	return
  9568  108C                     __end_of_setLED_Initialization:	
  9569                           
  9570                           	psect	text49
  9571  07E1                     __ptext49:	
  9572 ;; *************** function _Flash_Memory_Main *****************
  9573 ;; Defined at:
  9574 ;;		line 790 in file "../src/MCU_B1.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;		None
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;		None
  9579 ;; Return value:  Size  Location     Type
  9580 ;;		None               void
  9581 ;; Registers used:
  9582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 0/0
  9585 ;;		On exit  : 0/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;Total ram usage:        0 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:    8
  9595 ;; This function calls:
  9596 ;;		_Flash_Memory_Modify
  9597 ;; This function is called by:
  9598 ;;		_main
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function _Flash_Memory_Main
  9604  07E1                     _Flash_Memory_Main:	
  9605                           
  9606                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
  9607                           
  9608                           ;incstack = 0
  9609                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9610  07E1  0023               	movlb	3	; select bank3
  9611  07E2  1CC4               	btfss	(_Memory^(0+384)+36),1
  9612  07E3  0008               	return
  9613                           
  9614                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
  9615  07E4  1C44               	btfss	(_Memory^(0+384)+36),0
  9616  07E5  2FFE               	goto	l1407
  9617                           
  9618                           ;MCU_B1.c: 793: Memory.Time++;
  9619  07E6  3001               	movlw	1
  9620  07E7  07C2               	addwf	(_Memory^(0+384)+34),f
  9621  07E8  3000               	movlw	0
  9622  07E9  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9623                           
  9624                           ;MCU_B1.c: 794: if (Memory.Time == 25)
  9625  07EA  3022               	movlw	34
  9626  07EB  3EA0               	addlw	_Memory& (0+255)
  9627  07EC  0086               	movwf	6
  9628  07ED  3001               	movlw	1	; select bank3/4
  9629  07EE  0087               	movwf	7
  9630  07EF  3F40               	moviw [0]fsr1
  9631  07F0  3A19               	xorlw	25
  9632  07F1  1D03               	skipz
  9633  07F2  2FF5               	goto	u10315
  9634  07F3  3F41               	moviw [1]fsr1
  9635  07F4  3A00               	xorlw	0
  9636  07F5                     u10315:	
  9637  07F5  1D03               	skipz
  9638  07F6  0008               	return
  9639                           
  9640                           ;MCU_B1.c: 795: {
  9641                           ;MCU_B1.c: 796: Memory.Time = 0;
  9642  07F7  01C2               	clrf	(_Memory^(0+384)+34)
  9643  07F8  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9644                           
  9645                           ;MCU_B1.c: 797: Memory.Modify = 0;
  9646  07F9  1044               	bcf	(_Memory^(0+384)+36),0
  9647                           
  9648                           ;MCU_B1.c: 798: Memory.GO = 0;
  9649  07FA  10C4               	bcf	(_Memory^(0+384)+36),1
  9650                           
  9651                           ;MCU_B1.c: 799: Flash_Memory_Modify();
  9652  07FB  3196  2637         	fcall	_Flash_Memory_Modify
  9653                           
  9654                           ;MCU_B1.c: 800: }
  9655                           ;MCU_B1.c: 801: } else {
  9656  07FD  0008               	return
  9657  07FE                     l1407:	
  9658                           
  9659                           ;MCU_B1.c: 802: Memory.GO = 0;
  9660  07FE  10C4               	bcf	(_Memory^(0+384)+36),1
  9661  07FF  0008               	return
  9662  0800                     __end_of_Flash_Memory_Main:	
  9663                           
  9664                           	psect	text50
  9665  1637                     __ptext50:	
  9666 ;; *************** function _Flash_Memory_Modify *****************
  9667 ;; Defined at:
  9668 ;;		line 859 in file "../src/MCU_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  i               1    5[BANK0 ] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        2 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    7
  9689 ;; This function calls:
  9690 ;;		_Flash_Memory_Erasing
  9691 ;;		_Flash_Memory_Read
  9692 ;;		_Flash_Memory_Write
  9693 ;; This function is called by:
  9694 ;;		_Flash_Memory_Main
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           
  9699                           ;psect for function _Flash_Memory_Modify
  9700  1637                     _Flash_Memory_Modify:	
  9701                           
  9702                           ;MCU_B1.c: 860: char i = 0;
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9706  1637  0020               	movlb	0	; select bank0
  9707  1638  01A5               	clrf	Flash_Memory_Modify@i
  9708                           
  9709                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
  9710  1639  01A5               	clrf	Flash_Memory_Modify@i
  9711  163A  3020               	movlw	32
  9712  163B  0225               	subwf	Flash_Memory_Modify@i,w
  9713  163C  1803               	btfsc	3,0
  9714  163D  2E53               	goto	l9179
  9715  163E                     l9173:	
  9716                           
  9717                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
  9718  163E  0825               	movf	Flash_Memory_Modify@i,w
  9719  163F  3191  21B0  3196   	fcall	_Flash_Memory_Read
  9720  1642  0020               	movlb	0	; select bank0
  9721  1643  00A4               	movwf	??_Flash_Memory_Modify
  9722  1644  0825               	movf	Flash_Memory_Modify@i,w
  9723  1645  3EA0               	addlw	_Memory& (0+255)
  9724  1646  0086               	movwf	6
  9725  1647  3001               	movlw	1	; select bank3/4
  9726  1648  0087               	movwf	7
  9727  1649  0824               	movf	??_Flash_Memory_Modify,w
  9728  164A  0081               	movwf	1
  9729  164B  3001               	movlw	1
  9730  164C  00A4               	movwf	??_Flash_Memory_Modify
  9731  164D  0824               	movf	??_Flash_Memory_Modify,w
  9732  164E  07A5               	addwf	Flash_Memory_Modify@i,f
  9733  164F  3020               	movlw	32
  9734  1650  0225               	subwf	Flash_Memory_Modify@i,w
  9735  1651  1C03               	skipc
  9736  1652  2E3E               	goto	l9173
  9737  1653                     l9179:	
  9738                           
  9739                           ;MCU_B1.c: 863: }
  9740                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
  9741  1653  086D               	movf	_product,w
  9742  1654  0086               	movwf	6
  9743  1655  3002               	movlw	2	; select bank4/5
  9744  1656  0087               	movwf	7
  9745  1657  3002               	movlw	2	; select bank4/5
  9746  1658  3F4C               	moviw [12]fsr1
  9747  1659  0023               	movlb	3	; select bank3
  9748  165A  00A0               	movwf	_Memory^(0+384)
  9749                           
  9750                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
  9751  165B  0020               	movlb	0	; select bank0
  9752  165C  086D               	movf	_product,w
  9753  165D  0086               	movwf	6
  9754  165E  3002               	movlw	2	; select bank4/5
  9755  165F  0087               	movwf	7
  9756  1660  3002               	movlw	2	; select bank4/5
  9757  1661  3F4D               	moviw [13]fsr1
  9758  1662  0023               	movlb	3	; select bank3
  9759  1663  00A1               	movwf	(_Memory^(0+384)+1)
  9760                           
  9761                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
  9762  1664  0020               	movlb	0	; select bank0
  9763  1665  086D               	movf	_product,w
  9764  1666  0086               	movwf	6
  9765  1667  3002               	movlw	2	; select bank4/5
  9766  1668  0087               	movwf	7
  9767  1669  3002               	movlw	2	; select bank4/5
  9768  166A  3F4E               	moviw [14]fsr1
  9769  166B  0023               	movlb	3	; select bank3
  9770  166C  00A2               	movwf	(_Memory^(0+384)+2)
  9771                           
  9772                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
  9773  166D  1D44               	btfss	(_Memory^(0+384)+36),2
  9774  166E  2E73               	goto	l1429
  9775                           
  9776                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
  9777  166F  1144               	bcf	(_Memory^(0+384)+36),2
  9778                           
  9779                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
  9780  1670  0021               	movlb	1	; select bank1
  9781  1671  12B5               	bcf	_myMain^(0+128),5
  9782                           
  9783                           ;MCU_B1.c: 875: myMain.First = 0;
  9784  1672  13B5               	bcf	_myMain^(0+128),7
  9785  1673                     l1429:	
  9786                           
  9787                           ;MCU_B1.c: 877: }
  9788                           ;MCU_B1.c: 878: GIE = 0;
  9789  1673  138B               	bcf	11,7	;volatile
  9790                           
  9791                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
  9792  1674  319F  2709  3196   	fcall	_Flash_Memory_Erasing
  9793                           
  9794                           ;MCU_B1.c: 880: Flash_Memory_Write();
  9795  1677  3194  2466         	fcall	_Flash_Memory_Write
  9796                           
  9797                           ;MCU_B1.c: 881: GIE = 1;
  9798  1679  178B               	bsf	11,7	;volatile
  9799  167A  0008               	return
  9800  167B                     __end_of_Flash_Memory_Modify:	
  9801                           
  9802                           	psect	text51
  9803  1F09                     __ptext51:	
  9804 ;; *************** function _Flash_Memory_Erasing *****************
  9805 ;; Defined at:
  9806 ;;		line 848 in file "../src/MCU_B1.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;		None
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;		None               void
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0, pclath, cstack
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;Total ram usage:        0 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    6
  9827 ;; This function calls:
  9828 ;;		_Flash_Memory_Unlock
  9829 ;; This function is called by:
  9830 ;;		_Flash_Memory_Modify
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           
  9835                           ;psect for function _Flash_Memory_Erasing
  9836  1F09                     _Flash_Memory_Erasing:	
  9837                           
  9838                           ;MCU_B1.c: 849: CFGS = 0;
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  9842  1F09  0023               	movlb	3	; select bank3
  9843  1F0A  1315               	bcf	21,6	;volatile
  9844                           
  9845                           ;MCU_B1.c: 850: PMADRH = 0x30;
  9846  1F0B  3030               	movlw	48
  9847  1F0C  0092               	movwf	18	;volatile
  9848                           
  9849                           ;MCU_B1.c: 851: PMADRL = 0x00;
  9850  1F0D  0191               	clrf	17	;volatile
  9851                           
  9852                           ;MCU_B1.c: 852: FREE = 1;
  9853  1F0E  1615               	bsf	21,4	;volatile
  9854                           
  9855                           ;MCU_B1.c: 853: WREN = 1;
  9856  1F0F  1515               	bsf	21,2	;volatile
  9857                           
  9858                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
  9859  1F10  319E  26C5         	fcall	_Flash_Memory_Unlock
  9860                           
  9861                           ;MCU_B1.c: 855: WREN = 0;
  9862  1F12  0023               	movlb	3	; select bank3
  9863  1F13  1115               	bcf	21,2	;volatile
  9864  1F14  0008               	return
  9865  1F15                     __end_of_Flash_Memory_Erasing:	
  9866                           
  9867                           	psect	text52
  9868  0455                     __ptext52:	
  9869 ;; *************** function _Flash_Memory_Initialization *****************
  9870 ;; Defined at:
  9871 ;;		line 749 in file "../src/MCU_B1.c"
  9872 ;; Parameters:    Size  Location     Type
  9873 ;;		None
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;  i               1   62[BANK0 ] unsigned char 
  9876 ;; Return value:  Size  Location     Type
  9877 ;;		None               void
  9878 ;; Registers used:
  9879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;Total ram usage:        2 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    8
  9892 ;; This function calls:
  9893 ;;		_Flash_Memory_Read
  9894 ;;		_Flash_Memory_Write
  9895 ;;		_setPercentValue
  9896 ;; This function is called by:
  9897 ;;		_main
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           
  9902                           ;psect for function _Flash_Memory_Initialization
  9903  0455                     _Flash_Memory_Initialization:	
  9904                           
  9905                           ;MCU_B1.c: 750: char i = 0;
  9906                           
  9907                           ;incstack = 0
  9908                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9909  0455  0020               	movlb	0	; select bank0
  9910  0456  01DE               	clrf	Flash_Memory_Initialization@i
  9911                           
  9912                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
  9913  0457  301F               	movlw	31
  9914  0458  3191  21B0  3184   	fcall	_Flash_Memory_Read
  9915  045B  3AAA               	xorlw	170
  9916  045C  1D03               	skipz
  9917  045D  2CC7               	goto	l9509
  9918                           
  9919                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
  9920  045E  3000               	movlw	0
  9921  045F  3191  21B0  3184   	fcall	_Flash_Memory_Read
  9922  0462  0020               	movlb	0	; select bank0
  9923  0463  00DD               	movwf	??_Flash_Memory_Initialization
  9924  0464  086D               	movf	_product,w
  9925  0465  3E0C               	addlw	12
  9926  0466  0086               	movwf	6
  9927  0467  3002               	movlw	2	; select bank4/5
  9928  0468  0087               	movwf	7
  9929  0469  085D               	movf	??_Flash_Memory_Initialization,w
  9930  046A  0081               	movwf	1
  9931                           
  9932                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
  9933  046B  3001               	movlw	1
  9934  046C  3191  21B0  3184   	fcall	_Flash_Memory_Read
  9935  046F  0020               	movlb	0	; select bank0
  9936  0470  00DD               	movwf	??_Flash_Memory_Initialization
  9937  0471  086D               	movf	_product,w
  9938  0472  3E0D               	addlw	13
  9939  0473  0086               	movwf	6
  9940  0474  3002               	movlw	2	; select bank4/5
  9941  0475  0087               	movwf	7
  9942  0476  085D               	movf	??_Flash_Memory_Initialization,w
  9943  0477  0081               	movwf	1
  9944                           
  9945                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
  9946  0478  3002               	movlw	2
  9947  0479  3191  21B0  3184   	fcall	_Flash_Memory_Read
  9948  047C  0020               	movlb	0	; select bank0
  9949  047D  00DD               	movwf	??_Flash_Memory_Initialization
  9950  047E  086D               	movf	_product,w
  9951  047F  3E0E               	addlw	14
  9952  0480  0086               	movwf	6
  9953  0481  3002               	movlw	2	; select bank4/5
  9954  0482  0087               	movwf	7
  9955  0483  085D               	movf	??_Flash_Memory_Initialization,w
  9956  0484  0081               	movwf	1
  9957                           
  9958                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-90)*0.8)));
  9959  0485  3008               	movlw	8
  9960  0486  3196  267B  3184   	fcall	_setPercentValue
  9961  0489  0020               	movlb	0	; select bank0
  9962  048A  00DD               	movwf	??_Flash_Memory_Initialization
  9963  048B  085D               	movf	??_Flash_Memory_Initialization,w
  9964  048C  00DE               	movwf	Flash_Memory_Initialization@i
  9965                           
  9966                           ;MCU_B1.c: 761: product->Data[21] = i;
  9967  048D  085E               	movf	Flash_Memory_Initialization@i,w
  9968  048E  00DD               	movwf	??_Flash_Memory_Initialization
  9969  048F  086D               	movf	_product,w
  9970  0490  3E15               	addlw	21
  9971  0491  0086               	movwf	6
  9972  0492  3002               	movlw	2	; select bank4/5
  9973  0493  0087               	movwf	7
  9974  0494  085D               	movf	??_Flash_Memory_Initialization,w
  9975  0495  0081               	movwf	1
  9976                           
  9977                           ;MCU_B1.c: 762: product->Data[22] = i;
  9978  0496  085E               	movf	Flash_Memory_Initialization@i,w
  9979  0497  00DD               	movwf	??_Flash_Memory_Initialization
  9980  0498  086D               	movf	_product,w
  9981  0499  3E16               	addlw	22
  9982  049A  0086               	movwf	6
  9983  049B  3002               	movlw	2	; select bank4/5
  9984  049C  0087               	movwf	7
  9985  049D  085D               	movf	??_Flash_Memory_Initialization,w
  9986  049E  0081               	movwf	1
  9987                           
  9988                           ;MCU_B1.c: 763: product->Data[23] = i;
  9989  049F  085E               	movf	Flash_Memory_Initialization@i,w
  9990  04A0  00DD               	movwf	??_Flash_Memory_Initialization
  9991  04A1  086D               	movf	_product,w
  9992  04A2  3E17               	addlw	23
  9993  04A3  0086               	movwf	6
  9994  04A4  3002               	movlw	2	; select bank4/5
  9995  04A5  0087               	movwf	7
  9996  04A6  085D               	movf	??_Flash_Memory_Initialization,w
  9997  04A7  0081               	movwf	1
  9998                           
  9999                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10000  04A8  086D               	movf	_product,w
 10001  04A9  3E0C               	addlw	12
 10002  04AA  0086               	movwf	6
 10003  04AB  3002               	movlw	2	; select bank4/5
 10004  04AC  0087               	movwf	7
 10005  04AD  0801               	movf	1,w
 10006  04AE  3AFF               	xorlw	255
 10007  04AF  1D03               	skipz
 10008  04B0  0008               	return
 10009  04B1  086D               	movf	_product,w
 10010  04B2  3E0D               	addlw	13
 10011  04B3  0086               	movwf	6
 10012  04B4  3002               	movlw	2	; select bank4/5
 10013  04B5  0087               	movwf	7
 10014  04B6  0801               	movf	1,w
 10015  04B7  3AFF               	xorlw	255
 10016  04B8  1D03               	skipz
 10017  04B9  0008               	return
 10018  04BA  086D               	movf	_product,w
 10019  04BB  3E0E               	addlw	14
 10020  04BC  0086               	movwf	6
 10021  04BD  3002               	movlw	2	; select bank4/5
 10022  04BE  0087               	movwf	7
 10023  04BF  0801               	movf	1,w
 10024  04C0  3AFF               	xorlw	255
 10025  04C1  1D03               	skipz
 10026  04C2  0008               	return
 10027                           
 10028                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 10029  04C3  0021               	movlb	1	; select bank1
 10030  04C4  16B5               	bsf	_myMain^(0+128),5
 10031                           
 10032                           ;MCU_B1.c: 767: myMain.First = 1;
 10033  04C5  17B5               	bsf	_myMain^(0+128),7
 10034                           
 10035                           ;MCU_B1.c: 768: }
 10036                           ;MCU_B1.c: 769: } else {
 10037  04C6  0008               	return
 10038  04C7                     l9509:	
 10039                           
 10040                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-90)*0.8)));
 10041  04C7  3008               	movlw	8
 10042  04C8  3196  267B  3184   	fcall	_setPercentValue
 10043  04CB  0020               	movlb	0	; select bank0
 10044  04CC  00DD               	movwf	??_Flash_Memory_Initialization
 10045  04CD  085D               	movf	??_Flash_Memory_Initialization,w
 10046  04CE  00DE               	movwf	Flash_Memory_Initialization@i
 10047                           
 10048                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 10049  04CF  30FF               	movlw	255
 10050  04D0  00DD               	movwf	??_Flash_Memory_Initialization
 10051  04D1  085D               	movf	??_Flash_Memory_Initialization,w
 10052  04D2  0023               	movlb	3	; select bank3
 10053  04D3  00A0               	movwf	_Memory^(0+384)
 10054                           
 10055                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 10056  04D4  30FF               	movlw	255
 10057  04D5  0020               	movlb	0	; select bank0
 10058  04D6  00DD               	movwf	??_Flash_Memory_Initialization
 10059  04D7  085D               	movf	??_Flash_Memory_Initialization,w
 10060  04D8  0023               	movlb	3	; select bank3
 10061  04D9  00A1               	movwf	(_Memory^(0+384)+1)
 10062                           
 10063                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 10064  04DA  30FF               	movlw	255
 10065  04DB  0020               	movlb	0	; select bank0
 10066  04DC  00DD               	movwf	??_Flash_Memory_Initialization
 10067  04DD  085D               	movf	??_Flash_Memory_Initialization,w
 10068  04DE  0023               	movlb	3	; select bank3
 10069  04DF  00A2               	movwf	(_Memory^(0+384)+2)
 10070                           
 10071                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 10072  04E0  30FF               	movlw	255
 10073  04E1  0020               	movlb	0	; select bank0
 10074  04E2  00DD               	movwf	??_Flash_Memory_Initialization
 10075  04E3  085D               	movf	??_Flash_Memory_Initialization,w
 10076  04E4  0023               	movlb	3	; select bank3
 10077  04E5  00A3               	movwf	(_Memory^(0+384)+3)
 10078                           
 10079                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 10080  04E6  30FF               	movlw	255
 10081  04E7  0020               	movlb	0	; select bank0
 10082  04E8  00DD               	movwf	??_Flash_Memory_Initialization
 10083  04E9  085D               	movf	??_Flash_Memory_Initialization,w
 10084  04EA  0023               	movlb	3	; select bank3
 10085  04EB  00A4               	movwf	(_Memory^(0+384)+4)
 10086                           
 10087                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 10088  04EC  30FF               	movlw	255
 10089  04ED  0020               	movlb	0	; select bank0
 10090  04EE  00DD               	movwf	??_Flash_Memory_Initialization
 10091  04EF  085D               	movf	??_Flash_Memory_Initialization,w
 10092  04F0  0023               	movlb	3	; select bank3
 10093  04F1  00A5               	movwf	(_Memory^(0+384)+5)
 10094                           
 10095                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 10096  04F2  30AA               	movlw	170
 10097  04F3  0020               	movlb	0	; select bank0
 10098  04F4  00DD               	movwf	??_Flash_Memory_Initialization
 10099  04F5  085D               	movf	??_Flash_Memory_Initialization,w
 10100  04F6  0023               	movlb	3	; select bank3
 10101  04F7  00BF               	movwf	(_Memory^(0+384)+31)
 10102                           
 10103                           ;MCU_B1.c: 778: product->Data[21] = i;
 10104  04F8  0020               	movlb	0	; select bank0
 10105  04F9  085E               	movf	Flash_Memory_Initialization@i,w
 10106  04FA  00DD               	movwf	??_Flash_Memory_Initialization
 10107  04FB  086D               	movf	_product,w
 10108  04FC  3E15               	addlw	21
 10109  04FD  0086               	movwf	6
 10110  04FE  3002               	movlw	2	; select bank4/5
 10111  04FF  0087               	movwf	7
 10112  0500  085D               	movf	??_Flash_Memory_Initialization,w
 10113  0501  0081               	movwf	1
 10114                           
 10115                           ;MCU_B1.c: 779: product->Data[22] = i;
 10116  0502  085E               	movf	Flash_Memory_Initialization@i,w
 10117  0503  00DD               	movwf	??_Flash_Memory_Initialization
 10118  0504  086D               	movf	_product,w
 10119  0505  3E16               	addlw	22
 10120  0506  0086               	movwf	6
 10121  0507  3002               	movlw	2	; select bank4/5
 10122  0508  0087               	movwf	7
 10123  0509  085D               	movf	??_Flash_Memory_Initialization,w
 10124  050A  0081               	movwf	1
 10125                           
 10126                           ;MCU_B1.c: 780: product->Data[23] = i;
 10127  050B  085E               	movf	Flash_Memory_Initialization@i,w
 10128  050C  00DD               	movwf	??_Flash_Memory_Initialization
 10129  050D  086D               	movf	_product,w
 10130  050E  3E17               	addlw	23
 10131  050F  0086               	movwf	6
 10132  0510  3002               	movlw	2	; select bank4/5
 10133  0511  0087               	movwf	7
 10134  0512  085D               	movf	??_Flash_Memory_Initialization,w
 10135  0513  0081               	movwf	1
 10136                           
 10137                           ;MCU_B1.c: 781: GIE = 0;
 10138  0514  138B               	bcf	11,7	;volatile
 10139                           
 10140                           ;MCU_B1.c: 782: Flash_Memory_Write();
 10141  0515  3194  2466         	fcall	_Flash_Memory_Write
 10142                           
 10143                           ;MCU_B1.c: 783: GIE = 1;
 10144  0517  178B               	bsf	11,7	;volatile
 10145                           
 10146                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 10147  0518  0021               	movlb	1	; select bank1
 10148  0519  16B5               	bsf	_myMain^(0+128),5
 10149                           
 10150                           ;MCU_B1.c: 785: myMain.First = 1;
 10151  051A  17B5               	bsf	_myMain^(0+128),7
 10152  051B  0008               	return
 10153  051C                     __end_of_Flash_Memory_Initialization:	
 10154                           
 10155                           	psect	text53
 10156  1466                     __ptext53:	
 10157 ;; *************** function _Flash_Memory_Write *****************
 10158 ;; Defined at:
 10159 ;;		line 829 in file "../src/MCU_B1.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;		None
 10162 ;; Auto vars:     Size  Location     Type
 10163 ;;  i               1    1[BANK0 ] unsigned char 
 10164 ;; Return value:  Size  Location     Type
 10165 ;;		None               void
 10166 ;; Registers used:
 10167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;Total ram usage:        2 bytes
 10178 ;; Hardware stack levels used:    1
 10179 ;; Hardware stack levels required when called:    6
 10180 ;; This function calls:
 10181 ;;		_Flash_Memory_Unlock
 10182 ;; This function is called by:
 10183 ;;		_Flash_Memory_Initialization
 10184 ;;		_Flash_Memory_Modify
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           
 10189                           ;psect for function _Flash_Memory_Write
 10190  1466                     _Flash_Memory_Write:	
 10191                           
 10192                           ;MCU_B1.c: 830: char i = 0;
 10193                           
 10194                           ;incstack = 0
 10195                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10196  1466  0020               	movlb	0	; select bank0
 10197  1467  01A1               	clrf	Flash_Memory_Write@i
 10198                           
 10199                           ;MCU_B1.c: 831: CFGS = 0;
 10200  1468  0023               	movlb	3	; select bank3
 10201  1469  1315               	bcf	21,6	;volatile
 10202                           
 10203                           ;MCU_B1.c: 832: PMADRH = 0x30;
 10204  146A  3030               	movlw	48
 10205  146B  0092               	movwf	18	;volatile
 10206                           
 10207                           ;MCU_B1.c: 833: PMDATH = 0;
 10208  146C  0194               	clrf	20	;volatile
 10209                           
 10210                           ;MCU_B1.c: 834: FREE = 0;
 10211  146D  1215               	bcf	21,4	;volatile
 10212                           
 10213                           ;MCU_B1.c: 835: LWLO = 1;
 10214  146E  1695               	bsf	21,5	;volatile
 10215                           
 10216                           ;MCU_B1.c: 836: WREN = 1;
 10217  146F  1515               	bsf	21,2	;volatile
 10218                           
 10219                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 10220  1470  0020               	movlb	0	; select bank0
 10221  1471  01A1               	clrf	Flash_Memory_Write@i
 10222  1472  3020               	movlw	32
 10223  1473  0221               	subwf	Flash_Memory_Write@i,w
 10224  1474  1803               	btfsc	3,0
 10225  1475  2C8E               	goto	l1420
 10226  1476                     l8695:	
 10227                           
 10228                           ;MCU_B1.c: 838: PMADRL = i;
 10229  1476  0821               	movf	Flash_Memory_Write@i,w
 10230  1477  0023               	movlb	3	; select bank3
 10231  1478  0091               	movwf	17	;volatile
 10232                           
 10233                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 10234  1479  0020               	movlb	0	; select bank0
 10235  147A  0821               	movf	Flash_Memory_Write@i,w
 10236  147B  3EA0               	addlw	_Memory& (0+255)
 10237  147C  0086               	movwf	6
 10238  147D  3001               	movlw	1	; select bank3/4
 10239  147E  0087               	movwf	7
 10240  147F  0801               	movf	1,w
 10241  1480  0023               	movlb	3	; select bank3
 10242  1481  0093               	movwf	19	;volatile
 10243                           
 10244                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 10245  1482  319E  26C5  3194   	fcall	_Flash_Memory_Unlock
 10246  1485  3001               	movlw	1
 10247  1486  0020               	movlb	0	; select bank0
 10248  1487  00A0               	movwf	??_Flash_Memory_Write
 10249  1488  0820               	movf	??_Flash_Memory_Write,w
 10250  1489  07A1               	addwf	Flash_Memory_Write@i,f
 10251  148A  3020               	movlw	32
 10252  148B  0221               	subwf	Flash_Memory_Write@i,w
 10253  148C  1C03               	skipc
 10254  148D  2C76               	goto	l8695
 10255  148E                     l1420:	
 10256                           
 10257                           ;MCU_B1.c: 841: }
 10258                           ;MCU_B1.c: 842: LWLO = 0;
 10259  148E  0023               	movlb	3	; select bank3
 10260  148F  1295               	bcf	21,5	;volatile
 10261                           
 10262                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 10263  1490  319E  26C5         	fcall	_Flash_Memory_Unlock
 10264                           
 10265                           ;MCU_B1.c: 844: WREN = 0;
 10266  1492  0023               	movlb	3	; select bank3
 10267  1493  1115               	bcf	21,2	;volatile
 10268  1494  0008               	return
 10269  1495                     __end_of_Flash_Memory_Write:	
 10270                           
 10271                           	psect	text54
 10272  1EC5                     __ptext54:	
 10273 ;; *************** function _Flash_Memory_Unlock *****************
 10274 ;; Defined at:
 10275 ;;		line 808 in file "../src/MCU_B1.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;		None
 10280 ;; Return value:  Size  Location     Type
 10281 ;;		None               void
 10282 ;; Registers used:
 10283 ;;		wreg
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;Total ram usage:        0 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    5
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_Flash_Memory_Write
 10300 ;;		_Flash_Memory_Erasing
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           
 10305                           ;psect for function _Flash_Memory_Unlock
 10306  1EC5                     _Flash_Memory_Unlock:	
 10307                           
 10308                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 10309                           
 10310                           ;incstack = 0
 10311                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10312  1EC5  3055               	movlw	85
 10313  1EC6  0023               	movlb	3	; select bank3
 10314  1EC7  0096               	movwf	22	;volatile
 10315                           
 10316                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 10317  1EC8  30AA               	movlw	170
 10318  1EC9  0096               	movwf	22	;volatile
 10319                           
 10320                           ;MCU_B1.c: 811: WR = 1;
 10321  1ECA  1495               	bsf	21,1	;volatile
 10322                           
 10323                           ;MCU_B1.c: 812: __nop();
 10324  1ECB  0000               	nop
 10325                           
 10326                           ;MCU_B1.c: 813: __nop();
 10327  1ECC  0000               	nop
 10328  1ECD  0008               	return
 10329  1ECE                     __end_of_Flash_Memory_Unlock:	
 10330                           
 10331                           	psect	text55
 10332  11B0                     __ptext55:	
 10333 ;; *************** function _Flash_Memory_Read *****************
 10334 ;; Defined at:
 10335 ;;		line 817 in file "../src/MCU_B1.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  address         1    wreg     unsigned char 
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  address         1    2[BANK0 ] unsigned char 
 10340 ;;  ret             1    3[BANK0 ] unsigned char 
 10341 ;;  i               1    1[BANK0 ] unsigned char 
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      unsigned char 
 10344 ;; Registers used:
 10345 ;;		wreg, status,2
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;Total ram usage:        4 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    5
 10358 ;; This function calls:
 10359 ;;		Nothing
 10360 ;; This function is called by:
 10361 ;;		_Flash_Memory_Initialization
 10362 ;;		_Flash_Memory_Modify
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _Flash_Memory_Read
 10368  11B0                     _Flash_Memory_Read:	
 10369                           
 10370                           ;incstack = 0
 10371                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10372                           ;Flash_Memory_Read@address stored from wreg
 10373  11B0  0020               	movlb	0	; select bank0
 10374  11B1  00A2               	movwf	Flash_Memory_Read@address
 10375                           
 10376                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 10377  11B2  01A1               	clrf	Flash_Memory_Read@i
 10378  11B3  01A3               	clrf	Flash_Memory_Read@ret
 10379                           
 10380                           ;MCU_B1.c: 819: PMADRH = 0x30;
 10381  11B4  3030               	movlw	48
 10382  11B5  0023               	movlb	3	; select bank3
 10383  11B6  0092               	movwf	18	;volatile
 10384                           
 10385                           ;MCU_B1.c: 820: PMADRL = address;
 10386  11B7  0020               	movlb	0	; select bank0
 10387  11B8  0822               	movf	Flash_Memory_Read@address,w
 10388  11B9  0023               	movlb	3	; select bank3
 10389  11BA  0091               	movwf	17	;volatile
 10390                           
 10391                           ;MCU_B1.c: 821: CFGS = 0;
 10392  11BB  1315               	bcf	21,6	;volatile
 10393                           
 10394                           ;MCU_B1.c: 822: RD = 1;
 10395  11BC  1415               	bsf	21,0	;volatile
 10396                           
 10397                           ;MCU_B1.c: 823: i = PMDATH;
 10398  11BD  0814               	movf	20,w	;volatile
 10399  11BE  0020               	movlb	0	; select bank0
 10400  11BF  00A0               	movwf	??_Flash_Memory_Read
 10401  11C0  0820               	movf	??_Flash_Memory_Read,w
 10402  11C1  00A1               	movwf	Flash_Memory_Read@i
 10403                           
 10404                           ;MCU_B1.c: 824: ret = PMDATL;
 10405  11C2  0023               	movlb	3	; select bank3
 10406  11C3  0813               	movf	19,w	;volatile
 10407  11C4  0020               	movlb	0	; select bank0
 10408  11C5  00A0               	movwf	??_Flash_Memory_Read
 10409  11C6  0820               	movf	??_Flash_Memory_Read,w
 10410  11C7  00A3               	movwf	Flash_Memory_Read@ret
 10411                           
 10412                           ;MCU_B1.c: 825: return ret;
 10413  11C8  0823               	movf	Flash_Memory_Read@ret,w
 10414  11C9  0008               	return
 10415  11CA                     __end_of_Flash_Memory_Read:	
 10416                           
 10417                           	psect	text56
 10418  1F74                     __ptext56:	
 10419 ;; *************** function _DimmerLights_Main *****************
 10420 ;; Defined at:
 10421 ;;		line 418 in file "../src/Dimmer_B1.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;		None
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;		None               void
 10428 ;; Registers used:
 10429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:        0 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:   11
 10442 ;; This function calls:
 10443 ;;		_DimmerLights_Close
 10444 ;;		_setDimmerLights_Main
 10445 ;; This function is called by:
 10446 ;;		_main
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           
 10451                           ;psect for function _DimmerLights_Main
 10452  1F74                     _DimmerLights_Main:	
 10453                           
 10454                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 10455                           
 10456                           ;incstack = 0
 10457                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10458  1F74  3001               	movlw	1
 10459  1F75  318E  2647  319F   	fcall	_setDimmerLights_Main
 10460                           
 10461                           ;Dimmer_B1.c: 425: setDimmerLights_Main(2);
 10462  1F78  3002               	movlw	2
 10463  1F79  318E  2647  319F   	fcall	_setDimmerLights_Main
 10464                           
 10465                           ;Dimmer_B1.c: 429: setDimmerLights_Main(3);
 10466  1F7C  3003               	movlw	3
 10467  1F7D  318E  2647  319F   	fcall	_setDimmerLights_Main
 10468                           
 10469                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 10470  1F80  3190  20C0         	fcall	_DimmerLights_Close
 10471  1F82  0008               	return
 10472  1F83                     __end_of_DimmerLights_Main:	
 10473                           
 10474                           	psect	text57
 10475  0E47                     __ptext57:	
 10476 ;; *************** function _setDimmerLights_Main *****************
 10477 ;; Defined at:
 10478 ;;		line 436 in file "../src/Dimmer_B1.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  lights          1    wreg     unsigned char 
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  lights          1   74[BANK0 ] unsigned char 
 10483 ;;  clear           1   73[BANK0 ] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;		None               void
 10486 ;; Registers used:
 10487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;Total ram usage:        6 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:   10
 10500 ;; This function calls:
 10501 ;;		_DimmerLightsPointSelect
 10502 ;;		_setBuz
 10503 ;;		_setDimmerLights
 10504 ;;		_setDimmerLights_Adj
 10505 ;; This function is called by:
 10506 ;;		_DimmerLights_Main
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           
 10511                           ;psect for function _setDimmerLights_Main
 10512  0E47                     _setDimmerLights_Main:	
 10513                           
 10514                           ;incstack = 0
 10515                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10516                           ;setDimmerLights_Main@lights stored from wreg
 10517  0E47  0020               	movlb	0	; select bank0
 10518  0E48  00EA               	movwf	setDimmerLights_Main@lights
 10519                           
 10520                           ;Dimmer_B1.c: 437: char clear = 1;
 10521  0E49  01E9               	clrf	setDimmerLights_Main@clear
 10522  0E4A  0AE9               	incf	setDimmerLights_Main@clear,f
 10523                           
 10524                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 10525  0E4B  086A               	movf	setDimmerLights_Main@lights,w
 10526  0E4C  3191  21CA  318E   	fcall	_DimmerLightsPointSelect
 10527                           
 10528                           ;Dimmer_B1.c: 441: if (lights == 1) {
 10529  0E4F  0020               	movlb	0	; select bank0
 10530  0E50  086A               	movf	setDimmerLights_Main@lights,w
 10531  0E51  3A01               	xorlw	1
 10532  0E52  1D03               	skipz
 10533  0E53  2E61               	goto	l9047
 10534                           
 10535                           ;Dimmer_B1.c: 442: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10536  0E54  01E6               	clrf	_setDimmerLights_Main$2071
 10537  0E55  0022               	movlb	2	; select bank2
 10538  0E56  1D40               	btfss	(_DimmerLights2^(0+256)+9),2
 10539  0E57  2E5E               	goto	l9045
 10540  0E58  0023               	movlb	3	; select bank3
 10541  0E59  1D4E               	btfss	(_DimmerLights3^(0+384)+9),2
 10542  0E5A  2E5E               	goto	l9045
 10543  0E5B  0020               	movlb	0	; select bank0
 10544  0E5C  01E6               	clrf	_setDimmerLights_Main$2071
 10545  0E5D  0AE6               	incf	_setDimmerLights_Main$2071,f
 10546  0E5E                     l9045:	
 10547  0E5E  0020               	movlb	0	; select bank0
 10548  0E5F  0866               	movf	_setDimmerLights_Main$2071,w
 10549  0E60  2E80               	goto	L9
 10550  0E61                     l9047:	
 10551                           ;Dimmer_B1.c: 443: } else if (lights == 2) {
 10552                           
 10553  0E61  086A               	movf	setDimmerLights_Main@lights,w
 10554  0E62  3A02               	xorlw	2
 10555  0E63  1D03               	skipz
 10556  0E64  2E72               	goto	l9059
 10557                           
 10558                           ;Dimmer_B1.c: 444: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10559  0E65  01E7               	clrf	_setDimmerLights_Main$2072
 10560  0E66  0022               	movlb	2	; select bank2
 10561  0E67  1D31               	btfss	(_DimmerLights1^(0+256)+9),2
 10562  0E68  2E6F               	goto	l9057
 10563  0E69  0023               	movlb	3	; select bank3
 10564  0E6A  1D4E               	btfss	(_DimmerLights3^(0+384)+9),2
 10565  0E6B  2E6F               	goto	l9057
 10566  0E6C  0020               	movlb	0	; select bank0
 10567  0E6D  01E7               	clrf	_setDimmerLights_Main$2072
 10568  0E6E  0AE7               	incf	_setDimmerLights_Main$2072,f
 10569  0E6F                     l9057:	
 10570  0E6F  0020               	movlb	0	; select bank0
 10571  0E70  0867               	movf	_setDimmerLights_Main$2072,w
 10572  0E71  2E80               	goto	L9
 10573  0E72                     l9059:	
 10574                           ;Dimmer_B1.c: 445: } else if (lights == 3) {
 10575                           
 10576  0E72  086A               	movf	setDimmerLights_Main@lights,w
 10577  0E73  3A03               	xorlw	3
 10578  0E74  1D03               	skipz
 10579  0E75  2E83               	goto	l9071
 10580                           
 10581                           ;Dimmer_B1.c: 446: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10582  0E76  01E8               	clrf	_setDimmerLights_Main$2073
 10583  0E77  0022               	movlb	2	; select bank2
 10584  0E78  1931               	btfsc	(_DimmerLights1^(0+256)+9),2
 10585  0E79  1D40               	btfss	(_DimmerLights2^(0+256)+9),2
 10586  0E7A  2E7E               	goto	l9069
 10587  0E7B  0020               	movlb	0	; select bank0
 10588  0E7C  01E8               	clrf	_setDimmerLights_Main$2073
 10589  0E7D  0AE8               	incf	_setDimmerLights_Main$2073,f
 10590  0E7E                     l9069:	
 10591  0E7E  0020               	movlb	0	; select bank0
 10592  0E7F  0868               	movf	_setDimmerLights_Main$2073,w
 10593  0E80                     L9:	
 10594  0E80  00E5               	movwf	??_setDimmerLights_Main
 10595  0E81  0865               	movf	??_setDimmerLights_Main,w
 10596  0E82  00E9               	movwf	setDimmerLights_Main@clear
 10597  0E83                     l9071:	
 10598                           
 10599                           ;Dimmer_B1.c: 447: }
 10600                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 10601  0E83  086B               	movf	_DimmerLights,w
 10602  0E84  3E08               	addlw	8
 10603  0E85  0086               	movwf	6
 10604  0E86  3001               	movlw	1	; select bank2/3
 10605  0E87  0087               	movwf	7
 10606  0E88  1D01               	btfss	1,2
 10607  0E89  2EA7               	goto	l9081
 10608                           
 10609                           ;Dimmer_B1.c: 459: if (clear == 1) {
 10610  0E8A  0869               	movf	setDimmerLights_Main@clear,w
 10611  0E8B  3A01               	xorlw	1
 10612  0E8C  1D03               	skipz
 10613  0E8D  0008               	return
 10614                           
 10615                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 10616  0E8E  086B               	movf	_DimmerLights,w
 10617  0E8F  3E08               	addlw	8
 10618  0E90  0086               	movwf	6
 10619  0E91  3001               	movlw	1	; select bank2/3
 10620  0E92  0087               	movwf	7
 10621  0E93  1101               	bcf	1,2
 10622                           
 10623                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 10624  0E94  086B               	movf	_DimmerLights,w
 10625  0E95  3E08               	addlw	8
 10626  0E96  0086               	movwf	6
 10627  0E97  3001               	movlw	1	; select bank2/3
 10628  0E98  0087               	movwf	7
 10629  0E99  1C81               	btfss	1,1
 10630  0E9A  2EA1               	goto	l9079
 10631                           
 10632                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 10633  0E9B  01A4               	clrf	setDimmerLights@status
 10634  0E9C  0AA4               	incf	setDimmerLights@status,f
 10635  0E9D  086A               	movf	setDimmerLights_Main@lights,w
 10636  0E9E  318C  24B8         	fcall	_setDimmerLights
 10637                           
 10638                           ;Dimmer_B1.c: 463: } else {
 10639  0EA0  0008               	return
 10640  0EA1                     l9079:	
 10641                           
 10642                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 10643  0EA1  0020               	movlb	0	; select bank0
 10644  0EA2  01A4               	clrf	setDimmerLights@status
 10645  0EA3  086A               	movf	setDimmerLights_Main@lights,w
 10646  0EA4  318C  24B8         	fcall	_setDimmerLights
 10647                           
 10648                           ;Dimmer_B1.c: 465: }
 10649                           ;Dimmer_B1.c: 469: }
 10650                           ;Dimmer_B1.c: 470: } else {
 10651  0EA6  0008               	return
 10652  0EA7                     l9081:	
 10653                           
 10654                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 10655  0EA7  0020               	movlb	0	; select bank0
 10656  0EA8  086B               	movf	_DimmerLights,w
 10657  0EA9  3E08               	addlw	8
 10658  0EAA  0086               	movwf	6
 10659  0EAB  3001               	movlw	1	; select bank2/3
 10660  0EAC  0087               	movwf	7
 10661  0EAD  1E01               	btfss	1,4
 10662  0EAE  0008               	return
 10663                           
 10664                           ;Dimmer_B1.c: 472: if (clear == 1) {
 10665  0EAF  0869               	movf	setDimmerLights_Main@clear,w
 10666  0EB0  3A01               	xorlw	1
 10667  0EB1  1D03               	skipz
 10668  0EB2  0008               	return
 10669                           
 10670                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 10671  0EB3  086B               	movf	_DimmerLights,w
 10672  0EB4  3E08               	addlw	8
 10673  0EB5  0086               	movwf	6
 10674  0EB6  3001               	movlw	1	; select bank2/3
 10675  0EB7  0087               	movwf	7
 10676  0EB8  1201               	bcf	1,4
 10677                           
 10678                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 10679  0EB9  086B               	movf	_DimmerLights,w
 10680  0EBA  3E08               	addlw	8
 10681  0EBB  0086               	movwf	6
 10682  0EBC  3001               	movlw	1	; select bank2/3
 10683  0EBD  0087               	movwf	7
 10684  0EBE  1D81               	btfss	1,3
 10685  0EBF  2ECF               	goto	l9091
 10686                           
 10687                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 10688  0EC0  01E2               	clrf	setDimmerLights_Adj@status
 10689  0EC1  0AE2               	incf	setDimmerLights_Adj@status,f
 10690  0EC2  086A               	movf	setDimmerLights_Main@lights,w
 10691  0EC3  3195  2537  318E   	fcall	_setDimmerLights_Adj
 10692                           
 10693                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 10694  0EC6  3064               	movlw	100
 10695  0EC7  0020               	movlb	0	; select bank0
 10696  0EC8  00A9               	movwf	setBuz@time
 10697  0EC9  3000               	movlw	0
 10698  0ECA  00AA               	movwf	setBuz@time+1
 10699  0ECB  3001               	movlw	1
 10700  0ECC  3197  27A7         	fcall	_setBuz
 10701                           
 10702                           ;Dimmer_B1.c: 477: } else {
 10703  0ECE  0008               	return
 10704  0ECF                     l9091:	
 10705                           
 10706                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 10707  0ECF  0020               	movlb	0	; select bank0
 10708  0ED0  01E2               	clrf	setDimmerLights_Adj@status
 10709  0ED1  086A               	movf	setDimmerLights_Main@lights,w
 10710  0ED2  3195  2537         	fcall	_setDimmerLights_Adj
 10711  0ED4  0008               	return
 10712  0ED5                     __end_of_setDimmerLights_Main:	
 10713                           
 10714                           	psect	text58
 10715  1537                     __ptext58:	
 10716 ;; *************** function _setDimmerLights_Adj *****************
 10717 ;; Defined at:
 10718 ;;		line 657 in file "../src/Dimmer_B1.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;  lights          1    wreg     unsigned char 
 10721 ;;  status          1   66[BANK0 ] unsigned char 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;  lights          1   68[BANK0 ] unsigned char 
 10724 ;; Return value:  Size  Location     Type
 10725 ;;		None               void
 10726 ;; Registers used:
 10727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10733 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;Total ram usage:        3 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    9
 10740 ;; This function calls:
 10741 ;;		_DimmerLightsPointSelect
 10742 ;;		_setRF_DimmerLights
 10743 ;;		_setTxData
 10744 ;; This function is called by:
 10745 ;;		_setDimmerLights_Main
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           
 10750                           ;psect for function _setDimmerLights_Adj
 10751  1537                     _setDimmerLights_Adj:	
 10752                           
 10753                           ;incstack = 0
 10754                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10755                           ;setDimmerLights_Adj@lights stored from wreg
 10756  1537  0020               	movlb	0	; select bank0
 10757  1538  00E4               	movwf	setDimmerLights_Adj@lights
 10758                           
 10759                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 10760  1539  0864               	movf	setDimmerLights_Adj@lights,w
 10761  153A  3191  21CA  3195   	fcall	_DimmerLightsPointSelect
 10762                           
 10763                           ;Dimmer_B1.c: 659: if (status == 1) {
 10764  153D  0020               	movlb	0	; select bank0
 10765  153E  0862               	movf	setDimmerLights_Adj@status,w
 10766  153F  3A01               	xorlw	1
 10767  1540  1D03               	skipz
 10768  1541  2D4D               	goto	l8649
 10769                           
 10770                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 10771  1542  086B               	movf	_DimmerLights,w
 10772  1543  0086               	movwf	6
 10773  1544  3001               	movlw	1	; select bank2/3
 10774  1545  0087               	movwf	7
 10775  1546  1581               	bsf	1,3
 10776                           
 10777                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 10778  1547  086B               	movf	_DimmerLights,w
 10779  1548  0086               	movwf	6
 10780  1549  3001               	movlw	1	; select bank2/3
 10781  154A  0087               	movwf	7
 10782  154B  1481               	bsf	1,1
 10783                           
 10784                           ;Dimmer_B1.c: 662: } else {
 10785  154C  0008               	return
 10786  154D                     l8649:	
 10787                           
 10788                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 10789  154D  086B               	movf	_DimmerLights,w
 10790  154E  0086               	movwf	6
 10791  154F  3001               	movlw	1	; select bank2/3
 10792  1550  0087               	movwf	7
 10793  1551  1D81               	btfss	1,3
 10794  1552  0008               	return
 10795                           
 10796                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 10797  1553  086B               	movf	_DimmerLights,w
 10798  1554  0086               	movwf	6
 10799  1555  3001               	movlw	1	; select bank2/3
 10800  1556  0087               	movwf	7
 10801  1557  1081               	bcf	1,1
 10802                           
 10803                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 10804  1558  086B               	movf	_DimmerLights,w
 10805  1559  0086               	movwf	6
 10806  155A  3001               	movlw	1	; select bank2/3
 10807  155B  0087               	movwf	7
 10808  155C  1181               	bcf	1,3
 10809                           
 10810                           ;Dimmer_B1.c: 667: ;;
 10811                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10812  155D  086B               	movf	_DimmerLights,w
 10813  155E  3E04               	addlw	4
 10814  155F  0086               	movwf	6
 10815  1560  3001               	movlw	1	; select bank2/3
 10816  1561  0087               	movwf	7
 10817  1562  0801               	movf	1,w
 10818  1563  00E3               	movwf	??_setDimmerLights_Adj
 10819  1564  086B               	movf	_DimmerLights,w
 10820  1565  3E05               	addlw	5
 10821  1566  0086               	movwf	6
 10822  1567  3001               	movlw	1	; select bank2/3
 10823  1568  0087               	movwf	7
 10824  1569  0863               	movf	??_setDimmerLights_Adj,w
 10825  156A  0081               	movwf	1
 10826                           
 10827                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 10828  156B  01DD               	clrf	setRF_DimmerLights@on
 10829  156C  0ADD               	incf	setRF_DimmerLights@on,f
 10830  156D  0864               	movf	setDimmerLights_Adj@lights,w
 10831  156E  318A  2276  3195   	fcall	_setRF_DimmerLights
 10832                           
 10833                           ;Dimmer_B1.c: 677: setTxData();
 10834  1571  3185  251C         	fcall	_setTxData
 10835  1573  0008               	return
 10836  1574                     __end_of_setDimmerLights_Adj:	
 10837                           
 10838                           	psect	text59
 10839  0CB8                     __ptext59:	
 10840 ;; *************** function _setDimmerLights *****************
 10841 ;; Defined at:
 10842 ;;		line 604 in file "../src/Dimmer_B1.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;  lights          1    wreg     unsigned char 
 10845 ;;  status          1    4[BANK0 ] unsigned char 
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;  lights          1    6[BANK0 ] unsigned char 
 10848 ;; Return value:  Size  Location     Type
 10849 ;;		None               void
 10850 ;; Registers used:
 10851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10857 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;Total ram usage:        3 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; Hardware stack levels required when called:    7
 10864 ;; This function calls:
 10865 ;;		_DimmerLightsPointSelect
 10866 ;;		_setLED
 10867 ;;		_setMemory_GO
 10868 ;; This function is called by:
 10869 ;;		_setDimmerLights_Main
 10870 ;;		_setControl_Lights_Table
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           
 10875                           ;psect for function _setDimmerLights
 10876  0CB8                     _setDimmerLights:	
 10877                           
 10878                           ;incstack = 0
 10879                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10880                           ;setDimmerLights@lights stored from wreg
 10881  0CB8  0020               	movlb	0	; select bank0
 10882  0CB9  00A6               	movwf	setDimmerLights@lights
 10883                           
 10884                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 10885  0CBA  0826               	movf	setDimmerLights@lights,w
 10886  0CBB  3191  21CA  318C   	fcall	_DimmerLightsPointSelect
 10887                           
 10888                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 10889  0CBE  0020               	movlb	0	; select bank0
 10890  0CBF  0826               	movf	setDimmerLights@lights,w
 10891  0CC0  00A5               	movwf	??_setDimmerLights
 10892  0CC1  0A77               	incf	_Dimmer,w
 10893  0CC2  0086               	movwf	6
 10894  0CC3  0187               	clrf	7
 10895  0CC4  0825               	movf	??_setDimmerLights,w
 10896  0CC5  0081               	movwf	1
 10897                           
 10898                           ;Dimmer_B1.c: 607: if (status == 1) {
 10899  0CC6  0824               	movf	setDimmerLights@status,w
 10900  0CC7  3A01               	xorlw	1
 10901  0CC8  1D03               	skipz
 10902  0CC9  2D0A               	goto	l8319
 10903                           
 10904                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 10905  0CCA  086B               	movf	_DimmerLights,w
 10906  0CCB  0086               	movwf	6
 10907  0CCC  3001               	movlw	1	; select bank2/3
 10908  0CCD  0087               	movwf	7
 10909  0CCE  1681               	bsf	1,5
 10910                           
 10911                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 10912  0CCF  01A2               	clrf	setLED@command
 10913  0CD0  0826               	movf	setDimmerLights@lights,w
 10914  0CD1  318B  2351  318C   	fcall	_setLED
 10915                           
 10916                           ;Dimmer_B1.c: 611: ;;
 10917                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 10918  0CD4  0020               	movlb	0	; select bank0
 10919  0CD5  086B               	movf	_DimmerLights,w
 10920  0CD6  0086               	movwf	6
 10921  0CD7  3001               	movlw	1	; select bank2/3
 10922  0CD8  0087               	movwf	7
 10923  0CD9  1481               	bsf	1,1
 10924                           
 10925                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 10926  0CDA  3007               	movlw	7
 10927  0CDB  00A5               	movwf	??_setDimmerLights
 10928  0CDC  086B               	movf	_DimmerLights,w
 10929  0CDD  3E02               	addlw	2
 10930  0CDE  0086               	movwf	6
 10931  0CDF  3001               	movlw	1	; select bank2/3
 10932  0CE0  0087               	movwf	7
 10933  0CE1  0825               	movf	??_setDimmerLights,w
 10934  0CE2  0081               	movwf	1
 10935                           
 10936                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 10937  0CE3  086B               	movf	_DimmerLights,w
 10938  0CE4  0086               	movwf	6
 10939  0CE5  3001               	movlw	1	; select bank2/3
 10940  0CE6  0087               	movwf	7
 10941  0CE7  1B01               	btfsc	1,6
 10942  0CE8  0008               	return
 10943                           
 10944                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 10945  0CE9  086B               	movf	_DimmerLights,w
 10946  0CEA  0086               	movwf	6
 10947  0CEB  3001               	movlw	1	; select bank2/3
 10948  0CEC  0087               	movwf	7
 10949  0CED  1701               	bsf	1,6
 10950                           
 10951                           ;Dimmer_B1.c: 618: ;;
 10952                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 10953  0CEE  3000               	movlw	0
 10954  0CEF  3191  2138         	fcall	_setMemory_GO
 10955                           
 10956                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 10957  0CF1  0020               	movlb	0	; select bank0
 10958  0CF2  086B               	movf	_DimmerLights,w
 10959  0CF3  3E05               	addlw	5
 10960  0CF4  0086               	movwf	6
 10961  0CF5  3001               	movlw	1	; select bank2/3
 10962  0CF6  0087               	movwf	7
 10963  0CF7  0801               	movf	1,w
 10964  0CF8  00A5               	movwf	??_setDimmerLights
 10965  0CF9  086B               	movf	_DimmerLights,w
 10966  0CFA  3E04               	addlw	4
 10967  0CFB  0086               	movwf	6
 10968  0CFC  3001               	movlw	1	; select bank2/3
 10969  0CFD  0087               	movwf	7
 10970  0CFE  0825               	movf	??_setDimmerLights,w
 10971  0CFF  0081               	movwf	1
 10972                           
 10973                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-90)*0.8));
 10974  0D00  3008               	movlw	8
 10975  0D01  00A5               	movwf	??_setDimmerLights
 10976  0D02  086B               	movf	_DimmerLights,w
 10977  0D03  3E04               	addlw	4
 10978  0D04  0086               	movwf	6
 10979  0D05  3001               	movlw	1	; select bank2/3
 10980  0D06  0087               	movwf	7
 10981  0D07  0825               	movf	??_setDimmerLights,w
 10982  0D08  0081               	movwf	1
 10983                           
 10984                           ;Dimmer_B1.c: 628: }
 10985                           ;Dimmer_B1.c: 629: } else {
 10986  0D09  0008               	return
 10987  0D0A                     l8319:	
 10988                           
 10989                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 10990  0D0A  086B               	movf	_DimmerLights,w
 10991  0D0B  0086               	movwf	6
 10992  0D0C  3001               	movlw	1	; select bank2/3
 10993  0D0D  0087               	movwf	7
 10994  0D0E  1281               	bcf	1,5
 10995                           
 10996                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10997  0D0F  086B               	movf	_DimmerLights,w
 10998  0D10  3E06               	addlw	6
 10999  0D11  0086               	movwf	6
 11000  0D12  3001               	movlw	1	; select bank2/3
 11001  0D13  0087               	movwf	7
 11002  0D14  0801               	movf	1,w
 11003  0D15  00A5               	movwf	??_setDimmerLights
 11004  0D16  086B               	movf	_DimmerLights,w
 11005  0D17  3E04               	addlw	4
 11006  0D18  0086               	movwf	6
 11007  0D19  3001               	movlw	1	; select bank2/3
 11008  0D1A  0087               	movwf	7
 11009  0D1B  0825               	movf	??_setDimmerLights,w
 11010  0D1C  0081               	movwf	1
 11011                           
 11012                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 11013  0D1D  086B               	movf	_DimmerLights,w
 11014  0D1E  0086               	movwf	6
 11015  0D1F  3001               	movlw	1	; select bank2/3
 11016  0D20  0087               	movwf	7
 11017  0D21  1481               	bsf	1,1
 11018                           
 11019                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 11020  0D22  086B               	movf	_DimmerLights,w
 11021  0D23  0086               	movwf	6
 11022  0D24  3001               	movlw	1	; select bank2/3
 11023  0D25  0087               	movwf	7
 11024  0D26  1181               	bcf	1,3
 11025                           
 11026                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 11027  0D27  086B               	movf	_DimmerLights,w
 11028  0D28  0086               	movwf	6
 11029  0D29  3001               	movlw	1	; select bank2/3
 11030  0D2A  0087               	movwf	7
 11031  0D2B  1201               	bcf	1,4
 11032                           
 11033                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 11034  0D2C  3007               	movlw	7
 11035  0D2D  00A5               	movwf	??_setDimmerLights
 11036  0D2E  086B               	movf	_DimmerLights,w
 11037  0D2F  3E02               	addlw	2
 11038  0D30  0086               	movwf	6
 11039  0D31  3001               	movlw	1	; select bank2/3
 11040  0D32  0087               	movwf	7
 11041  0D33  0825               	movf	??_setDimmerLights,w
 11042  0D34  0081               	movwf	1
 11043  0D35  0008               	return
 11044  0D36                     __end_of_setDimmerLights:	
 11045                           
 11046                           	psect	text60
 11047  0B51                     __ptext60:	
 11048 ;; *************** function _setLED *****************
 11049 ;; Defined at:
 11050 ;;		line 70 in file "../src/LED_B1.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;  led             1    wreg     unsigned char 
 11053 ;;  command         1    2[BANK0 ] unsigned char 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  led             1    3[BANK0 ] unsigned char 
 11056 ;; Return value:  Size  Location     Type
 11057 ;;		None               void
 11058 ;; Registers used:
 11059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        2 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    6
 11072 ;; This function calls:
 11073 ;;		_LedPointSelect
 11074 ;; This function is called by:
 11075 ;;		_setDimmerLights
 11076 ;;		_setLED_Initialization
 11077 ;;		_setSw_Initialization
 11078 ;;		_setDimmerLights_ERROR
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           
 11083                           ;psect for function _setLED
 11084  0B51                     _setLED:	
 11085                           
 11086                           ;incstack = 0
 11087                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11088                           ;setLED@led stored from wreg
 11089  0B51  0020               	movlb	0	; select bank0
 11090  0B52  00A3               	movwf	setLED@led
 11091                           
 11092                           ;LED_B1.c: 71: LedPointSelect(led);
 11093  0B53  0823               	movf	setLED@led,w
 11094  0B54  3193  236A  318B   	fcall	_LedPointSelect
 11095                           
 11096                           ;LED_B1.c: 72: if (command == 0) {
 11097  0B57  0020               	movlb	0	; select bank0
 11098  0B58  08A2               	movf	setLED@command,f
 11099  0B59  1D03               	skipz
 11100  0B5A  2B73               	goto	l8183
 11101                           
 11102                           ;LED_B1.c: 74: if (led == 1) {
 11103  0B5B  0823               	movf	setLED@led,w
 11104  0B5C  3A01               	xorlw	1
 11105  0B5D  1D03               	skipz
 11106  0B5E  2B61               	goto	l8171
 11107                           
 11108                           ;LED_B1.c: 78: RC7 = 1;
 11109  0B5F  178E               	bsf	14,7	;volatile
 11110                           
 11111                           ;LED_B1.c: 80: }
 11112  0B60  0008               	return
 11113  0B61                     l8171:	
 11114                           
 11115                           ;LED_B1.c: 83: else if (led == 2) {
 11116  0B61  0823               	movf	setLED@led,w
 11117  0B62  3A02               	xorlw	2
 11118  0B63  1D03               	skipz
 11119  0B64  2B67               	goto	l8175
 11120                           
 11121                           ;LED_B1.c: 87: RA3 = 1;
 11122  0B65  158C               	bsf	12,3	;volatile
 11123                           
 11124                           ;LED_B1.c: 89: }
 11125  0B66  0008               	return
 11126  0B67                     l8175:	
 11127                           
 11128                           ;LED_B1.c: 92: else if (led == 3) {
 11129  0B67  0823               	movf	setLED@led,w
 11130  0B68  3A03               	xorlw	3
 11131  0B69  1D03               	skipz
 11132  0B6A  2B6D               	goto	l8179
 11133                           
 11134                           ;LED_B1.c: 96: RC6 = 1;
 11135  0B6B  170E               	bsf	14,6	;volatile
 11136                           
 11137                           ;LED_B1.c: 98: }
 11138  0B6C  0008               	return
 11139  0B6D                     l8179:	
 11140                           
 11141                           ;LED_B1.c: 101: else if (led == 99) {
 11142  0B6D  0823               	movf	setLED@led,w
 11143  0B6E  3A63               	xorlw	99
 11144  0B6F  1D03               	skipz
 11145  0B70  0008               	return
 11146                           
 11147                           ;LED_B1.c: 105: RB5 = 1;
 11148  0B71  168D               	bsf	13,5	;volatile
 11149                           
 11150                           ;LED_B1.c: 107: }
 11151                           ;LED_B1.c: 109: } else if (command == 1) {
 11152  0B72  0008               	return
 11153  0B73                     l8183:	
 11154  0B73  0822               	movf	setLED@command,w
 11155  0B74  3A01               	xorlw	1
 11156  0B75  1D03               	skipz
 11157  0B76  2B8F               	goto	l8201
 11158                           
 11159                           ;LED_B1.c: 111: if (led == 1) {
 11160  0B77  0823               	movf	setLED@led,w
 11161  0B78  3A01               	xorlw	1
 11162  0B79  1D03               	skipz
 11163  0B7A  2B7D               	goto	l8189
 11164                           
 11165                           ;LED_B1.c: 115: RC7 = 0;
 11166  0B7B  138E               	bcf	14,7	;volatile
 11167                           
 11168                           ;LED_B1.c: 117: }
 11169  0B7C  0008               	return
 11170  0B7D                     l8189:	
 11171                           
 11172                           ;LED_B1.c: 120: else if (led == 2) {
 11173  0B7D  0823               	movf	setLED@led,w
 11174  0B7E  3A02               	xorlw	2
 11175  0B7F  1D03               	skipz
 11176  0B80  2B83               	goto	l8193
 11177                           
 11178                           ;LED_B1.c: 124: RA3 = 0;
 11179  0B81  118C               	bcf	12,3	;volatile
 11180                           
 11181                           ;LED_B1.c: 126: }
 11182  0B82  0008               	return
 11183  0B83                     l8193:	
 11184                           
 11185                           ;LED_B1.c: 129: else if (led == 3) {
 11186  0B83  0823               	movf	setLED@led,w
 11187  0B84  3A03               	xorlw	3
 11188  0B85  1D03               	skipz
 11189  0B86  2B89               	goto	l8197
 11190                           
 11191                           ;LED_B1.c: 133: RC6 = 0;
 11192  0B87  130E               	bcf	14,6	;volatile
 11193                           
 11194                           ;LED_B1.c: 135: }
 11195  0B88  0008               	return
 11196  0B89                     l8197:	
 11197                           
 11198                           ;LED_B1.c: 138: else if (led == 99) {
 11199  0B89  0823               	movf	setLED@led,w
 11200  0B8A  3A63               	xorlw	99
 11201  0B8B  1D03               	skipz
 11202  0B8C  0008               	return
 11203                           
 11204                           ;LED_B1.c: 142: RB5 = 0;
 11205  0B8D  128D               	bcf	13,5	;volatile
 11206                           
 11207                           ;LED_B1.c: 144: }
 11208                           ;LED_B1.c: 146: } else if (command == 10) {
 11209  0B8E  0008               	return
 11210  0B8F                     l8201:	
 11211  0B8F  0822               	movf	setLED@command,w
 11212  0B90  3A0A               	xorlw	10
 11213  0B91  1D03               	skipz
 11214  0B92  2BB7               	goto	l8221
 11215                           
 11216                           ;LED_B1.c: 147: LED->GO = 0;
 11217  0B93  0879               	movf	_LED,w
 11218  0B94  0086               	movwf	6
 11219  0B95  3001               	movlw	1	; select bank2/3
 11220  0B96  0087               	movwf	7
 11221  0B97  1081               	bcf	1,1
 11222                           
 11223                           ;LED_B1.c: 148: LED->Time = 0;
 11224  0B98  0A79               	incf	_LED,w
 11225  0B99  0086               	movwf	6
 11226  0B9A  3001               	movlw	1	; select bank2/3
 11227  0B9B  0087               	movwf	7
 11228  0B9C  3000               	movlw	0
 11229  0B9D  3FC0               	movwi [0]fsr1
 11230  0B9E  3FC1               	movwi [1]fsr1
 11231                           
 11232                           ;LED_B1.c: 150: if (led == 1) {
 11233  0B9F  0823               	movf	setLED@led,w
 11234  0BA0  3A01               	xorlw	1
 11235  0BA1  1D03               	skipz
 11236  0BA2  2BA5               	goto	l8209
 11237                           
 11238                           ;LED_B1.c: 154: RC7 = 1;
 11239  0BA3  178E               	bsf	14,7	;volatile
 11240                           
 11241                           ;LED_B1.c: 156: }
 11242  0BA4  0008               	return
 11243  0BA5                     l8209:	
 11244                           
 11245                           ;LED_B1.c: 159: else if (led == 2) {
 11246  0BA5  0823               	movf	setLED@led,w
 11247  0BA6  3A02               	xorlw	2
 11248  0BA7  1D03               	skipz
 11249  0BA8  2BAB               	goto	l8213
 11250                           
 11251                           ;LED_B1.c: 163: RA3 = 1;
 11252  0BA9  158C               	bsf	12,3	;volatile
 11253                           
 11254                           ;LED_B1.c: 165: }
 11255  0BAA  0008               	return
 11256  0BAB                     l8213:	
 11257                           
 11258                           ;LED_B1.c: 168: else if (led == 3) {
 11259  0BAB  0823               	movf	setLED@led,w
 11260  0BAC  3A03               	xorlw	3
 11261  0BAD  1D03               	skipz
 11262  0BAE  2BB1               	goto	l8217
 11263                           
 11264                           ;LED_B1.c: 172: RC6 = 1;
 11265  0BAF  170E               	bsf	14,6	;volatile
 11266                           
 11267                           ;LED_B1.c: 174: }
 11268  0BB0  0008               	return
 11269  0BB1                     l8217:	
 11270                           
 11271                           ;LED_B1.c: 177: else if (led == 99) {
 11272  0BB1  0823               	movf	setLED@led,w
 11273  0BB2  3A63               	xorlw	99
 11274  0BB3  1D03               	skipz
 11275  0BB4  0008               	return
 11276                           
 11277                           ;LED_B1.c: 181: RB5 = 1;
 11278  0BB5  168D               	bsf	13,5	;volatile
 11279                           
 11280                           ;LED_B1.c: 183: }
 11281                           ;LED_B1.c: 185: } else if (command == 11) {
 11282  0BB6  0008               	return
 11283  0BB7                     l8221:	
 11284  0BB7  0822               	movf	setLED@command,w
 11285  0BB8  3A0B               	xorlw	11
 11286  0BB9  1D03               	skipz
 11287  0BBA  0008               	return
 11288                           
 11289                           ;LED_B1.c: 186: LED->GO = 1;
 11290  0BBB  0879               	movf	_LED,w
 11291  0BBC  0086               	movwf	6
 11292  0BBD  3001               	movlw	1	; select bank2/3
 11293  0BBE  0087               	movwf	7
 11294  0BBF  1481               	bsf	1,1
 11295  0BC0  0008               	return
 11296  0BC1                     __end_of_setLED:	
 11297                           
 11298                           	psect	text61
 11299  136A                     __ptext61:	
 11300 ;; *************** function _LedPointSelect *****************
 11301 ;; Defined at:
 11302 ;;		line 7 in file "../src/LED_B1.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  led             1    wreg     unsigned char 
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;  led             1    1[BANK0 ] unsigned char 
 11307 ;; Return value:  Size  Location     Type
 11308 ;;		None               void
 11309 ;; Registers used:
 11310 ;;		wreg
 11311 ;; Tracked objects:
 11312 ;;		On entry : 0/0
 11313 ;;		On exit  : 0/0
 11314 ;;		Unchanged: 0/0
 11315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;Total ram usage:        2 bytes
 11321 ;; Hardware stack levels used:    1
 11322 ;; Hardware stack levels required when called:    5
 11323 ;; This function calls:
 11324 ;;		Nothing
 11325 ;; This function is called by:
 11326 ;;		_setLED_Initialization
 11327 ;;		_setLED
 11328 ;;		_setLED_Main
 11329 ;; This function uses a non-reentrant model
 11330 ;;
 11331                           
 11332                           
 11333                           ;psect for function _LedPointSelect
 11334  136A                     _LedPointSelect:	
 11335                           
 11336                           ;incstack = 0
 11337                           ; Regs used in _LedPointSelect: [wreg]
 11338                           ;LedPointSelect@led stored from wreg
 11339  136A  0020               	movlb	0	; select bank0
 11340  136B  00A1               	movwf	LedPointSelect@led
 11341                           
 11342                           ;LED_B1.c: 9: if (led == 1) {
 11343  136C  0821               	movf	LedPointSelect@led,w
 11344  136D  3A01               	xorlw	1
 11345  136E  1D03               	skipz
 11346  136F  2B75               	goto	l7961
 11347                           
 11348                           ;LED_B1.c: 10: LED = &VarLED1;
 11349  1370  3062               	movlw	_VarLED1& (0+255)
 11350  1371  00A0               	movwf	??_LedPointSelect
 11351  1372  0820               	movf	??_LedPointSelect,w
 11352  1373  00F9               	movwf	_LED
 11353                           
 11354                           ;LED_B1.c: 11: }
 11355  1374  0008               	return
 11356  1375                     l7961:	
 11357                           
 11358                           ;LED_B1.c: 14: else if (led == 2) {
 11359  1375  0821               	movf	LedPointSelect@led,w
 11360  1376  3A02               	xorlw	2
 11361  1377  1D03               	skipz
 11362  1378  2B7E               	goto	l7965
 11363                           
 11364                           ;LED_B1.c: 15: LED = &VarLED2;
 11365  1379  3066               	movlw	_VarLED2& (0+255)
 11366  137A  00A0               	movwf	??_LedPointSelect
 11367  137B  0820               	movf	??_LedPointSelect,w
 11368  137C  00F9               	movwf	_LED
 11369                           
 11370                           ;LED_B1.c: 16: }
 11371  137D  0008               	return
 11372  137E                     l7965:	
 11373                           
 11374                           ;LED_B1.c: 19: else if (led == 3) {
 11375  137E  0821               	movf	LedPointSelect@led,w
 11376  137F  3A03               	xorlw	3
 11377  1380  1D03               	skipz
 11378  1381  2B87               	goto	l7969
 11379                           
 11380                           ;LED_B1.c: 20: LED = &VarLED3;
 11381  1382  306A               	movlw	_VarLED3& (0+255)
 11382  1383  00A0               	movwf	??_LedPointSelect
 11383  1384  0820               	movf	??_LedPointSelect,w
 11384  1385  00F9               	movwf	_LED
 11385                           
 11386                           ;LED_B1.c: 21: }
 11387  1386  0008               	return
 11388  1387                     l7969:	
 11389                           
 11390                           ;LED_B1.c: 24: else if (led == 99) {
 11391  1387  0821               	movf	LedPointSelect@led,w
 11392  1388  3A63               	xorlw	99
 11393  1389  1D03               	skipz
 11394  138A  0008               	return
 11395                           
 11396                           ;LED_B1.c: 25: LED = &VarErrLED;
 11397  138B  305E               	movlw	_VarErrLED& (0+255)
 11398  138C  00A0               	movwf	??_LedPointSelect
 11399  138D  0820               	movf	??_LedPointSelect,w
 11400  138E  00F9               	movwf	_LED
 11401  138F  0008               	return
 11402  1390                     __end_of_LedPointSelect:	
 11403                           
 11404                           	psect	text62
 11405  10C0                     __ptext62:	
 11406 ;; *************** function _DimmerLights_Close *****************
 11407 ;; Defined at:
 11408 ;;		line 407 in file "../src/Dimmer_B1.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;		None
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;		None
 11413 ;; Return value:  Size  Location     Type
 11414 ;;		None               void
 11415 ;; Registers used:
 11416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;Total ram usage:        0 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    6
 11429 ;; This function calls:
 11430 ;;		_getDimmerLights_StatusFlag
 11431 ;;		_setMemory_GO
 11432 ;; This function is called by:
 11433 ;;		_DimmerLights_Main
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           
 11438                           ;psect for function _DimmerLights_Close
 11439  10C0                     _DimmerLights_Close:	
 11440                           
 11441                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 11442                           
 11443                           ;incstack = 0
 11444                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11445  10C0  0877               	movf	_Dimmer,w
 11446  10C1  0086               	movwf	6
 11447  10C2  0187               	clrf	7
 11448  10C3  1C01               	btfss	1,0
 11449  10C4  0008               	return
 11450                           
 11451                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 11452  10C5  0877               	movf	_Dimmer,w
 11453  10C6  0086               	movwf	6
 11454  10C7  0187               	clrf	7
 11455  10C8  1001               	bcf	1,0
 11456                           
 11457                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 11458  10C9  3190  20FA  3190   	fcall	_getDimmerLights_StatusFlag
 11459  10CC  3800               	iorlw	0
 11460  10CD  1D03               	skipz
 11461  10CE  0008               	return
 11462                           
 11463                           ;Dimmer_B1.c: 411: ;;
 11464                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 11465  10CF  3001               	movlw	1
 11466  10D0  3191  2138         	fcall	_setMemory_GO
 11467  10D2  0008               	return
 11468  10D3                     __end_of_DimmerLights_Close:	
 11469                           
 11470                           	psect	text63
 11471  1138                     __ptext63:	
 11472 ;; *************** function _setMemory_GO *****************
 11473 ;; Defined at:
 11474 ;;		line 885 in file "../src/MCU_B1.c"
 11475 ;; Parameters:    Size  Location     Type
 11476 ;;  command         1    wreg     unsigned char 
 11477 ;; Auto vars:     Size  Location     Type
 11478 ;;  command         1    2[BANK0 ] unsigned char 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;		None               void
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;Total ram usage:        3 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    5
 11495 ;; This function calls:
 11496 ;;		Nothing
 11497 ;; This function is called by:
 11498 ;;		_DimmerLights_Close
 11499 ;;		_setDimmerLights
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           
 11504                           ;psect for function _setMemory_GO
 11505  1138                     _setMemory_GO:	
 11506                           
 11507                           ;incstack = 0
 11508                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11509                           ;setMemory_GO@command stored from wreg
 11510  1138  0020               	movlb	0	; select bank0
 11511  1139  00A2               	movwf	setMemory_GO@command
 11512                           
 11513                           ;MCU_B1.c: 886: Memory.GO = command;
 11514  113A  0822               	movf	setMemory_GO@command,w
 11515  113B  0023               	movlb	3	; select bank3
 11516  113C  10C4               	bcf	(_Memory^(0+384)+36),1
 11517  113D  1D03               	skipz
 11518  113E  14C4               	bsf	(_Memory^(0+384)+36),1
 11519                           
 11520                           ;MCU_B1.c: 887: if (command == 0) {
 11521  113F  0020               	movlb	0	; select bank0
 11522  1140  08A2               	movf	setMemory_GO@command,f
 11523  1141  1D03               	skipz
 11524  1142  0008               	return
 11525                           
 11526                           ;MCU_B1.c: 888: Memory.Time = command;
 11527  1143  0822               	movf	setMemory_GO@command,w
 11528  1144  00A0               	movwf	??_setMemory_GO
 11529  1145  01A1               	clrf	??_setMemory_GO+1
 11530  1146  0820               	movf	??_setMemory_GO,w
 11531  1147  0023               	movlb	3	; select bank3
 11532  1148  00C2               	movwf	(_Memory^(0+384)+34)
 11533  1149  0020               	movlb	0	; select bank0
 11534  114A  0821               	movf	??_setMemory_GO+1,w
 11535  114B  0023               	movlb	3	; select bank3
 11536  114C  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11537  114D  0008               	return
 11538  114E                     __end_of_setMemory_GO:	
 11539                           
 11540                           	psect	text64
 11541  10FA                     __ptext64:	
 11542 ;; *************** function _getDimmerLights_StatusFlag *****************
 11543 ;; Defined at:
 11544 ;;		line 486 in file "../src/Dimmer_B1.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  Status          1    1[BANK0 ] unsigned char 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      unsigned char 
 11551 ;; Registers used:
 11552 ;;		wreg, status,2
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;Total ram usage:        3 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    5
 11565 ;; This function calls:
 11566 ;;		Nothing
 11567 ;; This function is called by:
 11568 ;;		_DimmerLights_Close
 11569 ;;		_DimmerLights_Exceptions
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           
 11574                           ;psect for function _getDimmerLights_StatusFlag
 11575  10FA                     _getDimmerLights_StatusFlag:	
 11576                           
 11577                           ;Dimmer_B1.c: 487: char Status = 0;
 11578                           
 11579                           ;incstack = 0
 11580                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11581  10FA  0020               	movlb	0	; select bank0
 11582  10FB  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11583                           
 11584                           ;Dimmer_B1.c: 490: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 11585  10FC  01A2               	clrf	_getDimmerLights_StatusFlag$2076
 11586  10FD  0AA2               	incf	_getDimmerLights_StatusFlag$2076,f
 11587  10FE  0022               	movlb	2	; select bank2
 11588  10FF  1F28               	btfss	_DimmerLights1^(0+256),6
 11589  1100  1B37               	btfsc	_DimmerLights2^(0+256),6
 11590  1101  2907               	goto	l8637
 11591  1102  0023               	movlb	3	; select bank3
 11592  1103  1B45               	btfsc	_DimmerLights3^(0+384),6
 11593  1104  2907               	goto	l8637
 11594  1105  0020               	movlb	0	; select bank0
 11595  1106  01A2               	clrf	_getDimmerLights_StatusFlag$2076
 11596  1107                     l8637:	
 11597  1107  0020               	movlb	0	; select bank0
 11598  1108  0822               	movf	_getDimmerLights_StatusFlag$2076,w
 11599  1109  00A0               	movwf	??_getDimmerLights_StatusFlag
 11600  110A  0820               	movf	??_getDimmerLights_StatusFlag,w
 11601  110B  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11602                           
 11603                           ;Dimmer_B1.c: 501: return Status;
 11604  110C  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11605  110D  0008               	return
 11606  110E                     __end_of_getDimmerLights_StatusFlag:	
 11607                           
 11608                           	psect	text65
 11609  12BC                     __ptext65:	
 11610 ;; *************** function _DimmerLights_Initialization *****************
 11611 ;; Defined at:
 11612 ;;		line 345 in file "../src/Dimmer_B1.c"
 11613 ;; Parameters:    Size  Location     Type
 11614 ;;		None
 11615 ;; Auto vars:     Size  Location     Type
 11616 ;;		None
 11617 ;; Return value:  Size  Location     Type
 11618 ;;		None               void
 11619 ;; Registers used:
 11620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11621 ;; Tracked objects:
 11622 ;;		On entry : 0/0
 11623 ;;		On exit  : 0/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;Total ram usage:        1 bytes
 11631 ;; Hardware stack levels used:    1
 11632 ;; Hardware stack levels required when called:    7
 11633 ;; This function calls:
 11634 ;;		_Dimmer_Initialization
 11635 ;;		_setDimmerLights_Initialization
 11636 ;; This function is called by:
 11637 ;;		_main
 11638 ;; This function uses a non-reentrant model
 11639 ;;
 11640                           
 11641                           
 11642                           ;psect for function _DimmerLights_Initialization
 11643  12BC                     _DimmerLights_Initialization:	
 11644                           
 11645                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 11646                           
 11647                           ;incstack = 0
 11648                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11649  12BC  3028               	movlw	_DimmerLights1& (0+255)
 11650  12BD  0020               	movlb	0	; select bank0
 11651  12BE  00A4               	movwf	??_DimmerLights_Initialization
 11652  12BF  0824               	movf	??_DimmerLights_Initialization,w
 11653  12C0  0021               	movlb	1	; select bank1
 11654  12C1  00DE               	movwf	_DimmerLights11^(0+128)
 11655                           
 11656                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 11657  12C2  3001               	movlw	1
 11658  12C3  3188  2000  3192   	fcall	_setDimmerLights_Initialization
 11659                           
 11660                           ;Dimmer_B1.c: 353: DimmerLights22 = &DimmerLights2;
 11661  12C6  3037               	movlw	_DimmerLights2& (0+255)
 11662  12C7  0020               	movlb	0	; select bank0
 11663  12C8  00A4               	movwf	??_DimmerLights_Initialization
 11664  12C9  0824               	movf	??_DimmerLights_Initialization,w
 11665  12CA  0021               	movlb	1	; select bank1
 11666  12CB  00DF               	movwf	_DimmerLights22^(0+128)
 11667                           
 11668                           ;Dimmer_B1.c: 354: setDimmerLights_Initialization(2);
 11669  12CC  3002               	movlw	2
 11670  12CD  3188  2000  3192   	fcall	_setDimmerLights_Initialization
 11671                           
 11672                           ;Dimmer_B1.c: 358: DimmerLights33 = &DimmerLights3;
 11673  12D0  30C5               	movlw	_DimmerLights3& (0+255)
 11674  12D1  0020               	movlb	0	; select bank0
 11675  12D2  00A4               	movwf	??_DimmerLights_Initialization
 11676  12D3  0824               	movf	??_DimmerLights_Initialization,w
 11677  12D4  0021               	movlb	1	; select bank1
 11678  12D5  00E0               	movwf	_DimmerLights33^(0+128)
 11679                           
 11680                           ;Dimmer_B1.c: 359: setDimmerLights_Initialization(3);
 11681  12D6  3003               	movlw	3
 11682  12D7  3188  2000  3192   	fcall	_setDimmerLights_Initialization
 11683                           
 11684                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 11685  12DA  319E  2694         	fcall	_Dimmer_Initialization
 11686  12DC  0008               	return
 11687  12DD                     __end_of_DimmerLights_Initialization:	
 11688                           
 11689                           	psect	text66
 11690  0800                     __ptext66:	
 11691 ;; *************** function _setDimmerLights_Initialization *****************
 11692 ;; Defined at:
 11693 ;;		line 368 in file "../src/Dimmer_B1.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;  lights          1    wreg     unsigned char 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;  lights          1    3[BANK0 ] unsigned char 
 11698 ;; Return value:  Size  Location     Type
 11699 ;;		None               void
 11700 ;; Registers used:
 11701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;Total ram usage:        2 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    6
 11714 ;; This function calls:
 11715 ;;		_DimmerLightsPointSelect
 11716 ;; This function is called by:
 11717 ;;		_DimmerLights_Initialization
 11718 ;; This function uses a non-reentrant model
 11719 ;;
 11720                           
 11721                           
 11722                           ;psect for function _setDimmerLights_Initialization
 11723  0800                     _setDimmerLights_Initialization:	
 11724                           
 11725                           ;incstack = 0
 11726                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11727                           ;setDimmerLights_Initialization@lights stored from wreg
 11728  0800  0020               	movlb	0	; select bank0
 11729  0801  00A3               	movwf	setDimmerLights_Initialization@lights
 11730                           
 11731                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 11732  0802  0823               	movf	setDimmerLights_Initialization@lights,w
 11733  0803  3191  21CA         	fcall	_DimmerLightsPointSelect
 11734                           
 11735                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 11736  0805  0020               	movlb	0	; select bank0
 11737  0806  086B               	movf	_DimmerLights,w
 11738  0807  3E09               	addlw	9
 11739  0808  0086               	movwf	6
 11740  0809  3001               	movlw	1	; select bank2/3
 11741  080A  0087               	movwf	7
 11742  080B  1501               	bsf	1,2
 11743                           
 11744                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-90)*0.8));
 11745  080C  3008               	movlw	8
 11746  080D  00A2               	movwf	??_setDimmerLights_Initialization
 11747  080E  086B               	movf	_DimmerLights,w
 11748  080F  3E05               	addlw	5
 11749  0810  0086               	movwf	6
 11750  0811  3001               	movlw	1	; select bank2/3
 11751  0812  0087               	movwf	7
 11752  0813  0822               	movf	??_setDimmerLights_Initialization,w
 11753  0814  0081               	movwf	1
 11754                           
 11755                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 11756  0815  303C               	movlw	60
 11757  0816  00A2               	movwf	??_setDimmerLights_Initialization
 11758  0817  086B               	movf	_DimmerLights,w
 11759  0818  3E06               	addlw	6
 11760  0819  0086               	movwf	6
 11761  081A  3001               	movlw	1	; select bank2/3
 11762  081B  0087               	movwf	7
 11763  081C  0822               	movf	??_setDimmerLights_Initialization,w
 11764  081D  0081               	movwf	1
 11765                           
 11766                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11767  081E  086B               	movf	_DimmerLights,w
 11768  081F  3E06               	addlw	6
 11769  0820  0086               	movwf	6
 11770  0821  3001               	movlw	1	; select bank2/3
 11771  0822  0087               	movwf	7
 11772  0823  0801               	movf	1,w
 11773  0824  00A2               	movwf	??_setDimmerLights_Initialization
 11774  0825  086B               	movf	_DimmerLights,w
 11775  0826  3E04               	addlw	4
 11776  0827  0086               	movwf	6
 11777  0828  3001               	movlw	1	; select bank2/3
 11778  0829  0087               	movwf	7
 11779  082A  0822               	movf	??_setDimmerLights_Initialization,w
 11780  082B  0081               	movwf	1
 11781  082C  0008               	return
 11782  082D                     __end_of_setDimmerLights_Initialization:	
 11783                           
 11784                           	psect	text67
 11785  1E94                     __ptext67:	
 11786 ;; *************** function _Dimmer_Initialization *****************
 11787 ;; Defined at:
 11788 ;;		line 797 in file "../src/Dimmer_B1.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;		None
 11791 ;; Auto vars:     Size  Location     Type
 11792 ;;		None
 11793 ;; Return value:  Size  Location     Type
 11794 ;;		None               void
 11795 ;; Registers used:
 11796 ;;		wreg
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;Total ram usage:        1 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    5
 11809 ;; This function calls:
 11810 ;;		Nothing
 11811 ;; This function is called by:
 11812 ;;		_DimmerLights_Initialization
 11813 ;; This function uses a non-reentrant model
 11814 ;;
 11815                           
 11816                           
 11817                           ;psect for function _Dimmer_Initialization
 11818  1E94                     _Dimmer_Initialization:	
 11819                           
 11820                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _Dimmer_Initialization: [wreg]
 11824  1E94  30E9               	movlw	_Dimmer1& (0+255)
 11825  1E95  0020               	movlb	0	; select bank0
 11826  1E96  00A0               	movwf	??_Dimmer_Initialization
 11827  1E97  0820               	movf	??_Dimmer_Initialization,w
 11828  1E98  00F7               	movwf	_Dimmer
 11829  1E99  0008               	return
 11830  1E9A                     __end_of_Dimmer_Initialization:	
 11831                           
 11832                           	psect	text68
 11833  1EFD                     __ptext68:	
 11834 ;; *************** function _DelayOff_Main *****************
 11835 ;; Defined at:
 11836 ;;		line 41 in file "../src/DelayOff_B1.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;		None
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;		None
 11841 ;; Return value:  Size  Location     Type
 11842 ;;		None               void
 11843 ;; Registers used:
 11844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;Total ram usage:        0 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:   10
 11857 ;; This function calls:
 11858 ;;		_DlyOff_Main
 11859 ;; This function is called by:
 11860 ;;		_main
 11861 ;; This function uses a non-reentrant model
 11862 ;;
 11863                           
 11864                           
 11865                           ;psect for function _DelayOff_Main
 11866  1EFD                     _DelayOff_Main:	
 11867                           
 11868                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 11869                           
 11870                           ;incstack = 0
 11871                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11872  1EFD  3001               	movlw	1
 11873  1EFE  318B  23C1  319E   	fcall	_DlyOff_Main
 11874                           
 11875                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 11876  1F01  3002               	movlw	2
 11877  1F02  318B  23C1  319E   	fcall	_DlyOff_Main
 11878                           
 11879                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 11880  1F05  3003               	movlw	3
 11881  1F06  318B  23C1         	fcall	_DlyOff_Main
 11882  1F08  0008               	return
 11883  1F09                     __end_of_DelayOff_Main:	
 11884                           
 11885                           	psect	text69
 11886  0BC1                     __ptext69:	
 11887 ;; *************** function _DlyOff_Main *****************
 11888 ;; Defined at:
 11889 ;;		line 62 in file "../src/DelayOff_B1.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;  sw              1    wreg     unsigned char 
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;  sw              1   68[BANK0 ] unsigned char 
 11894 ;; Return value:  Size  Location     Type
 11895 ;;		None               void
 11896 ;; Registers used:
 11897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;Total ram usage:        3 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    9
 11910 ;; This function calls:
 11911 ;;		_DelayOffPointSelect
 11912 ;;		_setBuz
 11913 ;;		_setDimmerLights_Switch
 11914 ;;		_setDimmerLights_Trigger
 11915 ;;		_setRFSW_Status
 11916 ;;		_setRF_DimmerLights
 11917 ;;		_setSw_Status
 11918 ;;		_setTxData
 11919 ;; This function is called by:
 11920 ;;		_DelayOff_Main
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           
 11925                           ;psect for function _DlyOff_Main
 11926  0BC1                     _DlyOff_Main:	
 11927                           
 11928                           ;incstack = 0
 11929                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11930                           ;DlyOff_Main@sw stored from wreg
 11931  0BC1  0020               	movlb	0	; select bank0
 11932  0BC2  00E4               	movwf	DlyOff_Main@sw
 11933                           
 11934                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 11935  0BC3  0864               	movf	DlyOff_Main@sw,w
 11936  0BC4  3192  2202  318B   	fcall	_DelayOffPointSelect
 11937                           
 11938                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 11939  0BC7  0876               	movf	_DelayOff,w
 11940  0BC8  0086               	movwf	6
 11941  0BC9  3001               	movlw	1	; select bank2/3
 11942  0BCA  0087               	movwf	7
 11943  0BCB  1C81               	btfss	1,1
 11944  0BCC  0008               	return
 11945                           
 11946                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 11947  0BCD  0876               	movf	_DelayOff,w
 11948  0BCE  3E02               	addlw	2
 11949  0BCF  0086               	movwf	6
 11950  0BD0  3001               	movlw	1	; select bank2/3
 11951  0BD1  0087               	movwf	7
 11952  0BD2  3001               	movlw	1
 11953  0BD3  0781               	addwf	1,f
 11954  0BD4  3141               	addfsr 1,1
 11955  0BD5  1803               	skipnc
 11956  0BD6  0A81               	incf	1,f
 11957                           
 11958                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 11959  0BD7  0876               	movf	_DelayOff,w
 11960  0BD8  3E02               	addlw	2
 11961  0BD9  0086               	movwf	6
 11962  0BDA  3001               	movlw	1	; select bank2/3
 11963  0BDB  0087               	movwf	7
 11964  0BDC  3F40               	moviw [0]fsr1
 11965  0BDD  0020               	movlb	0	; select bank0
 11966  0BDE  00E2               	movwf	??_DlyOff_Main
 11967  0BDF  3F41               	moviw [1]fsr1
 11968  0BE0  00E3               	movwf	??_DlyOff_Main+1
 11969  0BE1  3016               	movlw	22
 11970  0BE2  0263               	subwf	??_DlyOff_Main+1,w
 11971  0BE3  3012               	movlw	18
 11972  0BE4  1903               	skipnz
 11973  0BE5  0262               	subwf	??_DlyOff_Main,w
 11974  0BE6  1C03               	skipc
 11975  0BE7  0008               	return
 11976                           
 11977                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 11978  0BE8  0876               	movf	_DelayOff,w
 11979  0BE9  3E02               	addlw	2
 11980  0BEA  0086               	movwf	6
 11981  0BEB  3001               	movlw	1	; select bank2/3
 11982  0BEC  0087               	movwf	7
 11983  0BED  3000               	movlw	0
 11984  0BEE  3FC0               	movwi [0]fsr1
 11985  0BEF  3FC1               	movwi [1]fsr1
 11986                           
 11987                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 11988  0BF0  3001               	movlw	1
 11989  0BF1  00E2               	movwf	??_DlyOff_Main
 11990  0BF2  0876               	movf	_DelayOff,w
 11991  0BF3  3E04               	addlw	4
 11992  0BF4  0086               	movwf	6
 11993  0BF5  3001               	movlw	1	; select bank2/3
 11994  0BF6  0087               	movwf	7
 11995  0BF7  0862               	movf	??_DlyOff_Main,w
 11996  0BF8  0781               	addwf	1,f
 11997                           
 11998                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 11999  0BF9  0876               	movf	_DelayOff,w
 12000  0BFA  3E04               	addlw	4
 12001  0BFB  0086               	movwf	6
 12002  0BFC  3001               	movlw	1	; select bank2/3
 12003  0BFD  0087               	movwf	7
 12004  0BFE  0A76               	incf	_DelayOff,w
 12005  0BFF  0084               	movwf	4
 12006  0C00  3001               	movlw	1	; select bank2/3
 12007  0C01  0085               	movwf	5
 12008  0C02  0800               	movf	0,w
 12009  0C03  0201               	subwf	1,w
 12010  0C04  1C03               	skipc
 12011  0C05  0008               	return
 12012                           
 12013                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12014  0C06  0876               	movf	_DelayOff,w
 12015  0C07  3E04               	addlw	4
 12016  0C08  0086               	movwf	6
 12017  0C09  3001               	movlw	1	; select bank2/3
 12018  0C0A  0087               	movwf	7
 12019  0C0B  0181               	clrf	1
 12020                           
 12021                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12022  0C0C  0876               	movf	_DelayOff,w
 12023  0C0D  0086               	movwf	6
 12024  0C0E  3001               	movlw	1	; select bank2/3
 12025  0C0F  0087               	movwf	7
 12026  0C10  1081               	bcf	1,1
 12027                           
 12028                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12029  0C11  01A2               	clrf	setSw_Status@command
 12030  0C12  0864               	movf	DlyOff_Main@sw,w
 12031  0C13  319F  2765  318B   	fcall	_setSw_Status
 12032                           
 12033                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12034  0C16  0020               	movlb	0	; select bank0
 12035  0C17  01A2               	clrf	setRFSW_Status@command
 12036  0C18  0864               	movf	DlyOff_Main@sw,w
 12037  0C19  319F  2756  318B   	fcall	_setRFSW_Status
 12038                           
 12039                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12040  0C1C  0020               	movlb	0	; select bank0
 12041  0C1D  01DD               	clrf	setRF_DimmerLights@on
 12042  0C1E  0864               	movf	DlyOff_Main@sw,w
 12043  0C1F  318A  2276  318B   	fcall	_setRF_DimmerLights
 12044                           
 12045                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12046  0C22  0020               	movlb	0	; select bank0
 12047  0C23  01A2               	clrf	setDimmerLights_Trigger@command
 12048  0C24  0AA2               	incf	setDimmerLights_Trigger@command,f
 12049  0C25  0864               	movf	DlyOff_Main@sw,w
 12050  0C26  319F  27C0  318B   	fcall	_setDimmerLights_Trigger
 12051                           
 12052                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12053  0C29  0020               	movlb	0	; select bank0
 12054  0C2A  01A2               	clrf	setDimmerLights_Switch@command
 12055  0C2B  0864               	movf	DlyOff_Main@sw,w
 12056  0C2C  319F  27B0  318B   	fcall	_setDimmerLights_Switch
 12057                           
 12058                           ;DelayOff_B1.c: 78: setTxData();
 12059  0C2F  3185  251C  318B   	fcall	_setTxData
 12060                           
 12061                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12062  0C32  3064               	movlw	100
 12063  0C33  0020               	movlb	0	; select bank0
 12064  0C34  00A9               	movwf	setBuz@time
 12065  0C35  3000               	movlw	0
 12066  0C36  00AA               	movwf	setBuz@time+1
 12067  0C37  3001               	movlw	1
 12068  0C38  3197  27A7         	fcall	_setBuz
 12069  0C3A  0008               	return
 12070  0C3B                     __end_of_DlyOff_Main:	
 12071                           
 12072                           	psect	text70
 12073  051C                     __ptext70:	
 12074 ;; *************** function _setTxData *****************
 12075 ;; Defined at:
 12076 ;;		line 176 in file "../src/RF_Control_B1.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;		None
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;  i               1    0        unsigned char 
 12081 ;; Return value:  Size  Location     Type
 12082 ;;		None               void
 12083 ;; Registers used:
 12084 ;;		wreg, fsr1l, fsr1h
 12085 ;; Tracked objects:
 12086 ;;		On entry : 0/0
 12087 ;;		On exit  : 0/0
 12088 ;;		Unchanged: 0/0
 12089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;Total ram usage:        1 bytes
 12095 ;; Hardware stack levels used:    1
 12096 ;; Hardware stack levels required when called:    5
 12097 ;; This function calls:
 12098 ;;		Nothing
 12099 ;; This function is called by:
 12100 ;;		_DlyOff_Main
 12101 ;;		_setDimmerLights_Adj
 12102 ;;		_setControl_Lights_Table
 12103 ;;		_setRFSW_Control
 12104 ;;		_setRFSW_AdjControl
 12105 ;;		_Sw_DimmerOnFunc
 12106 ;;		_Sw_DimmerOffFunc
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           
 12111                           ;psect for function _setTxData
 12112  051C                     _setTxData:	
 12113                           
 12114                           ;RF_Control_B1.c: 177: char i;
 12115                           ;RF_Control_B1.c: 178: if (RF1.Enable == 1) {
 12116                           
 12117                           ;incstack = 0
 12118                           ; Regs used in _setTxData: [wregfsr1]
 12119  051C  0021               	movlb	1	; select bank1
 12120  051D  1C53               	btfss	_RF1^(0+128),0
 12121  051E  0008               	return
 12122                           
 12123                           ;RF_Control_B1.c: 180: RF1.TransceiveGO = 1;
 12124  051F  1553               	bsf	_RF1^(0+128),2
 12125                           
 12126                           ;RF_Control_B1.c: 190: RF_Data[0] = 0x63;
 12127  0520  3063               	movlw	99
 12128  0521  0020               	movlb	0	; select bank0
 12129  0522  00A0               	movwf	??_setTxData
 12130  0523  0820               	movf	??_setTxData,w
 12131  0524  0021               	movlb	1	; select bank1
 12132  0525  00A0               	movwf	_RF_Data^(0+128)
 12133                           
 12134                           ;RF_Control_B1.c: 191: RF_Data[1] = 0x02;
 12135  0526  3002               	movlw	2
 12136  0527  0020               	movlb	0	; select bank0
 12137  0528  00A0               	movwf	??_setTxData
 12138  0529  0820               	movf	??_setTxData,w
 12139  052A  0021               	movlb	1	; select bank1
 12140  052B  00A1               	movwf	(_RF_Data^(0+128)+1)
 12141                           
 12142                           ;RF_Control_B1.c: 192: RF_Data[2] = product->Data[2];
 12143  052C  0020               	movlb	0	; select bank0
 12144  052D  086D               	movf	_product,w
 12145  052E  0086               	movwf	6
 12146  052F  3002               	movlw	2	; select bank4/5
 12147  0530  0087               	movwf	7
 12148  0531  3002               	movlw	2	; select bank4/5
 12149  0532  3F42               	moviw [2]fsr1
 12150  0533  0021               	movlb	1	; select bank1
 12151  0534  00A2               	movwf	(_RF_Data^(0+128)+2)
 12152                           
 12153                           ;RF_Control_B1.c: 193: RF_Data[3] = product->Data[3];
 12154  0535  0020               	movlb	0	; select bank0
 12155  0536  086D               	movf	_product,w
 12156  0537  0086               	movwf	6
 12157  0538  3002               	movlw	2	; select bank4/5
 12158  0539  0087               	movwf	7
 12159  053A  3002               	movlw	2	; select bank4/5
 12160  053B  3F43               	moviw [3]fsr1
 12161  053C  0021               	movlb	1	; select bank1
 12162  053D  00A3               	movwf	(_RF_Data^(0+128)+3)
 12163                           
 12164                           ;RF_Control_B1.c: 194: RF_Data[4] = product->Data[4];
 12165  053E  0020               	movlb	0	; select bank0
 12166  053F  086D               	movf	_product,w
 12167  0540  0086               	movwf	6
 12168  0541  3002               	movlw	2	; select bank4/5
 12169  0542  0087               	movwf	7
 12170  0543  3002               	movlw	2	; select bank4/5
 12171  0544  3F44               	moviw [4]fsr1
 12172  0545  0021               	movlb	1	; select bank1
 12173  0546  00A4               	movwf	(_RF_Data^(0+128)+4)
 12174                           
 12175                           ;RF_Control_B1.c: 195: RF_Data[5] = product->Data[5];
 12176  0547  0020               	movlb	0	; select bank0
 12177  0548  086D               	movf	_product,w
 12178  0549  0086               	movwf	6
 12179  054A  3002               	movlw	2	; select bank4/5
 12180  054B  0087               	movwf	7
 12181  054C  3002               	movlw	2	; select bank4/5
 12182  054D  3F45               	moviw [5]fsr1
 12183  054E  0021               	movlb	1	; select bank1
 12184  054F  00A5               	movwf	(_RF_Data^(0+128)+5)
 12185                           
 12186                           ;RF_Control_B1.c: 196: RF_Data[6] = product->Data[6];
 12187  0550  0020               	movlb	0	; select bank0
 12188  0551  086D               	movf	_product,w
 12189  0552  0086               	movwf	6
 12190  0553  3002               	movlw	2	; select bank4/5
 12191  0554  0087               	movwf	7
 12192  0555  3002               	movlw	2	; select bank4/5
 12193  0556  3F46               	moviw [6]fsr1
 12194  0557  0021               	movlb	1	; select bank1
 12195  0558  00A6               	movwf	(_RF_Data^(0+128)+6)
 12196                           
 12197                           ;RF_Control_B1.c: 197: RF_Data[7] = product->Data[7];
 12198  0559  0020               	movlb	0	; select bank0
 12199  055A  086D               	movf	_product,w
 12200  055B  0086               	movwf	6
 12201  055C  3002               	movlw	2	; select bank4/5
 12202  055D  0087               	movwf	7
 12203  055E  3002               	movlw	2	; select bank4/5
 12204  055F  3F47               	moviw [7]fsr1
 12205  0560  0021               	movlb	1	; select bank1
 12206  0561  00A7               	movwf	(_RF_Data^(0+128)+7)
 12207                           
 12208                           ;RF_Control_B1.c: 198: RF_Data[8] = product->Data[8];
 12209  0562  0020               	movlb	0	; select bank0
 12210  0563  086D               	movf	_product,w
 12211  0564  0086               	movwf	6
 12212  0565  3002               	movlw	2	; select bank4/5
 12213  0566  0087               	movwf	7
 12214  0567  3002               	movlw	2	; select bank4/5
 12215  0568  3F48               	moviw [8]fsr1
 12216  0569  0021               	movlb	1	; select bank1
 12217  056A  00A8               	movwf	(_RF_Data^(0+128)+8)
 12218                           
 12219                           ;RF_Control_B1.c: 199: RF_Data[9] = product->Data[9];
 12220  056B  0020               	movlb	0	; select bank0
 12221  056C  086D               	movf	_product,w
 12222  056D  0086               	movwf	6
 12223  056E  3002               	movlw	2	; select bank4/5
 12224  056F  0087               	movwf	7
 12225  0570  3002               	movlw	2	; select bank4/5
 12226  0571  3F49               	moviw [9]fsr1
 12227  0572  0021               	movlb	1	; select bank1
 12228  0573  00A9               	movwf	(_RF_Data^(0+128)+9)
 12229                           
 12230                           ;RF_Control_B1.c: 200: RF_Data[10] = product->Data[10];
 12231  0574  0020               	movlb	0	; select bank0
 12232  0575  086D               	movf	_product,w
 12233  0576  0086               	movwf	6
 12234  0577  3002               	movlw	2	; select bank4/5
 12235  0578  0087               	movwf	7
 12236  0579  3002               	movlw	2	; select bank4/5
 12237  057A  3F4A               	moviw [10]fsr1
 12238  057B  0021               	movlb	1	; select bank1
 12239  057C  00AA               	movwf	(_RF_Data^(0+128)+10)
 12240                           
 12241                           ;RF_Control_B1.c: 201: RF_Data[11] = product->Data[11];
 12242  057D  0020               	movlb	0	; select bank0
 12243  057E  086D               	movf	_product,w
 12244  057F  0086               	movwf	6
 12245  0580  3002               	movlw	2	; select bank4/5
 12246  0581  0087               	movwf	7
 12247  0582  3002               	movlw	2	; select bank4/5
 12248  0583  3F4B               	moviw [11]fsr1
 12249  0584  0021               	movlb	1	; select bank1
 12250  0585  00AB               	movwf	(_RF_Data^(0+128)+11)
 12251                           
 12252                           ;RF_Control_B1.c: 202: RF_Data[12] = product->Data[12];
 12253  0586  0020               	movlb	0	; select bank0
 12254  0587  086D               	movf	_product,w
 12255  0588  0086               	movwf	6
 12256  0589  3002               	movlw	2	; select bank4/5
 12257  058A  0087               	movwf	7
 12258  058B  3002               	movlw	2	; select bank4/5
 12259  058C  3F4C               	moviw [12]fsr1
 12260  058D  0021               	movlb	1	; select bank1
 12261  058E  00AC               	movwf	(_RF_Data^(0+128)+12)
 12262                           
 12263                           ;RF_Control_B1.c: 203: RF_Data[13] = product->Data[13];
 12264  058F  0020               	movlb	0	; select bank0
 12265  0590  086D               	movf	_product,w
 12266  0591  0086               	movwf	6
 12267  0592  3002               	movlw	2	; select bank4/5
 12268  0593  0087               	movwf	7
 12269  0594  3002               	movlw	2	; select bank4/5
 12270  0595  3F4D               	moviw [13]fsr1
 12271  0596  0021               	movlb	1	; select bank1
 12272  0597  00AD               	movwf	(_RF_Data^(0+128)+13)
 12273                           
 12274                           ;RF_Control_B1.c: 204: RF_Data[14] = product->Data[14];
 12275  0598  0020               	movlb	0	; select bank0
 12276  0599  086D               	movf	_product,w
 12277  059A  0086               	movwf	6
 12278  059B  3002               	movlw	2	; select bank4/5
 12279  059C  0087               	movwf	7
 12280  059D  3002               	movlw	2	; select bank4/5
 12281  059E  3F4E               	moviw [14]fsr1
 12282  059F  0021               	movlb	1	; select bank1
 12283  05A0  00AE               	movwf	(_RF_Data^(0+128)+14)
 12284                           
 12285                           ;RF_Control_B1.c: 205: RF_Data[15] = product->Data[15];
 12286  05A1  0020               	movlb	0	; select bank0
 12287  05A2  086D               	movf	_product,w
 12288  05A3  0086               	movwf	6
 12289  05A4  3002               	movlw	2	; select bank4/5
 12290  05A5  0087               	movwf	7
 12291  05A6  3002               	movlw	2	; select bank4/5
 12292  05A7  3F4F               	moviw [15]fsr1
 12293  05A8  0021               	movlb	1	; select bank1
 12294  05A9  00AF               	movwf	(_RF_Data^(0+128)+15)
 12295                           
 12296                           ;RF_Control_B1.c: 206: RF_Data[16] = product->Data[16];
 12297  05AA  0020               	movlb	0	; select bank0
 12298  05AB  086D               	movf	_product,w
 12299  05AC  0086               	movwf	6
 12300  05AD  3002               	movlw	2	; select bank4/5
 12301  05AE  0087               	movwf	7
 12302  05AF  3002               	movlw	2	; select bank4/5
 12303  05B0  3F50               	moviw [16]fsr1
 12304  05B1  0021               	movlb	1	; select bank1
 12305  05B2  00B0               	movwf	(_RF_Data^(0+128)+16)
 12306                           
 12307                           ;RF_Control_B1.c: 207: RF_Data[17] = product->Data[17];
 12308  05B3  0020               	movlb	0	; select bank0
 12309  05B4  086D               	movf	_product,w
 12310  05B5  0086               	movwf	6
 12311  05B6  3002               	movlw	2	; select bank4/5
 12312  05B7  0087               	movwf	7
 12313  05B8  3002               	movlw	2	; select bank4/5
 12314  05B9  3F51               	moviw [17]fsr1
 12315  05BA  0021               	movlb	1	; select bank1
 12316  05BB  00B1               	movwf	(_RF_Data^(0+128)+17)
 12317                           
 12318                           ;RF_Control_B1.c: 208: RF_Data[18] = product->Data[18];
 12319  05BC  0020               	movlb	0	; select bank0
 12320  05BD  086D               	movf	_product,w
 12321  05BE  0086               	movwf	6
 12322  05BF  3002               	movlw	2	; select bank4/5
 12323  05C0  0087               	movwf	7
 12324  05C1  3002               	movlw	2	; select bank4/5
 12325  05C2  3F52               	moviw [18]fsr1
 12326  05C3  0021               	movlb	1	; select bank1
 12327  05C4  00B2               	movwf	(_RF_Data^(0+128)+18)
 12328                           
 12329                           ;RF_Control_B1.c: 209: RF_Data[19] = product->Data[19];
 12330  05C5  0020               	movlb	0	; select bank0
 12331  05C6  086D               	movf	_product,w
 12332  05C7  0086               	movwf	6
 12333  05C8  3002               	movlw	2	; select bank4/5
 12334  05C9  0087               	movwf	7
 12335  05CA  3002               	movlw	2	; select bank4/5
 12336  05CB  3F53               	moviw [19]fsr1
 12337  05CC  0021               	movlb	1	; select bank1
 12338  05CD  00B3               	movwf	(_RF_Data^(0+128)+19)
 12339                           
 12340                           ;RF_Control_B1.c: 210: RF_Data[20] = 211;
 12341  05CE  30D3               	movlw	211
 12342  05CF  0020               	movlb	0	; select bank0
 12343  05D0  00A0               	movwf	??_setTxData
 12344  05D1  0820               	movf	??_setTxData,w
 12345  05D2  0021               	movlb	1	; select bank1
 12346  05D3  00B4               	movwf	(_RF_Data^(0+128)+20)
 12347  05D4  0008               	return
 12348  05D5                     __end_of_setTxData:	
 12349                           
 12350                           	psect	text71
 12351  1F65                     __ptext71:	
 12352 ;; *************** function _setSw_Status *****************
 12353 ;; Defined at:
 12354 ;;		line 111 in file "../src/Switch_B1.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;  sw              1    wreg     unsigned char 
 12357 ;;  command         1    2[BANK0 ] unsigned char 
 12358 ;; Auto vars:     Size  Location     Type
 12359 ;;  sw              1    3[BANK0 ] unsigned char 
 12360 ;; Return value:  Size  Location     Type
 12361 ;;		None               void
 12362 ;; Registers used:
 12363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12369 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;Total ram usage:        2 bytes
 12374 ;; Hardware stack levels used:    1
 12375 ;; Hardware stack levels required when called:    6
 12376 ;; This function calls:
 12377 ;;		_SwPointSelect
 12378 ;; This function is called by:
 12379 ;;		_DlyOff_Main
 12380 ;;		_setControl_Lights_Table
 12381 ;;		_setRFSW_Control
 12382 ;;		_setDimmerLights_ERROR
 12383 ;; This function uses a non-reentrant model
 12384 ;;
 12385                           
 12386                           
 12387                           ;psect for function _setSw_Status
 12388  1F65                     _setSw_Status:	
 12389                           
 12390                           ;incstack = 0
 12391                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12392                           ;setSw_Status@sw stored from wreg
 12393  1F65  0020               	movlb	0	; select bank0
 12394  1F66  00A3               	movwf	setSw_Status@sw
 12395                           
 12396                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12397  1F67  0823               	movf	setSw_Status@sw,w
 12398  1F68  3192  221F         	fcall	_SwPointSelect
 12399                           
 12400                           ;Switch_B1.c: 113: Sw->Status = command;
 12401  1F6A  0020               	movlb	0	; select bank0
 12402  1F6B  086C               	movf	_Sw,w
 12403  1F6C  0086               	movwf	6
 12404  1F6D  3001               	movlw	1	; select bank2/3
 12405  1F6E  0087               	movwf	7
 12406  1F6F  0822               	movf	setSw_Status@command,w
 12407  1F70  1301               	bcf	1,6
 12408  1F71  1D03               	skipz
 12409  1F72  1701               	bsf	1,6
 12410  1F73  0008               	return
 12411  1F74                     __end_of_setSw_Status:	
 12412                           
 12413                           	psect	text72
 12414  121F                     __ptext72:	
 12415 ;; *************** function _SwPointSelect *****************
 12416 ;; Defined at:
 12417 ;;		line 21 in file "../src/Switch_B1.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;  sw              1    wreg     unsigned char 
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  sw              1    1[BANK0 ] unsigned char 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;		None               void
 12424 ;; Registers used:
 12425 ;;		wreg
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;Total ram usage:        2 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    5
 12438 ;; This function calls:
 12439 ;;		Nothing
 12440 ;; This function is called by:
 12441 ;;		_setSw_Enable
 12442 ;;		_setSw_Status
 12443 ;;		_setSw_Main
 12444 ;;		_Sw_Detect
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           
 12449                           ;psect for function _SwPointSelect
 12450  121F                     _SwPointSelect:	
 12451                           
 12452                           ;incstack = 0
 12453                           ; Regs used in _SwPointSelect: [wreg]
 12454                           ;SwPointSelect@sw stored from wreg
 12455  121F  0020               	movlb	0	; select bank0
 12456  1220  00A1               	movwf	SwPointSelect@sw
 12457                           
 12458                           ;Switch_B1.c: 24: if (sw == 1) {
 12459  1221  0821               	movf	SwPointSelect@sw,w
 12460  1222  3A01               	xorlw	1
 12461  1223  1D03               	skipz
 12462  1224  2A2A               	goto	l7977
 12463                           
 12464                           ;Switch_B1.c: 25: Sw = &Sw1;
 12465  1225  3046               	movlw	_Sw1& (0+255)
 12466  1226  00A0               	movwf	??_SwPointSelect
 12467  1227  0820               	movf	??_SwPointSelect,w
 12468  1228  00EC               	movwf	_Sw
 12469                           
 12470                           ;Switch_B1.c: 26: }
 12471  1229  0008               	return
 12472  122A                     l7977:	
 12473                           
 12474                           ;Switch_B1.c: 29: else if (sw == 2) {
 12475  122A  0821               	movf	SwPointSelect@sw,w
 12476  122B  3A02               	xorlw	2
 12477  122C  1D03               	skipz
 12478  122D  2A33               	goto	l7981
 12479                           
 12480                           ;Switch_B1.c: 30: Sw = &Sw2;
 12481  122E  30D4               	movlw	_Sw2& (0+255)
 12482  122F  00A0               	movwf	??_SwPointSelect
 12483  1230  0820               	movf	??_SwPointSelect,w
 12484  1231  00EC               	movwf	_Sw
 12485                           
 12486                           ;Switch_B1.c: 31: }
 12487  1232  0008               	return
 12488  1233                     l7981:	
 12489                           
 12490                           ;Switch_B1.c: 34: else if (sw == 3) {
 12491  1233  0821               	movf	SwPointSelect@sw,w
 12492  1234  3A03               	xorlw	3
 12493  1235  1D03               	skipz
 12494  1236  0008               	return
 12495                           
 12496                           ;Switch_B1.c: 35: Sw = &Sw3;
 12497  1237  30DD               	movlw	_Sw3& (0+255)
 12498  1238  00A0               	movwf	??_SwPointSelect
 12499  1239  0820               	movf	??_SwPointSelect,w
 12500  123A  00EC               	movwf	_Sw
 12501  123B  0008               	return
 12502  123C                     __end_of_SwPointSelect:	
 12503                           
 12504                           	psect	text73
 12505  0A76                     __ptext73:	
 12506 ;; *************** function _setRF_DimmerLights *****************
 12507 ;; Defined at:
 12508 ;;		line 440 in file "../src/RF_Control_B1.c"
 12509 ;; Parameters:    Size  Location     Type
 12510 ;;  lights          1    wreg     unsigned char 
 12511 ;;  on              1   61[BANK0 ] unsigned char 
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  lights          1   65[BANK0 ] unsigned char 
 12514 ;;  status          1   64[BANK0 ] unsigned char 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;		None               void
 12517 ;; Registers used:
 12518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;Total ram usage:        5 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    8
 12531 ;; This function calls:
 12532 ;;		_setPercentValue
 12533 ;; This function is called by:
 12534 ;;		_DlyOff_Main
 12535 ;;		_setDimmerLights_Adj
 12536 ;;		_setRFSW_Control
 12537 ;;		_Sw_DimmerOnFunc
 12538 ;;		_Sw_DimmerOffFunc
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           
 12543                           ;psect for function _setRF_DimmerLights
 12544  0A76                     _setRF_DimmerLights:	
 12545                           
 12546                           ;incstack = 0
 12547                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12548                           ;setRF_DimmerLights@lights stored from wreg
 12549  0A76  0020               	movlb	0	; select bank0
 12550  0A77  00E1               	movwf	setRF_DimmerLights@lights
 12551                           
 12552                           ;RF_Control_B1.c: 441: char status;
 12553                           ;RF_Control_B1.c: 442: status = 1;
 12554  0A78  01E0               	clrf	setRF_DimmerLights@status
 12555  0A79  0AE0               	incf	setRF_DimmerLights@status,f
 12556                           
 12557                           ;RF_Control_B1.c: 443: status <<= (lights - 1);
 12558  0A7A  0861               	movf	setRF_DimmerLights@lights,w
 12559  0A7B  3EFF               	addlw	-1
 12560  0A7C  0A89               	incf	9,f
 12561  0A7D  2A80               	goto	u8090
 12562  0A7E                     u8095:	
 12563  0A7E  1003               	clrc
 12564  0A7F  0DE0               	rlf	setRF_DimmerLights@status,f
 12565  0A80                     u8090:	
 12566  0A80  3EFF               	addlw	-1
 12567  0A81  1D03               	skipz
 12568  0A82  2A7E               	goto	u8095
 12569                           
 12570                           ;RF_Control_B1.c: 444: product->Data[11]=lights;
 12571  0A83  0861               	movf	setRF_DimmerLights@lights,w
 12572  0A84  00DE               	movwf	??_setRF_DimmerLights
 12573  0A85  086D               	movf	_product,w
 12574  0A86  3E0B               	addlw	11
 12575  0A87  0086               	movwf	6
 12576  0A88  3002               	movlw	2	; select bank4/5
 12577  0A89  0087               	movwf	7
 12578  0A8A  085E               	movf	??_setRF_DimmerLights,w
 12579  0A8B  0081               	movwf	1
 12580                           
 12581                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=setPercentValue(((char)((100-90)*0.8
      +                          )));
 12582  0A8C  3008               	movlw	8
 12583  0A8D  3196  267B  318A   	fcall	_setPercentValue
 12584  0A90  0020               	movlb	0	; select bank0
 12585  0A91  00DE               	movwf	??_setRF_DimmerLights
 12586  0A92  0861               	movf	setRF_DimmerLights@lights,w
 12587  0A93  3E14               	addlw	20
 12588  0A94  076D               	addwf	_product,w
 12589  0A95  00DF               	movwf	??_setRF_DimmerLights+1
 12590  0A96  085F               	movf	??_setRF_DimmerLights+1,w
 12591  0A97  0086               	movwf	6
 12592  0A98  3002               	movlw	2	; select bank4/5
 12593  0A99  0087               	movwf	7
 12594  0A9A  085E               	movf	??_setRF_DimmerLights,w
 12595  0A9B  0081               	movwf	1
 12596                           
 12597                           ;RF_Control_B1.c: 450: product->Data[9]=product->Data[20 + lights];
 12598  0A9C  0861               	movf	setRF_DimmerLights@lights,w
 12599  0A9D  3E14               	addlw	20
 12600  0A9E  076D               	addwf	_product,w
 12601  0A9F  00DE               	movwf	??_setRF_DimmerLights
 12602  0AA0  085E               	movf	??_setRF_DimmerLights,w
 12603  0AA1  0086               	movwf	6
 12604  0AA2  3002               	movlw	2	; select bank4/5
 12605  0AA3  0087               	movwf	7
 12606  0AA4  0801               	movf	1,w
 12607  0AA5  00DF               	movwf	??_setRF_DimmerLights+1
 12608  0AA6  086D               	movf	_product,w
 12609  0AA7  3E09               	addlw	9
 12610  0AA8  0086               	movwf	6
 12611  0AA9  3002               	movlw	2	; select bank4/5
 12612  0AAA  0087               	movwf	7
 12613  0AAB  085F               	movf	??_setRF_DimmerLights+1,w
 12614  0AAC  0081               	movwf	1
 12615                           
 12616                           ;RF_Control_B1.c: 451: product->Data[17]=product->Data[26 + lights];
 12617  0AAD  0861               	movf	setRF_DimmerLights@lights,w
 12618  0AAE  3E1A               	addlw	26
 12619  0AAF  076D               	addwf	_product,w
 12620  0AB0  00DE               	movwf	??_setRF_DimmerLights
 12621  0AB1  085E               	movf	??_setRF_DimmerLights,w
 12622  0AB2  0086               	movwf	6
 12623  0AB3  3002               	movlw	2	; select bank4/5
 12624  0AB4  0087               	movwf	7
 12625  0AB5  0801               	movf	1,w
 12626  0AB6  00DF               	movwf	??_setRF_DimmerLights+1
 12627  0AB7  086D               	movf	_product,w
 12628  0AB8  3E11               	addlw	17
 12629  0AB9  0086               	movwf	6
 12630  0ABA  3002               	movlw	2	; select bank4/5
 12631  0ABB  0087               	movwf	7
 12632  0ABC  085F               	movf	??_setRF_DimmerLights+1,w
 12633  0ABD  0081               	movwf	1
 12634                           
 12635                           ;RF_Control_B1.c: 452: if (on == 1) {
 12636  0ABE  085D               	movf	setRF_DimmerLights@on,w
 12637  0ABF  3A01               	xorlw	1
 12638  0AC0  1D03               	skipz
 12639  0AC1  2AD2               	goto	l8077
 12640                           
 12641                           ;RF_Control_B1.c: 453: product->Data[15]=(product->Data[15] | status);
 12642  0AC2  086D               	movf	_product,w
 12643  0AC3  3E0F               	addlw	15
 12644  0AC4  0086               	movwf	6
 12645  0AC5  3002               	movlw	2	; select bank4/5
 12646  0AC6  0087               	movwf	7
 12647  0AC7  0801               	movf	1,w
 12648  0AC8  0460               	iorwf	setRF_DimmerLights@status,w
 12649  0AC9  00DE               	movwf	??_setRF_DimmerLights
 12650  0ACA  086D               	movf	_product,w
 12651  0ACB  3E0F               	addlw	15
 12652  0ACC  0086               	movwf	6
 12653  0ACD  3002               	movlw	2	; select bank4/5
 12654  0ACE  0087               	movwf	7
 12655  0ACF  085E               	movf	??_setRF_DimmerLights,w
 12656  0AD0  0081               	movwf	1
 12657                           
 12658                           ;RF_Control_B1.c: 454: } else {
 12659  0AD1  0008               	return
 12660  0AD2                     l8077:	
 12661                           
 12662                           ;RF_Control_B1.c: 455: product->Data[15]=(product->Data[15]&(~status));
 12663  0AD2  086D               	movf	_product,w
 12664  0AD3  3E0F               	addlw	15
 12665  0AD4  0086               	movwf	6
 12666  0AD5  3002               	movlw	2	; select bank4/5
 12667  0AD6  0087               	movwf	7
 12668  0AD7  0960               	comf	setRF_DimmerLights@status,w
 12669  0AD8  0501               	andwf	1,w
 12670  0AD9  00DE               	movwf	??_setRF_DimmerLights
 12671  0ADA  086D               	movf	_product,w
 12672  0ADB  3E0F               	addlw	15
 12673  0ADC  0086               	movwf	6
 12674  0ADD  3002               	movlw	2	; select bank4/5
 12675  0ADE  0087               	movwf	7
 12676  0ADF  085E               	movf	??_setRF_DimmerLights,w
 12677  0AE0  0081               	movwf	1
 12678  0AE1  0008               	return
 12679  0AE2                     __end_of_setRF_DimmerLights:	
 12680                           
 12681                           	psect	text74
 12682  167B                     __ptext74:	
 12683 ;; *************** function _setPercentValue *****************
 12684 ;; Defined at:
 12685 ;;		line 779 in file "../src/Dimmer_B1.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;  value           1    wreg     unsigned char 
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  value           1   57[BANK0 ] unsigned char 
 12690 ;;  i               3   58[BANK0 ] float 
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  1    wreg      unsigned char 
 12693 ;; Registers used:
 12694 ;;		wreg, status,2, status,0, pclath, cstack
 12695 ;; Tracked objects:
 12696 ;;		On entry : 0/0
 12697 ;;		On exit  : 0/0
 12698 ;;		Unchanged: 0/0
 12699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;Total ram usage:        4 bytes
 12705 ;; Hardware stack levels used:    1
 12706 ;; Hardware stack levels required when called:    7
 12707 ;; This function calls:
 12708 ;;		___awtoft
 12709 ;;		___ftdiv
 12710 ;;		___fttol
 12711 ;; This function is called by:
 12712 ;;		_Flash_Memory_Initialization
 12713 ;;		_setRF_DimmerLights
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           
 12718                           ;psect for function _setPercentValue
 12719  167B                     _setPercentValue:	
 12720                           
 12721                           ;incstack = 0
 12722                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12723                           ;setPercentValue@value stored from wreg
 12724  167B  0020               	movlb	0	; select bank0
 12725  167C  00D9               	movwf	setPercentValue@value
 12726                           
 12727                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
 12728  167D  3000               	movlw	0
 12729  167E  00DA               	movwf	setPercentValue@i
 12730  167F  3050               	movlw	80
 12731  1680  00DB               	movwf	setPercentValue@i+1
 12732  1681  3042               	movlw	66
 12733  1682  00DC               	movwf	setPercentValue@i+2
 12734                           
 12735                           ;Dimmer_B1.c: 782: i /= 100;
 12736  1683  3000               	movlw	0
 12737  1684  00AE               	movwf	___ftdiv@f2
 12738  1685  30C8               	movlw	200
 12739  1686  00AF               	movwf	___ftdiv@f2+1
 12740  1687  3042               	movlw	66
 12741  1688  00B0               	movwf	___ftdiv@f2+2
 12742  1689  085A               	movf	setPercentValue@i,w
 12743  168A  00B1               	movwf	___ftdiv@f1
 12744  168B  085B               	movf	setPercentValue@i+1,w
 12745  168C  00B2               	movwf	___ftdiv@f1+1
 12746  168D  085C               	movf	setPercentValue@i+2,w
 12747  168E  00B3               	movwf	___ftdiv@f1+2
 12748  168F  3187  2738  3196   	fcall	___ftdiv
 12749  1692  0020               	movlb	0	; select bank0
 12750  1693  082E               	movf	?___ftdiv,w
 12751  1694  00DA               	movwf	setPercentValue@i
 12752  1695  082F               	movf	?___ftdiv+1,w
 12753  1696  00DB               	movwf	setPercentValue@i+1
 12754  1697  0830               	movf	?___ftdiv+2,w
 12755  1698  00DC               	movwf	setPercentValue@i+2
 12756                           
 12757                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-90)*0.8))) / i));
 12758  1699  0859               	movf	setPercentValue@value,w
 12759  169A  3EF8               	addlw	248
 12760  169B  00A8               	movwf	___awtoft@c
 12761  169C  30FF               	movlw	255
 12762  169D  1803               	skipnc
 12763  169E  3000               	movlw	0
 12764  169F  00A9               	movwf	___awtoft@c+1
 12765  16A0  3192  22DD  3196   	fcall	___awtoft
 12766  16A3  0020               	movlb	0	; select bank0
 12767  16A4  0828               	movf	?___awtoft,w
 12768  16A5  00B1               	movwf	___ftdiv@f1
 12769  16A6  0829               	movf	?___awtoft+1,w
 12770  16A7  00B2               	movwf	___ftdiv@f1+1
 12771  16A8  082A               	movf	?___awtoft+2,w
 12772  16A9  00B3               	movwf	___ftdiv@f1+2
 12773  16AA  085A               	movf	setPercentValue@i,w
 12774  16AB  00AE               	movwf	___ftdiv@f2
 12775  16AC  085B               	movf	setPercentValue@i+1,w
 12776  16AD  00AF               	movwf	___ftdiv@f2+1
 12777  16AE  085C               	movf	setPercentValue@i+2,w
 12778  16AF  00B0               	movwf	___ftdiv@f2+2
 12779  16B0  3187  2738  3196   	fcall	___ftdiv
 12780  16B3  0020               	movlb	0	; select bank0
 12781  16B4  082E               	movf	?___ftdiv,w
 12782  16B5  00CB               	movwf	___fttol@f1
 12783  16B6  082F               	movf	?___ftdiv+1,w
 12784  16B7  00CC               	movwf	___fttol@f1+1
 12785  16B8  0830               	movf	?___ftdiv+2,w
 12786  16B9  00CD               	movwf	___fttol@f1+2
 12787  16BA  318D  2536         	fcall	___fttol
 12788  16BC  0020               	movlb	0	; select bank0
 12789  16BD  034B               	decf	?___fttol,w
 12790  16BE  3AFF               	xorlw	255
 12791  16BF  3E64               	addlw	100
 12792  16C0  0008               	return
 12793  16C1                     __end_of_setPercentValue:	
 12794                           
 12795                           	psect	text75
 12796  0D36                     __ptext75:	
 12797 ;; *************** function ___fttol *****************
 12798 ;; Defined at:
 12799 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  f1              3   43[BANK0 ] float 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  lval            4   52[BANK0 ] unsigned long 
 12804 ;;  exp1            1   56[BANK0 ] unsigned char 
 12805 ;;  sign1           1   51[BANK0 ] unsigned char 
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  4   43[BANK0 ] long 
 12808 ;; Registers used:
 12809 ;;		wreg, status,2, status,0
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12815 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;Total ram usage:       14 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:    5
 12822 ;; This function calls:
 12823 ;;		Nothing
 12824 ;; This function is called by:
 12825 ;;		_getPercentValue
 12826 ;;		_setPercentValue
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           
 12831                           ;psect for function ___fttol
 12832  0D36                     ___fttol:	
 12833                           
 12834                           ;incstack = 0
 12835                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12836  0D36  0020               	movlb	0	; select bank0
 12837  0D37  084B               	movf	___fttol@f1,w
 12838  0D38  00CF               	movwf	??___fttol
 12839  0D39  084C               	movf	___fttol@f1+1,w
 12840  0D3A  00D0               	movwf	??___fttol+1
 12841  0D3B  084D               	movf	___fttol@f1+2,w
 12842  0D3C  00D1               	movwf	??___fttol+2
 12843  0D3D  1003               	clrc
 12844  0D3E  0D50               	rlf	??___fttol+1,w
 12845  0D3F  0D51               	rlf	??___fttol+2,w
 12846  0D40  00D2               	movwf	??___fttol+3
 12847  0D41  0852               	movf	??___fttol+3,w
 12848  0D42  00D8               	movwf	___fttol@exp1
 12849  0D43  08D8               	movf	___fttol@exp1,f
 12850  0D44  1D03               	skipz
 12851  0D45  2D4F               	goto	l5737
 12852  0D46  3000               	movlw	0
 12853  0D47  00CE               	movwf	?___fttol+3
 12854  0D48  3000               	movlw	0
 12855  0D49  00CD               	movwf	?___fttol+2
 12856  0D4A  3000               	movlw	0
 12857  0D4B  00CC               	movwf	?___fttol+1
 12858  0D4C  3000               	movlw	0
 12859  0D4D  00CB               	movwf	?___fttol
 12860  0D4E  0008               	return
 12861  0D4F                     l5737:	
 12862  0D4F  084B               	movf	___fttol@f1,w
 12863  0D50  00CF               	movwf	??___fttol
 12864  0D51  084C               	movf	___fttol@f1+1,w
 12865  0D52  00D0               	movwf	??___fttol+1
 12866  0D53  084D               	movf	___fttol@f1+2,w
 12867  0D54  00D1               	movwf	??___fttol+2
 12868  0D55  3017               	movlw	23
 12869  0D56                     u4455:	
 12870  0D56  36D1               	lsrf	??___fttol+2,f
 12871  0D57  0CD0               	rrf	??___fttol+1,f
 12872  0D58  0CCF               	rrf	??___fttol,f
 12873  0D59  0B89               	decfsz	9,f
 12874  0D5A  2D56               	goto	u4455
 12875  0D5B  084F               	movf	??___fttol,w
 12876  0D5C  00D2               	movwf	??___fttol+3
 12877  0D5D  0852               	movf	??___fttol+3,w
 12878  0D5E  00D3               	movwf	___fttol@sign1
 12879  0D5F  17CC               	bsf	___fttol@f1+1,7
 12880  0D60  30FF               	movlw	255
 12881  0D61  05CB               	andwf	___fttol@f1,f
 12882  0D62  30FF               	movlw	255
 12883  0D63  05CC               	andwf	___fttol@f1+1,f
 12884  0D64  3000               	movlw	0
 12885  0D65  05CD               	andwf	___fttol@f1+2,f
 12886  0D66  084B               	movf	___fttol@f1,w
 12887  0D67  00D4               	movwf	___fttol@lval
 12888  0D68  084C               	movf	___fttol@f1+1,w
 12889  0D69  00D5               	movwf	___fttol@lval+1
 12890  0D6A  084D               	movf	___fttol@f1+2,w
 12891  0D6B  00D6               	movwf	___fttol@lval+2
 12892  0D6C  01D7               	clrf	___fttol@lval+3
 12893  0D6D  308E               	movlw	142
 12894  0D6E  02D8               	subwf	___fttol@exp1,f
 12895  0D6F  1FD8               	btfss	___fttol@exp1,7
 12896  0D70  2D8D               	goto	l5757
 12897  0D71  0858               	movf	___fttol@exp1,w
 12898  0D72  3A80               	xorlw	128
 12899  0D73  3E8F               	addlw	143
 12900  0D74  1803               	skipnc
 12901  0D75  2D7F               	goto	l5755
 12902  0D76  3000               	movlw	0
 12903  0D77  00CE               	movwf	?___fttol+3
 12904  0D78  3000               	movlw	0
 12905  0D79  00CD               	movwf	?___fttol+2
 12906  0D7A  3000               	movlw	0
 12907  0D7B  00CC               	movwf	?___fttol+1
 12908  0D7C  3000               	movlw	0
 12909  0D7D  00CB               	movwf	?___fttol
 12910  0D7E  0008               	return
 12911  0D7F                     l5755:	
 12912  0D7F  3001               	movlw	1
 12913  0D80                     u4485:	
 12914  0D80  36D7               	lsrf	___fttol@lval+3,f
 12915  0D81  0CD6               	rrf	___fttol@lval+2,f
 12916  0D82  0CD5               	rrf	___fttol@lval+1,f
 12917  0D83  0CD4               	rrf	___fttol@lval,f
 12918  0D84  0B89               	decfsz	9,f
 12919  0D85  2D80               	goto	u4485
 12920  0D86  3001               	movlw	1
 12921  0D87  00CF               	movwf	??___fttol
 12922  0D88  084F               	movf	??___fttol,w
 12923  0D89  07D8               	addwf	___fttol@exp1,f
 12924  0D8A  1903               	btfsc	3,2
 12925  0D8B  2DA6               	goto	l5767
 12926  0D8C  2D7F               	goto	l5755
 12927  0D8D                     l5757:	
 12928  0D8D  3018               	movlw	24
 12929  0D8E  0258               	subwf	___fttol@exp1,w
 12930  0D8F  1C03               	skipc
 12931  0D90  2DA3               	goto	l5765
 12932  0D91  3000               	movlw	0
 12933  0D92  00CE               	movwf	?___fttol+3
 12934  0D93  3000               	movlw	0
 12935  0D94  00CD               	movwf	?___fttol+2
 12936  0D95  3000               	movlw	0
 12937  0D96  00CC               	movwf	?___fttol+1
 12938  0D97  3000               	movlw	0
 12939  0D98  00CB               	movwf	?___fttol
 12940  0D99  0008               	return
 12941  0D9A                     l5763:	
 12942  0D9A  3001               	movlw	1
 12943  0D9B                     u4515:	
 12944  0D9B  35D4               	lslf	___fttol@lval,f
 12945  0D9C  0DD5               	rlf	___fttol@lval+1,f
 12946  0D9D  0DD6               	rlf	___fttol@lval+2,f
 12947  0D9E  0DD7               	rlf	___fttol@lval+3,f
 12948  0D9F  0B89               	decfsz	9,f
 12949  0DA0  2D9B               	goto	u4515
 12950  0DA1  3001               	movlw	1
 12951  0DA2  02D8               	subwf	___fttol@exp1,f
 12952  0DA3                     l5765:	
 12953  0DA3  08D8               	movf	___fttol@exp1,f
 12954  0DA4  1D03               	skipz
 12955  0DA5  2D9A               	goto	l5763
 12956  0DA6                     l5767:	
 12957  0DA6  0853               	movf	___fttol@sign1,w
 12958  0DA7  1903               	btfsc	3,2
 12959  0DA8  2DB4               	goto	l5771
 12960  0DA9  09D4               	comf	___fttol@lval,f
 12961  0DAA  09D5               	comf	___fttol@lval+1,f
 12962  0DAB  09D6               	comf	___fttol@lval+2,f
 12963  0DAC  09D7               	comf	___fttol@lval+3,f
 12964  0DAD  0AD4               	incf	___fttol@lval,f
 12965  0DAE  1903               	skipnz
 12966  0DAF  0AD5               	incf	___fttol@lval+1,f
 12967  0DB0  1903               	skipnz
 12968  0DB1  0AD6               	incf	___fttol@lval+2,f
 12969  0DB2  1903               	skipnz
 12970  0DB3  0AD7               	incf	___fttol@lval+3,f
 12971  0DB4                     l5771:	
 12972  0DB4  0857               	movf	___fttol@lval+3,w
 12973  0DB5  00CE               	movwf	?___fttol+3
 12974  0DB6  0856               	movf	___fttol@lval+2,w
 12975  0DB7  00CD               	movwf	?___fttol+2
 12976  0DB8  0855               	movf	___fttol@lval+1,w
 12977  0DB9  00CC               	movwf	?___fttol+1
 12978  0DBA  0854               	movf	___fttol@lval,w
 12979  0DBB  00CB               	movwf	?___fttol
 12980  0DBC  0008               	return
 12981  0DBD                     __end_of___fttol:	
 12982                           
 12983                           	psect	text76
 12984  0738                     __ptext76:	
 12985 ;; *************** function ___ftdiv *****************
 12986 ;; Defined at:
 12987 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12988 ;; Parameters:    Size  Location     Type
 12989 ;;  f2              3   14[BANK0 ] float 
 12990 ;;  f1              3   17[BANK0 ] float 
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;  f3              3   25[BANK0 ] float 
 12993 ;;  sign            1   29[BANK0 ] unsigned char 
 12994 ;;  exp             1   28[BANK0 ] unsigned char 
 12995 ;;  cntr            1   24[BANK0 ] unsigned char 
 12996 ;; Return value:  Size  Location     Type
 12997 ;;                  3   14[BANK0 ] float 
 12998 ;; Registers used:
 12999 ;;		wreg, status,2, status,0, pclath, cstack
 13000 ;; Tracked objects:
 13001 ;;		On entry : 0/0
 13002 ;;		On exit  : 0/0
 13003 ;;		Unchanged: 0/0
 13004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13005 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13009 ;;Total ram usage:       16 bytes
 13010 ;; Hardware stack levels used:    1
 13011 ;; Hardware stack levels required when called:    6
 13012 ;; This function calls:
 13013 ;;		___ftpack
 13014 ;; This function is called by:
 13015 ;;		_getPercentValue
 13016 ;;		_setPercentValue
 13017 ;; This function uses a non-reentrant model
 13018 ;;
 13019                           
 13020                           
 13021                           ;psect for function ___ftdiv
 13022  0738                     ___ftdiv:	
 13023                           
 13024                           ;incstack = 0
 13025                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13026  0738  0020               	movlb	0	; select bank0
 13027  0739  0831               	movf	___ftdiv@f1,w
 13028  073A  00B4               	movwf	??___ftdiv
 13029  073B  0832               	movf	___ftdiv@f1+1,w
 13030  073C  00B5               	movwf	??___ftdiv+1
 13031  073D  0833               	movf	___ftdiv@f1+2,w
 13032  073E  00B6               	movwf	??___ftdiv+2
 13033  073F  1003               	clrc
 13034  0740  0D35               	rlf	??___ftdiv+1,w
 13035  0741  0D36               	rlf	??___ftdiv+2,w
 13036  0742  00B7               	movwf	??___ftdiv+3
 13037  0743  0837               	movf	??___ftdiv+3,w
 13038  0744  00BC               	movwf	___ftdiv@exp
 13039  0745  08BC               	movf	___ftdiv@exp,f
 13040  0746  1D03               	skipz
 13041  0747  2F4F               	goto	l5645
 13042  0748  3000               	movlw	0
 13043  0749  00AE               	movwf	?___ftdiv
 13044  074A  3000               	movlw	0
 13045  074B  00AF               	movwf	?___ftdiv+1
 13046  074C  3000               	movlw	0
 13047  074D  00B0               	movwf	?___ftdiv+2
 13048  074E  0008               	return
 13049  074F                     l5645:	
 13050  074F  082E               	movf	___ftdiv@f2,w
 13051  0750  00B4               	movwf	??___ftdiv
 13052  0751  082F               	movf	___ftdiv@f2+1,w
 13053  0752  00B5               	movwf	??___ftdiv+1
 13054  0753  0830               	movf	___ftdiv@f2+2,w
 13055  0754  00B6               	movwf	??___ftdiv+2
 13056  0755  1003               	clrc
 13057  0756  0D35               	rlf	??___ftdiv+1,w
 13058  0757  0D36               	rlf	??___ftdiv+2,w
 13059  0758  00B7               	movwf	??___ftdiv+3
 13060  0759  0837               	movf	??___ftdiv+3,w
 13061  075A  00BD               	movwf	___ftdiv@sign
 13062  075B  08BD               	movf	___ftdiv@sign,f
 13063  075C  1D03               	skipz
 13064  075D  2F65               	goto	l5651
 13065  075E  3000               	movlw	0
 13066  075F  00AE               	movwf	?___ftdiv
 13067  0760  3000               	movlw	0
 13068  0761  00AF               	movwf	?___ftdiv+1
 13069  0762  3000               	movlw	0
 13070  0763  00B0               	movwf	?___ftdiv+2
 13071  0764  0008               	return
 13072  0765                     l5651:	
 13073  0765  3000               	movlw	0
 13074  0766  00B9               	movwf	___ftdiv@f3
 13075  0767  3000               	movlw	0
 13076  0768  00BA               	movwf	___ftdiv@f3+1
 13077  0769  3000               	movlw	0
 13078  076A  00BB               	movwf	___ftdiv@f3+2
 13079  076B  3089               	movlw	137
 13080  076C  073D               	addwf	___ftdiv@sign,w
 13081  076D  00B4               	movwf	??___ftdiv
 13082  076E  0834               	movf	??___ftdiv,w
 13083  076F  02BC               	subwf	___ftdiv@exp,f
 13084  0770  0831               	movf	___ftdiv@f1,w
 13085  0771  00B4               	movwf	??___ftdiv
 13086  0772  0832               	movf	___ftdiv@f1+1,w
 13087  0773  00B5               	movwf	??___ftdiv+1
 13088  0774  0833               	movf	___ftdiv@f1+2,w
 13089  0775  00B6               	movwf	??___ftdiv+2
 13090  0776  3010               	movlw	16
 13091  0777                     u4265:	
 13092  0777  36B6               	lsrf	??___ftdiv+2,f
 13093  0778  0CB5               	rrf	??___ftdiv+1,f
 13094  0779  0CB4               	rrf	??___ftdiv,f
 13095  077A  0B89               	decfsz	9,f
 13096  077B  2F77               	goto	u4265
 13097  077C  0834               	movf	??___ftdiv,w
 13098  077D  00B7               	movwf	??___ftdiv+3
 13099  077E  0837               	movf	??___ftdiv+3,w
 13100  077F  00BD               	movwf	___ftdiv@sign
 13101  0780  082E               	movf	___ftdiv@f2,w
 13102  0781  00B4               	movwf	??___ftdiv
 13103  0782  082F               	movf	___ftdiv@f2+1,w
 13104  0783  00B5               	movwf	??___ftdiv+1
 13105  0784  0830               	movf	___ftdiv@f2+2,w
 13106  0785  00B6               	movwf	??___ftdiv+2
 13107  0786  3010               	movlw	16
 13108  0787                     u4275:	
 13109  0787  36B6               	lsrf	??___ftdiv+2,f
 13110  0788  0CB5               	rrf	??___ftdiv+1,f
 13111  0789  0CB4               	rrf	??___ftdiv,f
 13112  078A  0B89               	decfsz	9,f
 13113  078B  2F87               	goto	u4275
 13114  078C  0834               	movf	??___ftdiv,w
 13115  078D  00B7               	movwf	??___ftdiv+3
 13116  078E  0837               	movf	??___ftdiv+3,w
 13117  078F  06BD               	xorwf	___ftdiv@sign,f
 13118  0790  3080               	movlw	128
 13119  0791  00B4               	movwf	??___ftdiv
 13120  0792  0834               	movf	??___ftdiv,w
 13121  0793  05BD               	andwf	___ftdiv@sign,f
 13122  0794  17B2               	bsf	___ftdiv@f1+1,7
 13123  0795  30FF               	movlw	255
 13124  0796  05B1               	andwf	___ftdiv@f1,f
 13125  0797  30FF               	movlw	255
 13126  0798  05B2               	andwf	___ftdiv@f1+1,f
 13127  0799  3000               	movlw	0
 13128  079A  05B3               	andwf	___ftdiv@f1+2,f
 13129  079B  17AF               	bsf	___ftdiv@f2+1,7
 13130  079C  30FF               	movlw	255
 13131  079D  05AE               	andwf	___ftdiv@f2,f
 13132  079E  30FF               	movlw	255
 13133  079F  05AF               	andwf	___ftdiv@f2+1,f
 13134  07A0  3000               	movlw	0
 13135  07A1  05B0               	andwf	___ftdiv@f2+2,f
 13136  07A2  3018               	movlw	24
 13137  07A3  00B4               	movwf	??___ftdiv
 13138  07A4  0834               	movf	??___ftdiv,w
 13139  07A5  00B8               	movwf	___ftdiv@cntr
 13140  07A6                     l5665:	
 13141  07A6  3001               	movlw	1
 13142  07A7                     u4285:	
 13143  07A7  35B9               	lslf	___ftdiv@f3,f
 13144  07A8  0DBA               	rlf	___ftdiv@f3+1,f
 13145  07A9  0DBB               	rlf	___ftdiv@f3+2,f
 13146  07AA  0B89               	decfsz	9,f
 13147  07AB  2FA7               	goto	u4285
 13148  07AC  0830               	movf	___ftdiv@f2+2,w
 13149  07AD  0233               	subwf	___ftdiv@f1+2,w
 13150  07AE  1D03               	skipz
 13151  07AF  2FB6               	goto	u4295
 13152  07B0  082F               	movf	___ftdiv@f2+1,w
 13153  07B1  0232               	subwf	___ftdiv@f1+1,w
 13154  07B2  1D03               	skipz
 13155  07B3  2FB6               	goto	u4295
 13156  07B4  082E               	movf	___ftdiv@f2,w
 13157  07B5  0231               	subwf	___ftdiv@f1,w
 13158  07B6                     u4295:	
 13159  07B6  1C03               	skipc
 13160  07B7  2FBF               	goto	l5673
 13161  07B8  082E               	movf	___ftdiv@f2,w
 13162  07B9  02B1               	subwf	___ftdiv@f1,f
 13163  07BA  082F               	movf	___ftdiv@f2+1,w
 13164  07BB  3BB2               	subwfb	___ftdiv@f1+1,f
 13165  07BC  0830               	movf	___ftdiv@f2+2,w
 13166  07BD  3BB3               	subwfb	___ftdiv@f1+2,f
 13167  07BE  1439               	bsf	___ftdiv@f3,0
 13168  07BF                     l5673:	
 13169  07BF  3001               	movlw	1
 13170  07C0                     u4305:	
 13171  07C0  35B1               	lslf	___ftdiv@f1,f
 13172  07C1  0DB2               	rlf	___ftdiv@f1+1,f
 13173  07C2  0DB3               	rlf	___ftdiv@f1+2,f
 13174  07C3  0B89               	decfsz	9,f
 13175  07C4  2FC0               	goto	u4305
 13176  07C5  3001               	movlw	1
 13177  07C6  02B8               	subwf	___ftdiv@cntr,f
 13178  07C7  1D03               	btfss	3,2
 13179  07C8  2FA6               	goto	l5665
 13180  07C9  0839               	movf	___ftdiv@f3,w
 13181  07CA  00A0               	movwf	___ftpack@arg
 13182  07CB  083A               	movf	___ftdiv@f3+1,w
 13183  07CC  00A1               	movwf	___ftpack@arg+1
 13184  07CD  083B               	movf	___ftdiv@f3+2,w
 13185  07CE  00A2               	movwf	___ftpack@arg+2
 13186  07CF  083C               	movf	___ftdiv@exp,w
 13187  07D0  00B4               	movwf	??___ftdiv
 13188  07D1  0834               	movf	??___ftdiv,w
 13189  07D2  00A3               	movwf	___ftpack@exp
 13190  07D3  083D               	movf	___ftdiv@sign,w
 13191  07D4  00B5               	movwf	??___ftdiv+1
 13192  07D5  0835               	movf	??___ftdiv+1,w
 13193  07D6  00A4               	movwf	___ftpack@sign
 13194  07D7  3188  20E7         	fcall	___ftpack
 13195  07D9  0020               	movlb	0	; select bank0
 13196  07DA  0820               	movf	?___ftpack,w
 13197  07DB  00AE               	movwf	?___ftdiv
 13198  07DC  0821               	movf	?___ftpack+1,w
 13199  07DD  00AF               	movwf	?___ftdiv+1
 13200  07DE  0822               	movf	?___ftpack+2,w
 13201  07DF  00B0               	movwf	?___ftdiv+2
 13202  07E0  0008               	return
 13203  07E1                     __end_of___ftdiv:	
 13204                           
 13205                           	psect	text77
 13206  12DD                     __ptext77:	
 13207 ;; *************** function ___awtoft *****************
 13208 ;; Defined at:
 13209 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  c               2    8[BANK0 ] int 
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;  sign            1   13[BANK0 ] unsigned char 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  3    8[BANK0 ] float 
 13216 ;; Registers used:
 13217 ;;		wreg, status,2, status,0, pclath, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13223 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;Total ram usage:        6 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    6
 13230 ;; This function calls:
 13231 ;;		___ftpack
 13232 ;; This function is called by:
 13233 ;;		_getPercentValue
 13234 ;;		_setPercentValue
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           
 13239                           ;psect for function ___awtoft
 13240  12DD                     ___awtoft:	
 13241                           
 13242                           ;incstack = 0
 13243                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13244  12DD  0020               	movlb	0	; select bank0
 13245  12DE  01AD               	clrf	___awtoft@sign
 13246  12DF  1FA9               	btfss	___awtoft@c+1,7
 13247  12E0  2AE8               	goto	l7877
 13248  12E1  09A8               	comf	___awtoft@c,f
 13249  12E2  09A9               	comf	___awtoft@c+1,f
 13250  12E3  0AA8               	incf	___awtoft@c,f
 13251  12E4  1903               	skipnz
 13252  12E5  0AA9               	incf	___awtoft@c+1,f
 13253  12E6  01AD               	clrf	___awtoft@sign
 13254  12E7  0AAD               	incf	___awtoft@sign,f
 13255  12E8                     l7877:	
 13256  12E8  0828               	movf	___awtoft@c,w
 13257  12E9  00A0               	movwf	___ftpack@arg
 13258  12EA  0829               	movf	___awtoft@c+1,w
 13259  12EB  00A1               	movwf	___ftpack@arg+1
 13260  12EC  01A2               	clrf	___ftpack@arg+2
 13261  12ED  308E               	movlw	142
 13262  12EE  00AB               	movwf	??___awtoft
 13263  12EF  082B               	movf	??___awtoft,w
 13264  12F0  00A3               	movwf	___ftpack@exp
 13265  12F1  082D               	movf	___awtoft@sign,w
 13266  12F2  00AC               	movwf	??___awtoft+1
 13267  12F3  082C               	movf	??___awtoft+1,w
 13268  12F4  00A4               	movwf	___ftpack@sign
 13269  12F5  3188  20E7         	fcall	___ftpack
 13270  12F7  0020               	movlb	0	; select bank0
 13271  12F8  0820               	movf	?___ftpack,w
 13272  12F9  00A8               	movwf	?___awtoft
 13273  12FA  0821               	movf	?___ftpack+1,w
 13274  12FB  00A9               	movwf	?___awtoft+1
 13275  12FC  0822               	movf	?___ftpack+2,w
 13276  12FD  00AA               	movwf	?___awtoft+2
 13277  12FE  0008               	return
 13278  12FF                     __end_of___awtoft:	
 13279                           
 13280                           	psect	text78
 13281  08E7                     __ptext78:	
 13282 ;; *************** function ___ftpack *****************
 13283 ;; Defined at:
 13284 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13285 ;; Parameters:    Size  Location     Type
 13286 ;;  arg             3    0[BANK0 ] unsigned um
 13287 ;;  exp             1    3[BANK0 ] unsigned char 
 13288 ;;  sign            1    4[BANK0 ] unsigned char 
 13289 ;; Auto vars:     Size  Location     Type
 13290 ;;		None
 13291 ;; Return value:  Size  Location     Type
 13292 ;;                  3    0[BANK0 ] float 
 13293 ;; Registers used:
 13294 ;;		wreg, status,2, status,0
 13295 ;; Tracked objects:
 13296 ;;		On entry : 0/0
 13297 ;;		On exit  : 0/0
 13298 ;;		Unchanged: 0/0
 13299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13300 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;Total ram usage:        8 bytes
 13305 ;; Hardware stack levels used:    1
 13306 ;; Hardware stack levels required when called:    5
 13307 ;; This function calls:
 13308 ;;		Nothing
 13309 ;; This function is called by:
 13310 ;;		___awtoft
 13311 ;;		___ftadd
 13312 ;;		___ftdiv
 13313 ;;		___ftmul
 13314 ;; This function uses a non-reentrant model
 13315 ;;
 13316                           
 13317                           
 13318                           ;psect for function ___ftpack
 13319  08E7                     ___ftpack:	
 13320                           
 13321                           ;incstack = 0
 13322                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13323  08E7  0020               	movlb	0	; select bank0
 13324  08E8  0823               	movf	___ftpack@exp,w
 13325  08E9  1903               	btfsc	3,2
 13326  08EA  28F0               	goto	l5529
 13327  08EB  0822               	movf	___ftpack@arg+2,w
 13328  08EC  0421               	iorwf	___ftpack@arg+1,w
 13329  08ED  0420               	iorwf	___ftpack@arg,w
 13330  08EE  1D03               	skipz
 13331  08EF  2901               	goto	l5535
 13332  08F0                     l5529:	
 13333  08F0  3000               	movlw	0
 13334  08F1  00A0               	movwf	?___ftpack
 13335  08F2  3000               	movlw	0
 13336  08F3  00A1               	movwf	?___ftpack+1
 13337  08F4  3000               	movlw	0
 13338  08F5  00A2               	movwf	?___ftpack+2
 13339  08F6  0008               	return
 13340  08F7                     l5533:	
 13341  08F7  3001               	movlw	1
 13342  08F8  00A5               	movwf	??___ftpack
 13343  08F9  0825               	movf	??___ftpack,w
 13344  08FA  07A3               	addwf	___ftpack@exp,f
 13345  08FB  3001               	movlw	1
 13346  08FC                     u3915:	
 13347  08FC  36A2               	lsrf	___ftpack@arg+2,f
 13348  08FD  0CA1               	rrf	___ftpack@arg+1,f
 13349  08FE  0CA0               	rrf	___ftpack@arg,f
 13350  08FF  0B89               	decfsz	9,f
 13351  0900  28FC               	goto	u3915
 13352  0901                     l5535:	
 13353  0901  30FE               	movlw	254
 13354  0902  0522               	andwf	___ftpack@arg+2,w
 13355  0903  1903               	btfsc	3,2
 13356  0904  291A               	goto	l2965
 13357  0905  28F7               	goto	l5533
 13358  0906                     l5537:	
 13359  0906  3001               	movlw	1
 13360  0907  00A5               	movwf	??___ftpack
 13361  0908  0825               	movf	??___ftpack,w
 13362  0909  07A3               	addwf	___ftpack@exp,f
 13363  090A  3001               	movlw	1
 13364  090B  07A0               	addwf	___ftpack@arg,f
 13365  090C  3000               	movlw	0
 13366  090D  1803               	skipnc
 13367  090E  3001               	movlw	1
 13368  090F  07A1               	addwf	___ftpack@arg+1,f
 13369  0910  3000               	movlw	0
 13370  0911  1803               	skipnc
 13371  0912  3001               	movlw	1
 13372  0913  07A2               	addwf	___ftpack@arg+2,f
 13373  0914  3001               	movlw	1
 13374  0915                     u3935:	
 13375  0915  36A2               	lsrf	___ftpack@arg+2,f
 13376  0916  0CA1               	rrf	___ftpack@arg+1,f
 13377  0917  0CA0               	rrf	___ftpack@arg,f
 13378  0918  0B89               	decfsz	9,f
 13379  0919  2915               	goto	u3935
 13380  091A                     l2965:	
 13381  091A  30FF               	movlw	255
 13382  091B  0522               	andwf	___ftpack@arg+2,w
 13383  091C  1903               	btfsc	3,2
 13384  091D  2927               	goto	l5545
 13385  091E  2906               	goto	l5537
 13386  091F                     l5543:	
 13387  091F  3001               	movlw	1
 13388  0920  02A3               	subwf	___ftpack@exp,f
 13389  0921  3001               	movlw	1
 13390  0922                     u3955:	
 13391  0922  35A0               	lslf	___ftpack@arg,f
 13392  0923  0DA1               	rlf	___ftpack@arg+1,f
 13393  0924  0DA2               	rlf	___ftpack@arg+2,f
 13394  0925  0B89               	decfsz	9,f
 13395  0926  2922               	goto	u3955
 13396  0927                     l5545:	
 13397  0927  1FA1               	btfss	___ftpack@arg+1,7
 13398  0928  291F               	goto	l5543
 13399  0929  1823               	btfsc	___ftpack@exp,0
 13400  092A  2931               	goto	l2971
 13401  092B  30FF               	movlw	255
 13402  092C  05A0               	andwf	___ftpack@arg,f
 13403  092D  307F               	movlw	127
 13404  092E  05A1               	andwf	___ftpack@arg+1,f
 13405  092F  30FF               	movlw	255
 13406  0930  05A2               	andwf	___ftpack@arg+2,f
 13407  0931                     l2971:	
 13408  0931  1003               	clrc
 13409  0932  0CA3               	rrf	___ftpack@exp,f
 13410  0933  0823               	movf	___ftpack@exp,w
 13411  0934  00A5               	movwf	??___ftpack
 13412  0935  01A6               	clrf	??___ftpack+1
 13413  0936  01A7               	clrf	??___ftpack+2
 13414  0937  3010               	movlw	16
 13415  0938                     u3985:	
 13416  0938  35A5               	lslf	??___ftpack,f
 13417  0939  0DA6               	rlf	??___ftpack+1,f
 13418  093A  0DA7               	rlf	??___ftpack+2,f
 13419  093B  0B89               	decfsz	9,f
 13420  093C  2938               	goto	u3985
 13421  093D  0825               	movf	??___ftpack,w
 13422  093E  04A0               	iorwf	___ftpack@arg,f
 13423  093F  0826               	movf	??___ftpack+1,w
 13424  0940  04A1               	iorwf	___ftpack@arg+1,f
 13425  0941  0827               	movf	??___ftpack+2,w
 13426  0942  04A2               	iorwf	___ftpack@arg+2,f
 13427  0943  0824               	movf	___ftpack@sign,w
 13428  0944  1903               	btfsc	3,2
 13429  0945  0008               	return
 13430  0946  17A2               	bsf	___ftpack@arg+2,7
 13431  0947  0008               	return
 13432  0948                     __end_of___ftpack:	
 13433                           
 13434                           	psect	text79
 13435  1F56                     __ptext79:	
 13436 ;; *************** function _setRFSW_Status *****************
 13437 ;; Defined at:
 13438 ;;		line 422 in file "../src/RF_Control_B1.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;  sw              1    wreg     unsigned char 
 13441 ;;  command         1    2[BANK0 ] unsigned char 
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;  sw              1    3[BANK0 ] unsigned char 
 13444 ;; Return value:  Size  Location     Type
 13445 ;;		None               void
 13446 ;; Registers used:
 13447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13448 ;; Tracked objects:
 13449 ;;		On entry : 0/0
 13450 ;;		On exit  : 0/0
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13453 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;Total ram usage:        2 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    6
 13460 ;; This function calls:
 13461 ;;		_RfSWPointSelect
 13462 ;; This function is called by:
 13463 ;;		_DlyOff_Main
 13464 ;;		_setControl_Lights_Table
 13465 ;;		_Sw_DimmerOnFunc
 13466 ;;		_Sw_DimmerAdjFunc
 13467 ;;		_setDimmerLights_ERROR
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471                           
 13472                           ;psect for function _setRFSW_Status
 13473  1F56                     _setRFSW_Status:	
 13474                           
 13475                           ;incstack = 0
 13476                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13477                           ;setRFSW_Status@sw stored from wreg
 13478  1F56  0020               	movlb	0	; select bank0
 13479  1F57  00A3               	movwf	setRFSW_Status@sw
 13480                           
 13481                           ;RF_Control_B1.c: 423: RfSWPointSelect(sw);
 13482  1F58  0823               	movf	setRFSW_Status@sw,w
 13483  1F59  3192  225B         	fcall	_RfSWPointSelect
 13484                           
 13485                           ;RF_Control_B1.c: 424: RFSW->Status = command;
 13486  1F5B  0021               	movlb	1	; select bank1
 13487  1F5C  0862               	movf	_RFSW^(0+128),w
 13488  1F5D  0086               	movwf	6
 13489  1F5E  0187               	clrf	7
 13490  1F5F  0020               	movlb	0	; select bank0
 13491  1F60  0822               	movf	setRFSW_Status@command,w
 13492  1F61  1001               	bcf	1,0
 13493  1F62  1D03               	skipz
 13494  1F63  1401               	bsf	1,0
 13495  1F64  0008               	return
 13496  1F65                     __end_of_setRFSW_Status:	
 13497                           
 13498                           	psect	text80
 13499  125B                     __ptext80:	
 13500 ;; *************** function _RfSWPointSelect *****************
 13501 ;; Defined at:
 13502 ;;		line 357 in file "../src/RF_Control_B1.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  sw              1    wreg     unsigned char 
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  sw              1    1[BANK0 ] unsigned char 
 13507 ;; Return value:  Size  Location     Type
 13508 ;;		None               void
 13509 ;; Registers used:
 13510 ;;		wreg
 13511 ;; Tracked objects:
 13512 ;;		On entry : 0/0
 13513 ;;		On exit  : 0/0
 13514 ;;		Unchanged: 0/0
 13515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;Total ram usage:        2 bytes
 13521 ;; Hardware stack levels used:    1
 13522 ;; Hardware stack levels required when called:    5
 13523 ;; This function calls:
 13524 ;;		Nothing
 13525 ;; This function is called by:
 13526 ;;		_setRFSW_Control
 13527 ;;		_setRFSW_AdjControl
 13528 ;;		_setRFSW_Status
 13529 ;; This function uses a non-reentrant model
 13530 ;;
 13531                           
 13532                           
 13533                           ;psect for function _RfSWPointSelect
 13534  125B                     _RfSWPointSelect:	
 13535                           
 13536                           ;incstack = 0
 13537                           ; Regs used in _RfSWPointSelect: [wreg]
 13538                           ;RfSWPointSelect@sw stored from wreg
 13539  125B  0020               	movlb	0	; select bank0
 13540  125C  00A1               	movwf	RfSWPointSelect@sw
 13541                           
 13542                           ;RF_Control_B1.c: 359: if (sw == 1) {
 13543  125D  0821               	movf	RfSWPointSelect@sw,w
 13544  125E  3A01               	xorlw	1
 13545  125F  1D03               	skipz
 13546  1260  2A66               	goto	l2239
 13547                           
 13548                           ;RF_Control_B1.c: 360: RFSW = &RFSW1;
 13549  1261  30EC               	movlw	_RFSW1& (0+255)
 13550  1262  00A0               	movwf	??_RfSWPointSelect
 13551  1263  0820               	movf	??_RfSWPointSelect,w
 13552  1264  0021               	movlb	1	; select bank1
 13553  1265  00E2               	movwf	_RFSW^(0+128)
 13554  1266                     l2239:	
 13555                           
 13556                           ;RF_Control_B1.c: 361: }
 13557                           ;RF_Control_B1.c: 364: if (sw == 2) {
 13558  1266  0020               	movlb	0	; select bank0
 13559  1267  0821               	movf	RfSWPointSelect@sw,w
 13560  1268  3A02               	xorlw	2
 13561  1269  1D03               	skipz
 13562  126A  2A70               	goto	l2240
 13563                           
 13564                           ;RF_Control_B1.c: 365: RFSW = &RFSW2;
 13565  126B  30ED               	movlw	_RFSW2& (0+255)
 13566  126C  00A0               	movwf	??_RfSWPointSelect
 13567  126D  0820               	movf	??_RfSWPointSelect,w
 13568  126E  0021               	movlb	1	; select bank1
 13569  126F  00E2               	movwf	_RFSW^(0+128)
 13570  1270                     l2240:	
 13571                           
 13572                           ;RF_Control_B1.c: 366: }
 13573                           ;RF_Control_B1.c: 369: if (sw == 3) {
 13574  1270  0020               	movlb	0	; select bank0
 13575  1271  0821               	movf	RfSWPointSelect@sw,w
 13576  1272  3A03               	xorlw	3
 13577  1273  1D03               	skipz
 13578  1274  0008               	return
 13579                           
 13580                           ;RF_Control_B1.c: 370: RFSW = &RFSW3;
 13581  1275  30EE               	movlw	_RFSW3& (0+255)
 13582  1276  00A0               	movwf	??_RfSWPointSelect
 13583  1277  0820               	movf	??_RfSWPointSelect,w
 13584  1278  0021               	movlb	1	; select bank1
 13585  1279  00E2               	movwf	_RFSW^(0+128)
 13586  127A  0008               	return
 13587  127B                     __end_of_RfSWPointSelect:	
 13588                           
 13589                           	psect	text81
 13590  1FC0                     __ptext81:	
 13591 ;; *************** function _setDimmerLights_Trigger *****************
 13592 ;; Defined at:
 13593 ;;		line 716 in file "../src/Dimmer_B1.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  lights          1    wreg     unsigned char 
 13596 ;;  command         1    2[BANK0 ] unsigned char 
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;  lights          1    3[BANK0 ] unsigned char 
 13599 ;; Return value:  Size  Location     Type
 13600 ;;		None               void
 13601 ;; Registers used:
 13602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13608 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;Total ram usage:        2 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; Hardware stack levels required when called:    6
 13615 ;; This function calls:
 13616 ;;		_DimmerLightsPointSelect
 13617 ;; This function is called by:
 13618 ;;		_DlyOff_Main
 13619 ;;		_setRFSW_Control
 13620 ;;		_Sw_DimmerOnFunc
 13621 ;;		_Sw_DimmerOffFunc
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           
 13626                           ;psect for function _setDimmerLights_Trigger
 13627  1FC0                     _setDimmerLights_Trigger:	
 13628                           
 13629                           ;incstack = 0
 13630                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13631                           ;setDimmerLights_Trigger@lights stored from wreg
 13632  1FC0  0020               	movlb	0	; select bank0
 13633  1FC1  00A3               	movwf	setDimmerLights_Trigger@lights
 13634                           
 13635                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 13636  1FC2  0823               	movf	setDimmerLights_Trigger@lights,w
 13637  1FC3  3191  21CA         	fcall	_DimmerLightsPointSelect
 13638                           
 13639                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 13640  1FC5  0020               	movlb	0	; select bank0
 13641  1FC6  086B               	movf	_DimmerLights,w
 13642  1FC7  3E08               	addlw	8
 13643  1FC8  0086               	movwf	6
 13644  1FC9  3001               	movlw	1	; select bank2/3
 13645  1FCA  0087               	movwf	7
 13646  1FCB  0822               	movf	setDimmerLights_Trigger@command,w
 13647  1FCC  1101               	bcf	1,2
 13648  1FCD  1D03               	skipz
 13649  1FCE  1501               	bsf	1,2
 13650  1FCF  0008               	return
 13651  1FD0                     __end_of_setDimmerLights_Trigger:	
 13652                           
 13653                           	psect	text82
 13654  1FB0                     __ptext82:	
 13655 ;; *************** function _setDimmerLights_Switch *****************
 13656 ;; Defined at:
 13657 ;;		line 704 in file "../src/Dimmer_B1.c"
 13658 ;; Parameters:    Size  Location     Type
 13659 ;;  lights          1    wreg     unsigned char 
 13660 ;;  command         1    2[BANK0 ] unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  lights          1    3[BANK0 ] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;		None               void
 13665 ;; Registers used:
 13666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13672 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;Total ram usage:        2 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    6
 13679 ;; This function calls:
 13680 ;;		_DimmerLightsPointSelect
 13681 ;; This function is called by:
 13682 ;;		_DlyOff_Main
 13683 ;;		_setRFSW_Control
 13684 ;;		_Sw_DimmerOnFunc
 13685 ;;		_Sw_DimmerOffFunc
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           
 13690                           ;psect for function _setDimmerLights_Switch
 13691  1FB0                     _setDimmerLights_Switch:	
 13692                           
 13693                           ;incstack = 0
 13694                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13695                           ;setDimmerLights_Switch@lights stored from wreg
 13696  1FB0  0020               	movlb	0	; select bank0
 13697  1FB1  00A3               	movwf	setDimmerLights_Switch@lights
 13698                           
 13699                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 13700  1FB2  0823               	movf	setDimmerLights_Switch@lights,w
 13701  1FB3  3191  21CA         	fcall	_DimmerLightsPointSelect
 13702                           
 13703                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 13704  1FB5  0020               	movlb	0	; select bank0
 13705  1FB6  086B               	movf	_DimmerLights,w
 13706  1FB7  3E08               	addlw	8
 13707  1FB8  0086               	movwf	6
 13708  1FB9  3001               	movlw	1	; select bank2/3
 13709  1FBA  0087               	movwf	7
 13710  1FBB  0822               	movf	setDimmerLights_Switch@command,w
 13711  1FBC  1081               	bcf	1,1
 13712  1FBD  1D03               	skipz
 13713  1FBE  1481               	bsf	1,1
 13714  1FBF  0008               	return
 13715  1FC0                     __end_of_setDimmerLights_Switch:	
 13716                           
 13717                           	psect	text83
 13718  11CA                     __ptext83:	
 13719 ;; *************** function _DimmerLightsPointSelect *****************
 13720 ;; Defined at:
 13721 ;;		line 326 in file "../src/Dimmer_B1.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  lights          1    wreg     unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  lights          1    1[BANK0 ] unsigned char 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;		None               void
 13728 ;; Registers used:
 13729 ;;		wreg
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;Total ram usage:        2 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    5
 13742 ;; This function calls:
 13743 ;;		Nothing
 13744 ;; This function is called by:
 13745 ;;		_setDimmerLights_Initialization
 13746 ;;		_setDimmerLights_Main
 13747 ;;		_setDimmerLights
 13748 ;;		_setDimmerLights_Adj
 13749 ;;		_setDimmerLights_AdjRF
 13750 ;;		_setDimmerLights_Switch
 13751 ;;		_setDimmerLights_AdjGo
 13752 ;;		_setDimmerLights_Trigger
 13753 ;;		_setDimmerLights_TriggerAdj
 13754 ;;		_setDimmerLights_ERROR
 13755 ;;		_setDimmerLights_TriggerERROR
 13756 ;;		_setDimmerLights_GO
 13757 ;;		_setDimmerLights_MaxmumValue
 13758 ;;		_setDimmerLights_Clear
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           
 13763                           ;psect for function _DimmerLightsPointSelect
 13764  11CA                     _DimmerLightsPointSelect:	
 13765                           
 13766                           ;incstack = 0
 13767                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13768                           ;DimmerLightsPointSelect@lights stored from wreg
 13769  11CA  0020               	movlb	0	; select bank0
 13770  11CB  00A1               	movwf	DimmerLightsPointSelect@lights
 13771                           
 13772                           ;Dimmer_B1.c: 328: if (lights == 1) {
 13773  11CC  0821               	movf	DimmerLightsPointSelect@lights,w
 13774  11CD  3A01               	xorlw	1
 13775  11CE  1D03               	skipz
 13776  11CF  29D4               	goto	l857
 13777                           
 13778                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 13779  11D0  3028               	movlw	_DimmerLights1& (0+255)
 13780  11D1  00A0               	movwf	??_DimmerLightsPointSelect
 13781  11D2  0820               	movf	??_DimmerLightsPointSelect,w
 13782  11D3  00EB               	movwf	_DimmerLights
 13783  11D4                     l857:	
 13784                           
 13785                           ;Dimmer_B1.c: 330: }
 13786                           ;Dimmer_B1.c: 333: if (lights == 2) {
 13787  11D4  0821               	movf	DimmerLightsPointSelect@lights,w
 13788  11D5  3A02               	xorlw	2
 13789  11D6  1D03               	skipz
 13790  11D7  29DC               	goto	l858
 13791                           
 13792                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 13793  11D8  3037               	movlw	_DimmerLights2& (0+255)
 13794  11D9  00A0               	movwf	??_DimmerLightsPointSelect
 13795  11DA  0820               	movf	??_DimmerLightsPointSelect,w
 13796  11DB  00EB               	movwf	_DimmerLights
 13797  11DC                     l858:	
 13798                           
 13799                           ;Dimmer_B1.c: 335: }
 13800                           ;Dimmer_B1.c: 338: if (lights == 3) {
 13801  11DC  0821               	movf	DimmerLightsPointSelect@lights,w
 13802  11DD  3A03               	xorlw	3
 13803  11DE  1D03               	skipz
 13804  11DF  0008               	return
 13805                           
 13806                           ;Dimmer_B1.c: 339: DimmerLights = &DimmerLights3;
 13807  11E0  30C5               	movlw	_DimmerLights3& (0+255)
 13808  11E1  00A0               	movwf	??_DimmerLightsPointSelect
 13809  11E2  0820               	movf	??_DimmerLightsPointSelect,w
 13810  11E3  00EB               	movwf	_DimmerLights
 13811  11E4  0008               	return
 13812  11E5                     __end_of_DimmerLightsPointSelect:	
 13813                           
 13814                           	psect	text84
 13815  17A7                     __ptext84:	
 13816 ;; *************** function _setBuz *****************
 13817 ;; Defined at:
 13818 ;;		line 22 in file "../src/Buzzer_B1.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;  count           1    wreg     unsigned char 
 13821 ;;  time            2    9[BANK0 ] int 
 13822 ;; Auto vars:     Size  Location     Type
 13823 ;;  count           1   12[BANK0 ] unsigned char 
 13824 ;; Return value:  Size  Location     Type
 13825 ;;		None               void
 13826 ;; Registers used:
 13827 ;;		wreg, status,2, status,0, pclath, cstack
 13828 ;; Tracked objects:
 13829 ;;		On entry : 0/0
 13830 ;;		On exit  : 0/0
 13831 ;;		Unchanged: 0/0
 13832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;Total ram usage:        4 bytes
 13838 ;; Hardware stack levels used:    1
 13839 ;; Hardware stack levels required when called:    6
 13840 ;; This function calls:
 13841 ;;		___awdiv
 13842 ;; This function is called by:
 13843 ;;		_DlyOff_Main
 13844 ;;		_setDimmerLights_Main
 13845 ;;		_my_MainTime
 13846 ;;		_setLog_Code
 13847 ;;		_setControl_Lights_Table
 13848 ;;		_setRFSW_Control
 13849 ;;		_setSw_Main
 13850 ;;		_Sw_DimmerOnFunc
 13851 ;;		_DimmerLights_Exceptions
 13852 ;; This function uses a non-reentrant model
 13853 ;;
 13854                           
 13855                           
 13856                           ;psect for function _setBuz
 13857  17A7                     _setBuz:	
 13858                           
 13859                           ;incstack = 0
 13860                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 13861                           ;setBuz@count stored from wreg
 13862  17A7  0020               	movlb	0	; select bank0
 13863  17A8  00AC               	movwf	setBuz@count
 13864                           
 13865                           ;Buzzer_B1.c: 23: time /= 10;
 13866  17A9  300A               	movlw	10
 13867  17AA  00A0               	movwf	___awdiv@divisor
 13868  17AB  3000               	movlw	0
 13869  17AC  00A1               	movwf	___awdiv@divisor+1
 13870  17AD  082A               	movf	setBuz@time+1,w
 13871  17AE  01A3               	clrf	___awdiv@dividend+1
 13872  17AF  07A3               	addwf	___awdiv@dividend+1,f
 13873  17B0  0829               	movf	setBuz@time,w
 13874  17B1  01A2               	clrf	___awdiv@dividend
 13875  17B2  07A2               	addwf	___awdiv@dividend,f
 13876  17B3  3197  2753  3197   	fcall	___awdiv
 13877  17B6  0020               	movlb	0	; select bank0
 13878  17B7  0821               	movf	?___awdiv+1,w
 13879  17B8  01AA               	clrf	setBuz@time+1
 13880  17B9  07AA               	addwf	setBuz@time+1,f
 13881  17BA  0820               	movf	?___awdiv,w
 13882  17BB  01A9               	clrf	setBuz@time
 13883  17BC  07A9               	addwf	setBuz@time,f
 13884                           
 13885                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 13886  17BD  0021               	movlb	1	; select bank1
 13887  17BE  1C47               	btfss	_Buz1^(0+128),0
 13888  17BF  0008               	return
 13889                           
 13890                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 13891  17C0  18C7               	btfsc	_Buz1^(0+128),1
 13892  17C1  2FD8               	goto	l108
 13893                           
 13894                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 13895  17C2  14C7               	bsf	_Buz1^(0+128),1
 13896                           
 13897                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 13898  17C3  01C8               	clrf	(_Buz1^(0+128)+1)
 13899  17C4  01C9               	clrf	((_Buz1+1)^(0+128)+1)
 13900                           
 13901                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 13902  17C5  0020               	movlb	0	; select bank0
 13903  17C6  082C               	movf	setBuz@count,w
 13904  17C7  00AB               	movwf	??_setBuz
 13905  17C8  082B               	movf	??_setBuz,w
 13906  17C9  0021               	movlb	1	; select bank1
 13907  17CA  00CA               	movwf	(_Buz1^(0+128)+3)
 13908                           
 13909                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 13910  17CB  0020               	movlb	0	; select bank0
 13911  17CC  082A               	movf	setBuz@time+1,w
 13912  17CD  0021               	movlb	1	; select bank1
 13913  17CE  01CE               	clrf	((_Buz1+1)^(0+128)+6)
 13914  17CF  07CE               	addwf	((_Buz1+1)^(0+128)+6),f
 13915  17D0  0020               	movlb	0	; select bank0
 13916  17D1  0829               	movf	setBuz@time,w
 13917  17D2  0021               	movlb	1	; select bank1
 13918  17D3  01CD               	clrf	(_Buz1^(0+128)+6)
 13919  17D4  07CD               	addwf	(_Buz1^(0+128)+6),f
 13920                           
 13921                           ;Buzzer_B1.c: 30: RB3 = 1;
 13922  17D5  0020               	movlb	0	; select bank0
 13923  17D6  158D               	bsf	13,3	;volatile
 13924                           
 13925                           ;Buzzer_B1.c: 31: } else {
 13926  17D7  0008               	return
 13927  17D8                     l108:	
 13928                           
 13929                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 13930  17D8  19C7               	btfsc	_Buz1^(0+128),3
 13931  17D9  2FEC               	goto	l110
 13932                           
 13933                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 13934  17DA  15C7               	bsf	_Buz1^(0+128),3
 13935                           
 13936                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 13937  17DB  0020               	movlb	0	; select bank0
 13938  17DC  082C               	movf	setBuz@count,w
 13939  17DD  00AB               	movwf	??_setBuz
 13940  17DE  082B               	movf	??_setBuz,w
 13941  17DF  0021               	movlb	1	; select bank1
 13942  17E0  00CB               	movwf	(_Buz1^(0+128)+4)
 13943                           
 13944                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 13945  17E1  0020               	movlb	0	; select bank0
 13946  17E2  082A               	movf	setBuz@time+1,w
 13947  17E3  0021               	movlb	1	; select bank1
 13948  17E4  01D0               	clrf	((_Buz1+1)^(0+128)+8)
 13949  17E5  07D0               	addwf	((_Buz1+1)^(0+128)+8),f
 13950  17E6  0020               	movlb	0	; select bank0
 13951  17E7  0829               	movf	setBuz@time,w
 13952  17E8  0021               	movlb	1	; select bank1
 13953  17E9  01CF               	clrf	(_Buz1^(0+128)+8)
 13954  17EA  07CF               	addwf	(_Buz1^(0+128)+8),f
 13955                           
 13956                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 13957  17EB  0008               	return
 13958  17EC                     l110:	
 13959  17EC  1A47               	btfsc	_Buz1^(0+128),4
 13960  17ED  0008               	return
 13961                           
 13962                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 13963  17EE  1647               	bsf	_Buz1^(0+128),4
 13964                           
 13965                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 13966  17EF  0020               	movlb	0	; select bank0
 13967  17F0  082C               	movf	setBuz@count,w
 13968  17F1  00AB               	movwf	??_setBuz
 13969  17F2  082B               	movf	??_setBuz,w
 13970  17F3  0021               	movlb	1	; select bank1
 13971  17F4  00CC               	movwf	(_Buz1^(0+128)+5)
 13972                           
 13973                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 13974  17F5  0020               	movlb	0	; select bank0
 13975  17F6  082A               	movf	setBuz@time+1,w
 13976  17F7  0021               	movlb	1	; select bank1
 13977  17F8  01D2               	clrf	((_Buz1+1)^(0+128)+10)
 13978  17F9  07D2               	addwf	((_Buz1+1)^(0+128)+10),f
 13979  17FA  0020               	movlb	0	; select bank0
 13980  17FB  0829               	movf	setBuz@time,w
 13981  17FC  0021               	movlb	1	; select bank1
 13982  17FD  01D1               	clrf	(_Buz1^(0+128)+10)
 13983  17FE  07D1               	addwf	(_Buz1^(0+128)+10),f
 13984  17FF  0008               	return
 13985  1800                     __end_of_setBuz:	
 13986                           
 13987                           	psect	text85
 13988  1753                     __ptext85:	
 13989 ;; *************** function ___awdiv *****************
 13990 ;; Defined at:
 13991 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;  divisor         2    0[BANK0 ] int 
 13994 ;;  dividend        2    2[BANK0 ] int 
 13995 ;; Auto vars:     Size  Location     Type
 13996 ;;  quotient        2    7[BANK0 ] int 
 13997 ;;  sign            1    6[BANK0 ] unsigned char 
 13998 ;;  counter         1    5[BANK0 ] unsigned char 
 13999 ;; Return value:  Size  Location     Type
 14000 ;;                  2    0[BANK0 ] int 
 14001 ;; Registers used:
 14002 ;;		wreg, status,2, status,0
 14003 ;; Tracked objects:
 14004 ;;		On entry : 0/0
 14005 ;;		On exit  : 0/0
 14006 ;;		Unchanged: 0/0
 14007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;Total ram usage:        9 bytes
 14013 ;; Hardware stack levels used:    1
 14014 ;; Hardware stack levels required when called:    5
 14015 ;; This function calls:
 14016 ;;		Nothing
 14017 ;; This function is called by:
 14018 ;;		_setBuz
 14019 ;; This function uses a non-reentrant model
 14020 ;;
 14021                           
 14022                           
 14023                           ;psect for function ___awdiv
 14024  1753                     ___awdiv:	
 14025                           
 14026                           ;incstack = 0
 14027                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14028  1753  0020               	movlb	0	; select bank0
 14029  1754  01A6               	clrf	___awdiv@sign
 14030  1755  1FA1               	btfss	___awdiv@divisor+1,7
 14031  1756  2F5E               	goto	l7993
 14032  1757  09A0               	comf	___awdiv@divisor,f
 14033  1758  09A1               	comf	___awdiv@divisor+1,f
 14034  1759  0AA0               	incf	___awdiv@divisor,f
 14035  175A  1903               	skipnz
 14036  175B  0AA1               	incf	___awdiv@divisor+1,f
 14037  175C  01A6               	clrf	___awdiv@sign
 14038  175D  0AA6               	incf	___awdiv@sign,f
 14039  175E                     l7993:	
 14040  175E  1FA3               	btfss	___awdiv@dividend+1,7
 14041  175F  2F69               	goto	l7999
 14042  1760  09A2               	comf	___awdiv@dividend,f
 14043  1761  09A3               	comf	___awdiv@dividend+1,f
 14044  1762  0AA2               	incf	___awdiv@dividend,f
 14045  1763  1903               	skipnz
 14046  1764  0AA3               	incf	___awdiv@dividend+1,f
 14047  1765  3001               	movlw	1
 14048  1766  00A4               	movwf	??___awdiv
 14049  1767  0824               	movf	??___awdiv,w
 14050  1768  06A6               	xorwf	___awdiv@sign,f
 14051  1769                     l7999:	
 14052  1769  01A7               	clrf	___awdiv@quotient
 14053  176A  01A8               	clrf	___awdiv@quotient+1
 14054  176B  0821               	movf	___awdiv@divisor+1,w
 14055  176C  0420               	iorwf	___awdiv@divisor,w
 14056  176D  1903               	skipnz
 14057  176E  2F98               	goto	l8021
 14058  176F  01A5               	clrf	___awdiv@counter
 14059  1770  0AA5               	incf	___awdiv@counter,f
 14060  1771                     l8009:	
 14061  1771  1BA1               	btfsc	___awdiv@divisor+1,7
 14062  1772  2F7D               	goto	l8011
 14063  1773  3001               	movlw	1
 14064  1774                     u7985:	
 14065  1774  35A0               	lslf	___awdiv@divisor,f
 14066  1775  0DA1               	rlf	___awdiv@divisor+1,f
 14067  1776  0B89               	decfsz	9,f
 14068  1777  2F74               	goto	u7985
 14069  1778  3001               	movlw	1
 14070  1779  00A4               	movwf	??___awdiv
 14071  177A  0824               	movf	??___awdiv,w
 14072  177B  07A5               	addwf	___awdiv@counter,f
 14073  177C  2F71               	goto	l8009
 14074  177D                     l8011:	
 14075  177D  3001               	movlw	1
 14076  177E                     u8005:	
 14077  177E  35A7               	lslf	___awdiv@quotient,f
 14078  177F  0DA8               	rlf	___awdiv@quotient+1,f
 14079  1780  0B89               	decfsz	9,f
 14080  1781  2F7E               	goto	u8005
 14081  1782  0821               	movf	___awdiv@divisor+1,w
 14082  1783  0223               	subwf	___awdiv@dividend+1,w
 14083  1784  1D03               	skipz
 14084  1785  2F88               	goto	u8015
 14085  1786  0820               	movf	___awdiv@divisor,w
 14086  1787  0222               	subwf	___awdiv@dividend,w
 14087  1788                     u8015:	
 14088  1788  1C03               	skipc
 14089  1789  2F8F               	goto	l8017
 14090  178A  0820               	movf	___awdiv@divisor,w
 14091  178B  02A2               	subwf	___awdiv@dividend,f
 14092  178C  0821               	movf	___awdiv@divisor+1,w
 14093  178D  3BA3               	subwfb	___awdiv@dividend+1,f
 14094  178E  1427               	bsf	___awdiv@quotient,0
 14095  178F                     l8017:	
 14096  178F  3001               	movlw	1
 14097  1790                     u8025:	
 14098  1790  36A1               	lsrf	___awdiv@divisor+1,f
 14099  1791  0CA0               	rrf	___awdiv@divisor,f
 14100  1792  0B89               	decfsz	9,f
 14101  1793  2F90               	goto	u8025
 14102  1794  3001               	movlw	1
 14103  1795  02A5               	subwf	___awdiv@counter,f
 14104  1796  1D03               	btfss	3,2
 14105  1797  2F7D               	goto	l8011
 14106  1798                     l8021:	
 14107  1798  0826               	movf	___awdiv@sign,w
 14108  1799  1903               	btfsc	3,2
 14109  179A  2FA0               	goto	l8025
 14110  179B  09A7               	comf	___awdiv@quotient,f
 14111  179C  09A8               	comf	___awdiv@quotient+1,f
 14112  179D  0AA7               	incf	___awdiv@quotient,f
 14113  179E  1903               	skipnz
 14114  179F  0AA8               	incf	___awdiv@quotient+1,f
 14115  17A0                     l8025:	
 14116  17A0  0828               	movf	___awdiv@quotient+1,w
 14117  17A1  01A1               	clrf	?___awdiv+1
 14118  17A2  07A1               	addwf	?___awdiv+1,f
 14119  17A3  0827               	movf	___awdiv@quotient,w
 14120  17A4  01A0               	clrf	?___awdiv
 14121  17A5  07A0               	addwf	?___awdiv,f
 14122  17A6  0008               	return
 14123  17A7                     __end_of___awdiv:	
 14124                           
 14125                           	psect	text86
 14126  1EF1                     __ptext86:	
 14127 ;; *************** function _DelayOff_Initialization *****************
 14128 ;; Defined at:
 14129 ;;		line 26 in file "../src/DelayOff_B1.c"
 14130 ;; Parameters:    Size  Location     Type
 14131 ;;		None
 14132 ;; Auto vars:     Size  Location     Type
 14133 ;;		None
 14134 ;; Return value:  Size  Location     Type
 14135 ;;		None               void
 14136 ;; Registers used:
 14137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14138 ;; Tracked objects:
 14139 ;;		On entry : 0/0
 14140 ;;		On exit  : 0/0
 14141 ;;		Unchanged: 0/0
 14142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;Total ram usage:        0 bytes
 14148 ;; Hardware stack levels used:    1
 14149 ;; Hardware stack levels required when called:    7
 14150 ;; This function calls:
 14151 ;;		_DlyOff_Initialization
 14152 ;; This function is called by:
 14153 ;;		_main
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           
 14158                           ;psect for function _DelayOff_Initialization
 14159  1EF1                     _DelayOff_Initialization:	
 14160                           
 14161                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14162                           
 14163                           ;incstack = 0
 14164                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14165  1EF1  3001               	movlw	1
 14166  1EF2  319E  26CE  319E   	fcall	_DlyOff_Initialization
 14167                           
 14168                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14169  1EF5  3002               	movlw	2
 14170  1EF6  319E  26CE  319E   	fcall	_DlyOff_Initialization
 14171                           
 14172                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 14173  1EF9  3003               	movlw	3
 14174  1EFA  319E  26CE         	fcall	_DlyOff_Initialization
 14175  1EFC  0008               	return
 14176  1EFD                     __end_of_DelayOff_Initialization:	
 14177                           
 14178                           	psect	text87
 14179  1ECE                     __ptext87:	
 14180 ;; *************** function _DlyOff_Initialization *****************
 14181 ;; Defined at:
 14182 ;;		line 56 in file "../src/DelayOff_B1.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  sw              1    wreg     unsigned char 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;  sw              1    2[BANK0 ] unsigned char 
 14187 ;; Return value:  Size  Location     Type
 14188 ;;		None               void
 14189 ;; Registers used:
 14190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;Total ram usage:        1 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    6
 14203 ;; This function calls:
 14204 ;;		_DelayOffPointSelect
 14205 ;; This function is called by:
 14206 ;;		_DelayOff_Initialization
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           
 14211                           ;psect for function _DlyOff_Initialization
 14212  1ECE                     _DlyOff_Initialization:	
 14213                           
 14214                           ;incstack = 0
 14215                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14216                           ;DlyOff_Initialization@sw stored from wreg
 14217  1ECE  0020               	movlb	0	; select bank0
 14218  1ECF  00A2               	movwf	DlyOff_Initialization@sw
 14219                           
 14220                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14221  1ED0  0822               	movf	DlyOff_Initialization@sw,w
 14222  1ED1  3192  2202         	fcall	_DelayOffPointSelect
 14223                           
 14224                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14225  1ED3  0876               	movf	_DelayOff,w
 14226  1ED4  0086               	movwf	6
 14227  1ED5  3001               	movlw	1	; select bank2/3
 14228  1ED6  0087               	movwf	7
 14229  1ED7  1401               	bsf	1,0
 14230  1ED8  0008               	return
 14231  1ED9                     __end_of_DlyOff_Initialization:	
 14232                           
 14233                           	psect	text88
 14234  1202                     __ptext88:	
 14235 ;; *************** function _DelayOffPointSelect *****************
 14236 ;; Defined at:
 14237 ;;		line 7 in file "../src/DelayOff_B1.c"
 14238 ;; Parameters:    Size  Location     Type
 14239 ;;  sw              1    wreg     unsigned char 
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;  sw              1    1[BANK0 ] unsigned char 
 14242 ;; Return value:  Size  Location     Type
 14243 ;;		None               void
 14244 ;; Registers used:
 14245 ;;		wreg
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14255 ;;Total ram usage:        2 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; Hardware stack levels required when called:    5
 14258 ;; This function calls:
 14259 ;;		Nothing
 14260 ;; This function is called by:
 14261 ;;		_DlyOff_Initialization
 14262 ;;		_DlyOff_Main
 14263 ;;		_setDelayOff_GO
 14264 ;; This function uses a non-reentrant model
 14265 ;;
 14266                           
 14267                           
 14268                           ;psect for function _DelayOffPointSelect
 14269  1202                     _DelayOffPointSelect:	
 14270                           
 14271                           ;incstack = 0
 14272                           ; Regs used in _DelayOffPointSelect: [wreg]
 14273                           ;DelayOffPointSelect@sw stored from wreg
 14274  1202  0020               	movlb	0	; select bank0
 14275  1203  00A1               	movwf	DelayOffPointSelect@sw
 14276                           
 14277                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14278  1204  0821               	movf	DelayOffPointSelect@sw,w
 14279  1205  3A01               	xorlw	1
 14280  1206  1D03               	skipz
 14281  1207  2A0D               	goto	l7917
 14282                           
 14283                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14284  1208  304F               	movlw	_DlySw1& (0+255)
 14285  1209  00A0               	movwf	??_DelayOffPointSelect
 14286  120A  0820               	movf	??_DelayOffPointSelect,w
 14287  120B  00F6               	movwf	_DelayOff
 14288                           
 14289                           ;DelayOff_B1.c: 11: }
 14290  120C  0008               	return
 14291  120D                     l7917:	
 14292                           
 14293                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14294  120D  0821               	movf	DelayOffPointSelect@sw,w
 14295  120E  3A02               	xorlw	2
 14296  120F  1D03               	skipz
 14297  1210  2A16               	goto	l7921
 14298                           
 14299                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14300  1211  3054               	movlw	_DlySw2& (0+255)
 14301  1212  00A0               	movwf	??_DelayOffPointSelect
 14302  1213  0820               	movf	??_DelayOffPointSelect,w
 14303  1214  00F6               	movwf	_DelayOff
 14304                           
 14305                           ;DelayOff_B1.c: 16: }
 14306  1215  0008               	return
 14307  1216                     l7921:	
 14308                           
 14309                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 14310  1216  0821               	movf	DelayOffPointSelect@sw,w
 14311  1217  3A03               	xorlw	3
 14312  1218  1D03               	skipz
 14313  1219  0008               	return
 14314                           
 14315                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 14316  121A  3059               	movlw	_DlySw3& (0+255)
 14317  121B  00A0               	movwf	??_DelayOffPointSelect
 14318  121C  0820               	movf	??_DelayOffPointSelect,w
 14319  121D  00F6               	movwf	_DelayOff
 14320  121E  0008               	return
 14321  121F                     __end_of_DelayOffPointSelect:	
 14322                           
 14323                           	psect	text89
 14324  1123                     __ptext89:	
 14325 ;; *************** function _CC2500_PowerOnInitial *****************
 14326 ;; Defined at:
 14327 ;;		line 124 in file "../src/CC2500_B1.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;		None
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;		None
 14332 ;; Return value:  Size  Location     Type
 14333 ;;		None               void
 14334 ;; Registers used:
 14335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;Total ram usage:        0 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    8
 14348 ;; This function calls:
 14349 ;;		_CC2500_ClearRXFIFO
 14350 ;;		_CC2500_ClearTXFIFO
 14351 ;;		_CC2500_FrequencyCabr
 14352 ;;		_CC2500_InitPATable
 14353 ;;		_CC2500_InitSetREG
 14354 ;;		_CC2500_PowerRST
 14355 ;;		_CC2500_SIDLEMode
 14356 ;; This function is called by:
 14357 ;;		_main
 14358 ;; This function uses a non-reentrant model
 14359 ;;
 14360                           
 14361                           
 14362                           ;psect for function _CC2500_PowerOnInitial
 14363  1123                     _CC2500_PowerOnInitial:	
 14364                           
 14365                           ;CC2500_B1.c: 125: CC2500_PowerRST();
 14366                           
 14367                           ;incstack = 0
 14368                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14369  1123  3195  25F4  3191   	fcall	_CC2500_PowerRST
 14370                           
 14371                           ;CC2500_B1.c: 126: CC2500_InitSetREG();
 14372  1126  3193  23B9  3191   	fcall	_CC2500_InitSetREG
 14373                           
 14374                           ;CC2500_B1.c: 127: CC2500_InitPATable();
 14375  1129  3192  223C  3191   	fcall	_CC2500_InitPATable
 14376                           
 14377                           ;CC2500_B1.c: 128: CC2500_ClearTXFIFO();
 14378  112C  319E  2688  3191   	fcall	_CC2500_ClearTXFIFO
 14379                           
 14380                           ;CC2500_B1.c: 129: CC2500_ClearRXFIFO();
 14381  112F  319E  2684  3191   	fcall	_CC2500_ClearRXFIFO
 14382                           
 14383                           ;CC2500_B1.c: 130: CC2500_FrequencyCabr();
 14384  1132  319E  26E5  3191   	fcall	_CC2500_FrequencyCabr
 14385                           
 14386                           ;CC2500_B1.c: 131: CC2500_SIDLEMode();
 14387  1135  319E  268C         	fcall	_CC2500_SIDLEMode
 14388  1137  0008               	return
 14389  1138                     __end_of_CC2500_PowerOnInitial:	
 14390                           
 14391                           	psect	text90
 14392  1E8C                     __ptext90:	
 14393 ;; *************** function _CC2500_SIDLEMode *****************
 14394 ;; Defined at:
 14395 ;;		line 214 in file "../src/CC2500_B1.c"
 14396 ;; Parameters:    Size  Location     Type
 14397 ;;		None
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;		None
 14400 ;; Return value:  Size  Location     Type
 14401 ;;		None               void
 14402 ;; Registers used:
 14403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;Total ram usage:        0 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; Hardware stack levels required when called:    7
 14416 ;; This function calls:
 14417 ;;		_CC2500_WriteCommand
 14418 ;; This function is called by:
 14419 ;;		_CC2500_PowerOnInitial
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           
 14424                           ;psect for function _CC2500_SIDLEMode
 14425  1E8C                     _CC2500_SIDLEMode:	
 14426                           
 14427                           ;CC2500_B1.c: 215: CC2500_WriteCommand(0x36);
 14428                           
 14429                           ;incstack = 0
 14430                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14431  1E8C  3036               	movlw	54
 14432  1E8D  3191  217D         	fcall	_CC2500_WriteCommand
 14433  1E8F  0008               	return
 14434  1E90                     __end_of_CC2500_SIDLEMode:	
 14435                           
 14436                           	psect	text91
 14437  15F4                     __ptext91:	
 14438 ;; *************** function _CC2500_PowerRST *****************
 14439 ;; Defined at:
 14440 ;;		line 137 in file "../src/CC2500_B1.c"
 14441 ;; Parameters:    Size  Location     Type
 14442 ;;		None
 14443 ;; Auto vars:     Size  Location     Type
 14444 ;;		None
 14445 ;; Return value:  Size  Location     Type
 14446 ;;		None               void
 14447 ;; Registers used:
 14448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14449 ;; Tracked objects:
 14450 ;;		On entry : 0/0
 14451 ;;		On exit  : 0/0
 14452 ;;		Unchanged: 0/0
 14453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14458 ;;Total ram usage:        1 bytes
 14459 ;; Hardware stack levels used:    1
 14460 ;; Hardware stack levels required when called:    6
 14461 ;; This function calls:
 14462 ;;		_CC2500_WriteByte
 14463 ;;		_DelayTime_1us
 14464 ;;		_Timeout_Counter
 14465 ;;		_set_TimeoutCleared
 14466 ;; This function is called by:
 14467 ;;		_CC2500_PowerOnInitial
 14468 ;; This function uses a non-reentrant model
 14469 ;;
 14470                           
 14471                           
 14472                           ;psect for function _CC2500_PowerRST
 14473  15F4                     _CC2500_PowerRST:	
 14474                           
 14475                           ;CC2500_B1.c: 138: RC1 = 0;
 14476                           
 14477                           ;incstack = 0
 14478                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14479  15F4  0020               	movlb	0	; select bank0
 14480  15F5  108E               	bcf	14,1	;volatile
 14481                           
 14482                           ;CC2500_B1.c: 139: RC0 = 0;
 14483  15F6  100E               	bcf	14,0	;volatile
 14484                           
 14485                           ;CC2500_B1.c: 140: RC4 = 1;
 14486  15F7  160E               	bsf	14,4	;volatile
 14487                           
 14488                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14489  15F8  300A               	movlw	10
 14490  15F9  00A0               	movwf	DelayTime_1us@count
 14491  15FA  3000               	movlw	0
 14492  15FB  00A1               	movwf	DelayTime_1us@count+1
 14493  15FC  3193  2344  3195   	fcall	_DelayTime_1us
 14494                           
 14495                           ;CC2500_B1.c: 142: RC4 = 0;
 14496  15FF  0020               	movlb	0	; select bank0
 14497  1600  120E               	bcf	14,4	;volatile
 14498                           
 14499                           ;CC2500_B1.c: 143: DelayTime_1us(10);
 14500  1601  300A               	movlw	10
 14501  1602  00A0               	movwf	DelayTime_1us@count
 14502  1603  3000               	movlw	0
 14503  1604  00A1               	movwf	DelayTime_1us@count+1
 14504  1605  3193  2344  3195   	fcall	_DelayTime_1us
 14505                           
 14506                           ;CC2500_B1.c: 144: RC4 = 1;
 14507  1608  0020               	movlb	0	; select bank0
 14508  1609  160E               	bsf	14,4	;volatile
 14509                           
 14510                           ;CC2500_B1.c: 145: DelayTime_1us(40);
 14511  160A  3028               	movlw	40
 14512  160B  00A0               	movwf	DelayTime_1us@count
 14513  160C  3000               	movlw	0
 14514  160D  00A1               	movwf	DelayTime_1us@count+1
 14515  160E  3193  2344  3195   	fcall	_DelayTime_1us
 14516                           
 14517                           ;CC2500_B1.c: 146: RC4 = 0;
 14518  1611  0020               	movlb	0	; select bank0
 14519  1612  120E               	bcf	14,4	;volatile
 14520                           
 14521                           ;CC2500_B1.c: 147: SPI0Buffer = 0x30;
 14522  1613  3030               	movlw	48
 14523  1614  00A6               	movwf	??_CC2500_PowerRST
 14524  1615  0826               	movf	??_CC2500_PowerRST,w
 14525  1616  00FA               	movwf	_SPI0Buffer
 14526                           
 14527                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 14528  1617  2E1B               	goto	l8917
 14529  1618                     l8915:	
 14530                           
 14531                           ;CC2500_B1.c: 149: Timeout_Counter();
 14532  1618  3191  210E  3195   	fcall	_Timeout_Counter
 14533  161B                     l8917:	
 14534  161B  0020               	movlb	0	; select bank0
 14535  161C  1D0E               	btfss	14,2	;volatile
 14536  161D  2E21               	goto	l8921
 14537  161E  0021               	movlb	1	; select bank1
 14538  161F  1D44               	btfss	(_myMain^(0+128)+15),2
 14539  1620  2E18               	goto	l8915
 14540  1621                     l8921:	
 14541                           
 14542                           ;CC2500_B1.c: 150: };
 14543                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 14544  1621  3190  2066  3195   	fcall	_set_TimeoutCleared
 14545                           
 14546                           ;CC2500_B1.c: 152: CC2500_WriteByte();
 14547  1624  3190  20E6  3195   	fcall	_CC2500_WriteByte
 14548                           
 14549                           ;CC2500_B1.c: 153: while (RC2 == 1 && myMain.Timeout == 0) {
 14550  1627  2E2B               	goto	l8927
 14551  1628                     l8925:	
 14552                           
 14553                           ;CC2500_B1.c: 154: Timeout_Counter();
 14554  1628  3191  210E  3195   	fcall	_Timeout_Counter
 14555  162B                     l8927:	
 14556  162B  0020               	movlb	0	; select bank0
 14557  162C  1D0E               	btfss	14,2	;volatile
 14558  162D  2E31               	goto	l8931
 14559  162E  0021               	movlb	1	; select bank1
 14560  162F  1D44               	btfss	(_myMain^(0+128)+15),2
 14561  1630  2E28               	goto	l8925
 14562  1631                     l8931:	
 14563                           
 14564                           ;CC2500_B1.c: 155: };
 14565                           ;CC2500_B1.c: 156: set_TimeoutCleared();
 14566  1631  3190  2066         	fcall	_set_TimeoutCleared
 14567                           
 14568                           ;CC2500_B1.c: 157: RC0 = 0;
 14569  1633  0020               	movlb	0	; select bank0
 14570  1634  100E               	bcf	14,0	;volatile
 14571                           
 14572                           ;CC2500_B1.c: 158: RC4 = 1;
 14573  1635  160E               	bsf	14,4	;volatile
 14574  1636  0008               	return
 14575  1637                     __end_of_CC2500_PowerRST:	
 14576                           
 14577                           	psect	text92
 14578  13B9                     __ptext92:	
 14579 ;; *************** function _CC2500_InitSetREG *****************
 14580 ;; Defined at:
 14581 ;;		line 164 in file "../src/CC2500_B1.c"
 14582 ;; Parameters:    Size  Location     Type
 14583 ;;		None
 14584 ;; Auto vars:     Size  Location     Type
 14585 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14586 ;;  temp2           1    7[BANK0 ] unsigned char 
 14587 ;;  temp1           1    6[BANK0 ] unsigned char 
 14588 ;; Return value:  Size  Location     Type
 14589 ;;		None               void
 14590 ;; Registers used:
 14591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14592 ;; Tracked objects:
 14593 ;;		On entry : 0/0
 14594 ;;		On exit  : 0/0
 14595 ;;		Unchanged: 0/0
 14596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;Total ram usage:        4 bytes
 14602 ;; Hardware stack levels used:    1
 14603 ;; Hardware stack levels required when called:    7
 14604 ;; This function calls:
 14605 ;;		_CC2500_WriteREG
 14606 ;; This function is called by:
 14607 ;;		_CC2500_PowerOnInitial
 14608 ;; This function uses a non-reentrant model
 14609 ;;
 14610                           
 14611                           
 14612                           ;psect for function _CC2500_InitSetREG
 14613  13B9                     _CC2500_InitSetREG:	
 14614                           
 14615                           ;CC2500_B1.c: 165: unsigned char loop_c;
 14616                           ;CC2500_B1.c: 166: unsigned char temp1, temp2;
 14617                           ;CC2500_B1.c: 168: for (loop_c = 0; loop_c < 47; loop_c++) {
 14618                           
 14619                           ;incstack = 0
 14620                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14621  13B9  0020               	movlb	0	; select bank0
 14622  13BA  01A8               	clrf	CC2500_InitSetREG@loop_c
 14623  13BB                     L10:	
 14624  13BB  302F               	movlw	47
 14625  13BC  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14626  13BD  1803               	btfsc	3,0
 14627  13BE  0008               	return
 14628                           
 14629                           ;CC2500_B1.c: 169: temp1 = CC2500_registers_address[loop_c];
 14630  13BF  0828               	movf	CC2500_InitSetREG@loop_c,w
 14631  13C0  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14632  13C1  0084               	movwf	4
 14633  13C2  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14634  13C3  1803               	skipnc
 14635  13C4  3E01               	addlw	1
 14636  13C5  0085               	movwf	5
 14637  13C6  0800               	movf	0,w	;code access
 14638  13C7  00A5               	movwf	??_CC2500_InitSetREG
 14639  13C8  0825               	movf	??_CC2500_InitSetREG,w
 14640  13C9  00A6               	movwf	CC2500_InitSetREG@temp1
 14641                           
 14642                           ;CC2500_B1.c: 170: temp2 = CC2500_rfSettings[loop_c];
 14643  13CA  0828               	movf	CC2500_InitSetREG@loop_c,w
 14644  13CB  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14645  13CC  0084               	movwf	4
 14646  13CD  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14647  13CE  1803               	skipnc
 14648  13CF  3E01               	addlw	1
 14649  13D0  0085               	movwf	5
 14650  13D1  0800               	movf	0,w	;code access
 14651  13D2  00A5               	movwf	??_CC2500_InitSetREG
 14652  13D3  0825               	movf	??_CC2500_InitSetREG,w
 14653  13D4  00A7               	movwf	CC2500_InitSetREG@temp2
 14654                           
 14655                           ;CC2500_B1.c: 172: CC2500_WriteREG(temp1, temp2);
 14656  13D5  0827               	movf	CC2500_InitSetREG@temp2,w
 14657  13D6  00A5               	movwf	??_CC2500_InitSetREG
 14658  13D7  0825               	movf	??_CC2500_InitSetREG,w
 14659  13D8  00A2               	movwf	CC2500_WriteREG@value
 14660  13D9  0826               	movf	CC2500_InitSetREG@temp1,w
 14661  13DA  3192  229B  3193   	fcall	_CC2500_WriteREG
 14662  13DD  3001               	movlw	1
 14663  13DE  0020               	movlb	0	; select bank0
 14664  13DF  00A5               	movwf	??_CC2500_InitSetREG
 14665  13E0  0825               	movf	??_CC2500_InitSetREG,w
 14666  13E1  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14667  13E2  2BBB               	goto	L10
 14668  13E3                     __end_of_CC2500_InitSetREG:	
 14669                           
 14670                           	psect	text93
 14671  123C                     __ptext93:	
 14672 ;; *************** function _CC2500_InitPATable *****************
 14673 ;; Defined at:
 14674 ;;		line 179 in file "../src/CC2500_B1.c"
 14675 ;; Parameters:    Size  Location     Type
 14676 ;;		None
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14679 ;;  temp            1    6[BANK0 ] unsigned char 
 14680 ;; Return value:  Size  Location     Type
 14681 ;;		None               void
 14682 ;; Registers used:
 14683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;Total ram usage:        3 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    7
 14696 ;; This function calls:
 14697 ;;		_CC2500_WriteREG
 14698 ;; This function is called by:
 14699 ;;		_CC2500_PowerOnInitial
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           
 14704                           ;psect for function _CC2500_InitPATable
 14705  123C                     _CC2500_InitPATable:	
 14706                           
 14707                           ;CC2500_B1.c: 180: unsigned char loop_d;
 14708                           ;CC2500_B1.c: 181: unsigned char temp;
 14709                           ;CC2500_B1.c: 183: for (loop_d = 0; loop_d < 8; loop_d++) {
 14710                           
 14711                           ;incstack = 0
 14712                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14713  123C  0020               	movlb	0	; select bank0
 14714  123D  01A7               	clrf	CC2500_InitPATable@loop_d
 14715  123E                     L11:	
 14716  123E  3008               	movlw	8
 14717  123F  0227               	subwf	CC2500_InitPATable@loop_d,w
 14718  1240  1803               	btfsc	3,0
 14719  1241  0008               	return
 14720                           
 14721                           ;CC2500_B1.c: 184: temp = CC2500_patable_vaule[loop_d];
 14722  1242  0827               	movf	CC2500_InitPATable@loop_d,w
 14723  1243  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14724  1244  0084               	movwf	4
 14725  1245  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14726  1246  1803               	skipnc
 14727  1247  3E01               	addlw	1
 14728  1248  0085               	movwf	5
 14729  1249  0800               	movf	0,w	;code access
 14730  124A  00A5               	movwf	??_CC2500_InitPATable
 14731  124B  0825               	movf	??_CC2500_InitPATable,w
 14732  124C  00A6               	movwf	CC2500_InitPATable@temp
 14733                           
 14734                           ;CC2500_B1.c: 185: CC2500_WriteREG(0x3E, temp);
 14735  124D  0826               	movf	CC2500_InitPATable@temp,w
 14736  124E  00A5               	movwf	??_CC2500_InitPATable
 14737  124F  0825               	movf	??_CC2500_InitPATable,w
 14738  1250  00A2               	movwf	CC2500_WriteREG@value
 14739  1251  303E               	movlw	62
 14740  1252  3192  229B  3192   	fcall	_CC2500_WriteREG
 14741  1255  3001               	movlw	1
 14742  1256  0020               	movlb	0	; select bank0
 14743  1257  00A5               	movwf	??_CC2500_InitPATable
 14744  1258  0825               	movf	??_CC2500_InitPATable,w
 14745  1259  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14746  125A  2A3E               	goto	L11
 14747  125B                     __end_of_CC2500_InitPATable:	
 14748                           
 14749                           	psect	text94
 14750  129B                     __ptext94:	
 14751 ;; *************** function _CC2500_WriteREG *****************
 14752 ;; Defined at:
 14753 ;;		line 256 in file "../src/CC2500_B1.c"
 14754 ;; Parameters:    Size  Location     Type
 14755 ;;  w_addr          1    wreg     unsigned char 
 14756 ;;  value           1    2[BANK0 ] unsigned char 
 14757 ;; Auto vars:     Size  Location     Type
 14758 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14759 ;; Return value:  Size  Location     Type
 14760 ;;		None               void
 14761 ;; Registers used:
 14762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14763 ;; Tracked objects:
 14764 ;;		On entry : 0/0
 14765 ;;		On exit  : 0/0
 14766 ;;		Unchanged: 0/0
 14767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14768 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14771 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;Total ram usage:        3 bytes
 14773 ;; Hardware stack levels used:    1
 14774 ;; Hardware stack levels required when called:    6
 14775 ;; This function calls:
 14776 ;;		_CC2500_WriteByte
 14777 ;;		_Timeout_Counter
 14778 ;;		_set_TimeoutCleared
 14779 ;; This function is called by:
 14780 ;;		_CC2500_InitSetREG
 14781 ;;		_CC2500_InitPATable
 14782 ;; This function uses a non-reentrant model
 14783 ;;
 14784                           
 14785                           
 14786                           ;psect for function _CC2500_WriteREG
 14787  129B                     _CC2500_WriteREG:	
 14788                           
 14789                           ;incstack = 0
 14790                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14791                           ;CC2500_WriteREG@w_addr stored from wreg
 14792  129B  0020               	movlb	0	; select bank0
 14793  129C  00A4               	movwf	CC2500_WriteREG@w_addr
 14794                           
 14795                           ;CC2500_B1.c: 257: RC4 = 0;
 14796  129D  120E               	bcf	14,4	;volatile
 14797                           
 14798                           ;CC2500_B1.c: 258: SPI0Buffer = w_addr;
 14799  129E  0824               	movf	CC2500_WriteREG@w_addr,w
 14800  129F  00A3               	movwf	??_CC2500_WriteREG
 14801  12A0  0823               	movf	??_CC2500_WriteREG,w
 14802  12A1  00FA               	movwf	_SPI0Buffer
 14803                           
 14804                           ;CC2500_B1.c: 259: while (RC2 == 1 && myMain.Timeout == 0) {
 14805  12A2  2AA6               	goto	l8613
 14806  12A3                     l8611:	
 14807                           
 14808                           ;CC2500_B1.c: 260: Timeout_Counter();
 14809  12A3  3191  210E  3192   	fcall	_Timeout_Counter
 14810  12A6                     l8613:	
 14811  12A6  0020               	movlb	0	; select bank0
 14812  12A7  1D0E               	btfss	14,2	;volatile
 14813  12A8  2AAC               	goto	l8617
 14814  12A9  0021               	movlb	1	; select bank1
 14815  12AA  1D44               	btfss	(_myMain^(0+128)+15),2
 14816  12AB  2AA3               	goto	l8611
 14817  12AC                     l8617:	
 14818                           
 14819                           ;CC2500_B1.c: 261: };
 14820                           ;CC2500_B1.c: 262: set_TimeoutCleared();
 14821  12AC  3190  2066  3192   	fcall	_set_TimeoutCleared
 14822                           
 14823                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 14824  12AF  3190  20E6  3192   	fcall	_CC2500_WriteByte
 14825                           
 14826                           ;CC2500_B1.c: 265: SPI0Buffer = value;
 14827  12B2  0020               	movlb	0	; select bank0
 14828  12B3  0822               	movf	CC2500_WriteREG@value,w
 14829  12B4  00A3               	movwf	??_CC2500_WriteREG
 14830  12B5  0823               	movf	??_CC2500_WriteREG,w
 14831  12B6  00FA               	movwf	_SPI0Buffer
 14832                           
 14833                           ;CC2500_B1.c: 266: CC2500_WriteByte();
 14834  12B7  3190  20E6         	fcall	_CC2500_WriteByte
 14835                           
 14836                           ;CC2500_B1.c: 267: RC4 = 1;
 14837  12B9  0020               	movlb	0	; select bank0
 14838  12BA  160E               	bsf	14,4	;volatile
 14839  12BB  0008               	return
 14840  12BC                     __end_of_CC2500_WriteREG:	
 14841                           
 14842                           	psect	text95
 14843  1EE5                     __ptext95:	
 14844 ;; *************** function _CC2500_FrequencyCabr *****************
 14845 ;; Defined at:
 14846 ;;		line 206 in file "../src/CC2500_B1.c"
 14847 ;; Parameters:    Size  Location     Type
 14848 ;;		None
 14849 ;; Auto vars:     Size  Location     Type
 14850 ;;		None
 14851 ;; Return value:  Size  Location     Type
 14852 ;;		None               void
 14853 ;; Registers used:
 14854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14855 ;; Tracked objects:
 14856 ;;		On entry : 0/0
 14857 ;;		On exit  : 0/0
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;Total ram usage:        0 bytes
 14865 ;; Hardware stack levels used:    1
 14866 ;; Hardware stack levels required when called:    7
 14867 ;; This function calls:
 14868 ;;		_CC2500_WriteCommand
 14869 ;;		_DelayTime_1us
 14870 ;; This function is called by:
 14871 ;;		_CC2500_PowerOnInitial
 14872 ;; This function uses a non-reentrant model
 14873 ;;
 14874                           
 14875                           
 14876                           ;psect for function _CC2500_FrequencyCabr
 14877  1EE5                     _CC2500_FrequencyCabr:	
 14878                           
 14879                           ;CC2500_B1.c: 207: CC2500_WriteCommand(0x33);
 14880                           
 14881                           ;incstack = 0
 14882                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14883  1EE5  3033               	movlw	51
 14884  1EE6  3191  217D  319E   	fcall	_CC2500_WriteCommand
 14885                           
 14886                           ;CC2500_B1.c: 208: DelayTime_1us(1000);
 14887  1EE9  30E8               	movlw	232
 14888  1EEA  0020               	movlb	0	; select bank0
 14889  1EEB  00A0               	movwf	DelayTime_1us@count
 14890  1EEC  3003               	movlw	3
 14891  1EED  00A1               	movwf	DelayTime_1us@count+1
 14892  1EEE  3193  2344         	fcall	_DelayTime_1us
 14893  1EF0  0008               	return
 14894  1EF1                     __end_of_CC2500_FrequencyCabr:	
 14895                           
 14896                           	psect	text96
 14897  1344                     __ptext96:	
 14898 ;; *************** function _DelayTime_1us *****************
 14899 ;; Defined at:
 14900 ;;		line 325 in file "../src/CC2500_B1.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;  count           2    0[BANK0 ] int 
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;  j               2    4[BANK0 ] unsigned int 
 14905 ;;  i               2    2[BANK0 ] unsigned int 
 14906 ;; Return value:  Size  Location     Type
 14907 ;;		None               void
 14908 ;; Registers used:
 14909 ;;		wreg, status,2
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;Total ram usage:        6 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:    5
 14922 ;; This function calls:
 14923 ;;		Nothing
 14924 ;; This function is called by:
 14925 ;;		_CC2500_PowerRST
 14926 ;;		_CC2500_FrequencyCabr
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           
 14931                           ;psect for function _DelayTime_1us
 14932  1344                     _DelayTime_1us:	
 14933                           
 14934                           ;CC2500_B1.c: 326: unsigned int i, j;
 14935                           ;CC2500_B1.c: 327: for (i = 1; i < count; i++)
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14939  1344  3001               	movlw	1
 14940  1345  0020               	movlb	0	; select bank0
 14941  1346  00A2               	movwf	DelayTime_1us@i
 14942  1347  3000               	movlw	0
 14943  1348  00A3               	movwf	DelayTime_1us@i+1
 14944  1349                     l398:	
 14945  1349  0821               	movf	DelayTime_1us@count+1,w
 14946  134A  0223               	subwf	DelayTime_1us@i+1,w
 14947  134B  1D03               	skipz
 14948  134C  2B4F               	goto	u8835
 14949  134D  0820               	movf	DelayTime_1us@count,w
 14950  134E  0222               	subwf	DelayTime_1us@i,w
 14951  134F                     u8835:	
 14952  134F  1803               	btfsc	3,0
 14953  1350  0008               	return
 14954                           
 14955                           ;CC2500_B1.c: 328: for (j = 0; j <= 1; j++);
 14956  1351  01A4               	clrf	DelayTime_1us@j
 14957  1352  01A5               	clrf	DelayTime_1us@j+1
 14958  1353  3000               	movlw	0
 14959  1354  0225               	subwf	DelayTime_1us@j+1,w
 14960  1355  3002               	movlw	2
 14961  1356  1903               	skipnz
 14962  1357  0224               	subwf	DelayTime_1us@j,w
 14963  1358  1803               	btfsc	3,0
 14964  1359  2B65               	goto	l8605
 14965  135A                     l8603:	
 14966  135A  3001               	movlw	1
 14967  135B  07A4               	addwf	DelayTime_1us@j,f
 14968  135C  3000               	movlw	0
 14969  135D  3DA5               	addwfc	DelayTime_1us@j+1,f
 14970  135E  3000               	movlw	0
 14971  135F  0225               	subwf	DelayTime_1us@j+1,w
 14972  1360  3002               	movlw	2
 14973  1361  1903               	skipnz
 14974  1362  0224               	subwf	DelayTime_1us@j,w
 14975  1363  1C03               	skipc
 14976  1364  2B5A               	goto	l8603
 14977  1365                     l8605:	
 14978  1365  3001               	movlw	1
 14979  1366  07A2               	addwf	DelayTime_1us@i,f
 14980  1367  3000               	movlw	0
 14981  1368  3DA3               	addwfc	DelayTime_1us@i+1,f
 14982  1369  2B49               	goto	l398
 14983  136A                     __end_of_DelayTime_1us:	
 14984                           
 14985                           	psect	text97
 14986  1E88                     __ptext97:	
 14987 ;; *************** function _CC2500_ClearTXFIFO *****************
 14988 ;; Defined at:
 14989 ;;		line 192 in file "../src/CC2500_B1.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;		None
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;		None               void
 14996 ;; Registers used:
 14997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14998 ;; Tracked objects:
 14999 ;;		On entry : 0/0
 15000 ;;		On exit  : 0/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;Total ram usage:        0 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    7
 15010 ;; This function calls:
 15011 ;;		_CC2500_WriteCommand
 15012 ;; This function is called by:
 15013 ;;		_CC2500_PowerOnInitial
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           
 15018                           ;psect for function _CC2500_ClearTXFIFO
 15019  1E88                     _CC2500_ClearTXFIFO:	
 15020                           
 15021                           ;CC2500_B1.c: 193: CC2500_WriteCommand(0x3B);
 15022                           
 15023                           ;incstack = 0
 15024                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15025  1E88  303B               	movlw	59
 15026  1E89  3191  217D         	fcall	_CC2500_WriteCommand
 15027  1E8B  0008               	return
 15028  1E8C                     __end_of_CC2500_ClearTXFIFO:	
 15029                           
 15030                           	psect	text98
 15031  1E84                     __ptext98:	
 15032 ;; *************** function _CC2500_ClearRXFIFO *****************
 15033 ;; Defined at:
 15034 ;;		line 199 in file "../src/CC2500_B1.c"
 15035 ;; Parameters:    Size  Location     Type
 15036 ;;		None
 15037 ;; Auto vars:     Size  Location     Type
 15038 ;;		None
 15039 ;; Return value:  Size  Location     Type
 15040 ;;		None               void
 15041 ;; Registers used:
 15042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15043 ;; Tracked objects:
 15044 ;;		On entry : 0/0
 15045 ;;		On exit  : 0/0
 15046 ;;		Unchanged: 0/0
 15047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15052 ;;Total ram usage:        0 bytes
 15053 ;; Hardware stack levels used:    1
 15054 ;; Hardware stack levels required when called:    7
 15055 ;; This function calls:
 15056 ;;		_CC2500_WriteCommand
 15057 ;; This function is called by:
 15058 ;;		_CC2500_PowerOnInitial
 15059 ;; This function uses a non-reentrant model
 15060 ;;
 15061                           
 15062                           
 15063                           ;psect for function _CC2500_ClearRXFIFO
 15064  1E84                     _CC2500_ClearRXFIFO:	
 15065                           
 15066                           ;CC2500_B1.c: 200: CC2500_WriteCommand(0x3A);
 15067                           
 15068                           ;incstack = 0
 15069                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15070  1E84  303A               	movlw	58
 15071  1E85  3191  217D         	fcall	_CC2500_WriteCommand
 15072  1E87  0008               	return
 15073  1E88                     __end_of_CC2500_ClearRXFIFO:	
 15074                           
 15075                           	psect	text99
 15076  117D                     __ptext99:	
 15077 ;; *************** function _CC2500_WriteCommand *****************
 15078 ;; Defined at:
 15079 ;;		line 290 in file "../src/CC2500_B1.c"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;  command         1    wreg     unsigned char 
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;  command         1    3[BANK0 ] unsigned char 
 15084 ;; Return value:  Size  Location     Type
 15085 ;;		None               void
 15086 ;; Registers used:
 15087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;Total ram usage:        2 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; Hardware stack levels required when called:    6
 15100 ;; This function calls:
 15101 ;;		_CC2500_WriteByte
 15102 ;;		_Timeout_Counter
 15103 ;;		_set_TimeoutCleared
 15104 ;; This function is called by:
 15105 ;;		_CC2500_TxData
 15106 ;;		_CC2500_RxData
 15107 ;;		_CC2500_ClearTXFIFO
 15108 ;;		_CC2500_ClearRXFIFO
 15109 ;;		_CC2500_FrequencyCabr
 15110 ;;		_CC2500_SIDLEMode
 15111 ;;		_setRF_Main
 15112 ;;		_RF_RxDisable
 15113 ;; This function uses a non-reentrant model
 15114 ;;
 15115                           
 15116                           
 15117                           ;psect for function _CC2500_WriteCommand
 15118  117D                     _CC2500_WriteCommand:	
 15119                           
 15120                           ;incstack = 0
 15121                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15122                           ;CC2500_WriteCommand@command stored from wreg
 15123  117D  0020               	movlb	0	; select bank0
 15124  117E  00A3               	movwf	CC2500_WriteCommand@command
 15125                           
 15126                           ;CC2500_B1.c: 291: RC4 = 0;
 15127  117F  120E               	bcf	14,4	;volatile
 15128                           
 15129                           ;CC2500_B1.c: 292: SPI0Buffer = command;
 15130  1180  0823               	movf	CC2500_WriteCommand@command,w
 15131  1181  00A2               	movwf	??_CC2500_WriteCommand
 15132  1182  0822               	movf	??_CC2500_WriteCommand,w
 15133  1183  00FA               	movwf	_SPI0Buffer
 15134                           
 15135                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
 15136  1184  2988               	goto	l8377
 15137  1185                     l8375:	
 15138                           
 15139                           ;CC2500_B1.c: 295: Timeout_Counter();
 15140  1185  3191  210E  3191   	fcall	_Timeout_Counter
 15141  1188                     l8377:	
 15142  1188  0020               	movlb	0	; select bank0
 15143  1189  1D0E               	btfss	14,2	;volatile
 15144  118A  298E               	goto	l8381
 15145  118B  0021               	movlb	1	; select bank1
 15146  118C  1D44               	btfss	(_myMain^(0+128)+15),2
 15147  118D  2985               	goto	l8375
 15148  118E                     l8381:	
 15149                           
 15150                           ;CC2500_B1.c: 296: };
 15151                           ;CC2500_B1.c: 297: set_TimeoutCleared();
 15152  118E  3190  2066  3191   	fcall	_set_TimeoutCleared
 15153                           
 15154                           ;CC2500_B1.c: 299: CC2500_WriteByte();
 15155  1191  3190  20E6         	fcall	_CC2500_WriteByte
 15156                           
 15157                           ;CC2500_B1.c: 300: RC4 = 1;
 15158  1193  0020               	movlb	0	; select bank0
 15159  1194  160E               	bsf	14,4	;volatile
 15160  1195  0008               	return
 15161  1196                     __end_of_CC2500_WriteCommand:	
 15162                           
 15163                           	psect	text100
 15164  1066                     __ptext100:	
 15165 ;; *************** function _set_TimeoutCleared *****************
 15166 ;; Defined at:
 15167 ;;		line 217 in file "../src/Main_B1.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;		None
 15172 ;; Return value:  Size  Location     Type
 15173 ;;		None               void
 15174 ;; Registers used:
 15175 ;;		status,2
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;Total ram usage:        0 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    5
 15188 ;; This function calls:
 15189 ;;		Nothing
 15190 ;; This function is called by:
 15191 ;;		_CC2500_TxData
 15192 ;;		_CC2500_RxData
 15193 ;;		_CC2500_PowerRST
 15194 ;;		_CC2500_WriteREG
 15195 ;;		_CC2500_WriteCommand
 15196 ;;		_CC2500_ReadStatus
 15197 ;;		_TouchPower
 15198 ;;		_CC2500_ReadREG
 15199 ;;		_getAD
 15200 ;; This function uses a non-reentrant model
 15201 ;;
 15202                           
 15203                           
 15204                           ;psect for function _set_TimeoutCleared
 15205  1066                     _set_TimeoutCleared:	
 15206                           
 15207                           ;Main_B1.c: 218: myMain.Timeout = 0;
 15208                           
 15209                           ;incstack = 0
 15210                           ; Regs used in _set_TimeoutCleared: [status,2]
 15211  1066  0021               	movlb	1	; select bank1
 15212  1067  1144               	bcf	(_myMain^(0+128)+15),2
 15213                           
 15214                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 15215  1068  01C5               	clrf	(_myMain^(0+128)+16)
 15216  1069  01C6               	clrf	((_myMain+1)^(0+128)+16)
 15217  106A  0008               	return
 15218  106B                     __end_of_set_TimeoutCleared:	
 15219                           
 15220                           	psect	text101
 15221  110E                     __ptext101:	
 15222 ;; *************** function _Timeout_Counter *****************
 15223 ;; Defined at:
 15224 ;;		line 208 in file "../src/Main_B1.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;		None
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;		None
 15229 ;; Return value:  Size  Location     Type
 15230 ;;		None               void
 15231 ;; Registers used:
 15232 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15233 ;; Tracked objects:
 15234 ;;		On entry : 0/0
 15235 ;;		On exit  : 0/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;Total ram usage:        0 bytes
 15243 ;; Hardware stack levels used:    1
 15244 ;; Hardware stack levels required when called:    5
 15245 ;; This function calls:
 15246 ;;		Nothing
 15247 ;; This function is called by:
 15248 ;;		_CC2500_TxData
 15249 ;;		_CC2500_RxData
 15250 ;;		_CC2500_PowerRST
 15251 ;;		_CC2500_WriteREG
 15252 ;;		_CC2500_WriteCommand
 15253 ;;		_CC2500_ReadStatus
 15254 ;;		_TouchPower
 15255 ;;		_CC2500_ReadREG
 15256 ;;		_getAD
 15257 ;; This function uses a non-reentrant model
 15258 ;;
 15259                           
 15260                           
 15261                           ;psect for function _Timeout_Counter
 15262  110E                     _Timeout_Counter:	
 15263                           
 15264                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 15265                           
 15266                           ;incstack = 0
 15267                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15268  110E  3001               	movlw	1
 15269  110F  0021               	movlb	1	; select bank1
 15270  1110  07C5               	addwf	(_myMain^(0+128)+16),f
 15271  1111  3000               	movlw	0
 15272  1112  3DC6               	addwfc	((_myMain+1)^(0+128)+16),f
 15273                           
 15274                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 15275  1113  3010               	movlw	16
 15276  1114  3EB5               	addlw	_myMain& (0+255)
 15277  1115  0086               	movwf	6
 15278  1116  0187               	clrf	7
 15279  1117  3F40               	moviw [0]fsr1
 15280  1118  3A10               	xorlw	16
 15281  1119  1D03               	skipz
 15282  111A  291D               	goto	u8395
 15283  111B  3F41               	moviw [1]fsr1
 15284  111C  3A27               	xorlw	39
 15285  111D                     u8395:	
 15286  111D  1D03               	skipz
 15287  111E  0008               	return
 15288                           
 15289                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 15290  111F  01C5               	clrf	(_myMain^(0+128)+16)
 15291  1120  01C6               	clrf	((_myMain+1)^(0+128)+16)
 15292                           
 15293                           ;Main_B1.c: 212: myMain.Timeout = 1;
 15294  1121  1544               	bsf	(_myMain^(0+128)+15),2
 15295  1122  0008               	return
 15296  1123                     __end_of_Timeout_Counter:	
 15297                           
 15298                           	psect	text102
 15299  10E6                     __ptext102:	
 15300 ;; *************** function _CC2500_WriteByte *****************
 15301 ;; Defined at:
 15302 ;;		line 224 in file "../src/CC2500_B1.c"
 15303 ;; Parameters:    Size  Location     Type
 15304 ;;		None
 15305 ;; Auto vars:     Size  Location     Type
 15306 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15307 ;; Return value:  Size  Location     Type
 15308 ;;		None               void
 15309 ;; Registers used:
 15310 ;;		wreg, status,2, status,0
 15311 ;; Tracked objects:
 15312 ;;		On entry : 0/0
 15313 ;;		On exit  : 0/0
 15314 ;;		Unchanged: 0/0
 15315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;Total ram usage:        2 bytes
 15321 ;; Hardware stack levels used:    1
 15322 ;; Hardware stack levels required when called:    5
 15323 ;; This function calls:
 15324 ;;		Nothing
 15325 ;; This function is called by:
 15326 ;;		_CC2500_TxData
 15327 ;;		_CC2500_RxData
 15328 ;;		_CC2500_PowerRST
 15329 ;;		_CC2500_WriteREG
 15330 ;;		_CC2500_WriteCommand
 15331 ;;		_CC2500_ReadStatus
 15332 ;;		_CC2500_ReadREG
 15333 ;; This function uses a non-reentrant model
 15334 ;;
 15335                           
 15336                           
 15337                           ;psect for function _CC2500_WriteByte
 15338  10E6                     _CC2500_WriteByte:	
 15339                           
 15340                           ;CC2500_B1.c: 225: unsigned char loop_a;
 15341                           ;CC2500_B1.c: 226: for (loop_a = 0; loop_a < 8; loop_a++) {
 15342                           
 15343                           ;incstack = 0
 15344                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15345  10E6  0020               	movlb	0	; select bank0
 15346  10E7  01A1               	clrf	CC2500_WriteByte@loop_a
 15347  10E8                     L12:	
 15348  10E8  3008               	movlw	8
 15349  10E9  0221               	subwf	CC2500_WriteByte@loop_a,w
 15350  10EA  1803               	btfsc	3,0
 15351  10EB  0008               	return
 15352                           
 15353                           ;CC2500_B1.c: 227: if (SPI0Buffer & 0x80)
 15354  10EC  1FFA               	btfss	_SPI0Buffer,7
 15355  10ED  28F0               	goto	l354
 15356                           
 15357                           ;CC2500_B1.c: 228: RC0 = 1;
 15358  10EE  140E               	bsf	14,0	;volatile
 15359  10EF  28F1               	goto	l355
 15360  10F0                     l354:	
 15361                           
 15362                           ;CC2500_B1.c: 229: else
 15363                           ;CC2500_B1.c: 230: RC0 = 0;
 15364  10F0  100E               	bcf	14,0	;volatile
 15365  10F1                     l355:	
 15366                           
 15367                           ;CC2500_B1.c: 231: RC1 = 1;
 15368  10F1  148E               	bsf	14,1	;volatile
 15369                           
 15370                           ;CC2500_B1.c: 232: SPI0Buffer <<= 1;
 15371  10F2  1003               	clrc
 15372  10F3  0DFA               	rlf	_SPI0Buffer,f
 15373                           
 15374                           ;CC2500_B1.c: 233: RC1 = 0;
 15375  10F4  108E               	bcf	14,1	;volatile
 15376  10F5  3001               	movlw	1
 15377  10F6  00A0               	movwf	??_CC2500_WriteByte
 15378  10F7  0820               	movf	??_CC2500_WriteByte,w
 15379  10F8  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15380  10F9  28E8               	goto	L12
 15381  10FA                     __end_of_CC2500_WriteByte:	
 15382                           
 15383                           	psect	text103
 15384  1709                     __ptext103:	
 15385 ;; *************** function _Buzzer_Main *****************
 15386 ;; Defined at:
 15387 ;;		line 46 in file "../src/Buzzer_B1.c"
 15388 ;; Parameters:    Size  Location     Type
 15389 ;;		None
 15390 ;; Auto vars:     Size  Location     Type
 15391 ;;		None
 15392 ;; Return value:  Size  Location     Type
 15393 ;;		None               void
 15394 ;; Registers used:
 15395 ;;		wreg, status,2, status,0
 15396 ;; Tracked objects:
 15397 ;;		On entry : 0/0
 15398 ;;		On exit  : 0/0
 15399 ;;		Unchanged: 0/0
 15400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;Total ram usage:        1 bytes
 15406 ;; Hardware stack levels used:    1
 15407 ;; Hardware stack levels required when called:    5
 15408 ;; This function calls:
 15409 ;;		Nothing
 15410 ;; This function is called by:
 15411 ;;		_main
 15412 ;; This function uses a non-reentrant model
 15413 ;;
 15414                           
 15415                           
 15416                           ;psect for function _Buzzer_Main
 15417  1709                     _Buzzer_Main:	
 15418                           
 15419                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15420                           
 15421                           ;incstack = 0
 15422                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15423  1709  0021               	movlb	1	; select bank1
 15424  170A  1CC7               	btfss	_Buz1^(0+128),1
 15425  170B  0008               	return
 15426                           
 15427                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15428  170C  3001               	movlw	1
 15429  170D  07C8               	addwf	(_Buz1^(0+128)+1),f
 15430  170E  3000               	movlw	0
 15431  170F  3DC9               	addwfc	((_Buz1+1)^(0+128)+1),f
 15432                           
 15433                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15434  1710  084E               	movf	((_Buz1+1)^(0+128)+6),w
 15435  1711  0249               	subwf	((_Buz1+1)^(0+128)+1),w
 15436  1712  1D03               	skipz
 15437  1713  2F16               	goto	u10195
 15438  1714  084D               	movf	(_Buz1^(0+128)+6),w
 15439  1715  0248               	subwf	(_Buz1^(0+128)+1),w
 15440  1716                     u10195:	
 15441  1716  1C03               	skipc
 15442  1717  0008               	return
 15443                           
 15444                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15445  1718  01C8               	clrf	(_Buz1^(0+128)+1)
 15446  1719  01C9               	clrf	((_Buz1+1)^(0+128)+1)
 15447                           
 15448                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15449  171A  12C7               	bcf	_Buz1^(0+128),5
 15450  171B  0020               	movlb	0	; select bank0
 15451  171C  1D8D               	btfss	13,3	;volatile
 15452  171D  2F20               	goto	l9437
 15453  171E  0021               	movlb	1	; select bank1
 15454  171F  16C7               	bsf	_Buz1^(0+128),5
 15455  1720                     l9437:	
 15456                           
 15457                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15458  1720  0021               	movlb	1	; select bank1
 15459  1721  1AC7               	btfsc	_Buz1^(0+128),5
 15460  1722  2F4C               	goto	l118
 15461                           
 15462                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15463  1723  08CA               	movf	(_Buz1^(0+128)+3),f
 15464  1724  1D03               	skipz
 15465  1725  2F48               	goto	l119
 15466                           
 15467                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15468  1726  1DC7               	btfss	_Buz1^(0+128),3
 15469  1727  2F36               	goto	l120
 15470                           
 15471                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15472  1728  11C7               	bcf	_Buz1^(0+128),3
 15473                           
 15474                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15475  1729  084B               	movf	(_Buz1^(0+128)+4),w
 15476  172A  0020               	movlb	0	; select bank0
 15477  172B  00A0               	movwf	??_Buzzer_Main
 15478  172C  0820               	movf	??_Buzzer_Main,w
 15479  172D  0021               	movlb	1	; select bank1
 15480  172E  00CA               	movwf	(_Buz1^(0+128)+3)
 15481                           
 15482                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15483  172F  0850               	movf	((_Buz1+1)^(0+128)+8),w
 15484  1730  01CE               	clrf	((_Buz1+1)^(0+128)+6)
 15485  1731  07CE               	addwf	((_Buz1+1)^(0+128)+6),f
 15486  1732  084F               	movf	(_Buz1^(0+128)+8),w
 15487  1733  01CD               	clrf	(_Buz1^(0+128)+6)
 15488  1734  07CD               	addwf	(_Buz1^(0+128)+6),f
 15489                           
 15490                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15491  1735  0008               	return
 15492  1736                     l120:	
 15493  1736  1E47               	btfss	_Buz1^(0+128),4
 15494  1737  2F46               	goto	l122
 15495                           
 15496                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15497  1738  1247               	bcf	_Buz1^(0+128),4
 15498                           
 15499                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15500  1739  084C               	movf	(_Buz1^(0+128)+5),w
 15501  173A  0020               	movlb	0	; select bank0
 15502  173B  00A0               	movwf	??_Buzzer_Main
 15503  173C  0820               	movf	??_Buzzer_Main,w
 15504  173D  0021               	movlb	1	; select bank1
 15505  173E  00CA               	movwf	(_Buz1^(0+128)+3)
 15506                           
 15507                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15508  173F  0852               	movf	((_Buz1+1)^(0+128)+10),w
 15509  1740  01CE               	clrf	((_Buz1+1)^(0+128)+6)
 15510  1741  07CE               	addwf	((_Buz1+1)^(0+128)+6),f
 15511  1742  0851               	movf	(_Buz1^(0+128)+10),w
 15512  1743  01CD               	clrf	(_Buz1^(0+128)+6)
 15513  1744  07CD               	addwf	(_Buz1^(0+128)+6),f
 15514                           
 15515                           ;Buzzer_B1.c: 62: } else {
 15516  1745  0008               	return
 15517  1746                     l122:	
 15518                           
 15519                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15520  1746  10C7               	bcf	_Buz1^(0+128),1
 15521                           
 15522                           ;Buzzer_B1.c: 64: }
 15523                           ;Buzzer_B1.c: 65: } else {
 15524  1747  0008               	return
 15525  1748                     l119:	
 15526                           
 15527                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15528  1748  16C7               	bsf	_Buz1^(0+128),5
 15529                           
 15530                           ;Buzzer_B1.c: 68: RB3 = 1;
 15531  1749  0020               	movlb	0	; select bank0
 15532  174A  158D               	bsf	13,3	;volatile
 15533                           
 15534                           ;Buzzer_B1.c: 69: }
 15535                           ;Buzzer_B1.c: 70: } else {
 15536  174B  0008               	return
 15537  174C                     l118:	
 15538                           
 15539                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15540  174C  12C7               	bcf	_Buz1^(0+128),5
 15541                           
 15542                           ;Buzzer_B1.c: 73: RB3 = 0;
 15543  174D  0020               	movlb	0	; select bank0
 15544  174E  118D               	bcf	13,3	;volatile
 15545                           
 15546                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15547  174F  3001               	movlw	1
 15548  1750  0021               	movlb	1	; select bank1
 15549  1751  02CA               	subwf	(_Buz1^(0+128)+3),f
 15550  1752  0008               	return
 15551  1753                     __end_of_Buzzer_Main:	
 15552                           
 15553                           	psect	text104
 15554  1E7B                     __ptext104:	
 15555 ;; *************** function _Buzzer_Initialization *****************
 15556 ;; Defined at:
 15557 ;;		line 11 in file "../src/Buzzer_B1.c"
 15558 ;; Parameters:    Size  Location     Type
 15559 ;;		None
 15560 ;; Auto vars:     Size  Location     Type
 15561 ;;		None
 15562 ;; Return value:  Size  Location     Type
 15563 ;;		None               void
 15564 ;; Registers used:
 15565 ;;		None
 15566 ;; Tracked objects:
 15567 ;;		On entry : 0/0
 15568 ;;		On exit  : 0/0
 15569 ;;		Unchanged: 0/0
 15570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;Total ram usage:        0 bytes
 15576 ;; Hardware stack levels used:    1
 15577 ;; Hardware stack levels required when called:    5
 15578 ;; This function calls:
 15579 ;;		Nothing
 15580 ;; This function is called by:
 15581 ;;		_main
 15582 ;; This function uses a non-reentrant model
 15583 ;;
 15584                           
 15585                           
 15586                           ;psect for function _Buzzer_Initialization
 15587  1E7B                     _Buzzer_Initialization:	
 15588                           
 15589                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15590                           
 15591                           ;incstack = 0
 15592                           ; Regs used in _Buzzer_Initialization: []
 15593  1E7B  0021               	movlb	1	; select bank1
 15594  1E7C  1447               	bsf	_Buz1^(0+128),0
 15595  1E7D  0008               	return
 15596  1E7E                     __end_of_Buzzer_Initialization:	
 15597                           
 15598                           	psect	intentry
 15599  0004                     __pintentry:	
 15600 ;; *************** function _ISR *****************
 15601 ;; Defined at:
 15602 ;;		line 107 in file "../src/MCU_B1.c"
 15603 ;; Parameters:    Size  Location     Type
 15604 ;;		None
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;		None
 15607 ;; Return value:  Size  Location     Type
 15608 ;;		None               void
 15609 ;; Registers used:
 15610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15611 ;; Tracked objects:
 15612 ;;		On entry : 0/0
 15613 ;;		On exit  : 0/0
 15614 ;;		Unchanged: 0/0
 15615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;Total ram usage:        1 bytes
 15621 ;; Hardware stack levels used:    1
 15622 ;; Hardware stack levels required when called:    4
 15623 ;; This function calls:
 15624 ;;		_IOC_ISR
 15625 ;;		_TMR0_ISR
 15626 ;; This function is called by:
 15627 ;;		Interrupt level 1
 15628 ;; This function uses a non-reentrant model
 15629 ;;
 15630                           
 15631  0004                     _ISR:	
 15632                           
 15633                           ;incstack = 0
 15634                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15635  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15636  0005  3180               	pagesel	$
 15637  0006  0020               	movlb	0	; select bank0
 15638  0007  087F               	movf	127,w
 15639  0008  00F5               	movwf	??_ISR
 15640                           
 15641                           ;MCU_B1.c: 109: IOC_ISR();
 15642  0009  319F  2721  3180   	fcall	_IOC_ISR
 15643                           
 15644                           ;MCU_B1.c: 111: TMR0_ISR();
 15645  000C  3194  240D         	fcall	_TMR0_ISR
 15646  000E  0875               	movf	??_ISR,w
 15647  000F  0020               	movlb	0	; select bank0
 15648  0010  00FF               	movwf	127
 15649  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15650  0012  0009               	retfie
 15651  0013                     __end_of_ISR:	
 15652                           
 15653                           	psect	text106
 15654  140D                     __ptext106:	
 15655 ;; *************** function _TMR0_ISR *****************
 15656 ;; Defined at:
 15657 ;;		line 135 in file "../src/MCU_B1.c"
 15658 ;; Parameters:    Size  Location     Type
 15659 ;;		None
 15660 ;; Auto vars:     Size  Location     Type
 15661 ;;		None
 15662 ;; Return value:  Size  Location     Type
 15663 ;;		None               void
 15664 ;; Registers used:
 15665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15666 ;; Tracked objects:
 15667 ;;		On entry : 0/0
 15668 ;;		On exit  : 0/0
 15669 ;;		Unchanged: 0/0
 15670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;Total ram usage:        0 bytes
 15676 ;; Hardware stack levels used:    1
 15677 ;; Hardware stack levels required when called:    2
 15678 ;; This function calls:
 15679 ;;		_setDimmerLights_IntrControl
 15680 ;; This function is called by:
 15681 ;;		_ISR
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           
 15686                           ;psect for function _TMR0_ISR
 15687  140D                     _TMR0_ISR:	
 15688                           
 15689                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 15690                           
 15691                           ;incstack = 0
 15692                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15693  140D  1E8B               	btfss	11,5	;volatile
 15694  140E  0008               	return
 15695  140F  1D0B               	btfss	11,2	;volatile
 15696  1410  0008               	return
 15697                           
 15698                           ;MCU_B1.c: 138: TMR0 = (256-190);
 15699  1411  3042               	movlw	66
 15700  1412  0020               	movlb	0	; select bank0
 15701  1413  0095               	movwf	21	;volatile
 15702                           
 15703                           ;MCU_B1.c: 139: TMR0IF = 0;
 15704  1414  110B               	bcf	11,2	;volatile
 15705                           
 15706                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 15707  1415  3001               	movlw	1
 15708  1416  3180  2044  3194   	fcall	_setDimmerLights_IntrControl
 15709                           
 15710                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 15711  1419  3002               	movlw	2
 15712  141A  3180  2044  3194   	fcall	_setDimmerLights_IntrControl
 15713                           
 15714                           ;MCU_B1.c: 154: setDimmerLights_IntrControl(3);
 15715  141D  3003               	movlw	3
 15716  141E  3180  2044  3194   	fcall	_setDimmerLights_IntrControl
 15717                           
 15718                           ;MCU_B1.c: 160: Timer0.Count++;
 15719  1421  3001               	movlw	1
 15720  1422  0022               	movlb	2	; select bank2
 15721  1423  07A1               	addwf	(_Timer0^(0+256)+1),f
 15722  1424  3000               	movlw	0
 15723  1425  3DA2               	addwfc	((_Timer0+1)^(0+256)+1),f
 15724                           
 15725                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 15726  1426  3001               	movlw	1
 15727  1427  3E20               	addlw	_Timer0& (0+255)
 15728  1428  0086               	movwf	6
 15729  1429  3001               	movlw	1	; select bank2/3
 15730  142A  0087               	movwf	7
 15731  142B  3F40               	moviw [0]fsr1
 15732  142C  3A64               	xorlw	100
 15733  142D  1D03               	skipz
 15734  142E  2C31               	goto	u745_25
 15735  142F  3F41               	moviw [1]fsr1
 15736  1430  3A00               	xorlw	0
 15737  1431                     u745_25:	
 15738  1431  1D03               	skipz
 15739  1432  0008               	return
 15740                           
 15741                           ;MCU_B1.c: 162: Timer0.Count = 0;
 15742  1433  01A1               	clrf	(_Timer0^(0+256)+1)
 15743  1434  01A2               	clrf	((_Timer0+1)^(0+256)+1)
 15744                           
 15745                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 15746  1435  0021               	movlb	1	; select bank1
 15747  1436  14B5               	bsf	_myMain^(0+128),1
 15748  1437  0008               	return
 15749  1438                     __end_of_TMR0_ISR:	
 15750                           
 15751                           	psect	text107
 15752  0044                     __ptext107:	
 15753 ;; *************** function _setDimmerLights_IntrControl *****************
 15754 ;; Defined at:
 15755 ;;		line 95 in file "../src/Dimmer_B1.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;  lights          1    wreg     unsigned char 
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;  lights          1    4[COMMON] unsigned char 
 15760 ;; Return value:  Size  Location     Type
 15761 ;;		None               void
 15762 ;; Registers used:
 15763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15764 ;; Tracked objects:
 15765 ;;		On entry : 0/0
 15766 ;;		On exit  : 0/0
 15767 ;;		Unchanged: 0/0
 15768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;Total ram usage:        3 bytes
 15774 ;; Hardware stack levels used:    1
 15775 ;; Hardware stack levels required when called:    1
 15776 ;; This function calls:
 15777 ;;		_DimmerIntrPointSelect
 15778 ;; This function is called by:
 15779 ;;		_TMR0_ISR
 15780 ;; This function uses a non-reentrant model
 15781 ;;
 15782                           
 15783                           
 15784                           ;psect for function _setDimmerLights_IntrControl
 15785  0044                     _setDimmerLights_IntrControl:	
 15786                           
 15787                           ;incstack = 0
 15788                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15789                           ;setDimmerLights_IntrControl@lights stored from wreg
 15790  0044  00F4               	movwf	setDimmerLights_IntrControl@lights
 15791                           
 15792                           ;Dimmer_B1.c: 97: DimmerIntrPointSelect(lights);
 15793  0045  0874               	movf	setDimmerLights_IntrControl@lights,w
 15794  0046  3191  2196  3180   	fcall	_DimmerIntrPointSelect
 15795                           
 15796                           ;Dimmer_B1.c: 98: if (DimmerLightsIntr->GO == 1) {
 15797  0049  0878               	movf	_DimmerLightsIntr,w
 15798  004A  0086               	movwf	6
 15799  004B  3001               	movlw	1	; select bank2/3
 15800  004C  0087               	movwf	7
 15801  004D  1C01               	btfss	1,0
 15802  004E  28A4               	goto	i1l6963
 15803                           
 15804                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Count++;
 15805  004F  3001               	movlw	1
 15806  0050  00F2               	movwf	??_setDimmerLights_IntrControl
 15807  0051  0878               	movf	_DimmerLightsIntr,w
 15808  0052  3E03               	addlw	3
 15809  0053  0086               	movwf	6
 15810  0054  3001               	movlw	1	; select bank2/3
 15811  0055  0087               	movwf	7
 15812  0056  0872               	movf	??_setDimmerLights_IntrControl,w
 15813  0057  0781               	addwf	1,f
 15814                           
 15815                           ;Dimmer_B1.c: 100: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimm
      +                          er->Correction)) {
 15816  0058  0877               	movf	_Dimmer,w
 15817  0059  3E02               	addlw	2
 15818  005A  0086               	movwf	6
 15819  005B  0187               	clrf	7
 15820  005C  0878               	movf	_DimmerLightsIntr,w
 15821  005D  3E04               	addlw	4
 15822  005E  0084               	movwf	4
 15823  005F  3001               	movlw	1	; select bank2/3
 15824  0060  0085               	movwf	5
 15825  0061  0800               	movf	0,w
 15826  0062  0701               	addwf	1,w
 15827  0063  00F2               	movwf	??_setDimmerLights_IntrControl
 15828  0064  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15829  0065  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 15830  0066  0878               	movf	_DimmerLightsIntr,w
 15831  0067  3E03               	addlw	3
 15832  0068  0086               	movwf	6
 15833  0069  3001               	movlw	1	; select bank2/3
 15834  006A  0087               	movwf	7
 15835  006B  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15836  006C  3A80               	xorlw	128
 15837  006D  3C80               	sublw	128
 15838  006E  1D03               	skipz
 15839  006F  2872               	goto	u632_25
 15840  0070  0872               	movf	??_setDimmerLights_IntrControl,w
 15841  0071  0201               	subwf	1,w
 15842  0072                     u632_25:	
 15843  0072  1C03               	skipc
 15844  0073  29B2               	goto	i1l7029
 15845                           
 15846                           ;Dimmer_B1.c: 101: DimmerLightsIntr->Count = 0;
 15847  0074  0878               	movf	_DimmerLightsIntr,w
 15848  0075  3E03               	addlw	3
 15849  0076  0086               	movwf	6
 15850  0077  3001               	movlw	1	; select bank2/3
 15851  0078  0087               	movwf	7
 15852  0079  0181               	clrf	1
 15853                           
 15854                           ;Dimmer_B1.c: 102: DimmerLightsIntr->GO = 0;
 15855  007A  0878               	movf	_DimmerLightsIntr,w
 15856  007B  0086               	movwf	6
 15857  007C  3001               	movlw	1	; select bank2/3
 15858  007D  0087               	movwf	7
 15859  007E  1001               	bcf	1,0
 15860                           
 15861                           ;Dimmer_B1.c: 104: if (DimmerLightsIntr->StatusFlag == 1) {
 15862  007F  0878               	movf	_DimmerLightsIntr,w
 15863  0080  0086               	movwf	6
 15864  0081  3001               	movlw	1	; select bank2/3
 15865  0082  0087               	movwf	7
 15866  0083  1F01               	btfss	1,6
 15867  0084  29B2               	goto	i1l7029
 15868                           
 15869                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Flag = 1;
 15870  0085  0878               	movf	_DimmerLightsIntr,w
 15871  0086  3E08               	addlw	8
 15872  0087  0086               	movwf	6
 15873  0088  3001               	movlw	1	; select bank2/3
 15874  0089  0087               	movwf	7
 15875  008A  1401               	bsf	1,0
 15876                           
 15877                           ;Dimmer_B1.c: 106: DimmerLightsIntr->Triac = 1;
 15878  008B  0878               	movf	_DimmerLightsIntr,w
 15879  008C  3E08               	addlw	8
 15880  008D  0086               	movwf	6
 15881  008E  3001               	movlw	1	; select bank2/3
 15882  008F  0087               	movwf	7
 15883  0090  1681               	bsf	1,5
 15884                           
 15885                           ;Dimmer_B1.c: 108: if (lights == 1) {
 15886  0091  0874               	movf	setDimmerLights_IntrControl@lights,w
 15887  0092  3A01               	xorlw	1
 15888  0093  1D03               	skipz
 15889  0094  2897               	goto	i1l6955
 15890                           
 15891                           ;Dimmer_B1.c: 109: RB4 = 1;
 15892  0095  0020               	movlb	0	; select bank0
 15893  0096  160D               	bsf	13,4	;volatile
 15894  0097                     i1l6955:	
 15895                           ;Dimmer_B1.c: 110: ;;
 15896                           
 15897                           
 15898                           ;Dimmer_B1.c: 111: }
 15899                           ;Dimmer_B1.c: 114: if (lights == 2) {
 15900  0097  0874               	movf	setDimmerLights_IntrControl@lights,w
 15901  0098  3A02               	xorlw	2
 15902  0099  1D03               	skipz
 15903  009A  289D               	goto	i1l6959
 15904                           
 15905                           ;Dimmer_B1.c: 115: RA7 = 1;
 15906  009B  0020               	movlb	0	; select bank0
 15907  009C  178C               	bsf	12,7	;volatile
 15908  009D                     i1l6959:	
 15909                           
 15910                           ;Dimmer_B1.c: 116: }
 15911                           ;Dimmer_B1.c: 119: if (lights == 3) {
 15912  009D  0874               	movf	setDimmerLights_IntrControl@lights,w
 15913  009E  3A03               	xorlw	3
 15914  009F  1D03               	skipz
 15915  00A0  29B2               	goto	i1l7029
 15916                           
 15917                           ;Dimmer_B1.c: 120: RB1 = 1;
 15918  00A1  0020               	movlb	0	; select bank0
 15919  00A2  148D               	bsf	13,1	;volatile
 15920                           
 15921                           ;Dimmer_B1.c: 121: }
 15922                           ;Dimmer_B1.c: 123: }
 15923                           ;Dimmer_B1.c: 124: }
 15924                           ;Dimmer_B1.c: 125: } else {
 15925  00A3  29B2               	goto	i1l7029
 15926  00A4                     i1l6963:	
 15927                           
 15928                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->Flag == 1) {
 15929  00A4  0878               	movf	_DimmerLightsIntr,w
 15930  00A5  3E08               	addlw	8
 15931  00A6  0086               	movwf	6
 15932  00A7  3001               	movlw	1	; select bank2/3
 15933  00A8  0087               	movwf	7
 15934  00A9  1C01               	btfss	1,0
 15935  00AA  29B2               	goto	i1l7029
 15936                           
 15937                           ;Dimmer_B1.c: 127: DimmerLightsIntr->Flag = 0;
 15938  00AB  0878               	movf	_DimmerLightsIntr,w
 15939  00AC  3E08               	addlw	8
 15940  00AD  0086               	movwf	6
 15941  00AE  3001               	movlw	1	; select bank2/3
 15942  00AF  0087               	movwf	7
 15943  00B0  1001               	bcf	1,0
 15944                           
 15945                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->Signal == 1) {
 15946  00B1  0878               	movf	_DimmerLightsIntr,w
 15947  00B2  0086               	movwf	6
 15948  00B3  3001               	movlw	1	; select bank2/3
 15949  00B4  0087               	movwf	7
 15950  00B5  1C81               	btfss	1,1
 15951  00B6  29B2               	goto	i1l7029
 15952                           
 15953                           ;Dimmer_B1.c: 129: DimmerLightsIntr->DimmingTime++;
 15954  00B7  3001               	movlw	1
 15955  00B8  00F2               	movwf	??_setDimmerLights_IntrControl
 15956  00B9  0A78               	incf	_DimmerLightsIntr,w
 15957  00BA  0086               	movwf	6
 15958  00BB  3001               	movlw	1	; select bank2/3
 15959  00BC  0087               	movwf	7
 15960  00BD  0872               	movf	??_setDimmerLights_IntrControl,w
 15961  00BE  0781               	addwf	1,f
 15962                           
 15963                           ;Dimmer_B1.c: 130: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 15964  00BF  0A78               	incf	_DimmerLightsIntr,w
 15965  00C0  0086               	movwf	6
 15966  00C1  3001               	movlw	1	; select bank2/3
 15967  00C2  0087               	movwf	7
 15968  00C3  0878               	movf	_DimmerLightsIntr,w
 15969  00C4  3E02               	addlw	2
 15970  00C5  0084               	movwf	4
 15971  00C6  3001               	movlw	1	; select bank2/3
 15972  00C7  0085               	movwf	5
 15973  00C8  0800               	movf	0,w
 15974  00C9  0201               	subwf	1,w
 15975  00CA  1C03               	skipc
 15976  00CB  29B2               	goto	i1l7029
 15977                           
 15978                           ;Dimmer_B1.c: 131: DimmerLightsIntr->DimmingTime = 0;
 15979  00CC  0A78               	incf	_DimmerLightsIntr,w
 15980  00CD  0086               	movwf	6
 15981  00CE  3001               	movlw	1	; select bank2/3
 15982  00CF  0087               	movwf	7
 15983  00D0  0181               	clrf	1
 15984                           
 15985                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjFlag == 1) {
 15986  00D1  0878               	movf	_DimmerLightsIntr,w
 15987  00D2  0086               	movwf	6
 15988  00D3  3001               	movlw	1	; select bank2/3
 15989  00D4  0087               	movwf	7
 15990  00D5  1D81               	btfss	1,3
 15991  00D6  290D               	goto	i1l6989
 15992                           
 15993                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->AdjStatus == 0) {
 15994  00D7  0878               	movf	_DimmerLightsIntr,w
 15995  00D8  0086               	movwf	6
 15996  00D9  3001               	movlw	1	; select bank2/3
 15997  00DA  0087               	movwf	7
 15998  00DB  1A01               	btfsc	1,4
 15999  00DC  28F4               	goto	i1l6983
 16000                           
 16001                           ;Dimmer_B1.c: 134: if (DimmerLightsIntr->DimmingValue > ((char)((100-90)*0.8))) {
 16002  00DD  0878               	movf	_DimmerLightsIntr,w
 16003  00DE  3E04               	addlw	4
 16004  00DF  0086               	movwf	6
 16005  00E0  3001               	movlw	1	; select bank2/3
 16006  00E1  0087               	movwf	7
 16007  00E2  3009               	movlw	9
 16008  00E3  0201               	subwf	1,w
 16009  00E4  1C03               	skipc
 16010  00E5  28EE               	goto	i1l6981
 16011                           
 16012                           ;Dimmer_B1.c: 135: DimmerLightsIntr->DimmingValue--;
 16013  00E6  0878               	movf	_DimmerLightsIntr,w
 16014  00E7  3E04               	addlw	4
 16015  00E8  0086               	movwf	6
 16016  00E9  3001               	movlw	1	; select bank2/3
 16017  00EA  0087               	movwf	7
 16018  00EB  3001               	movlw	1
 16019  00EC  0281               	subwf	1,f
 16020                           
 16021                           ;Dimmer_B1.c: 136: } else {
 16022  00ED  29B2               	goto	i1l7029
 16023  00EE                     i1l6981:	
 16024                           
 16025                           ;Dimmer_B1.c: 137: DimmerLightsIntr->AdjStatus = 1;
 16026  00EE  0878               	movf	_DimmerLightsIntr,w
 16027  00EF  0086               	movwf	6
 16028  00F0  3001               	movlw	1	; select bank2/3
 16029  00F1  0087               	movwf	7
 16030  00F2  1601               	bsf	1,4
 16031                           
 16032                           ;Dimmer_B1.c: 138: }
 16033                           ;Dimmer_B1.c: 139: } else {
 16034  00F3  29B2               	goto	i1l7029
 16035  00F4                     i1l6983:	
 16036                           
 16037                           ;Dimmer_B1.c: 140: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16038  00F4  0878               	movf	_DimmerLightsIntr,w
 16039  00F5  3E04               	addlw	4
 16040  00F6  0086               	movwf	6
 16041  00F7  3001               	movlw	1	; select bank2/3
 16042  00F8  0087               	movwf	7
 16043  00F9  303C               	movlw	60
 16044  00FA  0201               	subwf	1,w
 16045  00FB  1803               	skipnc
 16046  00FC  2907               	goto	i1l6987
 16047                           
 16048                           ;Dimmer_B1.c: 141: DimmerLightsIntr->DimmingValue++;
 16049  00FD  3001               	movlw	1
 16050  00FE  00F2               	movwf	??_setDimmerLights_IntrControl
 16051  00FF  0878               	movf	_DimmerLightsIntr,w
 16052  0100  3E04               	addlw	4
 16053  0101  0086               	movwf	6
 16054  0102  3001               	movlw	1	; select bank2/3
 16055  0103  0087               	movwf	7
 16056  0104  0872               	movf	??_setDimmerLights_IntrControl,w
 16057  0105  0781               	addwf	1,f
 16058                           
 16059                           ;Dimmer_B1.c: 142: } else {
 16060  0106  29B2               	goto	i1l7029
 16061  0107                     i1l6987:	
 16062                           
 16063                           ;Dimmer_B1.c: 143: DimmerLightsIntr->AdjStatus = 0;
 16064  0107  0878               	movf	_DimmerLightsIntr,w
 16065  0108  0086               	movwf	6
 16066  0109  3001               	movlw	1	; select bank2/3
 16067  010A  0087               	movwf	7
 16068  010B  1201               	bcf	1,4
 16069                           
 16070                           ;Dimmer_B1.c: 144: }
 16071                           ;Dimmer_B1.c: 145: }
 16072                           ;Dimmer_B1.c: 146: } else if (DimmerLightsIntr->AdjRF == 1) {
 16073  010C  29B2               	goto	i1l7029
 16074  010D                     i1l6989:	
 16075  010D  0878               	movf	_DimmerLightsIntr,w
 16076  010E  0086               	movwf	6
 16077  010F  3001               	movlw	1	; select bank2/3
 16078  0110  0087               	movwf	7
 16079  0111  1D01               	btfss	1,2
 16080  0112  2954               	goto	i1l7003
 16081                           
 16082                           ;Dimmer_B1.c: 147: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16083  0113  0878               	movf	_DimmerLightsIntr,w
 16084  0114  3E05               	addlw	5
 16085  0115  0086               	movwf	6
 16086  0116  3001               	movlw	1	; select bank2/3
 16087  0117  0087               	movwf	7
 16088  0118  0878               	movf	_DimmerLightsIntr,w
 16089  0119  3E04               	addlw	4
 16090  011A  0084               	movwf	4
 16091  011B  3001               	movlw	1	; select bank2/3
 16092  011C  0085               	movwf	5
 16093  011D  0800               	movf	0,w
 16094  011E  0201               	subwf	1,w
 16095  011F  1803               	skipnc
 16096  0120  2929               	goto	i1l6995
 16097                           
 16098                           ;Dimmer_B1.c: 148: DimmerLightsIntr->DimmingValue--;
 16099  0121  0878               	movf	_DimmerLightsIntr,w
 16100  0122  3E04               	addlw	4
 16101  0123  0086               	movwf	6
 16102  0124  3001               	movlw	1	; select bank2/3
 16103  0125  0087               	movwf	7
 16104  0126  3001               	movlw	1
 16105  0127  0281               	subwf	1,f
 16106                           
 16107                           ;Dimmer_B1.c: 149: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16108  0128  2940               	goto	i1l6999
 16109  0129                     i1l6995:	
 16110  0129  0878               	movf	_DimmerLightsIntr,w
 16111  012A  3E04               	addlw	4
 16112  012B  0086               	movwf	6
 16113  012C  3001               	movlw	1	; select bank2/3
 16114  012D  0087               	movwf	7
 16115  012E  0878               	movf	_DimmerLightsIntr,w
 16116  012F  3E05               	addlw	5
 16117  0130  0084               	movwf	4
 16118  0131  3001               	movlw	1	; select bank2/3
 16119  0132  0085               	movwf	5
 16120  0133  0800               	movf	0,w
 16121  0134  0201               	subwf	1,w
 16122  0135  1803               	skipnc
 16123  0136  2940               	goto	i1l6999
 16124                           
 16125                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue++;
 16126  0137  3001               	movlw	1
 16127  0138  00F2               	movwf	??_setDimmerLights_IntrControl
 16128  0139  0878               	movf	_DimmerLightsIntr,w
 16129  013A  3E04               	addlw	4
 16130  013B  0086               	movwf	6
 16131  013C  3001               	movlw	1	; select bank2/3
 16132  013D  0087               	movwf	7
 16133  013E  0872               	movf	??_setDimmerLights_IntrControl,w
 16134  013F  0781               	addwf	1,f
 16135  0140                     i1l6999:	
 16136                           
 16137                           ;Dimmer_B1.c: 151: }
 16138                           ;Dimmer_B1.c: 152: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16139  0140  0878               	movf	_DimmerLightsIntr,w
 16140  0141  3E05               	addlw	5
 16141  0142  0086               	movwf	6
 16142  0143  3001               	movlw	1	; select bank2/3
 16143  0144  0087               	movwf	7
 16144  0145  0878               	movf	_DimmerLightsIntr,w
 16145  0146  3E04               	addlw	4
 16146  0147  0084               	movwf	4
 16147  0148  3001               	movlw	1	; select bank2/3
 16148  0149  0085               	movwf	5
 16149  014A  0800               	movf	0,w
 16150  014B  0601               	xorwf	1,w
 16151  014C  1D03               	skipz
 16152  014D  29B2               	goto	i1l7029
 16153                           
 16154                           ;Dimmer_B1.c: 153: DimmerLightsIntr->AdjRF = 0;
 16155  014E  0878               	movf	_DimmerLightsIntr,w
 16156  014F  0086               	movwf	6
 16157  0150  3001               	movlw	1	; select bank2/3
 16158  0151  0087               	movwf	7
 16159  0152  1101               	bcf	1,2
 16160  0153  296F               	goto	i1l7009
 16161  0154                     i1l7003:	
 16162                           ;Dimmer_B1.c: 155: }
 16163                           ;Dimmer_B1.c: 156: } else {
 16164                           
 16165                           ;Dimmer_B1.c: 154: DimmerLightsIntr->Signal = 0;
 16166                           
 16167                           
 16168                           ;Dimmer_B1.c: 157: if (DimmerLightsIntr->Status == 1) {
 16169  0154  0878               	movf	_DimmerLightsIntr,w
 16170  0155  0086               	movwf	6
 16171  0156  3001               	movlw	1	; select bank2/3
 16172  0157  0087               	movwf	7
 16173  0158  1E81               	btfss	1,5
 16174  0159  2975               	goto	i1l7011
 16175                           
 16176                           ;Dimmer_B1.c: 158: DimmerLightsIntr->DimmingValue--;
 16177  015A  0878               	movf	_DimmerLightsIntr,w
 16178  015B  3E04               	addlw	4
 16179  015C  0086               	movwf	6
 16180  015D  3001               	movlw	1	; select bank2/3
 16181  015E  0087               	movwf	7
 16182  015F  3001               	movlw	1
 16183  0160  0281               	subwf	1,f
 16184                           
 16185                           ;Dimmer_B1.c: 159: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16186  0161  0878               	movf	_DimmerLightsIntr,w
 16187  0162  3E05               	addlw	5
 16188  0163  0086               	movwf	6
 16189  0164  3001               	movlw	1	; select bank2/3
 16190  0165  0087               	movwf	7
 16191  0166  0878               	movf	_DimmerLightsIntr,w
 16192  0167  3E04               	addlw	4
 16193  0168  0084               	movwf	4
 16194  0169  3001               	movlw	1	; select bank2/3
 16195  016A  0085               	movwf	5
 16196  016B  0800               	movf	0,w
 16197  016C  0201               	subwf	1,w
 16198  016D  1C03               	skipc
 16199  016E  29B2               	goto	i1l7029
 16200  016F                     i1l7009:	
 16201                           
 16202                           ;Dimmer_B1.c: 160: DimmerLightsIntr->Signal = 0;
 16203  016F  0878               	movf	_DimmerLightsIntr,w
 16204  0170  0086               	movwf	6
 16205  0171  3001               	movlw	1	; select bank2/3
 16206  0172  0087               	movwf	7
 16207  0173  1081               	bcf	1,1
 16208                           
 16209                           ;Dimmer_B1.c: 161: }
 16210                           ;Dimmer_B1.c: 162: } else {
 16211  0174  29B2               	goto	i1l7029
 16212  0175                     i1l7011:	
 16213                           
 16214                           ;Dimmer_B1.c: 163: DimmerLightsIntr->DimmingValue++;
 16215  0175  3001               	movlw	1
 16216  0176  00F2               	movwf	??_setDimmerLights_IntrControl
 16217  0177  0878               	movf	_DimmerLightsIntr,w
 16218  0178  3E04               	addlw	4
 16219  0179  0086               	movwf	6
 16220  017A  3001               	movlw	1	; select bank2/3
 16221  017B  0087               	movwf	7
 16222  017C  0872               	movf	??_setDimmerLights_IntrControl,w
 16223  017D  0781               	addwf	1,f
 16224                           
 16225                           ;Dimmer_B1.c: 164: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16226  017E  0878               	movf	_DimmerLightsIntr,w
 16227  017F  3E04               	addlw	4
 16228  0180  0086               	movwf	6
 16229  0181  3001               	movlw	1	; select bank2/3
 16230  0182  0087               	movwf	7
 16231  0183  0878               	movf	_DimmerLightsIntr,w
 16232  0184  3E06               	addlw	6
 16233  0185  0084               	movwf	4
 16234  0186  3001               	movlw	1	; select bank2/3
 16235  0187  0085               	movwf	5
 16236  0188  0800               	movf	0,w
 16237  0189  0201               	subwf	1,w
 16238  018A  1C03               	skipc
 16239  018B  29B2               	goto	i1l7029
 16240                           
 16241                           ;Dimmer_B1.c: 165: DimmerLightsIntr->Signal = 0;
 16242  018C  0878               	movf	_DimmerLightsIntr,w
 16243  018D  0086               	movwf	6
 16244  018E  3001               	movlw	1	; select bank2/3
 16245  018F  0087               	movwf	7
 16246  0190  1081               	bcf	1,1
 16247                           
 16248                           ;Dimmer_B1.c: 166: DimmerLightsIntr->StatusFlag = 0;
 16249  0191  0878               	movf	_DimmerLightsIntr,w
 16250  0192  0086               	movwf	6
 16251  0193  3001               	movlw	1	; select bank2/3
 16252  0194  0087               	movwf	7
 16253  0195  1301               	bcf	1,6
 16254                           
 16255                           ;Dimmer_B1.c: 167: DimmerLightsIntr->Clear = 1;
 16256  0196  0878               	movf	_DimmerLightsIntr,w
 16257  0197  3E09               	addlw	9
 16258  0198  0086               	movwf	6
 16259  0199  3001               	movlw	1	; select bank2/3
 16260  019A  0087               	movwf	7
 16261  019B  1501               	bsf	1,2
 16262                           
 16263                           ;Dimmer_B1.c: 168: Dimmer->Detect = 1;
 16264  019C  0877               	movf	_Dimmer,w
 16265  019D  0086               	movwf	6
 16266  019E  0187               	clrf	7
 16267  019F  1401               	bsf	1,0
 16268                           
 16269                           ;Dimmer_B1.c: 170: if (lights == 1) {
 16270  01A0  0874               	movf	setDimmerLights_IntrControl@lights,w
 16271  01A1  3A01               	xorlw	1
 16272  01A2  1D03               	skipz
 16273  01A3  29A6               	goto	i1l7021
 16274                           
 16275                           ;Dimmer_B1.c: 171: RC7 = 0;
 16276  01A4  0020               	movlb	0	; select bank0
 16277  01A5  138E               	bcf	14,7	;volatile
 16278  01A6                     i1l7021:	
 16279                           
 16280                           ;Dimmer_B1.c: 173: }
 16281                           ;Dimmer_B1.c: 176: if (lights == 2) {
 16282  01A6  0874               	movf	setDimmerLights_IntrControl@lights,w
 16283  01A7  3A02               	xorlw	2
 16284  01A8  1D03               	skipz
 16285  01A9  29AC               	goto	i1l7025
 16286                           
 16287                           ;Dimmer_B1.c: 177: RA3 = 0;
 16288  01AA  0020               	movlb	0	; select bank0
 16289  01AB  118C               	bcf	12,3	;volatile
 16290  01AC                     i1l7025:	
 16291                           
 16292                           ;Dimmer_B1.c: 178: }
 16293                           ;Dimmer_B1.c: 181: if (lights == 3) {
 16294  01AC  0874               	movf	setDimmerLights_IntrControl@lights,w
 16295  01AD  3A03               	xorlw	3
 16296  01AE  1D03               	skipz
 16297  01AF  29B2               	goto	i1l7029
 16298                           
 16299                           ;Dimmer_B1.c: 182: RC6 = 0;
 16300  01B0  0020               	movlb	0	; select bank0
 16301  01B1  130E               	bcf	14,6	;volatile
 16302  01B2                     i1l7029:	
 16303                           ;Dimmer_B1.c: 183: }
 16304                           ;Dimmer_B1.c: 185: ;;
 16305                           
 16306                           
 16307                           ;Dimmer_B1.c: 186: }
 16308                           ;Dimmer_B1.c: 187: }
 16309                           ;Dimmer_B1.c: 188: }
 16310                           ;Dimmer_B1.c: 189: }
 16311                           ;Dimmer_B1.c: 190: }
 16312                           ;Dimmer_B1.c: 191: }
 16313                           ;Dimmer_B1.c: 192: }
 16314                           ;Dimmer_B1.c: 193: if (DimmerLightsIntr->Triac == 1) {
 16315  01B2  0878               	movf	_DimmerLightsIntr,w
 16316  01B3  3E08               	addlw	8
 16317  01B4  0086               	movwf	6
 16318  01B5  3001               	movlw	1	; select bank2/3
 16319  01B6  0087               	movwf	7
 16320  01B7  1E81               	btfss	1,5
 16321  01B8  29E9               	goto	i1l7051
 16322                           
 16323                           ;Dimmer_B1.c: 194: DimmerLightsIntr->TriacTime++;
 16324  01B9  3001               	movlw	1
 16325  01BA  00F2               	movwf	??_setDimmerLights_IntrControl
 16326  01BB  0878               	movf	_DimmerLightsIntr,w
 16327  01BC  3E07               	addlw	7
 16328  01BD  0086               	movwf	6
 16329  01BE  3001               	movlw	1	; select bank2/3
 16330  01BF  0087               	movwf	7
 16331  01C0  0872               	movf	??_setDimmerLights_IntrControl,w
 16332  01C1  0781               	addwf	1,f
 16333                           
 16334                           ;Dimmer_B1.c: 195: if (DimmerLightsIntr->TriacTime >= 5) {
 16335  01C2  0878               	movf	_DimmerLightsIntr,w
 16336  01C3  3E07               	addlw	7
 16337  01C4  0086               	movwf	6
 16338  01C5  3001               	movlw	1	; select bank2/3
 16339  01C6  0087               	movwf	7
 16340  01C7  3005               	movlw	5
 16341  01C8  0201               	subwf	1,w
 16342  01C9  1C03               	skipc
 16343  01CA  29E9               	goto	i1l7051
 16344                           
 16345                           ;Dimmer_B1.c: 196: DimmerLightsIntr->TriacTime = 0;
 16346  01CB  0878               	movf	_DimmerLightsIntr,w
 16347  01CC  3E07               	addlw	7
 16348  01CD  0086               	movwf	6
 16349  01CE  3001               	movlw	1	; select bank2/3
 16350  01CF  0087               	movwf	7
 16351  01D0  0181               	clrf	1
 16352                           
 16353                           ;Dimmer_B1.c: 197: DimmerLightsIntr->Triac = 0;
 16354  01D1  0878               	movf	_DimmerLightsIntr,w
 16355  01D2  3E08               	addlw	8
 16356  01D3  0086               	movwf	6
 16357  01D4  3001               	movlw	1	; select bank2/3
 16358  01D5  0087               	movwf	7
 16359  01D6  1281               	bcf	1,5
 16360                           
 16361                           ;Dimmer_B1.c: 200: if (lights == 1) {
 16362  01D7  0874               	movf	setDimmerLights_IntrControl@lights,w
 16363  01D8  3A01               	xorlw	1
 16364  01D9  1D03               	skipz
 16365  01DA  29DD               	goto	i1l7043
 16366                           
 16367                           ;Dimmer_B1.c: 201: RB4 = 0;
 16368  01DB  0020               	movlb	0	; select bank0
 16369  01DC  120D               	bcf	13,4	;volatile
 16370  01DD                     i1l7043:	
 16371                           ;Dimmer_B1.c: 202: ;;
 16372                           
 16373                           
 16374                           ;Dimmer_B1.c: 203: }
 16375                           ;Dimmer_B1.c: 206: if (lights == 2) {
 16376  01DD  0874               	movf	setDimmerLights_IntrControl@lights,w
 16377  01DE  3A02               	xorlw	2
 16378  01DF  1D03               	skipz
 16379  01E0  29E3               	goto	i1l7047
 16380                           
 16381                           ;Dimmer_B1.c: 207: RA7 = 0;
 16382  01E1  0020               	movlb	0	; select bank0
 16383  01E2  138C               	bcf	12,7	;volatile
 16384  01E3                     i1l7047:	
 16385                           
 16386                           ;Dimmer_B1.c: 208: }
 16387                           ;Dimmer_B1.c: 211: if (lights == 3) {
 16388  01E3  0874               	movf	setDimmerLights_IntrControl@lights,w
 16389  01E4  3A03               	xorlw	3
 16390  01E5  1D03               	skipz
 16391  01E6  29E9               	goto	i1l7051
 16392                           
 16393                           ;Dimmer_B1.c: 212: RB1 = 0;
 16394  01E7  0020               	movlb	0	; select bank0
 16395  01E8  108D               	bcf	13,1	;volatile
 16396  01E9                     i1l7051:	
 16397                           
 16398                           ;Dimmer_B1.c: 213: }
 16399                           ;Dimmer_B1.c: 215: }
 16400                           ;Dimmer_B1.c: 216: }
 16401                           ;Dimmer_B1.c: 217: if (DimmerLightsIntr->TriacFlag == 1) {
 16402  01E9  0878               	movf	_DimmerLightsIntr,w
 16403  01EA  3E09               	addlw	9
 16404  01EB  0086               	movwf	6
 16405  01EC  3001               	movlw	1	; select bank2/3
 16406  01ED  0087               	movwf	7
 16407  01EE  1E81               	btfss	1,5
 16408  01EF  0008               	return
 16409                           
 16410                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacCount++;
 16411  01F0  3001               	movlw	1
 16412  01F1  00F2               	movwf	??_setDimmerLights_IntrControl
 16413  01F2  0878               	movf	_DimmerLightsIntr,w
 16414  01F3  3E0A               	addlw	10
 16415  01F4  0086               	movwf	6
 16416  01F5  3001               	movlw	1	; select bank2/3
 16417  01F6  0087               	movwf	7
 16418  01F7  0872               	movf	??_setDimmerLights_IntrControl,w
 16419  01F8  0781               	addwf	1,f
 16420                           
 16421                           ;Dimmer_B1.c: 219: if (DimmerLightsIntr->TriacCount == 70) {
 16422  01F9  0878               	movf	_DimmerLightsIntr,w
 16423  01FA  3E0A               	addlw	10
 16424  01FB  0086               	movwf	6
 16425  01FC  3001               	movlw	1	; select bank2/3
 16426  01FD  0087               	movwf	7
 16427  01FE  0801               	movf	1,w
 16428  01FF  3A46               	xorlw	70
 16429  0200  1D03               	skipz
 16430  0201  0008               	return
 16431                           
 16432                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacCount = 0;
 16433  0202  0878               	movf	_DimmerLightsIntr,w
 16434  0203  3E0A               	addlw	10
 16435  0204  0086               	movwf	6
 16436  0205  3001               	movlw	1	; select bank2/3
 16437  0206  0087               	movwf	7
 16438  0207  0181               	clrf	1
 16439                           
 16440                           ;Dimmer_B1.c: 221: DimmerLightsIntr->TriacFlag = 0;
 16441  0208  0878               	movf	_DimmerLightsIntr,w
 16442  0209  3E09               	addlw	9
 16443  020A  0086               	movwf	6
 16444  020B  3001               	movlw	1	; select bank2/3
 16445  020C  0087               	movwf	7
 16446  020D  1281               	bcf	1,5
 16447  020E  0008               	return
 16448  020F                     __end_of_setDimmerLights_IntrControl:	
 16449                           
 16450                           	psect	text108
 16451  1196                     __ptext108:	
 16452 ;; *************** function _DimmerIntrPointSelect *****************
 16453 ;; Defined at:
 16454 ;;		line 73 in file "../src/Dimmer_B1.c"
 16455 ;; Parameters:    Size  Location     Type
 16456 ;;  lights          1    wreg     unsigned char 
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  lights          1    1[COMMON] unsigned char 
 16459 ;; Return value:  Size  Location     Type
 16460 ;;		None               void
 16461 ;; Registers used:
 16462 ;;		wreg
 16463 ;; Tracked objects:
 16464 ;;		On entry : 0/0
 16465 ;;		On exit  : 0/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;Total ram usage:        2 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; This function calls:
 16475 ;;		Nothing
 16476 ;; This function is called by:
 16477 ;;		_setDimmerLights_IntrControl
 16478 ;; This function uses a non-reentrant model
 16479 ;;
 16480                           
 16481                           
 16482                           ;psect for function _DimmerIntrPointSelect
 16483  1196                     _DimmerIntrPointSelect:	
 16484                           
 16485                           ;incstack = 0
 16486                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16487                           ;DimmerIntrPointSelect@lights stored from wreg
 16488  1196  00F1               	movwf	DimmerIntrPointSelect@lights
 16489                           
 16490                           ;Dimmer_B1.c: 75: if (lights == 1) {
 16491  1197  0871               	movf	DimmerIntrPointSelect@lights,w
 16492  1198  3A01               	xorlw	1
 16493  1199  1D03               	skipz
 16494  119A  299F               	goto	i1l810
 16495                           
 16496                           ;Dimmer_B1.c: 76: DimmerLightsIntr = &DimmerLights1;
 16497  119B  3028               	movlw	_DimmerLights1& (0+255)
 16498  119C  00F0               	movwf	??_DimmerIntrPointSelect
 16499  119D  0870               	movf	??_DimmerIntrPointSelect,w
 16500  119E  00F8               	movwf	_DimmerLightsIntr
 16501  119F                     i1l810:	
 16502                           
 16503                           ;Dimmer_B1.c: 77: }
 16504                           ;Dimmer_B1.c: 80: if (lights == 2) {
 16505  119F  0871               	movf	DimmerIntrPointSelect@lights,w
 16506  11A0  3A02               	xorlw	2
 16507  11A1  1D03               	skipz
 16508  11A2  29A7               	goto	i1l811
 16509                           
 16510                           ;Dimmer_B1.c: 81: DimmerLightsIntr = &DimmerLights2;
 16511  11A3  3037               	movlw	_DimmerLights2& (0+255)
 16512  11A4  00F0               	movwf	??_DimmerIntrPointSelect
 16513  11A5  0870               	movf	??_DimmerIntrPointSelect,w
 16514  11A6  00F8               	movwf	_DimmerLightsIntr
 16515  11A7                     i1l811:	
 16516                           
 16517                           ;Dimmer_B1.c: 82: }
 16518                           ;Dimmer_B1.c: 86: if (lights == 3) {
 16519  11A7  0871               	movf	DimmerIntrPointSelect@lights,w
 16520  11A8  3A03               	xorlw	3
 16521  11A9  1D03               	skipz
 16522  11AA  0008               	return
 16523                           
 16524                           ;Dimmer_B1.c: 87: DimmerLightsIntr = &DimmerLights3;
 16525  11AB  30C5               	movlw	_DimmerLights3& (0+255)
 16526  11AC  00F0               	movwf	??_DimmerIntrPointSelect
 16527  11AD  0870               	movf	??_DimmerIntrPointSelect,w
 16528  11AE  00F8               	movwf	_DimmerLightsIntr
 16529  11AF  0008               	return
 16530  11B0                     __end_of_DimmerIntrPointSelect:	
 16531                           
 16532                           	psect	text109
 16533  1F21                     __ptext109:	
 16534 ;; *************** function _IOC_ISR *****************
 16535 ;; Defined at:
 16536 ;;		line 291 in file "../src/MCU_B1.c"
 16537 ;; Parameters:    Size  Location     Type
 16538 ;;		None
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;		None
 16541 ;; Return value:  Size  Location     Type
 16542 ;;		None               void
 16543 ;; Registers used:
 16544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16545 ;; Tracked objects:
 16546 ;;		On entry : 0/0
 16547 ;;		On exit  : 0/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;Total ram usage:        0 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; Hardware stack levels required when called:    3
 16557 ;; This function calls:
 16558 ;;		_setDimmerReClock
 16559 ;; This function is called by:
 16560 ;;		_ISR
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           
 16565                           ;psect for function _IOC_ISR
 16566  1F21                     _IOC_ISR:	
 16567                           
 16568                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 16569                           
 16570                           ;incstack = 0
 16571                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16572  1F21  1D8B               	btfss	11,3	;volatile
 16573  1F22  0008               	return
 16574  1F23  0027               	movlb	7	; select bank7
 16575  1F24  1D16               	btfss	22,2	;volatile
 16576  1F25  0008               	return
 16577                           
 16578                           ;MCU_B1.c: 293: IOCBF2 = 0;
 16579  1F26  1116               	bcf	22,2	;volatile
 16580                           
 16581                           ;MCU_B1.c: 294: IOCIF = 0;
 16582  1F27  100B               	bcf	11,0	;volatile
 16583                           
 16584                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 16585  1F28  0021               	movlb	1	; select bank1
 16586  1F29  1C35               	btfss	_myMain^(0+128),0
 16587  1F2A  0008               	return
 16588                           
 16589                           ;MCU_B1.c: 297: setDimmerReClock();
 16590  1F2B  319E  26D9         	fcall	_setDimmerReClock
 16591  1F2D  0008               	return
 16592  1F2E                     __end_of_IOC_ISR:	
 16593                           
 16594                           	psect	text110
 16595  1ED9                     __ptext110:	
 16596 ;; *************** function _setDimmerReClock *****************
 16597 ;; Defined at:
 16598 ;;		line 169 in file "../src/MCU_B1.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;		None
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;		None               void
 16605 ;; Registers used:
 16606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16607 ;; Tracked objects:
 16608 ;;		On entry : 0/0
 16609 ;;		On exit  : 0/0
 16610 ;;		Unchanged: 0/0
 16611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;Total ram usage:        0 bytes
 16617 ;; Hardware stack levels used:    1
 16618 ;; Hardware stack levels required when called:    2
 16619 ;; This function calls:
 16620 ;;		_setDimmerLights_IntrIOC_GO
 16621 ;; This function is called by:
 16622 ;;		_IOC_ISR
 16623 ;; This function uses a non-reentrant model
 16624 ;;
 16625                           
 16626                           
 16627                           ;psect for function _setDimmerReClock
 16628  1ED9                     _setDimmerReClock:	
 16629                           
 16630                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 16631                           
 16632                           ;incstack = 0
 16633                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16634  1ED9  3001               	movlw	1
 16635  1EDA  3194  2438  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16636                           
 16637                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 16638  1EDD  3002               	movlw	2
 16639  1EDE  3194  2438  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16640                           
 16641                           ;MCU_B1.c: 182: setDimmerLights_IntrIOC_GO(3);
 16642  1EE1  3003               	movlw	3
 16643  1EE2  3194  2438         	fcall	_setDimmerLights_IntrIOC_GO
 16644  1EE4  0008               	return
 16645  1EE5                     __end_of_setDimmerReClock:	
 16646                           
 16647                           	psect	text111
 16648  1438                     __ptext111:	
 16649 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16650 ;; Defined at:
 16651 ;;		line 28 in file "../src/Dimmer_B1.c"
 16652 ;; Parameters:    Size  Location     Type
 16653 ;;  lights          1    wreg     unsigned char 
 16654 ;; Auto vars:     Size  Location     Type
 16655 ;;  lights          1    2[COMMON] unsigned char 
 16656 ;; Return value:  Size  Location     Type
 16657 ;;		None               void
 16658 ;; Registers used:
 16659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16660 ;; Tracked objects:
 16661 ;;		On entry : 0/0
 16662 ;;		On exit  : 0/0
 16663 ;;		Unchanged: 0/0
 16664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;Total ram usage:        1 bytes
 16670 ;; Hardware stack levels used:    1
 16671 ;; Hardware stack levels required when called:    1
 16672 ;; This function calls:
 16673 ;;		_DimmerIntrIOCPointSelect
 16674 ;; This function is called by:
 16675 ;;		_setDimmerReClock
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           
 16680                           ;psect for function _setDimmerLights_IntrIOC_GO
 16681  1438                     _setDimmerLights_IntrIOC_GO:	
 16682                           
 16683                           ;incstack = 0
 16684                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16685                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16686  1438  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16687                           
 16688                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16689  1439  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16690  143A  3191  21E5  3194   	fcall	_DimmerIntrIOCPointSelect
 16691                           
 16692                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16693  143D  0021               	movlb	1	; select bank1
 16694  143E  0861               	movf	_DimmerLightsIntrIOC^(0+128),w
 16695  143F  0086               	movwf	6
 16696  1440  3001               	movlw	1	; select bank2/3
 16697  1441  0087               	movwf	7
 16698  1442  1801               	btfsc	1,0
 16699  1443  0008               	return
 16700  1444  0861               	movf	_DimmerLightsIntrIOC^(0+128),w
 16701  1445  3E09               	addlw	9
 16702  1446  0086               	movwf	6
 16703  1447  3001               	movlw	1	; select bank2/3
 16704  1448  0087               	movwf	7
 16705  1449  1A81               	btfsc	1,5
 16706  144A  0008               	return
 16707                           
 16708                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16709  144B  0861               	movf	_DimmerLightsIntrIOC^(0+128),w
 16710  144C  0086               	movwf	6
 16711  144D  3001               	movlw	1	; select bank2/3
 16712  144E  0087               	movwf	7
 16713  144F  1401               	bsf	1,0
 16714                           
 16715                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16716  1450  0861               	movf	_DimmerLightsIntrIOC^(0+128),w
 16717  1451  3E09               	addlw	9
 16718  1452  0086               	movwf	6
 16719  1453  3001               	movlw	1	; select bank2/3
 16720  1454  0087               	movwf	7
 16721  1455  1681               	bsf	1,5
 16722                           
 16723                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 16724  1456  0020               	movlb	0	; select bank0
 16725  1457  1D0D               	btfss	13,2	;volatile
 16726  1458  2C60               	goto	i1l6539
 16727                           
 16728                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 16729  1459  0877               	movf	_Dimmer,w
 16730  145A  3E02               	addlw	2
 16731  145B  0086               	movwf	6
 16732  145C  0187               	clrf	7
 16733  145D  0181               	clrf	1
 16734  145E  0A81               	incf	1,f
 16735                           
 16736                           ;Dimmer_B1.c: 37: } else {
 16737  145F  0008               	return
 16738  1460                     i1l6539:	
 16739                           
 16740                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 16741  1460  0877               	movf	_Dimmer,w
 16742  1461  3E02               	addlw	2
 16743  1462  0086               	movwf	6
 16744  1463  0187               	clrf	7
 16745  1464  0181               	clrf	1
 16746  1465  0008               	return
 16747  1466                     __end_of_setDimmerLights_IntrIOC_GO:	
 16748                           
 16749                           	psect	text112
 16750  11E5                     __ptext112:	
 16751 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16752 ;; Defined at:
 16753 ;;		line 8 in file "../src/Dimmer_B1.c"
 16754 ;; Parameters:    Size  Location     Type
 16755 ;;  lights          1    wreg     unsigned char 
 16756 ;; Auto vars:     Size  Location     Type
 16757 ;;  lights          1    1[COMMON] unsigned char 
 16758 ;; Return value:  Size  Location     Type
 16759 ;;		None               void
 16760 ;; Registers used:
 16761 ;;		wreg
 16762 ;; Tracked objects:
 16763 ;;		On entry : 0/0
 16764 ;;		On exit  : 0/0
 16765 ;;		Unchanged: 0/0
 16766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;Total ram usage:        2 bytes
 16772 ;; Hardware stack levels used:    1
 16773 ;; This function calls:
 16774 ;;		Nothing
 16775 ;; This function is called by:
 16776 ;;		_setDimmerLights_IntrIOC_GO
 16777 ;; This function uses a non-reentrant model
 16778 ;;
 16779                           
 16780                           
 16781                           ;psect for function _DimmerIntrIOCPointSelect
 16782  11E5                     _DimmerIntrIOCPointSelect:	
 16783                           
 16784                           ;incstack = 0
 16785                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16786                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16787  11E5  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16788                           
 16789                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16790  11E6  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16791  11E7  3A01               	xorlw	1
 16792  11E8  1D03               	skipz
 16793  11E9  29EF               	goto	i1l798
 16794                           
 16795                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16796  11EA  3028               	movlw	_DimmerLights1& (0+255)
 16797  11EB  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16798  11EC  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16799  11ED  0021               	movlb	1	; select bank1
 16800  11EE  00E1               	movwf	_DimmerLightsIntrIOC^(0+128)
 16801  11EF                     i1l798:	
 16802                           
 16803                           ;Dimmer_B1.c: 12: }
 16804                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16805  11EF  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16806  11F0  3A02               	xorlw	2
 16807  11F1  1D03               	skipz
 16808  11F2  29F8               	goto	i1l799
 16809                           
 16810                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16811  11F3  3037               	movlw	_DimmerLights2& (0+255)
 16812  11F4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16813  11F5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16814  11F6  0021               	movlb	1	; select bank1
 16815  11F7  00E1               	movwf	_DimmerLightsIntrIOC^(0+128)
 16816  11F8                     i1l799:	
 16817                           
 16818                           ;Dimmer_B1.c: 17: }
 16819                           ;Dimmer_B1.c: 21: if (lights == 3) {
 16820  11F8  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16821  11F9  3A03               	xorlw	3
 16822  11FA  1D03               	skipz
 16823  11FB  0008               	return
 16824                           
 16825                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 16826  11FC  30C5               	movlw	_DimmerLights3& (0+255)
 16827  11FD  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16828  11FE  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16829  11FF  0021               	movlb	1	; select bank1
 16830  1200  00E1               	movwf	_DimmerLightsIntrIOC^(0+128)
 16831  1201  0008               	return
 16832  1202                     __end_of_DimmerIntrIOCPointSelect:	
 16833  007E                     btemp	set	126	;btemp
 16834  007E                     pic14e$flags	set	126
 16835  007E                     wtemp	set	126
 16836  007E                     wtemp0	set	126
 16837  0080                     wtemp1	set	128
 16838  0082                     wtemp2	set	130
 16839  0084                     wtemp3	set	132
 16840  0086                     wtemp4	set	134
 16841  0088                     wtemp5	set	136
 16842  007F                     wtemp6	set	127
 16843  007E                     ttemp	set	126
 16844  007E                     ttemp0	set	126
 16845  0081                     ttemp1	set	129
 16846  0084                     ttemp2	set	132
 16847  0087                     ttemp3	set	135
 16848  007F                     ttemp4	set	127
 16849  007E                     ltemp	set	126
 16850  007E                     ltemp0	set	126
 16851  0082                     ltemp1	set	130
 16852  0086                     ltemp2	set	134
 16853  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         234
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     75      78
    BANK1            80      0      79
    BANK2            80      0      78
    BANK3            80      4      74
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED3(BANK2[4]), VarLED2(BANK2[4]), 
		 -> VarLED1(BANK2[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK3[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw3(BANK2[5]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   88809
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    1806
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     186
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   23737
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   23737
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0   10238
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    9840
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1729
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     309
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     309
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     990
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     990
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   30604
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   30604
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   29630
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1589
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   28041
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   11753
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1498
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11580
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11363
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11270
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11146
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1145
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1145
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5928
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10672
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0   10505
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6736
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1654
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     959
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0     124
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     167
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0     124
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0     124
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10809
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10809
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     694
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6396
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5526
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2335
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     771
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1589
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0     124
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0     124
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     286
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     161      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     161      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 22 15:36:32 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 12BC  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006C       __end_of_getDimmerLights_StatusFlag 110E  
             _getDimmerLights_StatusFlag 10FA                   __end_of_setDelayOff_GO 0A76  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0E47  
                           ___ftadd@sign 0048                                      l110 17EC  
                                    l120 1736                                      l122 1746  
                                    l108 17D8                                      l118 174C  
                                    l119 1748                                      l304 0C63  
                                    l305 0CB2                                      l354 10F0  
                                    l355 10F1                                      l279 0980  
                                    l398 1349                                      l857 11D4  
                                    l858 11DC                                      _GIE 005F  
                                    _CRC 00DD                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0021  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 0079  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC6 0076  
                                    _RC7 0077                                      _RF1 00D3  
                                    _ISR 0004                                      _Sw1 0146  
                                    _Sw2 01D4                                      _Sw3 01DD  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 10FA  
                  _Buzzer_Initialization 1E7B                          __end_of_ADC_Set 1EAD  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0CB8  
                  _setDimmerLights_AdjRF 1321                    _setDimmerLights_AdjGo 1FF0  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F2E                             ___ftdiv@sign 003D  
                                   l2202 0897                                     l1420 148E  
                                   l2212 08E5                                     l1407 07FE  
                                   l2240 1270                                     l2217 14C4  
                                   l2162 0F83                 ?_DimmerLightsPointSelect 0070  
                                   l1429 1673                                     l2254 1522  
                                   l2239 1266                                     l2167 0F9F  
                                   l2169 0FD6                          __end_of_IOC_Set 1F3B  
                                   l2197 10D8                                     l2605 1F93  
                                   l1591 15F2                                     l1576 1592  
                                   l2637 0241                                     l2663 0DF4  
                                   l2687 09E3                                     l8011 177D  
                                   l2971 0931                                     l5603 03CA  
                                   l8021 1798                                     l2965 091A  
                                   l5533 08F7                                     l5621 0410  
                                   l5605 03D4                                     l5543 091F  
                                   l5535 0901                                     l5615 03F0  
                                   l5607 03D9                                     l8025 17A0  
                                   l8017 178F                                     l8009 1771  
                                   l5545 0927                                     l5537 0906  
                                   l5529 08F0                                     l8201 0B8F  
                                   l5625 0422                                     l5617 03FA  
                                   l5609 03DD                                     l5721 0661  
                                   l5705 063D                                     l2994 03FE  
                                   l5651 0765                                     l5635 043D  
                                   l5645 074F                                     l8213 0BAB  
                                   l8221 0BB7                                     l5717 0659  
                                   l5709 0645                                     l5575 0387  
                                   l8143 0A48                                     l5673 07BF  
                                   l5665 07A6                                     l5737 0D4F  
                                   l8217 0BB1                                     l8209 0BA5  
                                   l9121 1702                                     l9113 16F4  
                                   l5585 039D                                     l8153 0A67  
                                   l5771 0DB4                                     l5763 0D9A  
                                   l5755 0D7F                                     l8171 0B61  
                                   l5579 038E                                     l8147 0A4E  
                                   l5765 0DA3                                     l5757 0D8D  
                                   l8077 0AD2                                     l9045 0E5E  
                                   l9117 16FB                                     l5597 03B7  
                                   l5693 0602                                     l8237 14D4  
                                   l8149 0A5B                                     l5767 0DA6  
                                   l8175 0B67                                     l8183 0B73  
                                   l8319 0D0A                                     l9071 0E83  
                                   l9047 0E61                                     l8511 0986  
                                   l5687 05EC                                     l8343 0F2C  
                                   l8193 0B83                                     l9081 0EA7  
                                   l9057 0E6F                                     l8521 0996  
                                   l8513 0989                                     l8329 0EF2  
                                   l9401 030C                                     l8603 135A  
                                   l8611 12A3                                     l8179 0B6D  
                                   l9091 0ECF                                     l9059 0E72  
                                   l8507 0969                                     l8339 0F16  
                                   l9307 0FDE                                     l9251 0F93  
                                   l9331 1F98                                     l8381 118E  
                                   l8605 1365                                     l8613 12A6  
                                   l8197 0B89                                     l8189 0B7D  
                                   l9069 0E7E                                     l9173 163E  
                                   l8285 115B                                     l8541 0C42  
                                   l8525 099C                                     l8517 098F  
                                   l9317 0FEE                                     l9229 0F76  
                                   l8375 1185                                     l9079 0EA1  
                                   l8287 115F                                     l8391 1308  
                                   l8519 0993                                     l8367 1510  
                                   l7903 10B7                                     l8471 0726  
                                   l8463 0714                                     l8455 0702  
                                   l9335 1F9E                                     l9351 0235  
                                   l8377 1188                                     l8617 12AC  
                                   l7921 1216                                     l8393 130B  
                                   l8545 0C48                                     l8449 06E7  
                                   l9281 0FB7                                     l8801 0DE3  
                                   l9179 1653                                     l8539 0C3F  
                                   l8547 0C4B                                     l8475 072F  
                                   l8467 071D                                     l8459 070B  
                                   l8811 0DEF                                     l9347 0228  
                                   l9437 1720                                     l7917 120D  
                                   l8637 1107                                     l9509 04C7  
                                   l8397 1311                                     l8573 0C74  
                                   l8557 0C60                                     l8493 0958  
                                   l8741 0899                                     l9293 0FC7  
                                   l8901 0B2D                    _myMain_Initialization 1FA1  
                                   l8575 0C8B                                     l8559 0C5A  
                                   l8487 094F                                     l9279 0FB5  
                                   l8831 0E35                                     l9391 02DA  
                                   l9367 026F                                     l8921 1621  
                                   l7961 1375                                     l8649 154D  
                                   l8593 0CB4                                     l8489 0952  
                                   l7937 140B                                     l8753 08B0  
                                   l9377 029C                                     l8931 1631  
                                   l8915 1618                                     l8763 08D6  
                                   l9299 0FD2                                     l8925 1628  
                                   l8917 161B                                     l7877 12E8  
                                   l7981 1233                                     l7965 137E  
                                   l8861 09D2                                     l8927 162B  
                                   l8695 1476                                     l8871 09DE  
                                   l8847 09BE                                     l9583 15DB  
                                   l7993 175E                                     l7977 122A  
                                   l7969 1387                                     l8769 08DE  
                                   l8849 09C1                                     _CFGS 0CAE  
                                   l7899 10B1                                     l8859 09CF  
                                   l8787 0DCF                                     l8789 0DD2  
                                   l7999 1769                                     l8799 0DE0  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4105 03B8                                     u4135 03CB  
                                   u4305 07C0                                     u4165 03DE  
                                   u4415 0662                                     u4265 0777  
                                   u4425 0668                                     u4345 060E  
                                   u4275 0787                                     u4515 0D9B  
                                   u4195 03F1                                     u4355 061E  
                                   _PEIE 005E                                     u4285 07A7  
                                   u4295 07B6                                     u4455 0D56  
                                   u4375 0646                                     u4385 064C  
                                   u3915 08FC                                     u8005 177E  
                                   u4485 0D80                                     u8015 1788  
                                   u3935 0915                                     u8025 1790  
                                   u3955 0922                                     u3985 0938  
                                   u8090 0A80                                     u8095 0A7E  
                                   u8395 111D                                     u8835 134F  
                                   u7875 13F7                                     u7985 1774  
                                   _LWLO 0CAD                                     _RFSW 00E2  
                                   _TMR0 0015                                     _RSSI 00E3  
                                   _WREN 0CAA                                     _Buz1 00C7  
                                   _main 1574                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0C3B                          __end_of_RF_Main 1E84  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                                     ltemp 007E  
          __size_of_setRF_Initialization 000D                         _setDimmerReClock 1ED9  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1537                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1FF0            __end_of_DimmerIntrPointSelect 11B0  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                                  ?_main 01E6                          __end_of___awdiv 17A7  
                        __end_of___ftadd 0455                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 07E1                                    u10315 07F5  
                        __end_of___ftmul 0689                                    u10335 15C3  
                                  u10345 15EA                                    u10195 1716  
                        ___awdiv@divisor 0020                          __end_of___fttol 0DBD  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l810 119F                                    i1l811 11A7  
                                  i1l798 11EF                                    i1l799 11F8  
                 _setDimmerLights_Switch 1FB0                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EC  
                                  _RFSW2 00ED                                    _RFSW3 00EE  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1123                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1466               _setDimmerLights_IntrIOC_GO 1438  
                       __end_of_TMR0_ISR 1438             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 1EB5                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 108C                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                     _Sw_DimmerOnFunc$5205 0063  
                   _Sw_DimmerOnFunc$5206 0064                     _Sw_DimmerOnFunc$5207 0065  
                     _setRF_DimmerLights 0A76              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 000C  
                           ?_my_MainTime 0070                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 082D  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 15B2  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E94  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D36                     _setSw_Initialization 1EB5  
                                 ??_main 006B                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0689  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 001D  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03D8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 11E5  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008F                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 005E  
                            _DlyOff_Main 0BC1                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                       __end_of___awtoft 12FF                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0948                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1FC0                                   i1l7011 0175  
                                 i1l7003 0154                                   i1l7021 01A6  
                                 i1l7025 01AC                                   i1l7009 016F  
                                 i1l7043 01DD                                   i1l7051 01E9  
                                 i1l7029 01B2                                   i1l7047 01E3  
                                 i1l6539 1460                                   i1l6955 0097  
                                 i1l6963 00A4                                   i1l6981 00EE  
                                 i1l6983 00F4                                   i1l6959 009D  
                                 i1l6995 0129                                   i1l6987 0107  
                                 i1l6989 010D                                   i1l6999 0140  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u632_25 0072                                   _OSCCON 0099  
                                 u745_25 1431                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1165  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E94  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1138  
                                 _Dimmer 0077                                   _DlySw1 014F  
                                 _DlySw2 0154                                   _DlySw3 0159  
             __end_of_Mcu_Initialization 1F92                      __end_of_Buzzer_Main 1753  
                                 _Memory 01A0                                   _Timer0 0120  
     __end_of_setDimmerLights_TriggerAdj 107B               _setDimmerLights_TriggerAdj 106B  
                                 ___bmul 10AE            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 001D                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00E7                                   _s_data 00E8  
                                 _setLED 0B51                                   _myMain 00B5  
              _setDimmerLights_Main$2071 0066                _setDimmerLights_Main$2072 0067  
              _setDimmerLights_Main$2073 0068                         _DimmerLightsIntr 0078  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 17A7  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 020F              _setDimmerLights_IntrControl 0044  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 123C  
                          ?_setRF_Enable 0070                          _RfSWPointSelect 125B  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0074  
            __size_of_DimmerLights_Close 0013                  __size_of_LedPointSelect 0026  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1F92                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0888         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0040              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 127B                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1FD0                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 106B  
               __end_of_setDimmerReClock 1EE5                       __size_of_getRxData 005F  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00DE  
                         _DimmerLights22 00DF                           _DimmerLights33 00E0  
                   __size_of_setLED_Main 0048                ??_setDimmerLights_Trigger 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006B                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1709  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1EF1                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006B  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 000C  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 1574                      _CC2500_WriteCommand 117D  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 001B  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0042  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0075  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00B9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0028                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1EA6  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020             __end_of_setRF_Initialization 1F48  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 14FC  
                __end_of_RfSWPointSelect 127B                        Sw_DimmerOnFunc@sw 0067  
                                _IOC_ISR 1F21                                  _IOC_Set 1F2E  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 07E1                        _Flash_Memory_Read 11B0  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 007D  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 00A0                                  _RF_Main 1E81  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
        __end_of_setControl_Lights_Table 0738                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0DBD  
                        _setPercentValue 167B                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E9  
           __end_of_CC2500_FrequencyCabr 1EF1                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 109D                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0162  
                                _VarLED2 0166                                  _VarLED3 016A  
                      __end_of_getRxData 08E7                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1202          __end_of_setDimmerLights_Trigger 1FD0  
                   ??_setRFSW_AdjControl 0064                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1FC0                                  ___awdiv 1753  
                                ___ftadd 035F                           ??_setSw_Enable 0022  
                                ___ftdiv 0738                                  ___ftmul 05D5  
                                ___fttol 0D36                      __end_of_Switch_Main 1F21  
                ??_Buzzer_Initialization 0020                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0070  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 15B2  
                                __ptext2 1390                                  __ptext3 1F48  
                                __ptext4 1FA1                                  __ptext5 1F15  
                                __ptext6 020F                                  __ptext7 1EBD  
                                __ptext8 0DBD                                  __ptext9 0AE2  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1196                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 0800                __end_of_Flash_Memory_Read 11CA  
                             _setRF_Main 0F64                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1EFD                        _DimmerLights_Main 1F74  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1ED9               __end_of_CC2500_ClearRXFIFO 1E88  
             __end_of_CC2500_ClearTXFIFO 1E8C            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006D                           _LedPointSelect 136A  
                    _DelayOffPointSelect 1202                                  clrloop0 1EA1  
         __size_of_Switch_Initialization 0011            __end_of_Switch_Initialization 10AE  
                   end_of_initialization 0040                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 13B9                            _DelayTime_1us 1344  
                      __end_of_setTxData 05D5               __end_of_Flash_Memory_Write 1495  
                                init_ram 1E9A                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 006B                     Flash_Memory_Read@ret 0023  
                                initloop 1E9B                               _setSw_Main 020F  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 12FF  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 107B  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0C3B                            _CC2500_TxData 0948  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1F56  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1637  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1EC5  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1F83                       _Mcu_Initialization 1F83  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1390                  __end_of_Sw_DimmerOnFunc 0E47  
                __end_of_setPercentValue 16C1                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 13E3                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1537  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1321  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 117D                     _setRF_Initialization 1F3B  
                            _Switch_Main 1F15                        __size_of_LED_Main 0010  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 11CA                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1123                     ??_Mcu_Initialization 0020  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 10C0                __size_of_Sw_DimmerAdjFunc 0064  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 11E5  
                      __size_of_TMR0_ISR 002B                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 114E  
          __size_of_setDimmerLights_Main 008E                           __end_of_setLED 0BC1  
                         __end_of_setBuz 1800          _getDimmerLights_StatusFlag$2076 0022  
                   _CC2500_FrequencyCabr 1EE5                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0ED5  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 14C7                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 10D3                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 125B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 13B9  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1066  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015E                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1F74                       Sw_DimmerAdjFunc@sw 0029  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0070                                _Rx_Length 00E4  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00E5                              __pdataBANK4 0220  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1E8C  
             __size_of_DimmerLights_Main 000F                __end_of_setRF_DimmerValue 14FC  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4370 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                          __pcstackBANK3 01E6                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007E  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 007A               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 0128                            _DimmerLights2 0137  
                          _DimmerLights3 01C5                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 0010  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 009C  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                              _getBuz_GO 108C      __end_of_Flash_Memory_Initialization 051C  
            _Flash_Memory_Initialization 0455                                 ?___awdiv 0020  
                              __ptext100 1066                                __ptext101 110E  
                              __ptext110 1ED9                                __ptext102 10E6  
                              __ptext111 1438                                __ptext103 1709  
                              __ptext112 11E5                                __ptext104 1E7B  
                              __ptext106 140D                                __ptext107 0044  
                              __ptext108 1196                                __ptext109 1F21  
                               ?___ftadd 003E                                _getRxData 0888  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 0F64  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1E7E                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1FA1                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0150  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1344  
          __end_of_setDimmerLights_AdjGo 2000                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00E6           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1FB0  
                           _setRF_Enable 1F48                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 121F                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1709                      _DimmerLightsIntrIOC 00E1  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1FE0                          SwPointSelect@sw 0021  
                              clear_ram0 1EA0                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 051C      __end_of_DimmerLights_Initialization 12DD  
            _DimmerLights_Initialization 12BC                       _CC2500_ClearRXFIFO 1E84  
                     _CC2500_ClearTXFIFO 1E88           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1EC5                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1466  
                             ?_getRxData 0070                                 _TMR0_ISR 140D  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1EAD                         _Sw_DimmerAdjFunc 09AC  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 15F4        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00DB                     __end_of_RF_RxDisable 10E6  
            __end_of_CC2500_WriteCommand 1196                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0AE2                    _Sw_DimmerAdjFunc$5215 0025  
                  _Sw_DimmerAdjFunc$5216 0026                    _Sw_DimmerAdjFunc$5217 0027  
                __size_of_setDelayOff_GO 0066                    __size_of_setSw_Enable 0029  
                               _DelayOff 0076                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1F15                           ?_SwPointSelect 0070  
                         setLED_Main@led 0024                      __end_of_setLog_Code 14C7  
                  _DlyOff_Initialization 1ECE                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1E90                    _Switch_Initialization 109D  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1F56                             _setMemory_GO 1138  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 10E6             Flash_Memory_Initialization@i 005E  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1390  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 12DD                         ??_LedPointSelect 0020  
                               ___ftpack 08E7                             _setSw_Status 1F65  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 16C1                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0AE2                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                                 __ptext10 09AC  
                               __ptext11 106B                                 __ptext20 0689  
                               __ptext12 1FF0                                 __ptext21 0ED5  
                               __ptext13 109D                                 __ptext30 035F  
                               __ptext22 0A10                                 __ptext14 1EB5  
                               __ptext31 108C                                 __ptext23 13E3  
                               __ptext15 1F92                                 __ptext40 1EAD  
                               __ptext32 10D3                                 __ptext24 10AE  
                               __ptext16 1E81                                 __ptext41 1165  
                               __ptext33 0948                                 __ptext25 14FC  
                               __ptext17 0F64                                 __ptext50 1637  
                               __ptext42 1F2E                                 __ptext34 0C3B  
                               __ptext26 14C7                                 __ptext18 0888  
                               __ptext51 1F09                                 __ptext43 1E90  
                               __ptext35 12FF                                 __ptext27 1321  
                               __ptext19 1495                                 __ptext60 0B51  
                               __ptext52 0455                                 __ptext44 1EA6  
                               __ptext36 114E                                 __ptext28 082D  
                               __ptext61 136A                                 __ptext53 1466  
                               __ptext45 1FE0                                 __ptext37 1E7E  
                               __ptext29 05D5                                 __ptext70 051C  
                               __ptext62 10C0                                 __ptext54 1EC5  
                               __ptext46 16C1                                 __ptext38 1F3B  
                               __ptext71 1F65                                 __ptext63 1138  
                               __ptext55 11B0                                 __ptext47 1FD0  
                               __ptext39 1F83                                 __ptext80 125B  
                               __ptext72 121F                                 __ptext64 10FA  
                               __ptext56 1F74                                 __ptext48 107B  
                               __ptext81 1FC0                                 __ptext73 0A76  
                               __ptext65 12BC                                 __ptext57 0E47  
                               __ptext49 07E1                                 __ptext90 1E8C  
                               __ptext82 1FB0                                 __ptext74 167B  
                               __ptext66 0800                                 __ptext58 1537  
                               __ptext91 15F4                                 __ptext83 11CA  
                               __ptext75 0D36                                 __ptext67 1E94  
                               __ptext59 0CB8                                 __ptext92 13B9  
                               __ptext84 17A7                                 __ptext76 0738  
                               __ptext68 1EFD                                 __ptext93 123C  
                               __ptext85 1753                                 __ptext77 12DD  
                               __ptext69 0BC1                                 __ptext94 129B  
                               __ptext86 1EF1                                 __ptext78 08E7  
                               __ptext95 1EE5                                 __ptext87 1ECE  
                               __ptext79 1F56                                 __ptext96 1344  
                               __ptext88 1202                                 __ptext97 1E88  
                               __ptext89 1123                                 __ptext98 1E84  
                               __ptext99 117D                                 __product 0220  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0020           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1F65            __end_of_Dimmer_Initialization 1E9A  
           __end_of_setDimmerLights_Main 0ED5                             ??_setSw_Main 0068  
                          setLED@command 0022                            __size_of_main 003E  
                            _setRF_Learn 1EBD                 __end_of_CC2500_SIDLEMode 1E90  
             setDimmerLights_Main@lights 006A              __end_of_DelayOffPointSelect 121F  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 10C0  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000C  
                        _CC2500_ReadByte 114E                              _my_MainTime 15B2  
                     _CC2500_InitPATable 123C      __size_of_getDimmerLights_StatusFlag 0014  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 1000  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 000F  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 01E6                                 main@argv 01E8  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 15F4  
            __end_of_Flash_Memory_Modify 167B                        ??_getPercentValue 0059  
                            _setLog_Code 1495              __end_of_Flash_Memory_Unlock 1ECE  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 129B  
                     __end_of_setSw_Main 035F                            _Transceive_OK 03D9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 13E3  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 082D  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 0800              __end_of_setDimmerLights_Adj 1574  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0013                        _RF_Initialization 1E7E  
   __size_of_setDimmerLights_IntrControl 01CB                     _Flash_Memory_Erasing 1F09  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007A  
        __end_of_DelayOff_Initialization 1EFD      __size_of_setDimmerLights_IntrIOC_GO 002E  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 1F09  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 0A10  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 140D  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 136A  
               __end_of_Sw_DimmerAdjFunc 0A10                  __end_of_CC2500_ReadByte 1165  
           __end_of_setSw_Initialization 1EBD                          _Timeout_Counter 110E  
                   getPercentValue@value 005B                             _RF_RxDisable 10D3  
             __end_of_LED_Initialization 1FE0         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 008A                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1E81  
               __end_of_Sw_DimmerOffFunc 0B51          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0CB8  
                  __end_of_CC2500_TxData 09AC                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1637  
