

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Oct 24 14:33:00 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	dabs	1,0x7E,2
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0090                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  0116                     	;# 
   183  0117                     	;# 
   184  011D                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  018E                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0197                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020D                     	;# 
   209  0210                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0291                     	;# 
   226  0291                     	;# 
   227  0292                     	;# 
   228  0293                     	;# 
   229  0298                     	;# 
   230  0298                     	;# 
   231  0299                     	;# 
   232  029A                     	;# 
   233  0394                     	;# 
   234  0395                     	;# 
   235  0396                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEB                     	;# 
   244  0FED                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000D                     	;# 
   261  000E                     	;# 
   262  0010                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  0116                     	;# 
   294  0117                     	;# 
   295  011D                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  018E                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0197                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020D                     	;# 
   320  0210                     	;# 
   321  0211                     	;# 
   322  0211                     	;# 
   323  0212                     	;# 
   324  0212                     	;# 
   325  0213                     	;# 
   326  0213                     	;# 
   327  0214                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0291                     	;# 
   337  0291                     	;# 
   338  0292                     	;# 
   339  0293                     	;# 
   340  0298                     	;# 
   341  0298                     	;# 
   342  0299                     	;# 
   343  029A                     	;# 
   344  0394                     	;# 
   345  0395                     	;# 
   346  0396                     	;# 
   347  0FE4                     	;# 
   348  0FE5                     	;# 
   349  0FE6                     	;# 
   350  0FE7                     	;# 
   351  0FE8                     	;# 
   352  0FE9                     	;# 
   353  0FEA                     	;# 
   354  0FEB                     	;# 
   355  0FED                     	;# 
   356  0FEE                     	;# 
   357  0FEF                     	;# 
   358  0000                     	;# 
   359  0001                     	;# 
   360  0002                     	;# 
   361  0003                     	;# 
   362  0004                     	;# 
   363  0005                     	;# 
   364  0006                     	;# 
   365  0007                     	;# 
   366  0008                     	;# 
   367  0009                     	;# 
   368  000A                     	;# 
   369  000B                     	;# 
   370  000C                     	;# 
   371  000D                     	;# 
   372  000E                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  0090                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  010C                     	;# 
   402  010D                     	;# 
   403  010E                     	;# 
   404  0116                     	;# 
   405  0117                     	;# 
   406  011D                     	;# 
   407  018C                     	;# 
   408  018D                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0194                     	;# 
   416  0195                     	;# 
   417  0196                     	;# 
   418  0197                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020D                     	;# 
   431  0210                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0298                     	;# 
   452  0298                     	;# 
   453  0299                     	;# 
   454  029A                     	;# 
   455  0394                     	;# 
   456  0395                     	;# 
   457  0396                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0010                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  0090                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  010C                     	;# 
   513  010D                     	;# 
   514  010E                     	;# 
   515  0116                     	;# 
   516  0117                     	;# 
   517  011D                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520  018E                     	;# 
   521  0191                     	;# 
   522  0191                     	;# 
   523  0192                     	;# 
   524  0193                     	;# 
   525  0193                     	;# 
   526  0194                     	;# 
   527  0195                     	;# 
   528  0196                     	;# 
   529  0197                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019C                     	;# 
   537  019C                     	;# 
   538  019D                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  020D                     	;# 
   542  0210                     	;# 
   543  0211                     	;# 
   544  0211                     	;# 
   545  0212                     	;# 
   546  0212                     	;# 
   547  0213                     	;# 
   548  0213                     	;# 
   549  0214                     	;# 
   550  0214                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0215                     	;# 
   554  0216                     	;# 
   555  0216                     	;# 
   556  0217                     	;# 
   557  0217                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  0394                     	;# 
   567  0395                     	;# 
   568  0396                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  008E                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  011D                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  018E                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0194                     	;# 
   638  0195                     	;# 
   639  0196                     	;# 
   640  0197                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  0394                     	;# 
   678  0395                     	;# 
   679  0396                     	;# 
   680  0FE4                     	;# 
   681  0FE5                     	;# 
   682  0FE6                     	;# 
   683  0FE7                     	;# 
   684  0FE8                     	;# 
   685  0FE9                     	;# 
   686  0FEA                     	;# 
   687  0FEB                     	;# 
   688  0FED                     	;# 
   689  0FEE                     	;# 
   690  0FEF                     	;# 
   691  0000                     	;# 
   692  0001                     	;# 
   693  0002                     	;# 
   694  0003                     	;# 
   695  0004                     	;# 
   696  0005                     	;# 
   697  0006                     	;# 
   698  0007                     	;# 
   699  0008                     	;# 
   700  0009                     	;# 
   701  000A                     	;# 
   702  000B                     	;# 
   703  000C                     	;# 
   704  000D                     	;# 
   705  000E                     	;# 
   706  0010                     	;# 
   707  0011                     	;# 
   708  0012                     	;# 
   709  0015                     	;# 
   710  0016                     	;# 
   711  0016                     	;# 
   712  0017                     	;# 
   713  0018                     	;# 
   714  0019                     	;# 
   715  001A                     	;# 
   716  001B                     	;# 
   717  001C                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  008E                     	;# 
   721  0090                     	;# 
   722  0091                     	;# 
   723  0092                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0099                     	;# 
   728  009A                     	;# 
   729  009B                     	;# 
   730  009B                     	;# 
   731  009C                     	;# 
   732  009D                     	;# 
   733  009E                     	;# 
   734  010C                     	;# 
   735  010D                     	;# 
   736  010E                     	;# 
   737  0116                     	;# 
   738  0117                     	;# 
   739  011D                     	;# 
   740  018C                     	;# 
   741  018D                     	;# 
   742  018E                     	;# 
   743  0191                     	;# 
   744  0191                     	;# 
   745  0192                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0194                     	;# 
   749  0195                     	;# 
   750  0196                     	;# 
   751  0197                     	;# 
   752  0199                     	;# 
   753  019A                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019C                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020D                     	;# 
   764  0210                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0298                     	;# 
   785  0298                     	;# 
   786  0299                     	;# 
   787  029A                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0FE4                     	;# 
   792  0FE5                     	;# 
   793  0FE6                     	;# 
   794  0FE7                     	;# 
   795  0FE8                     	;# 
   796  0FE9                     	;# 
   797  0FEA                     	;# 
   798  0FEB                     	;# 
   799  0FED                     	;# 
   800  0FEE                     	;# 
   801  0FEF                     	;# 
   802  0000                     	;# 
   803  0001                     	;# 
   804  0002                     	;# 
   805  0003                     	;# 
   806  0004                     	;# 
   807  0005                     	;# 
   808  0006                     	;# 
   809  0007                     	;# 
   810  0008                     	;# 
   811  0009                     	;# 
   812  000A                     	;# 
   813  000B                     	;# 
   814  000C                     	;# 
   815  000D                     	;# 
   816  000E                     	;# 
   817  0010                     	;# 
   818  0011                     	;# 
   819  0012                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  008C                     	;# 
   830  008D                     	;# 
   831  008E                     	;# 
   832  0090                     	;# 
   833  0091                     	;# 
   834  0092                     	;# 
   835  0095                     	;# 
   836  0096                     	;# 
   837  0097                     	;# 
   838  0099                     	;# 
   839  009A                     	;# 
   840  009B                     	;# 
   841  009B                     	;# 
   842  009C                     	;# 
   843  009D                     	;# 
   844  009E                     	;# 
   845  010C                     	;# 
   846  010D                     	;# 
   847  010E                     	;# 
   848  0116                     	;# 
   849  0117                     	;# 
   850  011D                     	;# 
   851  018C                     	;# 
   852  018D                     	;# 
   853  018E                     	;# 
   854  0191                     	;# 
   855  0191                     	;# 
   856  0192                     	;# 
   857  0193                     	;# 
   858  0193                     	;# 
   859  0194                     	;# 
   860  0195                     	;# 
   861  0196                     	;# 
   862  0197                     	;# 
   863  0199                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019C                     	;# 
   870  019C                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  020D                     	;# 
   875  0210                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0291                     	;# 
   892  0291                     	;# 
   893  0292                     	;# 
   894  0293                     	;# 
   895  0298                     	;# 
   896  0298                     	;# 
   897  0299                     	;# 
   898  029A                     	;# 
   899  0394                     	;# 
   900  0395                     	;# 
   901  0396                     	;# 
   902  0FE4                     	;# 
   903  0FE5                     	;# 
   904  0FE6                     	;# 
   905  0FE7                     	;# 
   906  0FE8                     	;# 
   907  0FE9                     	;# 
   908  0FEA                     	;# 
   909  0FEB                     	;# 
   910  0FED                     	;# 
   911  0FEE                     	;# 
   912  0FEF                     	;# 
   913  0000                     	;# 
   914  0001                     	;# 
   915  0002                     	;# 
   916  0003                     	;# 
   917  0004                     	;# 
   918  0005                     	;# 
   919  0006                     	;# 
   920  0007                     	;# 
   921  0008                     	;# 
   922  0009                     	;# 
   923  000A                     	;# 
   924  000B                     	;# 
   925  000C                     	;# 
   926  000D                     	;# 
   927  000E                     	;# 
   928  0010                     	;# 
   929  0011                     	;# 
   930  0012                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008D                     	;# 
   942  008E                     	;# 
   943  0090                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0095                     	;# 
   947  0096                     	;# 
   948  0097                     	;# 
   949  0099                     	;# 
   950  009A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  010C                     	;# 
   957  010D                     	;# 
   958  010E                     	;# 
   959  0116                     	;# 
   960  0117                     	;# 
   961  011D                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  018E                     	;# 
   965  0191                     	;# 
   966  0191                     	;# 
   967  0192                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0194                     	;# 
   971  0195                     	;# 
   972  0196                     	;# 
   973  0197                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020D                     	;# 
   986  0210                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0291                     	;# 
  1003  0291                     	;# 
  1004  0292                     	;# 
  1005  0293                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  0394                     	;# 
  1011  0395                     	;# 
  1012  0396                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000D                     	;# 
  1038  000E                     	;# 
  1039  0010                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0015                     	;# 
  1043  0016                     	;# 
  1044  0016                     	;# 
  1045  0017                     	;# 
  1046  0018                     	;# 
  1047  0019                     	;# 
  1048  001A                     	;# 
  1049  001B                     	;# 
  1050  001C                     	;# 
  1051  008C                     	;# 
  1052  008D                     	;# 
  1053  008E                     	;# 
  1054  0090                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0099                     	;# 
  1061  009A                     	;# 
  1062  009B                     	;# 
  1063  009B                     	;# 
  1064  009C                     	;# 
  1065  009D                     	;# 
  1066  009E                     	;# 
  1067  010C                     	;# 
  1068  010D                     	;# 
  1069  010E                     	;# 
  1070  0116                     	;# 
  1071  0117                     	;# 
  1072  011D                     	;# 
  1073  018C                     	;# 
  1074  018D                     	;# 
  1075  018E                     	;# 
  1076  0191                     	;# 
  1077  0191                     	;# 
  1078  0192                     	;# 
  1079  0193                     	;# 
  1080  0193                     	;# 
  1081  0194                     	;# 
  1082  0195                     	;# 
  1083  0196                     	;# 
  1084  0197                     	;# 
  1085  0199                     	;# 
  1086  019A                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019C                     	;# 
  1092  019C                     	;# 
  1093  019D                     	;# 
  1094  019E                     	;# 
  1095  019F                     	;# 
  1096  020D                     	;# 
  1097  0210                     	;# 
  1098  0211                     	;# 
  1099  0211                     	;# 
  1100  0212                     	;# 
  1101  0212                     	;# 
  1102  0213                     	;# 
  1103  0213                     	;# 
  1104  0214                     	;# 
  1105  0214                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0215                     	;# 
  1109  0216                     	;# 
  1110  0216                     	;# 
  1111  0217                     	;# 
  1112  0217                     	;# 
  1113  0291                     	;# 
  1114  0291                     	;# 
  1115  0292                     	;# 
  1116  0293                     	;# 
  1117  0298                     	;# 
  1118  0298                     	;# 
  1119  0299                     	;# 
  1120  029A                     	;# 
  1121  0394                     	;# 
  1122  0395                     	;# 
  1123  0396                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEB                     	;# 
  1132  0FED                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  0010                     	;# 
  1151  0011                     	;# 
  1152  0012                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  008C                     	;# 
  1163  008D                     	;# 
  1164  008E                     	;# 
  1165  0090                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0095                     	;# 
  1169  0096                     	;# 
  1170  0097                     	;# 
  1171  0099                     	;# 
  1172  009A                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  010C                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  011D                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  0191                     	;# 
  1188  0191                     	;# 
  1189  0192                     	;# 
  1190  0193                     	;# 
  1191  0193                     	;# 
  1192  0194                     	;# 
  1193  0195                     	;# 
  1194  0196                     	;# 
  1195  0197                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  020D                     	;# 
  1208  0210                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0213                     	;# 
  1215  0214                     	;# 
  1216  0214                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0216                     	;# 
  1221  0216                     	;# 
  1222  0217                     	;# 
  1223  0217                     	;# 
  1224  0291                     	;# 
  1225  0291                     	;# 
  1226  0292                     	;# 
  1227  0293                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  0394                     	;# 
  1233  0395                     	;# 
  1234  0396                     	;# 
  1235  0FE4                     	;# 
  1236  0FE5                     	;# 
  1237  0FE6                     	;# 
  1238  0FE7                     	;# 
  1239  0FE8                     	;# 
  1240  0FE9                     	;# 
  1241  0FEA                     	;# 
  1242  0FEB                     	;# 
  1243  0FED                     	;# 
  1244  0FEE                     	;# 
  1245  0FEF                     	;# 
  1246  0000                     	;# 
  1247  0001                     	;# 
  1248  0002                     	;# 
  1249  0003                     	;# 
  1250  0004                     	;# 
  1251  0005                     	;# 
  1252  0006                     	;# 
  1253  0007                     	;# 
  1254  0008                     	;# 
  1255  0009                     	;# 
  1256  000A                     	;# 
  1257  000B                     	;# 
  1258  000C                     	;# 
  1259  000D                     	;# 
  1260  000E                     	;# 
  1261  0010                     	;# 
  1262  0011                     	;# 
  1263  0012                     	;# 
  1264  0015                     	;# 
  1265  0016                     	;# 
  1266  0016                     	;# 
  1267  0017                     	;# 
  1268  0018                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001B                     	;# 
  1272  001C                     	;# 
  1273  008C                     	;# 
  1274  008D                     	;# 
  1275  008E                     	;# 
  1276  0090                     	;# 
  1277  0091                     	;# 
  1278  0092                     	;# 
  1279  0095                     	;# 
  1280  0096                     	;# 
  1281  0097                     	;# 
  1282  0099                     	;# 
  1283  009A                     	;# 
  1284  009B                     	;# 
  1285  009B                     	;# 
  1286  009C                     	;# 
  1287  009D                     	;# 
  1288  009E                     	;# 
  1289  010C                     	;# 
  1290  010D                     	;# 
  1291  010E                     	;# 
  1292  0116                     	;# 
  1293  0117                     	;# 
  1294  011D                     	;# 
  1295  018C                     	;# 
  1296  018D                     	;# 
  1297  018E                     	;# 
  1298  0191                     	;# 
  1299  0191                     	;# 
  1300  0192                     	;# 
  1301  0193                     	;# 
  1302  0193                     	;# 
  1303  0194                     	;# 
  1304  0195                     	;# 
  1305  0196                     	;# 
  1306  0197                     	;# 
  1307  0199                     	;# 
  1308  019A                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019C                     	;# 
  1314  019C                     	;# 
  1315  019D                     	;# 
  1316  019E                     	;# 
  1317  019F                     	;# 
  1318  020D                     	;# 
  1319  0210                     	;# 
  1320  0211                     	;# 
  1321  0211                     	;# 
  1322  0212                     	;# 
  1323  0212                     	;# 
  1324  0213                     	;# 
  1325  0213                     	;# 
  1326  0214                     	;# 
  1327  0214                     	;# 
  1328  0215                     	;# 
  1329  0215                     	;# 
  1330  0215                     	;# 
  1331  0216                     	;# 
  1332  0216                     	;# 
  1333  0217                     	;# 
  1334  0217                     	;# 
  1335  0291                     	;# 
  1336  0291                     	;# 
  1337  0292                     	;# 
  1338  0293                     	;# 
  1339  0298                     	;# 
  1340  0298                     	;# 
  1341  0299                     	;# 
  1342  029A                     	;# 
  1343  0394                     	;# 
  1344  0395                     	;# 
  1345  0396                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEB                     	;# 
  1354  0FED                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000D                     	;# 
  1371  000E                     	;# 
  1372  0010                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0015                     	;# 
  1376  0016                     	;# 
  1377  0016                     	;# 
  1378  0017                     	;# 
  1379  0018                     	;# 
  1380  0019                     	;# 
  1381  001A                     	;# 
  1382  001B                     	;# 
  1383  001C                     	;# 
  1384  008C                     	;# 
  1385  008D                     	;# 
  1386  008E                     	;# 
  1387  0090                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0095                     	;# 
  1391  0096                     	;# 
  1392  0097                     	;# 
  1393  0099                     	;# 
  1394  009A                     	;# 
  1395  009B                     	;# 
  1396  009B                     	;# 
  1397  009C                     	;# 
  1398  009D                     	;# 
  1399  009E                     	;# 
  1400  010C                     	;# 
  1401  010D                     	;# 
  1402  010E                     	;# 
  1403  0116                     	;# 
  1404  0117                     	;# 
  1405  011D                     	;# 
  1406  018C                     	;# 
  1407  018D                     	;# 
  1408  018E                     	;# 
  1409  0191                     	;# 
  1410  0191                     	;# 
  1411  0192                     	;# 
  1412  0193                     	;# 
  1413  0193                     	;# 
  1414  0194                     	;# 
  1415  0195                     	;# 
  1416  0196                     	;# 
  1417  0197                     	;# 
  1418  0199                     	;# 
  1419  019A                     	;# 
  1420  019B                     	;# 
  1421  019B                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019C                     	;# 
  1425  019C                     	;# 
  1426  019D                     	;# 
  1427  019E                     	;# 
  1428  019F                     	;# 
  1429  020D                     	;# 
  1430  0210                     	;# 
  1431  0211                     	;# 
  1432  0211                     	;# 
  1433  0212                     	;# 
  1434  0212                     	;# 
  1435  0213                     	;# 
  1436  0213                     	;# 
  1437  0214                     	;# 
  1438  0214                     	;# 
  1439  0215                     	;# 
  1440  0215                     	;# 
  1441  0215                     	;# 
  1442  0216                     	;# 
  1443  0216                     	;# 
  1444  0217                     	;# 
  1445  0217                     	;# 
  1446  0291                     	;# 
  1447  0291                     	;# 
  1448  0292                     	;# 
  1449  0293                     	;# 
  1450  0298                     	;# 
  1451  0298                     	;# 
  1452  0299                     	;# 
  1453  029A                     	;# 
  1454  0394                     	;# 
  1455  0395                     	;# 
  1456  0396                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  008C                     	;# 
  1496  008D                     	;# 
  1497  008E                     	;# 
  1498  0090                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0095                     	;# 
  1502  0096                     	;# 
  1503  0097                     	;# 
  1504  0099                     	;# 
  1505  009A                     	;# 
  1506  009B                     	;# 
  1507  009B                     	;# 
  1508  009C                     	;# 
  1509  009D                     	;# 
  1510  009E                     	;# 
  1511  010C                     	;# 
  1512  010D                     	;# 
  1513  010E                     	;# 
  1514  0116                     	;# 
  1515  0117                     	;# 
  1516  011D                     	;# 
  1517  018C                     	;# 
  1518  018D                     	;# 
  1519  018E                     	;# 
  1520  0191                     	;# 
  1521  0191                     	;# 
  1522  0192                     	;# 
  1523  0193                     	;# 
  1524  0193                     	;# 
  1525  0194                     	;# 
  1526  0195                     	;# 
  1527  0196                     	;# 
  1528  0197                     	;# 
  1529  0199                     	;# 
  1530  019A                     	;# 
  1531  019B                     	;# 
  1532  019B                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019C                     	;# 
  1537  019D                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  020D                     	;# 
  1541  0210                     	;# 
  1542  0211                     	;# 
  1543  0211                     	;# 
  1544  0212                     	;# 
  1545  0212                     	;# 
  1546  0213                     	;# 
  1547  0213                     	;# 
  1548  0214                     	;# 
  1549  0214                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0215                     	;# 
  1553  0216                     	;# 
  1554  0216                     	;# 
  1555  0217                     	;# 
  1556  0217                     	;# 
  1557  0291                     	;# 
  1558  0291                     	;# 
  1559  0292                     	;# 
  1560  0293                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  0394                     	;# 
  1566  0395                     	;# 
  1567  0396                     	;# 
  1568  0FE4                     	;# 
  1569  0FE5                     	;# 
  1570  0FE6                     	;# 
  1571  0FE7                     	;# 
  1572  0FE8                     	;# 
  1573  0FE9                     	;# 
  1574  0FEA                     	;# 
  1575  0FEB                     	;# 
  1576  0FED                     	;# 
  1577  0FEE                     	;# 
  1578  0FEF                     	;# 
  1579  0000                     	;# 
  1580  0001                     	;# 
  1581  0002                     	;# 
  1582  0003                     	;# 
  1583  0004                     	;# 
  1584  0005                     	;# 
  1585  0006                     	;# 
  1586  0007                     	;# 
  1587  0008                     	;# 
  1588  0009                     	;# 
  1589  000A                     	;# 
  1590  000B                     	;# 
  1591  000C                     	;# 
  1592  000D                     	;# 
  1593  000E                     	;# 
  1594  0010                     	;# 
  1595  0011                     	;# 
  1596  0012                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  001A                     	;# 
  1604  001B                     	;# 
  1605  001C                     	;# 
  1606  008C                     	;# 
  1607  008D                     	;# 
  1608  008E                     	;# 
  1609  0090                     	;# 
  1610  0091                     	;# 
  1611  0092                     	;# 
  1612  0095                     	;# 
  1613  0096                     	;# 
  1614  0097                     	;# 
  1615  0099                     	;# 
  1616  009A                     	;# 
  1617  009B                     	;# 
  1618  009B                     	;# 
  1619  009C                     	;# 
  1620  009D                     	;# 
  1621  009E                     	;# 
  1622  010C                     	;# 
  1623  010D                     	;# 
  1624  010E                     	;# 
  1625  0116                     	;# 
  1626  0117                     	;# 
  1627  011D                     	;# 
  1628  018C                     	;# 
  1629  018D                     	;# 
  1630  018E                     	;# 
  1631  0191                     	;# 
  1632  0191                     	;# 
  1633  0192                     	;# 
  1634  0193                     	;# 
  1635  0193                     	;# 
  1636  0194                     	;# 
  1637  0195                     	;# 
  1638  0196                     	;# 
  1639  0197                     	;# 
  1640  0199                     	;# 
  1641  019A                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019C                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  020D                     	;# 
  1652  0210                     	;# 
  1653  0211                     	;# 
  1654  0211                     	;# 
  1655  0212                     	;# 
  1656  0212                     	;# 
  1657  0213                     	;# 
  1658  0213                     	;# 
  1659  0214                     	;# 
  1660  0214                     	;# 
  1661  0215                     	;# 
  1662  0215                     	;# 
  1663  0215                     	;# 
  1664  0216                     	;# 
  1665  0216                     	;# 
  1666  0217                     	;# 
  1667  0217                     	;# 
  1668  0291                     	;# 
  1669  0291                     	;# 
  1670  0292                     	;# 
  1671  0293                     	;# 
  1672  0298                     	;# 
  1673  0298                     	;# 
  1674  0299                     	;# 
  1675  029A                     	;# 
  1676  0394                     	;# 
  1677  0395                     	;# 
  1678  0396                     	;# 
  1679  0FE4                     	;# 
  1680  0FE5                     	;# 
  1681  0FE6                     	;# 
  1682  0FE7                     	;# 
  1683  0FE8                     	;# 
  1684  0FE9                     	;# 
  1685  0FEA                     	;# 
  1686  0FEB                     	;# 
  1687  0FED                     	;# 
  1688  0FEE                     	;# 
  1689  0FEF                     	;# 
  1690  0000                     	;# 
  1691  0001                     	;# 
  1692  0002                     	;# 
  1693  0003                     	;# 
  1694  0004                     	;# 
  1695  0005                     	;# 
  1696  0006                     	;# 
  1697  0007                     	;# 
  1698  0008                     	;# 
  1699  0009                     	;# 
  1700  000A                     	;# 
  1701  000B                     	;# 
  1702  000C                     	;# 
  1703  000D                     	;# 
  1704  000E                     	;# 
  1705  0010                     	;# 
  1706  0011                     	;# 
  1707  0012                     	;# 
  1708  0015                     	;# 
  1709  0016                     	;# 
  1710  0016                     	;# 
  1711  0017                     	;# 
  1712  0018                     	;# 
  1713  0019                     	;# 
  1714  001A                     	;# 
  1715  001B                     	;# 
  1716  001C                     	;# 
  1717  008C                     	;# 
  1718  008D                     	;# 
  1719  008E                     	;# 
  1720  0090                     	;# 
  1721  0091                     	;# 
  1722  0092                     	;# 
  1723  0095                     	;# 
  1724  0096                     	;# 
  1725  0097                     	;# 
  1726  0099                     	;# 
  1727  009A                     	;# 
  1728  009B                     	;# 
  1729  009B                     	;# 
  1730  009C                     	;# 
  1731  009D                     	;# 
  1732  009E                     	;# 
  1733  010C                     	;# 
  1734  010D                     	;# 
  1735  010E                     	;# 
  1736  0116                     	;# 
  1737  0117                     	;# 
  1738  011D                     	;# 
  1739  018C                     	;# 
  1740  018D                     	;# 
  1741  018E                     	;# 
  1742  0191                     	;# 
  1743  0191                     	;# 
  1744  0192                     	;# 
  1745  0193                     	;# 
  1746  0193                     	;# 
  1747  0194                     	;# 
  1748  0195                     	;# 
  1749  0196                     	;# 
  1750  0197                     	;# 
  1751  0199                     	;# 
  1752  019A                     	;# 
  1753  019B                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  019C                     	;# 
  1759  019D                     	;# 
  1760  019E                     	;# 
  1761  019F                     	;# 
  1762  020D                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0216                     	;# 
  1776  0216                     	;# 
  1777  0217                     	;# 
  1778  0217                     	;# 
  1779  0291                     	;# 
  1780  0291                     	;# 
  1781  0292                     	;# 
  1782  0293                     	;# 
  1783  0298                     	;# 
  1784  0298                     	;# 
  1785  0299                     	;# 
  1786  029A                     	;# 
  1787  0394                     	;# 
  1788  0395                     	;# 
  1789  0396                     	;# 
  1790  0FE4                     	;# 
  1791  0FE5                     	;# 
  1792  0FE6                     	;# 
  1793  0FE7                     	;# 
  1794  0FE8                     	;# 
  1795  0FE9                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000D                     	;# 
  1815  000E                     	;# 
  1816  0010                     	;# 
  1817  0011                     	;# 
  1818  0012                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  008C                     	;# 
  1829  008D                     	;# 
  1830  008E                     	;# 
  1831  0090                     	;# 
  1832  0091                     	;# 
  1833  0092                     	;# 
  1834  0095                     	;# 
  1835  0096                     	;# 
  1836  0097                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  010C                     	;# 
  1845  010D                     	;# 
  1846  010E                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  011D                     	;# 
  1850  018C                     	;# 
  1851  018D                     	;# 
  1852  018E                     	;# 
  1853  0191                     	;# 
  1854  0191                     	;# 
  1855  0192                     	;# 
  1856  0193                     	;# 
  1857  0193                     	;# 
  1858  0194                     	;# 
  1859  0195                     	;# 
  1860  0196                     	;# 
  1861  0197                     	;# 
  1862  0199                     	;# 
  1863  019A                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019C                     	;# 
  1869  019C                     	;# 
  1870  019D                     	;# 
  1871  019E                     	;# 
  1872  019F                     	;# 
  1873  020D                     	;# 
  1874  0210                     	;# 
  1875  0211                     	;# 
  1876  0211                     	;# 
  1877  0212                     	;# 
  1878  0212                     	;# 
  1879  0213                     	;# 
  1880  0213                     	;# 
  1881  0214                     	;# 
  1882  0214                     	;# 
  1883  0215                     	;# 
  1884  0215                     	;# 
  1885  0215                     	;# 
  1886  0216                     	;# 
  1887  0216                     	;# 
  1888  0217                     	;# 
  1889  0217                     	;# 
  1890  0291                     	;# 
  1891  0291                     	;# 
  1892  0292                     	;# 
  1893  0293                     	;# 
  1894  0298                     	;# 
  1895  0298                     	;# 
  1896  0299                     	;# 
  1897  029A                     	;# 
  1898  0394                     	;# 
  1899  0395                     	;# 
  1900  0396                     	;# 
  1901  0FE4                     	;# 
  1902  0FE5                     	;# 
  1903  0FE6                     	;# 
  1904  0FE7                     	;# 
  1905  0FE8                     	;# 
  1906  0FE9                     	;# 
  1907  0FEA                     	;# 
  1908  0FEB                     	;# 
  1909  0FED                     	;# 
  1910  0FEE                     	;# 
  1911  0FEF                     	;# 
  1912  0000                     	;# 
  1913  0001                     	;# 
  1914  0002                     	;# 
  1915  0003                     	;# 
  1916  0004                     	;# 
  1917  0005                     	;# 
  1918  0006                     	;# 
  1919  0007                     	;# 
  1920  0008                     	;# 
  1921  0009                     	;# 
  1922  000A                     	;# 
  1923  000B                     	;# 
  1924  000C                     	;# 
  1925  000D                     	;# 
  1926  000E                     	;# 
  1927  0010                     	;# 
  1928  0011                     	;# 
  1929  0012                     	;# 
  1930  0015                     	;# 
  1931  0016                     	;# 
  1932  0016                     	;# 
  1933  0017                     	;# 
  1934  0018                     	;# 
  1935  0019                     	;# 
  1936  001A                     	;# 
  1937  001B                     	;# 
  1938  001C                     	;# 
  1939  008C                     	;# 
  1940  008D                     	;# 
  1941  008E                     	;# 
  1942  0090                     	;# 
  1943  0091                     	;# 
  1944  0092                     	;# 
  1945  0095                     	;# 
  1946  0096                     	;# 
  1947  0097                     	;# 
  1948  0099                     	;# 
  1949  009A                     	;# 
  1950  009B                     	;# 
  1951  009B                     	;# 
  1952  009C                     	;# 
  1953  009D                     	;# 
  1954  009E                     	;# 
  1955  010C                     	;# 
  1956  010D                     	;# 
  1957  010E                     	;# 
  1958  0116                     	;# 
  1959  0117                     	;# 
  1960  011D                     	;# 
  1961  018C                     	;# 
  1962  018D                     	;# 
  1963  018E                     	;# 
  1964  0191                     	;# 
  1965  0191                     	;# 
  1966  0192                     	;# 
  1967  0193                     	;# 
  1968  0193                     	;# 
  1969  0194                     	;# 
  1970  0195                     	;# 
  1971  0196                     	;# 
  1972  0197                     	;# 
  1973  0199                     	;# 
  1974  019A                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019E                     	;# 
  1983  019F                     	;# 
  1984  020D                     	;# 
  1985  0210                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0291                     	;# 
  2002  0291                     	;# 
  2003  0292                     	;# 
  2004  0293                     	;# 
  2005  0298                     	;# 
  2006  0298                     	;# 
  2007  0299                     	;# 
  2008  029A                     	;# 
  2009  0394                     	;# 
  2010  0395                     	;# 
  2011  0396                     	;# 
  2012  0FE4                     	;# 
  2013  0FE5                     	;# 
  2014  0FE6                     	;# 
  2015  0FE7                     	;# 
  2016  0FE8                     	;# 
  2017  0FE9                     	;# 
  2018  0FEA                     	;# 
  2019  0FEB                     	;# 
  2020  0FED                     	;# 
  2021  0FEE                     	;# 
  2022  0FEF                     	;# 
  2023                           
  2024                           	psect	idataBANK4
  2025  126A                     __pidataBANK4:	
  2026                           
  2027                           ;initializer for __product
  2028  126A  3463               	retlw	99
  2029  126B  3402               	retlw	2
  2030  126C  3400               	retlw	0
  2031  126D  3400               	retlw	0
  2032  126E  3400               	retlw	0
  2033  126F  3400               	retlw	0
  2034  1270  3400               	retlw	0
  2035  1271  3400               	retlw	0
  2036  1272  3400               	retlw	0
  2037  1273  3400               	retlw	0
  2038  1274  3400               	retlw	0
  2039  1275  3400               	retlw	0
  2040  1276  34FF               	retlw	255
  2041  1277  34FF               	retlw	255
  2042  1278  34FF               	retlw	255
  2043  1279  3400               	retlw	0
  2044  127A  3400               	retlw	0
  2045  127B  3400               	retlw	0
  2046  127C  3400               	retlw	0
  2047  127D  3400               	retlw	0
  2048  127E  3400               	retlw	0
  2049  127F  3400               	retlw	0
  2050  1280  3400               	retlw	0
  2051  1281  3400               	retlw	0
  2052  1282  3400               	retlw	0
  2053  1283  3400               	retlw	0
  2054  1284  3400               	retlw	0
  2055  1285  3400               	retlw	0
  2056  1286  3400               	retlw	0
  2057  1287  3400               	retlw	0
  2058  1288  3400               	retlw	0
  2059  1289  3400               	retlw	0
  2060                           
  2061                           	psect	stringtext
  2062  1000                     __pstringtext:	
  2063  1000                     _CC2500_registers_address:	
  2064  1000  3403               	retlw	3
  2065  1001  3416               	retlw	22
  2066  1002  3417               	retlw	23
  2067  1003  341E               	retlw	30
  2068  1004  341F               	retlw	31
  2069  1005  3420               	retlw	32
  2070  1006  342A               	retlw	42
  2071  1007  342B               	retlw	43
  2072  1008  340B               	retlw	11
  2073  1009  340C               	retlw	12
  2074  100A  340D               	retlw	13
  2075  100B  340E               	retlw	14
  2076  100C  340F               	retlw	15
  2077  100D  3410               	retlw	16
  2078  100E  3411               	retlw	17
  2079  100F  3412               	retlw	18
  2080  1010  3413               	retlw	19
  2081  1011  3414               	retlw	20
  2082  1012  340A               	retlw	10
  2083  1013  3415               	retlw	21
  2084  1014  3421               	retlw	33
  2085  1015  3422               	retlw	34
  2086  1016  3418               	retlw	24
  2087  1017  3419               	retlw	25
  2088  1018  341A               	retlw	26
  2089  1019  341B               	retlw	27
  2090  101A  341C               	retlw	28
  2091  101B  341D               	retlw	29
  2092  101C  3423               	retlw	35
  2093  101D  3424               	retlw	36
  2094  101E  3425               	retlw	37
  2095  101F  3426               	retlw	38
  2096  1020  3429               	retlw	41
  2097  1021  342C               	retlw	44
  2098  1022  342D               	retlw	45
  2099  1023  342E               	retlw	46
  2100  1024  3400               	retlw	0
  2101  1025  3401               	retlw	1
  2102  1026  3402               	retlw	2
  2103  1027  3407               	retlw	7
  2104  1028  3408               	retlw	8
  2105  1029  3409               	retlw	9
  2106  102A  3406               	retlw	6
  2107  102B  3404               	retlw	4
  2108  102C  3405               	retlw	5
  2109  102D  3427               	retlw	39
  2110  102E  3428               	retlw	40
  2111  102F                     __end_of_CC2500_registers_address:	
  2112  102F                     _CC2500_rfSettings:	
  2113  102F  3407               	retlw	7
  2114  1030  3407               	retlw	7
  2115  1031  3430               	retlw	48
  2116  1032  3487               	retlw	135
  2117  1033  346B               	retlw	107
  2118  1034  34F8               	retlw	248
  2119  1035  347F               	retlw	127
  2120  1036  343F               	retlw	63
  2121  1037  3409               	retlw	9
  2122  1038  3400               	retlw	0
  2123  1039  345C               	retlw	92
  2124  103A  34A7               	retlw	167
  2125  103B  3462               	retlw	98
  2126  103C  3486               	retlw	134
  2127  103D  3483               	retlw	131
  2128  103E  3403               	retlw	3
  2129  103F  3422               	retlw	34
  2130  1040  34F8               	retlw	248
  2131  1041  3400               	retlw	0
  2132  1042  3444               	retlw	68
  2133  1043  34B6               	retlw	182
  2134  1044  3410               	retlw	16
  2135  1045  3418               	retlw	24
  2136  1046  341D               	retlw	29
  2137  1047  341C               	retlw	28
  2138  1048  34C7               	retlw	199
  2139  1049  3400               	retlw	0
  2140  104A  34B2               	retlw	178
  2141  104B  34EA               	retlw	234
  2142  104C  340A               	retlw	10
  2143  104D  3400               	retlw	0
  2144  104E  3411               	retlw	17
  2145  104F  3459               	retlw	89
  2146  1050  3488               	retlw	136
  2147  1051  3431               	retlw	49
  2148  1052  340B               	retlw	11
  2149  1053  342F               	retlw	47
  2150  1054  342E               	retlw	46
  2151  1055  3406               	retlw	6
  2152  1056  3404               	retlw	4
  2153  1057  3405               	retlw	5
  2154  1058  3400               	retlw	0
  2155  1059  3430               	retlw	48
  2156  105A  34D3               	retlw	211
  2157  105B  3491               	retlw	145
  2158  105C  3441               	retlw	65
  2159  105D  3400               	retlw	0
  2160  105E                     __end_of_CC2500_rfSettings:	
  2161  105E                     _CC2500_patable_vaule:	
  2162  105E  34FE               	retlw	254
  2163  105F  34FE               	retlw	254
  2164  1060  34FE               	retlw	254
  2165  1061  34FE               	retlw	254
  2166  1062  34FE               	retlw	254
  2167  1063  34FE               	retlw	254
  2168  1064  34FE               	retlw	254
  2169  1065  34FE               	retlw	254
  2170  1066                     __end_of_CC2500_patable_vaule:	
  2171                           
  2172                           	psect	nvBANK0
  2173  006D                     __pnvBANK0:	
  2174  006D                     _product:	
  2175  006D                     	ds	1
  2176  000C                     _PORTA	set	12
  2177  000D                     _PORTB	set	13
  2178  000E                     _PORTC	set	14
  2179  0015                     _TMR0	set	21
  2180  005F                     _GIE	set	95
  2181  005B                     _IOCIE	set	91
  2182  0058                     _IOCIF	set	88
  2183  005E                     _PEIE	set	94
  2184  0060                     _RA0	set	96
  2185  0063                     _RA3	set	99
  2186  0064                     _RA4	set	100
  2187  0066                     _RA6	set	102
  2188  0067                     _RA7	set	103
  2189  0068                     _RB0	set	104
  2190  0069                     _RB1	set	105
  2191  006A                     _RB2	set	106
  2192  006B                     _RB3	set	107
  2193  006C                     _RB4	set	108
  2194  006D                     _RB5	set	109
  2195  0070                     _RC0	set	112
  2196  0071                     _RC1	set	113
  2197  0072                     _RC2	set	114
  2198  0074                     _RC4	set	116
  2199  0075                     _RC5	set	117
  2200  0076                     _RC6	set	118
  2201  0077                     _RC7	set	119
  2202  005D                     _TMR0IE	set	93
  2203  005A                     _TMR0IF	set	90
  2204  009D                     _ADCON0	set	157
  2205  009E                     _ADCON1	set	158
  2206  009C                     _ADRESH	set	156
  2207  009B                     _ADRESL	set	155
  2208  0095                     _OPTION_REG	set	149
  2209  0099                     _OSCCON	set	153
  2210  008C                     _TRISA	set	140
  2211  008D                     _TRISB	set	141
  2212  008E                     _TRISC	set	142
  2213  0097                     _WDTCON	set	151
  2214  04E9                     _GO_nDONE	set	1257
  2215  0117                     _FVRCON	set	279
  2216  010C                     _LATA	set	268
  2217  010D                     _LATB	set	269
  2218  010E                     _LATC	set	270
  2219  018C                     _ANSELA	set	396
  2220  018D                     _ANSELB	set	397
  2221  018E                     _ANSELC	set	398
  2222  0192                     _PMADRH	set	402
  2223  0191                     _PMADRL	set	401
  2224  0196                     _PMCON2	set	406
  2225  0194                     _PMDATH	set	404
  2226  0193                     _PMDATL	set	403
  2227  0CAE                     _CFGS	set	3246
  2228  0CAC                     _FREE	set	3244
  2229  0CAD                     _LWLO	set	3245
  2230  0CA8                     _RD	set	3240
  2231  0CA9                     _WR	set	3241
  2232  0CAA                     _WREN	set	3242
  2233  1069                     _WPUB1	set	4201
  2234  106A                     _WPUB2	set	4202
  2235  0396                     _IOCBF	set	918
  2236  0395                     _IOCBN	set	917
  2237  0394                     _IOCBP	set	916
  2238  1CB2                     _IOCBF2	set	7346
  2239                           
  2240                           ; #config settings
  2241  0000                     
  2242                           	psect	cinit
  2243  0015                     start_initialization:	
  2244  0015                     __initialization:	
  2245                           
  2246                           ; Clear objects allocated to BITCOMMON
  2247  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2248                           
  2249                           ; Clear objects allocated to COMMON
  2250  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2251  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2252  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2253  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2254  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2255  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2256                           
  2257                           ; Clear objects allocated to BANK0
  2258  001C  01EB               	clrf	__pbssBANK0& (0+127)
  2259  001D  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2260                           
  2261                           ; Clear objects allocated to BANK1
  2262  001E  30A0               	movlw	low __pbssBANK1
  2263  001F  0084               	movwf	4
  2264  0020  3000               	movlw	high __pbssBANK1
  2265  0021  0085               	movwf	5
  2266  0022  3050               	movlw	80
  2267  0023  319E  267F  3180   	fcall	clear_ram0
  2268                           
  2269                           ; Clear objects allocated to BANK2
  2270  0026  3020               	movlw	low __pbssBANK2
  2271  0027  0084               	movwf	4
  2272  0028  3001               	movlw	high __pbssBANK2
  2273  0029  0085               	movwf	5
  2274  002A  304E               	movlw	78
  2275  002B  319E  267F  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK3
  2278  002E  30A0               	movlw	low __pbssBANK3
  2279  002F  0084               	movwf	4
  2280  0030  3001               	movlw	high __pbssBANK3
  2281  0031  0085               	movwf	5
  2282  0032  3040               	movlw	64
  2283  0033  319E  267F  3180   	fcall	clear_ram0
  2284                           
  2285                           ; Initialize objects allocated to BANK4
  2286  0036  306A               	movlw	low __pidataBANK4
  2287  0037  0084               	movwf	4
  2288  0038  3092               	movlw	(high __pidataBANK4)| (0+128)
  2289  0039  0085               	movwf	5
  2290  003A  3020               	movlw	low __pdataBANK4
  2291  003B  0086               	movwf	6
  2292  003C  3002               	movlw	high __pdataBANK4
  2293  003D  0087               	movwf	7
  2294  003E  3020               	movlw	32
  2295  003F  319E  2679         	fcall	init_ram
  2296  0041                     end_of_initialization:	
  2297                           ;End of C runtime variable initialization code
  2298                           
  2299  0041                     __end_of__initialization:	
  2300  0041  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2301  0042  0020               	movlb	0
  2302  0043  3195  2D6E         	ljmp	_main	;jump to C main() function
  2303                           
  2304                           	psect	bitbssCOMMON
  2305  03E0                     __pbitbssCOMMON:	
  2306  03E0                     _Receive_OK:	
  2307  03E0                     	ds	1
  2308  03E1                     _Transceive_OK:	
  2309  03E1                     	ds	1
  2310                           
  2311                           	psect	bssCOMMON
  2312  0070                     __pbssCOMMON:	
  2313  0070                     _LED:	
  2314  0070                     	ds	2
  2315  0072                     _DelayOff:	
  2316  0072                     	ds	1
  2317  0073                     _Dimmer:	
  2318  0073                     	ds	1
  2319  0074                     _DimmerLightsIntr:	
  2320  0074                     	ds	1
  2321  0075                     _SPI0Buffer:	
  2322  0075                     	ds	1
  2323                           
  2324                           	psect	bssBANK0
  2325  006B                     __pbssBANK0:	
  2326  006B                     _DimmerLights:	
  2327  006B                     	ds	1
  2328  006C                     _Sw:	
  2329  006C                     	ds	1
  2330                           
  2331                           	psect	bssBANK1
  2332  00A0                     __pbssBANK1:	
  2333  00A0                     _myMain:	
  2334  00A0                     	ds	18
  2335  00B2                     _Buz1:	
  2336  00B2                     	ds	12
  2337  00BE                     _RF1:	
  2338  00BE                     	ds	10
  2339  00C8                     _RF_Count:	
  2340  00C8                     	ds	2
  2341  00CA                     _WDT:	
  2342  00CA                     	ds	2
  2343  00CC                     _CRC:	
  2344  00CC                     	ds	1
  2345  00CD                     _DimmerLights11:	
  2346  00CD                     	ds	1
  2347  00CE                     _DimmerLights22:	
  2348  00CE                     	ds	1
  2349  00CF                     _DimmerLights33:	
  2350  00CF                     	ds	1
  2351  00D0                     _DimmerLightsIntrIOC:	
  2352  00D0                     	ds	1
  2353  00D1                     _RFSW:	
  2354  00D1                     	ds	1
  2355  00D2                     _RSSI:	
  2356  00D2                     	ds	1
  2357  00D3                     _Rx_Length:	
  2358  00D3                     	ds	1
  2359  00D4                     _Tx_Length:	
  2360  00D4                     	ds	1
  2361  00D5                     _r_address:	
  2362  00D5                     	ds	1
  2363  00D6                     _r_data:	
  2364  00D6                     	ds	1
  2365  00D7                     _s_data:	
  2366  00D7                     	ds	1
  2367  00D8                     _VarErrLED:	
  2368  00D8                     	ds	4
  2369  00DC                     _VarLED1:	
  2370  00DC                     	ds	4
  2371  00E0                     _VarLED2:	
  2372  00E0                     	ds	4
  2373  00E4                     _Dimmer1:	
  2374  00E4                     	ds	3
  2375  00E7                     _DlySw1:	
  2376  00E7                     	ds	2
  2377  00E9                     _DlySw2:	
  2378  00E9                     	ds	2
  2379  00EB                     _DlySw3:	
  2380  00EB                     	ds	2
  2381  00ED                     _RFSW1:	
  2382  00ED                     	ds	1
  2383  00EE                     _RFSW2:	
  2384  00EE                     	ds	1
  2385  00EF                     _RFSW3:	
  2386  00EF                     	ds	1
  2387                           
  2388                           	psect	bssBANK2
  2389  0120                     __pbssBANK2:	
  2390  0120                     _RF_Data:	
  2391  0120                     	ds	21
  2392  0135                     _Timer0:	
  2393  0135                     	ds	8
  2394  013D                     _DimmerLights1:	
  2395  013D                     	ds	15
  2396  014C                     _DimmerLights2:	
  2397  014C                     	ds	15
  2398  015B                     _DimmerLights3:	
  2399  015B                     	ds	15
  2400  016A                     _VarLED3:	
  2401  016A                     	ds	4
  2402                           
  2403                           	psect	bssBANK3
  2404  01A0                     __pbssBANK3:	
  2405  01A0                     _Memory:	
  2406  01A0                     	ds	37
  2407  01C5                     _Sw1:	
  2408  01C5                     	ds	9
  2409  01CE                     _Sw2:	
  2410  01CE                     	ds	9
  2411  01D7                     _Sw3:	
  2412  01D7                     	ds	9
  2413                           
  2414                           	psect	dataBANK4
  2415  0220                     __pdataBANK4:	
  2416  0220                     __product:	
  2417  0220                     	ds	32
  2418                           
  2419                           	psect	clrtext
  2420  1E7F                     clear_ram0:	
  2421                           ;	Called with FSR0 containing the base address, and
  2422                           ;	WREG with the size to clear
  2423                           
  2424  1E7F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2425  1E80                     clrloop0:	
  2426  1E80  0180               	clrf	0	;clear RAM location pointed to by FSR
  2427  1E81  3101               	addfsr 0,1
  2428  1E82  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2429  1E83  2E80               	goto	clrloop0	;have we reached the end yet?
  2430  1E84  3400               	retlw	0	;all done for this memory range, return
  2431                           
  2432                           	psect	inittext
  2433  1E79                     init_ram:	
  2434  1E79  00FE               	movwf	126
  2435  1E7A                     initloop:	
  2436  1E7A  0012               	moviw fsr0++
  2437  1E7B  001E               	movwi fsr1++
  2438  1E7C  0BFE               	decfsz	126,f
  2439  1E7D  2E7A               	goto	initloop
  2440  1E7E  3400               	retlw	0
  2441                           
  2442                           	psect	cstackBANK3
  2443  01E0                     __pcstackBANK3:	
  2444  01E0                     ?_main:	
  2445  01E0                     main@argc:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448                           
  2449                           ; 2 bytes @ 0x0
  2450  01E0                     	ds	2
  2451  01E2                     main@argv:	
  2452                           
  2453                           ; 2 bytes @ 0x2
  2454  01E2                     	ds	2
  2455                           
  2456                           	psect	cstackCOMMON
  2457  0076                     __pcstackCOMMON:	
  2458  0076                     ?_Timeout_Counter:	
  2459  0076                     ?_set_TimeoutCleared:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0076                     ?_CC2500_WriteByte:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0076                     ?_CC2500_WriteCommand:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0076                     ?_CC2500_ReadStatus:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0076                     ?_CC2500_ReadByte:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0076                     ?_CC2500_PowerRST:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0076                     ?_CC2500_InitSetREG:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0076                     ?_CC2500_InitPATable:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0076                     ?_CC2500_ClearTXFIFO:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0076                     ?_CC2500_ClearRXFIFO:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0076                     ?_CC2500_FrequencyCabr:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0076                     ?_CC2500_SIDLEMode:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0076                     ?_DlyOff_Initialization:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0076                     ?_DlyOff_Main:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0076                     ?_setTxData:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0076                     ?_setDimmerLights_Initialization:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0076                     ?_Dimmer_Initialization:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0076                     ?_setMemory_GO:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0076                     ?_setDimmerLights_Main:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0076                     ?_setLED_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0076                     ?_setLED_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0076                     ?_Fosc_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0076                     ?_IO_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0076                     ?_TMR0_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0076                     ?_ADC_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0076                     ?_IOC_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0076                     ?_WDT_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0076                     ?_IOC_ISR:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0076                     ?_TMR0_ISR:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0076                     ?_Flash_Memory_Write:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0076                     ?_Flash_Memory_Modify:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0076                     ?_WDT_Clearing:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0076                     ?_myMain_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0076                     ?_Switch_Initialization:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0076                     ?_RF_Initialization:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0076                     ?_my_MainTime:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0076                     ?_Switch_Main:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0076                     ?_RF_Main:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0076                     ?_setSw_Enable:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0076                     ?_setRF_Enable:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0076                     ?_setRF_Initialization:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0076                     ?_setRF_Main:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0076                     ?_getRxData:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0076                     ?_setLog_Code:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0076                     ?_setControl_Lights_Table:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0076                     ?_setRFSW_Control:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0076                     ?_setRFSW_AdjControl:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0076                     ?_setRF_DimmerValue:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0076                     ?_setSw_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0076                     ?_setSw_Main:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0076                     ?_Sw_DimmerOnFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0076                     ?_Sw_DimmerAdjFunc:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0076                     ?_Sw_DimmerOffFunc:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0076                     ?_Buzzer_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0076                     ?_Buzzer_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0076                     ?_CC2500_TxData:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0076                     ?_CC2500_RxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0076                     ?_CC2500_PowerOnInitial:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0076                     ?_DelayOffPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0076                     ?_DelayOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0076                     ?_DelayOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0076                     ?_DimmerIntrIOCPointSelect:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0076                     ??_DimmerIntrIOCPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0076                     ?_DimmerIntrPointSelect:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0076                     ??_DimmerIntrPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0076                     ?_setDimmerLights_IntrControl:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0076                     ?_DimmerLightsPointSelect:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0076                     ?_DimmerLights_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0076                     ?_DimmerLights_Close:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0076                     ?_DimmerLights_Main:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0076                     ?_setDimmerLights_AdjRF:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0076                     ?_LedPointSelect:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0076                     ?_LED_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0076                     ?_LED_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0076                     ?_Mcu_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0076                     ?_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0076                     ?_setDimmerReClock:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0076                     ?_Flash_Memory_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0076                     ?_Flash_Memory_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0076                     ?_Flash_Memory_Unlock:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0076                     ?_Flash_Memory_Erasing:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0076                     ?_WDT_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0076                     ?_setRF_Learn:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0076                     ?_RfSWPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0076                     ?_TouchPower:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0076                     ?_SwPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0076                     ?_DelayTimejudge:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0076                     ?_getDimmerLights_StatusFlag:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0076                     ?_getPercentValue:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0076                     ?_Flash_Memory_Read:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0076                     ?_setPercentValue:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735                           
  2736                           ; 1 bytes @ 0x0
  2737  0076                     	ds	1
  2738  0077                     DimmerIntrIOCPointSelect@lights:	
  2739  0077                     DimmerIntrPointSelect@lights:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742                           
  2743                           ; 1 bytes @ 0x1
  2744  0077                     	ds	1
  2745  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2746  0078                     ??_setDimmerLights_IntrControl:	
  2747                           ; 0 bytes @ 0x2
  2748                           
  2749  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2750                           ; 0 bytes @ 0x2
  2751                           
  2752                           
  2753                           ; 1 bytes @ 0x2
  2754  0078                     	ds	1
  2755  0079                     ??_IOC_ISR:	
  2756  0079                     ??_setDimmerReClock:	
  2757                           ; 0 bytes @ 0x3
  2758                           
  2759                           
  2760                           ; 0 bytes @ 0x3
  2761  0079                     	ds	1
  2762  007A                     setDimmerLights_IntrControl@lights:	
  2763                           
  2764                           ; 1 bytes @ 0x4
  2765  007A                     	ds	1
  2766  007B                     ??_TMR0_ISR:	
  2767  007B                     ??_ISR:	
  2768                           ; 0 bytes @ 0x5
  2769                           
  2770                           
  2771                           ; 0 bytes @ 0x5
  2772  007B                     	ds	1
  2773                           
  2774                           	psect	cstackBANK0
  2775  0020                     __pcstackBANK0:	
  2776  0020                     ??_Timeout_Counter:	
  2777  0020                     ??_set_TimeoutCleared:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0020                     ??_CC2500_WriteByte:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0020                     ??_CC2500_ReadByte:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ?_DelayTime_1us:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_setTxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_Dimmer_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_getDimmerLights_StatusFlag:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_setMemory_GO:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_Fosc_Set:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_IO_Set:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_TMR0_Set:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_ADC_Set:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_IOC_Set:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_WDT_Set:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_Flash_Memory_Read:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_Flash_Memory_Write:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_WDT_Clearing:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_myMain_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_setRF_Enable:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_setRF_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_Buzzer_Initialization:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_Buzzer_Main:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_DelayOffPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_DimmerLightsPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_LedPointSelect:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_Flash_Memory_Unlock:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_Flash_Memory_Erasing:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_WDT_Main:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_setRF_Learn:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_RfSWPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_TouchPower:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_SwPointSelect:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ?___bmul:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ?_getBuz_GO:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0020                     ?___awdiv:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882  0020                     ?___ftpack:	
  2883                           ; 2 bytes @ 0x0
  2884                           
  2885  0020                     LedPointSelect@led:	
  2886                           ; 3 bytes @ 0x0
  2887                           
  2888  0020                     setRF_Learn@command:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0020                     setRF_Enable@command:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0020                     ___bmul@multiplicand:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0020                     DelayTime_1us@count:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0020                     ___awdiv@divisor:	
  2901                           ; 2 bytes @ 0x0
  2902                           
  2903  0020                     ___ftpack@arg:	
  2904                           ; 2 bytes @ 0x0
  2905                           
  2906                           
  2907                           ; 3 bytes @ 0x0
  2908  0020                     	ds	1
  2909  0021                     ?_setLED:	
  2910  0021                     ??_setLED_Main:	
  2911                           ; 0 bytes @ 0x1
  2912                           
  2913  0021                     ??_RF_Initialization:	
  2914                           ; 0 bytes @ 0x1
  2915                           
  2916  0021                     ??_Mcu_Initialization:	
  2917                           ; 0 bytes @ 0x1
  2918                           
  2919  0021                     ??___bmul:	
  2920                           ; 0 bytes @ 0x1
  2921                           
  2922  0021                     CC2500_WriteByte@loop_a:	
  2923                           ; 0 bytes @ 0x1
  2924                           
  2925  0021                     CC2500_ReadByte@loop_b:	
  2926                           ; 1 bytes @ 0x1
  2927                           
  2928  0021                     DelayOffPointSelect@sw:	
  2929                           ; 1 bytes @ 0x1
  2930                           
  2931  0021                     DimmerLightsPointSelect@lights:	
  2932                           ; 1 bytes @ 0x1
  2933                           
  2934  0021                     getDimmerLights_StatusFlag@Status:	
  2935                           ; 1 bytes @ 0x1
  2936                           
  2937  0021                     setLED@command:	
  2938                           ; 1 bytes @ 0x1
  2939                           
  2940  0021                     Flash_Memory_Read@i:	
  2941                           ; 1 bytes @ 0x1
  2942                           
  2943  0021                     Flash_Memory_Write@i:	
  2944                           ; 1 bytes @ 0x1
  2945                           
  2946  0021                     RfSWPointSelect@sw:	
  2947                           ; 1 bytes @ 0x1
  2948                           
  2949  0021                     SwPointSelect@sw:	
  2950                           ; 1 bytes @ 0x1
  2951                           
  2952                           
  2953                           ; 1 bytes @ 0x1
  2954  0021                     	ds	1
  2955  0022                     ??_CC2500_WriteCommand:	
  2956  0022                     ??_CC2500_ReadStatus:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0022                     ??_DelayTime_1us:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0022                     ?_CC2500_WriteREG:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ??_DlyOff_Initialization:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ?_setSw_Status:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     ?_setRFSW_Status:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     ?_setDimmerLights_Trigger:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0022                     ?_setDimmerLights_Switch:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0022                     ??_setDimmerLights_Initialization:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0022                     ??_setLED:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0022                     ??_setSw_Enable:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0022                     ??_getBuz_GO:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0022                     ?_setDimmerLights_AdjGo:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0022                     ?_setDimmerLights_TriggerAdj:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0022                     CC2500_WriteREG@value:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0022                     DlyOff_Initialization@sw:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004  0022                     _getDimmerLights_StatusFlag$2453:	
  3005                           ; 1 bytes @ 0x2
  3006                           
  3007  0022                     setDimmerLights_Switch@command:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     setDimmerLights_AdjGo@command:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     setDimmerLights_Trigger@command:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     setDimmerLights_TriggerAdj@command:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     setLED@led:	
  3020                           ; 1 bytes @ 0x2
  3021                           
  3022  0022                     Flash_Memory_Read@address:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0022                     setMemory_GO@command:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0022                     setRFSW_Status@command:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0022                     setSw_Enable@command:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0022                     setSw_Status@command:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0022                     ___bmul@product:	
  3038                           ; 1 bytes @ 0x2
  3039                           
  3040  0022                     DelayTime_1us@i:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043  0022                     ___awdiv@dividend:	
  3044                           ; 2 bytes @ 0x2
  3045                           
  3046                           
  3047                           ; 2 bytes @ 0x2
  3048  0022                     	ds	1
  3049  0023                     ??_CC2500_WriteREG:	
  3050  0023                     ??_setSw_Status:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0023                     ??_setRFSW_Status:	
  3054                           ; 0 bytes @ 0x3
  3055                           
  3056  0023                     ??_setDimmerLights_Trigger:	
  3057                           ; 0 bytes @ 0x3
  3058                           
  3059  0023                     ??_setDimmerLights_Switch:	
  3060                           ; 0 bytes @ 0x3
  3061                           
  3062  0023                     ?_setDimmerLights:	
  3063                           ; 0 bytes @ 0x3
  3064                           
  3065  0023                     ??_setLED_Initialization:	
  3066                           ; 0 bytes @ 0x3
  3067                           
  3068  0023                     ??_setSw_Initialization:	
  3069                           ; 0 bytes @ 0x3
  3070                           
  3071  0023                     ??_DelayOff_Initialization:	
  3072                           ; 0 bytes @ 0x3
  3073                           
  3074  0023                     ??_DimmerLights_Close:	
  3075                           ; 0 bytes @ 0x3
  3076                           
  3077  0023                     ??_setDimmerLights_AdjGo:	
  3078                           ; 0 bytes @ 0x3
  3079                           
  3080  0023                     ??_setDimmerLights_TriggerAdj:	
  3081                           ; 0 bytes @ 0x3
  3082                           
  3083  0023                     CC2500_WriteCommand@command:	
  3084                           ; 0 bytes @ 0x3
  3085                           
  3086  0023                     CC2500_ReadStatus@status_addr:	
  3087                           ; 1 bytes @ 0x3
  3088                           
  3089  0023                     setDimmerLights_Initialization@lights:	
  3090                           ; 1 bytes @ 0x3
  3091                           
  3092  0023                     setDimmerLights@status:	
  3093                           ; 1 bytes @ 0x3
  3094                           
  3095  0023                     setDimmerLights_Switch@lights:	
  3096                           ; 1 bytes @ 0x3
  3097                           
  3098  0023                     setDimmerLights_AdjGo@lights:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101  0023                     setDimmerLights_Trigger@lights:	
  3102                           ; 1 bytes @ 0x3
  3103                           
  3104  0023                     setDimmerLights_TriggerAdj@lights:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107  0023                     setLED_Initialization@led:	
  3108                           ; 1 bytes @ 0x3
  3109                           
  3110  0023                     setLED_Main@led:	
  3111                           ; 1 bytes @ 0x3
  3112                           
  3113  0023                     Flash_Memory_Read@ret:	
  3114                           ; 1 bytes @ 0x3
  3115                           
  3116  0023                     setRFSW_Status@sw:	
  3117                           ; 1 bytes @ 0x3
  3118                           
  3119  0023                     setSw_Initialization@sw:	
  3120                           ; 1 bytes @ 0x3
  3121                           
  3122  0023                     setSw_Status@sw:	
  3123                           ; 1 bytes @ 0x3
  3124                           
  3125  0023                     ___bmul@multiplier:	
  3126                           ; 1 bytes @ 0x3
  3127                           
  3128  0023                     ___ftpack@exp:	
  3129                           ; 1 bytes @ 0x3
  3130                           
  3131                           
  3132                           ; 1 bytes @ 0x3
  3133  0023                     	ds	1
  3134  0024                     ??_CC2500_ClearTXFIFO:	
  3135  0024                     ??_CC2500_ClearRXFIFO:	
  3136                           ; 0 bytes @ 0x4
  3137                           
  3138  0024                     ??_CC2500_SIDLEMode:	
  3139                           ; 0 bytes @ 0x4
  3140                           
  3141  0024                     ??_DelayTimejudge:	
  3142                           ; 0 bytes @ 0x4
  3143                           
  3144  0024                     ??_setDimmerLights:	
  3145                           ; 0 bytes @ 0x4
  3146                           
  3147  0024                     ??_Flash_Memory_Modify:	
  3148                           ; 0 bytes @ 0x4
  3149                           
  3150  0024                     ??_Switch_Initialization:	
  3151                           ; 0 bytes @ 0x4
  3152                           
  3153  0024                     ??_Sw_DimmerAdjFunc:	
  3154                           ; 0 bytes @ 0x4
  3155                           
  3156  0024                     ??_CC2500_TxData:	
  3157                           ; 0 bytes @ 0x4
  3158                           
  3159  0024                     ??_CC2500_RxData:	
  3160                           ; 0 bytes @ 0x4
  3161                           
  3162  0024                     ??_DimmerLights_Initialization:	
  3163                           ; 0 bytes @ 0x4
  3164                           
  3165  0024                     ??_LED_Initialization:	
  3166                           ; 0 bytes @ 0x4
  3167                           
  3168  0024                     ??_LED_Main:	
  3169                           ; 0 bytes @ 0x4
  3170                           
  3171  0024                     ??___awdiv:	
  3172                           ; 0 bytes @ 0x4
  3173                           
  3174  0024                     CC2500_WriteREG@w_addr:	
  3175                           ; 0 bytes @ 0x4
  3176                           
  3177  0024                     ___ftpack@sign:	
  3178                           ; 1 bytes @ 0x4
  3179                           
  3180  0024                     getBuz_GO@i:	
  3181                           ; 1 bytes @ 0x4
  3182                           
  3183  0024                     DelayTime_1us@j:	
  3184                           ; 2 bytes @ 0x4
  3185                           
  3186                           
  3187                           ; 2 bytes @ 0x4
  3188  0024                     	ds	1
  3189  0025                     ??_CC2500_InitSetREG:	
  3190  0025                     ??_CC2500_InitPATable:	
  3191                           ; 0 bytes @ 0x5
  3192                           
  3193  0025                     ??___ftpack:	
  3194                           ; 0 bytes @ 0x5
  3195                           
  3196  0025                     CC2500_TxData@loop_e:	
  3197                           ; 0 bytes @ 0x5
  3198                           
  3199  0025                     CC2500_RxData@loop_f:	
  3200                           ; 1 bytes @ 0x5
  3201                           
  3202  0025                     setDimmerLights@lights:	
  3203                           ; 1 bytes @ 0x5
  3204                           
  3205  0025                     Flash_Memory_Modify@i:	
  3206                           ; 1 bytes @ 0x5
  3207                           
  3208  0025                     _Sw_DimmerAdjFunc$6132:	
  3209                           ; 1 bytes @ 0x5
  3210                           
  3211  0025                     ___awdiv@counter:	
  3212                           ; 1 bytes @ 0x5
  3213                           
  3214                           
  3215                           ; 1 bytes @ 0x5
  3216  0025                     	ds	1
  3217  0026                     ??_CC2500_PowerRST:	
  3218  0026                     ??_CC2500_FrequencyCabr:	
  3219                           ; 0 bytes @ 0x6
  3220                           
  3221  0026                     ??_Flash_Memory_Main:	
  3222                           ; 0 bytes @ 0x6
  3223                           
  3224  0026                     CC2500_InitSetREG@temp1:	
  3225                           ; 0 bytes @ 0x6
  3226                           
  3227  0026                     CC2500_InitPATable@temp:	
  3228                           ; 1 bytes @ 0x6
  3229                           
  3230  0026                     DelayTimejudge@i:	
  3231                           ; 1 bytes @ 0x6
  3232                           
  3233  0026                     _Sw_DimmerAdjFunc$6133:	
  3234                           ; 1 bytes @ 0x6
  3235                           
  3236  0026                     ___awdiv@sign:	
  3237                           ; 1 bytes @ 0x6
  3238                           
  3239                           
  3240                           ; 1 bytes @ 0x6
  3241  0026                     	ds	1
  3242  0027                     CC2500_InitSetREG@temp2:	
  3243  0027                     CC2500_InitPATable@loop_d:	
  3244                           ; 1 bytes @ 0x7
  3245                           
  3246  0027                     DelayTimejudge@j:	
  3247                           ; 1 bytes @ 0x7
  3248                           
  3249  0027                     _Sw_DimmerAdjFunc$6134:	
  3250                           ; 1 bytes @ 0x7
  3251                           
  3252  0027                     ___awdiv@quotient:	
  3253                           ; 1 bytes @ 0x7
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x7
  3257  0027                     	ds	1
  3258  0028                     ?___awtoft:	
  3259  0028                     CC2500_InitSetREG@loop_c:	
  3260                           ; 3 bytes @ 0x8
  3261                           
  3262  0028                     DelayTimejudge@k:	
  3263                           ; 1 bytes @ 0x8
  3264                           
  3265  0028                     Sw_DimmerAdjFunc@Idle:	
  3266                           ; 1 bytes @ 0x8
  3267                           
  3268  0028                     ___awtoft@c:	
  3269                           ; 1 bytes @ 0x8
  3270                           
  3271                           
  3272                           ; 2 bytes @ 0x8
  3273  0028                     	ds	1
  3274  0029                     ?_setBuz:	
  3275  0029                     ??_CC2500_PowerOnInitial:	
  3276                           ; 0 bytes @ 0x9
  3277                           
  3278  0029                     DelayTimejudge@value:	
  3279                           ; 0 bytes @ 0x9
  3280                           
  3281  0029                     Sw_DimmerAdjFunc@sw:	
  3282                           ; 1 bytes @ 0x9
  3283                           
  3284  0029                     setBuz@time:	
  3285                           ; 1 bytes @ 0x9
  3286                           
  3287                           
  3288                           ; 2 bytes @ 0x9
  3289  0029                     	ds	1
  3290  002A                     ?_setDelayOff_GO:	
  3291  002A                     setDelayOff_GO@command:	
  3292                           ; 0 bytes @ 0xA
  3293                           
  3294                           
  3295                           ; 1 bytes @ 0xA
  3296  002A                     	ds	1
  3297  002B                     ??_setBuz:	
  3298  002B                     ??___awtoft:	
  3299                           ; 0 bytes @ 0xB
  3300                           
  3301  002B                     setDelayOff_GO@value:	
  3302                           ; 0 bytes @ 0xB
  3303                           
  3304                           
  3305                           ; 1 bytes @ 0xB
  3306  002B                     	ds	1
  3307  002C                     ??_setDelayOff_GO:	
  3308  002C                     setBuz@count:	
  3309                           ; 0 bytes @ 0xC
  3310                           
  3311                           
  3312                           ; 1 bytes @ 0xC
  3313  002C                     	ds	1
  3314  002D                     ??_my_MainTime:	
  3315  002D                     ??_setLog_Code:	
  3316                           ; 0 bytes @ 0xD
  3317                           
  3318  002D                     ___awtoft@sign:	
  3319                           ; 0 bytes @ 0xD
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0xD
  3323  002D                     	ds	1
  3324  002E                     ?___ftdiv:	
  3325  002E                     ?___ftmul:	
  3326                           ; 3 bytes @ 0xE
  3327                           
  3328  002E                     setDelayOff_GO@sw:	
  3329                           ; 3 bytes @ 0xE
  3330                           
  3331  002E                     ___ftdiv@f2:	
  3332                           ; 1 bytes @ 0xE
  3333                           
  3334  002E                     ___ftmul@f1:	
  3335                           ; 3 bytes @ 0xE
  3336                           
  3337                           
  3338                           ; 3 bytes @ 0xE
  3339  002E                     	ds	3
  3340  0031                     ___ftdiv@f1:	
  3341  0031                     ___ftmul@f2:	
  3342                           ; 3 bytes @ 0x11
  3343                           
  3344                           
  3345                           ; 3 bytes @ 0x11
  3346  0031                     	ds	3
  3347  0034                     ??___ftdiv:	
  3348  0034                     ??___ftmul:	
  3349                           ; 0 bytes @ 0x14
  3350                           
  3351                           
  3352                           ; 0 bytes @ 0x14
  3353  0034                     	ds	4
  3354  0038                     ___ftdiv@cntr:	
  3355  0038                     ___ftmul@exp:	
  3356                           ; 1 bytes @ 0x18
  3357                           
  3358                           
  3359                           ; 1 bytes @ 0x18
  3360  0038                     	ds	1
  3361  0039                     ___ftdiv@f3:	
  3362  0039                     ___ftmul@f3_as_product:	
  3363                           ; 3 bytes @ 0x19
  3364                           
  3365                           
  3366                           ; 3 bytes @ 0x19
  3367  0039                     	ds	3
  3368  003C                     ___ftdiv@exp:	
  3369  003C                     ___ftmul@cntr:	
  3370                           ; 1 bytes @ 0x1C
  3371                           
  3372                           
  3373                           ; 1 bytes @ 0x1C
  3374  003C                     	ds	1
  3375  003D                     ___ftdiv@sign:	
  3376  003D                     ___ftmul@sign:	
  3377                           ; 1 bytes @ 0x1D
  3378                           
  3379                           
  3380                           ; 1 bytes @ 0x1D
  3381  003D                     	ds	1
  3382  003E                     ?___ftadd:	
  3383  003E                     ___ftadd@f1:	
  3384                           ; 3 bytes @ 0x1E
  3385                           
  3386                           
  3387                           ; 3 bytes @ 0x1E
  3388  003E                     	ds	3
  3389  0041                     ___ftadd@f2:	
  3390                           
  3391                           ; 3 bytes @ 0x21
  3392  0041                     	ds	3
  3393  0044                     ??___ftadd:	
  3394                           
  3395                           ; 0 bytes @ 0x24
  3396  0044                     	ds	4
  3397  0048                     ___ftadd@sign:	
  3398                           
  3399                           ; 1 bytes @ 0x28
  3400  0048                     	ds	1
  3401  0049                     ___ftadd@exp2:	
  3402                           
  3403                           ; 1 bytes @ 0x29
  3404  0049                     	ds	1
  3405  004A                     ___ftadd@exp1:	
  3406                           
  3407                           ; 1 bytes @ 0x2A
  3408  004A                     	ds	1
  3409  004B                     ?___fttol:	
  3410  004B                     ___fttol@f1:	
  3411                           ; 4 bytes @ 0x2B
  3412                           
  3413                           
  3414                           ; 3 bytes @ 0x2B
  3415  004B                     	ds	4
  3416  004F                     ??___fttol:	
  3417                           
  3418                           ; 0 bytes @ 0x2F
  3419  004F                     	ds	4
  3420  0053                     ___fttol@sign1:	
  3421                           
  3422                           ; 1 bytes @ 0x33
  3423  0053                     	ds	1
  3424  0054                     ___fttol@lval:	
  3425                           
  3426                           ; 4 bytes @ 0x34
  3427  0054                     	ds	4
  3428  0058                     ___fttol@exp1:	
  3429                           
  3430                           ; 1 bytes @ 0x38
  3431  0058                     	ds	1
  3432  0059                     ??_getPercentValue:	
  3433  0059                     ??_setPercentValue:	
  3434                           ; 0 bytes @ 0x39
  3435                           
  3436  0059                     setPercentValue@value:	
  3437                           ; 0 bytes @ 0x39
  3438                           
  3439                           
  3440                           ; 1 bytes @ 0x39
  3441  0059                     	ds	1
  3442  005A                     setPercentValue@i:	
  3443                           
  3444                           ; 3 bytes @ 0x3A
  3445  005A                     	ds	1
  3446  005B                     getPercentValue@value:	
  3447                           
  3448                           ; 1 bytes @ 0x3B
  3449  005B                     	ds	1
  3450  005C                     getPercentValue@i:	
  3451                           
  3452                           ; 3 bytes @ 0x3C
  3453  005C                     	ds	1
  3454  005D                     ?_setRF_DimmerLights:	
  3455  005D                     ??_Flash_Memory_Initialization:	
  3456                           ; 0 bytes @ 0x3D
  3457                           
  3458  005D                     setRF_DimmerLights@on:	
  3459                           ; 0 bytes @ 0x3D
  3460                           
  3461                           
  3462                           ; 1 bytes @ 0x3D
  3463  005D                     	ds	1
  3464  005E                     ??_setRF_DimmerLights:	
  3465  005E                     Flash_Memory_Initialization@i:	
  3466                           ; 0 bytes @ 0x3E
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x3E
  3470  005E                     	ds	1
  3471  005F                     ??_setDimmerLights_AdjRF:	
  3472                           
  3473                           ; 0 bytes @ 0x3F
  3474  005F                     	ds	1
  3475  0060                     setDimmerLights_AdjRF@lights:	
  3476  0060                     setRF_DimmerLights@status:	
  3477                           ; 1 bytes @ 0x40
  3478                           
  3479                           
  3480                           ; 1 bytes @ 0x40
  3481  0060                     	ds	1
  3482  0061                     ??_setRF_DimmerValue:	
  3483  0061                     setRF_DimmerLights@lights:	
  3484                           ; 0 bytes @ 0x41
  3485                           
  3486                           
  3487                           ; 1 bytes @ 0x41
  3488  0061                     	ds	1
  3489  0062                     ??_DlyOff_Main:	
  3490  0062                     ?_setDimmerLights_Adj:	
  3491                           ; 0 bytes @ 0x42
  3492                           
  3493  0062                     ??_setRFSW_Control:	
  3494                           ; 0 bytes @ 0x42
  3495                           
  3496  0062                     ??_Sw_DimmerOnFunc:	
  3497                           ; 0 bytes @ 0x42
  3498                           
  3499  0062                     ??_Sw_DimmerOffFunc:	
  3500                           ; 0 bytes @ 0x42
  3501                           
  3502  0062                     setDimmerLights_Adj@status:	
  3503                           ; 0 bytes @ 0x42
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0x42
  3507  0062                     	ds	1
  3508  0063                     ??_setDimmerLights_Adj:	
  3509  0063                     setRFSW_Control@sw:	
  3510                           ; 0 bytes @ 0x43
  3511                           
  3512  0063                     setRF_DimmerValue@lights:	
  3513                           ; 1 bytes @ 0x43
  3514                           
  3515  0063                     _Sw_DimmerOnFunc$6120:	
  3516                           ; 1 bytes @ 0x43
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x43
  3520  0063                     	ds	1
  3521  0064                     ??_setRFSW_AdjControl:	
  3522  0064                     DlyOff_Main@sw:	
  3523                           ; 0 bytes @ 0x44
  3524                           
  3525  0064                     setDimmerLights_Adj@lights:	
  3526                           ; 1 bytes @ 0x44
  3527                           
  3528  0064                     _Sw_DimmerOnFunc$6121:	
  3529                           ; 1 bytes @ 0x44
  3530                           
  3531  0064                     Sw_DimmerOffFunc@sw:	
  3532                           ; 1 bytes @ 0x44
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x44
  3536  0064                     	ds	1
  3537  0065                     ??_setDimmerLights_Main:	
  3538  0065                     ??_DelayOff_Main:	
  3539                           ; 0 bytes @ 0x45
  3540                           
  3541  0065                     _Sw_DimmerOnFunc$6122:	
  3542                           ; 0 bytes @ 0x45
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x45
  3546  0065                     	ds	1
  3547  0066                     _setDimmerLights_Main$2409:	
  3548  0066                     setRFSW_AdjControl@sw:	
  3549                           ; 1 bytes @ 0x46
  3550                           
  3551  0066                     Sw_DimmerOnFunc@Idle:	
  3552                           ; 1 bytes @ 0x46
  3553                           
  3554                           
  3555                           ; 1 bytes @ 0x46
  3556  0066                     	ds	1
  3557  0067                     ??_setRF_Main:	
  3558  0067                     ??_getRxData:	
  3559                           ; 0 bytes @ 0x47
  3560                           
  3561  0067                     ??_setControl_Lights_Table:	
  3562                           ; 0 bytes @ 0x47
  3563                           
  3564  0067                     _setDimmerLights_Main$2417:	
  3565                           ; 0 bytes @ 0x47
  3566                           
  3567  0067                     Sw_DimmerOnFunc@sw:	
  3568                           ; 1 bytes @ 0x47
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x47
  3572  0067                     	ds	1
  3573  0068                     ??_setSw_Main:	
  3574  0068                     _setDimmerLights_Main$2418:	
  3575                           ; 0 bytes @ 0x48
  3576                           
  3577  0068                     _setRF_Main$5152:	
  3578                           ; 1 bytes @ 0x48
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x48
  3582  0068                     	ds	1
  3583  0069                     ??_RF_Main:	
  3584  0069                     setDimmerLights_Main@clear:	
  3585                           ; 0 bytes @ 0x49
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x49
  3589  0069                     	ds	1
  3590  006A                     setDimmerLights_Main@lights:	
  3591  006A                     setSw_Main@sw:	
  3592                           ; 1 bytes @ 0x4A
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0x4A
  3596  006A                     	ds	1
  3597  006B                     ??_Switch_Main:	
  3598  006B                     ??_DimmerLights_Main:	
  3599                           ; 0 bytes @ 0x4B
  3600                           
  3601  006B                     ??_main:	
  3602                           ; 0 bytes @ 0x4B
  3603                           
  3604                           
  3605                           	psect	maintext
  3606  156E                     __pmaintext:	
  3607                           ; 0 bytes @ 0x4B
  3608 ;;
  3609 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3610 ;;
  3611 ;; *************** function _main *****************
  3612 ;; Defined at:
  3613 ;;		line 7 in file "../src/Main_B1.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  argc            2    0[BANK3 ] int 
  3616 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  2    0[BANK3 ] int 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 17F/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3628 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3632 ;;Total ram usage:        4 bytes
  3633 ;; Hardware stack levels required when called:   15
  3634 ;; This function calls:
  3635 ;;		_Buzzer_Initialization
  3636 ;;		_Buzzer_Main
  3637 ;;		_CC2500_PowerOnInitial
  3638 ;;		_DelayOff_Initialization
  3639 ;;		_DelayOff_Main
  3640 ;;		_DimmerLights_Initialization
  3641 ;;		_DimmerLights_Main
  3642 ;;		_Flash_Memory_Initialization
  3643 ;;		_Flash_Memory_Main
  3644 ;;		_LED_Initialization
  3645 ;;		_LED_Main
  3646 ;;		_Mcu_Initialization
  3647 ;;		_RF_Initialization
  3648 ;;		_RF_Main
  3649 ;;		_Switch_Initialization
  3650 ;;		_Switch_Main
  3651 ;;		_WDT_Main
  3652 ;;		_myMain_Initialization
  3653 ;;		_my_MainTime
  3654 ;; This function is called by:
  3655 ;;		Startup code after reset
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           
  3660                           ;psect for function _main
  3661  156E                     _main:	
  3662                           
  3663                           ;Main_B1.c: 8: myMain_Initialization();
  3664                           
  3665                           ;incstack = 0
  3666                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3667  156E  319F  276F  3195   	fcall	_myMain_Initialization
  3668                           
  3669                           ;Main_B1.c: 9: Mcu_Initialization();
  3670  1571  3190  2083  3195   	fcall	_Mcu_Initialization
  3671                           
  3672                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3673  1574  3185  2521  3195   	fcall	_Flash_Memory_Initialization
  3674                           
  3675                           ;Main_B1.c: 11: LED_Initialization();
  3676  1577  319F  279E  3195   	fcall	_LED_Initialization
  3677                           
  3678                           ;Main_B1.c: 12: Buzzer_Initialization();
  3679  157A  319E  2655  3195   	fcall	_Buzzer_Initialization
  3680                           
  3681                           ;Main_B1.c: 14: ;;
  3682                           ;Main_B1.c: 15: ;;
  3683                           ;Main_B1.c: 16: ;;
  3684                           ;Main_B1.c: 17: ;;
  3685                           ;Main_B1.c: 18: DelayOff_Initialization();
  3686  157D  319E  26DA  3195   	fcall	_DelayOff_Initialization
  3687                           
  3688                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3689  1580  3192  22AB  3195   	fcall	_DimmerLights_Initialization
  3690                           
  3691                           ;Main_B1.c: 21: ;;
  3692                           ;Main_B1.c: 22: ;;
  3693                           ;Main_B1.c: 23: ;;
  3694                           ;Main_B1.c: 24: Switch_Initialization();
  3695  1583  3190  2072  3195   	fcall	_Switch_Initialization
  3696                           
  3697                           ;Main_B1.c: 25: RF_Initialization();
  3698  1586  319E  2658  3195   	fcall	_RF_Initialization
  3699                           
  3700                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3701  1589  3187  27EB  3195   	fcall	_CC2500_PowerOnInitial
  3702  158C                     l1611:	
  3703                           ;Main_B1.c: 34: ;;
  3704                           ;Main_B1.c: 38: ;;
  3705                           ;Main_B1.c: 42: ;;
  3706                           ;Main_B1.c: 46: ;;
  3707                           
  3708                           ;Main_B1.c: 27: ;;
  3709                           ;Main_B1.c: 30: while (1) {
  3710                           
  3711                           
  3712                           ;Main_B1.c: 61: }
  3713                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  3714  158C  0021               	movlb	1	; select bank1
  3715  158D  1CA0               	btfss	_myMain^(0+128),1
  3716  158E  2D8C               	goto	l1611
  3717                           
  3718                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  3719  158F  10A0               	bcf	_myMain^(0+128),1
  3720                           
  3721                           ;Main_B1.c: 66: my_MainTime();
  3722  1590  3195  25AF  3195   	fcall	_my_MainTime
  3723                           
  3724                           ;Main_B1.c: 67: WDT_Main();
  3725  1593  3190  20A7  3195   	fcall	_WDT_Main
  3726                           
  3727                           ;Main_B1.c: 68: ;;
  3728                           ;Main_B1.c: 69: ;;
  3729                           ;Main_B1.c: 70: if (myMain.PowerON) {
  3730  1596  0021               	movlb	1	; select bank1
  3731  1597  1C20               	btfss	_myMain^(0+128),0
  3732  1598  2D8C               	goto	l1611
  3733                           
  3734                           ;Main_B1.c: 71: Flash_Memory_Main();
  3735  1599  3192  222B  3195   	fcall	_Flash_Memory_Main
  3736                           
  3737                           ;Main_B1.c: 73: LED_Main();
  3738  159C  319F  27AE  3195   	fcall	_LED_Main
  3739                           
  3740                           ;Main_B1.c: 74: Buzzer_Main();
  3741  159F  3196  26BE  3195   	fcall	_Buzzer_Main
  3742                           
  3743                           ;Main_B1.c: 76: ;;
  3744                           ;Main_B1.c: 77: ;;
  3745                           ;Main_B1.c: 78: ;;
  3746                           ;Main_B1.c: 79: ;;
  3747                           ;Main_B1.c: 81: ;;
  3748                           ;Main_B1.c: 82: DimmerLights_Main();
  3749  15A2  319F  2751  3195   	fcall	_DimmerLights_Main
  3750                           
  3751                           ;Main_B1.c: 83: Switch_Main();
  3752  15A5  3190  2066  3195   	fcall	_Switch_Main
  3753                           
  3754                           ;Main_B1.c: 84: ;;
  3755                           ;Main_B1.c: 85: ;;
  3756                           ;Main_B1.c: 87: RF_Main();
  3757  15A8  319E  265B  3195   	fcall	_RF_Main
  3758                           
  3759                           ;Main_B1.c: 88: DelayOff_Main();
  3760  15AB  319E  26E6  3195   	fcall	_DelayOff_Main
  3761                           
  3762                           ;Main_B1.c: 89: ;;
  3763  15AE  2D8C               	goto	l1611
  3764  15AF                     __end_of_main:	
  3765                           ;Main_B1.c: 90: }
  3766                           ;Main_B1.c: 91: }
  3767                           ;Main_B1.c: 109: }
  3768                           ;Main_B1.c: 110: return (0);
  3769                           ;	Return value of _main is never used
  3770                           
  3771                           
  3772                           	psect	text1
  3773  15AF                     __ptext1:	
  3774 ;; *************** function _my_MainTime *****************
  3775 ;; Defined at:
  3776 ;;		line 127 in file "../src/Main_B1.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;		None               void
  3783 ;; Registers used:
  3784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    7
  3797 ;; This function calls:
  3798 ;;		_setBuz
  3799 ;;		_setRF_Enable
  3800 ;;		_setSw_Enable
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function _my_MainTime
  3808  15AF                     _my_MainTime:	
  3809                           
  3810                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3814  15AF  0021               	movlb	1	; select bank1
  3815  15B0  1820               	btfsc	_myMain^(0+128),0
  3816  15B1  2DD8               	goto	l9665
  3817                           
  3818                           ;Main_B1.c: 130: myMain.PowerCount++;
  3819  15B2  3001               	movlw	1
  3820  15B3  07A1               	addwf	(_myMain^(0+128)+1),f
  3821  15B4  3000               	movlw	0
  3822  15B5  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3823                           
  3824                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  3825  15B6  3001               	movlw	1
  3826  15B7  3EA0               	addlw	_myMain& (0+255)
  3827  15B8  0086               	movwf	6
  3828  15B9  0187               	clrf	7
  3829  15BA  3F40               	moviw [0]fsr1
  3830  15BB  3A96               	xorlw	150
  3831  15BC  1D03               	skipz
  3832  15BD  2DC0               	goto	u10405
  3833  15BE  3F41               	moviw [1]fsr1
  3834  15BF  3A00               	xorlw	0
  3835  15C0                     u10405:	
  3836  15C0  1D03               	skipz
  3837  15C1  0008               	return
  3838                           
  3839                           ;Main_B1.c: 132: {
  3840                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  3841  15C2  01A1               	clrf	(_myMain^(0+128)+1)
  3842  15C3  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3843                           
  3844                           ;Main_B1.c: 134: myMain.PowerON = 1;
  3845  15C4  1420               	bsf	_myMain^(0+128),0
  3846                           
  3847                           ;Main_B1.c: 137: ;;
  3848                           ;Main_B1.c: 141: ;;
  3849                           ;Main_B1.c: 147: setBuz(3, 50);
  3850  15C5  3032               	movlw	50
  3851  15C6  0020               	movlb	0	; select bank0
  3852  15C7  00A9               	movwf	setBuz@time
  3853  15C8  3000               	movlw	0
  3854  15C9  00AA               	movwf	setBuz@time+1
  3855  15CA  3003               	movlw	3
  3856  15CB  3197  27A7  3195   	fcall	_setBuz
  3857                           
  3858                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  3859  15CE  0021               	movlb	1	; select bank1
  3860  15CF  1720               	bsf	_myMain^(0+128),6
  3861                           
  3862                           ;Main_B1.c: 150: setSw_Enable(1);
  3863  15D0  3001               	movlw	1
  3864  15D1  3193  235D  3195   	fcall	_setSw_Enable
  3865                           
  3866                           ;Main_B1.c: 153: setRF_Enable(1);
  3867  15D4  3001               	movlw	1
  3868  15D5  319F  2725         	fcall	_setRF_Enable
  3869                           
  3870                           ;Main_B1.c: 157: }
  3871                           ;Main_B1.c: 158: } else {
  3872  15D7  0008               	return
  3873  15D8                     l9665:	
  3874                           
  3875                           ;Main_B1.c: 166: myMain.Count1++;
  3876  15D8  3001               	movlw	1
  3877  15D9  0021               	movlb	1	; select bank1
  3878  15DA  07A5               	addwf	(_myMain^(0+128)+5),f
  3879  15DB  3000               	movlw	0
  3880  15DC  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  3881                           
  3882                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  3883  15DD  3005               	movlw	5
  3884  15DE  3EA0               	addlw	_myMain& (0+255)
  3885  15DF  0086               	movwf	6
  3886  15E0  0187               	clrf	7
  3887  15E1  3F40               	moviw [0]fsr1
  3888  15E2  3A64               	xorlw	100
  3889  15E3  1D03               	skipz
  3890  15E4  2DE7               	goto	u10415
  3891  15E5  3F41               	moviw [1]fsr1
  3892  15E6  3A00               	xorlw	0
  3893  15E7                     u10415:	
  3894  15E7  1D03               	skipz
  3895  15E8  0008               	return
  3896                           
  3897                           ;Main_B1.c: 168: {
  3898                           ;Main_B1.c: 169: myMain.Count1 = 0;
  3899  15E9  01A5               	clrf	(_myMain^(0+128)+5)
  3900  15EA  01A6               	clrf	((_myMain+1)^(0+128)+5)
  3901                           
  3902                           ;Main_B1.c: 182: if (myMain.Flag) {
  3903  15EB  1DA0               	btfss	_myMain^(0+128),3
  3904  15EC  2DEF               	goto	l1626
  3905                           
  3906                           ;Main_B1.c: 183: myMain.Flag = 0;
  3907  15ED  11A0               	bcf	_myMain^(0+128),3
  3908                           
  3909                           ;Main_B1.c: 192: } else {
  3910  15EE  0008               	return
  3911  15EF                     l1626:	
  3912                           
  3913                           ;Main_B1.c: 193: myMain.Flag = 1;
  3914  15EF  15A0               	bsf	_myMain^(0+128),3
  3915  15F0  0008               	return
  3916  15F1                     __end_of_my_MainTime:	
  3917                           
  3918                           	psect	text2
  3919  135D                     __ptext2:	
  3920 ;; *************** function _setSw_Enable *****************
  3921 ;; Defined at:
  3922 ;;		line 91 in file "../src/Switch_B1.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  command         1    wreg     unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  command         1    2[BANK0 ] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;		None               void
  3929 ;; Registers used:
  3930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;Total ram usage:        1 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    6
  3943 ;; This function calls:
  3944 ;;		_SwPointSelect
  3945 ;; This function is called by:
  3946 ;;		_my_MainTime
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _setSw_Enable
  3952  135D                     _setSw_Enable:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3956                           ;setSw_Enable@command stored from wreg
  3957  135D  0020               	movlb	0	; select bank0
  3958  135E  00A2               	movwf	setSw_Enable@command
  3959                           
  3960                           ;Switch_B1.c: 94: SwPointSelect(1);
  3961  135F  3001               	movlw	1
  3962  1360  3191  21EF  3193   	fcall	_SwPointSelect
  3963                           
  3964                           ;Switch_B1.c: 95: Sw->Enable = command;
  3965  1363  0020               	movlb	0	; select bank0
  3966  1364  086C               	movf	_Sw,w
  3967  1365  0086               	movwf	6
  3968  1366  3001               	movlw	1	; select bank2/3
  3969  1367  0087               	movwf	7
  3970  1368  0822               	movf	setSw_Enable@command,w
  3971  1369  1001               	bcf	1,0
  3972  136A  1D03               	skipz
  3973  136B  1401               	bsf	1,0
  3974                           
  3975                           ;Switch_B1.c: 99: SwPointSelect(2);
  3976  136C  3002               	movlw	2
  3977  136D  3191  21EF  3193   	fcall	_SwPointSelect
  3978                           
  3979                           ;Switch_B1.c: 100: Sw->Enable = command;
  3980  1370  0020               	movlb	0	; select bank0
  3981  1371  086C               	movf	_Sw,w
  3982  1372  0086               	movwf	6
  3983  1373  3001               	movlw	1	; select bank2/3
  3984  1374  0087               	movwf	7
  3985  1375  0822               	movf	setSw_Enable@command,w
  3986  1376  1001               	bcf	1,0
  3987  1377  1D03               	skipz
  3988  1378  1401               	bsf	1,0
  3989                           
  3990                           ;Switch_B1.c: 104: SwPointSelect(3);
  3991  1379  3003               	movlw	3
  3992  137A  3191  21EF         	fcall	_SwPointSelect
  3993                           
  3994                           ;Switch_B1.c: 105: Sw->Enable = command;
  3995  137C  0020               	movlb	0	; select bank0
  3996  137D  086C               	movf	_Sw,w
  3997  137E  0086               	movwf	6
  3998  137F  3001               	movlw	1	; select bank2/3
  3999  1380  0087               	movwf	7
  4000  1381  0822               	movf	setSw_Enable@command,w
  4001  1382  1001               	bcf	1,0
  4002  1383  1D03               	skipz
  4003  1384  1401               	bsf	1,0
  4004  1385  0008               	return
  4005  1386                     __end_of_setSw_Enable:	
  4006                           
  4007                           	psect	text3
  4008  1F25                     __ptext3:	
  4009 ;; *************** function _setRF_Enable *****************
  4010 ;; Defined at:
  4011 ;;		line 224 in file "../src/RF_Control_B1.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  command         1    wreg     unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  command         1    0[BANK0 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;		None               void
  4018 ;; Registers used:
  4019 ;;		wreg, status,2
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;Total ram usage:        1 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    5
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_my_MainTime
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           
  4040                           ;psect for function _setRF_Enable
  4041  1F25                     _setRF_Enable:	
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4045                           ;setRF_Enable@command stored from wreg
  4046  1F25  0020               	movlb	0	; select bank0
  4047  1F26  00A0               	movwf	setRF_Enable@command
  4048                           
  4049                           ;RF_Control_B1.c: 225: RF1.Enable = command;
  4050  1F27  0820               	movf	setRF_Enable@command,w
  4051  1F28  0021               	movlb	1	; select bank1
  4052  1F29  103E               	bcf	_RF1^(0+128),0
  4053  1F2A  1D03               	skipz
  4054  1F2B  143E               	bsf	_RF1^(0+128),0
  4055                           
  4056                           ;RF_Control_B1.c: 226: RF1.Learn = 0;
  4057  1F2C  133E               	bcf	_RF1^(0+128),6
  4058                           
  4059                           ;RF_Control_B1.c: 227: RF1.TransceiveGO = 0;
  4060  1F2D  113E               	bcf	_RF1^(0+128),2
  4061                           
  4062                           ;RF_Control_B1.c: 228: RF1.RxStatus = 0;
  4063  1F2E  11BE               	bcf	_RF1^(0+128),3
  4064                           
  4065                           ;RF_Control_B1.c: 229: RF1.ReceiveGO = 0;
  4066  1F2F  10BE               	bcf	_RF1^(0+128),1
  4067                           
  4068                           ;RF_Control_B1.c: 230: RF1.DebounceTime = 0;
  4069  1F30  01C5               	clrf	(_RF1^(0+128)+7)
  4070                           
  4071                           ;RF_Control_B1.c: 231: RF1.Debounce = 0;
  4072  1F31  12BE               	bcf	_RF1^(0+128),5
  4073  1F32  0008               	return
  4074  1F33                     __end_of_setRF_Enable:	
  4075                           
  4076                           	psect	text4
  4077  1F6F                     __ptext4:	
  4078 ;; *************** function _myMain_Initialization *****************
  4079 ;; Defined at:
  4080 ;;		line 115 in file "../src/Main_B1.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;		None               void
  4087 ;; Registers used:
  4088 ;;		wreg, fsr1l, fsr1h
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;Total ram usage:        1 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    5
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_main
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _myMain_Initialization
  4110  1F6F                     _myMain_Initialization:	
  4111                           
  4112                           ;Main_B1.c: 117: product = &_product;
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4116  1F6F  3020               	movlw	__product& (0+255)
  4117  1F70  0020               	movlb	0	; select bank0
  4118  1F71  00A0               	movwf	??_myMain_Initialization
  4119  1F72  0820               	movf	??_myMain_Initialization,w
  4120  1F73  00ED               	movwf	_product
  4121                           
  4122                           ;Main_B1.c: 118: product->Data[20] = 211;
  4123  1F74  30D3               	movlw	211
  4124  1F75  00A0               	movwf	??_myMain_Initialization
  4125  1F76  086D               	movf	_product,w
  4126  1F77  3E14               	addlw	20
  4127  1F78  0086               	movwf	6
  4128  1F79  3002               	movlw	2	; select bank4/5
  4129  1F7A  0087               	movwf	7
  4130  1F7B  0820               	movf	??_myMain_Initialization,w
  4131  1F7C  0081               	movwf	1
  4132  1F7D  0008               	return
  4133  1F7E                     __end_of_myMain_Initialization:	
  4134                           
  4135                           	psect	text5
  4136  10A7                     __ptext5:	
  4137 ;; *************** function _WDT_Main *****************
  4138 ;; Defined at:
  4139 ;;		line 909 in file "../src/MCU_B1.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;		None               void
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:        1 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    6
  4160 ;; This function calls:
  4161 ;;		_WDT_Clearing
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _WDT_Main
  4169  10A7                     _WDT_Main:	
  4170                           
  4171                           ;MCU_B1.c: 910: if (WDT.Enable == 1) {
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4175  10A7  0021               	movlb	1	; select bank1
  4176  10A8  1C4A               	btfss	_WDT^(0+128),0
  4177  10A9  0008               	return
  4178                           
  4179                           ;MCU_B1.c: 911: if (WDT.Count-- > 0) {
  4180  10AA  3001               	movlw	1
  4181  10AB  02CB               	subwf	(_WDT^(0+128)+1),f
  4182  10AC  084B               	movf	(_WDT^(0+128)+1),w
  4183  10AD  3AFF               	xorlw	255
  4184  10AE  1903               	skipnz
  4185  10AF  0008               	return
  4186                           
  4187                           ;MCU_B1.c: 912: WDT.Count = 10;
  4188  10B0  300A               	movlw	10
  4189  10B1  0020               	movlb	0	; select bank0
  4190  10B2  00A0               	movwf	??_WDT_Main
  4191  10B3  0820               	movf	??_WDT_Main,w
  4192  10B4  0021               	movlb	1	; select bank1
  4193  10B5  00CB               	movwf	(_WDT^(0+128)+1)
  4194                           
  4195                           ;MCU_B1.c: 913: WDT_Clearing();
  4196  10B6  3180  2002         	fcall	_WDT_Clearing
  4197  10B8  0008               	return
  4198  10B9                     __end_of_WDT_Main:	
  4199                           
  4200                           	psect	text6
  4201  0002                     __ptext6:	
  4202 ;; *************** function _WDT_Clearing *****************
  4203 ;; Defined at:
  4204 ;;		line 919 in file "../src/MCU_B1.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;		None               void
  4211 ;; Registers used:
  4212 ;;		None
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    5
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_WDT_Main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _WDT_Clearing
  4234  0002                     _WDT_Clearing:	
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _WDT_Clearing: []
  4238  0002  0064               	clrwdt	;# 
  4239  0003  0008               	return
  4240  0004                     __end_of_WDT_Clearing:	
  4241                           
  4242                           	psect	text7
  4243  1066                     __ptext7:	
  4244 ;; *************** function _Switch_Main *****************
  4245 ;; Defined at:
  4246 ;;		line 67 in file "../src/Switch_B1.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;		None               void
  4253 ;; Registers used:
  4254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4264 ;;Total ram usage:        0 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:   11
  4267 ;; This function calls:
  4268 ;;		_setSw_Main
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _Switch_Main
  4276  1066                     _Switch_Main:	
  4277                           
  4278                           ;Switch_B1.c: 69: setSw_Main(1);
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4282  1066  3001               	movlw	1
  4283  1067  3182  2210  3190   	fcall	_setSw_Main
  4284                           
  4285                           ;Switch_B1.c: 73: setSw_Main(2);
  4286  106A  3002               	movlw	2
  4287  106B  3182  2210  3190   	fcall	_setSw_Main
  4288                           
  4289                           ;Switch_B1.c: 77: setSw_Main(3);
  4290  106E  3003               	movlw	3
  4291  106F  3182  2210         	fcall	_setSw_Main
  4292  1071  0008               	return
  4293  1072                     __end_of_Switch_Main:	
  4294                           
  4295                           	psect	text8
  4296  0210                     __ptext8:	
  4297 ;; *************** function _setSw_Main *****************
  4298 ;; Defined at:
  4299 ;;		line 117 in file "../src/Switch_B1.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  sw              1    wreg     unsigned char 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  sw              1   74[BANK0 ] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;		None               void
  4306 ;; Registers used:
  4307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;Total ram usage:        3 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:   10
  4320 ;; This function calls:
  4321 ;;		_SwPointSelect
  4322 ;;		_Sw_DimmerAdjFunc
  4323 ;;		_Sw_DimmerOffFunc
  4324 ;;		_Sw_DimmerOnFunc
  4325 ;;		_setBuz
  4326 ;;		_setRF_Learn
  4327 ;; This function is called by:
  4328 ;;		_Switch_Main
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function _setSw_Main
  4334  0210                     _setSw_Main:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4338                           ;setSw_Main@sw stored from wreg
  4339  0210  0020               	movlb	0	; select bank0
  4340  0211  00EA               	movwf	setSw_Main@sw
  4341                           
  4342                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4343  0212  086A               	movf	setSw_Main@sw,w
  4344  0213  3191  21EF  3182   	fcall	_SwPointSelect
  4345                           
  4346                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4347  0216  0020               	movlb	0	; select bank0
  4348  0217  086C               	movf	_Sw,w
  4349  0218  0086               	movwf	6
  4350  0219  3001               	movlw	1	; select bank2/3
  4351  021A  0087               	movwf	7
  4352  021B  1C01               	btfss	1,0
  4353  021C  0008               	return
  4354                           
  4355                           ;Switch_B1.c: 121: if (sw == 1) {
  4356  021D  086A               	movf	setSw_Main@sw,w
  4357  021E  3A01               	xorlw	1
  4358  021F  1D03               	skipz
  4359  0220  2A29               	goto	l9421
  4360                           
  4361                           ;Switch_B1.c: 122: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4362  0221  086C               	movf	_Sw,w
  4363  0222  0086               	movwf	6
  4364  0223  3001               	movlw	1	; select bank2/3
  4365  0224  0087               	movwf	7
  4366  0225  1081               	bcf	1,1
  4367  0226  180C               	btfsc	12,0	;volatile
  4368  0227  1481               	bsf	1,1
  4369                           
  4370                           ;Switch_B1.c: 123: } else if (sw == 2) {
  4371  0228  2A42               	goto	l2687
  4372  0229                     l9421:	
  4373  0229  0020               	movlb	0	; select bank0
  4374  022A  086A               	movf	setSw_Main@sw,w
  4375  022B  3A02               	xorlw	2
  4376  022C  1D03               	skipz
  4377  022D  2A36               	goto	l9425
  4378                           
  4379                           ;Switch_B1.c: 124: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4380  022E  086C               	movf	_Sw,w
  4381  022F  0086               	movwf	6
  4382  0230  3001               	movlw	1	; select bank2/3
  4383  0231  0087               	movwf	7
  4384  0232  1081               	bcf	1,1
  4385  0233  1B0C               	btfsc	12,6	;volatile
  4386  0234  1481               	bsf	1,1
  4387                           
  4388                           ;Switch_B1.c: 125: } else if (sw == 3) {
  4389  0235  2A42               	goto	l2687
  4390  0236                     l9425:	
  4391  0236  0020               	movlb	0	; select bank0
  4392  0237  086A               	movf	setSw_Main@sw,w
  4393  0238  3A03               	xorlw	3
  4394  0239  1D03               	skipz
  4395  023A  2A42               	goto	l2687
  4396                           
  4397                           ;Switch_B1.c: 126: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4398  023B  086C               	movf	_Sw,w
  4399  023C  0086               	movwf	6
  4400  023D  3001               	movlw	1	; select bank2/3
  4401  023E  0087               	movwf	7
  4402  023F  1081               	bcf	1,1
  4403  0240  1A0C               	btfsc	12,4	;volatile
  4404  0241  1481               	bsf	1,1
  4405  0242                     l2687:	
  4406                           
  4407                           ;Switch_B1.c: 127: }
  4408                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4409  0242  0020               	movlb	0	; select bank0
  4410  0243  086C               	movf	_Sw,w
  4411  0244  0086               	movwf	6
  4412  0245  3001               	movlw	1	; select bank2/3
  4413  0246  0087               	movwf	7
  4414  0247  1C81               	btfss	1,1
  4415  0248  2B0D               	goto	l9475
  4416                           
  4417                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4418  0249  086C               	movf	_Sw,w
  4419  024A  0086               	movwf	6
  4420  024B  3001               	movlw	1	; select bank2/3
  4421  024C  0087               	movwf	7
  4422  024D  1901               	btfsc	1,2
  4423  024E  2A70               	goto	l9441
  4424                           
  4425                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4426  024F  3001               	movlw	1
  4427  0250  00E8               	movwf	??_setSw_Main
  4428  0251  086C               	movf	_Sw,w
  4429  0252  3E02               	addlw	2
  4430  0253  0086               	movwf	6
  4431  0254  3001               	movlw	1	; select bank2/3
  4432  0255  0087               	movwf	7
  4433  0256  0868               	movf	??_setSw_Main,w
  4434  0257  0781               	addwf	1,f
  4435                           
  4436                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4437  0258  086C               	movf	_Sw,w
  4438  0259  3E02               	addlw	2
  4439  025A  0086               	movwf	6
  4440  025B  3001               	movlw	1	; select bank2/3
  4441  025C  0087               	movwf	7
  4442  025D  3005               	movlw	5
  4443  025E  0201               	subwf	1,w
  4444  025F  1C03               	skipc
  4445  0260  0008               	return
  4446                           
  4447                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4448  0261  086C               	movf	_Sw,w
  4449  0262  3E02               	addlw	2
  4450  0263  0086               	movwf	6
  4451  0264  3001               	movlw	1	; select bank2/3
  4452  0265  0087               	movwf	7
  4453  0266  0181               	clrf	1
  4454                           
  4455                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4456  0267  086C               	movf	_Sw,w
  4457  0268  0086               	movwf	6
  4458  0269  3001               	movlw	1	; select bank2/3
  4459  026A  0087               	movwf	7
  4460  026B  1501               	bsf	1,2
  4461                           
  4462                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4463  026C  086A               	movf	setSw_Main@sw,w
  4464  026D  318D  2511         	fcall	_Sw_DimmerOnFunc
  4465                           
  4466                           ;Switch_B1.c: 173: }
  4467                           ;Switch_B1.c: 174: } else {
  4468  026F  0008               	return
  4469  0270                     l9441:	
  4470                           
  4471                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4472  0270  0020               	movlb	0	; select bank0
  4473  0271  086C               	movf	_Sw,w
  4474  0272  0086               	movwf	6
  4475  0273  3001               	movlw	1	; select bank2/3
  4476  0274  0087               	movwf	7
  4477  0275  1981               	btfsc	1,3
  4478  0276  2A9D               	goto	l9451
  4479                           
  4480                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4481  0277  086C               	movf	_Sw,w
  4482  0278  3E03               	addlw	3
  4483  0279  0086               	movwf	6
  4484  027A  3001               	movlw	1	; select bank2/3
  4485  027B  0087               	movwf	7
  4486  027C  3001               	movlw	1
  4487  027D  0781               	addwf	1,f
  4488  027E  3141               	addfsr 1,1
  4489  027F  1803               	skipnc
  4490  0280  0A81               	incf	1,f
  4491                           
  4492                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4493  0281  086C               	movf	_Sw,w
  4494  0282  3E03               	addlw	3
  4495  0283  0086               	movwf	6
  4496  0284  3001               	movlw	1	; select bank2/3
  4497  0285  0087               	movwf	7
  4498  0286  3F40               	moviw [0]fsr1
  4499  0287  00E8               	movwf	??_setSw_Main
  4500  0288  3F41               	moviw [1]fsr1
  4501  0289  00E9               	movwf	??_setSw_Main+1
  4502  028A  3000               	movlw	0
  4503  028B  0269               	subwf	??_setSw_Main+1,w
  4504  028C  3096               	movlw	150
  4505  028D  1903               	skipnz
  4506  028E  0268               	subwf	??_setSw_Main,w
  4507  028F  1C03               	skipc
  4508  0290  0008               	return
  4509                           
  4510                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4511  0291  086C               	movf	_Sw,w
  4512  0292  3E03               	addlw	3
  4513  0293  0086               	movwf	6
  4514  0294  3001               	movlw	1	; select bank2/3
  4515  0295  0087               	movwf	7
  4516  0296  3000               	movlw	0
  4517  0297  3FC0               	movwi [0]fsr1
  4518  0298  3FC1               	movwi [1]fsr1
  4519                           
  4520                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4521  0299  086A               	movf	setSw_Main@sw,w
  4522  029A  3188  20DC         	fcall	_Sw_DimmerAdjFunc
  4523                           
  4524                           ;Switch_B1.c: 184: }
  4525                           ;Switch_B1.c: 185: } else {
  4526  029C  0008               	return
  4527  029D                     l9451:	
  4528                           
  4529                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4530  029D  0020               	movlb	0	; select bank0
  4531  029E  086C               	movf	_Sw,w
  4532  029F  0086               	movwf	6
  4533  02A0  3001               	movlw	1	; select bank2/3
  4534  02A1  0087               	movwf	7
  4535  02A2  1A01               	btfsc	1,4
  4536  02A3  2ADB               	goto	l9465
  4537                           
  4538                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4539  02A4  086C               	movf	_Sw,w
  4540  02A5  3E05               	addlw	5
  4541  02A6  0086               	movwf	6
  4542  02A7  3001               	movlw	1	; select bank2/3
  4543  02A8  0087               	movwf	7
  4544  02A9  3001               	movlw	1
  4545  02AA  0781               	addwf	1,f
  4546  02AB  3141               	addfsr 1,1
  4547  02AC  1803               	skipnc
  4548  02AD  0A81               	incf	1,f
  4549                           
  4550                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4551  02AE  086C               	movf	_Sw,w
  4552  02AF  3E05               	addlw	5
  4553  02B0  0086               	movwf	6
  4554  02B1  3001               	movlw	1	; select bank2/3
  4555  02B2  0087               	movwf	7
  4556  02B3  3F40               	moviw [0]fsr1
  4557  02B4  00E8               	movwf	??_setSw_Main
  4558  02B5  3F41               	moviw [1]fsr1
  4559  02B6  00E9               	movwf	??_setSw_Main+1
  4560  02B7  3000               	movlw	0
  4561  02B8  0269               	subwf	??_setSw_Main+1,w
  4562  02B9  3096               	movlw	150
  4563  02BA  1903               	skipnz
  4564  02BB  0268               	subwf	??_setSw_Main,w
  4565  02BC  1C03               	skipc
  4566  02BD  0008               	return
  4567                           
  4568                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4569  02BE  086C               	movf	_Sw,w
  4570  02BF  3E05               	addlw	5
  4571  02C0  0086               	movwf	6
  4572  02C1  3001               	movlw	1	; select bank2/3
  4573  02C2  0087               	movwf	7
  4574  02C3  3000               	movlw	0
  4575  02C4  3FC0               	movwi [0]fsr1
  4576  02C5  3FC1               	movwi [1]fsr1
  4577                           
  4578                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4579  02C6  086C               	movf	_Sw,w
  4580  02C7  0086               	movwf	6
  4581  02C8  3001               	movlw	1	; select bank2/3
  4582  02C9  0087               	movwf	7
  4583  02CA  1601               	bsf	1,4
  4584                           
  4585                           ;Switch_B1.c: 193: setRF_Learn(1);
  4586  02CB  3001               	movlw	1
  4587  02CC  319E  269C  3182   	fcall	_setRF_Learn
  4588                           
  4589                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4590  02CF  0021               	movlb	1	; select bank1
  4591  02D0  1FA0               	btfss	_myMain^(0+128),7
  4592  02D1  0008               	return
  4593                           
  4594                           ;Switch_B1.c: 196: setBuz(2, 100);
  4595  02D2  3064               	movlw	100
  4596  02D3  0020               	movlb	0	; select bank0
  4597  02D4  00A9               	movwf	setBuz@time
  4598  02D5  3000               	movlw	0
  4599  02D6  00AA               	movwf	setBuz@time+1
  4600  02D7  3002               	movlw	2
  4601  02D8  3197  27A7         	fcall	_setBuz
  4602                           
  4603                           ;Switch_B1.c: 197: }
  4604                           ;Switch_B1.c: 199: }
  4605                           ;Switch_B1.c: 200: } else {
  4606  02DA  0008               	return
  4607  02DB                     l9465:	
  4608                           
  4609                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4610  02DB  0020               	movlb	0	; select bank0
  4611  02DC  086C               	movf	_Sw,w
  4612  02DD  0086               	movwf	6
  4613  02DE  3001               	movlw	1	; select bank2/3
  4614  02DF  0087               	movwf	7
  4615  02E0  1A81               	btfsc	1,5
  4616  02E1  0008               	return
  4617                           
  4618                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4619  02E2  086C               	movf	_Sw,w
  4620  02E3  3E07               	addlw	7
  4621  02E4  0086               	movwf	6
  4622  02E5  3001               	movlw	1	; select bank2/3
  4623  02E6  0087               	movwf	7
  4624  02E7  3001               	movlw	1
  4625  02E8  0781               	addwf	1,f
  4626  02E9  3141               	addfsr 1,1
  4627  02EA  1803               	skipnc
  4628  02EB  0A81               	incf	1,f
  4629                           
  4630                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4631  02EC  086C               	movf	_Sw,w
  4632  02ED  3E07               	addlw	7
  4633  02EE  0086               	movwf	6
  4634  02EF  3001               	movlw	1	; select bank2/3
  4635  02F0  0087               	movwf	7
  4636  02F1  3F40               	moviw [0]fsr1
  4637  02F2  00E8               	movwf	??_setSw_Main
  4638  02F3  3F41               	moviw [1]fsr1
  4639  02F4  00E9               	movwf	??_setSw_Main+1
  4640  02F5  3001               	movlw	1
  4641  02F6  0269               	subwf	??_setSw_Main+1,w
  4642  02F7  302C               	movlw	44
  4643  02F8  1903               	skipnz
  4644  02F9  0268               	subwf	??_setSw_Main,w
  4645  02FA  1C03               	skipc
  4646  02FB  0008               	return
  4647                           
  4648                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4649  02FC  086C               	movf	_Sw,w
  4650  02FD  3E07               	addlw	7
  4651  02FE  0086               	movwf	6
  4652  02FF  3001               	movlw	1	; select bank2/3
  4653  0300  0087               	movwf	7
  4654  0301  3000               	movlw	0
  4655  0302  3FC0               	movwi [0]fsr1
  4656  0303  3FC1               	movwi [1]fsr1
  4657                           
  4658                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4659  0304  086C               	movf	_Sw,w
  4660  0305  0086               	movwf	6
  4661  0306  3001               	movlw	1	; select bank2/3
  4662  0307  0087               	movwf	7
  4663  0308  1681               	bsf	1,5
  4664                           
  4665                           ;Switch_B1.c: 208: setRF_Learn(0);
  4666  0309  3000               	movlw	0
  4667  030A  319E  269C         	fcall	_setRF_Learn
  4668                           
  4669                           ;Switch_B1.c: 211: }
  4670                           ;Switch_B1.c: 212: }
  4671                           ;Switch_B1.c: 213: }
  4672                           ;Switch_B1.c: 214: }
  4673                           ;Switch_B1.c: 215: }
  4674                           ;Switch_B1.c: 216: } else {
  4675  030C  0008               	return
  4676  030D                     l9475:	
  4677                           
  4678                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4679  030D  0020               	movlb	0	; select bank0
  4680  030E  086C               	movf	_Sw,w
  4681  030F  0086               	movwf	6
  4682  0310  3001               	movlw	1	; select bank2/3
  4683  0311  0087               	movwf	7
  4684  0312  1D01               	btfss	1,2
  4685  0313  0008               	return
  4686                           
  4687                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4688  0314  3001               	movlw	1
  4689  0315  00E8               	movwf	??_setSw_Main
  4690  0316  086C               	movf	_Sw,w
  4691  0317  3E02               	addlw	2
  4692  0318  0086               	movwf	6
  4693  0319  3001               	movlw	1	; select bank2/3
  4694  031A  0087               	movwf	7
  4695  031B  0868               	movf	??_setSw_Main,w
  4696  031C  0781               	addwf	1,f
  4697                           
  4698                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4699  031D  086C               	movf	_Sw,w
  4700  031E  3E02               	addlw	2
  4701  031F  0086               	movwf	6
  4702  0320  3001               	movlw	1	; select bank2/3
  4703  0321  0087               	movwf	7
  4704  0322  3005               	movlw	5
  4705  0323  0201               	subwf	1,w
  4706  0324  1C03               	skipc
  4707  0325  0008               	return
  4708                           
  4709                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4710  0326  086C               	movf	_Sw,w
  4711  0327  3E02               	addlw	2
  4712  0328  0086               	movwf	6
  4713  0329  3001               	movlw	1	; select bank2/3
  4714  032A  0087               	movwf	7
  4715  032B  0181               	clrf	1
  4716                           
  4717                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4718  032C  086C               	movf	_Sw,w
  4719  032D  0086               	movwf	6
  4720  032E  3001               	movlw	1	; select bank2/3
  4721  032F  0087               	movwf	7
  4722  0330  1101               	bcf	1,2
  4723                           
  4724                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4725  0331  086C               	movf	_Sw,w
  4726  0332  3E03               	addlw	3
  4727  0333  0086               	movwf	6
  4728  0334  3001               	movlw	1	; select bank2/3
  4729  0335  0087               	movwf	7
  4730  0336  3000               	movlw	0
  4731  0337  3FC0               	movwi [0]fsr1
  4732  0338  3FC1               	movwi [1]fsr1
  4733                           
  4734                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4735  0339  086C               	movf	_Sw,w
  4736  033A  0086               	movwf	6
  4737  033B  3001               	movlw	1	; select bank2/3
  4738  033C  0087               	movwf	7
  4739  033D  1181               	bcf	1,3
  4740                           
  4741                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4742  033E  086C               	movf	_Sw,w
  4743  033F  3E05               	addlw	5
  4744  0340  0086               	movwf	6
  4745  0341  3001               	movlw	1	; select bank2/3
  4746  0342  0087               	movwf	7
  4747  0343  3000               	movlw	0
  4748  0344  3FC0               	movwi [0]fsr1
  4749  0345  3FC1               	movwi [1]fsr1
  4750                           
  4751                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4752  0346  086C               	movf	_Sw,w
  4753  0347  0086               	movwf	6
  4754  0348  3001               	movlw	1	; select bank2/3
  4755  0349  0087               	movwf	7
  4756  034A  1201               	bcf	1,4
  4757                           
  4758                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4759  034B  086C               	movf	_Sw,w
  4760  034C  3E07               	addlw	7
  4761  034D  0086               	movwf	6
  4762  034E  3001               	movlw	1	; select bank2/3
  4763  034F  0087               	movwf	7
  4764  0350  3000               	movlw	0
  4765  0351  3FC0               	movwi [0]fsr1
  4766  0352  3FC1               	movwi [1]fsr1
  4767                           
  4768                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4769  0353  086C               	movf	_Sw,w
  4770  0354  0086               	movwf	6
  4771  0355  3001               	movlw	1	; select bank2/3
  4772  0356  0087               	movwf	7
  4773  0357  1281               	bcf	1,5
  4774                           
  4775                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4776  0358  086A               	movf	setSw_Main@sw,w
  4777  0359  318B  2342  3182   	fcall	_Sw_DimmerOffFunc
  4778                           
  4779                           ;Switch_B1.c: 232: setRF_Learn(0);
  4780  035C  3000               	movlw	0
  4781  035D  319E  269C         	fcall	_setRF_Learn
  4782  035F  0008               	return
  4783  0360                     __end_of_setSw_Main:	
  4784                           
  4785                           	psect	text9
  4786  1E9C                     __ptext9:	
  4787 ;; *************** function _setRF_Learn *****************
  4788 ;; Defined at:
  4789 ;;		line 23 in file "../src/RF_Control_B1.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  command         1    wreg     unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  command         1    0[BANK0 ] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;		None               void
  4796 ;; Registers used:
  4797 ;;		wreg
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;Total ram usage:        1 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    5
  4810 ;; This function calls:
  4811 ;;		Nothing
  4812 ;; This function is called by:
  4813 ;;		_setSw_Main
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function _setRF_Learn
  4819  1E9C                     _setRF_Learn:	
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _setRF_Learn: [wreg]
  4823                           ;setRF_Learn@command stored from wreg
  4824  1E9C  0020               	movlb	0	; select bank0
  4825  1E9D  00A0               	movwf	setRF_Learn@command
  4826                           
  4827                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4828  1E9E  0820               	movf	setRF_Learn@command,w
  4829  1E9F  0021               	movlb	1	; select bank1
  4830  1EA0  133E               	bcf	_RF1^(0+128),6
  4831  1EA1  1D03               	skipz
  4832  1EA2  173E               	bsf	_RF1^(0+128),6
  4833  1EA3  0008               	return
  4834  1EA4                     __end_of_setRF_Learn:	
  4835                           
  4836                           	psect	text10
  4837  0D11                     __ptext10:	
  4838 ;; *************** function _Sw_DimmerOnFunc *****************
  4839 ;; Defined at:
  4840 ;;		line 241 in file "../src/Switch_B1.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  sw              1    wreg     unsigned char 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  sw              1   71[BANK0 ] unsigned char 
  4845 ;;  Idle            1   70[BANK0 ] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;Total ram usage:        6 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    9
  4862 ;; This function calls:
  4863 ;;		_setBuz
  4864 ;;		_setDimmerLights_Switch
  4865 ;;		_setDimmerLights_Trigger
  4866 ;;		_setRFSW_Status
  4867 ;;		_setRF_DimmerLights
  4868 ;;		_setTxData
  4869 ;; This function is called by:
  4870 ;;		_setSw_Main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _Sw_DimmerOnFunc
  4876  0D11                     _Sw_DimmerOnFunc:	
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4880                           ;Sw_DimmerOnFunc@sw stored from wreg
  4881  0D11  0020               	movlb	0	; select bank0
  4882  0D12  00E7               	movwf	Sw_DimmerOnFunc@sw
  4883                           
  4884                           ;Switch_B1.c: 242: char Idle = 1;
  4885  0D13  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4886  0D14  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4887                           
  4888                           ;Switch_B1.c: 246: if (sw == 1) {
  4889  0D15  0867               	movf	Sw_DimmerOnFunc@sw,w
  4890  0D16  3A01               	xorlw	1
  4891  0D17  1D03               	skipz
  4892  0D18  2D24               	goto	l8857
  4893                           
  4894                           ;Switch_B1.c: 247: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4895  0D19  01E3               	clrf	_Sw_DimmerOnFunc$6120
  4896  0D1A  0022               	movlb	2	; select bank2
  4897  0D1B  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  4898  0D1C  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  4899  0D1D  2D21               	goto	l8855
  4900  0D1E  0020               	movlb	0	; select bank0
  4901  0D1F  01E3               	clrf	_Sw_DimmerOnFunc$6120
  4902  0D20  0AE3               	incf	_Sw_DimmerOnFunc$6120,f
  4903  0D21                     l8855:	
  4904  0D21  0020               	movlb	0	; select bank0
  4905  0D22  0863               	movf	_Sw_DimmerOnFunc$6120,w
  4906  0D23  2D41               	goto	L2
  4907  0D24                     l8857:	
  4908                           ;Switch_B1.c: 248: } else if (sw == 2) {
  4909                           
  4910  0D24  0867               	movf	Sw_DimmerOnFunc@sw,w
  4911  0D25  3A02               	xorlw	2
  4912  0D26  1D03               	skipz
  4913  0D27  2D33               	goto	l8869
  4914                           
  4915                           ;Switch_B1.c: 249: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  4916  0D28  01E4               	clrf	_Sw_DimmerOnFunc$6121
  4917  0D29  0022               	movlb	2	; select bank2
  4918  0D2A  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  4919  0D2B  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  4920  0D2C  2D30               	goto	l8867
  4921  0D2D  0020               	movlb	0	; select bank0
  4922  0D2E  01E4               	clrf	_Sw_DimmerOnFunc$6121
  4923  0D2F  0AE4               	incf	_Sw_DimmerOnFunc$6121,f
  4924  0D30                     l8867:	
  4925  0D30  0020               	movlb	0	; select bank0
  4926  0D31  0864               	movf	_Sw_DimmerOnFunc$6121,w
  4927  0D32  2D41               	goto	L2
  4928  0D33                     l8869:	
  4929                           ;Switch_B1.c: 250: } else if (sw == 3) {
  4930                           
  4931  0D33  0867               	movf	Sw_DimmerOnFunc@sw,w
  4932  0D34  3A03               	xorlw	3
  4933  0D35  1D03               	skipz
  4934  0D36  2D44               	goto	l2713
  4935                           
  4936                           ;Switch_B1.c: 251: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  4937  0D37  01E5               	clrf	_Sw_DimmerOnFunc$6122
  4938  0D38  0022               	movlb	2	; select bank2
  4939  0D39  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  4940  0D3A  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  4941  0D3B  2D3F               	goto	l8879
  4942  0D3C  0020               	movlb	0	; select bank0
  4943  0D3D  01E5               	clrf	_Sw_DimmerOnFunc$6122
  4944  0D3E  0AE5               	incf	_Sw_DimmerOnFunc$6122,f
  4945  0D3F                     l8879:	
  4946  0D3F  0020               	movlb	0	; select bank0
  4947  0D40  0865               	movf	_Sw_DimmerOnFunc$6122,w
  4948  0D41                     L2:	
  4949  0D41  00E2               	movwf	??_Sw_DimmerOnFunc
  4950  0D42  0862               	movf	??_Sw_DimmerOnFunc,w
  4951  0D43  00E6               	movwf	Sw_DimmerOnFunc@Idle
  4952  0D44                     l2713:	
  4953                           
  4954                           ;Switch_B1.c: 252: }
  4955                           ;Switch_B1.c: 263: if (Idle == 1) {
  4956  0D44  0866               	movf	Sw_DimmerOnFunc@Idle,w
  4957  0D45  3A01               	xorlw	1
  4958  0D46  1D03               	skipz
  4959  0D47  0008               	return
  4960                           
  4961                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4962  0D48  086C               	movf	_Sw,w
  4963  0D49  0086               	movwf	6
  4964  0D4A  3001               	movlw	1	; select bank2/3
  4965  0D4B  0087               	movwf	7
  4966  0D4C  1781               	bsf	1,7
  4967                           
  4968                           ;Switch_B1.c: 265: setBuz(1, 100);
  4969  0D4D  3064               	movlw	100
  4970  0D4E  00A9               	movwf	setBuz@time
  4971  0D4F  3000               	movlw	0
  4972  0D50  00AA               	movwf	setBuz@time+1
  4973  0D51  3001               	movlw	1
  4974  0D52  3197  27A7  318D   	fcall	_setBuz
  4975                           
  4976                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  4977  0D55  0020               	movlb	0	; select bank0
  4978  0D56  086C               	movf	_Sw,w
  4979  0D57  0086               	movwf	6
  4980  0D58  3001               	movlw	1	; select bank2/3
  4981  0D59  0087               	movwf	7
  4982  0D5A  1B01               	btfsc	1,6
  4983  0D5B  2D85               	goto	l8899
  4984                           
  4985                           ;Switch_B1.c: 267: Sw->Status = 1;
  4986  0D5C  086C               	movf	_Sw,w
  4987  0D5D  0086               	movwf	6
  4988  0D5E  3001               	movlw	1	; select bank2/3
  4989  0D5F  0087               	movwf	7
  4990  0D60  1701               	bsf	1,6
  4991                           
  4992                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  4993  0D61  01A2               	clrf	setRFSW_Status@command
  4994  0D62  0AA2               	incf	setRFSW_Status@command,f
  4995  0D63  0867               	movf	Sw_DimmerOnFunc@sw,w
  4996  0D64  319F  2733  318D   	fcall	_setRFSW_Status
  4997                           
  4998                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  4999  0D67  0020               	movlb	0	; select bank0
  5000  0D68  01A2               	clrf	setDimmerLights_Trigger@command
  5001  0D69  0AA2               	incf	setDimmerLights_Trigger@command,f
  5002  0D6A  0867               	movf	Sw_DimmerOnFunc@sw,w
  5003  0D6B  319F  278E  318D   	fcall	_setDimmerLights_Trigger
  5004                           
  5005                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5006  0D6E  0020               	movlb	0	; select bank0
  5007  0D6F  01A2               	clrf	setDimmerLights_Switch@command
  5008  0D70  0AA2               	incf	setDimmerLights_Switch@command,f
  5009  0D71  0867               	movf	Sw_DimmerOnFunc@sw,w
  5010  0D72  319F  277E  318D   	fcall	_setDimmerLights_Switch
  5011                           
  5012                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5013  0D75  0020               	movlb	0	; select bank0
  5014  0D76  086C               	movf	_Sw,w
  5015  0D77  0086               	movwf	6
  5016  0D78  3001               	movlw	1	; select bank2/3
  5017  0D79  0087               	movwf	7
  5018  0D7A  3000               	movlw	0
  5019  0D7B  1B01               	btfsc	1,6
  5020  0D7C  3001               	movlw	1
  5021  0D7D  00DD               	movwf	setRF_DimmerLights@on
  5022  0D7E  0867               	movf	Sw_DimmerOnFunc@sw,w
  5023  0D7F  318A  22D6  318D   	fcall	_setRF_DimmerLights
  5024                           
  5025                           ;Switch_B1.c: 274: setTxData();
  5026  0D82  3185  25E8         	fcall	_setTxData
  5027                           
  5028                           ;Switch_B1.c: 276: } else {
  5029  0D84  0008               	return
  5030  0D85                     l8899:	
  5031                           
  5032                           ;Switch_B1.c: 277: Sw->Status = 0;
  5033  0D85  0020               	movlb	0	; select bank0
  5034  0D86  086C               	movf	_Sw,w
  5035  0D87  0086               	movwf	6
  5036  0D88  3001               	movlw	1	; select bank2/3
  5037  0D89  0087               	movwf	7
  5038  0D8A  1301               	bcf	1,6
  5039                           
  5040                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5041  0D8B  086C               	movf	_Sw,w
  5042  0D8C  0086               	movwf	6
  5043  0D8D  3001               	movlw	1	; select bank2/3
  5044  0D8E  0087               	movwf	7
  5045  0D8F  3000               	movlw	0
  5046  0D90  1B01               	btfsc	1,6
  5047  0D91  3001               	movlw	1
  5048  0D92  00A2               	movwf	setRFSW_Status@command
  5049  0D93  0867               	movf	Sw_DimmerOnFunc@sw,w
  5050  0D94  319F  2733         	fcall	_setRFSW_Status
  5051  0D96  0008               	return
  5052  0D97                     __end_of_Sw_DimmerOnFunc:	
  5053                           
  5054                           	psect	text11
  5055  0B42                     __ptext11:	
  5056 ;; *************** function _Sw_DimmerOffFunc *****************
  5057 ;; Defined at:
  5058 ;;		line 284 in file "../src/Switch_B1.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  sw              1    wreg     unsigned char 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  sw              1   68[BANK0 ] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;		None               void
  5065 ;; Registers used:
  5066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;Total ram usage:        3 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    9
  5079 ;; This function calls:
  5080 ;;		_setDelayOff_GO
  5081 ;;		_setDimmerLights_AdjGo
  5082 ;;		_setDimmerLights_Switch
  5083 ;;		_setDimmerLights_Trigger
  5084 ;;		_setDimmerLights_TriggerAdj
  5085 ;;		_setRF_DimmerLights
  5086 ;;		_setTxData
  5087 ;; This function is called by:
  5088 ;;		_setSw_Main
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _Sw_DimmerOffFunc
  5094  0B42                     _Sw_DimmerOffFunc:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5098                           ;Sw_DimmerOffFunc@sw stored from wreg
  5099  0B42  0020               	movlb	0	; select bank0
  5100  0B43  00E4               	movwf	Sw_DimmerOffFunc@sw
  5101                           
  5102                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5103  0B44  086C               	movf	_Sw,w
  5104  0B45  0086               	movwf	6
  5105  0B46  3001               	movlw	1	; select bank2/3
  5106  0B47  0087               	movwf	7
  5107  0B48  1F81               	btfss	1,7
  5108  0B49  0008               	return
  5109                           
  5110                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5111  0B4A  086C               	movf	_Sw,w
  5112  0B4B  0086               	movwf	6
  5113  0B4C  3001               	movlw	1	; select bank2/3
  5114  0B4D  0087               	movwf	7
  5115  0B4E  1381               	bcf	1,7
  5116                           
  5117                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5118  0B4F  086C               	movf	_Sw,w
  5119  0B50  0086               	movwf	6
  5120  0B51  3001               	movlw	1	; select bank2/3
  5121  0B52  0087               	movwf	7
  5122  0B53  1F01               	btfss	1,6
  5123  0B54  2B8D               	goto	l8969
  5124                           
  5125                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5126  0B55  0A6C               	incf	_Sw,w
  5127  0B56  0086               	movwf	6
  5128  0B57  3001               	movlw	1	; select bank2/3
  5129  0B58  0087               	movwf	7
  5130  0B59  1C01               	btfss	1,0
  5131  0B5A  0008               	return
  5132                           
  5133                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5134  0B5B  0A6C               	incf	_Sw,w
  5135  0B5C  0086               	movwf	6
  5136  0B5D  3001               	movlw	1	; select bank2/3
  5137  0B5E  0087               	movwf	7
  5138  0B5F  1001               	bcf	1,0
  5139                           
  5140                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5141  0B60  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5142  0B61  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5143  0B62  0864               	movf	Sw_DimmerOffFunc@sw,w
  5144  0B63  319F  27CE  318B   	fcall	_setDimmerLights_TriggerAdj
  5145                           
  5146                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5147  0B66  0020               	movlb	0	; select bank0
  5148  0B67  01A2               	clrf	setDimmerLights_AdjGo@command
  5149  0B68  0864               	movf	Sw_DimmerOffFunc@sw,w
  5150  0B69  319F  27BE  318B   	fcall	_setDimmerLights_AdjGo
  5151                           
  5152                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5153  0B6C  0020               	movlb	0	; select bank0
  5154  0B6D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5155  0B6E  3E1A               	addlw	26
  5156  0B6F  076D               	addwf	_product,w
  5157  0B70  00E2               	movwf	??_Sw_DimmerOffFunc
  5158  0B71  0862               	movf	??_Sw_DimmerOffFunc,w
  5159  0B72  0086               	movwf	6
  5160  0B73  3002               	movlw	2	; select bank4/5
  5161  0B74  0087               	movwf	7
  5162  0B75  0801               	movf	1,w
  5163  0B76  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5164  0B77  086D               	movf	_product,w
  5165  0B78  3E11               	addlw	17
  5166  0B79  0086               	movwf	6
  5167  0B7A  3002               	movlw	2	; select bank4/5
  5168  0B7B  0087               	movwf	7
  5169  0B7C  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5170  0B7D  0081               	movwf	1
  5171                           
  5172                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5173  0B7E  086C               	movf	_Sw,w
  5174  0B7F  0086               	movwf	6
  5175  0B80  3001               	movlw	1	; select bank2/3
  5176  0B81  0087               	movwf	7
  5177  0B82  3000               	movlw	0
  5178  0B83  1B01               	btfsc	1,6
  5179  0B84  3001               	movlw	1
  5180  0B85  00DD               	movwf	setRF_DimmerLights@on
  5181  0B86  0864               	movf	Sw_DimmerOffFunc@sw,w
  5182  0B87  318A  22D6  318B   	fcall	_setRF_DimmerLights
  5183                           
  5184                           ;Switch_B1.c: 295: setTxData();
  5185  0B8A  3185  25E8         	fcall	_setTxData
  5186                           
  5187                           ;Switch_B1.c: 297: }
  5188                           ;Switch_B1.c: 298: } else {
  5189  0B8C  0008               	return
  5190  0B8D                     l8969:	
  5191                           
  5192                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5193  0B8D  0020               	movlb	0	; select bank0
  5194  0B8E  01A2               	clrf	setDimmerLights_Trigger@command
  5195  0B8F  0AA2               	incf	setDimmerLights_Trigger@command,f
  5196  0B90  0864               	movf	Sw_DimmerOffFunc@sw,w
  5197  0B91  319F  278E  318B   	fcall	_setDimmerLights_Trigger
  5198                           
  5199                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5200  0B94  0020               	movlb	0	; select bank0
  5201  0B95  01A2               	clrf	setDimmerLights_Switch@command
  5202  0B96  0864               	movf	Sw_DimmerOffFunc@sw,w
  5203  0B97  319F  277E  318B   	fcall	_setDimmerLights_Switch
  5204                           
  5205                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5206  0B9A  0020               	movlb	0	; select bank0
  5207  0B9B  01AA               	clrf	setDelayOff_GO@command
  5208  0B9C  01AB               	clrf	setDelayOff_GO@value
  5209  0B9D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5210  0B9E  3188  207D  318B   	fcall	_setDelayOff_GO
  5211                           
  5212                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5213  0BA1  0020               	movlb	0	; select bank0
  5214  0BA2  086C               	movf	_Sw,w
  5215  0BA3  0086               	movwf	6
  5216  0BA4  3001               	movlw	1	; select bank2/3
  5217  0BA5  0087               	movwf	7
  5218  0BA6  3000               	movlw	0
  5219  0BA7  1B01               	btfsc	1,6
  5220  0BA8  3001               	movlw	1
  5221  0BA9  00DD               	movwf	setRF_DimmerLights@on
  5222  0BAA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5223  0BAB  318A  22D6  318B   	fcall	_setRF_DimmerLights
  5224                           
  5225                           ;Switch_B1.c: 304: setTxData();
  5226  0BAE  3185  25E8         	fcall	_setTxData
  5227  0BB0  0008               	return
  5228  0BB1                     __end_of_Sw_DimmerOffFunc:	
  5229                           
  5230                           	psect	text12
  5231  08DC                     __ptext12:	
  5232 ;; *************** function _Sw_DimmerAdjFunc *****************
  5233 ;; Defined at:
  5234 ;;		line 311 in file "../src/Switch_B1.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  sw              1    wreg     unsigned char 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  sw              1    9[BANK0 ] unsigned char 
  5239 ;;  Idle            1    8[BANK0 ] unsigned char 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;		None               void
  5242 ;; Registers used:
  5243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;Total ram usage:        6 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    7
  5256 ;; This function calls:
  5257 ;;		_setDimmerLights_AdjGo
  5258 ;;		_setDimmerLights_TriggerAdj
  5259 ;;		_setRFSW_Status
  5260 ;; This function is called by:
  5261 ;;		_setSw_Main
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _Sw_DimmerAdjFunc
  5267  08DC                     _Sw_DimmerAdjFunc:	
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5271                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5272  08DC  0020               	movlb	0	; select bank0
  5273  08DD  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5274                           
  5275                           ;Switch_B1.c: 312: char Idle = 1;
  5276  08DE  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5277  08DF  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5278                           
  5279                           ;Switch_B1.c: 315: if (sw == 1) {
  5280  08E0  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5281  08E1  3A01               	xorlw	1
  5282  08E2  1D03               	skipz
  5283  08E3  28EF               	goto	l8917
  5284                           
  5285                           ;Switch_B1.c: 316: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5286  08E4  01A5               	clrf	_Sw_DimmerAdjFunc$6132
  5287  08E5  0022               	movlb	2	; select bank2
  5288  08E6  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  5289  08E7  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  5290  08E8  28EC               	goto	l8915
  5291  08E9  0020               	movlb	0	; select bank0
  5292  08EA  01A5               	clrf	_Sw_DimmerAdjFunc$6132
  5293  08EB  0AA5               	incf	_Sw_DimmerAdjFunc$6132,f
  5294  08EC                     l8915:	
  5295  08EC  0020               	movlb	0	; select bank0
  5296  08ED  0825               	movf	_Sw_DimmerAdjFunc$6132,w
  5297  08EE  290C               	goto	L4
  5298  08EF                     l8917:	
  5299                           ;Switch_B1.c: 317: } else if (sw == 2) {
  5300                           
  5301  08EF  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5302  08F0  3A02               	xorlw	2
  5303  08F1  1D03               	skipz
  5304  08F2  28FE               	goto	l8929
  5305                           
  5306                           ;Switch_B1.c: 318: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5307  08F3  01A6               	clrf	_Sw_DimmerAdjFunc$6133
  5308  08F4  0022               	movlb	2	; select bank2
  5309  08F5  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  5310  08F6  19E3               	btfsc	(_DimmerLights3^(0+256)+8),3
  5311  08F7  28FB               	goto	l8927
  5312  08F8  0020               	movlb	0	; select bank0
  5313  08F9  01A6               	clrf	_Sw_DimmerAdjFunc$6133
  5314  08FA  0AA6               	incf	_Sw_DimmerAdjFunc$6133,f
  5315  08FB                     l8927:	
  5316  08FB  0020               	movlb	0	; select bank0
  5317  08FC  0826               	movf	_Sw_DimmerAdjFunc$6133,w
  5318  08FD  290C               	goto	L4
  5319  08FE                     l8929:	
  5320                           ;Switch_B1.c: 319: } else if (sw == 3) {
  5321                           
  5322  08FE  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5323  08FF  3A03               	xorlw	3
  5324  0900  1D03               	skipz
  5325  0901  290F               	goto	l2737
  5326                           
  5327                           ;Switch_B1.c: 320: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5328  0902  01A7               	clrf	_Sw_DimmerAdjFunc$6134
  5329  0903  0022               	movlb	2	; select bank2
  5330  0904  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  5331  0905  19D4               	btfsc	(_DimmerLights2^(0+256)+8),3
  5332  0906  290A               	goto	l8939
  5333  0907  0020               	movlb	0	; select bank0
  5334  0908  01A7               	clrf	_Sw_DimmerAdjFunc$6134
  5335  0909  0AA7               	incf	_Sw_DimmerAdjFunc$6134,f
  5336  090A                     l8939:	
  5337  090A  0020               	movlb	0	; select bank0
  5338  090B  0827               	movf	_Sw_DimmerAdjFunc$6134,w
  5339  090C                     L4:	
  5340  090C  00A4               	movwf	??_Sw_DimmerAdjFunc
  5341  090D  0824               	movf	??_Sw_DimmerAdjFunc,w
  5342  090E  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5343  090F                     l2737:	
  5344                           
  5345                           ;Switch_B1.c: 321: }
  5346                           ;Switch_B1.c: 332: if (Idle == 1) {
  5347  090F  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5348  0910  3A01               	xorlw	1
  5349  0911  1D03               	skipz
  5350  0912  0008               	return
  5351                           
  5352                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5353  0913  086C               	movf	_Sw,w
  5354  0914  0086               	movwf	6
  5355  0915  3001               	movlw	1	; select bank2/3
  5356  0916  0087               	movwf	7
  5357  0917  1F81               	btfss	1,7
  5358  0918  0008               	return
  5359                           
  5360                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5361  0919  086C               	movf	_Sw,w
  5362  091A  0086               	movwf	6
  5363  091B  3001               	movlw	1	; select bank2/3
  5364  091C  0087               	movwf	7
  5365  091D  1581               	bsf	1,3
  5366                           
  5367                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5368  091E  0A6C               	incf	_Sw,w
  5369  091F  0086               	movwf	6
  5370  0920  3001               	movlw	1	; select bank2/3
  5371  0921  0087               	movwf	7
  5372  0922  1401               	bsf	1,0
  5373                           
  5374                           ;Switch_B1.c: 336: Sw->Status = 1;
  5375  0923  086C               	movf	_Sw,w
  5376  0924  0086               	movwf	6
  5377  0925  3001               	movlw	1	; select bank2/3
  5378  0926  0087               	movwf	7
  5379  0927  1701               	bsf	1,6
  5380                           
  5381                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5382  0928  01A2               	clrf	setRFSW_Status@command
  5383  0929  0AA2               	incf	setRFSW_Status@command,f
  5384  092A  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5385  092B  319F  2733  3188   	fcall	_setRFSW_Status
  5386                           
  5387                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5388  092E  0020               	movlb	0	; select bank0
  5389  092F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5390  0930  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5391  0931  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5392  0932  319F  27CE  3188   	fcall	_setDimmerLights_TriggerAdj
  5393                           
  5394                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5395  0935  0020               	movlb	0	; select bank0
  5396  0936  01A2               	clrf	setDimmerLights_AdjGo@command
  5397  0937  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5398  0938  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5399  0939  319F  27BE         	fcall	_setDimmerLights_AdjGo
  5400  093B  0008               	return
  5401  093C                     __end_of_Sw_DimmerAdjFunc:	
  5402                           
  5403                           	psect	text13
  5404  1FCE                     __ptext13:	
  5405 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5406 ;; Defined at:
  5407 ;;		line 720 in file "../src/Dimmer_B1.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  lights          1    wreg     unsigned char 
  5410 ;;  command         1    2[BANK0 ] unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  lights          1    3[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        2 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    6
  5429 ;; This function calls:
  5430 ;;		_DimmerLightsPointSelect
  5431 ;; This function is called by:
  5432 ;;		_Sw_DimmerOffFunc
  5433 ;;		_Sw_DimmerAdjFunc
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _setDimmerLights_TriggerAdj
  5439  1FCE                     _setDimmerLights_TriggerAdj:	
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5443                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5444  1FCE  0020               	movlb	0	; select bank0
  5445  1FCF  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5446                           
  5447                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  5448  1FD0  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5449  1FD1  3191  219A         	fcall	_DimmerLightsPointSelect
  5450                           
  5451                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  5452  1FD3  0020               	movlb	0	; select bank0
  5453  1FD4  086B               	movf	_DimmerLights,w
  5454  1FD5  3E08               	addlw	8
  5455  1FD6  0086               	movwf	6
  5456  1FD7  3001               	movlw	1	; select bank2/3
  5457  1FD8  0087               	movwf	7
  5458  1FD9  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5459  1FDA  1201               	bcf	1,4
  5460  1FDB  1D03               	skipz
  5461  1FDC  1601               	bsf	1,4
  5462  1FDD  0008               	return
  5463  1FDE                     __end_of_setDimmerLights_TriggerAdj:	
  5464                           
  5465                           	psect	text14
  5466  1FBE                     __ptext14:	
  5467 ;; *************** function _setDimmerLights_AdjGo *****************
  5468 ;; Defined at:
  5469 ;;		line 708 in file "../src/Dimmer_B1.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  lights          1    wreg     unsigned char 
  5472 ;;  command         1    2[BANK0 ] unsigned char 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  lights          1    3[BANK0 ] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;		None               void
  5477 ;; Registers used:
  5478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5484 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;Total ram usage:        2 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    6
  5491 ;; This function calls:
  5492 ;;		_DimmerLightsPointSelect
  5493 ;; This function is called by:
  5494 ;;		_Sw_DimmerOffFunc
  5495 ;;		_Sw_DimmerAdjFunc
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _setDimmerLights_AdjGo
  5501  1FBE                     _setDimmerLights_AdjGo:	
  5502                           
  5503                           ;incstack = 0
  5504                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5505                           ;setDimmerLights_AdjGo@lights stored from wreg
  5506  1FBE  0020               	movlb	0	; select bank0
  5507  1FBF  00A3               	movwf	setDimmerLights_AdjGo@lights
  5508                           
  5509                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  5510  1FC0  0823               	movf	setDimmerLights_AdjGo@lights,w
  5511  1FC1  3191  219A         	fcall	_DimmerLightsPointSelect
  5512                           
  5513                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  5514  1FC3  0020               	movlb	0	; select bank0
  5515  1FC4  086B               	movf	_DimmerLights,w
  5516  1FC5  3E08               	addlw	8
  5517  1FC6  0086               	movwf	6
  5518  1FC7  3001               	movlw	1	; select bank2/3
  5519  1FC8  0087               	movwf	7
  5520  1FC9  0822               	movf	setDimmerLights_AdjGo@command,w
  5521  1FCA  1181               	bcf	1,3
  5522  1FCB  1D03               	skipz
  5523  1FCC  1581               	bsf	1,3
  5524  1FCD  0008               	return
  5525  1FCE                     __end_of_setDimmerLights_AdjGo:	
  5526                           
  5527                           	psect	text15
  5528  1072                     __ptext15:	
  5529 ;; *************** function _Switch_Initialization *****************
  5530 ;; Defined at:
  5531 ;;		line 41 in file "../src/Switch_B1.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    8
  5552 ;; This function calls:
  5553 ;;		_TouchPower
  5554 ;;		_setSw_Initialization
  5555 ;; This function is called by:
  5556 ;;		_main
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           
  5561                           ;psect for function _Switch_Initialization
  5562  1072                     _Switch_Initialization:	
  5563                           
  5564                           ;Switch_B1.c: 42: TouchPower();
  5565                           
  5566                           ;incstack = 0
  5567                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5568  1072  319F  2760  3190   	fcall	_TouchPower
  5569                           
  5570                           ;Switch_B1.c: 44: WPUB1 = 0;
  5571  1075  0024               	movlb	4	; select bank4
  5572  1076  108D               	bcf	13,1	;volatile
  5573                           
  5574                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5575  1077  3001               	movlw	1
  5576  1078  319E  2694  3190   	fcall	_setSw_Initialization
  5577                           
  5578                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5579  107B  3002               	movlw	2
  5580  107C  319E  2694  3190   	fcall	_setSw_Initialization
  5581                           
  5582                           ;Switch_B1.c: 61: setSw_Initialization(3);
  5583  107F  3003               	movlw	3
  5584  1080  319E  2694         	fcall	_setSw_Initialization
  5585  1082  0008               	return
  5586  1083                     __end_of_Switch_Initialization:	
  5587                           
  5588                           	psect	text16
  5589  1E94                     __ptext16:	
  5590 ;; *************** function _setSw_Initialization *****************
  5591 ;; Defined at:
  5592 ;;		line 83 in file "../src/Switch_B1.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  sw              1    wreg     unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  sw              1    3[BANK0 ] unsigned char 
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;Total ram usage:        1 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    7
  5613 ;; This function calls:
  5614 ;;		_setLED
  5615 ;; This function is called by:
  5616 ;;		_Switch_Initialization
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           
  5621                           ;psect for function _setSw_Initialization
  5622  1E94                     _setSw_Initialization:	
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5626                           ;setSw_Initialization@sw stored from wreg
  5627  1E94  0020               	movlb	0	; select bank0
  5628  1E95  00A3               	movwf	setSw_Initialization@sw
  5629                           
  5630                           ;Switch_B1.c: 84: setLED(sw, 1);
  5631  1E96  01A1               	clrf	setLED@command
  5632  1E97  0AA1               	incf	setLED@command,f
  5633  1E98  0823               	movf	setSw_Initialization@sw,w
  5634  1E99  318B  23B1         	fcall	_setLED
  5635  1E9B  0008               	return
  5636  1E9C                     __end_of_setSw_Initialization:	
  5637                           
  5638                           	psect	text17
  5639  1F60                     __ptext17:	
  5640 ;; *************** function _TouchPower *****************
  5641 ;; Defined at:
  5642 ;;		line 10 in file "../src/Switch_B1.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;		None               void
  5649 ;; Registers used:
  5650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;Total ram usage:        0 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    6
  5663 ;; This function calls:
  5664 ;;		_Timeout_Counter
  5665 ;;		_set_TimeoutCleared
  5666 ;; This function is called by:
  5667 ;;		_Switch_Initialization
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _TouchPower
  5673  1F60                     _TouchPower:	
  5674                           
  5675                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5679  1F60  2F66               	goto	l9405
  5680  1F61                     l2655:	
  5681                           
  5682                           ;Switch_B1.c: 12: RC5 = 1;
  5683  1F61  0020               	movlb	0	; select bank0
  5684  1F62  168E               	bsf	14,5	;volatile
  5685                           
  5686                           ;Switch_B1.c: 13: Timeout_Counter();
  5687  1F63  3190  20F3  319F   	fcall	_Timeout_Counter
  5688  1F66                     l9405:	
  5689  1F66  0020               	movlb	0	; select bank0
  5690  1F67  1A8E               	btfsc	14,5	;volatile
  5691  1F68  2F6C               	goto	l9409
  5692  1F69  0021               	movlb	1	; select bank1
  5693  1F6A  1D2F               	btfss	(_myMain^(0+128)+15),2
  5694  1F6B  2F61               	goto	l2655
  5695  1F6C                     l9409:	
  5696                           
  5697                           ;Switch_B1.c: 14: }
  5698                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5699  1F6C  319E  266E         	fcall	_set_TimeoutCleared
  5700  1F6E  0008               	return
  5701  1F6F                     __end_of_TouchPower:	
  5702                           
  5703                           	psect	text18
  5704  1E5B                     __ptext18:	
  5705 ;; *************** function _RF_Main *****************
  5706 ;; Defined at:
  5707 ;;		line 16 in file "../src/RF_Control_B1.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;		None
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;		None
  5712 ;; Return value:  Size  Location     Type
  5713 ;;		None               void
  5714 ;; Registers used:
  5715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;Total ram usage:        0 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:   14
  5728 ;; This function calls:
  5729 ;;		_setRF_Main
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _RF_Main
  5737  1E5B                     _RF_Main:	
  5738                           
  5739                           ;RF_Control_B1.c: 18: setRF_Main();
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5743  1E5B  3184  2456         	fcall	_setRF_Main
  5744  1E5D  0008               	return
  5745  1E5E                     __end_of_RF_Main:	
  5746                           
  5747                           	psect	text19
  5748  0456                     __ptext19:	
  5749 ;; *************** function _setRF_Main *****************
  5750 ;; Defined at:
  5751 ;;		line 52 in file "../src/RF_Control_B1.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  Receive_OK      1    0        unsigned char 
  5756 ;;  loop_f          1    0        unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;		None               void
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;Total ram usage:        2 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:   13
  5773 ;; This function calls:
  5774 ;;		_CC2500_ReadStatus
  5775 ;;		_CC2500_RxData
  5776 ;;		_CC2500_TxData
  5777 ;;		_CC2500_WriteCommand
  5778 ;;		_getBuz_GO
  5779 ;;		_getRxData
  5780 ;; This function is called by:
  5781 ;;		_RF_Main
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _setRF_Main
  5787  0456                     _setRF_Main:	
  5788                           
  5789                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5790                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5794  0456  0021               	movlb	1	; select bank1
  5795  0457  1C3E               	btfss	_RF1^(0+128),0
  5796  0458  0008               	return
  5797                           
  5798                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5799  0459  319F  27EF  3184   	fcall	_getBuz_GO
  5800  045C  0020               	movlb	0	; select bank0
  5801  045D  0821               	movf	?_getBuz_GO+1,w
  5802  045E  0420               	iorwf	?_getBuz_GO,w
  5803  045F  1D03               	skipz
  5804  0460  0008               	return
  5805                           
  5806                           ;RF_Control_B1.c: 60: RF1.Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5807  0461  01E8               	clrf	_setRF_Main$5152
  5808  0462  0AE8               	incf	_setRF_Main$5152,f
  5809  0463  1C0C               	btfss	12,0	;volatile
  5810  0464  1B0C               	btfsc	12,6	;volatile
  5811  0465  2C68               	goto	l9303
  5812  0466  1E0C               	btfss	12,4	;volatile
  5813  0467  01E8               	clrf	_setRF_Main$5152
  5814  0468                     l9303:	
  5815  0468  0868               	movf	_setRF_Main$5152,w
  5816  0469  0021               	movlb	1	; select bank1
  5817  046A  13BE               	bcf	_RF1^(0+128),7
  5818  046B  1D03               	skipz
  5819  046C  17BE               	bsf	_RF1^(0+128),7
  5820                           
  5821                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  5822  046D  1BBE               	btfsc	_RF1^(0+128),7
  5823  046E  1B3E               	btfsc	_RF1^(0+128),6
  5824  046F  2C74               	goto	l2207
  5825                           
  5826                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  5827  0470  01C0               	clrf	(_RF1^(0+128)+2)
  5828                           
  5829                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  5830  0471  14BF               	bsf	(_RF1^(0+128)+1),1
  5831                           
  5832                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  5833  0472  11BE               	bcf	_RF1^(0+128),3
  5834                           
  5835                           ;RF_Control_B1.c: 76: } else {
  5836  0473  0008               	return
  5837  0474                     l2207:	
  5838                           
  5839                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5840  0474  18BF               	btfsc	(_RF1^(0+128)+1),1
  5841  0475  1B3E               	btfsc	_RF1^(0+128),6
  5842  0476  2C84               	goto	l9325
  5843                           
  5844                           ;RF_Control_B1.c: 78: RF1.Count++;
  5845  0477  3001               	movlw	1
  5846  0478  0020               	movlb	0	; select bank0
  5847  0479  00E7               	movwf	??_setRF_Main
  5848  047A  0867               	movf	??_setRF_Main,w
  5849  047B  0021               	movlb	1	; select bank1
  5850  047C  07C0               	addwf	(_RF1^(0+128)+2),f
  5851                           
  5852                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5853  047D  0840               	movf	(_RF1^(0+128)+2),w
  5854  047E  0644               	xorwf	(_RF1^(0+128)+6),w
  5855  047F  1D03               	skipz
  5856  0480  2CF4               	goto	l9379
  5857                           
  5858                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5859  0481  01C0               	clrf	(_RF1^(0+128)+2)
  5860                           
  5861                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5862  0482  10BF               	bcf	(_RF1^(0+128)+1),1
  5863                           
  5864                           ;RF_Control_B1.c: 82: }
  5865                           ;RF_Control_B1.c: 83: } else {
  5866  0483  2CF4               	goto	l9379
  5867  0484                     l9325:	
  5868                           
  5869                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5870  0484  01C0               	clrf	(_RF1^(0+128)+2)
  5871                           
  5872                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5873  0485  10BF               	bcf	(_RF1^(0+128)+1),1
  5874                           
  5875                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5876  0486  193E               	btfsc	_RF1^(0+128),2
  5877  0487  1B3E               	btfsc	_RF1^(0+128),6
  5878  0488  2CA4               	goto	l2212
  5879                           
  5880                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5881  0489  113E               	bcf	_RF1^(0+128),2
  5882                           
  5883                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5884  048A  11BE               	bcf	_RF1^(0+128),3
  5885                           
  5886                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5887  048B  10BE               	bcf	_RF1^(0+128),1
  5888                           
  5889                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5890  048C  303B               	movlw	59
  5891  048D  3188  2000  3184   	fcall	_CC2500_ReadStatus
  5892                           
  5893                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5894  0490  0021               	movlb	1	; select bank1
  5895  0491  0857               	movf	_s_data^(0+128),w
  5896  0492  1903               	btfsc	3,2
  5897  0493  2CA0               	goto	l2213
  5898                           
  5899                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5900  0494  3036               	movlw	54
  5901  0495  3191  214D  3184   	fcall	_CC2500_WriteCommand
  5902                           
  5903                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5904  0498  303B               	movlw	59
  5905  0499  3191  214D  3184   	fcall	_CC2500_WriteCommand
  5906                           
  5907                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5908  049C  303A               	movlw	58
  5909  049D  3191  214D  3184   	fcall	_CC2500_WriteCommand
  5910  04A0                     l2213:	
  5911                           
  5912                           ;RF_Control_B1.c: 97: }
  5913                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5914  04A0  3189  219D  3184   	fcall	_CC2500_TxData
  5915                           
  5916                           ;RF_Control_B1.c: 100: } else {
  5917  04A3  2CF4               	goto	l9379
  5918  04A4                     l2212:	
  5919                           
  5920                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5921  04A4  1DBE               	btfss	_RF1^(0+128),3
  5922  04A5  2CDF               	goto	l2215
  5923                           
  5924                           ;RF_Control_B1.c: 103: CC2500_RxData();
  5925  04A6  318C  2422  3184   	fcall	_CC2500_RxData
  5926                           
  5927                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  5928  04A9  0021               	movlb	1	; select bank1
  5929  04AA  1CBE               	btfss	_RF1^(0+128),1
  5930  04AB  2CF4               	goto	l9379
  5931                           
  5932                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  5933  04AC  10BE               	bcf	_RF1^(0+128),1
  5934                           
  5935                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  5936  04AD  12BF               	bcf	(_RF1^(0+128)+1),5
  5937                           
  5938                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  5939  04AE  01C6               	clrf	(_RF1^(0+128)+8)
  5940  04AF  01C7               	clrf	((_RF1+1)^(0+128)+8)
  5941                           
  5942                           ;RF_Control_B1.c: 115: getRxData();
  5943  04B0  318A  2202  3184   	fcall	_getRxData
  5944                           
  5945                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  5946  04B3  0021               	movlb	1	; select bank1
  5947  04B4  14BF               	bsf	(_RF1^(0+128)+1),1
  5948                           
  5949                           ;RF_Control_B1.c: 119: RB5 = RB5 == 1 ? 0 : 1;
  5950  04B5  3020               	movlw	32
  5951  04B6  0020               	movlb	0	; select bank0
  5952  04B7  068D               	xorwf	13,f
  5953                           
  5954                           ;RF_Control_B1.c: 120: if (RF1.Checked == 1) {
  5955  04B8  0021               	movlb	1	; select bank1
  5956  04B9  1DBF               	btfss	(_RF1^(0+128)+1),3
  5957  04BA  2CC7               	goto	l9363
  5958                           
  5959                           ;RF_Control_B1.c: 121: if (RF1.RunTime > 20) {
  5960  04BB  3015               	movlw	21
  5961  04BC  0244               	subwf	(_RF1^(0+128)+6),w
  5962  04BD  1C03               	skipc
  5963  04BE  2CC5               	goto	l9361
  5964                           
  5965                           ;RF_Control_B1.c: 122: RF1.RunTime = 20;
  5966  04BF  3014               	movlw	20
  5967  04C0  0020               	movlb	0	; select bank0
  5968  04C1  00E7               	movwf	??_setRF_Main
  5969  04C2  0867               	movf	??_setRF_Main,w
  5970  04C3  0021               	movlb	1	; select bank1
  5971  04C4  00C4               	movwf	(_RF1^(0+128)+6)
  5972  04C5                     l9361:	
  5973                           
  5974                           ;RF_Control_B1.c: 123: }
  5975                           ;RF_Control_B1.c: 124: RF1.CheckCount = 0;
  5976  04C5  01C1               	clrf	(_RF1^(0+128)+3)
  5977                           
  5978                           ;RF_Control_B1.c: 125: } else {
  5979  04C6  2CF4               	goto	l9379
  5980  04C7                     l9363:	
  5981                           
  5982                           ;RF_Control_B1.c: 126: RF1.CheckCount++;
  5983  04C7  3001               	movlw	1
  5984  04C8  0020               	movlb	0	; select bank0
  5985  04C9  00E7               	movwf	??_setRF_Main
  5986  04CA  0867               	movf	??_setRF_Main,w
  5987  04CB  0021               	movlb	1	; select bank1
  5988  04CC  07C1               	addwf	(_RF1^(0+128)+3),f
  5989                           
  5990                           ;RF_Control_B1.c: 127: if (RF1.CheckCount == 2) {
  5991  04CD  0841               	movf	(_RF1^(0+128)+3),w
  5992  04CE  3A02               	xorlw	2
  5993  04CF  1D03               	skipz
  5994  04D0  2CF4               	goto	l9379
  5995                           
  5996                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  5997  04D1  01C1               	clrf	(_RF1^(0+128)+3)
  5998                           
  5999                           ;RF_Control_B1.c: 129: RF1.CheckedCounter = 0;
  6000  04D2  01C2               	clrf	(_RF1^(0+128)+4)
  6001  04D3  01C3               	clrf	((_RF1+1)^(0+128)+4)
  6002                           
  6003                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 200) {
  6004  04D4  30C8               	movlw	200
  6005  04D5  0244               	subwf	(_RF1^(0+128)+6),w
  6006  04D6  1803               	skipnc
  6007  04D7  2CF4               	goto	l9379
  6008                           
  6009                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  6010  04D8  300A               	movlw	10
  6011  04D9  0020               	movlb	0	; select bank0
  6012  04DA  00E7               	movwf	??_setRF_Main
  6013  04DB  0867               	movf	??_setRF_Main,w
  6014  04DC  0021               	movlb	1	; select bank1
  6015  04DD  07C4               	addwf	(_RF1^(0+128)+6),f
  6016                           
  6017                           ;RF_Control_B1.c: 132: }
  6018                           ;RF_Control_B1.c: 133: }
  6019                           ;RF_Control_B1.c: 134: }
  6020                           ;RF_Control_B1.c: 135: }
  6021                           ;RF_Control_B1.c: 136: } else {
  6022  04DE  2CF4               	goto	l9379
  6023  04DF                     l2215:	
  6024                           
  6025                           ;RF_Control_B1.c: 138: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6026  04DF  1DBE               	btfss	_RF1^(0+128),3
  6027  04E0  18BE               	btfsc	_RF1^(0+128),1
  6028  04E1  2CF4               	goto	l9379
  6029                           
  6030                           ;RF_Control_B1.c: 139: RF1.RxStatus = 1;
  6031  04E2  15BE               	bsf	_RF1^(0+128),3
  6032                           
  6033                           ;RF_Control_B1.c: 140: RF1.Correction = 1;
  6034  04E3  16BF               	bsf	(_RF1^(0+128)+1),5
  6035                           
  6036                           ;RF_Control_B1.c: 142: CC2500_WriteCommand(0x36);
  6037  04E4  3036               	movlw	54
  6038  04E5  3191  214D  3184   	fcall	_CC2500_WriteCommand
  6039                           
  6040                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x3B);
  6041  04E8  303B               	movlw	59
  6042  04E9  3191  214D  3184   	fcall	_CC2500_WriteCommand
  6043                           
  6044                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x3A);
  6045  04EC  303A               	movlw	58
  6046  04ED  3191  214D  3184   	fcall	_CC2500_WriteCommand
  6047                           
  6048                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x34);
  6049  04F0  3034               	movlw	52
  6050  04F1  3191  214D  3184   	fcall	_CC2500_WriteCommand
  6051  04F4                     l9379:	
  6052                           
  6053                           ;RF_Control_B1.c: 147: }
  6054                           ;RF_Control_B1.c: 149: }
  6055                           ;RF_Control_B1.c: 150: }
  6056                           ;RF_Control_B1.c: 151: }
  6057                           ;RF_Control_B1.c: 152: if (RF1.RxStatus == 1) {
  6058  04F4  0021               	movlb	1	; select bank1
  6059  04F5  1DBE               	btfss	_RF1^(0+128),3
  6060  04F6  2D0F               	goto	l9391
  6061                           
  6062                           ;RF_Control_B1.c: 153: if (RF1.RunTime > 20) {
  6063  04F7  3015               	movlw	21
  6064  04F8  0244               	subwf	(_RF1^(0+128)+6),w
  6065  04F9  1C03               	skipc
  6066  04FA  2D0F               	goto	l9391
  6067                           
  6068                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  6069  04FB  3001               	movlw	1
  6070  04FC  07C2               	addwf	(_RF1^(0+128)+4),f
  6071  04FD  3000               	movlw	0
  6072  04FE  3DC3               	addwfc	((_RF1+1)^(0+128)+4),f
  6073                           
  6074                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 1000) {
  6075  04FF  3004               	movlw	4
  6076  0500  3EBE               	addlw	_RF1& (0+255)
  6077  0501  0086               	movwf	6
  6078  0502  0187               	clrf	7
  6079  0503  3F40               	moviw [0]fsr1
  6080  0504  3AE8               	xorlw	232
  6081  0505  1D03               	skipz
  6082  0506  2D09               	goto	u9995
  6083  0507  3F41               	moviw [1]fsr1
  6084  0508  3A03               	xorlw	3
  6085  0509                     u9995:	
  6086  0509  1D03               	skipz
  6087  050A  2D0F               	goto	l9391
  6088                           
  6089                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  6090  050B  01C2               	clrf	(_RF1^(0+128)+4)
  6091  050C  01C3               	clrf	((_RF1+1)^(0+128)+4)
  6092                           
  6093                           ;RF_Control_B1.c: 157: RF1.RunTime -= 10;
  6094  050D  300A               	movlw	10
  6095  050E  02C4               	subwf	(_RF1^(0+128)+6),f
  6096  050F                     l9391:	
  6097                           
  6098                           ;RF_Control_B1.c: 158: }
  6099                           ;RF_Control_B1.c: 159: }
  6100                           ;RF_Control_B1.c: 160: }
  6101                           ;RF_Control_B1.c: 161: if (RF1.Correction == 1) {
  6102  050F  1EBF               	btfss	(_RF1^(0+128)+1),5
  6103  0510  0008               	return
  6104                           
  6105                           ;RF_Control_B1.c: 162: RF1.CorrectionCounter++;
  6106  0511  3001               	movlw	1
  6107  0512  07C6               	addwf	(_RF1^(0+128)+8),f
  6108  0513  3000               	movlw	0
  6109  0514  3DC7               	addwfc	((_RF1+1)^(0+128)+8),f
  6110                           
  6111                           ;RF_Control_B1.c: 163: if (RF1.CorrectionCounter >= 30000) {
  6112  0515  3075               	movlw	117
  6113  0516  0247               	subwf	((_RF1+1)^(0+128)+8),w
  6114  0517  3030               	movlw	48
  6115  0518  1903               	skipnz
  6116  0519  0246               	subwf	(_RF1^(0+128)+8),w
  6117  051A  1C03               	skipc
  6118  051B  0008               	return
  6119                           
  6120                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter = 0;
  6121  051C  01C6               	clrf	(_RF1^(0+128)+8)
  6122  051D  01C7               	clrf	((_RF1+1)^(0+128)+8)
  6123                           
  6124                           ;RF_Control_B1.c: 165: RF1.RxStatus = 0;
  6125  051E  11BE               	bcf	_RF1^(0+128),3
  6126                           
  6127                           ;RF_Control_B1.c: 166: RF1.ReceiveGO = 0;
  6128  051F  10BE               	bcf	_RF1^(0+128),1
  6129  0520  0008               	return
  6130  0521                     __end_of_setRF_Main:	
  6131                           
  6132                           	psect	text20
  6133  0A02                     __ptext20:	
  6134 ;; *************** function _getRxData *****************
  6135 ;; Defined at:
  6136 ;;		line 249 in file "../src/RF_Control_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;		None
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;Total ram usage:        0 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:   12
  6157 ;; This function calls:
  6158 ;;		_setControl_Lights_Table
  6159 ;;		_setLog_Code
  6160 ;; This function is called by:
  6161 ;;		_setRF_Main
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _getRxData
  6167  0A02                     _getRxData:	
  6168                           
  6169                           ;RF_Control_B1.c: 250: if (RF1.Learn == 1) {
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6173  0A02  0021               	movlb	1	; select bank1
  6174  0A03  1F3E               	btfss	_RF1^(0+128),6
  6175  0A04  2A15               	goto	l8809
  6176                           
  6177                           ;RF_Control_B1.c: 251: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6178  0A05  0022               	movlb	2	; select bank2
  6179  0A06  08A0               	movf	_RF_Data^(0+256),f
  6180  0A07  1D03               	skipz
  6181  0A08  2A12               	goto	l2246
  6182  0A09  0821               	movf	(_RF_Data^(0+256)+1),w
  6183  0A0A  3A64               	xorlw	100
  6184  0A0B  1D03               	skipz
  6185  0A0C  2A12               	goto	l2246
  6186                           
  6187                           ;RF_Control_B1.c: 252: setLog_Code();
  6188  0A0D  3194  248F         	fcall	_setLog_Code
  6189                           
  6190                           ;RF_Control_B1.c: 253: RF1.Checked = 1;
  6191  0A0F  0021               	movlb	1	; select bank1
  6192  0A10  15BF               	bsf	(_RF1^(0+128)+1),3
  6193                           
  6194                           ;RF_Control_B1.c: 254: } else {
  6195  0A11  0008               	return
  6196  0A12                     l2246:	
  6197                           
  6198                           ;RF_Control_B1.c: 255: RF1.Checked = 0;
  6199  0A12  0021               	movlb	1	; select bank1
  6200  0A13  11BF               	bcf	(_RF1^(0+128)+1),3
  6201                           
  6202                           ;RF_Control_B1.c: 256: }
  6203                           ;RF_Control_B1.c: 257: } else {
  6204  0A14  0008               	return
  6205  0A15                     l8809:	
  6206                           
  6207                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6208  0A15  0022               	movlb	2	; select bank2
  6209  0A16  08A0               	movf	_RF_Data^(0+256),f
  6210  0A17  1D03               	skipz
  6211  0A18  2A53               	goto	l8831
  6212  0A19  0821               	movf	(_RF_Data^(0+256)+1),w
  6213  0A1A  3A02               	xorlw	2
  6214  0A1B  1D03               	skipz
  6215  0A1C  2A53               	goto	l8831
  6216                           
  6217                           ;RF_Control_B1.c: 260: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6218  0A1D  082C               	movf	(_RF_Data^(0+256)+12),w
  6219  0A1E  3AFF               	xorlw	255
  6220  0A1F  1D03               	skipz
  6221  0A20  2A2D               	goto	l8821
  6222  0A21  082D               	movf	(_RF_Data^(0+256)+13),w
  6223  0A22  3AFF               	xorlw	255
  6224  0A23  1D03               	skipz
  6225  0A24  2A2D               	goto	l8821
  6226  0A25  082E               	movf	(_RF_Data^(0+256)+14),w
  6227  0A26  3AFF               	xorlw	255
  6228  0A27  1D03               	skipz
  6229  0A28  2A2D               	goto	l8821
  6230                           
  6231                           ;RF_Control_B1.c: 261: __nop();
  6232  0A29  0000               	nop
  6233                           
  6234                           ;RF_Control_B1.c: 262: RF1.Checked = 0;
  6235  0A2A  0021               	movlb	1	; select bank1
  6236  0A2B  11BF               	bcf	(_RF1^(0+128)+1),3
  6237                           
  6238                           ;RF_Control_B1.c: 263: } else {
  6239  0A2C  0008               	return
  6240  0A2D                     l8821:	
  6241                           
  6242                           ;RF_Control_B1.c: 264: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6243  0A2D  0020               	movlb	0	; select bank0
  6244  0A2E  086D               	movf	_product,w
  6245  0A2F  3E0C               	addlw	12
  6246  0A30  0086               	movwf	6
  6247  0A31  3002               	movlw	2	; select bank4/5
  6248  0A32  0087               	movwf	7
  6249  0A33  0022               	movlb	2	; select bank2
  6250  0A34  082C               	movf	(_RF_Data^(0+256)+12),w
  6251  0A35  0601               	xorwf	1,w
  6252  0A36  1D03               	skipz
  6253  0A37  0008               	return
  6254  0A38  0020               	movlb	0	; select bank0
  6255  0A39  086D               	movf	_product,w
  6256  0A3A  3E0D               	addlw	13
  6257  0A3B  0086               	movwf	6
  6258  0A3C  3002               	movlw	2	; select bank4/5
  6259  0A3D  0087               	movwf	7
  6260  0A3E  0022               	movlb	2	; select bank2
  6261  0A3F  082D               	movf	(_RF_Data^(0+256)+13),w
  6262  0A40  0601               	xorwf	1,w
  6263  0A41  1D03               	skipz
  6264  0A42  0008               	return
  6265  0A43  0020               	movlb	0	; select bank0
  6266  0A44  086D               	movf	_product,w
  6267  0A45  3E0E               	addlw	14
  6268  0A46  0086               	movwf	6
  6269  0A47  3002               	movlw	2	; select bank4/5
  6270  0A48  0087               	movwf	7
  6271  0A49  0022               	movlb	2	; select bank2
  6272  0A4A  082E               	movf	(_RF_Data^(0+256)+14),w
  6273  0A4B  0601               	xorwf	1,w
  6274  0A4C  1D03               	skipz
  6275  0A4D  0008               	return
  6276                           
  6277                           ;RF_Control_B1.c: 265: setControl_Lights_Table();
  6278  0A4E  318F  2751         	fcall	_setControl_Lights_Table
  6279                           
  6280                           ;RF_Control_B1.c: 266: RF1.Checked = 1;
  6281  0A50  0021               	movlb	1	; select bank1
  6282  0A51  15BF               	bsf	(_RF1^(0+128)+1),3
  6283                           
  6284                           ;RF_Control_B1.c: 267: }
  6285                           ;RF_Control_B1.c: 268: }
  6286                           ;RF_Control_B1.c: 269: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6287  0A52  0008               	return
  6288  0A53                     l8831:	
  6289  0A53  0022               	movlb	2	; select bank2
  6290  0A54  0820               	movf	_RF_Data^(0+256),w
  6291  0A55  3AFF               	xorlw	255
  6292  0A56  1D03               	skipz
  6293  0A57  2A5E               	goto	l8837
  6294  0A58  0821               	movf	(_RF_Data^(0+256)+1),w
  6295  0A59  3A02               	xorlw	2
  6296  0A5A  1D03               	skipz
  6297  0A5B  2A5E               	goto	l8837
  6298                           
  6299                           ;RF_Control_B1.c: 270: __nop();
  6300  0A5C  0000               	nop
  6301                           
  6302                           ;RF_Control_B1.c: 271: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6303  0A5D  0008               	return
  6304  0A5E                     l8837:	
  6305  0A5E  0022               	movlb	2	; select bank2
  6306  0A5F  08A0               	movf	_RF_Data^(0+256),f
  6307  0A60  1D03               	skipz
  6308  0A61  2A68               	goto	l2256
  6309  0A62  0821               	movf	(_RF_Data^(0+256)+1),w
  6310  0A63  3A65               	xorlw	101
  6311  0A64  1D03               	skipz
  6312  0A65  2A68               	goto	l2256
  6313                           
  6314                           ;RF_Control_B1.c: 272: __nop();
  6315  0A66  0000               	nop
  6316                           
  6317                           ;RF_Control_B1.c: 273: } else {
  6318  0A67  0008               	return
  6319  0A68                     l2256:	
  6320                           
  6321                           ;RF_Control_B1.c: 274: RF1.Checked = 0;
  6322  0A68  0021               	movlb	1	; select bank1
  6323  0A69  11BF               	bcf	(_RF1^(0+128)+1),3
  6324  0A6A  0008               	return
  6325  0A6B                     __end_of_getRxData:	
  6326                           
  6327                           	psect	text21
  6328  148F                     __ptext21:	
  6329 ;; *************** function _setLog_Code *****************
  6330 ;; Defined at:
  6331 ;;		line 284 in file "../src/RF_Control_B1.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;		None
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;		None
  6336 ;; Return value:  Size  Location     Type
  6337 ;;		None               void
  6338 ;; Registers used:
  6339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;Total ram usage:        1 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    7
  6352 ;; This function calls:
  6353 ;;		_setBuz
  6354 ;; This function is called by:
  6355 ;;		_getRxData
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function _setLog_Code
  6361  148F                     _setLog_Code:	
  6362                           
  6363                           ;RF_Control_B1.c: 285: product->Data[12]=RF_Data[12];
  6364                           
  6365                           ;incstack = 0
  6366                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6367  148F  0022               	movlb	2	; select bank2
  6368  1490  082C               	movf	(_RF_Data^(0+256)+12),w
  6369  1491  0020               	movlb	0	; select bank0
  6370  1492  00AD               	movwf	??_setLog_Code
  6371  1493  086D               	movf	_product,w
  6372  1494  3E0C               	addlw	12
  6373  1495  0086               	movwf	6
  6374  1496  3002               	movlw	2	; select bank4/5
  6375  1497  0087               	movwf	7
  6376  1498  082D               	movf	??_setLog_Code,w
  6377  1499  0081               	movwf	1
  6378                           
  6379                           ;RF_Control_B1.c: 286: product->Data[13]=RF_Data[13];
  6380  149A  0022               	movlb	2	; select bank2
  6381  149B  082D               	movf	(_RF_Data^(0+256)+13),w
  6382  149C  0020               	movlb	0	; select bank0
  6383  149D  00AD               	movwf	??_setLog_Code
  6384  149E  086D               	movf	_product,w
  6385  149F  3E0D               	addlw	13
  6386  14A0  0086               	movwf	6
  6387  14A1  3002               	movlw	2	; select bank4/5
  6388  14A2  0087               	movwf	7
  6389  14A3  082D               	movf	??_setLog_Code,w
  6390  14A4  0081               	movwf	1
  6391                           
  6392                           ;RF_Control_B1.c: 287: product->Data[14]=RF_Data[14];
  6393  14A5  0022               	movlb	2	; select bank2
  6394  14A6  082E               	movf	(_RF_Data^(0+256)+14),w
  6395  14A7  0020               	movlb	0	; select bank0
  6396  14A8  00AD               	movwf	??_setLog_Code
  6397  14A9  086D               	movf	_product,w
  6398  14AA  3E0E               	addlw	14
  6399  14AB  0086               	movwf	6
  6400  14AC  3002               	movlw	2	; select bank4/5
  6401  14AD  0087               	movwf	7
  6402  14AE  082D               	movf	??_setLog_Code,w
  6403  14AF  0081               	movwf	1
  6404                           
  6405                           ;RF_Control_B1.c: 288: setBuz(1, 100);
  6406  14B0  3064               	movlw	100
  6407  14B1  00A9               	movwf	setBuz@time
  6408  14B2  3000               	movlw	0
  6409  14B3  00AA               	movwf	setBuz@time+1
  6410  14B4  3001               	movlw	1
  6411  14B5  3197  27A7  3194   	fcall	_setBuz
  6412                           
  6413                           ;RF_Control_B1.c: 289: RF1.Learn = 0;
  6414  14B8  0021               	movlb	1	; select bank1
  6415  14B9  133E               	bcf	_RF1^(0+128),6
  6416                           
  6417                           ;RF_Control_B1.c: 290: if (myMain.First) {
  6418  14BA  1FA0               	btfss	_myMain^(0+128),7
  6419  14BB  2CBE               	goto	l2261
  6420                           
  6421                           ;RF_Control_B1.c: 291: Memory.LoopSave=1;
  6422  14BC  0023               	movlb	3	; select bank3
  6423  14BD  1544               	bsf	(_Memory^(0+384)+36),2
  6424  14BE                     l2261:	
  6425                           
  6426                           ;RF_Control_B1.c: 292: }
  6427                           ;RF_Control_B1.c: 293: Memory.Modify=1;
  6428  14BE  0023               	movlb	3	; select bank3
  6429  14BF  1444               	bsf	(_Memory^(0+384)+36),0
  6430  14C0  0008               	return
  6431  14C1                     __end_of_setLog_Code:	
  6432                           
  6433                           	psect	text22
  6434  0F51                     __ptext22:	
  6435 ;; *************** function _setControl_Lights_Table *****************
  6436 ;; Defined at:
  6437 ;;		line 297 in file "../src/RF_Control_B1.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:   11
  6458 ;; This function calls:
  6459 ;;		_setBuz
  6460 ;;		_setDimmerLights
  6461 ;;		_setRFSW_AdjControl
  6462 ;;		_setRFSW_Control
  6463 ;;		_setRFSW_Status
  6464 ;;		_setSw_Status
  6465 ;;		_setTxData
  6466 ;; This function is called by:
  6467 ;;		_getRxData
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _setControl_Lights_Table
  6473  0F51                     _setControl_Lights_Table:	
  6474                           
  6475                           ;RF_Control_B1.c: 298: if (RF_Data[15] == 0x00) {
  6476                           
  6477                           ;incstack = 0
  6478                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6479  0F51  0022               	movlb	2	; select bank2
  6480  0F52  08AF               	movf	(_RF_Data^(0+256)+15),f
  6481  0F53  1D03               	skipz
  6482  0F54  2FAF               	goto	l8529
  6483                           
  6484                           ;RF_Control_B1.c: 300: setDimmerLights(1, 0);
  6485  0F55  0020               	movlb	0	; select bank0
  6486  0F56  01A3               	clrf	setDimmerLights@status
  6487  0F57  3001               	movlw	1
  6488  0F58  318C  2493  318F   	fcall	_setDimmerLights
  6489                           
  6490                           ;RF_Control_B1.c: 301: setRFSW_Status(1, 0);
  6491  0F5B  0020               	movlb	0	; select bank0
  6492  0F5C  01A2               	clrf	setRFSW_Status@command
  6493  0F5D  3001               	movlw	1
  6494  0F5E  319F  2733  318F   	fcall	_setRFSW_Status
  6495                           
  6496                           ;RF_Control_B1.c: 302: setSw_Status(1, 0);
  6497  0F61  0020               	movlb	0	; select bank0
  6498  0F62  01A2               	clrf	setSw_Status@command
  6499  0F63  3001               	movlw	1
  6500  0F64  319F  2742  318F   	fcall	_setSw_Status
  6501                           
  6502                           ;RF_Control_B1.c: 305: setDimmerLights(2, 0);
  6503  0F67  0020               	movlb	0	; select bank0
  6504  0F68  01A3               	clrf	setDimmerLights@status
  6505  0F69  3002               	movlw	2
  6506  0F6A  318C  2493  318F   	fcall	_setDimmerLights
  6507                           
  6508                           ;RF_Control_B1.c: 306: setRFSW_Status(2, 0);
  6509  0F6D  0020               	movlb	0	; select bank0
  6510  0F6E  01A2               	clrf	setRFSW_Status@command
  6511  0F6F  3002               	movlw	2
  6512  0F70  319F  2733  318F   	fcall	_setRFSW_Status
  6513                           
  6514                           ;RF_Control_B1.c: 307: setSw_Status(2, 0);
  6515  0F73  0020               	movlb	0	; select bank0
  6516  0F74  01A2               	clrf	setSw_Status@command
  6517  0F75  3002               	movlw	2
  6518  0F76  319F  2742  318F   	fcall	_setSw_Status
  6519                           
  6520                           ;RF_Control_B1.c: 310: setDimmerLights(3, 0);
  6521  0F79  0020               	movlb	0	; select bank0
  6522  0F7A  01A3               	clrf	setDimmerLights@status
  6523  0F7B  3003               	movlw	3
  6524  0F7C  318C  2493  318F   	fcall	_setDimmerLights
  6525                           
  6526                           ;RF_Control_B1.c: 311: setRFSW_Status(3, 0);
  6527  0F7F  0020               	movlb	0	; select bank0
  6528  0F80  01A2               	clrf	setRFSW_Status@command
  6529  0F81  3003               	movlw	3
  6530  0F82  319F  2733  318F   	fcall	_setRFSW_Status
  6531                           
  6532                           ;RF_Control_B1.c: 312: setSw_Status(3, 0);
  6533  0F85  0020               	movlb	0	; select bank0
  6534  0F86  01A2               	clrf	setSw_Status@command
  6535  0F87  3003               	movlw	3
  6536  0F88  319F  2742  318F   	fcall	_setSw_Status
  6537                           
  6538                           ;RF_Control_B1.c: 315: product->Data[9]=0;
  6539  0F8B  0020               	movlb	0	; select bank0
  6540  0F8C  086D               	movf	_product,w
  6541  0F8D  3E09               	addlw	9
  6542  0F8E  0086               	movwf	6
  6543  0F8F  3002               	movlw	2	; select bank4/5
  6544  0F90  0087               	movwf	7
  6545  0F91  0181               	clrf	1
  6546                           
  6547                           ;RF_Control_B1.c: 316: product->Data[11]=0;
  6548  0F92  086D               	movf	_product,w
  6549  0F93  3E0B               	addlw	11
  6550  0F94  0086               	movwf	6
  6551  0F95  3002               	movlw	2	; select bank4/5
  6552  0F96  0087               	movwf	7
  6553  0F97  0181               	clrf	1
  6554                           
  6555                           ;RF_Control_B1.c: 317: product->Data[15]=0;
  6556  0F98  086D               	movf	_product,w
  6557  0F99  3E0F               	addlw	15
  6558  0F9A  0086               	movwf	6
  6559  0F9B  3002               	movlw	2	; select bank4/5
  6560  0F9C  0087               	movwf	7
  6561  0F9D  0181               	clrf	1
  6562                           
  6563                           ;RF_Control_B1.c: 318: product->Data[17]=0;
  6564  0F9E  086D               	movf	_product,w
  6565  0F9F  3E11               	addlw	17
  6566  0FA0  0086               	movwf	6
  6567  0FA1  3002               	movlw	2	; select bank4/5
  6568  0FA2  0087               	movwf	7
  6569  0FA3  0181               	clrf	1
  6570                           
  6571                           ;RF_Control_B1.c: 319: setBuz(1, 100);
  6572  0FA4  3064               	movlw	100
  6573  0FA5  00A9               	movwf	setBuz@time
  6574  0FA6  3000               	movlw	0
  6575  0FA7  00AA               	movwf	setBuz@time+1
  6576  0FA8  3001               	movlw	1
  6577  0FA9  3197  27A7  318F   	fcall	_setBuz
  6578                           
  6579                           ;RF_Control_B1.c: 320: setTxData();
  6580  0FAC  3185  25E8         	fcall	_setTxData
  6581                           
  6582                           ;RF_Control_B1.c: 321: } else if (RF_Data[15] == 0x20) {
  6583  0FAE  0008               	return
  6584  0FAF                     l8529:	
  6585  0FAF  0022               	movlb	2	; select bank2
  6586  0FB0  082F               	movf	(_RF_Data^(0+256)+15),w
  6587  0FB1  3A20               	xorlw	32
  6588  0FB2  1D03               	skipz
  6589  0FB3  2FCA               	goto	l8535
  6590                           
  6591                           ;RF_Control_B1.c: 322: product->Data[9]=0;
  6592  0FB4  0020               	movlb	0	; select bank0
  6593  0FB5  086D               	movf	_product,w
  6594  0FB6  3E09               	addlw	9
  6595  0FB7  0086               	movwf	6
  6596  0FB8  3002               	movlw	2	; select bank4/5
  6597  0FB9  0087               	movwf	7
  6598  0FBA  0181               	clrf	1
  6599                           
  6600                           ;RF_Control_B1.c: 323: product->Data[11]=0;
  6601  0FBB  086D               	movf	_product,w
  6602  0FBC  3E0B               	addlw	11
  6603  0FBD  0086               	movwf	6
  6604  0FBE  3002               	movlw	2	; select bank4/5
  6605  0FBF  0087               	movwf	7
  6606  0FC0  0181               	clrf	1
  6607                           
  6608                           ;RF_Control_B1.c: 324: product->Data[17]=0;
  6609  0FC1  086D               	movf	_product,w
  6610  0FC2  3E11               	addlw	17
  6611  0FC3  0086               	movwf	6
  6612  0FC4  3002               	movlw	2	; select bank4/5
  6613  0FC5  0087               	movwf	7
  6614  0FC6  0181               	clrf	1
  6615                           
  6616                           ;RF_Control_B1.c: 325: setTxData();
  6617  0FC7  3185  25E8         	fcall	_setTxData
  6618                           
  6619                           ;RF_Control_B1.c: 326: }
  6620  0FC9  0008               	return
  6621  0FCA                     l8535:	
  6622                           
  6623                           ;RF_Control_B1.c: 328: else if (RF_Data[15] == 0x01) {
  6624  0FCA  0022               	movlb	2	; select bank2
  6625  0FCB  082F               	movf	(_RF_Data^(0+256)+15),w
  6626  0FCC  3A01               	xorlw	1
  6627  0FCD  1D03               	skipz
  6628  0FCE  2FD3               	goto	l8539
  6629                           
  6630                           ;RF_Control_B1.c: 329: setRFSW_Control(1);
  6631  0FCF  3001               	movlw	1
  6632  0FD0  3187  275B         	fcall	_setRFSW_Control
  6633                           
  6634                           ;RF_Control_B1.c: 330: }
  6635  0FD2  0008               	return
  6636  0FD3                     l8539:	
  6637                           
  6638                           ;RF_Control_B1.c: 332: else if (RF_Data[15] == 0x11) {
  6639  0FD3  0022               	movlb	2	; select bank2
  6640  0FD4  082F               	movf	(_RF_Data^(0+256)+15),w
  6641  0FD5  3A11               	xorlw	17
  6642  0FD6  1D03               	skipz
  6643  0FD7  2FDC               	goto	l8543
  6644                           
  6645                           ;RF_Control_B1.c: 333: setRFSW_AdjControl(1);
  6646  0FD8  3001               	movlw	1
  6647  0FD9  3194  24F6         	fcall	_setRFSW_AdjControl
  6648                           
  6649                           ;RF_Control_B1.c: 334: }
  6650  0FDB  0008               	return
  6651  0FDC                     l8543:	
  6652                           
  6653                           ;RF_Control_B1.c: 339: else if (RF_Data[15] == 0x02) {
  6654  0FDC  0022               	movlb	2	; select bank2
  6655  0FDD  082F               	movf	(_RF_Data^(0+256)+15),w
  6656  0FDE  3A02               	xorlw	2
  6657  0FDF  1D03               	skipz
  6658  0FE0  2FE5               	goto	l8547
  6659                           
  6660                           ;RF_Control_B1.c: 340: setRFSW_Control(2);
  6661  0FE1  3002               	movlw	2
  6662  0FE2  3187  275B         	fcall	_setRFSW_Control
  6663                           
  6664                           ;RF_Control_B1.c: 341: }
  6665  0FE4  0008               	return
  6666  0FE5                     l8547:	
  6667                           
  6668                           ;RF_Control_B1.c: 343: else if (RF_Data[15] == 0x21) {
  6669  0FE5  0022               	movlb	2	; select bank2
  6670  0FE6  082F               	movf	(_RF_Data^(0+256)+15),w
  6671  0FE7  3A21               	xorlw	33
  6672  0FE8  1D03               	skipz
  6673  0FE9  2FEE               	goto	l8551
  6674                           
  6675                           ;RF_Control_B1.c: 344: setRFSW_AdjControl(2);
  6676  0FEA  3002               	movlw	2
  6677  0FEB  3194  24F6         	fcall	_setRFSW_AdjControl
  6678                           
  6679                           ;RF_Control_B1.c: 345: }
  6680  0FED  0008               	return
  6681  0FEE                     l8551:	
  6682                           
  6683                           ;RF_Control_B1.c: 350: else if (RF_Data[15] == 0x03) {
  6684  0FEE  0022               	movlb	2	; select bank2
  6685  0FEF  082F               	movf	(_RF_Data^(0+256)+15),w
  6686  0FF0  3A03               	xorlw	3
  6687  0FF1  1D03               	skipz
  6688  0FF2  2FF7               	goto	l8555
  6689                           
  6690                           ;RF_Control_B1.c: 351: setRFSW_Control(3);
  6691  0FF3  3003               	movlw	3
  6692  0FF4  3187  275B         	fcall	_setRFSW_Control
  6693                           
  6694                           ;RF_Control_B1.c: 352: }
  6695  0FF6  0008               	return
  6696  0FF7                     l8555:	
  6697                           
  6698                           ;RF_Control_B1.c: 354: else if (RF_Data[15] == 0x31) {
  6699  0FF7  0022               	movlb	2	; select bank2
  6700  0FF8  082F               	movf	(_RF_Data^(0+256)+15),w
  6701  0FF9  3A31               	xorlw	49
  6702  0FFA  1D03               	skipz
  6703  0FFB  0008               	return
  6704                           
  6705                           ;RF_Control_B1.c: 355: setRFSW_AdjControl(3);
  6706  0FFC  3003               	movlw	3
  6707  0FFD  3194  24F6         	fcall	_setRFSW_AdjControl
  6708  0FFF  0008               	return
  6709  1000                     __end_of_setControl_Lights_Table:	
  6710                           
  6711                           	psect	text23
  6712  075B                     __ptext23:	
  6713 ;; *************** function _setRFSW_Control *****************
  6714 ;; Defined at:
  6715 ;;		line 385 in file "../src/RF_Control_B1.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  sw              1    wreg     unsigned char 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  sw              1   67[BANK0 ] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;		None               void
  6722 ;; Registers used:
  6723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;Total ram usage:        2 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    9
  6736 ;; This function calls:
  6737 ;;		_RfSWPointSelect
  6738 ;;		_setBuz
  6739 ;;		_setDelayOff_GO
  6740 ;;		_setDimmerLights_Switch
  6741 ;;		_setDimmerLights_Trigger
  6742 ;;		_setRF_DimmerLights
  6743 ;;		_setSw_Status
  6744 ;;		_setTxData
  6745 ;; This function is called by:
  6746 ;;		_setControl_Lights_Table
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _setRFSW_Control
  6752  075B                     _setRFSW_Control:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6756                           ;setRFSW_Control@sw stored from wreg
  6757  075B  0020               	movlb	0	; select bank0
  6758  075C  00E3               	movwf	setRFSW_Control@sw
  6759                           
  6760                           ;RF_Control_B1.c: 386: RfSWPointSelect(sw);
  6761  075D  0863               	movf	setRFSW_Control@sw,w
  6762  075E  3192  224A  3187   	fcall	_RfSWPointSelect
  6763                           
  6764                           ;RF_Control_B1.c: 387: if (RFSW->Status == 0) {
  6765  0761  0021               	movlb	1	; select bank1
  6766  0762  0851               	movf	_RFSW^(0+128),w
  6767  0763  0086               	movwf	6
  6768  0764  0187               	clrf	7
  6769  0765  1801               	btfsc	1,0
  6770  0766  2F9D               	goto	l8419
  6771                           
  6772                           ;RF_Control_B1.c: 388: if (RF_Data[16] == 0x80) {
  6773  0767  0022               	movlb	2	; select bank2
  6774  0768  0830               	movf	(_RF_Data^(0+256)+16),w
  6775  0769  3A80               	xorlw	128
  6776  076A  1D03               	skipz
  6777  076B  2F79               	goto	l8409
  6778                           
  6779                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 1, RF_Data[17]);
  6780  076C  0020               	movlb	0	; select bank0
  6781  076D  01AA               	clrf	setDelayOff_GO@command
  6782  076E  0AAA               	incf	setDelayOff_GO@command,f
  6783  076F  0022               	movlb	2	; select bank2
  6784  0770  0831               	movf	(_RF_Data^(0+256)+17),w
  6785  0771  0020               	movlb	0	; select bank0
  6786  0772  00E2               	movwf	??_setRFSW_Control
  6787  0773  0862               	movf	??_setRFSW_Control,w
  6788  0774  00AB               	movwf	setDelayOff_GO@value
  6789  0775  0863               	movf	setRFSW_Control@sw,w
  6790  0776  3188  207D  3187   	fcall	_setDelayOff_GO
  6791  0779                     l8409:	
  6792                           
  6793                           ;RF_Control_B1.c: 390: }
  6794                           ;RF_Control_B1.c: 391: RFSW->Status = 1;
  6795  0779  0021               	movlb	1	; select bank1
  6796  077A  0851               	movf	_RFSW^(0+128),w
  6797  077B  0086               	movwf	6
  6798  077C  0187               	clrf	7
  6799  077D  1401               	bsf	1,0
  6800                           
  6801                           ;RF_Control_B1.c: 392: setSw_Status(sw, 1);
  6802  077E  0020               	movlb	0	; select bank0
  6803  077F  01A2               	clrf	setSw_Status@command
  6804  0780  0AA2               	incf	setSw_Status@command,f
  6805  0781  0863               	movf	setRFSW_Control@sw,w
  6806  0782  319F  2742  3187   	fcall	_setSw_Status
  6807                           
  6808                           ;RF_Control_B1.c: 394: setDimmerLights_Trigger(sw, 1);
  6809  0785  0020               	movlb	0	; select bank0
  6810  0786  01A2               	clrf	setDimmerLights_Trigger@command
  6811  0787  0AA2               	incf	setDimmerLights_Trigger@command,f
  6812  0788  0863               	movf	setRFSW_Control@sw,w
  6813  0789  319F  278E  3187   	fcall	_setDimmerLights_Trigger
  6814                           
  6815                           ;RF_Control_B1.c: 395: setDimmerLights_Switch(sw, 1);
  6816  078C  0020               	movlb	0	; select bank0
  6817  078D  01A2               	clrf	setDimmerLights_Switch@command
  6818  078E  0AA2               	incf	setDimmerLights_Switch@command,f
  6819  078F  0863               	movf	setRFSW_Control@sw,w
  6820  0790  319F  277E  3187   	fcall	_setDimmerLights_Switch
  6821                           
  6822                           ;RF_Control_B1.c: 397: setRF_DimmerLights(sw, RFSW->Status);
  6823  0793  0021               	movlb	1	; select bank1
  6824  0794  0851               	movf	_RFSW^(0+128),w
  6825  0795  0086               	movwf	6
  6826  0796  0187               	clrf	7
  6827  0797  3000               	movlw	0
  6828  0798  1801               	btfsc	1,0
  6829  0799  3001               	movlw	1
  6830  079A  0020               	movlb	0	; select bank0
  6831  079B  00DD               	movwf	setRF_DimmerLights@on
  6832  079C  2FDB               	goto	L5
  6833  079D                     l8419:	
  6834                           ;RF_Control_B1.c: 398: } else {
  6835                           
  6836                           
  6837                           ;RF_Control_B1.c: 399: if (RF_Data[16] == 0x80) {
  6838  079D  0022               	movlb	2	; select bank2
  6839  079E  0830               	movf	(_RF_Data^(0+256)+16),w
  6840  079F  3A80               	xorlw	128
  6841  07A0  1D03               	skipz
  6842  07A1  2FB3               	goto	l8423
  6843                           
  6844                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 1, RF_Data[17]);
  6845  07A2  0020               	movlb	0	; select bank0
  6846  07A3  01AA               	clrf	setDelayOff_GO@command
  6847  07A4  0AAA               	incf	setDelayOff_GO@command,f
  6848  07A5  0022               	movlb	2	; select bank2
  6849  07A6  0831               	movf	(_RF_Data^(0+256)+17),w
  6850  07A7  0020               	movlb	0	; select bank0
  6851  07A8  00E2               	movwf	??_setRFSW_Control
  6852  07A9  0862               	movf	??_setRFSW_Control,w
  6853  07AA  00AB               	movwf	setDelayOff_GO@value
  6854  07AB  0863               	movf	setRFSW_Control@sw,w
  6855  07AC  3188  207D  3187   	fcall	_setDelayOff_GO
  6856                           
  6857                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw, 1);
  6858  07AF  0020               	movlb	0	; select bank0
  6859  07B0  01DD               	clrf	setRF_DimmerLights@on
  6860  07B1  0ADD               	incf	setRF_DimmerLights@on,f
  6861  07B2  2FDB               	goto	L5
  6862  07B3                     l8423:	
  6863                           ;RF_Control_B1.c: 402: } else {
  6864                           
  6865                           
  6866                           ;RF_Control_B1.c: 403: RFSW->Status = 0;
  6867  07B3  0021               	movlb	1	; select bank1
  6868  07B4  0851               	movf	_RFSW^(0+128),w
  6869  07B5  0086               	movwf	6
  6870  07B6  0187               	clrf	7
  6871  07B7  1001               	bcf	1,0
  6872                           
  6873                           ;RF_Control_B1.c: 404: setSw_Status(sw, 0);
  6874  07B8  0020               	movlb	0	; select bank0
  6875  07B9  01A2               	clrf	setSw_Status@command
  6876  07BA  0863               	movf	setRFSW_Control@sw,w
  6877  07BB  319F  2742  3187   	fcall	_setSw_Status
  6878                           
  6879                           ;RF_Control_B1.c: 406: setDimmerLights_Trigger(sw, 1);
  6880  07BE  0020               	movlb	0	; select bank0
  6881  07BF  01A2               	clrf	setDimmerLights_Trigger@command
  6882  07C0  0AA2               	incf	setDimmerLights_Trigger@command,f
  6883  07C1  0863               	movf	setRFSW_Control@sw,w
  6884  07C2  319F  278E  3187   	fcall	_setDimmerLights_Trigger
  6885                           
  6886                           ;RF_Control_B1.c: 407: setDimmerLights_Switch(sw, RFSW->Status);
  6887  07C5  0021               	movlb	1	; select bank1
  6888  07C6  0851               	movf	_RFSW^(0+128),w
  6889  07C7  0086               	movwf	6
  6890  07C8  0187               	clrf	7
  6891  07C9  3000               	movlw	0
  6892  07CA  1801               	btfsc	1,0
  6893  07CB  3001               	movlw	1
  6894  07CC  0020               	movlb	0	; select bank0
  6895  07CD  00A2               	movwf	setDimmerLights_Switch@command
  6896  07CE  0863               	movf	setRFSW_Control@sw,w
  6897  07CF  319F  277E  3187   	fcall	_setDimmerLights_Switch
  6898                           
  6899                           ;RF_Control_B1.c: 409: setDelayOff_GO(sw, 0, 0);
  6900  07D2  0020               	movlb	0	; select bank0
  6901  07D3  01AA               	clrf	setDelayOff_GO@command
  6902  07D4  01AB               	clrf	setDelayOff_GO@value
  6903  07D5  0863               	movf	setRFSW_Control@sw,w
  6904  07D6  3188  207D  3187   	fcall	_setDelayOff_GO
  6905                           
  6906                           ;RF_Control_B1.c: 410: setRF_DimmerLights(sw, 0);
  6907  07D9  0020               	movlb	0	; select bank0
  6908  07DA  01DD               	clrf	setRF_DimmerLights@on
  6909  07DB                     L5:	
  6910  07DB  0863               	movf	setRFSW_Control@sw,w
  6911  07DC  318A  22D6  3187   	fcall	_setRF_DimmerLights
  6912                           
  6913                           ;RF_Control_B1.c: 411: }
  6914                           ;RF_Control_B1.c: 412: }
  6915                           ;RF_Control_B1.c: 413: setBuz(1, 100);
  6916  07DF  3064               	movlw	100
  6917  07E0  0020               	movlb	0	; select bank0
  6918  07E1  00A9               	movwf	setBuz@time
  6919  07E2  3000               	movlw	0
  6920  07E3  00AA               	movwf	setBuz@time+1
  6921  07E4  3001               	movlw	1
  6922  07E5  3197  27A7  3187   	fcall	_setBuz
  6923                           
  6924                           ;RF_Control_B1.c: 414: setTxData();
  6925  07E8  3185  25E8         	fcall	_setTxData
  6926  07EA  0008               	return
  6927  07EB                     __end_of_setRFSW_Control:	
  6928                           
  6929                           	psect	text24
  6930  087D                     __ptext24:	
  6931 ;; *************** function _setDelayOff_GO *****************
  6932 ;; Defined at:
  6933 ;;		line 86 in file "../src/DelayOff_B1.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;  sw              1    wreg     unsigned char 
  6936 ;;  command         1   10[BANK0 ] unsigned char 
  6937 ;;  value           1   11[BANK0 ] unsigned char 
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  sw              1   14[BANK0 ] unsigned char 
  6940 ;; Return value:  Size  Location     Type
  6941 ;;		None               void
  6942 ;; Registers used:
  6943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6944 ;; Tracked objects:
  6945 ;;		On entry : 0/0
  6946 ;;		On exit  : 0/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;Total ram usage:        5 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    7
  6956 ;; This function calls:
  6957 ;;		_DelayOffPointSelect
  6958 ;;		_DelayTimejudge
  6959 ;; This function is called by:
  6960 ;;		_setRFSW_Control
  6961 ;;		_Sw_DimmerOffFunc
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           
  6966                           ;psect for function _setDelayOff_GO
  6967  087D                     _setDelayOff_GO:	
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6971                           ;setDelayOff_GO@sw stored from wreg
  6972  087D  0020               	movlb	0	; select bank0
  6973  087E  00AE               	movwf	setDelayOff_GO@sw
  6974                           
  6975                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  6976  087F  082E               	movf	setDelayOff_GO@sw,w
  6977  0880  3191  21D2  3188   	fcall	_DelayOffPointSelect
  6978                           
  6979                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  6980  0883  0872               	movf	_DelayOff,w
  6981  0884  0086               	movwf	6
  6982  0885  0187               	clrf	7
  6983  0886  1C01               	btfss	1,0
  6984  0887  0008               	return
  6985                           
  6986                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  6987  0888  0020               	movlb	0	; select bank0
  6988  0889  082A               	movf	setDelayOff_GO@command,w
  6989  088A  3A01               	xorlw	1
  6990  088B  3000               	movlw	0
  6991  088C  1903               	skipnz
  6992  088D  3001               	movlw	1
  6993  088E  00AC               	movwf	??_setDelayOff_GO
  6994  088F  0872               	movf	_DelayOff,w
  6995  0890  0086               	movwf	6
  6996  0891  0187               	clrf	7
  6997  0892  0DAC               	rlf	??_setDelayOff_GO,f
  6998  0893  0801               	movf	1,w
  6999  0894  062C               	xorwf	??_setDelayOff_GO,w
  7000  0895  39FD               	andlw	-3
  7001  0896  062C               	xorwf	??_setDelayOff_GO,w
  7002  0897  0081               	movwf	1
  7003                           
  7004                           ;DelayOff_B1.c: 90: if (command == 1) {
  7005  0898  082A               	movf	setDelayOff_GO@command,w
  7006  0899  3A01               	xorlw	1
  7007  089A  1D03               	skipz
  7008  089B  28C5               	goto	l8229
  7009                           
  7010                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7011  089C  082B               	movf	setDelayOff_GO@value,w
  7012  089D  3193  23B0  3188   	fcall	_DelayTimejudge
  7013  08A0  0020               	movlb	0	; select bank0
  7014  08A1  00AC               	movwf	??_setDelayOff_GO
  7015  08A2  0872               	movf	_DelayOff,w
  7016  08A3  0086               	movwf	6
  7017  08A4  0187               	clrf	7
  7018  08A5  082C               	movf	??_setDelayOff_GO,w
  7019  08A6  0081               	movwf	1
  7020                           
  7021                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7022  08A7  300F               	movlw	15
  7023  08A8  052B               	andwf	setDelayOff_GO@value,w
  7024  08A9  00AC               	movwf	??_setDelayOff_GO
  7025  08AA  082C               	movf	??_setDelayOff_GO,w
  7026  08AB  3A05               	xorlw	5
  7027  08AC  1903               	skipnz
  7028  08AD  28B2               	goto	l8223
  7029  08AE  082B               	movf	setDelayOff_GO@value,w
  7030  08AF  390F               	andlw	15
  7031  08B0  1D03               	btfss	3,2
  7032  08B1  28B8               	goto	l8227
  7033  08B2                     l8223:	
  7034  08B2  3026               	movlw	38
  7035  08B3  022B               	subwf	setDelayOff_GO@value,w
  7036  08B4  1803               	skipnc
  7037  08B5  28B8               	goto	l8227
  7038                           
  7039                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7040  08B6  082B               	movf	setDelayOff_GO@value,w
  7041  08B7  28B9               	goto	L6
  7042  08B8                     l8227:	
  7043                           ;DelayOff_B1.c: 94: } else {
  7044                           
  7045                           
  7046                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7047  08B8  3005               	movlw	5
  7048  08B9                     L6:	
  7049  08B9  00AC               	movwf	??_setDelayOff_GO
  7050  08BA  082E               	movf	setDelayOff_GO@sw,w
  7051  08BB  3E1A               	addlw	26
  7052  08BC  076D               	addwf	_product,w
  7053  08BD  00AD               	movwf	??_setDelayOff_GO+1
  7054  08BE  082D               	movf	??_setDelayOff_GO+1,w
  7055  08BF  0086               	movwf	6
  7056  08C0  3002               	movlw	2	; select bank4/5
  7057  08C1  0087               	movwf	7
  7058  08C2  082C               	movf	??_setDelayOff_GO,w
  7059  08C3  0081               	movwf	1
  7060                           
  7061                           ;DelayOff_B1.c: 96: }
  7062                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7063  08C4  28D1               	goto	l8233
  7064  08C5                     l8229:	
  7065  08C5  08AA               	movf	setDelayOff_GO@command,f
  7066  08C6  1D03               	skipz
  7067  08C7  28D1               	goto	l8233
  7068                           
  7069                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7070  08C8  082E               	movf	setDelayOff_GO@sw,w
  7071  08C9  3E1A               	addlw	26
  7072  08CA  076D               	addwf	_product,w
  7073  08CB  00AC               	movwf	??_setDelayOff_GO
  7074  08CC  082C               	movf	??_setDelayOff_GO,w
  7075  08CD  0086               	movwf	6
  7076  08CE  3002               	movlw	2	; select bank4/5
  7077  08CF  0087               	movwf	7
  7078  08D0  0181               	clrf	1
  7079  08D1                     l8233:	
  7080                           
  7081                           ;DelayOff_B1.c: 99: }
  7082                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7083  08D1  0872               	movf	_DelayOff,w
  7084  08D2  0086               	movwf	6
  7085  08D3  0187               	clrf	7
  7086  08D4  3000               	movlw	0
  7087  08D5  3FC0               	movwi [0]fsr1
  7088  08D6  3FC1               	movwi [1]fsr1
  7089                           
  7090                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7091  08D7  0872               	movf	_DelayOff,w
  7092  08D8  0086               	movwf	6
  7093  08D9  0187               	clrf	7
  7094  08DA  0181               	clrf	1
  7095  08DB  0008               	return
  7096  08DC                     __end_of_setDelayOff_GO:	
  7097                           
  7098                           	psect	text25
  7099  13B0                     __ptext25:	
  7100 ;; *************** function _DelayTimejudge *****************
  7101 ;; Defined at:
  7102 ;;		line 106 in file "../src/DelayOff_B1.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  value           1    wreg     unsigned char 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  value           1    9[BANK0 ] unsigned char 
  7107 ;;  k               1    8[BANK0 ] unsigned char 
  7108 ;;  j               1    7[BANK0 ] unsigned char 
  7109 ;;  i               1    6[BANK0 ] unsigned char 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      unsigned char 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0, pclath, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;Total ram usage:        6 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    6
  7126 ;; This function calls:
  7127 ;;		___bmul
  7128 ;; This function is called by:
  7129 ;;		_setDelayOff_GO
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           
  7134                           ;psect for function _DelayTimejudge
  7135  13B0                     _DelayTimejudge:	
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7139                           ;DelayTimejudge@value stored from wreg
  7140  13B0  0020               	movlb	0	; select bank0
  7141  13B1  00A9               	movwf	DelayTimejudge@value
  7142                           
  7143                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7144  13B2  3005               	movlw	5
  7145  13B3  00A4               	movwf	??_DelayTimejudge
  7146  13B4  0824               	movf	??_DelayTimejudge,w
  7147  13B5  00A6               	movwf	DelayTimejudge@i
  7148  13B6  01A7               	clrf	DelayTimejudge@j
  7149  13B7  01A8               	clrf	DelayTimejudge@k
  7150                           
  7151                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7152  13B8  3031               	movlw	49
  7153  13B9  0229               	subwf	DelayTimejudge@value,w
  7154  13BA  1803               	skipnc
  7155  13BB  2BD8               	goto	l8017
  7156                           
  7157                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7158  13BC  0829               	movf	DelayTimejudge@value,w
  7159  13BD  390F               	andlw	15
  7160  13BE  00A4               	movwf	??_DelayTimejudge
  7161  13BF  0824               	movf	??_DelayTimejudge,w
  7162  13C0  00A7               	movwf	DelayTimejudge@j
  7163                           
  7164                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7165  13C1  0829               	movf	DelayTimejudge@value,w
  7166  13C2  00A4               	movwf	??_DelayTimejudge
  7167  13C3  3004               	movlw	4
  7168  13C4                     u7935:	
  7169  13C4  36A4               	lsrf	??_DelayTimejudge,f
  7170  13C5  0B89               	decfsz	9,f
  7171  13C6  2BC4               	goto	u7935
  7172  13C7  0824               	movf	??_DelayTimejudge,w
  7173  13C8  390F               	andlw	15
  7174  13C9  00A5               	movwf	??_DelayTimejudge+1
  7175  13CA  0825               	movf	??_DelayTimejudge+1,w
  7176  13CB  00A8               	movwf	DelayTimejudge@k
  7177                           
  7178                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7179  13CC  300A               	movlw	10
  7180  13CD  00A4               	movwf	??_DelayTimejudge
  7181  13CE  0824               	movf	??_DelayTimejudge,w
  7182  13CF  00A0               	movwf	___bmul@multiplicand
  7183  13D0  0828               	movf	DelayTimejudge@k,w
  7184  13D1  3190  2095         	fcall	___bmul
  7185  13D3  0020               	movlb	0	; select bank0
  7186  13D4  0727               	addwf	DelayTimejudge@j,w
  7187  13D5  00A5               	movwf	??_DelayTimejudge+1
  7188  13D6  0825               	movf	??_DelayTimejudge+1,w
  7189  13D7  00A6               	movwf	DelayTimejudge@i
  7190  13D8                     l8017:	
  7191                           
  7192                           ;DelayOff_B1.c: 112: }
  7193                           ;DelayOff_B1.c: 133: return i;
  7194  13D8  0826               	movf	DelayTimejudge@i,w
  7195  13D9  0008               	return
  7196  13DA                     __end_of_DelayTimejudge:	
  7197                           
  7198                           	psect	text26
  7199  1095                     __ptext26:	
  7200 ;; *************** function ___bmul *****************
  7201 ;; Defined at:
  7202 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  multiplier      1    wreg     unsigned char 
  7205 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7208 ;;  product         1    2[BANK0 ] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      unsigned char 
  7211 ;; Registers used:
  7212 ;;		wreg, status,2, status,0
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7218 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;Total ram usage:        4 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    5
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_DelayTimejudge
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           
  7233                           ;psect for function ___bmul
  7234  1095                     ___bmul:	
  7235                           
  7236                           ;incstack = 0
  7237                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7238                           ;___bmul@multiplier stored from wreg
  7239  1095  0020               	movlb	0	; select bank0
  7240  1096  00A3               	movwf	___bmul@multiplier
  7241  1097  01A2               	clrf	___bmul@product
  7242  1098                     l7979:	
  7243  1098  1C23               	btfss	___bmul@multiplier,0
  7244  1099  289E               	goto	l7983
  7245  109A  0820               	movf	___bmul@multiplicand,w
  7246  109B  00A1               	movwf	??___bmul
  7247  109C  0821               	movf	??___bmul,w
  7248  109D  07A2               	addwf	___bmul@product,f
  7249  109E                     l7983:	
  7250  109E  1003               	clrc
  7251  109F  0DA0               	rlf	___bmul@multiplicand,f
  7252  10A0  1003               	clrc
  7253  10A1  0CA3               	rrf	___bmul@multiplier,f
  7254  10A2  08A3               	movf	___bmul@multiplier,f
  7255  10A3  1D03               	skipz
  7256  10A4  2898               	goto	l7979
  7257  10A5  0822               	movf	___bmul@product,w
  7258  10A6  0008               	return
  7259  10A7                     __end_of___bmul:	
  7260                           
  7261                           	psect	text27
  7262  14F6                     __ptext27:	
  7263 ;; *************** function _setRFSW_AdjControl *****************
  7264 ;; Defined at:
  7265 ;;		line 418 in file "../src/RF_Control_B1.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  sw              1    wreg     unsigned char 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  sw              1   70[BANK0 ] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;		None               void
  7272 ;; Registers used:
  7273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;Total ram usage:        3 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:   10
  7286 ;; This function calls:
  7287 ;;		_RfSWPointSelect
  7288 ;;		_setRF_DimmerValue
  7289 ;;		_setTxData
  7290 ;; This function is called by:
  7291 ;;		_setControl_Lights_Table
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _setRFSW_AdjControl
  7297  14F6                     _setRFSW_AdjControl:	
  7298                           
  7299                           ;incstack = 0
  7300                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7301                           ;setRFSW_AdjControl@sw stored from wreg
  7302  14F6  0020               	movlb	0	; select bank0
  7303  14F7  00E6               	movwf	setRFSW_AdjControl@sw
  7304                           
  7305                           ;RF_Control_B1.c: 419: RfSWPointSelect(sw);
  7306  14F8  0866               	movf	setRFSW_AdjControl@sw,w
  7307  14F9  3192  224A  3194   	fcall	_RfSWPointSelect
  7308                           
  7309                           ;RF_Control_B1.c: 420: if (RFSW->Status == 1) {
  7310  14FC  0021               	movlb	1	; select bank1
  7311  14FD  0851               	movf	_RFSW^(0+128),w
  7312  14FE  0086               	movwf	6
  7313  14FF  0187               	clrf	7
  7314  1500  1C01               	btfss	1,0
  7315  1501  2D0A               	goto	l8447
  7316                           
  7317                           ;RF_Control_B1.c: 421: Memory.Modify=1;
  7318  1502  0023               	movlb	3	; select bank3
  7319  1503  1444               	bsf	(_Memory^(0+384)+36),0
  7320                           
  7321                           ;RF_Control_B1.c: 422: setRF_DimmerValue(sw);
  7322  1504  0020               	movlb	0	; select bank0
  7323  1505  0866               	movf	setRFSW_AdjControl@sw,w
  7324  1506  3194  24C1  3194   	fcall	_setRF_DimmerValue
  7325                           
  7326                           ;RF_Control_B1.c: 423: } else {
  7327  1509  2D1C               	goto	l2298
  7328  150A                     l8447:	
  7329                           
  7330                           ;RF_Control_B1.c: 424: product->Data[9]=product->Data[20 + sw];
  7331  150A  0020               	movlb	0	; select bank0
  7332  150B  0866               	movf	setRFSW_AdjControl@sw,w
  7333  150C  3E14               	addlw	20
  7334  150D  076D               	addwf	_product,w
  7335  150E  00E4               	movwf	??_setRFSW_AdjControl
  7336  150F  0864               	movf	??_setRFSW_AdjControl,w
  7337  1510  0086               	movwf	6
  7338  1511  3002               	movlw	2	; select bank4/5
  7339  1512  0087               	movwf	7
  7340  1513  0801               	movf	1,w
  7341  1514  00E5               	movwf	??_setRFSW_AdjControl+1
  7342  1515  086D               	movf	_product,w
  7343  1516  3E09               	addlw	9
  7344  1517  0086               	movwf	6
  7345  1518  3002               	movlw	2	; select bank4/5
  7346  1519  0087               	movwf	7
  7347  151A  0865               	movf	??_setRFSW_AdjControl+1,w
  7348  151B  0081               	movwf	1
  7349  151C                     l2298:	
  7350                           
  7351                           ;RF_Control_B1.c: 425: }
  7352                           ;RF_Control_B1.c: 426: product->Data[17]=product->Data[26 + sw];
  7353  151C  0020               	movlb	0	; select bank0
  7354  151D  0866               	movf	setRFSW_AdjControl@sw,w
  7355  151E  3E1A               	addlw	26
  7356  151F  076D               	addwf	_product,w
  7357  1520  00E4               	movwf	??_setRFSW_AdjControl
  7358  1521  0864               	movf	??_setRFSW_AdjControl,w
  7359  1522  0086               	movwf	6
  7360  1523  3002               	movlw	2	; select bank4/5
  7361  1524  0087               	movwf	7
  7362  1525  0801               	movf	1,w
  7363  1526  00E5               	movwf	??_setRFSW_AdjControl+1
  7364  1527  086D               	movf	_product,w
  7365  1528  3E11               	addlw	17
  7366  1529  0086               	movwf	6
  7367  152A  3002               	movlw	2	; select bank4/5
  7368  152B  0087               	movwf	7
  7369  152C  0865               	movf	??_setRFSW_AdjControl+1,w
  7370  152D  0081               	movwf	1
  7371                           
  7372                           ;RF_Control_B1.c: 427: setTxData();
  7373  152E  3185  25E8         	fcall	_setTxData
  7374  1530  0008               	return
  7375  1531                     __end_of_setRFSW_AdjControl:	
  7376                           
  7377                           	psect	text28
  7378  14C1                     __ptext28:	
  7379 ;; *************** function _setRF_DimmerValue *****************
  7380 ;; Defined at:
  7381 ;;		line 438 in file "../src/RF_Control_B1.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  lights          1    wreg     unsigned char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  lights          1   67[BANK0 ] unsigned char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;		None               void
  7388 ;; Registers used:
  7389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;Total ram usage:        3 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    9
  7402 ;; This function calls:
  7403 ;;		_setDimmerLights_AdjRF
  7404 ;; This function is called by:
  7405 ;;		_setRFSW_AdjControl
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           
  7410                           ;psect for function _setRF_DimmerValue
  7411  14C1                     _setRF_DimmerValue:	
  7412                           
  7413                           ;incstack = 0
  7414                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7415                           ;setRF_DimmerValue@lights stored from wreg
  7416  14C1  0020               	movlb	0	; select bank0
  7417  14C2  00E3               	movwf	setRF_DimmerValue@lights
  7418                           
  7419                           ;RF_Control_B1.c: 439: if (RF_Data[9] > 0x64) {
  7420  14C3  3065               	movlw	101
  7421  14C4  0022               	movlb	2	; select bank2
  7422  14C5  0229               	subwf	(_RF_Data^(0+256)+9),w
  7423  14C6  1C03               	skipc
  7424  14C7  2CCE               	goto	l8317
  7425                           
  7426                           ;RF_Control_B1.c: 440: RF_Data[9] = 0x64;
  7427  14C8  3064               	movlw	100
  7428  14C9  0020               	movlb	0	; select bank0
  7429  14CA  00E1               	movwf	??_setRF_DimmerValue
  7430  14CB  0861               	movf	??_setRF_DimmerValue,w
  7431  14CC  0022               	movlb	2	; select bank2
  7432  14CD  00A9               	movwf	(_RF_Data^(0+256)+9)
  7433  14CE                     l8317:	
  7434                           
  7435                           ;RF_Control_B1.c: 441: }
  7436                           ;RF_Control_B1.c: 442: product->Data[9]=RF_Data[9];
  7437  14CE  0829               	movf	(_RF_Data^(0+256)+9),w
  7438  14CF  0020               	movlb	0	; select bank0
  7439  14D0  00E1               	movwf	??_setRF_DimmerValue
  7440  14D1  086D               	movf	_product,w
  7441  14D2  3E09               	addlw	9
  7442  14D3  0086               	movwf	6
  7443  14D4  3002               	movlw	2	; select bank4/5
  7444  14D5  0087               	movwf	7
  7445  14D6  0861               	movf	??_setRF_DimmerValue,w
  7446  14D7  0081               	movwf	1
  7447                           
  7448                           ;RF_Control_B1.c: 443: product->Data[11]=lights;
  7449  14D8  0863               	movf	setRF_DimmerValue@lights,w
  7450  14D9  00E1               	movwf	??_setRF_DimmerValue
  7451  14DA  086D               	movf	_product,w
  7452  14DB  3E0B               	addlw	11
  7453  14DC  0086               	movwf	6
  7454  14DD  3002               	movlw	2	; select bank4/5
  7455  14DE  0087               	movwf	7
  7456  14DF  0861               	movf	??_setRF_DimmerValue,w
  7457  14E0  0081               	movwf	1
  7458                           
  7459                           ;RF_Control_B1.c: 444: product->Data[(20 + lights)]=product->Data[9];
  7460  14E1  086D               	movf	_product,w
  7461  14E2  3E09               	addlw	9
  7462  14E3  0086               	movwf	6
  7463  14E4  3002               	movlw	2	; select bank4/5
  7464  14E5  0087               	movwf	7
  7465  14E6  0801               	movf	1,w
  7466  14E7  00E1               	movwf	??_setRF_DimmerValue
  7467  14E8  0863               	movf	setRF_DimmerValue@lights,w
  7468  14E9  3E14               	addlw	20
  7469  14EA  076D               	addwf	_product,w
  7470  14EB  00E2               	movwf	??_setRF_DimmerValue+1
  7471  14EC  0862               	movf	??_setRF_DimmerValue+1,w
  7472  14ED  0086               	movwf	6
  7473  14EE  3002               	movlw	2	; select bank4/5
  7474  14EF  0087               	movwf	7
  7475  14F0  0861               	movf	??_setRF_DimmerValue,w
  7476  14F1  0081               	movwf	1
  7477                           
  7478                           ;RF_Control_B1.c: 445: setDimmerLights_AdjRF(lights);
  7479  14F2  0863               	movf	setRF_DimmerValue@lights,w
  7480  14F3  3192  22EE         	fcall	_setDimmerLights_AdjRF
  7481  14F5  0008               	return
  7482  14F6                     __end_of_setRF_DimmerValue:	
  7483                           
  7484                           	psect	text29
  7485  12EE                     __ptext29:	
  7486 ;; *************** function _setDimmerLights_AdjRF *****************
  7487 ;; Defined at:
  7488 ;;		line 688 in file "../src/Dimmer_B1.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  lights          1    wreg     unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  lights          1   64[BANK0 ] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;Total ram usage:        2 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    8
  7509 ;; This function calls:
  7510 ;;		_DimmerLightsPointSelect
  7511 ;;		_getPercentValue
  7512 ;; This function is called by:
  7513 ;;		_setRF_DimmerValue
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function _setDimmerLights_AdjRF
  7519  12EE                     _setDimmerLights_AdjRF:	
  7520                           
  7521                           ;incstack = 0
  7522                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7523                           ;setDimmerLights_AdjRF@lights stored from wreg
  7524  12EE  0020               	movlb	0	; select bank0
  7525  12EF  00E0               	movwf	setDimmerLights_AdjRF@lights
  7526                           
  7527                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  7528  12F0  0860               	movf	setDimmerLights_AdjRF@lights,w
  7529  12F1  3191  219A  3192   	fcall	_DimmerLightsPointSelect
  7530                           
  7531                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  7532  12F4  0020               	movlb	0	; select bank0
  7533  12F5  086B               	movf	_DimmerLights,w
  7534  12F6  0086               	movwf	6
  7535  12F7  3001               	movlw	1	; select bank2/3
  7536  12F8  0087               	movwf	7
  7537  12F9  1501               	bsf	1,2
  7538                           
  7539                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  7540  12FA  086B               	movf	_DimmerLights,w
  7541  12FB  0086               	movwf	6
  7542  12FC  3001               	movlw	1	; select bank2/3
  7543  12FD  0087               	movwf	7
  7544  12FE  1481               	bsf	1,1
  7545                           
  7546                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7547  12FF  086D               	movf	_product,w
  7548  1300  3E09               	addlw	9
  7549  1301  0086               	movwf	6
  7550  1302  3002               	movlw	2	; select bank4/5
  7551  1303  0087               	movwf	7
  7552  1304  0801               	movf	1,w
  7553  1305  3188  2022         	fcall	_getPercentValue
  7554  1307  0020               	movlb	0	; select bank0
  7555  1308  00DF               	movwf	??_setDimmerLights_AdjRF
  7556  1309  086B               	movf	_DimmerLights,w
  7557  130A  3E05               	addlw	5
  7558  130B  0086               	movwf	6
  7559  130C  3001               	movlw	1	; select bank2/3
  7560  130D  0087               	movwf	7
  7561  130E  085F               	movf	??_setDimmerLights_AdjRF,w
  7562  130F  0081               	movwf	1
  7563  1310  0008               	return
  7564  1311                     __end_of_setDimmerLights_AdjRF:	
  7565                           
  7566                           	psect	text30
  7567  0822                     __ptext30:	
  7568 ;; *************** function _getPercentValue *****************
  7569 ;; Defined at:
  7570 ;;		line 761 in file "../src/Dimmer_B1.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;  value           1    wreg     unsigned char 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  value           1   59[BANK0 ] unsigned char 
  7575 ;;  i               3   60[BANK0 ] float 
  7576 ;; Return value:  Size  Location     Type
  7577 ;;                  1    wreg      unsigned char 
  7578 ;; Registers used:
  7579 ;;		wreg, status,2, status,0, pclath, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;Total ram usage:        6 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:    7
  7592 ;; This function calls:
  7593 ;;		___awtoft
  7594 ;;		___ftadd
  7595 ;;		___ftdiv
  7596 ;;		___ftmul
  7597 ;;		___fttol
  7598 ;; This function is called by:
  7599 ;;		_setDimmerLights_AdjRF
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           
  7604                           ;psect for function _getPercentValue
  7605  0822                     _getPercentValue:	
  7606                           
  7607                           ;incstack = 0
  7608                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7609                           ;getPercentValue@value stored from wreg
  7610  0822  0020               	movlb	0	; select bank0
  7611  0823  00DB               	movwf	getPercentValue@value
  7612                           
  7613                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
  7614  0824  3000               	movlw	0
  7615  0825  00DC               	movwf	getPercentValue@i
  7616  0826  3050               	movlw	80
  7617  0827  00DD               	movwf	getPercentValue@i+1
  7618  0828  3042               	movlw	66
  7619  0829  00DE               	movwf	getPercentValue@i+2
  7620                           
  7621                           ;Dimmer_B1.c: 764: i /= 100;
  7622  082A  3000               	movlw	0
  7623  082B  00AE               	movwf	___ftdiv@f2
  7624  082C  30C8               	movlw	200
  7625  082D  00AF               	movwf	___ftdiv@f2+1
  7626  082E  3042               	movlw	66
  7627  082F  00B0               	movwf	___ftdiv@f2+2
  7628  0830  085C               	movf	getPercentValue@i,w
  7629  0831  00B1               	movwf	___ftdiv@f1
  7630  0832  085D               	movf	getPercentValue@i+1,w
  7631  0833  00B2               	movwf	___ftdiv@f1+1
  7632  0834  085E               	movf	getPercentValue@i+2,w
  7633  0835  00B3               	movwf	___ftdiv@f1+2
  7634  0836  318E  26A8  3188   	fcall	___ftdiv
  7635  0839  0020               	movlb	0	; select bank0
  7636  083A  082E               	movf	?___ftdiv,w
  7637  083B  00DC               	movwf	getPercentValue@i
  7638  083C  082F               	movf	?___ftdiv+1,w
  7639  083D  00DD               	movwf	getPercentValue@i+1
  7640  083E  0830               	movf	?___ftdiv+2,w
  7641  083F  00DE               	movwf	getPercentValue@i+2
  7642                           
  7643                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-90)*0.8)));
  7644  0840  085B               	movf	getPercentValue@value,w
  7645  0841  00D9               	movwf	??_getPercentValue
  7646  0842  01DA               	clrf	??_getPercentValue+1
  7647  0843  09D9               	comf	??_getPercentValue,f
  7648  0844  09DA               	comf	??_getPercentValue+1,f
  7649  0845  0AD9               	incf	??_getPercentValue,f
  7650  0846  1903               	skipnz
  7651  0847  0ADA               	incf	??_getPercentValue+1,f
  7652  0848  0859               	movf	??_getPercentValue,w
  7653  0849  3E64               	addlw	100
  7654  084A  00A8               	movwf	___awtoft@c
  7655  084B  3000               	movlw	0
  7656  084C  3D5A               	addwfc	??_getPercentValue+1,w
  7657  084D  00A9               	movwf	___awtoft@c+1
  7658  084E  3192  22CC  3188   	fcall	___awtoft
  7659  0851  0020               	movlb	0	; select bank0
  7660  0852  0828               	movf	?___awtoft,w
  7661  0853  00B1               	movwf	___ftmul@f2
  7662  0854  0829               	movf	?___awtoft+1,w
  7663  0855  00B2               	movwf	___ftmul@f2+1
  7664  0856  082A               	movf	?___awtoft+2,w
  7665  0857  00B3               	movwf	___ftmul@f2+2
  7666  0858  085C               	movf	getPercentValue@i,w
  7667  0859  00AE               	movwf	___ftmul@f1
  7668  085A  085D               	movf	getPercentValue@i+1,w
  7669  085B  00AF               	movwf	___ftmul@f1+1
  7670  085C  085E               	movf	getPercentValue@i+2,w
  7671  085D  00B0               	movwf	___ftmul@f1+2
  7672  085E  3186  26A7  3188   	fcall	___ftmul
  7673  0861  0020               	movlb	0	; select bank0
  7674  0862  082E               	movf	?___ftmul,w
  7675  0863  00C1               	movwf	___ftadd@f2
  7676  0864  082F               	movf	?___ftmul+1,w
  7677  0865  00C2               	movwf	___ftadd@f2+1
  7678  0866  0830               	movf	?___ftmul+2,w
  7679  0867  00C3               	movwf	___ftadd@f2+2
  7680  0868  3000               	movlw	0
  7681  0869  00BE               	movwf	___ftadd@f1
  7682  086A  3000               	movlw	0
  7683  086B  00BF               	movwf	___ftadd@f1+1
  7684  086C  3041               	movlw	65
  7685  086D  00C0               	movwf	___ftadd@f1+2
  7686  086E  3183  2360  3188   	fcall	___ftadd
  7687  0871  0020               	movlb	0	; select bank0
  7688  0872  083E               	movf	?___ftadd,w
  7689  0873  00CB               	movwf	___fttol@f1
  7690  0874  083F               	movf	?___ftadd+1,w
  7691  0875  00CC               	movwf	___fttol@f1+1
  7692  0876  0840               	movf	?___ftadd+2,w
  7693  0877  00CD               	movwf	___fttol@f1+2
  7694  0878  318D  2597         	fcall	___fttol
  7695  087A  0020               	movlb	0	; select bank0
  7696  087B  084B               	movf	?___fttol,w
  7697  087C  0008               	return
  7698  087D                     __end_of_getPercentValue:	
  7699                           
  7700                           	psect	text31
  7701  06A7                     __ptext31:	
  7702 ;; *************** function ___ftmul *****************
  7703 ;; Defined at:
  7704 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  f1              3   14[BANK0 ] float 
  7707 ;;  f2              3   17[BANK0 ] float 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7710 ;;  sign            1   29[BANK0 ] unsigned char 
  7711 ;;  cntr            1   28[BANK0 ] unsigned char 
  7712 ;;  exp             1   24[BANK0 ] unsigned char 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  3   14[BANK0 ] float 
  7715 ;; Registers used:
  7716 ;;		wreg, status,2, status,0, pclath, cstack
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7722 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;Total ram usage:       16 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    6
  7729 ;; This function calls:
  7730 ;;		___ftpack
  7731 ;; This function is called by:
  7732 ;;		_getPercentValue
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function ___ftmul
  7738  06A7                     ___ftmul:	
  7739                           
  7740                           ;incstack = 0
  7741                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7742  06A7  0020               	movlb	0	; select bank0
  7743  06A8  082E               	movf	___ftmul@f1,w
  7744  06A9  00B4               	movwf	??___ftmul
  7745  06AA  082F               	movf	___ftmul@f1+1,w
  7746  06AB  00B5               	movwf	??___ftmul+1
  7747  06AC  0830               	movf	___ftmul@f1+2,w
  7748  06AD  00B6               	movwf	??___ftmul+2
  7749  06AE  1003               	clrc
  7750  06AF  0D35               	rlf	??___ftmul+1,w
  7751  06B0  0D36               	rlf	??___ftmul+2,w
  7752  06B1  00B7               	movwf	??___ftmul+3
  7753  06B2  0837               	movf	??___ftmul+3,w
  7754  06B3  00B8               	movwf	___ftmul@exp
  7755  06B4  08B8               	movf	___ftmul@exp,f
  7756  06B5  1D03               	skipz
  7757  06B6  2EBE               	goto	l5757
  7758  06B7  3000               	movlw	0
  7759  06B8  00AE               	movwf	?___ftmul
  7760  06B9  3000               	movlw	0
  7761  06BA  00AF               	movwf	?___ftmul+1
  7762  06BB  3000               	movlw	0
  7763  06BC  00B0               	movwf	?___ftmul+2
  7764  06BD  0008               	return
  7765  06BE                     l5757:	
  7766  06BE  0831               	movf	___ftmul@f2,w
  7767  06BF  00B4               	movwf	??___ftmul
  7768  06C0  0832               	movf	___ftmul@f2+1,w
  7769  06C1  00B5               	movwf	??___ftmul+1
  7770  06C2  0833               	movf	___ftmul@f2+2,w
  7771  06C3  00B6               	movwf	??___ftmul+2
  7772  06C4  1003               	clrc
  7773  06C5  0D35               	rlf	??___ftmul+1,w
  7774  06C6  0D36               	rlf	??___ftmul+2,w
  7775  06C7  00B7               	movwf	??___ftmul+3
  7776  06C8  0837               	movf	??___ftmul+3,w
  7777  06C9  00BD               	movwf	___ftmul@sign
  7778  06CA  08BD               	movf	___ftmul@sign,f
  7779  06CB  1D03               	skipz
  7780  06CC  2ED4               	goto	l5763
  7781  06CD  3000               	movlw	0
  7782  06CE  00AE               	movwf	?___ftmul
  7783  06CF  3000               	movlw	0
  7784  06D0  00AF               	movwf	?___ftmul+1
  7785  06D1  3000               	movlw	0
  7786  06D2  00B0               	movwf	?___ftmul+2
  7787  06D3  0008               	return
  7788  06D4                     l5763:	
  7789  06D4  083D               	movf	___ftmul@sign,w
  7790  06D5  3E7B               	addlw	123
  7791  06D6  00B4               	movwf	??___ftmul
  7792  06D7  0834               	movf	??___ftmul,w
  7793  06D8  07B8               	addwf	___ftmul@exp,f
  7794  06D9  082E               	movf	___ftmul@f1,w
  7795  06DA  00B4               	movwf	??___ftmul
  7796  06DB  082F               	movf	___ftmul@f1+1,w
  7797  06DC  00B5               	movwf	??___ftmul+1
  7798  06DD  0830               	movf	___ftmul@f1+2,w
  7799  06DE  00B6               	movwf	??___ftmul+2
  7800  06DF  3010               	movlw	16
  7801  06E0                     u4375:	
  7802  06E0  36B6               	lsrf	??___ftmul+2,f
  7803  06E1  0CB5               	rrf	??___ftmul+1,f
  7804  06E2  0CB4               	rrf	??___ftmul,f
  7805  06E3  0B89               	decfsz	9,f
  7806  06E4  2EE0               	goto	u4375
  7807  06E5  0834               	movf	??___ftmul,w
  7808  06E6  00B7               	movwf	??___ftmul+3
  7809  06E7  0837               	movf	??___ftmul+3,w
  7810  06E8  00BD               	movwf	___ftmul@sign
  7811  06E9  0831               	movf	___ftmul@f2,w
  7812  06EA  00B4               	movwf	??___ftmul
  7813  06EB  0832               	movf	___ftmul@f2+1,w
  7814  06EC  00B5               	movwf	??___ftmul+1
  7815  06ED  0833               	movf	___ftmul@f2+2,w
  7816  06EE  00B6               	movwf	??___ftmul+2
  7817  06EF  3010               	movlw	16
  7818  06F0                     u4385:	
  7819  06F0  36B6               	lsrf	??___ftmul+2,f
  7820  06F1  0CB5               	rrf	??___ftmul+1,f
  7821  06F2  0CB4               	rrf	??___ftmul,f
  7822  06F3  0B89               	decfsz	9,f
  7823  06F4  2EF0               	goto	u4385
  7824  06F5  0834               	movf	??___ftmul,w
  7825  06F6  00B7               	movwf	??___ftmul+3
  7826  06F7  0837               	movf	??___ftmul+3,w
  7827  06F8  06BD               	xorwf	___ftmul@sign,f
  7828  06F9  3080               	movlw	128
  7829  06FA  00B4               	movwf	??___ftmul
  7830  06FB  0834               	movf	??___ftmul,w
  7831  06FC  05BD               	andwf	___ftmul@sign,f
  7832  06FD  17AF               	bsf	___ftmul@f1+1,7
  7833  06FE  17B2               	bsf	___ftmul@f2+1,7
  7834  06FF  30FF               	movlw	255
  7835  0700  05B1               	andwf	___ftmul@f2,f
  7836  0701  30FF               	movlw	255
  7837  0702  05B2               	andwf	___ftmul@f2+1,f
  7838  0703  3000               	movlw	0
  7839  0704  05B3               	andwf	___ftmul@f2+2,f
  7840  0705  3000               	movlw	0
  7841  0706  00B9               	movwf	___ftmul@f3_as_product
  7842  0707  3000               	movlw	0
  7843  0708  00BA               	movwf	___ftmul@f3_as_product+1
  7844  0709  3000               	movlw	0
  7845  070A  00BB               	movwf	___ftmul@f3_as_product+2
  7846  070B  3007               	movlw	7
  7847  070C  00B4               	movwf	??___ftmul
  7848  070D  0834               	movf	??___ftmul,w
  7849  070E  00BC               	movwf	___ftmul@cntr
  7850  070F                     l5775:	
  7851  070F  1C2E               	btfss	___ftmul@f1,0
  7852  0710  2F17               	goto	l5779
  7853  0711  0831               	movf	___ftmul@f2,w
  7854  0712  07B9               	addwf	___ftmul@f3_as_product,f
  7855  0713  0832               	movf	___ftmul@f2+1,w
  7856  0714  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7857  0715  0833               	movf	___ftmul@f2+2,w
  7858  0716  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7859  0717                     l5779:	
  7860  0717  3001               	movlw	1
  7861  0718                     u4405:	
  7862  0718  36B0               	lsrf	___ftmul@f1+2,f
  7863  0719  0CAF               	rrf	___ftmul@f1+1,f
  7864  071A  0CAE               	rrf	___ftmul@f1,f
  7865  071B  0B89               	decfsz	9,f
  7866  071C  2F18               	goto	u4405
  7867  071D  3001               	movlw	1
  7868  071E                     u4415:	
  7869  071E  35B1               	lslf	___ftmul@f2,f
  7870  071F  0DB2               	rlf	___ftmul@f2+1,f
  7871  0720  0DB3               	rlf	___ftmul@f2+2,f
  7872  0721  0B89               	decfsz	9,f
  7873  0722  2F1E               	goto	u4415
  7874  0723  3001               	movlw	1
  7875  0724  02BC               	subwf	___ftmul@cntr,f
  7876  0725  1D03               	btfss	3,2
  7877  0726  2F0F               	goto	l5775
  7878  0727  3009               	movlw	9
  7879  0728  00B4               	movwf	??___ftmul
  7880  0729  0834               	movf	??___ftmul,w
  7881  072A  00BC               	movwf	___ftmul@cntr
  7882  072B                     l5787:	
  7883  072B  1C2E               	btfss	___ftmul@f1,0
  7884  072C  2F33               	goto	l5791
  7885  072D  0831               	movf	___ftmul@f2,w
  7886  072E  07B9               	addwf	___ftmul@f3_as_product,f
  7887  072F  0832               	movf	___ftmul@f2+1,w
  7888  0730  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7889  0731  0833               	movf	___ftmul@f2+2,w
  7890  0732  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7891  0733                     l5791:	
  7892  0733  3001               	movlw	1
  7893  0734                     u4445:	
  7894  0734  36B0               	lsrf	___ftmul@f1+2,f
  7895  0735  0CAF               	rrf	___ftmul@f1+1,f
  7896  0736  0CAE               	rrf	___ftmul@f1,f
  7897  0737  0B89               	decfsz	9,f
  7898  0738  2F34               	goto	u4445
  7899  0739  3001               	movlw	1
  7900  073A                     u4455:	
  7901  073A  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7902  073B  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7903  073C  0CB9               	rrf	___ftmul@f3_as_product,f
  7904  073D  0B89               	decfsz	9,f
  7905  073E  2F3A               	goto	u4455
  7906  073F  3001               	movlw	1
  7907  0740  02BC               	subwf	___ftmul@cntr,f
  7908  0741  1D03               	btfss	3,2
  7909  0742  2F2B               	goto	l5787
  7910  0743  0839               	movf	___ftmul@f3_as_product,w
  7911  0744  00A0               	movwf	___ftpack@arg
  7912  0745  083A               	movf	___ftmul@f3_as_product+1,w
  7913  0746  00A1               	movwf	___ftpack@arg+1
  7914  0747  083B               	movf	___ftmul@f3_as_product+2,w
  7915  0748  00A2               	movwf	___ftpack@arg+2
  7916  0749  0838               	movf	___ftmul@exp,w
  7917  074A  00B4               	movwf	??___ftmul
  7918  074B  0834               	movf	??___ftmul,w
  7919  074C  00A3               	movwf	___ftpack@exp
  7920  074D  083D               	movf	___ftmul@sign,w
  7921  074E  00B5               	movwf	??___ftmul+1
  7922  074F  0835               	movf	??___ftmul+1,w
  7923  0750  00A4               	movwf	___ftpack@sign
  7924  0751  3189  213C         	fcall	___ftpack
  7925  0753  0020               	movlb	0	; select bank0
  7926  0754  0820               	movf	?___ftpack,w
  7927  0755  00AE               	movwf	?___ftmul
  7928  0756  0821               	movf	?___ftpack+1,w
  7929  0757  00AF               	movwf	?___ftmul+1
  7930  0758  0822               	movf	?___ftpack+2,w
  7931  0759  00B0               	movwf	?___ftmul+2
  7932  075A  0008               	return
  7933  075B                     __end_of___ftmul:	
  7934                           
  7935                           	psect	text32
  7936  0360                     __ptext32:	
  7937 ;; *************** function ___ftadd *****************
  7938 ;; Defined at:
  7939 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  f1              3   30[BANK0 ] float 
  7942 ;;  f2              3   33[BANK0 ] float 
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;  exp1            1   42[BANK0 ] unsigned char 
  7945 ;;  exp2            1   41[BANK0 ] unsigned char 
  7946 ;;  sign            1   40[BANK0 ] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  3   30[BANK0 ] float 
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0, pclath, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7956 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;Total ram usage:       13 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    6
  7963 ;; This function calls:
  7964 ;;		___ftpack
  7965 ;; This function is called by:
  7966 ;;		_getPercentValue
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function ___ftadd
  7972  0360                     ___ftadd:	
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7976  0360  0020               	movlb	0	; select bank0
  7977  0361  083E               	movf	___ftadd@f1,w
  7978  0362  00C4               	movwf	??___ftadd
  7979  0363  083F               	movf	___ftadd@f1+1,w
  7980  0364  00C5               	movwf	??___ftadd+1
  7981  0365  0840               	movf	___ftadd@f1+2,w
  7982  0366  00C6               	movwf	??___ftadd+2
  7983  0367  1003               	clrc
  7984  0368  0D45               	rlf	??___ftadd+1,w
  7985  0369  0D46               	rlf	??___ftadd+2,w
  7986  036A  00C7               	movwf	??___ftadd+3
  7987  036B  0847               	movf	??___ftadd+3,w
  7988  036C  00CA               	movwf	___ftadd@exp1
  7989  036D  0841               	movf	___ftadd@f2,w
  7990  036E  00C4               	movwf	??___ftadd
  7991  036F  0842               	movf	___ftadd@f2+1,w
  7992  0370  00C5               	movwf	??___ftadd+1
  7993  0371  0843               	movf	___ftadd@f2+2,w
  7994  0372  00C6               	movwf	??___ftadd+2
  7995  0373  1003               	clrc
  7996  0374  0D45               	rlf	??___ftadd+1,w
  7997  0375  0D46               	rlf	??___ftadd+2,w
  7998  0376  00C7               	movwf	??___ftadd+3
  7999  0377  0847               	movf	??___ftadd+3,w
  8000  0378  00C9               	movwf	___ftadd@exp2
  8001  0379  084A               	movf	___ftadd@exp1,w
  8002  037A  1903               	btfsc	3,2
  8003  037B  2B88               	goto	l5645
  8004  037C  0849               	movf	___ftadd@exp2,w
  8005  037D  024A               	subwf	___ftadd@exp1,w
  8006  037E  1803               	skipnc
  8007  037F  2B8F               	goto	l5649
  8008  0380  034A               	decf	___ftadd@exp1,w
  8009  0381  3AFF               	xorlw	255
  8010  0382  0749               	addwf	___ftadd@exp2,w
  8011  0383  00C4               	movwf	??___ftadd
  8012  0384  3019               	movlw	25
  8013  0385  0244               	subwf	??___ftadd,w
  8014  0386  1C03               	skipc
  8015  0387  2B8F               	goto	l5649
  8016  0388                     l5645:	
  8017  0388  0841               	movf	___ftadd@f2,w
  8018  0389  00BE               	movwf	?___ftadd
  8019  038A  0842               	movf	___ftadd@f2+1,w
  8020  038B  00BF               	movwf	?___ftadd+1
  8021  038C  0843               	movf	___ftadd@f2+2,w
  8022  038D  00C0               	movwf	?___ftadd+2
  8023  038E  0008               	return
  8024  038F                     l5649:	
  8025  038F  0849               	movf	___ftadd@exp2,w
  8026  0390  1903               	btfsc	3,2
  8027  0391  0008               	return
  8028  0392  084A               	movf	___ftadd@exp1,w
  8029  0393  0249               	subwf	___ftadd@exp2,w
  8030  0394  1803               	skipnc
  8031  0395  2B9E               	goto	l5655
  8032  0396  0349               	decf	___ftadd@exp2,w
  8033  0397  3AFF               	xorlw	255
  8034  0398  074A               	addwf	___ftadd@exp1,w
  8035  0399  00C4               	movwf	??___ftadd
  8036  039A  3019               	movlw	25
  8037  039B  0244               	subwf	??___ftadd,w
  8038  039C  1803               	btfsc	3,0
  8039  039D  0008               	return
  8040  039E                     l5655:	
  8041  039E  3006               	movlw	6
  8042  039F  00C4               	movwf	??___ftadd
  8043  03A0  0844               	movf	??___ftadd,w
  8044  03A1  00C8               	movwf	___ftadd@sign
  8045  03A2  1BC0               	btfsc	___ftadd@f1+2,7
  8046  03A3  17C8               	bsf	___ftadd@sign,7
  8047  03A4  1BC3               	btfsc	___ftadd@f2+2,7
  8048  03A5  1748               	bsf	___ftadd@sign,6
  8049  03A6  17BF               	bsf	___ftadd@f1+1,7
  8050  03A7  30FF               	movlw	255
  8051  03A8  05BE               	andwf	___ftadd@f1,f
  8052  03A9  30FF               	movlw	255
  8053  03AA  05BF               	andwf	___ftadd@f1+1,f
  8054  03AB  3000               	movlw	0
  8055  03AC  05C0               	andwf	___ftadd@f1+2,f
  8056  03AD  17C2               	bsf	___ftadd@f2+1,7
  8057  03AE  30FF               	movlw	255
  8058  03AF  05C1               	andwf	___ftadd@f2,f
  8059  03B0  30FF               	movlw	255
  8060  03B1  05C2               	andwf	___ftadd@f2+1,f
  8061  03B2  3000               	movlw	0
  8062  03B3  05C3               	andwf	___ftadd@f2+2,f
  8063  03B4  0849               	movf	___ftadd@exp2,w
  8064  03B5  024A               	subwf	___ftadd@exp1,w
  8065  03B6  1803               	skipnc
  8066  03B7  2BDA               	goto	l5677
  8067  03B8                     l5667:	
  8068  03B8  3001               	movlw	1
  8069  03B9                     u4135:	
  8070  03B9  35C1               	lslf	___ftadd@f2,f
  8071  03BA  0DC2               	rlf	___ftadd@f2+1,f
  8072  03BB  0DC3               	rlf	___ftadd@f2+2,f
  8073  03BC  0B89               	decfsz	9,f
  8074  03BD  2BB9               	goto	u4135
  8075  03BE  3001               	movlw	1
  8076  03BF  02C9               	subwf	___ftadd@exp2,f
  8077  03C0  0849               	movf	___ftadd@exp2,w
  8078  03C1  064A               	xorwf	___ftadd@exp1,w
  8079  03C2  1903               	skipnz
  8080  03C3  2BD5               	goto	l5675
  8081  03C4  3001               	movlw	1
  8082  03C5  02C8               	subwf	___ftadd@sign,f
  8083  03C6  0848               	movf	___ftadd@sign,w
  8084  03C7  3907               	andlw	7
  8085  03C8  1903               	btfsc	3,2
  8086  03C9  2BD5               	goto	l5675
  8087  03CA  2BB8               	goto	l5667
  8088  03CB                     l5673:	
  8089  03CB  3001               	movlw	1
  8090  03CC                     u4165:	
  8091  03CC  36C0               	lsrf	___ftadd@f1+2,f
  8092  03CD  0CBF               	rrf	___ftadd@f1+1,f
  8093  03CE  0CBE               	rrf	___ftadd@f1,f
  8094  03CF  0B89               	decfsz	9,f
  8095  03D0  2BCC               	goto	u4165
  8096  03D1  3001               	movlw	1
  8097  03D2  00C4               	movwf	??___ftadd
  8098  03D3  0844               	movf	??___ftadd,w
  8099  03D4  07CA               	addwf	___ftadd@exp1,f
  8100  03D5                     l5675:	
  8101  03D5  084A               	movf	___ftadd@exp1,w
  8102  03D6  0649               	xorwf	___ftadd@exp2,w
  8103  03D7  1903               	btfsc	3,2
  8104  03D8  2BFF               	goto	l3046
  8105  03D9  2BCB               	goto	l5673
  8106  03DA                     l5677:	
  8107  03DA  084A               	movf	___ftadd@exp1,w
  8108  03DB  0249               	subwf	___ftadd@exp2,w
  8109  03DC  1803               	skipnc
  8110  03DD  2BFF               	goto	l3046
  8111  03DE                     l5679:	
  8112  03DE  3001               	movlw	1
  8113  03DF                     u4195:	
  8114  03DF  35BE               	lslf	___ftadd@f1,f
  8115  03E0  0DBF               	rlf	___ftadd@f1+1,f
  8116  03E1  0DC0               	rlf	___ftadd@f1+2,f
  8117  03E2  0B89               	decfsz	9,f
  8118  03E3  2BDF               	goto	u4195
  8119  03E4  3001               	movlw	1
  8120  03E5  02CA               	subwf	___ftadd@exp1,f
  8121  03E6  0849               	movf	___ftadd@exp2,w
  8122  03E7  064A               	xorwf	___ftadd@exp1,w
  8123  03E8  1903               	skipnz
  8124  03E9  2BFB               	goto	l5687
  8125  03EA  3001               	movlw	1
  8126  03EB  02C8               	subwf	___ftadd@sign,f
  8127  03EC  0848               	movf	___ftadd@sign,w
  8128  03ED  3907               	andlw	7
  8129  03EE  1903               	btfsc	3,2
  8130  03EF  2BFB               	goto	l5687
  8131  03F0  2BDE               	goto	l5679
  8132  03F1                     l5685:	
  8133  03F1  3001               	movlw	1
  8134  03F2                     u4225:	
  8135  03F2  36C3               	lsrf	___ftadd@f2+2,f
  8136  03F3  0CC2               	rrf	___ftadd@f2+1,f
  8137  03F4  0CC1               	rrf	___ftadd@f2,f
  8138  03F5  0B89               	decfsz	9,f
  8139  03F6  2BF2               	goto	u4225
  8140  03F7  3001               	movlw	1
  8141  03F8  00C4               	movwf	??___ftadd
  8142  03F9  0844               	movf	??___ftadd,w
  8143  03FA  07C9               	addwf	___ftadd@exp2,f
  8144  03FB                     l5687:	
  8145  03FB  084A               	movf	___ftadd@exp1,w
  8146  03FC  0649               	xorwf	___ftadd@exp2,w
  8147  03FD  1D03               	skipz
  8148  03FE  2BF1               	goto	l5685
  8149  03FF                     l3046:	
  8150  03FF  1FC8               	btfss	___ftadd@sign,7
  8151  0400  2C11               	goto	l5691
  8152  0401  30FF               	movlw	255
  8153  0402  06BE               	xorwf	___ftadd@f1,f
  8154  0403  30FF               	movlw	255
  8155  0404  06BF               	xorwf	___ftadd@f1+1,f
  8156  0405  30FF               	movlw	255
  8157  0406  06C0               	xorwf	___ftadd@f1+2,f
  8158  0407  3001               	movlw	1
  8159  0408  07BE               	addwf	___ftadd@f1,f
  8160  0409  3000               	movlw	0
  8161  040A  1803               	skipnc
  8162  040B  3001               	movlw	1
  8163  040C  07BF               	addwf	___ftadd@f1+1,f
  8164  040D  3000               	movlw	0
  8165  040E  1803               	skipnc
  8166  040F  3001               	movlw	1
  8167  0410  07C0               	addwf	___ftadd@f1+2,f
  8168  0411                     l5691:	
  8169  0411  1F48               	btfss	___ftadd@sign,6
  8170  0412  2C23               	goto	l5695
  8171  0413  30FF               	movlw	255
  8172  0414  06C1               	xorwf	___ftadd@f2,f
  8173  0415  30FF               	movlw	255
  8174  0416  06C2               	xorwf	___ftadd@f2+1,f
  8175  0417  30FF               	movlw	255
  8176  0418  06C3               	xorwf	___ftadd@f2+2,f
  8177  0419  3001               	movlw	1
  8178  041A  07C1               	addwf	___ftadd@f2,f
  8179  041B  3000               	movlw	0
  8180  041C  1803               	skipnc
  8181  041D  3001               	movlw	1
  8182  041E  07C2               	addwf	___ftadd@f2+1,f
  8183  041F  3000               	movlw	0
  8184  0420  1803               	skipnc
  8185  0421  3001               	movlw	1
  8186  0422  07C3               	addwf	___ftadd@f2+2,f
  8187  0423                     l5695:	
  8188  0423  01C8               	clrf	___ftadd@sign
  8189  0424  083E               	movf	___ftadd@f1,w
  8190  0425  07C1               	addwf	___ftadd@f2,f
  8191  0426  083F               	movf	___ftadd@f1+1,w
  8192  0427  3DC2               	addwfc	___ftadd@f2+1,f
  8193  0428  0840               	movf	___ftadd@f1+2,w
  8194  0429  3DC3               	addwfc	___ftadd@f2+2,f
  8195  042A  1FC3               	btfss	___ftadd@f2+2,7
  8196  042B  2C3E               	goto	l5705
  8197  042C  30FF               	movlw	255
  8198  042D  06C1               	xorwf	___ftadd@f2,f
  8199  042E  30FF               	movlw	255
  8200  042F  06C2               	xorwf	___ftadd@f2+1,f
  8201  0430  30FF               	movlw	255
  8202  0431  06C3               	xorwf	___ftadd@f2+2,f
  8203  0432  3001               	movlw	1
  8204  0433  07C1               	addwf	___ftadd@f2,f
  8205  0434  3000               	movlw	0
  8206  0435  1803               	skipnc
  8207  0436  3001               	movlw	1
  8208  0437  07C2               	addwf	___ftadd@f2+1,f
  8209  0438  3000               	movlw	0
  8210  0439  1803               	skipnc
  8211  043A  3001               	movlw	1
  8212  043B  07C3               	addwf	___ftadd@f2+2,f
  8213  043C  01C8               	clrf	___ftadd@sign
  8214  043D  0AC8               	incf	___ftadd@sign,f
  8215  043E                     l5705:	
  8216  043E  0841               	movf	___ftadd@f2,w
  8217  043F  00A0               	movwf	___ftpack@arg
  8218  0440  0842               	movf	___ftadd@f2+1,w
  8219  0441  00A1               	movwf	___ftpack@arg+1
  8220  0442  0843               	movf	___ftadd@f2+2,w
  8221  0443  00A2               	movwf	___ftpack@arg+2
  8222  0444  084A               	movf	___ftadd@exp1,w
  8223  0445  00C4               	movwf	??___ftadd
  8224  0446  0844               	movf	??___ftadd,w
  8225  0447  00A3               	movwf	___ftpack@exp
  8226  0448  0848               	movf	___ftadd@sign,w
  8227  0449  00C5               	movwf	??___ftadd+1
  8228  044A  0845               	movf	??___ftadd+1,w
  8229  044B  00A4               	movwf	___ftpack@sign
  8230  044C  3189  213C         	fcall	___ftpack
  8231  044E  0020               	movlb	0	; select bank0
  8232  044F  0820               	movf	?___ftpack,w
  8233  0450  00BE               	movwf	?___ftadd
  8234  0451  0821               	movf	?___ftpack+1,w
  8235  0452  00BF               	movwf	?___ftadd+1
  8236  0453  0822               	movf	?___ftpack+2,w
  8237  0454  00C0               	movwf	?___ftadd+2
  8238  0455  0008               	return
  8239  0456                     __end_of___ftadd:	
  8240                           
  8241                           	psect	text33
  8242  1FEF                     __ptext33:	
  8243 ;; *************** function _getBuz_GO *****************
  8244 ;; Defined at:
  8245 ;;		line 82 in file "../src/Buzzer_B1.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;		None
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  i               2    4[BANK0 ] int 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  2    0[BANK0 ] int 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8259 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;Total ram usage:        6 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    5
  8266 ;; This function calls:
  8267 ;;		Nothing
  8268 ;; This function is called by:
  8269 ;;		_setRF_Main
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function _getBuz_GO
  8275  1FEF                     _getBuz_GO:	
  8276                           
  8277                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8281  1FEF  0021               	movlb	1	; select bank1
  8282  1FF0  0C32               	rrf	_Buz1^(0+128),w
  8283  1FF1  3901               	andlw	1
  8284  1FF2  0020               	movlb	0	; select bank0
  8285  1FF3  00A2               	movwf	??_getBuz_GO
  8286  1FF4  01A3               	clrf	??_getBuz_GO+1
  8287  1FF5  0822               	movf	??_getBuz_GO,w
  8288  1FF6  00A4               	movwf	getBuz_GO@i
  8289  1FF7  0823               	movf	??_getBuz_GO+1,w
  8290  1FF8  00A5               	movwf	getBuz_GO@i+1
  8291                           
  8292                           ;Buzzer_B1.c: 84: return i;
  8293  1FF9  0825               	movf	getBuz_GO@i+1,w
  8294  1FFA  01A1               	clrf	?_getBuz_GO+1
  8295  1FFB  07A1               	addwf	?_getBuz_GO+1,f
  8296  1FFC  0824               	movf	getBuz_GO@i,w
  8297  1FFD  01A0               	clrf	?_getBuz_GO
  8298  1FFE  07A0               	addwf	?_getBuz_GO,f
  8299  1FFF  0008               	return
  8300  2000                     __end_of_getBuz_GO:	
  8301                           
  8302                           	psect	text34
  8303  099D                     __ptext34:	
  8304 ;; *************** function _CC2500_TxData *****************
  8305 ;; Defined at:
  8306 ;;		line 32 in file "../src/CC2500_B1.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;		None
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;		None               void
  8313 ;; Registers used:
  8314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;Total ram usage:        2 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    7
  8327 ;; This function calls:
  8328 ;;		_CC2500_WriteByte
  8329 ;;		_CC2500_WriteCommand
  8330 ;;		_Timeout_Counter
  8331 ;;		_set_TimeoutCleared
  8332 ;; This function is called by:
  8333 ;;		_setRF_Main
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           
  8338                           ;psect for function _CC2500_TxData
  8339  099D                     _CC2500_TxData:	
  8340                           
  8341                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8342                           ;CC2500_B1.c: 35: RC4 = 0;
  8343                           
  8344                           ;incstack = 0
  8345                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8346  099D  0020               	movlb	0	; select bank0
  8347  099E  120E               	bcf	14,4	;volatile
  8348                           
  8349                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8350  099F  307F               	movlw	127
  8351  09A0  00A4               	movwf	??_CC2500_TxData
  8352  09A1  0824               	movf	??_CC2500_TxData,w
  8353  09A2  00F5               	movwf	_SPI0Buffer
  8354                           
  8355                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8356  09A3  29A7               	goto	l8569
  8357  09A4                     l8567:	
  8358                           
  8359                           ;CC2500_B1.c: 38: Timeout_Counter();
  8360  09A4  3190  20F3  3189   	fcall	_Timeout_Counter
  8361  09A7                     l8569:	
  8362  09A7  0020               	movlb	0	; select bank0
  8363  09A8  1D0E               	btfss	14,2	;volatile
  8364  09A9  29AD               	goto	l8573
  8365  09AA  0021               	movlb	1	; select bank1
  8366  09AB  1D2F               	btfss	(_myMain^(0+128)+15),2
  8367  09AC  29A4               	goto	l8567
  8368  09AD                     l8573:	
  8369                           
  8370                           ;CC2500_B1.c: 39: };
  8371                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8372  09AD  319E  266E  3189   	fcall	_set_TimeoutCleared
  8373                           
  8374                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8375  09B0  3190  20DF  3189   	fcall	_CC2500_WriteByte
  8376                           
  8377                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8378  09B3  0021               	movlb	1	; select bank1
  8379  09B4  0854               	movf	_Tx_Length^(0+128),w
  8380  09B5  0020               	movlb	0	; select bank0
  8381  09B6  00A4               	movwf	??_CC2500_TxData
  8382  09B7  0824               	movf	??_CC2500_TxData,w
  8383  09B8  00F5               	movwf	_SPI0Buffer
  8384                           
  8385                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8386  09B9  3190  20DF  3189   	fcall	_CC2500_WriteByte
  8387                           
  8388                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8389  09BC  0020               	movlb	0	; select bank0
  8390  09BD  01A5               	clrf	CC2500_TxData@loop_e
  8391  09BE                     l8587:	
  8392  09BE  0021               	movlb	1	; select bank1
  8393  09BF  0854               	movf	_Tx_Length^(0+128),w
  8394  09C0  0020               	movlb	0	; select bank0
  8395  09C1  0225               	subwf	CC2500_TxData@loop_e,w
  8396  09C2  1803               	btfsc	3,0
  8397  09C3  29D6               	goto	l283
  8398                           
  8399                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8400  09C4  0825               	movf	CC2500_TxData@loop_e,w
  8401  09C5  3E20               	addlw	_RF_Data& (0+255)
  8402  09C6  0086               	movwf	6
  8403  09C7  3001               	movlw	1	; select bank2/3
  8404  09C8  0087               	movwf	7
  8405  09C9  0801               	movf	1,w
  8406  09CA  00A4               	movwf	??_CC2500_TxData
  8407  09CB  0824               	movf	??_CC2500_TxData,w
  8408  09CC  00F5               	movwf	_SPI0Buffer
  8409                           
  8410                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8411  09CD  3190  20DF  3189   	fcall	_CC2500_WriteByte
  8412  09D0  3001               	movlw	1
  8413  09D1  0020               	movlb	0	; select bank0
  8414  09D2  00A4               	movwf	??_CC2500_TxData
  8415  09D3  0824               	movf	??_CC2500_TxData,w
  8416  09D4  07A5               	addwf	CC2500_TxData@loop_e,f
  8417  09D5  29BE               	goto	l8587
  8418  09D6                     l283:	
  8419                           
  8420                           ;CC2500_B1.c: 48: }
  8421                           ;CC2500_B1.c: 49: RC4 = 1;
  8422  09D6  160E               	bsf	14,4	;volatile
  8423                           
  8424                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8425  09D7  3035               	movlw	53
  8426  09D8  3191  214D  3189   	fcall	_CC2500_WriteCommand
  8427                           
  8428                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8429  09DB  29DF               	goto	l8593
  8430  09DC                     l8591:	
  8431                           
  8432                           ;CC2500_B1.c: 52: Timeout_Counter();
  8433  09DC  3190  20F3  3189   	fcall	_Timeout_Counter
  8434  09DF                     l8593:	
  8435  09DF  0020               	movlb	0	; select bank0
  8436  09E0  180D               	btfsc	13,0	;volatile
  8437  09E1  29E5               	goto	l8597
  8438  09E2  0021               	movlb	1	; select bank1
  8439  09E3  1D2F               	btfss	(_myMain^(0+128)+15),2
  8440  09E4  29DC               	goto	l8591
  8441  09E5                     l8597:	
  8442                           
  8443                           ;CC2500_B1.c: 53: };
  8444                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8445  09E5  319E  266E  3189   	fcall	_set_TimeoutCleared
  8446                           
  8447                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8448  09E8  29EC               	goto	l8601
  8449  09E9                     l8599:	
  8450                           
  8451                           ;CC2500_B1.c: 57: Timeout_Counter();
  8452  09E9  3190  20F3  3189   	fcall	_Timeout_Counter
  8453  09EC                     l8601:	
  8454  09EC  0020               	movlb	0	; select bank0
  8455  09ED  1C0D               	btfss	13,0	;volatile
  8456  09EE  29F2               	goto	l8605
  8457  09EF  0021               	movlb	1	; select bank1
  8458  09F0  1D2F               	btfss	(_myMain^(0+128)+15),2
  8459  09F1  29E9               	goto	l8599
  8460  09F2                     l8605:	
  8461                           
  8462                           ;CC2500_B1.c: 58: };
  8463                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8464  09F2  319E  266E  3189   	fcall	_set_TimeoutCleared
  8465                           
  8466                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8467  09F5  3036               	movlw	54
  8468  09F6  3191  214D  3189   	fcall	_CC2500_WriteCommand
  8469                           
  8470                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8471  09F9  303B               	movlw	59
  8472  09FA  3191  214D  3189   	fcall	_CC2500_WriteCommand
  8473                           
  8474                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8475  09FD  303A               	movlw	58
  8476  09FE  3191  214D         	fcall	_CC2500_WriteCommand
  8477                           
  8478                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8479  0A00  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8480  0A01  0008               	return
  8481  0A02                     __end_of_CC2500_TxData:	
  8482                           
  8483                           	psect	text35
  8484  0C22                     __ptext35:	
  8485 ;; *************** function _CC2500_RxData *****************
  8486 ;; Defined at:
  8487 ;;		line 70 in file "../src/CC2500_B1.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;		None
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;		None               void
  8494 ;; Registers used:
  8495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;Total ram usage:        2 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    7
  8508 ;; This function calls:
  8509 ;;		_CC2500_ReadByte
  8510 ;;		_CC2500_ReadStatus
  8511 ;;		_CC2500_WriteByte
  8512 ;;		_Timeout_Counter
  8513 ;;		_set_TimeoutCleared
  8514 ;; This function is called by:
  8515 ;;		_setRF_Main
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           
  8520                           ;psect for function _CC2500_RxData
  8521  0C22                     _CC2500_RxData:	
  8522                           
  8523                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8524                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8528  0C22  0020               	movlb	0	; select bank0
  8529  0C23  180D               	btfsc	13,0	;volatile
  8530  0C24  2C29               	goto	l8621
  8531  0C25  2C32               	goto	l8627
  8532  0C26                     l8619:	
  8533                           ;CC2500_B1.c: 76: {
  8534                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8535                           
  8536                           
  8537                           ;CC2500_B1.c: 78: Timeout_Counter();
  8538  0C26  3190  20F3  318C   	fcall	_Timeout_Counter
  8539  0C29                     l8621:	
  8540  0C29  0020               	movlb	0	; select bank0
  8541  0C2A  1C0D               	btfss	13,0	;volatile
  8542  0C2B  2C2F               	goto	l8625
  8543  0C2C  0021               	movlb	1	; select bank1
  8544  0C2D  1D2F               	btfss	(_myMain^(0+128)+15),2
  8545  0C2E  2C26               	goto	l8619
  8546  0C2F                     l8625:	
  8547                           
  8548                           ;CC2500_B1.c: 79: };
  8549                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8550  0C2F  319E  266E  318C   	fcall	_set_TimeoutCleared
  8551  0C32                     l8627:	
  8552                           
  8553                           ;CC2500_B1.c: 81: }
  8554                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8555  0C32  303B               	movlw	59
  8556  0C33  3188  2000  318C   	fcall	_CC2500_ReadStatus
  8557                           
  8558                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8559  0C36  0021               	movlb	1	; select bank1
  8560  0C37  0857               	movf	_s_data^(0+128),w
  8561  0C38  1903               	btfsc	3,2
  8562  0C39  0008               	return
  8563                           
  8564                           ;CC2500_B1.c: 86: RC4 = 0;
  8565  0C3A  0020               	movlb	0	; select bank0
  8566  0C3B  120E               	bcf	14,4	;volatile
  8567                           
  8568                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8569  0C3C  30FF               	movlw	255
  8570  0C3D  00A4               	movwf	??_CC2500_RxData
  8571  0C3E  0824               	movf	??_CC2500_RxData,w
  8572  0C3F  00F5               	movwf	_SPI0Buffer
  8573                           
  8574                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8575  0C40  2C47               	goto	l8637
  8576  0C41                     l8639:	
  8577  0C41  0021               	movlb	1	; select bank1
  8578  0C42  192F               	btfsc	(_myMain^(0+128)+15),2
  8579  0C43  2C4A               	goto	l308
  8580                           
  8581                           ;CC2500_B1.c: 89: Timeout_Counter();
  8582  0C44  3190  20F3  318C   	fcall	_Timeout_Counter
  8583  0C47                     l8637:	
  8584  0C47  0020               	movlb	0	; select bank0
  8585  0C48  190E               	btfsc	14,2	;volatile
  8586  0C49  2C41               	goto	l8639
  8587  0C4A                     l308:	
  8588                           
  8589                           ;CC2500_B1.c: 90: };
  8590                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8591  0C4A  0021               	movlb	1	; select bank1
  8592  0C4B  192F               	btfsc	(_myMain^(0+128)+15),2
  8593  0C4C  2C8D               	goto	l309
  8594                           
  8595                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8596  0C4D  3190  20DF  318C   	fcall	_CC2500_WriteByte
  8597                           
  8598                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8599  0C50  3191  211E  318C   	fcall	_CC2500_ReadByte
  8600                           
  8601                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8602  0C53  0875               	movf	_SPI0Buffer,w
  8603  0C54  0020               	movlb	0	; select bank0
  8604  0C55  00A4               	movwf	??_CC2500_RxData
  8605  0C56  0824               	movf	??_CC2500_RxData,w
  8606  0C57  0021               	movlb	1	; select bank1
  8607  0C58  00D3               	movwf	_Rx_Length^(0+128)
  8608                           
  8609                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8610  0C59  0020               	movlb	0	; select bank0
  8611  0C5A  01A5               	clrf	CC2500_RxData@loop_f
  8612  0C5B                     l8653:	
  8613  0C5B  0021               	movlb	1	; select bank1
  8614  0C5C  0853               	movf	_Rx_Length^(0+128),w
  8615  0C5D  0020               	movlb	0	; select bank0
  8616  0C5E  0225               	subwf	CC2500_RxData@loop_f,w
  8617  0C5F  1803               	btfsc	3,0
  8618  0C60  2C73               	goto	l8655
  8619                           
  8620                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8621  0C61  3191  211E  318C   	fcall	_CC2500_ReadByte
  8622                           
  8623                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8624  0C64  0875               	movf	_SPI0Buffer,w
  8625  0C65  0020               	movlb	0	; select bank0
  8626  0C66  00A4               	movwf	??_CC2500_RxData
  8627  0C67  0825               	movf	CC2500_RxData@loop_f,w
  8628  0C68  3E20               	addlw	_RF_Data& (0+255)
  8629  0C69  0086               	movwf	6
  8630  0C6A  3001               	movlw	1	; select bank2/3
  8631  0C6B  0087               	movwf	7
  8632  0C6C  0824               	movf	??_CC2500_RxData,w
  8633  0C6D  0081               	movwf	1
  8634  0C6E  3001               	movlw	1
  8635  0C6F  00A4               	movwf	??_CC2500_RxData
  8636  0C70  0824               	movf	??_CC2500_RxData,w
  8637  0C71  07A5               	addwf	CC2500_RxData@loop_f,f
  8638  0C72  2C5B               	goto	l8653
  8639  0C73                     l8655:	
  8640                           
  8641                           ;CC2500_B1.c: 99: }
  8642                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8643  0C73  3191  211E  318C   	fcall	_CC2500_ReadByte
  8644                           
  8645                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8646  0C76  0875               	movf	_SPI0Buffer,w
  8647  0C77  0020               	movlb	0	; select bank0
  8648  0C78  00A4               	movwf	??_CC2500_RxData
  8649  0C79  0824               	movf	??_CC2500_RxData,w
  8650  0C7A  0021               	movlb	1	; select bank1
  8651  0C7B  00D2               	movwf	_RSSI^(0+128)
  8652                           
  8653                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8654  0C7C  3191  211E  318C   	fcall	_CC2500_ReadByte
  8655                           
  8656                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8657  0C7F  0875               	movf	_SPI0Buffer,w
  8658  0C80  0020               	movlb	0	; select bank0
  8659  0C81  00A4               	movwf	??_CC2500_RxData
  8660  0C82  0824               	movf	??_CC2500_RxData,w
  8661  0C83  0021               	movlb	1	; select bank1
  8662  0C84  00CC               	movwf	_CRC^(0+128)
  8663                           
  8664                           ;CC2500_B1.c: 104: RC4 = 1;
  8665  0C85  0020               	movlb	0	; select bank0
  8666  0C86  160E               	bsf	14,4	;volatile
  8667                           
  8668                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8669  0C87  0021               	movlb	1	; select bank1
  8670  0C88  1BCC               	btfsc	_CRC^(0+128),7
  8671                           
  8672                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8673  0C89  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8674                           
  8675                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8676  0C8A  11BE               	bcf	_RF1^(0+128),3
  8677                           
  8678                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8679  0C8B  14BE               	bsf	_RF1^(0+128),1
  8680                           
  8681                           ;CC2500_B1.c: 110: } else {
  8682  0C8C  2C8F               	goto	l8667
  8683  0C8D                     l309:	
  8684                           
  8685                           ;CC2500_B1.c: 111: RC4 = 1;
  8686  0C8D  0020               	movlb	0	; select bank0
  8687  0C8E  160E               	bsf	14,4	;volatile
  8688  0C8F                     l8667:	
  8689                           
  8690                           ;CC2500_B1.c: 112: }
  8691                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8692  0C8F  319E  266E         	fcall	_set_TimeoutCleared
  8693  0C91  0021               	movlb	1	; select bank1
  8694  0C92  0008               	return
  8695  0C93                     __end_of_CC2500_RxData:	
  8696                           
  8697                           	psect	text36
  8698  0800                     __ptext36:	
  8699 ;; *************** function _CC2500_ReadStatus *****************
  8700 ;; Defined at:
  8701 ;;		line 304 in file "../src/CC2500_B1.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  status_addr     1    wreg     unsigned char 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;Total ram usage:        2 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    6
  8722 ;; This function calls:
  8723 ;;		_CC2500_ReadByte
  8724 ;;		_CC2500_WriteByte
  8725 ;;		_Timeout_Counter
  8726 ;;		_set_TimeoutCleared
  8727 ;; This function is called by:
  8728 ;;		_CC2500_RxData
  8729 ;;		_setRF_Main
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _CC2500_ReadStatus
  8735  0800                     _CC2500_ReadStatus:	
  8736                           
  8737                           ;incstack = 0
  8738                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8739                           ;CC2500_ReadStatus@status_addr stored from wreg
  8740  0800  0020               	movlb	0	; select bank0
  8741  0801  00A3               	movwf	CC2500_ReadStatus@status_addr
  8742                           
  8743                           ;CC2500_B1.c: 305: RC4 = 0;
  8744  0802  120E               	bcf	14,4	;volatile
  8745                           
  8746                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8747  0803  0823               	movf	CC2500_ReadStatus@status_addr,w
  8748  0804  3EC0               	addlw	192
  8749  0805  00A2               	movwf	??_CC2500_ReadStatus
  8750  0806  0822               	movf	??_CC2500_ReadStatus,w
  8751  0807  00F5               	movwf	_SPI0Buffer
  8752                           
  8753                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8754  0808  280C               	goto	l8473
  8755  0809                     l8471:	
  8756                           
  8757                           ;CC2500_B1.c: 309: Timeout_Counter();
  8758  0809  3190  20F3  3188   	fcall	_Timeout_Counter
  8759  080C                     l8473:	
  8760  080C  0020               	movlb	0	; select bank0
  8761  080D  1D0E               	btfss	14,2	;volatile
  8762  080E  2812               	goto	l8477
  8763  080F  0021               	movlb	1	; select bank1
  8764  0810  1D2F               	btfss	(_myMain^(0+128)+15),2
  8765  0811  2809               	goto	l8471
  8766  0812                     l8477:	
  8767                           
  8768                           ;CC2500_B1.c: 310: };
  8769                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8770  0812  319E  266E  3188   	fcall	_set_TimeoutCleared
  8771                           
  8772                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8773  0815  3190  20DF  3188   	fcall	_CC2500_WriteByte
  8774                           
  8775                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8776  0818  3191  211E         	fcall	_CC2500_ReadByte
  8777                           
  8778                           ;CC2500_B1.c: 315: RC4 = 1;
  8779  081A  0020               	movlb	0	; select bank0
  8780  081B  160E               	bsf	14,4	;volatile
  8781                           
  8782                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8783  081C  0875               	movf	_SPI0Buffer,w
  8784  081D  00A2               	movwf	??_CC2500_ReadStatus
  8785  081E  0822               	movf	??_CC2500_ReadStatus,w
  8786  081F  0021               	movlb	1	; select bank1
  8787  0820  00D7               	movwf	_s_data^(0+128)
  8788  0821  0008               	return
  8789  0822                     __end_of_CC2500_ReadStatus:	
  8790                           
  8791                           	psect	text37
  8792  111E                     __ptext37:	
  8793 ;; *************** function _CC2500_ReadByte *****************
  8794 ;; Defined at:
  8795 ;;		line 238 in file "../src/CC2500_B1.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;		None
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8800 ;; Return value:  Size  Location     Type
  8801 ;;		None               void
  8802 ;; Registers used:
  8803 ;;		wreg, status,2, status,0
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;Total ram usage:        2 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    5
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_CC2500_RxData
  8820 ;;		_CC2500_ReadStatus
  8821 ;;		_CC2500_ReadREG
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           
  8826                           ;psect for function _CC2500_ReadByte
  8827  111E                     _CC2500_ReadByte:	
  8828                           
  8829                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8830                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8834  111E  0020               	movlb	0	; select bank0
  8835  111F  01A1               	clrf	CC2500_ReadByte@loop_b
  8836  1120                     L7:	
  8837  1120  3008               	movlw	8
  8838  1121  0221               	subwf	CC2500_ReadByte@loop_b,w
  8839  1122  1803               	btfsc	3,0
  8840  1123  0008               	return
  8841                           
  8842                           ;CC2500_B1.c: 241: RC1 = 1;
  8843  1124  148E               	bsf	14,1	;volatile
  8844                           
  8845                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8846  1125  1003               	clrc
  8847  1126  0DF5               	rlf	_SPI0Buffer,f
  8848                           
  8849                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8850  1127  1D0E               	btfss	14,2	;volatile
  8851  1128  292B               	goto	l8365
  8852                           
  8853                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8854  1129  1475               	bsf	_SPI0Buffer,0
  8855  112A  292F               	goto	l8367
  8856  112B                     l8365:	
  8857                           
  8858                           ;CC2500_B1.c: 245: else
  8859                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8860  112B  30FE               	movlw	254
  8861  112C  00A0               	movwf	??_CC2500_ReadByte
  8862  112D  0820               	movf	??_CC2500_ReadByte,w
  8863  112E  05F5               	andwf	_SPI0Buffer,f
  8864  112F                     l8367:	
  8865                           
  8866                           ;CC2500_B1.c: 247: RC1 = 0;
  8867  112F  108E               	bcf	14,1	;volatile
  8868  1130  3001               	movlw	1
  8869  1131  00A0               	movwf	??_CC2500_ReadByte
  8870  1132  0820               	movf	??_CC2500_ReadByte,w
  8871  1133  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8872  1134  2920               	goto	L7
  8873  1135                     __end_of_CC2500_ReadByte:	
  8874                           
  8875                           	psect	text38
  8876  1E58                     __ptext38:	
  8877 ;; *************** function _RF_Initialization *****************
  8878 ;; Defined at:
  8879 ;;		line 9 in file "../src/RF_Control_B1.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;		None
  8884 ;; Return value:  Size  Location     Type
  8885 ;;		None               void
  8886 ;; Registers used:
  8887 ;;		wreg, status,2, status,0, pclath, cstack
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;Total ram usage:        0 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    6
  8900 ;; This function calls:
  8901 ;;		_setRF_Initialization
  8902 ;; This function is called by:
  8903 ;;		_main
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           
  8908                           ;psect for function _RF_Initialization
  8909  1E58                     _RF_Initialization:	
  8910                           
  8911                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8912                           
  8913                           ;incstack = 0
  8914                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8915  1E58  319F  2718         	fcall	_setRF_Initialization
  8916  1E5A  0008               	return
  8917  1E5B                     __end_of_RF_Initialization:	
  8918                           
  8919                           	psect	text39
  8920  1F18                     __ptext39:	
  8921 ;; *************** function _setRF_Initialization *****************
  8922 ;; Defined at:
  8923 ;;		line 43 in file "../src/RF_Control_B1.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;		None
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;		None
  8928 ;; Return value:  Size  Location     Type
  8929 ;;		None               void
  8930 ;; Registers used:
  8931 ;;		wreg
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8940 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;Total ram usage:        1 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    5
  8944 ;; This function calls:
  8945 ;;		Nothing
  8946 ;; This function is called by:
  8947 ;;		_RF_Initialization
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           
  8952                           ;psect for function _setRF_Initialization
  8953  1F18                     _setRF_Initialization:	
  8954                           
  8955                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8956                           
  8957                           ;incstack = 0
  8958                           ; Regs used in _setRF_Initialization: [wreg]
  8959  1F18  3015               	movlw	21
  8960  1F19  0020               	movlb	0	; select bank0
  8961  1F1A  00A0               	movwf	??_setRF_Initialization
  8962  1F1B  0820               	movf	??_setRF_Initialization,w
  8963  1F1C  0021               	movlb	1	; select bank1
  8964  1F1D  00D4               	movwf	_Tx_Length^(0+128)
  8965                           
  8966                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  8967  1F1E  3014               	movlw	20
  8968  1F1F  0020               	movlb	0	; select bank0
  8969  1F20  00A0               	movwf	??_setRF_Initialization
  8970  1F21  0820               	movf	??_setRF_Initialization,w
  8971  1F22  0021               	movlb	1	; select bank1
  8972  1F23  00C4               	movwf	(_RF1^(0+128)+6)
  8973  1F24  0008               	return
  8974  1F25                     __end_of_setRF_Initialization:	
  8975                           
  8976                           	psect	text40
  8977  1083                     __ptext40:	
  8978 ;; *************** function _Mcu_Initialization *****************
  8979 ;; Defined at:
  8980 ;;		line 30 in file "../src/MCU_B1.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;		None
  8985 ;; Return value:  Size  Location     Type
  8986 ;;		None               void
  8987 ;; Registers used:
  8988 ;;		wreg, status,2, status,0, pclath, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;Total ram usage:        0 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    6
  9001 ;; This function calls:
  9002 ;;		_ADC_Set
  9003 ;;		_Fosc_Set
  9004 ;;		_IOC_Set
  9005 ;;		_IO_Set
  9006 ;;		_TMR0_Set
  9007 ;;		_WDT_Set
  9008 ;; This function is called by:
  9009 ;;		_main
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           
  9014                           ;psect for function _Mcu_Initialization
  9015  1083                     _Mcu_Initialization:	
  9016                           
  9017                           ;MCU_B1.c: 32: Fosc_Set();
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9021  1083  319E  266A  3190   	fcall	_Fosc_Set
  9022                           
  9023                           ;MCU_B1.c: 34: IO_Set();
  9024  1086  3191  2135  3190   	fcall	_IO_Set
  9025                           
  9026                           ;MCU_B1.c: 36: TMR0_Set();
  9027  1089  319E  268C  3190   	fcall	_TMR0_Set
  9028                           
  9029                           ;MCU_B1.c: 38: ;;
  9030                           ;MCU_B1.c: 40: ADC_Set();
  9031  108C  319E  2685  3190   	fcall	_ADC_Set
  9032                           
  9033                           ;MCU_B1.c: 44: ;;
  9034                           ;MCU_B1.c: 46: IOC_Set();
  9035  108F  319F  270B  3190   	fcall	_IOC_Set
  9036                           
  9037                           ;MCU_B1.c: 48: ;;
  9038                           ;MCU_B1.c: 50: ;;
  9039                           ;MCU_B1.c: 52: WDT_Set();
  9040  1092  319E  26B7         	fcall	_WDT_Set
  9041  1094  0008               	return
  9042  1095                     __end_of_Mcu_Initialization:	
  9043                           
  9044                           	psect	text41
  9045  1EB7                     __ptext41:	
  9046 ;; *************** function _WDT_Set *****************
  9047 ;; Defined at:
  9048 ;;		line 902 in file "../src/MCU_B1.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;		None               void
  9055 ;; Registers used:
  9056 ;;		wreg
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;Total ram usage:        1 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    5
  9069 ;; This function calls:
  9070 ;;		Nothing
  9071 ;; This function is called by:
  9072 ;;		_Mcu_Initialization
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _WDT_Set
  9078  1EB7                     _WDT_Set:	
  9079                           
  9080                           ;MCU_B1.c: 903: WDTCON = 0b00010111;;
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _WDT_Set: [wreg]
  9084  1EB7  3017               	movlw	23
  9085  1EB8  0021               	movlb	1	; select bank1
  9086  1EB9  0097               	movwf	23	;volatile
  9087                           
  9088                           ;MCU_B1.c: 904: WDT.Enable = 1;
  9089  1EBA  144A               	bsf	_WDT^(0+128),0
  9090                           
  9091                           ;MCU_B1.c: 905: WDT.Count = 10;
  9092  1EBB  300A               	movlw	10
  9093  1EBC  0020               	movlb	0	; select bank0
  9094  1EBD  00A0               	movwf	??_WDT_Set
  9095  1EBE  0820               	movf	??_WDT_Set,w
  9096  1EBF  0021               	movlb	1	; select bank1
  9097  1EC0  00CB               	movwf	(_WDT^(0+128)+1)
  9098  1EC1  0008               	return
  9099  1EC2                     __end_of_WDT_Set:	
  9100                           
  9101                           	psect	text42
  9102  1E8C                     __ptext42:	
  9103 ;; *************** function _TMR0_Set *****************
  9104 ;; Defined at:
  9105 ;;		line 126 in file "../src/MCU_B1.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;		None
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;		None
  9110 ;; Return value:  Size  Location     Type
  9111 ;;		None               void
  9112 ;; Registers used:
  9113 ;;		wreg, status,2
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;Total ram usage:        0 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    5
  9126 ;; This function calls:
  9127 ;;		Nothing
  9128 ;; This function is called by:
  9129 ;;		_Mcu_Initialization
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           
  9134                           ;psect for function _TMR0_Set
  9135  1E8C                     _TMR0_Set:	
  9136                           
  9137                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
  9138                           
  9139                           ;incstack = 0
  9140                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9141  1E8C  0021               	movlb	1	; select bank1
  9142  1E8D  0195               	clrf	21	;volatile
  9143                           
  9144                           ;MCU_B1.c: 129: TMR0 = (256-190);
  9145  1E8E  3042               	movlw	66
  9146  1E8F  0020               	movlb	0	; select bank0
  9147  1E90  0095               	movwf	21	;volatile
  9148                           
  9149                           ;MCU_B1.c: 130: TMR0IE = 1;
  9150  1E91  168B               	bsf	11,5	;volatile
  9151                           
  9152                           ;MCU_B1.c: 131: GIE = 1;
  9153  1E92  178B               	bsf	11,7	;volatile
  9154  1E93  0008               	return
  9155  1E94                     __end_of_TMR0_Set:	
  9156                           
  9157                           	psect	text43
  9158  1135                     __ptext43:	
  9159 ;; *************** function _IO_Set *****************
  9160 ;; Defined at:
  9161 ;;		line 60 in file "../src/MCU_B1.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;		None
  9166 ;; Return value:  Size  Location     Type
  9167 ;;		None               void
  9168 ;; Registers used:
  9169 ;;		wreg, status,2
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;Total ram usage:        0 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    5
  9182 ;; This function calls:
  9183 ;;		Nothing
  9184 ;; This function is called by:
  9185 ;;		_Mcu_Initialization
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function _IO_Set
  9191  1135                     _IO_Set:	
  9192                           
  9193                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9194                           
  9195                           ;incstack = 0
  9196                           ; Regs used in _IO_Set: [wreg+status,2]
  9197  1135  3077               	movlw	119
  9198  1136  0021               	movlb	1	; select bank1
  9199  1137  008C               	movwf	12	;volatile
  9200                           
  9201                           ;MCU_B1.c: 89: TRISB = 0b00000101;;
  9202  1138  3005               	movlw	5
  9203  1139  008D               	movwf	13	;volatile
  9204                           
  9205                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9206  113A  300C               	movlw	12
  9207  113B  008E               	movwf	14	;volatile
  9208                           
  9209                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9210  113C  0022               	movlb	2	; select bank2
  9211  113D  018C               	clrf	12	;volatile
  9212                           
  9213                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9214  113E  018D               	clrf	13	;volatile
  9215                           
  9216                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9217  113F  018E               	clrf	14	;volatile
  9218                           
  9219                           ;MCU_B1.c: 94: ANSELA = 0b00000010;;
  9220  1140  3002               	movlw	2
  9221  1141  0023               	movlb	3	; select bank3
  9222  1142  008C               	movwf	12	;volatile
  9223                           
  9224                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9225  1143  018D               	clrf	13	;volatile
  9226                           
  9227                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9228  1144  018E               	clrf	14	;volatile
  9229                           
  9230                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9231  1145  3077               	movlw	119
  9232  1146  0020               	movlb	0	; select bank0
  9233  1147  008C               	movwf	12	;volatile
  9234                           
  9235                           ;MCU_B1.c: 98: PORTB = 0b00000101;;
  9236  1148  3005               	movlw	5
  9237  1149  008D               	movwf	13	;volatile
  9238                           
  9239                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9240  114A  300C               	movlw	12
  9241  114B  008E               	movwf	14	;volatile
  9242  114C  0008               	return
  9243  114D                     __end_of_IO_Set:	
  9244                           
  9245                           	psect	text44
  9246  1F0B                     __ptext44:	
  9247 ;; *************** function _IOC_Set *****************
  9248 ;; Defined at:
  9249 ;;		line 264 in file "../src/MCU_B1.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;		None
  9254 ;; Return value:  Size  Location     Type
  9255 ;;		None               void
  9256 ;; Registers used:
  9257 ;;		wreg, status,2
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;Total ram usage:        0 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    5
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_Mcu_Initialization
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           
  9278                           ;psect for function _IOC_Set
  9279  1F0B                     _IOC_Set:	
  9280                           
  9281                           ;MCU_B1.c: 265: WPUB2 = 0;
  9282                           
  9283                           ;incstack = 0
  9284                           ; Regs used in _IOC_Set: [wreg+status,2]
  9285  1F0B  0024               	movlb	4	; select bank4
  9286  1F0C  110D               	bcf	13,2	;volatile
  9287                           
  9288                           ;MCU_B1.c: 268: IOCBP = 0b00000100;
  9289  1F0D  3004               	movlw	4
  9290  1F0E  0027               	movlb	7	; select bank7
  9291  1F0F  0094               	movwf	20	;volatile
  9292                           
  9293                           ;MCU_B1.c: 269: IOCBN = 0b00000100;
  9294  1F10  3004               	movlw	4
  9295  1F11  0095               	movwf	21	;volatile
  9296                           
  9297                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
  9298  1F12  0196               	clrf	22	;volatile
  9299                           
  9300                           ;MCU_B1.c: 291: IOCIE = 1;
  9301  1F13  158B               	bsf	11,3	;volatile
  9302                           
  9303                           ;MCU_B1.c: 292: IOCIF = 0;
  9304  1F14  100B               	bcf	11,0	;volatile
  9305                           
  9306                           ;MCU_B1.c: 293: PEIE = 1;
  9307  1F15  170B               	bsf	11,6	;volatile
  9308                           
  9309                           ;MCU_B1.c: 294: GIE = 1;
  9310  1F16  178B               	bsf	11,7	;volatile
  9311  1F17  0008               	return
  9312  1F18                     __end_of_IOC_Set:	
  9313                           
  9314                           	psect	text45
  9315  1E6A                     __ptext45:	
  9316 ;; *************** function _Fosc_Set *****************
  9317 ;; Defined at:
  9318 ;;		line 56 in file "../src/MCU_B1.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;		None
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;		None
  9323 ;; Return value:  Size  Location     Type
  9324 ;;		None               void
  9325 ;; Registers used:
  9326 ;;		wreg
  9327 ;; Tracked objects:
  9328 ;;		On entry : 0/0
  9329 ;;		On exit  : 0/0
  9330 ;;		Unchanged: 0/0
  9331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;Total ram usage:        0 bytes
  9337 ;; Hardware stack levels used:    1
  9338 ;; Hardware stack levels required when called:    5
  9339 ;; This function calls:
  9340 ;;		Nothing
  9341 ;; This function is called by:
  9342 ;;		_Mcu_Initialization
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           
  9347                           ;psect for function _Fosc_Set
  9348  1E6A                     _Fosc_Set:	
  9349                           
  9350                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9351                           
  9352                           ;incstack = 0
  9353                           ; Regs used in _Fosc_Set: [wreg]
  9354  1E6A  3078               	movlw	120
  9355  1E6B  0021               	movlb	1	; select bank1
  9356  1E6C  0099               	movwf	25	;volatile
  9357  1E6D  0008               	return
  9358  1E6E                     __end_of_Fosc_Set:	
  9359                           
  9360                           	psect	text46
  9361  1E85                     __ptext46:	
  9362 ;; *************** function _ADC_Set *****************
  9363 ;; Defined at:
  9364 ;;		line 316 in file "../src/MCU_B1.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;		None
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;		None               void
  9371 ;; Registers used:
  9372 ;;		wreg
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;Total ram usage:        0 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    5
  9385 ;; This function calls:
  9386 ;;		Nothing
  9387 ;; This function is called by:
  9388 ;;		_Mcu_Initialization
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           
  9393                           ;psect for function _ADC_Set
  9394  1E85                     _ADC_Set:	
  9395                           
  9396                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
  9397                           
  9398                           ;incstack = 0
  9399                           ; Regs used in _ADC_Set: [wreg]
  9400  1E85  30F2               	movlw	242
  9401  1E86  0021               	movlb	1	; select bank1
  9402  1E87  009E               	movwf	30	;volatile
  9403                           
  9404                           ;MCU_B1.c: 318: FVRCON = 0xc0;
  9405  1E88  30C0               	movlw	192
  9406  1E89  0022               	movlb	2	; select bank2
  9407  1E8A  0097               	movwf	23	;volatile
  9408  1E8B  0008               	return
  9409  1E8C                     __end_of_ADC_Set:	
  9410                           
  9411                           	psect	text47
  9412  1FAE                     __ptext47:	
  9413 ;; *************** function _LED_Main *****************
  9414 ;; Defined at:
  9415 ;;		line 47 in file "../src/LED_B1.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;		None
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;		None
  9420 ;; Return value:  Size  Location     Type
  9421 ;;		None               void
  9422 ;; Registers used:
  9423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9424 ;; Tracked objects:
  9425 ;;		On entry : 0/0
  9426 ;;		On exit  : 0/0
  9427 ;;		Unchanged: 0/0
  9428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;Total ram usage:        0 bytes
  9434 ;; Hardware stack levels used:    1
  9435 ;; Hardware stack levels required when called:    7
  9436 ;; This function calls:
  9437 ;;		_setLED_Main
  9438 ;; This function is called by:
  9439 ;;		_main
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           
  9444                           ;psect for function _LED_Main
  9445  1FAE                     _LED_Main:	
  9446                           
  9447                           ;LED_B1.c: 49: setLED_Main(1);
  9448                           
  9449                           ;incstack = 0
  9450                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9451  1FAE  3001               	movlw	1
  9452  1FAF  3197  2708  319F   	fcall	_setLED_Main
  9453                           
  9454                           ;LED_B1.c: 52: setLED_Main(2);
  9455  1FB2  3002               	movlw	2
  9456  1FB3  3197  2708  319F   	fcall	_setLED_Main
  9457                           
  9458                           ;LED_B1.c: 55: setLED_Main(3);
  9459  1FB6  3003               	movlw	3
  9460  1FB7  3197  2708  319F   	fcall	_setLED_Main
  9461                           
  9462                           ;LED_B1.c: 58: setLED_Main(99);
  9463  1FBA  3063               	movlw	99
  9464  1FBB  3197  2708         	fcall	_setLED_Main
  9465  1FBD  0008               	return
  9466  1FBE                     __end_of_LED_Main:	
  9467                           
  9468                           	psect	text48
  9469  1708                     __ptext48:	
  9470 ;; *************** function _setLED_Main *****************
  9471 ;; Defined at:
  9472 ;;		line 192 in file "../src/LED_B1.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;  led             1    wreg     unsigned char 
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;  led             1    3[BANK0 ] unsigned char 
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        3 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    6
  9493 ;; This function calls:
  9494 ;;		_LedPointSelect
  9495 ;; This function is called by:
  9496 ;;		_LED_Main
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _setLED_Main
  9502  1708                     _setLED_Main:	
  9503                           
  9504                           ;incstack = 0
  9505                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9506                           ;setLED_Main@led stored from wreg
  9507  1708  0020               	movlb	0	; select bank0
  9508  1709  00A3               	movwf	setLED_Main@led
  9509                           
  9510                           ;LED_B1.c: 193: LedPointSelect(led);
  9511  170A  0823               	movf	setLED_Main@led,w
  9512  170B  3193  2337  3197   	fcall	_LedPointSelect
  9513                           
  9514                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9515  170E  0870               	movf	_LED,w
  9516  170F  0086               	movwf	6
  9517  1710  0871               	movf	_LED+1,w
  9518  1711  0087               	movwf	7
  9519  1712  1C81               	btfss	1,1
  9520  1713  0008               	return
  9521                           
  9522                           ;LED_B1.c: 195: LED->Time++;
  9523  1714  0870               	movf	_LED,w
  9524  1715  0086               	movwf	6
  9525  1716  0871               	movf	_LED+1,w
  9526  1717  0087               	movwf	7
  9527  1718  3141               	addfsr 1,1
  9528  1719  3001               	movlw	1
  9529  171A  0781               	addwf	1,f
  9530  171B  3141               	addfsr 1,1
  9531  171C  1803               	skipnc
  9532  171D  0A81               	incf	1,f
  9533                           
  9534                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9535  171E  0870               	movf	_LED,w
  9536  171F  0086               	movwf	6
  9537  1720  0871               	movf	_LED+1,w
  9538  1721  0087               	movwf	7
  9539  1722  3141               	addfsr 1,1
  9540  1723  3F40               	moviw [0]fsr1
  9541  1724  0020               	movlb	0	; select bank0
  9542  1725  00A1               	movwf	??_setLED_Main
  9543  1726  3F41               	moviw [1]fsr1
  9544  1727  00A2               	movwf	??_setLED_Main+1
  9545  1728  3000               	movlw	0
  9546  1729  0222               	subwf	??_setLED_Main+1,w
  9547  172A  3032               	movlw	50
  9548  172B  1903               	skipnz
  9549  172C  0221               	subwf	??_setLED_Main,w
  9550  172D  1C03               	skipc
  9551  172E  0008               	return
  9552                           
  9553                           ;LED_B1.c: 197: LED->Time = 0;
  9554  172F  0870               	movf	_LED,w
  9555  1730  0086               	movwf	6
  9556  1731  0871               	movf	_LED+1,w
  9557  1732  0087               	movwf	7
  9558  1733  3141               	addfsr 1,1
  9559  1734  3000               	movlw	0
  9560  1735  3FC0               	movwi [0]fsr1
  9561  1736  3FC1               	movwi [1]fsr1
  9562                           
  9563                           ;LED_B1.c: 199: if (led == 1) {
  9564  1737  0823               	movf	setLED_Main@led,w
  9565  1738  3A01               	xorlw	1
  9566  1739  1D03               	skipz
  9567  173A  2F3E               	goto	l9181
  9568                           
  9569                           ;LED_B1.c: 200: RC7 = RC7 == 1 ? 0 : 1;
  9570  173B  3080               	movlw	128
  9571  173C  068E               	xorwf	14,f
  9572                           
  9573                           ;LED_B1.c: 201: }
  9574  173D  0008               	return
  9575  173E                     l9181:	
  9576                           
  9577                           ;LED_B1.c: 204: else if (led == 2) {
  9578  173E  0823               	movf	setLED_Main@led,w
  9579  173F  3A02               	xorlw	2
  9580  1740  1D03               	skipz
  9581  1741  2F45               	goto	l9185
  9582                           
  9583                           ;LED_B1.c: 205: RA3 = RA3 == 1 ? 0 : 1;
  9584  1742  3008               	movlw	8
  9585  1743  068C               	xorwf	12,f
  9586                           
  9587                           ;LED_B1.c: 206: }
  9588  1744  0008               	return
  9589  1745                     l9185:	
  9590                           
  9591                           ;LED_B1.c: 209: else if (led == 3) {
  9592  1745  0823               	movf	setLED_Main@led,w
  9593  1746  3A03               	xorlw	3
  9594  1747  1D03               	skipz
  9595  1748  2F4C               	goto	l9189
  9596                           
  9597                           ;LED_B1.c: 210: RC6 = RC6 == 1 ? 0 : 1;
  9598  1749  3040               	movlw	64
  9599  174A  068E               	xorwf	14,f
  9600                           
  9601                           ;LED_B1.c: 211: }
  9602  174B  0008               	return
  9603  174C                     l9189:	
  9604                           
  9605                           ;LED_B1.c: 214: else if (led == 99) {
  9606  174C  0823               	movf	setLED_Main@led,w
  9607  174D  3A63               	xorlw	99
  9608  174E  1D03               	skipz
  9609  174F  0008               	return
  9610                           
  9611                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9612  1750  3020               	movlw	32
  9613  1751  068D               	xorwf	13,f
  9614  1752  0008               	return
  9615  1753                     __end_of_setLED_Main:	
  9616                           
  9617                           	psect	text49
  9618  1F9E                     __ptext49:	
  9619 ;; *************** function _LED_Initialization *****************
  9620 ;; Defined at:
  9621 ;;		line 31 in file "../src/LED_B1.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;		None               void
  9628 ;; Registers used:
  9629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        0 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    8
  9642 ;; This function calls:
  9643 ;;		_setLED_Initialization
  9644 ;; This function is called by:
  9645 ;;		_main
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function _LED_Initialization
  9651  1F9E                     _LED_Initialization:	
  9652                           
  9653                           ;LED_B1.c: 33: setLED_Initialization(1);
  9654                           
  9655                           ;incstack = 0
  9656                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9657  1F9E  3001               	movlw	1
  9658  1F9F  319F  27DE  319F   	fcall	_setLED_Initialization
  9659                           
  9660                           ;LED_B1.c: 36: setLED_Initialization(2);
  9661  1FA2  3002               	movlw	2
  9662  1FA3  319F  27DE  319F   	fcall	_setLED_Initialization
  9663                           
  9664                           ;LED_B1.c: 39: setLED_Initialization(3);
  9665  1FA6  3003               	movlw	3
  9666  1FA7  319F  27DE  319F   	fcall	_setLED_Initialization
  9667                           
  9668                           ;LED_B1.c: 42: setLED_Initialization(99);
  9669  1FAA  3063               	movlw	99
  9670  1FAB  319F  27DE         	fcall	_setLED_Initialization
  9671  1FAD  0008               	return
  9672  1FAE                     __end_of_LED_Initialization:	
  9673                           
  9674                           	psect	text50
  9675  1FDE                     __ptext50:	
  9676 ;; *************** function _setLED_Initialization *****************
  9677 ;; Defined at:
  9678 ;;		line 63 in file "../src/LED_B1.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  led             1    wreg     unsigned char 
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;  led             1    3[BANK0 ] unsigned char 
  9683 ;; Return value:  Size  Location     Type
  9684 ;;		None               void
  9685 ;; Registers used:
  9686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;Total ram usage:        1 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    7
  9699 ;; This function calls:
  9700 ;;		_LedPointSelect
  9701 ;;		_setLED
  9702 ;; This function is called by:
  9703 ;;		_LED_Initialization
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           
  9708                           ;psect for function _setLED_Initialization
  9709  1FDE                     _setLED_Initialization:	
  9710                           
  9711                           ;incstack = 0
  9712                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9713                           ;setLED_Initialization@led stored from wreg
  9714  1FDE  0020               	movlb	0	; select bank0
  9715  1FDF  00A3               	movwf	setLED_Initialization@led
  9716                           
  9717                           ;LED_B1.c: 64: LedPointSelect(led);
  9718  1FE0  0823               	movf	setLED_Initialization@led,w
  9719  1FE1  3193  2337  319F   	fcall	_LedPointSelect
  9720                           
  9721                           ;LED_B1.c: 65: LED->Enable = 1;
  9722  1FE4  0870               	movf	_LED,w
  9723  1FE5  0086               	movwf	6
  9724  1FE6  0871               	movf	_LED+1,w
  9725  1FE7  0087               	movwf	7
  9726  1FE8  1401               	bsf	1,0
  9727                           
  9728                           ;LED_B1.c: 66: setLED(led, 0);
  9729  1FE9  0020               	movlb	0	; select bank0
  9730  1FEA  01A1               	clrf	setLED@command
  9731  1FEB  0823               	movf	setLED_Initialization@led,w
  9732  1FEC  318B  23B1         	fcall	_setLED
  9733  1FEE  0008               	return
  9734  1FEF                     __end_of_setLED_Initialization:	
  9735                           
  9736                           	psect	text51
  9737  122B                     __ptext51:	
  9738 ;; *************** function _Flash_Memory_Main *****************
  9739 ;; Defined at:
  9740 ;;		line 797 in file "../src/MCU_B1.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;		None
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;		None
  9745 ;; Return value:  Size  Location     Type
  9746 ;;		None               void
  9747 ;; Registers used:
  9748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;Total ram usage:        0 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    8
  9761 ;; This function calls:
  9762 ;;		_Flash_Memory_Modify
  9763 ;; This function is called by:
  9764 ;;		_main
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _Flash_Memory_Main
  9770  122B                     _Flash_Memory_Main:	
  9771                           
  9772                           ;MCU_B1.c: 798: if (Memory.GO == 1) {
  9773                           
  9774                           ;incstack = 0
  9775                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9776  122B  0023               	movlb	3	; select bank3
  9777  122C  1CC4               	btfss	(_Memory^(0+384)+36),1
  9778  122D  0008               	return
  9779                           
  9780                           ;MCU_B1.c: 799: if (Memory.Modify == 1) {
  9781  122E  1C44               	btfss	(_Memory^(0+384)+36),0
  9782  122F  2A48               	goto	l1427
  9783                           
  9784                           ;MCU_B1.c: 800: Memory.Time++;
  9785  1230  3001               	movlw	1
  9786  1231  07C2               	addwf	(_Memory^(0+384)+34),f
  9787  1232  3000               	movlw	0
  9788  1233  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9789                           
  9790                           ;MCU_B1.c: 801: if (Memory.Time == 25)
  9791  1234  3022               	movlw	34
  9792  1235  3EA0               	addlw	_Memory& (0+255)
  9793  1236  0086               	movwf	6
  9794  1237  3001               	movlw	1	; select bank3/4
  9795  1238  0087               	movwf	7
  9796  1239  3F40               	moviw [0]fsr1
  9797  123A  3A19               	xorlw	25
  9798  123B  1D03               	skipz
  9799  123C  2A3F               	goto	u10365
  9800  123D  3F41               	moviw [1]fsr1
  9801  123E  3A00               	xorlw	0
  9802  123F                     u10365:	
  9803  123F  1D03               	skipz
  9804  1240  0008               	return
  9805                           
  9806                           ;MCU_B1.c: 802: {
  9807                           ;MCU_B1.c: 803: Memory.Time = 0;
  9808  1241  01C2               	clrf	(_Memory^(0+384)+34)
  9809  1242  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9810                           
  9811                           ;MCU_B1.c: 804: Memory.Modify = 0;
  9812  1243  1044               	bcf	(_Memory^(0+384)+36),0
  9813                           
  9814                           ;MCU_B1.c: 805: Memory.GO = 0;
  9815  1244  10C4               	bcf	(_Memory^(0+384)+36),1
  9816                           
  9817                           ;MCU_B1.c: 806: Flash_Memory_Modify();
  9818  1245  3196  2634         	fcall	_Flash_Memory_Modify
  9819                           
  9820                           ;MCU_B1.c: 807: }
  9821                           ;MCU_B1.c: 808: } else {
  9822  1247  0008               	return
  9823  1248                     l1427:	
  9824                           
  9825                           ;MCU_B1.c: 809: Memory.GO = 0;
  9826  1248  10C4               	bcf	(_Memory^(0+384)+36),1
  9827  1249  0008               	return
  9828  124A                     __end_of_Flash_Memory_Main:	
  9829                           
  9830                           	psect	text52
  9831  1634                     __ptext52:	
  9832 ;; *************** function _Flash_Memory_Modify *****************
  9833 ;; Defined at:
  9834 ;;		line 866 in file "../src/MCU_B1.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  i               1    5[BANK0 ] unsigned char 
  9839 ;; Return value:  Size  Location     Type
  9840 ;;		None               void
  9841 ;; Registers used:
  9842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;Total ram usage:        2 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    7
  9855 ;; This function calls:
  9856 ;;		_Flash_Memory_Erasing
  9857 ;;		_Flash_Memory_Read
  9858 ;;		_Flash_Memory_Write
  9859 ;; This function is called by:
  9860 ;;		_Flash_Memory_Main
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           
  9865                           ;psect for function _Flash_Memory_Modify
  9866  1634                     _Flash_Memory_Modify:	
  9867                           
  9868                           ;MCU_B1.c: 867: char i = 0;
  9869                           
  9870                           ;incstack = 0
  9871                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9872  1634  0020               	movlb	0	; select bank0
  9873  1635  01A5               	clrf	Flash_Memory_Modify@i
  9874                           
  9875                           ;MCU_B1.c: 868: for (i = 0; i < 32; i++) {
  9876  1636  01A5               	clrf	Flash_Memory_Modify@i
  9877  1637  3020               	movlw	32
  9878  1638  0225               	subwf	Flash_Memory_Modify@i,w
  9879  1639  1803               	btfsc	3,0
  9880  163A  2E50               	goto	l9251
  9881  163B                     l9245:	
  9882                           
  9883                           ;MCU_B1.c: 869: Memory.Data[i] = Flash_Memory_Read(i);
  9884  163B  0825               	movf	Flash_Memory_Modify@i,w
  9885  163C  3191  2180  3196   	fcall	_Flash_Memory_Read
  9886  163F  0020               	movlb	0	; select bank0
  9887  1640  00A4               	movwf	??_Flash_Memory_Modify
  9888  1641  0825               	movf	Flash_Memory_Modify@i,w
  9889  1642  3EA0               	addlw	_Memory& (0+255)
  9890  1643  0086               	movwf	6
  9891  1644  3001               	movlw	1	; select bank3/4
  9892  1645  0087               	movwf	7
  9893  1646  0824               	movf	??_Flash_Memory_Modify,w
  9894  1647  0081               	movwf	1
  9895  1648  3001               	movlw	1
  9896  1649  00A4               	movwf	??_Flash_Memory_Modify
  9897  164A  0824               	movf	??_Flash_Memory_Modify,w
  9898  164B  07A5               	addwf	Flash_Memory_Modify@i,f
  9899  164C  3020               	movlw	32
  9900  164D  0225               	subwf	Flash_Memory_Modify@i,w
  9901  164E  1C03               	skipc
  9902  164F  2E3B               	goto	l9245
  9903  1650                     l9251:	
  9904                           
  9905                           ;MCU_B1.c: 870: }
  9906                           ;MCU_B1.c: 871: Memory.Data[0]=product->Data[12];
  9907  1650  086D               	movf	_product,w
  9908  1651  0086               	movwf	6
  9909  1652  3002               	movlw	2	; select bank4/5
  9910  1653  0087               	movwf	7
  9911  1654  3002               	movlw	2	; select bank4/5
  9912  1655  3F4C               	moviw [12]fsr1
  9913  1656  0023               	movlb	3	; select bank3
  9914  1657  00A0               	movwf	_Memory^(0+384)
  9915                           
  9916                           ;MCU_B1.c: 872: Memory.Data[1]=product->Data[13];
  9917  1658  0020               	movlb	0	; select bank0
  9918  1659  086D               	movf	_product,w
  9919  165A  0086               	movwf	6
  9920  165B  3002               	movlw	2	; select bank4/5
  9921  165C  0087               	movwf	7
  9922  165D  3002               	movlw	2	; select bank4/5
  9923  165E  3F4D               	moviw [13]fsr1
  9924  165F  0023               	movlb	3	; select bank3
  9925  1660  00A1               	movwf	(_Memory^(0+384)+1)
  9926                           
  9927                           ;MCU_B1.c: 873: Memory.Data[2]=product->Data[14];
  9928  1661  0020               	movlb	0	; select bank0
  9929  1662  086D               	movf	_product,w
  9930  1663  0086               	movwf	6
  9931  1664  3002               	movlw	2	; select bank4/5
  9932  1665  0087               	movwf	7
  9933  1666  3002               	movlw	2	; select bank4/5
  9934  1667  3F4E               	moviw [14]fsr1
  9935  1668  0023               	movlb	3	; select bank3
  9936  1669  00A2               	movwf	(_Memory^(0+384)+2)
  9937                           
  9938                           ;MCU_B1.c: 879: if (Memory.LoopSave == 1) {
  9939  166A  1D44               	btfss	(_Memory^(0+384)+36),2
  9940  166B  2E70               	goto	l1449
  9941                           
  9942                           ;MCU_B1.c: 880: Memory.LoopSave = 0;
  9943  166C  1144               	bcf	(_Memory^(0+384)+36),2
  9944                           
  9945                           ;MCU_B1.c: 881: myMain.FirstOpen = 0;
  9946  166D  0021               	movlb	1	; select bank1
  9947  166E  12A0               	bcf	_myMain^(0+128),5
  9948                           
  9949                           ;MCU_B1.c: 882: myMain.First = 0;
  9950  166F  13A0               	bcf	_myMain^(0+128),7
  9951  1670                     l1449:	
  9952                           
  9953                           ;MCU_B1.c: 884: }
  9954                           ;MCU_B1.c: 885: GIE = 0;
  9955  1670  138B               	bcf	11,7	;volatile
  9956                           
  9957                           ;MCU_B1.c: 886: Flash_Memory_Erasing();
  9958  1671  319E  26F2  3196   	fcall	_Flash_Memory_Erasing
  9959                           
  9960                           ;MCU_B1.c: 887: Flash_Memory_Write();
  9961  1674  3194  2460         	fcall	_Flash_Memory_Write
  9962                           
  9963                           ;MCU_B1.c: 888: GIE = 1;
  9964  1676  178B               	bsf	11,7	;volatile
  9965  1677  0008               	return
  9966  1678                     __end_of_Flash_Memory_Modify:	
  9967                           
  9968                           	psect	text53
  9969  1EF2                     __ptext53:	
  9970 ;; *************** function _Flash_Memory_Erasing *****************
  9971 ;; Defined at:
  9972 ;;		line 855 in file "../src/MCU_B1.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;		None
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;		None               void
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:        0 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    6
  9993 ;; This function calls:
  9994 ;;		_Flash_Memory_Unlock
  9995 ;; This function is called by:
  9996 ;;		_Flash_Memory_Modify
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _Flash_Memory_Erasing
 10002  1EF2                     _Flash_Memory_Erasing:	
 10003                           
 10004                           ;MCU_B1.c: 856: CFGS = 0;
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10008  1EF2  0023               	movlb	3	; select bank3
 10009  1EF3  1315               	bcf	21,6	;volatile
 10010                           
 10011                           ;MCU_B1.c: 857: PMADRH = 0x30;
 10012  1EF4  3030               	movlw	48
 10013  1EF5  0092               	movwf	18	;volatile
 10014                           
 10015                           ;MCU_B1.c: 858: PMADRL = 0x00;
 10016  1EF6  0191               	clrf	17	;volatile
 10017                           
 10018                           ;MCU_B1.c: 859: FREE = 1;
 10019  1EF7  1615               	bsf	21,4	;volatile
 10020                           
 10021                           ;MCU_B1.c: 860: WREN = 1;
 10022  1EF8  1515               	bsf	21,2	;volatile
 10023                           
 10024                           ;MCU_B1.c: 861: Flash_Memory_Unlock();
 10025  1EF9  319E  26A4         	fcall	_Flash_Memory_Unlock
 10026                           
 10027                           ;MCU_B1.c: 862: WREN = 0;
 10028  1EFB  0023               	movlb	3	; select bank3
 10029  1EFC  1115               	bcf	21,2	;volatile
 10030  1EFD  0008               	return
 10031  1EFE                     __end_of_Flash_Memory_Erasing:	
 10032                           
 10033                           	psect	text54
 10034  0521                     __ptext54:	
 10035 ;; *************** function _Flash_Memory_Initialization *****************
 10036 ;; Defined at:
 10037 ;;		line 756 in file "../src/MCU_B1.c"
 10038 ;; Parameters:    Size  Location     Type
 10039 ;;		None
 10040 ;; Auto vars:     Size  Location     Type
 10041 ;;  i               1   62[BANK0 ] unsigned char 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;		None               void
 10044 ;; Registers used:
 10045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;Total ram usage:        2 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    8
 10058 ;; This function calls:
 10059 ;;		_Flash_Memory_Read
 10060 ;;		_Flash_Memory_Write
 10061 ;;		_setPercentValue
 10062 ;; This function is called by:
 10063 ;;		_main
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           
 10068                           ;psect for function _Flash_Memory_Initialization
 10069  0521                     _Flash_Memory_Initialization:	
 10070                           
 10071                           ;MCU_B1.c: 757: char i = 0;
 10072                           
 10073                           ;incstack = 0
 10074                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10075  0521  0020               	movlb	0	; select bank0
 10076  0522  01DE               	clrf	Flash_Memory_Initialization@i
 10077                           
 10078                           ;MCU_B1.c: 758: if (Flash_Memory_Read(31) == 0xaa) {
 10079  0523  301F               	movlw	31
 10080  0524  3191  2180  3185   	fcall	_Flash_Memory_Read
 10081  0527  3AAA               	xorlw	170
 10082  0528  1D03               	skipz
 10083  0529  2D93               	goto	l9583
 10084                           
 10085                           ;MCU_B1.c: 759: product->Data[12] = Flash_Memory_Read(0);
 10086  052A  3000               	movlw	0
 10087  052B  3191  2180  3185   	fcall	_Flash_Memory_Read
 10088  052E  0020               	movlb	0	; select bank0
 10089  052F  00DD               	movwf	??_Flash_Memory_Initialization
 10090  0530  086D               	movf	_product,w
 10091  0531  3E0C               	addlw	12
 10092  0532  0086               	movwf	6
 10093  0533  3002               	movlw	2	; select bank4/5
 10094  0534  0087               	movwf	7
 10095  0535  085D               	movf	??_Flash_Memory_Initialization,w
 10096  0536  0081               	movwf	1
 10097                           
 10098                           ;MCU_B1.c: 760: product->Data[13] = Flash_Memory_Read(1);
 10099  0537  3001               	movlw	1
 10100  0538  3191  2180  3185   	fcall	_Flash_Memory_Read
 10101  053B  0020               	movlb	0	; select bank0
 10102  053C  00DD               	movwf	??_Flash_Memory_Initialization
 10103  053D  086D               	movf	_product,w
 10104  053E  3E0D               	addlw	13
 10105  053F  0086               	movwf	6
 10106  0540  3002               	movlw	2	; select bank4/5
 10107  0541  0087               	movwf	7
 10108  0542  085D               	movf	??_Flash_Memory_Initialization,w
 10109  0543  0081               	movwf	1
 10110                           
 10111                           ;MCU_B1.c: 761: product->Data[14] = Flash_Memory_Read(2);
 10112  0544  3002               	movlw	2
 10113  0545  3191  2180  3185   	fcall	_Flash_Memory_Read
 10114  0548  0020               	movlb	0	; select bank0
 10115  0549  00DD               	movwf	??_Flash_Memory_Initialization
 10116  054A  086D               	movf	_product,w
 10117  054B  3E0E               	addlw	14
 10118  054C  0086               	movwf	6
 10119  054D  3002               	movlw	2	; select bank4/5
 10120  054E  0087               	movwf	7
 10121  054F  085D               	movf	??_Flash_Memory_Initialization,w
 10122  0550  0081               	movwf	1
 10123                           
 10124                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-90)*0.8)));
 10125  0551  3008               	movlw	8
 10126  0552  3196  2678  3185   	fcall	_setPercentValue
 10127  0555  0020               	movlb	0	; select bank0
 10128  0556  00DD               	movwf	??_Flash_Memory_Initialization
 10129  0557  085D               	movf	??_Flash_Memory_Initialization,w
 10130  0558  00DE               	movwf	Flash_Memory_Initialization@i
 10131                           
 10132                           ;MCU_B1.c: 768: product->Data[21] = i;
 10133  0559  085E               	movf	Flash_Memory_Initialization@i,w
 10134  055A  00DD               	movwf	??_Flash_Memory_Initialization
 10135  055B  086D               	movf	_product,w
 10136  055C  3E15               	addlw	21
 10137  055D  0086               	movwf	6
 10138  055E  3002               	movlw	2	; select bank4/5
 10139  055F  0087               	movwf	7
 10140  0560  085D               	movf	??_Flash_Memory_Initialization,w
 10141  0561  0081               	movwf	1
 10142                           
 10143                           ;MCU_B1.c: 769: product->Data[22] = i;
 10144  0562  085E               	movf	Flash_Memory_Initialization@i,w
 10145  0563  00DD               	movwf	??_Flash_Memory_Initialization
 10146  0564  086D               	movf	_product,w
 10147  0565  3E16               	addlw	22
 10148  0566  0086               	movwf	6
 10149  0567  3002               	movlw	2	; select bank4/5
 10150  0568  0087               	movwf	7
 10151  0569  085D               	movf	??_Flash_Memory_Initialization,w
 10152  056A  0081               	movwf	1
 10153                           
 10154                           ;MCU_B1.c: 770: product->Data[23] = i;
 10155  056B  085E               	movf	Flash_Memory_Initialization@i,w
 10156  056C  00DD               	movwf	??_Flash_Memory_Initialization
 10157  056D  086D               	movf	_product,w
 10158  056E  3E17               	addlw	23
 10159  056F  0086               	movwf	6
 10160  0570  3002               	movlw	2	; select bank4/5
 10161  0571  0087               	movwf	7
 10162  0572  085D               	movf	??_Flash_Memory_Initialization,w
 10163  0573  0081               	movwf	1
 10164                           
 10165                           ;MCU_B1.c: 772: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10166  0574  086D               	movf	_product,w
 10167  0575  3E0C               	addlw	12
 10168  0576  0086               	movwf	6
 10169  0577  3002               	movlw	2	; select bank4/5
 10170  0578  0087               	movwf	7
 10171  0579  0801               	movf	1,w
 10172  057A  3AFF               	xorlw	255
 10173  057B  1D03               	skipz
 10174  057C  0008               	return
 10175  057D  086D               	movf	_product,w
 10176  057E  3E0D               	addlw	13
 10177  057F  0086               	movwf	6
 10178  0580  3002               	movlw	2	; select bank4/5
 10179  0581  0087               	movwf	7
 10180  0582  0801               	movf	1,w
 10181  0583  3AFF               	xorlw	255
 10182  0584  1D03               	skipz
 10183  0585  0008               	return
 10184  0586  086D               	movf	_product,w
 10185  0587  3E0E               	addlw	14
 10186  0588  0086               	movwf	6
 10187  0589  3002               	movlw	2	; select bank4/5
 10188  058A  0087               	movwf	7
 10189  058B  0801               	movf	1,w
 10190  058C  3AFF               	xorlw	255
 10191  058D  1D03               	skipz
 10192  058E  0008               	return
 10193                           
 10194                           ;MCU_B1.c: 773: myMain.FirstOpen = 1;
 10195  058F  0021               	movlb	1	; select bank1
 10196  0590  16A0               	bsf	_myMain^(0+128),5
 10197                           
 10198                           ;MCU_B1.c: 774: myMain.First = 1;
 10199  0591  17A0               	bsf	_myMain^(0+128),7
 10200                           
 10201                           ;MCU_B1.c: 775: }
 10202                           ;MCU_B1.c: 776: } else {
 10203  0592  0008               	return
 10204  0593                     l9583:	
 10205                           
 10206                           ;MCU_B1.c: 777: i = setPercentValue(((char)((100-90)*0.8)));
 10207  0593  3008               	movlw	8
 10208  0594  3196  2678  3185   	fcall	_setPercentValue
 10209  0597  0020               	movlb	0	; select bank0
 10210  0598  00DD               	movwf	??_Flash_Memory_Initialization
 10211  0599  085D               	movf	??_Flash_Memory_Initialization,w
 10212  059A  00DE               	movwf	Flash_Memory_Initialization@i
 10213                           
 10214                           ;MCU_B1.c: 778: Memory.Data[0]=0xff;
 10215  059B  30FF               	movlw	255
 10216  059C  00DD               	movwf	??_Flash_Memory_Initialization
 10217  059D  085D               	movf	??_Flash_Memory_Initialization,w
 10218  059E  0023               	movlb	3	; select bank3
 10219  059F  00A0               	movwf	_Memory^(0+384)
 10220                           
 10221                           ;MCU_B1.c: 779: Memory.Data[1]=0xff;
 10222  05A0  30FF               	movlw	255
 10223  05A1  0020               	movlb	0	; select bank0
 10224  05A2  00DD               	movwf	??_Flash_Memory_Initialization
 10225  05A3  085D               	movf	??_Flash_Memory_Initialization,w
 10226  05A4  0023               	movlb	3	; select bank3
 10227  05A5  00A1               	movwf	(_Memory^(0+384)+1)
 10228                           
 10229                           ;MCU_B1.c: 780: Memory.Data[2]=0xff;
 10230  05A6  30FF               	movlw	255
 10231  05A7  0020               	movlb	0	; select bank0
 10232  05A8  00DD               	movwf	??_Flash_Memory_Initialization
 10233  05A9  085D               	movf	??_Flash_Memory_Initialization,w
 10234  05AA  0023               	movlb	3	; select bank3
 10235  05AB  00A2               	movwf	(_Memory^(0+384)+2)
 10236                           
 10237                           ;MCU_B1.c: 781: Memory.Data[3]=0xff;
 10238  05AC  30FF               	movlw	255
 10239  05AD  0020               	movlb	0	; select bank0
 10240  05AE  00DD               	movwf	??_Flash_Memory_Initialization
 10241  05AF  085D               	movf	??_Flash_Memory_Initialization,w
 10242  05B0  0023               	movlb	3	; select bank3
 10243  05B1  00A3               	movwf	(_Memory^(0+384)+3)
 10244                           
 10245                           ;MCU_B1.c: 782: Memory.Data[4]=0xff;
 10246  05B2  30FF               	movlw	255
 10247  05B3  0020               	movlb	0	; select bank0
 10248  05B4  00DD               	movwf	??_Flash_Memory_Initialization
 10249  05B5  085D               	movf	??_Flash_Memory_Initialization,w
 10250  05B6  0023               	movlb	3	; select bank3
 10251  05B7  00A4               	movwf	(_Memory^(0+384)+4)
 10252                           
 10253                           ;MCU_B1.c: 783: Memory.Data[5]=0xff;
 10254  05B8  30FF               	movlw	255
 10255  05B9  0020               	movlb	0	; select bank0
 10256  05BA  00DD               	movwf	??_Flash_Memory_Initialization
 10257  05BB  085D               	movf	??_Flash_Memory_Initialization,w
 10258  05BC  0023               	movlb	3	; select bank3
 10259  05BD  00A5               	movwf	(_Memory^(0+384)+5)
 10260                           
 10261                           ;MCU_B1.c: 784: Memory.Data[31]=0xaa;
 10262  05BE  30AA               	movlw	170
 10263  05BF  0020               	movlb	0	; select bank0
 10264  05C0  00DD               	movwf	??_Flash_Memory_Initialization
 10265  05C1  085D               	movf	??_Flash_Memory_Initialization,w
 10266  05C2  0023               	movlb	3	; select bank3
 10267  05C3  00BF               	movwf	(_Memory^(0+384)+31)
 10268                           
 10269                           ;MCU_B1.c: 785: product->Data[21] = i;
 10270  05C4  0020               	movlb	0	; select bank0
 10271  05C5  085E               	movf	Flash_Memory_Initialization@i,w
 10272  05C6  00DD               	movwf	??_Flash_Memory_Initialization
 10273  05C7  086D               	movf	_product,w
 10274  05C8  3E15               	addlw	21
 10275  05C9  0086               	movwf	6
 10276  05CA  3002               	movlw	2	; select bank4/5
 10277  05CB  0087               	movwf	7
 10278  05CC  085D               	movf	??_Flash_Memory_Initialization,w
 10279  05CD  0081               	movwf	1
 10280                           
 10281                           ;MCU_B1.c: 786: product->Data[22] = i;
 10282  05CE  085E               	movf	Flash_Memory_Initialization@i,w
 10283  05CF  00DD               	movwf	??_Flash_Memory_Initialization
 10284  05D0  086D               	movf	_product,w
 10285  05D1  3E16               	addlw	22
 10286  05D2  0086               	movwf	6
 10287  05D3  3002               	movlw	2	; select bank4/5
 10288  05D4  0087               	movwf	7
 10289  05D5  085D               	movf	??_Flash_Memory_Initialization,w
 10290  05D6  0081               	movwf	1
 10291                           
 10292                           ;MCU_B1.c: 787: product->Data[23] = i;
 10293  05D7  085E               	movf	Flash_Memory_Initialization@i,w
 10294  05D8  00DD               	movwf	??_Flash_Memory_Initialization
 10295  05D9  086D               	movf	_product,w
 10296  05DA  3E17               	addlw	23
 10297  05DB  0086               	movwf	6
 10298  05DC  3002               	movlw	2	; select bank4/5
 10299  05DD  0087               	movwf	7
 10300  05DE  085D               	movf	??_Flash_Memory_Initialization,w
 10301  05DF  0081               	movwf	1
 10302                           
 10303                           ;MCU_B1.c: 788: GIE = 0;
 10304  05E0  138B               	bcf	11,7	;volatile
 10305                           
 10306                           ;MCU_B1.c: 789: Flash_Memory_Write();
 10307  05E1  3194  2460         	fcall	_Flash_Memory_Write
 10308                           
 10309                           ;MCU_B1.c: 790: GIE = 1;
 10310  05E3  178B               	bsf	11,7	;volatile
 10311                           
 10312                           ;MCU_B1.c: 791: myMain.FirstOpen = 1;
 10313  05E4  0021               	movlb	1	; select bank1
 10314  05E5  16A0               	bsf	_myMain^(0+128),5
 10315                           
 10316                           ;MCU_B1.c: 792: myMain.First = 1;
 10317  05E6  17A0               	bsf	_myMain^(0+128),7
 10318  05E7  0008               	return
 10319  05E8                     __end_of_Flash_Memory_Initialization:	
 10320                           
 10321                           	psect	text55
 10322  1460                     __ptext55:	
 10323 ;; *************** function _Flash_Memory_Write *****************
 10324 ;; Defined at:
 10325 ;;		line 836 in file "../src/MCU_B1.c"
 10326 ;; Parameters:    Size  Location     Type
 10327 ;;		None
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;  i               1    1[BANK0 ] unsigned char 
 10330 ;; Return value:  Size  Location     Type
 10331 ;;		None               void
 10332 ;; Registers used:
 10333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10334 ;; Tracked objects:
 10335 ;;		On entry : 0/0
 10336 ;;		On exit  : 0/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;Total ram usage:        2 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    6
 10346 ;; This function calls:
 10347 ;;		_Flash_Memory_Unlock
 10348 ;; This function is called by:
 10349 ;;		_Flash_Memory_Initialization
 10350 ;;		_Flash_Memory_Modify
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _Flash_Memory_Write
 10356  1460                     _Flash_Memory_Write:	
 10357                           
 10358                           ;MCU_B1.c: 837: char i = 0;
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10362  1460  0020               	movlb	0	; select bank0
 10363  1461  01A1               	clrf	Flash_Memory_Write@i
 10364                           
 10365                           ;MCU_B1.c: 838: CFGS = 0;
 10366  1462  0023               	movlb	3	; select bank3
 10367  1463  1315               	bcf	21,6	;volatile
 10368                           
 10369                           ;MCU_B1.c: 839: PMADRH = 0x30;
 10370  1464  3030               	movlw	48
 10371  1465  0092               	movwf	18	;volatile
 10372                           
 10373                           ;MCU_B1.c: 840: PMDATH = 0;
 10374  1466  0194               	clrf	20	;volatile
 10375                           
 10376                           ;MCU_B1.c: 841: FREE = 0;
 10377  1467  1215               	bcf	21,4	;volatile
 10378                           
 10379                           ;MCU_B1.c: 842: LWLO = 1;
 10380  1468  1695               	bsf	21,5	;volatile
 10381                           
 10382                           ;MCU_B1.c: 843: WREN = 1;
 10383  1469  1515               	bsf	21,2	;volatile
 10384                           
 10385                           ;MCU_B1.c: 844: for (i = 0; i < 32; i++) {
 10386  146A  0020               	movlb	0	; select bank0
 10387  146B  01A1               	clrf	Flash_Memory_Write@i
 10388  146C  3020               	movlw	32
 10389  146D  0221               	subwf	Flash_Memory_Write@i,w
 10390  146E  1803               	btfsc	3,0
 10391  146F  2C88               	goto	l1440
 10392  1470                     l8769:	
 10393                           
 10394                           ;MCU_B1.c: 845: PMADRL = i;
 10395  1470  0821               	movf	Flash_Memory_Write@i,w
 10396  1471  0023               	movlb	3	; select bank3
 10397  1472  0091               	movwf	17	;volatile
 10398                           
 10399                           ;MCU_B1.c: 846: PMDATL = Memory.Data[i];
 10400  1473  0020               	movlb	0	; select bank0
 10401  1474  0821               	movf	Flash_Memory_Write@i,w
 10402  1475  3EA0               	addlw	_Memory& (0+255)
 10403  1476  0086               	movwf	6
 10404  1477  3001               	movlw	1	; select bank3/4
 10405  1478  0087               	movwf	7
 10406  1479  0801               	movf	1,w
 10407  147A  0023               	movlb	3	; select bank3
 10408  147B  0093               	movwf	19	;volatile
 10409                           
 10410                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 10411  147C  319E  26A4  3194   	fcall	_Flash_Memory_Unlock
 10412  147F  3001               	movlw	1
 10413  1480  0020               	movlb	0	; select bank0
 10414  1481  00A0               	movwf	??_Flash_Memory_Write
 10415  1482  0820               	movf	??_Flash_Memory_Write,w
 10416  1483  07A1               	addwf	Flash_Memory_Write@i,f
 10417  1484  3020               	movlw	32
 10418  1485  0221               	subwf	Flash_Memory_Write@i,w
 10419  1486  1C03               	skipc
 10420  1487  2C70               	goto	l8769
 10421  1488                     l1440:	
 10422                           
 10423                           ;MCU_B1.c: 848: }
 10424                           ;MCU_B1.c: 849: LWLO = 0;
 10425  1488  0023               	movlb	3	; select bank3
 10426  1489  1295               	bcf	21,5	;volatile
 10427                           
 10428                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 10429  148A  319E  26A4         	fcall	_Flash_Memory_Unlock
 10430                           
 10431                           ;MCU_B1.c: 851: WREN = 0;
 10432  148C  0023               	movlb	3	; select bank3
 10433  148D  1115               	bcf	21,2	;volatile
 10434  148E  0008               	return
 10435  148F                     __end_of_Flash_Memory_Write:	
 10436                           
 10437                           	psect	text56
 10438  1EA4                     __ptext56:	
 10439 ;; *************** function _Flash_Memory_Unlock *****************
 10440 ;; Defined at:
 10441 ;;		line 815 in file "../src/MCU_B1.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;		None
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;		None
 10446 ;; Return value:  Size  Location     Type
 10447 ;;		None               void
 10448 ;; Registers used:
 10449 ;;		wreg
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    5
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_Flash_Memory_Write
 10466 ;;		_Flash_Memory_Erasing
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           
 10471                           ;psect for function _Flash_Memory_Unlock
 10472  1EA4                     _Flash_Memory_Unlock:	
 10473                           
 10474                           ;MCU_B1.c: 816: PMCON2 = 0x55;
 10475                           
 10476                           ;incstack = 0
 10477                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10478  1EA4  3055               	movlw	85
 10479  1EA5  0023               	movlb	3	; select bank3
 10480  1EA6  0096               	movwf	22	;volatile
 10481                           
 10482                           ;MCU_B1.c: 817: PMCON2 = 0xaa;
 10483  1EA7  30AA               	movlw	170
 10484  1EA8  0096               	movwf	22	;volatile
 10485                           
 10486                           ;MCU_B1.c: 818: WR = 1;
 10487  1EA9  1495               	bsf	21,1	;volatile
 10488                           
 10489                           ;MCU_B1.c: 819: __nop();
 10490  1EAA  0000               	nop
 10491                           
 10492                           ;MCU_B1.c: 820: __nop();
 10493  1EAB  0000               	nop
 10494  1EAC  0008               	return
 10495  1EAD                     __end_of_Flash_Memory_Unlock:	
 10496                           
 10497                           	psect	text57
 10498  1180                     __ptext57:	
 10499 ;; *************** function _Flash_Memory_Read *****************
 10500 ;; Defined at:
 10501 ;;		line 824 in file "../src/MCU_B1.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  address         1    wreg     unsigned char 
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  address         1    2[BANK0 ] unsigned char 
 10506 ;;  ret             1    3[BANK0 ] unsigned char 
 10507 ;;  i               1    1[BANK0 ] unsigned char 
 10508 ;; Return value:  Size  Location     Type
 10509 ;;                  1    wreg      unsigned char 
 10510 ;; Registers used:
 10511 ;;		wreg, status,2
 10512 ;; Tracked objects:
 10513 ;;		On entry : 0/0
 10514 ;;		On exit  : 0/0
 10515 ;;		Unchanged: 0/0
 10516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;Total ram usage:        4 bytes
 10522 ;; Hardware stack levels used:    1
 10523 ;; Hardware stack levels required when called:    5
 10524 ;; This function calls:
 10525 ;;		Nothing
 10526 ;; This function is called by:
 10527 ;;		_Flash_Memory_Initialization
 10528 ;;		_Flash_Memory_Modify
 10529 ;; This function uses a non-reentrant model
 10530 ;;
 10531                           
 10532                           
 10533                           ;psect for function _Flash_Memory_Read
 10534  1180                     _Flash_Memory_Read:	
 10535                           
 10536                           ;incstack = 0
 10537                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10538                           ;Flash_Memory_Read@address stored from wreg
 10539  1180  0020               	movlb	0	; select bank0
 10540  1181  00A2               	movwf	Flash_Memory_Read@address
 10541                           
 10542                           ;MCU_B1.c: 825: char i = 0, ret = 0;
 10543  1182  01A1               	clrf	Flash_Memory_Read@i
 10544  1183  01A3               	clrf	Flash_Memory_Read@ret
 10545                           
 10546                           ;MCU_B1.c: 826: PMADRH = 0x30;
 10547  1184  3030               	movlw	48
 10548  1185  0023               	movlb	3	; select bank3
 10549  1186  0092               	movwf	18	;volatile
 10550                           
 10551                           ;MCU_B1.c: 827: PMADRL = address;
 10552  1187  0020               	movlb	0	; select bank0
 10553  1188  0822               	movf	Flash_Memory_Read@address,w
 10554  1189  0023               	movlb	3	; select bank3
 10555  118A  0091               	movwf	17	;volatile
 10556                           
 10557                           ;MCU_B1.c: 828: CFGS = 0;
 10558  118B  1315               	bcf	21,6	;volatile
 10559                           
 10560                           ;MCU_B1.c: 829: RD = 1;
 10561  118C  1415               	bsf	21,0	;volatile
 10562                           
 10563                           ;MCU_B1.c: 830: i = PMDATH;
 10564  118D  0814               	movf	20,w	;volatile
 10565  118E  0020               	movlb	0	; select bank0
 10566  118F  00A0               	movwf	??_Flash_Memory_Read
 10567  1190  0820               	movf	??_Flash_Memory_Read,w
 10568  1191  00A1               	movwf	Flash_Memory_Read@i
 10569                           
 10570                           ;MCU_B1.c: 831: ret = PMDATL;
 10571  1192  0023               	movlb	3	; select bank3
 10572  1193  0813               	movf	19,w	;volatile
 10573  1194  0020               	movlb	0	; select bank0
 10574  1195  00A0               	movwf	??_Flash_Memory_Read
 10575  1196  0820               	movf	??_Flash_Memory_Read,w
 10576  1197  00A3               	movwf	Flash_Memory_Read@ret
 10577                           
 10578                           ;MCU_B1.c: 832: return ret;
 10579  1198  0823               	movf	Flash_Memory_Read@ret,w
 10580  1199  0008               	return
 10581  119A                     __end_of_Flash_Memory_Read:	
 10582                           
 10583                           	psect	text58
 10584  1F51                     __ptext58:	
 10585 ;; *************** function _DimmerLights_Main *****************
 10586 ;; Defined at:
 10587 ;;		line 416 in file "../src/Dimmer_B1.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;		None
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;		None
 10592 ;; Return value:  Size  Location     Type
 10593 ;;		None               void
 10594 ;; Registers used:
 10595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;Total ram usage:        0 bytes
 10606 ;; Hardware stack levels used:    1
 10607 ;; Hardware stack levels required when called:   11
 10608 ;; This function calls:
 10609 ;;		_DimmerLights_Close
 10610 ;;		_setDimmerLights_Main
 10611 ;; This function is called by:
 10612 ;;		_main
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           
 10617                           ;psect for function _DimmerLights_Main
 10618  1F51                     _DimmerLights_Main:	
 10619                           
 10620                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 10621                           
 10622                           ;incstack = 0
 10623                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10624  1F51  3001               	movlw	1
 10625  1F52  318E  261E  319F   	fcall	_setDimmerLights_Main
 10626                           
 10627                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 10628  1F55  3002               	movlw	2
 10629  1F56  318E  261E  319F   	fcall	_setDimmerLights_Main
 10630                           
 10631                           ;Dimmer_B1.c: 427: setDimmerLights_Main(3);
 10632  1F59  3003               	movlw	3
 10633  1F5A  318E  261E  319F   	fcall	_setDimmerLights_Main
 10634                           
 10635                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 10636  1F5D  3190  20CC         	fcall	_DimmerLights_Close
 10637  1F5F  0008               	return
 10638  1F60                     __end_of_DimmerLights_Main:	
 10639                           
 10640                           	psect	text59
 10641  0E1E                     __ptext59:	
 10642 ;; *************** function _setDimmerLights_Main *****************
 10643 ;; Defined at:
 10644 ;;		line 434 in file "../src/Dimmer_B1.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  lights          1    wreg     unsigned char 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  lights          1   74[BANK0 ] unsigned char 
 10649 ;;  clear           1   73[BANK0 ] unsigned char 
 10650 ;; Return value:  Size  Location     Type
 10651 ;;		None               void
 10652 ;; Registers used:
 10653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10654 ;; Tracked objects:
 10655 ;;		On entry : 0/0
 10656 ;;		On exit  : 0/0
 10657 ;;		Unchanged: 0/0
 10658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;Total ram usage:        6 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; Hardware stack levels required when called:   10
 10666 ;; This function calls:
 10667 ;;		_DimmerLightsPointSelect
 10668 ;;		_setBuz
 10669 ;;		_setDimmerLights
 10670 ;;		_setDimmerLights_Adj
 10671 ;; This function is called by:
 10672 ;;		_DimmerLights_Main
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           
 10677                           ;psect for function _setDimmerLights_Main
 10678  0E1E                     _setDimmerLights_Main:	
 10679                           
 10680                           ;incstack = 0
 10681                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10682                           ;setDimmerLights_Main@lights stored from wreg
 10683  0E1E  0020               	movlb	0	; select bank0
 10684  0E1F  00EA               	movwf	setDimmerLights_Main@lights
 10685                           
 10686                           ;Dimmer_B1.c: 435: char clear = 1;
 10687  0E20  01E9               	clrf	setDimmerLights_Main@clear
 10688  0E21  0AE9               	incf	setDimmerLights_Main@clear,f
 10689                           
 10690                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 10691  0E22  086A               	movf	setDimmerLights_Main@lights,w
 10692  0E23  3191  219A  318E   	fcall	_DimmerLightsPointSelect
 10693                           
 10694                           ;Dimmer_B1.c: 439: if (lights == 1) {
 10695  0E26  0020               	movlb	0	; select bank0
 10696  0E27  086A               	movf	setDimmerLights_Main@lights,w
 10697  0E28  3A01               	xorlw	1
 10698  0E29  1D03               	skipz
 10699  0E2A  2E36               	goto	l9115
 10700                           
 10701                           ;Dimmer_B1.c: 440: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10702  0E2B  01E6               	clrf	_setDimmerLights_Main$2409
 10703  0E2C  0022               	movlb	2	; select bank2
 10704  0E2D  1955               	btfsc	(_DimmerLights2^(0+256)+9),2
 10705  0E2E  1D64               	btfss	(_DimmerLights3^(0+256)+9),2
 10706  0E2F  2E33               	goto	l9113
 10707  0E30  0020               	movlb	0	; select bank0
 10708  0E31  01E6               	clrf	_setDimmerLights_Main$2409
 10709  0E32  0AE6               	incf	_setDimmerLights_Main$2409,f
 10710  0E33                     l9113:	
 10711  0E33  0020               	movlb	0	; select bank0
 10712  0E34  0866               	movf	_setDimmerLights_Main$2409,w
 10713  0E35  2E53               	goto	L9
 10714  0E36                     l9115:	
 10715                           ;Dimmer_B1.c: 441: } else if (lights == 2) {
 10716                           
 10717  0E36  086A               	movf	setDimmerLights_Main@lights,w
 10718  0E37  3A02               	xorlw	2
 10719  0E38  1D03               	skipz
 10720  0E39  2E45               	goto	l9127
 10721                           
 10722                           ;Dimmer_B1.c: 442: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10723  0E3A  01E7               	clrf	_setDimmerLights_Main$2417
 10724  0E3B  0022               	movlb	2	; select bank2
 10725  0E3C  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 10726  0E3D  1D64               	btfss	(_DimmerLights3^(0+256)+9),2
 10727  0E3E  2E42               	goto	l9125
 10728  0E3F  0020               	movlb	0	; select bank0
 10729  0E40  01E7               	clrf	_setDimmerLights_Main$2417
 10730  0E41  0AE7               	incf	_setDimmerLights_Main$2417,f
 10731  0E42                     l9125:	
 10732  0E42  0020               	movlb	0	; select bank0
 10733  0E43  0867               	movf	_setDimmerLights_Main$2417,w
 10734  0E44  2E53               	goto	L9
 10735  0E45                     l9127:	
 10736                           ;Dimmer_B1.c: 443: } else if (lights == 3) {
 10737                           
 10738  0E45  086A               	movf	setDimmerLights_Main@lights,w
 10739  0E46  3A03               	xorlw	3
 10740  0E47  1D03               	skipz
 10741  0E48  2E56               	goto	l9139
 10742                           
 10743                           ;Dimmer_B1.c: 444: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10744  0E49  01E8               	clrf	_setDimmerLights_Main$2418
 10745  0E4A  0022               	movlb	2	; select bank2
 10746  0E4B  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 10747  0E4C  1D55               	btfss	(_DimmerLights2^(0+256)+9),2
 10748  0E4D  2E51               	goto	l9137
 10749  0E4E  0020               	movlb	0	; select bank0
 10750  0E4F  01E8               	clrf	_setDimmerLights_Main$2418
 10751  0E50  0AE8               	incf	_setDimmerLights_Main$2418,f
 10752  0E51                     l9137:	
 10753  0E51  0020               	movlb	0	; select bank0
 10754  0E52  0868               	movf	_setDimmerLights_Main$2418,w
 10755  0E53                     L9:	
 10756  0E53  00E5               	movwf	??_setDimmerLights_Main
 10757  0E54  0865               	movf	??_setDimmerLights_Main,w
 10758  0E55  00E9               	movwf	setDimmerLights_Main@clear
 10759  0E56                     l9139:	
 10760                           
 10761                           ;Dimmer_B1.c: 445: }
 10762                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 10763  0E56  086B               	movf	_DimmerLights,w
 10764  0E57  3E08               	addlw	8
 10765  0E58  0086               	movwf	6
 10766  0E59  3001               	movlw	1	; select bank2/3
 10767  0E5A  0087               	movwf	7
 10768  0E5B  1D01               	btfss	1,2
 10769  0E5C  2E7A               	goto	l9149
 10770                           
 10771                           ;Dimmer_B1.c: 457: if (clear == 1) {
 10772  0E5D  0869               	movf	setDimmerLights_Main@clear,w
 10773  0E5E  3A01               	xorlw	1
 10774  0E5F  1D03               	skipz
 10775  0E60  0008               	return
 10776                           
 10777                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 10778  0E61  086B               	movf	_DimmerLights,w
 10779  0E62  3E08               	addlw	8
 10780  0E63  0086               	movwf	6
 10781  0E64  3001               	movlw	1	; select bank2/3
 10782  0E65  0087               	movwf	7
 10783  0E66  1101               	bcf	1,2
 10784                           
 10785                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 10786  0E67  086B               	movf	_DimmerLights,w
 10787  0E68  3E08               	addlw	8
 10788  0E69  0086               	movwf	6
 10789  0E6A  3001               	movlw	1	; select bank2/3
 10790  0E6B  0087               	movwf	7
 10791  0E6C  1C81               	btfss	1,1
 10792  0E6D  2E74               	goto	l9147
 10793                           
 10794                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 10795  0E6E  01A3               	clrf	setDimmerLights@status
 10796  0E6F  0AA3               	incf	setDimmerLights@status,f
 10797  0E70  086A               	movf	setDimmerLights_Main@lights,w
 10798  0E71  318C  2493         	fcall	_setDimmerLights
 10799                           
 10800                           ;Dimmer_B1.c: 461: } else {
 10801  0E73  0008               	return
 10802  0E74                     l9147:	
 10803                           
 10804                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 10805  0E74  0020               	movlb	0	; select bank0
 10806  0E75  01A3               	clrf	setDimmerLights@status
 10807  0E76  086A               	movf	setDimmerLights_Main@lights,w
 10808  0E77  318C  2493         	fcall	_setDimmerLights
 10809                           
 10810                           ;Dimmer_B1.c: 463: }
 10811                           ;Dimmer_B1.c: 467: }
 10812                           ;Dimmer_B1.c: 468: } else {
 10813  0E79  0008               	return
 10814  0E7A                     l9149:	
 10815                           
 10816                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 10817  0E7A  0020               	movlb	0	; select bank0
 10818  0E7B  086B               	movf	_DimmerLights,w
 10819  0E7C  3E08               	addlw	8
 10820  0E7D  0086               	movwf	6
 10821  0E7E  3001               	movlw	1	; select bank2/3
 10822  0E7F  0087               	movwf	7
 10823  0E80  1E01               	btfss	1,4
 10824  0E81  0008               	return
 10825                           
 10826                           ;Dimmer_B1.c: 470: if (clear == 1) {
 10827  0E82  0869               	movf	setDimmerLights_Main@clear,w
 10828  0E83  3A01               	xorlw	1
 10829  0E84  1D03               	skipz
 10830  0E85  0008               	return
 10831                           
 10832                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 10833  0E86  086B               	movf	_DimmerLights,w
 10834  0E87  3E08               	addlw	8
 10835  0E88  0086               	movwf	6
 10836  0E89  3001               	movlw	1	; select bank2/3
 10837  0E8A  0087               	movwf	7
 10838  0E8B  1201               	bcf	1,4
 10839                           
 10840                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 10841  0E8C  086B               	movf	_DimmerLights,w
 10842  0E8D  3E08               	addlw	8
 10843  0E8E  0086               	movwf	6
 10844  0E8F  3001               	movlw	1	; select bank2/3
 10845  0E90  0087               	movwf	7
 10846  0E91  1D81               	btfss	1,3
 10847  0E92  2EA2               	goto	l9159
 10848                           
 10849                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 10850  0E93  01E2               	clrf	setDimmerLights_Adj@status
 10851  0E94  0AE2               	incf	setDimmerLights_Adj@status,f
 10852  0E95  086A               	movf	setDimmerLights_Main@lights,w
 10853  0E96  3195  2531  318E   	fcall	_setDimmerLights_Adj
 10854                           
 10855                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 10856  0E99  3064               	movlw	100
 10857  0E9A  0020               	movlb	0	; select bank0
 10858  0E9B  00A9               	movwf	setBuz@time
 10859  0E9C  3000               	movlw	0
 10860  0E9D  00AA               	movwf	setBuz@time+1
 10861  0E9E  3001               	movlw	1
 10862  0E9F  3197  27A7         	fcall	_setBuz
 10863                           
 10864                           ;Dimmer_B1.c: 475: } else {
 10865  0EA1  0008               	return
 10866  0EA2                     l9159:	
 10867                           
 10868                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 10869  0EA2  0020               	movlb	0	; select bank0
 10870  0EA3  01E2               	clrf	setDimmerLights_Adj@status
 10871  0EA4  086A               	movf	setDimmerLights_Main@lights,w
 10872  0EA5  3195  2531         	fcall	_setDimmerLights_Adj
 10873  0EA7  0008               	return
 10874  0EA8                     __end_of_setDimmerLights_Main:	
 10875                           
 10876                           	psect	text60
 10877  1531                     __ptext60:	
 10878 ;; *************** function _setDimmerLights_Adj *****************
 10879 ;; Defined at:
 10880 ;;		line 655 in file "../src/Dimmer_B1.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  lights          1    wreg     unsigned char 
 10883 ;;  status          1   66[BANK0 ] unsigned char 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  lights          1   68[BANK0 ] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10895 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;Total ram usage:        3 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    9
 10902 ;; This function calls:
 10903 ;;		_DimmerLightsPointSelect
 10904 ;;		_setRF_DimmerLights
 10905 ;;		_setTxData
 10906 ;; This function is called by:
 10907 ;;		_setDimmerLights_Main
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           
 10912                           ;psect for function _setDimmerLights_Adj
 10913  1531                     _setDimmerLights_Adj:	
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10917                           ;setDimmerLights_Adj@lights stored from wreg
 10918  1531  0020               	movlb	0	; select bank0
 10919  1532  00E4               	movwf	setDimmerLights_Adj@lights
 10920                           
 10921                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 10922  1533  0864               	movf	setDimmerLights_Adj@lights,w
 10923  1534  3191  219A  3195   	fcall	_DimmerLightsPointSelect
 10924                           
 10925                           ;Dimmer_B1.c: 657: if (status == 1) {
 10926  1537  0020               	movlb	0	; select bank0
 10927  1538  0862               	movf	setDimmerLights_Adj@status,w
 10928  1539  3A01               	xorlw	1
 10929  153A  1D03               	skipz
 10930  153B  2D47               	goto	l8723
 10931                           
 10932                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 10933  153C  086B               	movf	_DimmerLights,w
 10934  153D  0086               	movwf	6
 10935  153E  3001               	movlw	1	; select bank2/3
 10936  153F  0087               	movwf	7
 10937  1540  1581               	bsf	1,3
 10938                           
 10939                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 10940  1541  086B               	movf	_DimmerLights,w
 10941  1542  0086               	movwf	6
 10942  1543  3001               	movlw	1	; select bank2/3
 10943  1544  0087               	movwf	7
 10944  1545  1481               	bsf	1,1
 10945                           
 10946                           ;Dimmer_B1.c: 660: } else {
 10947  1546  0008               	return
 10948  1547                     l8723:	
 10949                           
 10950                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 10951  1547  086B               	movf	_DimmerLights,w
 10952  1548  0086               	movwf	6
 10953  1549  3001               	movlw	1	; select bank2/3
 10954  154A  0087               	movwf	7
 10955  154B  1D81               	btfss	1,3
 10956  154C  0008               	return
 10957                           
 10958                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 10959  154D  086B               	movf	_DimmerLights,w
 10960  154E  0086               	movwf	6
 10961  154F  3001               	movlw	1	; select bank2/3
 10962  1550  0087               	movwf	7
 10963  1551  1081               	bcf	1,1
 10964                           
 10965                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 10966  1552  086B               	movf	_DimmerLights,w
 10967  1553  0086               	movwf	6
 10968  1554  3001               	movlw	1	; select bank2/3
 10969  1555  0087               	movwf	7
 10970  1556  1181               	bcf	1,3
 10971                           
 10972                           ;Dimmer_B1.c: 665: ;;
 10973                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10974  1557  086B               	movf	_DimmerLights,w
 10975  1558  3E04               	addlw	4
 10976  1559  0086               	movwf	6
 10977  155A  3001               	movlw	1	; select bank2/3
 10978  155B  0087               	movwf	7
 10979  155C  0801               	movf	1,w
 10980  155D  00E3               	movwf	??_setDimmerLights_Adj
 10981  155E  086B               	movf	_DimmerLights,w
 10982  155F  3E05               	addlw	5
 10983  1560  0086               	movwf	6
 10984  1561  3001               	movlw	1	; select bank2/3
 10985  1562  0087               	movwf	7
 10986  1563  0863               	movf	??_setDimmerLights_Adj,w
 10987  1564  0081               	movwf	1
 10988                           
 10989                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 10990  1565  01DD               	clrf	setRF_DimmerLights@on
 10991  1566  0ADD               	incf	setRF_DimmerLights@on,f
 10992  1567  0864               	movf	setDimmerLights_Adj@lights,w
 10993  1568  318A  22D6  3195   	fcall	_setRF_DimmerLights
 10994                           
 10995                           ;Dimmer_B1.c: 675: setTxData();
 10996  156B  3185  25E8         	fcall	_setTxData
 10997  156D  0008               	return
 10998  156E                     __end_of_setDimmerLights_Adj:	
 10999                           
 11000                           	psect	text61
 11001  0C93                     __ptext61:	
 11002 ;; *************** function _setDimmerLights *****************
 11003 ;; Defined at:
 11004 ;;		line 602 in file "../src/Dimmer_B1.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;  lights          1    wreg     unsigned char 
 11007 ;;  status          1    3[BANK0 ] unsigned char 
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;  lights          1    5[BANK0 ] unsigned char 
 11010 ;; Return value:  Size  Location     Type
 11011 ;;		None               void
 11012 ;; Registers used:
 11013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11019 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;Total ram usage:        3 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:    7
 11026 ;; This function calls:
 11027 ;;		_DimmerLightsPointSelect
 11028 ;;		_setLED
 11029 ;;		_setMemory_GO
 11030 ;; This function is called by:
 11031 ;;		_setDimmerLights_Main
 11032 ;;		_setControl_Lights_Table
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           
 11037                           ;psect for function _setDimmerLights
 11038  0C93                     _setDimmerLights:	
 11039                           
 11040                           ;incstack = 0
 11041                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11042                           ;setDimmerLights@lights stored from wreg
 11043  0C93  0020               	movlb	0	; select bank0
 11044  0C94  00A5               	movwf	setDimmerLights@lights
 11045                           
 11046                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 11047  0C95  0825               	movf	setDimmerLights@lights,w
 11048  0C96  3191  219A  318C   	fcall	_DimmerLightsPointSelect
 11049                           
 11050                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 11051  0C99  0020               	movlb	0	; select bank0
 11052  0C9A  0825               	movf	setDimmerLights@lights,w
 11053  0C9B  00A4               	movwf	??_setDimmerLights
 11054  0C9C  0A73               	incf	_Dimmer,w
 11055  0C9D  0086               	movwf	6
 11056  0C9E  0187               	clrf	7
 11057  0C9F  0824               	movf	??_setDimmerLights,w
 11058  0CA0  0081               	movwf	1
 11059                           
 11060                           ;Dimmer_B1.c: 605: if (status == 1) {
 11061  0CA1  0823               	movf	setDimmerLights@status,w
 11062  0CA2  3A01               	xorlw	1
 11063  0CA3  1D03               	skipz
 11064  0CA4  2CE5               	goto	l8399
 11065                           
 11066                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 11067  0CA5  086B               	movf	_DimmerLights,w
 11068  0CA6  0086               	movwf	6
 11069  0CA7  3001               	movlw	1	; select bank2/3
 11070  0CA8  0087               	movwf	7
 11071  0CA9  1681               	bsf	1,5
 11072                           
 11073                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 11074  0CAA  01A1               	clrf	setLED@command
 11075  0CAB  0825               	movf	setDimmerLights@lights,w
 11076  0CAC  318B  23B1  318C   	fcall	_setLED
 11077                           
 11078                           ;Dimmer_B1.c: 609: ;;
 11079                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 11080  0CAF  0020               	movlb	0	; select bank0
 11081  0CB0  086B               	movf	_DimmerLights,w
 11082  0CB1  0086               	movwf	6
 11083  0CB2  3001               	movlw	1	; select bank2/3
 11084  0CB3  0087               	movwf	7
 11085  0CB4  1481               	bsf	1,1
 11086                           
 11087                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 11088  0CB5  3007               	movlw	7
 11089  0CB6  00A4               	movwf	??_setDimmerLights
 11090  0CB7  086B               	movf	_DimmerLights,w
 11091  0CB8  3E02               	addlw	2
 11092  0CB9  0086               	movwf	6
 11093  0CBA  3001               	movlw	1	; select bank2/3
 11094  0CBB  0087               	movwf	7
 11095  0CBC  0824               	movf	??_setDimmerLights,w
 11096  0CBD  0081               	movwf	1
 11097                           
 11098                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 11099  0CBE  086B               	movf	_DimmerLights,w
 11100  0CBF  0086               	movwf	6
 11101  0CC0  3001               	movlw	1	; select bank2/3
 11102  0CC1  0087               	movwf	7
 11103  0CC2  1B01               	btfsc	1,6
 11104  0CC3  0008               	return
 11105                           
 11106                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 11107  0CC4  086B               	movf	_DimmerLights,w
 11108  0CC5  0086               	movwf	6
 11109  0CC6  3001               	movlw	1	; select bank2/3
 11110  0CC7  0087               	movwf	7
 11111  0CC8  1701               	bsf	1,6
 11112                           
 11113                           ;Dimmer_B1.c: 616: ;;
 11114                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 11115  0CC9  3000               	movlw	0
 11116  0CCA  3191  2108         	fcall	_setMemory_GO
 11117                           
 11118                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11119  0CCC  0020               	movlb	0	; select bank0
 11120  0CCD  086B               	movf	_DimmerLights,w
 11121  0CCE  3E05               	addlw	5
 11122  0CCF  0086               	movwf	6
 11123  0CD0  3001               	movlw	1	; select bank2/3
 11124  0CD1  0087               	movwf	7
 11125  0CD2  0801               	movf	1,w
 11126  0CD3  00A4               	movwf	??_setDimmerLights
 11127  0CD4  086B               	movf	_DimmerLights,w
 11128  0CD5  3E04               	addlw	4
 11129  0CD6  0086               	movwf	6
 11130  0CD7  3001               	movlw	1	; select bank2/3
 11131  0CD8  0087               	movwf	7
 11132  0CD9  0824               	movf	??_setDimmerLights,w
 11133  0CDA  0081               	movwf	1
 11134                           
 11135                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-90)*0.8));
 11136  0CDB  3008               	movlw	8
 11137  0CDC  00A4               	movwf	??_setDimmerLights
 11138  0CDD  086B               	movf	_DimmerLights,w
 11139  0CDE  3E04               	addlw	4
 11140  0CDF  0086               	movwf	6
 11141  0CE0  3001               	movlw	1	; select bank2/3
 11142  0CE1  0087               	movwf	7
 11143  0CE2  0824               	movf	??_setDimmerLights,w
 11144  0CE3  0081               	movwf	1
 11145                           
 11146                           ;Dimmer_B1.c: 626: }
 11147                           ;Dimmer_B1.c: 627: } else {
 11148  0CE4  0008               	return
 11149  0CE5                     l8399:	
 11150                           
 11151                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 11152  0CE5  086B               	movf	_DimmerLights,w
 11153  0CE6  0086               	movwf	6
 11154  0CE7  3001               	movlw	1	; select bank2/3
 11155  0CE8  0087               	movwf	7
 11156  0CE9  1281               	bcf	1,5
 11157                           
 11158                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11159  0CEA  086B               	movf	_DimmerLights,w
 11160  0CEB  3E06               	addlw	6
 11161  0CEC  0086               	movwf	6
 11162  0CED  3001               	movlw	1	; select bank2/3
 11163  0CEE  0087               	movwf	7
 11164  0CEF  0801               	movf	1,w
 11165  0CF0  00A4               	movwf	??_setDimmerLights
 11166  0CF1  086B               	movf	_DimmerLights,w
 11167  0CF2  3E04               	addlw	4
 11168  0CF3  0086               	movwf	6
 11169  0CF4  3001               	movlw	1	; select bank2/3
 11170  0CF5  0087               	movwf	7
 11171  0CF6  0824               	movf	??_setDimmerLights,w
 11172  0CF7  0081               	movwf	1
 11173                           
 11174                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 11175  0CF8  086B               	movf	_DimmerLights,w
 11176  0CF9  0086               	movwf	6
 11177  0CFA  3001               	movlw	1	; select bank2/3
 11178  0CFB  0087               	movwf	7
 11179  0CFC  1481               	bsf	1,1
 11180                           
 11181                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 11182  0CFD  086B               	movf	_DimmerLights,w
 11183  0CFE  0086               	movwf	6
 11184  0CFF  3001               	movlw	1	; select bank2/3
 11185  0D00  0087               	movwf	7
 11186  0D01  1181               	bcf	1,3
 11187                           
 11188                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 11189  0D02  086B               	movf	_DimmerLights,w
 11190  0D03  0086               	movwf	6
 11191  0D04  3001               	movlw	1	; select bank2/3
 11192  0D05  0087               	movwf	7
 11193  0D06  1201               	bcf	1,4
 11194                           
 11195                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 11196  0D07  3007               	movlw	7
 11197  0D08  00A4               	movwf	??_setDimmerLights
 11198  0D09  086B               	movf	_DimmerLights,w
 11199  0D0A  3E02               	addlw	2
 11200  0D0B  0086               	movwf	6
 11201  0D0C  3001               	movlw	1	; select bank2/3
 11202  0D0D  0087               	movwf	7
 11203  0D0E  0824               	movf	??_setDimmerLights,w
 11204  0D0F  0081               	movwf	1
 11205  0D10  0008               	return
 11206  0D11                     __end_of_setDimmerLights:	
 11207                           
 11208                           	psect	text62
 11209  0BB1                     __ptext62:	
 11210 ;; *************** function _setLED *****************
 11211 ;; Defined at:
 11212 ;;		line 70 in file "../src/LED_B1.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  led             1    wreg     unsigned char 
 11215 ;;  command         1    1[BANK0 ] unsigned char 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  led             1    2[BANK0 ] unsigned char 
 11218 ;; Return value:  Size  Location     Type
 11219 ;;		None               void
 11220 ;; Registers used:
 11221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11227 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;Total ram usage:        2 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    6
 11234 ;; This function calls:
 11235 ;;		_LedPointSelect
 11236 ;; This function is called by:
 11237 ;;		_setDimmerLights
 11238 ;;		_setLED_Initialization
 11239 ;;		_setSw_Initialization
 11240 ;;		_setDimmerLights_ERROR
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           
 11245                           ;psect for function _setLED
 11246  0BB1                     _setLED:	
 11247                           
 11248                           ;incstack = 0
 11249                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11250                           ;setLED@led stored from wreg
 11251  0BB1  0020               	movlb	0	; select bank0
 11252  0BB2  00A2               	movwf	setLED@led
 11253                           
 11254                           ;LED_B1.c: 71: LedPointSelect(led);
 11255  0BB3  0822               	movf	setLED@led,w
 11256  0BB4  3193  2337  318B   	fcall	_LedPointSelect
 11257                           
 11258                           ;LED_B1.c: 72: if (command == 0) {
 11259  0BB7  0020               	movlb	0	; select bank0
 11260  0BB8  08A1               	movf	setLED@command,f
 11261  0BB9  1D03               	skipz
 11262  0BBA  2BD3               	goto	l8263
 11263                           
 11264                           ;LED_B1.c: 74: if (led == 1) {
 11265  0BBB  0822               	movf	setLED@led,w
 11266  0BBC  3A01               	xorlw	1
 11267  0BBD  1D03               	skipz
 11268  0BBE  2BC1               	goto	l8251
 11269                           
 11270                           ;LED_B1.c: 78: RC7 = 1;
 11271  0BBF  178E               	bsf	14,7	;volatile
 11272                           
 11273                           ;LED_B1.c: 80: }
 11274  0BC0  0008               	return
 11275  0BC1                     l8251:	
 11276                           
 11277                           ;LED_B1.c: 83: else if (led == 2) {
 11278  0BC1  0822               	movf	setLED@led,w
 11279  0BC2  3A02               	xorlw	2
 11280  0BC3  1D03               	skipz
 11281  0BC4  2BC7               	goto	l8255
 11282                           
 11283                           ;LED_B1.c: 87: RA3 = 1;
 11284  0BC5  158C               	bsf	12,3	;volatile
 11285                           
 11286                           ;LED_B1.c: 89: }
 11287  0BC6  0008               	return
 11288  0BC7                     l8255:	
 11289                           
 11290                           ;LED_B1.c: 92: else if (led == 3) {
 11291  0BC7  0822               	movf	setLED@led,w
 11292  0BC8  3A03               	xorlw	3
 11293  0BC9  1D03               	skipz
 11294  0BCA  2BCD               	goto	l8259
 11295                           
 11296                           ;LED_B1.c: 96: RC6 = 1;
 11297  0BCB  170E               	bsf	14,6	;volatile
 11298                           
 11299                           ;LED_B1.c: 98: }
 11300  0BCC  0008               	return
 11301  0BCD                     l8259:	
 11302                           
 11303                           ;LED_B1.c: 101: else if (led == 99) {
 11304  0BCD  0822               	movf	setLED@led,w
 11305  0BCE  3A63               	xorlw	99
 11306  0BCF  1D03               	skipz
 11307  0BD0  0008               	return
 11308                           
 11309                           ;LED_B1.c: 105: RB5 = 1;
 11310  0BD1  168D               	bsf	13,5	;volatile
 11311                           
 11312                           ;LED_B1.c: 107: }
 11313                           ;LED_B1.c: 109: } else if (command == 1) {
 11314  0BD2  0008               	return
 11315  0BD3                     l8263:	
 11316  0BD3  0821               	movf	setLED@command,w
 11317  0BD4  3A01               	xorlw	1
 11318  0BD5  1D03               	skipz
 11319  0BD6  2BEF               	goto	l8281
 11320                           
 11321                           ;LED_B1.c: 111: if (led == 1) {
 11322  0BD7  0822               	movf	setLED@led,w
 11323  0BD8  3A01               	xorlw	1
 11324  0BD9  1D03               	skipz
 11325  0BDA  2BDD               	goto	l8269
 11326                           
 11327                           ;LED_B1.c: 115: RC7 = 0;
 11328  0BDB  138E               	bcf	14,7	;volatile
 11329                           
 11330                           ;LED_B1.c: 117: }
 11331  0BDC  0008               	return
 11332  0BDD                     l8269:	
 11333                           
 11334                           ;LED_B1.c: 120: else if (led == 2) {
 11335  0BDD  0822               	movf	setLED@led,w
 11336  0BDE  3A02               	xorlw	2
 11337  0BDF  1D03               	skipz
 11338  0BE0  2BE3               	goto	l8273
 11339                           
 11340                           ;LED_B1.c: 124: RA3 = 0;
 11341  0BE1  118C               	bcf	12,3	;volatile
 11342                           
 11343                           ;LED_B1.c: 126: }
 11344  0BE2  0008               	return
 11345  0BE3                     l8273:	
 11346                           
 11347                           ;LED_B1.c: 129: else if (led == 3) {
 11348  0BE3  0822               	movf	setLED@led,w
 11349  0BE4  3A03               	xorlw	3
 11350  0BE5  1D03               	skipz
 11351  0BE6  2BE9               	goto	l8277
 11352                           
 11353                           ;LED_B1.c: 133: RC6 = 0;
 11354  0BE7  130E               	bcf	14,6	;volatile
 11355                           
 11356                           ;LED_B1.c: 135: }
 11357  0BE8  0008               	return
 11358  0BE9                     l8277:	
 11359                           
 11360                           ;LED_B1.c: 138: else if (led == 99) {
 11361  0BE9  0822               	movf	setLED@led,w
 11362  0BEA  3A63               	xorlw	99
 11363  0BEB  1D03               	skipz
 11364  0BEC  0008               	return
 11365                           
 11366                           ;LED_B1.c: 142: RB5 = 0;
 11367  0BED  128D               	bcf	13,5	;volatile
 11368                           
 11369                           ;LED_B1.c: 144: }
 11370                           ;LED_B1.c: 146: } else if (command == 10) {
 11371  0BEE  0008               	return
 11372  0BEF                     l8281:	
 11373  0BEF  0821               	movf	setLED@command,w
 11374  0BF0  3A0A               	xorlw	10
 11375  0BF1  1D03               	skipz
 11376  0BF2  2C18               	goto	l8301
 11377                           
 11378                           ;LED_B1.c: 147: LED->GO = 0;
 11379  0BF3  0870               	movf	_LED,w
 11380  0BF4  0086               	movwf	6
 11381  0BF5  0871               	movf	_LED+1,w
 11382  0BF6  0087               	movwf	7
 11383  0BF7  1081               	bcf	1,1
 11384                           
 11385                           ;LED_B1.c: 148: LED->Time = 0;
 11386  0BF8  0870               	movf	_LED,w
 11387  0BF9  0086               	movwf	6
 11388  0BFA  0871               	movf	_LED+1,w
 11389  0BFB  0087               	movwf	7
 11390  0BFC  3141               	addfsr 1,1
 11391  0BFD  3000               	movlw	0
 11392  0BFE  3FC0               	movwi [0]fsr1
 11393  0BFF  3FC1               	movwi [1]fsr1
 11394                           
 11395                           ;LED_B1.c: 150: if (led == 1) {
 11396  0C00  0822               	movf	setLED@led,w
 11397  0C01  3A01               	xorlw	1
 11398  0C02  1D03               	skipz
 11399  0C03  2C06               	goto	l8289
 11400                           
 11401                           ;LED_B1.c: 154: RC7 = 1;
 11402  0C04  178E               	bsf	14,7	;volatile
 11403                           
 11404                           ;LED_B1.c: 156: }
 11405  0C05  0008               	return
 11406  0C06                     l8289:	
 11407                           
 11408                           ;LED_B1.c: 159: else if (led == 2) {
 11409  0C06  0822               	movf	setLED@led,w
 11410  0C07  3A02               	xorlw	2
 11411  0C08  1D03               	skipz
 11412  0C09  2C0C               	goto	l8293
 11413                           
 11414                           ;LED_B1.c: 163: RA3 = 1;
 11415  0C0A  158C               	bsf	12,3	;volatile
 11416                           
 11417                           ;LED_B1.c: 165: }
 11418  0C0B  0008               	return
 11419  0C0C                     l8293:	
 11420                           
 11421                           ;LED_B1.c: 168: else if (led == 3) {
 11422  0C0C  0822               	movf	setLED@led,w
 11423  0C0D  3A03               	xorlw	3
 11424  0C0E  1D03               	skipz
 11425  0C0F  2C12               	goto	l8297
 11426                           
 11427                           ;LED_B1.c: 172: RC6 = 1;
 11428  0C10  170E               	bsf	14,6	;volatile
 11429                           
 11430                           ;LED_B1.c: 174: }
 11431  0C11  0008               	return
 11432  0C12                     l8297:	
 11433                           
 11434                           ;LED_B1.c: 177: else if (led == 99) {
 11435  0C12  0822               	movf	setLED@led,w
 11436  0C13  3A63               	xorlw	99
 11437  0C14  1D03               	skipz
 11438  0C15  0008               	return
 11439                           
 11440                           ;LED_B1.c: 181: RB5 = 1;
 11441  0C16  168D               	bsf	13,5	;volatile
 11442                           
 11443                           ;LED_B1.c: 183: }
 11444                           ;LED_B1.c: 185: } else if (command == 11) {
 11445  0C17  0008               	return
 11446  0C18                     l8301:	
 11447  0C18  0821               	movf	setLED@command,w
 11448  0C19  3A0B               	xorlw	11
 11449  0C1A  1D03               	skipz
 11450  0C1B  0008               	return
 11451                           
 11452                           ;LED_B1.c: 186: LED->GO = 1;
 11453  0C1C  0870               	movf	_LED,w
 11454  0C1D  0086               	movwf	6
 11455  0C1E  0871               	movf	_LED+1,w
 11456  0C1F  0087               	movwf	7
 11457  0C20  1481               	bsf	1,1
 11458  0C21  0008               	return
 11459  0C22                     __end_of_setLED:	
 11460                           
 11461                           	psect	text63
 11462  1337                     __ptext63:	
 11463 ;; *************** function _LedPointSelect *****************
 11464 ;; Defined at:
 11465 ;;		line 7 in file "../src/LED_B1.c"
 11466 ;; Parameters:    Size  Location     Type
 11467 ;;  led             1    wreg     unsigned char 
 11468 ;; Auto vars:     Size  Location     Type
 11469 ;;  led             1    0[BANK0 ] unsigned char 
 11470 ;; Return value:  Size  Location     Type
 11471 ;;		None               void
 11472 ;; Registers used:
 11473 ;;		wreg, status,2, status,0
 11474 ;; Tracked objects:
 11475 ;;		On entry : 0/0
 11476 ;;		On exit  : 0/0
 11477 ;;		Unchanged: 0/0
 11478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;Total ram usage:        1 bytes
 11484 ;; Hardware stack levels used:    1
 11485 ;; Hardware stack levels required when called:    5
 11486 ;; This function calls:
 11487 ;;		Nothing
 11488 ;; This function is called by:
 11489 ;;		_setLED_Initialization
 11490 ;;		_setLED
 11491 ;;		_setLED_Main
 11492 ;; This function uses a non-reentrant model
 11493 ;;
 11494                           
 11495                           
 11496                           ;psect for function _LedPointSelect
 11497  1337                     _LedPointSelect:	
 11498                           
 11499                           ;incstack = 0
 11500                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11501                           ;LedPointSelect@led stored from wreg
 11502  1337  0020               	movlb	0	; select bank0
 11503  1338  00A0               	movwf	LedPointSelect@led
 11504                           
 11505                           ;LED_B1.c: 9: if (led == 1) {
 11506  1339  0820               	movf	LedPointSelect@led,w
 11507  133A  3A01               	xorlw	1
 11508  133B  1D03               	skipz
 11509  133C  2B42               	goto	l8041
 11510                           
 11511                           ;LED_B1.c: 10: LED = &VarLED1;
 11512  133D  30DC               	movlw	low _VarLED1
 11513  133E  00F0               	movwf	_LED
 11514  133F  3000               	movlw	high _VarLED1
 11515  1340  00F1               	movwf	_LED+1
 11516                           
 11517                           ;LED_B1.c: 11: }
 11518  1341  0008               	return
 11519  1342                     l8041:	
 11520                           
 11521                           ;LED_B1.c: 14: else if (led == 2) {
 11522  1342  0820               	movf	LedPointSelect@led,w
 11523  1343  3A02               	xorlw	2
 11524  1344  1D03               	skipz
 11525  1345  2B4B               	goto	l8045
 11526                           
 11527                           ;LED_B1.c: 15: LED = &VarLED2;
 11528  1346  30E0               	movlw	low _VarLED2
 11529  1347  00F0               	movwf	_LED
 11530  1348  3000               	movlw	high _VarLED2
 11531  1349  00F1               	movwf	_LED+1
 11532                           
 11533                           ;LED_B1.c: 16: }
 11534  134A  0008               	return
 11535  134B                     l8045:	
 11536                           
 11537                           ;LED_B1.c: 19: else if (led == 3) {
 11538  134B  0820               	movf	LedPointSelect@led,w
 11539  134C  3A03               	xorlw	3
 11540  134D  1D03               	skipz
 11541  134E  2B54               	goto	l8049
 11542                           
 11543                           ;LED_B1.c: 20: LED = &VarLED3;
 11544  134F  306A               	movlw	low _VarLED3
 11545  1350  00F0               	movwf	_LED
 11546  1351  3001               	movlw	high _VarLED3
 11547  1352  00F1               	movwf	_LED+1
 11548                           
 11549                           ;LED_B1.c: 21: }
 11550  1353  0008               	return
 11551  1354                     l8049:	
 11552                           
 11553                           ;LED_B1.c: 24: else if (led == 99) {
 11554  1354  0820               	movf	LedPointSelect@led,w
 11555  1355  3A63               	xorlw	99
 11556  1356  1D03               	skipz
 11557  1357  0008               	return
 11558                           
 11559                           ;LED_B1.c: 25: LED = &VarErrLED;
 11560  1358  30D8               	movlw	low _VarErrLED
 11561  1359  00F0               	movwf	_LED
 11562  135A  3000               	movlw	high _VarErrLED
 11563  135B  00F1               	movwf	_LED+1
 11564  135C  0008               	return
 11565  135D                     __end_of_LedPointSelect:	
 11566                           
 11567                           	psect	text64
 11568  10CC                     __ptext64:	
 11569 ;; *************** function _DimmerLights_Close *****************
 11570 ;; Defined at:
 11571 ;;		line 405 in file "../src/Dimmer_B1.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;		None
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;		None               void
 11578 ;; Registers used:
 11579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;Total ram usage:        0 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    6
 11592 ;; This function calls:
 11593 ;;		_getDimmerLights_StatusFlag
 11594 ;;		_setMemory_GO
 11595 ;; This function is called by:
 11596 ;;		_DimmerLights_Main
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           
 11601                           ;psect for function _DimmerLights_Close
 11602  10CC                     _DimmerLights_Close:	
 11603                           
 11604                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 11605                           
 11606                           ;incstack = 0
 11607                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11608  10CC  0873               	movf	_Dimmer,w
 11609  10CD  0086               	movwf	6
 11610  10CE  0187               	clrf	7
 11611  10CF  1C01               	btfss	1,0
 11612  10D0  0008               	return
 11613                           
 11614                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 11615  10D1  0873               	movf	_Dimmer,w
 11616  10D2  0086               	movwf	6
 11617  10D3  0187               	clrf	7
 11618  10D4  1001               	bcf	1,0
 11619                           
 11620                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 11621  10D5  3190  20B9  3190   	fcall	_getDimmerLights_StatusFlag
 11622  10D8  3800               	iorlw	0
 11623  10D9  1D03               	skipz
 11624  10DA  0008               	return
 11625                           
 11626                           ;Dimmer_B1.c: 409: ;;
 11627                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 11628  10DB  3001               	movlw	1
 11629  10DC  3191  2108         	fcall	_setMemory_GO
 11630  10DE  0008               	return
 11631  10DF                     __end_of_DimmerLights_Close:	
 11632                           
 11633                           	psect	text65
 11634  1108                     __ptext65:	
 11635 ;; *************** function _setMemory_GO *****************
 11636 ;; Defined at:
 11637 ;;		line 892 in file "../src/MCU_B1.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;  command         1    wreg     unsigned char 
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;  command         1    2[BANK0 ] unsigned char 
 11642 ;; Return value:  Size  Location     Type
 11643 ;;		None               void
 11644 ;; Registers used:
 11645 ;;		wreg, status,2, status,0
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;Total ram usage:        3 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    5
 11658 ;; This function calls:
 11659 ;;		Nothing
 11660 ;; This function is called by:
 11661 ;;		_DimmerLights_Close
 11662 ;;		_setDimmerLights
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           
 11667                           ;psect for function _setMemory_GO
 11668  1108                     _setMemory_GO:	
 11669                           
 11670                           ;incstack = 0
 11671                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11672                           ;setMemory_GO@command stored from wreg
 11673  1108  0020               	movlb	0	; select bank0
 11674  1109  00A2               	movwf	setMemory_GO@command
 11675                           
 11676                           ;MCU_B1.c: 893: Memory.GO = command;
 11677  110A  0822               	movf	setMemory_GO@command,w
 11678  110B  0023               	movlb	3	; select bank3
 11679  110C  10C4               	bcf	(_Memory^(0+384)+36),1
 11680  110D  1D03               	skipz
 11681  110E  14C4               	bsf	(_Memory^(0+384)+36),1
 11682                           
 11683                           ;MCU_B1.c: 894: if (command == 0) {
 11684  110F  0020               	movlb	0	; select bank0
 11685  1110  08A2               	movf	setMemory_GO@command,f
 11686  1111  1D03               	skipz
 11687  1112  0008               	return
 11688                           
 11689                           ;MCU_B1.c: 895: Memory.Time = command;
 11690  1113  0822               	movf	setMemory_GO@command,w
 11691  1114  00A0               	movwf	??_setMemory_GO
 11692  1115  01A1               	clrf	??_setMemory_GO+1
 11693  1116  0820               	movf	??_setMemory_GO,w
 11694  1117  0023               	movlb	3	; select bank3
 11695  1118  00C2               	movwf	(_Memory^(0+384)+34)
 11696  1119  0020               	movlb	0	; select bank0
 11697  111A  0821               	movf	??_setMemory_GO+1,w
 11698  111B  0023               	movlb	3	; select bank3
 11699  111C  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11700  111D  0008               	return
 11701  111E                     __end_of_setMemory_GO:	
 11702                           
 11703                           	psect	text66
 11704  10B9                     __ptext66:	
 11705 ;; *************** function _getDimmerLights_StatusFlag *****************
 11706 ;; Defined at:
 11707 ;;		line 484 in file "../src/Dimmer_B1.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  Status          1    1[BANK0 ] unsigned char 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      unsigned char 
 11714 ;; Registers used:
 11715 ;;		wreg, status,2
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        3 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    5
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_DimmerLights_Close
 11732 ;;		_DimmerLights_Exceptions
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           
 11737                           ;psect for function _getDimmerLights_StatusFlag
 11738  10B9                     _getDimmerLights_StatusFlag:	
 11739                           
 11740                           ;Dimmer_B1.c: 485: char Status = 0;
 11741                           
 11742                           ;incstack = 0
 11743                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11744  10B9  0020               	movlb	0	; select bank0
 11745  10BA  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11746                           
 11747                           ;Dimmer_B1.c: 488: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 11748  10BB  01A2               	clrf	_getDimmerLights_StatusFlag$2453
 11749  10BC  0AA2               	incf	_getDimmerLights_StatusFlag$2453,f
 11750  10BD  0022               	movlb	2	; select bank2
 11751  10BE  1F3D               	btfss	_DimmerLights1^(0+256),6
 11752  10BF  1B4C               	btfsc	_DimmerLights2^(0+256),6
 11753  10C0  28C5               	goto	l8711
 11754  10C1  1B5B               	btfsc	_DimmerLights3^(0+256),6
 11755  10C2  28C5               	goto	l8711
 11756  10C3  0020               	movlb	0	; select bank0
 11757  10C4  01A2               	clrf	_getDimmerLights_StatusFlag$2453
 11758  10C5                     l8711:	
 11759  10C5  0020               	movlb	0	; select bank0
 11760  10C6  0822               	movf	_getDimmerLights_StatusFlag$2453,w
 11761  10C7  00A0               	movwf	??_getDimmerLights_StatusFlag
 11762  10C8  0820               	movf	??_getDimmerLights_StatusFlag,w
 11763  10C9  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11764                           
 11765                           ;Dimmer_B1.c: 499: return Status;
 11766  10CA  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11767  10CB  0008               	return
 11768  10CC                     __end_of_getDimmerLights_StatusFlag:	
 11769                           
 11770                           	psect	text67
 11771  12AB                     __ptext67:	
 11772 ;; *************** function _DimmerLights_Initialization *****************
 11773 ;; Defined at:
 11774 ;;		line 343 in file "../src/Dimmer_B1.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;		None
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;		None
 11779 ;; Return value:  Size  Location     Type
 11780 ;;		None               void
 11781 ;; Registers used:
 11782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 0/0
 11785 ;;		On exit  : 0/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;Total ram usage:        1 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    7
 11795 ;; This function calls:
 11796 ;;		_Dimmer_Initialization
 11797 ;;		_setDimmerLights_Initialization
 11798 ;; This function is called by:
 11799 ;;		_main
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           
 11804                           ;psect for function _DimmerLights_Initialization
 11805  12AB                     _DimmerLights_Initialization:	
 11806                           
 11807                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 11808                           
 11809                           ;incstack = 0
 11810                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11811  12AB  303D               	movlw	_DimmerLights1& (0+255)
 11812  12AC  0020               	movlb	0	; select bank0
 11813  12AD  00A4               	movwf	??_DimmerLights_Initialization
 11814  12AE  0824               	movf	??_DimmerLights_Initialization,w
 11815  12AF  0021               	movlb	1	; select bank1
 11816  12B0  00CD               	movwf	_DimmerLights11^(0+128)
 11817                           
 11818                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 11819  12B1  3001               	movlw	1
 11820  12B2  3194  2405  3192   	fcall	_setDimmerLights_Initialization
 11821                           
 11822                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 11823  12B5  304C               	movlw	_DimmerLights2& (0+255)
 11824  12B6  0020               	movlb	0	; select bank0
 11825  12B7  00A4               	movwf	??_DimmerLights_Initialization
 11826  12B8  0824               	movf	??_DimmerLights_Initialization,w
 11827  12B9  0021               	movlb	1	; select bank1
 11828  12BA  00CE               	movwf	_DimmerLights22^(0+128)
 11829                           
 11830                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 11831  12BB  3002               	movlw	2
 11832  12BC  3194  2405  3192   	fcall	_setDimmerLights_Initialization
 11833                           
 11834                           ;Dimmer_B1.c: 356: DimmerLights33 = &DimmerLights3;
 11835  12BF  305B               	movlw	_DimmerLights3& (0+255)
 11836  12C0  0020               	movlb	0	; select bank0
 11837  12C1  00A4               	movwf	??_DimmerLights_Initialization
 11838  12C2  0824               	movf	??_DimmerLights_Initialization,w
 11839  12C3  0021               	movlb	1	; select bank1
 11840  12C4  00CF               	movwf	_DimmerLights33^(0+128)
 11841                           
 11842                           ;Dimmer_B1.c: 357: setDimmerLights_Initialization(3);
 11843  12C5  3003               	movlw	3
 11844  12C6  3194  2405  3192   	fcall	_setDimmerLights_Initialization
 11845                           
 11846                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 11847  12C9  319E  2673         	fcall	_Dimmer_Initialization
 11848  12CB  0008               	return
 11849  12CC                     __end_of_DimmerLights_Initialization:	
 11850                           
 11851                           	psect	text68
 11852  1405                     __ptext68:	
 11853 ;; *************** function _setDimmerLights_Initialization *****************
 11854 ;; Defined at:
 11855 ;;		line 366 in file "../src/Dimmer_B1.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;  lights          1    wreg     unsigned char 
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;  lights          1    3[BANK0 ] unsigned char 
 11860 ;; Return value:  Size  Location     Type
 11861 ;;		None               void
 11862 ;; Registers used:
 11863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;Total ram usage:        2 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    6
 11876 ;; This function calls:
 11877 ;;		_DimmerLightsPointSelect
 11878 ;; This function is called by:
 11879 ;;		_DimmerLights_Initialization
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _setDimmerLights_Initialization
 11885  1405                     _setDimmerLights_Initialization:	
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11889                           ;setDimmerLights_Initialization@lights stored from wreg
 11890  1405  0020               	movlb	0	; select bank0
 11891  1406  00A3               	movwf	setDimmerLights_Initialization@lights
 11892                           
 11893                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 11894  1407  0823               	movf	setDimmerLights_Initialization@lights,w
 11895  1408  3191  219A         	fcall	_DimmerLightsPointSelect
 11896                           
 11897                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 11898  140A  0020               	movlb	0	; select bank0
 11899  140B  086B               	movf	_DimmerLights,w
 11900  140C  3E09               	addlw	9
 11901  140D  0086               	movwf	6
 11902  140E  3001               	movlw	1	; select bank2/3
 11903  140F  0087               	movwf	7
 11904  1410  1501               	bsf	1,2
 11905                           
 11906                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-90)*0.8));
 11907  1411  3008               	movlw	8
 11908  1412  00A2               	movwf	??_setDimmerLights_Initialization
 11909  1413  086B               	movf	_DimmerLights,w
 11910  1414  3E05               	addlw	5
 11911  1415  0086               	movwf	6
 11912  1416  3001               	movlw	1	; select bank2/3
 11913  1417  0087               	movwf	7
 11914  1418  0822               	movf	??_setDimmerLights_Initialization,w
 11915  1419  0081               	movwf	1
 11916                           
 11917                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 11918  141A  303C               	movlw	60
 11919  141B  00A2               	movwf	??_setDimmerLights_Initialization
 11920  141C  086B               	movf	_DimmerLights,w
 11921  141D  3E06               	addlw	6
 11922  141E  0086               	movwf	6
 11923  141F  3001               	movlw	1	; select bank2/3
 11924  1420  0087               	movwf	7
 11925  1421  0822               	movf	??_setDimmerLights_Initialization,w
 11926  1422  0081               	movwf	1
 11927                           
 11928                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11929  1423  086B               	movf	_DimmerLights,w
 11930  1424  3E06               	addlw	6
 11931  1425  0086               	movwf	6
 11932  1426  3001               	movlw	1	; select bank2/3
 11933  1427  0087               	movwf	7
 11934  1428  0801               	movf	1,w
 11935  1429  00A2               	movwf	??_setDimmerLights_Initialization
 11936  142A  086B               	movf	_DimmerLights,w
 11937  142B  3E04               	addlw	4
 11938  142C  0086               	movwf	6
 11939  142D  3001               	movlw	1	; select bank2/3
 11940  142E  0087               	movwf	7
 11941  142F  0822               	movf	??_setDimmerLights_Initialization,w
 11942  1430  0081               	movwf	1
 11943  1431  0008               	return
 11944  1432                     __end_of_setDimmerLights_Initialization:	
 11945                           
 11946                           	psect	text69
 11947  1E73                     __ptext69:	
 11948 ;; *************** function _Dimmer_Initialization *****************
 11949 ;; Defined at:
 11950 ;;		line 795 in file "../src/Dimmer_B1.c"
 11951 ;; Parameters:    Size  Location     Type
 11952 ;;		None
 11953 ;; Auto vars:     Size  Location     Type
 11954 ;;		None
 11955 ;; Return value:  Size  Location     Type
 11956 ;;		None               void
 11957 ;; Registers used:
 11958 ;;		wreg
 11959 ;; Tracked objects:
 11960 ;;		On entry : 0/0
 11961 ;;		On exit  : 0/0
 11962 ;;		Unchanged: 0/0
 11963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;Total ram usage:        1 bytes
 11969 ;; Hardware stack levels used:    1
 11970 ;; Hardware stack levels required when called:    5
 11971 ;; This function calls:
 11972 ;;		Nothing
 11973 ;; This function is called by:
 11974 ;;		_DimmerLights_Initialization
 11975 ;; This function uses a non-reentrant model
 11976 ;;
 11977                           
 11978                           
 11979                           ;psect for function _Dimmer_Initialization
 11980  1E73                     _Dimmer_Initialization:	
 11981                           
 11982                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 11983                           
 11984                           ;incstack = 0
 11985                           ; Regs used in _Dimmer_Initialization: [wreg]
 11986  1E73  30E4               	movlw	_Dimmer1& (0+255)
 11987  1E74  0020               	movlb	0	; select bank0
 11988  1E75  00A0               	movwf	??_Dimmer_Initialization
 11989  1E76  0820               	movf	??_Dimmer_Initialization,w
 11990  1E77  00F3               	movwf	_Dimmer
 11991  1E78  0008               	return
 11992  1E79                     __end_of_Dimmer_Initialization:	
 11993                           
 11994                           	psect	text70
 11995  1EE6                     __ptext70:	
 11996 ;; *************** function _DelayOff_Main *****************
 11997 ;; Defined at:
 11998 ;;		line 41 in file "../src/DelayOff_B1.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;		None
 12001 ;; Auto vars:     Size  Location     Type
 12002 ;;		None
 12003 ;; Return value:  Size  Location     Type
 12004 ;;		None               void
 12005 ;; Registers used:
 12006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12007 ;; Tracked objects:
 12008 ;;		On entry : 0/0
 12009 ;;		On exit  : 0/0
 12010 ;;		Unchanged: 0/0
 12011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;Total ram usage:        0 bytes
 12017 ;; Hardware stack levels used:    1
 12018 ;; Hardware stack levels required when called:   10
 12019 ;; This function calls:
 12020 ;;		_DlyOff_Main
 12021 ;; This function is called by:
 12022 ;;		_main
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           
 12027                           ;psect for function _DelayOff_Main
 12028  1EE6                     _DelayOff_Main:	
 12029                           
 12030                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12031                           
 12032                           ;incstack = 0
 12033                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12034  1EE6  3001               	movlw	1
 12035  1EE7  318A  226B  319E   	fcall	_DlyOff_Main
 12036                           
 12037                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12038  1EEA  3002               	movlw	2
 12039  1EEB  318A  226B  319E   	fcall	_DlyOff_Main
 12040                           
 12041                           ;DelayOff_B1.c: 51: DlyOff_Main(3);
 12042  1EEE  3003               	movlw	3
 12043  1EEF  318A  226B         	fcall	_DlyOff_Main
 12044  1EF1  0008               	return
 12045  1EF2                     __end_of_DelayOff_Main:	
 12046                           
 12047                           	psect	text71
 12048  0A6B                     __ptext71:	
 12049 ;; *************** function _DlyOff_Main *****************
 12050 ;; Defined at:
 12051 ;;		line 62 in file "../src/DelayOff_B1.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;  sw              1    wreg     unsigned char 
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  sw              1   68[BANK0 ] unsigned char 
 12056 ;; Return value:  Size  Location     Type
 12057 ;;		None               void
 12058 ;; Registers used:
 12059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;Total ram usage:        3 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; Hardware stack levels required when called:    9
 12072 ;; This function calls:
 12073 ;;		_DelayOffPointSelect
 12074 ;;		_setBuz
 12075 ;;		_setDimmerLights_Switch
 12076 ;;		_setDimmerLights_Trigger
 12077 ;;		_setRFSW_Status
 12078 ;;		_setRF_DimmerLights
 12079 ;;		_setSw_Status
 12080 ;;		_setTxData
 12081 ;; This function is called by:
 12082 ;;		_DelayOff_Main
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           
 12087                           ;psect for function _DlyOff_Main
 12088  0A6B                     _DlyOff_Main:	
 12089                           
 12090                           ;incstack = 0
 12091                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12092                           ;DlyOff_Main@sw stored from wreg
 12093  0A6B  0020               	movlb	0	; select bank0
 12094  0A6C  00E4               	movwf	DlyOff_Main@sw
 12095                           
 12096                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12097  0A6D  0864               	movf	DlyOff_Main@sw,w
 12098  0A6E  3191  21D2  318A   	fcall	_DelayOffPointSelect
 12099                           
 12100                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12101  0A71  0872               	movf	_DelayOff,w
 12102  0A72  0086               	movwf	6
 12103  0A73  0187               	clrf	7
 12104  0A74  1C81               	btfss	1,1
 12105  0A75  0008               	return
 12106                           
 12107                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12108  0A76  0872               	movf	_DelayOff,w
 12109  0A77  0086               	movwf	6
 12110  0A78  0187               	clrf	7
 12111  0A79  3001               	movlw	1
 12112  0A7A  0781               	addwf	1,f
 12113  0A7B  3141               	addfsr 1,1
 12114  0A7C  1803               	skipnc
 12115  0A7D  0A81               	incf	1,f
 12116                           
 12117                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12118  0A7E  0872               	movf	_DelayOff,w
 12119  0A7F  0086               	movwf	6
 12120  0A80  0187               	clrf	7
 12121  0A81  3F40               	moviw [0]fsr1
 12122  0A82  0020               	movlb	0	; select bank0
 12123  0A83  00E2               	movwf	??_DlyOff_Main
 12124  0A84  3F41               	moviw [1]fsr1
 12125  0A85  00E3               	movwf	??_DlyOff_Main+1
 12126  0A86  3016               	movlw	22
 12127  0A87  0263               	subwf	??_DlyOff_Main+1,w
 12128  0A88  3012               	movlw	18
 12129  0A89  1903               	skipnz
 12130  0A8A  0262               	subwf	??_DlyOff_Main,w
 12131  0A8B  1C03               	skipc
 12132  0A8C  0008               	return
 12133                           
 12134                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12135  0A8D  0872               	movf	_DelayOff,w
 12136  0A8E  0086               	movwf	6
 12137  0A8F  0187               	clrf	7
 12138  0A90  3000               	movlw	0
 12139  0A91  3FC0               	movwi [0]fsr1
 12140  0A92  3FC1               	movwi [1]fsr1
 12141                           
 12142                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12143  0A93  3001               	movlw	1
 12144  0A94  00E2               	movwf	??_DlyOff_Main
 12145  0A95  0872               	movf	_DelayOff,w
 12146  0A96  0086               	movwf	6
 12147  0A97  0187               	clrf	7
 12148  0A98  0862               	movf	??_DlyOff_Main,w
 12149  0A99  0781               	addwf	1,f
 12150                           
 12151                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12152  0A9A  0872               	movf	_DelayOff,w
 12153  0A9B  0086               	movwf	6
 12154  0A9C  0187               	clrf	7
 12155  0A9D  0872               	movf	_DelayOff,w
 12156  0A9E  0084               	movwf	4
 12157  0A9F  0185               	clrf	5
 12158  0AA0  0800               	movf	0,w
 12159  0AA1  0201               	subwf	1,w
 12160  0AA2  1C03               	skipc
 12161  0AA3  0008               	return
 12162                           
 12163                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12164  0AA4  0872               	movf	_DelayOff,w
 12165  0AA5  0086               	movwf	6
 12166  0AA6  0187               	clrf	7
 12167  0AA7  0181               	clrf	1
 12168                           
 12169                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12170  0AA8  0872               	movf	_DelayOff,w
 12171  0AA9  0086               	movwf	6
 12172  0AAA  0187               	clrf	7
 12173  0AAB  1081               	bcf	1,1
 12174                           
 12175                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12176  0AAC  01A2               	clrf	setSw_Status@command
 12177  0AAD  0864               	movf	DlyOff_Main@sw,w
 12178  0AAE  319F  2742  318A   	fcall	_setSw_Status
 12179                           
 12180                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12181  0AB1  0020               	movlb	0	; select bank0
 12182  0AB2  01A2               	clrf	setRFSW_Status@command
 12183  0AB3  0864               	movf	DlyOff_Main@sw,w
 12184  0AB4  319F  2733  318A   	fcall	_setRFSW_Status
 12185                           
 12186                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12187  0AB7  0020               	movlb	0	; select bank0
 12188  0AB8  01DD               	clrf	setRF_DimmerLights@on
 12189  0AB9  0864               	movf	DlyOff_Main@sw,w
 12190  0ABA  318A  22D6  318A   	fcall	_setRF_DimmerLights
 12191                           
 12192                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12193  0ABD  0020               	movlb	0	; select bank0
 12194  0ABE  01A2               	clrf	setDimmerLights_Trigger@command
 12195  0ABF  0AA2               	incf	setDimmerLights_Trigger@command,f
 12196  0AC0  0864               	movf	DlyOff_Main@sw,w
 12197  0AC1  319F  278E  318A   	fcall	_setDimmerLights_Trigger
 12198                           
 12199                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12200  0AC4  0020               	movlb	0	; select bank0
 12201  0AC5  01A2               	clrf	setDimmerLights_Switch@command
 12202  0AC6  0864               	movf	DlyOff_Main@sw,w
 12203  0AC7  319F  277E  318A   	fcall	_setDimmerLights_Switch
 12204                           
 12205                           ;DelayOff_B1.c: 78: setTxData();
 12206  0ACA  3185  25E8  318A   	fcall	_setTxData
 12207                           
 12208                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12209  0ACD  3064               	movlw	100
 12210  0ACE  0020               	movlb	0	; select bank0
 12211  0ACF  00A9               	movwf	setBuz@time
 12212  0AD0  3000               	movlw	0
 12213  0AD1  00AA               	movwf	setBuz@time+1
 12214  0AD2  3001               	movlw	1
 12215  0AD3  3197  27A7         	fcall	_setBuz
 12216  0AD5  0008               	return
 12217  0AD6                     __end_of_DlyOff_Main:	
 12218                           
 12219                           	psect	text72
 12220  05E8                     __ptext72:	
 12221 ;; *************** function _setTxData *****************
 12222 ;; Defined at:
 12223 ;;		line 183 in file "../src/RF_Control_B1.c"
 12224 ;; Parameters:    Size  Location     Type
 12225 ;;		None
 12226 ;; Auto vars:     Size  Location     Type
 12227 ;;  i               1    0        unsigned char 
 12228 ;; Return value:  Size  Location     Type
 12229 ;;		None               void
 12230 ;; Registers used:
 12231 ;;		wreg, fsr1l, fsr1h
 12232 ;; Tracked objects:
 12233 ;;		On entry : 0/0
 12234 ;;		On exit  : 0/0
 12235 ;;		Unchanged: 0/0
 12236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;Total ram usage:        1 bytes
 12242 ;; Hardware stack levels used:    1
 12243 ;; Hardware stack levels required when called:    5
 12244 ;; This function calls:
 12245 ;;		Nothing
 12246 ;; This function is called by:
 12247 ;;		_DlyOff_Main
 12248 ;;		_setDimmerLights_Adj
 12249 ;;		_setControl_Lights_Table
 12250 ;;		_setRFSW_Control
 12251 ;;		_setRFSW_AdjControl
 12252 ;;		_Sw_DimmerOnFunc
 12253 ;;		_Sw_DimmerOffFunc
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           
 12258                           ;psect for function _setTxData
 12259  05E8                     _setTxData:	
 12260                           
 12261                           ;RF_Control_B1.c: 184: char i;
 12262                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 12263                           
 12264                           ;incstack = 0
 12265                           ; Regs used in _setTxData: [wregfsr1]
 12266  05E8  0021               	movlb	1	; select bank1
 12267  05E9  1C3E               	btfss	_RF1^(0+128),0
 12268  05EA  0008               	return
 12269                           
 12270                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 12271  05EB  153E               	bsf	_RF1^(0+128),2
 12272                           
 12273                           ;RF_Control_B1.c: 188: RF1.RunTime = 20;
 12274  05EC  3014               	movlw	20
 12275  05ED  0020               	movlb	0	; select bank0
 12276  05EE  00A0               	movwf	??_setTxData
 12277  05EF  0820               	movf	??_setTxData,w
 12278  05F0  0021               	movlb	1	; select bank1
 12279  05F1  00C4               	movwf	(_RF1^(0+128)+6)
 12280                           
 12281                           ;RF_Control_B1.c: 198: RF_Data[0] = 0x63;
 12282  05F2  3063               	movlw	99
 12283  05F3  0020               	movlb	0	; select bank0
 12284  05F4  00A0               	movwf	??_setTxData
 12285  05F5  0820               	movf	??_setTxData,w
 12286  05F6  0022               	movlb	2	; select bank2
 12287  05F7  00A0               	movwf	_RF_Data^(0+256)
 12288                           
 12289                           ;RF_Control_B1.c: 199: RF_Data[1] = 0x02;
 12290  05F8  3002               	movlw	2
 12291  05F9  0020               	movlb	0	; select bank0
 12292  05FA  00A0               	movwf	??_setTxData
 12293  05FB  0820               	movf	??_setTxData,w
 12294  05FC  0022               	movlb	2	; select bank2
 12295  05FD  00A1               	movwf	(_RF_Data^(0+256)+1)
 12296                           
 12297                           ;RF_Control_B1.c: 200: RF_Data[2] = product->Data[2];
 12298  05FE  0020               	movlb	0	; select bank0
 12299  05FF  086D               	movf	_product,w
 12300  0600  0086               	movwf	6
 12301  0601  3002               	movlw	2	; select bank4/5
 12302  0602  0087               	movwf	7
 12303  0603  3002               	movlw	2	; select bank4/5
 12304  0604  3F42               	moviw [2]fsr1
 12305  0605  0022               	movlb	2	; select bank2
 12306  0606  00A2               	movwf	(_RF_Data^(0+256)+2)
 12307                           
 12308                           ;RF_Control_B1.c: 201: RF_Data[3] = product->Data[3];
 12309  0607  0020               	movlb	0	; select bank0
 12310  0608  086D               	movf	_product,w
 12311  0609  0086               	movwf	6
 12312  060A  3002               	movlw	2	; select bank4/5
 12313  060B  0087               	movwf	7
 12314  060C  3002               	movlw	2	; select bank4/5
 12315  060D  3F43               	moviw [3]fsr1
 12316  060E  0022               	movlb	2	; select bank2
 12317  060F  00A3               	movwf	(_RF_Data^(0+256)+3)
 12318                           
 12319                           ;RF_Control_B1.c: 202: RF_Data[4] = product->Data[4];
 12320  0610  0020               	movlb	0	; select bank0
 12321  0611  086D               	movf	_product,w
 12322  0612  0086               	movwf	6
 12323  0613  3002               	movlw	2	; select bank4/5
 12324  0614  0087               	movwf	7
 12325  0615  3002               	movlw	2	; select bank4/5
 12326  0616  3F44               	moviw [4]fsr1
 12327  0617  0022               	movlb	2	; select bank2
 12328  0618  00A4               	movwf	(_RF_Data^(0+256)+4)
 12329                           
 12330                           ;RF_Control_B1.c: 203: RF_Data[5] = product->Data[5];
 12331  0619  0020               	movlb	0	; select bank0
 12332  061A  086D               	movf	_product,w
 12333  061B  0086               	movwf	6
 12334  061C  3002               	movlw	2	; select bank4/5
 12335  061D  0087               	movwf	7
 12336  061E  3002               	movlw	2	; select bank4/5
 12337  061F  3F45               	moviw [5]fsr1
 12338  0620  0022               	movlb	2	; select bank2
 12339  0621  00A5               	movwf	(_RF_Data^(0+256)+5)
 12340                           
 12341                           ;RF_Control_B1.c: 204: RF_Data[6] = product->Data[6];
 12342  0622  0020               	movlb	0	; select bank0
 12343  0623  086D               	movf	_product,w
 12344  0624  0086               	movwf	6
 12345  0625  3002               	movlw	2	; select bank4/5
 12346  0626  0087               	movwf	7
 12347  0627  3002               	movlw	2	; select bank4/5
 12348  0628  3F46               	moviw [6]fsr1
 12349  0629  0022               	movlb	2	; select bank2
 12350  062A  00A6               	movwf	(_RF_Data^(0+256)+6)
 12351                           
 12352                           ;RF_Control_B1.c: 205: RF_Data[7] = product->Data[7];
 12353  062B  0020               	movlb	0	; select bank0
 12354  062C  086D               	movf	_product,w
 12355  062D  0086               	movwf	6
 12356  062E  3002               	movlw	2	; select bank4/5
 12357  062F  0087               	movwf	7
 12358  0630  3002               	movlw	2	; select bank4/5
 12359  0631  3F47               	moviw [7]fsr1
 12360  0632  0022               	movlb	2	; select bank2
 12361  0633  00A7               	movwf	(_RF_Data^(0+256)+7)
 12362                           
 12363                           ;RF_Control_B1.c: 206: RF_Data[8] = product->Data[8];
 12364  0634  0020               	movlb	0	; select bank0
 12365  0635  086D               	movf	_product,w
 12366  0636  0086               	movwf	6
 12367  0637  3002               	movlw	2	; select bank4/5
 12368  0638  0087               	movwf	7
 12369  0639  3002               	movlw	2	; select bank4/5
 12370  063A  3F48               	moviw [8]fsr1
 12371  063B  0022               	movlb	2	; select bank2
 12372  063C  00A8               	movwf	(_RF_Data^(0+256)+8)
 12373                           
 12374                           ;RF_Control_B1.c: 207: RF_Data[9] = product->Data[9];
 12375  063D  0020               	movlb	0	; select bank0
 12376  063E  086D               	movf	_product,w
 12377  063F  0086               	movwf	6
 12378  0640  3002               	movlw	2	; select bank4/5
 12379  0641  0087               	movwf	7
 12380  0642  3002               	movlw	2	; select bank4/5
 12381  0643  3F49               	moviw [9]fsr1
 12382  0644  0022               	movlb	2	; select bank2
 12383  0645  00A9               	movwf	(_RF_Data^(0+256)+9)
 12384                           
 12385                           ;RF_Control_B1.c: 208: RF_Data[10] = product->Data[10];
 12386  0646  0020               	movlb	0	; select bank0
 12387  0647  086D               	movf	_product,w
 12388  0648  0086               	movwf	6
 12389  0649  3002               	movlw	2	; select bank4/5
 12390  064A  0087               	movwf	7
 12391  064B  3002               	movlw	2	; select bank4/5
 12392  064C  3F4A               	moviw [10]fsr1
 12393  064D  0022               	movlb	2	; select bank2
 12394  064E  00AA               	movwf	(_RF_Data^(0+256)+10)
 12395                           
 12396                           ;RF_Control_B1.c: 209: RF_Data[11] = product->Data[11];
 12397  064F  0020               	movlb	0	; select bank0
 12398  0650  086D               	movf	_product,w
 12399  0651  0086               	movwf	6
 12400  0652  3002               	movlw	2	; select bank4/5
 12401  0653  0087               	movwf	7
 12402  0654  3002               	movlw	2	; select bank4/5
 12403  0655  3F4B               	moviw [11]fsr1
 12404  0656  0022               	movlb	2	; select bank2
 12405  0657  00AB               	movwf	(_RF_Data^(0+256)+11)
 12406                           
 12407                           ;RF_Control_B1.c: 210: RF_Data[12] = product->Data[12];
 12408  0658  0020               	movlb	0	; select bank0
 12409  0659  086D               	movf	_product,w
 12410  065A  0086               	movwf	6
 12411  065B  3002               	movlw	2	; select bank4/5
 12412  065C  0087               	movwf	7
 12413  065D  3002               	movlw	2	; select bank4/5
 12414  065E  3F4C               	moviw [12]fsr1
 12415  065F  0022               	movlb	2	; select bank2
 12416  0660  00AC               	movwf	(_RF_Data^(0+256)+12)
 12417                           
 12418                           ;RF_Control_B1.c: 211: RF_Data[13] = product->Data[13];
 12419  0661  0020               	movlb	0	; select bank0
 12420  0662  086D               	movf	_product,w
 12421  0663  0086               	movwf	6
 12422  0664  3002               	movlw	2	; select bank4/5
 12423  0665  0087               	movwf	7
 12424  0666  3002               	movlw	2	; select bank4/5
 12425  0667  3F4D               	moviw [13]fsr1
 12426  0668  0022               	movlb	2	; select bank2
 12427  0669  00AD               	movwf	(_RF_Data^(0+256)+13)
 12428                           
 12429                           ;RF_Control_B1.c: 212: RF_Data[14] = product->Data[14];
 12430  066A  0020               	movlb	0	; select bank0
 12431  066B  086D               	movf	_product,w
 12432  066C  0086               	movwf	6
 12433  066D  3002               	movlw	2	; select bank4/5
 12434  066E  0087               	movwf	7
 12435  066F  3002               	movlw	2	; select bank4/5
 12436  0670  3F4E               	moviw [14]fsr1
 12437  0671  0022               	movlb	2	; select bank2
 12438  0672  00AE               	movwf	(_RF_Data^(0+256)+14)
 12439                           
 12440                           ;RF_Control_B1.c: 213: RF_Data[15] = product->Data[15];
 12441  0673  0020               	movlb	0	; select bank0
 12442  0674  086D               	movf	_product,w
 12443  0675  0086               	movwf	6
 12444  0676  3002               	movlw	2	; select bank4/5
 12445  0677  0087               	movwf	7
 12446  0678  3002               	movlw	2	; select bank4/5
 12447  0679  3F4F               	moviw [15]fsr1
 12448  067A  0022               	movlb	2	; select bank2
 12449  067B  00AF               	movwf	(_RF_Data^(0+256)+15)
 12450                           
 12451                           ;RF_Control_B1.c: 214: RF_Data[16] = product->Data[16];
 12452  067C  0020               	movlb	0	; select bank0
 12453  067D  086D               	movf	_product,w
 12454  067E  0086               	movwf	6
 12455  067F  3002               	movlw	2	; select bank4/5
 12456  0680  0087               	movwf	7
 12457  0681  3002               	movlw	2	; select bank4/5
 12458  0682  3F50               	moviw [16]fsr1
 12459  0683  0022               	movlb	2	; select bank2
 12460  0684  00B0               	movwf	(_RF_Data^(0+256)+16)
 12461                           
 12462                           ;RF_Control_B1.c: 215: RF_Data[17] = product->Data[17];
 12463  0685  0020               	movlb	0	; select bank0
 12464  0686  086D               	movf	_product,w
 12465  0687  0086               	movwf	6
 12466  0688  3002               	movlw	2	; select bank4/5
 12467  0689  0087               	movwf	7
 12468  068A  3002               	movlw	2	; select bank4/5
 12469  068B  3F51               	moviw [17]fsr1
 12470  068C  0022               	movlb	2	; select bank2
 12471  068D  00B1               	movwf	(_RF_Data^(0+256)+17)
 12472                           
 12473                           ;RF_Control_B1.c: 216: RF_Data[18] = product->Data[18];
 12474  068E  0020               	movlb	0	; select bank0
 12475  068F  086D               	movf	_product,w
 12476  0690  0086               	movwf	6
 12477  0691  3002               	movlw	2	; select bank4/5
 12478  0692  0087               	movwf	7
 12479  0693  3002               	movlw	2	; select bank4/5
 12480  0694  3F52               	moviw [18]fsr1
 12481  0695  0022               	movlb	2	; select bank2
 12482  0696  00B2               	movwf	(_RF_Data^(0+256)+18)
 12483                           
 12484                           ;RF_Control_B1.c: 217: RF_Data[19] = product->Data[19];
 12485  0697  0020               	movlb	0	; select bank0
 12486  0698  086D               	movf	_product,w
 12487  0699  0086               	movwf	6
 12488  069A  3002               	movlw	2	; select bank4/5
 12489  069B  0087               	movwf	7
 12490  069C  3002               	movlw	2	; select bank4/5
 12491  069D  3F53               	moviw [19]fsr1
 12492  069E  0022               	movlb	2	; select bank2
 12493  069F  00B3               	movwf	(_RF_Data^(0+256)+19)
 12494                           
 12495                           ;RF_Control_B1.c: 218: RF_Data[20] = 211;
 12496  06A0  30D3               	movlw	211
 12497  06A1  0020               	movlb	0	; select bank0
 12498  06A2  00A0               	movwf	??_setTxData
 12499  06A3  0820               	movf	??_setTxData,w
 12500  06A4  0022               	movlb	2	; select bank2
 12501  06A5  00B4               	movwf	(_RF_Data^(0+256)+20)
 12502  06A6  0008               	return
 12503  06A7                     __end_of_setTxData:	
 12504                           
 12505                           	psect	text73
 12506  1F42                     __ptext73:	
 12507 ;; *************** function _setSw_Status *****************
 12508 ;; Defined at:
 12509 ;;		line 111 in file "../src/Switch_B1.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;  sw              1    wreg     unsigned char 
 12512 ;;  command         1    2[BANK0 ] unsigned char 
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;  sw              1    3[BANK0 ] unsigned char 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;		None               void
 12517 ;; Registers used:
 12518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;Total ram usage:        2 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    6
 12531 ;; This function calls:
 12532 ;;		_SwPointSelect
 12533 ;; This function is called by:
 12534 ;;		_DlyOff_Main
 12535 ;;		_setControl_Lights_Table
 12536 ;;		_setRFSW_Control
 12537 ;;		_setDimmerLights_ERROR
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           
 12542                           ;psect for function _setSw_Status
 12543  1F42                     _setSw_Status:	
 12544                           
 12545                           ;incstack = 0
 12546                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12547                           ;setSw_Status@sw stored from wreg
 12548  1F42  0020               	movlb	0	; select bank0
 12549  1F43  00A3               	movwf	setSw_Status@sw
 12550                           
 12551                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12552  1F44  0823               	movf	setSw_Status@sw,w
 12553  1F45  3191  21EF         	fcall	_SwPointSelect
 12554                           
 12555                           ;Switch_B1.c: 113: Sw->Status = command;
 12556  1F47  0020               	movlb	0	; select bank0
 12557  1F48  086C               	movf	_Sw,w
 12558  1F49  0086               	movwf	6
 12559  1F4A  3001               	movlw	1	; select bank2/3
 12560  1F4B  0087               	movwf	7
 12561  1F4C  0822               	movf	setSw_Status@command,w
 12562  1F4D  1301               	bcf	1,6
 12563  1F4E  1D03               	skipz
 12564  1F4F  1701               	bsf	1,6
 12565  1F50  0008               	return
 12566  1F51                     __end_of_setSw_Status:	
 12567                           
 12568                           	psect	text74
 12569  11EF                     __ptext74:	
 12570 ;; *************** function _SwPointSelect *****************
 12571 ;; Defined at:
 12572 ;;		line 21 in file "../src/Switch_B1.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;  sw              1    wreg     unsigned char 
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;  sw              1    1[BANK0 ] unsigned char 
 12577 ;; Return value:  Size  Location     Type
 12578 ;;		None               void
 12579 ;; Registers used:
 12580 ;;		wreg
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;Total ram usage:        2 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    5
 12593 ;; This function calls:
 12594 ;;		Nothing
 12595 ;; This function is called by:
 12596 ;;		_setSw_Enable
 12597 ;;		_setSw_Status
 12598 ;;		_setSw_Main
 12599 ;;		_Sw_Detect
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           
 12604                           ;psect for function _SwPointSelect
 12605  11EF                     _SwPointSelect:	
 12606                           
 12607                           ;incstack = 0
 12608                           ; Regs used in _SwPointSelect: [wreg]
 12609                           ;SwPointSelect@sw stored from wreg
 12610  11EF  0020               	movlb	0	; select bank0
 12611  11F0  00A1               	movwf	SwPointSelect@sw
 12612                           
 12613                           ;Switch_B1.c: 24: if (sw == 1) {
 12614  11F1  0821               	movf	SwPointSelect@sw,w
 12615  11F2  3A01               	xorlw	1
 12616  11F3  1D03               	skipz
 12617  11F4  29FA               	goto	l8057
 12618                           
 12619                           ;Switch_B1.c: 25: Sw = &Sw1;
 12620  11F5  30C5               	movlw	_Sw1& (0+255)
 12621  11F6  00A0               	movwf	??_SwPointSelect
 12622  11F7  0820               	movf	??_SwPointSelect,w
 12623  11F8  00EC               	movwf	_Sw
 12624                           
 12625                           ;Switch_B1.c: 26: }
 12626  11F9  0008               	return
 12627  11FA                     l8057:	
 12628                           
 12629                           ;Switch_B1.c: 29: else if (sw == 2) {
 12630  11FA  0821               	movf	SwPointSelect@sw,w
 12631  11FB  3A02               	xorlw	2
 12632  11FC  1D03               	skipz
 12633  11FD  2A03               	goto	l8061
 12634                           
 12635                           ;Switch_B1.c: 30: Sw = &Sw2;
 12636  11FE  30CE               	movlw	_Sw2& (0+255)
 12637  11FF  00A0               	movwf	??_SwPointSelect
 12638  1200  0820               	movf	??_SwPointSelect,w
 12639  1201  00EC               	movwf	_Sw
 12640                           
 12641                           ;Switch_B1.c: 31: }
 12642  1202  0008               	return
 12643  1203                     l8061:	
 12644                           
 12645                           ;Switch_B1.c: 34: else if (sw == 3) {
 12646  1203  0821               	movf	SwPointSelect@sw,w
 12647  1204  3A03               	xorlw	3
 12648  1205  1D03               	skipz
 12649  1206  0008               	return
 12650                           
 12651                           ;Switch_B1.c: 35: Sw = &Sw3;
 12652  1207  30D7               	movlw	_Sw3& (0+255)
 12653  1208  00A0               	movwf	??_SwPointSelect
 12654  1209  0820               	movf	??_SwPointSelect,w
 12655  120A  00EC               	movwf	_Sw
 12656  120B  0008               	return
 12657  120C                     __end_of_SwPointSelect:	
 12658                           
 12659                           	psect	text75
 12660  0AD6                     __ptext75:	
 12661 ;; *************** function _setRF_DimmerLights *****************
 12662 ;; Defined at:
 12663 ;;		line 449 in file "../src/RF_Control_B1.c"
 12664 ;; Parameters:    Size  Location     Type
 12665 ;;  lights          1    wreg     unsigned char 
 12666 ;;  on              1   61[BANK0 ] unsigned char 
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;  lights          1   65[BANK0 ] unsigned char 
 12669 ;;  status          1   64[BANK0 ] unsigned char 
 12670 ;; Return value:  Size  Location     Type
 12671 ;;		None               void
 12672 ;; Registers used:
 12673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12679 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;Total ram usage:        5 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    8
 12686 ;; This function calls:
 12687 ;;		_setPercentValue
 12688 ;; This function is called by:
 12689 ;;		_DlyOff_Main
 12690 ;;		_setDimmerLights_Adj
 12691 ;;		_setRFSW_Control
 12692 ;;		_Sw_DimmerOnFunc
 12693 ;;		_Sw_DimmerOffFunc
 12694 ;; This function uses a non-reentrant model
 12695 ;;
 12696                           
 12697                           
 12698                           ;psect for function _setRF_DimmerLights
 12699  0AD6                     _setRF_DimmerLights:	
 12700                           
 12701                           ;incstack = 0
 12702                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12703                           ;setRF_DimmerLights@lights stored from wreg
 12704  0AD6  0020               	movlb	0	; select bank0
 12705  0AD7  00E1               	movwf	setRF_DimmerLights@lights
 12706                           
 12707                           ;RF_Control_B1.c: 450: char status;
 12708                           ;RF_Control_B1.c: 451: status = 1;
 12709  0AD8  01E0               	clrf	setRF_DimmerLights@status
 12710  0AD9  0AE0               	incf	setRF_DimmerLights@status,f
 12711                           
 12712                           ;RF_Control_B1.c: 452: status <<= (lights - 1);
 12713  0ADA  0861               	movf	setRF_DimmerLights@lights,w
 12714  0ADB  3EFF               	addlw	-1
 12715  0ADC  0A89               	incf	9,f
 12716  0ADD  2AE0               	goto	u8150
 12717  0ADE                     u8155:	
 12718  0ADE  1003               	clrc
 12719  0ADF  0DE0               	rlf	setRF_DimmerLights@status,f
 12720  0AE0                     u8150:	
 12721  0AE0  3EFF               	addlw	-1
 12722  0AE1  1D03               	skipz
 12723  0AE2  2ADE               	goto	u8155
 12724                           
 12725                           ;RF_Control_B1.c: 453: product->Data[11]=lights;
 12726  0AE3  0861               	movf	setRF_DimmerLights@lights,w
 12727  0AE4  00DE               	movwf	??_setRF_DimmerLights
 12728  0AE5  086D               	movf	_product,w
 12729  0AE6  3E0B               	addlw	11
 12730  0AE7  0086               	movwf	6
 12731  0AE8  3002               	movlw	2	; select bank4/5
 12732  0AE9  0087               	movwf	7
 12733  0AEA  085E               	movf	??_setRF_DimmerLights,w
 12734  0AEB  0081               	movwf	1
 12735                           
 12736                           ;RF_Control_B1.c: 456: product->Data[(20 + lights)]=setPercentValue(((char)((100-90)*0.8
      +                          )));
 12737  0AEC  3008               	movlw	8
 12738  0AED  3196  2678  318A   	fcall	_setPercentValue
 12739  0AF0  0020               	movlb	0	; select bank0
 12740  0AF1  00DE               	movwf	??_setRF_DimmerLights
 12741  0AF2  0861               	movf	setRF_DimmerLights@lights,w
 12742  0AF3  3E14               	addlw	20
 12743  0AF4  076D               	addwf	_product,w
 12744  0AF5  00DF               	movwf	??_setRF_DimmerLights+1
 12745  0AF6  085F               	movf	??_setRF_DimmerLights+1,w
 12746  0AF7  0086               	movwf	6
 12747  0AF8  3002               	movlw	2	; select bank4/5
 12748  0AF9  0087               	movwf	7
 12749  0AFA  085E               	movf	??_setRF_DimmerLights,w
 12750  0AFB  0081               	movwf	1
 12751                           
 12752                           ;RF_Control_B1.c: 459: product->Data[9]=product->Data[20 + lights];
 12753  0AFC  0861               	movf	setRF_DimmerLights@lights,w
 12754  0AFD  3E14               	addlw	20
 12755  0AFE  076D               	addwf	_product,w
 12756  0AFF  00DE               	movwf	??_setRF_DimmerLights
 12757  0B00  085E               	movf	??_setRF_DimmerLights,w
 12758  0B01  0086               	movwf	6
 12759  0B02  3002               	movlw	2	; select bank4/5
 12760  0B03  0087               	movwf	7
 12761  0B04  0801               	movf	1,w
 12762  0B05  00DF               	movwf	??_setRF_DimmerLights+1
 12763  0B06  086D               	movf	_product,w
 12764  0B07  3E09               	addlw	9
 12765  0B08  0086               	movwf	6
 12766  0B09  3002               	movlw	2	; select bank4/5
 12767  0B0A  0087               	movwf	7
 12768  0B0B  085F               	movf	??_setRF_DimmerLights+1,w
 12769  0B0C  0081               	movwf	1
 12770                           
 12771                           ;RF_Control_B1.c: 460: product->Data[17]=product->Data[26 + lights];
 12772  0B0D  0861               	movf	setRF_DimmerLights@lights,w
 12773  0B0E  3E1A               	addlw	26
 12774  0B0F  076D               	addwf	_product,w
 12775  0B10  00DE               	movwf	??_setRF_DimmerLights
 12776  0B11  085E               	movf	??_setRF_DimmerLights,w
 12777  0B12  0086               	movwf	6
 12778  0B13  3002               	movlw	2	; select bank4/5
 12779  0B14  0087               	movwf	7
 12780  0B15  0801               	movf	1,w
 12781  0B16  00DF               	movwf	??_setRF_DimmerLights+1
 12782  0B17  086D               	movf	_product,w
 12783  0B18  3E11               	addlw	17
 12784  0B19  0086               	movwf	6
 12785  0B1A  3002               	movlw	2	; select bank4/5
 12786  0B1B  0087               	movwf	7
 12787  0B1C  085F               	movf	??_setRF_DimmerLights+1,w
 12788  0B1D  0081               	movwf	1
 12789                           
 12790                           ;RF_Control_B1.c: 461: if (on == 1) {
 12791  0B1E  085D               	movf	setRF_DimmerLights@on,w
 12792  0B1F  3A01               	xorlw	1
 12793  0B20  1D03               	skipz
 12794  0B21  2B32               	goto	l8157
 12795                           
 12796                           ;RF_Control_B1.c: 462: product->Data[15]=(product->Data[15] | status);
 12797  0B22  086D               	movf	_product,w
 12798  0B23  3E0F               	addlw	15
 12799  0B24  0086               	movwf	6
 12800  0B25  3002               	movlw	2	; select bank4/5
 12801  0B26  0087               	movwf	7
 12802  0B27  0801               	movf	1,w
 12803  0B28  0460               	iorwf	setRF_DimmerLights@status,w
 12804  0B29  00DE               	movwf	??_setRF_DimmerLights
 12805  0B2A  086D               	movf	_product,w
 12806  0B2B  3E0F               	addlw	15
 12807  0B2C  0086               	movwf	6
 12808  0B2D  3002               	movlw	2	; select bank4/5
 12809  0B2E  0087               	movwf	7
 12810  0B2F  085E               	movf	??_setRF_DimmerLights,w
 12811  0B30  0081               	movwf	1
 12812                           
 12813                           ;RF_Control_B1.c: 463: } else {
 12814  0B31  0008               	return
 12815  0B32                     l8157:	
 12816                           
 12817                           ;RF_Control_B1.c: 464: product->Data[15]=(product->Data[15]&(~status));
 12818  0B32  086D               	movf	_product,w
 12819  0B33  3E0F               	addlw	15
 12820  0B34  0086               	movwf	6
 12821  0B35  3002               	movlw	2	; select bank4/5
 12822  0B36  0087               	movwf	7
 12823  0B37  0960               	comf	setRF_DimmerLights@status,w
 12824  0B38  0501               	andwf	1,w
 12825  0B39  00DE               	movwf	??_setRF_DimmerLights
 12826  0B3A  086D               	movf	_product,w
 12827  0B3B  3E0F               	addlw	15
 12828  0B3C  0086               	movwf	6
 12829  0B3D  3002               	movlw	2	; select bank4/5
 12830  0B3E  0087               	movwf	7
 12831  0B3F  085E               	movf	??_setRF_DimmerLights,w
 12832  0B40  0081               	movwf	1
 12833  0B41  0008               	return
 12834  0B42                     __end_of_setRF_DimmerLights:	
 12835                           
 12836                           	psect	text76
 12837  1678                     __ptext76:	
 12838 ;; *************** function _setPercentValue *****************
 12839 ;; Defined at:
 12840 ;;		line 777 in file "../src/Dimmer_B1.c"
 12841 ;; Parameters:    Size  Location     Type
 12842 ;;  value           1    wreg     unsigned char 
 12843 ;; Auto vars:     Size  Location     Type
 12844 ;;  value           1   57[BANK0 ] unsigned char 
 12845 ;;  i               3   58[BANK0 ] float 
 12846 ;; Return value:  Size  Location     Type
 12847 ;;                  1    wreg      unsigned char 
 12848 ;; Registers used:
 12849 ;;		wreg, status,2, status,0, pclath, cstack
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;Total ram usage:        4 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    7
 12862 ;; This function calls:
 12863 ;;		___awtoft
 12864 ;;		___ftdiv
 12865 ;;		___fttol
 12866 ;; This function is called by:
 12867 ;;		_Flash_Memory_Initialization
 12868 ;;		_setRF_DimmerLights
 12869 ;; This function uses a non-reentrant model
 12870 ;;
 12871                           
 12872                           
 12873                           ;psect for function _setPercentValue
 12874  1678                     _setPercentValue:	
 12875                           
 12876                           ;incstack = 0
 12877                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12878                           ;setPercentValue@value stored from wreg
 12879  1678  0020               	movlb	0	; select bank0
 12880  1679  00D9               	movwf	setPercentValue@value
 12881                           
 12882                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-90)*0.8));
 12883  167A  3000               	movlw	0
 12884  167B  00DA               	movwf	setPercentValue@i
 12885  167C  3050               	movlw	80
 12886  167D  00DB               	movwf	setPercentValue@i+1
 12887  167E  3042               	movlw	66
 12888  167F  00DC               	movwf	setPercentValue@i+2
 12889                           
 12890                           ;Dimmer_B1.c: 780: i /= 100;
 12891  1680  3000               	movlw	0
 12892  1681  00AE               	movwf	___ftdiv@f2
 12893  1682  30C8               	movlw	200
 12894  1683  00AF               	movwf	___ftdiv@f2+1
 12895  1684  3042               	movlw	66
 12896  1685  00B0               	movwf	___ftdiv@f2+2
 12897  1686  085A               	movf	setPercentValue@i,w
 12898  1687  00B1               	movwf	___ftdiv@f1
 12899  1688  085B               	movf	setPercentValue@i+1,w
 12900  1689  00B2               	movwf	___ftdiv@f1+1
 12901  168A  085C               	movf	setPercentValue@i+2,w
 12902  168B  00B3               	movwf	___ftdiv@f1+2
 12903  168C  318E  26A8  3196   	fcall	___ftdiv
 12904  168F  0020               	movlb	0	; select bank0
 12905  1690  082E               	movf	?___ftdiv,w
 12906  1691  00DA               	movwf	setPercentValue@i
 12907  1692  082F               	movf	?___ftdiv+1,w
 12908  1693  00DB               	movwf	setPercentValue@i+1
 12909  1694  0830               	movf	?___ftdiv+2,w
 12910  1695  00DC               	movwf	setPercentValue@i+2
 12911                           
 12912                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-90)*0.8))) / i));
 12913  1696  0859               	movf	setPercentValue@value,w
 12914  1697  3EF8               	addlw	248
 12915  1698  00A8               	movwf	___awtoft@c
 12916  1699  30FF               	movlw	255
 12917  169A  1803               	skipnc
 12918  169B  3000               	movlw	0
 12919  169C  00A9               	movwf	___awtoft@c+1
 12920  169D  3192  22CC  3196   	fcall	___awtoft
 12921  16A0  0020               	movlb	0	; select bank0
 12922  16A1  0828               	movf	?___awtoft,w
 12923  16A2  00B1               	movwf	___ftdiv@f1
 12924  16A3  0829               	movf	?___awtoft+1,w
 12925  16A4  00B2               	movwf	___ftdiv@f1+1
 12926  16A5  082A               	movf	?___awtoft+2,w
 12927  16A6  00B3               	movwf	___ftdiv@f1+2
 12928  16A7  085A               	movf	setPercentValue@i,w
 12929  16A8  00AE               	movwf	___ftdiv@f2
 12930  16A9  085B               	movf	setPercentValue@i+1,w
 12931  16AA  00AF               	movwf	___ftdiv@f2+1
 12932  16AB  085C               	movf	setPercentValue@i+2,w
 12933  16AC  00B0               	movwf	___ftdiv@f2+2
 12934  16AD  318E  26A8  3196   	fcall	___ftdiv
 12935  16B0  0020               	movlb	0	; select bank0
 12936  16B1  082E               	movf	?___ftdiv,w
 12937  16B2  00CB               	movwf	___fttol@f1
 12938  16B3  082F               	movf	?___ftdiv+1,w
 12939  16B4  00CC               	movwf	___fttol@f1+1
 12940  16B5  0830               	movf	?___ftdiv+2,w
 12941  16B6  00CD               	movwf	___fttol@f1+2
 12942  16B7  318D  2597         	fcall	___fttol
 12943  16B9  0020               	movlb	0	; select bank0
 12944  16BA  034B               	decf	?___fttol,w
 12945  16BB  3AFF               	xorlw	255
 12946  16BC  3E64               	addlw	100
 12947  16BD  0008               	return
 12948  16BE                     __end_of_setPercentValue:	
 12949                           
 12950                           	psect	text77
 12951  0D97                     __ptext77:	
 12952 ;; *************** function ___fttol *****************
 12953 ;; Defined at:
 12954 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;  f1              3   43[BANK0 ] float 
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;  lval            4   52[BANK0 ] unsigned long 
 12959 ;;  exp1            1   56[BANK0 ] unsigned char 
 12960 ;;  sign1           1   51[BANK0 ] unsigned char 
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  4   43[BANK0 ] long 
 12963 ;; Registers used:
 12964 ;;		wreg, status,2, status,0
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;Total ram usage:       14 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; Hardware stack levels required when called:    5
 12977 ;; This function calls:
 12978 ;;		Nothing
 12979 ;; This function is called by:
 12980 ;;		_getPercentValue
 12981 ;;		_setPercentValue
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function ___fttol
 12987  0D97                     ___fttol:	
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12991  0D97  0020               	movlb	0	; select bank0
 12992  0D98  084B               	movf	___fttol@f1,w
 12993  0D99  00CF               	movwf	??___fttol
 12994  0D9A  084C               	movf	___fttol@f1+1,w
 12995  0D9B  00D0               	movwf	??___fttol+1
 12996  0D9C  084D               	movf	___fttol@f1+2,w
 12997  0D9D  00D1               	movwf	??___fttol+2
 12998  0D9E  1003               	clrc
 12999  0D9F  0D50               	rlf	??___fttol+1,w
 13000  0DA0  0D51               	rlf	??___fttol+2,w
 13001  0DA1  00D2               	movwf	??___fttol+3
 13002  0DA2  0852               	movf	??___fttol+3,w
 13003  0DA3  00D8               	movwf	___fttol@exp1
 13004  0DA4  08D8               	movf	___fttol@exp1,f
 13005  0DA5  1D03               	skipz
 13006  0DA6  2DB0               	goto	l5807
 13007  0DA7  3000               	movlw	0
 13008  0DA8  00CE               	movwf	?___fttol+3
 13009  0DA9  3000               	movlw	0
 13010  0DAA  00CD               	movwf	?___fttol+2
 13011  0DAB  3000               	movlw	0
 13012  0DAC  00CC               	movwf	?___fttol+1
 13013  0DAD  3000               	movlw	0
 13014  0DAE  00CB               	movwf	?___fttol
 13015  0DAF  0008               	return
 13016  0DB0                     l5807:	
 13017  0DB0  084B               	movf	___fttol@f1,w
 13018  0DB1  00CF               	movwf	??___fttol
 13019  0DB2  084C               	movf	___fttol@f1+1,w
 13020  0DB3  00D0               	movwf	??___fttol+1
 13021  0DB4  084D               	movf	___fttol@f1+2,w
 13022  0DB5  00D1               	movwf	??___fttol+2
 13023  0DB6  3017               	movlw	23
 13024  0DB7                     u4485:	
 13025  0DB7  36D1               	lsrf	??___fttol+2,f
 13026  0DB8  0CD0               	rrf	??___fttol+1,f
 13027  0DB9  0CCF               	rrf	??___fttol,f
 13028  0DBA  0B89               	decfsz	9,f
 13029  0DBB  2DB7               	goto	u4485
 13030  0DBC  084F               	movf	??___fttol,w
 13031  0DBD  00D2               	movwf	??___fttol+3
 13032  0DBE  0852               	movf	??___fttol+3,w
 13033  0DBF  00D3               	movwf	___fttol@sign1
 13034  0DC0  17CC               	bsf	___fttol@f1+1,7
 13035  0DC1  30FF               	movlw	255
 13036  0DC2  05CB               	andwf	___fttol@f1,f
 13037  0DC3  30FF               	movlw	255
 13038  0DC4  05CC               	andwf	___fttol@f1+1,f
 13039  0DC5  3000               	movlw	0
 13040  0DC6  05CD               	andwf	___fttol@f1+2,f
 13041  0DC7  084B               	movf	___fttol@f1,w
 13042  0DC8  00D4               	movwf	___fttol@lval
 13043  0DC9  084C               	movf	___fttol@f1+1,w
 13044  0DCA  00D5               	movwf	___fttol@lval+1
 13045  0DCB  084D               	movf	___fttol@f1+2,w
 13046  0DCC  00D6               	movwf	___fttol@lval+2
 13047  0DCD  01D7               	clrf	___fttol@lval+3
 13048  0DCE  308E               	movlw	142
 13049  0DCF  02D8               	subwf	___fttol@exp1,f
 13050  0DD0  1FD8               	btfss	___fttol@exp1,7
 13051  0DD1  2DEE               	goto	l5827
 13052  0DD2  0858               	movf	___fttol@exp1,w
 13053  0DD3  3A80               	xorlw	128
 13054  0DD4  3E8F               	addlw	143
 13055  0DD5  1803               	skipnc
 13056  0DD6  2DE0               	goto	l5825
 13057  0DD7  3000               	movlw	0
 13058  0DD8  00CE               	movwf	?___fttol+3
 13059  0DD9  3000               	movlw	0
 13060  0DDA  00CD               	movwf	?___fttol+2
 13061  0DDB  3000               	movlw	0
 13062  0DDC  00CC               	movwf	?___fttol+1
 13063  0DDD  3000               	movlw	0
 13064  0DDE  00CB               	movwf	?___fttol
 13065  0DDF  0008               	return
 13066  0DE0                     l5825:	
 13067  0DE0  3001               	movlw	1
 13068  0DE1                     u4515:	
 13069  0DE1  36D7               	lsrf	___fttol@lval+3,f
 13070  0DE2  0CD6               	rrf	___fttol@lval+2,f
 13071  0DE3  0CD5               	rrf	___fttol@lval+1,f
 13072  0DE4  0CD4               	rrf	___fttol@lval,f
 13073  0DE5  0B89               	decfsz	9,f
 13074  0DE6  2DE1               	goto	u4515
 13075  0DE7  3001               	movlw	1
 13076  0DE8  00CF               	movwf	??___fttol
 13077  0DE9  084F               	movf	??___fttol,w
 13078  0DEA  07D8               	addwf	___fttol@exp1,f
 13079  0DEB  1903               	btfsc	3,2
 13080  0DEC  2E07               	goto	l5837
 13081  0DED  2DE0               	goto	l5825
 13082  0DEE                     l5827:	
 13083  0DEE  3018               	movlw	24
 13084  0DEF  0258               	subwf	___fttol@exp1,w
 13085  0DF0  1C03               	skipc
 13086  0DF1  2E04               	goto	l5835
 13087  0DF2  3000               	movlw	0
 13088  0DF3  00CE               	movwf	?___fttol+3
 13089  0DF4  3000               	movlw	0
 13090  0DF5  00CD               	movwf	?___fttol+2
 13091  0DF6  3000               	movlw	0
 13092  0DF7  00CC               	movwf	?___fttol+1
 13093  0DF8  3000               	movlw	0
 13094  0DF9  00CB               	movwf	?___fttol
 13095  0DFA  0008               	return
 13096  0DFB                     l5833:	
 13097  0DFB  3001               	movlw	1
 13098  0DFC                     u4545:	
 13099  0DFC  35D4               	lslf	___fttol@lval,f
 13100  0DFD  0DD5               	rlf	___fttol@lval+1,f
 13101  0DFE  0DD6               	rlf	___fttol@lval+2,f
 13102  0DFF  0DD7               	rlf	___fttol@lval+3,f
 13103  0E00  0B89               	decfsz	9,f
 13104  0E01  2DFC               	goto	u4545
 13105  0E02  3001               	movlw	1
 13106  0E03  02D8               	subwf	___fttol@exp1,f
 13107  0E04                     l5835:	
 13108  0E04  08D8               	movf	___fttol@exp1,f
 13109  0E05  1D03               	skipz
 13110  0E06  2DFB               	goto	l5833
 13111  0E07                     l5837:	
 13112  0E07  0853               	movf	___fttol@sign1,w
 13113  0E08  1903               	btfsc	3,2
 13114  0E09  2E15               	goto	l5841
 13115  0E0A  09D4               	comf	___fttol@lval,f
 13116  0E0B  09D5               	comf	___fttol@lval+1,f
 13117  0E0C  09D6               	comf	___fttol@lval+2,f
 13118  0E0D  09D7               	comf	___fttol@lval+3,f
 13119  0E0E  0AD4               	incf	___fttol@lval,f
 13120  0E0F  1903               	skipnz
 13121  0E10  0AD5               	incf	___fttol@lval+1,f
 13122  0E11  1903               	skipnz
 13123  0E12  0AD6               	incf	___fttol@lval+2,f
 13124  0E13  1903               	skipnz
 13125  0E14  0AD7               	incf	___fttol@lval+3,f
 13126  0E15                     l5841:	
 13127  0E15  0857               	movf	___fttol@lval+3,w
 13128  0E16  00CE               	movwf	?___fttol+3
 13129  0E17  0856               	movf	___fttol@lval+2,w
 13130  0E18  00CD               	movwf	?___fttol+2
 13131  0E19  0855               	movf	___fttol@lval+1,w
 13132  0E1A  00CC               	movwf	?___fttol+1
 13133  0E1B  0854               	movf	___fttol@lval,w
 13134  0E1C  00CB               	movwf	?___fttol
 13135  0E1D  0008               	return
 13136  0E1E                     __end_of___fttol:	
 13137                           
 13138                           	psect	text78
 13139  0EA8                     __ptext78:	
 13140 ;; *************** function ___ftdiv *****************
 13141 ;; Defined at:
 13142 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;  f2              3   14[BANK0 ] float 
 13145 ;;  f1              3   17[BANK0 ] float 
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  f3              3   25[BANK0 ] float 
 13148 ;;  sign            1   29[BANK0 ] unsigned char 
 13149 ;;  exp             1   28[BANK0 ] unsigned char 
 13150 ;;  cntr            1   24[BANK0 ] unsigned char 
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  3   14[BANK0 ] float 
 13153 ;; Registers used:
 13154 ;;		wreg, status,2, status,0, pclath, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 0/0
 13157 ;;		On exit  : 0/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13160 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;Total ram usage:       16 bytes
 13165 ;; Hardware stack levels used:    1
 13166 ;; Hardware stack levels required when called:    6
 13167 ;; This function calls:
 13168 ;;		___ftpack
 13169 ;; This function is called by:
 13170 ;;		_getPercentValue
 13171 ;;		_setPercentValue
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           
 13176                           ;psect for function ___ftdiv
 13177  0EA8                     ___ftdiv:	
 13178                           
 13179                           ;incstack = 0
 13180                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13181  0EA8  0020               	movlb	0	; select bank0
 13182  0EA9  0831               	movf	___ftdiv@f1,w
 13183  0EAA  00B4               	movwf	??___ftdiv
 13184  0EAB  0832               	movf	___ftdiv@f1+1,w
 13185  0EAC  00B5               	movwf	??___ftdiv+1
 13186  0EAD  0833               	movf	___ftdiv@f1+2,w
 13187  0EAE  00B6               	movwf	??___ftdiv+2
 13188  0EAF  1003               	clrc
 13189  0EB0  0D35               	rlf	??___ftdiv+1,w
 13190  0EB1  0D36               	rlf	??___ftdiv+2,w
 13191  0EB2  00B7               	movwf	??___ftdiv+3
 13192  0EB3  0837               	movf	??___ftdiv+3,w
 13193  0EB4  00BC               	movwf	___ftdiv@exp
 13194  0EB5  08BC               	movf	___ftdiv@exp,f
 13195  0EB6  1D03               	skipz
 13196  0EB7  2EBF               	goto	l5715
 13197  0EB8  3000               	movlw	0
 13198  0EB9  00AE               	movwf	?___ftdiv
 13199  0EBA  3000               	movlw	0
 13200  0EBB  00AF               	movwf	?___ftdiv+1
 13201  0EBC  3000               	movlw	0
 13202  0EBD  00B0               	movwf	?___ftdiv+2
 13203  0EBE  0008               	return
 13204  0EBF                     l5715:	
 13205  0EBF  082E               	movf	___ftdiv@f2,w
 13206  0EC0  00B4               	movwf	??___ftdiv
 13207  0EC1  082F               	movf	___ftdiv@f2+1,w
 13208  0EC2  00B5               	movwf	??___ftdiv+1
 13209  0EC3  0830               	movf	___ftdiv@f2+2,w
 13210  0EC4  00B6               	movwf	??___ftdiv+2
 13211  0EC5  1003               	clrc
 13212  0EC6  0D35               	rlf	??___ftdiv+1,w
 13213  0EC7  0D36               	rlf	??___ftdiv+2,w
 13214  0EC8  00B7               	movwf	??___ftdiv+3
 13215  0EC9  0837               	movf	??___ftdiv+3,w
 13216  0ECA  00BD               	movwf	___ftdiv@sign
 13217  0ECB  08BD               	movf	___ftdiv@sign,f
 13218  0ECC  1D03               	skipz
 13219  0ECD  2ED5               	goto	l5721
 13220  0ECE  3000               	movlw	0
 13221  0ECF  00AE               	movwf	?___ftdiv
 13222  0ED0  3000               	movlw	0
 13223  0ED1  00AF               	movwf	?___ftdiv+1
 13224  0ED2  3000               	movlw	0
 13225  0ED3  00B0               	movwf	?___ftdiv+2
 13226  0ED4  0008               	return
 13227  0ED5                     l5721:	
 13228  0ED5  3000               	movlw	0
 13229  0ED6  00B9               	movwf	___ftdiv@f3
 13230  0ED7  3000               	movlw	0
 13231  0ED8  00BA               	movwf	___ftdiv@f3+1
 13232  0ED9  3000               	movlw	0
 13233  0EDA  00BB               	movwf	___ftdiv@f3+2
 13234  0EDB  3089               	movlw	137
 13235  0EDC  073D               	addwf	___ftdiv@sign,w
 13236  0EDD  00B4               	movwf	??___ftdiv
 13237  0EDE  0834               	movf	??___ftdiv,w
 13238  0EDF  02BC               	subwf	___ftdiv@exp,f
 13239  0EE0  0831               	movf	___ftdiv@f1,w
 13240  0EE1  00B4               	movwf	??___ftdiv
 13241  0EE2  0832               	movf	___ftdiv@f1+1,w
 13242  0EE3  00B5               	movwf	??___ftdiv+1
 13243  0EE4  0833               	movf	___ftdiv@f1+2,w
 13244  0EE5  00B6               	movwf	??___ftdiv+2
 13245  0EE6  3010               	movlw	16
 13246  0EE7                     u4295:	
 13247  0EE7  36B6               	lsrf	??___ftdiv+2,f
 13248  0EE8  0CB5               	rrf	??___ftdiv+1,f
 13249  0EE9  0CB4               	rrf	??___ftdiv,f
 13250  0EEA  0B89               	decfsz	9,f
 13251  0EEB  2EE7               	goto	u4295
 13252  0EEC  0834               	movf	??___ftdiv,w
 13253  0EED  00B7               	movwf	??___ftdiv+3
 13254  0EEE  0837               	movf	??___ftdiv+3,w
 13255  0EEF  00BD               	movwf	___ftdiv@sign
 13256  0EF0  082E               	movf	___ftdiv@f2,w
 13257  0EF1  00B4               	movwf	??___ftdiv
 13258  0EF2  082F               	movf	___ftdiv@f2+1,w
 13259  0EF3  00B5               	movwf	??___ftdiv+1
 13260  0EF4  0830               	movf	___ftdiv@f2+2,w
 13261  0EF5  00B6               	movwf	??___ftdiv+2
 13262  0EF6  3010               	movlw	16
 13263  0EF7                     u4305:	
 13264  0EF7  36B6               	lsrf	??___ftdiv+2,f
 13265  0EF8  0CB5               	rrf	??___ftdiv+1,f
 13266  0EF9  0CB4               	rrf	??___ftdiv,f
 13267  0EFA  0B89               	decfsz	9,f
 13268  0EFB  2EF7               	goto	u4305
 13269  0EFC  0834               	movf	??___ftdiv,w
 13270  0EFD  00B7               	movwf	??___ftdiv+3
 13271  0EFE  0837               	movf	??___ftdiv+3,w
 13272  0EFF  06BD               	xorwf	___ftdiv@sign,f
 13273  0F00  3080               	movlw	128
 13274  0F01  00B4               	movwf	??___ftdiv
 13275  0F02  0834               	movf	??___ftdiv,w
 13276  0F03  05BD               	andwf	___ftdiv@sign,f
 13277  0F04  17B2               	bsf	___ftdiv@f1+1,7
 13278  0F05  30FF               	movlw	255
 13279  0F06  05B1               	andwf	___ftdiv@f1,f
 13280  0F07  30FF               	movlw	255
 13281  0F08  05B2               	andwf	___ftdiv@f1+1,f
 13282  0F09  3000               	movlw	0
 13283  0F0A  05B3               	andwf	___ftdiv@f1+2,f
 13284  0F0B  17AF               	bsf	___ftdiv@f2+1,7
 13285  0F0C  30FF               	movlw	255
 13286  0F0D  05AE               	andwf	___ftdiv@f2,f
 13287  0F0E  30FF               	movlw	255
 13288  0F0F  05AF               	andwf	___ftdiv@f2+1,f
 13289  0F10  3000               	movlw	0
 13290  0F11  05B0               	andwf	___ftdiv@f2+2,f
 13291  0F12  3018               	movlw	24
 13292  0F13  00B4               	movwf	??___ftdiv
 13293  0F14  0834               	movf	??___ftdiv,w
 13294  0F15  00B8               	movwf	___ftdiv@cntr
 13295  0F16                     l5735:	
 13296  0F16  3001               	movlw	1
 13297  0F17                     u4315:	
 13298  0F17  35B9               	lslf	___ftdiv@f3,f
 13299  0F18  0DBA               	rlf	___ftdiv@f3+1,f
 13300  0F19  0DBB               	rlf	___ftdiv@f3+2,f
 13301  0F1A  0B89               	decfsz	9,f
 13302  0F1B  2F17               	goto	u4315
 13303  0F1C  0830               	movf	___ftdiv@f2+2,w
 13304  0F1D  0233               	subwf	___ftdiv@f1+2,w
 13305  0F1E  1D03               	skipz
 13306  0F1F  2F26               	goto	u4325
 13307  0F20  082F               	movf	___ftdiv@f2+1,w
 13308  0F21  0232               	subwf	___ftdiv@f1+1,w
 13309  0F22  1D03               	skipz
 13310  0F23  2F26               	goto	u4325
 13311  0F24  082E               	movf	___ftdiv@f2,w
 13312  0F25  0231               	subwf	___ftdiv@f1,w
 13313  0F26                     u4325:	
 13314  0F26  1C03               	skipc
 13315  0F27  2F2F               	goto	l5743
 13316  0F28  082E               	movf	___ftdiv@f2,w
 13317  0F29  02B1               	subwf	___ftdiv@f1,f
 13318  0F2A  082F               	movf	___ftdiv@f2+1,w
 13319  0F2B  3BB2               	subwfb	___ftdiv@f1+1,f
 13320  0F2C  0830               	movf	___ftdiv@f2+2,w
 13321  0F2D  3BB3               	subwfb	___ftdiv@f1+2,f
 13322  0F2E  1439               	bsf	___ftdiv@f3,0
 13323  0F2F                     l5743:	
 13324  0F2F  3001               	movlw	1
 13325  0F30                     u4335:	
 13326  0F30  35B1               	lslf	___ftdiv@f1,f
 13327  0F31  0DB2               	rlf	___ftdiv@f1+1,f
 13328  0F32  0DB3               	rlf	___ftdiv@f1+2,f
 13329  0F33  0B89               	decfsz	9,f
 13330  0F34  2F30               	goto	u4335
 13331  0F35  3001               	movlw	1
 13332  0F36  02B8               	subwf	___ftdiv@cntr,f
 13333  0F37  1D03               	btfss	3,2
 13334  0F38  2F16               	goto	l5735
 13335  0F39  0839               	movf	___ftdiv@f3,w
 13336  0F3A  00A0               	movwf	___ftpack@arg
 13337  0F3B  083A               	movf	___ftdiv@f3+1,w
 13338  0F3C  00A1               	movwf	___ftpack@arg+1
 13339  0F3D  083B               	movf	___ftdiv@f3+2,w
 13340  0F3E  00A2               	movwf	___ftpack@arg+2
 13341  0F3F  083C               	movf	___ftdiv@exp,w
 13342  0F40  00B4               	movwf	??___ftdiv
 13343  0F41  0834               	movf	??___ftdiv,w
 13344  0F42  00A3               	movwf	___ftpack@exp
 13345  0F43  083D               	movf	___ftdiv@sign,w
 13346  0F44  00B5               	movwf	??___ftdiv+1
 13347  0F45  0835               	movf	??___ftdiv+1,w
 13348  0F46  00A4               	movwf	___ftpack@sign
 13349  0F47  3189  213C         	fcall	___ftpack
 13350  0F49  0020               	movlb	0	; select bank0
 13351  0F4A  0820               	movf	?___ftpack,w
 13352  0F4B  00AE               	movwf	?___ftdiv
 13353  0F4C  0821               	movf	?___ftpack+1,w
 13354  0F4D  00AF               	movwf	?___ftdiv+1
 13355  0F4E  0822               	movf	?___ftpack+2,w
 13356  0F4F  00B0               	movwf	?___ftdiv+2
 13357  0F50  0008               	return
 13358  0F51                     __end_of___ftdiv:	
 13359                           
 13360                           	psect	text79
 13361  12CC                     __ptext79:	
 13362 ;; *************** function ___awtoft *****************
 13363 ;; Defined at:
 13364 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13365 ;; Parameters:    Size  Location     Type
 13366 ;;  c               2    8[BANK0 ] int 
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;  sign            1   13[BANK0 ] unsigned char 
 13369 ;; Return value:  Size  Location     Type
 13370 ;;                  3    8[BANK0 ] float 
 13371 ;; Registers used:
 13372 ;;		wreg, status,2, status,0, pclath, cstack
 13373 ;; Tracked objects:
 13374 ;;		On entry : 0/0
 13375 ;;		On exit  : 0/0
 13376 ;;		Unchanged: 0/0
 13377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13378 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;Total ram usage:        6 bytes
 13383 ;; Hardware stack levels used:    1
 13384 ;; Hardware stack levels required when called:    6
 13385 ;; This function calls:
 13386 ;;		___ftpack
 13387 ;; This function is called by:
 13388 ;;		_getPercentValue
 13389 ;;		_setPercentValue
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           
 13394                           ;psect for function ___awtoft
 13395  12CC                     ___awtoft:	
 13396                           
 13397                           ;incstack = 0
 13398                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13399  12CC  0020               	movlb	0	; select bank0
 13400  12CD  01AD               	clrf	___awtoft@sign
 13401  12CE  1FA9               	btfss	___awtoft@c+1,7
 13402  12CF  2AD7               	goto	l7957
 13403  12D0  09A8               	comf	___awtoft@c,f
 13404  12D1  09A9               	comf	___awtoft@c+1,f
 13405  12D2  0AA8               	incf	___awtoft@c,f
 13406  12D3  1903               	skipnz
 13407  12D4  0AA9               	incf	___awtoft@c+1,f
 13408  12D5  01AD               	clrf	___awtoft@sign
 13409  12D6  0AAD               	incf	___awtoft@sign,f
 13410  12D7                     l7957:	
 13411  12D7  0828               	movf	___awtoft@c,w
 13412  12D8  00A0               	movwf	___ftpack@arg
 13413  12D9  0829               	movf	___awtoft@c+1,w
 13414  12DA  00A1               	movwf	___ftpack@arg+1
 13415  12DB  01A2               	clrf	___ftpack@arg+2
 13416  12DC  308E               	movlw	142
 13417  12DD  00AB               	movwf	??___awtoft
 13418  12DE  082B               	movf	??___awtoft,w
 13419  12DF  00A3               	movwf	___ftpack@exp
 13420  12E0  082D               	movf	___awtoft@sign,w
 13421  12E1  00AC               	movwf	??___awtoft+1
 13422  12E2  082C               	movf	??___awtoft+1,w
 13423  12E3  00A4               	movwf	___ftpack@sign
 13424  12E4  3189  213C         	fcall	___ftpack
 13425  12E6  0020               	movlb	0	; select bank0
 13426  12E7  0820               	movf	?___ftpack,w
 13427  12E8  00A8               	movwf	?___awtoft
 13428  12E9  0821               	movf	?___ftpack+1,w
 13429  12EA  00A9               	movwf	?___awtoft+1
 13430  12EB  0822               	movf	?___ftpack+2,w
 13431  12EC  00AA               	movwf	?___awtoft+2
 13432  12ED  0008               	return
 13433  12EE                     __end_of___awtoft:	
 13434                           
 13435                           	psect	text80
 13436  093C                     __ptext80:	
 13437 ;; *************** function ___ftpack *****************
 13438 ;; Defined at:
 13439 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13440 ;; Parameters:    Size  Location     Type
 13441 ;;  arg             3    0[BANK0 ] unsigned um
 13442 ;;  exp             1    3[BANK0 ] unsigned char 
 13443 ;;  sign            1    4[BANK0 ] unsigned char 
 13444 ;; Auto vars:     Size  Location     Type
 13445 ;;		None
 13446 ;; Return value:  Size  Location     Type
 13447 ;;                  3    0[BANK0 ] float 
 13448 ;; Registers used:
 13449 ;;		wreg, status,2, status,0
 13450 ;; Tracked objects:
 13451 ;;		On entry : 0/0
 13452 ;;		On exit  : 0/0
 13453 ;;		Unchanged: 0/0
 13454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13455 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;Total ram usage:        8 bytes
 13460 ;; Hardware stack levels used:    1
 13461 ;; Hardware stack levels required when called:    5
 13462 ;; This function calls:
 13463 ;;		Nothing
 13464 ;; This function is called by:
 13465 ;;		___awtoft
 13466 ;;		___ftadd
 13467 ;;		___ftdiv
 13468 ;;		___ftmul
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           
 13473                           ;psect for function ___ftpack
 13474  093C                     ___ftpack:	
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13478  093C  0020               	movlb	0	; select bank0
 13479  093D  0823               	movf	___ftpack@exp,w
 13480  093E  1903               	btfsc	3,2
 13481  093F  2945               	goto	l5599
 13482  0940  0822               	movf	___ftpack@arg+2,w
 13483  0941  0421               	iorwf	___ftpack@arg+1,w
 13484  0942  0420               	iorwf	___ftpack@arg,w
 13485  0943  1D03               	skipz
 13486  0944  2956               	goto	l5605
 13487  0945                     l5599:	
 13488  0945  3000               	movlw	0
 13489  0946  00A0               	movwf	?___ftpack
 13490  0947  3000               	movlw	0
 13491  0948  00A1               	movwf	?___ftpack+1
 13492  0949  3000               	movlw	0
 13493  094A  00A2               	movwf	?___ftpack+2
 13494  094B  0008               	return
 13495  094C                     l5603:	
 13496  094C  3001               	movlw	1
 13497  094D  00A5               	movwf	??___ftpack
 13498  094E  0825               	movf	??___ftpack,w
 13499  094F  07A3               	addwf	___ftpack@exp,f
 13500  0950  3001               	movlw	1
 13501  0951                     u3945:	
 13502  0951  36A2               	lsrf	___ftpack@arg+2,f
 13503  0952  0CA1               	rrf	___ftpack@arg+1,f
 13504  0953  0CA0               	rrf	___ftpack@arg,f
 13505  0954  0B89               	decfsz	9,f
 13506  0955  2951               	goto	u3945
 13507  0956                     l5605:	
 13508  0956  30FE               	movlw	254
 13509  0957  0522               	andwf	___ftpack@arg+2,w
 13510  0958  1903               	btfsc	3,2
 13511  0959  296F               	goto	l3017
 13512  095A  294C               	goto	l5603
 13513  095B                     l5607:	
 13514  095B  3001               	movlw	1
 13515  095C  00A5               	movwf	??___ftpack
 13516  095D  0825               	movf	??___ftpack,w
 13517  095E  07A3               	addwf	___ftpack@exp,f
 13518  095F  3001               	movlw	1
 13519  0960  07A0               	addwf	___ftpack@arg,f
 13520  0961  3000               	movlw	0
 13521  0962  1803               	skipnc
 13522  0963  3001               	movlw	1
 13523  0964  07A1               	addwf	___ftpack@arg+1,f
 13524  0965  3000               	movlw	0
 13525  0966  1803               	skipnc
 13526  0967  3001               	movlw	1
 13527  0968  07A2               	addwf	___ftpack@arg+2,f
 13528  0969  3001               	movlw	1
 13529  096A                     u3965:	
 13530  096A  36A2               	lsrf	___ftpack@arg+2,f
 13531  096B  0CA1               	rrf	___ftpack@arg+1,f
 13532  096C  0CA0               	rrf	___ftpack@arg,f
 13533  096D  0B89               	decfsz	9,f
 13534  096E  296A               	goto	u3965
 13535  096F                     l3017:	
 13536  096F  30FF               	movlw	255
 13537  0970  0522               	andwf	___ftpack@arg+2,w
 13538  0971  1903               	btfsc	3,2
 13539  0972  297C               	goto	l5615
 13540  0973  295B               	goto	l5607
 13541  0974                     l5613:	
 13542  0974  3001               	movlw	1
 13543  0975  02A3               	subwf	___ftpack@exp,f
 13544  0976  3001               	movlw	1
 13545  0977                     u3985:	
 13546  0977  35A0               	lslf	___ftpack@arg,f
 13547  0978  0DA1               	rlf	___ftpack@arg+1,f
 13548  0979  0DA2               	rlf	___ftpack@arg+2,f
 13549  097A  0B89               	decfsz	9,f
 13550  097B  2977               	goto	u3985
 13551  097C                     l5615:	
 13552  097C  1FA1               	btfss	___ftpack@arg+1,7
 13553  097D  2974               	goto	l5613
 13554  097E  1823               	btfsc	___ftpack@exp,0
 13555  097F  2986               	goto	l3023
 13556  0980  30FF               	movlw	255
 13557  0981  05A0               	andwf	___ftpack@arg,f
 13558  0982  307F               	movlw	127
 13559  0983  05A1               	andwf	___ftpack@arg+1,f
 13560  0984  30FF               	movlw	255
 13561  0985  05A2               	andwf	___ftpack@arg+2,f
 13562  0986                     l3023:	
 13563  0986  1003               	clrc
 13564  0987  0CA3               	rrf	___ftpack@exp,f
 13565  0988  0823               	movf	___ftpack@exp,w
 13566  0989  00A5               	movwf	??___ftpack
 13567  098A  01A6               	clrf	??___ftpack+1
 13568  098B  01A7               	clrf	??___ftpack+2
 13569  098C  3010               	movlw	16
 13570  098D                     u4015:	
 13571  098D  35A5               	lslf	??___ftpack,f
 13572  098E  0DA6               	rlf	??___ftpack+1,f
 13573  098F  0DA7               	rlf	??___ftpack+2,f
 13574  0990  0B89               	decfsz	9,f
 13575  0991  298D               	goto	u4015
 13576  0992  0825               	movf	??___ftpack,w
 13577  0993  04A0               	iorwf	___ftpack@arg,f
 13578  0994  0826               	movf	??___ftpack+1,w
 13579  0995  04A1               	iorwf	___ftpack@arg+1,f
 13580  0996  0827               	movf	??___ftpack+2,w
 13581  0997  04A2               	iorwf	___ftpack@arg+2,f
 13582  0998  0824               	movf	___ftpack@sign,w
 13583  0999  1903               	btfsc	3,2
 13584  099A  0008               	return
 13585  099B  17A2               	bsf	___ftpack@arg+2,7
 13586  099C  0008               	return
 13587  099D                     __end_of___ftpack:	
 13588                           
 13589                           	psect	text81
 13590  1F33                     __ptext81:	
 13591 ;; *************** function _setRFSW_Status *****************
 13592 ;; Defined at:
 13593 ;;		line 431 in file "../src/RF_Control_B1.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  sw              1    wreg     unsigned char 
 13596 ;;  command         1    2[BANK0 ] unsigned char 
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;  sw              1    3[BANK0 ] unsigned char 
 13599 ;; Return value:  Size  Location     Type
 13600 ;;		None               void
 13601 ;; Registers used:
 13602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13608 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;Total ram usage:        2 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; Hardware stack levels required when called:    6
 13615 ;; This function calls:
 13616 ;;		_RfSWPointSelect
 13617 ;; This function is called by:
 13618 ;;		_DlyOff_Main
 13619 ;;		_setControl_Lights_Table
 13620 ;;		_Sw_DimmerOnFunc
 13621 ;;		_Sw_DimmerAdjFunc
 13622 ;;		_setDimmerLights_ERROR
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function _setRFSW_Status
 13628  1F33                     _setRFSW_Status:	
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13632                           ;setRFSW_Status@sw stored from wreg
 13633  1F33  0020               	movlb	0	; select bank0
 13634  1F34  00A3               	movwf	setRFSW_Status@sw
 13635                           
 13636                           ;RF_Control_B1.c: 432: RfSWPointSelect(sw);
 13637  1F35  0823               	movf	setRFSW_Status@sw,w
 13638  1F36  3192  224A         	fcall	_RfSWPointSelect
 13639                           
 13640                           ;RF_Control_B1.c: 433: RFSW->Status = command;
 13641  1F38  0021               	movlb	1	; select bank1
 13642  1F39  0851               	movf	_RFSW^(0+128),w
 13643  1F3A  0086               	movwf	6
 13644  1F3B  0187               	clrf	7
 13645  1F3C  0020               	movlb	0	; select bank0
 13646  1F3D  0822               	movf	setRFSW_Status@command,w
 13647  1F3E  1001               	bcf	1,0
 13648  1F3F  1D03               	skipz
 13649  1F40  1401               	bsf	1,0
 13650  1F41  0008               	return
 13651  1F42                     __end_of_setRFSW_Status:	
 13652                           
 13653                           	psect	text82
 13654  124A                     __ptext82:	
 13655 ;; *************** function _RfSWPointSelect *****************
 13656 ;; Defined at:
 13657 ;;		line 366 in file "../src/RF_Control_B1.c"
 13658 ;; Parameters:    Size  Location     Type
 13659 ;;  sw              1    wreg     unsigned char 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  sw              1    1[BANK0 ] unsigned char 
 13662 ;; Return value:  Size  Location     Type
 13663 ;;		None               void
 13664 ;; Registers used:
 13665 ;;		wreg
 13666 ;; Tracked objects:
 13667 ;;		On entry : 0/0
 13668 ;;		On exit  : 0/0
 13669 ;;		Unchanged: 0/0
 13670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;Total ram usage:        2 bytes
 13676 ;; Hardware stack levels used:    1
 13677 ;; Hardware stack levels required when called:    5
 13678 ;; This function calls:
 13679 ;;		Nothing
 13680 ;; This function is called by:
 13681 ;;		_setRFSW_Control
 13682 ;;		_setRFSW_AdjControl
 13683 ;;		_setRFSW_Status
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           
 13688                           ;psect for function _RfSWPointSelect
 13689  124A                     _RfSWPointSelect:	
 13690                           
 13691                           ;incstack = 0
 13692                           ; Regs used in _RfSWPointSelect: [wreg]
 13693                           ;RfSWPointSelect@sw stored from wreg
 13694  124A  0020               	movlb	0	; select bank0
 13695  124B  00A1               	movwf	RfSWPointSelect@sw
 13696                           
 13697                           ;RF_Control_B1.c: 368: if (sw == 1) {
 13698  124C  0821               	movf	RfSWPointSelect@sw,w
 13699  124D  3A01               	xorlw	1
 13700  124E  1D03               	skipz
 13701  124F  2A55               	goto	l2283
 13702                           
 13703                           ;RF_Control_B1.c: 369: RFSW = &RFSW1;
 13704  1250  30ED               	movlw	_RFSW1& (0+255)
 13705  1251  00A0               	movwf	??_RfSWPointSelect
 13706  1252  0820               	movf	??_RfSWPointSelect,w
 13707  1253  0021               	movlb	1	; select bank1
 13708  1254  00D1               	movwf	_RFSW^(0+128)
 13709  1255                     l2283:	
 13710                           
 13711                           ;RF_Control_B1.c: 370: }
 13712                           ;RF_Control_B1.c: 373: if (sw == 2) {
 13713  1255  0020               	movlb	0	; select bank0
 13714  1256  0821               	movf	RfSWPointSelect@sw,w
 13715  1257  3A02               	xorlw	2
 13716  1258  1D03               	skipz
 13717  1259  2A5F               	goto	l2284
 13718                           
 13719                           ;RF_Control_B1.c: 374: RFSW = &RFSW2;
 13720  125A  30EE               	movlw	_RFSW2& (0+255)
 13721  125B  00A0               	movwf	??_RfSWPointSelect
 13722  125C  0820               	movf	??_RfSWPointSelect,w
 13723  125D  0021               	movlb	1	; select bank1
 13724  125E  00D1               	movwf	_RFSW^(0+128)
 13725  125F                     l2284:	
 13726                           
 13727                           ;RF_Control_B1.c: 375: }
 13728                           ;RF_Control_B1.c: 378: if (sw == 3) {
 13729  125F  0020               	movlb	0	; select bank0
 13730  1260  0821               	movf	RfSWPointSelect@sw,w
 13731  1261  3A03               	xorlw	3
 13732  1262  1D03               	skipz
 13733  1263  0008               	return
 13734                           
 13735                           ;RF_Control_B1.c: 379: RFSW = &RFSW3;
 13736  1264  30EF               	movlw	_RFSW3& (0+255)
 13737  1265  00A0               	movwf	??_RfSWPointSelect
 13738  1266  0820               	movf	??_RfSWPointSelect,w
 13739  1267  0021               	movlb	1	; select bank1
 13740  1268  00D1               	movwf	_RFSW^(0+128)
 13741  1269  0008               	return
 13742  126A                     __end_of_RfSWPointSelect:	
 13743                           
 13744                           	psect	text83
 13745  1F8E                     __ptext83:	
 13746 ;; *************** function _setDimmerLights_Trigger *****************
 13747 ;; Defined at:
 13748 ;;		line 714 in file "../src/Dimmer_B1.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;  lights          1    wreg     unsigned char 
 13751 ;;  command         1    2[BANK0 ] unsigned char 
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;  lights          1    3[BANK0 ] unsigned char 
 13754 ;; Return value:  Size  Location     Type
 13755 ;;		None               void
 13756 ;; Registers used:
 13757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13758 ;; Tracked objects:
 13759 ;;		On entry : 0/0
 13760 ;;		On exit  : 0/0
 13761 ;;		Unchanged: 0/0
 13762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13763 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13767 ;;Total ram usage:        2 bytes
 13768 ;; Hardware stack levels used:    1
 13769 ;; Hardware stack levels required when called:    6
 13770 ;; This function calls:
 13771 ;;		_DimmerLightsPointSelect
 13772 ;; This function is called by:
 13773 ;;		_DlyOff_Main
 13774 ;;		_setRFSW_Control
 13775 ;;		_Sw_DimmerOnFunc
 13776 ;;		_Sw_DimmerOffFunc
 13777 ;; This function uses a non-reentrant model
 13778 ;;
 13779                           
 13780                           
 13781                           ;psect for function _setDimmerLights_Trigger
 13782  1F8E                     _setDimmerLights_Trigger:	
 13783                           
 13784                           ;incstack = 0
 13785                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13786                           ;setDimmerLights_Trigger@lights stored from wreg
 13787  1F8E  0020               	movlb	0	; select bank0
 13788  1F8F  00A3               	movwf	setDimmerLights_Trigger@lights
 13789                           
 13790                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 13791  1F90  0823               	movf	setDimmerLights_Trigger@lights,w
 13792  1F91  3191  219A         	fcall	_DimmerLightsPointSelect
 13793                           
 13794                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 13795  1F93  0020               	movlb	0	; select bank0
 13796  1F94  086B               	movf	_DimmerLights,w
 13797  1F95  3E08               	addlw	8
 13798  1F96  0086               	movwf	6
 13799  1F97  3001               	movlw	1	; select bank2/3
 13800  1F98  0087               	movwf	7
 13801  1F99  0822               	movf	setDimmerLights_Trigger@command,w
 13802  1F9A  1101               	bcf	1,2
 13803  1F9B  1D03               	skipz
 13804  1F9C  1501               	bsf	1,2
 13805  1F9D  0008               	return
 13806  1F9E                     __end_of_setDimmerLights_Trigger:	
 13807                           
 13808                           	psect	text84
 13809  1F7E                     __ptext84:	
 13810 ;; *************** function _setDimmerLights_Switch *****************
 13811 ;; Defined at:
 13812 ;;		line 702 in file "../src/Dimmer_B1.c"
 13813 ;; Parameters:    Size  Location     Type
 13814 ;;  lights          1    wreg     unsigned char 
 13815 ;;  command         1    2[BANK0 ] unsigned char 
 13816 ;; Auto vars:     Size  Location     Type
 13817 ;;  lights          1    3[BANK0 ] unsigned char 
 13818 ;; Return value:  Size  Location     Type
 13819 ;;		None               void
 13820 ;; Registers used:
 13821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13822 ;; Tracked objects:
 13823 ;;		On entry : 0/0
 13824 ;;		On exit  : 0/0
 13825 ;;		Unchanged: 0/0
 13826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13827 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;Total ram usage:        2 bytes
 13832 ;; Hardware stack levels used:    1
 13833 ;; Hardware stack levels required when called:    6
 13834 ;; This function calls:
 13835 ;;		_DimmerLightsPointSelect
 13836 ;; This function is called by:
 13837 ;;		_DlyOff_Main
 13838 ;;		_setRFSW_Control
 13839 ;;		_Sw_DimmerOnFunc
 13840 ;;		_Sw_DimmerOffFunc
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           
 13845                           ;psect for function _setDimmerLights_Switch
 13846  1F7E                     _setDimmerLights_Switch:	
 13847                           
 13848                           ;incstack = 0
 13849                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13850                           ;setDimmerLights_Switch@lights stored from wreg
 13851  1F7E  0020               	movlb	0	; select bank0
 13852  1F7F  00A3               	movwf	setDimmerLights_Switch@lights
 13853                           
 13854                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 13855  1F80  0823               	movf	setDimmerLights_Switch@lights,w
 13856  1F81  3191  219A         	fcall	_DimmerLightsPointSelect
 13857                           
 13858                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 13859  1F83  0020               	movlb	0	; select bank0
 13860  1F84  086B               	movf	_DimmerLights,w
 13861  1F85  3E08               	addlw	8
 13862  1F86  0086               	movwf	6
 13863  1F87  3001               	movlw	1	; select bank2/3
 13864  1F88  0087               	movwf	7
 13865  1F89  0822               	movf	setDimmerLights_Switch@command,w
 13866  1F8A  1081               	bcf	1,1
 13867  1F8B  1D03               	skipz
 13868  1F8C  1481               	bsf	1,1
 13869  1F8D  0008               	return
 13870  1F8E                     __end_of_setDimmerLights_Switch:	
 13871                           
 13872                           	psect	text85
 13873  119A                     __ptext85:	
 13874 ;; *************** function _DimmerLightsPointSelect *****************
 13875 ;; Defined at:
 13876 ;;		line 324 in file "../src/Dimmer_B1.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;  lights          1    wreg     unsigned char 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  lights          1    1[BANK0 ] unsigned char 
 13881 ;; Return value:  Size  Location     Type
 13882 ;;		None               void
 13883 ;; Registers used:
 13884 ;;		wreg
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;Total ram usage:        2 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    5
 13897 ;; This function calls:
 13898 ;;		Nothing
 13899 ;; This function is called by:
 13900 ;;		_setDimmerLights_Initialization
 13901 ;;		_setDimmerLights_Main
 13902 ;;		_setDimmerLights
 13903 ;;		_setDimmerLights_Adj
 13904 ;;		_setDimmerLights_AdjRF
 13905 ;;		_setDimmerLights_Switch
 13906 ;;		_setDimmerLights_AdjGo
 13907 ;;		_setDimmerLights_Trigger
 13908 ;;		_setDimmerLights_TriggerAdj
 13909 ;;		_setDimmerLights_ERROR
 13910 ;;		_setDimmerLights_TriggerERROR
 13911 ;;		_setDimmerLights_GO
 13912 ;;		_setDimmerLights_MaxmumValue
 13913 ;;		_setDimmerLights_Clear
 13914 ;; This function uses a non-reentrant model
 13915 ;;
 13916                           
 13917                           
 13918                           ;psect for function _DimmerLightsPointSelect
 13919  119A                     _DimmerLightsPointSelect:	
 13920                           
 13921                           ;incstack = 0
 13922                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13923                           ;DimmerLightsPointSelect@lights stored from wreg
 13924  119A  0020               	movlb	0	; select bank0
 13925  119B  00A1               	movwf	DimmerLightsPointSelect@lights
 13926                           
 13927                           ;Dimmer_B1.c: 326: if (lights == 1) {
 13928  119C  0821               	movf	DimmerLightsPointSelect@lights,w
 13929  119D  3A01               	xorlw	1
 13930  119E  1D03               	skipz
 13931  119F  29A4               	goto	l867
 13932                           
 13933                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 13934  11A0  303D               	movlw	_DimmerLights1& (0+255)
 13935  11A1  00A0               	movwf	??_DimmerLightsPointSelect
 13936  11A2  0820               	movf	??_DimmerLightsPointSelect,w
 13937  11A3  00EB               	movwf	_DimmerLights
 13938  11A4                     l867:	
 13939                           
 13940                           ;Dimmer_B1.c: 328: }
 13941                           ;Dimmer_B1.c: 331: if (lights == 2) {
 13942  11A4  0821               	movf	DimmerLightsPointSelect@lights,w
 13943  11A5  3A02               	xorlw	2
 13944  11A6  1D03               	skipz
 13945  11A7  29AC               	goto	l868
 13946                           
 13947                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 13948  11A8  304C               	movlw	_DimmerLights2& (0+255)
 13949  11A9  00A0               	movwf	??_DimmerLightsPointSelect
 13950  11AA  0820               	movf	??_DimmerLightsPointSelect,w
 13951  11AB  00EB               	movwf	_DimmerLights
 13952  11AC                     l868:	
 13953                           
 13954                           ;Dimmer_B1.c: 333: }
 13955                           ;Dimmer_B1.c: 336: if (lights == 3) {
 13956  11AC  0821               	movf	DimmerLightsPointSelect@lights,w
 13957  11AD  3A03               	xorlw	3
 13958  11AE  1D03               	skipz
 13959  11AF  0008               	return
 13960                           
 13961                           ;Dimmer_B1.c: 337: DimmerLights = &DimmerLights3;
 13962  11B0  305B               	movlw	_DimmerLights3& (0+255)
 13963  11B1  00A0               	movwf	??_DimmerLightsPointSelect
 13964  11B2  0820               	movf	??_DimmerLightsPointSelect,w
 13965  11B3  00EB               	movwf	_DimmerLights
 13966  11B4  0008               	return
 13967  11B5                     __end_of_DimmerLightsPointSelect:	
 13968                           
 13969                           	psect	text86
 13970  17A7                     __ptext86:	
 13971 ;; *************** function _setBuz *****************
 13972 ;; Defined at:
 13973 ;;		line 22 in file "../src/Buzzer_B1.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;  count           1    wreg     unsigned char 
 13976 ;;  time            2    9[BANK0 ] int 
 13977 ;; Auto vars:     Size  Location     Type
 13978 ;;  count           1   12[BANK0 ] unsigned char 
 13979 ;; Return value:  Size  Location     Type
 13980 ;;		None               void
 13981 ;; Registers used:
 13982 ;;		wreg, status,2, status,0, pclath, cstack
 13983 ;; Tracked objects:
 13984 ;;		On entry : 0/0
 13985 ;;		On exit  : 0/0
 13986 ;;		Unchanged: 0/0
 13987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;Total ram usage:        4 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    6
 13995 ;; This function calls:
 13996 ;;		___awdiv
 13997 ;; This function is called by:
 13998 ;;		_DlyOff_Main
 13999 ;;		_setDimmerLights_Main
 14000 ;;		_my_MainTime
 14001 ;;		_setLog_Code
 14002 ;;		_setControl_Lights_Table
 14003 ;;		_setRFSW_Control
 14004 ;;		_setSw_Main
 14005 ;;		_Sw_DimmerOnFunc
 14006 ;;		_DimmerLights_Exceptions
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           
 14011                           ;psect for function _setBuz
 14012  17A7                     _setBuz:	
 14013                           
 14014                           ;incstack = 0
 14015                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14016                           ;setBuz@count stored from wreg
 14017  17A7  0020               	movlb	0	; select bank0
 14018  17A8  00AC               	movwf	setBuz@count
 14019                           
 14020                           ;Buzzer_B1.c: 23: time /= 10;
 14021  17A9  300A               	movlw	10
 14022  17AA  00A0               	movwf	___awdiv@divisor
 14023  17AB  3000               	movlw	0
 14024  17AC  00A1               	movwf	___awdiv@divisor+1
 14025  17AD  082A               	movf	setBuz@time+1,w
 14026  17AE  01A3               	clrf	___awdiv@dividend+1
 14027  17AF  07A3               	addwf	___awdiv@dividend+1,f
 14028  17B0  0829               	movf	setBuz@time,w
 14029  17B1  01A2               	clrf	___awdiv@dividend
 14030  17B2  07A2               	addwf	___awdiv@dividend,f
 14031  17B3  3197  2753  3197   	fcall	___awdiv
 14032  17B6  0020               	movlb	0	; select bank0
 14033  17B7  0821               	movf	?___awdiv+1,w
 14034  17B8  01AA               	clrf	setBuz@time+1
 14035  17B9  07AA               	addwf	setBuz@time+1,f
 14036  17BA  0820               	movf	?___awdiv,w
 14037  17BB  01A9               	clrf	setBuz@time
 14038  17BC  07A9               	addwf	setBuz@time,f
 14039                           
 14040                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14041  17BD  0021               	movlb	1	; select bank1
 14042  17BE  1C32               	btfss	_Buz1^(0+128),0
 14043  17BF  0008               	return
 14044                           
 14045                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14046  17C0  18B2               	btfsc	_Buz1^(0+128),1
 14047  17C1  2FD8               	goto	l110
 14048                           
 14049                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14050  17C2  14B2               	bsf	_Buz1^(0+128),1
 14051                           
 14052                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14053  17C3  01B3               	clrf	(_Buz1^(0+128)+1)
 14054  17C4  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 14055                           
 14056                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14057  17C5  0020               	movlb	0	; select bank0
 14058  17C6  082C               	movf	setBuz@count,w
 14059  17C7  00AB               	movwf	??_setBuz
 14060  17C8  082B               	movf	??_setBuz,w
 14061  17C9  0021               	movlb	1	; select bank1
 14062  17CA  00B5               	movwf	(_Buz1^(0+128)+3)
 14063                           
 14064                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14065  17CB  0020               	movlb	0	; select bank0
 14066  17CC  082A               	movf	setBuz@time+1,w
 14067  17CD  0021               	movlb	1	; select bank1
 14068  17CE  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 14069  17CF  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 14070  17D0  0020               	movlb	0	; select bank0
 14071  17D1  0829               	movf	setBuz@time,w
 14072  17D2  0021               	movlb	1	; select bank1
 14073  17D3  01B8               	clrf	(_Buz1^(0+128)+6)
 14074  17D4  07B8               	addwf	(_Buz1^(0+128)+6),f
 14075                           
 14076                           ;Buzzer_B1.c: 30: RB3 = 1;
 14077  17D5  0020               	movlb	0	; select bank0
 14078  17D6  158D               	bsf	13,3	;volatile
 14079                           
 14080                           ;Buzzer_B1.c: 31: } else {
 14081  17D7  0008               	return
 14082  17D8                     l110:	
 14083                           
 14084                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14085  17D8  19B2               	btfsc	_Buz1^(0+128),3
 14086  17D9  2FEC               	goto	l112
 14087                           
 14088                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14089  17DA  15B2               	bsf	_Buz1^(0+128),3
 14090                           
 14091                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14092  17DB  0020               	movlb	0	; select bank0
 14093  17DC  082C               	movf	setBuz@count,w
 14094  17DD  00AB               	movwf	??_setBuz
 14095  17DE  082B               	movf	??_setBuz,w
 14096  17DF  0021               	movlb	1	; select bank1
 14097  17E0  00B6               	movwf	(_Buz1^(0+128)+4)
 14098                           
 14099                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14100  17E1  0020               	movlb	0	; select bank0
 14101  17E2  082A               	movf	setBuz@time+1,w
 14102  17E3  0021               	movlb	1	; select bank1
 14103  17E4  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 14104  17E5  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 14105  17E6  0020               	movlb	0	; select bank0
 14106  17E7  0829               	movf	setBuz@time,w
 14107  17E8  0021               	movlb	1	; select bank1
 14108  17E9  01BA               	clrf	(_Buz1^(0+128)+8)
 14109  17EA  07BA               	addwf	(_Buz1^(0+128)+8),f
 14110                           
 14111                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14112  17EB  0008               	return
 14113  17EC                     l112:	
 14114  17EC  1A32               	btfsc	_Buz1^(0+128),4
 14115  17ED  0008               	return
 14116                           
 14117                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14118  17EE  1632               	bsf	_Buz1^(0+128),4
 14119                           
 14120                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14121  17EF  0020               	movlb	0	; select bank0
 14122  17F0  082C               	movf	setBuz@count,w
 14123  17F1  00AB               	movwf	??_setBuz
 14124  17F2  082B               	movf	??_setBuz,w
 14125  17F3  0021               	movlb	1	; select bank1
 14126  17F4  00B7               	movwf	(_Buz1^(0+128)+5)
 14127                           
 14128                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14129  17F5  0020               	movlb	0	; select bank0
 14130  17F6  082A               	movf	setBuz@time+1,w
 14131  17F7  0021               	movlb	1	; select bank1
 14132  17F8  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 14133  17F9  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 14134  17FA  0020               	movlb	0	; select bank0
 14135  17FB  0829               	movf	setBuz@time,w
 14136  17FC  0021               	movlb	1	; select bank1
 14137  17FD  01BC               	clrf	(_Buz1^(0+128)+10)
 14138  17FE  07BC               	addwf	(_Buz1^(0+128)+10),f
 14139  17FF  0008               	return
 14140  1800                     __end_of_setBuz:	
 14141                           
 14142                           	psect	text87
 14143  1753                     __ptext87:	
 14144 ;; *************** function ___awdiv *****************
 14145 ;; Defined at:
 14146 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  divisor         2    0[BANK0 ] int 
 14149 ;;  dividend        2    2[BANK0 ] int 
 14150 ;; Auto vars:     Size  Location     Type
 14151 ;;  quotient        2    7[BANK0 ] int 
 14152 ;;  sign            1    6[BANK0 ] unsigned char 
 14153 ;;  counter         1    5[BANK0 ] unsigned char 
 14154 ;; Return value:  Size  Location     Type
 14155 ;;                  2    0[BANK0 ] int 
 14156 ;; Registers used:
 14157 ;;		wreg, status,2, status,0
 14158 ;; Tracked objects:
 14159 ;;		On entry : 0/0
 14160 ;;		On exit  : 0/0
 14161 ;;		Unchanged: 0/0
 14162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;Total ram usage:        9 bytes
 14168 ;; Hardware stack levels used:    1
 14169 ;; Hardware stack levels required when called:    5
 14170 ;; This function calls:
 14171 ;;		Nothing
 14172 ;; This function is called by:
 14173 ;;		_setBuz
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           
 14178                           ;psect for function ___awdiv
 14179  1753                     ___awdiv:	
 14180                           
 14181                           ;incstack = 0
 14182                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14183  1753  0020               	movlb	0	; select bank0
 14184  1754  01A6               	clrf	___awdiv@sign
 14185  1755  1FA1               	btfss	___awdiv@divisor+1,7
 14186  1756  2F5E               	goto	l8073
 14187  1757  09A0               	comf	___awdiv@divisor,f
 14188  1758  09A1               	comf	___awdiv@divisor+1,f
 14189  1759  0AA0               	incf	___awdiv@divisor,f
 14190  175A  1903               	skipnz
 14191  175B  0AA1               	incf	___awdiv@divisor+1,f
 14192  175C  01A6               	clrf	___awdiv@sign
 14193  175D  0AA6               	incf	___awdiv@sign,f
 14194  175E                     l8073:	
 14195  175E  1FA3               	btfss	___awdiv@dividend+1,7
 14196  175F  2F69               	goto	l8079
 14197  1760  09A2               	comf	___awdiv@dividend,f
 14198  1761  09A3               	comf	___awdiv@dividend+1,f
 14199  1762  0AA2               	incf	___awdiv@dividend,f
 14200  1763  1903               	skipnz
 14201  1764  0AA3               	incf	___awdiv@dividend+1,f
 14202  1765  3001               	movlw	1
 14203  1766  00A4               	movwf	??___awdiv
 14204  1767  0824               	movf	??___awdiv,w
 14205  1768  06A6               	xorwf	___awdiv@sign,f
 14206  1769                     l8079:	
 14207  1769  01A7               	clrf	___awdiv@quotient
 14208  176A  01A8               	clrf	___awdiv@quotient+1
 14209  176B  0821               	movf	___awdiv@divisor+1,w
 14210  176C  0420               	iorwf	___awdiv@divisor,w
 14211  176D  1903               	skipnz
 14212  176E  2F98               	goto	l8101
 14213  176F  01A5               	clrf	___awdiv@counter
 14214  1770  0AA5               	incf	___awdiv@counter,f
 14215  1771                     l8089:	
 14216  1771  1BA1               	btfsc	___awdiv@divisor+1,7
 14217  1772  2F7D               	goto	l8091
 14218  1773  3001               	movlw	1
 14219  1774                     u8045:	
 14220  1774  35A0               	lslf	___awdiv@divisor,f
 14221  1775  0DA1               	rlf	___awdiv@divisor+1,f
 14222  1776  0B89               	decfsz	9,f
 14223  1777  2F74               	goto	u8045
 14224  1778  3001               	movlw	1
 14225  1779  00A4               	movwf	??___awdiv
 14226  177A  0824               	movf	??___awdiv,w
 14227  177B  07A5               	addwf	___awdiv@counter,f
 14228  177C  2F71               	goto	l8089
 14229  177D                     l8091:	
 14230  177D  3001               	movlw	1
 14231  177E                     u8065:	
 14232  177E  35A7               	lslf	___awdiv@quotient,f
 14233  177F  0DA8               	rlf	___awdiv@quotient+1,f
 14234  1780  0B89               	decfsz	9,f
 14235  1781  2F7E               	goto	u8065
 14236  1782  0821               	movf	___awdiv@divisor+1,w
 14237  1783  0223               	subwf	___awdiv@dividend+1,w
 14238  1784  1D03               	skipz
 14239  1785  2F88               	goto	u8075
 14240  1786  0820               	movf	___awdiv@divisor,w
 14241  1787  0222               	subwf	___awdiv@dividend,w
 14242  1788                     u8075:	
 14243  1788  1C03               	skipc
 14244  1789  2F8F               	goto	l8097
 14245  178A  0820               	movf	___awdiv@divisor,w
 14246  178B  02A2               	subwf	___awdiv@dividend,f
 14247  178C  0821               	movf	___awdiv@divisor+1,w
 14248  178D  3BA3               	subwfb	___awdiv@dividend+1,f
 14249  178E  1427               	bsf	___awdiv@quotient,0
 14250  178F                     l8097:	
 14251  178F  3001               	movlw	1
 14252  1790                     u8085:	
 14253  1790  36A1               	lsrf	___awdiv@divisor+1,f
 14254  1791  0CA0               	rrf	___awdiv@divisor,f
 14255  1792  0B89               	decfsz	9,f
 14256  1793  2F90               	goto	u8085
 14257  1794  3001               	movlw	1
 14258  1795  02A5               	subwf	___awdiv@counter,f
 14259  1796  1D03               	btfss	3,2
 14260  1797  2F7D               	goto	l8091
 14261  1798                     l8101:	
 14262  1798  0826               	movf	___awdiv@sign,w
 14263  1799  1903               	btfsc	3,2
 14264  179A  2FA0               	goto	l8105
 14265  179B  09A7               	comf	___awdiv@quotient,f
 14266  179C  09A8               	comf	___awdiv@quotient+1,f
 14267  179D  0AA7               	incf	___awdiv@quotient,f
 14268  179E  1903               	skipnz
 14269  179F  0AA8               	incf	___awdiv@quotient+1,f
 14270  17A0                     l8105:	
 14271  17A0  0828               	movf	___awdiv@quotient+1,w
 14272  17A1  01A1               	clrf	?___awdiv+1
 14273  17A2  07A1               	addwf	?___awdiv+1,f
 14274  17A3  0827               	movf	___awdiv@quotient,w
 14275  17A4  01A0               	clrf	?___awdiv
 14276  17A5  07A0               	addwf	?___awdiv,f
 14277  17A6  0008               	return
 14278  17A7                     __end_of___awdiv:	
 14279                           
 14280                           	psect	text88
 14281  1EDA                     __ptext88:	
 14282 ;; *************** function _DelayOff_Initialization *****************
 14283 ;; Defined at:
 14284 ;;		line 26 in file "../src/DelayOff_B1.c"
 14285 ;; Parameters:    Size  Location     Type
 14286 ;;		None
 14287 ;; Auto vars:     Size  Location     Type
 14288 ;;		None
 14289 ;; Return value:  Size  Location     Type
 14290 ;;		None               void
 14291 ;; Registers used:
 14292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14293 ;; Tracked objects:
 14294 ;;		On entry : 0/0
 14295 ;;		On exit  : 0/0
 14296 ;;		Unchanged: 0/0
 14297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;Total ram usage:        0 bytes
 14303 ;; Hardware stack levels used:    1
 14304 ;; Hardware stack levels required when called:    7
 14305 ;; This function calls:
 14306 ;;		_DlyOff_Initialization
 14307 ;; This function is called by:
 14308 ;;		_main
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           
 14313                           ;psect for function _DelayOff_Initialization
 14314  1EDA                     _DelayOff_Initialization:	
 14315                           
 14316                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14317                           
 14318                           ;incstack = 0
 14319                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14320  1EDA  3001               	movlw	1
 14321  1EDB  319E  26AD  319E   	fcall	_DlyOff_Initialization
 14322                           
 14323                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14324  1EDE  3002               	movlw	2
 14325  1EDF  319E  26AD  319E   	fcall	_DlyOff_Initialization
 14326                           
 14327                           ;DelayOff_B1.c: 36: DlyOff_Initialization(3);
 14328  1EE2  3003               	movlw	3
 14329  1EE3  319E  26AD         	fcall	_DlyOff_Initialization
 14330  1EE5  0008               	return
 14331  1EE6                     __end_of_DelayOff_Initialization:	
 14332                           
 14333                           	psect	text89
 14334  1EAD                     __ptext89:	
 14335 ;; *************** function _DlyOff_Initialization *****************
 14336 ;; Defined at:
 14337 ;;		line 56 in file "../src/DelayOff_B1.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  sw              1    wreg     unsigned char 
 14340 ;; Auto vars:     Size  Location     Type
 14341 ;;  sw              1    2[BANK0 ] unsigned char 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;		None               void
 14344 ;; Registers used:
 14345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;Total ram usage:        1 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    6
 14358 ;; This function calls:
 14359 ;;		_DelayOffPointSelect
 14360 ;; This function is called by:
 14361 ;;		_DelayOff_Initialization
 14362 ;; This function uses a non-reentrant model
 14363 ;;
 14364                           
 14365                           
 14366                           ;psect for function _DlyOff_Initialization
 14367  1EAD                     _DlyOff_Initialization:	
 14368                           
 14369                           ;incstack = 0
 14370                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14371                           ;DlyOff_Initialization@sw stored from wreg
 14372  1EAD  0020               	movlb	0	; select bank0
 14373  1EAE  00A2               	movwf	DlyOff_Initialization@sw
 14374                           
 14375                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14376  1EAF  0822               	movf	DlyOff_Initialization@sw,w
 14377  1EB0  3191  21D2         	fcall	_DelayOffPointSelect
 14378                           
 14379                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14380  1EB2  0872               	movf	_DelayOff,w
 14381  1EB3  0086               	movwf	6
 14382  1EB4  0187               	clrf	7
 14383  1EB5  1401               	bsf	1,0
 14384  1EB6  0008               	return
 14385  1EB7                     __end_of_DlyOff_Initialization:	
 14386                           
 14387                           	psect	text90
 14388  11D2                     __ptext90:	
 14389 ;; *************** function _DelayOffPointSelect *****************
 14390 ;; Defined at:
 14391 ;;		line 7 in file "../src/DelayOff_B1.c"
 14392 ;; Parameters:    Size  Location     Type
 14393 ;;  sw              1    wreg     unsigned char 
 14394 ;; Auto vars:     Size  Location     Type
 14395 ;;  sw              1    1[BANK0 ] unsigned char 
 14396 ;; Return value:  Size  Location     Type
 14397 ;;		None               void
 14398 ;; Registers used:
 14399 ;;		wreg
 14400 ;; Tracked objects:
 14401 ;;		On entry : 0/0
 14402 ;;		On exit  : 0/0
 14403 ;;		Unchanged: 0/0
 14404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14409 ;;Total ram usage:        2 bytes
 14410 ;; Hardware stack levels used:    1
 14411 ;; Hardware stack levels required when called:    5
 14412 ;; This function calls:
 14413 ;;		Nothing
 14414 ;; This function is called by:
 14415 ;;		_DlyOff_Initialization
 14416 ;;		_DlyOff_Main
 14417 ;;		_setDelayOff_GO
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           
 14422                           ;psect for function _DelayOffPointSelect
 14423  11D2                     _DelayOffPointSelect:	
 14424                           
 14425                           ;incstack = 0
 14426                           ; Regs used in _DelayOffPointSelect: [wreg]
 14427                           ;DelayOffPointSelect@sw stored from wreg
 14428  11D2  0020               	movlb	0	; select bank0
 14429  11D3  00A1               	movwf	DelayOffPointSelect@sw
 14430                           
 14431                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14432  11D4  0821               	movf	DelayOffPointSelect@sw,w
 14433  11D5  3A01               	xorlw	1
 14434  11D6  1D03               	skipz
 14435  11D7  29DD               	goto	l7997
 14436                           
 14437                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14438  11D8  30E7               	movlw	_DlySw1& (0+255)
 14439  11D9  00A0               	movwf	??_DelayOffPointSelect
 14440  11DA  0820               	movf	??_DelayOffPointSelect,w
 14441  11DB  00F2               	movwf	_DelayOff
 14442                           
 14443                           ;DelayOff_B1.c: 11: }
 14444  11DC  0008               	return
 14445  11DD                     l7997:	
 14446                           
 14447                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14448  11DD  0821               	movf	DelayOffPointSelect@sw,w
 14449  11DE  3A02               	xorlw	2
 14450  11DF  1D03               	skipz
 14451  11E0  29E6               	goto	l8001
 14452                           
 14453                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14454  11E1  30E9               	movlw	_DlySw2& (0+255)
 14455  11E2  00A0               	movwf	??_DelayOffPointSelect
 14456  11E3  0820               	movf	??_DelayOffPointSelect,w
 14457  11E4  00F2               	movwf	_DelayOff
 14458                           
 14459                           ;DelayOff_B1.c: 16: }
 14460  11E5  0008               	return
 14461  11E6                     l8001:	
 14462                           
 14463                           ;DelayOff_B1.c: 19: else if (sw == 3) {
 14464  11E6  0821               	movf	DelayOffPointSelect@sw,w
 14465  11E7  3A03               	xorlw	3
 14466  11E8  1D03               	skipz
 14467  11E9  0008               	return
 14468                           
 14469                           ;DelayOff_B1.c: 20: DelayOff = &DlySw3;
 14470  11EA  30EB               	movlw	_DlySw3& (0+255)
 14471  11EB  00A0               	movwf	??_DelayOffPointSelect
 14472  11EC  0820               	movf	??_DelayOffPointSelect,w
 14473  11ED  00F2               	movwf	_DelayOff
 14474  11EE  0008               	return
 14475  11EF                     __end_of_DelayOffPointSelect:	
 14476                           
 14477                           	psect	text91
 14478  07EB                     __ptext91:	
 14479 ;; *************** function _CC2500_PowerOnInitial *****************
 14480 ;; Defined at:
 14481 ;;		line 122 in file "../src/CC2500_B1.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;		None
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;		None
 14486 ;; Return value:  Size  Location     Type
 14487 ;;		None               void
 14488 ;; Registers used:
 14489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        0 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    8
 14502 ;; This function calls:
 14503 ;;		_CC2500_ClearRXFIFO
 14504 ;;		_CC2500_ClearTXFIFO
 14505 ;;		_CC2500_FrequencyCabr
 14506 ;;		_CC2500_InitPATable
 14507 ;;		_CC2500_InitSetREG
 14508 ;;		_CC2500_PowerRST
 14509 ;;		_CC2500_SIDLEMode
 14510 ;; This function is called by:
 14511 ;;		_main
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515                           
 14516                           ;psect for function _CC2500_PowerOnInitial
 14517  07EB                     _CC2500_PowerOnInitial:	
 14518                           
 14519                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14520                           
 14521                           ;incstack = 0
 14522                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14523  07EB  3195  25F1  3187   	fcall	_CC2500_PowerRST
 14524                           
 14525                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14526  07EE  3193  2386  3187   	fcall	_CC2500_InitSetREG
 14527                           
 14528                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14529  07F1  3192  220C  3187   	fcall	_CC2500_InitPATable
 14530                           
 14531                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14532  07F4  319E  2662  3187   	fcall	_CC2500_ClearTXFIFO
 14533                           
 14534                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14535  07F7  319E  265E  3187   	fcall	_CC2500_ClearRXFIFO
 14536                           
 14537                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14538  07FA  319E  26CE  3187   	fcall	_CC2500_FrequencyCabr
 14539                           
 14540                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14541  07FD  319E  2666         	fcall	_CC2500_SIDLEMode
 14542  07FF  0008               	return
 14543  0800                     __end_of_CC2500_PowerOnInitial:	
 14544                           
 14545                           	psect	text92
 14546  1E66                     __ptext92:	
 14547 ;; *************** function _CC2500_SIDLEMode *****************
 14548 ;; Defined at:
 14549 ;;		line 212 in file "../src/CC2500_B1.c"
 14550 ;; Parameters:    Size  Location     Type
 14551 ;;		None
 14552 ;; Auto vars:     Size  Location     Type
 14553 ;;		None
 14554 ;; Return value:  Size  Location     Type
 14555 ;;		None               void
 14556 ;; Registers used:
 14557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14558 ;; Tracked objects:
 14559 ;;		On entry : 0/0
 14560 ;;		On exit  : 0/0
 14561 ;;		Unchanged: 0/0
 14562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;Total ram usage:        0 bytes
 14568 ;; Hardware stack levels used:    1
 14569 ;; Hardware stack levels required when called:    7
 14570 ;; This function calls:
 14571 ;;		_CC2500_WriteCommand
 14572 ;; This function is called by:
 14573 ;;		_CC2500_PowerOnInitial
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           
 14578                           ;psect for function _CC2500_SIDLEMode
 14579  1E66                     _CC2500_SIDLEMode:	
 14580                           
 14581                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14582                           
 14583                           ;incstack = 0
 14584                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14585  1E66  3036               	movlw	54
 14586  1E67  3191  214D         	fcall	_CC2500_WriteCommand
 14587  1E69  0008               	return
 14588  1E6A                     __end_of_CC2500_SIDLEMode:	
 14589                           
 14590                           	psect	text93
 14591  15F1                     __ptext93:	
 14592 ;; *************** function _CC2500_PowerRST *****************
 14593 ;; Defined at:
 14594 ;;		line 135 in file "../src/CC2500_B1.c"
 14595 ;; Parameters:    Size  Location     Type
 14596 ;;		None
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;		None
 14599 ;; Return value:  Size  Location     Type
 14600 ;;		None               void
 14601 ;; Registers used:
 14602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14612 ;;Total ram usage:        1 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    6
 14615 ;; This function calls:
 14616 ;;		_CC2500_WriteByte
 14617 ;;		_DelayTime_1us
 14618 ;;		_Timeout_Counter
 14619 ;;		_set_TimeoutCleared
 14620 ;; This function is called by:
 14621 ;;		_CC2500_PowerOnInitial
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           
 14626                           ;psect for function _CC2500_PowerRST
 14627  15F1                     _CC2500_PowerRST:	
 14628                           
 14629                           ;CC2500_B1.c: 136: RC1 = 0;
 14630                           
 14631                           ;incstack = 0
 14632                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14633  15F1  0020               	movlb	0	; select bank0
 14634  15F2  108E               	bcf	14,1	;volatile
 14635                           
 14636                           ;CC2500_B1.c: 137: RC0 = 0;
 14637  15F3  100E               	bcf	14,0	;volatile
 14638                           
 14639                           ;CC2500_B1.c: 138: RC4 = 1;
 14640  15F4  160E               	bsf	14,4	;volatile
 14641                           
 14642                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14643  15F5  300A               	movlw	10
 14644  15F6  00A0               	movwf	DelayTime_1us@count
 14645  15F7  3000               	movlw	0
 14646  15F8  00A1               	movwf	DelayTime_1us@count+1
 14647  15F9  3193  2311  3195   	fcall	_DelayTime_1us
 14648                           
 14649                           ;CC2500_B1.c: 140: RC4 = 0;
 14650  15FC  0020               	movlb	0	; select bank0
 14651  15FD  120E               	bcf	14,4	;volatile
 14652                           
 14653                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14654  15FE  300A               	movlw	10
 14655  15FF  00A0               	movwf	DelayTime_1us@count
 14656  1600  3000               	movlw	0
 14657  1601  00A1               	movwf	DelayTime_1us@count+1
 14658  1602  3193  2311  3195   	fcall	_DelayTime_1us
 14659                           
 14660                           ;CC2500_B1.c: 142: RC4 = 1;
 14661  1605  0020               	movlb	0	; select bank0
 14662  1606  160E               	bsf	14,4	;volatile
 14663                           
 14664                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14665  1607  3028               	movlw	40
 14666  1608  00A0               	movwf	DelayTime_1us@count
 14667  1609  3000               	movlw	0
 14668  160A  00A1               	movwf	DelayTime_1us@count+1
 14669  160B  3193  2311  3195   	fcall	_DelayTime_1us
 14670                           
 14671                           ;CC2500_B1.c: 144: RC4 = 0;
 14672  160E  0020               	movlb	0	; select bank0
 14673  160F  120E               	bcf	14,4	;volatile
 14674                           
 14675                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14676  1610  3030               	movlw	48
 14677  1611  00A6               	movwf	??_CC2500_PowerRST
 14678  1612  0826               	movf	??_CC2500_PowerRST,w
 14679  1613  00F5               	movwf	_SPI0Buffer
 14680                           
 14681                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14682  1614  2E18               	goto	l8985
 14683  1615                     l8983:	
 14684                           
 14685                           ;CC2500_B1.c: 147: Timeout_Counter();
 14686  1615  3190  20F3  3195   	fcall	_Timeout_Counter
 14687  1618                     l8985:	
 14688  1618  0020               	movlb	0	; select bank0
 14689  1619  1D0E               	btfss	14,2	;volatile
 14690  161A  2E1E               	goto	l8989
 14691  161B  0021               	movlb	1	; select bank1
 14692  161C  1D2F               	btfss	(_myMain^(0+128)+15),2
 14693  161D  2E15               	goto	l8983
 14694  161E                     l8989:	
 14695                           
 14696                           ;CC2500_B1.c: 148: };
 14697                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14698  161E  319E  266E  3195   	fcall	_set_TimeoutCleared
 14699                           
 14700                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14701  1621  3190  20DF  3195   	fcall	_CC2500_WriteByte
 14702                           
 14703                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14704  1624  2E28               	goto	l8995
 14705  1625                     l8993:	
 14706                           
 14707                           ;CC2500_B1.c: 152: Timeout_Counter();
 14708  1625  3190  20F3  3195   	fcall	_Timeout_Counter
 14709  1628                     l8995:	
 14710  1628  0020               	movlb	0	; select bank0
 14711  1629  1D0E               	btfss	14,2	;volatile
 14712  162A  2E2E               	goto	l8999
 14713  162B  0021               	movlb	1	; select bank1
 14714  162C  1D2F               	btfss	(_myMain^(0+128)+15),2
 14715  162D  2E25               	goto	l8993
 14716  162E                     l8999:	
 14717                           
 14718                           ;CC2500_B1.c: 153: };
 14719                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14720  162E  319E  266E         	fcall	_set_TimeoutCleared
 14721                           
 14722                           ;CC2500_B1.c: 155: RC0 = 0;
 14723  1630  0020               	movlb	0	; select bank0
 14724  1631  100E               	bcf	14,0	;volatile
 14725                           
 14726                           ;CC2500_B1.c: 156: RC4 = 1;
 14727  1632  160E               	bsf	14,4	;volatile
 14728  1633  0008               	return
 14729  1634                     __end_of_CC2500_PowerRST:	
 14730                           
 14731                           	psect	text94
 14732  1386                     __ptext94:	
 14733 ;; *************** function _CC2500_InitSetREG *****************
 14734 ;; Defined at:
 14735 ;;		line 162 in file "../src/CC2500_B1.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;		None
 14738 ;; Auto vars:     Size  Location     Type
 14739 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14740 ;;  temp2           1    7[BANK0 ] unsigned char 
 14741 ;;  temp1           1    6[BANK0 ] unsigned char 
 14742 ;; Return value:  Size  Location     Type
 14743 ;;		None               void
 14744 ;; Registers used:
 14745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14746 ;; Tracked objects:
 14747 ;;		On entry : 0/0
 14748 ;;		On exit  : 0/0
 14749 ;;		Unchanged: 0/0
 14750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14752 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;Total ram usage:        4 bytes
 14756 ;; Hardware stack levels used:    1
 14757 ;; Hardware stack levels required when called:    7
 14758 ;; This function calls:
 14759 ;;		_CC2500_WriteREG
 14760 ;; This function is called by:
 14761 ;;		_CC2500_PowerOnInitial
 14762 ;; This function uses a non-reentrant model
 14763 ;;
 14764                           
 14765                           
 14766                           ;psect for function _CC2500_InitSetREG
 14767  1386                     _CC2500_InitSetREG:	
 14768                           
 14769                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14770                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14771                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14772                           
 14773                           ;incstack = 0
 14774                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14775  1386  0020               	movlb	0	; select bank0
 14776  1387  01A8               	clrf	CC2500_InitSetREG@loop_c
 14777  1388                     L10:	
 14778  1388  302F               	movlw	47
 14779  1389  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14780  138A  1803               	btfsc	3,0
 14781  138B  0008               	return
 14782                           
 14783                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14784  138C  0828               	movf	CC2500_InitSetREG@loop_c,w
 14785  138D  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14786  138E  0084               	movwf	4
 14787  138F  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14788  1390  1803               	skipnc
 14789  1391  3E01               	addlw	1
 14790  1392  0085               	movwf	5
 14791  1393  0800               	movf	0,w	;code access
 14792  1394  00A5               	movwf	??_CC2500_InitSetREG
 14793  1395  0825               	movf	??_CC2500_InitSetREG,w
 14794  1396  00A6               	movwf	CC2500_InitSetREG@temp1
 14795                           
 14796                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14797  1397  0828               	movf	CC2500_InitSetREG@loop_c,w
 14798  1398  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14799  1399  0084               	movwf	4
 14800  139A  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14801  139B  1803               	skipnc
 14802  139C  3E01               	addlw	1
 14803  139D  0085               	movwf	5
 14804  139E  0800               	movf	0,w	;code access
 14805  139F  00A5               	movwf	??_CC2500_InitSetREG
 14806  13A0  0825               	movf	??_CC2500_InitSetREG,w
 14807  13A1  00A7               	movwf	CC2500_InitSetREG@temp2
 14808                           
 14809                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14810  13A2  0827               	movf	CC2500_InitSetREG@temp2,w
 14811  13A3  00A5               	movwf	??_CC2500_InitSetREG
 14812  13A4  0825               	movf	??_CC2500_InitSetREG,w
 14813  13A5  00A2               	movwf	CC2500_WriteREG@value
 14814  13A6  0826               	movf	CC2500_InitSetREG@temp1,w
 14815  13A7  3192  228A  3193   	fcall	_CC2500_WriteREG
 14816  13AA  3001               	movlw	1
 14817  13AB  0020               	movlb	0	; select bank0
 14818  13AC  00A5               	movwf	??_CC2500_InitSetREG
 14819  13AD  0825               	movf	??_CC2500_InitSetREG,w
 14820  13AE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14821  13AF  2B88               	goto	L10
 14822  13B0                     __end_of_CC2500_InitSetREG:	
 14823                           
 14824                           	psect	text95
 14825  120C                     __ptext95:	
 14826 ;; *************** function _CC2500_InitPATable *****************
 14827 ;; Defined at:
 14828 ;;		line 177 in file "../src/CC2500_B1.c"
 14829 ;; Parameters:    Size  Location     Type
 14830 ;;		None
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14833 ;;  temp            1    6[BANK0 ] unsigned char 
 14834 ;; Return value:  Size  Location     Type
 14835 ;;		None               void
 14836 ;; Registers used:
 14837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14838 ;; Tracked objects:
 14839 ;;		On entry : 0/0
 14840 ;;		On exit  : 0/0
 14841 ;;		Unchanged: 0/0
 14842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;Total ram usage:        3 bytes
 14848 ;; Hardware stack levels used:    1
 14849 ;; Hardware stack levels required when called:    7
 14850 ;; This function calls:
 14851 ;;		_CC2500_WriteREG
 14852 ;; This function is called by:
 14853 ;;		_CC2500_PowerOnInitial
 14854 ;; This function uses a non-reentrant model
 14855 ;;
 14856                           
 14857                           
 14858                           ;psect for function _CC2500_InitPATable
 14859  120C                     _CC2500_InitPATable:	
 14860                           
 14861                           ;CC2500_B1.c: 178: unsigned char loop_d;
 14862                           ;CC2500_B1.c: 179: unsigned char temp;
 14863                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 14864                           
 14865                           ;incstack = 0
 14866                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14867  120C  0020               	movlb	0	; select bank0
 14868  120D  01A7               	clrf	CC2500_InitPATable@loop_d
 14869  120E                     L11:	
 14870  120E  3008               	movlw	8
 14871  120F  0227               	subwf	CC2500_InitPATable@loop_d,w
 14872  1210  1803               	btfsc	3,0
 14873  1211  0008               	return
 14874                           
 14875                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 14876  1212  0827               	movf	CC2500_InitPATable@loop_d,w
 14877  1213  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14878  1214  0084               	movwf	4
 14879  1215  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14880  1216  1803               	skipnc
 14881  1217  3E01               	addlw	1
 14882  1218  0085               	movwf	5
 14883  1219  0800               	movf	0,w	;code access
 14884  121A  00A5               	movwf	??_CC2500_InitPATable
 14885  121B  0825               	movf	??_CC2500_InitPATable,w
 14886  121C  00A6               	movwf	CC2500_InitPATable@temp
 14887                           
 14888                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 14889  121D  0826               	movf	CC2500_InitPATable@temp,w
 14890  121E  00A5               	movwf	??_CC2500_InitPATable
 14891  121F  0825               	movf	??_CC2500_InitPATable,w
 14892  1220  00A2               	movwf	CC2500_WriteREG@value
 14893  1221  303E               	movlw	62
 14894  1222  3192  228A  3192   	fcall	_CC2500_WriteREG
 14895  1225  3001               	movlw	1
 14896  1226  0020               	movlb	0	; select bank0
 14897  1227  00A5               	movwf	??_CC2500_InitPATable
 14898  1228  0825               	movf	??_CC2500_InitPATable,w
 14899  1229  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14900  122A  2A0E               	goto	L11
 14901  122B                     __end_of_CC2500_InitPATable:	
 14902                           
 14903                           	psect	text96
 14904  128A                     __ptext96:	
 14905 ;; *************** function _CC2500_WriteREG *****************
 14906 ;; Defined at:
 14907 ;;		line 254 in file "../src/CC2500_B1.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  w_addr          1    wreg     unsigned char 
 14910 ;;  value           1    2[BANK0 ] unsigned char 
 14911 ;; Auto vars:     Size  Location     Type
 14912 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14913 ;; Return value:  Size  Location     Type
 14914 ;;		None               void
 14915 ;; Registers used:
 14916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14917 ;; Tracked objects:
 14918 ;;		On entry : 0/0
 14919 ;;		On exit  : 0/0
 14920 ;;		Unchanged: 0/0
 14921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14922 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;Total ram usage:        3 bytes
 14927 ;; Hardware stack levels used:    1
 14928 ;; Hardware stack levels required when called:    6
 14929 ;; This function calls:
 14930 ;;		_CC2500_WriteByte
 14931 ;;		_Timeout_Counter
 14932 ;;		_set_TimeoutCleared
 14933 ;; This function is called by:
 14934 ;;		_CC2500_InitSetREG
 14935 ;;		_CC2500_InitPATable
 14936 ;; This function uses a non-reentrant model
 14937 ;;
 14938                           
 14939                           
 14940                           ;psect for function _CC2500_WriteREG
 14941  128A                     _CC2500_WriteREG:	
 14942                           
 14943                           ;incstack = 0
 14944                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14945                           ;CC2500_WriteREG@w_addr stored from wreg
 14946  128A  0020               	movlb	0	; select bank0
 14947  128B  00A4               	movwf	CC2500_WriteREG@w_addr
 14948                           
 14949                           ;CC2500_B1.c: 255: RC4 = 0;
 14950  128C  120E               	bcf	14,4	;volatile
 14951                           
 14952                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 14953  128D  0824               	movf	CC2500_WriteREG@w_addr,w
 14954  128E  00A3               	movwf	??_CC2500_WriteREG
 14955  128F  0823               	movf	??_CC2500_WriteREG,w
 14956  1290  00F5               	movwf	_SPI0Buffer
 14957                           
 14958                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 14959  1291  2A95               	goto	l8687
 14960  1292                     l8685:	
 14961                           
 14962                           ;CC2500_B1.c: 258: Timeout_Counter();
 14963  1292  3190  20F3  3192   	fcall	_Timeout_Counter
 14964  1295                     l8687:	
 14965  1295  0020               	movlb	0	; select bank0
 14966  1296  1D0E               	btfss	14,2	;volatile
 14967  1297  2A9B               	goto	l8691
 14968  1298  0021               	movlb	1	; select bank1
 14969  1299  1D2F               	btfss	(_myMain^(0+128)+15),2
 14970  129A  2A92               	goto	l8685
 14971  129B                     l8691:	
 14972                           
 14973                           ;CC2500_B1.c: 259: };
 14974                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 14975  129B  319E  266E  3192   	fcall	_set_TimeoutCleared
 14976                           
 14977                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 14978  129E  3190  20DF  3192   	fcall	_CC2500_WriteByte
 14979                           
 14980                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 14981  12A1  0020               	movlb	0	; select bank0
 14982  12A2  0822               	movf	CC2500_WriteREG@value,w
 14983  12A3  00A3               	movwf	??_CC2500_WriteREG
 14984  12A4  0823               	movf	??_CC2500_WriteREG,w
 14985  12A5  00F5               	movwf	_SPI0Buffer
 14986                           
 14987                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 14988  12A6  3190  20DF         	fcall	_CC2500_WriteByte
 14989                           
 14990                           ;CC2500_B1.c: 265: RC4 = 1;
 14991  12A8  0020               	movlb	0	; select bank0
 14992  12A9  160E               	bsf	14,4	;volatile
 14993  12AA  0008               	return
 14994  12AB                     __end_of_CC2500_WriteREG:	
 14995                           
 14996                           	psect	text97
 14997  1ECE                     __ptext97:	
 14998 ;; *************** function _CC2500_FrequencyCabr *****************
 14999 ;; Defined at:
 15000 ;;		line 204 in file "../src/CC2500_B1.c"
 15001 ;; Parameters:    Size  Location     Type
 15002 ;;		None
 15003 ;; Auto vars:     Size  Location     Type
 15004 ;;		None
 15005 ;; Return value:  Size  Location     Type
 15006 ;;		None               void
 15007 ;; Registers used:
 15008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15009 ;; Tracked objects:
 15010 ;;		On entry : 0/0
 15011 ;;		On exit  : 0/0
 15012 ;;		Unchanged: 0/0
 15013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;Total ram usage:        0 bytes
 15019 ;; Hardware stack levels used:    1
 15020 ;; Hardware stack levels required when called:    7
 15021 ;; This function calls:
 15022 ;;		_CC2500_WriteCommand
 15023 ;;		_DelayTime_1us
 15024 ;; This function is called by:
 15025 ;;		_CC2500_PowerOnInitial
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _CC2500_FrequencyCabr
 15031  1ECE                     _CC2500_FrequencyCabr:	
 15032                           
 15033                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15034                           
 15035                           ;incstack = 0
 15036                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15037  1ECE  3033               	movlw	51
 15038  1ECF  3191  214D  319E   	fcall	_CC2500_WriteCommand
 15039                           
 15040                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15041  1ED2  30E8               	movlw	232
 15042  1ED3  0020               	movlb	0	; select bank0
 15043  1ED4  00A0               	movwf	DelayTime_1us@count
 15044  1ED5  3003               	movlw	3
 15045  1ED6  00A1               	movwf	DelayTime_1us@count+1
 15046  1ED7  3193  2311         	fcall	_DelayTime_1us
 15047  1ED9  0008               	return
 15048  1EDA                     __end_of_CC2500_FrequencyCabr:	
 15049                           
 15050                           	psect	text98
 15051  1311                     __ptext98:	
 15052 ;; *************** function _DelayTime_1us *****************
 15053 ;; Defined at:
 15054 ;;		line 323 in file "../src/CC2500_B1.c"
 15055 ;; Parameters:    Size  Location     Type
 15056 ;;  count           2    0[BANK0 ] int 
 15057 ;; Auto vars:     Size  Location     Type
 15058 ;;  j               2    4[BANK0 ] unsigned int 
 15059 ;;  i               2    2[BANK0 ] unsigned int 
 15060 ;; Return value:  Size  Location     Type
 15061 ;;		None               void
 15062 ;; Registers used:
 15063 ;;		wreg, status,2
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 0/0
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15069 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;Total ram usage:        6 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; Hardware stack levels required when called:    5
 15076 ;; This function calls:
 15077 ;;		Nothing
 15078 ;; This function is called by:
 15079 ;;		_CC2500_PowerRST
 15080 ;;		_CC2500_FrequencyCabr
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           
 15085                           ;psect for function _DelayTime_1us
 15086  1311                     _DelayTime_1us:	
 15087                           
 15088                           ;CC2500_B1.c: 324: unsigned int i, j;
 15089                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15090                           
 15091                           ;incstack = 0
 15092                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15093  1311  3001               	movlw	1
 15094  1312  0020               	movlb	0	; select bank0
 15095  1313  00A2               	movwf	DelayTime_1us@i
 15096  1314  3000               	movlw	0
 15097  1315  00A3               	movwf	DelayTime_1us@i+1
 15098  1316                     l402:	
 15099  1316  0821               	movf	DelayTime_1us@count+1,w
 15100  1317  0223               	subwf	DelayTime_1us@i+1,w
 15101  1318  1D03               	skipz
 15102  1319  2B1C               	goto	u8895
 15103  131A  0820               	movf	DelayTime_1us@count,w
 15104  131B  0222               	subwf	DelayTime_1us@i,w
 15105  131C                     u8895:	
 15106  131C  1803               	btfsc	3,0
 15107  131D  0008               	return
 15108                           
 15109                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15110  131E  01A4               	clrf	DelayTime_1us@j
 15111  131F  01A5               	clrf	DelayTime_1us@j+1
 15112  1320  3000               	movlw	0
 15113  1321  0225               	subwf	DelayTime_1us@j+1,w
 15114  1322  3002               	movlw	2
 15115  1323  1903               	skipnz
 15116  1324  0224               	subwf	DelayTime_1us@j,w
 15117  1325  1803               	btfsc	3,0
 15118  1326  2B32               	goto	l8679
 15119  1327                     l8677:	
 15120  1327  3001               	movlw	1
 15121  1328  07A4               	addwf	DelayTime_1us@j,f
 15122  1329  3000               	movlw	0
 15123  132A  3DA5               	addwfc	DelayTime_1us@j+1,f
 15124  132B  3000               	movlw	0
 15125  132C  0225               	subwf	DelayTime_1us@j+1,w
 15126  132D  3002               	movlw	2
 15127  132E  1903               	skipnz
 15128  132F  0224               	subwf	DelayTime_1us@j,w
 15129  1330  1C03               	skipc
 15130  1331  2B27               	goto	l8677
 15131  1332                     l8679:	
 15132  1332  3001               	movlw	1
 15133  1333  07A2               	addwf	DelayTime_1us@i,f
 15134  1334  3000               	movlw	0
 15135  1335  3DA3               	addwfc	DelayTime_1us@i+1,f
 15136  1336  2B16               	goto	l402
 15137  1337                     __end_of_DelayTime_1us:	
 15138                           
 15139                           	psect	text99
 15140  1E62                     __ptext99:	
 15141 ;; *************** function _CC2500_ClearTXFIFO *****************
 15142 ;; Defined at:
 15143 ;;		line 190 in file "../src/CC2500_B1.c"
 15144 ;; Parameters:    Size  Location     Type
 15145 ;;		None
 15146 ;; Auto vars:     Size  Location     Type
 15147 ;;		None
 15148 ;; Return value:  Size  Location     Type
 15149 ;;		None               void
 15150 ;; Registers used:
 15151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15152 ;; Tracked objects:
 15153 ;;		On entry : 0/0
 15154 ;;		On exit  : 0/0
 15155 ;;		Unchanged: 0/0
 15156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;Total ram usage:        0 bytes
 15162 ;; Hardware stack levels used:    1
 15163 ;; Hardware stack levels required when called:    7
 15164 ;; This function calls:
 15165 ;;		_CC2500_WriteCommand
 15166 ;; This function is called by:
 15167 ;;		_CC2500_PowerOnInitial
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171                           
 15172                           ;psect for function _CC2500_ClearTXFIFO
 15173  1E62                     _CC2500_ClearTXFIFO:	
 15174                           
 15175                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15176                           
 15177                           ;incstack = 0
 15178                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15179  1E62  303B               	movlw	59
 15180  1E63  3191  214D         	fcall	_CC2500_WriteCommand
 15181  1E65  0008               	return
 15182  1E66                     __end_of_CC2500_ClearTXFIFO:	
 15183                           
 15184                           	psect	text100
 15185  1E5E                     __ptext100:	
 15186 ;; *************** function _CC2500_ClearRXFIFO *****************
 15187 ;; Defined at:
 15188 ;;		line 197 in file "../src/CC2500_B1.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;		None
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;		None
 15193 ;; Return value:  Size  Location     Type
 15194 ;;		None               void
 15195 ;; Registers used:
 15196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;Total ram usage:        0 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    7
 15209 ;; This function calls:
 15210 ;;		_CC2500_WriteCommand
 15211 ;; This function is called by:
 15212 ;;		_CC2500_PowerOnInitial
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           
 15217                           ;psect for function _CC2500_ClearRXFIFO
 15218  1E5E                     _CC2500_ClearRXFIFO:	
 15219                           
 15220                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15221                           
 15222                           ;incstack = 0
 15223                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15224  1E5E  303A               	movlw	58
 15225  1E5F  3191  214D         	fcall	_CC2500_WriteCommand
 15226  1E61  0008               	return
 15227  1E62                     __end_of_CC2500_ClearRXFIFO:	
 15228                           
 15229                           	psect	text101
 15230  114D                     __ptext101:	
 15231 ;; *************** function _CC2500_WriteCommand *****************
 15232 ;; Defined at:
 15233 ;;		line 288 in file "../src/CC2500_B1.c"
 15234 ;; Parameters:    Size  Location     Type
 15235 ;;  command         1    wreg     unsigned char 
 15236 ;; Auto vars:     Size  Location     Type
 15237 ;;  command         1    3[BANK0 ] unsigned char 
 15238 ;; Return value:  Size  Location     Type
 15239 ;;		None               void
 15240 ;; Registers used:
 15241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15242 ;; Tracked objects:
 15243 ;;		On entry : 0/0
 15244 ;;		On exit  : 0/0
 15245 ;;		Unchanged: 0/0
 15246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;Total ram usage:        2 bytes
 15252 ;; Hardware stack levels used:    1
 15253 ;; Hardware stack levels required when called:    6
 15254 ;; This function calls:
 15255 ;;		_CC2500_WriteByte
 15256 ;;		_Timeout_Counter
 15257 ;;		_set_TimeoutCleared
 15258 ;; This function is called by:
 15259 ;;		_CC2500_TxData
 15260 ;;		_CC2500_ClearTXFIFO
 15261 ;;		_CC2500_ClearRXFIFO
 15262 ;;		_CC2500_FrequencyCabr
 15263 ;;		_CC2500_SIDLEMode
 15264 ;;		_setRF_Main
 15265 ;;		_RF_RxDisable
 15266 ;; This function uses a non-reentrant model
 15267 ;;
 15268                           
 15269                           
 15270                           ;psect for function _CC2500_WriteCommand
 15271  114D                     _CC2500_WriteCommand:	
 15272                           
 15273                           ;incstack = 0
 15274                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15275                           ;CC2500_WriteCommand@command stored from wreg
 15276  114D  0020               	movlb	0	; select bank0
 15277  114E  00A3               	movwf	CC2500_WriteCommand@command
 15278                           
 15279                           ;CC2500_B1.c: 289: RC4 = 0;
 15280  114F  120E               	bcf	14,4	;volatile
 15281                           
 15282                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15283  1150  0823               	movf	CC2500_WriteCommand@command,w
 15284  1151  00A2               	movwf	??_CC2500_WriteCommand
 15285  1152  0822               	movf	??_CC2500_WriteCommand,w
 15286  1153  00F5               	movwf	_SPI0Buffer
 15287                           
 15288                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15289  1154  2958               	goto	l8457
 15290  1155                     l8455:	
 15291                           
 15292                           ;CC2500_B1.c: 293: Timeout_Counter();
 15293  1155  3190  20F3  3191   	fcall	_Timeout_Counter
 15294  1158                     l8457:	
 15295  1158  0020               	movlb	0	; select bank0
 15296  1159  1D0E               	btfss	14,2	;volatile
 15297  115A  295E               	goto	l8461
 15298  115B  0021               	movlb	1	; select bank1
 15299  115C  1D2F               	btfss	(_myMain^(0+128)+15),2
 15300  115D  2955               	goto	l8455
 15301  115E                     l8461:	
 15302                           
 15303                           ;CC2500_B1.c: 294: };
 15304                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15305  115E  319E  266E  3191   	fcall	_set_TimeoutCleared
 15306                           
 15307                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15308  1161  3190  20DF         	fcall	_CC2500_WriteByte
 15309                           
 15310                           ;CC2500_B1.c: 298: RC4 = 1;
 15311  1163  0020               	movlb	0	; select bank0
 15312  1164  160E               	bsf	14,4	;volatile
 15313  1165  0008               	return
 15314  1166                     __end_of_CC2500_WriteCommand:	
 15315                           
 15316                           	psect	text102
 15317  1E6E                     __ptext102:	
 15318 ;; *************** function _set_TimeoutCleared *****************
 15319 ;; Defined at:
 15320 ;;		line 217 in file "../src/Main_B1.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;		None
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;		None
 15325 ;; Return value:  Size  Location     Type
 15326 ;;		None               void
 15327 ;; Registers used:
 15328 ;;		status,2
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;Total ram usage:        0 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    5
 15341 ;; This function calls:
 15342 ;;		Nothing
 15343 ;; This function is called by:
 15344 ;;		_CC2500_TxData
 15345 ;;		_CC2500_RxData
 15346 ;;		_CC2500_PowerRST
 15347 ;;		_CC2500_WriteREG
 15348 ;;		_CC2500_WriteCommand
 15349 ;;		_CC2500_ReadStatus
 15350 ;;		_TouchPower
 15351 ;;		_CC2500_ReadREG
 15352 ;;		_getAD
 15353 ;; This function uses a non-reentrant model
 15354 ;;
 15355                           
 15356                           
 15357                           ;psect for function _set_TimeoutCleared
 15358  1E6E                     _set_TimeoutCleared:	
 15359                           
 15360                           ;Main_B1.c: 218: myMain.Timeout = 0;
 15361                           
 15362                           ;incstack = 0
 15363                           ; Regs used in _set_TimeoutCleared: [status,2]
 15364  1E6E  0021               	movlb	1	; select bank1
 15365  1E6F  112F               	bcf	(_myMain^(0+128)+15),2
 15366                           
 15367                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 15368  1E70  01B0               	clrf	(_myMain^(0+128)+16)
 15369  1E71  01B1               	clrf	((_myMain+1)^(0+128)+16)
 15370  1E72  0008               	return
 15371  1E73                     __end_of_set_TimeoutCleared:	
 15372                           
 15373                           	psect	text103
 15374  10F3                     __ptext103:	
 15375 ;; *************** function _Timeout_Counter *****************
 15376 ;; Defined at:
 15377 ;;		line 208 in file "../src/Main_B1.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;		None
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;		None
 15382 ;; Return value:  Size  Location     Type
 15383 ;;		None               void
 15384 ;; Registers used:
 15385 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;Total ram usage:        0 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; Hardware stack levels required when called:    5
 15398 ;; This function calls:
 15399 ;;		Nothing
 15400 ;; This function is called by:
 15401 ;;		_CC2500_TxData
 15402 ;;		_CC2500_RxData
 15403 ;;		_CC2500_PowerRST
 15404 ;;		_CC2500_WriteREG
 15405 ;;		_CC2500_WriteCommand
 15406 ;;		_CC2500_ReadStatus
 15407 ;;		_TouchPower
 15408 ;;		_CC2500_ReadREG
 15409 ;;		_getAD
 15410 ;; This function uses a non-reentrant model
 15411 ;;
 15412                           
 15413                           
 15414                           ;psect for function _Timeout_Counter
 15415  10F3                     _Timeout_Counter:	
 15416                           
 15417                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 15418                           
 15419                           ;incstack = 0
 15420                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15421  10F3  3001               	movlw	1
 15422  10F4  0021               	movlb	1	; select bank1
 15423  10F5  07B0               	addwf	(_myMain^(0+128)+16),f
 15424  10F6  3000               	movlw	0
 15425  10F7  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 15426                           
 15427                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 15428  10F8  3010               	movlw	16
 15429  10F9  3EA0               	addlw	_myMain& (0+255)
 15430  10FA  0086               	movwf	6
 15431  10FB  0187               	clrf	7
 15432  10FC  3F40               	moviw [0]fsr1
 15433  10FD  3A10               	xorlw	16
 15434  10FE  1D03               	skipz
 15435  10FF  2902               	goto	u8455
 15436  1100  3F41               	moviw [1]fsr1
 15437  1101  3A27               	xorlw	39
 15438  1102                     u8455:	
 15439  1102  1D03               	skipz
 15440  1103  0008               	return
 15441                           
 15442                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 15443  1104  01B0               	clrf	(_myMain^(0+128)+16)
 15444  1105  01B1               	clrf	((_myMain+1)^(0+128)+16)
 15445                           
 15446                           ;Main_B1.c: 212: myMain.Timeout = 1;
 15447  1106  152F               	bsf	(_myMain^(0+128)+15),2
 15448  1107  0008               	return
 15449  1108                     __end_of_Timeout_Counter:	
 15450                           
 15451                           	psect	text104
 15452  10DF                     __ptext104:	
 15453 ;; *************** function _CC2500_WriteByte *****************
 15454 ;; Defined at:
 15455 ;;		line 222 in file "../src/CC2500_B1.c"
 15456 ;; Parameters:    Size  Location     Type
 15457 ;;		None
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;		None               void
 15462 ;; Registers used:
 15463 ;;		wreg, status,2, status,0
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;Total ram usage:        2 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    5
 15476 ;; This function calls:
 15477 ;;		Nothing
 15478 ;; This function is called by:
 15479 ;;		_CC2500_TxData
 15480 ;;		_CC2500_RxData
 15481 ;;		_CC2500_PowerRST
 15482 ;;		_CC2500_WriteREG
 15483 ;;		_CC2500_WriteCommand
 15484 ;;		_CC2500_ReadStatus
 15485 ;;		_CC2500_ReadREG
 15486 ;; This function uses a non-reentrant model
 15487 ;;
 15488                           
 15489                           
 15490                           ;psect for function _CC2500_WriteByte
 15491  10DF                     _CC2500_WriteByte:	
 15492                           
 15493                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15494                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15495                           
 15496                           ;incstack = 0
 15497                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15498  10DF  0020               	movlb	0	; select bank0
 15499  10E0  01A1               	clrf	CC2500_WriteByte@loop_a
 15500  10E1                     L12:	
 15501  10E1  3008               	movlw	8
 15502  10E2  0221               	subwf	CC2500_WriteByte@loop_a,w
 15503  10E3  1803               	btfsc	3,0
 15504  10E4  0008               	return
 15505                           
 15506                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15507  10E5  1FF5               	btfss	_SPI0Buffer,7
 15508  10E6  28E9               	goto	l358
 15509                           
 15510                           ;CC2500_B1.c: 226: RC0 = 1;
 15511  10E7  140E               	bsf	14,0	;volatile
 15512  10E8  28EA               	goto	l359
 15513  10E9                     l358:	
 15514                           
 15515                           ;CC2500_B1.c: 227: else
 15516                           ;CC2500_B1.c: 228: RC0 = 0;
 15517  10E9  100E               	bcf	14,0	;volatile
 15518  10EA                     l359:	
 15519                           
 15520                           ;CC2500_B1.c: 229: RC1 = 1;
 15521  10EA  148E               	bsf	14,1	;volatile
 15522                           
 15523                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15524  10EB  1003               	clrc
 15525  10EC  0DF5               	rlf	_SPI0Buffer,f
 15526                           
 15527                           ;CC2500_B1.c: 231: RC1 = 0;
 15528  10ED  108E               	bcf	14,1	;volatile
 15529  10EE  3001               	movlw	1
 15530  10EF  00A0               	movwf	??_CC2500_WriteByte
 15531  10F0  0820               	movf	??_CC2500_WriteByte,w
 15532  10F1  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15533  10F2  28E1               	goto	L12
 15534  10F3                     __end_of_CC2500_WriteByte:	
 15535                           
 15536                           	psect	text105
 15537  16BE                     __ptext105:	
 15538 ;; *************** function _Buzzer_Main *****************
 15539 ;; Defined at:
 15540 ;;		line 46 in file "../src/Buzzer_B1.c"
 15541 ;; Parameters:    Size  Location     Type
 15542 ;;		None
 15543 ;; Auto vars:     Size  Location     Type
 15544 ;;		None
 15545 ;; Return value:  Size  Location     Type
 15546 ;;		None               void
 15547 ;; Registers used:
 15548 ;;		wreg, status,2, status,0
 15549 ;; Tracked objects:
 15550 ;;		On entry : 0/0
 15551 ;;		On exit  : 0/0
 15552 ;;		Unchanged: 0/0
 15553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;Total ram usage:        1 bytes
 15559 ;; Hardware stack levels used:    1
 15560 ;; Hardware stack levels required when called:    5
 15561 ;; This function calls:
 15562 ;;		Nothing
 15563 ;; This function is called by:
 15564 ;;		_main
 15565 ;; This function uses a non-reentrant model
 15566 ;;
 15567                           
 15568                           
 15569                           ;psect for function _Buzzer_Main
 15570  16BE                     _Buzzer_Main:	
 15571                           
 15572                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15573                           
 15574                           ;incstack = 0
 15575                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15576  16BE  0021               	movlb	1	; select bank1
 15577  16BF  1CB2               	btfss	_Buz1^(0+128),1
 15578  16C0  0008               	return
 15579                           
 15580                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15581  16C1  3001               	movlw	1
 15582  16C2  07B3               	addwf	(_Buz1^(0+128)+1),f
 15583  16C3  3000               	movlw	0
 15584  16C4  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 15585                           
 15586                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15587  16C5  0839               	movf	((_Buz1+1)^(0+128)+6),w
 15588  16C6  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 15589  16C7  1D03               	skipz
 15590  16C8  2ECB               	goto	u10245
 15591  16C9  0838               	movf	(_Buz1^(0+128)+6),w
 15592  16CA  0233               	subwf	(_Buz1^(0+128)+1),w
 15593  16CB                     u10245:	
 15594  16CB  1C03               	skipc
 15595  16CC  0008               	return
 15596                           
 15597                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15598  16CD  01B3               	clrf	(_Buz1^(0+128)+1)
 15599  16CE  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15600                           
 15601                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15602  16CF  12B2               	bcf	_Buz1^(0+128),5
 15603  16D0  0020               	movlb	0	; select bank0
 15604  16D1  1D8D               	btfss	13,3	;volatile
 15605  16D2  2ED5               	goto	l9511
 15606  16D3  0021               	movlb	1	; select bank1
 15607  16D4  16B2               	bsf	_Buz1^(0+128),5
 15608  16D5                     l9511:	
 15609                           
 15610                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15611  16D5  0021               	movlb	1	; select bank1
 15612  16D6  1AB2               	btfsc	_Buz1^(0+128),5
 15613  16D7  2F01               	goto	l120
 15614                           
 15615                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15616  16D8  08B5               	movf	(_Buz1^(0+128)+3),f
 15617  16D9  1D03               	skipz
 15618  16DA  2EFD               	goto	l121
 15619                           
 15620                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15621  16DB  1DB2               	btfss	_Buz1^(0+128),3
 15622  16DC  2EEB               	goto	l122
 15623                           
 15624                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15625  16DD  11B2               	bcf	_Buz1^(0+128),3
 15626                           
 15627                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15628  16DE  0836               	movf	(_Buz1^(0+128)+4),w
 15629  16DF  0020               	movlb	0	; select bank0
 15630  16E0  00A0               	movwf	??_Buzzer_Main
 15631  16E1  0820               	movf	??_Buzzer_Main,w
 15632  16E2  0021               	movlb	1	; select bank1
 15633  16E3  00B5               	movwf	(_Buz1^(0+128)+3)
 15634                           
 15635                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15636  16E4  083B               	movf	((_Buz1+1)^(0+128)+8),w
 15637  16E5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15638  16E6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15639  16E7  083A               	movf	(_Buz1^(0+128)+8),w
 15640  16E8  01B8               	clrf	(_Buz1^(0+128)+6)
 15641  16E9  07B8               	addwf	(_Buz1^(0+128)+6),f
 15642                           
 15643                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15644  16EA  0008               	return
 15645  16EB                     l122:	
 15646  16EB  1E32               	btfss	_Buz1^(0+128),4
 15647  16EC  2EFB               	goto	l124
 15648                           
 15649                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15650  16ED  1232               	bcf	_Buz1^(0+128),4
 15651                           
 15652                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15653  16EE  0837               	movf	(_Buz1^(0+128)+5),w
 15654  16EF  0020               	movlb	0	; select bank0
 15655  16F0  00A0               	movwf	??_Buzzer_Main
 15656  16F1  0820               	movf	??_Buzzer_Main,w
 15657  16F2  0021               	movlb	1	; select bank1
 15658  16F3  00B5               	movwf	(_Buz1^(0+128)+3)
 15659                           
 15660                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15661  16F4  083D               	movf	((_Buz1+1)^(0+128)+10),w
 15662  16F5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15663  16F6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15664  16F7  083C               	movf	(_Buz1^(0+128)+10),w
 15665  16F8  01B8               	clrf	(_Buz1^(0+128)+6)
 15666  16F9  07B8               	addwf	(_Buz1^(0+128)+6),f
 15667                           
 15668                           ;Buzzer_B1.c: 62: } else {
 15669  16FA  0008               	return
 15670  16FB                     l124:	
 15671                           
 15672                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15673  16FB  10B2               	bcf	_Buz1^(0+128),1
 15674                           
 15675                           ;Buzzer_B1.c: 64: }
 15676                           ;Buzzer_B1.c: 65: } else {
 15677  16FC  0008               	return
 15678  16FD                     l121:	
 15679                           
 15680                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15681  16FD  16B2               	bsf	_Buz1^(0+128),5
 15682                           
 15683                           ;Buzzer_B1.c: 68: RB3 = 1;
 15684  16FE  0020               	movlb	0	; select bank0
 15685  16FF  158D               	bsf	13,3	;volatile
 15686                           
 15687                           ;Buzzer_B1.c: 69: }
 15688                           ;Buzzer_B1.c: 70: } else {
 15689  1700  0008               	return
 15690  1701                     l120:	
 15691                           
 15692                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15693  1701  12B2               	bcf	_Buz1^(0+128),5
 15694                           
 15695                           ;Buzzer_B1.c: 73: RB3 = 0;
 15696  1702  0020               	movlb	0	; select bank0
 15697  1703  118D               	bcf	13,3	;volatile
 15698                           
 15699                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15700  1704  3001               	movlw	1
 15701  1705  0021               	movlb	1	; select bank1
 15702  1706  02B5               	subwf	(_Buz1^(0+128)+3),f
 15703  1707  0008               	return
 15704  1708                     __end_of_Buzzer_Main:	
 15705                           
 15706                           	psect	text106
 15707  1E55                     __ptext106:	
 15708 ;; *************** function _Buzzer_Initialization *****************
 15709 ;; Defined at:
 15710 ;;		line 11 in file "../src/Buzzer_B1.c"
 15711 ;; Parameters:    Size  Location     Type
 15712 ;;		None
 15713 ;; Auto vars:     Size  Location     Type
 15714 ;;		None
 15715 ;; Return value:  Size  Location     Type
 15716 ;;		None               void
 15717 ;; Registers used:
 15718 ;;		None
 15719 ;; Tracked objects:
 15720 ;;		On entry : 0/0
 15721 ;;		On exit  : 0/0
 15722 ;;		Unchanged: 0/0
 15723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15728 ;;Total ram usage:        0 bytes
 15729 ;; Hardware stack levels used:    1
 15730 ;; Hardware stack levels required when called:    5
 15731 ;; This function calls:
 15732 ;;		Nothing
 15733 ;; This function is called by:
 15734 ;;		_main
 15735 ;; This function uses a non-reentrant model
 15736 ;;
 15737                           
 15738                           
 15739                           ;psect for function _Buzzer_Initialization
 15740  1E55                     _Buzzer_Initialization:	
 15741                           
 15742                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15743                           
 15744                           ;incstack = 0
 15745                           ; Regs used in _Buzzer_Initialization: []
 15746  1E55  0021               	movlb	1	; select bank1
 15747  1E56  1432               	bsf	_Buz1^(0+128),0
 15748  1E57  0008               	return
 15749  1E58                     __end_of_Buzzer_Initialization:	
 15750                           
 15751                           	psect	intentry
 15752  0004                     __pintentry:	
 15753 ;; *************** function _ISR *****************
 15754 ;; Defined at:
 15755 ;;		line 107 in file "../src/MCU_B1.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;		None
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;		None
 15760 ;; Return value:  Size  Location     Type
 15761 ;;		None               void
 15762 ;; Registers used:
 15763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15764 ;; Tracked objects:
 15765 ;;		On entry : 0/0
 15766 ;;		On exit  : 0/0
 15767 ;;		Unchanged: 0/0
 15768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;Total ram usage:        1 bytes
 15774 ;; Hardware stack levels used:    1
 15775 ;; Hardware stack levels required when called:    4
 15776 ;; This function calls:
 15777 ;;		_IOC_ISR
 15778 ;;		_TMR0_ISR
 15779 ;; This function is called by:
 15780 ;;		Interrupt level 1
 15781 ;; This function uses a non-reentrant model
 15782 ;;
 15783                           
 15784  0004                     _ISR:	
 15785                           
 15786                           ;incstack = 0
 15787                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15788  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15789  0005  3180               	pagesel	$
 15790  0006  0020               	movlb	0	; select bank0
 15791  0007  087F               	movf	127,w
 15792  0008  00FB               	movwf	??_ISR
 15793                           
 15794                           ;MCU_B1.c: 109: IOC_ISR();
 15795  0009  319E  26FE  3180   	fcall	_IOC_ISR
 15796                           
 15797                           ;MCU_B1.c: 111: TMR0_ISR();
 15798  000C  3193  23DA         	fcall	_TMR0_ISR
 15799  000E  087B               	movf	??_ISR,w
 15800  000F  0020               	movlb	0	; select bank0
 15801  0010  00FF               	movwf	127
 15802  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15803  0012  0009               	retfie
 15804  0013                     __end_of_ISR:	
 15805                           
 15806                           	psect	text108
 15807  13DA                     __ptext108:	
 15808 ;; *************** function _TMR0_ISR *****************
 15809 ;; Defined at:
 15810 ;;		line 135 in file "../src/MCU_B1.c"
 15811 ;; Parameters:    Size  Location     Type
 15812 ;;		None
 15813 ;; Auto vars:     Size  Location     Type
 15814 ;;		None
 15815 ;; Return value:  Size  Location     Type
 15816 ;;		None               void
 15817 ;; Registers used:
 15818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15819 ;; Tracked objects:
 15820 ;;		On entry : 0/0
 15821 ;;		On exit  : 0/0
 15822 ;;		Unchanged: 0/0
 15823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;Total ram usage:        0 bytes
 15829 ;; Hardware stack levels used:    1
 15830 ;; Hardware stack levels required when called:    2
 15831 ;; This function calls:
 15832 ;;		_setDimmerLights_IntrControl
 15833 ;; This function is called by:
 15834 ;;		_ISR
 15835 ;; This function uses a non-reentrant model
 15836 ;;
 15837                           
 15838                           
 15839                           ;psect for function _TMR0_ISR
 15840  13DA                     _TMR0_ISR:	
 15841                           
 15842                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 15843                           
 15844                           ;incstack = 0
 15845                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15846  13DA  1E8B               	btfss	11,5	;volatile
 15847  13DB  0008               	return
 15848  13DC  1D0B               	btfss	11,2	;volatile
 15849  13DD  0008               	return
 15850                           
 15851                           ;MCU_B1.c: 138: TMR0 = (256-190);
 15852  13DE  3042               	movlw	66
 15853  13DF  0020               	movlb	0	; select bank0
 15854  13E0  0095               	movwf	21	;volatile
 15855                           
 15856                           ;MCU_B1.c: 139: TMR0IF = 0;
 15857  13E1  110B               	bcf	11,2	;volatile
 15858                           
 15859                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 15860  13E2  3001               	movlw	1
 15861  13E3  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15862                           
 15863                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 15864  13E6  3002               	movlw	2
 15865  13E7  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15866                           
 15867                           ;MCU_B1.c: 154: setDimmerLights_IntrControl(3);
 15868  13EA  3003               	movlw	3
 15869  13EB  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 15870                           
 15871                           ;MCU_B1.c: 160: Timer0.Count++;
 15872  13EE  3001               	movlw	1
 15873  13EF  0022               	movlb	2	; select bank2
 15874  13F0  07B6               	addwf	(_Timer0^(0+256)+1),f
 15875  13F1  3000               	movlw	0
 15876  13F2  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 15877                           
 15878                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 15879  13F3  3001               	movlw	1
 15880  13F4  3E35               	addlw	_Timer0& (0+255)
 15881  13F5  0086               	movwf	6
 15882  13F6  3001               	movlw	1	; select bank2/3
 15883  13F7  0087               	movwf	7
 15884  13F8  3F40               	moviw [0]fsr1
 15885  13F9  3A64               	xorlw	100
 15886  13FA  1D03               	skipz
 15887  13FB  2BFE               	goto	u747_25
 15888  13FC  3F41               	moviw [1]fsr1
 15889  13FD  3A00               	xorlw	0
 15890  13FE                     u747_25:	
 15891  13FE  1D03               	skipz
 15892  13FF  0008               	return
 15893                           
 15894                           ;MCU_B1.c: 162: Timer0.Count = 0;
 15895  1400  01B6               	clrf	(_Timer0^(0+256)+1)
 15896  1401  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 15897                           
 15898                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 15899  1402  0021               	movlb	1	; select bank1
 15900  1403  14A0               	bsf	_myMain^(0+128),1
 15901  1404  0008               	return
 15902  1405                     __end_of_TMR0_ISR:	
 15903                           
 15904                           	psect	text109
 15905  0045                     __ptext109:	
 15906 ;; *************** function _setDimmerLights_IntrControl *****************
 15907 ;; Defined at:
 15908 ;;		line 94 in file "../src/Dimmer_B1.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;  lights          1    wreg     unsigned char 
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;  lights          1    4[COMMON] unsigned char 
 15913 ;; Return value:  Size  Location     Type
 15914 ;;		None               void
 15915 ;; Registers used:
 15916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;Total ram usage:        3 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    1
 15929 ;; This function calls:
 15930 ;;		_DimmerIntrPointSelect
 15931 ;; This function is called by:
 15932 ;;		_TMR0_ISR
 15933 ;; This function uses a non-reentrant model
 15934 ;;
 15935                           
 15936                           
 15937                           ;psect for function _setDimmerLights_IntrControl
 15938  0045                     _setDimmerLights_IntrControl:	
 15939                           
 15940                           ;incstack = 0
 15941                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15942                           ;setDimmerLights_IntrControl@lights stored from wreg
 15943  0045  00FA               	movwf	setDimmerLights_IntrControl@lights
 15944                           
 15945                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 15946  0046  087A               	movf	setDimmerLights_IntrControl@lights,w
 15947  0047  3191  2166  3180   	fcall	_DimmerIntrPointSelect
 15948                           
 15949                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 15950  004A  0874               	movf	_DimmerLightsIntr,w
 15951  004B  0086               	movwf	6
 15952  004C  3001               	movlw	1	; select bank2/3
 15953  004D  0087               	movwf	7
 15954  004E  1C01               	btfss	1,0
 15955  004F  28A5               	goto	i1l7021
 15956                           
 15957                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 15958  0050  3001               	movlw	1
 15959  0051  00F8               	movwf	??_setDimmerLights_IntrControl
 15960  0052  0874               	movf	_DimmerLightsIntr,w
 15961  0053  3E03               	addlw	3
 15962  0054  0086               	movwf	6
 15963  0055  3001               	movlw	1	; select bank2/3
 15964  0056  0087               	movwf	7
 15965  0057  0878               	movf	??_setDimmerLights_IntrControl,w
 15966  0058  0781               	addwf	1,f
 15967                           
 15968                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 15969  0059  0873               	movf	_Dimmer,w
 15970  005A  3E02               	addlw	2
 15971  005B  0086               	movwf	6
 15972  005C  0187               	clrf	7
 15973  005D  0874               	movf	_DimmerLightsIntr,w
 15974  005E  3E04               	addlw	4
 15975  005F  0084               	movwf	4
 15976  0060  3001               	movlw	1	; select bank2/3
 15977  0061  0085               	movwf	5
 15978  0062  0800               	movf	0,w
 15979  0063  0701               	addwf	1,w
 15980  0064  00F8               	movwf	??_setDimmerLights_IntrControl
 15981  0065  01F9               	clrf	??_setDimmerLights_IntrControl+1
 15982  0066  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 15983  0067  0874               	movf	_DimmerLightsIntr,w
 15984  0068  3E03               	addlw	3
 15985  0069  0086               	movwf	6
 15986  006A  3001               	movlw	1	; select bank2/3
 15987  006B  0087               	movwf	7
 15988  006C  0879               	movf	??_setDimmerLights_IntrControl+1,w
 15989  006D  3A80               	xorlw	128
 15990  006E  3C80               	sublw	128
 15991  006F  1D03               	skipz
 15992  0070  2873               	goto	u633_25
 15993  0071  0878               	movf	??_setDimmerLights_IntrControl,w
 15994  0072  0201               	subwf	1,w
 15995  0073                     u633_25:	
 15996  0073  1C03               	skipc
 15997  0074  29B3               	goto	i1l7087
 15998                           
 15999                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 16000  0075  0874               	movf	_DimmerLightsIntr,w
 16001  0076  3E03               	addlw	3
 16002  0077  0086               	movwf	6
 16003  0078  3001               	movlw	1	; select bank2/3
 16004  0079  0087               	movwf	7
 16005  007A  0181               	clrf	1
 16006                           
 16007                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 16008  007B  0874               	movf	_DimmerLightsIntr,w
 16009  007C  0086               	movwf	6
 16010  007D  3001               	movlw	1	; select bank2/3
 16011  007E  0087               	movwf	7
 16012  007F  1001               	bcf	1,0
 16013                           
 16014                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 16015  0080  0874               	movf	_DimmerLightsIntr,w
 16016  0081  0086               	movwf	6
 16017  0082  3001               	movlw	1	; select bank2/3
 16018  0083  0087               	movwf	7
 16019  0084  1F01               	btfss	1,6
 16020  0085  29B3               	goto	i1l7087
 16021                           
 16022                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 16023  0086  0874               	movf	_DimmerLightsIntr,w
 16024  0087  3E08               	addlw	8
 16025  0088  0086               	movwf	6
 16026  0089  3001               	movlw	1	; select bank2/3
 16027  008A  0087               	movwf	7
 16028  008B  1401               	bsf	1,0
 16029                           
 16030                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 16031  008C  0874               	movf	_DimmerLightsIntr,w
 16032  008D  3E08               	addlw	8
 16033  008E  0086               	movwf	6
 16034  008F  3001               	movlw	1	; select bank2/3
 16035  0090  0087               	movwf	7
 16036  0091  1681               	bsf	1,5
 16037                           
 16038                           ;Dimmer_B1.c: 107: if (lights == 1) {
 16039  0092  087A               	movf	setDimmerLights_IntrControl@lights,w
 16040  0093  3A01               	xorlw	1
 16041  0094  1D03               	skipz
 16042  0095  2898               	goto	i1l7013
 16043                           
 16044                           ;Dimmer_B1.c: 108: RB4 = 1;
 16045  0096  0020               	movlb	0	; select bank0
 16046  0097  160D               	bsf	13,4	;volatile
 16047  0098                     i1l7013:	
 16048                           ;Dimmer_B1.c: 109: ;;
 16049                           
 16050                           
 16051                           ;Dimmer_B1.c: 110: }
 16052                           ;Dimmer_B1.c: 113: if (lights == 2) {
 16053  0098  087A               	movf	setDimmerLights_IntrControl@lights,w
 16054  0099  3A02               	xorlw	2
 16055  009A  1D03               	skipz
 16056  009B  289E               	goto	i1l7017
 16057                           
 16058                           ;Dimmer_B1.c: 114: RA7 = 1;
 16059  009C  0020               	movlb	0	; select bank0
 16060  009D  178C               	bsf	12,7	;volatile
 16061  009E                     i1l7017:	
 16062                           
 16063                           ;Dimmer_B1.c: 115: }
 16064                           ;Dimmer_B1.c: 118: if (lights == 3) {
 16065  009E  087A               	movf	setDimmerLights_IntrControl@lights,w
 16066  009F  3A03               	xorlw	3
 16067  00A0  1D03               	skipz
 16068  00A1  29B3               	goto	i1l7087
 16069                           
 16070                           ;Dimmer_B1.c: 119: RB1 = 1;
 16071  00A2  0020               	movlb	0	; select bank0
 16072  00A3  148D               	bsf	13,1	;volatile
 16073                           
 16074                           ;Dimmer_B1.c: 120: }
 16075                           ;Dimmer_B1.c: 122: }
 16076                           ;Dimmer_B1.c: 123: }
 16077                           ;Dimmer_B1.c: 124: } else {
 16078  00A4  29B3               	goto	i1l7087
 16079  00A5                     i1l7021:	
 16080                           
 16081                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 16082  00A5  0874               	movf	_DimmerLightsIntr,w
 16083  00A6  3E08               	addlw	8
 16084  00A7  0086               	movwf	6
 16085  00A8  3001               	movlw	1	; select bank2/3
 16086  00A9  0087               	movwf	7
 16087  00AA  1C01               	btfss	1,0
 16088  00AB  29B3               	goto	i1l7087
 16089                           
 16090                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 16091  00AC  0874               	movf	_DimmerLightsIntr,w
 16092  00AD  3E08               	addlw	8
 16093  00AE  0086               	movwf	6
 16094  00AF  3001               	movlw	1	; select bank2/3
 16095  00B0  0087               	movwf	7
 16096  00B1  1001               	bcf	1,0
 16097                           
 16098                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 16099  00B2  0874               	movf	_DimmerLightsIntr,w
 16100  00B3  0086               	movwf	6
 16101  00B4  3001               	movlw	1	; select bank2/3
 16102  00B5  0087               	movwf	7
 16103  00B6  1C81               	btfss	1,1
 16104  00B7  29B3               	goto	i1l7087
 16105                           
 16106                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 16107  00B8  3001               	movlw	1
 16108  00B9  00F8               	movwf	??_setDimmerLights_IntrControl
 16109  00BA  0A74               	incf	_DimmerLightsIntr,w
 16110  00BB  0086               	movwf	6
 16111  00BC  3001               	movlw	1	; select bank2/3
 16112  00BD  0087               	movwf	7
 16113  00BE  0878               	movf	??_setDimmerLights_IntrControl,w
 16114  00BF  0781               	addwf	1,f
 16115                           
 16116                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16117  00C0  0A74               	incf	_DimmerLightsIntr,w
 16118  00C1  0086               	movwf	6
 16119  00C2  3001               	movlw	1	; select bank2/3
 16120  00C3  0087               	movwf	7
 16121  00C4  0874               	movf	_DimmerLightsIntr,w
 16122  00C5  3E02               	addlw	2
 16123  00C6  0084               	movwf	4
 16124  00C7  3001               	movlw	1	; select bank2/3
 16125  00C8  0085               	movwf	5
 16126  00C9  0800               	movf	0,w
 16127  00CA  0201               	subwf	1,w
 16128  00CB  1C03               	skipc
 16129  00CC  29B3               	goto	i1l7087
 16130                           
 16131                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 16132  00CD  0A74               	incf	_DimmerLightsIntr,w
 16133  00CE  0086               	movwf	6
 16134  00CF  3001               	movlw	1	; select bank2/3
 16135  00D0  0087               	movwf	7
 16136  00D1  0181               	clrf	1
 16137                           
 16138                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 16139  00D2  0874               	movf	_DimmerLightsIntr,w
 16140  00D3  0086               	movwf	6
 16141  00D4  3001               	movlw	1	; select bank2/3
 16142  00D5  0087               	movwf	7
 16143  00D6  1D81               	btfss	1,3
 16144  00D7  290E               	goto	i1l7047
 16145                           
 16146                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 16147  00D8  0874               	movf	_DimmerLightsIntr,w
 16148  00D9  0086               	movwf	6
 16149  00DA  3001               	movlw	1	; select bank2/3
 16150  00DB  0087               	movwf	7
 16151  00DC  1A01               	btfsc	1,4
 16152  00DD  28F5               	goto	i1l7041
 16153                           
 16154                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-90)*0.8))) {
 16155  00DE  0874               	movf	_DimmerLightsIntr,w
 16156  00DF  3E04               	addlw	4
 16157  00E0  0086               	movwf	6
 16158  00E1  3001               	movlw	1	; select bank2/3
 16159  00E2  0087               	movwf	7
 16160  00E3  3009               	movlw	9
 16161  00E4  0201               	subwf	1,w
 16162  00E5  1C03               	skipc
 16163  00E6  28EF               	goto	i1l7039
 16164                           
 16165                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 16166  00E7  0874               	movf	_DimmerLightsIntr,w
 16167  00E8  3E04               	addlw	4
 16168  00E9  0086               	movwf	6
 16169  00EA  3001               	movlw	1	; select bank2/3
 16170  00EB  0087               	movwf	7
 16171  00EC  3001               	movlw	1
 16172  00ED  0281               	subwf	1,f
 16173                           
 16174                           ;Dimmer_B1.c: 135: } else {
 16175  00EE  29B3               	goto	i1l7087
 16176  00EF                     i1l7039:	
 16177                           
 16178                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 16179  00EF  0874               	movf	_DimmerLightsIntr,w
 16180  00F0  0086               	movwf	6
 16181  00F1  3001               	movlw	1	; select bank2/3
 16182  00F2  0087               	movwf	7
 16183  00F3  1601               	bsf	1,4
 16184                           
 16185                           ;Dimmer_B1.c: 137: }
 16186                           ;Dimmer_B1.c: 138: } else {
 16187  00F4  29B3               	goto	i1l7087
 16188  00F5                     i1l7041:	
 16189                           
 16190                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16191  00F5  0874               	movf	_DimmerLightsIntr,w
 16192  00F6  3E04               	addlw	4
 16193  00F7  0086               	movwf	6
 16194  00F8  3001               	movlw	1	; select bank2/3
 16195  00F9  0087               	movwf	7
 16196  00FA  303C               	movlw	60
 16197  00FB  0201               	subwf	1,w
 16198  00FC  1803               	skipnc
 16199  00FD  2908               	goto	i1l7045
 16200                           
 16201                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 16202  00FE  3001               	movlw	1
 16203  00FF  00F8               	movwf	??_setDimmerLights_IntrControl
 16204  0100  0874               	movf	_DimmerLightsIntr,w
 16205  0101  3E04               	addlw	4
 16206  0102  0086               	movwf	6
 16207  0103  3001               	movlw	1	; select bank2/3
 16208  0104  0087               	movwf	7
 16209  0105  0878               	movf	??_setDimmerLights_IntrControl,w
 16210  0106  0781               	addwf	1,f
 16211                           
 16212                           ;Dimmer_B1.c: 141: } else {
 16213  0107  29B3               	goto	i1l7087
 16214  0108                     i1l7045:	
 16215                           
 16216                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 16217  0108  0874               	movf	_DimmerLightsIntr,w
 16218  0109  0086               	movwf	6
 16219  010A  3001               	movlw	1	; select bank2/3
 16220  010B  0087               	movwf	7
 16221  010C  1201               	bcf	1,4
 16222                           
 16223                           ;Dimmer_B1.c: 143: }
 16224                           ;Dimmer_B1.c: 144: }
 16225                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 16226  010D  29B3               	goto	i1l7087
 16227  010E                     i1l7047:	
 16228  010E  0874               	movf	_DimmerLightsIntr,w
 16229  010F  0086               	movwf	6
 16230  0110  3001               	movlw	1	; select bank2/3
 16231  0111  0087               	movwf	7
 16232  0112  1D01               	btfss	1,2
 16233  0113  2955               	goto	i1l7061
 16234                           
 16235                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16236  0114  0874               	movf	_DimmerLightsIntr,w
 16237  0115  3E05               	addlw	5
 16238  0116  0086               	movwf	6
 16239  0117  3001               	movlw	1	; select bank2/3
 16240  0118  0087               	movwf	7
 16241  0119  0874               	movf	_DimmerLightsIntr,w
 16242  011A  3E04               	addlw	4
 16243  011B  0084               	movwf	4
 16244  011C  3001               	movlw	1	; select bank2/3
 16245  011D  0085               	movwf	5
 16246  011E  0800               	movf	0,w
 16247  011F  0201               	subwf	1,w
 16248  0120  1803               	skipnc
 16249  0121  292A               	goto	i1l7053
 16250                           
 16251                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 16252  0122  0874               	movf	_DimmerLightsIntr,w
 16253  0123  3E04               	addlw	4
 16254  0124  0086               	movwf	6
 16255  0125  3001               	movlw	1	; select bank2/3
 16256  0126  0087               	movwf	7
 16257  0127  3001               	movlw	1
 16258  0128  0281               	subwf	1,f
 16259                           
 16260                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16261  0129  2941               	goto	i1l7057
 16262  012A                     i1l7053:	
 16263  012A  0874               	movf	_DimmerLightsIntr,w
 16264  012B  3E04               	addlw	4
 16265  012C  0086               	movwf	6
 16266  012D  3001               	movlw	1	; select bank2/3
 16267  012E  0087               	movwf	7
 16268  012F  0874               	movf	_DimmerLightsIntr,w
 16269  0130  3E05               	addlw	5
 16270  0131  0084               	movwf	4
 16271  0132  3001               	movlw	1	; select bank2/3
 16272  0133  0085               	movwf	5
 16273  0134  0800               	movf	0,w
 16274  0135  0201               	subwf	1,w
 16275  0136  1803               	skipnc
 16276  0137  2941               	goto	i1l7057
 16277                           
 16278                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 16279  0138  3001               	movlw	1
 16280  0139  00F8               	movwf	??_setDimmerLights_IntrControl
 16281  013A  0874               	movf	_DimmerLightsIntr,w
 16282  013B  3E04               	addlw	4
 16283  013C  0086               	movwf	6
 16284  013D  3001               	movlw	1	; select bank2/3
 16285  013E  0087               	movwf	7
 16286  013F  0878               	movf	??_setDimmerLights_IntrControl,w
 16287  0140  0781               	addwf	1,f
 16288  0141                     i1l7057:	
 16289                           
 16290                           ;Dimmer_B1.c: 150: }
 16291                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16292  0141  0874               	movf	_DimmerLightsIntr,w
 16293  0142  3E05               	addlw	5
 16294  0143  0086               	movwf	6
 16295  0144  3001               	movlw	1	; select bank2/3
 16296  0145  0087               	movwf	7
 16297  0146  0874               	movf	_DimmerLightsIntr,w
 16298  0147  3E04               	addlw	4
 16299  0148  0084               	movwf	4
 16300  0149  3001               	movlw	1	; select bank2/3
 16301  014A  0085               	movwf	5
 16302  014B  0800               	movf	0,w
 16303  014C  0601               	xorwf	1,w
 16304  014D  1D03               	skipz
 16305  014E  29B3               	goto	i1l7087
 16306                           
 16307                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 16308  014F  0874               	movf	_DimmerLightsIntr,w
 16309  0150  0086               	movwf	6
 16310  0151  3001               	movlw	1	; select bank2/3
 16311  0152  0087               	movwf	7
 16312  0153  1101               	bcf	1,2
 16313  0154  2970               	goto	i1l7067
 16314  0155                     i1l7061:	
 16315                           ;Dimmer_B1.c: 154: }
 16316                           ;Dimmer_B1.c: 155: } else {
 16317                           
 16318                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 16319                           
 16320                           
 16321                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 16322  0155  0874               	movf	_DimmerLightsIntr,w
 16323  0156  0086               	movwf	6
 16324  0157  3001               	movlw	1	; select bank2/3
 16325  0158  0087               	movwf	7
 16326  0159  1E81               	btfss	1,5
 16327  015A  2976               	goto	i1l7069
 16328                           
 16329                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 16330  015B  0874               	movf	_DimmerLightsIntr,w
 16331  015C  3E04               	addlw	4
 16332  015D  0086               	movwf	6
 16333  015E  3001               	movlw	1	; select bank2/3
 16334  015F  0087               	movwf	7
 16335  0160  3001               	movlw	1
 16336  0161  0281               	subwf	1,f
 16337                           
 16338                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16339  0162  0874               	movf	_DimmerLightsIntr,w
 16340  0163  3E05               	addlw	5
 16341  0164  0086               	movwf	6
 16342  0165  3001               	movlw	1	; select bank2/3
 16343  0166  0087               	movwf	7
 16344  0167  0874               	movf	_DimmerLightsIntr,w
 16345  0168  3E04               	addlw	4
 16346  0169  0084               	movwf	4
 16347  016A  3001               	movlw	1	; select bank2/3
 16348  016B  0085               	movwf	5
 16349  016C  0800               	movf	0,w
 16350  016D  0201               	subwf	1,w
 16351  016E  1C03               	skipc
 16352  016F  29B3               	goto	i1l7087
 16353  0170                     i1l7067:	
 16354                           
 16355                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 16356  0170  0874               	movf	_DimmerLightsIntr,w
 16357  0171  0086               	movwf	6
 16358  0172  3001               	movlw	1	; select bank2/3
 16359  0173  0087               	movwf	7
 16360  0174  1081               	bcf	1,1
 16361                           
 16362                           ;Dimmer_B1.c: 160: }
 16363                           ;Dimmer_B1.c: 161: } else {
 16364  0175  29B3               	goto	i1l7087
 16365  0176                     i1l7069:	
 16366                           
 16367                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 16368  0176  3001               	movlw	1
 16369  0177  00F8               	movwf	??_setDimmerLights_IntrControl
 16370  0178  0874               	movf	_DimmerLightsIntr,w
 16371  0179  3E04               	addlw	4
 16372  017A  0086               	movwf	6
 16373  017B  3001               	movlw	1	; select bank2/3
 16374  017C  0087               	movwf	7
 16375  017D  0878               	movf	??_setDimmerLights_IntrControl,w
 16376  017E  0781               	addwf	1,f
 16377                           
 16378                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16379  017F  0874               	movf	_DimmerLightsIntr,w
 16380  0180  3E04               	addlw	4
 16381  0181  0086               	movwf	6
 16382  0182  3001               	movlw	1	; select bank2/3
 16383  0183  0087               	movwf	7
 16384  0184  0874               	movf	_DimmerLightsIntr,w
 16385  0185  3E06               	addlw	6
 16386  0186  0084               	movwf	4
 16387  0187  3001               	movlw	1	; select bank2/3
 16388  0188  0085               	movwf	5
 16389  0189  0800               	movf	0,w
 16390  018A  0201               	subwf	1,w
 16391  018B  1C03               	skipc
 16392  018C  29B3               	goto	i1l7087
 16393                           
 16394                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 16395  018D  0874               	movf	_DimmerLightsIntr,w
 16396  018E  0086               	movwf	6
 16397  018F  3001               	movlw	1	; select bank2/3
 16398  0190  0087               	movwf	7
 16399  0191  1081               	bcf	1,1
 16400                           
 16401                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 16402  0192  0874               	movf	_DimmerLightsIntr,w
 16403  0193  0086               	movwf	6
 16404  0194  3001               	movlw	1	; select bank2/3
 16405  0195  0087               	movwf	7
 16406  0196  1301               	bcf	1,6
 16407                           
 16408                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 16409  0197  0874               	movf	_DimmerLightsIntr,w
 16410  0198  3E09               	addlw	9
 16411  0199  0086               	movwf	6
 16412  019A  3001               	movlw	1	; select bank2/3
 16413  019B  0087               	movwf	7
 16414  019C  1501               	bsf	1,2
 16415                           
 16416                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 16417  019D  0873               	movf	_Dimmer,w
 16418  019E  0086               	movwf	6
 16419  019F  0187               	clrf	7
 16420  01A0  1401               	bsf	1,0
 16421                           
 16422                           ;Dimmer_B1.c: 169: if (lights == 1) {
 16423  01A1  087A               	movf	setDimmerLights_IntrControl@lights,w
 16424  01A2  3A01               	xorlw	1
 16425  01A3  1D03               	skipz
 16426  01A4  29A7               	goto	i1l7079
 16427                           
 16428                           ;Dimmer_B1.c: 170: RC7 = 0;
 16429  01A5  0020               	movlb	0	; select bank0
 16430  01A6  138E               	bcf	14,7	;volatile
 16431  01A7                     i1l7079:	
 16432                           
 16433                           ;Dimmer_B1.c: 172: }
 16434                           ;Dimmer_B1.c: 175: if (lights == 2) {
 16435  01A7  087A               	movf	setDimmerLights_IntrControl@lights,w
 16436  01A8  3A02               	xorlw	2
 16437  01A9  1D03               	skipz
 16438  01AA  29AD               	goto	i1l7083
 16439                           
 16440                           ;Dimmer_B1.c: 176: RA3 = 0;
 16441  01AB  0020               	movlb	0	; select bank0
 16442  01AC  118C               	bcf	12,3	;volatile
 16443  01AD                     i1l7083:	
 16444                           
 16445                           ;Dimmer_B1.c: 177: }
 16446                           ;Dimmer_B1.c: 180: if (lights == 3) {
 16447  01AD  087A               	movf	setDimmerLights_IntrControl@lights,w
 16448  01AE  3A03               	xorlw	3
 16449  01AF  1D03               	skipz
 16450  01B0  29B3               	goto	i1l7087
 16451                           
 16452                           ;Dimmer_B1.c: 181: RC6 = 0;
 16453  01B1  0020               	movlb	0	; select bank0
 16454  01B2  130E               	bcf	14,6	;volatile
 16455  01B3                     i1l7087:	
 16456                           ;Dimmer_B1.c: 182: }
 16457                           ;Dimmer_B1.c: 184: ;;
 16458                           
 16459                           
 16460                           ;Dimmer_B1.c: 185: }
 16461                           ;Dimmer_B1.c: 186: }
 16462                           ;Dimmer_B1.c: 187: }
 16463                           ;Dimmer_B1.c: 188: }
 16464                           ;Dimmer_B1.c: 189: }
 16465                           ;Dimmer_B1.c: 190: }
 16466                           ;Dimmer_B1.c: 191: }
 16467                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 16468  01B3  0874               	movf	_DimmerLightsIntr,w
 16469  01B4  3E08               	addlw	8
 16470  01B5  0086               	movwf	6
 16471  01B6  3001               	movlw	1	; select bank2/3
 16472  01B7  0087               	movwf	7
 16473  01B8  1E81               	btfss	1,5
 16474  01B9  29EA               	goto	i1l7109
 16475                           
 16476                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 16477  01BA  3001               	movlw	1
 16478  01BB  00F8               	movwf	??_setDimmerLights_IntrControl
 16479  01BC  0874               	movf	_DimmerLightsIntr,w
 16480  01BD  3E07               	addlw	7
 16481  01BE  0086               	movwf	6
 16482  01BF  3001               	movlw	1	; select bank2/3
 16483  01C0  0087               	movwf	7
 16484  01C1  0878               	movf	??_setDimmerLights_IntrControl,w
 16485  01C2  0781               	addwf	1,f
 16486                           
 16487                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 16488  01C3  0874               	movf	_DimmerLightsIntr,w
 16489  01C4  3E07               	addlw	7
 16490  01C5  0086               	movwf	6
 16491  01C6  3001               	movlw	1	; select bank2/3
 16492  01C7  0087               	movwf	7
 16493  01C8  3005               	movlw	5
 16494  01C9  0201               	subwf	1,w
 16495  01CA  1C03               	skipc
 16496  01CB  29EA               	goto	i1l7109
 16497                           
 16498                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 16499  01CC  0874               	movf	_DimmerLightsIntr,w
 16500  01CD  3E07               	addlw	7
 16501  01CE  0086               	movwf	6
 16502  01CF  3001               	movlw	1	; select bank2/3
 16503  01D0  0087               	movwf	7
 16504  01D1  0181               	clrf	1
 16505                           
 16506                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 16507  01D2  0874               	movf	_DimmerLightsIntr,w
 16508  01D3  3E08               	addlw	8
 16509  01D4  0086               	movwf	6
 16510  01D5  3001               	movlw	1	; select bank2/3
 16511  01D6  0087               	movwf	7
 16512  01D7  1281               	bcf	1,5
 16513                           
 16514                           ;Dimmer_B1.c: 199: if (lights == 1) {
 16515  01D8  087A               	movf	setDimmerLights_IntrControl@lights,w
 16516  01D9  3A01               	xorlw	1
 16517  01DA  1D03               	skipz
 16518  01DB  29DE               	goto	i1l7101
 16519                           
 16520                           ;Dimmer_B1.c: 200: RB4 = 0;
 16521  01DC  0020               	movlb	0	; select bank0
 16522  01DD  120D               	bcf	13,4	;volatile
 16523  01DE                     i1l7101:	
 16524                           ;Dimmer_B1.c: 201: ;;
 16525                           
 16526                           
 16527                           ;Dimmer_B1.c: 202: }
 16528                           ;Dimmer_B1.c: 205: if (lights == 2) {
 16529  01DE  087A               	movf	setDimmerLights_IntrControl@lights,w
 16530  01DF  3A02               	xorlw	2
 16531  01E0  1D03               	skipz
 16532  01E1  29E4               	goto	i1l7105
 16533                           
 16534                           ;Dimmer_B1.c: 206: RA7 = 0;
 16535  01E2  0020               	movlb	0	; select bank0
 16536  01E3  138C               	bcf	12,7	;volatile
 16537  01E4                     i1l7105:	
 16538                           
 16539                           ;Dimmer_B1.c: 207: }
 16540                           ;Dimmer_B1.c: 210: if (lights == 3) {
 16541  01E4  087A               	movf	setDimmerLights_IntrControl@lights,w
 16542  01E5  3A03               	xorlw	3
 16543  01E6  1D03               	skipz
 16544  01E7  29EA               	goto	i1l7109
 16545                           
 16546                           ;Dimmer_B1.c: 211: RB1 = 0;
 16547  01E8  0020               	movlb	0	; select bank0
 16548  01E9  108D               	bcf	13,1	;volatile
 16549  01EA                     i1l7109:	
 16550                           
 16551                           ;Dimmer_B1.c: 212: }
 16552                           ;Dimmer_B1.c: 214: }
 16553                           ;Dimmer_B1.c: 215: }
 16554                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 16555  01EA  0874               	movf	_DimmerLightsIntr,w
 16556  01EB  3E09               	addlw	9
 16557  01EC  0086               	movwf	6
 16558  01ED  3001               	movlw	1	; select bank2/3
 16559  01EE  0087               	movwf	7
 16560  01EF  1E81               	btfss	1,5
 16561  01F0  0008               	return
 16562                           
 16563                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 16564  01F1  3001               	movlw	1
 16565  01F2  00F8               	movwf	??_setDimmerLights_IntrControl
 16566  01F3  0874               	movf	_DimmerLightsIntr,w
 16567  01F4  3E0A               	addlw	10
 16568  01F5  0086               	movwf	6
 16569  01F6  3001               	movlw	1	; select bank2/3
 16570  01F7  0087               	movwf	7
 16571  01F8  0878               	movf	??_setDimmerLights_IntrControl,w
 16572  01F9  0781               	addwf	1,f
 16573                           
 16574                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 16575  01FA  0874               	movf	_DimmerLightsIntr,w
 16576  01FB  3E0A               	addlw	10
 16577  01FC  0086               	movwf	6
 16578  01FD  3001               	movlw	1	; select bank2/3
 16579  01FE  0087               	movwf	7
 16580  01FF  0801               	movf	1,w
 16581  0200  3A46               	xorlw	70
 16582  0201  1D03               	skipz
 16583  0202  0008               	return
 16584                           
 16585                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 16586  0203  0874               	movf	_DimmerLightsIntr,w
 16587  0204  3E0A               	addlw	10
 16588  0205  0086               	movwf	6
 16589  0206  3001               	movlw	1	; select bank2/3
 16590  0207  0087               	movwf	7
 16591  0208  0181               	clrf	1
 16592                           
 16593                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 16594  0209  0874               	movf	_DimmerLightsIntr,w
 16595  020A  3E09               	addlw	9
 16596  020B  0086               	movwf	6
 16597  020C  3001               	movlw	1	; select bank2/3
 16598  020D  0087               	movwf	7
 16599  020E  1281               	bcf	1,5
 16600  020F  0008               	return
 16601  0210                     __end_of_setDimmerLights_IntrControl:	
 16602                           
 16603                           	psect	text110
 16604  1166                     __ptext110:	
 16605 ;; *************** function _DimmerIntrPointSelect *****************
 16606 ;; Defined at:
 16607 ;;		line 72 in file "../src/Dimmer_B1.c"
 16608 ;; Parameters:    Size  Location     Type
 16609 ;;  lights          1    wreg     unsigned char 
 16610 ;; Auto vars:     Size  Location     Type
 16611 ;;  lights          1    1[COMMON] unsigned char 
 16612 ;; Return value:  Size  Location     Type
 16613 ;;		None               void
 16614 ;; Registers used:
 16615 ;;		wreg
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;Total ram usage:        2 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; This function calls:
 16628 ;;		Nothing
 16629 ;; This function is called by:
 16630 ;;		_setDimmerLights_IntrControl
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634                           
 16635                           ;psect for function _DimmerIntrPointSelect
 16636  1166                     _DimmerIntrPointSelect:	
 16637                           
 16638                           ;incstack = 0
 16639                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16640                           ;DimmerIntrPointSelect@lights stored from wreg
 16641  1166  00F7               	movwf	DimmerIntrPointSelect@lights
 16642                           
 16643                           ;Dimmer_B1.c: 74: if (lights == 1) {
 16644  1167  0877               	movf	DimmerIntrPointSelect@lights,w
 16645  1168  3A01               	xorlw	1
 16646  1169  1D03               	skipz
 16647  116A  296F               	goto	i1l820
 16648                           
 16649                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 16650  116B  303D               	movlw	_DimmerLights1& (0+255)
 16651  116C  00F6               	movwf	??_DimmerIntrPointSelect
 16652  116D  0876               	movf	??_DimmerIntrPointSelect,w
 16653  116E  00F4               	movwf	_DimmerLightsIntr
 16654  116F                     i1l820:	
 16655                           
 16656                           ;Dimmer_B1.c: 76: }
 16657                           ;Dimmer_B1.c: 79: if (lights == 2) {
 16658  116F  0877               	movf	DimmerIntrPointSelect@lights,w
 16659  1170  3A02               	xorlw	2
 16660  1171  1D03               	skipz
 16661  1172  2977               	goto	i1l821
 16662                           
 16663                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 16664  1173  304C               	movlw	_DimmerLights2& (0+255)
 16665  1174  00F6               	movwf	??_DimmerIntrPointSelect
 16666  1175  0876               	movf	??_DimmerIntrPointSelect,w
 16667  1176  00F4               	movwf	_DimmerLightsIntr
 16668  1177                     i1l821:	
 16669                           
 16670                           ;Dimmer_B1.c: 81: }
 16671                           ;Dimmer_B1.c: 85: if (lights == 3) {
 16672  1177  0877               	movf	DimmerIntrPointSelect@lights,w
 16673  1178  3A03               	xorlw	3
 16674  1179  1D03               	skipz
 16675  117A  0008               	return
 16676                           
 16677                           ;Dimmer_B1.c: 86: DimmerLightsIntr = &DimmerLights3;
 16678  117B  305B               	movlw	_DimmerLights3& (0+255)
 16679  117C  00F6               	movwf	??_DimmerIntrPointSelect
 16680  117D  0876               	movf	??_DimmerIntrPointSelect,w
 16681  117E  00F4               	movwf	_DimmerLightsIntr
 16682  117F  0008               	return
 16683  1180                     __end_of_DimmerIntrPointSelect:	
 16684                           
 16685                           	psect	text111
 16686  1EFE                     __ptext111:	
 16687 ;; *************** function _IOC_ISR *****************
 16688 ;; Defined at:
 16689 ;;		line 298 in file "../src/MCU_B1.c"
 16690 ;; Parameters:    Size  Location     Type
 16691 ;;		None
 16692 ;; Auto vars:     Size  Location     Type
 16693 ;;		None
 16694 ;; Return value:  Size  Location     Type
 16695 ;;		None               void
 16696 ;; Registers used:
 16697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16698 ;; Tracked objects:
 16699 ;;		On entry : 0/0
 16700 ;;		On exit  : 0/0
 16701 ;;		Unchanged: 0/0
 16702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;Total ram usage:        0 bytes
 16708 ;; Hardware stack levels used:    1
 16709 ;; Hardware stack levels required when called:    3
 16710 ;; This function calls:
 16711 ;;		_setDimmerReClock
 16712 ;; This function is called by:
 16713 ;;		_ISR
 16714 ;; This function uses a non-reentrant model
 16715 ;;
 16716                           
 16717                           
 16718                           ;psect for function _IOC_ISR
 16719  1EFE                     _IOC_ISR:	
 16720                           
 16721                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 16722                           
 16723                           ;incstack = 0
 16724                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16725  1EFE  1D8B               	btfss	11,3	;volatile
 16726  1EFF  0008               	return
 16727  1F00  0027               	movlb	7	; select bank7
 16728  1F01  1D16               	btfss	22,2	;volatile
 16729  1F02  0008               	return
 16730                           
 16731                           ;MCU_B1.c: 300: IOCBF2 = 0;
 16732  1F03  1116               	bcf	22,2	;volatile
 16733                           
 16734                           ;MCU_B1.c: 301: IOCIF = 0;
 16735  1F04  100B               	bcf	11,0	;volatile
 16736                           
 16737                           ;MCU_B1.c: 302: if (myMain.PowerON == 1) {
 16738  1F05  0021               	movlb	1	; select bank1
 16739  1F06  1C20               	btfss	_myMain^(0+128),0
 16740  1F07  0008               	return
 16741                           
 16742                           ;MCU_B1.c: 304: setDimmerReClock();
 16743  1F08  319E  26C2         	fcall	_setDimmerReClock
 16744  1F0A  0008               	return
 16745  1F0B                     __end_of_IOC_ISR:	
 16746                           
 16747                           	psect	text112
 16748  1EC2                     __ptext112:	
 16749 ;; *************** function _setDimmerReClock *****************
 16750 ;; Defined at:
 16751 ;;		line 170 in file "../src/MCU_B1.c"
 16752 ;; Parameters:    Size  Location     Type
 16753 ;;		None
 16754 ;; Auto vars:     Size  Location     Type
 16755 ;;		None
 16756 ;; Return value:  Size  Location     Type
 16757 ;;		None               void
 16758 ;; Registers used:
 16759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16760 ;; Tracked objects:
 16761 ;;		On entry : 0/0
 16762 ;;		On exit  : 0/0
 16763 ;;		Unchanged: 0/0
 16764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;Total ram usage:        0 bytes
 16770 ;; Hardware stack levels used:    1
 16771 ;; Hardware stack levels required when called:    2
 16772 ;; This function calls:
 16773 ;;		_setDimmerLights_IntrIOC_GO
 16774 ;; This function is called by:
 16775 ;;		_IOC_ISR
 16776 ;; This function uses a non-reentrant model
 16777 ;;
 16778                           
 16779                           
 16780                           ;psect for function _setDimmerReClock
 16781  1EC2                     _setDimmerReClock:	
 16782                           
 16783                           ;MCU_B1.c: 175: setDimmerLights_IntrIOC_GO(1);
 16784                           
 16785                           ;incstack = 0
 16786                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16787  1EC2  3001               	movlw	1
 16788  1EC3  3194  2432  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16789                           
 16790                           ;MCU_B1.c: 179: setDimmerLights_IntrIOC_GO(2);
 16791  1EC6  3002               	movlw	2
 16792  1EC7  3194  2432  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16793                           
 16794                           ;MCU_B1.c: 183: setDimmerLights_IntrIOC_GO(3);
 16795  1ECA  3003               	movlw	3
 16796  1ECB  3194  2432         	fcall	_setDimmerLights_IntrIOC_GO
 16797  1ECD  0008               	return
 16798  1ECE                     __end_of_setDimmerReClock:	
 16799                           
 16800                           	psect	text113
 16801  1432                     __ptext113:	
 16802 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16803 ;; Defined at:
 16804 ;;		line 28 in file "../src/Dimmer_B1.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;  lights          1    wreg     unsigned char 
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;  lights          1    2[COMMON] unsigned char 
 16809 ;; Return value:  Size  Location     Type
 16810 ;;		None               void
 16811 ;; Registers used:
 16812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16813 ;; Tracked objects:
 16814 ;;		On entry : 0/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;Total ram usage:        1 bytes
 16823 ;; Hardware stack levels used:    1
 16824 ;; Hardware stack levels required when called:    1
 16825 ;; This function calls:
 16826 ;;		_DimmerIntrIOCPointSelect
 16827 ;; This function is called by:
 16828 ;;		_setDimmerReClock
 16829 ;; This function uses a non-reentrant model
 16830 ;;
 16831                           
 16832                           
 16833                           ;psect for function _setDimmerLights_IntrIOC_GO
 16834  1432                     _setDimmerLights_IntrIOC_GO:	
 16835                           
 16836                           ;incstack = 0
 16837                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16838                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16839  1432  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 16840                           
 16841                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16842  1433  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16843  1434  3191  21B5  3194   	fcall	_DimmerIntrIOCPointSelect
 16844                           
 16845                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16846  1437  0021               	movlb	1	; select bank1
 16847  1438  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 16848  1439  0086               	movwf	6
 16849  143A  3001               	movlw	1	; select bank2/3
 16850  143B  0087               	movwf	7
 16851  143C  1801               	btfsc	1,0
 16852  143D  0008               	return
 16853  143E  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 16854  143F  3E09               	addlw	9
 16855  1440  0086               	movwf	6
 16856  1441  3001               	movlw	1	; select bank2/3
 16857  1442  0087               	movwf	7
 16858  1443  1A81               	btfsc	1,5
 16859  1444  0008               	return
 16860                           
 16861                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16862  1445  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 16863  1446  0086               	movwf	6
 16864  1447  3001               	movlw	1	; select bank2/3
 16865  1448  0087               	movwf	7
 16866  1449  1401               	bsf	1,0
 16867                           
 16868                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16869  144A  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 16870  144B  3E09               	addlw	9
 16871  144C  0086               	movwf	6
 16872  144D  3001               	movlw	1	; select bank2/3
 16873  144E  0087               	movwf	7
 16874  144F  1681               	bsf	1,5
 16875                           
 16876                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 16877  1450  0020               	movlb	0	; select bank0
 16878  1451  1D0D               	btfss	13,2	;volatile
 16879  1452  2C5A               	goto	i1l6603
 16880                           
 16881                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 16882  1453  0873               	movf	_Dimmer,w
 16883  1454  3E02               	addlw	2
 16884  1455  0086               	movwf	6
 16885  1456  0187               	clrf	7
 16886  1457  0181               	clrf	1
 16887  1458  0A81               	incf	1,f
 16888                           
 16889                           ;Dimmer_B1.c: 37: } else {
 16890  1459  0008               	return
 16891  145A                     i1l6603:	
 16892                           
 16893                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 16894  145A  0873               	movf	_Dimmer,w
 16895  145B  3E02               	addlw	2
 16896  145C  0086               	movwf	6
 16897  145D  0187               	clrf	7
 16898  145E  0181               	clrf	1
 16899  145F  0008               	return
 16900  1460                     __end_of_setDimmerLights_IntrIOC_GO:	
 16901                           
 16902                           	psect	text114
 16903  11B5                     __ptext114:	
 16904 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16905 ;; Defined at:
 16906 ;;		line 8 in file "../src/Dimmer_B1.c"
 16907 ;; Parameters:    Size  Location     Type
 16908 ;;  lights          1    wreg     unsigned char 
 16909 ;; Auto vars:     Size  Location     Type
 16910 ;;  lights          1    1[COMMON] unsigned char 
 16911 ;; Return value:  Size  Location     Type
 16912 ;;		None               void
 16913 ;; Registers used:
 16914 ;;		wreg
 16915 ;; Tracked objects:
 16916 ;;		On entry : 0/0
 16917 ;;		On exit  : 0/0
 16918 ;;		Unchanged: 0/0
 16919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;Total ram usage:        2 bytes
 16925 ;; Hardware stack levels used:    1
 16926 ;; This function calls:
 16927 ;;		Nothing
 16928 ;; This function is called by:
 16929 ;;		_setDimmerLights_IntrIOC_GO
 16930 ;; This function uses a non-reentrant model
 16931 ;;
 16932                           
 16933                           
 16934                           ;psect for function _DimmerIntrIOCPointSelect
 16935  11B5                     _DimmerIntrIOCPointSelect:	
 16936                           
 16937                           ;incstack = 0
 16938                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16939                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16940  11B5  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 16941                           
 16942                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16943  11B6  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 16944  11B7  3A01               	xorlw	1
 16945  11B8  1D03               	skipz
 16946  11B9  29BF               	goto	i1l808
 16947                           
 16948                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16949  11BA  303D               	movlw	_DimmerLights1& (0+255)
 16950  11BB  00F6               	movwf	??_DimmerIntrIOCPointSelect
 16951  11BC  0876               	movf	??_DimmerIntrIOCPointSelect,w
 16952  11BD  0021               	movlb	1	; select bank1
 16953  11BE  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 16954  11BF                     i1l808:	
 16955                           
 16956                           ;Dimmer_B1.c: 12: }
 16957                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16958  11BF  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 16959  11C0  3A02               	xorlw	2
 16960  11C1  1D03               	skipz
 16961  11C2  29C8               	goto	i1l809
 16962                           
 16963                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16964  11C3  304C               	movlw	_DimmerLights2& (0+255)
 16965  11C4  00F6               	movwf	??_DimmerIntrIOCPointSelect
 16966  11C5  0876               	movf	??_DimmerIntrIOCPointSelect,w
 16967  11C6  0021               	movlb	1	; select bank1
 16968  11C7  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 16969  11C8                     i1l809:	
 16970                           
 16971                           ;Dimmer_B1.c: 17: }
 16972                           ;Dimmer_B1.c: 21: if (lights == 3) {
 16973  11C8  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 16974  11C9  3A03               	xorlw	3
 16975  11CA  1D03               	skipz
 16976  11CB  0008               	return
 16977                           
 16978                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 16979  11CC  305B               	movlw	_DimmerLights3& (0+255)
 16980  11CD  00F6               	movwf	??_DimmerIntrIOCPointSelect
 16981  11CE  0876               	movf	??_DimmerIntrIOCPointSelect,w
 16982  11CF  0021               	movlb	1	; select bank1
 16983  11D0  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 16984  11D1  0008               	return
 16985  11D2                     __end_of_DimmerIntrIOCPointSelect:	
 16986  007E                     btemp	set	126	;btemp
 16987  007E                     pic14e$flags	set	126
 16988  007E                     wtemp	set	126
 16989  007E                     wtemp0	set	126
 16990  0080                     wtemp1	set	128
 16991  0082                     wtemp2	set	130
 16992  0084                     wtemp3	set	132
 16993  0086                     wtemp4	set	134
 16994  0088                     wtemp5	set	136
 16995  007F                     wtemp6	set	127
 16996  007E                     ttemp	set	126
 16997  007E                     ttemp0	set	126
 16998  0081                     ttemp1	set	129
 16999  0084                     ttemp2	set	132
 17000  0087                     ttemp3	set	135
 17001  007F                     ttemp4	set	127
 17002  007E                     ltemp	set	126
 17003  007E                     ltemp0	set	126
 17004  0082                     ltemp1	set	130
 17005  0086                     ltemp2	set	134
 17006  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     75      78
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      68
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK2[4]), VarLED2(BANK1[4]), 
		 -> VarLED1(BANK1[4]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw3(BANK1[2]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  111871
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2130
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     186
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   30056
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   30056
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0   13168
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12581
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    2053
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     363
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1098
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1098
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38719
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38719
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37776
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35863
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14899
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1741
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15284
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15067
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14974
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     279
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     279
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1253
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1253
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13413
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0   13246
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8910
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1897
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1067
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     167
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0     124
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0     124
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13928
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13928
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     883
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     987
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     675
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0     124
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0     124
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     374
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     286
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Oct 24 14:33:00 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 12AB                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 10CC               _getDimmerLights_StatusFlag 10B9  
                 __end_of_setDelayOff_GO 08DC                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0E1E                             ___ftadd@sign 0048  
                                    l110 17D8                                      l120 1701  
                                    l112 17EC                                      l121 16FD  
                                    l122 16EB                                      l124 16FB  
                                    l402 1316                                      l308 0C4A  
                                    l309 0C8D                                      l283 09D6  
                                    l358 10E9                                      l359 10EA  
                                    l867 11A4                                      l868 11AC  
                                    _GIE 005F                                      _CRC 00CC  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0021                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0070                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00BE                                      _ISR 0004  
                                    _WDT 00CA                                      _Sw1 01C5  
                                    _Sw2 01CE                                      _Sw3 01D7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 10F3  
                  _Buzzer_Initialization 1E55                          __end_of_ADC_Set 1E8C  
                        ?_DelayTimejudge 0076                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0C93  
                  _setDimmerLights_AdjRF 12EE                    _setDimmerLights_AdjGo 1FBE  
                                   ?_ISR 0076                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F0B                             ___ftdiv@sign 003D  
                                   l2212 04A4                                     l2213 04A0  
                                   l3023 0986                                     l2215 04DF  
                                   l2207 0474                                     l1440 1488  
                                   l3017 096F                 ?_DimmerLightsPointSelect 0076  
                                   l1427 1248                                     l1611 158C  
                                   l2261 14BE                                     l3046 03FF  
                                   l2246 0A12                                     l2256 0A68  
                                   l1449 1670                                     l1626 15EF  
                                   l2283 1255                                     l2284 125F  
                        __end_of_IOC_Set 1F18                                     l2713 0D44  
                                   l2298 151C                                     l2655 1F61  
                                   l2737 090F                                     l2687 0242  
                                   l8001 11E6                                     l5603 094C  
                                   l8101 1798                                     l5613 0974  
                                   l5605 0956                                     l5615 097C  
                                   l5607 095B                                     l8105 17A0  
                                   l5721 0ED5                                     l8041 1342  
                                   l5705 043E                                     l8017 13D8  
                                   l5715 0EBF                                     l8061 1203  
                                   l8045 134B                                     l8301 0C18  
                                   l5645 0388                                     l5743 0F2F  
                                   l5735 0F16                                     l5807 0DB0  
                                   l5655 039E                                     l8223 08B2  
                                   l8073 175E                                     l5841 0E15  
                                   l5833 0DFB                                     l5825 0DE0  
                                   l8057 11FA                                     l8049 1354  
                                   l9113 0E33                                     l5673 03CB  
                                   l5649 038F                                     l8233 08D1  
                                   l8091 177D                                     l5835 0E04  
                                   l5827 0DEE                                     l8251 0BC1  
                                   l9115 0E36                                     l5691 0411  
                                   l5675 03D5                                     l5667 03B8  
                                   l5763 06D4                                     l8227 08B8  
                                   l5837 0E07                                     l8157 0B32  
                                   l9125 0E42                                     l5685 03F1  
                                   l5677 03DA                                     l5757 06BE  
                                   l8317 14CE                                     l8229 08C5  
                                   l8079 1769                                     l5599 0945  
                                   l8255 0BC7                                     l8263 0BD3  
                                   l9127 0E45                                     l5695 0423  
                                   l5687 03FB                                     l5679 03DE  
                                   l5791 0733                                     l5775 070F  
                                   l8423 07B3                                     l9303 0468  
                                   l8097 178F                                     l8089 1771  
                                   l8273 0BE3                                     l8281 0BEF  
                                   l9137 0E51                                     l8601 09EC  
                                   l8409 0779                                     l8259 0BCD  
                                   l9147 0E74                                     l9139 0E56  
                                   l9251 1650                                     l5787 072B  
                                   l5779 0717                                     l8419 079D  
                                   l8461 115E                                     l8293 0C0C  
                                   l8277 0BE9                                     l8269 0BDD  
                                   l9149 0E7A                                     l9245 163B  
                                   l9181 173E                                     l8365 112B  
                                   l8621 0C29                                     l8605 09F2  
                                   l9325 0484                                     l9405 1F66  
                                   l9421 0229                                     l9511 16D5  
                                   l8455 1155                                     l8711 10C5  
                                   l9159 0EA2                                     l8367 112F  
                                   l8471 0809                                     l8447 150A  
                                   l8551 0FEE                                     l8543 0FDC  
                                   l8535 0FCA                                     l8457 1158  
                                   l8297 0C12                                     l8289 0C06  
                                   l9185 1745                                     l8473 080C  
                                   l8625 0C2F                                     l8529 0FAF  
                                   l9361 04C5                                     l9409 1F6C  
                                   l9441 0270                                     l9425 0236  
                                   l8723 1547                                     l8619 0C26  
                                   l8627 0C32                                     l8555 0FF7  
                                   l8547 0FE5                                     l8539 0FD3  
                                   l9363 04C7                                     l9451 029D  
                                   l9189 174C                                     l8477 0812  
                                   l8653 0C5B                                     l8637 0C47  
                                   l8573 09AD                                     l8821 0A2D  
                  _myMain_Initialization 1F6F                                     l8399 0CE5  
                                   l8655 0C73                                     l8639 0C41  
                                   l8591 09DC                                     l8567 09A4  
                                   l8831 0A53                                     l9391 050F  
                                   l8593 09DF                                     l8569 09A7  
                                   l8809 0A15                                     l9465 02DB  
                                   l8691 129B                                     l8667 0C8F  
                                   l8587 09BE                                     l9379 04F4  
                                   l8915 08EC                                     l9475 030D  
                                   l8677 1327                                     l8685 1292  
                                   l7957 12D7                                     l8597 09E5  
                                   l8837 0A5E                                     l8917 08EF  
                                   l8679 1332                                     l8687 1295  
                                   l9583 0593                                     l8599 09E9  
                                   l7983 109E                                     l8927 08FB  
                                   l8855 0D21                                     l8769 1470  
                                   l8929 08FE                                     l8857 0D24  
                                   l9665 15D8                                     _CFGS 0CAE  
                                   l7979 1098                                     l8939 090A  
                                   l8867 0D30                                     l7997 11DD  
                                   l8869 0D33                                     l8983 1615  
                                   l8879 0D3F                             __CFG_WDTE$ON 0000  
                                   l8993 1625                                     l8985 1618  
                                   l8969 0B8D                                     l8995 1628  
                                   l8899 0D85                                     l8989 161E  
                                   l8999 162E                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4015 098D  
                                   u4135 03B9                                     u4305 0EF7  
                                   u4225 03F2                                     u4315 0F17  
                                   u4325 0F26                                     u4165 03CC  
                                   u4405 0718                                     u4335 0F30  
                                   u4415 071E                                     u4515 0DE1  
                                   u4195 03DF                                     _PEIE 005E  
                                   u4445 0734                                     u4295 0EE7  
                                   u4455 073A                                     u4375 06E0  
                                   u4545 0DFC                                     u4385 06F0  
                                   u4485 0DB7                                     u3945 0951  
                                   u8045 1774                                     u3965 096A  
                                   u8150 0AE0                                     u8065 177E  
                                   u3985 0977                                     u8075 1788  
                                   u8155 0ADE                                     u8085 1790  
                                   u8455 1102                                     u7935 13C4  
                                   _LWLO 0CAD                                     _RFSW 00D1  
                                   u8895 131C                                     _TMR0 0015  
                                   u9995 0509                                     _RSSI 00D2  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 156E                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0AD6                          __end_of_RF_Main 1E5E  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1EC2  
                                   ltemp 007E            __size_of_setRF_Initialization 000D  
                       _setDimmerReClock 1EC2                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1531  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 007B  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 001A                         __end_of_LED_Main 1FBE  
          __end_of_DimmerIntrPointSelect 1180                    ?_setDimmerLights_Main 0076  
                        ?_setDelayOff_GO 002A                                    ?_main 01E0  
                        __end_of___awdiv 17A7                          __end_of___ftadd 0456  
                        __end_of___ftdiv 0F51                                    u10245 16CB  
                        __end_of___ftmul 075B                                    u10405 15C0  
                                  u10415 15E7                          ___awdiv@divisor 0020  
                                  u10365 123F                          __end_of___fttol 0E1E  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l820 116F                                    i1l821 1177  
                                  i1l808 11BF                                    i1l809 11C8  
                 _setDimmerLights_Switch 1F7E                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00ED  
                                  _RFSW2 00EE                                    _RFSW3 00EF  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0076  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1108                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1460               _setDimmerLights_IntrIOC_GO 1432  
                       __end_of_TMR0_ISR 1405             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 1E94                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0077                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 10B9              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0076  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1FEF  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0076  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                   _Sw_DimmerOnFunc$6120 0063                     _Sw_DimmerOnFunc$6121 0064  
                   _Sw_DimmerOnFunc$6122 0065                       _setRF_DimmerLights 0AD6  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0076  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 000C                             ?_my_MainTime 0076  
              setDimmerLights_Main@clear 0069                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0822                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0076  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 15AF                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1E6E                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D11  
                   _setSw_Initialization 1E94                                   ??_main 006B  
                          ___fttol@sign1 0053                             ?_setLog_Code 0076  
                _setControl_Lights_Table 0F51                   ?_Buzzer_Initialization 0076  
      __size_of_DimmerIntrIOCPointSelect 001D                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0076  
                              ??_IOC_ISR 0079                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 11B5                   ?_setDimmerLights_AdjRF 0076  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0024  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0A6B  
                 ?_myMain_Initialization 0076                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 12EE                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 099D                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1F8E                                   i1l7101 01DE  
                                 i1l7013 0098                                   i1l7021 00A5  
                                 i1l7105 01E4                                   i1l7041 00F5  
                                 i1l7017 009E                                   i1l7109 01EA  
                                 i1l7053 012A                                   i1l7061 0155  
                                 i1l7045 0108                                   i1l7039 00EF  
                                 i1l7047 010E                                   i1l7057 0141  
                                 i1l6603 145A                                   i1l7083 01AD  
                                 i1l7067 0170                                   i1l7069 0176  
                                 i1l7079 01A7                                   i1l7087 01B3  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u633_25 0073                                   _OSCCON 0099  
                                 u747_25 13FE                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1135  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1E73           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 0800                                   _Dimmer 0073  
                                 _DlySw1 00E7                                   _DlySw2 00E9  
                                 _DlySw3 00EB               __end_of_Mcu_Initialization 1095  
                    __end_of_Buzzer_Main 1708                                   _Memory 01A0  
                                 _Timer0 0135       __end_of_setDimmerLights_TriggerAdj 1FDE  
             _setDimmerLights_TriggerAdj 1FCE                                   ___bmul 1095  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 001D  
                              ??___ftdiv 0034                    setDimmerLights@lights 0025  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0076              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D6  
                                 _s_data 00D7                                   _setLED 0BB1  
                                 _myMain 00A0                _setDimmerLights_Main$2417 0067  
              _setDimmerLights_Main$2409 0066                _setDimmerLights_Main$2418 0068  
                       _DimmerLightsIntr 0074                    ?_setSw_Initialization 0076  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 17A7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0076                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 0210  
            _setDimmerLights_IntrControl 0045                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0076  
                  __end_of_SwPointSelect 120C                            ?_setRF_Enable 0076  
                        _RfSWPointSelect 124A             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 007A              __size_of_DimmerLights_Close 0013  
                __size_of_LedPointSelect 0026                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1F60  
                      ?_Sw_DimmerAdjFunc 0076              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 087D  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0041  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0076  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0076  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0076                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0076           DimmerIntrIOCPointSelect@lights 0077  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 126A  
                              ?_TMR0_ISR 0076                                ?_TMR0_Set 0076  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1F9E  
              ??_setControl_Lights_Table 0067                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0076            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0023                                ?_WDT_Main 0076  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1E73  
               __end_of_setDimmerReClock 1ECE                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0076                        ?_CC2500_WriteByte 0076  
                         ??_setRF_Enable 0020                           _DimmerLights11 00CD  
                         _DimmerLights22 00CE                           _DimmerLights33 00CF  
                   __size_of_setLED_Main 004B                ??_setDimmerLights_Trigger 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006B                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0076                              _Buzzer_Main 16BE  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0076  
                                ?_IO_Set 0076                               ??_LED_Main 0024  
                          ?_setMemory_GO 0076                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1EDA                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 006B  
                      LedPointSelect@led 0020                   __size_of_DelayOff_Main 000C  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 156E                      _CC2500_WriteCommand 114D  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 001B  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0042  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 007B  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0023                            ?_setSw_Enable 0076  
                     __size_of_setTxData 00BF                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0028                                  ?_setLED 0021  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1E85  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1F25                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 14F6                  __end_of_RfSWPointSelect 126A  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1EFE  
                                _IOC_Set 1F0B                     __size_of_setLog_Code 0032  
                   ?_CC2500_WriteCommand 0076                        _Flash_Memory_Main 122B  
                      _Flash_Memory_Read 1180              ?_setDimmerLights_IntrIOC_GO 0076  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
                    ?_setRFSW_AdjControl 0076                                  _RF_Data 0120  
                                _RF_Main 1E5B                       ?_Flash_Memory_Main 0076  
                     ?_Flash_Memory_Read 0076                                  _WDT_Set 1EB7  
        __end_of_setControl_Lights_Table 1000                               ??_Fosc_Set 0020  
                            ?_TouchPower 0076                          _Sw_DimmerOnFunc 0D11  
                        _setPercentValue 1678                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0076                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 1EDA                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 2000                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00DC  
                                _VarLED2 00E0                                  _VarLED3 016A  
                      __end_of_getRxData 0A6B                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 11D2          __end_of_setDimmerLights_Trigger 1F9E  
                   ??_setRFSW_AdjControl 0064                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1F8E                                  ___awdiv 1753  
                                ___ftadd 0360                           ??_setSw_Enable 0022  
                                ___ftdiv 0EA8                                  ___ftmul 06A7  
                                ___fttol 0D97                      __end_of_Switch_Main 1072  
                ??_Buzzer_Initialization 0020                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0071  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 15AF  
                                __ptext2 135D                                  __ptext3 1F25  
                                __ptext4 1F6F                                  __ptext5 10A7  
                                __ptext6 0002                                  __ptext7 1066  
                                __ptext8 0210                                  __ptext9 1E9C  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1166                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 124A                __end_of_Flash_Memory_Read 119A  
                             _setRF_Main 0456                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1EE6                        _DimmerLights_Main 1F51  
         __size_of_DlyOff_Initialization 000A                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1EB7               __end_of_CC2500_ClearRXFIFO 1E62  
             __end_of_CC2500_ClearTXFIFO 1E66            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0076                       ?_DimmerLights_Main 0076  
                                _product 006D                           _LedPointSelect 1337  
                    _DelayOffPointSelect 11D2                                  clrloop0 1E80  
         __size_of_Switch_Initialization 0011            __end_of_Switch_Initialization 1083  
                   end_of_initialization 0041                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1386                            _DelayTime_1us 1311  
                      __end_of_setTxData 06A7               __end_of_Flash_Memory_Write 148F  
                                init_ram 1E79                       ?_CC2500_InitSetREG 0076  
                    ??_DimmerLights_Main 006B                     Flash_Memory_Read@ret 0023  
                                initloop 1E7A                               _setSw_Main 0210  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 0800  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1FDE  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0076  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0C22                            _CC2500_TxData 099D  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1F33  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0076                      _Flash_Memory_Modify 1634  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1EA4  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0023                   setSw_Initialization@sw 0023  
              __end_of_DimmerLights_Main 1F60                       _Mcu_Initialization 1083  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0076  
                       ?_RfSWPointSelect 0076                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 135D                  __end_of_Sw_DimmerOnFunc 0D97  
                __end_of_setPercentValue 16BE                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 13B0                      ?_Mcu_Initialization 0076  
                   ?_Flash_Memory_Modify 0076              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1531  
                   ?_Flash_Memory_Unlock 0076                __end_of_CC2500_ReadStatus 0822  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 114D  
                   _setRF_Initialization 1F18                              _Switch_Main 1066  
                      __size_of_LED_Main 0010                           ?_CC2500_RxData 0076  
                         ?_CC2500_TxData 0076                  _DimmerLightsPointSelect 119A  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 07EB  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0076                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 10A7                __size_of_Sw_DimmerAdjFunc 0060  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 11B5  
                      __size_of_TMR0_ISR 002B                   ?_DimmerIntrPointSelect 0076  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 111E  
          __size_of_setDimmerLights_Main 008A                           __end_of_setLED 0C22  
                         __end_of_setBuz 1800          _getDimmerLights_StatusFlag$2453 0022  
                   _CC2500_FrequencyCabr 1ECE                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0076                          _setRFSW_Control 075B  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0076  
                    start_initialization 0015                        _setRF_DimmerValue 14C1  
                        ?_LedPointSelect 0076               __end_of_DimmerLights_Close 10DF  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0079                       ?_setRF_DimmerValue 0076  
             __end_of_CC2500_InitPATable 122B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setSw_Enable 1386  
                           ?_Buzzer_Main 0076                       _set_TimeoutCleared 1E6E  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00D8                              ?_setSw_Main 0076  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0076  
                   __end_of_setSw_Status 1F51                       Sw_DimmerAdjFunc@sw 0029  
                  ?_setRF_Initialization 0076                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0076                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D3                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 001D                                _Tx_Length 00D4  
                            __pdataBANK4 0220                                 ??_setLED 0022  
                               ?_ADC_Set 0076                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E66               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 14F6                    ?_CC2500_FrequencyCabr 0076  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0076  
                        _setRF_Main$5152 0068                              __pbssCOMMON 0070  
                               ?_IOC_Set 0076                                ___latbits 0003  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0076  
                          __pcstackBANK0 0020                            __pcstackBANK3 01E0  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0076  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 007E                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0076  
                               ?_WDT_Set 0076                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013D                            _DimmerLights2 014C  
                          _DimmerLights3 015B                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 0010  
                 ?_CC2500_PowerOnInitial 0076                      __size_of_setRF_Main 00CB  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0076  
                              _getBuz_GO 1FEF      __end_of_Flash_Memory_Initialization 05E8  
            _Flash_Memory_Initialization 0521                                 ?___awdiv 0020  
                              __ptext100 1E5E                                __ptext101 114D  
                              __ptext110 1166                                __ptext102 1E6E  
                              __ptext111 1EFE                                __ptext103 10F3  
                              __ptext112 1EC2                                __ptext104 10DF  
                              __ptext113 1432                                __ptext105 16BE  
                              __ptext114 11B5                                __ptext106 1E55  
                              __ptext108 13DA                                __ptext109 0045  
                               ?___ftadd 003E                                _getRxData 0A02  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 07EB  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1E58                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1F6F                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0150  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1311  
          __end_of_setDimmerLights_AdjGo 1FCE                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00D5           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F7E  
                           _setRF_Enable 1F25                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 11EF                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1753                      _DimmerLightsIntrIOC 00D0  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1FAE                          SwPointSelect@sw 0021  
                              clear_ram0 1E7F                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 05E8      __end_of_DimmerLights_Initialization 12CC  
            _DimmerLights_Initialization 12AB                       _CC2500_ClearRXFIFO 1E5E  
                     _CC2500_ClearTXFIFO 1E62           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1EA4                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1460  
                             ?_getRxData 0076                                 _TMR0_ISR 13DA  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1E8C                         _Sw_DimmerAdjFunc 08DC  
                    ?_CC2500_ClearRXFIFO 0076                      ?_CC2500_ClearTXFIFO 0076  
                    __end_of_my_MainTime 15F1        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00C8              __end_of_CC2500_WriteCommand 1166  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 10A7  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0076  
                       _Sw_DimmerOffFunc 0B42                    _Sw_DimmerAdjFunc$6132 0025  
                  _Sw_DimmerAdjFunc$6133 0026                    _Sw_DimmerAdjFunc$6134 0027  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 0029  
                               _DelayOff 0072                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0078                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0076                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EFE                           ?_SwPointSelect 0076  
                         setLED_Main@led 0023                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 14C1                    _DlyOff_Initialization 1EAD  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1E6A  
                       __size_of_WDT_Set 000B                    _Switch_Initialization 1072  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1F33                             _setMemory_GO 1108  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0076  
                           ?_Switch_Main 0076               ??_DimmerIntrIOCPointSelect 0076  
                       _CC2500_WriteByte 10DF             Flash_Memory_Initialization@i 005E  
                      setRFSW_Control@sw 0063                                setLED@led 0022  
                ??_DimmerIntrPointSelect 0076                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0076  
                       __size_of___ftdiv 00A9                             _setSw_Enable 135D  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 12CC                         ??_LedPointSelect 0020  
                               ___ftpack 093C                             _setSw_Status 1F42  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1708                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0B42                 ?_DelayOff_Initialization 0076  
                       setDelayOff_GO@sw 002E                                 __ptext10 0D11  
                               __ptext11 0B42                                 __ptext20 0A02  
                               __ptext12 08DC                                 __ptext21 148F  
                               __ptext13 1FCE                                 __ptext30 0822  
                               __ptext22 0F51                                 __ptext14 1FBE  
                               __ptext31 06A7                                 __ptext23 075B  
                               __ptext15 1072                                 __ptext40 1083  
                               __ptext32 0360                                 __ptext24 087D  
                               __ptext16 1E94                                 __ptext41 1EB7  
                               __ptext33 1FEF                                 __ptext25 13B0  
                               __ptext17 1F60                                 __ptext50 1FDE  
                               __ptext42 1E8C                                 __ptext34 099D  
                               __ptext26 1095                                 __ptext18 1E5B  
                               __ptext51 122B                                 __ptext43 1135  
                               __ptext35 0C22                                 __ptext27 14F6  
                               __ptext19 0456                                 __ptext60 1531  
                               __ptext52 1634                                 __ptext44 1F0B  
                               __ptext36 0800                                 __ptext28 14C1  
                               __ptext61 0C93                                 __ptext53 1EF2  
                               __ptext45 1E6A                                 __ptext37 111E  
                               __ptext29 12EE                                 __ptext70 1EE6  
                               __ptext62 0BB1                                 __ptext54 0521  
                               __ptext46 1E85                                 __ptext38 1E58  
                               __ptext71 0A6B                                 __ptext63 1337  
                               __ptext55 1460                                 __ptext47 1FAE  
                               __ptext39 1F18                                 __ptext80 093C  
                               __ptext72 05E8                                 __ptext64 10CC  
                               __ptext56 1EA4                                 __ptext48 1708  
                               __ptext81 1F33                                 __ptext73 1F42  
                               __ptext65 1108                                 __ptext57 1180  
                               __ptext49 1F9E                                 __ptext90 11D2  
                               __ptext82 124A                                 __ptext74 11EF  
                               __ptext66 10B9                                 __ptext58 1F51  
                               __ptext91 07EB                                 __ptext83 1F8E  
                               __ptext75 0AD6                                 __ptext67 12AB  
                               __ptext59 0E1E                                 __ptext92 1E66  
                               __ptext84 1F7E                                 __ptext76 1678  
                               __ptext68 1405                                 __ptext93 15F1  
                               __ptext85 119A                                 __ptext77 0D97  
                               __ptext69 1E73                                 __ptext94 1386  
                               __ptext86 17A7                                 __ptext78 0EA8  
                               __ptext95 120C                                 __ptext87 1753  
                               __ptext79 12CC                                 __ptext96 128A  
                               __ptext88 1EDA                                 __ptext97 1ECE  
                               __ptext89 1EAD                                 __ptext98 1311  
                               __ptext99 1E62                                 __product 0220  
          ??_setDimmerLights_IntrControl 0078                  ??_setLED_Initialization 0023  
               __size_of_RfSWPointSelect 0020           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1F42            __end_of_Dimmer_Initialization 1E79  
           __end_of_setDimmerLights_Main 0EA8                             ??_setSw_Main 0068  
                          setLED@command 0021                            __size_of_main 0041  
                            _setRF_Learn 1E9C                 __end_of_CC2500_SIDLEMode 1E6A  
             setDimmerLights_Main@lights 006A              __end_of_DelayOffPointSelect 11EF  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 10CC  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000C  
                        _CC2500_ReadByte 111E                              _my_MainTime 15AF  
                     _CC2500_InitPATable 120C      __size_of_getDimmerLights_StatusFlag 0013  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0521  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0076         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 01E0                                 main@argv 01E2  
                    ?_CC2500_InitPATable 0076                          _CC2500_PowerRST 15F1  
            __end_of_Flash_Memory_Modify 1678                        ??_getPercentValue 0059  
                            _setLog_Code 148F              __end_of_Flash_Memory_Unlock 1EAD  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 128A  
                     __end_of_setSw_Main 0360                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0076                           _DelayTimejudge 13B0  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0078                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0076  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1432  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1405              __end_of_setDimmerLights_Adj 156E  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1E58     __size_of_setDimmerLights_IntrControl 01CB  
                   _Flash_Memory_Erasing 1EF2                       ?_RF_Initialization 0076  
                             _SPI0Buffer 0075          __end_of_DelayOff_Initialization 1EE6  
    __size_of_setDimmerLights_IntrIOC_GO 002E                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1EF2  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 087D  
       __size_of_setControl_Lights_Table 00AF                   __end_of_DelayTimejudge 13DA  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1337  
               __end_of_Sw_DimmerAdjFunc 093C                  __end_of_CC2500_ReadByte 1135  
           __end_of_setSw_Initialization 1E9C                          _Timeout_Counter 10F3  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1FAE  
       __size_of_setDimmerLights_Trigger 0010                 __size_of_Sw_DimmerOnFunc 0086  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1E5B                 __end_of_Sw_DimmerOffFunc 0BB1  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C93                    __end_of_CC2500_TxData 0A02  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1634  
