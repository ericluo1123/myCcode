

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Feb 11 17:14:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0096                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0186                     	;# 
   149  018C                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0186                     	;# 
   218  018C                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0096                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009F                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0186                     	;# 
   287  018C                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0096                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009F                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0186                     	;# 
   356  018C                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0089                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0096                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009F                     	;# 
   415  0108                     	;# 
   416  0109                     	;# 
   417  010C                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0186                     	;# 
   425  018C                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  000E                     	;# 
   441  000F                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  001D                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  0087                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0096                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009F                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0186                     	;# 
   494  018C                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0096                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009F                     	;# 
   553  0108                     	;# 
   554  0109                     	;# 
   555  010C                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0186                     	;# 
   563  018C                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001D                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  0081                     	;# 
   599  0085                     	;# 
   600  0086                     	;# 
   601  0087                     	;# 
   602  0089                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  008F                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0096                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009F                     	;# 
   622  0108                     	;# 
   623  0109                     	;# 
   624  010C                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0186                     	;# 
   632  018C                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0089                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0093                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0096                     	;# 
   686  0098                     	;# 
   687  0099                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009F                     	;# 
   691  0108                     	;# 
   692  0109                     	;# 
   693  010C                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0186                     	;# 
   701  018C                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0089                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009F                     	;# 
   760  0108                     	;# 
   761  0109                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0185                     	;# 
   769  0186                     	;# 
   770  018C                     	;# 
   771  0000                     	;# 
   772  0001                     	;# 
   773  0002                     	;# 
   774  0003                     	;# 
   775  0004                     	;# 
   776  0005                     	;# 
   777  0006                     	;# 
   778  0007                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000D                     	;# 
   784  000E                     	;# 
   785  000E                     	;# 
   786  000F                     	;# 
   787  0010                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  0081                     	;# 
   806  0085                     	;# 
   807  0086                     	;# 
   808  0087                     	;# 
   809  0089                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0096                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009F                     	;# 
   829  0108                     	;# 
   830  0109                     	;# 
   831  010C                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0185                     	;# 
   838  0186                     	;# 
   839  018C                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  000E                     	;# 
   855  000F                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0015                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001B                     	;# 
   870  001C                     	;# 
   871  001D                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  0081                     	;# 
   875  0085                     	;# 
   876  0086                     	;# 
   877  0087                     	;# 
   878  0089                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  008F                     	;# 
   883  0090                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0093                     	;# 
   888  0094                     	;# 
   889  0095                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0096                     	;# 
   893  0098                     	;# 
   894  0099                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009F                     	;# 
   898  0108                     	;# 
   899  0109                     	;# 
   900  010C                     	;# 
   901  010C                     	;# 
   902  010D                     	;# 
   903  010D                     	;# 
   904  010E                     	;# 
   905  010F                     	;# 
   906  0185                     	;# 
   907  0186                     	;# 
   908  018C                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  000E                     	;# 
   924  000F                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0013                     	;# 
   929  0014                     	;# 
   930  0015                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0017                     	;# 
   934  0018                     	;# 
   935  0019                     	;# 
   936  001A                     	;# 
   937  001B                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  001D                     	;# 
   941  001E                     	;# 
   942  001F                     	;# 
   943  0081                     	;# 
   944  0085                     	;# 
   945  0086                     	;# 
   946  0087                     	;# 
   947  0089                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  008F                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0093                     	;# 
   956  0093                     	;# 
   957  0094                     	;# 
   958  0095                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0096                     	;# 
   962  0098                     	;# 
   963  0099                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009F                     	;# 
   967  0108                     	;# 
   968  0109                     	;# 
   969  010C                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  010F                     	;# 
   975  0185                     	;# 
   976  0186                     	;# 
   977  018C                     	;# 
   978  0000                     	;# 
   979  0001                     	;# 
   980  0002                     	;# 
   981  0003                     	;# 
   982  0004                     	;# 
   983  0005                     	;# 
   984  0006                     	;# 
   985  0007                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000D                     	;# 
   991  000E                     	;# 
   992  000E                     	;# 
   993  000F                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0013                     	;# 
   998  0014                     	;# 
   999  0015                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001D                     	;# 
  1010  001E                     	;# 
  1011  001F                     	;# 
  1012  0081                     	;# 
  1013  0085                     	;# 
  1014  0086                     	;# 
  1015  0087                     	;# 
  1016  0089                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0093                     	;# 
  1026  0094                     	;# 
  1027  0095                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0096                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009F                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0185                     	;# 
  1045  0186                     	;# 
  1046  018C                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000E                     	;# 
  1062  000F                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0013                     	;# 
  1067  0014                     	;# 
  1068  0015                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001D                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  0081                     	;# 
  1082  0085                     	;# 
  1083  0086                     	;# 
  1084  0087                     	;# 
  1085  0089                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  008F                     	;# 
  1090  0090                     	;# 
  1091  0091                     	;# 
  1092  0092                     	;# 
  1093  0093                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0096                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009F                     	;# 
  1105  0108                     	;# 
  1106  0109                     	;# 
  1107  010C                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  010F                     	;# 
  1113  0185                     	;# 
  1114  0186                     	;# 
  1115  018C                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  000E                     	;# 
  1131  000F                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  0081                     	;# 
  1151  0085                     	;# 
  1152  0086                     	;# 
  1153  0087                     	;# 
  1154  0089                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  008F                     	;# 
  1159  0090                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0093                     	;# 
  1163  0093                     	;# 
  1164  0094                     	;# 
  1165  0095                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0096                     	;# 
  1169  0098                     	;# 
  1170  0099                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009F                     	;# 
  1174  0108                     	;# 
  1175  0109                     	;# 
  1176  010C                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  010F                     	;# 
  1182  0185                     	;# 
  1183  0186                     	;# 
  1184  018C                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0096                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009C                     	;# 
  1241  009D                     	;# 
  1242  009F                     	;# 
  1243  0108                     	;# 
  1244  0109                     	;# 
  1245  010C                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010F                     	;# 
  1251  0185                     	;# 
  1252  0186                     	;# 
  1253  018C                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  000E                     	;# 
  1269  000F                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0015                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  001D                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  0081                     	;# 
  1289  0085                     	;# 
  1290  0086                     	;# 
  1291  0087                     	;# 
  1292  0089                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  008F                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0096                     	;# 
  1307  0098                     	;# 
  1308  0099                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009F                     	;# 
  1312  0108                     	;# 
  1313  0109                     	;# 
  1314  010C                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0185                     	;# 
  1321  0186                     	;# 
  1322  018C                     	;# 
  1323  001F                     _ADCON0	set	31
  1324  001E                     _ADRES	set	30
  1325  0005                     _PORTA	set	5
  1326  0006                     _PORTB	set	6
  1327  0007                     _PORTC	set	7
  1328  0010                     _T1CON	set	16
  1329  000F                     _TMR1H	set	15
  1330  000E                     _TMR1L	set	14
  1331  005F                     _GIE	set	95
  1332  00F9                     _GO_nDONE	set	249
  1333  005E                     _PEIE	set	94
  1334  002C                     _RA4	set	44
  1335  002D                     _RA5	set	45
  1336  0032                     _RB2	set	50
  1337  0033                     _RB3	set	51
  1338  0034                     _RB4	set	52
  1339  0035                     _RB5	set	53
  1340  0060                     _TMR1IF	set	96
  1341  009F                     _ADCON1	set	159
  1342  009D                     _FVRCON	set	157
  1343  0090                     _OSCCON	set	144
  1344  0085                     _TRISA	set	133
  1345  0086                     _TRISB	set	134
  1346  0087                     _TRISC	set	135
  1347  0095                     _WPUB	set	149
  1348  0408                     _PS0	set	1032
  1349  0409                     _PS1	set	1033
  1350  040A                     _PS2	set	1034
  1351  040B                     _PSA	set	1035
  1352  0460                     _TMR1IE	set	1120
  1353  0185                     _ANSELA	set	389
  1354  0186                     _ANSELB	set	390
  1355                           
  1356                           	psect	text0
  1357  0000                     __ptext0:	
  1358                           ; #config settings
  1359                           
  1360                           
  1361                           ;psect for function _TMR1_ISR
  1362  0000                     
  1363                           	psect	cinit
  1364  0013                     start_initialization:	
  1365  0013                     __initialization:	
  1366                           
  1367                           ; Clear objects allocated to COMMON
  1368  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1369  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1370  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1371  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1372                           
  1373                           ; Clear objects allocated to BANK0
  1374  0017  1383               	bcf	3,7	;select IRP bank0
  1375  0018  3020               	movlw	low __pbssBANK0
  1376  0019  0084               	movwf	4
  1377  001A  3051               	movlw	low (__pbssBANK0+49)
  1378  001B  158A  22D2  118A   	fcall	clear_ram0
  1379                           
  1380                           ; Clear objects allocated to BANK1
  1381  001E  30A0               	movlw	low __pbssBANK1
  1382  001F  0084               	movwf	4
  1383  0020  30E6               	movlw	low (__pbssBANK1+70)
  1384  0021  158A  22D2         	fcall	clear_ram0
  1385  0023                     end_of_initialization:	
  1386                           ;End of C runtime variable initialization code
  1387                           
  1388  0023                     __end_of__initialization:	
  1389  0023  0183               	clrf	3
  1390  0024  158A  2F29         	ljmp	_main	;jump to C main() function
  1391                           
  1392                           	psect	bssCOMMON
  1393  0076                     __pbssCOMMON:	
  1394  0076                     _LED:	
  1395  0076                     	ds	1
  1396  0077                     _Light:	
  1397  0077                     	ds	1
  1398  0078                     _Lights:	
  1399  0078                     	ds	1
  1400  0079                     _LightsControl:	
  1401  0079                     	ds	1
  1402                           
  1403                           	psect	bssBANK0
  1404  0020                     __pbssBANK0:	
  1405  0020                     _SYSC:	
  1406  0020                     	ds	5
  1407  0025                     _myMain:	
  1408  0025                     	ds	5
  1409  002A                     _PIRLED:	
  1410  002A                     	ds	4
  1411  002E                     __CDS:	
  1412  002E                     	ds	4
  1413  0032                     _Timer1:	
  1414  0032                     	ds	3
  1415  0035                     _WDT:	
  1416  0035                     	ds	2
  1417  0037                     _Cmd:	
  1418  0037                     	ds	1
  1419  0038                     _SwDetect:	
  1420  0038                     	ds	1
  1421  0039                     _Temp:	
  1422  0039                     	ds	7
  1423  0040                     _Lights1:	
  1424  0040                     	ds	5
  1425  0045                     _VarErrLED:	
  1426  0045                     	ds	4
  1427  0049                     _VarLED1:	
  1428  0049                     	ds	4
  1429  004D                     _VarLED2:	
  1430  004D                     	ds	4
  1431                           
  1432                           	psect	bssBANK1
  1433  00A0                     __pbssBANK1:	
  1434  00A0                     __PIR:	
  1435  00A0                     	ds	42
  1436  00CA                     _Load:	
  1437  00CA                     	ds	28
  1438                           
  1439                           	psect	clrtext
  1440  0AD2                     clear_ram0:	
  1441                           ;	Called with FSR containing the base address, and
  1442                           ;	W with the last address+1
  1443                           
  1444  0AD2  0064               	clrwdt	;clear the watchdog before getting into this loop
  1445  0AD3                     clrloop0:	
  1446  0AD3  0180               	clrf	0	;clear RAM location pointed to by FSR
  1447  0AD4  0A84               	incf	4,f	;increment pointer
  1448  0AD5  0604               	xorwf	4,w	;XOR with final address
  1449  0AD6  1903               	btfsc	3,2	;have we reached the end yet?
  1450  0AD7  3400               	retlw	0	;all done for this memory range, return
  1451  0AD8  0604               	xorwf	4,w	;XOR again to restore value
  1452  0AD9  2AD3               	goto	clrloop0	;do the next byte
  1453                           
  1454                           	psect	cstackCOMMON
  1455  0070                     __pcstackCOMMON:	
  1456  0070                     ?_setLED_Initialization:	
  1457  0070                     ?_setPIRLED_Main:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_Fosc_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_IO_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_TMR1_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_ADC_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_WDT_Set:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ??_TMR1_ISR:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_Timeout_Counter:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_set_TimeoutCleared:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_WDT_Clearing:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_myMain_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_SYSC_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Temp_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Load_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_Lights_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_PIR_Initialization:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_DetectSYSC_Signal:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getLoad_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_getTemp_AD:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_my_MainTimer:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_SYSC_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Temp_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Load_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_Lights_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_PIR_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_Exception_Main:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setLights_SwOn:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setLights_SwOff:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setLoad_AH_AL_Restore:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setTemp_Initialization:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setTemp_Main:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setSYSC_Initialization:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setSYSC_Main:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_setLights_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_setLights_Main:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_Lights_Control:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_setLights_Line:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_CDS_Initialization:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_CDS_Main:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LedPointSelect:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_LED_Initialization:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_LED_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_Mcu_Initialization:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ?_ISR:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ??_ISR:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_WDT_Main:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_LightsPointSelect:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_getLights_Status:	
  1602                           ; 0 bytes @ 0x0
  1603                           
  1604  0070                     ?_getAll_Lights_Line:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLight_LoadGO:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getLight_Load_Status:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getLights_Allow_Condition:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getCDS_Status:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_All_LightsStatus:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getMain_All_Error_Status:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_getMain_Lights_Count:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_getLoad_OK:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     getLights_Allow_Condition@lights:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634                           
  1635                           ; 1 bytes @ 0x0
  1636  0070                     	ds	4
  1637  0074                     ??_Fosc_Set:	
  1638  0074                     ??_IO_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_TMR1_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_ADC_Set:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_WDT_Set:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_Timeout_Counter:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_set_TimeoutCleared:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_WDT_Clearing:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_myMain_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_SYSC_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_Temp_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_PIR_Initialization:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_DetectSYSC_Signal:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_my_MainTimer:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getAll_Lights_Line:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_setLoad_AH_AL_Restore:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_getLight_LoadGO:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_getLight_Load_Status:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_setTemp_Initialization:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_setSYSC_Initialization:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_setLights_Line:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_CDS_Initialization:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_getCDS_Status:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_LedPointSelect:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_WDT_Main:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getMain_All_LightsStatus:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_getMain_All_Error_Status:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??_getMain_Lights_Count:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??_getLoad_OK:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ??_LightsPointSelect:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     ??___wmul:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0074                     ??___awdiv:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0074                     ??___lwdiv:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0074                     ?_getAD:	
  1735                           ; 0 bytes @ 0x4
  1736                           
  1737  0074                     getCDS_Status@status:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     getAD@adcon1:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getMain_All_LightsStatus@status:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     getMain_Lights_Count@count:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749  0074                     getLoad_OK@ok:	
  1750                           ; 1 bytes @ 0x4
  1751                           
  1752  0074                     setLights_Line@lights:	
  1753                           ; 1 bytes @ 0x4
  1754                           
  1755  0074                     getAll_Lights_Line@line:	
  1756                           ; 1 bytes @ 0x4
  1757                           
  1758  0074                     getLight_LoadGO@loadgo:	
  1759                           ; 1 bytes @ 0x4
  1760                           
  1761  0074                     getLight_Load_Status@loadstatus:	
  1762                           ; 1 bytes @ 0x4
  1763                           
  1764  0074                     ___wmul@product:	
  1765                           ; 1 bytes @ 0x4
  1766                           
  1767                           
  1768                           ; 2 bytes @ 0x4
  1769  0074                     	ds	1
  1770  0075                     ??_getAD:	
  1771  0075                     ??_SYSC_Main:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     ??_setTemp_Main:	
  1775                           ; 0 bytes @ 0x5
  1776                           
  1777  0075                     ??_setSYSC_Main:	
  1778                           ; 0 bytes @ 0x5
  1779                           
  1780  0075                     ??_getLights_Allow_Condition:	
  1781                           ; 0 bytes @ 0x5
  1782                           
  1783  0075                     ??_Mcu_Initialization:	
  1784                           ; 0 bytes @ 0x5
  1785                           
  1786  0075                     LedPointSelect@led:	
  1787                           ; 0 bytes @ 0x5
  1788                           
  1789  0075                     getAD@adcon0:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792  0075                     getMain_Lights_Count@status1:	
  1793                           ; 1 bytes @ 0x5
  1794                           
  1795  0075                     setLoad_AH_AL_Restore@i:	
  1796                           ; 1 bytes @ 0x5
  1797                           
  1798  0075                     LightsPointSelect@lights:	
  1799                           ; 1 bytes @ 0x5
  1800                           
  1801                           
  1802                           ; 1 bytes @ 0x5
  1803  0075                     	ds	1
  1804  0076                     ??_setLED_Initialization:	
  1805  0076                     ??_setLED:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_Load_Initialization:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_Lights_Initialization:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_Temp_Main:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_Lights_Main:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_getLights_Status:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823  0076                     ??_setLights_SwOn:	
  1824                           ; 0 bytes @ 0x6
  1825                           
  1826  0076                     ??_setLights_SwOff:	
  1827                           ; 0 bytes @ 0x6
  1828                           
  1829  0076                     ??_setLights_Initialization:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0076                     ??_setLights_Main:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835  0076                     ??_LED_Initialization:	
  1836                           ; 0 bytes @ 0x6
  1837                           
  1838  0076                     ??_LED_Main:	
  1839                           ; 0 bytes @ 0x6
  1840                           
  1841                           
  1842                           	psect	cstackBANK0
  1843  0051                     __pcstackBANK0:	
  1844                           ; 0 bytes @ 0x6
  1845                           
  1846  0051                     ?_setLED:	
  1847  0051                     ??_getLoad_AD:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  0051                     ??_getTemp_AD:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  0051                     ??_CDS_Main:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  0051                     ?_getCDS_AD:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  0051                     ?_setLights_Trigger:	
  1860                           ; 0 bytes @ 0x0
  1861                           
  1862  0051                     ?___wmul:	
  1863                           ; 0 bytes @ 0x0
  1864                           
  1865  0051                     ?___awdiv:	
  1866                           ; 2 bytes @ 0x0
  1867                           
  1868  0051                     ?___lwdiv:	
  1869                           ; 2 bytes @ 0x0
  1870                           
  1871  0051                     getCDS_AD@channel2:	
  1872                           ; 2 bytes @ 0x0
  1873                           
  1874  0051                     setLED@command:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0051                     setLights_Initialization@lights:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  0051                     getLights_Status@lights:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  0051                     setLights_Trigger@command:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  0051                     getLights_Allow_Condition@allow:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  0051                     _getMain_All_Error_Status$2142:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892  0051                     ___wmul@multiplier:	
  1893                           ; 2 bytes @ 0x0
  1894                           
  1895  0051                     ___awdiv@divisor:	
  1896                           ; 2 bytes @ 0x0
  1897                           
  1898  0051                     ___lwdiv@divisor:	
  1899                           ; 2 bytes @ 0x0
  1900                           
  1901                           
  1902                           ; 2 bytes @ 0x0
  1903  0051                     	ds	1
  1904  0052                     ??_getCDS_AD:	
  1905  0052                     ??_setLights_Trigger:	
  1906                           ; 0 bytes @ 0x1
  1907                           
  1908  0052                     setLED@led:	
  1909                           ; 0 bytes @ 0x1
  1910                           
  1911  0052                     getLights_Status@status:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914  0052                     _getLights_Allow_Condition$4248:	
  1915                           ; 1 bytes @ 0x1
  1916                           
  1917                           
  1918                           ; 1 bytes @ 0x1
  1919  0052                     	ds	1
  1920  0053                     ??_setPIRLED_Main:	
  1921  0053                     ?_setLights:	
  1922                           ; 0 bytes @ 0x2
  1923                           
  1924  0053                     setLED_Initialization@led:	
  1925                           ; 0 bytes @ 0x2
  1926                           
  1927  0053                     getLoad_AD@channel:	
  1928                           ; 1 bytes @ 0x2
  1929                           
  1930  0053                     getTemp_AD@channel:	
  1931                           ; 1 bytes @ 0x2
  1932                           
  1933  0053                     setLights@status:	
  1934                           ; 1 bytes @ 0x2
  1935                           
  1936  0053                     setLights_Trigger@lights:	
  1937                           ; 1 bytes @ 0x2
  1938                           
  1939  0053                     _getMain_All_Error_Status$2143:	
  1940                           ; 1 bytes @ 0x2
  1941                           
  1942  0053                     ___wmul@multiplicand:	
  1943                           ; 2 bytes @ 0x2
  1944                           
  1945  0053                     ___awdiv@dividend:	
  1946                           ; 2 bytes @ 0x2
  1947                           
  1948  0053                     ___lwdiv@dividend:	
  1949                           ; 2 bytes @ 0x2
  1950                           
  1951                           
  1952                           ; 2 bytes @ 0x2
  1953  0053                     	ds	1
  1954  0054                     ??_setLights:	
  1955  0054                     getCDS_AD@i:	
  1956                           ; 0 bytes @ 0x3
  1957                           
  1958  0054                     setPIRLED_Main@count:	
  1959                           ; 1 bytes @ 0x3
  1960                           
  1961  0054                     getLoad_AD@k:	
  1962                           ; 1 bytes @ 0x3
  1963                           
  1964  0054                     getTemp_AD@ADRES:	
  1965                           ; 1 bytes @ 0x3
  1966                           
  1967  0054                     setLights_SwOn@sw:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970  0054                     setLights_SwOff@sw:	
  1971                           ; 1 bytes @ 0x3
  1972                           
  1973                           
  1974                           ; 1 bytes @ 0x3
  1975  0054                     	ds	1
  1976  0055                     getCDS_AD@j:	
  1977  0055                     getMain_All_Error_Status@command:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0055                     getLoad_AD@j:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983  0055                     setLights@lights:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986  0055                     ___awdiv@counter:	
  1987                           ; 1 bytes @ 0x4
  1988                           
  1989  0055                     ___lwdiv@counter:	
  1990                           ; 1 bytes @ 0x4
  1991                           
  1992                           
  1993                           ; 1 bytes @ 0x4
  1994  0055                     	ds	1
  1995  0056                     getCDS_AD@channel1:	
  1996  0056                     getMain_All_Error_Status@status:	
  1997                           ; 1 bytes @ 0x5
  1998                           
  1999  0056                     getLoad_AD@ADRES:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002  0056                     setLights_Main@lights:	
  2003                           ; 1 bytes @ 0x5
  2004                           
  2005  0056                     ___awdiv@sign:	
  2006                           ; 1 bytes @ 0x5
  2007                           
  2008  0056                     ___lwdiv@quotient:	
  2009                           ; 1 bytes @ 0x5
  2010                           
  2011                           
  2012                           ; 2 bytes @ 0x5
  2013  0056                     	ds	1
  2014  0057                     ??_PIR_Main:	
  2015  0057                     ??_Exception_Main:	
  2016                           ; 0 bytes @ 0x6
  2017                           
  2018  0057                     getLoad_AD@i:	
  2019                           ; 0 bytes @ 0x6
  2020                           
  2021  0057                     setTemp_Main@error:	
  2022                           ; 1 bytes @ 0x6
  2023                           
  2024  0057                     ___awdiv@quotient:	
  2025                           ; 1 bytes @ 0x6
  2026                           
  2027                           
  2028                           ; 2 bytes @ 0x6
  2029  0057                     	ds	1
  2030  0058                     ??_Load_Main:	
  2031  0058                     Exception_Main@lights:	
  2032                           ; 0 bytes @ 0x7
  2033                           
  2034  0058                     setTemp_Main@TempGO:	
  2035                           ; 1 bytes @ 0x7
  2036                           
  2037                           
  2038                           ; 1 bytes @ 0x7
  2039  0058                     	ds	1
  2040  0059                     ?_getPIR_AD:	
  2041  0059                     ??_Lights_Control:	
  2042                           ; 0 bytes @ 0x8
  2043                           
  2044  0059                     Exception_Main@count:	
  2045                           ; 0 bytes @ 0x8
  2046                           
  2047  0059                     setTemp_Main@SafeValue:	
  2048                           ; 1 bytes @ 0x8
  2049                           
  2050  0059                     getPIR_AD@channel2:	
  2051                           ; 1 bytes @ 0x8
  2052                           
  2053                           
  2054                           ; 1 bytes @ 0x8
  2055  0059                     	ds	1
  2056  005A                     ??_getPIR_AD:	
  2057  005A                     Exception_Main@status:	
  2058                           ; 0 bytes @ 0x9
  2059                           
  2060  005A                     Load_Main@error:	
  2061                           ; 1 bytes @ 0x9
  2062                           
  2063  005A                     setTemp_Main@DangerValue:	
  2064                           ; 1 bytes @ 0x9
  2065                           
  2066                           
  2067                           ; 1 bytes @ 0x9
  2068  005A                     	ds	1
  2069  005B                     setTemp_Main@AD:	
  2070  005B                     Lights_Control@lights:	
  2071                           ; 1 bytes @ 0xA
  2072                           
  2073  005B                     Exception_Main@i:	
  2074                           ; 1 bytes @ 0xA
  2075                           
  2076  005B                     _Load_Main$2405:	
  2077                           ; 2 bytes @ 0xA
  2078                           
  2079                           
  2080                           ; 2 bytes @ 0xA
  2081  005B                     	ds	1
  2082  005C                     PIR_Main@error:	
  2083                           
  2084                           ; 1 bytes @ 0xB
  2085  005C                     	ds	1
  2086  005D                     Load_Main@ErrorCountValue:	
  2087  005D                     PIR_Main@Enable_Switch:	
  2088                           ; 1 bytes @ 0xC
  2089                           
  2090  005D                     getPIR_AD@j:	
  2091                           ; 1 bytes @ 0xC
  2092                           
  2093  005D                     Exception_Main@i_2155:	
  2094                           ; 1 bytes @ 0xC
  2095                           
  2096                           
  2097                           ; 2 bytes @ 0xC
  2098  005D                     	ds	1
  2099  005E                     Load_Main@Load_RunStatus:	
  2100  005E                     getPIR_AD@channel1:	
  2101                           ; 1 bytes @ 0xD
  2102                           
  2103  005E                     _PIR_Main$2874:	
  2104                           ; 1 bytes @ 0xD
  2105                           
  2106                           
  2107                           ; 2 bytes @ 0xD
  2108  005E                     	ds	1
  2109  005F                     Exception_Main@error:	
  2110  005F                     Load_Main@LightsCount:	
  2111                           ; 1 bytes @ 0xE
  2112                           
  2113  005F                     getPIR_AD@VRAD1:	
  2114                           ; 1 bytes @ 0xE
  2115                           
  2116                           
  2117                           ; 1 bytes @ 0xE
  2118  005F                     	ds	1
  2119  0060                     PIR_Main@TriggerValue:	
  2120  0060                     getPIR_AD@VRAD:	
  2121                           ; 1 bytes @ 0xF
  2122                           
  2123  0060                     Load_Main@i:	
  2124                           ; 1 bytes @ 0xF
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0xF
  2128  0060                     	ds	1
  2129  0061                     PIR_Main@cds:	
  2130  0061                     getPIR_AD@i:	
  2131                           ; 1 bytes @ 0x10
  2132                           
  2133                           
  2134                           ; 1 bytes @ 0x10
  2135  0061                     	ds	1
  2136  0062                     PIR_Main@LightsStatus:	
  2137                           
  2138                           ; 1 bytes @ 0x11
  2139  0062                     	ds	1
  2140  0063                     ?_main:	
  2141  0063                     main@argc:	
  2142                           ; 2 bytes @ 0x12
  2143                           
  2144                           
  2145                           ; 2 bytes @ 0x12
  2146  0063                     	ds	2
  2147  0065                     main@argv:	
  2148                           
  2149                           ; 2 bytes @ 0x14
  2150  0065                     	ds	2
  2151  0067                     ??_main:	
  2152                           
  2153                           ; 0 bytes @ 0x16
  2154  0067                     	ds	1
  2155                           
  2156                           	psect	maintext
  2157  0F29                     __pmaintext:	
  2158 ;;
  2159 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2160 ;;
  2161 ;; *************** function _main *****************
  2162 ;; Defined at:
  2163 ;;		line 7 in file "../src/Main_B1.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  argc            2   18[BANK0 ] int 
  2166 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  2   18[BANK0 ] int 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 17F/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2178 ;;      Params:         0       4       0       0
  2179 ;;      Locals:         0       0       0       0
  2180 ;;      Temps:          0       1       0       0
  2181 ;;      Totals:         0       5       0       0
  2182 ;;Total ram usage:        5 bytes
  2183 ;; Hardware stack levels required when called:    7
  2184 ;; This function calls:
  2185 ;;		_CDS_Initialization
  2186 ;;		_CDS_Main
  2187 ;;		_DetectSYSC_Signal
  2188 ;;		_Exception_Main
  2189 ;;		_LED_Initialization
  2190 ;;		_LED_Main
  2191 ;;		_Lights_Initialization
  2192 ;;		_Lights_Main
  2193 ;;		_Load_Initialization
  2194 ;;		_Load_Main
  2195 ;;		_Mcu_Initialization
  2196 ;;		_PIR_Initialization
  2197 ;;		_PIR_Main
  2198 ;;		_SYSC_Initialization
  2199 ;;		_SYSC_Main
  2200 ;;		_Temp_Initialization
  2201 ;;		_Temp_Main
  2202 ;;		_WDT_Main
  2203 ;;		_getCDS_AD
  2204 ;;		_getLoad_AD
  2205 ;;		_getPIR_AD
  2206 ;;		_getTemp_AD
  2207 ;;		_myMain_Initialization
  2208 ;;		_my_MainTimer
  2209 ;; This function is called by:
  2210 ;;		Startup code after reset
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           
  2215                           ;psect for function _main
  2216  0F29                     _main:	
  2217                           
  2218                           ;Main_B1.c: 8: myMain_Initialization();
  2219                           
  2220                           ;incstack = 0
  2221                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2222  0F29  158A  227E  158A   	fcall	_myMain_Initialization
  2223                           
  2224                           ;Main_B1.c: 9: Mcu_Initialization();
  2225  0F2C  158A  2346  158A   	fcall	_Mcu_Initialization
  2226                           
  2227                           ;Main_B1.c: 10: ;;
  2228                           ;Main_B1.c: 11: LED_Initialization();
  2229  0F2F  158A  2302  158A   	fcall	_LED_Initialization
  2230                           
  2231                           ;Main_B1.c: 12: ;;
  2232                           ;Main_B1.c: 14: SYSC_Initialization();
  2233  0F32  158A  2285  158A   	fcall	_SYSC_Initialization
  2234                           
  2235                           ;Main_B1.c: 15: Temp_Initialization();
  2236  0F35  158A  228B  158A   	fcall	_Temp_Initialization
  2237                           
  2238                           ;Main_B1.c: 16: Load_Initialization();
  2239  0F38  158A  2282  158A   	fcall	_Load_Initialization
  2240                           
  2241                           ;Main_B1.c: 17: ;;
  2242                           ;Main_B1.c: 18: ;;
  2243                           ;Main_B1.c: 20: ;;
  2244                           ;Main_B1.c: 21: Lights_Initialization();
  2245  0F3B  158A  2295  158A   	fcall	_Lights_Initialization
  2246                           
  2247                           ;Main_B1.c: 22: CDS_Initialization();
  2248  0F3E  158A  2291  158A   	fcall	_CDS_Initialization
  2249                           
  2250                           ;Main_B1.c: 23: PIR_Initialization();
  2251  0F41  158A  22F7  158A   	fcall	_PIR_Initialization
  2252  0F44                     l5460:	
  2253                           ;Main_B1.c: 24: ;;
  2254                           ;Main_B1.c: 25: ;;
  2255                           ;Main_B1.c: 26: ;;
  2256                           ;Main_B1.c: 27: ;;
  2257                           ;Main_B1.c: 28: ;;
  2258                           ;Main_B1.c: 30: while (1) {
  2259                           
  2260                           
  2261                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2262  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0F46  1C25               	btfss	_myMain,0
  2265  0F47  2F67               	goto	l5472
  2266                           
  2267                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2268  0F48  158A  230E  158A   	fcall	_DetectSYSC_Signal
  2269                           
  2270                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2271  0F4B  3001               	movlw	1
  2272  0F4C  158A  2670  158A   	fcall	_getLoad_AD
  2273                           
  2274                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2275  0F4F  3011               	movlw	17
  2276  0F50  158A  251F  158A   	fcall	_getTemp_AD
  2277                           
  2278                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2279  0F53  3031               	movlw	49
  2280  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2281  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2282  0F56  00E7               	movwf	??_main
  2283  0F57  0867               	movf	??_main,w
  2284  0F58  00D1               	movwf	getCDS_AD@channel2
  2285  0F59  3009               	movlw	9
  2286  0F5A  158A  24B3  158A   	fcall	_getCDS_AD
  2287                           
  2288                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2289  0F5D  300D               	movlw	13
  2290  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0F60  00E7               	movwf	??_main
  2293  0F61  0867               	movf	??_main,w
  2294  0F62  00D9               	movwf	getPIR_AD@channel2
  2295  0F63  3005               	movlw	5
  2296  0F64  118A  2419  158A   	fcall	_getPIR_AD
  2297  0F67                     l5472:	
  2298                           
  2299                           ;Main_B1.c: 57: }
  2300                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2301  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2302  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2303  0F69  1C32               	btfss	_Timer1,0
  2304  0F6A  2F44               	goto	l5460
  2305                           
  2306                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2307  0F6B  1032               	bcf	_Timer1,0
  2308                           
  2309                           ;Main_B1.c: 96: my_MainTimer();
  2310  0F6C  158A  2444  158A   	fcall	_my_MainTimer
  2311                           
  2312                           ;Main_B1.c: 97: WDT_Main();
  2313  0F6F  158A  2366  158A   	fcall	_WDT_Main
  2314                           
  2315                           ;Main_B1.c: 98: ;;
  2316                           ;Main_B1.c: 99: ;;
  2317                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2318  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2319  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2320  0F74  1C25               	btfss	_myMain,0
  2321  0F75  2F44               	goto	l5460
  2322                           
  2323                           ;Main_B1.c: 101: ;;
  2324                           ;Main_B1.c: 103: LED_Main();
  2325  0F76  158A  227F  158A   	fcall	_LED_Main
  2326                           
  2327                           ;Main_B1.c: 104: ;;
  2328                           ;Main_B1.c: 106: SYSC_Main();
  2329  0F79  158A  2288  158A   	fcall	_SYSC_Main
  2330                           
  2331                           ;Main_B1.c: 107: Temp_Main();
  2332  0F7C  158A  228E  158A   	fcall	_Temp_Main
  2333                           
  2334                           ;Main_B1.c: 108: Load_Main();
  2335  0F7F  118A  222F  158A   	fcall	_Load_Main
  2336                           
  2337                           ;Main_B1.c: 109: ;;
  2338                           ;Main_B1.c: 111: Lights_Main();
  2339  0F82  158A  2495  158A   	fcall	_Lights_Main
  2340                           
  2341                           ;Main_B1.c: 112: ;;
  2342                           ;Main_B1.c: 113: ;;
  2343                           ;Main_B1.c: 114: CDS_Main();
  2344  0F85  158A  257A  158A   	fcall	_CDS_Main
  2345                           
  2346                           ;Main_B1.c: 115: PIR_Main();
  2347  0F88  118A  2026  158A   	fcall	_PIR_Main
  2348                           
  2349                           ;Main_B1.c: 117: ;;
  2350                           ;Main_B1.c: 118: ;;
  2351                           ;Main_B1.c: 119: ;;
  2352                           ;Main_B1.c: 120: ;;
  2353                           ;Main_B1.c: 121: Exception_Main();
  2354  0F8B  118A  2547  158A   	fcall	_Exception_Main
  2355  0F8E  2F44               	goto	l5460
  2356  0F8F                     __end_of_main:	
  2357                           ;Main_B1.c: 128: }
  2358                           ;Main_B1.c: 129: }
  2359                           ;Main_B1.c: 163: }
  2360                           ;Main_B1.c: 164: return (0);
  2361                           ;	Return value of _main is never used
  2362                           
  2363                           
  2364                           	psect	text1
  2365  0C44                     __ptext1:	
  2366 ;; *************** function _my_MainTimer *****************
  2367 ;; Defined at:
  2368 ;;		line 185 in file "../src/Main_B1.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2382 ;;      Params:         0       0       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          1       0       0       0
  2385 ;;      Totals:         1       0       0       0
  2386 ;;Total ram usage:        1 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    2
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           
  2397                           ;psect for function _my_MainTimer
  2398  0C44                     _my_MainTimer:	
  2399                           
  2400                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2401                           
  2402                           ;incstack = 0
  2403                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2404  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  2406  0C46  1825               	btfsc	_myMain,0
  2407  0C47  2C54               	goto	l3984
  2408                           
  2409                           ;Main_B1.c: 188: myMain.PowerCount++;
  2410  0C48  3001               	movlw	1
  2411  0C49  00F4               	movwf	??_my_MainTimer
  2412  0C4A  0874               	movf	??_my_MainTimer,w
  2413  0C4B  07A6               	addwf	_myMain+1,f
  2414                           
  2415                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2416  0C4C  0826               	movf	_myMain+1,w
  2417  0C4D  3A4B               	xorlw	75
  2418  0C4E  1D03               	skipz
  2419  0C4F  0008               	return
  2420                           
  2421                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2422  0C50  01A6               	clrf	_myMain+1
  2423                           
  2424                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2425  0C51  1425               	bsf	_myMain,0
  2426                           
  2427                           ;Main_B1.c: 196: ;;
  2428                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2429  0C52  1625               	bsf	_myMain,4
  2430                           
  2431                           ;Main_B1.c: 206: }
  2432                           ;Main_B1.c: 207: } else {
  2433  0C53  0008               	return
  2434  0C54                     l3984:	
  2435                           
  2436                           ;Main_B1.c: 208: myMain.PowerCount++;
  2437  0C54  3001               	movlw	1
  2438  0C55  00F4               	movwf	??_my_MainTimer
  2439  0C56  0874               	movf	??_my_MainTimer,w
  2440  0C57  07A6               	addwf	_myMain+1,f
  2441                           
  2442                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2443  0C58  0826               	movf	_myMain+1,w
  2444  0C59  3A32               	xorlw	50
  2445  0C5A  1D03               	skipz
  2446  0C5B  0008               	return
  2447                           
  2448                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2449  0C5C  01A6               	clrf	_myMain+1
  2450  0C5D  0008               	return
  2451  0C5E                     __end_of_my_MainTimer:	
  2452                           
  2453                           	psect	text2
  2454  0A7E                     __ptext2:	
  2455 ;; *************** function _myMain_Initialization *****************
  2456 ;; Defined at:
  2457 ;;		line 170 in file "../src/Main_B1.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		None
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2471 ;;      Params:         0       0       0       0
  2472 ;;      Locals:         0       0       0       0
  2473 ;;      Temps:          0       0       0       0
  2474 ;;      Totals:         0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    2
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _myMain_Initialization
  2487  0A7E                     _myMain_Initialization:	
  2488                           
  2489                           ;incstack = 0
  2490                           ; Regs used in _myMain_Initialization: []
  2491  0A7E  0008               	return
  2492  0A7F                     __end_of_myMain_Initialization:	
  2493                           
  2494                           	psect	text3
  2495  0D1F                     __ptext3:	
  2496 ;; *************** function _getTemp_AD *****************
  2497 ;; Defined at:
  2498 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  channel         1    wreg     unsigned char 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  channel         1    2[BANK0 ] unsigned char 
  2503 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       2       0       0
  2515 ;;      Temps:          0       2       0       0
  2516 ;;      Totals:         0       4       0       0
  2517 ;;Total ram usage:        4 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		_getAD
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _getTemp_AD
  2529  0D1F                     _getTemp_AD:	
  2530                           
  2531                           ;incstack = 0
  2532                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2533                           ;getTemp_AD@channel stored from wreg
  2534  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  2535  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  2536  0D21  00D3               	movwf	getTemp_AD@channel
  2537                           
  2538                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2539  0D22  01D4               	clrf	getTemp_AD@ADRES
  2540                           
  2541                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2542  0D23  1D39               	btfss	_Temp,2
  2543  0D24  2D3D               	goto	l4976
  2544                           
  2545                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2546  0D25  3070               	movlw	112
  2547  0D26  00D1               	movwf	??_getTemp_AD
  2548  0D27  0851               	movf	??_getTemp_AD,w
  2549  0D28  00F4               	movwf	getAD@adcon1
  2550  0D29  0853               	movf	getTemp_AD@channel,w
  2551  0D2A  158A  2479  158A   	fcall	_getAD
  2552  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0D2F  00D2               	movwf	??_getTemp_AD+1
  2555  0D30  0852               	movf	??_getTemp_AD+1,w
  2556  0D31  00D4               	movwf	getTemp_AD@ADRES
  2557                           
  2558                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2559  0D32  0854               	movf	getTemp_AD@ADRES,w
  2560  0D33  1903               	btfsc	3,2
  2561  0D34  2D3D               	goto	l4976
  2562                           
  2563                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2564  0D35  0854               	movf	getTemp_AD@ADRES,w
  2565  0D36  023F               	subwf	_Temp+6,w
  2566  0D37  1803               	skipnc
  2567  0D38  2D3D               	goto	l4976
  2568                           
  2569                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2570  0D39  0854               	movf	getTemp_AD@ADRES,w
  2571  0D3A  00D1               	movwf	??_getTemp_AD
  2572  0D3B  0851               	movf	??_getTemp_AD,w
  2573  0D3C  00BF               	movwf	_Temp+6
  2574  0D3D                     l4976:	
  2575                           
  2576                           ;OverTemperature_B1.c: 32: }
  2577                           ;OverTemperature_B1.c: 33: }
  2578                           ;OverTemperature_B1.c: 34: }
  2579                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0x70);
  2580  0D3D  3070               	movlw	112
  2581  0D3E  00D1               	movwf	??_getTemp_AD
  2582  0D3F  0851               	movf	??_getTemp_AD,w
  2583  0D40  00F4               	movwf	getAD@adcon1
  2584  0D41  0853               	movf	getTemp_AD@channel,w
  2585  0D42  158A  2479         	fcall	_getAD
  2586  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  2587  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  2588  0D46  00D2               	movwf	??_getTemp_AD+1
  2589  0D47  0852               	movf	??_getTemp_AD+1,w
  2590  0D48  00D4               	movwf	getTemp_AD@ADRES
  2591  0D49  0008               	return
  2592  0D4A                     __end_of_getTemp_AD:	
  2593                           
  2594                           	psect	text4
  2595  0419                     __ptext4:	
  2596 ;; *************** function _getPIR_AD *****************
  2597 ;; Defined at:
  2598 ;;		line 341 in file "../src/PIR_B1.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  channel1        1    wreg     unsigned char 
  2601 ;;  channel2        1    8[BANK0 ] unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  channel1        1   13[BANK0 ] unsigned char 
  2604 ;;  i               1   16[BANK0 ] unsigned char 
  2605 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2606 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2607 ;;  j               1   12[BANK0 ] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2617 ;;      Params:         0       1       0       0
  2618 ;;      Locals:         0       5       0       0
  2619 ;;      Temps:          0       3       0       0
  2620 ;;      Totals:         0       9       0       0
  2621 ;;Total ram usage:        9 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    4
  2624 ;; This function calls:
  2625 ;;		___awdiv
  2626 ;;		___lwdiv
  2627 ;;		_getAD
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _getPIR_AD
  2635  0419                     _getPIR_AD:	
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2639                           ;getPIR_AD@channel1 stored from wreg
  2640  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2641  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2642  041B  00DE               	movwf	getPIR_AD@channel1
  2643                           
  2644                           ;PIR_B1.c: 342: char i = 0, j = 0;
  2645  041C  01E1               	clrf	getPIR_AD@i
  2646  041D  01DD               	clrf	getPIR_AD@j
  2647                           
  2648                           ;PIR_B1.c: 343: char VRAD = 0, VRAD1 = 0;
  2649  041E  01E0               	clrf	getPIR_AD@VRAD
  2650  041F  01DF               	clrf	getPIR_AD@VRAD1
  2651                           
  2652                           ;PIR_B1.c: 344: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2653  0420  1683               	bsf	3,5	;RP0=1, select bank1
  2654  0421  1303               	bcf	3,6	;RP1=0, select bank1
  2655  0422  1CA0               	btfss	__PIR^(0+128),1
  2656  0423  0008               	return
  2657  0424  1920               	btfsc	__PIR^(0+128),2
  2658  0425  0008               	return
  2659                           
  2660                           ;PIR_B1.c: 345: _PIR.GO = 1;
  2661  0426  1520               	bsf	__PIR^(0+128),2
  2662                           
  2663                           ;PIR_B1.c: 352: VRAD1 = getAD(channel1, 0x70);
  2664  0427  3070               	movlw	112
  2665  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2667  042A  00DA               	movwf	??_getPIR_AD
  2668  042B  085A               	movf	??_getPIR_AD,w
  2669  042C  00F4               	movwf	getAD@adcon1
  2670  042D  085E               	movf	getPIR_AD@channel1,w
  2671  042E  158A  2479  118A   	fcall	_getAD
  2672  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2674  0433  00DB               	movwf	??_getPIR_AD+1
  2675  0434  085B               	movf	??_getPIR_AD+1,w
  2676  0435  00DF               	movwf	getPIR_AD@VRAD1
  2677                           
  2678                           ;PIR_B1.c: 353: VRAD = VRAD1 / 25;
  2679  0436  3019               	movlw	25
  2680  0437  00D1               	movwf	___awdiv@divisor
  2681  0438  3000               	movlw	0
  2682  0439  00D2               	movwf	___awdiv@divisor+1
  2683  043A  085F               	movf	getPIR_AD@VRAD1,w
  2684  043B  00DA               	movwf	??_getPIR_AD
  2685  043C  01DB               	clrf	??_getPIR_AD+1
  2686  043D  085A               	movf	??_getPIR_AD,w
  2687  043E  00D3               	movwf	___awdiv@dividend
  2688  043F  085B               	movf	??_getPIR_AD+1,w
  2689  0440  00D4               	movwf	___awdiv@dividend+1
  2690  0441  158A  26CC  118A   	fcall	___awdiv
  2691  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0446  0851               	movf	?___awdiv,w
  2694  0447  00DC               	movwf	??_getPIR_AD+2
  2695  0448  085C               	movf	??_getPIR_AD+2,w
  2696  0449  00E0               	movwf	getPIR_AD@VRAD
  2697                           
  2698                           ;PIR_B1.c: 354: _PIR.SignalAD = getAD(channel2, 0x70);
  2699  044A  3070               	movlw	112
  2700  044B  00DA               	movwf	??_getPIR_AD
  2701  044C  085A               	movf	??_getPIR_AD,w
  2702  044D  00F4               	movwf	getAD@adcon1
  2703  044E  0859               	movf	getPIR_AD@channel2,w
  2704  044F  158A  2479  118A   	fcall	_getAD
  2705  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2706  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2707  0454  00DB               	movwf	??_getPIR_AD+1
  2708  0455  085B               	movf	??_getPIR_AD+1,w
  2709  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2710  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2711  0458  00A1               	movwf	(__PIR^(0+128)+1)
  2712                           
  2713                           ;PIR_B1.c: 368: if (VRAD < 1) {
  2714  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2715  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2716  045B  08E0               	movf	getPIR_AD@VRAD,f
  2717  045C  1D03               	skipz
  2718  045D  2C60               	goto	l4992
  2719                           
  2720                           ;PIR_B1.c: 369: _PIR.CloseTimeValue = 5;
  2721  045E  3005               	movlw	5
  2722  045F  2C66               	goto	L1
  2723  0460                     l4992:	
  2724                           ;PIR_B1.c: 370: } else if (VRAD < 3) {
  2725                           
  2726  0460  3003               	movlw	3
  2727  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2728  0462  0260               	subwf	getPIR_AD@VRAD,w
  2729  0463  1803               	skipnc
  2730  0464  2C6B               	goto	l4996
  2731                           
  2732                           ;PIR_B1.c: 371: _PIR.CloseTimeValue = 60;
  2733  0465  303C               	movlw	60
  2734  0466                     L1:	
  2735  0466  1683               	bsf	3,5	;RP0=1, select bank1
  2736  0467  1303               	bcf	3,6	;RP1=0, select bank1
  2737  0468  00C3               	movwf	(__PIR^(0+128)+35)
  2738  0469  3000               	movlw	0
  2739  046A  2C91               	goto	L5
  2740  046B                     l4996:	
  2741                           ;PIR_B1.c: 372: } else if (VRAD < 5) {
  2742                           
  2743  046B  3005               	movlw	5
  2744  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2745  046D  0260               	subwf	getPIR_AD@VRAD,w
  2746  046E  1803               	skipnc
  2747  046F  2C76               	goto	l5000
  2748                           
  2749                           ;PIR_B1.c: 373: _PIR.CloseTimeValue = 300;
  2750  0470  302C               	movlw	44
  2751  0471  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0472  1303               	bcf	3,6	;RP1=0, select bank1
  2753  0473  00C3               	movwf	(__PIR^(0+128)+35)
  2754  0474  3001               	movlw	1
  2755  0475  2C91               	goto	L5
  2756  0476                     l5000:	
  2757                           ;PIR_B1.c: 374: } else if (VRAD < 7) {
  2758                           
  2759  0476  3007               	movlw	7
  2760  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0478  0260               	subwf	getPIR_AD@VRAD,w
  2762  0479  1803               	skipnc
  2763  047A  2C81               	goto	l5004
  2764                           
  2765                           ;PIR_B1.c: 375: _PIR.CloseTimeValue = 600;
  2766  047B  3058               	movlw	88
  2767  047C  1683               	bsf	3,5	;RP0=1, select bank1
  2768  047D  1303               	bcf	3,6	;RP1=0, select bank1
  2769  047E  00C3               	movwf	(__PIR^(0+128)+35)
  2770  047F  3002               	movlw	2
  2771  0480  2C91               	goto	L5
  2772  0481                     l5004:	
  2773                           ;PIR_B1.c: 376: } else if (VRAD < 9) {
  2774                           
  2775  0481  3009               	movlw	9
  2776  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2777  0483  0260               	subwf	getPIR_AD@VRAD,w
  2778  0484  1803               	skipnc
  2779  0485  2C8C               	goto	l5008
  2780                           
  2781                           ;PIR_B1.c: 377: _PIR.CloseTimeValue = 900;
  2782  0486  3084               	movlw	132
  2783  0487  1683               	bsf	3,5	;RP0=1, select bank1
  2784  0488  1303               	bcf	3,6	;RP1=0, select bank1
  2785  0489  00C3               	movwf	(__PIR^(0+128)+35)
  2786  048A  3003               	movlw	3
  2787  048B  2C91               	goto	L5
  2788  048C                     l5008:	
  2789                           ;PIR_B1.c: 378: } else {
  2790                           
  2791                           
  2792                           ;PIR_B1.c: 379: _PIR.CloseTimeValue = 1200;
  2793  048C  30B0               	movlw	176
  2794  048D  1683               	bsf	3,5	;RP0=1, select bank1
  2795  048E  1303               	bcf	3,6	;RP1=0, select bank1
  2796  048F  00C3               	movwf	(__PIR^(0+128)+35)
  2797  0490  3004               	movlw	4
  2798  0491                     L5:	
  2799  0491  00C4               	movwf	(__PIR^(0+128)+36)
  2800                           
  2801                           ;PIR_B1.c: 380: }
  2802                           ;PIR_B1.c: 389: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2803  0492  0821               	movf	(__PIR^(0+128)+1),w
  2804  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2806  0495  00DA               	movwf	??_getPIR_AD
  2807  0496  1683               	bsf	3,5	;RP0=1, select bank1
  2808  0497  1303               	bcf	3,6	;RP1=0, select bank1
  2809  0498  0824               	movf	(__PIR^(0+128)+4),w
  2810  0499  3EA5               	addlw	(__PIR+5)& (0+255)
  2811  049A  0084               	movwf	4
  2812  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2813  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2814  049D  085A               	movf	??_getPIR_AD,w
  2815  049E  1383               	bcf	3,7	;select IRP bank1
  2816  049F  0080               	movwf	0
  2817                           
  2818                           ;PIR_B1.c: 390: for (i = 0; i < 10; i++) {
  2819  04A0  01E1               	clrf	getPIR_AD@i
  2820  04A1  300A               	movlw	10
  2821  04A2  0261               	subwf	getPIR_AD@i,w
  2822  04A3  1803               	btfsc	3,0
  2823  04A4  2CC1               	goto	l5024
  2824  04A5                     l5018:	
  2825                           
  2826                           ;PIR_B1.c: 391: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2827  04A5  0861               	movf	getPIR_AD@i,w
  2828  04A6  3EA5               	addlw	(__PIR+5)& (0+255)
  2829  04A7  0084               	movwf	4
  2830  04A8  0800               	movf	0,w
  2831  04A9  00DA               	movwf	??_getPIR_AD
  2832  04AA  01DB               	clrf	??_getPIR_AD+1
  2833  04AB  085A               	movf	??_getPIR_AD,w
  2834  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  2835  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  2836  04AE  07AF               	addwf	(__PIR^(0+128)+15),f
  2837  04AF  1803               	skipnc
  2838  04B0  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2839  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2840  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2841  04B3  085B               	movf	??_getPIR_AD+1,w
  2842  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  2843  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  2844  04B6  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2845  04B7  3001               	movlw	1
  2846  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2847  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2848  04BA  00DA               	movwf	??_getPIR_AD
  2849  04BB  085A               	movf	??_getPIR_AD,w
  2850  04BC  07E1               	addwf	getPIR_AD@i,f
  2851  04BD  300A               	movlw	10
  2852  04BE  0261               	subwf	getPIR_AD@i,w
  2853  04BF  1C03               	skipc
  2854  04C0  2CA5               	goto	l5018
  2855  04C1                     l5024:	
  2856                           
  2857                           ;PIR_B1.c: 392: }
  2858                           ;PIR_B1.c: 393: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2859  04C1  300A               	movlw	10
  2860  04C2  00D1               	movwf	___lwdiv@divisor
  2861  04C3  3000               	movlw	0
  2862  04C4  00D2               	movwf	___lwdiv@divisor+1
  2863  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  2864  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  2865  04C7  0830               	movf	((__PIR+1)^(0+128)+15),w
  2866  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2867  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2868  04CA  01D4               	clrf	___lwdiv@dividend+1
  2869  04CB  07D4               	addwf	___lwdiv@dividend+1,f
  2870  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2871  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2872  04CE  082F               	movf	(__PIR^(0+128)+15),w
  2873  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2874  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2875  04D1  01D3               	clrf	___lwdiv@dividend
  2876  04D2  07D3               	addwf	___lwdiv@dividend,f
  2877  04D3  158A  25EC  118A   	fcall	___lwdiv
  2878  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2879  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2880  04D8  0851               	movf	?___lwdiv,w
  2881  04D9  00DA               	movwf	??_getPIR_AD
  2882  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  2883  04DB  1303               	bcf	3,6	;RP1=0, select bank1
  2884  04DC  0831               	movf	(__PIR^(0+128)+17),w
  2885  04DD  3EB2               	addlw	(__PIR+18)& (0+255)
  2886  04DE  0084               	movwf	4
  2887  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2888  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2889  04E1  085A               	movf	??_getPIR_AD,w
  2890  04E2  1383               	bcf	3,7	;select IRP bank1
  2891  04E3  0080               	movwf	0
  2892                           
  2893                           ;PIR_B1.c: 394: _PIR.TenAverageValue = 0;
  2894  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2895  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  2896  04E6  01AF               	clrf	(__PIR^(0+128)+15)
  2897  04E7  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2898                           
  2899                           ;PIR_B1.c: 396: for (i = 0; i <= 9; i++) {
  2900  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2901  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2902  04EA  01E1               	clrf	getPIR_AD@i
  2903  04EB  300A               	movlw	10
  2904  04EC  0261               	subwf	getPIR_AD@i,w
  2905  04ED  1803               	btfsc	3,0
  2906  04EE  2D0B               	goto	l5040
  2907  04EF                     l5034:	
  2908                           
  2909                           ;PIR_B1.c: 397: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2910  04EF  0861               	movf	getPIR_AD@i,w
  2911  04F0  3EB2               	addlw	(__PIR+18)& (0+255)
  2912  04F1  0084               	movwf	4
  2913  04F2  0800               	movf	0,w
  2914  04F3  00DA               	movwf	??_getPIR_AD
  2915  04F4  01DB               	clrf	??_getPIR_AD+1
  2916  04F5  085A               	movf	??_getPIR_AD,w
  2917  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  2918  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  2919  04F8  07BC               	addwf	(__PIR^(0+128)+28),f
  2920  04F9  1803               	skipnc
  2921  04FA  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2922  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2923  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2924  04FD  085B               	movf	??_getPIR_AD+1,w
  2925  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  2926  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  2927  0500  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2928  0501  3001               	movlw	1
  2929  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0503  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0504  00DA               	movwf	??_getPIR_AD
  2932  0505  085A               	movf	??_getPIR_AD,w
  2933  0506  07E1               	addwf	getPIR_AD@i,f
  2934  0507  300A               	movlw	10
  2935  0508  0261               	subwf	getPIR_AD@i,w
  2936  0509  1C03               	skipc
  2937  050A  2CEF               	goto	l5034
  2938  050B                     l5040:	
  2939                           
  2940                           ;PIR_B1.c: 398: }
  2941                           ;PIR_B1.c: 399: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2942  050B  300A               	movlw	10
  2943  050C  00D1               	movwf	___lwdiv@divisor
  2944  050D  3000               	movlw	0
  2945  050E  00D2               	movwf	___lwdiv@divisor+1
  2946  050F  1683               	bsf	3,5	;RP0=1, select bank1
  2947  0510  1303               	bcf	3,6	;RP1=0, select bank1
  2948  0511  083D               	movf	((__PIR+1)^(0+128)+28),w
  2949  0512  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0513  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0514  01D4               	clrf	___lwdiv@dividend+1
  2952  0515  07D4               	addwf	___lwdiv@dividend+1,f
  2953  0516  1683               	bsf	3,5	;RP0=1, select bank1
  2954  0517  1303               	bcf	3,6	;RP1=0, select bank1
  2955  0518  083C               	movf	(__PIR^(0+128)+28),w
  2956  0519  1283               	bcf	3,5	;RP0=0, select bank0
  2957  051A  1303               	bcf	3,6	;RP1=0, select bank0
  2958  051B  01D3               	clrf	___lwdiv@dividend
  2959  051C  07D3               	addwf	___lwdiv@dividend,f
  2960  051D  158A  25EC  118A   	fcall	___lwdiv
  2961  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2962  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0522  0851               	movf	?___lwdiv,w
  2964  0523  00DA               	movwf	??_getPIR_AD
  2965  0524  085A               	movf	??_getPIR_AD,w
  2966  0525  1683               	bsf	3,5	;RP0=1, select bank1
  2967  0526  1303               	bcf	3,6	;RP1=0, select bank1
  2968  0527  00A3               	movwf	(__PIR^(0+128)+3)
  2969                           
  2970                           ;PIR_B1.c: 400: _PIR.HundredAverageValue = 0;
  2971  0528  01BC               	clrf	(__PIR^(0+128)+28)
  2972  0529  01BD               	clrf	((__PIR+1)^(0+128)+28)
  2973                           
  2974                           ;PIR_B1.c: 402: if (_PIR.TenCount < 10) {
  2975  052A  300A               	movlw	10
  2976  052B  0224               	subwf	(__PIR^(0+128)+4),w
  2977  052C  1803               	skipnc
  2978  052D  2D37               	goto	l5048
  2979                           
  2980                           ;PIR_B1.c: 403: _PIR.TenCount++;
  2981  052E  3001               	movlw	1
  2982  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0531  00DA               	movwf	??_getPIR_AD
  2985  0532  085A               	movf	??_getPIR_AD,w
  2986  0533  1683               	bsf	3,5	;RP0=1, select bank1
  2987  0534  1303               	bcf	3,6	;RP1=0, select bank1
  2988  0535  07A4               	addwf	(__PIR^(0+128)+4),f
  2989                           
  2990                           ;PIR_B1.c: 404: } else {
  2991  0536  0008               	return
  2992  0537                     l5048:	
  2993                           
  2994                           ;PIR_B1.c: 405: _PIR.TenCount = 0;
  2995  0537  01A4               	clrf	(__PIR^(0+128)+4)
  2996                           
  2997                           ;PIR_B1.c: 406: if (_PIR.HundreCount < 10)
  2998  0538  300A               	movlw	10
  2999  0539  0231               	subwf	(__PIR^(0+128)+17),w
  3000  053A  1803               	skipnc
  3001  053B  2D45               	goto	l5054
  3002                           
  3003                           ;PIR_B1.c: 407: _PIR.HundreCount++;
  3004  053C  3001               	movlw	1
  3005  053D  1283               	bcf	3,5	;RP0=0, select bank0
  3006  053E  1303               	bcf	3,6	;RP1=0, select bank0
  3007  053F  00DA               	movwf	??_getPIR_AD
  3008  0540  085A               	movf	??_getPIR_AD,w
  3009  0541  1683               	bsf	3,5	;RP0=1, select bank1
  3010  0542  1303               	bcf	3,6	;RP1=0, select bank1
  3011  0543  07B1               	addwf	(__PIR^(0+128)+17),f
  3012  0544  0008               	return
  3013  0545                     l5054:	
  3014                           
  3015                           ;PIR_B1.c: 408: else
  3016                           ;PIR_B1.c: 409: _PIR.HundreCount = 0;
  3017  0545  01B1               	clrf	(__PIR^(0+128)+17)
  3018  0546  0008               	return
  3019  0547                     __end_of_getPIR_AD:	
  3020                           
  3021                           	psect	text5
  3022  0E70                     __ptext5:	
  3023 ;; *************** function _getLoad_AD *****************
  3024 ;; Defined at:
  3025 ;;		line 15 in file "../src/OverLoad_B1.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  channel         1    wreg     unsigned char 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  channel         1    2[BANK0 ] unsigned char 
  3030 ;;  i               1    6[BANK0 ] unsigned char 
  3031 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3032 ;;  j               1    4[BANK0 ] unsigned char 
  3033 ;;  k               1    3[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3043 ;;      Params:         0       0       0       0
  3044 ;;      Locals:         0       5       0       0
  3045 ;;      Temps:          0       2       0       0
  3046 ;;      Totals:         0       7       0       0
  3047 ;;Total ram usage:        7 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    4
  3050 ;; This function calls:
  3051 ;;		_getAD
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           
  3058                           ;psect for function _getLoad_AD
  3059  0E70                     _getLoad_AD:	
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3063                           ;getLoad_AD@channel stored from wreg
  3064  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0E72  00D3               	movwf	getLoad_AD@channel
  3067                           
  3068                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3069  0E73  01D7               	clrf	getLoad_AD@i
  3070  0E74  01D5               	clrf	getLoad_AD@j
  3071  0E75  01D4               	clrf	getLoad_AD@k
  3072                           
  3073                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3074  0E76  01D6               	clrf	getLoad_AD@ADRES
  3075                           
  3076                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3077  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3078  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3079  0E79  1E4A               	btfss	_Load^(0+128),4
  3080  0E7A  0008               	return
  3081                           
  3082                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3083  0E7B  3073               	movlw	115
  3084  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3086  0E7E  00D1               	movwf	??_getLoad_AD
  3087  0E7F  0851               	movf	??_getLoad_AD,w
  3088  0E80  00F4               	movwf	getAD@adcon1
  3089  0E81  0853               	movf	getLoad_AD@channel,w
  3090  0E82  158A  2479  158A   	fcall	_getAD
  3091  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0E87  00D2               	movwf	??_getLoad_AD+1
  3094  0E88  0852               	movf	??_getLoad_AD+1,w
  3095  0E89  00D6               	movwf	getLoad_AD@ADRES
  3096                           
  3097                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3098  0E8A  01D7               	clrf	getLoad_AD@i
  3099  0E8B  3004               	movlw	4
  3100  0E8C  0257               	subwf	getLoad_AD@i,w
  3101  0E8D  1803               	btfsc	3,0
  3102  0E8E  2EAB               	goto	l4944
  3103  0E8F                     l4932:	
  3104                           
  3105                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3106  0E8F  0857               	movf	getLoad_AD@i,w
  3107  0E90  3ED4               	addlw	(_Load+10)& (0+255)
  3108  0E91  0084               	movwf	4
  3109  0E92  0856               	movf	getLoad_AD@ADRES,w
  3110  0E93  1383               	bcf	3,7	;select IRP bank1
  3111  0E94  0200               	subwf	0,w
  3112  0E95  1803               	skipnc
  3113  0E96  2EA3               	goto	l4940
  3114  0E97  08D5               	movf	getLoad_AD@j,f
  3115  0E98  1D03               	skipz
  3116  0E99  2EA3               	goto	l4940
  3117                           
  3118                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3119  0E9A  0856               	movf	getLoad_AD@ADRES,w
  3120  0E9B  00D1               	movwf	??_getLoad_AD
  3121  0E9C  0857               	movf	getLoad_AD@i,w
  3122  0E9D  3ED4               	addlw	(_Load+10)& (0+255)
  3123  0E9E  0084               	movwf	4
  3124  0E9F  0851               	movf	??_getLoad_AD,w
  3125  0EA0  0080               	movwf	0
  3126                           
  3127                           ;OverLoad_B1.c: 24: j = 1;
  3128  0EA1  01D5               	clrf	getLoad_AD@j
  3129  0EA2  0AD5               	incf	getLoad_AD@j,f
  3130  0EA3                     l4940:	
  3131  0EA3  3001               	movlw	1
  3132  0EA4  00D1               	movwf	??_getLoad_AD
  3133  0EA5  0851               	movf	??_getLoad_AD,w
  3134  0EA6  07D7               	addwf	getLoad_AD@i,f
  3135  0EA7  3004               	movlw	4
  3136  0EA8  0257               	subwf	getLoad_AD@i,w
  3137  0EA9  1C03               	skipc
  3138  0EAA  2E8F               	goto	l4932
  3139  0EAB                     l4944:	
  3140                           
  3141                           ;OverLoad_B1.c: 25: }
  3142                           ;OverLoad_B1.c: 26: }
  3143                           ;OverLoad_B1.c: 27: if (j == 0) {
  3144  0EAB  08D5               	movf	getLoad_AD@j,f
  3145  0EAC  1D03               	skipz
  3146  0EAD  0008               	return
  3147                           
  3148                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3149  0EAE  01D7               	clrf	getLoad_AD@i
  3150  0EAF                     L6:	
  3151  0EAF  3004               	movlw	4
  3152  0EB0  0257               	subwf	getLoad_AD@i,w
  3153  0EB1  1803               	btfsc	3,0
  3154  0EB2  0008               	return
  3155                           
  3156                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3157  0EB3  0857               	movf	getLoad_AD@i,w
  3158  0EB4  3ED9               	addlw	(_Load+15)& (0+255)
  3159  0EB5  0084               	movwf	4
  3160  0EB6  1383               	bcf	3,7	;select IRP bank1
  3161  0EB7  0800               	movf	0,w
  3162  0EB8  0256               	subwf	getLoad_AD@ADRES,w
  3163  0EB9  1803               	skipnc
  3164  0EBA  2EC7               	goto	l4960
  3165  0EBB  08D4               	movf	getLoad_AD@k,f
  3166  0EBC  1D03               	skipz
  3167  0EBD  2EC7               	goto	l4960
  3168                           
  3169                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3170  0EBE  0856               	movf	getLoad_AD@ADRES,w
  3171  0EBF  00D1               	movwf	??_getLoad_AD
  3172  0EC0  0857               	movf	getLoad_AD@i,w
  3173  0EC1  3ED9               	addlw	(_Load+15)& (0+255)
  3174  0EC2  0084               	movwf	4
  3175  0EC3  0851               	movf	??_getLoad_AD,w
  3176  0EC4  0080               	movwf	0
  3177                           
  3178                           ;OverLoad_B1.c: 31: k = 1;
  3179  0EC5  01D4               	clrf	getLoad_AD@k
  3180  0EC6  0AD4               	incf	getLoad_AD@k,f
  3181  0EC7                     l4960:	
  3182  0EC7  3001               	movlw	1
  3183  0EC8  00D1               	movwf	??_getLoad_AD
  3184  0EC9  0851               	movf	??_getLoad_AD,w
  3185  0ECA  07D7               	addwf	getLoad_AD@i,f
  3186  0ECB  2EAF               	goto	L6
  3187  0ECC                     __end_of_getLoad_AD:	
  3188                           
  3189                           	psect	text6
  3190  0CB3                     __ptext6:	
  3191 ;; *************** function _getCDS_AD *****************
  3192 ;; Defined at:
  3193 ;;		line 48 in file "../src/CDS_B1.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  channel1        1    wreg     unsigned char 
  3196 ;;  channel2        1    0[BANK0 ] unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  channel1        1    5[BANK0 ] unsigned char 
  3199 ;;  j               1    4[BANK0 ] unsigned char 
  3200 ;;  i               1    3[BANK0 ] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, pclath, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       1       0       0
  3211 ;;      Locals:         0       3       0       0
  3212 ;;      Temps:          0       2       0       0
  3213 ;;      Totals:         0       6       0       0
  3214 ;;Total ram usage:        6 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    4
  3217 ;; This function calls:
  3218 ;;		_getAD
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _getCDS_AD
  3226  0CB3                     _getCDS_AD:	
  3227                           
  3228                           ;incstack = 0
  3229                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3230                           ;getCDS_AD@channel1 stored from wreg
  3231  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  3232  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
  3233  0CB5  00D6               	movwf	getCDS_AD@channel1
  3234                           
  3235                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3236  0CB6  01D4               	clrf	getCDS_AD@i
  3237  0CB7  01D5               	clrf	getCDS_AD@j
  3238                           
  3239                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3240  0CB8  1DAE               	btfss	__CDS,3
  3241  0CB9  0008               	return
  3242                           
  3243                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3244  0CBA  14AE               	bsf	__CDS,1
  3245                           
  3246                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3247  0CBB  3070               	movlw	112
  3248  0CBC  00D2               	movwf	??_getCDS_AD
  3249  0CBD  0852               	movf	??_getCDS_AD,w
  3250  0CBE  00F4               	movwf	getAD@adcon1
  3251  0CBF  0856               	movf	getCDS_AD@channel1,w
  3252  0CC0  158A  2479  158A   	fcall	_getAD
  3253  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0CC5  00D3               	movwf	??_getCDS_AD+1
  3256  0CC6  0853               	movf	??_getCDS_AD+1,w
  3257  0CC7  00B0               	movwf	__CDS+2
  3258                           
  3259                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3260  0CC8  3070               	movlw	112
  3261  0CC9  00D2               	movwf	??_getCDS_AD
  3262  0CCA  0852               	movf	??_getCDS_AD,w
  3263  0CCB  00F4               	movwf	getAD@adcon1
  3264  0CCC  0851               	movf	getCDS_AD@channel2,w
  3265  0CCD  158A  2479         	fcall	_getAD
  3266  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  3267  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  3268  0CD1  00D3               	movwf	??_getCDS_AD+1
  3269  0CD2  0853               	movf	??_getCDS_AD+1,w
  3270  0CD3  00B1               	movwf	__CDS+3
  3271  0CD4  0008               	return
  3272  0CD5                     __end_of_getCDS_AD:	
  3273                           
  3274                           	psect	text7
  3275  0C79                     __ptext7:	
  3276 ;; *************** function _getAD *****************
  3277 ;; Defined at:
  3278 ;;		line 434 in file "../src/MCU_B1.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  adcon0          1    wreg     unsigned char 
  3281 ;;  adcon1          1    4[COMMON] unsigned char 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  adcon0          1    5[COMMON] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      unsigned char 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, pclath, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3293 ;;      Params:         1       0       0       0
  3294 ;;      Locals:         1       0       0       0
  3295 ;;      Temps:          0       0       0       0
  3296 ;;      Totals:         2       0       0       0
  3297 ;;Total ram usage:        2 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    3
  3300 ;; This function calls:
  3301 ;;		_Timeout_Counter
  3302 ;;		_set_TimeoutCleared
  3303 ;; This function is called by:
  3304 ;;		_getCDS_AD
  3305 ;;		_getLoad_AD
  3306 ;;		_getTemp_AD
  3307 ;;		_getPIR_AD
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _getAD
  3313  0C79                     _getAD:	
  3314                           
  3315                           ;incstack = 0
  3316                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3317                           ;getAD@adcon0 stored from wreg
  3318  0C79  00F5               	movwf	getAD@adcon0
  3319                           
  3320                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3321  0C7A  0875               	movf	getAD@adcon0,w
  3322  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  3324  0C7D  009F               	movwf	31	;volatile
  3325                           
  3326                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3327  0C7E  0874               	movf	getAD@adcon1,w
  3328  0C7F  1683               	bsf	3,5	;RP0=1, select bank1
  3329  0C80  1303               	bcf	3,6	;RP1=0, select bank1
  3330  0C81  009F               	movwf	31	;volatile
  3331                           
  3332                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3333  0C82  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0C83  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0C84  149F               	bsf	31,1	;volatile
  3336                           
  3337                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3338  0C85  2C89               	goto	l4724
  3339  0C86                     l4722:	
  3340                           
  3341                           ;MCU_B1.c: 439: Timeout_Counter();
  3342  0C86  158A  2389  158A   	fcall	_Timeout_Counter
  3343  0C89                     l4724:	
  3344  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0C8B  1C9F               	btfss	31,1	;volatile
  3347  0C8C  2C8F               	goto	l4728
  3348  0C8D  1D27               	btfss	_myMain+2,2
  3349  0C8E  2C86               	goto	l4722
  3350  0C8F                     l4728:	
  3351                           
  3352                           ;MCU_B1.c: 440: };
  3353                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3354  0C8F  158A  22AE         	fcall	_set_TimeoutCleared
  3355                           
  3356                           ;MCU_B1.c: 442: return ADRES;
  3357  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0C93  081E               	movf	30,w	;volatile
  3360  0C94  0008               	return
  3361  0C95                     __end_of_getAD:	
  3362                           
  3363                           	psect	text8
  3364  0AAE                     __ptext8:	
  3365 ;; *************** function _set_TimeoutCleared *****************
  3366 ;; Defined at:
  3367 ;;		line 281 in file "../src/Main_B1.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;		None               void
  3374 ;; Registers used:
  3375 ;;		status,2
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3381 ;;      Params:         0       0       0       0
  3382 ;;      Locals:         0       0       0       0
  3383 ;;      Temps:          0       0       0       0
  3384 ;;      Totals:         0       0       0       0
  3385 ;;Total ram usage:        0 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    2
  3388 ;; This function calls:
  3389 ;;		Nothing
  3390 ;; This function is called by:
  3391 ;;		_getAD
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           
  3396                           ;psect for function _set_TimeoutCleared
  3397  0AAE                     _set_TimeoutCleared:	
  3398                           
  3399                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3400                           
  3401                           ;incstack = 0
  3402                           ; Regs used in _set_TimeoutCleared: [status,2]
  3403  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0AAF  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0AB0  1127               	bcf	_myMain+2,2
  3406                           
  3407                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3408  0AB1  01A8               	clrf	_myMain+3
  3409  0AB2  01A9               	clrf	_myMain+4
  3410  0AB3  0008               	return
  3411  0AB4                     __end_of_set_TimeoutCleared:	
  3412                           
  3413                           	psect	text9
  3414  0B89                     __ptext9:	
  3415 ;; *************** function _Timeout_Counter *****************
  3416 ;; Defined at:
  3417 ;;		line 272 in file "../src/Main_B1.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;		None               void
  3424 ;; Registers used:
  3425 ;;		wreg, status,2
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3431 ;;      Params:         0       0       0       0
  3432 ;;      Locals:         0       0       0       0
  3433 ;;      Temps:          0       0       0       0
  3434 ;;      Totals:         0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    2
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_getAD
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _Timeout_Counter
  3447  0B89                     _Timeout_Counter:	
  3448                           
  3449                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3450                           
  3451                           ;incstack = 0
  3452                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3453  0B89  3001               	movlw	1
  3454  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  3455  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  3456  0B8C  07A8               	addwf	_myMain+3,f
  3457  0B8D  1803               	skipnc
  3458  0B8E  0AA9               	incf	_myMain+4,f
  3459  0B8F  3000               	movlw	0
  3460  0B90  07A9               	addwf	_myMain+4,f
  3461                           
  3462                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3463  0B91  3061               	movlw	97
  3464  0B92  0629               	xorwf	_myMain+4,w
  3465  0B93  1D03               	skipz
  3466  0B94  2B97               	goto	u5295
  3467  0B95  30A8               	movlw	168
  3468  0B96  0628               	xorwf	_myMain+3,w
  3469  0B97                     u5295:	
  3470  0B97  1D03               	skipz
  3471  0B98  0008               	return
  3472                           
  3473                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3474  0B99  01A8               	clrf	_myMain+3
  3475  0B9A  01A9               	clrf	_myMain+4
  3476                           
  3477                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3478  0B9B  1527               	bsf	_myMain+2,2
  3479  0B9C  0008               	return
  3480  0B9D                     __end_of_Timeout_Counter:	
  3481                           
  3482                           	psect	text10
  3483  0B66                     __ptext10:	
  3484 ;; *************** function _WDT_Main *****************
  3485 ;; Defined at:
  3486 ;;		line 1116 in file "../src/MCU_B1.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;		None               void
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3500 ;;      Params:         0       0       0       0
  3501 ;;      Locals:         0       0       0       0
  3502 ;;      Temps:          1       0       0       0
  3503 ;;      Totals:         1       0       0       0
  3504 ;;Total ram usage:        1 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    3
  3507 ;; This function calls:
  3508 ;;		_WDT_Clearing
  3509 ;; This function is called by:
  3510 ;;		_main
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           
  3515                           ;psect for function _WDT_Main
  3516  0B66                     _WDT_Main:	
  3517                           
  3518                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3522  0B66  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0B67  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0B68  1C35               	btfss	_WDT,0
  3525  0B69  0008               	return
  3526                           
  3527                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3528  0B6A  3001               	movlw	1
  3529  0B6B  02B6               	subwf	_WDT+1,f
  3530  0B6C  0836               	movf	_WDT+1,w
  3531  0B6D  3AFF               	xorlw	255
  3532  0B6E  1903               	skipnz
  3533  0B6F  0008               	return
  3534                           
  3535                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3536  0B70  3064               	movlw	100
  3537  0B71  00F4               	movwf	??_WDT_Main
  3538  0B72  0874               	movf	??_WDT_Main,w
  3539  0B73  00B6               	movwf	_WDT+1
  3540                           
  3541                           ;MCU_B1.c: 1120: WDT_Clearing();
  3542  0B74  118A  2002         	fcall	_WDT_Clearing
  3543  0B76  0008               	return
  3544  0B77                     __end_of_WDT_Main:	
  3545                           
  3546                           	psect	text11
  3547  0002                     __ptext11:	
  3548 ;; *************** function _WDT_Clearing *****************
  3549 ;; Defined at:
  3550 ;;		line 1126 in file "../src/MCU_B1.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		None
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3564 ;;      Params:         0       0       0       0
  3565 ;;      Locals:         0       0       0       0
  3566 ;;      Temps:          0       0       0       0
  3567 ;;      Totals:         0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    2
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_WDT_Main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _WDT_Clearing
  3580  0002                     _WDT_Clearing:	
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _WDT_Clearing: []
  3584  0002  0064               	clrwdt	;# 
  3585  0003  0008               	return
  3586  0004                     __end_of_WDT_Clearing:	
  3587                           
  3588                           	psect	text12
  3589  0A8E                     __ptext12:	
  3590 ;; *************** function _Temp_Main *****************
  3591 ;; Defined at:
  3592 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;		None               void
  3599 ;; Registers used:
  3600 ;;		wreg, status,2, status,0, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3606 ;;      Params:         0       0       0       0
  3607 ;;      Locals:         0       0       0       0
  3608 ;;      Temps:          0       0       0       0
  3609 ;;      Totals:         0       0       0       0
  3610 ;;Total ram usage:        0 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    4
  3613 ;; This function calls:
  3614 ;;		_setTemp_Main
  3615 ;; This function is called by:
  3616 ;;		_main
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function _Temp_Main
  3622  0A8E                     _Temp_Main:	
  3623                           
  3624                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3625                           
  3626                           ;incstack = 0
  3627                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3628  0A8E  118A  270B         	fcall	_setTemp_Main
  3629  0A90  0008               	return
  3630  0A91                     __end_of_Temp_Main:	
  3631                           
  3632                           	psect	text13
  3633  070B                     __ptext13:	
  3634 ;; *************** function _setTemp_Main *****************
  3635 ;; Defined at:
  3636 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  AD              1   10[BANK0 ] unsigned char 
  3641 ;;  DangerValue     1    9[BANK0 ] unsigned char 
  3642 ;;  SafeValue       1    8[BANK0 ] unsigned char 
  3643 ;;  TempGO          1    7[BANK0 ] unsigned char 
  3644 ;;  error           1    6[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3654 ;;      Params:         0       0       0       0
  3655 ;;      Locals:         0       5       0       0
  3656 ;;      Temps:          1       0       0       0
  3657 ;;      Totals:         1       5       0       0
  3658 ;;Total ram usage:        6 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    3
  3661 ;; This function calls:
  3662 ;;		_getMain_All_Error_Status
  3663 ;;		_getMain_All_LightsStatus
  3664 ;; This function is called by:
  3665 ;;		_Temp_Main
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _setTemp_Main
  3671  070B                     _setTemp_Main:	
  3672                           
  3673                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3674                           
  3675                           ;incstack = 0
  3676                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3677  070B  3000               	movlw	0
  3678  070C  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  3679  070F  00F5               	movwf	??_setTemp_Main
  3680  0710  0875               	movf	??_setTemp_Main,w
  3681  0711  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0712  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0713  00D7               	movwf	setTemp_Main@error
  3684                           
  3685                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3686  0714  01D9               	clrf	setTemp_Main@SafeValue
  3687  0715  01DA               	clrf	setTemp_Main@DangerValue
  3688                           
  3689                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3690  0716  118A  27F7  118A   	fcall	_getMain_All_LightsStatus
  3691  0719  00F5               	movwf	??_setTemp_Main
  3692  071A  0875               	movf	??_setTemp_Main,w
  3693  071B  1283               	bcf	3,5	;RP0=0, select bank0
  3694  071C  1303               	bcf	3,6	;RP1=0, select bank0
  3695  071D  00D8               	movwf	setTemp_Main@TempGO
  3696                           
  3697                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3698  071E  1C39               	btfss	_Temp,0
  3699  071F  2F82               	goto	l847
  3700                           
  3701                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3702  0720  1939               	btfsc	_Temp,2
  3703  0721  2F3E               	goto	l3612
  3704                           
  3705                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3706  0722  0858               	movf	setTemp_Main@TempGO,w
  3707  0723  3A01               	xorlw	1
  3708  0724  1D03               	skipz
  3709  0725  2F28               	goto	l853
  3710  0726  1CB9               	btfss	_Temp,1
  3711  0727  2F2A               	goto	l3604
  3712  0728                     l853:	
  3713  0728  1CB9               	btfss	_Temp,1
  3714  0729  2F3B               	goto	l3610
  3715  072A                     l3604:	
  3716                           
  3717                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3718  072A  3001               	movlw	1
  3719  072B  07BA               	addwf	_Temp+1,f
  3720  072C  1803               	skipnc
  3721  072D  0ABB               	incf	_Temp+2,f
  3722  072E  3000               	movlw	0
  3723  072F  07BB               	addwf	_Temp+2,f
  3724                           
  3725                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3726  0730  3000               	movlw	0
  3727  0731  023B               	subwf	_Temp+2,w
  3728  0732  30FA               	movlw	250
  3729  0733  1903               	skipnz
  3730  0734  023A               	subwf	_Temp+1,w
  3731  0735  1C03               	skipc
  3732  0736  0008               	return
  3733                           
  3734                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3735  0737  01BA               	clrf	_Temp+1
  3736  0738  01BB               	clrf	_Temp+2
  3737                           
  3738                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3739  0739  1539               	bsf	_Temp,2
  3740                           
  3741                           ;OverTemperature_B1.c: 83: }
  3742                           ;OverTemperature_B1.c: 84: } else {
  3743  073A  0008               	return
  3744  073B                     l3610:	
  3745                           
  3746                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3747  073B  01BA               	clrf	_Temp+1
  3748  073C  01BB               	clrf	_Temp+2
  3749                           
  3750                           ;OverTemperature_B1.c: 86: }
  3751                           ;OverTemperature_B1.c: 87: } else {
  3752  073D  0008               	return
  3753  073E                     l3612:	
  3754                           
  3755                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3756  073E  3001               	movlw	1
  3757  073F  07BA               	addwf	_Temp+1,f
  3758  0740  1803               	skipnc
  3759  0741  0ABB               	incf	_Temp+2,f
  3760  0742  3000               	movlw	0
  3761  0743  07BB               	addwf	_Temp+2,f
  3762                           
  3763                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3764  0744  3000               	movlw	0
  3765  0745  023B               	subwf	_Temp+2,w
  3766  0746  3005               	movlw	5
  3767  0747  1903               	skipnz
  3768  0748  023A               	subwf	_Temp+1,w
  3769  0749  1C03               	skipc
  3770  074A  0008               	return
  3771                           
  3772                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3773  074B  01BA               	clrf	_Temp+1
  3774  074C  01BB               	clrf	_Temp+2
  3775                           
  3776                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3777  074D  083F               	movf	_Temp+6,w
  3778  074E  1903               	btfsc	3,2
  3779  074F  2F7E               	goto	l858
  3780                           
  3781                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3782  0750  1139               	bcf	_Temp,2
  3783                           
  3784                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3785  0751  083F               	movf	_Temp+6,w
  3786  0752  00F5               	movwf	??_setTemp_Main
  3787  0753  0875               	movf	??_setTemp_Main,w
  3788  0754  00DB               	movwf	setTemp_Main@AD
  3789                           
  3790                           ;OverTemperature_B1.c: 106: SafeValue = 0x85;
  3791  0755  3085               	movlw	133
  3792  0756  00F5               	movwf	??_setTemp_Main
  3793  0757  0875               	movf	??_setTemp_Main,w
  3794  0758  00D9               	movwf	setTemp_Main@SafeValue
  3795                           
  3796                           ;OverTemperature_B1.c: 107: DangerValue = 0x75;
  3797  0759  3075               	movlw	117
  3798  075A  00F5               	movwf	??_setTemp_Main
  3799  075B  0875               	movf	??_setTemp_Main,w
  3800  075C  00DA               	movwf	setTemp_Main@DangerValue
  3801                           
  3802                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3803  075D  1CB9               	btfss	_Temp,1
  3804  075E  2F6E               	goto	l3636
  3805                           
  3806                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3807  075F  0859               	movf	setTemp_Main@SafeValue,w
  3808  0760  025B               	subwf	setTemp_Main@AD,w
  3809  0761  1C03               	skipc
  3810  0762  2F7D               	goto	l3646
  3811                           
  3812                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3813  0763  3001               	movlw	1
  3814  0764  00F5               	movwf	??_setTemp_Main
  3815  0765  0875               	movf	??_setTemp_Main,w
  3816  0766  07BC               	addwf	_Temp+3,f
  3817                           
  3818                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3819  0767  3003               	movlw	3
  3820  0768  023C               	subwf	_Temp+3,w
  3821  0769  1C03               	skipc
  3822  076A  2F7E               	goto	l858
  3823                           
  3824                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3825  076B  01BC               	clrf	_Temp+3
  3826                           
  3827                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3828  076C  10B9               	bcf	_Temp,1
  3829                           
  3830                           ;OverTemperature_B1.c: 126: }
  3831                           ;OverTemperature_B1.c: 127: } else {
  3832                           
  3833                           ;OverTemperature_B1.c: 125: ;;
  3834  076D  2F7E               	goto	l858
  3835  076E                     l3636:	
  3836                           ;OverTemperature_B1.c: 129: }
  3837                           ;OverTemperature_B1.c: 130: } else {
  3838                           
  3839                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3840                           
  3841                           
  3842                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3843  076E  085B               	movf	setTemp_Main@AD,w
  3844  076F  025A               	subwf	setTemp_Main@DangerValue,w
  3845  0770  1C03               	skipc
  3846  0771  2F7D               	goto	l3646
  3847                           
  3848                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3849  0772  3001               	movlw	1
  3850  0773  00F5               	movwf	??_setTemp_Main
  3851  0774  0875               	movf	??_setTemp_Main,w
  3852  0775  07BC               	addwf	_Temp+3,f
  3853                           
  3854                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3855  0776  3003               	movlw	3
  3856  0777  023C               	subwf	_Temp+3,w
  3857  0778  1C03               	skipc
  3858  0779  2F7E               	goto	l858
  3859                           
  3860                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3861  077A  01BC               	clrf	_Temp+3
  3862                           
  3863                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3864  077B  14B9               	bsf	_Temp,1
  3865                           
  3866                           ;OverTemperature_B1.c: 136: }
  3867                           ;OverTemperature_B1.c: 137: } else {
  3868  077C  2F7E               	goto	l858
  3869  077D                     l3646:	
  3870                           
  3871                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3872  077D  01BC               	clrf	_Temp+3
  3873  077E                     l858:	
  3874                           ;OverTemperature_B1.c: 139: }
  3875                           ;OverTemperature_B1.c: 140: }
  3876                           ;OverTemperature_B1.c: 141: ;;
  3877                           ;OverTemperature_B1.c: 142: ;;
  3878                           
  3879                           
  3880                           ;OverTemperature_B1.c: 158: }
  3881                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3882  077E  01BD               	clrf	_Temp+4
  3883                           
  3884                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3885  077F  01BE               	clrf	_Temp+5
  3886                           
  3887                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3888  0780  01BF               	clrf	_Temp+6
  3889                           
  3890                           ;OverTemperature_B1.c: 162: }
  3891                           ;OverTemperature_B1.c: 163: }
  3892                           ;OverTemperature_B1.c: 166: } else {
  3893  0781  0008               	return
  3894  0782                     l847:	
  3895                           
  3896                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3897  0782  1C25               	btfss	_myMain,0
  3898  0783  0008               	return
  3899                           
  3900                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3901  0784  1439               	bsf	_Temp,0
  3902  0785  0008               	return
  3903  0786                     __end_of_setTemp_Main:	
  3904                           
  3905                           	psect	text14
  3906  0A8B                     __ptext14:	
  3907 ;; *************** function _Temp_Initialization *****************
  3908 ;; Defined at:
  3909 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		status,2, status,0, pclath, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3923 ;;      Params:         0       0       0       0
  3924 ;;      Locals:         0       0       0       0
  3925 ;;      Temps:          0       0       0       0
  3926 ;;      Totals:         0       0       0       0
  3927 ;;Total ram usage:        0 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    3
  3930 ;; This function calls:
  3931 ;;		_setTemp_Initialization
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _Temp_Initialization
  3939  0A8B                     _Temp_Initialization:	
  3940                           
  3941                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3942                           
  3943                           ;incstack = 0
  3944                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3945  0A8B  158A  227D         	fcall	_setTemp_Initialization
  3946  0A8D  0008               	return
  3947  0A8E                     __end_of_Temp_Initialization:	
  3948                           
  3949                           	psect	text15
  3950  0A7D                     __ptext15:	
  3951 ;; *************** function _setTemp_Initialization *****************
  3952 ;; Defined at:
  3953 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;		None               void
  3960 ;; Registers used:
  3961 ;;		None
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3967 ;;      Params:         0       0       0       0
  3968 ;;      Locals:         0       0       0       0
  3969 ;;      Temps:          0       0       0       0
  3970 ;;      Totals:         0       0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    2
  3974 ;; This function calls:
  3975 ;;		Nothing
  3976 ;; This function is called by:
  3977 ;;		_Temp_Initialization
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _setTemp_Initialization
  3983  0A7D                     _setTemp_Initialization:	
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _setTemp_Initialization: []
  3987  0A7D  0008               	return
  3988  0A7E                     __end_of_setTemp_Initialization:	
  3989                           
  3990                           	psect	text16
  3991  0A88                     __ptext16:	
  3992 ;; *************** function _SYSC_Main *****************
  3993 ;; Defined at:
  3994 ;;		line 17 in file "../src/SYSC_B1.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;		None               void
  4001 ;; Registers used:
  4002 ;;		wreg, status,2, status,0, pclath, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4008 ;;      Params:         0       0       0       0
  4009 ;;      Locals:         0       0       0       0
  4010 ;;      Temps:          0       0       0       0
  4011 ;;      Totals:         0       0       0       0
  4012 ;;Total ram usage:        0 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    4
  4015 ;; This function calls:
  4016 ;;		_setSYSC_Main
  4017 ;; This function is called by:
  4018 ;;		_main
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _SYSC_Main
  4024  0A88                     _SYSC_Main:	
  4025                           
  4026                           ;SYSC_B1.c: 19: setSYSC_Main();
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4030  0A88  158A  262C         	fcall	_setSYSC_Main
  4031  0A8A  0008               	return
  4032  0A8B                     __end_of_SYSC_Main:	
  4033                           
  4034                           	psect	text17
  4035  0E2C                     __ptext17:	
  4036 ;; *************** function _setSYSC_Main *****************
  4037 ;; Defined at:
  4038 ;;		line 23 in file "../src/SYSC_B1.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;		None               void
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0, pclath, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4052 ;;      Params:         0       0       0       0
  4053 ;;      Locals:         0       0       0       0
  4054 ;;      Temps:          0       0       0       0
  4055 ;;      Totals:         0       0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    3
  4059 ;; This function calls:
  4060 ;;		_getMain_All_Error_Status
  4061 ;; This function is called by:
  4062 ;;		_SYSC_Main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _setSYSC_Main
  4068  0E2C                     _setSYSC_Main:	
  4069                           
  4070                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4074  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  4075  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  4076  0E2E  1C20               	btfss	_SYSC,0
  4077  0E2F  0008               	return
  4078                           
  4079                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4080  0E30  18A0               	btfsc	_SYSC,1
  4081  0E31  2E43               	goto	l3662
  4082                           
  4083                           ;SYSC_B1.c: 27: SYSC.Time++;
  4084  0E32  3001               	movlw	1
  4085  0E33  07A1               	addwf	_SYSC+1,f
  4086  0E34  1803               	skipnc
  4087  0E35  0AA2               	incf	_SYSC+2,f
  4088  0E36  3000               	movlw	0
  4089  0E37  07A2               	addwf	_SYSC+2,f
  4090                           
  4091                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4092  0E38  3000               	movlw	0
  4093  0E39  0222               	subwf	_SYSC+2,w
  4094  0E3A  3019               	movlw	25
  4095  0E3B  1903               	skipnz
  4096  0E3C  0221               	subwf	_SYSC+1,w
  4097  0E3D  1C03               	skipc
  4098  0E3E  0008               	return
  4099                           
  4100                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4101  0E3F  01A1               	clrf	_SYSC+1
  4102  0E40  01A2               	clrf	_SYSC+2
  4103                           
  4104                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4105  0E41  14A0               	bsf	_SYSC,1
  4106                           
  4107                           ;SYSC_B1.c: 31: }
  4108                           ;SYSC_B1.c: 32: } else {
  4109  0E42  0008               	return
  4110  0E43                     l3662:	
  4111                           
  4112                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4113  0E43  3001               	movlw	1
  4114  0E44  158A  25AE  158A   	fcall	_getMain_All_Error_Status
  4115  0E47  3800               	iorlw	0
  4116  0E48  1D03               	skipz
  4117  0E49  0008               	return
  4118                           
  4119                           ;SYSC_B1.c: 34: SYSC.Time++;
  4120  0E4A  3001               	movlw	1
  4121  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  4122  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  4123  0E4D  07A1               	addwf	_SYSC+1,f
  4124  0E4E  1803               	skipnc
  4125  0E4F  0AA2               	incf	_SYSC+2,f
  4126  0E50  3000               	movlw	0
  4127  0E51  07A2               	addwf	_SYSC+2,f
  4128                           
  4129                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4130  0E52  3000               	movlw	0
  4131  0E53  0222               	subwf	_SYSC+2,w
  4132  0E54  3019               	movlw	25
  4133  0E55  1903               	skipnz
  4134  0E56  0221               	subwf	_SYSC+1,w
  4135  0E57  1C03               	skipc
  4136  0E58  2E5E               	goto	l3668
  4137                           
  4138                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4139  0E59  01A1               	clrf	_SYSC+1
  4140  0E5A  01A2               	clrf	_SYSC+2
  4141                           
  4142                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4143  0E5B  01A3               	clrf	_SYSC+3
  4144  0E5C  01A4               	clrf	_SYSC+4
  4145                           
  4146                           ;SYSC_B1.c: 38: } else {
  4147  0E5D  0008               	return
  4148  0E5E                     l3668:	
  4149                           
  4150                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4151  0E5E  3001               	movlw	1
  4152  0E5F  07A3               	addwf	_SYSC+3,f
  4153  0E60  1803               	skipnc
  4154  0E61  0AA4               	incf	_SYSC+4,f
  4155  0E62  3000               	movlw	0
  4156  0E63  07A4               	addwf	_SYSC+4,f
  4157                           
  4158                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4159  0E64  3001               	movlw	1
  4160  0E65  0624               	xorwf	_SYSC+4,w
  4161  0E66  1D03               	skipz
  4162  0E67  2E6A               	goto	u3455
  4163  0E68  30F4               	movlw	244
  4164  0E69  0623               	xorwf	_SYSC+3,w
  4165  0E6A                     u3455:	
  4166  0E6A  1D03               	skipz
  4167  0E6B  0008               	return
  4168                           
  4169                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4170  0E6C  01A3               	clrf	_SYSC+3
  4171  0E6D  01A4               	clrf	_SYSC+4
  4172                           
  4173                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4174  0E6E  10A0               	bcf	_SYSC,1
  4175  0E6F  0008               	return
  4176  0E70                     __end_of_setSYSC_Main:	
  4177                           
  4178                           	psect	text18
  4179  0A85                     __ptext18:	
  4180 ;; *************** function _SYSC_Initialization *****************
  4181 ;; Defined at:
  4182 ;;		line 7 in file "../src/SYSC_B1.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;		None               void
  4189 ;; Registers used:
  4190 ;;		status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4196 ;;      Params:         0       0       0       0
  4197 ;;      Locals:         0       0       0       0
  4198 ;;      Temps:          0       0       0       0
  4199 ;;      Totals:         0       0       0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    3
  4203 ;; This function calls:
  4204 ;;		_setSYSC_Initialization
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _SYSC_Initialization
  4212  0A85                     _SYSC_Initialization:	
  4213                           
  4214                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4218  0A85  158A  2299         	fcall	_setSYSC_Initialization
  4219  0A87  0008               	return
  4220  0A88                     __end_of_SYSC_Initialization:	
  4221                           
  4222                           	psect	text19
  4223  0A99                     __ptext19:	
  4224 ;; *************** function _setSYSC_Initialization *****************
  4225 ;; Defined at:
  4226 ;;		line 13 in file "../src/SYSC_B1.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;		None               void
  4233 ;; Registers used:
  4234 ;;		None
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4240 ;;      Params:         0       0       0       0
  4241 ;;      Locals:         0       0       0       0
  4242 ;;      Temps:          0       0       0       0
  4243 ;;      Totals:         0       0       0       0
  4244 ;;Total ram usage:        0 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    2
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_SYSC_Initialization
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _setSYSC_Initialization
  4256  0A99                     _setSYSC_Initialization:	
  4257                           
  4258                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _setSYSC_Initialization: []
  4262  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  4263  0A9A  1303               	bcf	3,6	;RP1=0, select bank0
  4264  0A9B  1420               	bsf	_SYSC,0
  4265  0A9C  0008               	return
  4266  0A9D                     __end_of_setSYSC_Initialization:	
  4267                           
  4268                           	psect	text20
  4269  0026                     __ptext20:	
  4270 ;; *************** function _PIR_Main *****************
  4271 ;; Defined at:
  4272 ;;		line 13 in file "../src/PIR_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4277 ;;  cds             1   16[BANK0 ] unsigned char 
  4278 ;;  TriggerValue    1   15[BANK0 ] unsigned char 
  4279 ;;  Enable_Switc    1   12[BANK0 ] unsigned char 
  4280 ;;  error           1   11[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;		None               void
  4283 ;; Registers used:
  4284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4290 ;;      Params:         0       0       0       0
  4291 ;;      Locals:         0       7       0       0
  4292 ;;      Temps:          0       5       0       0
  4293 ;;      Totals:         0      12       0       0
  4294 ;;Total ram usage:       12 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    5
  4297 ;; This function calls:
  4298 ;;		_getCDS_Status
  4299 ;;		_getLights_Status
  4300 ;;		_getMain_All_Error_Status
  4301 ;;		_setLED
  4302 ;;		_setLights_SwOff
  4303 ;;		_setLights_SwOn
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _PIR_Main
  4311  0026                     _PIR_Main:	
  4312                           
  4313                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4314                           
  4315                           ;incstack = 0
  4316                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4317  0026  3000               	movlw	0
  4318  0027  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  4319  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4320  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4321  002C  00D7               	movwf	??_PIR_Main
  4322  002D  0857               	movf	??_PIR_Main,w
  4323  002E  00DC               	movwf	PIR_Main@error
  4324                           
  4325                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4326  002F  158A  22CA  118A   	fcall	_getCDS_Status
  4327  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4328  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4329  0034  00D7               	movwf	??_PIR_Main
  4330  0035  0857               	movf	??_PIR_Main,w
  4331  0036  00E1               	movwf	PIR_Main@cds
  4332                           
  4333                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4334  0037  01E2               	clrf	PIR_Main@LightsStatus
  4335                           
  4336                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4337  0038  01DD               	clrf	PIR_Main@Enable_Switch
  4338  0039  0ADD               	incf	PIR_Main@Enable_Switch,f
  4339                           
  4340                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4341  003A  01E0               	clrf	PIR_Main@TriggerValue
  4342                           
  4343                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4344  003B  3001               	movlw	1
  4345  003C  158A  2355  118A   	fcall	_getLights_Status
  4346  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4347  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4348  0041  00D7               	movwf	??_PIR_Main
  4349  0042  0857               	movf	??_PIR_Main,w
  4350  0043  00E2               	movwf	PIR_Main@LightsStatus
  4351                           
  4352                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4353  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4354  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4355  0046  1C20               	btfss	__PIR^(0+128),0
  4356  0047  2A11               	goto	l927
  4357                           
  4358                           ;PIR_B1.c: 36: if (error == 0) {
  4359  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4361  004A  08DC               	movf	PIR_Main@error,f
  4362  004B  1D03               	skipz
  4363  004C  288B               	goto	l928
  4364                           
  4365                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4366  004D  0861               	movf	PIR_Main@cds,w
  4367  004E  3A01               	xorlw	1
  4368  004F  1D03               	skipz
  4369  0050  2859               	goto	l929
  4370  0051  085D               	movf	PIR_Main@Enable_Switch,w
  4371  0052  3A01               	xorlw	1
  4372  0053  1D03               	skipz
  4373  0054  2859               	goto	l929
  4374                           
  4375                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4376  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4377  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4378  0057  17A0               	bsf	__PIR^(0+128),7
  4379                           
  4380                           ;PIR_B1.c: 40: } else {
  4381  0058  287B               	goto	l5244
  4382  0059                     l929:	
  4383                           
  4384                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4385  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4386  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4387  005B  13A0               	bcf	__PIR^(0+128),7
  4388                           
  4389                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4390  005C  1DA0               	btfss	__PIR^(0+128),3
  4391  005D  287B               	goto	l5244
  4392                           
  4393                           ;PIR_B1.c: 45: setLED(1, 0);
  4394  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4395  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4396  0060  01D1               	clrf	setLED@command
  4397  0061  3001               	movlw	1
  4398  0062  158A  278F  118A   	fcall	_setLED
  4399                           
  4400                           ;PIR_B1.c: 46: setLED(2, 0);
  4401  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0067  01D1               	clrf	setLED@command
  4404  0068  3002               	movlw	2
  4405  0069  158A  278F  118A   	fcall	_setLED
  4406                           
  4407                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  4408  006C  3001               	movlw	1
  4409  006D  158A  2355  118A   	fcall	_getLights_Status
  4410  0070  3A01               	xorlw	1
  4411  0071  1D03               	skipz
  4412  0072  287B               	goto	l5244
  4413                           
  4414                           ;PIR_B1.c: 52: setLights_SwOn(1);
  4415  0073  3001               	movlw	1
  4416  0074  158A  24D5  118A   	fcall	_setLights_SwOn
  4417                           
  4418                           ;PIR_B1.c: 53: setLights_SwOff(1);
  4419  0077  3001               	movlw	1
  4420  0078  158A  242A  118A   	fcall	_setLights_SwOff
  4421  007B                     l5244:	
  4422                           
  4423                           ;PIR_B1.c: 55: }
  4424                           ;PIR_B1.c: 67: }
  4425                           ;PIR_B1.c: 68: }
  4426                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  4427  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4428  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4429  007D  1A20               	btfsc	__PIR^(0+128),4
  4430  007E  2891               	goto	l935
  4431                           
  4432                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  4433  007F  1620               	bsf	__PIR^(0+128),4
  4434                           
  4435                           ;PIR_B1.c: 75: if (_PIR.OK == 0) {
  4436  0080  19A0               	btfsc	__PIR^(0+128),3
  4437  0081  2891               	goto	l935
  4438                           
  4439                           ;PIR_B1.c: 76: setLED(1, 1);
  4440  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0084  01D1               	clrf	setLED@command
  4443  0085  0AD1               	incf	setLED@command,f
  4444  0086  3001               	movlw	1
  4445  0087  158A  278F  118A   	fcall	_setLED
  4446                           
  4447                           ;PIR_B1.c: 77: }
  4448                           ;PIR_B1.c: 80: }
  4449                           ;PIR_B1.c: 81: } else {
  4450  008A  2891               	goto	l935
  4451  008B                     l928:	
  4452                           
  4453                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  4454  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4455  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4456  008D  1E20               	btfss	__PIR^(0+128),4
  4457  008E  2891               	goto	l935
  4458                           
  4459                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  4460  008F  1220               	bcf	__PIR^(0+128),4
  4461                           
  4462                           ;PIR_B1.c: 84: _PIR.Available = 0;
  4463  0090  13A0               	bcf	__PIR^(0+128),7
  4464  0091                     l935:	
  4465                           
  4466                           ;PIR_B1.c: 102: }
  4467                           ;PIR_B1.c: 103: }
  4468                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  4469  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4470  0092  1303               	bcf	3,6	;RP1=0, select bank1
  4471  0093  18A0               	btfsc	__PIR^(0+128),1
  4472  0094  28A4               	goto	l937
  4473                           
  4474                           ;PIR_B1.c: 106: _PIR.Time++;
  4475  0095  3001               	movlw	1
  4476  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4478  0098  00D7               	movwf	??_PIR_Main
  4479  0099  0857               	movf	??_PIR_Main,w
  4480  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4481  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4482  009C  07A2               	addwf	(__PIR^(0+128)+2),f
  4483                           
  4484                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  4485  009D  0822               	movf	(__PIR^(0+128)+2),w
  4486  009E  3A05               	xorlw	5
  4487  009F  1D03               	skipz
  4488  00A0  29B1               	goto	l5332
  4489                           
  4490                           ;PIR_B1.c: 108: _PIR.Time = 0;
  4491  00A1  01A2               	clrf	(__PIR^(0+128)+2)
  4492                           
  4493                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  4494  00A2  14A0               	bsf	__PIR^(0+128),1
  4495                           
  4496                           ;PIR_B1.c: 110: }
  4497                           ;PIR_B1.c: 111: } else {
  4498  00A3  29B1               	goto	l5332
  4499  00A4                     l937:	
  4500                           
  4501                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  4502  00A4  1D20               	btfss	__PIR^(0+128),2
  4503  00A5  29B1               	goto	l5332
  4504                           
  4505                           ;PIR_B1.c: 113: _PIR.GO = 0;
  4506  00A6  1120               	bcf	__PIR^(0+128),2
  4507                           
  4508                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  4509  00A7  10A0               	bcf	__PIR^(0+128),1
  4510                           
  4511                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  4512  00A8  1BA0               	btfsc	__PIR^(0+128),7
  4513                           
  4514                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  4515  00A9  1DA0               	btfss	__PIR^(0+128),3
  4516  00AA  29B1               	goto	l5332
  4517                           
  4518                           ;PIR_B1.c: 118: _PIR.Time++;
  4519  00AB  3001               	movlw	1
  4520  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4521  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4522  00AE  00D7               	movwf	??_PIR_Main
  4523  00AF  0857               	movf	??_PIR_Main,w
  4524  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  4525  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  4526  00B2  07A2               	addwf	(__PIR^(0+128)+2),f
  4527                           
  4528                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  4529  00B3  0822               	movf	(__PIR^(0+128)+2),w
  4530  00B4  3A3C               	xorlw	60
  4531  00B5  1D03               	skipz
  4532  00B6  28EB               	goto	l5300
  4533                           
  4534                           ;PIR_B1.c: 120: _PIR.Time = 0;
  4535  00B7  01A2               	clrf	(__PIR^(0+128)+2)
  4536                           
  4537                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  4538  00B8  305A               	movlw	90
  4539  00B9  0247               	subwf	(__PIR^(0+128)+39),w
  4540  00BA  1C03               	skipc
  4541  00BB  28C7               	goto	l5282
  4542                           
  4543                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  4544  00BC  01C6               	clrf	(__PIR^(0+128)+38)
  4545                           
  4546                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  4547  00BD  0848               	movf	(__PIR^(0+128)+40),w
  4548  00BE  3A19               	xorlw	25
  4549  00BF  1903               	btfsc	3,2
  4550  00C0  28DC               	goto	L12
  4551                           
  4552                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  4553                           
  4554                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  4555  00C1  0848               	movf	(__PIR^(0+128)+40),w
  4556  00C2  3A23               	xorlw	35
  4557  00C3  1D03               	skipz
  4558  00C4  28EA               	goto	l5298
  4559                           
  4560                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  4561  00C5  302D               	movlw	45
  4562  00C6  28E3               	goto	L9
  4563  00C7                     l5282:	
  4564                           ;PIR_B1.c: 128: }
  4565                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  4566                           
  4567  00C7  300B               	movlw	11
  4568  00C8  0247               	subwf	(__PIR^(0+128)+39),w
  4569  00C9  1803               	skipnc
  4570  00CA  28EA               	goto	l5298
  4571                           
  4572                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  4573  00CB  3001               	movlw	1
  4574  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4575  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4576  00CE  00D7               	movwf	??_PIR_Main
  4577  00CF  0857               	movf	??_PIR_Main,w
  4578  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4579  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4580  00D2  07C6               	addwf	(__PIR^(0+128)+38),f
  4581                           
  4582                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  4583  00D3  0846               	movf	(__PIR^(0+128)+38),w
  4584  00D4  3A02               	xorlw	2
  4585  00D5  1D03               	skipz
  4586  00D6  28EA               	goto	l5298
  4587                           
  4588                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  4589  00D7  01C6               	clrf	(__PIR^(0+128)+38)
  4590                           
  4591                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  4592  00D8  0848               	movf	(__PIR^(0+128)+40),w
  4593  00D9  3A2D               	xorlw	45
  4594  00DA  1D03               	skipz
  4595  00DB  28DE               	goto	l5294
  4596  00DC                     L12:	
  4597                           
  4598                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  4599  00DC  3023               	movlw	35
  4600  00DD  28E3               	goto	L9
  4601  00DE                     l5294:	
  4602                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  4603                           
  4604  00DE  0848               	movf	(__PIR^(0+128)+40),w
  4605  00DF  3A23               	xorlw	35
  4606  00E0  1D03               	skipz
  4607  00E1  28EA               	goto	l5298
  4608                           
  4609                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  4610  00E2  3019               	movlw	25
  4611  00E3                     L9:	
  4612  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4613  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4614  00E5  00D7               	movwf	??_PIR_Main
  4615  00E6  0857               	movf	??_PIR_Main,w
  4616  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4617  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4618  00E9  00C8               	movwf	(__PIR^(0+128)+40)
  4619  00EA                     l5298:	
  4620                           
  4621                           ;PIR_B1.c: 138: }
  4622                           ;PIR_B1.c: 139: }
  4623                           ;PIR_B1.c: 140: }
  4624                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  4625  00EA  01C7               	clrf	(__PIR^(0+128)+39)
  4626  00EB                     l5300:	
  4627                           
  4628                           ;PIR_B1.c: 142: }
  4629                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4630                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4631  00EB  0848               	movf	(__PIR^(0+128)+40),w
  4632  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4633  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4634  00EE  00D7               	movwf	??_PIR_Main
  4635  00EF  01D8               	clrf	??_PIR_Main+1
  4636  00F0  09D7               	comf	??_PIR_Main,f
  4637  00F1  09D8               	comf	??_PIR_Main+1,f
  4638  00F2  0AD7               	incf	??_PIR_Main,f
  4639  00F3  1903               	skipnz
  4640  00F4  0AD8               	incf	??_PIR_Main+1,f
  4641  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4642  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4643  00F7  0823               	movf	(__PIR^(0+128)+3),w
  4644  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  4645  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  4646  00FA  0757               	addwf	??_PIR_Main,w
  4647  00FB  00D9               	movwf	??_PIR_Main+2
  4648  00FC  0858               	movf	??_PIR_Main+1,w
  4649  00FD  1803               	skipnc
  4650  00FE  0A58               	incf	??_PIR_Main+1,w
  4651  00FF  00DA               	movwf	??_PIR_Main+3
  4652  0100  085A               	movf	??_PIR_Main+3,w
  4653  0101  3A80               	xorlw	128
  4654  0102  3C80               	sublw	128
  4655  0103  1D03               	skipz
  4656  0104  2909               	goto	u6805
  4657  0105  0859               	movf	??_PIR_Main+2,w
  4658  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4659  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4660  0108  0221               	subwf	(__PIR^(0+128)+1),w
  4661  0109                     u6805:	
  4662  0109  1C03               	skipc
  4663  010A  292B               	goto	l5310
  4664  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4665  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4666  010D  0823               	movf	(__PIR^(0+128)+3),w
  4667  010E  0748               	addwf	(__PIR^(0+128)+40),w
  4668  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4669  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4670  0111  00D7               	movwf	??_PIR_Main
  4671  0112  01D8               	clrf	??_PIR_Main+1
  4672  0113  0DD8               	rlf	??_PIR_Main+1,f
  4673  0114  0858               	movf	??_PIR_Main+1,w
  4674  0115  3A80               	xorlw	128
  4675  0116  00D9               	movwf	??_PIR_Main+2
  4676  0117  3080               	movlw	128
  4677  0118  0259               	subwf	??_PIR_Main+2,w
  4678  0119  1D03               	skipz
  4679  011A  2921               	goto	u6815
  4680  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4681  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4682  011D  0821               	movf	(__PIR^(0+128)+1),w
  4683  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4684  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4685  0120  0257               	subwf	??_PIR_Main,w
  4686  0121                     u6815:	
  4687  0121  1C03               	skipc
  4688  0122  292B               	goto	l5310
  4689                           
  4690                           ;PIR_B1.c: 148: _PIR.Count = 0;
  4691  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4692  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4693  0125  01BE               	clrf	(__PIR^(0+128)+30)
  4694  0126  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4695                           
  4696                           ;PIR_B1.c: 155: setLED(1, 0);
  4697  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0129  01D1               	clrf	setLED@command
  4700  012A  299A               	goto	L13
  4701  012B                     l5310:	
  4702                           ;PIR_B1.c: 159: } else {
  4703                           
  4704                           ;PIR_B1.c: 156: setLED(2, 0);
  4705                           
  4706                           
  4707                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  4708  012B  3001               	movlw	1
  4709  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4710  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4711  012E  00D7               	movwf	??_PIR_Main
  4712  012F  0857               	movf	??_PIR_Main,w
  4713  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4714  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4715  0132  07C7               	addwf	(__PIR^(0+128)+39),f
  4716                           
  4717                           ;PIR_B1.c: 163: _PIR.Count++;
  4718  0133  3001               	movlw	1
  4719  0134  07BE               	addwf	(__PIR^(0+128)+30),f
  4720  0135  1803               	skipnc
  4721  0136  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4722  0137  3000               	movlw	0
  4723  0138  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4724                           
  4725                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4726  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4727  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4728  013B  0862               	movf	PIR_Main@LightsStatus,w
  4729  013C  3A01               	xorlw	1
  4730  013D  1903               	skipnz
  4731  013E  293F               	goto	l5318
  4732  013F                     l5318:	
  4733  013F  3003               	movlw	3
  4734  0140  00DE               	movwf	_PIR_Main$2874
  4735  0141  3000               	movlw	0
  4736  0142  00DF               	movwf	_PIR_Main$2874+1
  4737  0143  085E               	movf	_PIR_Main$2874,w
  4738  0144  00D7               	movwf	??_PIR_Main
  4739  0145  0857               	movf	??_PIR_Main,w
  4740  0146  00E0               	movwf	PIR_Main@TriggerValue
  4741                           
  4742                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  4743  0147  0860               	movf	PIR_Main@TriggerValue,w
  4744  0148  00D7               	movwf	??_PIR_Main
  4745  0149  01D8               	clrf	??_PIR_Main+1
  4746  014A  1683               	bsf	3,5	;RP0=1, select bank1
  4747  014B  1303               	bcf	3,6	;RP1=0, select bank1
  4748  014C  083F               	movf	((__PIR+1)^(0+128)+30),w
  4749  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4750  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4751  014F  0658               	xorwf	??_PIR_Main+1,w
  4752  0150  1D03               	skipz
  4753  0151  2958               	goto	u6835
  4754  0152  1683               	bsf	3,5	;RP0=1, select bank1
  4755  0153  1303               	bcf	3,6	;RP1=0, select bank1
  4756  0154  083E               	movf	(__PIR^(0+128)+30),w
  4757  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0157  0657               	xorwf	??_PIR_Main,w
  4760  0158                     u6835:	
  4761  0158  1D03               	skipz
  4762  0159  29B1               	goto	l5332
  4763                           
  4764                           ;PIR_B1.c: 168: _PIR.Count = 0;
  4765  015A  1683               	bsf	3,5	;RP0=1, select bank1
  4766  015B  1303               	bcf	3,6	;RP1=0, select bank1
  4767  015C  01BE               	clrf	(__PIR^(0+128)+30)
  4768  015D  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4769                           
  4770                           ;PIR_B1.c: 170: _PIR.CloseTimeSeconds = 0;
  4771  015E  01C2               	clrf	(__PIR^(0+128)+34)
  4772                           
  4773                           ;PIR_B1.c: 171: _PIR.CloseTimeMinutes = 0;
  4774  015F  01C0               	clrf	(__PIR^(0+128)+32)
  4775  0160  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4776                           
  4777                           ;PIR_B1.c: 177: if (getLights_Status(1) == 0) {
  4778  0161  3001               	movlw	1
  4779  0162  158A  2355  118A   	fcall	_getLights_Status
  4780  0165  3800               	iorlw	0
  4781  0166  1D03               	skipz
  4782  0167  2970               	goto	l5326
  4783                           
  4784                           ;PIR_B1.c: 178: setLights_SwOn(1);
  4785  0168  3001               	movlw	1
  4786  0169  158A  24D5  118A   	fcall	_setLights_SwOn
  4787                           
  4788                           ;PIR_B1.c: 179: setLights_SwOff(1);
  4789  016C  3001               	movlw	1
  4790  016D  158A  242A  118A   	fcall	_setLights_SwOff
  4791  0170                     l5326:	
  4792                           
  4793                           ;PIR_B1.c: 181: }
  4794                           ;PIR_B1.c: 195: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4795  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4796  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4797  0172  0848               	movf	(__PIR^(0+128)+40),w
  4798  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4800  0175  00D7               	movwf	??_PIR_Main
  4801  0176  01D8               	clrf	??_PIR_Main+1
  4802  0177  09D7               	comf	??_PIR_Main,f
  4803  0178  09D8               	comf	??_PIR_Main+1,f
  4804  0179  0AD7               	incf	??_PIR_Main,f
  4805  017A  1903               	skipnz
  4806  017B  0AD8               	incf	??_PIR_Main+1,f
  4807  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4808  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4809  017E  0823               	movf	(__PIR^(0+128)+3),w
  4810  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4811  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4812  0181  0757               	addwf	??_PIR_Main,w
  4813  0182  00D9               	movwf	??_PIR_Main+2
  4814  0183  0858               	movf	??_PIR_Main+1,w
  4815  0184  1803               	skipnc
  4816  0185  0A58               	incf	??_PIR_Main+1,w
  4817  0186  00DA               	movwf	??_PIR_Main+3
  4818  0187  085A               	movf	??_PIR_Main+3,w
  4819  0188  3A80               	xorlw	128
  4820  0189  00DB               	movwf	??_PIR_Main+4
  4821  018A  3080               	movlw	128
  4822  018B  025B               	subwf	??_PIR_Main+4,w
  4823  018C  1D03               	skipz
  4824  018D  2994               	goto	u6855
  4825  018E  1683               	bsf	3,5	;RP0=1, select bank1
  4826  018F  1303               	bcf	3,6	;RP1=0, select bank1
  4827  0190  0821               	movf	(__PIR^(0+128)+1),w
  4828  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4829  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4830  0193  0259               	subwf	??_PIR_Main+2,w
  4831  0194                     u6855:	
  4832  0194  1C03               	skipc
  4833  0195  29A2               	goto	l5330
  4834                           
  4835                           ;PIR_B1.c: 196: setLED(1, 1);
  4836  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4837  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4838  0198  01D1               	clrf	setLED@command
  4839  0199  0AD1               	incf	setLED@command,f
  4840  019A                     L13:	
  4841  019A  3001               	movlw	1
  4842  019B  158A  278F  118A   	fcall	_setLED
  4843                           
  4844                           ;PIR_B1.c: 197: setLED(2, 0);
  4845  019E  1283               	bcf	3,5	;RP0=0, select bank0
  4846  019F  1303               	bcf	3,6	;RP1=0, select bank0
  4847  01A0  01D1               	clrf	setLED@command
  4848  01A1  29AD               	goto	L10
  4849  01A2                     l5330:	
  4850                           ;PIR_B1.c: 198: } else {
  4851                           
  4852                           
  4853                           ;PIR_B1.c: 199: setLED(1, 0);
  4854  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4855  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4856  01A4  01D1               	clrf	setLED@command
  4857  01A5  3001               	movlw	1
  4858  01A6  158A  278F  118A   	fcall	_setLED
  4859                           
  4860                           ;PIR_B1.c: 200: setLED(2, 1);
  4861  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  4862  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  4863  01AB  01D1               	clrf	setLED@command
  4864  01AC  0AD1               	incf	setLED@command,f
  4865  01AD                     L10:	
  4866  01AD  3002               	movlw	2
  4867  01AE  158A  278F  118A   	fcall	_setLED
  4868  01B1                     l5332:	
  4869                           
  4870                           ;PIR_B1.c: 201: }
  4871                           ;PIR_B1.c: 243: }
  4872                           ;PIR_B1.c: 244: }
  4873                           ;PIR_B1.c: 245: }
  4874                           ;PIR_B1.c: 246: }
  4875                           ;PIR_B1.c: 247: }
  4876                           ;PIR_B1.c: 248: }
  4877                           ;PIR_B1.c: 249: if (_PIR.OK == 0) {
  4878  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4879  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  4880  01B3  19A0               	btfsc	__PIR^(0+128),3
  4881  01B4  29E1               	goto	l5348
  4882                           
  4883                           ;PIR_B1.c: 250: _PIR.Count++;
  4884  01B5  3001               	movlw	1
  4885  01B6  07BE               	addwf	(__PIR^(0+128)+30),f
  4886  01B7  1803               	skipnc
  4887  01B8  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4888  01B9  3000               	movlw	0
  4889  01BA  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4890                           
  4891                           ;PIR_B1.c: 251: if (_PIR.Count == (30000 / 20)) {
  4892  01BB  3005               	movlw	5
  4893  01BC  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  4894  01BD  1D03               	skipz
  4895  01BE  29C1               	goto	u6875
  4896  01BF  30DC               	movlw	220
  4897  01C0  063E               	xorwf	(__PIR^(0+128)+30),w
  4898  01C1                     u6875:	
  4899  01C1  1D03               	skipz
  4900  01C2  0008               	return
  4901                           
  4902                           ;PIR_B1.c: 252: _PIR.Count = 0;
  4903  01C3  01BE               	clrf	(__PIR^(0+128)+30)
  4904  01C4  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4905                           
  4906                           ;PIR_B1.c: 253: _PIR.OK = 1;
  4907  01C5  15A0               	bsf	__PIR^(0+128),3
  4908                           
  4909                           ;PIR_B1.c: 255: setLED(1, 0);
  4910  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  4911  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  4912  01C8  01D1               	clrf	setLED@command
  4913  01C9  3001               	movlw	1
  4914  01CA  158A  278F  118A   	fcall	_setLED
  4915                           
  4916                           ;PIR_B1.c: 258: if (cds == 0) {
  4917  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4918  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4919  01CF  08E1               	movf	PIR_Main@cds,f
  4920  01D0  1D03               	skipz
  4921  01D1  0008               	return
  4922                           
  4923                           ;PIR_B1.c: 261: if (getLights_Status(1) == 1) {
  4924  01D2  3001               	movlw	1
  4925  01D3  158A  2355  118A   	fcall	_getLights_Status
  4926  01D6  3A01               	xorlw	1
  4927  01D7  1D03               	skipz
  4928  01D8  0008               	return
  4929                           
  4930                           ;PIR_B1.c: 262: setLights_SwOn(1);
  4931  01D9  3001               	movlw	1
  4932  01DA  158A  24D5  118A   	fcall	_setLights_SwOn
  4933                           
  4934                           ;PIR_B1.c: 263: setLights_SwOff(1);
  4935  01DD  3001               	movlw	1
  4936  01DE  158A  242A         	fcall	_setLights_SwOff
  4937                           
  4938                           ;PIR_B1.c: 265: }
  4939                           ;PIR_B1.c: 277: }
  4940                           ;PIR_B1.c: 278: }
  4941                           ;PIR_B1.c: 279: } else {
  4942  01E0  0008               	return
  4943  01E1                     l5348:	
  4944                           
  4945                           ;PIR_B1.c: 280: if (LightsStatus == 1) {
  4946  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  4947  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  4948  01E3  0862               	movf	PIR_Main@LightsStatus,w
  4949  01E4  3A01               	xorlw	1
  4950  01E5  1D03               	skipz
  4951  01E6  0008               	return
  4952                           
  4953                           ;PIR_B1.c: 281: _PIR.CloseTimeSeconds++;
  4954  01E7  3001               	movlw	1
  4955  01E8  00D7               	movwf	??_PIR_Main
  4956  01E9  0857               	movf	??_PIR_Main,w
  4957  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  4958  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  4959  01EC  07C2               	addwf	(__PIR^(0+128)+34),f
  4960                           
  4961                           ;PIR_B1.c: 282: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4962  01ED  0842               	movf	(__PIR^(0+128)+34),w
  4963  01EE  3A32               	xorlw	50
  4964  01EF  1D03               	skipz
  4965  01F0  0008               	return
  4966                           
  4967                           ;PIR_B1.c: 283: _PIR.CloseTimeSeconds = 0;
  4968  01F1  01C2               	clrf	(__PIR^(0+128)+34)
  4969                           
  4970                           ;PIR_B1.c: 284: _PIR.CloseTimeMinutes++;
  4971  01F2  3001               	movlw	1
  4972  01F3  07C0               	addwf	(__PIR^(0+128)+32),f
  4973  01F4  1803               	skipnc
  4974  01F5  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  4975  01F6  3000               	movlw	0
  4976  01F7  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  4977                           
  4978                           ;PIR_B1.c: 285: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4979  01F8  0844               	movf	((__PIR+1)^(0+128)+35),w
  4980  01F9  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  4981  01FA  1D03               	skipz
  4982  01FB  29FE               	goto	u6925
  4983  01FC  0843               	movf	(__PIR^(0+128)+35),w
  4984  01FD  0640               	xorwf	(__PIR^(0+128)+32),w
  4985  01FE                     u6925:	
  4986  01FE  1D03               	skipz
  4987  01FF  0008               	return
  4988                           
  4989                           ;PIR_B1.c: 286: _PIR.CloseTimeMinutes = 0;
  4990  0200  01C0               	clrf	(__PIR^(0+128)+32)
  4991  0201  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4992                           
  4993                           ;PIR_B1.c: 292: if (getLights_Status(1) == 1) {
  4994  0202  3001               	movlw	1
  4995  0203  158A  2355  118A   	fcall	_getLights_Status
  4996  0206  3A01               	xorlw	1
  4997  0207  1D03               	skipz
  4998  0208  0008               	return
  4999                           
  5000                           ;PIR_B1.c: 293: setLights_SwOn(1);
  5001  0209  3001               	movlw	1
  5002  020A  158A  24D5  118A   	fcall	_setLights_SwOn
  5003                           
  5004                           ;PIR_B1.c: 294: setLights_SwOff(1);
  5005  020D  3001               	movlw	1
  5006  020E  158A  242A         	fcall	_setLights_SwOff
  5007                           
  5008                           ;PIR_B1.c: 296: }
  5009                           ;PIR_B1.c: 308: }
  5010                           ;PIR_B1.c: 309: }
  5011                           ;PIR_B1.c: 310: }
  5012                           ;PIR_B1.c: 311: }
  5013                           ;PIR_B1.c: 312: } else {
  5014  0210  0008               	return
  5015  0211                     l927:	
  5016                           
  5017                           ;PIR_B1.c: 313: if (myMain.PowerON == 1) {
  5018  0211  1283               	bcf	3,5	;RP0=0, select bank0
  5019  0212  1303               	bcf	3,6	;RP1=0, select bank0
  5020  0213  1C25               	btfss	_myMain,0
  5021  0214  0008               	return
  5022                           
  5023                           ;PIR_B1.c: 314: _PIR.Enable = 1;
  5024  0215  1683               	bsf	3,5	;RP0=1, select bank1
  5025  0216  1303               	bcf	3,6	;RP1=0, select bank1
  5026  0217  1420               	bsf	__PIR^(0+128),0
  5027                           
  5028                           ;PIR_B1.c: 316: setLED(1, 1);
  5029  0218  1283               	bcf	3,5	;RP0=0, select bank0
  5030  0219  1303               	bcf	3,6	;RP1=0, select bank0
  5031  021A  01D1               	clrf	setLED@command
  5032  021B  0AD1               	incf	setLED@command,f
  5033  021C  3001               	movlw	1
  5034  021D  158A  278F  118A   	fcall	_setLED
  5035                           
  5036                           ;PIR_B1.c: 321: if (getLights_Status(1) == 0) {
  5037  0220  3001               	movlw	1
  5038  0221  158A  2355  118A   	fcall	_getLights_Status
  5039  0224  3800               	iorlw	0
  5040  0225  1D03               	skipz
  5041  0226  0008               	return
  5042                           
  5043                           ;PIR_B1.c: 322: setLights_SwOn(1);
  5044  0227  3001               	movlw	1
  5045  0228  158A  24D5  118A   	fcall	_setLights_SwOn
  5046                           
  5047                           ;PIR_B1.c: 323: setLights_SwOff(1);
  5048  022B  3001               	movlw	1
  5049  022C  158A  242A         	fcall	_setLights_SwOff
  5050  022E  0008               	return
  5051  022F                     __end_of_PIR_Main:	
  5052                           
  5053                           	psect	text21
  5054  0ACA                     __ptext21:	
  5055 ;; *************** function _getCDS_Status *****************
  5056 ;; Defined at:
  5057 ;;		line 42 in file "../src/CDS_B1.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;		None
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  status          1    4[COMMON] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      unsigned char 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5071 ;;      Params:         0       0       0       0
  5072 ;;      Locals:         1       0       0       0
  5073 ;;      Temps:          0       0       0       0
  5074 ;;      Totals:         1       0       0       0
  5075 ;;Total ram usage:        1 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    2
  5078 ;; This function calls:
  5079 ;;		Nothing
  5080 ;; This function is called by:
  5081 ;;		_PIR_Main
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _getCDS_Status
  5087  0ACA                     _getCDS_Status:	
  5088                           
  5089                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5093  0ACA  3000               	movlw	0
  5094  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  5095  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  5096  0ACD  1A2E               	btfsc	__CDS,4
  5097  0ACE  3001               	movlw	1
  5098  0ACF  00F4               	movwf	getCDS_Status@status
  5099                           
  5100                           ;CDS_B1.c: 44: return status;
  5101  0AD0  0874               	movf	getCDS_Status@status,w
  5102  0AD1  0008               	return
  5103  0AD2                     __end_of_getCDS_Status:	
  5104                           
  5105                           	psect	text22
  5106  0AF7                     __ptext22:	
  5107 ;; *************** function _PIR_Initialization *****************
  5108 ;; Defined at:
  5109 ;;		line 7 in file "../src/PIR_B1.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;		None               void
  5116 ;; Registers used:
  5117 ;;		wreg
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5123 ;;      Params:         0       0       0       0
  5124 ;;      Locals:         0       0       0       0
  5125 ;;      Temps:          1       0       0       0
  5126 ;;      Totals:         1       0       0       0
  5127 ;;Total ram usage:        1 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    2
  5130 ;; This function calls:
  5131 ;;		Nothing
  5132 ;; This function is called by:
  5133 ;;		_main
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           
  5138                           ;psect for function _PIR_Initialization
  5139  0AF7                     _PIR_Initialization:	
  5140                           
  5141                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _PIR_Initialization: [wreg]
  5145  0AF7  3019               	movlw	25
  5146  0AF8  00F4               	movwf	??_PIR_Initialization
  5147  0AF9  0874               	movf	??_PIR_Initialization,w
  5148  0AFA  1683               	bsf	3,5	;RP0=1, select bank1
  5149  0AFB  1303               	bcf	3,6	;RP1=0, select bank1
  5150  0AFC  00C8               	movwf	(__PIR^(0+128)+40)
  5151                           
  5152                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5153  0AFD  3005               	movlw	5
  5154  0AFE  00C3               	movwf	(__PIR^(0+128)+35)
  5155  0AFF  3000               	movlw	0
  5156  0B00  00C4               	movwf	(__PIR^(0+128)+36)
  5157  0B01  0008               	return
  5158  0B02                     __end_of_PIR_Initialization:	
  5159                           
  5160                           	psect	text23
  5161  0B46                     __ptext23:	
  5162 ;; *************** function _Mcu_Initialization *****************
  5163 ;; Defined at:
  5164 ;;		line 30 in file "../src/MCU_B1.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;		None               void
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0, pclath, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5178 ;;      Params:         0       0       0       0
  5179 ;;      Locals:         0       0       0       0
  5180 ;;      Temps:          0       0       0       0
  5181 ;;      Totals:         0       0       0       0
  5182 ;;Total ram usage:        0 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    3
  5185 ;; This function calls:
  5186 ;;		_ADC_Set
  5187 ;;		_Fosc_Set
  5188 ;;		_IO_Set
  5189 ;;		_TMR1_Set
  5190 ;;		_WDT_Set
  5191 ;; This function is called by:
  5192 ;;		_main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _Mcu_Initialization
  5198  0B46                     _Mcu_Initialization:	
  5199                           
  5200                           ;MCU_B1.c: 32: Fosc_Set();
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5204  0B46  158A  229D  158A   	fcall	_Fosc_Set
  5205                           
  5206                           ;MCU_B1.c: 34: IO_Set();
  5207  0B49  158A  23F8  158A   	fcall	_IO_Set
  5208                           
  5209                           ;MCU_B1.c: 36: ;;
  5210                           ;MCU_B1.c: 38: TMR1_Set();
  5211  0B4C  158A  232A  158A   	fcall	_TMR1_Set
  5212                           
  5213                           ;MCU_B1.c: 40: ADC_Set();
  5214  0B4F  158A  22BB  158A   	fcall	_ADC_Set
  5215                           
  5216                           ;MCU_B1.c: 42: ;;
  5217                           ;MCU_B1.c: 44: ;;
  5218                           ;MCU_B1.c: 46: ;;
  5219                           ;MCU_B1.c: 48: ;;
  5220                           ;MCU_B1.c: 50: ;;
  5221                           ;MCU_B1.c: 52: WDT_Set();
  5222  0B52  158A  2338         	fcall	_WDT_Set
  5223  0B54  0008               	return
  5224  0B55                     __end_of_Mcu_Initialization:	
  5225                           
  5226                           	psect	text24
  5227  0B38                     __ptext24:	
  5228 ;; *************** function _WDT_Set *****************
  5229 ;; Defined at:
  5230 ;;		line 1102 in file "../src/MCU_B1.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5244 ;;      Params:         0       0       0       0
  5245 ;;      Locals:         0       0       0       0
  5246 ;;      Temps:          1       0       0       0
  5247 ;;      Totals:         1       0       0       0
  5248 ;;Total ram usage:        1 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    2
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_Mcu_Initialization
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _WDT_Set
  5260  0B38                     _WDT_Set:	
  5261                           
  5262                           ;MCU_B1.c: 1104: PSA = 1;
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _WDT_Set: [wreg]
  5266  0B38  1683               	bsf	3,5	;RP0=1, select bank1
  5267  0B39  1303               	bcf	3,6	;RP1=0, select bank1
  5268  0B3A  1581               	bsf	1,3	;volatile
  5269                           
  5270                           ;MCU_B1.c: 1105: PS0 = 1;
  5271  0B3B  1401               	bsf	1,0	;volatile
  5272                           
  5273                           ;MCU_B1.c: 1106: PS1 = 1;
  5274  0B3C  1481               	bsf	1,1	;volatile
  5275                           
  5276                           ;MCU_B1.c: 1107: PS2 = 1;
  5277  0B3D  1501               	bsf	1,2	;volatile
  5278                           
  5279                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5280  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  5281  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  5282  0B40  1435               	bsf	_WDT,0
  5283                           
  5284                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5285  0B41  300A               	movlw	10
  5286  0B42  00F4               	movwf	??_WDT_Set
  5287  0B43  0874               	movf	??_WDT_Set,w
  5288  0B44  00B6               	movwf	_WDT+1
  5289  0B45  0008               	return
  5290  0B46                     __end_of_WDT_Set:	
  5291                           
  5292                           	psect	text25
  5293  0B2A                     __ptext25:	
  5294 ;; *************** function _TMR1_Set *****************
  5295 ;; Defined at:
  5296 ;;		line 226 in file "../src/MCU_B1.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5310 ;;      Params:         0       0       0       0
  5311 ;;      Locals:         0       0       0       0
  5312 ;;      Temps:          0       0       0       0
  5313 ;;      Totals:         0       0       0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    2
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_Mcu_Initialization
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _TMR1_Set
  5326  0B2A                     _TMR1_Set:	
  5327                           
  5328                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _TMR1_Set: [wreg]
  5332  0B2A  3041               	movlw	65
  5333  0B2B  1283               	bcf	3,5	;RP0=0, select bank0
  5334  0B2C  1303               	bcf	3,6	;RP1=0, select bank0
  5335  0B2D  0090               	movwf	16	;volatile
  5336                           
  5337                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5338  0B2E  30FA               	movlw	250
  5339  0B2F  008F               	movwf	15	;volatile
  5340                           
  5341                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5342  0B30  3038               	movlw	56
  5343  0B31  008E               	movwf	14	;volatile
  5344                           
  5345                           ;MCU_B1.c: 230: TMR1IE = 1;
  5346  0B32  1683               	bsf	3,5	;RP0=1, select bank1
  5347  0B33  1303               	bcf	3,6	;RP1=0, select bank1
  5348  0B34  140C               	bsf	12,0	;volatile
  5349                           
  5350                           ;MCU_B1.c: 231: PEIE = 1;
  5351  0B35  170B               	bsf	11,6	;volatile
  5352                           
  5353                           ;MCU_B1.c: 232: GIE = 1;
  5354  0B36  178B               	bsf	11,7	;volatile
  5355  0B37  0008               	return
  5356  0B38                     __end_of_TMR1_Set:	
  5357                           
  5358                           	psect	text26
  5359  0BF8                     __ptext26:	
  5360 ;; *************** function _IO_Set *****************
  5361 ;; Defined at:
  5362 ;;		line 60 in file "../src/MCU_B1.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;		None
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;		None
  5367 ;; Return value:  Size  Location     Type
  5368 ;;		None               void
  5369 ;; Registers used:
  5370 ;;		wreg, status,2
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5376 ;;      Params:         0       0       0       0
  5377 ;;      Locals:         0       0       0       0
  5378 ;;      Temps:          0       0       0       0
  5379 ;;      Totals:         0       0       0       0
  5380 ;;Total ram usage:        0 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    2
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		_Mcu_Initialization
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _IO_Set
  5392  0BF8                     _IO_Set:	
  5393                           
  5394                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _IO_Set: [wreg+status,2]
  5398  0BF8  302F               	movlw	47
  5399  0BF9  1683               	bsf	3,5	;RP0=1, select bank1
  5400  0BFA  1303               	bcf	3,6	;RP1=0, select bank1
  5401  0BFB  0085               	movwf	5	;volatile
  5402                           
  5403                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5404  0BFC  3001               	movlw	1
  5405  0BFD  0086               	movwf	6	;volatile
  5406                           
  5407                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5408  0BFE  0187               	clrf	7	;volatile
  5409                           
  5410                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5411  0BFF  3007               	movlw	7
  5412  0C00  1683               	bsf	3,5	;RP0=1, select bank3
  5413  0C01  1703               	bsf	3,6	;RP1=1, select bank3
  5414  0C02  0085               	movwf	5	;volatile
  5415                           
  5416                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5417  0C03  3001               	movlw	1
  5418  0C04  0086               	movwf	6	;volatile
  5419                           
  5420                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5421  0C05  30AF               	movlw	175
  5422  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  5423  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  5424  0C08  0085               	movwf	5	;volatile
  5425                           
  5426                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5427  0C09  3001               	movlw	1
  5428  0C0A  0086               	movwf	6	;volatile
  5429                           
  5430                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5431  0C0B  0187               	clrf	7	;volatile
  5432                           
  5433                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5434  0C0C  1683               	bsf	3,5	;RP0=1, select bank1
  5435  0C0D  1303               	bcf	3,6	;RP1=0, select bank1
  5436  0C0E  0195               	clrf	21	;volatile
  5437  0C0F  0008               	return
  5438  0C10                     __end_of_IO_Set:	
  5439                           
  5440                           	psect	text27
  5441  0A9D                     __ptext27:	
  5442 ;; *************** function _Fosc_Set *****************
  5443 ;; Defined at:
  5444 ;;		line 56 in file "../src/MCU_B1.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;		None               void
  5451 ;; Registers used:
  5452 ;;		wreg
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5458 ;;      Params:         0       0       0       0
  5459 ;;      Locals:         0       0       0       0
  5460 ;;      Temps:          0       0       0       0
  5461 ;;      Totals:         0       0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    2
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_Mcu_Initialization
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _Fosc_Set
  5474  0A9D                     _Fosc_Set:	
  5475                           
  5476                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5477                           
  5478                           ;incstack = 0
  5479                           ; Regs used in _Fosc_Set: [wreg]
  5480  0A9D  303C               	movlw	60
  5481  0A9E  1683               	bsf	3,5	;RP0=1, select bank1
  5482  0A9F  1303               	bcf	3,6	;RP1=0, select bank1
  5483  0AA0  0090               	movwf	16	;volatile
  5484  0AA1  0008               	return
  5485  0AA2                     __end_of_Fosc_Set:	
  5486                           
  5487                           	psect	text28
  5488  0ABB                     __ptext28:	
  5489 ;; *************** function _ADC_Set *****************
  5490 ;; Defined at:
  5491 ;;		line 427 in file "../src/MCU_B1.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5505 ;;      Params:         0       0       0       0
  5506 ;;      Locals:         0       0       0       0
  5507 ;;      Temps:          0       0       0       0
  5508 ;;      Totals:         0       0       0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    2
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_Mcu_Initialization
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _ADC_Set
  5521  0ABB                     _ADC_Set:	
  5522                           
  5523                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _ADC_Set: [wreg]
  5527  0ABB  3073               	movlw	115
  5528  0ABC  1683               	bsf	3,5	;RP0=1, select bank1
  5529  0ABD  1303               	bcf	3,6	;RP1=0, select bank1
  5530  0ABE  009F               	movwf	31	;volatile
  5531                           
  5532                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  5533  0ABF  30C1               	movlw	193
  5534  0AC0  009D               	movwf	29	;volatile
  5535  0AC1  0008               	return
  5536  0AC2                     __end_of_ADC_Set:	
  5537                           
  5538                           	psect	text29
  5539  022F                     __ptext29:	
  5540 ;; *************** function _Load_Main *****************
  5541 ;; Defined at:
  5542 ;;		line 39 in file "../src/OverLoad_B1.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  i               2   15[BANK0 ] int 
  5547 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5548 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5549 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5550 ;;  error           1    9[BANK0 ] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;		None               void
  5553 ;; Registers used:
  5554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5560 ;;      Params:         0       0       0       0
  5561 ;;      Locals:         0       8       0       0
  5562 ;;      Temps:          0       2       0       0
  5563 ;;      Totals:         0      10       0       0
  5564 ;;Total ram usage:       10 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    3
  5567 ;; This function calls:
  5568 ;;		___lwdiv
  5569 ;;		___wmul
  5570 ;;		_getLight_LoadGO
  5571 ;;		_getLight_Load_Status
  5572 ;;		_getMain_All_Error_Status
  5573 ;;		_getMain_All_LightsStatus
  5574 ;;		_getMain_Lights_Count
  5575 ;;		_setLoad_AH_AL_Restore
  5576 ;; This function is called by:
  5577 ;;		_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _Load_Main
  5583  022F                     _Load_Main:	
  5584                           
  5585                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5589  022F  3000               	movlw	0
  5590  0230  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  5591  0233  1283               	bcf	3,5	;RP0=0, select bank0
  5592  0234  1303               	bcf	3,6	;RP1=0, select bank0
  5593  0235  00D8               	movwf	??_Load_Main
  5594  0236  0858               	movf	??_Load_Main,w
  5595  0237  00DA               	movwf	Load_Main@error
  5596                           
  5597                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  5598  0238  01DE               	clrf	Load_Main@Load_RunStatus
  5599  0239  01DD               	clrf	Load_Main@ErrorCountValue
  5600  023A  01DF               	clrf	Load_Main@LightsCount
  5601                           
  5602                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5603  023B  1683               	bsf	3,5	;RP0=1, select bank1
  5604  023C  1303               	bcf	3,6	;RP1=0, select bank1
  5605  023D  1C4A               	btfss	_Load^(0+128),0
  5606  023E  2C11               	goto	l725
  5607                           
  5608                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  5609  023F  118A  27F7  118A   	fcall	_getMain_All_LightsStatus
  5610  0242  3800               	iorlw	0
  5611  0243  1D03               	skipz
  5612  0244  2A48               	goto	l5070
  5613                           
  5614                           ;OverLoad_B1.c: 45: Load.GO = 0;
  5615  0245  1683               	bsf	3,5	;RP0=1, select bank1
  5616  0246  1303               	bcf	3,6	;RP1=0, select bank1
  5617  0247  2A67               	goto	l5086
  5618  0248                     l5070:	
  5619                           ;OverLoad_B1.c: 46: } else {
  5620                           
  5621                           
  5622                           ;OverLoad_B1.c: 69: if (error == 0) {
  5623  0248  1283               	bcf	3,5	;RP0=0, select bank0
  5624  0249  1303               	bcf	3,6	;RP1=0, select bank0
  5625  024A  08DA               	movf	Load_Main@error,f
  5626  024B  1D03               	skipz
  5627  024C  2A64               	goto	l728
  5628                           
  5629                           ;OverLoad_B1.c: 70: Load.GO = 1;
  5630  024D  1683               	bsf	3,5	;RP0=1, select bank1
  5631  024E  1303               	bcf	3,6	;RP1=0, select bank1
  5632  024F  14CA               	bsf	_Load^(0+128),1
  5633                           
  5634                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  5635  0250  158A  22A2  118A   	fcall	_getLight_LoadGO
  5636  0253  3A01               	xorlw	1
  5637  0254  1D03               	skipz
  5638  0255  2A5E               	goto	l729
  5639                           
  5640                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  5641  0256  1683               	bsf	3,5	;RP0=1, select bank1
  5642  0257  1303               	bcf	3,6	;RP1=0, select bank1
  5643  0258  1DCA               	btfss	_Load^(0+128),3
  5644  0259  1BCA               	btfsc	_Load^(0+128),7
  5645  025A  2A68               	goto	l727
  5646                           
  5647                           ;OverLoad_B1.c: 74: Load.Run = 1;
  5648  025B  15CA               	bsf	_Load^(0+128),3
  5649                           
  5650                           ;OverLoad_B1.c: 75: Load.Count = 0;
  5651  025C  01E3               	clrf	(_Load^(0+128)+25)
  5652                           
  5653                           ;OverLoad_B1.c: 76: }
  5654                           ;OverLoad_B1.c: 77: } else {
  5655  025D  2A68               	goto	l727
  5656  025E                     l729:	
  5657                           
  5658                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  5659  025E  1683               	bsf	3,5	;RP0=1, select bank1
  5660  025F  1303               	bcf	3,6	;RP1=0, select bank1
  5661  0260  1FCA               	btfss	_Load^(0+128),7
  5662  0261  2A68               	goto	l727
  5663                           
  5664                           ;OverLoad_B1.c: 79: Load.OK = 0;
  5665  0262  13CA               	bcf	_Load^(0+128),7
  5666                           
  5667                           ;OverLoad_B1.c: 80: }
  5668                           ;OverLoad_B1.c: 81: }
  5669                           ;OverLoad_B1.c: 82: } else {
  5670  0263  2A68               	goto	l727
  5671  0264                     l728:	
  5672                           
  5673                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  5674  0264  1683               	bsf	3,5	;RP0=1, select bank1
  5675  0265  1303               	bcf	3,6	;RP1=0, select bank1
  5676  0266  18CA               	btfsc	_Load^(0+128),1
  5677  0267                     l5086:	
  5678                           
  5679                           ;OverLoad_B1.c: 84: Load.GO = 0;
  5680  0267  10CA               	bcf	_Load^(0+128),1
  5681  0268                     l727:	
  5682                           
  5683                           ;OverLoad_B1.c: 85: }
  5684                           ;OverLoad_B1.c: 86: }
  5685                           ;OverLoad_B1.c: 88: }
  5686                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  5687  0268  1CCA               	btfss	_Load^(0+128),1
  5688  0269  2BEA               	goto	l735
  5689                           
  5690                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  5691  026A  154A               	bsf	_Load^(0+128),2
  5692                           
  5693                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  5694  026B  1E4A               	btfss	_Load^(0+128),4
  5695  026C  2BE8               	goto	l736
  5696                           
  5697                           ;OverLoad_B1.c: 95: Load.Time++;
  5698  026D  3001               	movlw	1
  5699  026E  07CB               	addwf	(_Load^(0+128)+1),f
  5700  026F  1803               	skipnc
  5701  0270  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5702  0271  3000               	movlw	0
  5703  0272  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5704                           
  5705                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  5706  0273  3000               	movlw	0
  5707  0274  024C               	subwf	((_Load+1)^(0+128)+1),w
  5708  0275  3002               	movlw	2
  5709  0276  1903               	skipnz
  5710  0277  024B               	subwf	(_Load^(0+128)+1),w
  5711  0278  1C03               	skipc
  5712  0279  0008               	return
  5713                           
  5714                           ;OverLoad_B1.c: 97: Load.Time = 0;
  5715  027A  01CB               	clrf	(_Load^(0+128)+1)
  5716  027B  01CC               	clrf	((_Load+1)^(0+128)+1)
  5717                           
  5718                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  5719  027C  124A               	bcf	_Load^(0+128),4
  5720                           
  5721                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  5722  027D  3001               	movlw	1
  5723  027E  1283               	bcf	3,5	;RP0=0, select bank0
  5724  027F  1303               	bcf	3,6	;RP1=0, select bank0
  5725  0280  00E0               	movwf	Load_Main@i
  5726  0281  3000               	movlw	0
  5727  0282  00E1               	movwf	Load_Main@i+1
  5728  0283  0861               	movf	Load_Main@i+1,w
  5729  0284  3A80               	xorlw	128
  5730  0285  00FF               	movwf	127
  5731  0286  3080               	movlw	128
  5732  0287  027F               	subwf	127,w
  5733  0288  1D03               	skipz
  5734  0289  2A8C               	goto	u6355
  5735  028A  3004               	movlw	4
  5736  028B  0260               	subwf	Load_Main@i,w
  5737  028C                     u6355:	
  5738  028C  1803               	btfsc	3,0
  5739  028D  2ACA               	goto	l5108
  5740  028E                     l5102:	
  5741                           
  5742                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  5743  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5744  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5745  0290  0860               	movf	Load_Main@i,w
  5746  0291  3ED4               	addlw	(_Load+10)& (0+255)
  5747  0292  0084               	movwf	4
  5748  0293  1383               	bcf	3,7	;select IRP bank1
  5749  0294  0800               	movf	0,w
  5750  0295  00D8               	movwf	??_Load_Main
  5751  0296  01D9               	clrf	??_Load_Main+1
  5752  0297  0858               	movf	??_Load_Main,w
  5753  0298  1683               	bsf	3,5	;RP0=1, select bank1
  5754  0299  1303               	bcf	3,6	;RP1=0, select bank1
  5755  029A  07CF               	addwf	(_Load^(0+128)+5),f
  5756  029B  1803               	skipnc
  5757  029C  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5758  029D  1283               	bcf	3,5	;RP0=0, select bank0
  5759  029E  1303               	bcf	3,6	;RP1=0, select bank0
  5760  029F  0859               	movf	??_Load_Main+1,w
  5761  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  5762  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  5763  02A2  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5764                           
  5765                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  5766  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  5767  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  5768  02A5  0860               	movf	Load_Main@i,w
  5769  02A6  3ED9               	addlw	(_Load+15)& (0+255)
  5770  02A7  0084               	movwf	4
  5771  02A8  0800               	movf	0,w
  5772  02A9  00D8               	movwf	??_Load_Main
  5773  02AA  01D9               	clrf	??_Load_Main+1
  5774  02AB  0858               	movf	??_Load_Main,w
  5775  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  5776  02AD  1303               	bcf	3,6	;RP1=0, select bank1
  5777  02AE  07D1               	addwf	(_Load^(0+128)+7),f
  5778  02AF  1803               	skipnc
  5779  02B0  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5780  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  5781  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  5782  02B3  0859               	movf	??_Load_Main+1,w
  5783  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  5784  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  5785  02B6  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5786  02B7  3001               	movlw	1
  5787  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  5788  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  5789  02BA  07E0               	addwf	Load_Main@i,f
  5790  02BB  1803               	skipnc
  5791  02BC  0AE1               	incf	Load_Main@i+1,f
  5792  02BD  3000               	movlw	0
  5793  02BE  07E1               	addwf	Load_Main@i+1,f
  5794  02BF  0861               	movf	Load_Main@i+1,w
  5795  02C0  3A80               	xorlw	128
  5796  02C1  00FF               	movwf	127
  5797  02C2  3080               	movlw	128
  5798  02C3  027F               	subwf	127,w
  5799  02C4  1D03               	skipz
  5800  02C5  2AC8               	goto	u6365
  5801  02C6  3004               	movlw	4
  5802  02C7  0260               	subwf	Load_Main@i,w
  5803  02C8                     u6365:	
  5804  02C8  1C03               	skipc
  5805  02C9  2A8E               	goto	l5102
  5806  02CA                     l5108:	
  5807                           
  5808                           ;OverLoad_B1.c: 103: }
  5809                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  5810  02CA  3003               	movlw	3
  5811  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5812  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5813  02CD  00D1               	movwf	___lwdiv@divisor
  5814  02CE  3000               	movlw	0
  5815  02CF  00D2               	movwf	___lwdiv@divisor+1
  5816  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  5817  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  5818  02D2  0850               	movf	((_Load+1)^(0+128)+5),w
  5819  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5820  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5821  02D5  01D4               	clrf	___lwdiv@dividend+1
  5822  02D6  07D4               	addwf	___lwdiv@dividend+1,f
  5823  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  5824  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  5825  02D9  084F               	movf	(_Load^(0+128)+5),w
  5826  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  5827  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  5828  02DC  01D3               	clrf	___lwdiv@dividend
  5829  02DD  07D3               	addwf	___lwdiv@dividend,f
  5830  02DE  158A  25EC  118A   	fcall	___lwdiv
  5831  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  5832  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  5833  02E3  0852               	movf	?___lwdiv+1,w
  5834  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  5835  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  5836  02E6  01D0               	clrf	((_Load+1)^(0+128)+5)
  5837  02E7  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5838  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  5839  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  5840  02EA  0851               	movf	?___lwdiv,w
  5841  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  5842  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  5843  02ED  01CF               	clrf	(_Load^(0+128)+5)
  5844  02EE  07CF               	addwf	(_Load^(0+128)+5),f
  5845                           
  5846                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  5847  02EF  3003               	movlw	3
  5848  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5849  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5850  02F2  00D1               	movwf	___lwdiv@divisor
  5851  02F3  3000               	movlw	0
  5852  02F4  00D2               	movwf	___lwdiv@divisor+1
  5853  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  5854  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  5855  02F7  0852               	movf	((_Load+1)^(0+128)+7),w
  5856  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  5857  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  5858  02FA  01D4               	clrf	___lwdiv@dividend+1
  5859  02FB  07D4               	addwf	___lwdiv@dividend+1,f
  5860  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  5861  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  5862  02FE  0851               	movf	(_Load^(0+128)+7),w
  5863  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5864  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5865  0301  01D3               	clrf	___lwdiv@dividend
  5866  0302  07D3               	addwf	___lwdiv@dividend,f
  5867  0303  158A  25EC  118A   	fcall	___lwdiv
  5868  0306  1283               	bcf	3,5	;RP0=0, select bank0
  5869  0307  1303               	bcf	3,6	;RP1=0, select bank0
  5870  0308  0852               	movf	?___lwdiv+1,w
  5871  0309  1683               	bsf	3,5	;RP0=1, select bank1
  5872  030A  1303               	bcf	3,6	;RP1=0, select bank1
  5873  030B  01D2               	clrf	((_Load+1)^(0+128)+7)
  5874  030C  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5875  030D  1283               	bcf	3,5	;RP0=0, select bank0
  5876  030E  1303               	bcf	3,6	;RP1=0, select bank0
  5877  030F  0851               	movf	?___lwdiv,w
  5878  0310  1683               	bsf	3,5	;RP0=1, select bank1
  5879  0311  1303               	bcf	3,6	;RP1=0, select bank1
  5880  0312  01D1               	clrf	(_Load^(0+128)+7)
  5881  0313  07D1               	addwf	(_Load^(0+128)+7),f
  5882                           
  5883                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  5884  0314  158A  23B3  118A   	fcall	_setLoad_AH_AL_Restore
  5885                           
  5886                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  5887  0317  1683               	bsf	3,5	;RP0=1, select bank1
  5888  0318  1303               	bcf	3,6	;RP1=0, select bank1
  5889  0319  0852               	movf	((_Load+1)^(0+128)+7),w
  5890  031A  0250               	subwf	((_Load+1)^(0+128)+5),w
  5891  031B  1D03               	skipz
  5892  031C  2B1F               	goto	u6375
  5893  031D  0851               	movf	(_Load^(0+128)+7),w
  5894  031E  024F               	subwf	(_Load^(0+128)+5),w
  5895  031F                     u6375:	
  5896  031F  1C03               	skipc
  5897  0320  0008               	return
  5898                           
  5899                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  5900  0321  0351               	decf	(_Load^(0+128)+7),w
  5901  0322  3AFF               	xorlw	255
  5902  0323  074F               	addwf	(_Load^(0+128)+5),w
  5903  0324  1283               	bcf	3,5	;RP0=0, select bank0
  5904  0325  1303               	bcf	3,6	;RP1=0, select bank0
  5905  0326  00D8               	movwf	??_Load_Main
  5906  0327  0858               	movf	??_Load_Main,w
  5907  0328  1683               	bsf	3,5	;RP0=1, select bank1
  5908  0329  1303               	bcf	3,6	;RP1=0, select bank1
  5909  032A  00DE               	movwf	(_Load^(0+128)+20)
  5910                           
  5911                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  5912  032B  01CF               	clrf	(_Load^(0+128)+5)
  5913  032C  01D0               	clrf	((_Load+1)^(0+128)+5)
  5914                           
  5915                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  5916  032D  01D1               	clrf	(_Load^(0+128)+7)
  5917  032E  01D2               	clrf	((_Load+1)^(0+128)+7)
  5918                           
  5919                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  5920  032F  1DCA               	btfss	_Load^(0+128),3
  5921  0330  2B94               	goto	l741
  5922                           
  5923                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  5924  0331  3002               	movlw	2
  5925  0332  0263               	subwf	(_Load^(0+128)+25),w
  5926  0333  1803               	skipnc
  5927  0334  2B94               	goto	l741
  5928                           
  5929                           ;OverLoad_B1.c: 115: Load.Count++;
  5930  0335  3001               	movlw	1
  5931  0336  1283               	bcf	3,5	;RP0=0, select bank0
  5932  0337  1303               	bcf	3,6	;RP1=0, select bank0
  5933  0338  00D8               	movwf	??_Load_Main
  5934  0339  0858               	movf	??_Load_Main,w
  5935  033A  1683               	bsf	3,5	;RP0=1, select bank1
  5936  033B  1303               	bcf	3,6	;RP1=0, select bank1
  5937  033C  07E3               	addwf	(_Load^(0+128)+25),f
  5938                           
  5939                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  5940  033D  158A  22A8  118A   	fcall	_getLight_Load_Status
  5941  0340  1283               	bcf	3,5	;RP0=0, select bank0
  5942  0341  1303               	bcf	3,6	;RP1=0, select bank0
  5943  0342  00D8               	movwf	??_Load_Main
  5944  0343  0858               	movf	??_Load_Main,w
  5945  0344  00DE               	movwf	Load_Main@Load_RunStatus
  5946                           
  5947                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  5948  0345  158A  22ED  118A   	fcall	_getMain_Lights_Count
  5949  0348  1283               	bcf	3,5	;RP0=0, select bank0
  5950  0349  1303               	bcf	3,6	;RP1=0, select bank0
  5951  034A  00D8               	movwf	??_Load_Main
  5952  034B  0858               	movf	??_Load_Main,w
  5953  034C  00DF               	movwf	Load_Main@LightsCount
  5954                           
  5955                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5956  034D  1683               	bsf	3,5	;RP0=1, select bank1
  5957  034E  1303               	bcf	3,6	;RP1=0, select bank1
  5958  034F  0863               	movf	(_Load^(0+128)+25),w
  5959  0350  3A01               	xorlw	1
  5960  0351  1D03               	skipz
  5961  0352  2B55               	goto	l5134
  5962                           
  5963                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5964  0353  3022               	movlw	34
  5965  0354  2B62               	goto	L14
  5966  0355                     l5134:	
  5967                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5968                           
  5969  0355  0863               	movf	(_Load^(0+128)+25),w
  5970  0356  3A02               	xorlw	2
  5971  0357  1D03               	skipz
  5972  0358  2B94               	goto	l741
  5973                           
  5974                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  5975  0359  1283               	bcf	3,5	;RP0=0, select bank0
  5976  035A  1303               	bcf	3,6	;RP1=0, select bank0
  5977  035B  085F               	movf	Load_Main@LightsCount,w
  5978  035C  3A01               	xorlw	1
  5979  035D  1D03               	skipz
  5980  035E  2B65               	goto	l5140
  5981                           
  5982                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(8*1.7);
  5983  035F  300D               	movlw	13
  5984  0360  1683               	bsf	3,5	;RP0=1, select bank1
  5985  0361  1303               	bcf	3,6	;RP1=0, select bank1
  5986  0362                     L14:	
  5987  0362  00E1               	movwf	(_Load^(0+128)+23)
  5988  0363  3000               	movlw	0
  5989  0364  2B93               	goto	L15
  5990  0365                     l5140:	
  5991                           ;OverLoad_B1.c: 130: } else {
  5992                           
  5993                           
  5994                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  5995  0365  1283               	bcf	3,5	;RP0=0, select bank0
  5996  0366  08DE               	movf	Load_Main@Load_RunStatus,f
  5997  0367  1D03               	skipz
  5998  0368  2B86               	goto	l5144
  5999                           
  6000                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(8*1.7) * LightsCount;
  6001  0369  085F               	movf	Load_Main@LightsCount,w
  6002  036A  00D8               	movwf	??_Load_Main
  6003  036B  01D9               	clrf	??_Load_Main+1
  6004  036C  0858               	movf	??_Load_Main,w
  6005  036D  00D1               	movwf	___wmul@multiplier
  6006  036E  0859               	movf	??_Load_Main+1,w
  6007  036F  00D2               	movwf	___wmul@multiplier+1
  6008  0370  300D               	movlw	13
  6009  0371  00D3               	movwf	___wmul@multiplicand
  6010  0372  3000               	movlw	0
  6011  0373  00D4               	movwf	___wmul@multiplicand+1
  6012  0374  158A  24FA  118A   	fcall	___wmul
  6013  0377  1283               	bcf	3,5	;RP0=0, select bank0
  6014  0378  1303               	bcf	3,6	;RP1=0, select bank0
  6015  0379  0852               	movf	?___wmul+1,w
  6016  037A  1683               	bsf	3,5	;RP0=1, select bank1
  6017  037B  1303               	bcf	3,6	;RP1=0, select bank1
  6018  037C  01E2               	clrf	((_Load+1)^(0+128)+23)
  6019  037D  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6020  037E  1283               	bcf	3,5	;RP0=0, select bank0
  6021  037F  1303               	bcf	3,6	;RP1=0, select bank0
  6022  0380  0851               	movf	?___wmul,w
  6023  0381  1683               	bsf	3,5	;RP0=1, select bank1
  6024  0382  1303               	bcf	3,6	;RP1=0, select bank1
  6025  0383  01E1               	clrf	(_Load^(0+128)+23)
  6026  0384  07E1               	addwf	(_Load^(0+128)+23),f
  6027                           
  6028                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6029  0385  2B94               	goto	l741
  6030  0386                     l5144:	
  6031  0386  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0387  085E               	movf	Load_Main@Load_RunStatus,w
  6033  0388  3A01               	xorlw	1
  6034  0389  1D03               	skipz
  6035  038A  2B94               	goto	l741
  6036                           
  6037                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(8*1.7) + Load.TotalLoad;
  6038  038B  1683               	bsf	3,5	;RP0=1, select bank1
  6039  038C  1303               	bcf	3,6	;RP1=0, select bank1
  6040  038D  0853               	movf	(_Load^(0+128)+9),w
  6041  038E  3E0D               	addlw	13
  6042  038F  00E1               	movwf	(_Load^(0+128)+23)
  6043  0390  3000               	movlw	0
  6044  0391  1803               	skipnc
  6045  0392  3001               	movlw	1
  6046  0393                     L15:	
  6047  0393  00E2               	movwf	(_Load^(0+128)+24)
  6048  0394                     l741:	
  6049                           
  6050                           ;OverLoad_B1.c: 135: }
  6051                           ;OverLoad_B1.c: 136: }
  6052                           ;OverLoad_B1.c: 137: }
  6053                           ;OverLoad_B1.c: 138: }
  6054                           ;OverLoad_B1.c: 139: }
  6055                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6056  0394  1683               	bsf	3,5	;RP0=1, select bank1
  6057  0395  1303               	bcf	3,6	;RP1=0, select bank1
  6058  0396  085E               	movf	(_Load^(0+128)+20),w
  6059  0397  1283               	bcf	3,5	;RP0=0, select bank0
  6060  0398  1303               	bcf	3,6	;RP1=0, select bank0
  6061  0399  00D8               	movwf	??_Load_Main
  6062  039A  01D9               	clrf	??_Load_Main+1
  6063  039B  1683               	bsf	3,5	;RP0=1, select bank1
  6064  039C  1303               	bcf	3,6	;RP1=0, select bank1
  6065  039D  0862               	movf	((_Load+1)^(0+128)+23),w
  6066  039E  1283               	bcf	3,5	;RP0=0, select bank0
  6067  039F  1303               	bcf	3,6	;RP1=0, select bank0
  6068  03A0  0259               	subwf	??_Load_Main+1,w
  6069  03A1  1D03               	skipz
  6070  03A2  2BA9               	goto	u6455
  6071  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  6072  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  6073  03A5  0861               	movf	(_Load^(0+128)+23),w
  6074  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6075  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6076  03A8  0258               	subwf	??_Load_Main,w
  6077  03A9                     u6455:	
  6078  03A9  1C03               	skipc
  6079  03AA  2BCA               	goto	l5162
  6080                           
  6081                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6082  03AB  085F               	movf	Load_Main@LightsCount,w
  6083  03AC  3A01               	xorlw	1
  6084  03AD  1903               	skipnz
  6085  03AE  2BB1               	goto	l5152
  6086  03AF  3003               	movlw	3
  6087  03B0  2BB2               	goto	L16
  6088  03B1                     l5152:	
  6089  03B1  3002               	movlw	2
  6090  03B2                     L16:	
  6091  03B2  00DB               	movwf	_Load_Main$2405
  6092  03B3  3000               	movlw	0
  6093  03B4  00DC               	movwf	_Load_Main$2405+1
  6094  03B5  085B               	movf	_Load_Main$2405,w
  6095  03B6  00D8               	movwf	??_Load_Main
  6096  03B7  0858               	movf	??_Load_Main,w
  6097  03B8  00DD               	movwf	Load_Main@ErrorCountValue
  6098                           
  6099                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6100  03B9  3001               	movlw	1
  6101  03BA  00D8               	movwf	??_Load_Main
  6102  03BB  0858               	movf	??_Load_Main,w
  6103  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6104  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6105  03BE  07E4               	addwf	(_Load^(0+128)+26),f
  6106                           
  6107                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6108  03BF  0864               	movf	(_Load^(0+128)+26),w
  6109  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  6110  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  6111  03C2  025D               	subwf	Load_Main@ErrorCountValue,w
  6112  03C3  1803               	skipnc
  6113  03C4  0008               	return
  6114                           
  6115                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6116  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  6117  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  6118  03C7  01E4               	clrf	(_Load^(0+128)+26)
  6119                           
  6120                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6121  03C8  16CA               	bsf	_Load^(0+128),5
  6122                           
  6123                           ;OverLoad_B1.c: 168: }
  6124                           ;OverLoad_B1.c: 169: } else {
  6125  03C9  0008               	return
  6126  03CA                     l5162:	
  6127                           
  6128                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6129  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  6130  03CB  1303               	bcf	3,6	;RP1=0, select bank1
  6131  03CC  01E4               	clrf	(_Load^(0+128)+26)
  6132                           
  6133                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6134  03CD  1DCA               	btfss	_Load^(0+128),3
  6135  03CE  0008               	return
  6136                           
  6137                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6138  03CF  3001               	movlw	1
  6139  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  6140  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  6141  03D2  00D8               	movwf	??_Load_Main
  6142  03D3  0858               	movf	??_Load_Main,w
  6143  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  6144  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  6145  03D6  07E5               	addwf	(_Load^(0+128)+27),f
  6146                           
  6147                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6148  03D7  3003               	movlw	3
  6149  03D8  0265               	subwf	(_Load^(0+128)+27),w
  6150  03D9  1C03               	skipc
  6151  03DA  0008               	return
  6152                           
  6153                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6154  03DB  01E5               	clrf	(_Load^(0+128)+27)
  6155                           
  6156                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6157  03DC  17CA               	bsf	_Load^(0+128),7
  6158                           
  6159                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6160  03DD  11CA               	bcf	_Load^(0+128),3
  6161                           
  6162                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6163  03DE  01E3               	clrf	(_Load^(0+128)+25)
  6164                           
  6165                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6166  03DF  085E               	movf	(_Load^(0+128)+20),w
  6167  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  6168  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  6169  03E2  00D8               	movwf	??_Load_Main
  6170  03E3  0858               	movf	??_Load_Main,w
  6171  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  6172  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  6173  03E6  00D3               	movwf	(_Load^(0+128)+9)
  6174                           
  6175                           ;OverLoad_B1.c: 182: }
  6176                           ;OverLoad_B1.c: 183: }
  6177                           ;OverLoad_B1.c: 206: }
  6178                           ;OverLoad_B1.c: 207: }
  6179                           ;OverLoad_B1.c: 208: }
  6180                           ;OverLoad_B1.c: 209: } else {
  6181  03E7  0008               	return
  6182  03E8                     l736:	
  6183                           
  6184                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6185  03E8  164A               	bsf	_Load^(0+128),4
  6186                           
  6187                           ;OverLoad_B1.c: 211: }
  6188                           ;OverLoad_B1.c: 212: } else {
  6189  03E9  0008               	return
  6190  03EA                     l735:	
  6191                           
  6192                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6193  03EA  1D4A               	btfss	_Load^(0+128),2
  6194  03EB  2BFE               	goto	l5198
  6195                           
  6196                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6197  03EC  114A               	bcf	_Load^(0+128),2
  6198                           
  6199                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6200  03ED  124A               	bcf	_Load^(0+128),4
  6201                           
  6202                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6203  03EE  01CB               	clrf	(_Load^(0+128)+1)
  6204  03EF  01CC               	clrf	((_Load+1)^(0+128)+1)
  6205                           
  6206                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6207  03F0  158A  23B3  118A   	fcall	_setLoad_AH_AL_Restore
  6208                           
  6209                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6210  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  6211  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  6212  03F5  01E4               	clrf	(_Load^(0+128)+26)
  6213                           
  6214                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6215  03F6  01E5               	clrf	(_Load^(0+128)+27)
  6216                           
  6217                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6218  03F7  01CF               	clrf	(_Load^(0+128)+5)
  6219  03F8  01D0               	clrf	((_Load+1)^(0+128)+5)
  6220                           
  6221                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6222  03F9  01D1               	clrf	(_Load^(0+128)+7)
  6223  03FA  01D2               	clrf	((_Load+1)^(0+128)+7)
  6224                           
  6225                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6226  03FB  11CA               	bcf	_Load^(0+128),3
  6227                           
  6228                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6229  03FC  01E3               	clrf	(_Load^(0+128)+25)
  6230                           
  6231                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6232  03FD  13CA               	bcf	_Load^(0+128),7
  6233  03FE                     l5198:	
  6234                           
  6235                           ;OverLoad_B1.c: 255: }
  6236                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6237  03FE  1ECA               	btfss	_Load^(0+128),5
  6238  03FF  0008               	return
  6239                           
  6240                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6241  0400  3001               	movlw	1
  6242  0401  07CD               	addwf	(_Load^(0+128)+3),f
  6243  0402  1803               	skipnc
  6244  0403  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6245  0404  3000               	movlw	0
  6246  0405  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6247                           
  6248                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6249  0406  3001               	movlw	1
  6250  0407  024E               	subwf	((_Load+1)^(0+128)+3),w
  6251  0408  30F4               	movlw	244
  6252  0409  1903               	skipnz
  6253  040A  024D               	subwf	(_Load^(0+128)+3),w
  6254  040B  1C03               	skipc
  6255  040C  0008               	return
  6256                           
  6257                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6258  040D  01CD               	clrf	(_Load^(0+128)+3)
  6259  040E  01CE               	clrf	((_Load+1)^(0+128)+3)
  6260                           
  6261                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6262  040F  12CA               	bcf	_Load^(0+128),5
  6263                           
  6264                           ;OverLoad_B1.c: 261: }
  6265                           ;OverLoad_B1.c: 262: }
  6266                           ;OverLoad_B1.c: 263: }
  6267                           ;OverLoad_B1.c: 264: } else {
  6268  0410  0008               	return
  6269  0411                     l725:	
  6270                           
  6271                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6272  0411  1283               	bcf	3,5	;RP0=0, select bank0
  6273  0412  1303               	bcf	3,6	;RP1=0, select bank0
  6274  0413  1C25               	btfss	_myMain,0
  6275  0414  0008               	return
  6276                           
  6277                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6278  0415  1683               	bsf	3,5	;RP0=1, select bank1
  6279  0416  1303               	bcf	3,6	;RP1=0, select bank1
  6280  0417  144A               	bsf	_Load^(0+128),0
  6281  0418  0008               	return
  6282  0419                     __end_of_Load_Main:	
  6283                           
  6284                           	psect	text30
  6285  0AED                     __ptext30:	
  6286 ;; *************** function _getMain_Lights_Count *****************
  6287 ;; Defined at:
  6288 ;;		line 459 in file "../src/Main_B1.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  status1         1    5[COMMON] unsigned char 
  6293 ;;  count           1    4[COMMON] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      unsigned char 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6303 ;;      Params:         0       0       0       0
  6304 ;;      Locals:         2       0       0       0
  6305 ;;      Temps:          0       0       0       0
  6306 ;;      Totals:         2       0       0       0
  6307 ;;Total ram usage:        2 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    2
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_Load_Main
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           
  6318                           ;psect for function _getMain_Lights_Count
  6319  0AED                     _getMain_Lights_Count:	
  6320                           
  6321                           ;Main_B1.c: 460: char count = 0;
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6325  0AED  01F4               	clrf	getMain_Lights_Count@count
  6326                           
  6327                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6328  0AEE  3000               	movlw	0
  6329  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  6330  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  6331  0AF1  1940               	btfsc	_Lights1,2
  6332  0AF2  3001               	movlw	1
  6333  0AF3  00F5               	movwf	getMain_Lights_Count@status1
  6334                           
  6335                           ;Main_B1.c: 487: return count = status1;
  6336  0AF4  0875               	movf	getMain_Lights_Count@status1,w
  6337  0AF5  00F4               	movwf	getMain_Lights_Count@count
  6338  0AF6  0008               	return
  6339  0AF7                     __end_of_getMain_Lights_Count:	
  6340                           
  6341                           	psect	text31
  6342  0AA8                     __ptext31:	
  6343 ;; *************** function _getLight_Load_Status *****************
  6344 ;; Defined at:
  6345 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;		None
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  loadstatus      1    4[COMMON] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      unsigned char 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6359 ;;      Params:         0       0       0       0
  6360 ;;      Locals:         1       0       0       0
  6361 ;;      Temps:          0       0       0       0
  6362 ;;      Totals:         1       0       0       0
  6363 ;;Total ram usage:        1 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    2
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_Load_Main
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function _getLight_Load_Status
  6375  0AA8                     _getLight_Load_Status:	
  6376                           
  6377                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6378                           
  6379                           ;incstack = 0
  6380                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6381  0AA8  3000               	movlw	0
  6382  0AA9  18F7               	btfsc	_Light,1
  6383  0AAA  3001               	movlw	1
  6384  0AAB  00F4               	movwf	getLight_Load_Status@loadstatus
  6385                           
  6386                           ;TriacRelay_B1.c: 407: return loadstatus;
  6387  0AAC  0874               	movf	getLight_Load_Status@loadstatus,w
  6388  0AAD  0008               	return
  6389  0AAE                     __end_of_getLight_Load_Status:	
  6390                           
  6391                           	psect	text32
  6392  0AA2                     __ptext32:	
  6393 ;; *************** function _getLight_LoadGO *****************
  6394 ;; Defined at:
  6395 ;;		line 400 in file "../src/TriacRelay_B1.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;		None
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  loadgo          1    4[COMMON] unsigned char 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      unsigned char 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6409 ;;      Params:         0       0       0       0
  6410 ;;      Locals:         1       0       0       0
  6411 ;;      Temps:          0       0       0       0
  6412 ;;      Totals:         1       0       0       0
  6413 ;;Total ram usage:        1 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    2
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_Load_Main
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _getLight_LoadGO
  6425  0AA2                     _getLight_LoadGO:	
  6426                           
  6427                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6428                           
  6429                           ;incstack = 0
  6430                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6431  0AA2  3000               	movlw	0
  6432  0AA3  1877               	btfsc	_Light,0
  6433  0AA4  3001               	movlw	1
  6434  0AA5  00F4               	movwf	getLight_LoadGO@loadgo
  6435                           
  6436                           ;TriacRelay_B1.c: 402: return loadgo;
  6437  0AA6  0874               	movf	getLight_LoadGO@loadgo,w
  6438  0AA7  0008               	return
  6439  0AA8                     __end_of_getLight_LoadGO:	
  6440                           
  6441                           	psect	text33
  6442  0CFA                     __ptext33:	
  6443 ;; *************** function ___wmul *****************
  6444 ;; Defined at:
  6445 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6448 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  product         2    4[COMMON] unsigned int 
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  2    0[BANK0 ] unsigned int 
  6453 ;; Registers used:
  6454 ;;		wreg, status,2, status,0
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6460 ;;      Params:         0       4       0       0
  6461 ;;      Locals:         2       0       0       0
  6462 ;;      Temps:          0       0       0       0
  6463 ;;      Totals:         2       4       0       0
  6464 ;;Total ram usage:        6 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    2
  6467 ;; This function calls:
  6468 ;;		Nothing
  6469 ;; This function is called by:
  6470 ;;		_Load_Main
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           
  6475                           ;psect for function ___wmul
  6476  0CFA                     ___wmul:	
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6480  0CFA  01F4               	clrf	___wmul@product
  6481  0CFB  01F5               	clrf	___wmul@product+1
  6482  0CFC                     l4846:	
  6483  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  6484  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  6485  0CFE  1C51               	btfss	___wmul@multiplier,0
  6486  0CFF  2D06               	goto	l1427
  6487  0D00  0853               	movf	___wmul@multiplicand,w
  6488  0D01  07F4               	addwf	___wmul@product,f
  6489  0D02  1803               	skipnc
  6490  0D03  0AF5               	incf	___wmul@product+1,f
  6491  0D04  0854               	movf	___wmul@multiplicand+1,w
  6492  0D05  07F5               	addwf	___wmul@product+1,f
  6493  0D06                     l1427:	
  6494  0D06  3001               	movlw	1
  6495  0D07                     u5795:	
  6496  0D07  1003               	clrc
  6497  0D08  0DD3               	rlf	___wmul@multiplicand,f
  6498  0D09  0DD4               	rlf	___wmul@multiplicand+1,f
  6499  0D0A  3EFF               	addlw	-1
  6500  0D0B  1D03               	skipz
  6501  0D0C  2D07               	goto	u5795
  6502  0D0D  3001               	movlw	1
  6503  0D0E                     u5805:	
  6504  0D0E  1003               	clrc
  6505  0D0F  0CD2               	rrf	___wmul@multiplier+1,f
  6506  0D10  0CD1               	rrf	___wmul@multiplier,f
  6507  0D11  3EFF               	addlw	-1
  6508  0D12  1D03               	skipz
  6509  0D13  2D0E               	goto	u5805
  6510  0D14  0852               	movf	___wmul@multiplier+1,w
  6511  0D15  0451               	iorwf	___wmul@multiplier,w
  6512  0D16  1D03               	skipz
  6513  0D17  2CFC               	goto	l4846
  6514  0D18  0875               	movf	___wmul@product+1,w
  6515  0D19  01D2               	clrf	?___wmul+1
  6516  0D1A  07D2               	addwf	?___wmul+1,f
  6517  0D1B  0874               	movf	___wmul@product,w
  6518  0D1C  01D1               	clrf	?___wmul
  6519  0D1D  07D1               	addwf	?___wmul,f
  6520  0D1E  0008               	return
  6521  0D1F                     __end_of___wmul:	
  6522                           
  6523                           	psect	text34
  6524  0DEC                     __ptext34:	
  6525 ;; *************** function ___lwdiv *****************
  6526 ;; Defined at:
  6527 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;  divisor         2    0[BANK0 ] unsigned int 
  6530 ;;  dividend        2    2[BANK0 ] unsigned int 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  quotient        2    5[BANK0 ] unsigned int 
  6533 ;;  counter         1    4[BANK0 ] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  2    0[BANK0 ] unsigned int 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6543 ;;      Params:         0       4       0       0
  6544 ;;      Locals:         0       3       0       0
  6545 ;;      Temps:          1       0       0       0
  6546 ;;      Totals:         1       7       0       0
  6547 ;;Total ram usage:        8 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    2
  6550 ;; This function calls:
  6551 ;;		Nothing
  6552 ;; This function is called by:
  6553 ;;		_Load_Main
  6554 ;;		_getPIR_AD
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           
  6559                           ;psect for function ___lwdiv
  6560  0DEC                     ___lwdiv:	
  6561                           
  6562                           ;incstack = 0
  6563                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6564  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  6565  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  6566  0DEE  01D6               	clrf	___lwdiv@quotient
  6567  0DEF  01D7               	clrf	___lwdiv@quotient+1
  6568  0DF0  0852               	movf	___lwdiv@divisor+1,w
  6569  0DF1  0451               	iorwf	___lwdiv@divisor,w
  6570  0DF2  1903               	skipnz
  6571  0DF3  2E25               	goto	l4878
  6572  0DF4  01D5               	clrf	___lwdiv@counter
  6573  0DF5  0AD5               	incf	___lwdiv@counter,f
  6574  0DF6                     l4866:	
  6575  0DF6  1BD2               	btfsc	___lwdiv@divisor+1,7
  6576  0DF7  2E04               	goto	l4868
  6577  0DF8  3001               	movlw	1
  6578  0DF9                     u5835:	
  6579  0DF9  1003               	clrc
  6580  0DFA  0DD1               	rlf	___lwdiv@divisor,f
  6581  0DFB  0DD2               	rlf	___lwdiv@divisor+1,f
  6582  0DFC  3EFF               	addlw	-1
  6583  0DFD  1D03               	skipz
  6584  0DFE  2DF9               	goto	u5835
  6585  0DFF  3001               	movlw	1
  6586  0E00  00F4               	movwf	??___lwdiv
  6587  0E01  0874               	movf	??___lwdiv,w
  6588  0E02  07D5               	addwf	___lwdiv@counter,f
  6589  0E03  2DF6               	goto	l4866
  6590  0E04                     l4868:	
  6591  0E04  3001               	movlw	1
  6592  0E05                     u5855:	
  6593  0E05  1003               	clrc
  6594  0E06  0DD6               	rlf	___lwdiv@quotient,f
  6595  0E07  0DD7               	rlf	___lwdiv@quotient+1,f
  6596  0E08  3EFF               	addlw	-1
  6597  0E09  1D03               	skipz
  6598  0E0A  2E05               	goto	u5855
  6599  0E0B  0852               	movf	___lwdiv@divisor+1,w
  6600  0E0C  0254               	subwf	___lwdiv@dividend+1,w
  6601  0E0D  1D03               	skipz
  6602  0E0E  2E11               	goto	u5865
  6603  0E0F  0851               	movf	___lwdiv@divisor,w
  6604  0E10  0253               	subwf	___lwdiv@dividend,w
  6605  0E11                     u5865:	
  6606  0E11  1C03               	skipc
  6607  0E12  2E1A               	goto	l4874
  6608  0E13  0851               	movf	___lwdiv@divisor,w
  6609  0E14  02D3               	subwf	___lwdiv@dividend,f
  6610  0E15  0852               	movf	___lwdiv@divisor+1,w
  6611  0E16  1C03               	skipc
  6612  0E17  03D4               	decf	___lwdiv@dividend+1,f
  6613  0E18  02D4               	subwf	___lwdiv@dividend+1,f
  6614  0E19  1456               	bsf	___lwdiv@quotient,0
  6615  0E1A                     l4874:	
  6616  0E1A  3001               	movlw	1
  6617  0E1B                     u5875:	
  6618  0E1B  1003               	clrc
  6619  0E1C  0CD2               	rrf	___lwdiv@divisor+1,f
  6620  0E1D  0CD1               	rrf	___lwdiv@divisor,f
  6621  0E1E  3EFF               	addlw	-1
  6622  0E1F  1D03               	skipz
  6623  0E20  2E1B               	goto	u5875
  6624  0E21  3001               	movlw	1
  6625  0E22  02D5               	subwf	___lwdiv@counter,f
  6626  0E23  1D03               	btfss	3,2
  6627  0E24  2E04               	goto	l4868
  6628  0E25                     l4878:	
  6629  0E25  0857               	movf	___lwdiv@quotient+1,w
  6630  0E26  01D2               	clrf	?___lwdiv+1
  6631  0E27  07D2               	addwf	?___lwdiv+1,f
  6632  0E28  0856               	movf	___lwdiv@quotient,w
  6633  0E29  01D1               	clrf	?___lwdiv
  6634  0E2A  07D1               	addwf	?___lwdiv,f
  6635  0E2B  0008               	return
  6636  0E2C                     __end_of___lwdiv:	
  6637                           
  6638                           	psect	text35
  6639  0A82                     __ptext35:	
  6640 ;; *************** function _Load_Initialization *****************
  6641 ;; Defined at:
  6642 ;;		line 9 in file "../src/OverLoad_B1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;		None               void
  6649 ;; Registers used:
  6650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6656 ;;      Params:         0       0       0       0
  6657 ;;      Locals:         0       0       0       0
  6658 ;;      Temps:          0       0       0       0
  6659 ;;      Totals:         0       0       0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    3
  6663 ;; This function calls:
  6664 ;;		_setLoad_AH_AL_Restore
  6665 ;; This function is called by:
  6666 ;;		_main
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function _Load_Initialization
  6672  0A82                     _Load_Initialization:	
  6673                           
  6674                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6678  0A82  158A  23B3         	fcall	_setLoad_AH_AL_Restore
  6679  0A84  0008               	return
  6680  0A85                     __end_of_Load_Initialization:	
  6681                           
  6682                           	psect	text36
  6683  0BB3                     __ptext36:	
  6684 ;; *************** function _setLoad_AH_AL_Restore *****************
  6685 ;; Defined at:
  6686 ;;		line 292 in file "../src/OverLoad_B1.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  i               1    5[COMMON] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;		None               void
  6693 ;; Registers used:
  6694 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6700 ;;      Params:         0       0       0       0
  6701 ;;      Locals:         1       0       0       0
  6702 ;;      Temps:          1       0       0       0
  6703 ;;      Totals:         2       0       0       0
  6704 ;;Total ram usage:        2 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    2
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_Load_Initialization
  6711 ;;		_Load_Main
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           
  6716                           ;psect for function _setLoad_AH_AL_Restore
  6717  0BB3                     _setLoad_AH_AL_Restore:	
  6718                           
  6719                           ;OverLoad_B1.c: 293: char i;
  6720                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  6721                           
  6722                           ;incstack = 0
  6723                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6724  0BB3  01F5               	clrf	setLoad_AH_AL_Restore@i
  6725  0BB4                     L17:	
  6726  0BB4  3005               	movlw	5
  6727  0BB5  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6728  0BB6  1803               	btfsc	3,0
  6729  0BB7  0008               	return
  6730                           
  6731                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  6732  0BB8  0875               	movf	setLoad_AH_AL_Restore@i,w
  6733  0BB9  3ED4               	addlw	(_Load+10)& (0+255)
  6734  0BBA  0084               	movwf	4
  6735  0BBB  1383               	bcf	3,7	;select IRP bank1
  6736  0BBC  0180               	clrf	0
  6737                           
  6738                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  6739  0BBD  30FF               	movlw	255
  6740  0BBE  00F4               	movwf	??_setLoad_AH_AL_Restore
  6741  0BBF  0875               	movf	setLoad_AH_AL_Restore@i,w
  6742  0BC0  3ED9               	addlw	(_Load+15)& (0+255)
  6743  0BC1  0084               	movwf	4
  6744  0BC2  0874               	movf	??_setLoad_AH_AL_Restore,w
  6745  0BC3  0080               	movwf	0
  6746  0BC4  3001               	movlw	1
  6747  0BC5  00F4               	movwf	??_setLoad_AH_AL_Restore
  6748  0BC6  0874               	movf	??_setLoad_AH_AL_Restore,w
  6749  0BC7  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6750  0BC8  2BB4               	goto	L17
  6751  0BC9                     __end_of_setLoad_AH_AL_Restore:	
  6752                           
  6753                           	psect	text37
  6754  0C95                     __ptext37:	
  6755 ;; *************** function _Lights_Main *****************
  6756 ;; Defined at:
  6757 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;		None
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;		None
  6762 ;; Return value:  Size  Location     Type
  6763 ;;		None               void
  6764 ;; Registers used:
  6765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6771 ;;      Params:         0       0       0       0
  6772 ;;      Locals:         0       0       0       0
  6773 ;;      Temps:          0       0       0       0
  6774 ;;      Totals:         0       0       0       0
  6775 ;;Total ram usage:        0 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    6
  6778 ;; This function calls:
  6779 ;;		_Lights_Control
  6780 ;;		_getLoad_OK
  6781 ;;		_getMain_All_Error_Status
  6782 ;;		_getMain_All_LightsStatus
  6783 ;;		_setLights_Main
  6784 ;; This function is called by:
  6785 ;;		_main
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           
  6790                           ;psect for function _Lights_Main
  6791  0C95                     _Lights_Main:	
  6792                           
  6793                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6794                           
  6795                           ;incstack = 0
  6796                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6797  0C95  1C77               	btfss	_Light,0
  6798  0C96  2CAB               	goto	l5216
  6799                           
  6800                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6801  0C97  158A  22C2  158A   	fcall	_getLoad_OK
  6802  0C9A  3A01               	xorlw	1
  6803  0C9B  1903               	skipnz
  6804  0C9C  2CAA               	goto	l1304
  6805  0C9D  3000               	movlw	0
  6806  0C9E  158A  25AE  158A   	fcall	_getMain_All_Error_Status
  6807  0CA1  3800               	iorlw	0
  6808  0CA2  1D03               	skipz
  6809  0CA3  2CAA               	goto	l1304
  6810  0CA4  118A  27F7  158A   	fcall	_getMain_All_LightsStatus
  6811  0CA7  3800               	iorlw	0
  6812  0CA8  1D03               	skipz
  6813  0CA9  2CAB               	goto	l5216
  6814  0CAA                     l1304:	
  6815                           
  6816                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6817  0CAA  1077               	bcf	_Light,0
  6818  0CAB                     l5216:	
  6819                           
  6820                           ;TriacRelay_B1.c: 68: }
  6821                           ;TriacRelay_B1.c: 69: }
  6822                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6823  0CAB  3001               	movlw	1
  6824  0CAC  158A  254A  158A   	fcall	_setLights_Main
  6825                           
  6826                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6827  0CAF  3001               	movlw	1
  6828  0CB0  118A  2609         	fcall	_Lights_Control
  6829  0CB2  0008               	return
  6830  0CB3                     __end_of_Lights_Main:	
  6831                           
  6832                           	psect	text38
  6833  0D4A                     __ptext38:	
  6834 ;; *************** function _setLights_Main *****************
  6835 ;; Defined at:
  6836 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;  lights          1    wreg     unsigned char 
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;  lights          1    5[BANK0 ] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;		None               void
  6843 ;; Registers used:
  6844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6850 ;;      Params:         0       0       0       0
  6851 ;;      Locals:         0       1       0       0
  6852 ;;      Temps:          0       0       0       0
  6853 ;;      Totals:         0       1       0       0
  6854 ;;Total ram usage:        1 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    5
  6857 ;; This function calls:
  6858 ;;		_LightsPointSelect
  6859 ;;		_getLights_Allow_Condition
  6860 ;;		_setLights
  6861 ;; This function is called by:
  6862 ;;		_Lights_Main
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           
  6867                           ;psect for function _setLights_Main
  6868  0D4A                     _setLights_Main:	
  6869                           
  6870                           ;incstack = 0
  6871                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6872                           ;setLights_Main@lights stored from wreg
  6873  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6874  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6875  0D4C  00D6               	movwf	setLights_Main@lights
  6876                           
  6877                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6878  0D4D  0856               	movf	setLights_Main@lights,w
  6879  0D4E  158A  22E3  158A   	fcall	_LightsPointSelect
  6880                           
  6881                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6882  0D51  0878               	movf	_Lights,w
  6883  0D52  0084               	movwf	4
  6884  0D53  1383               	bcf	3,7	;select IRP bank0
  6885  0D54  1880               	btfsc	0,1
  6886  0D55  0008               	return
  6887                           
  6888                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6889  0D56  0878               	movf	_Lights,w
  6890  0D57  0084               	movwf	4
  6891  0D58  1D80               	btfss	0,3
  6892  0D59  0008               	return
  6893                           
  6894                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6895  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6896  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6897  0D5C  0856               	movf	setLights_Main@lights,w
  6898  0D5D  158A  23C9  158A   	fcall	_getLights_Allow_Condition
  6899  0D60  3800               	iorlw	0
  6900  0D61  1D03               	skipz
  6901  0D62  0008               	return
  6902                           
  6903                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6904  0D63  0878               	movf	_Lights,w
  6905  0D64  0084               	movwf	4
  6906  0D65  1383               	bcf	3,7	;select IRP bank0
  6907  0D66  1180               	bcf	0,3
  6908                           
  6909                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6910  0D67  0878               	movf	_Lights,w
  6911  0D68  0084               	movwf	4
  6912  0D69  1E00               	btfss	0,4
  6913  0D6A  2D73               	goto	l4814
  6914                           
  6915                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6916  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  6917  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  6918  0D6D  01D3               	clrf	setLights@status
  6919  0D6E  0AD3               	incf	setLights@status,f
  6920  0D6F  0856               	movf	setLights_Main@lights,w
  6921  0D70  118A  268C         	fcall	_setLights
  6922                           
  6923                           ;TriacRelay_B1.c: 99: } else {
  6924  0D72  0008               	return
  6925  0D73                     l4814:	
  6926                           
  6927                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6928  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  6929  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  6930  0D75  01D3               	clrf	setLights@status
  6931  0D76  0856               	movf	setLights_Main@lights,w
  6932  0D77  118A  268C         	fcall	_setLights
  6933  0D79  0008               	return
  6934  0D7A                     __end_of_setLights_Main:	
  6935                           
  6936                           	psect	text39
  6937  068C                     __ptext39:	
  6938 ;; *************** function _setLights *****************
  6939 ;; Defined at:
  6940 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  lights          1    wreg     unsigned char 
  6943 ;;  status          1    2[BANK0 ] unsigned char 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  lights          1    4[BANK0 ] unsigned char 
  6946 ;; Return value:  Size  Location     Type
  6947 ;;		None               void
  6948 ;; Registers used:
  6949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6955 ;;      Params:         0       1       0       0
  6956 ;;      Locals:         0       1       0       0
  6957 ;;      Temps:          0       1       0       0
  6958 ;;      Totals:         0       3       0       0
  6959 ;;Total ram usage:        3 bytes
  6960 ;; Hardware stack levels used:    1
  6961 ;; Hardware stack levels required when called:    4
  6962 ;; This function calls:
  6963 ;;		_setLED
  6964 ;;		_setLights_Line
  6965 ;; This function is called by:
  6966 ;;		_setLights_Main
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           
  6971                           ;psect for function _setLights
  6972  068C                     _setLights:	
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6976                           ;setLights@lights stored from wreg
  6977  068C  1283               	bcf	3,5	;RP0=0, select bank0
  6978  068D  1303               	bcf	3,6	;RP1=0, select bank0
  6979  068E  00D5               	movwf	setLights@lights
  6980                           
  6981                           ;TriacRelay_B1.c: 116: if (status == 1) {
  6982  068F  0853               	movf	setLights@status,w
  6983  0690  3A01               	xorlw	1
  6984  0691  1D03               	skipz
  6985  0692  2ECF               	goto	l4646
  6986                           
  6987                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  6988  0693  0855               	movf	setLights@lights,w
  6989  0694  3A02               	xorlw	2
  6990  0695  1D03               	skipz
  6991  0696  2EA4               	goto	l4628
  6992                           
  6993                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  6994  0697  01D1               	clrf	setLED@command
  6995  0698  3001               	movlw	1
  6996  0699  158A  278F  118A   	fcall	_setLED
  6997                           
  6998                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  6999  069C  1283               	bcf	3,5	;RP0=0, select bank0
  7000  069D  1303               	bcf	3,6	;RP1=0, select bank0
  7001  069E  01D1               	clrf	setLED@command
  7002  069F  0AD1               	incf	setLED@command,f
  7003  06A0  3002               	movlw	2
  7004  06A1  158A  278F  118A   	fcall	_setLED
  7005  06A4                     l4628:	
  7006                           
  7007                           ;TriacRelay_B1.c: 121: }
  7008                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7009  06A4  0878               	movf	_Lights,w
  7010  06A5  0084               	movwf	4
  7011  06A6  1383               	bcf	3,7	;select IRP bank0
  7012  06A7  1900               	btfsc	0,2
  7013  06A8  2EC8               	goto	l4642
  7014                           
  7015                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7016  06A9  0878               	movf	_Lights,w
  7017  06AA  0084               	movwf	4
  7018  06AB  1500               	bsf	0,2
  7019                           
  7020                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7021  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  7022  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  7023  06AE  0855               	movf	setLights@lights,w
  7024  06AF  3A01               	xorlw	1
  7025  06B0  1D03               	skipz
  7026  06B1  2EC8               	goto	l4642
  7027                           
  7028                           ;TriacRelay_B1.c: 131: RB2 = 1;
  7029  06B2  1506               	bsf	6,2	;volatile
  7030                           
  7031                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7032  06B3  3064               	movlw	100
  7033  06B4  00D4               	movwf	??_setLights
  7034  06B5  0878               	movf	_Lights,w
  7035  06B6  3E04               	addlw	4
  7036  06B7  0084               	movwf	4
  7037  06B8  0854               	movf	??_setLights,w
  7038  06B9  0080               	movwf	0
  7039                           
  7040                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7041  06BA  308C               	movlw	140
  7042  06BB  00D4               	movwf	??_setLights
  7043  06BC  0878               	movf	_Lights,w
  7044  06BD  3E03               	addlw	3
  7045  06BE  0084               	movwf	4
  7046  06BF  0854               	movf	??_setLights,w
  7047  06C0  0080               	movwf	0
  7048                           
  7049                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7050  06C1  0878               	movf	_Lights,w
  7051  06C2  3E02               	addlw	2
  7052  06C3  0084               	movwf	4
  7053  06C4  0180               	clrf	0
  7054                           
  7055                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7056  06C5  0878               	movf	_Lights,w
  7057  06C6  0084               	movwf	4
  7058  06C7  1480               	bsf	0,1
  7059  06C8                     l4642:	
  7060                           
  7061                           ;TriacRelay_B1.c: 136: }
  7062                           ;TriacRelay_B1.c: 162: }
  7063                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7064  06C8  14F7               	bsf	_Light,1
  7065                           
  7066                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7067  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  7068  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  7069  06CB  0855               	movf	setLights@lights,w
  7070  06CC  158A  231C         	fcall	_setLights_Line
  7071                           
  7072                           ;TriacRelay_B1.c: 167: } else {
  7073  06CE  0008               	return
  7074  06CF                     l4646:	
  7075                           
  7076                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7077  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  7078  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  7079  06D1  0855               	movf	setLights@lights,w
  7080  06D2  3A02               	xorlw	2
  7081  06D3  1D03               	skipz
  7082  06D4  2EE2               	goto	l4650
  7083                           
  7084                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7085  06D5  01D1               	clrf	setLED@command
  7086  06D6  0AD1               	incf	setLED@command,f
  7087  06D7  3001               	movlw	1
  7088  06D8  158A  278F  118A   	fcall	_setLED
  7089                           
  7090                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7091  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  7092  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  7093  06DD  01D1               	clrf	setLED@command
  7094  06DE  3002               	movlw	2
  7095  06DF  158A  278F  118A   	fcall	_setLED
  7096  06E2                     l4650:	
  7097                           
  7098                           ;TriacRelay_B1.c: 173: }
  7099                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7100  06E2  0878               	movf	_Lights,w
  7101  06E3  0084               	movwf	4
  7102  06E4  1383               	bcf	3,7	;select IRP bank0
  7103  06E5  1D00               	btfss	0,2
  7104  06E6  2F06               	goto	l4664
  7105                           
  7106                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7107  06E7  0878               	movf	_Lights,w
  7108  06E8  0084               	movwf	4
  7109  06E9  1100               	bcf	0,2
  7110                           
  7111                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7112  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  7113  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  7114  06EC  0855               	movf	setLights@lights,w
  7115  06ED  3A01               	xorlw	1
  7116  06EE  1D03               	skipz
  7117  06EF  2F06               	goto	l4664
  7118                           
  7119                           ;TriacRelay_B1.c: 179: RB2 = 1;
  7120  06F0  1506               	bsf	6,2	;volatile
  7121                           
  7122                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7123  06F1  3028               	movlw	40
  7124  06F2  00D4               	movwf	??_setLights
  7125  06F3  0878               	movf	_Lights,w
  7126  06F4  3E04               	addlw	4
  7127  06F5  0084               	movwf	4
  7128  06F6  0854               	movf	??_setLights,w
  7129  06F7  0080               	movwf	0
  7130                           
  7131                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7132  06F8  3050               	movlw	80
  7133  06F9  00D4               	movwf	??_setLights
  7134  06FA  0878               	movf	_Lights,w
  7135  06FB  3E03               	addlw	3
  7136  06FC  0084               	movwf	4
  7137  06FD  0854               	movf	??_setLights,w
  7138  06FE  0080               	movwf	0
  7139                           
  7140                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7141  06FF  0878               	movf	_Lights,w
  7142  0700  3E02               	addlw	2
  7143  0701  0084               	movwf	4
  7144  0702  0180               	clrf	0
  7145                           
  7146                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7147  0703  0878               	movf	_Lights,w
  7148  0704  0084               	movwf	4
  7149  0705  1480               	bsf	0,1
  7150  0706                     l4664:	
  7151                           
  7152                           ;TriacRelay_B1.c: 184: }
  7153                           ;TriacRelay_B1.c: 211: }
  7154                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7155  0706  10F7               	bcf	_Light,1
  7156                           
  7157                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7158  0707  3000               	movlw	0
  7159  0708  158A  231C         	fcall	_setLights_Line
  7160  070A  0008               	return
  7161  070B                     __end_of_setLights:	
  7162                           
  7163                           	psect	text40
  7164  0B1C                     __ptext40:	
  7165 ;; *************** function _setLights_Line *****************
  7166 ;; Defined at:
  7167 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  lights          1    wreg     unsigned char 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  lights          1    4[COMMON] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;		None               void
  7174 ;; Registers used:
  7175 ;;		wreg
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7181 ;;      Params:         0       0       0       0
  7182 ;;      Locals:         1       0       0       0
  7183 ;;      Temps:          0       0       0       0
  7184 ;;      Totals:         1       0       0       0
  7185 ;;Total ram usage:        1 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    2
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_setLights
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           
  7196                           ;psect for function _setLights_Line
  7197  0B1C                     _setLights_Line:	
  7198                           
  7199                           ;incstack = 0
  7200                           ; Regs used in _setLights_Line: [wreg]
  7201                           ;setLights_Line@lights stored from wreg
  7202  0B1C  00F4               	movwf	setLights_Line@lights
  7203                           
  7204                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7205  0B1D  1477               	bsf	_Light,0
  7206                           
  7207                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7208  0B1E  1283               	bcf	3,5	;RP0=0, select bank0
  7209  0B1F  1303               	bcf	3,6	;RP1=0, select bank0
  7210  0B20  1041               	bcf	_Lights1+1,0
  7211                           
  7212                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7213  0B21  0874               	movf	setLights_Line@lights,w
  7214  0B22  3A01               	xorlw	1
  7215  0B23  1D03               	skipz
  7216  0B24  0008               	return
  7217  0B25  0874               	movf	setLights_Line@lights,w
  7218  0B26  1903               	btfsc	3,2
  7219  0B27  0008               	return
  7220                           
  7221                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7222  0B28  1441               	bsf	_Lights1+1,0
  7223  0B29  0008               	return
  7224  0B2A                     __end_of_setLights_Line:	
  7225                           
  7226                           	psect	text41
  7227  0BC9                     __ptext41:	
  7228 ;; *************** function _getLights_Allow_Condition *****************
  7229 ;; Defined at:
  7230 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  lights          1    wreg     unsigned char 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;  lights          1    0[COMMON] unsigned char 
  7235 ;;  allow           1    0[BANK0 ] unsigned char 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      unsigned char 
  7238 ;; Registers used:
  7239 ;;		wreg, status,2, pclath, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7245 ;;      Params:         0       0       0       0
  7246 ;;      Locals:         0       2       0       0
  7247 ;;      Temps:          1       0       0       0
  7248 ;;      Totals:         1       2       0       0
  7249 ;;Total ram usage:        3 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    3
  7252 ;; This function calls:
  7253 ;;		_getLoad_OK
  7254 ;; This function is called by:
  7255 ;;		_setLights_Main
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _getLights_Allow_Condition
  7261  0BC9                     _getLights_Allow_Condition:	
  7262                           
  7263                           ;TriacRelay_B1.c: 368: char allow = 0;
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7267  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  7268  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  7269  0BCB  01D1               	clrf	getLights_Allow_Condition@allow
  7270                           
  7271                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7272  0BCC  01D2               	clrf	_getLights_Allow_Condition$4248
  7273  0BCD  0AD2               	incf	_getLights_Allow_Condition$4248,f
  7274  0BCE  158A  22C2  158A   	fcall	_getLoad_OK
  7275  0BD1  3800               	iorlw	0
  7276  0BD2  1903               	btfsc	3,2
  7277  0BD3  1877               	btfsc	_Light,0
  7278  0BD4  2BD8               	goto	l4616
  7279  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  7280  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  7281  0BD7  01D2               	clrf	_getLights_Allow_Condition$4248
  7282  0BD8                     l4616:	
  7283  0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  7284  0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  7285  0BDA  0852               	movf	_getLights_Allow_Condition$4248,w
  7286  0BDB  00F5               	movwf	??_getLights_Allow_Condition
  7287  0BDC  0875               	movf	??_getLights_Allow_Condition,w
  7288  0BDD  00D1               	movwf	getLights_Allow_Condition@allow
  7289                           
  7290                           ;TriacRelay_B1.c: 396: return allow;
  7291  0BDE  0851               	movf	getLights_Allow_Condition@allow,w
  7292  0BDF  0008               	return
  7293  0BE0                     __end_of_getLights_Allow_Condition:	
  7294                           
  7295                           	psect	text42
  7296  0AC2                     __ptext42:	
  7297 ;; *************** function _getLoad_OK *****************
  7298 ;; Defined at:
  7299 ;;		line 272 in file "../src/OverLoad_B1.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;		None
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  ok              1    4[COMMON] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      unsigned char 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7313 ;;      Params:         0       0       0       0
  7314 ;;      Locals:         1       0       0       0
  7315 ;;      Temps:          0       0       0       0
  7316 ;;      Totals:         1       0       0       0
  7317 ;;Total ram usage:        1 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    2
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_Lights_Main
  7324 ;;		_getLights_Allow_Condition
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           
  7329                           ;psect for function _getLoad_OK
  7330  0AC2                     _getLoad_OK:	
  7331                           
  7332                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  7333                           
  7334                           ;incstack = 0
  7335                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7336  0AC2  3000               	movlw	0
  7337  0AC3  1683               	bsf	3,5	;RP0=1, select bank1
  7338  0AC4  1303               	bcf	3,6	;RP1=0, select bank1
  7339  0AC5  1BCA               	btfsc	_Load^(0+128),7
  7340  0AC6  3001               	movlw	1
  7341  0AC7  00F4               	movwf	getLoad_OK@ok
  7342                           
  7343                           ;OverLoad_B1.c: 274: return ok;
  7344  0AC8  0874               	movf	getLoad_OK@ok,w
  7345  0AC9  0008               	return
  7346  0ACA                     __end_of_getLoad_OK:	
  7347                           
  7348                           	psect	text43
  7349  0609                     __ptext43:	
  7350 ;; *************** function _Lights_Control *****************
  7351 ;; Defined at:
  7352 ;;		line 220 in file "../src/TriacRelay_B1.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  lights          1    wreg     unsigned char 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  lights          1   10[BANK0 ] unsigned char 
  7357 ;; Return value:  Size  Location     Type
  7358 ;;		None               void
  7359 ;; Registers used:
  7360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7366 ;;      Params:         0       0       0       0
  7367 ;;      Locals:         0       1       0       0
  7368 ;;      Temps:          0       2       0       0
  7369 ;;      Totals:         0       3       0       0
  7370 ;;Total ram usage:        3 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    3
  7373 ;; This function calls:
  7374 ;;		_LightsPointSelect
  7375 ;;		___awdiv
  7376 ;; This function is called by:
  7377 ;;		_Lights_Main
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           
  7382                           ;psect for function _Lights_Control
  7383  0609                     _Lights_Control:	
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7387                           ;Lights_Control@lights stored from wreg
  7388  0609  1283               	bcf	3,5	;RP0=0, select bank0
  7389  060A  1303               	bcf	3,6	;RP1=0, select bank0
  7390  060B  00DB               	movwf	Lights_Control@lights
  7391                           
  7392                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  7393  060C  085B               	movf	Lights_Control@lights,w
  7394  060D  158A  22E3  118A   	fcall	_LightsPointSelect
  7395                           
  7396                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  7397  0610  0878               	movf	_Lights,w
  7398  0611  0084               	movwf	4
  7399  0612  1383               	bcf	3,7	;select IRP bank0
  7400  0613  1C80               	btfss	0,1
  7401  0614  0008               	return
  7402                           
  7403                           ;TriacRelay_B1.c: 223: Lights->Time++;
  7404  0615  3001               	movlw	1
  7405  0616  1283               	bcf	3,5	;RP0=0, select bank0
  7406  0617  1303               	bcf	3,6	;RP1=0, select bank0
  7407  0618  00D9               	movwf	??_Lights_Control
  7408  0619  0878               	movf	_Lights,w
  7409  061A  3E02               	addlw	2
  7410  061B  0084               	movwf	4
  7411  061C  0859               	movf	??_Lights_Control,w
  7412  061D  0780               	addwf	0,f
  7413                           
  7414                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  7415  061E  0878               	movf	_Lights,w
  7416  061F  0084               	movwf	4
  7417  0620  1B80               	btfsc	0,7
  7418  0621  2E58               	goto	l4832
  7419                           
  7420                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7421  0622  3014               	movlw	20
  7422  0623  00D1               	movwf	___awdiv@divisor
  7423  0624  3000               	movlw	0
  7424  0625  00D2               	movwf	___awdiv@divisor+1
  7425  0626  0878               	movf	_Lights,w
  7426  0627  3E04               	addlw	4
  7427  0628  0084               	movwf	4
  7428  0629  0800               	movf	0,w
  7429  062A  00D9               	movwf	??_Lights_Control
  7430  062B  01DA               	clrf	??_Lights_Control+1
  7431  062C  0859               	movf	??_Lights_Control,w
  7432  062D  00D3               	movwf	___awdiv@dividend
  7433  062E  085A               	movf	??_Lights_Control+1,w
  7434  062F  00D4               	movwf	___awdiv@dividend+1
  7435  0630  158A  26CC  118A   	fcall	___awdiv
  7436  0633  0878               	movf	_Lights,w
  7437  0634  3E02               	addlw	2
  7438  0635  0084               	movwf	4
  7439  0636  1283               	bcf	3,5	;RP0=0, select bank0
  7440  0637  1303               	bcf	3,6	;RP1=0, select bank0
  7441  0638  0852               	movf	?___awdiv+1,w
  7442  0639  3A80               	xorlw	128
  7443  063A  3C80               	sublw	128
  7444  063B  1D03               	skipz
  7445  063C  2E40               	goto	u5725
  7446  063D  0851               	movf	?___awdiv,w
  7447  063E  1383               	bcf	3,7	;select IRP bank0
  7448  063F  0200               	subwf	0,w
  7449  0640                     u5725:	
  7450  0640  1C03               	skipc
  7451  0641  0008               	return
  7452                           
  7453                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  7454  0642  0878               	movf	_Lights,w
  7455  0643  0084               	movwf	4
  7456  0644  1383               	bcf	3,7	;select IRP bank0
  7457  0645  1780               	bsf	0,7
  7458                           
  7459                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  7460  0646  1283               	bcf	3,5	;RP0=0, select bank0
  7461  0647  1303               	bcf	3,6	;RP1=0, select bank0
  7462  0648  085B               	movf	Lights_Control@lights,w
  7463  0649  3A01               	xorlw	1
  7464  064A  1D03               	skipz
  7465  064B  0008               	return
  7466                           
  7467                           ;TriacRelay_B1.c: 229: RA4 = Lights->Status == 1 ? 1 : 0;
  7468  064C  0878               	movf	_Lights,w
  7469  064D  0084               	movwf	4
  7470  064E  1D00               	btfss	0,2
  7471  064F  2E54               	goto	u5740
  7472  0650  1283               	bcf	3,5	;RP0=0, select bank0
  7473  0651  1303               	bcf	3,6	;RP1=0, select bank0
  7474  0652  1605               	bsf	5,4	;volatile
  7475  0653  0008               	return
  7476  0654                     u5740:	
  7477  0654  1283               	bcf	3,5	;RP0=0, select bank0
  7478  0655  1303               	bcf	3,6	;RP1=0, select bank0
  7479  0656  1205               	bcf	5,4	;volatile
  7480                           
  7481                           ;TriacRelay_B1.c: 230: }
  7482                           ;TriacRelay_B1.c: 242: }
  7483                           ;TriacRelay_B1.c: 243: } else {
  7484  0657  0008               	return
  7485  0658                     l4832:	
  7486                           
  7487                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7488  0658  3014               	movlw	20
  7489  0659  00D1               	movwf	___awdiv@divisor
  7490  065A  3000               	movlw	0
  7491  065B  00D2               	movwf	___awdiv@divisor+1
  7492  065C  0878               	movf	_Lights,w
  7493  065D  3E03               	addlw	3
  7494  065E  0084               	movwf	4
  7495  065F  1383               	bcf	3,7	;select IRP bank0
  7496  0660  0800               	movf	0,w
  7497  0661  00D9               	movwf	??_Lights_Control
  7498  0662  01DA               	clrf	??_Lights_Control+1
  7499  0663  0859               	movf	??_Lights_Control,w
  7500  0664  00D3               	movwf	___awdiv@dividend
  7501  0665  085A               	movf	??_Lights_Control+1,w
  7502  0666  00D4               	movwf	___awdiv@dividend+1
  7503  0667  158A  26CC  118A   	fcall	___awdiv
  7504  066A  0878               	movf	_Lights,w
  7505  066B  3E02               	addlw	2
  7506  066C  0084               	movwf	4
  7507  066D  1283               	bcf	3,5	;RP0=0, select bank0
  7508  066E  1303               	bcf	3,6	;RP1=0, select bank0
  7509  066F  0852               	movf	?___awdiv+1,w
  7510  0670  3A80               	xorlw	128
  7511  0671  3C80               	sublw	128
  7512  0672  1D03               	skipz
  7513  0673  2E77               	goto	u5765
  7514  0674  0851               	movf	?___awdiv,w
  7515  0675  1383               	bcf	3,7	;select IRP bank0
  7516  0676  0200               	subwf	0,w
  7517  0677                     u5765:	
  7518  0677  1C03               	skipc
  7519  0678  0008               	return
  7520                           
  7521                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  7522  0679  0878               	movf	_Lights,w
  7523  067A  3E02               	addlw	2
  7524  067B  0084               	movwf	4
  7525  067C  1383               	bcf	3,7	;select IRP bank0
  7526  067D  0180               	clrf	0
  7527                           
  7528                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  7529  067E  0878               	movf	_Lights,w
  7530  067F  0084               	movwf	4
  7531  0680  1080               	bcf	0,1
  7532                           
  7533                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  7534  0681  0878               	movf	_Lights,w
  7535  0682  0084               	movwf	4
  7536  0683  1380               	bcf	0,7
  7537                           
  7538                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  7539  0684  1283               	bcf	3,5	;RP0=0, select bank0
  7540  0685  1303               	bcf	3,6	;RP1=0, select bank0
  7541  0686  085B               	movf	Lights_Control@lights,w
  7542  0687  3A01               	xorlw	1
  7543  0688  1D03               	skipz
  7544  0689  0008               	return
  7545                           
  7546                           ;TriacRelay_B1.c: 251: RB2 = 0;
  7547  068A  1106               	bcf	6,2	;volatile
  7548  068B  0008               	return
  7549  068C                     __end_of_Lights_Control:	
  7550                           
  7551                           	psect	text44
  7552  0ECC                     __ptext44:	
  7553 ;; *************** function ___awdiv *****************
  7554 ;; Defined at:
  7555 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;  divisor         2    0[BANK0 ] int 
  7558 ;;  dividend        2    2[BANK0 ] int 
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  quotient        2    6[BANK0 ] int 
  7561 ;;  sign            1    5[BANK0 ] unsigned char 
  7562 ;;  counter         1    4[BANK0 ] unsigned char 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  2    0[BANK0 ] int 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7572 ;;      Params:         0       4       0       0
  7573 ;;      Locals:         0       4       0       0
  7574 ;;      Temps:          1       0       0       0
  7575 ;;      Totals:         1       8       0       0
  7576 ;;Total ram usage:        9 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    2
  7579 ;; This function calls:
  7580 ;;		Nothing
  7581 ;; This function is called by:
  7582 ;;		_getPIR_AD
  7583 ;;		_Lights_Control
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           
  7588                           ;psect for function ___awdiv
  7589  0ECC                     ___awdiv:	
  7590                           
  7591                           ;incstack = 0
  7592                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7593  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7594  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  7595  0ECE  01D6               	clrf	___awdiv@sign
  7596  0ECF  1FD2               	btfss	___awdiv@divisor+1,7
  7597  0ED0  2ED8               	goto	l4682
  7598  0ED1  09D1               	comf	___awdiv@divisor,f
  7599  0ED2  09D2               	comf	___awdiv@divisor+1,f
  7600  0ED3  0AD1               	incf	___awdiv@divisor,f
  7601  0ED4  1903               	skipnz
  7602  0ED5  0AD2               	incf	___awdiv@divisor+1,f
  7603  0ED6  01D6               	clrf	___awdiv@sign
  7604  0ED7  0AD6               	incf	___awdiv@sign,f
  7605  0ED8                     l4682:	
  7606  0ED8  1FD4               	btfss	___awdiv@dividend+1,7
  7607  0ED9  2EE3               	goto	l4688
  7608  0EDA  09D3               	comf	___awdiv@dividend,f
  7609  0EDB  09D4               	comf	___awdiv@dividend+1,f
  7610  0EDC  0AD3               	incf	___awdiv@dividend,f
  7611  0EDD  1903               	skipnz
  7612  0EDE  0AD4               	incf	___awdiv@dividend+1,f
  7613  0EDF  3001               	movlw	1
  7614  0EE0  00F4               	movwf	??___awdiv
  7615  0EE1  0874               	movf	??___awdiv,w
  7616  0EE2  06D6               	xorwf	___awdiv@sign,f
  7617  0EE3                     l4688:	
  7618  0EE3  01D7               	clrf	___awdiv@quotient
  7619  0EE4  01D8               	clrf	___awdiv@quotient+1
  7620  0EE5  0852               	movf	___awdiv@divisor+1,w
  7621  0EE6  0451               	iorwf	___awdiv@divisor,w
  7622  0EE7  1903               	skipnz
  7623  0EE8  2F1A               	goto	l4710
  7624  0EE9  01D5               	clrf	___awdiv@counter
  7625  0EEA  0AD5               	incf	___awdiv@counter,f
  7626  0EEB                     l4698:	
  7627  0EEB  1BD2               	btfsc	___awdiv@divisor+1,7
  7628  0EEC  2EF9               	goto	l4700
  7629  0EED  3001               	movlw	1
  7630  0EEE                     u5425:	
  7631  0EEE  1003               	clrc
  7632  0EEF  0DD1               	rlf	___awdiv@divisor,f
  7633  0EF0  0DD2               	rlf	___awdiv@divisor+1,f
  7634  0EF1  3EFF               	addlw	-1
  7635  0EF2  1D03               	skipz
  7636  0EF3  2EEE               	goto	u5425
  7637  0EF4  3001               	movlw	1
  7638  0EF5  00F4               	movwf	??___awdiv
  7639  0EF6  0874               	movf	??___awdiv,w
  7640  0EF7  07D5               	addwf	___awdiv@counter,f
  7641  0EF8  2EEB               	goto	l4698
  7642  0EF9                     l4700:	
  7643  0EF9  3001               	movlw	1
  7644  0EFA                     u5445:	
  7645  0EFA  1003               	clrc
  7646  0EFB  0DD7               	rlf	___awdiv@quotient,f
  7647  0EFC  0DD8               	rlf	___awdiv@quotient+1,f
  7648  0EFD  3EFF               	addlw	-1
  7649  0EFE  1D03               	skipz
  7650  0EFF  2EFA               	goto	u5445
  7651  0F00  0852               	movf	___awdiv@divisor+1,w
  7652  0F01  0254               	subwf	___awdiv@dividend+1,w
  7653  0F02  1D03               	skipz
  7654  0F03  2F06               	goto	u5455
  7655  0F04  0851               	movf	___awdiv@divisor,w
  7656  0F05  0253               	subwf	___awdiv@dividend,w
  7657  0F06                     u5455:	
  7658  0F06  1C03               	skipc
  7659  0F07  2F0F               	goto	l4706
  7660  0F08  0851               	movf	___awdiv@divisor,w
  7661  0F09  02D3               	subwf	___awdiv@dividend,f
  7662  0F0A  0852               	movf	___awdiv@divisor+1,w
  7663  0F0B  1C03               	skipc
  7664  0F0C  03D4               	decf	___awdiv@dividend+1,f
  7665  0F0D  02D4               	subwf	___awdiv@dividend+1,f
  7666  0F0E  1457               	bsf	___awdiv@quotient,0
  7667  0F0F                     l4706:	
  7668  0F0F  3001               	movlw	1
  7669  0F10                     u5465:	
  7670  0F10  1003               	clrc
  7671  0F11  0CD2               	rrf	___awdiv@divisor+1,f
  7672  0F12  0CD1               	rrf	___awdiv@divisor,f
  7673  0F13  3EFF               	addlw	-1
  7674  0F14  1D03               	skipz
  7675  0F15  2F10               	goto	u5465
  7676  0F16  3001               	movlw	1
  7677  0F17  02D5               	subwf	___awdiv@counter,f
  7678  0F18  1D03               	btfss	3,2
  7679  0F19  2EF9               	goto	l4700
  7680  0F1A                     l4710:	
  7681  0F1A  0856               	movf	___awdiv@sign,w
  7682  0F1B  1903               	btfsc	3,2
  7683  0F1C  2F22               	goto	l4714
  7684  0F1D  09D7               	comf	___awdiv@quotient,f
  7685  0F1E  09D8               	comf	___awdiv@quotient+1,f
  7686  0F1F  0AD7               	incf	___awdiv@quotient,f
  7687  0F20  1903               	skipnz
  7688  0F21  0AD8               	incf	___awdiv@quotient+1,f
  7689  0F22                     l4714:	
  7690  0F22  0858               	movf	___awdiv@quotient+1,w
  7691  0F23  01D2               	clrf	?___awdiv+1
  7692  0F24  07D2               	addwf	?___awdiv+1,f
  7693  0F25  0857               	movf	___awdiv@quotient,w
  7694  0F26  01D1               	clrf	?___awdiv
  7695  0F27  07D1               	addwf	?___awdiv,f
  7696  0F28  0008               	return
  7697  0F29                     __end_of___awdiv:	
  7698                           
  7699                           	psect	text45
  7700  0A95                     __ptext45:	
  7701 ;; *************** function _Lights_Initialization *****************
  7702 ;; Defined at:
  7703 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;		None
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;		None
  7708 ;; Return value:  Size  Location     Type
  7709 ;;		None               void
  7710 ;; Registers used:
  7711 ;;		wreg, status,2, status,0, pclath, cstack
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7717 ;;      Params:         0       0       0       0
  7718 ;;      Locals:         0       0       0       0
  7719 ;;      Temps:          0       0       0       0
  7720 ;;      Totals:         0       0       0       0
  7721 ;;Total ram usage:        0 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; Hardware stack levels required when called:    4
  7724 ;; This function calls:
  7725 ;;		_setLights_Initialization
  7726 ;; This function is called by:
  7727 ;;		_main
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           
  7732                           ;psect for function _Lights_Initialization
  7733  0A95                     _Lights_Initialization:	
  7734                           
  7735                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7739  0A95  3001               	movlw	1
  7740  0A96  158A  22B4         	fcall	_setLights_Initialization
  7741  0A98  0008               	return
  7742  0A99                     __end_of_Lights_Initialization:	
  7743                           
  7744                           	psect	text46
  7745  0AB4                     __ptext46:	
  7746 ;; *************** function _setLights_Initialization *****************
  7747 ;; Defined at:
  7748 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  lights          1    wreg     unsigned char 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  lights          1    0[BANK0 ] unsigned char 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;		None               void
  7755 ;; Registers used:
  7756 ;;		wreg, status,2, status,0, pclath, cstack
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7762 ;;      Params:         0       0       0       0
  7763 ;;      Locals:         0       1       0       0
  7764 ;;      Temps:          0       0       0       0
  7765 ;;      Totals:         0       1       0       0
  7766 ;;Total ram usage:        1 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    3
  7769 ;; This function calls:
  7770 ;;		_LightsPointSelect
  7771 ;; This function is called by:
  7772 ;;		_Lights_Initialization
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           
  7777                           ;psect for function _setLights_Initialization
  7778  0AB4                     _setLights_Initialization:	
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7782                           ;setLights_Initialization@lights stored from wreg
  7783  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  7784  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  7785  0AB6  00D1               	movwf	setLights_Initialization@lights
  7786                           
  7787                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7788  0AB7  0851               	movf	setLights_Initialization@lights,w
  7789  0AB8  158A  22E3         	fcall	_LightsPointSelect
  7790  0ABA  0008               	return
  7791  0ABB                     __end_of_setLights_Initialization:	
  7792                           
  7793                           	psect	text47
  7794  0A7F                     __ptext47:	
  7795 ;; *************** function _LED_Main *****************
  7796 ;; Defined at:
  7797 ;;		line 47 in file "../src/LED_B1.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;		None
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;		None
  7802 ;; Return value:  Size  Location     Type
  7803 ;;		None               void
  7804 ;; Registers used:
  7805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7811 ;;      Params:         0       0       0       0
  7812 ;;      Locals:         0       0       0       0
  7813 ;;      Temps:          0       0       0       0
  7814 ;;      Totals:         0       0       0       0
  7815 ;;Total ram usage:        0 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    5
  7818 ;; This function calls:
  7819 ;;		_setPIRLED_Main
  7820 ;; This function is called by:
  7821 ;;		_main
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           
  7826                           ;psect for function _LED_Main
  7827  0A7F                     _LED_Main:	
  7828                           
  7829                           ;LED_B1.c: 55: setPIRLED_Main();
  7830                           
  7831                           ;incstack = 0
  7832                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7833  0A7F  118A  2786         	fcall	_setPIRLED_Main
  7834  0A81  0008               	return
  7835  0A82                     __end_of_LED_Main:	
  7836                           
  7837                           	psect	text48
  7838  0786                     __ptext48:	
  7839 ;; *************** function _setPIRLED_Main *****************
  7840 ;; Defined at:
  7841 ;;		line 265 in file "../src/LED_B1.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;		None
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  count           1    3[BANK0 ] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;		None               void
  7848 ;; Registers used:
  7849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7855 ;;      Params:         0       0       0       0
  7856 ;;      Locals:         0       1       0       0
  7857 ;;      Temps:          0       1       0       0
  7858 ;;      Totals:         0       2       0       0
  7859 ;;Total ram usage:        2 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    4
  7862 ;; This function calls:
  7863 ;;		_setLED
  7864 ;; This function is called by:
  7865 ;;		_LED_Main
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function _setPIRLED_Main
  7871  0786                     _setPIRLED_Main:	
  7872                           
  7873                           ;LED_B1.c: 267: char count;
  7874                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  7875                           
  7876                           ;incstack = 0
  7877                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7878  0786  1283               	bcf	3,5	;RP0=0, select bank0
  7879  0787  1303               	bcf	3,6	;RP1=0, select bank0
  7880  0788  1C2A               	btfss	_PIRLED,0
  7881  0789  0008               	return
  7882                           
  7883                           ;LED_B1.c: 269: PIRLED.Time++;
  7884  078A  3001               	movlw	1
  7885  078B  07AC               	addwf	_PIRLED+2,f
  7886  078C  1803               	skipnc
  7887  078D  0AAD               	incf	_PIRLED+3,f
  7888  078E  3000               	movlw	0
  7889  078F  07AD               	addwf	_PIRLED+3,f
  7890                           
  7891                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  7892  0790  3000               	movlw	0
  7893  0791  022D               	subwf	_PIRLED+3,w
  7894  0792  3019               	movlw	25
  7895  0793  1903               	skipnz
  7896  0794  022C               	subwf	_PIRLED+2,w
  7897  0795  1C03               	skipc
  7898  0796  0008               	return
  7899                           
  7900                           ;LED_B1.c: 271: PIRLED.Time = 0;
  7901  0797  01AC               	clrf	_PIRLED+2
  7902  0798  01AD               	clrf	_PIRLED+3
  7903                           
  7904                           ;LED_B1.c: 272: setLED(1, 0);
  7905  0799  01D1               	clrf	setLED@command
  7906  079A  3001               	movlw	1
  7907  079B  158A  278F  118A   	fcall	_setLED
  7908                           
  7909                           ;LED_B1.c: 273: setLED(2, 0);
  7910  079E  1283               	bcf	3,5	;RP0=0, select bank0
  7911  079F  1303               	bcf	3,6	;RP1=0, select bank0
  7912  07A0  01D1               	clrf	setLED@command
  7913  07A1  3002               	movlw	2
  7914  07A2  158A  278F  118A   	fcall	_setLED
  7915                           
  7916                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  7917  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  7918  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  7919  07A7  1CAA               	btfss	_PIRLED,1
  7920  07A8  2FAD               	goto	l4754
  7921                           
  7922                           ;LED_B1.c: 275: count = 4;
  7923  07A9  3004               	movlw	4
  7924  07AA  00D3               	movwf	??_setPIRLED_Main
  7925  07AB  0853               	movf	??_setPIRLED_Main,w
  7926  07AC  00D4               	movwf	setPIRLED_Main@count
  7927  07AD                     l4754:	
  7928                           
  7929                           ;LED_B1.c: 276: }
  7930                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  7931  07AD  1D2A               	btfss	_PIRLED,2
  7932  07AE  2FB3               	goto	l4758
  7933                           
  7934                           ;LED_B1.c: 278: count = 6;
  7935  07AF  3006               	movlw	6
  7936  07B0  00D3               	movwf	??_setPIRLED_Main
  7937  07B1  0853               	movf	??_setPIRLED_Main,w
  7938  07B2  00D4               	movwf	setPIRLED_Main@count
  7939  07B3                     l4758:	
  7940                           
  7941                           ;LED_B1.c: 279: }
  7942                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  7943  07B3  1DAA               	btfss	_PIRLED,3
  7944  07B4  2FB9               	goto	l4762
  7945                           
  7946                           ;LED_B1.c: 281: count = 8;
  7947  07B5  3008               	movlw	8
  7948  07B6  00D3               	movwf	??_setPIRLED_Main
  7949  07B7  0853               	movf	??_setPIRLED_Main,w
  7950  07B8  00D4               	movwf	setPIRLED_Main@count
  7951  07B9                     l4762:	
  7952                           
  7953                           ;LED_B1.c: 282: }
  7954                           ;LED_B1.c: 283: PIRLED.Count++;
  7955  07B9  3001               	movlw	1
  7956  07BA  00D3               	movwf	??_setPIRLED_Main
  7957  07BB  0853               	movf	??_setPIRLED_Main,w
  7958  07BC  07AB               	addwf	_PIRLED+1,f
  7959                           
  7960                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7961  07BD  082B               	movf	_PIRLED+1,w
  7962  07BE  3A01               	xorlw	1
  7963  07BF  1903               	skipnz
  7964  07C0  2FC5               	goto	l4768
  7965  07C1  082B               	movf	_PIRLED+1,w
  7966  07C2  3A02               	xorlw	2
  7967  07C3  1D03               	skipz
  7968  07C4  2FD9               	goto	l4772
  7969  07C5                     l4768:	
  7970                           
  7971                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7972  07C5  1003               	clrc
  7973  07C6  1E2A               	btfss	_PIRLED,4
  7974  07C7  1403               	setc
  7975  07C8  1C03               	btfss	3,0
  7976  07C9  2FCE               	goto	u5580
  7977  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  7978  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  7979  07CC  162A               	bsf	_PIRLED,4
  7980  07CD  2FD1               	goto	l4770
  7981  07CE                     u5580:	
  7982  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  7983  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  7984  07D0  122A               	bcf	_PIRLED,4
  7985  07D1                     l4770:	
  7986                           
  7987                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  7988  07D1  3000               	movlw	0
  7989  07D2  1A2A               	btfsc	_PIRLED,4
  7990  07D3  3001               	movlw	1
  7991  07D4  00D1               	movwf	setLED@command
  7992  07D5  3002               	movlw	2
  7993  07D6  158A  278F         	fcall	_setLED
  7994                           
  7995                           ;LED_B1.c: 287: } else {
  7996  07D8  0008               	return
  7997  07D9                     l4772:	
  7998                           
  7999                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8000  07D9  1003               	clrc
  8001  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  8002  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  8003  07DC  1E2A               	btfss	_PIRLED,4
  8004  07DD  1403               	setc
  8005  07DE  1C03               	btfss	3,0
  8006  07DF  2FE4               	goto	u5600
  8007  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  8008  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  8009  07E2  162A               	bsf	_PIRLED,4
  8010  07E3  2FE7               	goto	l4774
  8011  07E4                     u5600:	
  8012  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  8013  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  8014  07E6  122A               	bcf	_PIRLED,4
  8015  07E7                     l4774:	
  8016                           
  8017                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8018  07E7  3000               	movlw	0
  8019  07E8  1A2A               	btfsc	_PIRLED,4
  8020  07E9  3001               	movlw	1
  8021  07EA  00D1               	movwf	setLED@command
  8022  07EB  3001               	movlw	1
  8023  07EC  158A  278F  118A   	fcall	_setLED
  8024                           
  8025                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8026  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  8027  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  8028  07F1  082B               	movf	_PIRLED+1,w
  8029  07F2  0654               	xorwf	setPIRLED_Main@count,w
  8030  07F3  1D03               	skipz
  8031  07F4  0008               	return
  8032                           
  8033                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8034  07F5  01AB               	clrf	_PIRLED+1
  8035  07F6  0008               	return
  8036  07F7                     __end_of_setPIRLED_Main:	
  8037                           
  8038                           	psect	text49
  8039  0B02                     __ptext49:	
  8040 ;; *************** function _LED_Initialization *****************
  8041 ;; Defined at:
  8042 ;;		line 31 in file "../src/LED_B1.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;		None
  8045 ;; Auto vars:     Size  Location     Type
  8046 ;;		None
  8047 ;; Return value:  Size  Location     Type
  8048 ;;		None               void
  8049 ;; Registers used:
  8050 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8051 ;; Tracked objects:
  8052 ;;		On entry : 0/0
  8053 ;;		On exit  : 0/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8056 ;;      Params:         0       0       0       0
  8057 ;;      Locals:         0       0       0       0
  8058 ;;      Temps:          0       0       0       0
  8059 ;;      Totals:         0       0       0       0
  8060 ;;Total ram usage:        0 bytes
  8061 ;; Hardware stack levels used:    1
  8062 ;; Hardware stack levels required when called:    5
  8063 ;; This function calls:
  8064 ;;		_setLED_Initialization
  8065 ;; This function is called by:
  8066 ;;		_main
  8067 ;; This function uses a non-reentrant model
  8068 ;;
  8069                           
  8070                           
  8071                           ;psect for function _LED_Initialization
  8072  0B02                     _LED_Initialization:	
  8073                           
  8074                           ;LED_B1.c: 33: setLED_Initialization(1);
  8075                           
  8076                           ;incstack = 0
  8077                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8078  0B02  3001               	movlw	1
  8079  0B03  158A  2377  158A   	fcall	_setLED_Initialization
  8080                           
  8081                           ;LED_B1.c: 36: setLED_Initialization(2);
  8082  0B06  3002               	movlw	2
  8083  0B07  158A  2377  158A   	fcall	_setLED_Initialization
  8084                           
  8085                           ;LED_B1.c: 42: setLED_Initialization(99);
  8086  0B0A  3063               	movlw	99
  8087  0B0B  158A  2377         	fcall	_setLED_Initialization
  8088  0B0D  0008               	return
  8089  0B0E                     __end_of_LED_Initialization:	
  8090                           
  8091                           	psect	text50
  8092  0B77                     __ptext50:	
  8093 ;; *************** function _setLED_Initialization *****************
  8094 ;; Defined at:
  8095 ;;		line 74 in file "../src/LED_B1.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  led             1    wreg     unsigned char 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  led             1    2[BANK0 ] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;		None               void
  8102 ;; Registers used:
  8103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8109 ;;      Params:         0       0       0       0
  8110 ;;      Locals:         0       1       0       0
  8111 ;;      Temps:          0       0       0       0
  8112 ;;      Totals:         0       1       0       0
  8113 ;;Total ram usage:        1 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    4
  8116 ;; This function calls:
  8117 ;;		_LedPointSelect
  8118 ;;		_setLED
  8119 ;; This function is called by:
  8120 ;;		_LED_Initialization
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           
  8125                           ;psect for function _setLED_Initialization
  8126  0B77                     _setLED_Initialization:	
  8127                           
  8128                           ;incstack = 0
  8129                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8130                           ;setLED_Initialization@led stored from wreg
  8131  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  8132  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  8133  0B79  00D3               	movwf	setLED_Initialization@led
  8134                           
  8135                           ;LED_B1.c: 75: LedPointSelect(led);
  8136  0B7A  0853               	movf	setLED_Initialization@led,w
  8137  0B7B  158A  2410  158A   	fcall	_LedPointSelect
  8138                           
  8139                           ;LED_B1.c: 76: LED->Enable = 1;
  8140  0B7E  0876               	movf	_LED,w
  8141  0B7F  0084               	movwf	4
  8142  0B80  1383               	bcf	3,7	;select IRP bank0
  8143  0B81  1400               	bsf	0,0
  8144                           
  8145                           ;LED_B1.c: 77: setLED(led, 0);
  8146  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  8147  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  8148  0B84  01D1               	clrf	setLED@command
  8149  0B85  0853               	movf	setLED_Initialization@led,w
  8150  0B86  158A  278F         	fcall	_setLED
  8151  0B88  0008               	return
  8152  0B89                     __end_of_setLED_Initialization:	
  8153                           
  8154                           	psect	text51
  8155  0547                     __ptext51:	
  8156 ;; *************** function _Exception_Main *****************
  8157 ;; Defined at:
  8158 ;;		line 499 in file "../src/Main_B1.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  i               2   12[BANK0 ] int 
  8163 ;;  i               2   10[BANK0 ] int 
  8164 ;;  error           1   14[BANK0 ] unsigned char 
  8165 ;;  status          1    9[BANK0 ] unsigned char 
  8166 ;;  count           1    8[BANK0 ] unsigned char 
  8167 ;;  lights          1    7[BANK0 ] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;		None               void
  8170 ;; Registers used:
  8171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8177 ;;      Params:         0       0       0       0
  8178 ;;      Locals:         0       8       0       0
  8179 ;;      Temps:          0       1       0       0
  8180 ;;      Totals:         0       9       0       0
  8181 ;;Total ram usage:        9 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    5
  8184 ;; This function calls:
  8185 ;;		_getAll_Lights_Line
  8186 ;;		_getLights_Status
  8187 ;;		_getMain_All_Error_Status
  8188 ;;		_getMain_All_LightsStatus
  8189 ;;		_setLED
  8190 ;;		_setLights_SwOff
  8191 ;;		_setLights_SwOn
  8192 ;; This function is called by:
  8193 ;;		_main
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           
  8198                           ;psect for function _Exception_Main
  8199  0547                     _Exception_Main:	
  8200                           
  8201                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8202                           
  8203                           ;incstack = 0
  8204                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8205  0547  3000               	movlw	0
  8206  0548  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  8207  054B  1283               	bcf	3,5	;RP0=0, select bank0
  8208  054C  1303               	bcf	3,6	;RP1=0, select bank0
  8209  054D  00D7               	movwf	??_Exception_Main
  8210  054E  0857               	movf	??_Exception_Main,w
  8211  054F  00DF               	movwf	Exception_Main@error
  8212                           
  8213                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8214  0550  01D8               	clrf	Exception_Main@lights
  8215  0551  01D9               	clrf	Exception_Main@count
  8216  0552  0AD9               	incf	Exception_Main@count,f
  8217                           
  8218                           ;Main_B1.c: 502: char status = 0;
  8219  0553  01DA               	clrf	Exception_Main@status
  8220                           
  8221                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8222  0554  1DA7               	btfss	_myMain+2,3
  8223  0555  2D62               	goto	l5388
  8224                           
  8225                           ;Main_B1.c: 505: if (error == 0) {
  8226  0556  08DF               	movf	Exception_Main@error,f
  8227  0557  1D03               	skipz
  8228  0558  0008               	return
  8229                           
  8230                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8231  0559  11A7               	bcf	_myMain+2,3
  8232                           
  8233                           ;Main_B1.c: 511: setLED(error, 110);
  8234  055A  306E               	movlw	110
  8235  055B  00D7               	movwf	??_Exception_Main
  8236  055C  0857               	movf	??_Exception_Main,w
  8237  055D  00D1               	movwf	setLED@command
  8238  055E  085F               	movf	Exception_Main@error,w
  8239  055F  158A  278F         	fcall	_setLED
  8240                           
  8241                           ;Main_B1.c: 522: }
  8242                           ;Main_B1.c: 523: } else {
  8243  0561  0008               	return
  8244  0562                     l5388:	
  8245                           
  8246                           ;Main_B1.c: 524: if (error != 0) {
  8247  0562  1283               	bcf	3,5	;RP0=0, select bank0
  8248  0563  1303               	bcf	3,6	;RP1=0, select bank0
  8249  0564  085F               	movf	Exception_Main@error,w
  8250  0565  1903               	btfsc	3,2
  8251  0566  0008               	return
  8252                           
  8253                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8254  0567  15A7               	bsf	_myMain+2,3
  8255                           
  8256                           ;Main_B1.c: 529: setLED(error, 111);
  8257  0568  306F               	movlw	111
  8258  0569  00D7               	movwf	??_Exception_Main
  8259  056A  0857               	movf	??_Exception_Main,w
  8260  056B  00D1               	movwf	setLED@command
  8261  056C  085F               	movf	Exception_Main@error,w
  8262  056D  158A  278F  118A   	fcall	_setLED
  8263                           
  8264                           ;Main_B1.c: 591: switch (error) {
  8265  0570  2DFA               	goto	l5424
  8266  0571                     l5394:	
  8267                           ;Main_B1.c: 592: case 1:
  8268                           
  8269                           
  8270                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8271  0571  1283               	bcf	3,5	;RP0=0, select bank0
  8272  0572  1303               	bcf	3,6	;RP1=0, select bank0
  8273  0573  01DB               	clrf	Exception_Main@i
  8274  0574  01DC               	clrf	Exception_Main@i+1
  8275  0575                     l5402:	
  8276  0575  085C               	movf	Exception_Main@i+1,w
  8277  0576  3A80               	xorlw	128
  8278  0577  00D7               	movwf	??_Exception_Main
  8279  0578  3080               	movlw	128
  8280  0579  0257               	subwf	??_Exception_Main,w
  8281  057A  1D03               	skipz
  8282  057B  2D7E               	goto	u7005
  8283  057C  0859               	movf	Exception_Main@count,w
  8284  057D  025B               	subwf	Exception_Main@i,w
  8285  057E                     u7005:	
  8286  057E  1803               	btfsc	3,0
  8287  057F  2DA1               	goto	u7000
  8288                           
  8289                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8290  0580  1283               	bcf	3,5	;RP0=0, select bank0
  8291  0581  1303               	bcf	3,6	;RP1=0, select bank0
  8292  0582  085B               	movf	Exception_Main@i,w
  8293  0583  3E01               	addlw	1
  8294  0584  158A  2355  118A   	fcall	_getLights_Status
  8295  0587  3A01               	xorlw	1
  8296  0588  1D03               	skipz
  8297  0589  2D98               	goto	l5400
  8298                           
  8299                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8300  058A  1283               	bcf	3,5	;RP0=0, select bank0
  8301  058B  1303               	bcf	3,6	;RP1=0, select bank0
  8302  058C  085B               	movf	Exception_Main@i,w
  8303  058D  3E01               	addlw	1
  8304  058E  158A  24D5  118A   	fcall	_setLights_SwOn
  8305                           
  8306                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8307  0591  1283               	bcf	3,5	;RP0=0, select bank0
  8308  0592  1303               	bcf	3,6	;RP1=0, select bank0
  8309  0593  085B               	movf	Exception_Main@i,w
  8310  0594  3E01               	addlw	1
  8311  0595  158A  242A  118A   	fcall	_setLights_SwOff
  8312  0598                     l5400:	
  8313  0598  3001               	movlw	1
  8314  0599  1283               	bcf	3,5	;RP0=0, select bank0
  8315  059A  1303               	bcf	3,6	;RP1=0, select bank0
  8316  059B  07DB               	addwf	Exception_Main@i,f
  8317  059C  1803               	skipnc
  8318  059D  0ADC               	incf	Exception_Main@i+1,f
  8319  059E  3000               	movlw	0
  8320  059F  07DC               	addwf	Exception_Main@i+1,f
  8321  05A0  2D75               	goto	l5402
  8322  05A1                     u7000:	
  8323  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  8324  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  8325  05A3  0008               	return
  8326  05A4                     l5404:	
  8327                           ;Main_B1.c: 601: case 2:
  8328                           
  8329                           ;Main_B1.c: 598: }
  8330                           ;Main_B1.c: 599: }
  8331                           ;Main_B1.c: 600: break;
  8332                           
  8333                           
  8334                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8335  05A4  118A  27F7  118A   	fcall	_getMain_All_LightsStatus
  8336                           
  8337                           ;Main_B1.c: 604: }
  8338                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8339                           
  8340                           ;Main_B1.c: 603: ;;
  8341  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  8342  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  8343  05A9  01DD               	clrf	Exception_Main@i_2155
  8344  05AA  01DE               	clrf	Exception_Main@i_2155+1
  8345  05AB                     l5414:	
  8346  05AB  085E               	movf	Exception_Main@i_2155+1,w
  8347  05AC  3A80               	xorlw	128
  8348  05AD  00D7               	movwf	??_Exception_Main
  8349  05AE  3080               	movlw	128
  8350  05AF  0257               	subwf	??_Exception_Main,w
  8351  05B0  1D03               	skipz
  8352  05B1  2DB4               	goto	u7025
  8353  05B2  0859               	movf	Exception_Main@count,w
  8354  05B3  025D               	subwf	Exception_Main@i_2155,w
  8355  05B4                     u7025:	
  8356  05B4  1803               	btfsc	3,0
  8357  05B5  2DD7               	goto	u7020
  8358                           
  8359                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8360  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  8361  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  8362  05B8  085D               	movf	Exception_Main@i_2155,w
  8363  05B9  3E01               	addlw	1
  8364  05BA  158A  2355  118A   	fcall	_getLights_Status
  8365  05BD  3A01               	xorlw	1
  8366  05BE  1D03               	skipz
  8367  05BF  2DCE               	goto	l5412
  8368                           
  8369                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8370  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  8371  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  8372  05C2  085D               	movf	Exception_Main@i_2155,w
  8373  05C3  3E01               	addlw	1
  8374  05C4  158A  24D5  118A   	fcall	_setLights_SwOn
  8375                           
  8376                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8377  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  8378  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  8379  05C9  085D               	movf	Exception_Main@i_2155,w
  8380  05CA  3E01               	addlw	1
  8381  05CB  158A  242A  118A   	fcall	_setLights_SwOff
  8382  05CE                     l5412:	
  8383  05CE  3001               	movlw	1
  8384  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  8385  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  8386  05D1  07DD               	addwf	Exception_Main@i_2155,f
  8387  05D2  1803               	skipnc
  8388  05D3  0ADE               	incf	Exception_Main@i_2155+1,f
  8389  05D4  3000               	movlw	0
  8390  05D5  07DE               	addwf	Exception_Main@i_2155+1,f
  8391  05D6  2DAB               	goto	l5414
  8392  05D7                     u7020:	
  8393  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  8394  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  8395  05D9  0008               	return
  8396  05DA                     l5416:	
  8397                           ;Main_B1.c: 613: case 3:
  8398                           
  8399                           ;Main_B1.c: 610: }
  8400                           ;Main_B1.c: 611: }
  8401                           ;Main_B1.c: 612: break;
  8402                           
  8403                           
  8404                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8405  05DA  158A  22DA  118A   	fcall	_getAll_Lights_Line
  8406  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  8407  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  8408  05DF  00D7               	movwf	??_Exception_Main
  8409  05E0  0857               	movf	??_Exception_Main,w
  8410  05E1  00DA               	movwf	Exception_Main@status
  8411                           
  8412                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8413  05E2  085A               	movf	Exception_Main@status,w
  8414  05E3  158A  2355  118A   	fcall	_getLights_Status
  8415  05E6  3A01               	xorlw	1
  8416  05E7  1903               	btfsc	3,2
  8417  05E8  2DEC               	goto	l5420
  8418  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  8419  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  8420  05EB  0008               	return
  8421  05EC                     l5420:	
  8422                           
  8423                           ;Main_B1.c: 617: setLights_SwOn(status);
  8424  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  8425  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  8426  05EE  085A               	movf	Exception_Main@status,w
  8427  05EF  158A  24D5  118A   	fcall	_setLights_SwOn
  8428                           
  8429                           ;Main_B1.c: 618: setLights_SwOff(status);
  8430  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  8431  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  8432  05F4  085A               	movf	Exception_Main@status,w
  8433  05F5  158A  242A         	fcall	_setLights_SwOff
  8434  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  8435  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  8436  05F9  0008               	return
  8437  05FA                     l5424:	
  8438                           ;Main_B1.c: 623: }
  8439                           
  8440                           ;Main_B1.c: 620: }
  8441                           ;Main_B1.c: 621: ;;
  8442                           ;Main_B1.c: 622: break;
  8443                           
  8444  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  8445  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  8446  05FC  085F               	movf	Exception_Main@error,w
  8447                           
  8448                           ; Switch size 1, requested type "space"
  8449                           ; Number of cases is 3, Range of values is 1 to 3
  8450                           ; switch strategies available:
  8451                           ; Name         Instructions Cycles
  8452                           ; simple_byte           10     6 (average)
  8453                           ; direct_byte           16    10 (fixed)
  8454                           ; jumptable            263     9 (fixed)
  8455                           ;	Chosen strategy is simple_byte
  8456  05FD  3A01               	xorlw	1	; case 1
  8457  05FE  1903               	skipnz
  8458  05FF  2D71               	goto	l5394
  8459  0600  3A03               	xorlw	3	; case 2
  8460  0601  1903               	skipnz
  8461  0602  2DA4               	goto	l5404
  8462  0603  3A01               	xorlw	1	; case 3
  8463  0604  1903               	skipnz
  8464  0605  2DDA               	goto	l5416
  8465  0606  2E08               	goto	l644
  8466  0607  0008               	return
  8467  0608                     l644:	
  8468  0608  0008               	return
  8469  0609                     __end_of_Exception_Main:	
  8470                           
  8471                           	psect	text52
  8472  0CD5                     __ptext52:	
  8473 ;; *************** function _setLights_SwOn *****************
  8474 ;; Defined at:
  8475 ;;		line 410 in file "../src/TriacRelay_B1.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;  sw              1    wreg     unsigned char 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  sw              1    3[BANK0 ] unsigned char 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;		None               void
  8482 ;; Registers used:
  8483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8489 ;;      Params:         0       0       0       0
  8490 ;;      Locals:         0       1       0       0
  8491 ;;      Temps:          0       0       0       0
  8492 ;;      Totals:         0       1       0       0
  8493 ;;Total ram usage:        1 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    4
  8496 ;; This function calls:
  8497 ;;		_LightsPointSelect
  8498 ;;		_getLights_Status
  8499 ;;		_setLights_Trigger
  8500 ;; This function is called by:
  8501 ;;		_Exception_Main
  8502 ;;		_PIR_Main
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _setLights_SwOn
  8508  0CD5                     _setLights_SwOn:	
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8512                           ;setLights_SwOn@sw stored from wreg
  8513  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  8514  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  8515  0CD7  00D4               	movwf	setLights_SwOn@sw
  8516                           
  8517                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  8518  0CD8  0854               	movf	setLights_SwOn@sw,w
  8519  0CD9  158A  22E3  158A   	fcall	_LightsPointSelect
  8520                           
  8521                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  8522  0CDC  0A78               	incf	_Lights,w
  8523  0CDD  0084               	movwf	4
  8524  0CDE  1383               	bcf	3,7	;select IRP bank0
  8525  0CDF  1500               	bsf	0,2
  8526                           
  8527                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  8528  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
  8529  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
  8530  0CE2  0854               	movf	setLights_SwOn@sw,w
  8531  0CE3  158A  2355  158A   	fcall	_getLights_Status
  8532  0CE6  3800               	iorlw	0
  8533  0CE7  1D03               	skipz
  8534  0CE8  2CF5               	goto	l4790
  8535                           
  8536                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  8537  0CE9  0A78               	incf	_Lights,w
  8538  0CEA  0084               	movwf	4
  8539  0CEB  1383               	bcf	3,7	;select IRP bank0
  8540  0CEC  1580               	bsf	0,3
  8541                           
  8542                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  8543  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  8544  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  8545  0CEF  01D1               	clrf	setLights_Trigger@command
  8546  0CF0  0AD1               	incf	setLights_Trigger@command,f
  8547  0CF1  0854               	movf	setLights_SwOn@sw,w
  8548  0CF2  158A  245E         	fcall	_setLights_Trigger
  8549                           
  8550                           ;TriacRelay_B1.c: 418: } else {
  8551  0CF4  0008               	return
  8552  0CF5                     l4790:	
  8553                           
  8554                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  8555  0CF5  0A78               	incf	_Lights,w
  8556  0CF6  0084               	movwf	4
  8557  0CF7  1383               	bcf	3,7	;select IRP bank0
  8558  0CF8  1180               	bcf	0,3
  8559  0CF9  0008               	return
  8560  0CFA                     __end_of_setLights_SwOn:	
  8561                           
  8562                           	psect	text53
  8563  0B55                     __ptext53:	
  8564 ;; *************** function _getLights_Status *****************
  8565 ;; Defined at:
  8566 ;;		line 271 in file "../src/TriacRelay_B1.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  lights          1    wreg     unsigned char 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  lights          1    0[BANK0 ] unsigned char 
  8571 ;;  status          1    1[BANK0 ] unsigned char 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  1    wreg      unsigned char 
  8574 ;; Registers used:
  8575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8581 ;;      Params:         0       0       0       0
  8582 ;;      Locals:         0       2       0       0
  8583 ;;      Temps:          0       0       0       0
  8584 ;;      Totals:         0       2       0       0
  8585 ;;Total ram usage:        2 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    3
  8588 ;; This function calls:
  8589 ;;		_LightsPointSelect
  8590 ;; This function is called by:
  8591 ;;		_Exception_Main
  8592 ;;		_PIR_Main
  8593 ;;		_setLights_SwOn
  8594 ;;		_setLights_ErrorClose
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _getLights_Status
  8600  0B55                     _getLights_Status:	
  8601                           
  8602                           ;incstack = 0
  8603                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8604                           ;getLights_Status@lights stored from wreg
  8605  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  8606  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  8607  0B57  00D1               	movwf	getLights_Status@lights
  8608                           
  8609                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  8610  0B58  0851               	movf	getLights_Status@lights,w
  8611  0B59  158A  22E3         	fcall	_LightsPointSelect
  8612                           
  8613                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  8614  0B5B  0878               	movf	_Lights,w
  8615  0B5C  0084               	movwf	4
  8616  0B5D  3000               	movlw	0
  8617  0B5E  1383               	bcf	3,7	;select IRP bank0
  8618  0B5F  1900               	btfsc	0,2
  8619  0B60  3001               	movlw	1
  8620  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  8621  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  8622  0B63  00D2               	movwf	getLights_Status@status
  8623                           
  8624                           ;TriacRelay_B1.c: 274: return status;
  8625  0B64  0852               	movf	getLights_Status@status,w
  8626  0B65  0008               	return
  8627  0B66                     __end_of_getLights_Status:	
  8628                           
  8629                           	psect	text54
  8630  0C2A                     __ptext54:	
  8631 ;; *************** function _setLights_SwOff *****************
  8632 ;; Defined at:
  8633 ;;		line 438 in file "../src/TriacRelay_B1.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  sw              1    wreg     unsigned char 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  sw              1    3[BANK0 ] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;		None               void
  8640 ;; Registers used:
  8641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8647 ;;      Params:         0       0       0       0
  8648 ;;      Locals:         0       1       0       0
  8649 ;;      Temps:          0       0       0       0
  8650 ;;      Totals:         0       1       0       0
  8651 ;;Total ram usage:        1 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    4
  8654 ;; This function calls:
  8655 ;;		_LightsPointSelect
  8656 ;;		_setLights_Trigger
  8657 ;; This function is called by:
  8658 ;;		_Exception_Main
  8659 ;;		_PIR_Main
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function _setLights_SwOff
  8665  0C2A                     _setLights_SwOff:	
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8669                           ;setLights_SwOff@sw stored from wreg
  8670  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  8671  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  8672  0C2C  00D4               	movwf	setLights_SwOff@sw
  8673                           
  8674                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  8675  0C2D  0854               	movf	setLights_SwOff@sw,w
  8676  0C2E  158A  22E3  158A   	fcall	_LightsPointSelect
  8677                           
  8678                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  8679  0C31  0A78               	incf	_Lights,w
  8680  0C32  0084               	movwf	4
  8681  0C33  1383               	bcf	3,7	;select IRP bank0
  8682  0C34  1D00               	btfss	0,2
  8683  0C35  0008               	return
  8684                           
  8685                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  8686  0C36  0A78               	incf	_Lights,w
  8687  0C37  0084               	movwf	4
  8688  0C38  1100               	bcf	0,2
  8689                           
  8690                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  8691  0C39  0A78               	incf	_Lights,w
  8692  0C3A  0084               	movwf	4
  8693  0C3B  1980               	btfsc	0,3
  8694  0C3C  0008               	return
  8695                           
  8696                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  8697  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  8698  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  8699  0C3F  01D1               	clrf	setLights_Trigger@command
  8700  0C40  0854               	movf	setLights_SwOff@sw,w
  8701  0C41  158A  245E         	fcall	_setLights_Trigger
  8702  0C43  0008               	return
  8703  0C44                     __end_of_setLights_SwOff:	
  8704                           
  8705                           	psect	text55
  8706  0C5E                     __ptext55:	
  8707 ;; *************** function _setLights_Trigger *****************
  8708 ;; Defined at:
  8709 ;;		line 278 in file "../src/TriacRelay_B1.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  lights          1    wreg     unsigned char 
  8712 ;;  command         1    0[BANK0 ] unsigned char 
  8713 ;; Auto vars:     Size  Location     Type
  8714 ;;  lights          1    2[BANK0 ] unsigned char 
  8715 ;; Return value:  Size  Location     Type
  8716 ;;		None               void
  8717 ;; Registers used:
  8718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8724 ;;      Params:         0       1       0       0
  8725 ;;      Locals:         0       1       0       0
  8726 ;;      Temps:          0       1       0       0
  8727 ;;      Totals:         0       3       0       0
  8728 ;;Total ram usage:        3 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:    3
  8731 ;; This function calls:
  8732 ;;		_LightsPointSelect
  8733 ;; This function is called by:
  8734 ;;		_setLights_SwOn
  8735 ;;		_setLights_SwOff
  8736 ;;		_setLights_ErrorClose
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _setLights_Trigger
  8742  0C5E                     _setLights_Trigger:	
  8743                           
  8744                           ;incstack = 0
  8745                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8746                           ;setLights_Trigger@lights stored from wreg
  8747  0C5E  1283               	bcf	3,5	;RP0=0, select bank0
  8748  0C5F  1303               	bcf	3,6	;RP1=0, select bank0
  8749  0C60  00D3               	movwf	setLights_Trigger@lights
  8750                           
  8751                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  8752  0C61  0853               	movf	setLights_Trigger@lights,w
  8753  0C62  158A  22E3         	fcall	_LightsPointSelect
  8754                           
  8755                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  8756  0C64  0878               	movf	_Lights,w
  8757  0C65  0084               	movwf	4
  8758  0C66  1383               	bcf	3,7	;select IRP bank0
  8759  0C67  1580               	bsf	0,3
  8760                           
  8761                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  8762  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  8763  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  8764  0C6A  0851               	movf	setLights_Trigger@command,w
  8765  0C6B  3A01               	xorlw	1
  8766  0C6C  3000               	movlw	0
  8767  0C6D  1903               	skipnz
  8768  0C6E  3001               	movlw	1
  8769  0C6F  00D2               	movwf	??_setLights_Trigger
  8770  0C70  0878               	movf	_Lights,w
  8771  0C71  0084               	movwf	4
  8772  0C72  0ED2               	swapf	??_setLights_Trigger,f
  8773  0C73  0800               	movf	0,w
  8774  0C74  0652               	xorwf	??_setLights_Trigger,w
  8775  0C75  39EF               	andlw	-17
  8776  0C76  0652               	xorwf	??_setLights_Trigger,w
  8777  0C77  0080               	movwf	0
  8778  0C78  0008               	return
  8779  0C79                     __end_of_setLights_Trigger:	
  8780                           
  8781                           	psect	text56
  8782  0AE3                     __ptext56:	
  8783 ;; *************** function _LightsPointSelect *****************
  8784 ;; Defined at:
  8785 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;  lights          1    wreg     unsigned char 
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  lights          1    5[COMMON] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;		None               void
  8792 ;; Registers used:
  8793 ;;		wreg
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8799 ;;      Params:         0       0       0       0
  8800 ;;      Locals:         1       0       0       0
  8801 ;;      Temps:          1       0       0       0
  8802 ;;      Totals:         2       0       0       0
  8803 ;;Total ram usage:        2 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    2
  8806 ;; This function calls:
  8807 ;;		Nothing
  8808 ;; This function is called by:
  8809 ;;		_setLights_Initialization
  8810 ;;		_setLights_Main
  8811 ;;		_Lights_Control
  8812 ;;		_getLights_Status
  8813 ;;		_setLights_Trigger
  8814 ;;		_setLights_SwOn
  8815 ;;		_setLights_SwOff
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           
  8820                           ;psect for function _LightsPointSelect
  8821  0AE3                     _LightsPointSelect:	
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _LightsPointSelect: [wreg]
  8825                           ;LightsPointSelect@lights stored from wreg
  8826  0AE3  00F5               	movwf	LightsPointSelect@lights
  8827                           
  8828                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8829  0AE4  0875               	movf	LightsPointSelect@lights,w
  8830  0AE5  3A01               	xorlw	1
  8831  0AE6  1D03               	skipz
  8832  0AE7  0008               	return
  8833                           
  8834                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8835  0AE8  3040               	movlw	_Lights1& (0+255)
  8836  0AE9  00F4               	movwf	??_LightsPointSelect
  8837  0AEA  0874               	movf	??_LightsPointSelect,w
  8838  0AEB  00F8               	movwf	_Lights
  8839  0AEC  0008               	return
  8840  0AED                     __end_of_LightsPointSelect:	
  8841                           
  8842                           	psect	text57
  8843  0F8F                     __ptext57:	
  8844 ;; *************** function _setLED *****************
  8845 ;; Defined at:
  8846 ;;		line 81 in file "../src/LED_B1.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  led             1    wreg     unsigned char 
  8849 ;;  command         1    0[BANK0 ] unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  led             1    1[BANK0 ] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;		None               void
  8854 ;; Registers used:
  8855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8861 ;;      Params:         0       1       0       0
  8862 ;;      Locals:         0       1       0       0
  8863 ;;      Temps:          0       0       0       0
  8864 ;;      Totals:         0       2       0       0
  8865 ;;Total ram usage:        2 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    3
  8868 ;; This function calls:
  8869 ;;		_LedPointSelect
  8870 ;; This function is called by:
  8871 ;;		_setLED_Initialization
  8872 ;;		_setPIRLED_Main
  8873 ;;		_Exception_Main
  8874 ;;		_PIR_Main
  8875 ;;		_setLights
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _setLED
  8881  0F8F                     _setLED:	
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8885                           ;setLED@led stored from wreg
  8886  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8887  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8888  0F91  00D2               	movwf	setLED@led
  8889                           
  8890                           ;LED_B1.c: 82: LedPointSelect(led);
  8891  0F92  0852               	movf	setLED@led,w
  8892  0F93  158A  2410  158A   	fcall	_LedPointSelect
  8893                           
  8894                           ;LED_B1.c: 83: if (command == 0) {
  8895  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  8896  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  8897  0F98  08D1               	movf	setLED@command,f
  8898  0F99  1D03               	skipz
  8899  0F9A  2FA8               	goto	l4512
  8900                           
  8901                           ;LED_B1.c: 85: if (led == 1) {
  8902  0F9B  0852               	movf	setLED@led,w
  8903  0F9C  3A01               	xorlw	1
  8904  0F9D  1D03               	skipz
  8905  0F9E  2FA0               	goto	l4504
  8906                           
  8907                           ;LED_B1.c: 89: RB4 = 1;
  8908  0F9F  1606               	bsf	6,4	;volatile
  8909  0FA0                     l4504:	
  8910                           
  8911                           ;LED_B1.c: 91: }
  8912                           ;LED_B1.c: 94: if (led == 2) {
  8913  0FA0  0852               	movf	setLED@led,w
  8914  0FA1  3A02               	xorlw	2
  8915  0FA2  1903               	btfsc	3,2
  8916                           
  8917                           ;LED_B1.c: 98: RB5 = 1;
  8918  0FA3  1686               	bsf	6,5	;volatile
  8919                           
  8920                           ;LED_B1.c: 100: }
  8921                           ;LED_B1.c: 112: if (led == 99) {
  8922  0FA4  0852               	movf	setLED@led,w
  8923  0FA5  3A63               	xorlw	99
  8924  0FA6  1903               	btfsc	3,2
  8925                           
  8926                           ;LED_B1.c: 116: RB3 = 1;
  8927  0FA7  1586               	bsf	6,3	;volatile
  8928  0FA8                     l4512:	
  8929                           
  8930                           ;LED_B1.c: 118: }
  8931                           ;LED_B1.c: 120: }
  8932                           ;LED_B1.c: 121: if (command == 1) {
  8933  0FA8  0851               	movf	setLED@command,w
  8934  0FA9  3A01               	xorlw	1
  8935  0FAA  1D03               	skipz
  8936  0FAB  2FB9               	goto	l4526
  8937                           
  8938                           ;LED_B1.c: 123: if (led == 1) {
  8939  0FAC  0852               	movf	setLED@led,w
  8940  0FAD  3A01               	xorlw	1
  8941  0FAE  1D03               	skipz
  8942  0FAF  2FB1               	goto	l4518
  8943                           
  8944                           ;LED_B1.c: 127: RB4 = 0;
  8945  0FB0  1206               	bcf	6,4	;volatile
  8946  0FB1                     l4518:	
  8947                           
  8948                           ;LED_B1.c: 129: }
  8949                           ;LED_B1.c: 132: if (led == 2) {
  8950  0FB1  0852               	movf	setLED@led,w
  8951  0FB2  3A02               	xorlw	2
  8952  0FB3  1903               	btfsc	3,2
  8953                           
  8954                           ;LED_B1.c: 136: RB5 = 0;
  8955  0FB4  1286               	bcf	6,5	;volatile
  8956                           
  8957                           ;LED_B1.c: 138: }
  8958                           ;LED_B1.c: 150: if (led == 99) {
  8959  0FB5  0852               	movf	setLED@led,w
  8960  0FB6  3A63               	xorlw	99
  8961  0FB7  1903               	btfsc	3,2
  8962                           
  8963                           ;LED_B1.c: 154: RB3 = 0;
  8964  0FB8  1186               	bcf	6,3	;volatile
  8965  0FB9                     l4526:	
  8966                           
  8967                           ;LED_B1.c: 156: }
  8968                           ;LED_B1.c: 158: }
  8969                           ;LED_B1.c: 159: if (command == 10) {
  8970  0FB9  0851               	movf	setLED@command,w
  8971  0FBA  3A0A               	xorlw	10
  8972  0FBB  1D03               	skipz
  8973  0FBC  2FD4               	goto	l4544
  8974                           
  8975                           ;LED_B1.c: 160: LED->GO = 0;
  8976  0FBD  0876               	movf	_LED,w
  8977  0FBE  0084               	movwf	4
  8978  0FBF  1383               	bcf	3,7	;select IRP bank0
  8979  0FC0  1080               	bcf	0,1
  8980                           
  8981                           ;LED_B1.c: 161: LED->Time = 0;
  8982  0FC1  0A76               	incf	_LED,w
  8983  0FC2  0084               	movwf	4
  8984  0FC3  0180               	clrf	0
  8985  0FC4  0A84               	incf	4,f
  8986  0FC5  0180               	clrf	0
  8987                           
  8988                           ;LED_B1.c: 163: if (led == 1) {
  8989  0FC6  0852               	movf	setLED@led,w
  8990  0FC7  3A01               	xorlw	1
  8991  0FC8  1D03               	skipz
  8992  0FC9  2FCC               	goto	l4536
  8993                           
  8994                           ;LED_B1.c: 167: RB4 = 1;
  8995  0FCA  1606               	bsf	6,4	;volatile
  8996                           
  8997                           ;LED_B1.c: 169: }
  8998  0FCB  2FD0               	goto	l4540
  8999  0FCC                     l4536:	
  9000                           
  9001                           ;LED_B1.c: 172: else if (led == 2) {
  9002  0FCC  0852               	movf	setLED@led,w
  9003  0FCD  3A02               	xorlw	2
  9004  0FCE  1903               	btfsc	3,2
  9005                           
  9006                           ;LED_B1.c: 176: RB5 = 1;
  9007  0FCF  1686               	bsf	6,5	;volatile
  9008  0FD0                     l4540:	
  9009                           
  9010                           ;LED_B1.c: 178: }
  9011                           ;LED_B1.c: 190: if (led == 99) {
  9012  0FD0  0852               	movf	setLED@led,w
  9013  0FD1  3A63               	xorlw	99
  9014  0FD2  1903               	btfsc	3,2
  9015                           
  9016                           ;LED_B1.c: 194: RB3 = 1;
  9017  0FD3  1586               	bsf	6,3	;volatile
  9018  0FD4                     l4544:	
  9019                           
  9020                           ;LED_B1.c: 196: }
  9021                           ;LED_B1.c: 198: }
  9022                           ;LED_B1.c: 199: if (command == 11) {
  9023  0FD4  0851               	movf	setLED@command,w
  9024  0FD5  3A0B               	xorlw	11
  9025  0FD6  1D03               	skipz
  9026  0FD7  2FDC               	goto	l4548
  9027                           
  9028                           ;LED_B1.c: 200: LED->GO = 1;
  9029  0FD8  0876               	movf	_LED,w
  9030  0FD9  0084               	movwf	4
  9031  0FDA  1383               	bcf	3,7	;select IRP bank0
  9032  0FDB  1480               	bsf	0,1
  9033  0FDC                     l4548:	
  9034                           
  9035                           ;LED_B1.c: 201: }
  9036                           ;LED_B1.c: 205: if (command == 111) {
  9037  0FDC  0851               	movf	setLED@command,w
  9038  0FDD  3A6F               	xorlw	111
  9039  0FDE  1D03               	skipz
  9040  0FDF  2FFA               	goto	l4574
  9041                           
  9042                           ;LED_B1.c: 206: PIRLED.Count = 0;
  9043  0FE0  01AB               	clrf	_PIRLED+1
  9044                           
  9045                           ;LED_B1.c: 207: PIRLED.Time = 0;
  9046  0FE1  01AC               	clrf	_PIRLED+2
  9047  0FE2  01AD               	clrf	_PIRLED+3
  9048                           
  9049                           ;LED_B1.c: 208: PIRLED.status = 0;
  9050  0FE3  122A               	bcf	_PIRLED,4
  9051                           
  9052                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9053  0FE4  142A               	bsf	_PIRLED,0
  9054                           
  9055                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9056  0FE5  10AA               	bcf	_PIRLED,1
  9057                           
  9058                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9059  0FE6  112A               	bcf	_PIRLED,2
  9060                           
  9061                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9062  0FE7  11AA               	bcf	_PIRLED,3
  9063                           
  9064                           ;LED_B1.c: 213: if (led == 1) {
  9065  0FE8  0852               	movf	setLED@led,w
  9066  0FE9  3A01               	xorlw	1
  9067  0FEA  1D03               	skipz
  9068  0FEB  2FEE               	goto	l4566
  9069                           
  9070                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9071  0FEC  14AA               	bsf	_PIRLED,1
  9072                           
  9073                           ;LED_B1.c: 215: } else if (led == 2) {
  9074  0FED  0008               	return
  9075  0FEE                     l4566:	
  9076  0FEE  0852               	movf	setLED@led,w
  9077  0FEF  3A02               	xorlw	2
  9078  0FF0  1D03               	skipz
  9079  0FF1  2FF4               	goto	l4570
  9080                           
  9081                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9082  0FF2  152A               	bsf	_PIRLED,2
  9083                           
  9084                           ;LED_B1.c: 217: } else if (led == 3) {
  9085  0FF3  0008               	return
  9086  0FF4                     l4570:	
  9087  0FF4  0852               	movf	setLED@led,w
  9088  0FF5  3A03               	xorlw	3
  9089  0FF6  1D03               	skipz
  9090  0FF7  0008               	return
  9091                           
  9092                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9093  0FF8  15AA               	bsf	_PIRLED,3
  9094                           
  9095                           ;LED_B1.c: 219: }
  9096                           ;LED_B1.c: 220: } else if (command == 110) {
  9097  0FF9  0008               	return
  9098  0FFA                     l4574:	
  9099  0FFA  0851               	movf	setLED@command,w
  9100  0FFB  3A6E               	xorlw	110
  9101  0FFC  1D03               	skipz
  9102  0FFD  0008               	return
  9103                           
  9104                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9105  0FFE  102A               	bcf	_PIRLED,0
  9106  0FFF  0008               	return
  9107  1000                     __end_of_setLED:	
  9108                           
  9109                           	psect	text58
  9110  0C10                     __ptext58:	
  9111 ;; *************** function _LedPointSelect *****************
  9112 ;; Defined at:
  9113 ;;		line 7 in file "../src/LED_B1.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  led             1    wreg     unsigned char 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  led             1    5[COMMON] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;		None               void
  9120 ;; Registers used:
  9121 ;;		wreg
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9127 ;;      Params:         0       0       0       0
  9128 ;;      Locals:         1       0       0       0
  9129 ;;      Temps:          1       0       0       0
  9130 ;;      Totals:         2       0       0       0
  9131 ;;Total ram usage:        2 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    2
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_setLED_Initialization
  9138 ;;		_setLED
  9139 ;;		_setLED_Main
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           
  9144                           ;psect for function _LedPointSelect
  9145  0C10                     _LedPointSelect:	
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _LedPointSelect: [wreg]
  9149                           ;LedPointSelect@led stored from wreg
  9150  0C10  00F5               	movwf	LedPointSelect@led
  9151                           
  9152                           ;LED_B1.c: 9: if (led == 1) {
  9153  0C11  0875               	movf	LedPointSelect@led,w
  9154  0C12  3A01               	xorlw	1
  9155  0C13  1D03               	skipz
  9156  0C14  2C19               	goto	l268
  9157                           
  9158                           ;LED_B1.c: 10: LED = &VarLED1;
  9159  0C15  3049               	movlw	_VarLED1& (0+255)
  9160  0C16  00F4               	movwf	??_LedPointSelect
  9161  0C17  0874               	movf	??_LedPointSelect,w
  9162  0C18  00F6               	movwf	_LED
  9163  0C19                     l268:	
  9164                           
  9165                           ;LED_B1.c: 11: }
  9166                           ;LED_B1.c: 14: if (led == 2) {
  9167  0C19  0875               	movf	LedPointSelect@led,w
  9168  0C1A  3A02               	xorlw	2
  9169  0C1B  1D03               	skipz
  9170  0C1C  2C21               	goto	l269
  9171                           
  9172                           ;LED_B1.c: 15: LED = &VarLED2;
  9173  0C1D  304D               	movlw	_VarLED2& (0+255)
  9174  0C1E  00F4               	movwf	??_LedPointSelect
  9175  0C1F  0874               	movf	??_LedPointSelect,w
  9176  0C20  00F6               	movwf	_LED
  9177  0C21                     l269:	
  9178                           
  9179                           ;LED_B1.c: 16: }
  9180                           ;LED_B1.c: 24: if (led == 99) {
  9181  0C21  0875               	movf	LedPointSelect@led,w
  9182  0C22  3A63               	xorlw	99
  9183  0C23  1D03               	skipz
  9184  0C24  0008               	return
  9185                           
  9186                           ;LED_B1.c: 25: LED = &VarErrLED;
  9187  0C25  3045               	movlw	_VarErrLED& (0+255)
  9188  0C26  00F4               	movwf	??_LedPointSelect
  9189  0C27  0874               	movf	??_LedPointSelect,w
  9190  0C28  00F6               	movwf	_LED
  9191  0C29  0008               	return
  9192  0C2A                     __end_of_LedPointSelect:	
  9193                           
  9194                           	psect	text59
  9195  07F7                     __ptext59:	
  9196 ;; *************** function _getMain_All_LightsStatus *****************
  9197 ;; Defined at:
  9198 ;;		line 373 in file "../src/Main_B1.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;		None
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;  status          1    4[COMMON] unsigned char 
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      unsigned char 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9212 ;;      Params:         0       0       0       0
  9213 ;;      Locals:         1       0       0       0
  9214 ;;      Temps:          0       0       0       0
  9215 ;;      Totals:         1       0       0       0
  9216 ;;Total ram usage:        1 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    2
  9219 ;; This function calls:
  9220 ;;		Nothing
  9221 ;; This function is called by:
  9222 ;;		_Exception_Main
  9223 ;;		_Load_Main
  9224 ;;		_setTemp_Main
  9225 ;;		_Lights_Main
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _getMain_All_LightsStatus
  9231  07F7                     _getMain_All_LightsStatus:	
  9232                           
  9233                           ;Main_B1.c: 374: char status = 0;
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9237  07F7  01F4               	clrf	getMain_All_LightsStatus@status
  9238                           
  9239                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9240  07F8  3000               	movlw	0
  9241  07F9  1283               	bcf	3,5	;RP0=0, select bank0
  9242  07FA  1303               	bcf	3,6	;RP1=0, select bank0
  9243  07FB  1940               	btfsc	_Lights1,2
  9244  07FC  3001               	movlw	1
  9245  07FD  00F4               	movwf	getMain_All_LightsStatus@status
  9246                           
  9247                           ;Main_B1.c: 420: return status;
  9248  07FE  0874               	movf	getMain_All_LightsStatus@status,w
  9249  07FF  0008               	return
  9250  0800                     __end_of_getMain_All_LightsStatus:	
  9251                           
  9252                           	psect	text60
  9253  0DAE                     __ptext60:	
  9254 ;; *************** function _getMain_All_Error_Status *****************
  9255 ;; Defined at:
  9256 ;;		line 424 in file "../src/Main_B1.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  command         1    wreg     unsigned char 
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;  command         1    4[BANK0 ] unsigned char 
  9261 ;;  status          1    5[BANK0 ] unsigned char 
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      unsigned char 
  9264 ;; Registers used:
  9265 ;;		wreg, status,2, status,0
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9271 ;;      Params:         0       0       0       0
  9272 ;;      Locals:         0       6       0       0
  9273 ;;      Temps:          1       0       0       0
  9274 ;;      Totals:         1       6       0       0
  9275 ;;Total ram usage:        7 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    2
  9278 ;; This function calls:
  9279 ;;		Nothing
  9280 ;; This function is called by:
  9281 ;;		_Exception_Main
  9282 ;;		_Load_Main
  9283 ;;		_setTemp_Main
  9284 ;;		_PIR_Main
  9285 ;;		_setSYSC_Main
  9286 ;;		_Lights_Main
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _getMain_All_Error_Status
  9292  0DAE                     _getMain_All_Error_Status:	
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9296                           ;getMain_All_Error_Status@command stored from wreg
  9297  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9298  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9299  0DB0  00D5               	movwf	getMain_All_Error_Status@command
  9300                           
  9301                           ;Main_B1.c: 425: char status = 0;
  9302  0DB1  01D6               	clrf	getMain_All_Error_Status@status
  9303                           
  9304                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9305  0DB2  08D6               	movf	getMain_All_Error_Status@status,f
  9306  0DB3  1D03               	skipz
  9307  0DB4  2DBD               	goto	l3284
  9308  0DB5  0855               	movf	getMain_All_Error_Status@command,w
  9309  0DB6  3A01               	xorlw	1
  9310  0DB7  1903               	skipnz
  9311  0DB8  2DBD               	goto	l3284
  9312                           
  9313                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9314  0DB9  3000               	movlw	0
  9315  0DBA  18A0               	btfsc	_SYSC,1
  9316  0DBB  3001               	movlw	1
  9317  0DBC  00D6               	movwf	getMain_All_Error_Status@status
  9318  0DBD                     l3284:	
  9319                           
  9320                           ;Main_B1.c: 430: }
  9321                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9322  0DBD  08D6               	movf	getMain_All_Error_Status@status,f
  9323  0DBE  1D03               	skipz
  9324  0DBF  2DD1               	goto	l3294
  9325  0DC0  0855               	movf	getMain_All_Error_Status@command,w
  9326  0DC1  3A02               	xorlw	2
  9327  0DC2  1903               	skipnz
  9328  0DC3  2DD1               	goto	l3294
  9329                           
  9330                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9331  0DC4  18B9               	btfsc	_Temp,1
  9332  0DC5  2DC9               	goto	l3292
  9333  0DC6  01D1               	clrf	_getMain_All_Error_Status$2142
  9334  0DC7  01D2               	clrf	_getMain_All_Error_Status$2142+1
  9335  0DC8  2DCD               	goto	l613
  9336  0DC9                     l3292:	
  9337  0DC9  3002               	movlw	2
  9338  0DCA  00D1               	movwf	_getMain_All_Error_Status$2142
  9339  0DCB  3000               	movlw	0
  9340  0DCC  00D2               	movwf	_getMain_All_Error_Status$2142+1
  9341  0DCD                     l613:	
  9342  0DCD  0851               	movf	_getMain_All_Error_Status$2142,w
  9343  0DCE  00F4               	movwf	??_getMain_All_Error_Status
  9344  0DCF  0874               	movf	??_getMain_All_Error_Status,w
  9345  0DD0  00D6               	movwf	getMain_All_Error_Status@status
  9346  0DD1                     l3294:	
  9347                           
  9348                           ;Main_B1.c: 438: }
  9349                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9350  0DD1  08D6               	movf	getMain_All_Error_Status@status,f
  9351  0DD2  1D03               	skipz
  9352  0DD3  2DEA               	goto	l614
  9353  0DD4  0855               	movf	getMain_All_Error_Status@command,w
  9354  0DD5  3A03               	xorlw	3
  9355  0DD6  1903               	skipnz
  9356  0DD7  2DEA               	goto	l614
  9357                           
  9358                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9359  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
  9360  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
  9361  0DDA  1ACA               	btfsc	_Load^(0+128),5
  9362  0DDB  2DE1               	goto	l3302
  9363  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  9364  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  9365  0DDE  01D3               	clrf	_getMain_All_Error_Status$2143
  9366  0DDF  01D4               	clrf	_getMain_All_Error_Status$2143+1
  9367  0DE0  2DE6               	goto	l618
  9368  0DE1                     l3302:	
  9369  0DE1  3003               	movlw	3
  9370  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
  9371  0DE3  00D3               	movwf	_getMain_All_Error_Status$2143
  9372  0DE4  3000               	movlw	0
  9373  0DE5  00D4               	movwf	_getMain_All_Error_Status$2143+1
  9374  0DE6                     l618:	
  9375  0DE6  0853               	movf	_getMain_All_Error_Status$2143,w
  9376  0DE7  00F4               	movwf	??_getMain_All_Error_Status
  9377  0DE8  0874               	movf	??_getMain_All_Error_Status,w
  9378  0DE9  00D6               	movwf	getMain_All_Error_Status@status
  9379  0DEA                     l614:	
  9380                           
  9381                           ;Main_B1.c: 445: }
  9382                           ;Main_B1.c: 455: return status;
  9383  0DEA  0856               	movf	getMain_All_Error_Status@status,w
  9384  0DEB  0008               	return
  9385  0DEC                     __end_of_getMain_All_Error_Status:	
  9386                           
  9387                           	psect	text61
  9388  0ADA                     __ptext61:	
  9389 ;; *************** function _getAll_Lights_Line *****************
  9390 ;; Defined at:
  9391 ;;		line 310 in file "../src/TriacRelay_B1.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;		None
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;  line            1    4[COMMON] unsigned char 
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  1    wreg      unsigned char 
  9398 ;; Registers used:
  9399 ;;		wreg, status,2
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9405 ;;      Params:         0       0       0       0
  9406 ;;      Locals:         1       0       0       0
  9407 ;;      Temps:          0       0       0       0
  9408 ;;      Totals:         1       0       0       0
  9409 ;;Total ram usage:        1 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    2
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_Exception_Main
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           
  9420                           ;psect for function _getAll_Lights_Line
  9421  0ADA                     _getAll_Lights_Line:	
  9422                           
  9423                           ;TriacRelay_B1.c: 311: char line = 0;
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9427  0ADA  01F4               	clrf	getAll_Lights_Line@line
  9428                           
  9429                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
  9430  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  9431  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  9432  0ADD  1C41               	btfss	_Lights1+1,0
  9433  0ADE  2AE1               	goto	l3560
  9434                           
  9435                           ;TriacRelay_B1.c: 314: line = 1;
  9436  0ADF  01F4               	clrf	getAll_Lights_Line@line
  9437  0AE0  0AF4               	incf	getAll_Lights_Line@line,f
  9438  0AE1                     l3560:	
  9439                           
  9440                           ;TriacRelay_B1.c: 315: }
  9441                           ;TriacRelay_B1.c: 327: return line;
  9442  0AE1  0874               	movf	getAll_Lights_Line@line,w
  9443  0AE2  0008               	return
  9444  0AE3                     __end_of_getAll_Lights_Line:	
  9445                           
  9446                           	psect	text62
  9447  0B0E                     __ptext62:	
  9448 ;; *************** function _DetectSYSC_Signal *****************
  9449 ;; Defined at:
  9450 ;;		line 50 in file "../src/SYSC_B1.c"
  9451 ;; Parameters:    Size  Location     Type
  9452 ;;		None
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;		None
  9455 ;; Return value:  Size  Location     Type
  9456 ;;		None               void
  9457 ;; Registers used:
  9458 ;;		status,2
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9464 ;;      Params:         0       0       0       0
  9465 ;;      Locals:         0       0       0       0
  9466 ;;      Temps:          0       0       0       0
  9467 ;;      Totals:         0       0       0       0
  9468 ;;Total ram usage:        0 bytes
  9469 ;; Hardware stack levels used:    1
  9470 ;; Hardware stack levels required when called:    2
  9471 ;; This function calls:
  9472 ;;		Nothing
  9473 ;; This function is called by:
  9474 ;;		_main
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           
  9479                           ;psect for function _DetectSYSC_Signal
  9480  0B0E                     _DetectSYSC_Signal:	
  9481                           
  9482                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9483                           
  9484                           ;incstack = 0
  9485                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9486  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  9487  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  9488  0B10  19A0               	btfsc	_SYSC,3
  9489  0B11  2B18               	goto	l1146
  9490                           
  9491                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9492  0B12  1E85               	btfss	5,5	;volatile
  9493  0B13  0008               	return
  9494                           
  9495                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9496  0B14  15A0               	bsf	_SYSC,3
  9497                           
  9498                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9499  0B15  01A1               	clrf	_SYSC+1
  9500  0B16  01A2               	clrf	_SYSC+2
  9501                           
  9502                           ;SYSC_B1.c: 55: }
  9503                           ;SYSC_B1.c: 56: } else {
  9504  0B17  0008               	return
  9505  0B18                     l1146:	
  9506                           
  9507                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9508  0B18  1A85               	btfsc	5,5	;volatile
  9509  0B19  0008               	return
  9510                           
  9511                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9512  0B1A  11A0               	bcf	_SYSC,3
  9513  0B1B  0008               	return
  9514  0B1C                     __end_of_DetectSYSC_Signal:	
  9515                           
  9516                           	psect	text63
  9517  0D7A                     __ptext63:	
  9518 ;; *************** function _CDS_Main *****************
  9519 ;; Defined at:
  9520 ;;		line 11 in file "../src/CDS_B1.c"
  9521 ;; Parameters:    Size  Location     Type
  9522 ;;		None
  9523 ;; Auto vars:     Size  Location     Type
  9524 ;;		None
  9525 ;; Return value:  Size  Location     Type
  9526 ;;		None               void
  9527 ;; Registers used:
  9528 ;;		wreg, status,2, status,0
  9529 ;; Tracked objects:
  9530 ;;		On entry : 0/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9534 ;;      Params:         0       0       0       0
  9535 ;;      Locals:         0       0       0       0
  9536 ;;      Temps:          0       3       0       0
  9537 ;;      Totals:         0       3       0       0
  9538 ;;Total ram usage:        3 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; Hardware stack levels required when called:    2
  9541 ;; This function calls:
  9542 ;;		Nothing
  9543 ;; This function is called by:
  9544 ;;		_main
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           
  9549                           ;psect for function _CDS_Main
  9550  0D7A                     _CDS_Main:	
  9551                           
  9552                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9553                           
  9554                           ;incstack = 0
  9555                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9556  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  9557  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  9558  0D7C  1C2E               	btfss	__CDS,0
  9559  0D7D  0008               	return
  9560                           
  9561                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9562  0D7E  18AE               	btfsc	__CDS,1
  9563  0D7F  2D8D               	goto	l123
  9564                           
  9565                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9566  0D80  19AE               	btfsc	__CDS,3
  9567  0D81  0008               	return
  9568                           
  9569                           ;CDS_B1.c: 16: _CDS.Time++;
  9570  0D82  3001               	movlw	1
  9571  0D83  00D1               	movwf	??_CDS_Main
  9572  0D84  0851               	movf	??_CDS_Main,w
  9573  0D85  07AF               	addwf	__CDS+1,f
  9574                           
  9575                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9576  0D86  3005               	movlw	5
  9577  0D87  022F               	subwf	__CDS+1,w
  9578  0D88  1C03               	skipc
  9579  0D89  0008               	return
  9580                           
  9581                           ;CDS_B1.c: 18: {
  9582                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9583  0D8A  01AF               	clrf	__CDS+1
  9584                           
  9585                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9586  0D8B  15AE               	bsf	__CDS,3
  9587                           
  9588                           ;CDS_B1.c: 21: }
  9589                           ;CDS_B1.c: 22: }
  9590                           ;CDS_B1.c: 23: } else {
  9591  0D8C  0008               	return
  9592  0D8D                     l123:	
  9593                           
  9594                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9595  0D8D  1CAE               	btfss	__CDS,1
  9596  0D8E  0008               	return
  9597                           
  9598                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9599  0D8F  10AE               	bcf	__CDS,1
  9600                           
  9601                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9602  0D90  1A2E               	btfsc	__CDS,4
  9603  0D91  2D98               	goto	l4902
  9604                           
  9605                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9606  0D92  0830               	movf	__CDS+2,w
  9607  0D93  0231               	subwf	__CDS+3,w
  9608  0D94  1C03               	skipc
  9609  0D95  0008               	return
  9610                           
  9611                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9612  0D96  162E               	bsf	__CDS,4
  9613                           
  9614                           ;CDS_B1.c: 29: }
  9615                           ;CDS_B1.c: 30: } else {
  9616  0D97  0008               	return
  9617  0D98                     l4902:	
  9618                           
  9619                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9620  0D98  0830               	movf	__CDS+2,w
  9621  0D99  3E9C               	addlw	156
  9622  0D9A  00D1               	movwf	??_CDS_Main
  9623  0D9B  30FF               	movlw	255
  9624  0D9C  1803               	skipnc
  9625  0D9D  3000               	movlw	0
  9626  0D9E  00D2               	movwf	??_CDS_Main+1
  9627  0D9F  0852               	movf	??_CDS_Main+1,w
  9628  0DA0  3A80               	xorlw	128
  9629  0DA1  00D3               	movwf	??_CDS_Main+2
  9630  0DA2  3080               	movlw	128
  9631  0DA3  0253               	subwf	??_CDS_Main+2,w
  9632  0DA4  1D03               	skipz
  9633  0DA5  2DA8               	goto	u5965
  9634  0DA6  0831               	movf	__CDS+3,w
  9635  0DA7  0251               	subwf	??_CDS_Main,w
  9636  0DA8                     u5965:	
  9637  0DA8  1C03               	skipc
  9638  0DA9  0008               	return
  9639                           
  9640                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9641  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  9642  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  9643  0DAC  122E               	bcf	__CDS,4
  9644  0DAD  0008               	return
  9645  0DAE                     __end_of_CDS_Main:	
  9646                           
  9647                           	psect	text64
  9648  0A91                     __ptext64:	
  9649 ;; *************** function _CDS_Initialization *****************
  9650 ;; Defined at:
  9651 ;;		line 7 in file "../src/CDS_B1.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;		None
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;		None
  9656 ;; Return value:  Size  Location     Type
  9657 ;;		None               void
  9658 ;; Registers used:
  9659 ;;		None
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9665 ;;      Params:         0       0       0       0
  9666 ;;      Locals:         0       0       0       0
  9667 ;;      Temps:          0       0       0       0
  9668 ;;      Totals:         0       0       0       0
  9669 ;;Total ram usage:        0 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    2
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_main
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           
  9680                           ;psect for function _CDS_Initialization
  9681  0A91                     _CDS_Initialization:	
  9682                           
  9683                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _CDS_Initialization: []
  9687  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  9688  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  9689  0A93  142E               	bsf	__CDS,0
  9690  0A94  0008               	return
  9691  0A95                     __end_of_CDS_Initialization:	
  9692                           
  9693                           	psect	text65
  9694  0BE0                     __ptext65:	
  9695 ;; *************** function _ISR *****************
  9696 ;; Defined at:
  9697 ;;		line 116 in file "../src/MCU_B1.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;		None
  9702 ;; Return value:  Size  Location     Type
  9703 ;;		None               void
  9704 ;; Registers used:
  9705 ;;		wreg, status,2, status,0, pclath, cstack
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 0/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9711 ;;      Params:         0       0       0       0
  9712 ;;      Locals:         0       0       0       0
  9713 ;;      Temps:          4       0       0       0
  9714 ;;      Totals:         4       0       0       0
  9715 ;;Total ram usage:        4 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    1
  9718 ;; This function calls:
  9719 ;;		_TMR1_ISR
  9720 ;; This function is called by:
  9721 ;;		Interrupt level 1
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           
  9726                           ;psect for function _ISR
  9727  0BE0                     _ISR:	
  9728                           
  9729                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9730  0BE0  1683               	bsf	3,5	;RP0=1, select bank1
  9731  0BE1  1303               	bcf	3,6	;RP1=0, select bank1
  9732  0BE2  1C0C               	btfss	12,0	;volatile
  9733  0BE3  2BEB               	goto	i1l447
  9734  0BE4  1283               	bcf	3,5	;RP0=0, select bank0
  9735  0BE5  1303               	bcf	3,6	;RP1=0, select bank0
  9736  0BE6  1C0C               	btfss	12,0	;volatile
  9737  0BE7  2BEB               	goto	i1l447
  9738                           
  9739                           ;MCU_B1.c: 126: TMR1_ISR();
  9740  0BE8  158A  239D  158A   	fcall	_TMR1_ISR
  9741  0BEB                     i1l447:	
  9742                           ;MCU_B1.c: 127: }
  9743                           ;MCU_B1.c: 148: return;
  9744                           
  9745  0BEB  0873               	movf	??_ISR+3,w
  9746  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  9747  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  9748  0BEE  00FF               	movwf	127
  9749  0BEF  0872               	movf	??_ISR+2,w
  9750  0BF0  008A               	movwf	10
  9751  0BF1  0871               	movf	??_ISR+1,w
  9752  0BF2  0084               	movwf	4
  9753  0BF3  0E70               	swapf	??_ISR^(0+-128),w
  9754  0BF4  0083               	movwf	3
  9755  0BF5  0EFE               	swapf	126,f
  9756  0BF6  0E7E               	swapf	126,w
  9757  0BF7  0009               	retfie
  9758  0BF8                     __end_of_ISR:	
  9759                           
  9760                           	psect	intentry
  9761  0004                     __pintentry:	
  9762                           ;incstack = 0
  9763                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9764                           
  9765  0004                     interrupt_function:	
  9766  007E                     saved_w	set	btemp
  9767  0004  00FE               	movwf	btemp
  9768  0005  0E03               	swapf	3,w
  9769  0006  00F0               	movwf	??_ISR
  9770  0007  0804               	movf	4,w
  9771  0008  00F1               	movwf	??_ISR+1
  9772  0009  080A               	movf	10,w
  9773  000A  00F2               	movwf	??_ISR+2
  9774  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9775  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9776  000D  087F               	movf	btemp+1,w
  9777  000E  00F3               	movwf	??_ISR+3
  9778  000F  158A  2BE0         	ljmp	_ISR
  9779                           
  9780                           	psect	text66
  9781  0B9D                     __ptext66:	
  9782 ;; *************** function _TMR1_ISR *****************
  9783 ;; Defined at:
  9784 ;;		line 236 in file "../src/MCU_B1.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;		None               void
  9791 ;; Registers used:
  9792 ;;		wreg, status,2
  9793 ;; Tracked objects:
  9794 ;;		On entry : 0/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9798 ;;      Params:         0       0       0       0
  9799 ;;      Locals:         0       0       0       0
  9800 ;;      Temps:          0       0       0       0
  9801 ;;      Totals:         0       0       0       0
  9802 ;;Total ram usage:        0 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; This function calls:
  9805 ;;		Nothing
  9806 ;; This function is called by:
  9807 ;;		_ISR
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           
  9812                           ;psect for function _TMR1_ISR
  9813  0B9D                     _TMR1_ISR:	
  9814                           
  9815                           ;MCU_B1.c: 268: Timer1.Count++;
  9816                           
  9817                           ;incstack = 0
  9818                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9819  0B9D  3001               	movlw	1
  9820  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  9821  0B9F  1303               	bcf	3,6	;RP1=0, select bank0
  9822  0BA0  07B3               	addwf	_Timer1+1,f
  9823  0BA1  1803               	skipnc
  9824  0BA2  0AB4               	incf	_Timer1+2,f
  9825  0BA3  3000               	movlw	0
  9826  0BA4  07B4               	addwf	_Timer1+2,f
  9827                           
  9828                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
  9829  0BA5  30C8               	movlw	200
  9830  0BA6  0633               	xorwf	_Timer1+1,w
  9831  0BA7  0434               	iorwf	_Timer1+2,w
  9832  0BA8  1D03               	skipz
  9833  0BA9  2BAD               	goto	i1l3802
  9834                           
  9835                           ;MCU_B1.c: 270: Timer1.Count = 0;
  9836  0BAA  01B3               	clrf	_Timer1+1
  9837  0BAB  01B4               	clrf	_Timer1+2
  9838                           
  9839                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
  9840  0BAC  1432               	bsf	_Timer1,0
  9841  0BAD                     i1l3802:	
  9842                           
  9843                           ;MCU_B1.c: 272: }
  9844                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
  9845  0BAD  30FA               	movlw	250
  9846  0BAE  008F               	movwf	15	;volatile
  9847                           
  9848                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
  9849  0BAF  3038               	movlw	56
  9850  0BB0  008E               	movwf	14	;volatile
  9851                           
  9852                           ;MCU_B1.c: 276: TMR1IF = 0;
  9853  0BB1  100C               	bcf	12,0	;volatile
  9854  0BB2  0008               	return
  9855  0BB3                     __end_of_TMR1_ISR:	
  9856  007E                     btemp	set	126	;btemp
  9857  007E                     wtemp	set	126
  9858  007E                     wtemp0	set	126
  9859  0080                     wtemp1	set	128
  9860  0082                     wtemp2	set	130
  9861  0084                     wtemp3	set	132
  9862  0086                     wtemp4	set	134
  9863  0088                     wtemp5	set	136
  9864  007F                     wtemp6	set	127
  9865  007E                     ttemp	set	126
  9866  007E                     ttemp0	set	126
  9867  0081                     ttemp1	set	129
  9868  0084                     ttemp2	set	132
  9869  0087                     ttemp3	set	135
  9870  007F                     ttemp4	set	127
  9871  007E                     ltemp	set	126
  9872  007E                     ltemp0	set	126
  9873  0082                     ltemp1	set	130
  9874  0086                     ltemp2	set	134
  9875  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      72
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   25977
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     765
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2906
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1130
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     746
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     601
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     347
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0     347
                                              5 COMMON     1     1      0
                                              6 BANK0      5     5      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    4091
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4318
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    3023
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2760
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1031
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     907
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2416
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2416
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2531
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2531
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4426
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2376
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      98       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      98      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Feb 11 17:14:08 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 0056                      setTemp_Main@AD 005B  
                                fsr 0004                 ___wmul@multiplicand 0053  
                               l123 0D8D                                 l268 0C19  
                               l613 0DCD                                 l269 0C21  
                               l614 0DEA                                 l618 0DE6  
                               l644 0608                                 l741 0394  
                               l725 0411                                 l735 03EA  
                               l727 0268                                 l736 03E8  
                               l728 0264                                 l729 025E  
                               l853 0728                                 l935 0091  
                               l927 0211                                 l847 0782  
                               l928 008B                                 l937 00A4  
                               l929 0059                                 l858 077E  
                               _GIE 005F                                 _RB2 0032  
                               _RA4 002C                                 _LED 0076  
                               _RB3 0033                                 _RA5 002D  
                               _RB4 0034                                 _RB5 0035  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0BE0  
                               _PSA 040B                                 _WDT 0035  
                 ??_setLights_SwOff 0076                                 _Cmd 0037  
            getAll_Lights_Line@line 0074                                 fsr0 0004  
                               indf 0000                     __end_of_ADC_Set 0AC2  
         __end_of_LightsPointSelect 0AED                    _getLights_Status 0B55  
           __size_of_Lights_Control 0083                                ?_ISR 0070  
                        Load_Main@i 0060                                l1304 0CAA  
                              l1146 0B18                      _Load_Main$2405 005B  
                              l1427 0D06                                l3302 0DE1  
                              l5000 0476                                l5004 0481  
                              l5102 028E                                l5040 050B  
                              l5024 04C1                                l5008 048C  
                              l3610 073B                                l5034 04EF  
                              l5018 04A5                                l3292 0DC9  
                              l3284 0DBD                                l5140 0365  
                              l5108 02CA                                l5300 00EB  
                              l3604 072A                                l3612 073E  
                              l3294 0DD1                                l5134 0355  
                              l5070 0248                                l5310 012B  
                              l5054 0545                                l3560 0AE1  
                              l4504 0FA0                                l4512 0FA8  
                              l5400 0598                                l5216 0CAB  
                              l5152 03B1                                l5144 0386  
                              l5048 0537                                l5402 0575  
                              l5162 03CA                                l5330 01A2  
                              l4540 0FD0                                l5420 05EC  
                              l5412 05CE                                l5404 05A4  
                              l4700 0EF9                                l5332 01B1  
                              l5244 007B                                l3636 076E  
                              l4518 0FB1                                l4526 0FB9  
                              l5414 05AB                                l4710 0F1A  
                              l5086 0267                                l5326 0170  
                              l5318 013F                                l3662 0E43  
                              l3646 077D                                l4536 0FCC  
                              l4544 0FD4                                l5416 05DA  
                              l5424 05FA                                l4616 0BD8  
                              l4570 0FF4                                l4714 0F22  
                              l4706 0F0F                                l4650 06E2  
                              l4642 06C8                                l5282 00C7  
                              l4722 0C86                                l4548 0FDC  
                              l4628 06A4                                l5348 01E1  
                              l3668 0E5E                                l4724 0C89  
                              l5460 0F44                                l4902 0D98  
                              l4566 0FEE                                l4574 0FFA  
                              l4646 06CF                                l4814 0D73  
                              l5198 03FE                                l5294 00DE  
                              l4832 0658                                l4664 0706  
                              l4728 0C8F                                l5472 0F67  
                              l5394 0571                                l4770 07D1  
                              l4762 07B9                                l4754 07AD  
                              l4682 0ED8                                l5298 00EA  
                              l5388 0562                                l4772 07D9  
                              l4940 0EA3                                l4932 0E8F  
                              l4790 0CF5                                l4774 07E7  
                              l4758 07B3                                l4846 0CFC  
                              l4768 07C5                                l4688 0EE3  
                              l4960 0EC7                                l4944 0EAB  
                              l3984 0C54                                l4698 0EEB  
                              l4874 0E1A                                l4866 0DF6  
                              l4868 0E04                                l4878 0E25  
                              l4992 0460                                l4976 0D3D  
                              l4996 046B               _myMain_Initialization 0A7E  
                      __CFG_WDTE$ON 0000                                u3455 0E6A  
                              u7000 05A1                                _PEIE 005E  
                              u7020 05D7                                u7005 057E  
                              u5600 07E4                                u7025 05B4  
                              u5425 0EEE                                u5445 0EFA  
                              u5455 0F06                                u5295 0B97  
                              u5465 0F10                                u6355 028C  
                              u5580 07CE                                u5740 0654  
                              u5725 0640                                u5805 0D0E  
                              u6365 02C8                                u6455 03A9  
                              u6375 031F                                u5835 0DF9  
                              u5765 0677                                u6805 0109  
                              u5855 0E05                                u6815 0121  
                              u5865 0E11                                u5875 0E1B  
                              u5795 0D07                                u6835 0158  
                              u5965 0DA8                                u6925 01FE  
                              u6855 0194                                u6875 01C1  
                              __CDS 002E             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 0020  
                              __PIR 00A0                                _Load 00CA  
                              _Temp 0039                                _main 0F29  
                              btemp 007E                     __end_of_WDT_Set 0B46  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0DAE        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0C5E  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0A82                  ?_setLights_Trigger 0051  
                  ??_setPIRLED_Main 0053                               ?_main 0063  
                   __end_of___awdiv 0F29                               _ADRES 001E  
                   ___awdiv@divisor 0051                               _T1CON 0010  
                   __end_of___lwdiv 0E2C                               i1l447 0BEB  
                   ___awdiv@counter 0055                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0B9D  
                             _Light 0077                 ??_setLights_Trigger 0052  
                  __end_of_PIR_Main 022F                    __end_of_TMR1_ISR 0BB3  
                  __end_of_TMR1_Set 0B38                               _getAD 0C79  
    __end_of_setSYSC_Initialization 0A9D      getLights_Allow_Condition@allow 0051  
           __end_of_getLight_LoadGO 0AA8                    __end_of_WDT_Main 0B77  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0AF7                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0B89  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 005E  
                 getPIR_AD@channel2 0059              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0057                      _setLights_Main 0D4A  
                    _setLights_Line 0B1C                     __initialization 0013  
                    _setLights_SwOn 0CD5                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0C79                        __end_of_main 0F8F  
                  __end_of_Fosc_Set 0AA2      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0547                           ??_ADC_Set 0074  
                            ??_main 0067               PIR_Main@Enable_Switch 005D  
               __end_of_Lights_Main 0CB3          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 07F7                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0053  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0DAE  
                            i1l3802 0BAD                              _FVRCON 009D  
            getLights_Status@lights 0051                              _PIRLED 002A  
                            _OSCCON 0090                  __size_of_Load_Main 01EA  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _IO_Set 0BF8                Exception_Main@i_2155 005D  
            getLights_Status@status 0052              __end_of_setLights_Main 0D7A  
            __end_of_setLights_Line 0B2A              __end_of_setLights_SwOn 0CFA  
      __size_of_SYSC_Initialization 0003          __end_of_Mcu_Initialization 0B55  
                            _Lights 0078                              _Timer1 0032  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 0609                Exception_Main@lights 0058  
                            ___wmul 0CFA                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 005A  
                            _setLED 0F8F                              _myMain 0025  
                  ___awdiv@quotient 0057                  __size_of_Temp_Main 0003  
              Load_Main@LightsCount 005F         __end_of_Load_Initialization 0A85  
   getLights_Allow_Condition@lights 0070                              saved_w 007E  
                  setLights_SwOn@sw 0054                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 0075                   __end_of_SYSC_Main 0A8B  
                    _Lights_Control 0609             __size_of_LedPointSelect 001A  
                         ?_CDS_Main 0070                  setTemp_Main@TempGO 0058  
                  ?_getLight_LoadGO 0070         __size_of_PIR_Initialization 000B  
           __end_of__initialization 0023                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0C2A  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 0B66                       __end_of_getAD 0C95  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 0B02  
                __size_of_getPIR_AD 012E                         _Lights_Main 0C95  
          _setLights_Initialization 0AB4                _getMain_Lights_Count 0AED  
                         ?_WDT_Main 0070                   __end_of_Load_Main 0419  
        __end_of_set_TimeoutCleared 0AB4                 ?_LED_Initialization 0070  
            __end_of_Lights_Control 068C                             ??_getAD 0075  
               _Temp_Initialization 0A8B                          ??_CDS_Main 0051  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                         ?_Fosc_Set 0070         __size_of_getAll_Lights_Line 0009  
                 __end_of_Temp_Main 0A91                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0074  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F29          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 0062  
                           ?___wmul 0051                          ??_PIR_Main 0057  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 007F                          _getLoad_AD 0E70  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 0AC2                             ?_setLED 0051  
           setLights_Trigger@lights 0053               ?_getMain_Lights_Count 0070  
                           _ADC_Set 0ABB                          _getTemp_AD 0D1F  
                        ??_WDT_Main 0074              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0070                   __end_of_getCDS_AD 0CD5  
                           _WDT_Set 0B38                       getPIR_AD@VRAD 0060  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 0547  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0C44  
    _getLights_Allow_Condition$4248 0052                     __size_of_IO_Set 0018  
                        getCDS_AD@i 0054                          getCDS_AD@j 0055  
                           _Lights1 0040                             _VarLED1 0049  
                           _VarLED2 004D               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0075                             ___awdiv 0ECC  
                   __size_of___wmul 0025                             ___lwdiv 0DEC  
        ??_getMain_All_LightsStatus 0074                         PIR_Main@cds 0061  
                   __size_of_setLED 0071                             __ptext0 0000  
                           __ptext1 0C44                             __ptext2 0A7E  
                           __ptext3 0D1F                             __ptext4 0419  
                           __ptext5 0E70                             __ptext6 0CB3  
                           __ptext7 0C79                             __ptext8 0AAE  
                           __ptext9 0B89                          getPIR_AD@i 0061  
                        getPIR_AD@j 005D                        __size_of_ISR 0018  
        ??_getMain_All_Error_Status 0074                 _SYSC_Initialization 0A85  
           ??_myMain_Initialization 0074            ??_setTemp_Initialization 0074  
                    _LedPointSelect 0C10                     getTemp_AD@ADRES 0054  
                           clrloop0 0AD3                   __end_of_setLights 070B  
              end_of_initialization 0023                       _getCDS_Status 0ACA  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0B77  
                 setLights_SwOff@sw 0054                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0004                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 0A99  
                       ?_getTemp_AD 0070            setLED_Initialization@led 0053  
           setTemp_Main@DangerValue 005A                  _Mcu_Initialization 0B46  
              __end_of_my_MainTimer 0C5E                __end_of_setSYSC_Main 0E70  
            __end_of_LedPointSelect 0C2A            Load_Main@ErrorCountValue 005D  
               setPIRLED_Main@count 0054                 ?_Mcu_Initialization 0070  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 0056  
                  ??_setLights_SwOn 0076                           _SYSC_Main 0A88  
   getMain_All_Error_Status@command 0055                   __size_of_CDS_Main 0034  
                    ?_getCDS_Status 0070                    ?_setLights_SwOff 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0057  
                    __end_of_IO_Set 0C10          __end_of_CDS_Initialization 0A95  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0D1F                   __size_of_PIR_Main 0209  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 1000  
          ??_setSYSC_Initialization 0074                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 022F  
                       __end_of_ISR 0BF8          __end_of_PIR_Initialization 0B02  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0AAE  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 0786                 __size_of_getLoad_AD 005C  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0AAE                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 0045  
               __size_of_getTemp_AD 002B              ?_setLED_Initialization 0070  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 0A8E                     setLights@lights 0055  
               ?_set_TimeoutCleared 0070                      ??_WDT_Clearing 0074  
       ??_getLights_Allow_Condition 0075                 Exception_Main@count 0059  
                   setLights@status 0053                 Exception_Main@error 005F  
                          ??___wmul 0074    __end_of_getMain_All_LightsStatus 0800  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 0059    __end_of_getMain_All_Error_Status 0DEC  
                       __pbssCOMMON 0076             Load_Main@Load_RunStatus 005E  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 0051                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 0AE3                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                       PIR_Main@error 005C  
                         _getCDS_AD 0CB3      __size_of_setLoad_AH_AL_Restore 0016  
     __end_of_setLoad_AH_AL_Restore 0BC9                           _getPIR_AD 0419  
       __size_of_LED_Initialization 000C                     Exception_Main@i 005B  
                        ?_Temp_Main 0070                    ___lwdiv@dividend 0053  
                    Load_Main@error 005A              _setTemp_Initialization 0A7D  
                     _PIR_Main$2874 005E                            ?___awdiv 0051  
             __size_of_my_MainTimer 001A                            ?___lwdiv 0051  
             __size_of_setSYSC_Main 0044            setLights_Trigger@command 0051  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0BC9  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 0A7F  
                    __size_of_getAD 001C                    ___lwdiv@quotient 0056  
                    _setPIRLED_Main 0786                            _CDS_Main 0D7A  
                       ??_SYSC_Main 0075         __end_of_Temp_Initialization 0A8E  
                 interrupt_function 0004                          ?_getCDS_AD 0051  
                    ___wmul@product 0074                            _LED_Main 0A7F  
                         _setLights 068C                           clear_ram0 0AD2  
  __end_of_setLights_Initialization 0ABB                        _my_MainTimer 0C44  
                        ?_getPIR_AD 0059                        _setSYSC_Main 0E2C  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 0060                            _PIR_Main 0026  
                      ??_getLoad_AD 0051                            _TMR1_ISR 0B9D  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0AA8  
                          _TMR1_Set 0B2A                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0051                            _WDT_Main 0B66  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 0051  
                    getPIR_AD@VRAD1 005F                __size_of_Lights_Main 001E  
             __size_of_setTemp_Main 007B                         ??_Load_Main 0058  
            __end_of_setPIRLED_Main 07F7      getMain_All_Error_Status@status 0056  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0009  
         ?_getMain_All_LightsStatus 0070                            _Fosc_Set 0A9D  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0ECC  
                __end_of_getLoad_OK 0ACA   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                          ?_setLights 0053  
                __end_of_getTemp_AD 0D4A              _setSYSC_Initialization 0A99  
                 getLoad_AD@channel 0053                   _DetectSYSC_Signal 0B0E  
                          _SwDetect 0038                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2142 0051       _getMain_All_Error_Status$2143 0053  
               _Load_Initialization 0A82                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0052               ?_getLight_Load_Status 0070  
                      _setTemp_Main 070B                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000A  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 0A91  
             _Lights_Initialization 0A95                   getTemp_AD@channel 0053  
                   ?_setPIRLED_Main 0070                     ___lwdiv@divisor 0051  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 0055                            __ptext10 0B66  
                          __ptext11 0002                            __ptext20 0026  
                          __ptext12 0A8E                            __ptext21 0ACA  
                          __ptext13 070B                            __ptext30 0AED  
                          __ptext22 0AF7                            __ptext14 0A8B  
                          __ptext31 0AA8                            __ptext23 0B46  
                          __ptext15 0A7D                            __ptext40 0B1C  
                          __ptext32 0AA2                            __ptext24 0B38  
                          __ptext16 0A88                            __ptext41 0BC9  
                          __ptext33 0CFA                            __ptext25 0B2A  
                          __ptext17 0E2C                            __ptext50 0B77  
                          __ptext42 0AC2                            __ptext34 0DEC  
                          __ptext26 0BF8                            __ptext18 0A85  
                          __ptext51 0547                            __ptext43 0609  
                          __ptext35 0A82                            __ptext27 0A9D  
                          __ptext19 0A99                            __ptext60 0DAE  
                          __ptext52 0CD5                            __ptext44 0ECC  
                          __ptext36 0BB3                            __ptext28 0ABB  
                          __ptext61 0ADA                            __ptext53 0B55  
                          __ptext45 0A95                            __ptext37 0C95  
                          __ptext29 022F                            __ptext62 0B0E  
                          __ptext54 0C2A                            __ptext46 0AB4  
                          __ptext38 0D4A                            __ptext63 0D7A  
                          __ptext55 0C5E                            __ptext47 0A7F  
                          __ptext39 068C                            __ptext64 0A91  
                          __ptext56 0AE3                            __ptext48 0786  
                          __ptext65 0BE0                            __ptext57 0F8F  
                          __ptext49 0B02                            __ptext66 0B9D  
                          __ptext58 0C10                            __ptext59 07F7  
         __size_of_getLights_Status 0011         __end_of_SYSC_Initialization 0A88  
           ??_setLED_Initialization 0076                         ??_getCDS_AD 0052  
                     setLED@command 0051           __end_of_DetectSYSC_Signal 0B1C  
                     __size_of_main 0066                         ??_getPIR_AD 005A  
                _PIR_Initialization 0AF7                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 001A  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 0063                            main@argv 0065  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
             ??_Load_Initialization 0076                Lights_Control@lights 005B  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0059  
                       ??_setLights 0054             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 0ADA  
                   getLoad_AD@ADRES 0056              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 0057                         getLoad_AD@j 0055  
                       getLoad_AD@k 0054             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E             __size_of_setLights_SwOn 0025  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00C2  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 0051  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0AE3  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0B89  
        __end_of_LED_Initialization 0B0E               __end_of_getCDS_Status 0AD2  
    __end_of_setTemp_Initialization 0A7E          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0AA2                   getCDS_AD@channel1 0056  
                 getCDS_AD@channel2 0051   __end_of_getLights_Allow_Condition 0BE0  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0BB3  
