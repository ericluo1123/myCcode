

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Mar 11 11:02:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0096                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0186                     	;# 
   149  018C                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0186                     	;# 
   218  018C                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0096                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009F                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0186                     	;# 
   287  018C                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0096                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009F                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0186                     	;# 
   356  018C                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0089                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0096                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009F                     	;# 
   415  0108                     	;# 
   416  0109                     	;# 
   417  010C                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0186                     	;# 
   425  018C                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  000E                     	;# 
   441  000F                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  001D                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  0087                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0096                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009F                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0186                     	;# 
   494  018C                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0096                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009F                     	;# 
   553  0108                     	;# 
   554  0109                     	;# 
   555  010C                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0186                     	;# 
   563  018C                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001D                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  0081                     	;# 
   599  0085                     	;# 
   600  0086                     	;# 
   601  0087                     	;# 
   602  0089                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  008F                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0096                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009F                     	;# 
   622  0108                     	;# 
   623  0109                     	;# 
   624  010C                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0186                     	;# 
   632  018C                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0089                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0093                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0096                     	;# 
   686  0098                     	;# 
   687  0099                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009F                     	;# 
   691  0108                     	;# 
   692  0109                     	;# 
   693  010C                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0186                     	;# 
   701  018C                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0089                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009F                     	;# 
   760  0108                     	;# 
   761  0109                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0185                     	;# 
   769  0186                     	;# 
   770  018C                     	;# 
   771  0000                     	;# 
   772  0001                     	;# 
   773  0002                     	;# 
   774  0003                     	;# 
   775  0004                     	;# 
   776  0005                     	;# 
   777  0006                     	;# 
   778  0007                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000D                     	;# 
   784  000E                     	;# 
   785  000E                     	;# 
   786  000F                     	;# 
   787  0010                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  0081                     	;# 
   806  0085                     	;# 
   807  0086                     	;# 
   808  0087                     	;# 
   809  0089                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0096                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009F                     	;# 
   829  0108                     	;# 
   830  0109                     	;# 
   831  010C                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0185                     	;# 
   838  0186                     	;# 
   839  018C                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  000E                     	;# 
   855  000F                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0015                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001B                     	;# 
   870  001C                     	;# 
   871  001D                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  0081                     	;# 
   875  0085                     	;# 
   876  0086                     	;# 
   877  0087                     	;# 
   878  0089                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  008F                     	;# 
   883  0090                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0093                     	;# 
   888  0094                     	;# 
   889  0095                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0096                     	;# 
   893  0098                     	;# 
   894  0099                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009F                     	;# 
   898  0108                     	;# 
   899  0109                     	;# 
   900  010C                     	;# 
   901  010C                     	;# 
   902  010D                     	;# 
   903  010D                     	;# 
   904  010E                     	;# 
   905  010F                     	;# 
   906  0185                     	;# 
   907  0186                     	;# 
   908  018C                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  000E                     	;# 
   924  000F                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0013                     	;# 
   929  0014                     	;# 
   930  0015                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0017                     	;# 
   934  0018                     	;# 
   935  0019                     	;# 
   936  001A                     	;# 
   937  001B                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  001D                     	;# 
   941  001E                     	;# 
   942  001F                     	;# 
   943  0081                     	;# 
   944  0085                     	;# 
   945  0086                     	;# 
   946  0087                     	;# 
   947  0089                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  008F                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0093                     	;# 
   956  0093                     	;# 
   957  0094                     	;# 
   958  0095                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0096                     	;# 
   962  0098                     	;# 
   963  0099                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009F                     	;# 
   967  0108                     	;# 
   968  0109                     	;# 
   969  010C                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  010F                     	;# 
   975  0185                     	;# 
   976  0186                     	;# 
   977  018C                     	;# 
   978  0000                     	;# 
   979  0001                     	;# 
   980  0002                     	;# 
   981  0003                     	;# 
   982  0004                     	;# 
   983  0005                     	;# 
   984  0006                     	;# 
   985  0007                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000D                     	;# 
   991  000E                     	;# 
   992  000E                     	;# 
   993  000F                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0013                     	;# 
   998  0014                     	;# 
   999  0015                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001D                     	;# 
  1010  001E                     	;# 
  1011  001F                     	;# 
  1012  0081                     	;# 
  1013  0085                     	;# 
  1014  0086                     	;# 
  1015  0087                     	;# 
  1016  0089                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0093                     	;# 
  1026  0094                     	;# 
  1027  0095                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0096                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009F                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0185                     	;# 
  1045  0186                     	;# 
  1046  018C                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000E                     	;# 
  1062  000F                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0013                     	;# 
  1067  0014                     	;# 
  1068  0015                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001D                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  0081                     	;# 
  1082  0085                     	;# 
  1083  0086                     	;# 
  1084  0087                     	;# 
  1085  0089                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  008F                     	;# 
  1090  0090                     	;# 
  1091  0091                     	;# 
  1092  0092                     	;# 
  1093  0093                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0096                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009F                     	;# 
  1105  0108                     	;# 
  1106  0109                     	;# 
  1107  010C                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  010F                     	;# 
  1113  0185                     	;# 
  1114  0186                     	;# 
  1115  018C                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  000E                     	;# 
  1131  000F                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  0081                     	;# 
  1151  0085                     	;# 
  1152  0086                     	;# 
  1153  0087                     	;# 
  1154  0089                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  008F                     	;# 
  1159  0090                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0093                     	;# 
  1163  0093                     	;# 
  1164  0094                     	;# 
  1165  0095                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0096                     	;# 
  1169  0098                     	;# 
  1170  0099                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009F                     	;# 
  1174  0108                     	;# 
  1175  0109                     	;# 
  1176  010C                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  010F                     	;# 
  1182  0185                     	;# 
  1183  0186                     	;# 
  1184  018C                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0096                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009C                     	;# 
  1241  009D                     	;# 
  1242  009F                     	;# 
  1243  0108                     	;# 
  1244  0109                     	;# 
  1245  010C                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010F                     	;# 
  1251  0185                     	;# 
  1252  0186                     	;# 
  1253  018C                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  000E                     	;# 
  1269  000F                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0015                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  001D                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  0081                     	;# 
  1289  0085                     	;# 
  1290  0086                     	;# 
  1291  0087                     	;# 
  1292  0089                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  008F                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0096                     	;# 
  1307  0098                     	;# 
  1308  0099                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009F                     	;# 
  1312  0108                     	;# 
  1313  0109                     	;# 
  1314  010C                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0185                     	;# 
  1321  0186                     	;# 
  1322  018C                     	;# 
  1323  001F                     _ADCON0	set	31
  1324  001E                     _ADRES	set	30
  1325  0005                     _PORTA	set	5
  1326  0006                     _PORTB	set	6
  1327  0007                     _PORTC	set	7
  1328  0010                     _T1CON	set	16
  1329  000F                     _TMR1H	set	15
  1330  000E                     _TMR1L	set	14
  1331  005F                     _GIE	set	95
  1332  00F9                     _GO_nDONE	set	249
  1333  005E                     _PEIE	set	94
  1334  002C                     _RA4	set	44
  1335  002D                     _RA5	set	45
  1336  0032                     _RB2	set	50
  1337  0033                     _RB3	set	51
  1338  0034                     _RB4	set	52
  1339  0035                     _RB5	set	53
  1340  0060                     _TMR1IF	set	96
  1341  009F                     _ADCON1	set	159
  1342  009D                     _FVRCON	set	157
  1343  0090                     _OSCCON	set	144
  1344  0085                     _TRISA	set	133
  1345  0086                     _TRISB	set	134
  1346  0087                     _TRISC	set	135
  1347  0095                     _WPUB	set	149
  1348  0408                     _PS0	set	1032
  1349  0409                     _PS1	set	1033
  1350  040A                     _PS2	set	1034
  1351  040B                     _PSA	set	1035
  1352  0460                     _TMR1IE	set	1120
  1353  0185                     _ANSELA	set	389
  1354  0186                     _ANSELB	set	390
  1355                           
  1356                           	psect	text0
  1357  0000                     __ptext0:	
  1358                           ; #config settings
  1359                           
  1360                           
  1361                           ;psect for function _TMR1_ISR
  1362  0000                     
  1363                           	psect	cinit
  1364  0013                     start_initialization:	
  1365  0013                     __initialization:	
  1366                           
  1367                           ; Clear objects allocated to COMMON
  1368  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1369  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1370  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1371  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1372                           
  1373                           ; Clear objects allocated to BANK0
  1374  0017  1383               	bcf	3,7	;select IRP bank0
  1375  0018  3020               	movlw	low __pbssBANK0
  1376  0019  0084               	movwf	4
  1377  001A  3051               	movlw	low (__pbssBANK0+49)
  1378  001B  118A  27F8  118A   	fcall	clear_ram0
  1379                           
  1380                           ; Clear objects allocated to BANK1
  1381  001E  30A0               	movlw	low __pbssBANK1
  1382  001F  0084               	movwf	4
  1383  0020  30E6               	movlw	low (__pbssBANK1+70)
  1384  0021  118A  27F8         	fcall	clear_ram0
  1385  0023                     end_of_initialization:	
  1386                           ;End of C runtime variable initialization code
  1387                           
  1388  0023                     __end_of__initialization:	
  1389  0023  0183               	clrf	3
  1390  0024  158A  2F29         	ljmp	_main	;jump to C main() function
  1391                           
  1392                           	psect	bssCOMMON
  1393  0076                     __pbssCOMMON:	
  1394  0076                     _LED:	
  1395  0076                     	ds	1
  1396  0077                     _Light:	
  1397  0077                     	ds	1
  1398  0078                     _Lights:	
  1399  0078                     	ds	1
  1400  0079                     _LightsControl:	
  1401  0079                     	ds	1
  1402                           
  1403                           	psect	bssBANK0
  1404  0020                     __pbssBANK0:	
  1405  0020                     _SYSC:	
  1406  0020                     	ds	5
  1407  0025                     _myMain:	
  1408  0025                     	ds	5
  1409  002A                     _PIRLED:	
  1410  002A                     	ds	4
  1411  002E                     __CDS:	
  1412  002E                     	ds	4
  1413  0032                     _Timer1:	
  1414  0032                     	ds	3
  1415  0035                     _WDT:	
  1416  0035                     	ds	2
  1417  0037                     _Cmd:	
  1418  0037                     	ds	1
  1419  0038                     _SwDetect:	
  1420  0038                     	ds	1
  1421  0039                     _Temp:	
  1422  0039                     	ds	7
  1423  0040                     _Lights1:	
  1424  0040                     	ds	5
  1425  0045                     _VarErrLED:	
  1426  0045                     	ds	4
  1427  0049                     _VarLED1:	
  1428  0049                     	ds	4
  1429  004D                     _VarLED2:	
  1430  004D                     	ds	4
  1431                           
  1432                           	psect	bssBANK1
  1433  00A0                     __pbssBANK1:	
  1434  00A0                     __PIR:	
  1435  00A0                     	ds	42
  1436  00CA                     _Load:	
  1437  00CA                     	ds	28
  1438                           
  1439                           	psect	clrtext
  1440  07F8                     clear_ram0:	
  1441                           ;	Called with FSR containing the base address, and
  1442                           ;	W with the last address+1
  1443                           
  1444  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1445  07F9                     clrloop0:	
  1446  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1447  07FA  0A84               	incf	4,f	;increment pointer
  1448  07FB  0604               	xorwf	4,w	;XOR with final address
  1449  07FC  1903               	btfsc	3,2	;have we reached the end yet?
  1450  07FD  3400               	retlw	0	;all done for this memory range, return
  1451  07FE  0604               	xorwf	4,w	;XOR again to restore value
  1452  07FF  2FF9               	goto	clrloop0	;do the next byte
  1453                           
  1454                           	psect	cstackCOMMON
  1455  0070                     __pcstackCOMMON:	
  1456  0070                     ?_setLED_Initialization:	
  1457  0070                     ?_setPIRLED_Main:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_Fosc_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_IO_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_TMR1_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_ADC_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_WDT_Set:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ??_TMR1_ISR:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_Timeout_Counter:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_set_TimeoutCleared:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_WDT_Clearing:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_myMain_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_SYSC_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Temp_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Load_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_Lights_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_PIR_Initialization:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_DetectSYSC_Signal:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getLoad_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_getTemp_AD:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_my_MainTimer:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_SYSC_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Temp_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Load_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_Lights_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_PIR_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_Exception_Main:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setLights_SwOn:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setLights_SwOff:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setLoad_AH_AL_Restore:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setTemp_Initialization:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setTemp_Main:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setSYSC_Initialization:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setSYSC_Main:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_setLights_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_setLights_Main:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_Lights_Control:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_setLights_Line:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_CDS_Initialization:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_CDS_Main:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LedPointSelect:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_LED_Initialization:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_LED_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_Mcu_Initialization:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ?_ISR:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ??_ISR:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_WDT_Main:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_LightsPointSelect:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_getLights_Status:	
  1602                           ; 0 bytes @ 0x0
  1603                           
  1604  0070                     ?_getAll_Lights_Line:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLight_LoadGO:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getLight_Load_Status:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getLights_Allow_Condition:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getCDS_Status:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_All_LightsStatus:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getMain_All_Error_Status:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_getMain_Lights_Count:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_getLoad_OK:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     getLights_Allow_Condition@lights:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634                           
  1635                           ; 1 bytes @ 0x0
  1636  0070                     	ds	4
  1637  0074                     ??_Fosc_Set:	
  1638  0074                     ??_IO_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_TMR1_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_ADC_Set:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_WDT_Set:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_Timeout_Counter:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_set_TimeoutCleared:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_WDT_Clearing:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_myMain_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_SYSC_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_Temp_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_PIR_Initialization:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_DetectSYSC_Signal:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_my_MainTimer:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getAll_Lights_Line:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_setLoad_AH_AL_Restore:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_getLight_LoadGO:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_getLight_Load_Status:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_setTemp_Initialization:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_setSYSC_Initialization:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_setLights_Line:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_CDS_Initialization:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_getCDS_Status:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_LedPointSelect:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_WDT_Main:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getMain_All_LightsStatus:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_getMain_All_Error_Status:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??_getMain_Lights_Count:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??_getLoad_OK:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ??_LightsPointSelect:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     ??___wmul:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0074                     ??___awdiv:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0074                     ??___lwdiv:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0074                     ?_getAD:	
  1735                           ; 0 bytes @ 0x4
  1736                           
  1737  0074                     getCDS_Status@status:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     getAD@adcon1:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getMain_All_LightsStatus@status:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     getMain_Lights_Count@count:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749  0074                     getLoad_OK@ok:	
  1750                           ; 1 bytes @ 0x4
  1751                           
  1752  0074                     setLights_Line@lights:	
  1753                           ; 1 bytes @ 0x4
  1754                           
  1755  0074                     getAll_Lights_Line@line:	
  1756                           ; 1 bytes @ 0x4
  1757                           
  1758  0074                     getLight_LoadGO@loadgo:	
  1759                           ; 1 bytes @ 0x4
  1760                           
  1761  0074                     getLight_Load_Status@loadstatus:	
  1762                           ; 1 bytes @ 0x4
  1763                           
  1764  0074                     ___wmul@product:	
  1765                           ; 1 bytes @ 0x4
  1766                           
  1767                           
  1768                           ; 2 bytes @ 0x4
  1769  0074                     	ds	1
  1770  0075                     ??_getAD:	
  1771  0075                     ??_SYSC_Main:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     ??_setTemp_Main:	
  1775                           ; 0 bytes @ 0x5
  1776                           
  1777  0075                     ??_setSYSC_Main:	
  1778                           ; 0 bytes @ 0x5
  1779                           
  1780  0075                     ??_getLights_Allow_Condition:	
  1781                           ; 0 bytes @ 0x5
  1782                           
  1783  0075                     ??_Mcu_Initialization:	
  1784                           ; 0 bytes @ 0x5
  1785                           
  1786  0075                     LedPointSelect@led:	
  1787                           ; 0 bytes @ 0x5
  1788                           
  1789  0075                     getAD@adcon0:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792  0075                     getMain_Lights_Count@status1:	
  1793                           ; 1 bytes @ 0x5
  1794                           
  1795  0075                     setLoad_AH_AL_Restore@i:	
  1796                           ; 1 bytes @ 0x5
  1797                           
  1798  0075                     LightsPointSelect@lights:	
  1799                           ; 1 bytes @ 0x5
  1800                           
  1801                           
  1802                           ; 1 bytes @ 0x5
  1803  0075                     	ds	1
  1804  0076                     ??_setLED_Initialization:	
  1805  0076                     ??_setLED:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_Load_Initialization:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_Lights_Initialization:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_Temp_Main:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_Lights_Main:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_getLights_Status:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823  0076                     ??_setLights_SwOn:	
  1824                           ; 0 bytes @ 0x6
  1825                           
  1826  0076                     ??_setLights_SwOff:	
  1827                           ; 0 bytes @ 0x6
  1828                           
  1829  0076                     ??_setLights_Initialization:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0076                     ??_setLights_Main:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835  0076                     ??_LED_Initialization:	
  1836                           ; 0 bytes @ 0x6
  1837                           
  1838  0076                     ??_LED_Main:	
  1839                           ; 0 bytes @ 0x6
  1840                           
  1841                           
  1842                           	psect	cstackBANK0
  1843  0051                     __pcstackBANK0:	
  1844                           ; 0 bytes @ 0x6
  1845                           
  1846  0051                     ?_setLED:	
  1847  0051                     ??_getLoad_AD:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  0051                     ??_getTemp_AD:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  0051                     ??_CDS_Main:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  0051                     ?_getCDS_AD:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  0051                     ?_setLights_Trigger:	
  1860                           ; 0 bytes @ 0x0
  1861                           
  1862  0051                     ?___wmul:	
  1863                           ; 0 bytes @ 0x0
  1864                           
  1865  0051                     ?___awdiv:	
  1866                           ; 2 bytes @ 0x0
  1867                           
  1868  0051                     ?___lwdiv:	
  1869                           ; 2 bytes @ 0x0
  1870                           
  1871  0051                     getCDS_AD@channel2:	
  1872                           ; 2 bytes @ 0x0
  1873                           
  1874  0051                     setLED@command:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0051                     setLights_Initialization@lights:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  0051                     getLights_Status@lights:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  0051                     setLights_Trigger@command:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  0051                     getLights_Allow_Condition@allow:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  0051                     _getMain_All_Error_Status$2142:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892  0051                     ___wmul@multiplier:	
  1893                           ; 2 bytes @ 0x0
  1894                           
  1895  0051                     ___awdiv@divisor:	
  1896                           ; 2 bytes @ 0x0
  1897                           
  1898  0051                     ___lwdiv@divisor:	
  1899                           ; 2 bytes @ 0x0
  1900                           
  1901                           
  1902                           ; 2 bytes @ 0x0
  1903  0051                     	ds	1
  1904  0052                     ??_getCDS_AD:	
  1905  0052                     ??_setLights_Trigger:	
  1906                           ; 0 bytes @ 0x1
  1907                           
  1908  0052                     setLED@led:	
  1909                           ; 0 bytes @ 0x1
  1910                           
  1911  0052                     getLights_Status@status:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914  0052                     _getLights_Allow_Condition$4248:	
  1915                           ; 1 bytes @ 0x1
  1916                           
  1917                           
  1918                           ; 1 bytes @ 0x1
  1919  0052                     	ds	1
  1920  0053                     ??_setPIRLED_Main:	
  1921  0053                     ?_setLights:	
  1922                           ; 0 bytes @ 0x2
  1923                           
  1924  0053                     setLED_Initialization@led:	
  1925                           ; 0 bytes @ 0x2
  1926                           
  1927  0053                     getLoad_AD@channel:	
  1928                           ; 1 bytes @ 0x2
  1929                           
  1930  0053                     getTemp_AD@channel:	
  1931                           ; 1 bytes @ 0x2
  1932                           
  1933  0053                     setLights@status:	
  1934                           ; 1 bytes @ 0x2
  1935                           
  1936  0053                     setLights_Trigger@lights:	
  1937                           ; 1 bytes @ 0x2
  1938                           
  1939  0053                     _getMain_All_Error_Status$2143:	
  1940                           ; 1 bytes @ 0x2
  1941                           
  1942  0053                     ___wmul@multiplicand:	
  1943                           ; 2 bytes @ 0x2
  1944                           
  1945  0053                     ___awdiv@dividend:	
  1946                           ; 2 bytes @ 0x2
  1947                           
  1948  0053                     ___lwdiv@dividend:	
  1949                           ; 2 bytes @ 0x2
  1950                           
  1951                           
  1952                           ; 2 bytes @ 0x2
  1953  0053                     	ds	1
  1954  0054                     ??_setLights:	
  1955  0054                     getCDS_AD@i:	
  1956                           ; 0 bytes @ 0x3
  1957                           
  1958  0054                     setPIRLED_Main@count:	
  1959                           ; 1 bytes @ 0x3
  1960                           
  1961  0054                     getLoad_AD@k:	
  1962                           ; 1 bytes @ 0x3
  1963                           
  1964  0054                     getTemp_AD@ADRES:	
  1965                           ; 1 bytes @ 0x3
  1966                           
  1967  0054                     setLights_SwOn@sw:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970  0054                     setLights_SwOff@sw:	
  1971                           ; 1 bytes @ 0x3
  1972                           
  1973                           
  1974                           ; 1 bytes @ 0x3
  1975  0054                     	ds	1
  1976  0055                     getCDS_AD@j:	
  1977  0055                     getMain_All_Error_Status@command:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0055                     getLoad_AD@j:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983  0055                     setLights@lights:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986  0055                     ___awdiv@counter:	
  1987                           ; 1 bytes @ 0x4
  1988                           
  1989  0055                     ___lwdiv@counter:	
  1990                           ; 1 bytes @ 0x4
  1991                           
  1992                           
  1993                           ; 1 bytes @ 0x4
  1994  0055                     	ds	1
  1995  0056                     getCDS_AD@channel1:	
  1996  0056                     getMain_All_Error_Status@status:	
  1997                           ; 1 bytes @ 0x5
  1998                           
  1999  0056                     getLoad_AD@ADRES:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002  0056                     setLights_Main@lights:	
  2003                           ; 1 bytes @ 0x5
  2004                           
  2005  0056                     ___awdiv@sign:	
  2006                           ; 1 bytes @ 0x5
  2007                           
  2008  0056                     ___lwdiv@quotient:	
  2009                           ; 1 bytes @ 0x5
  2010                           
  2011                           
  2012                           ; 2 bytes @ 0x5
  2013  0056                     	ds	1
  2014  0057                     ??_PIR_Main:	
  2015  0057                     ??_Exception_Main:	
  2016                           ; 0 bytes @ 0x6
  2017                           
  2018  0057                     getLoad_AD@i:	
  2019                           ; 0 bytes @ 0x6
  2020                           
  2021  0057                     setTemp_Main@error:	
  2022                           ; 1 bytes @ 0x6
  2023                           
  2024  0057                     ___awdiv@quotient:	
  2025                           ; 1 bytes @ 0x6
  2026                           
  2027                           
  2028                           ; 2 bytes @ 0x6
  2029  0057                     	ds	1
  2030  0058                     ??_Load_Main:	
  2031  0058                     Exception_Main@lights:	
  2032                           ; 0 bytes @ 0x7
  2033                           
  2034  0058                     setTemp_Main@TempGO:	
  2035                           ; 1 bytes @ 0x7
  2036                           
  2037                           
  2038                           ; 1 bytes @ 0x7
  2039  0058                     	ds	1
  2040  0059                     ?_getPIR_AD:	
  2041  0059                     ??_Lights_Control:	
  2042                           ; 0 bytes @ 0x8
  2043                           
  2044  0059                     Exception_Main@count:	
  2045                           ; 0 bytes @ 0x8
  2046                           
  2047  0059                     setTemp_Main@SafeValue:	
  2048                           ; 1 bytes @ 0x8
  2049                           
  2050  0059                     getPIR_AD@channel2:	
  2051                           ; 1 bytes @ 0x8
  2052                           
  2053                           
  2054                           ; 1 bytes @ 0x8
  2055  0059                     	ds	1
  2056  005A                     ??_getPIR_AD:	
  2057  005A                     Exception_Main@status:	
  2058                           ; 0 bytes @ 0x9
  2059                           
  2060  005A                     Load_Main@error:	
  2061                           ; 1 bytes @ 0x9
  2062                           
  2063  005A                     setTemp_Main@DangerValue:	
  2064                           ; 1 bytes @ 0x9
  2065                           
  2066                           
  2067                           ; 1 bytes @ 0x9
  2068  005A                     	ds	1
  2069  005B                     setTemp_Main@AD:	
  2070  005B                     Lights_Control@lights:	
  2071                           ; 1 bytes @ 0xA
  2072                           
  2073  005B                     Exception_Main@i:	
  2074                           ; 1 bytes @ 0xA
  2075                           
  2076  005B                     _Load_Main$2405:	
  2077                           ; 2 bytes @ 0xA
  2078                           
  2079                           
  2080                           ; 2 bytes @ 0xA
  2081  005B                     	ds	1
  2082  005C                     PIR_Main@error:	
  2083                           
  2084                           ; 1 bytes @ 0xB
  2085  005C                     	ds	1
  2086  005D                     Load_Main@ErrorCountValue:	
  2087  005D                     PIR_Main@cds:	
  2088                           ; 1 bytes @ 0xC
  2089                           
  2090  005D                     getPIR_AD@j:	
  2091                           ; 1 bytes @ 0xC
  2092                           
  2093  005D                     Exception_Main@i_2155:	
  2094                           ; 1 bytes @ 0xC
  2095                           
  2096                           
  2097                           ; 2 bytes @ 0xC
  2098  005D                     	ds	1
  2099  005E                     Load_Main@Load_RunStatus:	
  2100  005E                     PIR_Main@Enable_Switch:	
  2101                           ; 1 bytes @ 0xD
  2102                           
  2103  005E                     getPIR_AD@channel1:	
  2104                           ; 1 bytes @ 0xD
  2105                           
  2106                           
  2107                           ; 1 bytes @ 0xD
  2108  005E                     	ds	1
  2109  005F                     Exception_Main@error:	
  2110  005F                     Load_Main@LightsCount:	
  2111                           ; 1 bytes @ 0xE
  2112                           
  2113  005F                     getPIR_AD@VRAD1:	
  2114                           ; 1 bytes @ 0xE
  2115                           
  2116  005F                     _PIR_Main$2874:	
  2117                           ; 1 bytes @ 0xE
  2118                           
  2119                           
  2120                           ; 2 bytes @ 0xE
  2121  005F                     	ds	1
  2122  0060                     getPIR_AD@VRAD:	
  2123  0060                     Load_Main@i:	
  2124                           ; 1 bytes @ 0xF
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0xF
  2128  0060                     	ds	1
  2129  0061                     PIR_Main@TriggerValue:	
  2130  0061                     getPIR_AD@i:	
  2131                           ; 1 bytes @ 0x10
  2132                           
  2133                           
  2134                           ; 1 bytes @ 0x10
  2135  0061                     	ds	1
  2136  0062                     PIR_Main@LightsStatus:	
  2137                           
  2138                           ; 1 bytes @ 0x11
  2139  0062                     	ds	1
  2140  0063                     ?_main:	
  2141  0063                     main@argc:	
  2142                           ; 2 bytes @ 0x12
  2143                           
  2144                           
  2145                           ; 2 bytes @ 0x12
  2146  0063                     	ds	2
  2147  0065                     main@argv:	
  2148                           
  2149                           ; 2 bytes @ 0x14
  2150  0065                     	ds	2
  2151  0067                     ??_main:	
  2152                           
  2153                           ; 0 bytes @ 0x16
  2154  0067                     	ds	1
  2155                           
  2156                           	psect	maintext
  2157  0F29                     __pmaintext:	
  2158 ;;
  2159 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2160 ;;
  2161 ;; *************** function _main *****************
  2162 ;; Defined at:
  2163 ;;		line 7 in file "../src/Main_B1.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  argc            2   18[BANK0 ] int 
  2166 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  2   18[BANK0 ] int 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 17F/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2178 ;;      Params:         0       4       0       0
  2179 ;;      Locals:         0       0       0       0
  2180 ;;      Temps:          0       1       0       0
  2181 ;;      Totals:         0       5       0       0
  2182 ;;Total ram usage:        5 bytes
  2183 ;; Hardware stack levels required when called:    7
  2184 ;; This function calls:
  2185 ;;		_CDS_Initialization
  2186 ;;		_CDS_Main
  2187 ;;		_DetectSYSC_Signal
  2188 ;;		_Exception_Main
  2189 ;;		_LED_Initialization
  2190 ;;		_LED_Main
  2191 ;;		_Lights_Initialization
  2192 ;;		_Lights_Main
  2193 ;;		_Load_Initialization
  2194 ;;		_Load_Main
  2195 ;;		_Mcu_Initialization
  2196 ;;		_PIR_Initialization
  2197 ;;		_PIR_Main
  2198 ;;		_SYSC_Initialization
  2199 ;;		_SYSC_Main
  2200 ;;		_Temp_Initialization
  2201 ;;		_Temp_Main
  2202 ;;		_WDT_Main
  2203 ;;		_getCDS_AD
  2204 ;;		_getLoad_AD
  2205 ;;		_getPIR_AD
  2206 ;;		_getTemp_AD
  2207 ;;		_myMain_Initialization
  2208 ;;		_my_MainTimer
  2209 ;; This function is called by:
  2210 ;;		Startup code after reset
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           
  2215                           ;psect for function _main
  2216  0F29                     _main:	
  2217                           
  2218                           ;Main_B1.c: 8: myMain_Initialization();
  2219                           
  2220                           ;incstack = 0
  2221                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2222  0F29  158A  2289  158A   	fcall	_myMain_Initialization
  2223                           
  2224                           ;Main_B1.c: 9: Mcu_Initialization();
  2225  0F2C  158A  2352  158A   	fcall	_Mcu_Initialization
  2226                           
  2227                           ;Main_B1.c: 10: ;;
  2228                           ;Main_B1.c: 11: LED_Initialization();
  2229  0F2F  158A  230E  158A   	fcall	_LED_Initialization
  2230                           
  2231                           ;Main_B1.c: 12: ;;
  2232                           ;Main_B1.c: 14: SYSC_Initialization();
  2233  0F32  158A  2290  158A   	fcall	_SYSC_Initialization
  2234                           
  2235                           ;Main_B1.c: 15: Temp_Initialization();
  2236  0F35  158A  2296  158A   	fcall	_Temp_Initialization
  2237                           
  2238                           ;Main_B1.c: 16: Load_Initialization();
  2239  0F38  158A  228D  158A   	fcall	_Load_Initialization
  2240                           
  2241                           ;Main_B1.c: 17: ;;
  2242                           ;Main_B1.c: 18: ;;
  2243                           ;Main_B1.c: 20: ;;
  2244                           ;Main_B1.c: 21: Lights_Initialization();
  2245  0F3B  158A  22A0  158A   	fcall	_Lights_Initialization
  2246                           
  2247                           ;Main_B1.c: 22: CDS_Initialization();
  2248  0F3E  158A  229C  158A   	fcall	_CDS_Initialization
  2249                           
  2250                           ;Main_B1.c: 23: PIR_Initialization();
  2251  0F41  158A  2303  158A   	fcall	_PIR_Initialization
  2252  0F44                     l5454:	
  2253                           ;Main_B1.c: 24: ;;
  2254                           ;Main_B1.c: 25: ;;
  2255                           ;Main_B1.c: 26: ;;
  2256                           ;Main_B1.c: 27: ;;
  2257                           ;Main_B1.c: 28: ;;
  2258                           ;Main_B1.c: 30: while (1) {
  2259                           
  2260                           
  2261                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2262  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0F46  1C25               	btfss	_myMain,0
  2265  0F47  2F67               	goto	l5466
  2266                           
  2267                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2268  0F48  158A  231A  158A   	fcall	_DetectSYSC_Signal
  2269                           
  2270                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2271  0F4B  3001               	movlw	1
  2272  0F4C  158A  2670  158A   	fcall	_getLoad_AD
  2273                           
  2274                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2275  0F4F  3011               	movlw	17
  2276  0F50  158A  24BF  158A   	fcall	_getTemp_AD
  2277                           
  2278                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2279  0F53  3031               	movlw	49
  2280  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2281  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2282  0F56  00E7               	movwf	??_main
  2283  0F57  0867               	movf	??_main,w
  2284  0F58  00D1               	movwf	getCDS_AD@channel2
  2285  0F59  3009               	movlw	9
  2286  0F5A  158A  24DE  158A   	fcall	_getCDS_AD
  2287                           
  2288                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2289  0F5D  300D               	movlw	13
  2290  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0F60  00E7               	movwf	??_main
  2293  0F61  0867               	movf	??_main,w
  2294  0F62  00D9               	movwf	getPIR_AD@channel2
  2295  0F63  3005               	movlw	5
  2296  0F64  118A  241A  158A   	fcall	_getPIR_AD
  2297  0F67                     l5466:	
  2298                           
  2299                           ;Main_B1.c: 57: }
  2300                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2301  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2302  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2303  0F69  1C32               	btfss	_Timer1,0
  2304  0F6A  2F44               	goto	l5454
  2305                           
  2306                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2307  0F6B  1032               	bcf	_Timer1,0
  2308                           
  2309                           ;Main_B1.c: 96: my_MainTimer();
  2310  0F6C  158A  2450  158A   	fcall	_my_MainTimer
  2311                           
  2312                           ;Main_B1.c: 97: WDT_Main();
  2313  0F6F  158A  2372  158A   	fcall	_WDT_Main
  2314                           
  2315                           ;Main_B1.c: 98: ;;
  2316                           ;Main_B1.c: 99: ;;
  2317                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2318  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2319  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2320  0F74  1C25               	btfss	_myMain,0
  2321  0F75  2F44               	goto	l5454
  2322                           
  2323                           ;Main_B1.c: 101: ;;
  2324                           ;Main_B1.c: 103: LED_Main();
  2325  0F76  158A  228A  158A   	fcall	_LED_Main
  2326                           
  2327                           ;Main_B1.c: 104: ;;
  2328                           ;Main_B1.c: 106: SYSC_Main();
  2329  0F79  158A  2293  158A   	fcall	_SYSC_Main
  2330                           
  2331                           ;Main_B1.c: 107: Temp_Main();
  2332  0F7C  158A  2299  158A   	fcall	_Temp_Main
  2333                           
  2334                           ;Main_B1.c: 108: Load_Main();
  2335  0F7F  118A  2230  158A   	fcall	_Load_Main
  2336                           
  2337                           ;Main_B1.c: 109: ;;
  2338                           ;Main_B1.c: 111: Lights_Main();
  2339  0F82  158A  24A1  158A   	fcall	_Lights_Main
  2340                           
  2341                           ;Main_B1.c: 112: ;;
  2342                           ;Main_B1.c: 113: ;;
  2343                           ;Main_B1.c: 114: CDS_Main();
  2344  0F85  158A  257A  158A   	fcall	_CDS_Main
  2345                           
  2346                           ;Main_B1.c: 115: PIR_Main();
  2347  0F88  118A  2026  158A   	fcall	_PIR_Main
  2348                           
  2349                           ;Main_B1.c: 117: ;;
  2350                           ;Main_B1.c: 118: ;;
  2351                           ;Main_B1.c: 119: ;;
  2352                           ;Main_B1.c: 120: ;;
  2353                           ;Main_B1.c: 121: Exception_Main();
  2354  0F8B  118A  2548  158A   	fcall	_Exception_Main
  2355  0F8E  2F44               	goto	l5454
  2356  0F8F                     __end_of_main:	
  2357                           ;Main_B1.c: 128: }
  2358                           ;Main_B1.c: 129: }
  2359                           ;Main_B1.c: 163: }
  2360                           ;Main_B1.c: 164: return (0);
  2361                           ;	Return value of _main is never used
  2362                           
  2363                           
  2364                           	psect	text1
  2365  0C50                     __ptext1:	
  2366 ;; *************** function _my_MainTimer *****************
  2367 ;; Defined at:
  2368 ;;		line 185 in file "../src/Main_B1.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2382 ;;      Params:         0       0       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          1       0       0       0
  2385 ;;      Totals:         1       0       0       0
  2386 ;;Total ram usage:        1 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    2
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           
  2397                           ;psect for function _my_MainTimer
  2398  0C50                     _my_MainTimer:	
  2399                           
  2400                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2401                           
  2402                           ;incstack = 0
  2403                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2404  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  2406  0C52  1825               	btfsc	_myMain,0
  2407  0C53  2C60               	goto	l3980
  2408                           
  2409                           ;Main_B1.c: 188: myMain.PowerCount++;
  2410  0C54  3001               	movlw	1
  2411  0C55  00F4               	movwf	??_my_MainTimer
  2412  0C56  0874               	movf	??_my_MainTimer,w
  2413  0C57  07A6               	addwf	_myMain+1,f
  2414                           
  2415                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2416  0C58  0826               	movf	_myMain+1,w
  2417  0C59  3A4B               	xorlw	75
  2418  0C5A  1D03               	skipz
  2419  0C5B  0008               	return
  2420                           
  2421                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2422  0C5C  01A6               	clrf	_myMain+1
  2423                           
  2424                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2425  0C5D  1425               	bsf	_myMain,0
  2426                           
  2427                           ;Main_B1.c: 196: ;;
  2428                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2429  0C5E  1625               	bsf	_myMain,4
  2430                           
  2431                           ;Main_B1.c: 206: }
  2432                           ;Main_B1.c: 207: } else {
  2433  0C5F  0008               	return
  2434  0C60                     l3980:	
  2435                           
  2436                           ;Main_B1.c: 208: myMain.PowerCount++;
  2437  0C60  3001               	movlw	1
  2438  0C61  00F4               	movwf	??_my_MainTimer
  2439  0C62  0874               	movf	??_my_MainTimer,w
  2440  0C63  07A6               	addwf	_myMain+1,f
  2441                           
  2442                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2443  0C64  0826               	movf	_myMain+1,w
  2444  0C65  3A32               	xorlw	50
  2445  0C66  1D03               	skipz
  2446  0C67  0008               	return
  2447                           
  2448                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2449  0C68  01A6               	clrf	_myMain+1
  2450  0C69  0008               	return
  2451  0C6A                     __end_of_my_MainTimer:	
  2452                           
  2453                           	psect	text2
  2454  0A89                     __ptext2:	
  2455 ;; *************** function _myMain_Initialization *****************
  2456 ;; Defined at:
  2457 ;;		line 170 in file "../src/Main_B1.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		None
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2471 ;;      Params:         0       0       0       0
  2472 ;;      Locals:         0       0       0       0
  2473 ;;      Temps:          0       0       0       0
  2474 ;;      Totals:         0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    2
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _myMain_Initialization
  2487  0A89                     _myMain_Initialization:	
  2488                           
  2489                           ;incstack = 0
  2490                           ; Regs used in _myMain_Initialization: []
  2491  0A89  0008               	return
  2492  0A8A                     __end_of_myMain_Initialization:	
  2493                           
  2494                           	psect	text3
  2495  0CBF                     __ptext3:	
  2496 ;; *************** function _getTemp_AD *****************
  2497 ;; Defined at:
  2498 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  channel         1    wreg     unsigned char 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  channel         1    2[BANK0 ] unsigned char 
  2503 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       2       0       0
  2515 ;;      Temps:          0       2       0       0
  2516 ;;      Totals:         0       4       0       0
  2517 ;;Total ram usage:        4 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		_getAD
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _getTemp_AD
  2529  0CBF                     _getTemp_AD:	
  2530                           
  2531                           ;incstack = 0
  2532                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2533                           ;getTemp_AD@channel stored from wreg
  2534  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  2535  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  2536  0CC1  00D3               	movwf	getTemp_AD@channel
  2537                           
  2538                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2539  0CC2  01D4               	clrf	getTemp_AD@ADRES
  2540                           
  2541                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2542  0CC3  1D39               	btfss	_Temp,2
  2543  0CC4  0008               	return
  2544                           
  2545                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2546  0CC5  3070               	movlw	112
  2547  0CC6  00D1               	movwf	??_getTemp_AD
  2548  0CC7  0851               	movf	??_getTemp_AD,w
  2549  0CC8  00F4               	movwf	getAD@adcon1
  2550  0CC9  0853               	movf	getTemp_AD@channel,w
  2551  0CCA  158A  2485  158A   	fcall	_getAD
  2552  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0CCE  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0CCF  00D2               	movwf	??_getTemp_AD+1
  2555  0CD0  0852               	movf	??_getTemp_AD+1,w
  2556  0CD1  00D4               	movwf	getTemp_AD@ADRES
  2557                           
  2558                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2559  0CD2  0854               	movf	getTemp_AD@ADRES,w
  2560  0CD3  1903               	btfsc	3,2
  2561  0CD4  0008               	return
  2562                           
  2563                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2564  0CD5  0854               	movf	getTemp_AD@ADRES,w
  2565  0CD6  023F               	subwf	_Temp+6,w
  2566  0CD7  1803               	skipnc
  2567  0CD8  0008               	return
  2568                           
  2569                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2570  0CD9  0854               	movf	getTemp_AD@ADRES,w
  2571  0CDA  00D1               	movwf	??_getTemp_AD
  2572  0CDB  0851               	movf	??_getTemp_AD,w
  2573  0CDC  00BF               	movwf	_Temp+6
  2574  0CDD  0008               	return
  2575  0CDE                     __end_of_getTemp_AD:	
  2576                           
  2577                           	psect	text4
  2578  041A                     __ptext4:	
  2579 ;; *************** function _getPIR_AD *****************
  2580 ;; Defined at:
  2581 ;;		line 348 in file "../src/PIR_B1.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  channel1        1    wreg     unsigned char 
  2584 ;;  channel2        1    8[BANK0 ] unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  channel1        1   13[BANK0 ] unsigned char 
  2587 ;;  i               1   16[BANK0 ] unsigned char 
  2588 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2589 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2590 ;;  j               1   12[BANK0 ] unsigned char 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;		None               void
  2593 ;; Registers used:
  2594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2600 ;;      Params:         0       1       0       0
  2601 ;;      Locals:         0       5       0       0
  2602 ;;      Temps:          0       3       0       0
  2603 ;;      Totals:         0       9       0       0
  2604 ;;Total ram usage:        9 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    4
  2607 ;; This function calls:
  2608 ;;		___awdiv
  2609 ;;		___lwdiv
  2610 ;;		_getAD
  2611 ;; This function is called by:
  2612 ;;		_main
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _getPIR_AD
  2618  041A                     _getPIR_AD:	
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2622                           ;getPIR_AD@channel1 stored from wreg
  2623  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2624  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2625  041C  00DE               	movwf	getPIR_AD@channel1
  2626                           
  2627                           ;PIR_B1.c: 349: char i = 0, j = 0;
  2628  041D  01E1               	clrf	getPIR_AD@i
  2629  041E  01DD               	clrf	getPIR_AD@j
  2630                           
  2631                           ;PIR_B1.c: 350: char VRAD = 0, VRAD1 = 0;
  2632  041F  01E0               	clrf	getPIR_AD@VRAD
  2633  0420  01DF               	clrf	getPIR_AD@VRAD1
  2634                           
  2635                           ;PIR_B1.c: 351: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2636  0421  1683               	bsf	3,5	;RP0=1, select bank1
  2637  0422  1303               	bcf	3,6	;RP1=0, select bank1
  2638  0423  1CA0               	btfss	__PIR^(0+128),1
  2639  0424  0008               	return
  2640  0425  1920               	btfsc	__PIR^(0+128),2
  2641  0426  0008               	return
  2642                           
  2643                           ;PIR_B1.c: 352: _PIR.GO = 1;
  2644  0427  1520               	bsf	__PIR^(0+128),2
  2645                           
  2646                           ;PIR_B1.c: 359: VRAD1 = getAD(channel1, 0x70);
  2647  0428  3070               	movlw	112
  2648  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2649  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2650  042B  00DA               	movwf	??_getPIR_AD
  2651  042C  085A               	movf	??_getPIR_AD,w
  2652  042D  00F4               	movwf	getAD@adcon1
  2653  042E  085E               	movf	getPIR_AD@channel1,w
  2654  042F  158A  2485  118A   	fcall	_getAD
  2655  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0434  00DB               	movwf	??_getPIR_AD+1
  2658  0435  085B               	movf	??_getPIR_AD+1,w
  2659  0436  00DF               	movwf	getPIR_AD@VRAD1
  2660                           
  2661                           ;PIR_B1.c: 360: VRAD = VRAD1 / 25;
  2662  0437  3019               	movlw	25
  2663  0438  00D1               	movwf	___awdiv@divisor
  2664  0439  3000               	movlw	0
  2665  043A  00D2               	movwf	___awdiv@divisor+1
  2666  043B  085F               	movf	getPIR_AD@VRAD1,w
  2667  043C  00DA               	movwf	??_getPIR_AD
  2668  043D  01DB               	clrf	??_getPIR_AD+1
  2669  043E  085A               	movf	??_getPIR_AD,w
  2670  043F  00D3               	movwf	___awdiv@dividend
  2671  0440  085B               	movf	??_getPIR_AD+1,w
  2672  0441  00D4               	movwf	___awdiv@dividend+1
  2673  0442  158A  26CC  118A   	fcall	___awdiv
  2674  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0447  0851               	movf	?___awdiv,w
  2677  0448  00DC               	movwf	??_getPIR_AD+2
  2678  0449  085C               	movf	??_getPIR_AD+2,w
  2679  044A  00E0               	movwf	getPIR_AD@VRAD
  2680                           
  2681                           ;PIR_B1.c: 361: _PIR.SignalAD = getAD(channel2, 0x70);
  2682  044B  3070               	movlw	112
  2683  044C  00DA               	movwf	??_getPIR_AD
  2684  044D  085A               	movf	??_getPIR_AD,w
  2685  044E  00F4               	movwf	getAD@adcon1
  2686  044F  0859               	movf	getPIR_AD@channel2,w
  2687  0450  158A  2485  118A   	fcall	_getAD
  2688  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0455  00DB               	movwf	??_getPIR_AD+1
  2691  0456  085B               	movf	??_getPIR_AD+1,w
  2692  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2693  0458  1303               	bcf	3,6	;RP1=0, select bank1
  2694  0459  00A1               	movwf	(__PIR^(0+128)+1)
  2695                           
  2696                           ;PIR_B1.c: 375: if (VRAD < 1) {
  2697  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2698  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2699  045C  08E0               	movf	getPIR_AD@VRAD,f
  2700  045D  1D03               	skipz
  2701  045E  2C61               	goto	l4986
  2702                           
  2703                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 5;
  2704  045F  3005               	movlw	5
  2705  0460  2C67               	goto	L1
  2706  0461                     l4986:	
  2707                           ;PIR_B1.c: 377: } else if (VRAD < 3) {
  2708                           
  2709  0461  3003               	movlw	3
  2710  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0463  0260               	subwf	getPIR_AD@VRAD,w
  2712  0464  1803               	skipnc
  2713  0465  2C6C               	goto	l4990
  2714                           
  2715                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 60;
  2716  0466  303C               	movlw	60
  2717  0467                     L1:	
  2718  0467  1683               	bsf	3,5	;RP0=1, select bank1
  2719  0468  1303               	bcf	3,6	;RP1=0, select bank1
  2720  0469  00C3               	movwf	(__PIR^(0+128)+35)
  2721  046A  3000               	movlw	0
  2722  046B  2C92               	goto	L5
  2723  046C                     l4990:	
  2724                           ;PIR_B1.c: 379: } else if (VRAD < 5) {
  2725                           
  2726  046C  3005               	movlw	5
  2727  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2728  046E  0260               	subwf	getPIR_AD@VRAD,w
  2729  046F  1803               	skipnc
  2730  0470  2C77               	goto	l4994
  2731                           
  2732                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 300;
  2733  0471  302C               	movlw	44
  2734  0472  1683               	bsf	3,5	;RP0=1, select bank1
  2735  0473  1303               	bcf	3,6	;RP1=0, select bank1
  2736  0474  00C3               	movwf	(__PIR^(0+128)+35)
  2737  0475  3001               	movlw	1
  2738  0476  2C92               	goto	L5
  2739  0477                     l4994:	
  2740                           ;PIR_B1.c: 381: } else if (VRAD < 7) {
  2741                           
  2742  0477  3007               	movlw	7
  2743  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2744  0479  0260               	subwf	getPIR_AD@VRAD,w
  2745  047A  1803               	skipnc
  2746  047B  2C82               	goto	l4998
  2747                           
  2748                           ;PIR_B1.c: 382: _PIR.CloseTimeValue = 600;
  2749  047C  3058               	movlw	88
  2750  047D  1683               	bsf	3,5	;RP0=1, select bank1
  2751  047E  1303               	bcf	3,6	;RP1=0, select bank1
  2752  047F  00C3               	movwf	(__PIR^(0+128)+35)
  2753  0480  3002               	movlw	2
  2754  0481  2C92               	goto	L5
  2755  0482                     l4998:	
  2756                           ;PIR_B1.c: 383: } else if (VRAD < 9) {
  2757                           
  2758  0482  3009               	movlw	9
  2759  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2760  0484  0260               	subwf	getPIR_AD@VRAD,w
  2761  0485  1803               	skipnc
  2762  0486  2C8D               	goto	l5002
  2763                           
  2764                           ;PIR_B1.c: 384: _PIR.CloseTimeValue = 900;
  2765  0487  3084               	movlw	132
  2766  0488  1683               	bsf	3,5	;RP0=1, select bank1
  2767  0489  1303               	bcf	3,6	;RP1=0, select bank1
  2768  048A  00C3               	movwf	(__PIR^(0+128)+35)
  2769  048B  3003               	movlw	3
  2770  048C  2C92               	goto	L5
  2771  048D                     l5002:	
  2772                           ;PIR_B1.c: 385: } else {
  2773                           
  2774                           
  2775                           ;PIR_B1.c: 386: _PIR.CloseTimeValue = 1200;
  2776  048D  30B0               	movlw	176
  2777  048E  1683               	bsf	3,5	;RP0=1, select bank1
  2778  048F  1303               	bcf	3,6	;RP1=0, select bank1
  2779  0490  00C3               	movwf	(__PIR^(0+128)+35)
  2780  0491  3004               	movlw	4
  2781  0492                     L5:	
  2782  0492  00C4               	movwf	(__PIR^(0+128)+36)
  2783                           
  2784                           ;PIR_B1.c: 387: }
  2785                           ;PIR_B1.c: 396: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2786  0493  0821               	movf	(__PIR^(0+128)+1),w
  2787  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2788  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2789  0496  00DA               	movwf	??_getPIR_AD
  2790  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2791  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2792  0499  0824               	movf	(__PIR^(0+128)+4),w
  2793  049A  3EA5               	addlw	(__PIR+5)& (0+255)
  2794  049B  0084               	movwf	4
  2795  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2796  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2797  049E  085A               	movf	??_getPIR_AD,w
  2798  049F  1383               	bcf	3,7	;select IRP bank1
  2799  04A0  0080               	movwf	0
  2800                           
  2801                           ;PIR_B1.c: 397: for (i = 0; i < 10; i++) {
  2802  04A1  01E1               	clrf	getPIR_AD@i
  2803  04A2  300A               	movlw	10
  2804  04A3  0261               	subwf	getPIR_AD@i,w
  2805  04A4  1803               	btfsc	3,0
  2806  04A5  2CC2               	goto	l5018
  2807  04A6                     l5012:	
  2808                           
  2809                           ;PIR_B1.c: 398: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2810  04A6  0861               	movf	getPIR_AD@i,w
  2811  04A7  3EA5               	addlw	(__PIR+5)& (0+255)
  2812  04A8  0084               	movwf	4
  2813  04A9  0800               	movf	0,w
  2814  04AA  00DA               	movwf	??_getPIR_AD
  2815  04AB  01DB               	clrf	??_getPIR_AD+1
  2816  04AC  085A               	movf	??_getPIR_AD,w
  2817  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  2818  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  2819  04AF  07AF               	addwf	(__PIR^(0+128)+15),f
  2820  04B0  1803               	skipnc
  2821  04B1  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2822  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2823  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2824  04B4  085B               	movf	??_getPIR_AD+1,w
  2825  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  2826  04B6  1303               	bcf	3,6	;RP1=0, select bank1
  2827  04B7  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2828  04B8  3001               	movlw	1
  2829  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2830  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2831  04BB  00DA               	movwf	??_getPIR_AD
  2832  04BC  085A               	movf	??_getPIR_AD,w
  2833  04BD  07E1               	addwf	getPIR_AD@i,f
  2834  04BE  300A               	movlw	10
  2835  04BF  0261               	subwf	getPIR_AD@i,w
  2836  04C0  1C03               	skipc
  2837  04C1  2CA6               	goto	l5012
  2838  04C2                     l5018:	
  2839                           
  2840                           ;PIR_B1.c: 399: }
  2841                           ;PIR_B1.c: 400: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2842  04C2  300A               	movlw	10
  2843  04C3  00D1               	movwf	___lwdiv@divisor
  2844  04C4  3000               	movlw	0
  2845  04C5  00D2               	movwf	___lwdiv@divisor+1
  2846  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2847  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2848  04C8  0830               	movf	((__PIR+1)^(0+128)+15),w
  2849  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2850  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2851  04CB  01D4               	clrf	___lwdiv@dividend+1
  2852  04CC  07D4               	addwf	___lwdiv@dividend+1,f
  2853  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2854  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  2855  04CF  082F               	movf	(__PIR^(0+128)+15),w
  2856  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2857  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2858  04D2  01D3               	clrf	___lwdiv@dividend
  2859  04D3  07D3               	addwf	___lwdiv@dividend,f
  2860  04D4  158A  25EC  118A   	fcall	___lwdiv
  2861  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2862  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2863  04D9  0851               	movf	?___lwdiv,w
  2864  04DA  00DA               	movwf	??_getPIR_AD
  2865  04DB  1683               	bsf	3,5	;RP0=1, select bank1
  2866  04DC  1303               	bcf	3,6	;RP1=0, select bank1
  2867  04DD  0831               	movf	(__PIR^(0+128)+17),w
  2868  04DE  3EB2               	addlw	(__PIR+18)& (0+255)
  2869  04DF  0084               	movwf	4
  2870  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2871  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2872  04E2  085A               	movf	??_getPIR_AD,w
  2873  04E3  1383               	bcf	3,7	;select IRP bank1
  2874  04E4  0080               	movwf	0
  2875                           
  2876                           ;PIR_B1.c: 401: _PIR.TenAverageValue = 0;
  2877  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  2878  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  2879  04E7  01AF               	clrf	(__PIR^(0+128)+15)
  2880  04E8  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2881                           
  2882                           ;PIR_B1.c: 403: for (i = 0; i <= 9; i++) {
  2883  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2884  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2885  04EB  01E1               	clrf	getPIR_AD@i
  2886  04EC  300A               	movlw	10
  2887  04ED  0261               	subwf	getPIR_AD@i,w
  2888  04EE  1803               	btfsc	3,0
  2889  04EF  2D0C               	goto	l5034
  2890  04F0                     l5028:	
  2891                           
  2892                           ;PIR_B1.c: 404: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2893  04F0  0861               	movf	getPIR_AD@i,w
  2894  04F1  3EB2               	addlw	(__PIR+18)& (0+255)
  2895  04F2  0084               	movwf	4
  2896  04F3  0800               	movf	0,w
  2897  04F4  00DA               	movwf	??_getPIR_AD
  2898  04F5  01DB               	clrf	??_getPIR_AD+1
  2899  04F6  085A               	movf	??_getPIR_AD,w
  2900  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  2901  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  2902  04F9  07BC               	addwf	(__PIR^(0+128)+28),f
  2903  04FA  1803               	skipnc
  2904  04FB  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2905  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2906  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2907  04FE  085B               	movf	??_getPIR_AD+1,w
  2908  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  2909  0500  1303               	bcf	3,6	;RP1=0, select bank1
  2910  0501  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2911  0502  3001               	movlw	1
  2912  0503  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0504  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0505  00DA               	movwf	??_getPIR_AD
  2915  0506  085A               	movf	??_getPIR_AD,w
  2916  0507  07E1               	addwf	getPIR_AD@i,f
  2917  0508  300A               	movlw	10
  2918  0509  0261               	subwf	getPIR_AD@i,w
  2919  050A  1C03               	skipc
  2920  050B  2CF0               	goto	l5028
  2921  050C                     l5034:	
  2922                           
  2923                           ;PIR_B1.c: 405: }
  2924                           ;PIR_B1.c: 406: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2925  050C  300A               	movlw	10
  2926  050D  00D1               	movwf	___lwdiv@divisor
  2927  050E  3000               	movlw	0
  2928  050F  00D2               	movwf	___lwdiv@divisor+1
  2929  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2930  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2931  0512  083D               	movf	((__PIR+1)^(0+128)+28),w
  2932  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0515  01D4               	clrf	___lwdiv@dividend+1
  2935  0516  07D4               	addwf	___lwdiv@dividend+1,f
  2936  0517  1683               	bsf	3,5	;RP0=1, select bank1
  2937  0518  1303               	bcf	3,6	;RP1=0, select bank1
  2938  0519  083C               	movf	(__PIR^(0+128)+28),w
  2939  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2940  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2941  051C  01D3               	clrf	___lwdiv@dividend
  2942  051D  07D3               	addwf	___lwdiv@dividend,f
  2943  051E  158A  25EC  118A   	fcall	___lwdiv
  2944  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0523  0851               	movf	?___lwdiv,w
  2947  0524  00DA               	movwf	??_getPIR_AD
  2948  0525  085A               	movf	??_getPIR_AD,w
  2949  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2950  0527  1303               	bcf	3,6	;RP1=0, select bank1
  2951  0528  00A3               	movwf	(__PIR^(0+128)+3)
  2952                           
  2953                           ;PIR_B1.c: 407: _PIR.HundredAverageValue = 0;
  2954  0529  01BC               	clrf	(__PIR^(0+128)+28)
  2955  052A  01BD               	clrf	((__PIR+1)^(0+128)+28)
  2956                           
  2957                           ;PIR_B1.c: 409: if (_PIR.TenCount < 10) {
  2958  052B  300A               	movlw	10
  2959  052C  0224               	subwf	(__PIR^(0+128)+4),w
  2960  052D  1803               	skipnc
  2961  052E  2D38               	goto	l5042
  2962                           
  2963                           ;PIR_B1.c: 410: _PIR.TenCount++;
  2964  052F  3001               	movlw	1
  2965  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2966  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2967  0532  00DA               	movwf	??_getPIR_AD
  2968  0533  085A               	movf	??_getPIR_AD,w
  2969  0534  1683               	bsf	3,5	;RP0=1, select bank1
  2970  0535  1303               	bcf	3,6	;RP1=0, select bank1
  2971  0536  07A4               	addwf	(__PIR^(0+128)+4),f
  2972                           
  2973                           ;PIR_B1.c: 411: } else {
  2974  0537  0008               	return
  2975  0538                     l5042:	
  2976                           
  2977                           ;PIR_B1.c: 412: _PIR.TenCount = 0;
  2978  0538  01A4               	clrf	(__PIR^(0+128)+4)
  2979                           
  2980                           ;PIR_B1.c: 413: if (_PIR.HundreCount < 10)
  2981  0539  300A               	movlw	10
  2982  053A  0231               	subwf	(__PIR^(0+128)+17),w
  2983  053B  1803               	skipnc
  2984  053C  2D46               	goto	l5048
  2985                           
  2986                           ;PIR_B1.c: 414: _PIR.HundreCount++;
  2987  053D  3001               	movlw	1
  2988  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2989  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2990  0540  00DA               	movwf	??_getPIR_AD
  2991  0541  085A               	movf	??_getPIR_AD,w
  2992  0542  1683               	bsf	3,5	;RP0=1, select bank1
  2993  0543  1303               	bcf	3,6	;RP1=0, select bank1
  2994  0544  07B1               	addwf	(__PIR^(0+128)+17),f
  2995  0545  0008               	return
  2996  0546                     l5048:	
  2997                           
  2998                           ;PIR_B1.c: 415: else
  2999                           ;PIR_B1.c: 416: _PIR.HundreCount = 0;
  3000  0546  01B1               	clrf	(__PIR^(0+128)+17)
  3001  0547  0008               	return
  3002  0548                     __end_of_getPIR_AD:	
  3003                           
  3004                           	psect	text5
  3005  0E70                     __ptext5:	
  3006 ;; *************** function _getLoad_AD *****************
  3007 ;; Defined at:
  3008 ;;		line 16 in file "../src/OverLoad_B1.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  channel         1    wreg     unsigned char 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  channel         1    2[BANK0 ] unsigned char 
  3013 ;;  i               1    6[BANK0 ] unsigned char 
  3014 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3015 ;;  j               1    4[BANK0 ] unsigned char 
  3016 ;;  k               1    3[BANK0 ] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;		None               void
  3019 ;; Registers used:
  3020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3026 ;;      Params:         0       0       0       0
  3027 ;;      Locals:         0       5       0       0
  3028 ;;      Temps:          0       2       0       0
  3029 ;;      Totals:         0       7       0       0
  3030 ;;Total ram usage:        7 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    4
  3033 ;; This function calls:
  3034 ;;		_getAD
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           
  3041                           ;psect for function _getLoad_AD
  3042  0E70                     _getLoad_AD:	
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3046                           ;getLoad_AD@channel stored from wreg
  3047  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  3048  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  3049  0E72  00D3               	movwf	getLoad_AD@channel
  3050                           
  3051                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  3052  0E73  01D7               	clrf	getLoad_AD@i
  3053  0E74  01D5               	clrf	getLoad_AD@j
  3054  0E75  01D4               	clrf	getLoad_AD@k
  3055                           
  3056                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  3057  0E76  01D6               	clrf	getLoad_AD@ADRES
  3058                           
  3059                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  3060  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3061  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3062  0E79  1E4A               	btfss	_Load^(0+128),4
  3063  0E7A  0008               	return
  3064                           
  3065                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0x73);
  3066  0E7B  3073               	movlw	115
  3067  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3068  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3069  0E7E  00D1               	movwf	??_getLoad_AD
  3070  0E7F  0851               	movf	??_getLoad_AD,w
  3071  0E80  00F4               	movwf	getAD@adcon1
  3072  0E81  0853               	movf	getLoad_AD@channel,w
  3073  0E82  158A  2485  158A   	fcall	_getAD
  3074  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  3076  0E87  00D2               	movwf	??_getLoad_AD+1
  3077  0E88  0852               	movf	??_getLoad_AD+1,w
  3078  0E89  00D6               	movwf	getLoad_AD@ADRES
  3079                           
  3080                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  3081  0E8A  01D7               	clrf	getLoad_AD@i
  3082  0E8B  3004               	movlw	4
  3083  0E8C  0257               	subwf	getLoad_AD@i,w
  3084  0E8D  1803               	btfsc	3,0
  3085  0E8E  2EAB               	goto	l4940
  3086  0E8F                     l4928:	
  3087                           
  3088                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  3089  0E8F  0857               	movf	getLoad_AD@i,w
  3090  0E90  3ED4               	addlw	(_Load+10)& (0+255)
  3091  0E91  0084               	movwf	4
  3092  0E92  0856               	movf	getLoad_AD@ADRES,w
  3093  0E93  1383               	bcf	3,7	;select IRP bank1
  3094  0E94  0200               	subwf	0,w
  3095  0E95  1803               	skipnc
  3096  0E96  2EA3               	goto	l4936
  3097  0E97  08D5               	movf	getLoad_AD@j,f
  3098  0E98  1D03               	skipz
  3099  0E99  2EA3               	goto	l4936
  3100                           
  3101                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  3102  0E9A  0856               	movf	getLoad_AD@ADRES,w
  3103  0E9B  00D1               	movwf	??_getLoad_AD
  3104  0E9C  0857               	movf	getLoad_AD@i,w
  3105  0E9D  3ED4               	addlw	(_Load+10)& (0+255)
  3106  0E9E  0084               	movwf	4
  3107  0E9F  0851               	movf	??_getLoad_AD,w
  3108  0EA0  0080               	movwf	0
  3109                           
  3110                           ;OverLoad_B1.c: 25: j = 1;
  3111  0EA1  01D5               	clrf	getLoad_AD@j
  3112  0EA2  0AD5               	incf	getLoad_AD@j,f
  3113  0EA3                     l4936:	
  3114  0EA3  3001               	movlw	1
  3115  0EA4  00D1               	movwf	??_getLoad_AD
  3116  0EA5  0851               	movf	??_getLoad_AD,w
  3117  0EA6  07D7               	addwf	getLoad_AD@i,f
  3118  0EA7  3004               	movlw	4
  3119  0EA8  0257               	subwf	getLoad_AD@i,w
  3120  0EA9  1C03               	skipc
  3121  0EAA  2E8F               	goto	l4928
  3122  0EAB                     l4940:	
  3123                           
  3124                           ;OverLoad_B1.c: 26: }
  3125                           ;OverLoad_B1.c: 27: }
  3126                           ;OverLoad_B1.c: 28: if (j == 0) {
  3127  0EAB  08D5               	movf	getLoad_AD@j,f
  3128  0EAC  1D03               	skipz
  3129  0EAD  0008               	return
  3130                           
  3131                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  3132  0EAE  01D7               	clrf	getLoad_AD@i
  3133  0EAF                     L6:	
  3134  0EAF  3004               	movlw	4
  3135  0EB0  0257               	subwf	getLoad_AD@i,w
  3136  0EB1  1803               	btfsc	3,0
  3137  0EB2  0008               	return
  3138                           
  3139                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  3140  0EB3  0857               	movf	getLoad_AD@i,w
  3141  0EB4  3ED9               	addlw	(_Load+15)& (0+255)
  3142  0EB5  0084               	movwf	4
  3143  0EB6  1383               	bcf	3,7	;select IRP bank1
  3144  0EB7  0800               	movf	0,w
  3145  0EB8  0256               	subwf	getLoad_AD@ADRES,w
  3146  0EB9  1803               	skipnc
  3147  0EBA  2EC7               	goto	l4956
  3148  0EBB  08D4               	movf	getLoad_AD@k,f
  3149  0EBC  1D03               	skipz
  3150  0EBD  2EC7               	goto	l4956
  3151                           
  3152                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  3153  0EBE  0856               	movf	getLoad_AD@ADRES,w
  3154  0EBF  00D1               	movwf	??_getLoad_AD
  3155  0EC0  0857               	movf	getLoad_AD@i,w
  3156  0EC1  3ED9               	addlw	(_Load+15)& (0+255)
  3157  0EC2  0084               	movwf	4
  3158  0EC3  0851               	movf	??_getLoad_AD,w
  3159  0EC4  0080               	movwf	0
  3160                           
  3161                           ;OverLoad_B1.c: 32: k = 1;
  3162  0EC5  01D4               	clrf	getLoad_AD@k
  3163  0EC6  0AD4               	incf	getLoad_AD@k,f
  3164  0EC7                     l4956:	
  3165  0EC7  3001               	movlw	1
  3166  0EC8  00D1               	movwf	??_getLoad_AD
  3167  0EC9  0851               	movf	??_getLoad_AD,w
  3168  0ECA  07D7               	addwf	getLoad_AD@i,f
  3169  0ECB  2EAF               	goto	L6
  3170  0ECC                     __end_of_getLoad_AD:	
  3171                           
  3172                           	psect	text6
  3173  0CDE                     __ptext6:	
  3174 ;; *************** function _getCDS_AD *****************
  3175 ;; Defined at:
  3176 ;;		line 48 in file "../src/CDS_B1.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  channel1        1    wreg     unsigned char 
  3179 ;;  channel2        1    0[BANK0 ] unsigned char 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  channel1        1    5[BANK0 ] unsigned char 
  3182 ;;  j               1    4[BANK0 ] unsigned char 
  3183 ;;  i               1    3[BANK0 ] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;		None               void
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0, pclath, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3193 ;;      Params:         0       1       0       0
  3194 ;;      Locals:         0       3       0       0
  3195 ;;      Temps:          0       2       0       0
  3196 ;;      Totals:         0       6       0       0
  3197 ;;Total ram usage:        6 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    4
  3200 ;; This function calls:
  3201 ;;		_getAD
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function _getCDS_AD
  3209  0CDE                     _getCDS_AD:	
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3213                           ;getCDS_AD@channel1 stored from wreg
  3214  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0CE0  00D6               	movwf	getCDS_AD@channel1
  3217                           
  3218                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3219  0CE1  01D4               	clrf	getCDS_AD@i
  3220  0CE2  01D5               	clrf	getCDS_AD@j
  3221                           
  3222                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3223  0CE3  1DAE               	btfss	__CDS,3
  3224  0CE4  0008               	return
  3225                           
  3226                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3227  0CE5  14AE               	bsf	__CDS,1
  3228                           
  3229                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3230  0CE6  3070               	movlw	112
  3231  0CE7  00D2               	movwf	??_getCDS_AD
  3232  0CE8  0852               	movf	??_getCDS_AD,w
  3233  0CE9  00F4               	movwf	getAD@adcon1
  3234  0CEA  0856               	movf	getCDS_AD@channel1,w
  3235  0CEB  158A  2485  158A   	fcall	_getAD
  3236  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  3237  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  3238  0CF0  00D3               	movwf	??_getCDS_AD+1
  3239  0CF1  0853               	movf	??_getCDS_AD+1,w
  3240  0CF2  00B0               	movwf	__CDS+2
  3241                           
  3242                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3243  0CF3  3070               	movlw	112
  3244  0CF4  00D2               	movwf	??_getCDS_AD
  3245  0CF5  0852               	movf	??_getCDS_AD,w
  3246  0CF6  00F4               	movwf	getAD@adcon1
  3247  0CF7  0851               	movf	getCDS_AD@channel2,w
  3248  0CF8  158A  2485         	fcall	_getAD
  3249  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  3250  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  3251  0CFC  00D3               	movwf	??_getCDS_AD+1
  3252  0CFD  0853               	movf	??_getCDS_AD+1,w
  3253  0CFE  00B1               	movwf	__CDS+3
  3254  0CFF  0008               	return
  3255  0D00                     __end_of_getCDS_AD:	
  3256                           
  3257                           	psect	text7
  3258  0C85                     __ptext7:	
  3259 ;; *************** function _getAD *****************
  3260 ;; Defined at:
  3261 ;;		line 434 in file "../src/MCU_B1.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  adcon0          1    wreg     unsigned char 
  3264 ;;  adcon1          1    4[COMMON] unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  adcon0          1    5[COMMON] unsigned char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      unsigned char 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, pclath, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3276 ;;      Params:         1       0       0       0
  3277 ;;      Locals:         1       0       0       0
  3278 ;;      Temps:          0       0       0       0
  3279 ;;      Totals:         2       0       0       0
  3280 ;;Total ram usage:        2 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    3
  3283 ;; This function calls:
  3284 ;;		_Timeout_Counter
  3285 ;;		_set_TimeoutCleared
  3286 ;; This function is called by:
  3287 ;;		_getCDS_AD
  3288 ;;		_getLoad_AD
  3289 ;;		_getTemp_AD
  3290 ;;		_getPIR_AD
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           
  3295                           ;psect for function _getAD
  3296  0C85                     _getAD:	
  3297                           
  3298                           ;incstack = 0
  3299                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3300                           ;getAD@adcon0 stored from wreg
  3301  0C85  00F5               	movwf	getAD@adcon0
  3302                           
  3303                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3304  0C86  0875               	movf	getAD@adcon0,w
  3305  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  3306  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  3307  0C89  009F               	movwf	31	;volatile
  3308                           
  3309                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3310  0C8A  0874               	movf	getAD@adcon1,w
  3311  0C8B  1683               	bsf	3,5	;RP0=1, select bank1
  3312  0C8C  1303               	bcf	3,6	;RP1=0, select bank1
  3313  0C8D  009F               	movwf	31	;volatile
  3314                           
  3315                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3316  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0C90  149F               	bsf	31,1	;volatile
  3319                           
  3320                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3321  0C91  2C95               	goto	l4720
  3322  0C92                     l4718:	
  3323                           
  3324                           ;MCU_B1.c: 439: Timeout_Counter();
  3325  0C92  158A  2395  158A   	fcall	_Timeout_Counter
  3326  0C95                     l4720:	
  3327  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  3328  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  3329  0C97  1C9F               	btfss	31,1	;volatile
  3330  0C98  2C9B               	goto	l4724
  3331  0C99  1D27               	btfss	_myMain+2,2
  3332  0C9A  2C92               	goto	l4718
  3333  0C9B                     l4724:	
  3334                           
  3335                           ;MCU_B1.c: 440: };
  3336                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3337  0C9B  158A  22B9         	fcall	_set_TimeoutCleared
  3338                           
  3339                           ;MCU_B1.c: 442: return ADRES;
  3340  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  3341  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  3342  0C9F  081E               	movf	30,w	;volatile
  3343  0CA0  0008               	return
  3344  0CA1                     __end_of_getAD:	
  3345                           
  3346                           	psect	text8
  3347  0AB9                     __ptext8:	
  3348 ;; *************** function _set_TimeoutCleared *****************
  3349 ;; Defined at:
  3350 ;;		line 281 in file "../src/Main_B1.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;		None               void
  3357 ;; Registers used:
  3358 ;;		status,2
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3364 ;;      Params:         0       0       0       0
  3365 ;;      Locals:         0       0       0       0
  3366 ;;      Temps:          0       0       0       0
  3367 ;;      Totals:         0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_getAD
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _set_TimeoutCleared
  3380  0AB9                     _set_TimeoutCleared:	
  3381                           
  3382                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3383                           
  3384                           ;incstack = 0
  3385                           ; Regs used in _set_TimeoutCleared: [status,2]
  3386  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
  3388  0ABB  1127               	bcf	_myMain+2,2
  3389                           
  3390                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3391  0ABC  01A8               	clrf	_myMain+3
  3392  0ABD  01A9               	clrf	_myMain+4
  3393  0ABE  0008               	return
  3394  0ABF                     __end_of_set_TimeoutCleared:	
  3395                           
  3396                           	psect	text9
  3397  0B95                     __ptext9:	
  3398 ;; *************** function _Timeout_Counter *****************
  3399 ;; Defined at:
  3400 ;;		line 272 in file "../src/Main_B1.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;		None
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;		None               void
  3407 ;; Registers used:
  3408 ;;		wreg, status,2
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3414 ;;      Params:         0       0       0       0
  3415 ;;      Locals:         0       0       0       0
  3416 ;;      Temps:          0       0       0       0
  3417 ;;      Totals:         0       0       0       0
  3418 ;;Total ram usage:        0 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    2
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_getAD
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           
  3429                           ;psect for function _Timeout_Counter
  3430  0B95                     _Timeout_Counter:	
  3431                           
  3432                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3433                           
  3434                           ;incstack = 0
  3435                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3436  0B95  3001               	movlw	1
  3437  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0B98  07A8               	addwf	_myMain+3,f
  3440  0B99  1803               	skipnc
  3441  0B9A  0AA9               	incf	_myMain+4,f
  3442  0B9B  3000               	movlw	0
  3443  0B9C  07A9               	addwf	_myMain+4,f
  3444                           
  3445                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3446  0B9D  3061               	movlw	97
  3447  0B9E  0629               	xorwf	_myMain+4,w
  3448  0B9F  1D03               	skipz
  3449  0BA0  2BA3               	goto	u5275
  3450  0BA1  30A8               	movlw	168
  3451  0BA2  0628               	xorwf	_myMain+3,w
  3452  0BA3                     u5275:	
  3453  0BA3  1D03               	skipz
  3454  0BA4  0008               	return
  3455                           
  3456                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3457  0BA5  01A8               	clrf	_myMain+3
  3458  0BA6  01A9               	clrf	_myMain+4
  3459                           
  3460                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3461  0BA7  1527               	bsf	_myMain+2,2
  3462  0BA8  0008               	return
  3463  0BA9                     __end_of_Timeout_Counter:	
  3464                           
  3465                           	psect	text10
  3466  0B72                     __ptext10:	
  3467 ;; *************** function _WDT_Main *****************
  3468 ;; Defined at:
  3469 ;;		line 1116 in file "../src/MCU_B1.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;		None               void
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, pclath, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3483 ;;      Params:         0       0       0       0
  3484 ;;      Locals:         0       0       0       0
  3485 ;;      Temps:          1       0       0       0
  3486 ;;      Totals:         1       0       0       0
  3487 ;;Total ram usage:        1 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    3
  3490 ;; This function calls:
  3491 ;;		_WDT_Clearing
  3492 ;; This function is called by:
  3493 ;;		_main
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _WDT_Main
  3499  0B72                     _WDT_Main:	
  3500                           
  3501                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3505  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  3506  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  3507  0B74  1C35               	btfss	_WDT,0
  3508  0B75  0008               	return
  3509                           
  3510                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3511  0B76  3001               	movlw	1
  3512  0B77  02B6               	subwf	_WDT+1,f
  3513  0B78  0836               	movf	_WDT+1,w
  3514  0B79  3AFF               	xorlw	255
  3515  0B7A  1903               	skipnz
  3516  0B7B  0008               	return
  3517                           
  3518                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3519  0B7C  3064               	movlw	100
  3520  0B7D  00F4               	movwf	??_WDT_Main
  3521  0B7E  0874               	movf	??_WDT_Main,w
  3522  0B7F  00B6               	movwf	_WDT+1
  3523                           
  3524                           ;MCU_B1.c: 1120: WDT_Clearing();
  3525  0B80  118A  2002         	fcall	_WDT_Clearing
  3526  0B82  0008               	return
  3527  0B83                     __end_of_WDT_Main:	
  3528                           
  3529                           	psect	text11
  3530  0002                     __ptext11:	
  3531 ;; *************** function _WDT_Clearing *****************
  3532 ;; Defined at:
  3533 ;;		line 1126 in file "../src/MCU_B1.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;		None
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;		None
  3538 ;; Return value:  Size  Location     Type
  3539 ;;		None               void
  3540 ;; Registers used:
  3541 ;;		None
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3547 ;;      Params:         0       0       0       0
  3548 ;;      Locals:         0       0       0       0
  3549 ;;      Temps:          0       0       0       0
  3550 ;;      Totals:         0       0       0       0
  3551 ;;Total ram usage:        0 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    2
  3554 ;; This function calls:
  3555 ;;		Nothing
  3556 ;; This function is called by:
  3557 ;;		_WDT_Main
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           
  3562                           ;psect for function _WDT_Clearing
  3563  0002                     _WDT_Clearing:	
  3564                           
  3565                           ;incstack = 0
  3566                           ; Regs used in _WDT_Clearing: []
  3567  0002  0064               	clrwdt	;# 
  3568  0003  0008               	return
  3569  0004                     __end_of_WDT_Clearing:	
  3570                           
  3571                           	psect	text12
  3572  0A99                     __ptext12:	
  3573 ;; *************** function _Temp_Main *****************
  3574 ;; Defined at:
  3575 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;		None               void
  3582 ;; Registers used:
  3583 ;;		wreg, status,2, status,0, pclath, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3589 ;;      Params:         0       0       0       0
  3590 ;;      Locals:         0       0       0       0
  3591 ;;      Temps:          0       0       0       0
  3592 ;;      Totals:         0       0       0       0
  3593 ;;Total ram usage:        0 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    4
  3596 ;; This function calls:
  3597 ;;		_setTemp_Main
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _Temp_Main
  3605  0A99                     _Temp_Main:	
  3606                           
  3607                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3608                           
  3609                           ;incstack = 0
  3610                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3611  0A99  118A  270C         	fcall	_setTemp_Main
  3612  0A9B  0008               	return
  3613  0A9C                     __end_of_Temp_Main:	
  3614                           
  3615                           	psect	text13
  3616  070C                     __ptext13:	
  3617 ;; *************** function _setTemp_Main *****************
  3618 ;; Defined at:
  3619 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  AD              1   10[BANK0 ] unsigned char 
  3624 ;;  DangerValue     1    9[BANK0 ] unsigned char 
  3625 ;;  SafeValue       1    8[BANK0 ] unsigned char 
  3626 ;;  TempGO          1    7[BANK0 ] unsigned char 
  3627 ;;  error           1    6[BANK0 ] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;		None               void
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0, pclath, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3637 ;;      Params:         0       0       0       0
  3638 ;;      Locals:         0       5       0       0
  3639 ;;      Temps:          1       0       0       0
  3640 ;;      Totals:         1       5       0       0
  3641 ;;Total ram usage:        6 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    3
  3644 ;; This function calls:
  3645 ;;		_getMain_All_Error_Status
  3646 ;;		_getMain_All_LightsStatus
  3647 ;; This function is called by:
  3648 ;;		_Temp_Main
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           
  3653                           ;psect for function _setTemp_Main
  3654  070C                     _setTemp_Main:	
  3655                           
  3656                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3660  070C  3000               	movlw	0
  3661  070D  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  3662  0710  00F5               	movwf	??_setTemp_Main
  3663  0711  0875               	movf	??_setTemp_Main,w
  3664  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3665  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3666  0714  00D7               	movwf	setTemp_Main@error
  3667                           
  3668                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3669  0715  01D9               	clrf	setTemp_Main@SafeValue
  3670  0716  01DA               	clrf	setTemp_Main@DangerValue
  3671                           
  3672                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3673  0717  158A  22E6  118A   	fcall	_getMain_All_LightsStatus
  3674  071A  00F5               	movwf	??_setTemp_Main
  3675  071B  0875               	movf	??_setTemp_Main,w
  3676  071C  1283               	bcf	3,5	;RP0=0, select bank0
  3677  071D  1303               	bcf	3,6	;RP1=0, select bank0
  3678  071E  00D8               	movwf	setTemp_Main@TempGO
  3679                           
  3680                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3681  071F  1C39               	btfss	_Temp,0
  3682  0720  2F83               	goto	l847
  3683                           
  3684                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3685  0721  1939               	btfsc	_Temp,2
  3686  0722  2F3F               	goto	l3610
  3687                           
  3688                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3689  0723  0858               	movf	setTemp_Main@TempGO,w
  3690  0724  3A01               	xorlw	1
  3691  0725  1D03               	skipz
  3692  0726  2F29               	goto	l853
  3693  0727  1CB9               	btfss	_Temp,1
  3694  0728  2F2B               	goto	l3602
  3695  0729                     l853:	
  3696  0729  1CB9               	btfss	_Temp,1
  3697  072A  2F3C               	goto	l3608
  3698  072B                     l3602:	
  3699                           
  3700                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3701  072B  3001               	movlw	1
  3702  072C  07BA               	addwf	_Temp+1,f
  3703  072D  1803               	skipnc
  3704  072E  0ABB               	incf	_Temp+2,f
  3705  072F  3000               	movlw	0
  3706  0730  07BB               	addwf	_Temp+2,f
  3707                           
  3708                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3709  0731  3000               	movlw	0
  3710  0732  023B               	subwf	_Temp+2,w
  3711  0733  30FA               	movlw	250
  3712  0734  1903               	skipnz
  3713  0735  023A               	subwf	_Temp+1,w
  3714  0736  1C03               	skipc
  3715  0737  0008               	return
  3716                           
  3717                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3718  0738  01BA               	clrf	_Temp+1
  3719  0739  01BB               	clrf	_Temp+2
  3720                           
  3721                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3722  073A  1539               	bsf	_Temp,2
  3723                           
  3724                           ;OverTemperature_B1.c: 83: }
  3725                           ;OverTemperature_B1.c: 84: } else {
  3726  073B  0008               	return
  3727  073C                     l3608:	
  3728                           
  3729                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3730  073C  01BA               	clrf	_Temp+1
  3731  073D  01BB               	clrf	_Temp+2
  3732                           
  3733                           ;OverTemperature_B1.c: 86: }
  3734                           ;OverTemperature_B1.c: 87: } else {
  3735  073E  0008               	return
  3736  073F                     l3610:	
  3737                           
  3738                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3739  073F  3001               	movlw	1
  3740  0740  07BA               	addwf	_Temp+1,f
  3741  0741  1803               	skipnc
  3742  0742  0ABB               	incf	_Temp+2,f
  3743  0743  3000               	movlw	0
  3744  0744  07BB               	addwf	_Temp+2,f
  3745                           
  3746                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3747  0745  3000               	movlw	0
  3748  0746  023B               	subwf	_Temp+2,w
  3749  0747  3005               	movlw	5
  3750  0748  1903               	skipnz
  3751  0749  023A               	subwf	_Temp+1,w
  3752  074A  1C03               	skipc
  3753  074B  0008               	return
  3754                           
  3755                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3756  074C  01BA               	clrf	_Temp+1
  3757  074D  01BB               	clrf	_Temp+2
  3758                           
  3759                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3760  074E  083F               	movf	_Temp+6,w
  3761  074F  1903               	btfsc	3,2
  3762  0750  2F7F               	goto	l858
  3763                           
  3764                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3765  0751  1139               	bcf	_Temp,2
  3766                           
  3767                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3768  0752  083F               	movf	_Temp+6,w
  3769  0753  00F5               	movwf	??_setTemp_Main
  3770  0754  0875               	movf	??_setTemp_Main,w
  3771  0755  00DB               	movwf	setTemp_Main@AD
  3772                           
  3773                           ;OverTemperature_B1.c: 106: SafeValue = 0x50;
  3774  0756  3050               	movlw	80
  3775  0757  00F5               	movwf	??_setTemp_Main
  3776  0758  0875               	movf	??_setTemp_Main,w
  3777  0759  00D9               	movwf	setTemp_Main@SafeValue
  3778                           
  3779                           ;OverTemperature_B1.c: 107: DangerValue = 0x76;
  3780  075A  3076               	movlw	118
  3781  075B  00F5               	movwf	??_setTemp_Main
  3782  075C  0875               	movf	??_setTemp_Main,w
  3783  075D  00DA               	movwf	setTemp_Main@DangerValue
  3784                           
  3785                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3786  075E  1CB9               	btfss	_Temp,1
  3787  075F  2F6F               	goto	l3634
  3788                           
  3789                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3790  0760  0859               	movf	setTemp_Main@SafeValue,w
  3791  0761  025B               	subwf	setTemp_Main@AD,w
  3792  0762  1C03               	skipc
  3793  0763  2F7E               	goto	l3644
  3794                           
  3795                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3796  0764  3001               	movlw	1
  3797  0765  00F5               	movwf	??_setTemp_Main
  3798  0766  0875               	movf	??_setTemp_Main,w
  3799  0767  07BC               	addwf	_Temp+3,f
  3800                           
  3801                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3802  0768  3003               	movlw	3
  3803  0769  023C               	subwf	_Temp+3,w
  3804  076A  1C03               	skipc
  3805  076B  2F7F               	goto	l858
  3806                           
  3807                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3808  076C  01BC               	clrf	_Temp+3
  3809                           
  3810                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3811  076D  10B9               	bcf	_Temp,1
  3812                           
  3813                           ;OverTemperature_B1.c: 126: }
  3814                           ;OverTemperature_B1.c: 127: } else {
  3815                           
  3816                           ;OverTemperature_B1.c: 125: ;;
  3817  076E  2F7F               	goto	l858
  3818  076F                     l3634:	
  3819                           ;OverTemperature_B1.c: 129: }
  3820                           ;OverTemperature_B1.c: 130: } else {
  3821                           
  3822                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3823                           
  3824                           
  3825                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3826  076F  085B               	movf	setTemp_Main@AD,w
  3827  0770  025A               	subwf	setTemp_Main@DangerValue,w
  3828  0771  1C03               	skipc
  3829  0772  2F7E               	goto	l3644
  3830                           
  3831                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3832  0773  3001               	movlw	1
  3833  0774  00F5               	movwf	??_setTemp_Main
  3834  0775  0875               	movf	??_setTemp_Main,w
  3835  0776  07BC               	addwf	_Temp+3,f
  3836                           
  3837                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3838  0777  3003               	movlw	3
  3839  0778  023C               	subwf	_Temp+3,w
  3840  0779  1C03               	skipc
  3841  077A  2F7F               	goto	l858
  3842                           
  3843                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3844  077B  01BC               	clrf	_Temp+3
  3845                           
  3846                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3847  077C  14B9               	bsf	_Temp,1
  3848                           
  3849                           ;OverTemperature_B1.c: 136: }
  3850                           ;OverTemperature_B1.c: 137: } else {
  3851  077D  2F7F               	goto	l858
  3852  077E                     l3644:	
  3853                           
  3854                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3855  077E  01BC               	clrf	_Temp+3
  3856  077F                     l858:	
  3857                           ;OverTemperature_B1.c: 139: }
  3858                           ;OverTemperature_B1.c: 140: }
  3859                           ;OverTemperature_B1.c: 141: ;;
  3860                           ;OverTemperature_B1.c: 142: ;;
  3861                           
  3862                           
  3863                           ;OverTemperature_B1.c: 158: }
  3864                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3865  077F  01BD               	clrf	_Temp+4
  3866                           
  3867                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3868  0780  01BE               	clrf	_Temp+5
  3869                           
  3870                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3871  0781  01BF               	clrf	_Temp+6
  3872                           
  3873                           ;OverTemperature_B1.c: 162: }
  3874                           ;OverTemperature_B1.c: 163: }
  3875                           ;OverTemperature_B1.c: 166: } else {
  3876  0782  0008               	return
  3877  0783                     l847:	
  3878                           
  3879                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3880  0783  1C25               	btfss	_myMain,0
  3881  0784  0008               	return
  3882                           
  3883                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3884  0785  1439               	bsf	_Temp,0
  3885  0786  0008               	return
  3886  0787                     __end_of_setTemp_Main:	
  3887                           
  3888                           	psect	text14
  3889  0A96                     __ptext14:	
  3890 ;; *************** function _Temp_Initialization *****************
  3891 ;; Defined at:
  3892 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;		None               void
  3899 ;; Registers used:
  3900 ;;		status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3906 ;;      Params:         0       0       0       0
  3907 ;;      Locals:         0       0       0       0
  3908 ;;      Temps:          0       0       0       0
  3909 ;;      Totals:         0       0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    3
  3913 ;; This function calls:
  3914 ;;		_setTemp_Initialization
  3915 ;; This function is called by:
  3916 ;;		_main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _Temp_Initialization
  3922  0A96                     _Temp_Initialization:	
  3923                           
  3924                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3928  0A96  158A  2288         	fcall	_setTemp_Initialization
  3929  0A98  0008               	return
  3930  0A99                     __end_of_Temp_Initialization:	
  3931                           
  3932                           	psect	text15
  3933  0A88                     __ptext15:	
  3934 ;; *************** function _setTemp_Initialization *****************
  3935 ;; Defined at:
  3936 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		None
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3950 ;;      Params:         0       0       0       0
  3951 ;;      Locals:         0       0       0       0
  3952 ;;      Temps:          0       0       0       0
  3953 ;;      Totals:         0       0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    2
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_Temp_Initialization
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _setTemp_Initialization
  3966  0A88                     _setTemp_Initialization:	
  3967                           
  3968                           ;incstack = 0
  3969                           ; Regs used in _setTemp_Initialization: []
  3970  0A88  0008               	return
  3971  0A89                     __end_of_setTemp_Initialization:	
  3972                           
  3973                           	psect	text16
  3974  0A93                     __ptext16:	
  3975 ;; *************** function _SYSC_Main *****************
  3976 ;; Defined at:
  3977 ;;		line 17 in file "../src/SYSC_B1.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0, pclath, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3991 ;;      Params:         0       0       0       0
  3992 ;;      Locals:         0       0       0       0
  3993 ;;      Temps:          0       0       0       0
  3994 ;;      Totals:         0       0       0       0
  3995 ;;Total ram usage:        0 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    4
  3998 ;; This function calls:
  3999 ;;		_setSYSC_Main
  4000 ;; This function is called by:
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function _SYSC_Main
  4007  0A93                     _SYSC_Main:	
  4008                           
  4009                           ;SYSC_B1.c: 19: setSYSC_Main();
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4013  0A93  158A  262C         	fcall	_setSYSC_Main
  4014  0A95  0008               	return
  4015  0A96                     __end_of_SYSC_Main:	
  4016                           
  4017                           	psect	text17
  4018  0E2C                     __ptext17:	
  4019 ;; *************** function _setSYSC_Main *****************
  4020 ;; Defined at:
  4021 ;;		line 23 in file "../src/SYSC_B1.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;		None               void
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0, pclath, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4035 ;;      Params:         0       0       0       0
  4036 ;;      Locals:         0       0       0       0
  4037 ;;      Temps:          0       0       0       0
  4038 ;;      Totals:         0       0       0       0
  4039 ;;Total ram usage:        0 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    3
  4042 ;; This function calls:
  4043 ;;		_getMain_All_Error_Status
  4044 ;; This function is called by:
  4045 ;;		_SYSC_Main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _setSYSC_Main
  4051  0E2C                     _setSYSC_Main:	
  4052                           
  4053                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4057  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  4058  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  4059  0E2E  1C20               	btfss	_SYSC,0
  4060  0E2F  0008               	return
  4061                           
  4062                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4063  0E30  18A0               	btfsc	_SYSC,1
  4064  0E31  2E43               	goto	l3660
  4065                           
  4066                           ;SYSC_B1.c: 27: SYSC.Time++;
  4067  0E32  3001               	movlw	1
  4068  0E33  07A1               	addwf	_SYSC+1,f
  4069  0E34  1803               	skipnc
  4070  0E35  0AA2               	incf	_SYSC+2,f
  4071  0E36  3000               	movlw	0
  4072  0E37  07A2               	addwf	_SYSC+2,f
  4073                           
  4074                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4075  0E38  3000               	movlw	0
  4076  0E39  0222               	subwf	_SYSC+2,w
  4077  0E3A  3019               	movlw	25
  4078  0E3B  1903               	skipnz
  4079  0E3C  0221               	subwf	_SYSC+1,w
  4080  0E3D  1C03               	skipc
  4081  0E3E  0008               	return
  4082                           
  4083                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4084  0E3F  01A1               	clrf	_SYSC+1
  4085  0E40  01A2               	clrf	_SYSC+2
  4086                           
  4087                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4088  0E41  14A0               	bsf	_SYSC,1
  4089                           
  4090                           ;SYSC_B1.c: 31: }
  4091                           ;SYSC_B1.c: 32: } else {
  4092  0E42  0008               	return
  4093  0E43                     l3660:	
  4094                           
  4095                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4096  0E43  3001               	movlw	1
  4097  0E44  158A  25AE  158A   	fcall	_getMain_All_Error_Status
  4098  0E47  3800               	iorlw	0
  4099  0E48  1D03               	skipz
  4100  0E49  0008               	return
  4101                           
  4102                           ;SYSC_B1.c: 34: SYSC.Time++;
  4103  0E4A  3001               	movlw	1
  4104  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  4105  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  4106  0E4D  07A1               	addwf	_SYSC+1,f
  4107  0E4E  1803               	skipnc
  4108  0E4F  0AA2               	incf	_SYSC+2,f
  4109  0E50  3000               	movlw	0
  4110  0E51  07A2               	addwf	_SYSC+2,f
  4111                           
  4112                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4113  0E52  3000               	movlw	0
  4114  0E53  0222               	subwf	_SYSC+2,w
  4115  0E54  3019               	movlw	25
  4116  0E55  1903               	skipnz
  4117  0E56  0221               	subwf	_SYSC+1,w
  4118  0E57  1C03               	skipc
  4119  0E58  2E5E               	goto	l3666
  4120                           
  4121                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4122  0E59  01A1               	clrf	_SYSC+1
  4123  0E5A  01A2               	clrf	_SYSC+2
  4124                           
  4125                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4126  0E5B  01A3               	clrf	_SYSC+3
  4127  0E5C  01A4               	clrf	_SYSC+4
  4128                           
  4129                           ;SYSC_B1.c: 38: } else {
  4130  0E5D  0008               	return
  4131  0E5E                     l3666:	
  4132                           
  4133                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4134  0E5E  3001               	movlw	1
  4135  0E5F  07A3               	addwf	_SYSC+3,f
  4136  0E60  1803               	skipnc
  4137  0E61  0AA4               	incf	_SYSC+4,f
  4138  0E62  3000               	movlw	0
  4139  0E63  07A4               	addwf	_SYSC+4,f
  4140                           
  4141                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4142  0E64  3001               	movlw	1
  4143  0E65  0624               	xorwf	_SYSC+4,w
  4144  0E66  1D03               	skipz
  4145  0E67  2E6A               	goto	u3445
  4146  0E68  30F4               	movlw	244
  4147  0E69  0623               	xorwf	_SYSC+3,w
  4148  0E6A                     u3445:	
  4149  0E6A  1D03               	skipz
  4150  0E6B  0008               	return
  4151                           
  4152                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4153  0E6C  01A3               	clrf	_SYSC+3
  4154  0E6D  01A4               	clrf	_SYSC+4
  4155                           
  4156                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4157  0E6E  10A0               	bcf	_SYSC,1
  4158  0E6F  0008               	return
  4159  0E70                     __end_of_setSYSC_Main:	
  4160                           
  4161                           	psect	text18
  4162  0A90                     __ptext18:	
  4163 ;; *************** function _SYSC_Initialization *****************
  4164 ;; Defined at:
  4165 ;;		line 7 in file "../src/SYSC_B1.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4179 ;;      Params:         0       0       0       0
  4180 ;;      Locals:         0       0       0       0
  4181 ;;      Temps:          0       0       0       0
  4182 ;;      Totals:         0       0       0       0
  4183 ;;Total ram usage:        0 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    3
  4186 ;; This function calls:
  4187 ;;		_setSYSC_Initialization
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _SYSC_Initialization
  4195  0A90                     _SYSC_Initialization:	
  4196                           
  4197                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4201  0A90  158A  22A4         	fcall	_setSYSC_Initialization
  4202  0A92  0008               	return
  4203  0A93                     __end_of_SYSC_Initialization:	
  4204                           
  4205                           	psect	text19
  4206  0AA4                     __ptext19:	
  4207 ;; *************** function _setSYSC_Initialization *****************
  4208 ;; Defined at:
  4209 ;;		line 13 in file "../src/SYSC_B1.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		None
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4223 ;;      Params:         0       0       0       0
  4224 ;;      Locals:         0       0       0       0
  4225 ;;      Temps:          0       0       0       0
  4226 ;;      Totals:         0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    2
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_SYSC_Initialization
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _setSYSC_Initialization
  4239  0AA4                     _setSYSC_Initialization:	
  4240                           
  4241                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _setSYSC_Initialization: []
  4245  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  4246  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  4247  0AA6  1420               	bsf	_SYSC,0
  4248  0AA7  0008               	return
  4249  0AA8                     __end_of_setSYSC_Initialization:	
  4250                           
  4251                           	psect	text20
  4252  0026                     __ptext20:	
  4253 ;; *************** function _PIR_Main *****************
  4254 ;; Defined at:
  4255 ;;		line 13 in file "../src/PIR_B1.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4260 ;;  TriggerValue    1   16[BANK0 ] unsigned char 
  4261 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  4262 ;;  cds             1   12[BANK0 ] unsigned char 
  4263 ;;  error           1   11[BANK0 ] unsigned char 
  4264 ;; Return value:  Size  Location     Type
  4265 ;;		None               void
  4266 ;; Registers used:
  4267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4273 ;;      Params:         0       0       0       0
  4274 ;;      Locals:         0       7       0       0
  4275 ;;      Temps:          0       5       0       0
  4276 ;;      Totals:         0      12       0       0
  4277 ;;Total ram usage:       12 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    5
  4280 ;; This function calls:
  4281 ;;		_getCDS_Status
  4282 ;;		_getLights_Status
  4283 ;;		_getMain_All_Error_Status
  4284 ;;		_setLED
  4285 ;;		_setLights_SwOff
  4286 ;;		_setLights_SwOn
  4287 ;; This function is called by:
  4288 ;;		_main
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           
  4293                           ;psect for function _PIR_Main
  4294  0026                     _PIR_Main:	
  4295                           
  4296                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4297                           
  4298                           ;incstack = 0
  4299                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4300  0026  3000               	movlw	0
  4301  0027  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  4302  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4303  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4304  002C  00D7               	movwf	??_PIR_Main
  4305  002D  0857               	movf	??_PIR_Main,w
  4306  002E  00DC               	movwf	PIR_Main@error
  4307                           
  4308                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4309  002F  158A  22D5  118A   	fcall	_getCDS_Status
  4310  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0034  00D7               	movwf	??_PIR_Main
  4313  0035  0857               	movf	??_PIR_Main,w
  4314  0036  00DD               	movwf	PIR_Main@cds
  4315                           
  4316                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4317  0037  01E2               	clrf	PIR_Main@LightsStatus
  4318                           
  4319                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4320  0038  01DE               	clrf	PIR_Main@Enable_Switch
  4321  0039  0ADE               	incf	PIR_Main@Enable_Switch,f
  4322                           
  4323                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4324  003A  01E1               	clrf	PIR_Main@TriggerValue
  4325                           
  4326                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4327  003B  3001               	movlw	1
  4328  003C  158A  2361  118A   	fcall	_getLights_Status
  4329  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4330  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4331  0041  00D7               	movwf	??_PIR_Main
  4332  0042  0857               	movf	??_PIR_Main,w
  4333  0043  00E2               	movwf	PIR_Main@LightsStatus
  4334                           
  4335                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4336  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4337  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4338  0046  1C20               	btfss	__PIR^(0+128),0
  4339  0047  2A12               	goto	l927
  4340                           
  4341                           ;PIR_B1.c: 36: if (error == 0) {
  4342  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4343  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4344  004A  08DC               	movf	PIR_Main@error,f
  4345  004B  1D03               	skipz
  4346  004C  288B               	goto	l928
  4347                           
  4348                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4349  004D  085D               	movf	PIR_Main@cds,w
  4350  004E  3A01               	xorlw	1
  4351  004F  1D03               	skipz
  4352  0050  2859               	goto	l929
  4353  0051  085E               	movf	PIR_Main@Enable_Switch,w
  4354  0052  3A01               	xorlw	1
  4355  0053  1D03               	skipz
  4356  0054  2859               	goto	l929
  4357                           
  4358                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4359  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4360  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4361  0057  17A0               	bsf	__PIR^(0+128),7
  4362                           
  4363                           ;PIR_B1.c: 40: } else {
  4364  0058  287B               	goto	l5238
  4365  0059                     l929:	
  4366                           
  4367                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4368  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4369  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4370  005B  13A0               	bcf	__PIR^(0+128),7
  4371                           
  4372                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4373  005C  1DA0               	btfss	__PIR^(0+128),3
  4374  005D  287B               	goto	l5238
  4375                           
  4376                           ;PIR_B1.c: 45: setLED(1, 0);
  4377  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4378  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4379  0060  01D1               	clrf	setLED@command
  4380  0061  3001               	movlw	1
  4381  0062  158A  278F  118A   	fcall	_setLED
  4382                           
  4383                           ;PIR_B1.c: 46: setLED(2, 0);
  4384  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4385  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4386  0067  01D1               	clrf	setLED@command
  4387  0068  3002               	movlw	2
  4388  0069  158A  278F  118A   	fcall	_setLED
  4389                           
  4390                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  4391  006C  3001               	movlw	1
  4392  006D  158A  2361  118A   	fcall	_getLights_Status
  4393  0070  3A01               	xorlw	1
  4394  0071  1D03               	skipz
  4395  0072  287B               	goto	l5238
  4396                           
  4397                           ;PIR_B1.c: 52: setLights_SwOn(1);
  4398  0073  3001               	movlw	1
  4399  0074  158A  2500  118A   	fcall	_setLights_SwOn
  4400                           
  4401                           ;PIR_B1.c: 53: setLights_SwOff(1);
  4402  0077  3001               	movlw	1
  4403  0078  158A  2436  118A   	fcall	_setLights_SwOff
  4404  007B                     l5238:	
  4405                           
  4406                           ;PIR_B1.c: 55: }
  4407                           ;PIR_B1.c: 67: }
  4408                           ;PIR_B1.c: 68: }
  4409                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  4410  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4411  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4412  007D  1A20               	btfsc	__PIR^(0+128),4
  4413  007E  2891               	goto	l935
  4414                           
  4415                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  4416  007F  1620               	bsf	__PIR^(0+128),4
  4417                           
  4418                           ;PIR_B1.c: 75: if (_PIR.OK == 0) {
  4419  0080  19A0               	btfsc	__PIR^(0+128),3
  4420  0081  2891               	goto	l935
  4421                           
  4422                           ;PIR_B1.c: 76: setLED(1, 1);
  4423  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4425  0084  01D1               	clrf	setLED@command
  4426  0085  0AD1               	incf	setLED@command,f
  4427  0086  3001               	movlw	1
  4428  0087  158A  278F  118A   	fcall	_setLED
  4429                           
  4430                           ;PIR_B1.c: 77: }
  4431                           ;PIR_B1.c: 80: }
  4432                           ;PIR_B1.c: 81: } else {
  4433  008A  2891               	goto	l935
  4434  008B                     l928:	
  4435                           
  4436                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  4437  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4438  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4439  008D  1E20               	btfss	__PIR^(0+128),4
  4440  008E  2891               	goto	l935
  4441                           
  4442                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  4443  008F  1220               	bcf	__PIR^(0+128),4
  4444                           
  4445                           ;PIR_B1.c: 84: _PIR.Available = 0;
  4446  0090  13A0               	bcf	__PIR^(0+128),7
  4447  0091                     l935:	
  4448                           
  4449                           ;PIR_B1.c: 102: }
  4450                           ;PIR_B1.c: 103: }
  4451                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  4452  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4453  0092  1303               	bcf	3,6	;RP1=0, select bank1
  4454  0093  18A0               	btfsc	__PIR^(0+128),1
  4455  0094  28A4               	goto	l937
  4456                           
  4457                           ;PIR_B1.c: 106: _PIR.Time++;
  4458  0095  3001               	movlw	1
  4459  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4460  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4461  0098  00D7               	movwf	??_PIR_Main
  4462  0099  0857               	movf	??_PIR_Main,w
  4463  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4464  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4465  009C  07A2               	addwf	(__PIR^(0+128)+2),f
  4466                           
  4467                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  4468  009D  0822               	movf	(__PIR^(0+128)+2),w
  4469  009E  3A05               	xorlw	5
  4470  009F  1D03               	skipz
  4471  00A0  29B1               	goto	l5326
  4472                           
  4473                           ;PIR_B1.c: 108: _PIR.Time = 0;
  4474  00A1  01A2               	clrf	(__PIR^(0+128)+2)
  4475                           
  4476                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  4477  00A2  14A0               	bsf	__PIR^(0+128),1
  4478                           
  4479                           ;PIR_B1.c: 110: }
  4480                           ;PIR_B1.c: 111: } else {
  4481  00A3  29B1               	goto	l5326
  4482  00A4                     l937:	
  4483                           
  4484                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  4485  00A4  1D20               	btfss	__PIR^(0+128),2
  4486  00A5  29B1               	goto	l5326
  4487                           
  4488                           ;PIR_B1.c: 113: _PIR.GO = 0;
  4489  00A6  1120               	bcf	__PIR^(0+128),2
  4490                           
  4491                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  4492  00A7  10A0               	bcf	__PIR^(0+128),1
  4493                           
  4494                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  4495  00A8  1BA0               	btfsc	__PIR^(0+128),7
  4496                           
  4497                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  4498  00A9  1DA0               	btfss	__PIR^(0+128),3
  4499  00AA  29B1               	goto	l5326
  4500                           
  4501                           ;PIR_B1.c: 118: _PIR.Time++;
  4502  00AB  3001               	movlw	1
  4503  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4504  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4505  00AE  00D7               	movwf	??_PIR_Main
  4506  00AF  0857               	movf	??_PIR_Main,w
  4507  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  4508  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  4509  00B2  07A2               	addwf	(__PIR^(0+128)+2),f
  4510                           
  4511                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  4512  00B3  0822               	movf	(__PIR^(0+128)+2),w
  4513  00B4  3A3C               	xorlw	60
  4514  00B5  1D03               	skipz
  4515  00B6  28EB               	goto	l5294
  4516                           
  4517                           ;PIR_B1.c: 120: _PIR.Time = 0;
  4518  00B7  01A2               	clrf	(__PIR^(0+128)+2)
  4519                           
  4520                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  4521  00B8  305A               	movlw	90
  4522  00B9  0247               	subwf	(__PIR^(0+128)+39),w
  4523  00BA  1C03               	skipc
  4524  00BB  28C7               	goto	l5276
  4525                           
  4526                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  4527  00BC  01C6               	clrf	(__PIR^(0+128)+38)
  4528                           
  4529                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  4530  00BD  0848               	movf	(__PIR^(0+128)+40),w
  4531  00BE  3A19               	xorlw	25
  4532  00BF  1903               	btfsc	3,2
  4533  00C0  28DC               	goto	L12
  4534                           
  4535                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  4536                           
  4537                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  4538  00C1  0848               	movf	(__PIR^(0+128)+40),w
  4539  00C2  3A23               	xorlw	35
  4540  00C3  1D03               	skipz
  4541  00C4  28EA               	goto	l5292
  4542                           
  4543                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  4544  00C5  302D               	movlw	45
  4545  00C6  28E3               	goto	L9
  4546  00C7                     l5276:	
  4547                           ;PIR_B1.c: 128: }
  4548                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  4549                           
  4550  00C7  300B               	movlw	11
  4551  00C8  0247               	subwf	(__PIR^(0+128)+39),w
  4552  00C9  1803               	skipnc
  4553  00CA  28EA               	goto	l5292
  4554                           
  4555                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  4556  00CB  3001               	movlw	1
  4557  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4558  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4559  00CE  00D7               	movwf	??_PIR_Main
  4560  00CF  0857               	movf	??_PIR_Main,w
  4561  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4562  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4563  00D2  07C6               	addwf	(__PIR^(0+128)+38),f
  4564                           
  4565                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  4566  00D3  0846               	movf	(__PIR^(0+128)+38),w
  4567  00D4  3A02               	xorlw	2
  4568  00D5  1D03               	skipz
  4569  00D6  28EA               	goto	l5292
  4570                           
  4571                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  4572  00D7  01C6               	clrf	(__PIR^(0+128)+38)
  4573                           
  4574                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  4575  00D8  0848               	movf	(__PIR^(0+128)+40),w
  4576  00D9  3A2D               	xorlw	45
  4577  00DA  1D03               	skipz
  4578  00DB  28DE               	goto	l5288
  4579  00DC                     L12:	
  4580                           
  4581                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  4582  00DC  3023               	movlw	35
  4583  00DD  28E3               	goto	L9
  4584  00DE                     l5288:	
  4585                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  4586                           
  4587  00DE  0848               	movf	(__PIR^(0+128)+40),w
  4588  00DF  3A23               	xorlw	35
  4589  00E0  1D03               	skipz
  4590  00E1  28EA               	goto	l5292
  4591                           
  4592                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  4593  00E2  3019               	movlw	25
  4594  00E3                     L9:	
  4595  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4596  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4597  00E5  00D7               	movwf	??_PIR_Main
  4598  00E6  0857               	movf	??_PIR_Main,w
  4599  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4600  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4601  00E9  00C8               	movwf	(__PIR^(0+128)+40)
  4602  00EA                     l5292:	
  4603                           
  4604                           ;PIR_B1.c: 138: }
  4605                           ;PIR_B1.c: 139: }
  4606                           ;PIR_B1.c: 140: }
  4607                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  4608  00EA  01C7               	clrf	(__PIR^(0+128)+39)
  4609  00EB                     l5294:	
  4610                           
  4611                           ;PIR_B1.c: 142: }
  4612                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4613                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4614  00EB  0848               	movf	(__PIR^(0+128)+40),w
  4615  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4616  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4617  00EE  00D7               	movwf	??_PIR_Main
  4618  00EF  01D8               	clrf	??_PIR_Main+1
  4619  00F0  09D7               	comf	??_PIR_Main,f
  4620  00F1  09D8               	comf	??_PIR_Main+1,f
  4621  00F2  0AD7               	incf	??_PIR_Main,f
  4622  00F3  1903               	skipnz
  4623  00F4  0AD8               	incf	??_PIR_Main+1,f
  4624  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4625  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4626  00F7  0823               	movf	(__PIR^(0+128)+3),w
  4627  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  4628  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  4629  00FA  0757               	addwf	??_PIR_Main,w
  4630  00FB  00D9               	movwf	??_PIR_Main+2
  4631  00FC  0858               	movf	??_PIR_Main+1,w
  4632  00FD  1803               	skipnc
  4633  00FE  0A58               	incf	??_PIR_Main+1,w
  4634  00FF  00DA               	movwf	??_PIR_Main+3
  4635  0100  085A               	movf	??_PIR_Main+3,w
  4636  0101  3A80               	xorlw	128
  4637  0102  3C80               	sublw	128
  4638  0103  1D03               	skipz
  4639  0104  2909               	goto	u6785
  4640  0105  0859               	movf	??_PIR_Main+2,w
  4641  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4642  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4643  0108  0221               	subwf	(__PIR^(0+128)+1),w
  4644  0109                     u6785:	
  4645  0109  1C03               	skipc
  4646  010A  292B               	goto	l5304
  4647  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4648  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4649  010D  0823               	movf	(__PIR^(0+128)+3),w
  4650  010E  0748               	addwf	(__PIR^(0+128)+40),w
  4651  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4652  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4653  0111  00D7               	movwf	??_PIR_Main
  4654  0112  01D8               	clrf	??_PIR_Main+1
  4655  0113  0DD8               	rlf	??_PIR_Main+1,f
  4656  0114  0858               	movf	??_PIR_Main+1,w
  4657  0115  3A80               	xorlw	128
  4658  0116  00D9               	movwf	??_PIR_Main+2
  4659  0117  3080               	movlw	128
  4660  0118  0259               	subwf	??_PIR_Main+2,w
  4661  0119  1D03               	skipz
  4662  011A  2921               	goto	u6795
  4663  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4664  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4665  011D  0821               	movf	(__PIR^(0+128)+1),w
  4666  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4667  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4668  0120  0257               	subwf	??_PIR_Main,w
  4669  0121                     u6795:	
  4670  0121  1C03               	skipc
  4671  0122  292B               	goto	l5304
  4672                           
  4673                           ;PIR_B1.c: 148: _PIR.Count = 0;
  4674  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4675  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4676  0125  01BE               	clrf	(__PIR^(0+128)+30)
  4677  0126  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4678                           
  4679                           ;PIR_B1.c: 155: setLED(1, 0);
  4680  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0129  01D1               	clrf	setLED@command
  4683  012A  299A               	goto	L13
  4684  012B                     l5304:	
  4685                           ;PIR_B1.c: 159: } else {
  4686                           
  4687                           ;PIR_B1.c: 156: setLED(2, 0);
  4688                           
  4689                           
  4690                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  4691  012B  3001               	movlw	1
  4692  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4693  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4694  012E  00D7               	movwf	??_PIR_Main
  4695  012F  0857               	movf	??_PIR_Main,w
  4696  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4697  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4698  0132  07C7               	addwf	(__PIR^(0+128)+39),f
  4699                           
  4700                           ;PIR_B1.c: 163: _PIR.Count++;
  4701  0133  3001               	movlw	1
  4702  0134  07BE               	addwf	(__PIR^(0+128)+30),f
  4703  0135  1803               	skipnc
  4704  0136  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4705  0137  3000               	movlw	0
  4706  0138  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4707                           
  4708                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4709  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4710  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4711  013B  0862               	movf	PIR_Main@LightsStatus,w
  4712  013C  3A01               	xorlw	1
  4713  013D  1903               	skipnz
  4714  013E  293F               	goto	l5312
  4715  013F                     l5312:	
  4716  013F  3003               	movlw	3
  4717  0140  00DF               	movwf	_PIR_Main$2874
  4718  0141  3000               	movlw	0
  4719  0142  00E0               	movwf	_PIR_Main$2874+1
  4720  0143  085F               	movf	_PIR_Main$2874,w
  4721  0144  00D7               	movwf	??_PIR_Main
  4722  0145  0857               	movf	??_PIR_Main,w
  4723  0146  00E1               	movwf	PIR_Main@TriggerValue
  4724                           
  4725                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  4726  0147  0861               	movf	PIR_Main@TriggerValue,w
  4727  0148  00D7               	movwf	??_PIR_Main
  4728  0149  01D8               	clrf	??_PIR_Main+1
  4729  014A  1683               	bsf	3,5	;RP0=1, select bank1
  4730  014B  1303               	bcf	3,6	;RP1=0, select bank1
  4731  014C  083F               	movf	((__PIR+1)^(0+128)+30),w
  4732  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4733  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4734  014F  0658               	xorwf	??_PIR_Main+1,w
  4735  0150  1D03               	skipz
  4736  0151  2958               	goto	u6815
  4737  0152  1683               	bsf	3,5	;RP0=1, select bank1
  4738  0153  1303               	bcf	3,6	;RP1=0, select bank1
  4739  0154  083E               	movf	(__PIR^(0+128)+30),w
  4740  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4741  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4742  0157  0657               	xorwf	??_PIR_Main,w
  4743  0158                     u6815:	
  4744  0158  1D03               	skipz
  4745  0159  29B1               	goto	l5326
  4746                           
  4747                           ;PIR_B1.c: 169: _PIR.CloseTimeSeconds = 0;
  4748  015A  1683               	bsf	3,5	;RP0=1, select bank1
  4749  015B  1303               	bcf	3,6	;RP1=0, select bank1
  4750  015C  01C2               	clrf	(__PIR^(0+128)+34)
  4751                           
  4752                           ;PIR_B1.c: 170: _PIR.CloseTimeMinutes = 0;
  4753  015D  01C0               	clrf	(__PIR^(0+128)+32)
  4754  015E  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4755                           
  4756                           ;PIR_B1.c: 172: _PIR.Count = 0;
  4757  015F  01BE               	clrf	(__PIR^(0+128)+30)
  4758  0160  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4759                           
  4760                           ;PIR_B1.c: 179: if (getLights_Status(1) == 0) {
  4761  0161  3001               	movlw	1
  4762  0162  158A  2361  118A   	fcall	_getLights_Status
  4763  0165  3800               	iorlw	0
  4764  0166  1D03               	skipz
  4765  0167  2970               	goto	l5320
  4766                           
  4767                           ;PIR_B1.c: 180: setLights_SwOn(1);
  4768  0168  3001               	movlw	1
  4769  0169  158A  2500  118A   	fcall	_setLights_SwOn
  4770                           
  4771                           ;PIR_B1.c: 181: setLights_SwOff(1);
  4772  016C  3001               	movlw	1
  4773  016D  158A  2436  118A   	fcall	_setLights_SwOff
  4774  0170                     l5320:	
  4775                           
  4776                           ;PIR_B1.c: 183: }
  4777                           ;PIR_B1.c: 197: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4778  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4780  0172  0848               	movf	(__PIR^(0+128)+40),w
  4781  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4782  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4783  0175  00D7               	movwf	??_PIR_Main
  4784  0176  01D8               	clrf	??_PIR_Main+1
  4785  0177  09D7               	comf	??_PIR_Main,f
  4786  0178  09D8               	comf	??_PIR_Main+1,f
  4787  0179  0AD7               	incf	??_PIR_Main,f
  4788  017A  1903               	skipnz
  4789  017B  0AD8               	incf	??_PIR_Main+1,f
  4790  017C  1683               	bsf	3,5	;RP0=1, select bank1
  4791  017D  1303               	bcf	3,6	;RP1=0, select bank1
  4792  017E  0823               	movf	(__PIR^(0+128)+3),w
  4793  017F  1283               	bcf	3,5	;RP0=0, select bank0
  4794  0180  1303               	bcf	3,6	;RP1=0, select bank0
  4795  0181  0757               	addwf	??_PIR_Main,w
  4796  0182  00D9               	movwf	??_PIR_Main+2
  4797  0183  0858               	movf	??_PIR_Main+1,w
  4798  0184  1803               	skipnc
  4799  0185  0A58               	incf	??_PIR_Main+1,w
  4800  0186  00DA               	movwf	??_PIR_Main+3
  4801  0187  085A               	movf	??_PIR_Main+3,w
  4802  0188  3A80               	xorlw	128
  4803  0189  00DB               	movwf	??_PIR_Main+4
  4804  018A  3080               	movlw	128
  4805  018B  025B               	subwf	??_PIR_Main+4,w
  4806  018C  1D03               	skipz
  4807  018D  2994               	goto	u6835
  4808  018E  1683               	bsf	3,5	;RP0=1, select bank1
  4809  018F  1303               	bcf	3,6	;RP1=0, select bank1
  4810  0190  0821               	movf	(__PIR^(0+128)+1),w
  4811  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4812  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4813  0193  0259               	subwf	??_PIR_Main+2,w
  4814  0194                     u6835:	
  4815  0194  1C03               	skipc
  4816  0195  29A2               	goto	l5324
  4817                           
  4818                           ;PIR_B1.c: 198: setLED(1, 1);
  4819  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4820  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4821  0198  01D1               	clrf	setLED@command
  4822  0199  0AD1               	incf	setLED@command,f
  4823  019A                     L13:	
  4824  019A  3001               	movlw	1
  4825  019B  158A  278F  118A   	fcall	_setLED
  4826                           
  4827                           ;PIR_B1.c: 199: setLED(2, 0);
  4828  019E  1283               	bcf	3,5	;RP0=0, select bank0
  4829  019F  1303               	bcf	3,6	;RP1=0, select bank0
  4830  01A0  01D1               	clrf	setLED@command
  4831  01A1  29AD               	goto	L10
  4832  01A2                     l5324:	
  4833                           ;PIR_B1.c: 200: } else {
  4834                           
  4835                           
  4836                           ;PIR_B1.c: 201: setLED(1, 0);
  4837  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4838  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4839  01A4  01D1               	clrf	setLED@command
  4840  01A5  3001               	movlw	1
  4841  01A6  158A  278F  118A   	fcall	_setLED
  4842                           
  4843                           ;PIR_B1.c: 202: setLED(2, 1);
  4844  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  4845  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  4846  01AB  01D1               	clrf	setLED@command
  4847  01AC  0AD1               	incf	setLED@command,f
  4848  01AD                     L10:	
  4849  01AD  3002               	movlw	2
  4850  01AE  158A  278F  118A   	fcall	_setLED
  4851  01B1                     l5326:	
  4852                           
  4853                           ;PIR_B1.c: 203: }
  4854                           ;PIR_B1.c: 245: }
  4855                           ;PIR_B1.c: 246: }
  4856                           ;PIR_B1.c: 247: }
  4857                           ;PIR_B1.c: 248: }
  4858                           ;PIR_B1.c: 249: }
  4859                           ;PIR_B1.c: 250: }
  4860                           ;PIR_B1.c: 251: if (_PIR.OK == 0) {
  4861  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4862  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  4863  01B3  19A0               	btfsc	__PIR^(0+128),3
  4864  01B4  29DC               	goto	l5340
  4865                           
  4866                           ;PIR_B1.c: 252: _PIR.Count++;
  4867  01B5  3001               	movlw	1
  4868  01B6  07BE               	addwf	(__PIR^(0+128)+30),f
  4869  01B7  1803               	skipnc
  4870  01B8  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4871  01B9  3000               	movlw	0
  4872  01BA  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4873                           
  4874                           ;PIR_B1.c: 253: if (_PIR.Count == (30000 / 20)) {
  4875  01BB  3005               	movlw	5
  4876  01BC  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  4877  01BD  1D03               	skipz
  4878  01BE  29C1               	goto	u6855
  4879  01BF  30DC               	movlw	220
  4880  01C0  063E               	xorwf	(__PIR^(0+128)+30),w
  4881  01C1                     u6855:	
  4882  01C1  1D03               	skipz
  4883  01C2  0008               	return
  4884                           
  4885                           ;PIR_B1.c: 254: _PIR.Count = 0;
  4886  01C3  01BE               	clrf	(__PIR^(0+128)+30)
  4887  01C4  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4888                           
  4889                           ;PIR_B1.c: 255: _PIR.OK = 1;
  4890  01C5  15A0               	bsf	__PIR^(0+128),3
  4891                           
  4892                           ;PIR_B1.c: 257: setLED(1, 0);
  4893  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  4894  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  4895  01C8  01D1               	clrf	setLED@command
  4896  01C9  3001               	movlw	1
  4897  01CA  158A  278F  118A   	fcall	_setLED
  4898                           
  4899                           ;PIR_B1.c: 263: if (getLights_Status(1) == 1) {
  4900  01CD  3001               	movlw	1
  4901  01CE  158A  2361  118A   	fcall	_getLights_Status
  4902  01D1  3A01               	xorlw	1
  4903  01D2  1D03               	skipz
  4904  01D3  0008               	return
  4905                           
  4906                           ;PIR_B1.c: 264: setLights_SwOn(1);
  4907  01D4  3001               	movlw	1
  4908  01D5  158A  2500  118A   	fcall	_setLights_SwOn
  4909                           
  4910                           ;PIR_B1.c: 265: setLights_SwOff(1);
  4911  01D8  3001               	movlw	1
  4912  01D9  158A  2436         	fcall	_setLights_SwOff
  4913                           
  4914                           ;PIR_B1.c: 267: }
  4915                           ;PIR_B1.c: 280: }
  4916                           ;PIR_B1.c: 281: } else {
  4917  01DB  0008               	return
  4918  01DC                     l5340:	
  4919                           
  4920                           ;PIR_B1.c: 283: if (LightsStatus == 1) {
  4921  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  4922  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  4923  01DE  0862               	movf	PIR_Main@LightsStatus,w
  4924  01DF  3A01               	xorlw	1
  4925  01E0  1D03               	skipz
  4926  01E1  2A0C               	goto	l5358
  4927                           
  4928                           ;PIR_B1.c: 284: _PIR.CloseTimeSeconds++;
  4929  01E2  3001               	movlw	1
  4930  01E3  00D7               	movwf	??_PIR_Main
  4931  01E4  0857               	movf	??_PIR_Main,w
  4932  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  4933  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  4934  01E7  07C2               	addwf	(__PIR^(0+128)+34),f
  4935                           
  4936                           ;PIR_B1.c: 285: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4937  01E8  0842               	movf	(__PIR^(0+128)+34),w
  4938  01E9  3A32               	xorlw	50
  4939  01EA  1D03               	skipz
  4940  01EB  0008               	return
  4941                           
  4942                           ;PIR_B1.c: 286: _PIR.CloseTimeSeconds = 0;
  4943  01EC  01C2               	clrf	(__PIR^(0+128)+34)
  4944                           
  4945                           ;PIR_B1.c: 287: _PIR.CloseTimeMinutes++;
  4946  01ED  3001               	movlw	1
  4947  01EE  07C0               	addwf	(__PIR^(0+128)+32),f
  4948  01EF  1803               	skipnc
  4949  01F0  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  4950  01F1  3000               	movlw	0
  4951  01F2  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  4952                           
  4953                           ;PIR_B1.c: 288: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4954  01F3  0844               	movf	((__PIR+1)^(0+128)+35),w
  4955  01F4  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  4956  01F5  1D03               	skipz
  4957  01F6  29F9               	goto	u6895
  4958  01F7  0843               	movf	(__PIR^(0+128)+35),w
  4959  01F8  0640               	xorwf	(__PIR^(0+128)+32),w
  4960  01F9                     u6895:	
  4961  01F9  1D03               	skipz
  4962  01FA  0008               	return
  4963                           
  4964                           ;PIR_B1.c: 289: _PIR.CloseTimeMinutes = 0;
  4965  01FB  01C0               	clrf	(__PIR^(0+128)+32)
  4966  01FC  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4967                           
  4968                           ;PIR_B1.c: 295: if (getLights_Status(1) == 1) {
  4969  01FD  3001               	movlw	1
  4970  01FE  158A  2361  118A   	fcall	_getLights_Status
  4971  0201  3A01               	xorlw	1
  4972  0202  1D03               	skipz
  4973  0203  0008               	return
  4974                           
  4975                           ;PIR_B1.c: 296: setLights_SwOn(1);
  4976  0204  3001               	movlw	1
  4977  0205  158A  2500  118A   	fcall	_setLights_SwOn
  4978                           
  4979                           ;PIR_B1.c: 297: setLights_SwOff(1);
  4980  0208  3001               	movlw	1
  4981  0209  158A  2436         	fcall	_setLights_SwOff
  4982                           
  4983                           ;PIR_B1.c: 299: }
  4984                           ;PIR_B1.c: 311: }
  4985                           ;PIR_B1.c: 312: }
  4986                           ;PIR_B1.c: 313: } else {
  4987  020B  0008               	return
  4988  020C                     l5358:	
  4989                           
  4990                           ;PIR_B1.c: 314: _PIR.CloseTimeSeconds = 0;
  4991  020C  1683               	bsf	3,5	;RP0=1, select bank1
  4992  020D  1303               	bcf	3,6	;RP1=0, select bank1
  4993  020E  01C2               	clrf	(__PIR^(0+128)+34)
  4994                           
  4995                           ;PIR_B1.c: 315: _PIR.CloseTimeMinutes = 0;
  4996  020F  01C0               	clrf	(__PIR^(0+128)+32)
  4997  0210  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4998                           
  4999                           ;PIR_B1.c: 316: }
  5000                           ;PIR_B1.c: 318: }
  5001                           ;PIR_B1.c: 319: } else {
  5002  0211  0008               	return
  5003  0212                     l927:	
  5004                           
  5005                           ;PIR_B1.c: 320: if (myMain.PowerON == 1) {
  5006  0212  1283               	bcf	3,5	;RP0=0, select bank0
  5007  0213  1303               	bcf	3,6	;RP1=0, select bank0
  5008  0214  1C25               	btfss	_myMain,0
  5009  0215  0008               	return
  5010                           
  5011                           ;PIR_B1.c: 321: _PIR.Enable = 1;
  5012  0216  1683               	bsf	3,5	;RP0=1, select bank1
  5013  0217  1303               	bcf	3,6	;RP1=0, select bank1
  5014  0218  1420               	bsf	__PIR^(0+128),0
  5015                           
  5016                           ;PIR_B1.c: 323: setLED(1, 1);
  5017  0219  1283               	bcf	3,5	;RP0=0, select bank0
  5018  021A  1303               	bcf	3,6	;RP1=0, select bank0
  5019  021B  01D1               	clrf	setLED@command
  5020  021C  0AD1               	incf	setLED@command,f
  5021  021D  3001               	movlw	1
  5022  021E  158A  278F  118A   	fcall	_setLED
  5023                           
  5024                           ;PIR_B1.c: 328: if (getLights_Status(1) == 0) {
  5025  0221  3001               	movlw	1
  5026  0222  158A  2361  118A   	fcall	_getLights_Status
  5027  0225  3800               	iorlw	0
  5028  0226  1D03               	skipz
  5029  0227  0008               	return
  5030                           
  5031                           ;PIR_B1.c: 329: setLights_SwOn(1);
  5032  0228  3001               	movlw	1
  5033  0229  158A  2500  118A   	fcall	_setLights_SwOn
  5034                           
  5035                           ;PIR_B1.c: 330: setLights_SwOff(1);
  5036  022C  3001               	movlw	1
  5037  022D  158A  2436         	fcall	_setLights_SwOff
  5038  022F  0008               	return
  5039  0230                     __end_of_PIR_Main:	
  5040                           
  5041                           	psect	text21
  5042  0AD5                     __ptext21:	
  5043 ;; *************** function _getCDS_Status *****************
  5044 ;; Defined at:
  5045 ;;		line 42 in file "../src/CDS_B1.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;  status          1    4[COMMON] unsigned char 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      unsigned char 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5059 ;;      Params:         0       0       0       0
  5060 ;;      Locals:         1       0       0       0
  5061 ;;      Temps:          0       0       0       0
  5062 ;;      Totals:         1       0       0       0
  5063 ;;Total ram usage:        1 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    2
  5066 ;; This function calls:
  5067 ;;		Nothing
  5068 ;; This function is called by:
  5069 ;;		_PIR_Main
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           
  5074                           ;psect for function _getCDS_Status
  5075  0AD5                     _getCDS_Status:	
  5076                           
  5077                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5078                           
  5079                           ;incstack = 0
  5080                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5081  0AD5  3000               	movlw	0
  5082  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  5083  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  5084  0AD8  1A2E               	btfsc	__CDS,4
  5085  0AD9  3001               	movlw	1
  5086  0ADA  00F4               	movwf	getCDS_Status@status
  5087                           
  5088                           ;CDS_B1.c: 44: return status;
  5089  0ADB  0874               	movf	getCDS_Status@status,w
  5090  0ADC  0008               	return
  5091  0ADD                     __end_of_getCDS_Status:	
  5092                           
  5093                           	psect	text22
  5094  0B03                     __ptext22:	
  5095 ;; *************** function _PIR_Initialization *****************
  5096 ;; Defined at:
  5097 ;;		line 7 in file "../src/PIR_B1.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;		None               void
  5104 ;; Registers used:
  5105 ;;		wreg
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5111 ;;      Params:         0       0       0       0
  5112 ;;      Locals:         0       0       0       0
  5113 ;;      Temps:          1       0       0       0
  5114 ;;      Totals:         1       0       0       0
  5115 ;;Total ram usage:        1 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    2
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_main
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _PIR_Initialization
  5127  0B03                     _PIR_Initialization:	
  5128                           
  5129                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in _PIR_Initialization: [wreg]
  5133  0B03  3019               	movlw	25
  5134  0B04  00F4               	movwf	??_PIR_Initialization
  5135  0B05  0874               	movf	??_PIR_Initialization,w
  5136  0B06  1683               	bsf	3,5	;RP0=1, select bank1
  5137  0B07  1303               	bcf	3,6	;RP1=0, select bank1
  5138  0B08  00C8               	movwf	(__PIR^(0+128)+40)
  5139                           
  5140                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5141  0B09  3005               	movlw	5
  5142  0B0A  00C3               	movwf	(__PIR^(0+128)+35)
  5143  0B0B  3000               	movlw	0
  5144  0B0C  00C4               	movwf	(__PIR^(0+128)+36)
  5145  0B0D  0008               	return
  5146  0B0E                     __end_of_PIR_Initialization:	
  5147                           
  5148                           	psect	text23
  5149  0B52                     __ptext23:	
  5150 ;; *************** function _Mcu_Initialization *****************
  5151 ;; Defined at:
  5152 ;;		line 30 in file "../src/MCU_B1.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;		None
  5157 ;; Return value:  Size  Location     Type
  5158 ;;		None               void
  5159 ;; Registers used:
  5160 ;;		wreg, status,2, status,0, pclath, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5166 ;;      Params:         0       0       0       0
  5167 ;;      Locals:         0       0       0       0
  5168 ;;      Temps:          0       0       0       0
  5169 ;;      Totals:         0       0       0       0
  5170 ;;Total ram usage:        0 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    3
  5173 ;; This function calls:
  5174 ;;		_ADC_Set
  5175 ;;		_Fosc_Set
  5176 ;;		_IO_Set
  5177 ;;		_TMR1_Set
  5178 ;;		_WDT_Set
  5179 ;; This function is called by:
  5180 ;;		_main
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function _Mcu_Initialization
  5186  0B52                     _Mcu_Initialization:	
  5187                           
  5188                           ;MCU_B1.c: 32: Fosc_Set();
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5192  0B52  158A  22A8  158A   	fcall	_Fosc_Set
  5193                           
  5194                           ;MCU_B1.c: 34: IO_Set();
  5195  0B55  158A  2404  158A   	fcall	_IO_Set
  5196                           
  5197                           ;MCU_B1.c: 36: ;;
  5198                           ;MCU_B1.c: 38: TMR1_Set();
  5199  0B58  158A  2336  158A   	fcall	_TMR1_Set
  5200                           
  5201                           ;MCU_B1.c: 40: ADC_Set();
  5202  0B5B  158A  22C6  158A   	fcall	_ADC_Set
  5203                           
  5204                           ;MCU_B1.c: 42: ;;
  5205                           ;MCU_B1.c: 44: ;;
  5206                           ;MCU_B1.c: 46: ;;
  5207                           ;MCU_B1.c: 48: ;;
  5208                           ;MCU_B1.c: 50: ;;
  5209                           ;MCU_B1.c: 52: WDT_Set();
  5210  0B5E  158A  2344         	fcall	_WDT_Set
  5211  0B60  0008               	return
  5212  0B61                     __end_of_Mcu_Initialization:	
  5213                           
  5214                           	psect	text24
  5215  0B44                     __ptext24:	
  5216 ;; *************** function _WDT_Set *****************
  5217 ;; Defined at:
  5218 ;;		line 1102 in file "../src/MCU_B1.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;		None               void
  5225 ;; Registers used:
  5226 ;;		wreg
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5232 ;;      Params:         0       0       0       0
  5233 ;;      Locals:         0       0       0       0
  5234 ;;      Temps:          1       0       0       0
  5235 ;;      Totals:         1       0       0       0
  5236 ;;Total ram usage:        1 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    2
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_Mcu_Initialization
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _WDT_Set
  5248  0B44                     _WDT_Set:	
  5249                           
  5250                           ;MCU_B1.c: 1104: PSA = 1;
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _WDT_Set: [wreg]
  5254  0B44  1683               	bsf	3,5	;RP0=1, select bank1
  5255  0B45  1303               	bcf	3,6	;RP1=0, select bank1
  5256  0B46  1581               	bsf	1,3	;volatile
  5257                           
  5258                           ;MCU_B1.c: 1105: PS0 = 1;
  5259  0B47  1401               	bsf	1,0	;volatile
  5260                           
  5261                           ;MCU_B1.c: 1106: PS1 = 1;
  5262  0B48  1481               	bsf	1,1	;volatile
  5263                           
  5264                           ;MCU_B1.c: 1107: PS2 = 1;
  5265  0B49  1501               	bsf	1,2	;volatile
  5266                           
  5267                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5268  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  5269  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  5270  0B4C  1435               	bsf	_WDT,0
  5271                           
  5272                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5273  0B4D  300A               	movlw	10
  5274  0B4E  00F4               	movwf	??_WDT_Set
  5275  0B4F  0874               	movf	??_WDT_Set,w
  5276  0B50  00B6               	movwf	_WDT+1
  5277  0B51  0008               	return
  5278  0B52                     __end_of_WDT_Set:	
  5279                           
  5280                           	psect	text25
  5281  0B36                     __ptext25:	
  5282 ;; *************** function _TMR1_Set *****************
  5283 ;; Defined at:
  5284 ;;		line 226 in file "../src/MCU_B1.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;		None               void
  5291 ;; Registers used:
  5292 ;;		wreg
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5298 ;;      Params:         0       0       0       0
  5299 ;;      Locals:         0       0       0       0
  5300 ;;      Temps:          0       0       0       0
  5301 ;;      Totals:         0       0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:    2
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_Mcu_Initialization
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           
  5313                           ;psect for function _TMR1_Set
  5314  0B36                     _TMR1_Set:	
  5315                           
  5316                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _TMR1_Set: [wreg]
  5320  0B36  3041               	movlw	65
  5321  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0B39  0090               	movwf	16	;volatile
  5324                           
  5325                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5326  0B3A  30FA               	movlw	250
  5327  0B3B  008F               	movwf	15	;volatile
  5328                           
  5329                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5330  0B3C  3038               	movlw	56
  5331  0B3D  008E               	movwf	14	;volatile
  5332                           
  5333                           ;MCU_B1.c: 230: TMR1IE = 1;
  5334  0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  5335  0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  5336  0B40  140C               	bsf	12,0	;volatile
  5337                           
  5338                           ;MCU_B1.c: 231: PEIE = 1;
  5339  0B41  170B               	bsf	11,6	;volatile
  5340                           
  5341                           ;MCU_B1.c: 232: GIE = 1;
  5342  0B42  178B               	bsf	11,7	;volatile
  5343  0B43  0008               	return
  5344  0B44                     __end_of_TMR1_Set:	
  5345                           
  5346                           	psect	text26
  5347  0C04                     __ptext26:	
  5348 ;; *************** function _IO_Set *****************
  5349 ;; Defined at:
  5350 ;;		line 60 in file "../src/MCU_B1.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		wreg, status,2
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5364 ;;      Params:         0       0       0       0
  5365 ;;      Locals:         0       0       0       0
  5366 ;;      Temps:          0       0       0       0
  5367 ;;      Totals:         0       0       0       0
  5368 ;;Total ram usage:        0 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    2
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_Mcu_Initialization
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           
  5379                           ;psect for function _IO_Set
  5380  0C04                     _IO_Set:	
  5381                           
  5382                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _IO_Set: [wreg+status,2]
  5386  0C04  302F               	movlw	47
  5387  0C05  1683               	bsf	3,5	;RP0=1, select bank1
  5388  0C06  1303               	bcf	3,6	;RP1=0, select bank1
  5389  0C07  0085               	movwf	5	;volatile
  5390                           
  5391                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5392  0C08  3001               	movlw	1
  5393  0C09  0086               	movwf	6	;volatile
  5394                           
  5395                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5396  0C0A  0187               	clrf	7	;volatile
  5397                           
  5398                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5399  0C0B  3007               	movlw	7
  5400  0C0C  1683               	bsf	3,5	;RP0=1, select bank3
  5401  0C0D  1703               	bsf	3,6	;RP1=1, select bank3
  5402  0C0E  0085               	movwf	5	;volatile
  5403                           
  5404                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5405  0C0F  3001               	movlw	1
  5406  0C10  0086               	movwf	6	;volatile
  5407                           
  5408                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5409  0C11  30AF               	movlw	175
  5410  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  5411  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  5412  0C14  0085               	movwf	5	;volatile
  5413                           
  5414                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5415  0C15  3001               	movlw	1
  5416  0C16  0086               	movwf	6	;volatile
  5417                           
  5418                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5419  0C17  0187               	clrf	7	;volatile
  5420                           
  5421                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5422  0C18  1683               	bsf	3,5	;RP0=1, select bank1
  5423  0C19  1303               	bcf	3,6	;RP1=0, select bank1
  5424  0C1A  0195               	clrf	21	;volatile
  5425  0C1B  0008               	return
  5426  0C1C                     __end_of_IO_Set:	
  5427                           
  5428                           	psect	text27
  5429  0AA8                     __ptext27:	
  5430 ;; *************** function _Fosc_Set *****************
  5431 ;; Defined at:
  5432 ;;		line 56 in file "../src/MCU_B1.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;		None
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;		None
  5437 ;; Return value:  Size  Location     Type
  5438 ;;		None               void
  5439 ;; Registers used:
  5440 ;;		wreg
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5446 ;;      Params:         0       0       0       0
  5447 ;;      Locals:         0       0       0       0
  5448 ;;      Temps:          0       0       0       0
  5449 ;;      Totals:         0       0       0       0
  5450 ;;Total ram usage:        0 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    2
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_Mcu_Initialization
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _Fosc_Set
  5462  0AA8                     _Fosc_Set:	
  5463                           
  5464                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _Fosc_Set: [wreg]
  5468  0AA8  303C               	movlw	60
  5469  0AA9  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0AAA  1303               	bcf	3,6	;RP1=0, select bank1
  5471  0AAB  0090               	movwf	16	;volatile
  5472  0AAC  0008               	return
  5473  0AAD                     __end_of_Fosc_Set:	
  5474                           
  5475                           	psect	text28
  5476  0AC6                     __ptext28:	
  5477 ;; *************** function _ADC_Set *****************
  5478 ;; Defined at:
  5479 ;;		line 427 in file "../src/MCU_B1.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;		None               void
  5486 ;; Registers used:
  5487 ;;		wreg
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5493 ;;      Params:         0       0       0       0
  5494 ;;      Locals:         0       0       0       0
  5495 ;;      Temps:          0       0       0       0
  5496 ;;      Totals:         0       0       0       0
  5497 ;;Total ram usage:        0 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    2
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_Mcu_Initialization
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _ADC_Set
  5509  0AC6                     _ADC_Set:	
  5510                           
  5511                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _ADC_Set: [wreg]
  5515  0AC6  3073               	movlw	115
  5516  0AC7  1683               	bsf	3,5	;RP0=1, select bank1
  5517  0AC8  1303               	bcf	3,6	;RP1=0, select bank1
  5518  0AC9  009F               	movwf	31	;volatile
  5519                           
  5520                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  5521  0ACA  30C1               	movlw	193
  5522  0ACB  009D               	movwf	29	;volatile
  5523  0ACC  0008               	return
  5524  0ACD                     __end_of_ADC_Set:	
  5525                           
  5526                           	psect	text29
  5527  0230                     __ptext29:	
  5528 ;; *************** function _Load_Main *****************
  5529 ;; Defined at:
  5530 ;;		line 40 in file "../src/OverLoad_B1.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  i               2   15[BANK0 ] int 
  5535 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5536 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5537 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5538 ;;  error           1    9[BANK0 ] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;		None               void
  5541 ;; Registers used:
  5542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5548 ;;      Params:         0       0       0       0
  5549 ;;      Locals:         0       8       0       0
  5550 ;;      Temps:          0       2       0       0
  5551 ;;      Totals:         0      10       0       0
  5552 ;;Total ram usage:       10 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    3
  5555 ;; This function calls:
  5556 ;;		___lwdiv
  5557 ;;		___wmul
  5558 ;;		_getLight_LoadGO
  5559 ;;		_getLight_Load_Status
  5560 ;;		_getMain_All_Error_Status
  5561 ;;		_getMain_All_LightsStatus
  5562 ;;		_getMain_Lights_Count
  5563 ;;		_setLoad_AH_AL_Restore
  5564 ;; This function is called by:
  5565 ;;		_main
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           
  5570                           ;psect for function _Load_Main
  5571  0230                     _Load_Main:	
  5572                           
  5573                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
  5574                           
  5575                           ;incstack = 0
  5576                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5577  0230  3000               	movlw	0
  5578  0231  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  5579  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5580  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5581  0236  00D8               	movwf	??_Load_Main
  5582  0237  0858               	movf	??_Load_Main,w
  5583  0238  00DA               	movwf	Load_Main@error
  5584                           
  5585                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
  5586  0239  01DE               	clrf	Load_Main@Load_RunStatus
  5587  023A  01DD               	clrf	Load_Main@ErrorCountValue
  5588  023B  01DF               	clrf	Load_Main@LightsCount
  5589                           
  5590                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5591  023C  1683               	bsf	3,5	;RP0=1, select bank1
  5592  023D  1303               	bcf	3,6	;RP1=0, select bank1
  5593  023E  1C4A               	btfss	_Load^(0+128),0
  5594  023F  2C12               	goto	l725
  5595                           
  5596                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5597  0240  158A  22E6  118A   	fcall	_getMain_All_LightsStatus
  5598  0243  3800               	iorlw	0
  5599  0244  1D03               	skipz
  5600  0245  2A49               	goto	l5064
  5601                           
  5602                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5603  0246  1683               	bsf	3,5	;RP0=1, select bank1
  5604  0247  1303               	bcf	3,6	;RP1=0, select bank1
  5605  0248  2A68               	goto	l5080
  5606  0249                     l5064:	
  5607                           ;OverLoad_B1.c: 47: } else {
  5608                           
  5609                           
  5610                           ;OverLoad_B1.c: 70: if (error == 0) {
  5611  0249  1283               	bcf	3,5	;RP0=0, select bank0
  5612  024A  1303               	bcf	3,6	;RP1=0, select bank0
  5613  024B  08DA               	movf	Load_Main@error,f
  5614  024C  1D03               	skipz
  5615  024D  2A65               	goto	l728
  5616                           
  5617                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5618  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5619  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5620  0250  14CA               	bsf	_Load^(0+128),1
  5621                           
  5622                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5623  0251  158A  22AD  118A   	fcall	_getLight_LoadGO
  5624  0254  3A01               	xorlw	1
  5625  0255  1D03               	skipz
  5626  0256  2A5F               	goto	l729
  5627                           
  5628                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5629  0257  1683               	bsf	3,5	;RP0=1, select bank1
  5630  0258  1303               	bcf	3,6	;RP1=0, select bank1
  5631  0259  1DCA               	btfss	_Load^(0+128),3
  5632  025A  1BCA               	btfsc	_Load^(0+128),7
  5633  025B  2A69               	goto	l727
  5634                           
  5635                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5636  025C  15CA               	bsf	_Load^(0+128),3
  5637                           
  5638                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5639  025D  01E3               	clrf	(_Load^(0+128)+25)
  5640                           
  5641                           ;OverLoad_B1.c: 77: }
  5642                           ;OverLoad_B1.c: 78: } else {
  5643  025E  2A69               	goto	l727
  5644  025F                     l729:	
  5645                           
  5646                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5647  025F  1683               	bsf	3,5	;RP0=1, select bank1
  5648  0260  1303               	bcf	3,6	;RP1=0, select bank1
  5649  0261  1FCA               	btfss	_Load^(0+128),7
  5650  0262  2A69               	goto	l727
  5651                           
  5652                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5653  0263  13CA               	bcf	_Load^(0+128),7
  5654                           
  5655                           ;OverLoad_B1.c: 81: }
  5656                           ;OverLoad_B1.c: 82: }
  5657                           ;OverLoad_B1.c: 83: } else {
  5658  0264  2A69               	goto	l727
  5659  0265                     l728:	
  5660                           
  5661                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5662  0265  1683               	bsf	3,5	;RP0=1, select bank1
  5663  0266  1303               	bcf	3,6	;RP1=0, select bank1
  5664  0267  18CA               	btfsc	_Load^(0+128),1
  5665  0268                     l5080:	
  5666                           
  5667                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5668  0268  10CA               	bcf	_Load^(0+128),1
  5669  0269                     l727:	
  5670                           
  5671                           ;OverLoad_B1.c: 86: }
  5672                           ;OverLoad_B1.c: 87: }
  5673                           ;OverLoad_B1.c: 89: }
  5674                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5675  0269  1CCA               	btfss	_Load^(0+128),1
  5676  026A  2BEB               	goto	l735
  5677                           
  5678                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5679  026B  154A               	bsf	_Load^(0+128),2
  5680                           
  5681                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5682  026C  1E4A               	btfss	_Load^(0+128),4
  5683  026D  2BE9               	goto	l736
  5684                           
  5685                           ;OverLoad_B1.c: 96: Load.Time++;
  5686  026E  3001               	movlw	1
  5687  026F  07CB               	addwf	(_Load^(0+128)+1),f
  5688  0270  1803               	skipnc
  5689  0271  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5690  0272  3000               	movlw	0
  5691  0273  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5692                           
  5693                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5694  0274  3000               	movlw	0
  5695  0275  024C               	subwf	((_Load+1)^(0+128)+1),w
  5696  0276  3002               	movlw	2
  5697  0277  1903               	skipnz
  5698  0278  024B               	subwf	(_Load^(0+128)+1),w
  5699  0279  1C03               	skipc
  5700  027A  0008               	return
  5701                           
  5702                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5703  027B  01CB               	clrf	(_Load^(0+128)+1)
  5704  027C  01CC               	clrf	((_Load+1)^(0+128)+1)
  5705                           
  5706                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5707  027D  124A               	bcf	_Load^(0+128),4
  5708                           
  5709                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5710  027E  3001               	movlw	1
  5711  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5712  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5713  0281  00E0               	movwf	Load_Main@i
  5714  0282  3000               	movlw	0
  5715  0283  00E1               	movwf	Load_Main@i+1
  5716  0284  0861               	movf	Load_Main@i+1,w
  5717  0285  3A80               	xorlw	128
  5718  0286  00FF               	movwf	127
  5719  0287  3080               	movlw	128
  5720  0288  027F               	subwf	127,w
  5721  0289  1D03               	skipz
  5722  028A  2A8D               	goto	u6335
  5723  028B  3004               	movlw	4
  5724  028C  0260               	subwf	Load_Main@i,w
  5725  028D                     u6335:	
  5726  028D  1803               	btfsc	3,0
  5727  028E  2ACB               	goto	l5102
  5728  028F                     l5096:	
  5729                           
  5730                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5731  028F  1283               	bcf	3,5	;RP0=0, select bank0
  5732  0290  1303               	bcf	3,6	;RP1=0, select bank0
  5733  0291  0860               	movf	Load_Main@i,w
  5734  0292  3ED4               	addlw	(_Load+10)& (0+255)
  5735  0293  0084               	movwf	4
  5736  0294  1383               	bcf	3,7	;select IRP bank1
  5737  0295  0800               	movf	0,w
  5738  0296  00D8               	movwf	??_Load_Main
  5739  0297  01D9               	clrf	??_Load_Main+1
  5740  0298  0858               	movf	??_Load_Main,w
  5741  0299  1683               	bsf	3,5	;RP0=1, select bank1
  5742  029A  1303               	bcf	3,6	;RP1=0, select bank1
  5743  029B  07CF               	addwf	(_Load^(0+128)+5),f
  5744  029C  1803               	skipnc
  5745  029D  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5746  029E  1283               	bcf	3,5	;RP0=0, select bank0
  5747  029F  1303               	bcf	3,6	;RP1=0, select bank0
  5748  02A0  0859               	movf	??_Load_Main+1,w
  5749  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  5750  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  5751  02A3  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5752                           
  5753                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5754  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  5755  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  5756  02A6  0860               	movf	Load_Main@i,w
  5757  02A7  3ED9               	addlw	(_Load+15)& (0+255)
  5758  02A8  0084               	movwf	4
  5759  02A9  0800               	movf	0,w
  5760  02AA  00D8               	movwf	??_Load_Main
  5761  02AB  01D9               	clrf	??_Load_Main+1
  5762  02AC  0858               	movf	??_Load_Main,w
  5763  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  5764  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  5765  02AF  07D1               	addwf	(_Load^(0+128)+7),f
  5766  02B0  1803               	skipnc
  5767  02B1  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5768  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  5769  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  5770  02B4  0859               	movf	??_Load_Main+1,w
  5771  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  5772  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  5773  02B7  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5774  02B8  3001               	movlw	1
  5775  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  5776  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5777  02BB  07E0               	addwf	Load_Main@i,f
  5778  02BC  1803               	skipnc
  5779  02BD  0AE1               	incf	Load_Main@i+1,f
  5780  02BE  3000               	movlw	0
  5781  02BF  07E1               	addwf	Load_Main@i+1,f
  5782  02C0  0861               	movf	Load_Main@i+1,w
  5783  02C1  3A80               	xorlw	128
  5784  02C2  00FF               	movwf	127
  5785  02C3  3080               	movlw	128
  5786  02C4  027F               	subwf	127,w
  5787  02C5  1D03               	skipz
  5788  02C6  2AC9               	goto	u6345
  5789  02C7  3004               	movlw	4
  5790  02C8  0260               	subwf	Load_Main@i,w
  5791  02C9                     u6345:	
  5792  02C9  1C03               	skipc
  5793  02CA  2A8F               	goto	l5096
  5794  02CB                     l5102:	
  5795                           
  5796                           ;OverLoad_B1.c: 104: }
  5797                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5798  02CB  3003               	movlw	3
  5799  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  5800  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  5801  02CE  00D1               	movwf	___lwdiv@divisor
  5802  02CF  3000               	movlw	0
  5803  02D0  00D2               	movwf	___lwdiv@divisor+1
  5804  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  5805  02D2  1303               	bcf	3,6	;RP1=0, select bank1
  5806  02D3  0850               	movf	((_Load+1)^(0+128)+5),w
  5807  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  5808  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  5809  02D6  01D4               	clrf	___lwdiv@dividend+1
  5810  02D7  07D4               	addwf	___lwdiv@dividend+1,f
  5811  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  5812  02D9  1303               	bcf	3,6	;RP1=0, select bank1
  5813  02DA  084F               	movf	(_Load^(0+128)+5),w
  5814  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  5815  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  5816  02DD  01D3               	clrf	___lwdiv@dividend
  5817  02DE  07D3               	addwf	___lwdiv@dividend,f
  5818  02DF  158A  25EC  118A   	fcall	___lwdiv
  5819  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  5820  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  5821  02E4  0852               	movf	?___lwdiv+1,w
  5822  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  5823  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  5824  02E7  01D0               	clrf	((_Load+1)^(0+128)+5)
  5825  02E8  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5826  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5827  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5828  02EB  0851               	movf	?___lwdiv,w
  5829  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  5830  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  5831  02EE  01CF               	clrf	(_Load^(0+128)+5)
  5832  02EF  07CF               	addwf	(_Load^(0+128)+5),f
  5833                           
  5834                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5835  02F0  3003               	movlw	3
  5836  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  5837  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  5838  02F3  00D1               	movwf	___lwdiv@divisor
  5839  02F4  3000               	movlw	0
  5840  02F5  00D2               	movwf	___lwdiv@divisor+1
  5841  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5842  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5843  02F8  0852               	movf	((_Load+1)^(0+128)+7),w
  5844  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5845  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5846  02FB  01D4               	clrf	___lwdiv@dividend+1
  5847  02FC  07D4               	addwf	___lwdiv@dividend+1,f
  5848  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  5849  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  5850  02FF  0851               	movf	(_Load^(0+128)+7),w
  5851  0300  1283               	bcf	3,5	;RP0=0, select bank0
  5852  0301  1303               	bcf	3,6	;RP1=0, select bank0
  5853  0302  01D3               	clrf	___lwdiv@dividend
  5854  0303  07D3               	addwf	___lwdiv@dividend,f
  5855  0304  158A  25EC  118A   	fcall	___lwdiv
  5856  0307  1283               	bcf	3,5	;RP0=0, select bank0
  5857  0308  1303               	bcf	3,6	;RP1=0, select bank0
  5858  0309  0852               	movf	?___lwdiv+1,w
  5859  030A  1683               	bsf	3,5	;RP0=1, select bank1
  5860  030B  1303               	bcf	3,6	;RP1=0, select bank1
  5861  030C  01D2               	clrf	((_Load+1)^(0+128)+7)
  5862  030D  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5863  030E  1283               	bcf	3,5	;RP0=0, select bank0
  5864  030F  1303               	bcf	3,6	;RP1=0, select bank0
  5865  0310  0851               	movf	?___lwdiv,w
  5866  0311  1683               	bsf	3,5	;RP0=1, select bank1
  5867  0312  1303               	bcf	3,6	;RP1=0, select bank1
  5868  0313  01D1               	clrf	(_Load^(0+128)+7)
  5869  0314  07D1               	addwf	(_Load^(0+128)+7),f
  5870                           
  5871                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
  5872  0315  158A  23BF  118A   	fcall	_setLoad_AH_AL_Restore
  5873                           
  5874                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
  5875  0318  1683               	bsf	3,5	;RP0=1, select bank1
  5876  0319  1303               	bcf	3,6	;RP1=0, select bank1
  5877  031A  0852               	movf	((_Load+1)^(0+128)+7),w
  5878  031B  0250               	subwf	((_Load+1)^(0+128)+5),w
  5879  031C  1D03               	skipz
  5880  031D  2B20               	goto	u6355
  5881  031E  0851               	movf	(_Load^(0+128)+7),w
  5882  031F  024F               	subwf	(_Load^(0+128)+5),w
  5883  0320                     u6355:	
  5884  0320  1C03               	skipc
  5885  0321  0008               	return
  5886                           
  5887                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
  5888  0322  0351               	decf	(_Load^(0+128)+7),w
  5889  0323  3AFF               	xorlw	255
  5890  0324  074F               	addwf	(_Load^(0+128)+5),w
  5891  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5892  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5893  0327  00D8               	movwf	??_Load_Main
  5894  0328  0858               	movf	??_Load_Main,w
  5895  0329  1683               	bsf	3,5	;RP0=1, select bank1
  5896  032A  1303               	bcf	3,6	;RP1=0, select bank1
  5897  032B  00DE               	movwf	(_Load^(0+128)+20)
  5898                           
  5899                           ;OverLoad_B1.c: 112: Load.ADH = 0;
  5900  032C  01CF               	clrf	(_Load^(0+128)+5)
  5901  032D  01D0               	clrf	((_Load+1)^(0+128)+5)
  5902                           
  5903                           ;OverLoad_B1.c: 113: Load.ADL = 0;
  5904  032E  01D1               	clrf	(_Load^(0+128)+7)
  5905  032F  01D2               	clrf	((_Load+1)^(0+128)+7)
  5906                           
  5907                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
  5908  0330  1DCA               	btfss	_Load^(0+128),3
  5909  0331  2B95               	goto	l741
  5910                           
  5911                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
  5912  0332  3002               	movlw	2
  5913  0333  0263               	subwf	(_Load^(0+128)+25),w
  5914  0334  1803               	skipnc
  5915  0335  2B95               	goto	l741
  5916                           
  5917                           ;OverLoad_B1.c: 117: Load.Count++;
  5918  0336  3001               	movlw	1
  5919  0337  1283               	bcf	3,5	;RP0=0, select bank0
  5920  0338  1303               	bcf	3,6	;RP1=0, select bank0
  5921  0339  00D8               	movwf	??_Load_Main
  5922  033A  0858               	movf	??_Load_Main,w
  5923  033B  1683               	bsf	3,5	;RP0=1, select bank1
  5924  033C  1303               	bcf	3,6	;RP1=0, select bank1
  5925  033D  07E3               	addwf	(_Load^(0+128)+25),f
  5926                           
  5927                           ;OverLoad_B1.c: 122: Load_RunStatus = getLight_Load_Status();
  5928  033E  158A  22B3  118A   	fcall	_getLight_Load_Status
  5929  0341  1283               	bcf	3,5	;RP0=0, select bank0
  5930  0342  1303               	bcf	3,6	;RP1=0, select bank0
  5931  0343  00D8               	movwf	??_Load_Main
  5932  0344  0858               	movf	??_Load_Main,w
  5933  0345  00DE               	movwf	Load_Main@Load_RunStatus
  5934                           
  5935                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
  5936  0346  158A  22F9  118A   	fcall	_getMain_Lights_Count
  5937  0349  1283               	bcf	3,5	;RP0=0, select bank0
  5938  034A  1303               	bcf	3,6	;RP1=0, select bank0
  5939  034B  00D8               	movwf	??_Load_Main
  5940  034C  0858               	movf	??_Load_Main,w
  5941  034D  00DF               	movwf	Load_Main@LightsCount
  5942                           
  5943                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
  5944  034E  1683               	bsf	3,5	;RP0=1, select bank1
  5945  034F  1303               	bcf	3,6	;RP1=0, select bank1
  5946  0350  0863               	movf	(_Load^(0+128)+25),w
  5947  0351  3A01               	xorlw	1
  5948  0352  1D03               	skipz
  5949  0353  2B56               	goto	l5128
  5950                           
  5951                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(20*1.7);
  5952  0354  3022               	movlw	34
  5953  0355  2B63               	goto	L14
  5954  0356                     l5128:	
  5955                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
  5956                           
  5957  0356  0863               	movf	(_Load^(0+128)+25),w
  5958  0357  3A02               	xorlw	2
  5959  0358  1D03               	skipz
  5960  0359  2B95               	goto	l741
  5961                           
  5962                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
  5963  035A  1283               	bcf	3,5	;RP0=0, select bank0
  5964  035B  1303               	bcf	3,6	;RP1=0, select bank0
  5965  035C  085F               	movf	Load_Main@LightsCount,w
  5966  035D  3A01               	xorlw	1
  5967  035E  1D03               	skipz
  5968  035F  2B66               	goto	l5134
  5969                           
  5970                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(8*1.7);
  5971  0360  300D               	movlw	13
  5972  0361  1683               	bsf	3,5	;RP0=1, select bank1
  5973  0362  1303               	bcf	3,6	;RP1=0, select bank1
  5974  0363                     L14:	
  5975  0363  00E1               	movwf	(_Load^(0+128)+23)
  5976  0364  3000               	movlw	0
  5977  0365  2B94               	goto	L15
  5978  0366                     l5134:	
  5979                           ;OverLoad_B1.c: 132: } else {
  5980                           
  5981                           
  5982                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
  5983  0366  1283               	bcf	3,5	;RP0=0, select bank0
  5984  0367  08DE               	movf	Load_Main@Load_RunStatus,f
  5985  0368  1D03               	skipz
  5986  0369  2B87               	goto	l5138
  5987                           
  5988                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(8*1.7) * LightsCount;
  5989  036A  085F               	movf	Load_Main@LightsCount,w
  5990  036B  00D8               	movwf	??_Load_Main
  5991  036C  01D9               	clrf	??_Load_Main+1
  5992  036D  0858               	movf	??_Load_Main,w
  5993  036E  00D1               	movwf	___wmul@multiplier
  5994  036F  0859               	movf	??_Load_Main+1,w
  5995  0370  00D2               	movwf	___wmul@multiplier+1
  5996  0371  300D               	movlw	13
  5997  0372  00D3               	movwf	___wmul@multiplicand
  5998  0373  3000               	movlw	0
  5999  0374  00D4               	movwf	___wmul@multiplicand+1
  6000  0375  158A  2525  118A   	fcall	___wmul
  6001  0378  1283               	bcf	3,5	;RP0=0, select bank0
  6002  0379  1303               	bcf	3,6	;RP1=0, select bank0
  6003  037A  0852               	movf	?___wmul+1,w
  6004  037B  1683               	bsf	3,5	;RP0=1, select bank1
  6005  037C  1303               	bcf	3,6	;RP1=0, select bank1
  6006  037D  01E2               	clrf	((_Load+1)^(0+128)+23)
  6007  037E  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6008  037F  1283               	bcf	3,5	;RP0=0, select bank0
  6009  0380  1303               	bcf	3,6	;RP1=0, select bank0
  6010  0381  0851               	movf	?___wmul,w
  6011  0382  1683               	bsf	3,5	;RP0=1, select bank1
  6012  0383  1303               	bcf	3,6	;RP1=0, select bank1
  6013  0384  01E1               	clrf	(_Load^(0+128)+23)
  6014  0385  07E1               	addwf	(_Load^(0+128)+23),f
  6015                           
  6016                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
  6017  0386  2B95               	goto	l741
  6018  0387                     l5138:	
  6019  0387  1283               	bcf	3,5	;RP0=0, select bank0
  6020  0388  085E               	movf	Load_Main@Load_RunStatus,w
  6021  0389  3A01               	xorlw	1
  6022  038A  1D03               	skipz
  6023  038B  2B95               	goto	l741
  6024                           
  6025                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(8*1.7) + Load.TotalLoad;
  6026  038C  1683               	bsf	3,5	;RP0=1, select bank1
  6027  038D  1303               	bcf	3,6	;RP1=0, select bank1
  6028  038E  0853               	movf	(_Load^(0+128)+9),w
  6029  038F  3E0D               	addlw	13
  6030  0390  00E1               	movwf	(_Load^(0+128)+23)
  6031  0391  3000               	movlw	0
  6032  0392  1803               	skipnc
  6033  0393  3001               	movlw	1
  6034  0394                     L15:	
  6035  0394  00E2               	movwf	(_Load^(0+128)+24)
  6036  0395                     l741:	
  6037                           
  6038                           ;OverLoad_B1.c: 137: }
  6039                           ;OverLoad_B1.c: 138: }
  6040                           ;OverLoad_B1.c: 139: }
  6041                           ;OverLoad_B1.c: 140: }
  6042                           ;OverLoad_B1.c: 141: }
  6043                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
  6044  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6045  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6046  0397  085E               	movf	(_Load^(0+128)+20),w
  6047  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6048  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6049  039A  00D8               	movwf	??_Load_Main
  6050  039B  01D9               	clrf	??_Load_Main+1
  6051  039C  1683               	bsf	3,5	;RP0=1, select bank1
  6052  039D  1303               	bcf	3,6	;RP1=0, select bank1
  6053  039E  0862               	movf	((_Load+1)^(0+128)+23),w
  6054  039F  1283               	bcf	3,5	;RP0=0, select bank0
  6055  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  6056  03A1  0259               	subwf	??_Load_Main+1,w
  6057  03A2  1D03               	skipz
  6058  03A3  2BAA               	goto	u6435
  6059  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  6060  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  6061  03A6  0861               	movf	(_Load^(0+128)+23),w
  6062  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  6063  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  6064  03A9  0258               	subwf	??_Load_Main,w
  6065  03AA                     u6435:	
  6066  03AA  1C03               	skipc
  6067  03AB  2BCB               	goto	l5156
  6068                           
  6069                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6070  03AC  085F               	movf	Load_Main@LightsCount,w
  6071  03AD  3A01               	xorlw	1
  6072  03AE  1903               	skipnz
  6073  03AF  2BB2               	goto	l5146
  6074  03B0  3003               	movlw	3
  6075  03B1  2BB3               	goto	L16
  6076  03B2                     l5146:	
  6077  03B2  3002               	movlw	2
  6078  03B3                     L16:	
  6079  03B3  00DB               	movwf	_Load_Main$2405
  6080  03B4  3000               	movlw	0
  6081  03B5  00DC               	movwf	_Load_Main$2405+1
  6082  03B6  085B               	movf	_Load_Main$2405,w
  6083  03B7  00D8               	movwf	??_Load_Main
  6084  03B8  0858               	movf	??_Load_Main,w
  6085  03B9  00DD               	movwf	Load_Main@ErrorCountValue
  6086                           
  6087                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
  6088  03BA  3001               	movlw	1
  6089  03BB  00D8               	movwf	??_Load_Main
  6090  03BC  0858               	movf	??_Load_Main,w
  6091  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  6092  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  6093  03BF  07E4               	addwf	(_Load^(0+128)+26),f
  6094                           
  6095                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
  6096  03C0  0864               	movf	(_Load^(0+128)+26),w
  6097  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  6098  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  6099  03C3  025D               	subwf	Load_Main@ErrorCountValue,w
  6100  03C4  1803               	skipnc
  6101  03C5  0008               	return
  6102                           
  6103                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
  6104  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6105  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6106  03C8  01E4               	clrf	(_Load^(0+128)+26)
  6107                           
  6108                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
  6109  03C9  16CA               	bsf	_Load^(0+128),5
  6110                           
  6111                           ;OverLoad_B1.c: 170: }
  6112                           ;OverLoad_B1.c: 171: } else {
  6113  03CA  0008               	return
  6114  03CB                     l5156:	
  6115                           
  6116                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
  6117  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  6118  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  6119  03CD  01E4               	clrf	(_Load^(0+128)+26)
  6120                           
  6121                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
  6122  03CE  1DCA               	btfss	_Load^(0+128),3
  6123  03CF  0008               	return
  6124                           
  6125                           ;OverLoad_B1.c: 174: Load.SafeCount++;
  6126  03D0  3001               	movlw	1
  6127  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  6128  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  6129  03D3  00D8               	movwf	??_Load_Main
  6130  03D4  0858               	movf	??_Load_Main,w
  6131  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  6132  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  6133  03D7  07E5               	addwf	(_Load^(0+128)+27),f
  6134                           
  6135                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
  6136  03D8  3003               	movlw	3
  6137  03D9  0265               	subwf	(_Load^(0+128)+27),w
  6138  03DA  1C03               	skipc
  6139  03DB  0008               	return
  6140                           
  6141                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
  6142  03DC  01E5               	clrf	(_Load^(0+128)+27)
  6143                           
  6144                           ;OverLoad_B1.c: 177: Load.OK = 1;
  6145  03DD  17CA               	bsf	_Load^(0+128),7
  6146                           
  6147                           ;OverLoad_B1.c: 178: Load.Run = 0;
  6148  03DE  11CA               	bcf	_Load^(0+128),3
  6149                           
  6150                           ;OverLoad_B1.c: 179: Load.Count = 0;
  6151  03DF  01E3               	clrf	(_Load^(0+128)+25)
  6152                           
  6153                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
  6154  03E0  085E               	movf	(_Load^(0+128)+20),w
  6155  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  6156  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  6157  03E3  00D8               	movwf	??_Load_Main
  6158  03E4  0858               	movf	??_Load_Main,w
  6159  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  6160  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  6161  03E7  00D3               	movwf	(_Load^(0+128)+9)
  6162                           
  6163                           ;OverLoad_B1.c: 184: }
  6164                           ;OverLoad_B1.c: 185: }
  6165                           ;OverLoad_B1.c: 208: }
  6166                           ;OverLoad_B1.c: 209: }
  6167                           ;OverLoad_B1.c: 210: }
  6168                           ;OverLoad_B1.c: 211: } else {
  6169  03E8  0008               	return
  6170  03E9                     l736:	
  6171                           
  6172                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
  6173  03E9  164A               	bsf	_Load^(0+128),4
  6174                           
  6175                           ;OverLoad_B1.c: 213: }
  6176                           ;OverLoad_B1.c: 214: } else {
  6177  03EA  0008               	return
  6178  03EB                     l735:	
  6179                           
  6180                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
  6181  03EB  1D4A               	btfss	_Load^(0+128),2
  6182  03EC  2BFF               	goto	l5192
  6183                           
  6184                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
  6185  03ED  114A               	bcf	_Load^(0+128),2
  6186                           
  6187                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
  6188  03EE  124A               	bcf	_Load^(0+128),4
  6189                           
  6190                           ;OverLoad_B1.c: 220: Load.Time = 0;
  6191  03EF  01CB               	clrf	(_Load^(0+128)+1)
  6192  03F0  01CC               	clrf	((_Load+1)^(0+128)+1)
  6193                           
  6194                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
  6195  03F1  158A  23BF  118A   	fcall	_setLoad_AH_AL_Restore
  6196                           
  6197                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
  6198  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  6199  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  6200  03F6  01E4               	clrf	(_Load^(0+128)+26)
  6201                           
  6202                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
  6203  03F7  01E5               	clrf	(_Load^(0+128)+27)
  6204                           
  6205                           ;OverLoad_B1.c: 226: Load.ADH = 0;
  6206  03F8  01CF               	clrf	(_Load^(0+128)+5)
  6207  03F9  01D0               	clrf	((_Load+1)^(0+128)+5)
  6208                           
  6209                           ;OverLoad_B1.c: 227: Load.ADL = 0;
  6210  03FA  01D1               	clrf	(_Load^(0+128)+7)
  6211  03FB  01D2               	clrf	((_Load+1)^(0+128)+7)
  6212                           
  6213                           ;OverLoad_B1.c: 233: Load.Run = 0;
  6214  03FC  11CA               	bcf	_Load^(0+128),3
  6215                           
  6216                           ;OverLoad_B1.c: 234: Load.Count = 0;
  6217  03FD  01E3               	clrf	(_Load^(0+128)+25)
  6218                           
  6219                           ;OverLoad_B1.c: 235: Load.OK = 0;
  6220  03FE  13CA               	bcf	_Load^(0+128),7
  6221  03FF                     l5192:	
  6222                           
  6223                           ;OverLoad_B1.c: 257: }
  6224                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
  6225  03FF  1ECA               	btfss	_Load^(0+128),5
  6226  0400  0008               	return
  6227                           
  6228                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
  6229  0401  3001               	movlw	1
  6230  0402  07CD               	addwf	(_Load^(0+128)+3),f
  6231  0403  1803               	skipnc
  6232  0404  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6233  0405  3000               	movlw	0
  6234  0406  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6235                           
  6236                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
  6237  0407  3001               	movlw	1
  6238  0408  024E               	subwf	((_Load+1)^(0+128)+3),w
  6239  0409  30F4               	movlw	244
  6240  040A  1903               	skipnz
  6241  040B  024D               	subwf	(_Load^(0+128)+3),w
  6242  040C  1C03               	skipc
  6243  040D  0008               	return
  6244                           
  6245                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
  6246  040E  01CD               	clrf	(_Load^(0+128)+3)
  6247  040F  01CE               	clrf	((_Load+1)^(0+128)+3)
  6248                           
  6249                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
  6250  0410  12CA               	bcf	_Load^(0+128),5
  6251                           
  6252                           ;OverLoad_B1.c: 263: }
  6253                           ;OverLoad_B1.c: 264: }
  6254                           ;OverLoad_B1.c: 265: }
  6255                           ;OverLoad_B1.c: 266: } else {
  6256  0411  0008               	return
  6257  0412                     l725:	
  6258                           
  6259                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
  6260  0412  1283               	bcf	3,5	;RP0=0, select bank0
  6261  0413  1303               	bcf	3,6	;RP1=0, select bank0
  6262  0414  1C25               	btfss	_myMain,0
  6263  0415  0008               	return
  6264                           
  6265                           ;OverLoad_B1.c: 268: Load.Enable = 1;
  6266  0416  1683               	bsf	3,5	;RP0=1, select bank1
  6267  0417  1303               	bcf	3,6	;RP1=0, select bank1
  6268  0418  144A               	bsf	_Load^(0+128),0
  6269  0419  0008               	return
  6270  041A                     __end_of_Load_Main:	
  6271                           
  6272                           	psect	text30
  6273  0AF9                     __ptext30:	
  6274 ;; *************** function _getMain_Lights_Count *****************
  6275 ;; Defined at:
  6276 ;;		line 459 in file "../src/Main_B1.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  status1         1    5[COMMON] unsigned char 
  6281 ;;  count           1    4[COMMON] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      unsigned char 
  6284 ;; Registers used:
  6285 ;;		wreg, status,2
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6291 ;;      Params:         0       0       0       0
  6292 ;;      Locals:         2       0       0       0
  6293 ;;      Temps:          0       0       0       0
  6294 ;;      Totals:         2       0       0       0
  6295 ;;Total ram usage:        2 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    2
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_Load_Main
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _getMain_Lights_Count
  6307  0AF9                     _getMain_Lights_Count:	
  6308                           
  6309                           ;Main_B1.c: 460: char count = 0;
  6310                           
  6311                           ;incstack = 0
  6312                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6313  0AF9  01F4               	clrf	getMain_Lights_Count@count
  6314                           
  6315                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6316  0AFA  3000               	movlw	0
  6317  0AFB  1283               	bcf	3,5	;RP0=0, select bank0
  6318  0AFC  1303               	bcf	3,6	;RP1=0, select bank0
  6319  0AFD  1940               	btfsc	_Lights1,2
  6320  0AFE  3001               	movlw	1
  6321  0AFF  00F5               	movwf	getMain_Lights_Count@status1
  6322                           
  6323                           ;Main_B1.c: 487: return count = status1;
  6324  0B00  0875               	movf	getMain_Lights_Count@status1,w
  6325  0B01  00F4               	movwf	getMain_Lights_Count@count
  6326  0B02  0008               	return
  6327  0B03                     __end_of_getMain_Lights_Count:	
  6328                           
  6329                           	psect	text31
  6330  0AB3                     __ptext31:	
  6331 ;; *************** function _getLight_Load_Status *****************
  6332 ;; Defined at:
  6333 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  loadstatus      1    4[COMMON] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      unsigned char 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6347 ;;      Params:         0       0       0       0
  6348 ;;      Locals:         1       0       0       0
  6349 ;;      Temps:          0       0       0       0
  6350 ;;      Totals:         1       0       0       0
  6351 ;;Total ram usage:        1 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    2
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_Load_Main
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _getLight_Load_Status
  6363  0AB3                     _getLight_Load_Status:	
  6364                           
  6365                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6366                           
  6367                           ;incstack = 0
  6368                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6369  0AB3  3000               	movlw	0
  6370  0AB4  18F7               	btfsc	_Light,1
  6371  0AB5  3001               	movlw	1
  6372  0AB6  00F4               	movwf	getLight_Load_Status@loadstatus
  6373                           
  6374                           ;TriacRelay_B1.c: 407: return loadstatus;
  6375  0AB7  0874               	movf	getLight_Load_Status@loadstatus,w
  6376  0AB8  0008               	return
  6377  0AB9                     __end_of_getLight_Load_Status:	
  6378                           
  6379                           	psect	text32
  6380  0AAD                     __ptext32:	
  6381 ;; *************** function _getLight_LoadGO *****************
  6382 ;; Defined at:
  6383 ;;		line 400 in file "../src/TriacRelay_B1.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  loadgo          1    4[COMMON] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      unsigned char 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6397 ;;      Params:         0       0       0       0
  6398 ;;      Locals:         1       0       0       0
  6399 ;;      Temps:          0       0       0       0
  6400 ;;      Totals:         1       0       0       0
  6401 ;;Total ram usage:        1 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    2
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_Load_Main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _getLight_LoadGO
  6413  0AAD                     _getLight_LoadGO:	
  6414                           
  6415                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6416                           
  6417                           ;incstack = 0
  6418                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6419  0AAD  3000               	movlw	0
  6420  0AAE  1877               	btfsc	_Light,0
  6421  0AAF  3001               	movlw	1
  6422  0AB0  00F4               	movwf	getLight_LoadGO@loadgo
  6423                           
  6424                           ;TriacRelay_B1.c: 402: return loadgo;
  6425  0AB1  0874               	movf	getLight_LoadGO@loadgo,w
  6426  0AB2  0008               	return
  6427  0AB3                     __end_of_getLight_LoadGO:	
  6428                           
  6429                           	psect	text33
  6430  0D25                     __ptext33:	
  6431 ;; *************** function ___wmul *****************
  6432 ;; Defined at:
  6433 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6436 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  product         2    4[COMMON] unsigned int 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  2    0[BANK0 ] unsigned int 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6448 ;;      Params:         0       4       0       0
  6449 ;;      Locals:         2       0       0       0
  6450 ;;      Temps:          0       0       0       0
  6451 ;;      Totals:         2       4       0       0
  6452 ;;Total ram usage:        6 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    2
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_Load_Main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function ___wmul
  6464  0D25                     ___wmul:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6468  0D25  01F4               	clrf	___wmul@product
  6469  0D26  01F5               	clrf	___wmul@product+1
  6470  0D27                     l4842:	
  6471  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  6472  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  6473  0D29  1C51               	btfss	___wmul@multiplier,0
  6474  0D2A  2D31               	goto	l1427
  6475  0D2B  0853               	movf	___wmul@multiplicand,w
  6476  0D2C  07F4               	addwf	___wmul@product,f
  6477  0D2D  1803               	skipnc
  6478  0D2E  0AF5               	incf	___wmul@product+1,f
  6479  0D2F  0854               	movf	___wmul@multiplicand+1,w
  6480  0D30  07F5               	addwf	___wmul@product+1,f
  6481  0D31                     l1427:	
  6482  0D31  3001               	movlw	1
  6483  0D32                     u5775:	
  6484  0D32  1003               	clrc
  6485  0D33  0DD3               	rlf	___wmul@multiplicand,f
  6486  0D34  0DD4               	rlf	___wmul@multiplicand+1,f
  6487  0D35  3EFF               	addlw	-1
  6488  0D36  1D03               	skipz
  6489  0D37  2D32               	goto	u5775
  6490  0D38  3001               	movlw	1
  6491  0D39                     u5785:	
  6492  0D39  1003               	clrc
  6493  0D3A  0CD2               	rrf	___wmul@multiplier+1,f
  6494  0D3B  0CD1               	rrf	___wmul@multiplier,f
  6495  0D3C  3EFF               	addlw	-1
  6496  0D3D  1D03               	skipz
  6497  0D3E  2D39               	goto	u5785
  6498  0D3F  0852               	movf	___wmul@multiplier+1,w
  6499  0D40  0451               	iorwf	___wmul@multiplier,w
  6500  0D41  1D03               	skipz
  6501  0D42  2D27               	goto	l4842
  6502  0D43  0875               	movf	___wmul@product+1,w
  6503  0D44  01D2               	clrf	?___wmul+1
  6504  0D45  07D2               	addwf	?___wmul+1,f
  6505  0D46  0874               	movf	___wmul@product,w
  6506  0D47  01D1               	clrf	?___wmul
  6507  0D48  07D1               	addwf	?___wmul,f
  6508  0D49  0008               	return
  6509  0D4A                     __end_of___wmul:	
  6510                           
  6511                           	psect	text34
  6512  0DEC                     __ptext34:	
  6513 ;; *************** function ___lwdiv *****************
  6514 ;; Defined at:
  6515 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  divisor         2    0[BANK0 ] unsigned int 
  6518 ;;  dividend        2    2[BANK0 ] unsigned int 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  quotient        2    5[BANK0 ] unsigned int 
  6521 ;;  counter         1    4[BANK0 ] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  2    0[BANK0 ] unsigned int 
  6524 ;; Registers used:
  6525 ;;		wreg, status,2, status,0
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6531 ;;      Params:         0       4       0       0
  6532 ;;      Locals:         0       3       0       0
  6533 ;;      Temps:          1       0       0       0
  6534 ;;      Totals:         1       7       0       0
  6535 ;;Total ram usage:        8 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    2
  6538 ;; This function calls:
  6539 ;;		Nothing
  6540 ;; This function is called by:
  6541 ;;		_Load_Main
  6542 ;;		_getPIR_AD
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           
  6547                           ;psect for function ___lwdiv
  6548  0DEC                     ___lwdiv:	
  6549                           
  6550                           ;incstack = 0
  6551                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6552  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  6553  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  6554  0DEE  01D6               	clrf	___lwdiv@quotient
  6555  0DEF  01D7               	clrf	___lwdiv@quotient+1
  6556  0DF0  0852               	movf	___lwdiv@divisor+1,w
  6557  0DF1  0451               	iorwf	___lwdiv@divisor,w
  6558  0DF2  1903               	skipnz
  6559  0DF3  2E25               	goto	l4874
  6560  0DF4  01D5               	clrf	___lwdiv@counter
  6561  0DF5  0AD5               	incf	___lwdiv@counter,f
  6562  0DF6                     l4862:	
  6563  0DF6  1BD2               	btfsc	___lwdiv@divisor+1,7
  6564  0DF7  2E04               	goto	l4864
  6565  0DF8  3001               	movlw	1
  6566  0DF9                     u5815:	
  6567  0DF9  1003               	clrc
  6568  0DFA  0DD1               	rlf	___lwdiv@divisor,f
  6569  0DFB  0DD2               	rlf	___lwdiv@divisor+1,f
  6570  0DFC  3EFF               	addlw	-1
  6571  0DFD  1D03               	skipz
  6572  0DFE  2DF9               	goto	u5815
  6573  0DFF  3001               	movlw	1
  6574  0E00  00F4               	movwf	??___lwdiv
  6575  0E01  0874               	movf	??___lwdiv,w
  6576  0E02  07D5               	addwf	___lwdiv@counter,f
  6577  0E03  2DF6               	goto	l4862
  6578  0E04                     l4864:	
  6579  0E04  3001               	movlw	1
  6580  0E05                     u5835:	
  6581  0E05  1003               	clrc
  6582  0E06  0DD6               	rlf	___lwdiv@quotient,f
  6583  0E07  0DD7               	rlf	___lwdiv@quotient+1,f
  6584  0E08  3EFF               	addlw	-1
  6585  0E09  1D03               	skipz
  6586  0E0A  2E05               	goto	u5835
  6587  0E0B  0852               	movf	___lwdiv@divisor+1,w
  6588  0E0C  0254               	subwf	___lwdiv@dividend+1,w
  6589  0E0D  1D03               	skipz
  6590  0E0E  2E11               	goto	u5845
  6591  0E0F  0851               	movf	___lwdiv@divisor,w
  6592  0E10  0253               	subwf	___lwdiv@dividend,w
  6593  0E11                     u5845:	
  6594  0E11  1C03               	skipc
  6595  0E12  2E1A               	goto	l4870
  6596  0E13  0851               	movf	___lwdiv@divisor,w
  6597  0E14  02D3               	subwf	___lwdiv@dividend,f
  6598  0E15  0852               	movf	___lwdiv@divisor+1,w
  6599  0E16  1C03               	skipc
  6600  0E17  03D4               	decf	___lwdiv@dividend+1,f
  6601  0E18  02D4               	subwf	___lwdiv@dividend+1,f
  6602  0E19  1456               	bsf	___lwdiv@quotient,0
  6603  0E1A                     l4870:	
  6604  0E1A  3001               	movlw	1
  6605  0E1B                     u5855:	
  6606  0E1B  1003               	clrc
  6607  0E1C  0CD2               	rrf	___lwdiv@divisor+1,f
  6608  0E1D  0CD1               	rrf	___lwdiv@divisor,f
  6609  0E1E  3EFF               	addlw	-1
  6610  0E1F  1D03               	skipz
  6611  0E20  2E1B               	goto	u5855
  6612  0E21  3001               	movlw	1
  6613  0E22  02D5               	subwf	___lwdiv@counter,f
  6614  0E23  1D03               	btfss	3,2
  6615  0E24  2E04               	goto	l4864
  6616  0E25                     l4874:	
  6617  0E25  0857               	movf	___lwdiv@quotient+1,w
  6618  0E26  01D2               	clrf	?___lwdiv+1
  6619  0E27  07D2               	addwf	?___lwdiv+1,f
  6620  0E28  0856               	movf	___lwdiv@quotient,w
  6621  0E29  01D1               	clrf	?___lwdiv
  6622  0E2A  07D1               	addwf	?___lwdiv,f
  6623  0E2B  0008               	return
  6624  0E2C                     __end_of___lwdiv:	
  6625                           
  6626                           	psect	text35
  6627  0A8D                     __ptext35:	
  6628 ;; *************** function _Load_Initialization *****************
  6629 ;; Defined at:
  6630 ;;		line 9 in file "../src/OverLoad_B1.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;		None               void
  6637 ;; Registers used:
  6638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6644 ;;      Params:         0       0       0       0
  6645 ;;      Locals:         0       0       0       0
  6646 ;;      Temps:          0       0       0       0
  6647 ;;      Totals:         0       0       0       0
  6648 ;;Total ram usage:        0 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    3
  6651 ;; This function calls:
  6652 ;;		_setLoad_AH_AL_Restore
  6653 ;; This function is called by:
  6654 ;;		_main
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _Load_Initialization
  6660  0A8D                     _Load_Initialization:	
  6661                           
  6662                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6666  0A8D  158A  23BF         	fcall	_setLoad_AH_AL_Restore
  6667  0A8F  0008               	return
  6668  0A90                     __end_of_Load_Initialization:	
  6669                           
  6670                           	psect	text36
  6671  0BBF                     __ptext36:	
  6672 ;; *************** function _setLoad_AH_AL_Restore *****************
  6673 ;; Defined at:
  6674 ;;		line 294 in file "../src/OverLoad_B1.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;		None
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  i               1    5[COMMON] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;		None               void
  6681 ;; Registers used:
  6682 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6688 ;;      Params:         0       0       0       0
  6689 ;;      Locals:         1       0       0       0
  6690 ;;      Temps:          1       0       0       0
  6691 ;;      Totals:         2       0       0       0
  6692 ;;Total ram usage:        2 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    2
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		_Load_Initialization
  6699 ;;		_Load_Main
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           
  6704                           ;psect for function _setLoad_AH_AL_Restore
  6705  0BBF                     _setLoad_AH_AL_Restore:	
  6706                           
  6707                           ;OverLoad_B1.c: 295: char i;
  6708                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
  6709                           
  6710                           ;incstack = 0
  6711                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6712  0BBF  01F5               	clrf	setLoad_AH_AL_Restore@i
  6713  0BC0                     L17:	
  6714  0BC0  3005               	movlw	5
  6715  0BC1  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6716  0BC2  1803               	btfsc	3,0
  6717  0BC3  0008               	return
  6718                           
  6719                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
  6720  0BC4  0875               	movf	setLoad_AH_AL_Restore@i,w
  6721  0BC5  3ED4               	addlw	(_Load+10)& (0+255)
  6722  0BC6  0084               	movwf	4
  6723  0BC7  1383               	bcf	3,7	;select IRP bank1
  6724  0BC8  0180               	clrf	0
  6725                           
  6726                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xff;
  6727  0BC9  30FF               	movlw	255
  6728  0BCA  00F4               	movwf	??_setLoad_AH_AL_Restore
  6729  0BCB  0875               	movf	setLoad_AH_AL_Restore@i,w
  6730  0BCC  3ED9               	addlw	(_Load+15)& (0+255)
  6731  0BCD  0084               	movwf	4
  6732  0BCE  0874               	movf	??_setLoad_AH_AL_Restore,w
  6733  0BCF  0080               	movwf	0
  6734  0BD0  3001               	movlw	1
  6735  0BD1  00F4               	movwf	??_setLoad_AH_AL_Restore
  6736  0BD2  0874               	movf	??_setLoad_AH_AL_Restore,w
  6737  0BD3  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6738  0BD4  2BC0               	goto	L17
  6739  0BD5                     __end_of_setLoad_AH_AL_Restore:	
  6740                           
  6741                           	psect	text37
  6742  0CA1                     __ptext37:	
  6743 ;; *************** function _Lights_Main *****************
  6744 ;; Defined at:
  6745 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6759 ;;      Params:         0       0       0       0
  6760 ;;      Locals:         0       0       0       0
  6761 ;;      Temps:          0       0       0       0
  6762 ;;      Totals:         0       0       0       0
  6763 ;;Total ram usage:        0 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    6
  6766 ;; This function calls:
  6767 ;;		_Lights_Control
  6768 ;;		_getLoad_OK
  6769 ;;		_getMain_All_Error_Status
  6770 ;;		_getMain_All_LightsStatus
  6771 ;;		_setLights_Main
  6772 ;; This function is called by:
  6773 ;;		_main
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _Lights_Main
  6779  0CA1                     _Lights_Main:	
  6780                           
  6781                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6785  0CA1  1C77               	btfss	_Light,0
  6786  0CA2  2CB7               	goto	l5210
  6787                           
  6788                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6789  0CA3  158A  22CD  158A   	fcall	_getLoad_OK
  6790  0CA6  3A01               	xorlw	1
  6791  0CA7  1903               	skipnz
  6792  0CA8  2CB6               	goto	l1304
  6793  0CA9  3000               	movlw	0
  6794  0CAA  158A  25AE  158A   	fcall	_getMain_All_Error_Status
  6795  0CAD  3800               	iorlw	0
  6796  0CAE  1D03               	skipz
  6797  0CAF  2CB6               	goto	l1304
  6798  0CB0  158A  22E6  158A   	fcall	_getMain_All_LightsStatus
  6799  0CB3  3800               	iorlw	0
  6800  0CB4  1D03               	skipz
  6801  0CB5  2CB7               	goto	l5210
  6802  0CB6                     l1304:	
  6803                           
  6804                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6805  0CB6  1077               	bcf	_Light,0
  6806  0CB7                     l5210:	
  6807                           
  6808                           ;TriacRelay_B1.c: 68: }
  6809                           ;TriacRelay_B1.c: 69: }
  6810                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6811  0CB7  3001               	movlw	1
  6812  0CB8  158A  254A  158A   	fcall	_setLights_Main
  6813                           
  6814                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6815  0CBB  3001               	movlw	1
  6816  0CBC  118A  260A         	fcall	_Lights_Control
  6817  0CBE  0008               	return
  6818  0CBF                     __end_of_Lights_Main:	
  6819                           
  6820                           	psect	text38
  6821  0D4A                     __ptext38:	
  6822 ;; *************** function _setLights_Main *****************
  6823 ;; Defined at:
  6824 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  lights          1    wreg     unsigned char 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  lights          1    5[BANK0 ] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;		None               void
  6831 ;; Registers used:
  6832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6838 ;;      Params:         0       0       0       0
  6839 ;;      Locals:         0       1       0       0
  6840 ;;      Temps:          0       0       0       0
  6841 ;;      Totals:         0       1       0       0
  6842 ;;Total ram usage:        1 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    5
  6845 ;; This function calls:
  6846 ;;		_LightsPointSelect
  6847 ;;		_getLights_Allow_Condition
  6848 ;;		_setLights
  6849 ;; This function is called by:
  6850 ;;		_Lights_Main
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _setLights_Main
  6856  0D4A                     _setLights_Main:	
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6860                           ;setLights_Main@lights stored from wreg
  6861  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6862  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6863  0D4C  00D6               	movwf	setLights_Main@lights
  6864                           
  6865                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6866  0D4D  0856               	movf	setLights_Main@lights,w
  6867  0D4E  158A  22EF  158A   	fcall	_LightsPointSelect
  6868                           
  6869                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6870  0D51  0878               	movf	_Lights,w
  6871  0D52  0084               	movwf	4
  6872  0D53  1383               	bcf	3,7	;select IRP bank0
  6873  0D54  1880               	btfsc	0,1
  6874  0D55  0008               	return
  6875                           
  6876                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6877  0D56  0878               	movf	_Lights,w
  6878  0D57  0084               	movwf	4
  6879  0D58  1D80               	btfss	0,3
  6880  0D59  0008               	return
  6881                           
  6882                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6883  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6884  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6885  0D5C  0856               	movf	setLights_Main@lights,w
  6886  0D5D  158A  23D5  158A   	fcall	_getLights_Allow_Condition
  6887  0D60  3800               	iorlw	0
  6888  0D61  1D03               	skipz
  6889  0D62  0008               	return
  6890                           
  6891                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6892  0D63  0878               	movf	_Lights,w
  6893  0D64  0084               	movwf	4
  6894  0D65  1383               	bcf	3,7	;select IRP bank0
  6895  0D66  1180               	bcf	0,3
  6896                           
  6897                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6898  0D67  0878               	movf	_Lights,w
  6899  0D68  0084               	movwf	4
  6900  0D69  1E00               	btfss	0,4
  6901  0D6A  2D73               	goto	l4810
  6902                           
  6903                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6904  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  6905  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  6906  0D6D  01D3               	clrf	setLights@status
  6907  0D6E  0AD3               	incf	setLights@status,f
  6908  0D6F  0856               	movf	setLights_Main@lights,w
  6909  0D70  118A  268D         	fcall	_setLights
  6910                           
  6911                           ;TriacRelay_B1.c: 99: } else {
  6912  0D72  0008               	return
  6913  0D73                     l4810:	
  6914                           
  6915                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6916  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  6917  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  6918  0D75  01D3               	clrf	setLights@status
  6919  0D76  0856               	movf	setLights_Main@lights,w
  6920  0D77  118A  268D         	fcall	_setLights
  6921  0D79  0008               	return
  6922  0D7A                     __end_of_setLights_Main:	
  6923                           
  6924                           	psect	text39
  6925  068D                     __ptext39:	
  6926 ;; *************** function _setLights *****************
  6927 ;; Defined at:
  6928 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  lights          1    wreg     unsigned char 
  6931 ;;  status          1    2[BANK0 ] unsigned char 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;  lights          1    4[BANK0 ] unsigned char 
  6934 ;; Return value:  Size  Location     Type
  6935 ;;		None               void
  6936 ;; Registers used:
  6937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6943 ;;      Params:         0       1       0       0
  6944 ;;      Locals:         0       1       0       0
  6945 ;;      Temps:          0       1       0       0
  6946 ;;      Totals:         0       3       0       0
  6947 ;;Total ram usage:        3 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:    4
  6950 ;; This function calls:
  6951 ;;		_setLED
  6952 ;;		_setLights_Line
  6953 ;; This function is called by:
  6954 ;;		_setLights_Main
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           
  6959                           ;psect for function _setLights
  6960  068D                     _setLights:	
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6964                           ;setLights@lights stored from wreg
  6965  068D  1283               	bcf	3,5	;RP0=0, select bank0
  6966  068E  1303               	bcf	3,6	;RP1=0, select bank0
  6967  068F  00D5               	movwf	setLights@lights
  6968                           
  6969                           ;TriacRelay_B1.c: 116: if (status == 1) {
  6970  0690  0853               	movf	setLights@status,w
  6971  0691  3A01               	xorlw	1
  6972  0692  1D03               	skipz
  6973  0693  2ED0               	goto	l4642
  6974                           
  6975                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  6976  0694  0855               	movf	setLights@lights,w
  6977  0695  3A02               	xorlw	2
  6978  0696  1D03               	skipz
  6979  0697  2EA5               	goto	l4624
  6980                           
  6981                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  6982  0698  01D1               	clrf	setLED@command
  6983  0699  3001               	movlw	1
  6984  069A  158A  278F  118A   	fcall	_setLED
  6985                           
  6986                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  6987  069D  1283               	bcf	3,5	;RP0=0, select bank0
  6988  069E  1303               	bcf	3,6	;RP1=0, select bank0
  6989  069F  01D1               	clrf	setLED@command
  6990  06A0  0AD1               	incf	setLED@command,f
  6991  06A1  3002               	movlw	2
  6992  06A2  158A  278F  118A   	fcall	_setLED
  6993  06A5                     l4624:	
  6994                           
  6995                           ;TriacRelay_B1.c: 121: }
  6996                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  6997  06A5  0878               	movf	_Lights,w
  6998  06A6  0084               	movwf	4
  6999  06A7  1383               	bcf	3,7	;select IRP bank0
  7000  06A8  1900               	btfsc	0,2
  7001  06A9  2EC9               	goto	l4638
  7002                           
  7003                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7004  06AA  0878               	movf	_Lights,w
  7005  06AB  0084               	movwf	4
  7006  06AC  1500               	bsf	0,2
  7007                           
  7008                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7009  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  7010  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  7011  06AF  0855               	movf	setLights@lights,w
  7012  06B0  3A01               	xorlw	1
  7013  06B1  1D03               	skipz
  7014  06B2  2EC9               	goto	l4638
  7015                           
  7016                           ;TriacRelay_B1.c: 131: RB2 = 1;
  7017  06B3  1506               	bsf	6,2	;volatile
  7018                           
  7019                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7020  06B4  3064               	movlw	100
  7021  06B5  00D4               	movwf	??_setLights
  7022  06B6  0878               	movf	_Lights,w
  7023  06B7  3E04               	addlw	4
  7024  06B8  0084               	movwf	4
  7025  06B9  0854               	movf	??_setLights,w
  7026  06BA  0080               	movwf	0
  7027                           
  7028                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7029  06BB  308C               	movlw	140
  7030  06BC  00D4               	movwf	??_setLights
  7031  06BD  0878               	movf	_Lights,w
  7032  06BE  3E03               	addlw	3
  7033  06BF  0084               	movwf	4
  7034  06C0  0854               	movf	??_setLights,w
  7035  06C1  0080               	movwf	0
  7036                           
  7037                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7038  06C2  0878               	movf	_Lights,w
  7039  06C3  3E02               	addlw	2
  7040  06C4  0084               	movwf	4
  7041  06C5  0180               	clrf	0
  7042                           
  7043                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7044  06C6  0878               	movf	_Lights,w
  7045  06C7  0084               	movwf	4
  7046  06C8  1480               	bsf	0,1
  7047  06C9                     l4638:	
  7048                           
  7049                           ;TriacRelay_B1.c: 136: }
  7050                           ;TriacRelay_B1.c: 162: }
  7051                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7052  06C9  14F7               	bsf	_Light,1
  7053                           
  7054                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7055  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  7056  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  7057  06CC  0855               	movf	setLights@lights,w
  7058  06CD  158A  2328         	fcall	_setLights_Line
  7059                           
  7060                           ;TriacRelay_B1.c: 167: } else {
  7061  06CF  0008               	return
  7062  06D0                     l4642:	
  7063                           
  7064                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7065  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  7066  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  7067  06D2  0855               	movf	setLights@lights,w
  7068  06D3  3A02               	xorlw	2
  7069  06D4  1D03               	skipz
  7070  06D5  2EE3               	goto	l4646
  7071                           
  7072                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7073  06D6  01D1               	clrf	setLED@command
  7074  06D7  0AD1               	incf	setLED@command,f
  7075  06D8  3001               	movlw	1
  7076  06D9  158A  278F  118A   	fcall	_setLED
  7077                           
  7078                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7079  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  7080  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  7081  06DE  01D1               	clrf	setLED@command
  7082  06DF  3002               	movlw	2
  7083  06E0  158A  278F  118A   	fcall	_setLED
  7084  06E3                     l4646:	
  7085                           
  7086                           ;TriacRelay_B1.c: 173: }
  7087                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7088  06E3  0878               	movf	_Lights,w
  7089  06E4  0084               	movwf	4
  7090  06E5  1383               	bcf	3,7	;select IRP bank0
  7091  06E6  1D00               	btfss	0,2
  7092  06E7  2F07               	goto	l4660
  7093                           
  7094                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7095  06E8  0878               	movf	_Lights,w
  7096  06E9  0084               	movwf	4
  7097  06EA  1100               	bcf	0,2
  7098                           
  7099                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7100  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  7101  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  7102  06ED  0855               	movf	setLights@lights,w
  7103  06EE  3A01               	xorlw	1
  7104  06EF  1D03               	skipz
  7105  06F0  2F07               	goto	l4660
  7106                           
  7107                           ;TriacRelay_B1.c: 179: RB2 = 1;
  7108  06F1  1506               	bsf	6,2	;volatile
  7109                           
  7110                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7111  06F2  3028               	movlw	40
  7112  06F3  00D4               	movwf	??_setLights
  7113  06F4  0878               	movf	_Lights,w
  7114  06F5  3E04               	addlw	4
  7115  06F6  0084               	movwf	4
  7116  06F7  0854               	movf	??_setLights,w
  7117  06F8  0080               	movwf	0
  7118                           
  7119                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7120  06F9  3050               	movlw	80
  7121  06FA  00D4               	movwf	??_setLights
  7122  06FB  0878               	movf	_Lights,w
  7123  06FC  3E03               	addlw	3
  7124  06FD  0084               	movwf	4
  7125  06FE  0854               	movf	??_setLights,w
  7126  06FF  0080               	movwf	0
  7127                           
  7128                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7129  0700  0878               	movf	_Lights,w
  7130  0701  3E02               	addlw	2
  7131  0702  0084               	movwf	4
  7132  0703  0180               	clrf	0
  7133                           
  7134                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7135  0704  0878               	movf	_Lights,w
  7136  0705  0084               	movwf	4
  7137  0706  1480               	bsf	0,1
  7138  0707                     l4660:	
  7139                           
  7140                           ;TriacRelay_B1.c: 184: }
  7141                           ;TriacRelay_B1.c: 211: }
  7142                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7143  0707  10F7               	bcf	_Light,1
  7144                           
  7145                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7146  0708  3000               	movlw	0
  7147  0709  158A  2328         	fcall	_setLights_Line
  7148  070B  0008               	return
  7149  070C                     __end_of_setLights:	
  7150                           
  7151                           	psect	text40
  7152  0B28                     __ptext40:	
  7153 ;; *************** function _setLights_Line *****************
  7154 ;; Defined at:
  7155 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  lights          1    wreg     unsigned char 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  lights          1    4[COMMON] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7169 ;;      Params:         0       0       0       0
  7170 ;;      Locals:         1       0       0       0
  7171 ;;      Temps:          0       0       0       0
  7172 ;;      Totals:         1       0       0       0
  7173 ;;Total ram usage:        1 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    2
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_setLights
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _setLights_Line
  7185  0B28                     _setLights_Line:	
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _setLights_Line: [wreg]
  7189                           ;setLights_Line@lights stored from wreg
  7190  0B28  00F4               	movwf	setLights_Line@lights
  7191                           
  7192                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7193  0B29  1477               	bsf	_Light,0
  7194                           
  7195                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7196  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  7197  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  7198  0B2C  1041               	bcf	_Lights1+1,0
  7199                           
  7200                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7201  0B2D  0874               	movf	setLights_Line@lights,w
  7202  0B2E  3A01               	xorlw	1
  7203  0B2F  1D03               	skipz
  7204  0B30  0008               	return
  7205  0B31  0874               	movf	setLights_Line@lights,w
  7206  0B32  1903               	btfsc	3,2
  7207  0B33  0008               	return
  7208                           
  7209                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7210  0B34  1441               	bsf	_Lights1+1,0
  7211  0B35  0008               	return
  7212  0B36                     __end_of_setLights_Line:	
  7213                           
  7214                           	psect	text41
  7215  0BD5                     __ptext41:	
  7216 ;; *************** function _getLights_Allow_Condition *****************
  7217 ;; Defined at:
  7218 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  lights          1    wreg     unsigned char 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;  lights          1    0[COMMON] unsigned char 
  7223 ;;  allow           1    0[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      unsigned char 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7233 ;;      Params:         0       0       0       0
  7234 ;;      Locals:         0       2       0       0
  7235 ;;      Temps:          1       0       0       0
  7236 ;;      Totals:         1       2       0       0
  7237 ;;Total ram usage:        3 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    3
  7240 ;; This function calls:
  7241 ;;		_getLoad_OK
  7242 ;; This function is called by:
  7243 ;;		_setLights_Main
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _getLights_Allow_Condition
  7249  0BD5                     _getLights_Allow_Condition:	
  7250                           
  7251                           ;TriacRelay_B1.c: 368: char allow = 0;
  7252                           
  7253                           ;incstack = 0
  7254                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7255  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  7256  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  7257  0BD7  01D1               	clrf	getLights_Allow_Condition@allow
  7258                           
  7259                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7260  0BD8  01D2               	clrf	_getLights_Allow_Condition$4248
  7261  0BD9  0AD2               	incf	_getLights_Allow_Condition$4248,f
  7262  0BDA  158A  22CD  158A   	fcall	_getLoad_OK
  7263  0BDD  3800               	iorlw	0
  7264  0BDE  1903               	btfsc	3,2
  7265  0BDF  1877               	btfsc	_Light,0
  7266  0BE0  2BE4               	goto	l4612
  7267  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  7268  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  7269  0BE3  01D2               	clrf	_getLights_Allow_Condition$4248
  7270  0BE4                     l4612:	
  7271  0BE4  1283               	bcf	3,5	;RP0=0, select bank0
  7272  0BE5  1303               	bcf	3,6	;RP1=0, select bank0
  7273  0BE6  0852               	movf	_getLights_Allow_Condition$4248,w
  7274  0BE7  00F5               	movwf	??_getLights_Allow_Condition
  7275  0BE8  0875               	movf	??_getLights_Allow_Condition,w
  7276  0BE9  00D1               	movwf	getLights_Allow_Condition@allow
  7277                           
  7278                           ;TriacRelay_B1.c: 396: return allow;
  7279  0BEA  0851               	movf	getLights_Allow_Condition@allow,w
  7280  0BEB  0008               	return
  7281  0BEC                     __end_of_getLights_Allow_Condition:	
  7282                           
  7283                           	psect	text42
  7284  0ACD                     __ptext42:	
  7285 ;; *************** function _getLoad_OK *****************
  7286 ;; Defined at:
  7287 ;;		line 274 in file "../src/OverLoad_B1.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;		None
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  ok              1    4[COMMON] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      unsigned char 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7301 ;;      Params:         0       0       0       0
  7302 ;;      Locals:         1       0       0       0
  7303 ;;      Temps:          0       0       0       0
  7304 ;;      Totals:         1       0       0       0
  7305 ;;Total ram usage:        1 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    2
  7308 ;; This function calls:
  7309 ;;		Nothing
  7310 ;; This function is called by:
  7311 ;;		_Lights_Main
  7312 ;;		_getLights_Allow_Condition
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _getLoad_OK
  7318  0ACD                     _getLoad_OK:	
  7319                           
  7320                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7324  0ACD  3000               	movlw	0
  7325  0ACE  1683               	bsf	3,5	;RP0=1, select bank1
  7326  0ACF  1303               	bcf	3,6	;RP1=0, select bank1
  7327  0AD0  1BCA               	btfsc	_Load^(0+128),7
  7328  0AD1  3001               	movlw	1
  7329  0AD2  00F4               	movwf	getLoad_OK@ok
  7330                           
  7331                           ;OverLoad_B1.c: 276: return ok;
  7332  0AD3  0874               	movf	getLoad_OK@ok,w
  7333  0AD4  0008               	return
  7334  0AD5                     __end_of_getLoad_OK:	
  7335                           
  7336                           	psect	text43
  7337  060A                     __ptext43:	
  7338 ;; *************** function _Lights_Control *****************
  7339 ;; Defined at:
  7340 ;;		line 220 in file "../src/TriacRelay_B1.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  lights          1    wreg     unsigned char 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  lights          1   10[BANK0 ] unsigned char 
  7345 ;; Return value:  Size  Location     Type
  7346 ;;		None               void
  7347 ;; Registers used:
  7348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7354 ;;      Params:         0       0       0       0
  7355 ;;      Locals:         0       1       0       0
  7356 ;;      Temps:          0       2       0       0
  7357 ;;      Totals:         0       3       0       0
  7358 ;;Total ram usage:        3 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    3
  7361 ;; This function calls:
  7362 ;;		_LightsPointSelect
  7363 ;;		___awdiv
  7364 ;; This function is called by:
  7365 ;;		_Lights_Main
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _Lights_Control
  7371  060A                     _Lights_Control:	
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7375                           ;Lights_Control@lights stored from wreg
  7376  060A  1283               	bcf	3,5	;RP0=0, select bank0
  7377  060B  1303               	bcf	3,6	;RP1=0, select bank0
  7378  060C  00DB               	movwf	Lights_Control@lights
  7379                           
  7380                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  7381  060D  085B               	movf	Lights_Control@lights,w
  7382  060E  158A  22EF  118A   	fcall	_LightsPointSelect
  7383                           
  7384                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  7385  0611  0878               	movf	_Lights,w
  7386  0612  0084               	movwf	4
  7387  0613  1383               	bcf	3,7	;select IRP bank0
  7388  0614  1C80               	btfss	0,1
  7389  0615  0008               	return
  7390                           
  7391                           ;TriacRelay_B1.c: 223: Lights->Time++;
  7392  0616  3001               	movlw	1
  7393  0617  1283               	bcf	3,5	;RP0=0, select bank0
  7394  0618  1303               	bcf	3,6	;RP1=0, select bank0
  7395  0619  00D9               	movwf	??_Lights_Control
  7396  061A  0878               	movf	_Lights,w
  7397  061B  3E02               	addlw	2
  7398  061C  0084               	movwf	4
  7399  061D  0859               	movf	??_Lights_Control,w
  7400  061E  0780               	addwf	0,f
  7401                           
  7402                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  7403  061F  0878               	movf	_Lights,w
  7404  0620  0084               	movwf	4
  7405  0621  1B80               	btfsc	0,7
  7406  0622  2E59               	goto	l4828
  7407                           
  7408                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7409  0623  3014               	movlw	20
  7410  0624  00D1               	movwf	___awdiv@divisor
  7411  0625  3000               	movlw	0
  7412  0626  00D2               	movwf	___awdiv@divisor+1
  7413  0627  0878               	movf	_Lights,w
  7414  0628  3E04               	addlw	4
  7415  0629  0084               	movwf	4
  7416  062A  0800               	movf	0,w
  7417  062B  00D9               	movwf	??_Lights_Control
  7418  062C  01DA               	clrf	??_Lights_Control+1
  7419  062D  0859               	movf	??_Lights_Control,w
  7420  062E  00D3               	movwf	___awdiv@dividend
  7421  062F  085A               	movf	??_Lights_Control+1,w
  7422  0630  00D4               	movwf	___awdiv@dividend+1
  7423  0631  158A  26CC  118A   	fcall	___awdiv
  7424  0634  0878               	movf	_Lights,w
  7425  0635  3E02               	addlw	2
  7426  0636  0084               	movwf	4
  7427  0637  1283               	bcf	3,5	;RP0=0, select bank0
  7428  0638  1303               	bcf	3,6	;RP1=0, select bank0
  7429  0639  0852               	movf	?___awdiv+1,w
  7430  063A  3A80               	xorlw	128
  7431  063B  3C80               	sublw	128
  7432  063C  1D03               	skipz
  7433  063D  2E41               	goto	u5705
  7434  063E  0851               	movf	?___awdiv,w
  7435  063F  1383               	bcf	3,7	;select IRP bank0
  7436  0640  0200               	subwf	0,w
  7437  0641                     u5705:	
  7438  0641  1C03               	skipc
  7439  0642  0008               	return
  7440                           
  7441                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  7442  0643  0878               	movf	_Lights,w
  7443  0644  0084               	movwf	4
  7444  0645  1383               	bcf	3,7	;select IRP bank0
  7445  0646  1780               	bsf	0,7
  7446                           
  7447                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  7448  0647  1283               	bcf	3,5	;RP0=0, select bank0
  7449  0648  1303               	bcf	3,6	;RP1=0, select bank0
  7450  0649  085B               	movf	Lights_Control@lights,w
  7451  064A  3A01               	xorlw	1
  7452  064B  1D03               	skipz
  7453  064C  0008               	return
  7454                           
  7455                           ;TriacRelay_B1.c: 229: RA4 = Lights->Status == 1 ? 1 : 0;
  7456  064D  0878               	movf	_Lights,w
  7457  064E  0084               	movwf	4
  7458  064F  1D00               	btfss	0,2
  7459  0650  2E55               	goto	u5720
  7460  0651  1283               	bcf	3,5	;RP0=0, select bank0
  7461  0652  1303               	bcf	3,6	;RP1=0, select bank0
  7462  0653  1605               	bsf	5,4	;volatile
  7463  0654  0008               	return
  7464  0655                     u5720:	
  7465  0655  1283               	bcf	3,5	;RP0=0, select bank0
  7466  0656  1303               	bcf	3,6	;RP1=0, select bank0
  7467  0657  1205               	bcf	5,4	;volatile
  7468                           
  7469                           ;TriacRelay_B1.c: 230: }
  7470                           ;TriacRelay_B1.c: 242: }
  7471                           ;TriacRelay_B1.c: 243: } else {
  7472  0658  0008               	return
  7473  0659                     l4828:	
  7474                           
  7475                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7476  0659  3014               	movlw	20
  7477  065A  00D1               	movwf	___awdiv@divisor
  7478  065B  3000               	movlw	0
  7479  065C  00D2               	movwf	___awdiv@divisor+1
  7480  065D  0878               	movf	_Lights,w
  7481  065E  3E03               	addlw	3
  7482  065F  0084               	movwf	4
  7483  0660  1383               	bcf	3,7	;select IRP bank0
  7484  0661  0800               	movf	0,w
  7485  0662  00D9               	movwf	??_Lights_Control
  7486  0663  01DA               	clrf	??_Lights_Control+1
  7487  0664  0859               	movf	??_Lights_Control,w
  7488  0665  00D3               	movwf	___awdiv@dividend
  7489  0666  085A               	movf	??_Lights_Control+1,w
  7490  0667  00D4               	movwf	___awdiv@dividend+1
  7491  0668  158A  26CC  118A   	fcall	___awdiv
  7492  066B  0878               	movf	_Lights,w
  7493  066C  3E02               	addlw	2
  7494  066D  0084               	movwf	4
  7495  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7496  066F  1303               	bcf	3,6	;RP1=0, select bank0
  7497  0670  0852               	movf	?___awdiv+1,w
  7498  0671  3A80               	xorlw	128
  7499  0672  3C80               	sublw	128
  7500  0673  1D03               	skipz
  7501  0674  2E78               	goto	u5745
  7502  0675  0851               	movf	?___awdiv,w
  7503  0676  1383               	bcf	3,7	;select IRP bank0
  7504  0677  0200               	subwf	0,w
  7505  0678                     u5745:	
  7506  0678  1C03               	skipc
  7507  0679  0008               	return
  7508                           
  7509                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  7510  067A  0878               	movf	_Lights,w
  7511  067B  3E02               	addlw	2
  7512  067C  0084               	movwf	4
  7513  067D  1383               	bcf	3,7	;select IRP bank0
  7514  067E  0180               	clrf	0
  7515                           
  7516                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  7517  067F  0878               	movf	_Lights,w
  7518  0680  0084               	movwf	4
  7519  0681  1080               	bcf	0,1
  7520                           
  7521                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  7522  0682  0878               	movf	_Lights,w
  7523  0683  0084               	movwf	4
  7524  0684  1380               	bcf	0,7
  7525                           
  7526                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  7527  0685  1283               	bcf	3,5	;RP0=0, select bank0
  7528  0686  1303               	bcf	3,6	;RP1=0, select bank0
  7529  0687  085B               	movf	Lights_Control@lights,w
  7530  0688  3A01               	xorlw	1
  7531  0689  1D03               	skipz
  7532  068A  0008               	return
  7533                           
  7534                           ;TriacRelay_B1.c: 251: RB2 = 0;
  7535  068B  1106               	bcf	6,2	;volatile
  7536  068C  0008               	return
  7537  068D                     __end_of_Lights_Control:	
  7538                           
  7539                           	psect	text44
  7540  0ECC                     __ptext44:	
  7541 ;; *************** function ___awdiv *****************
  7542 ;; Defined at:
  7543 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;  divisor         2    0[BANK0 ] int 
  7546 ;;  dividend        2    2[BANK0 ] int 
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;  quotient        2    6[BANK0 ] int 
  7549 ;;  sign            1    5[BANK0 ] unsigned char 
  7550 ;;  counter         1    4[BANK0 ] unsigned char 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  2    0[BANK0 ] int 
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7560 ;;      Params:         0       4       0       0
  7561 ;;      Locals:         0       4       0       0
  7562 ;;      Temps:          1       0       0       0
  7563 ;;      Totals:         1       8       0       0
  7564 ;;Total ram usage:        9 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    2
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_getPIR_AD
  7571 ;;		_Lights_Control
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           
  7576                           ;psect for function ___awdiv
  7577  0ECC                     ___awdiv:	
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7581  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7582  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  7583  0ECE  01D6               	clrf	___awdiv@sign
  7584  0ECF  1FD2               	btfss	___awdiv@divisor+1,7
  7585  0ED0  2ED8               	goto	l4678
  7586  0ED1  09D1               	comf	___awdiv@divisor,f
  7587  0ED2  09D2               	comf	___awdiv@divisor+1,f
  7588  0ED3  0AD1               	incf	___awdiv@divisor,f
  7589  0ED4  1903               	skipnz
  7590  0ED5  0AD2               	incf	___awdiv@divisor+1,f
  7591  0ED6  01D6               	clrf	___awdiv@sign
  7592  0ED7  0AD6               	incf	___awdiv@sign,f
  7593  0ED8                     l4678:	
  7594  0ED8  1FD4               	btfss	___awdiv@dividend+1,7
  7595  0ED9  2EE3               	goto	l4684
  7596  0EDA  09D3               	comf	___awdiv@dividend,f
  7597  0EDB  09D4               	comf	___awdiv@dividend+1,f
  7598  0EDC  0AD3               	incf	___awdiv@dividend,f
  7599  0EDD  1903               	skipnz
  7600  0EDE  0AD4               	incf	___awdiv@dividend+1,f
  7601  0EDF  3001               	movlw	1
  7602  0EE0  00F4               	movwf	??___awdiv
  7603  0EE1  0874               	movf	??___awdiv,w
  7604  0EE2  06D6               	xorwf	___awdiv@sign,f
  7605  0EE3                     l4684:	
  7606  0EE3  01D7               	clrf	___awdiv@quotient
  7607  0EE4  01D8               	clrf	___awdiv@quotient+1
  7608  0EE5  0852               	movf	___awdiv@divisor+1,w
  7609  0EE6  0451               	iorwf	___awdiv@divisor,w
  7610  0EE7  1903               	skipnz
  7611  0EE8  2F1A               	goto	l4706
  7612  0EE9  01D5               	clrf	___awdiv@counter
  7613  0EEA  0AD5               	incf	___awdiv@counter,f
  7614  0EEB                     l4694:	
  7615  0EEB  1BD2               	btfsc	___awdiv@divisor+1,7
  7616  0EEC  2EF9               	goto	l4696
  7617  0EED  3001               	movlw	1
  7618  0EEE                     u5405:	
  7619  0EEE  1003               	clrc
  7620  0EEF  0DD1               	rlf	___awdiv@divisor,f
  7621  0EF0  0DD2               	rlf	___awdiv@divisor+1,f
  7622  0EF1  3EFF               	addlw	-1
  7623  0EF2  1D03               	skipz
  7624  0EF3  2EEE               	goto	u5405
  7625  0EF4  3001               	movlw	1
  7626  0EF5  00F4               	movwf	??___awdiv
  7627  0EF6  0874               	movf	??___awdiv,w
  7628  0EF7  07D5               	addwf	___awdiv@counter,f
  7629  0EF8  2EEB               	goto	l4694
  7630  0EF9                     l4696:	
  7631  0EF9  3001               	movlw	1
  7632  0EFA                     u5425:	
  7633  0EFA  1003               	clrc
  7634  0EFB  0DD7               	rlf	___awdiv@quotient,f
  7635  0EFC  0DD8               	rlf	___awdiv@quotient+1,f
  7636  0EFD  3EFF               	addlw	-1
  7637  0EFE  1D03               	skipz
  7638  0EFF  2EFA               	goto	u5425
  7639  0F00  0852               	movf	___awdiv@divisor+1,w
  7640  0F01  0254               	subwf	___awdiv@dividend+1,w
  7641  0F02  1D03               	skipz
  7642  0F03  2F06               	goto	u5435
  7643  0F04  0851               	movf	___awdiv@divisor,w
  7644  0F05  0253               	subwf	___awdiv@dividend,w
  7645  0F06                     u5435:	
  7646  0F06  1C03               	skipc
  7647  0F07  2F0F               	goto	l4702
  7648  0F08  0851               	movf	___awdiv@divisor,w
  7649  0F09  02D3               	subwf	___awdiv@dividend,f
  7650  0F0A  0852               	movf	___awdiv@divisor+1,w
  7651  0F0B  1C03               	skipc
  7652  0F0C  03D4               	decf	___awdiv@dividend+1,f
  7653  0F0D  02D4               	subwf	___awdiv@dividend+1,f
  7654  0F0E  1457               	bsf	___awdiv@quotient,0
  7655  0F0F                     l4702:	
  7656  0F0F  3001               	movlw	1
  7657  0F10                     u5445:	
  7658  0F10  1003               	clrc
  7659  0F11  0CD2               	rrf	___awdiv@divisor+1,f
  7660  0F12  0CD1               	rrf	___awdiv@divisor,f
  7661  0F13  3EFF               	addlw	-1
  7662  0F14  1D03               	skipz
  7663  0F15  2F10               	goto	u5445
  7664  0F16  3001               	movlw	1
  7665  0F17  02D5               	subwf	___awdiv@counter,f
  7666  0F18  1D03               	btfss	3,2
  7667  0F19  2EF9               	goto	l4696
  7668  0F1A                     l4706:	
  7669  0F1A  0856               	movf	___awdiv@sign,w
  7670  0F1B  1903               	btfsc	3,2
  7671  0F1C  2F22               	goto	l4710
  7672  0F1D  09D7               	comf	___awdiv@quotient,f
  7673  0F1E  09D8               	comf	___awdiv@quotient+1,f
  7674  0F1F  0AD7               	incf	___awdiv@quotient,f
  7675  0F20  1903               	skipnz
  7676  0F21  0AD8               	incf	___awdiv@quotient+1,f
  7677  0F22                     l4710:	
  7678  0F22  0858               	movf	___awdiv@quotient+1,w
  7679  0F23  01D2               	clrf	?___awdiv+1
  7680  0F24  07D2               	addwf	?___awdiv+1,f
  7681  0F25  0857               	movf	___awdiv@quotient,w
  7682  0F26  01D1               	clrf	?___awdiv
  7683  0F27  07D1               	addwf	?___awdiv,f
  7684  0F28  0008               	return
  7685  0F29                     __end_of___awdiv:	
  7686                           
  7687                           	psect	text45
  7688  0AA0                     __ptext45:	
  7689 ;; *************** function _Lights_Initialization *****************
  7690 ;; Defined at:
  7691 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;		None
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;		None
  7696 ;; Return value:  Size  Location     Type
  7697 ;;		None               void
  7698 ;; Registers used:
  7699 ;;		wreg, status,2, status,0, pclath, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7705 ;;      Params:         0       0       0       0
  7706 ;;      Locals:         0       0       0       0
  7707 ;;      Temps:          0       0       0       0
  7708 ;;      Totals:         0       0       0       0
  7709 ;;Total ram usage:        0 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    4
  7712 ;; This function calls:
  7713 ;;		_setLights_Initialization
  7714 ;; This function is called by:
  7715 ;;		_main
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           
  7720                           ;psect for function _Lights_Initialization
  7721  0AA0                     _Lights_Initialization:	
  7722                           
  7723                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7724                           
  7725                           ;incstack = 0
  7726                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7727  0AA0  3001               	movlw	1
  7728  0AA1  158A  22BF         	fcall	_setLights_Initialization
  7729  0AA3  0008               	return
  7730  0AA4                     __end_of_Lights_Initialization:	
  7731                           
  7732                           	psect	text46
  7733  0ABF                     __ptext46:	
  7734 ;; *************** function _setLights_Initialization *****************
  7735 ;; Defined at:
  7736 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  lights          1    wreg     unsigned char 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  lights          1    0[BANK0 ] unsigned char 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7750 ;;      Params:         0       0       0       0
  7751 ;;      Locals:         0       1       0       0
  7752 ;;      Temps:          0       0       0       0
  7753 ;;      Totals:         0       1       0       0
  7754 ;;Total ram usage:        1 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    3
  7757 ;; This function calls:
  7758 ;;		_LightsPointSelect
  7759 ;; This function is called by:
  7760 ;;		_Lights_Initialization
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _setLights_Initialization
  7766  0ABF                     _setLights_Initialization:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7770                           ;setLights_Initialization@lights stored from wreg
  7771  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  7772  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  7773  0AC1  00D1               	movwf	setLights_Initialization@lights
  7774                           
  7775                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7776  0AC2  0851               	movf	setLights_Initialization@lights,w
  7777  0AC3  158A  22EF         	fcall	_LightsPointSelect
  7778  0AC5  0008               	return
  7779  0AC6                     __end_of_setLights_Initialization:	
  7780                           
  7781                           	psect	text47
  7782  0A8A                     __ptext47:	
  7783 ;; *************** function _LED_Main *****************
  7784 ;; Defined at:
  7785 ;;		line 47 in file "../src/LED_B1.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;		None               void
  7792 ;; Registers used:
  7793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7799 ;;      Params:         0       0       0       0
  7800 ;;      Locals:         0       0       0       0
  7801 ;;      Temps:          0       0       0       0
  7802 ;;      Totals:         0       0       0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    5
  7806 ;; This function calls:
  7807 ;;		_setPIRLED_Main
  7808 ;; This function is called by:
  7809 ;;		_main
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           
  7814                           ;psect for function _LED_Main
  7815  0A8A                     _LED_Main:	
  7816                           
  7817                           ;LED_B1.c: 55: setPIRLED_Main();
  7818                           
  7819                           ;incstack = 0
  7820                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7821  0A8A  118A  2787         	fcall	_setPIRLED_Main
  7822  0A8C  0008               	return
  7823  0A8D                     __end_of_LED_Main:	
  7824                           
  7825                           	psect	text48
  7826  0787                     __ptext48:	
  7827 ;; *************** function _setPIRLED_Main *****************
  7828 ;; Defined at:
  7829 ;;		line 265 in file "../src/LED_B1.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  count           1    3[BANK0 ] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;		None               void
  7836 ;; Registers used:
  7837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7843 ;;      Params:         0       0       0       0
  7844 ;;      Locals:         0       1       0       0
  7845 ;;      Temps:          0       1       0       0
  7846 ;;      Totals:         0       2       0       0
  7847 ;;Total ram usage:        2 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    4
  7850 ;; This function calls:
  7851 ;;		_setLED
  7852 ;; This function is called by:
  7853 ;;		_LED_Main
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _setPIRLED_Main
  7859  0787                     _setPIRLED_Main:	
  7860                           
  7861                           ;LED_B1.c: 267: char count;
  7862                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  7863                           
  7864                           ;incstack = 0
  7865                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7866  0787  1283               	bcf	3,5	;RP0=0, select bank0
  7867  0788  1303               	bcf	3,6	;RP1=0, select bank0
  7868  0789  1C2A               	btfss	_PIRLED,0
  7869  078A  0008               	return
  7870                           
  7871                           ;LED_B1.c: 269: PIRLED.Time++;
  7872  078B  3001               	movlw	1
  7873  078C  07AC               	addwf	_PIRLED+2,f
  7874  078D  1803               	skipnc
  7875  078E  0AAD               	incf	_PIRLED+3,f
  7876  078F  3000               	movlw	0
  7877  0790  07AD               	addwf	_PIRLED+3,f
  7878                           
  7879                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  7880  0791  3000               	movlw	0
  7881  0792  022D               	subwf	_PIRLED+3,w
  7882  0793  3019               	movlw	25
  7883  0794  1903               	skipnz
  7884  0795  022C               	subwf	_PIRLED+2,w
  7885  0796  1C03               	skipc
  7886  0797  0008               	return
  7887                           
  7888                           ;LED_B1.c: 271: PIRLED.Time = 0;
  7889  0798  01AC               	clrf	_PIRLED+2
  7890  0799  01AD               	clrf	_PIRLED+3
  7891                           
  7892                           ;LED_B1.c: 272: setLED(1, 0);
  7893  079A  01D1               	clrf	setLED@command
  7894  079B  3001               	movlw	1
  7895  079C  158A  278F  118A   	fcall	_setLED
  7896                           
  7897                           ;LED_B1.c: 273: setLED(2, 0);
  7898  079F  1283               	bcf	3,5	;RP0=0, select bank0
  7899  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  7900  07A1  01D1               	clrf	setLED@command
  7901  07A2  3002               	movlw	2
  7902  07A3  158A  278F  118A   	fcall	_setLED
  7903                           
  7904                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  7905  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  7906  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  7907  07A8  1CAA               	btfss	_PIRLED,1
  7908  07A9  2FAE               	goto	l4750
  7909                           
  7910                           ;LED_B1.c: 275: count = 4;
  7911  07AA  3004               	movlw	4
  7912  07AB  00D3               	movwf	??_setPIRLED_Main
  7913  07AC  0853               	movf	??_setPIRLED_Main,w
  7914  07AD  00D4               	movwf	setPIRLED_Main@count
  7915  07AE                     l4750:	
  7916                           
  7917                           ;LED_B1.c: 276: }
  7918                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  7919  07AE  1D2A               	btfss	_PIRLED,2
  7920  07AF  2FB4               	goto	l4754
  7921                           
  7922                           ;LED_B1.c: 278: count = 6;
  7923  07B0  3006               	movlw	6
  7924  07B1  00D3               	movwf	??_setPIRLED_Main
  7925  07B2  0853               	movf	??_setPIRLED_Main,w
  7926  07B3  00D4               	movwf	setPIRLED_Main@count
  7927  07B4                     l4754:	
  7928                           
  7929                           ;LED_B1.c: 279: }
  7930                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  7931  07B4  1DAA               	btfss	_PIRLED,3
  7932  07B5  2FBA               	goto	l4758
  7933                           
  7934                           ;LED_B1.c: 281: count = 8;
  7935  07B6  3008               	movlw	8
  7936  07B7  00D3               	movwf	??_setPIRLED_Main
  7937  07B8  0853               	movf	??_setPIRLED_Main,w
  7938  07B9  00D4               	movwf	setPIRLED_Main@count
  7939  07BA                     l4758:	
  7940                           
  7941                           ;LED_B1.c: 282: }
  7942                           ;LED_B1.c: 283: PIRLED.Count++;
  7943  07BA  3001               	movlw	1
  7944  07BB  00D3               	movwf	??_setPIRLED_Main
  7945  07BC  0853               	movf	??_setPIRLED_Main,w
  7946  07BD  07AB               	addwf	_PIRLED+1,f
  7947                           
  7948                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7949  07BE  082B               	movf	_PIRLED+1,w
  7950  07BF  3A01               	xorlw	1
  7951  07C0  1903               	skipnz
  7952  07C1  2FC6               	goto	l4764
  7953  07C2  082B               	movf	_PIRLED+1,w
  7954  07C3  3A02               	xorlw	2
  7955  07C4  1D03               	skipz
  7956  07C5  2FDA               	goto	l4768
  7957  07C6                     l4764:	
  7958                           
  7959                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7960  07C6  1003               	clrc
  7961  07C7  1E2A               	btfss	_PIRLED,4
  7962  07C8  1403               	setc
  7963  07C9  1C03               	btfss	3,0
  7964  07CA  2FCF               	goto	u5560
  7965  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  7966  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  7967  07CD  162A               	bsf	_PIRLED,4
  7968  07CE  2FD2               	goto	l4766
  7969  07CF                     u5560:	
  7970  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  7971  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  7972  07D1  122A               	bcf	_PIRLED,4
  7973  07D2                     l4766:	
  7974                           
  7975                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  7976  07D2  3000               	movlw	0
  7977  07D3  1A2A               	btfsc	_PIRLED,4
  7978  07D4  3001               	movlw	1
  7979  07D5  00D1               	movwf	setLED@command
  7980  07D6  3002               	movlw	2
  7981  07D7  158A  278F         	fcall	_setLED
  7982                           
  7983                           ;LED_B1.c: 287: } else {
  7984  07D9  0008               	return
  7985  07DA                     l4768:	
  7986                           
  7987                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7988  07DA  1003               	clrc
  7989  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  7990  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  7991  07DD  1E2A               	btfss	_PIRLED,4
  7992  07DE  1403               	setc
  7993  07DF  1C03               	btfss	3,0
  7994  07E0  2FE5               	goto	u5580
  7995  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  7996  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  7997  07E3  162A               	bsf	_PIRLED,4
  7998  07E4  2FE8               	goto	l4770
  7999  07E5                     u5580:	
  8000  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  8001  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  8002  07E7  122A               	bcf	_PIRLED,4
  8003  07E8                     l4770:	
  8004                           
  8005                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8006  07E8  3000               	movlw	0
  8007  07E9  1A2A               	btfsc	_PIRLED,4
  8008  07EA  3001               	movlw	1
  8009  07EB  00D1               	movwf	setLED@command
  8010  07EC  3001               	movlw	1
  8011  07ED  158A  278F  118A   	fcall	_setLED
  8012                           
  8013                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8014  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  8015  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  8016  07F2  082B               	movf	_PIRLED+1,w
  8017  07F3  0654               	xorwf	setPIRLED_Main@count,w
  8018  07F4  1D03               	skipz
  8019  07F5  0008               	return
  8020                           
  8021                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8022  07F6  01AB               	clrf	_PIRLED+1
  8023  07F7  0008               	return
  8024  07F8                     __end_of_setPIRLED_Main:	
  8025                           
  8026                           	psect	text49
  8027  0B0E                     __ptext49:	
  8028 ;; *************** function _LED_Initialization *****************
  8029 ;; Defined at:
  8030 ;;		line 31 in file "../src/LED_B1.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;		None               void
  8037 ;; Registers used:
  8038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8044 ;;      Params:         0       0       0       0
  8045 ;;      Locals:         0       0       0       0
  8046 ;;      Temps:          0       0       0       0
  8047 ;;      Totals:         0       0       0       0
  8048 ;;Total ram usage:        0 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    5
  8051 ;; This function calls:
  8052 ;;		_setLED_Initialization
  8053 ;; This function is called by:
  8054 ;;		_main
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _LED_Initialization
  8060  0B0E                     _LED_Initialization:	
  8061                           
  8062                           ;LED_B1.c: 33: setLED_Initialization(1);
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8066  0B0E  3001               	movlw	1
  8067  0B0F  158A  2383  158A   	fcall	_setLED_Initialization
  8068                           
  8069                           ;LED_B1.c: 36: setLED_Initialization(2);
  8070  0B12  3002               	movlw	2
  8071  0B13  158A  2383  158A   	fcall	_setLED_Initialization
  8072                           
  8073                           ;LED_B1.c: 42: setLED_Initialization(99);
  8074  0B16  3063               	movlw	99
  8075  0B17  158A  2383         	fcall	_setLED_Initialization
  8076  0B19  0008               	return
  8077  0B1A                     __end_of_LED_Initialization:	
  8078                           
  8079                           	psect	text50
  8080  0B83                     __ptext50:	
  8081 ;; *************** function _setLED_Initialization *****************
  8082 ;; Defined at:
  8083 ;;		line 74 in file "../src/LED_B1.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  led             1    wreg     unsigned char 
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  led             1    2[BANK0 ] unsigned char 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8097 ;;      Params:         0       0       0       0
  8098 ;;      Locals:         0       1       0       0
  8099 ;;      Temps:          0       0       0       0
  8100 ;;      Totals:         0       1       0       0
  8101 ;;Total ram usage:        1 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    4
  8104 ;; This function calls:
  8105 ;;		_LedPointSelect
  8106 ;;		_setLED
  8107 ;; This function is called by:
  8108 ;;		_LED_Initialization
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _setLED_Initialization
  8114  0B83                     _setLED_Initialization:	
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8118                           ;setLED_Initialization@led stored from wreg
  8119  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  8120  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  8121  0B85  00D3               	movwf	setLED_Initialization@led
  8122                           
  8123                           ;LED_B1.c: 75: LedPointSelect(led);
  8124  0B86  0853               	movf	setLED_Initialization@led,w
  8125  0B87  158A  241C  158A   	fcall	_LedPointSelect
  8126                           
  8127                           ;LED_B1.c: 76: LED->Enable = 1;
  8128  0B8A  0876               	movf	_LED,w
  8129  0B8B  0084               	movwf	4
  8130  0B8C  1383               	bcf	3,7	;select IRP bank0
  8131  0B8D  1400               	bsf	0,0
  8132                           
  8133                           ;LED_B1.c: 77: setLED(led, 0);
  8134  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  8135  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  8136  0B90  01D1               	clrf	setLED@command
  8137  0B91  0853               	movf	setLED_Initialization@led,w
  8138  0B92  158A  278F         	fcall	_setLED
  8139  0B94  0008               	return
  8140  0B95                     __end_of_setLED_Initialization:	
  8141                           
  8142                           	psect	text51
  8143  0548                     __ptext51:	
  8144 ;; *************** function _Exception_Main *****************
  8145 ;; Defined at:
  8146 ;;		line 499 in file "../src/Main_B1.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;		None
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  i               2   12[BANK0 ] int 
  8151 ;;  i               2   10[BANK0 ] int 
  8152 ;;  error           1   14[BANK0 ] unsigned char 
  8153 ;;  status          1    9[BANK0 ] unsigned char 
  8154 ;;  count           1    8[BANK0 ] unsigned char 
  8155 ;;  lights          1    7[BANK0 ] unsigned char 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;		None               void
  8158 ;; Registers used:
  8159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8165 ;;      Params:         0       0       0       0
  8166 ;;      Locals:         0       8       0       0
  8167 ;;      Temps:          0       1       0       0
  8168 ;;      Totals:         0       9       0       0
  8169 ;;Total ram usage:        9 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    5
  8172 ;; This function calls:
  8173 ;;		_getAll_Lights_Line
  8174 ;;		_getLights_Status
  8175 ;;		_getMain_All_Error_Status
  8176 ;;		_getMain_All_LightsStatus
  8177 ;;		_setLED
  8178 ;;		_setLights_SwOff
  8179 ;;		_setLights_SwOn
  8180 ;; This function is called by:
  8181 ;;		_main
  8182 ;; This function uses a non-reentrant model
  8183 ;;
  8184                           
  8185                           
  8186                           ;psect for function _Exception_Main
  8187  0548                     _Exception_Main:	
  8188                           
  8189                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8190                           
  8191                           ;incstack = 0
  8192                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8193  0548  3000               	movlw	0
  8194  0549  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  8195  054C  1283               	bcf	3,5	;RP0=0, select bank0
  8196  054D  1303               	bcf	3,6	;RP1=0, select bank0
  8197  054E  00D7               	movwf	??_Exception_Main
  8198  054F  0857               	movf	??_Exception_Main,w
  8199  0550  00DF               	movwf	Exception_Main@error
  8200                           
  8201                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8202  0551  01D8               	clrf	Exception_Main@lights
  8203  0552  01D9               	clrf	Exception_Main@count
  8204  0553  0AD9               	incf	Exception_Main@count,f
  8205                           
  8206                           ;Main_B1.c: 502: char status = 0;
  8207  0554  01DA               	clrf	Exception_Main@status
  8208                           
  8209                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8210  0555  1DA7               	btfss	_myMain+2,3
  8211  0556  2D63               	goto	l5382
  8212                           
  8213                           ;Main_B1.c: 505: if (error == 0) {
  8214  0557  08DF               	movf	Exception_Main@error,f
  8215  0558  1D03               	skipz
  8216  0559  0008               	return
  8217                           
  8218                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8219  055A  11A7               	bcf	_myMain+2,3
  8220                           
  8221                           ;Main_B1.c: 511: setLED(error, 110);
  8222  055B  306E               	movlw	110
  8223  055C  00D7               	movwf	??_Exception_Main
  8224  055D  0857               	movf	??_Exception_Main,w
  8225  055E  00D1               	movwf	setLED@command
  8226  055F  085F               	movf	Exception_Main@error,w
  8227  0560  158A  278F         	fcall	_setLED
  8228                           
  8229                           ;Main_B1.c: 522: }
  8230                           ;Main_B1.c: 523: } else {
  8231  0562  0008               	return
  8232  0563                     l5382:	
  8233                           
  8234                           ;Main_B1.c: 524: if (error != 0) {
  8235  0563  1283               	bcf	3,5	;RP0=0, select bank0
  8236  0564  1303               	bcf	3,6	;RP1=0, select bank0
  8237  0565  085F               	movf	Exception_Main@error,w
  8238  0566  1903               	btfsc	3,2
  8239  0567  0008               	return
  8240                           
  8241                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8242  0568  15A7               	bsf	_myMain+2,3
  8243                           
  8244                           ;Main_B1.c: 529: setLED(error, 111);
  8245  0569  306F               	movlw	111
  8246  056A  00D7               	movwf	??_Exception_Main
  8247  056B  0857               	movf	??_Exception_Main,w
  8248  056C  00D1               	movwf	setLED@command
  8249  056D  085F               	movf	Exception_Main@error,w
  8250  056E  158A  278F  118A   	fcall	_setLED
  8251                           
  8252                           ;Main_B1.c: 591: switch (error) {
  8253  0571  2DFB               	goto	l5418
  8254  0572                     l5388:	
  8255                           ;Main_B1.c: 592: case 1:
  8256                           
  8257                           
  8258                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8259  0572  1283               	bcf	3,5	;RP0=0, select bank0
  8260  0573  1303               	bcf	3,6	;RP1=0, select bank0
  8261  0574  01DB               	clrf	Exception_Main@i
  8262  0575  01DC               	clrf	Exception_Main@i+1
  8263  0576                     l5396:	
  8264  0576  085C               	movf	Exception_Main@i+1,w
  8265  0577  3A80               	xorlw	128
  8266  0578  00D7               	movwf	??_Exception_Main
  8267  0579  3080               	movlw	128
  8268  057A  0257               	subwf	??_Exception_Main,w
  8269  057B  1D03               	skipz
  8270  057C  2D7F               	goto	u6975
  8271  057D  0859               	movf	Exception_Main@count,w
  8272  057E  025B               	subwf	Exception_Main@i,w
  8273  057F                     u6975:	
  8274  057F  1803               	btfsc	3,0
  8275  0580  2DA2               	goto	u6970
  8276                           
  8277                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8278  0581  1283               	bcf	3,5	;RP0=0, select bank0
  8279  0582  1303               	bcf	3,6	;RP1=0, select bank0
  8280  0583  085B               	movf	Exception_Main@i,w
  8281  0584  3E01               	addlw	1
  8282  0585  158A  2361  118A   	fcall	_getLights_Status
  8283  0588  3A01               	xorlw	1
  8284  0589  1D03               	skipz
  8285  058A  2D99               	goto	l5394
  8286                           
  8287                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8288  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8289  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8290  058D  085B               	movf	Exception_Main@i,w
  8291  058E  3E01               	addlw	1
  8292  058F  158A  2500  118A   	fcall	_setLights_SwOn
  8293                           
  8294                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8295  0592  1283               	bcf	3,5	;RP0=0, select bank0
  8296  0593  1303               	bcf	3,6	;RP1=0, select bank0
  8297  0594  085B               	movf	Exception_Main@i,w
  8298  0595  3E01               	addlw	1
  8299  0596  158A  2436  118A   	fcall	_setLights_SwOff
  8300  0599                     l5394:	
  8301  0599  3001               	movlw	1
  8302  059A  1283               	bcf	3,5	;RP0=0, select bank0
  8303  059B  1303               	bcf	3,6	;RP1=0, select bank0
  8304  059C  07DB               	addwf	Exception_Main@i,f
  8305  059D  1803               	skipnc
  8306  059E  0ADC               	incf	Exception_Main@i+1,f
  8307  059F  3000               	movlw	0
  8308  05A0  07DC               	addwf	Exception_Main@i+1,f
  8309  05A1  2D76               	goto	l5396
  8310  05A2                     u6970:	
  8311  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  8312  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  8313  05A4  0008               	return
  8314  05A5                     l5398:	
  8315                           ;Main_B1.c: 601: case 2:
  8316                           
  8317                           ;Main_B1.c: 598: }
  8318                           ;Main_B1.c: 599: }
  8319                           ;Main_B1.c: 600: break;
  8320                           
  8321                           
  8322                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8323  05A5  158A  22E6  118A   	fcall	_getMain_All_LightsStatus
  8324                           
  8325                           ;Main_B1.c: 604: }
  8326                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8327                           
  8328                           ;Main_B1.c: 603: ;;
  8329  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  8330  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  8331  05AA  01DD               	clrf	Exception_Main@i_2155
  8332  05AB  01DE               	clrf	Exception_Main@i_2155+1
  8333  05AC                     l5408:	
  8334  05AC  085E               	movf	Exception_Main@i_2155+1,w
  8335  05AD  3A80               	xorlw	128
  8336  05AE  00D7               	movwf	??_Exception_Main
  8337  05AF  3080               	movlw	128
  8338  05B0  0257               	subwf	??_Exception_Main,w
  8339  05B1  1D03               	skipz
  8340  05B2  2DB5               	goto	u6995
  8341  05B3  0859               	movf	Exception_Main@count,w
  8342  05B4  025D               	subwf	Exception_Main@i_2155,w
  8343  05B5                     u6995:	
  8344  05B5  1803               	btfsc	3,0
  8345  05B6  2DD8               	goto	u6990
  8346                           
  8347                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8348  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  8349  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  8350  05B9  085D               	movf	Exception_Main@i_2155,w
  8351  05BA  3E01               	addlw	1
  8352  05BB  158A  2361  118A   	fcall	_getLights_Status
  8353  05BE  3A01               	xorlw	1
  8354  05BF  1D03               	skipz
  8355  05C0  2DCF               	goto	l5406
  8356                           
  8357                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8358  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  8359  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  8360  05C3  085D               	movf	Exception_Main@i_2155,w
  8361  05C4  3E01               	addlw	1
  8362  05C5  158A  2500  118A   	fcall	_setLights_SwOn
  8363                           
  8364                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8365  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  8366  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  8367  05CA  085D               	movf	Exception_Main@i_2155,w
  8368  05CB  3E01               	addlw	1
  8369  05CC  158A  2436  118A   	fcall	_setLights_SwOff
  8370  05CF                     l5406:	
  8371  05CF  3001               	movlw	1
  8372  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  8373  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  8374  05D2  07DD               	addwf	Exception_Main@i_2155,f
  8375  05D3  1803               	skipnc
  8376  05D4  0ADE               	incf	Exception_Main@i_2155+1,f
  8377  05D5  3000               	movlw	0
  8378  05D6  07DE               	addwf	Exception_Main@i_2155+1,f
  8379  05D7  2DAC               	goto	l5408
  8380  05D8                     u6990:	
  8381  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  8382  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  8383  05DA  0008               	return
  8384  05DB                     l5410:	
  8385                           ;Main_B1.c: 613: case 3:
  8386                           
  8387                           ;Main_B1.c: 610: }
  8388                           ;Main_B1.c: 611: }
  8389                           ;Main_B1.c: 612: break;
  8390                           
  8391                           
  8392                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8393  05DB  158A  22DD  118A   	fcall	_getAll_Lights_Line
  8394  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  8395  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  8396  05E0  00D7               	movwf	??_Exception_Main
  8397  05E1  0857               	movf	??_Exception_Main,w
  8398  05E2  00DA               	movwf	Exception_Main@status
  8399                           
  8400                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8401  05E3  085A               	movf	Exception_Main@status,w
  8402  05E4  158A  2361  118A   	fcall	_getLights_Status
  8403  05E7  3A01               	xorlw	1
  8404  05E8  1903               	btfsc	3,2
  8405  05E9  2DED               	goto	l5414
  8406  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  8407  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  8408  05EC  0008               	return
  8409  05ED                     l5414:	
  8410                           
  8411                           ;Main_B1.c: 617: setLights_SwOn(status);
  8412  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  8413  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  8414  05EF  085A               	movf	Exception_Main@status,w
  8415  05F0  158A  2500  118A   	fcall	_setLights_SwOn
  8416                           
  8417                           ;Main_B1.c: 618: setLights_SwOff(status);
  8418  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  8419  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  8420  05F5  085A               	movf	Exception_Main@status,w
  8421  05F6  158A  2436         	fcall	_setLights_SwOff
  8422  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  8423  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  8424  05FA  0008               	return
  8425  05FB                     l5418:	
  8426                           ;Main_B1.c: 623: }
  8427                           
  8428                           ;Main_B1.c: 620: }
  8429                           ;Main_B1.c: 621: ;;
  8430                           ;Main_B1.c: 622: break;
  8431                           
  8432  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  8433  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  8434  05FD  085F               	movf	Exception_Main@error,w
  8435                           
  8436                           ; Switch size 1, requested type "space"
  8437                           ; Number of cases is 3, Range of values is 1 to 3
  8438                           ; switch strategies available:
  8439                           ; Name         Instructions Cycles
  8440                           ; simple_byte           10     6 (average)
  8441                           ; direct_byte           16    10 (fixed)
  8442                           ; jumptable            263     9 (fixed)
  8443                           ;	Chosen strategy is simple_byte
  8444  05FE  3A01               	xorlw	1	; case 1
  8445  05FF  1903               	skipnz
  8446  0600  2D72               	goto	l5388
  8447  0601  3A03               	xorlw	3	; case 2
  8448  0602  1903               	skipnz
  8449  0603  2DA5               	goto	l5398
  8450  0604  3A01               	xorlw	1	; case 3
  8451  0605  1903               	skipnz
  8452  0606  2DDB               	goto	l5410
  8453  0607  2E09               	goto	l644
  8454  0608  0008               	return
  8455  0609                     l644:	
  8456  0609  0008               	return
  8457  060A                     __end_of_Exception_Main:	
  8458                           
  8459                           	psect	text52
  8460  0D00                     __ptext52:	
  8461 ;; *************** function _setLights_SwOn *****************
  8462 ;; Defined at:
  8463 ;;		line 410 in file "../src/TriacRelay_B1.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  sw              1    wreg     unsigned char 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  sw              1    3[BANK0 ] unsigned char 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;		None               void
  8470 ;; Registers used:
  8471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8477 ;;      Params:         0       0       0       0
  8478 ;;      Locals:         0       1       0       0
  8479 ;;      Temps:          0       0       0       0
  8480 ;;      Totals:         0       1       0       0
  8481 ;;Total ram usage:        1 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    4
  8484 ;; This function calls:
  8485 ;;		_LightsPointSelect
  8486 ;;		_getLights_Status
  8487 ;;		_setLights_Trigger
  8488 ;; This function is called by:
  8489 ;;		_Exception_Main
  8490 ;;		_PIR_Main
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           
  8495                           ;psect for function _setLights_SwOn
  8496  0D00                     _setLights_SwOn:	
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8500                           ;setLights_SwOn@sw stored from wreg
  8501  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  8502  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  8503  0D02  00D4               	movwf	setLights_SwOn@sw
  8504                           
  8505                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  8506  0D03  0854               	movf	setLights_SwOn@sw,w
  8507  0D04  158A  22EF  158A   	fcall	_LightsPointSelect
  8508                           
  8509                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  8510  0D07  0A78               	incf	_Lights,w
  8511  0D08  0084               	movwf	4
  8512  0D09  1383               	bcf	3,7	;select IRP bank0
  8513  0D0A  1500               	bsf	0,2
  8514                           
  8515                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  8516  0D0B  1283               	bcf	3,5	;RP0=0, select bank0
  8517  0D0C  1303               	bcf	3,6	;RP1=0, select bank0
  8518  0D0D  0854               	movf	setLights_SwOn@sw,w
  8519  0D0E  158A  2361  158A   	fcall	_getLights_Status
  8520  0D11  3800               	iorlw	0
  8521  0D12  1D03               	skipz
  8522  0D13  2D20               	goto	l4786
  8523                           
  8524                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  8525  0D14  0A78               	incf	_Lights,w
  8526  0D15  0084               	movwf	4
  8527  0D16  1383               	bcf	3,7	;select IRP bank0
  8528  0D17  1580               	bsf	0,3
  8529                           
  8530                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  8531  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  8532  0D19  1303               	bcf	3,6	;RP1=0, select bank0
  8533  0D1A  01D1               	clrf	setLights_Trigger@command
  8534  0D1B  0AD1               	incf	setLights_Trigger@command,f
  8535  0D1C  0854               	movf	setLights_SwOn@sw,w
  8536  0D1D  158A  246A         	fcall	_setLights_Trigger
  8537                           
  8538                           ;TriacRelay_B1.c: 418: } else {
  8539  0D1F  0008               	return
  8540  0D20                     l4786:	
  8541                           
  8542                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  8543  0D20  0A78               	incf	_Lights,w
  8544  0D21  0084               	movwf	4
  8545  0D22  1383               	bcf	3,7	;select IRP bank0
  8546  0D23  1180               	bcf	0,3
  8547  0D24  0008               	return
  8548  0D25                     __end_of_setLights_SwOn:	
  8549                           
  8550                           	psect	text53
  8551  0B61                     __ptext53:	
  8552 ;; *************** function _getLights_Status *****************
  8553 ;; Defined at:
  8554 ;;		line 271 in file "../src/TriacRelay_B1.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  lights          1    wreg     unsigned char 
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;  lights          1    0[BANK0 ] unsigned char 
  8559 ;;  status          1    1[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  1    wreg      unsigned char 
  8562 ;; Registers used:
  8563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8569 ;;      Params:         0       0       0       0
  8570 ;;      Locals:         0       2       0       0
  8571 ;;      Temps:          0       0       0       0
  8572 ;;      Totals:         0       2       0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    3
  8576 ;; This function calls:
  8577 ;;		_LightsPointSelect
  8578 ;; This function is called by:
  8579 ;;		_Exception_Main
  8580 ;;		_PIR_Main
  8581 ;;		_setLights_SwOn
  8582 ;;		_setLights_ErrorClose
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function _getLights_Status
  8588  0B61                     _getLights_Status:	
  8589                           
  8590                           ;incstack = 0
  8591                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8592                           ;getLights_Status@lights stored from wreg
  8593  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  8594  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  8595  0B63  00D1               	movwf	getLights_Status@lights
  8596                           
  8597                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  8598  0B64  0851               	movf	getLights_Status@lights,w
  8599  0B65  158A  22EF         	fcall	_LightsPointSelect
  8600                           
  8601                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  8602  0B67  0878               	movf	_Lights,w
  8603  0B68  0084               	movwf	4
  8604  0B69  3000               	movlw	0
  8605  0B6A  1383               	bcf	3,7	;select IRP bank0
  8606  0B6B  1900               	btfsc	0,2
  8607  0B6C  3001               	movlw	1
  8608  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  8609  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  8610  0B6F  00D2               	movwf	getLights_Status@status
  8611                           
  8612                           ;TriacRelay_B1.c: 274: return status;
  8613  0B70  0852               	movf	getLights_Status@status,w
  8614  0B71  0008               	return
  8615  0B72                     __end_of_getLights_Status:	
  8616                           
  8617                           	psect	text54
  8618  0C36                     __ptext54:	
  8619 ;; *************** function _setLights_SwOff *****************
  8620 ;; Defined at:
  8621 ;;		line 438 in file "../src/TriacRelay_B1.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  sw              1    wreg     unsigned char 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  sw              1    3[BANK0 ] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;		None               void
  8628 ;; Registers used:
  8629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8635 ;;      Params:         0       0       0       0
  8636 ;;      Locals:         0       1       0       0
  8637 ;;      Temps:          0       0       0       0
  8638 ;;      Totals:         0       1       0       0
  8639 ;;Total ram usage:        1 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    4
  8642 ;; This function calls:
  8643 ;;		_LightsPointSelect
  8644 ;;		_setLights_Trigger
  8645 ;; This function is called by:
  8646 ;;		_Exception_Main
  8647 ;;		_PIR_Main
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           
  8652                           ;psect for function _setLights_SwOff
  8653  0C36                     _setLights_SwOff:	
  8654                           
  8655                           ;incstack = 0
  8656                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8657                           ;setLights_SwOff@sw stored from wreg
  8658  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  8659  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  8660  0C38  00D4               	movwf	setLights_SwOff@sw
  8661                           
  8662                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  8663  0C39  0854               	movf	setLights_SwOff@sw,w
  8664  0C3A  158A  22EF  158A   	fcall	_LightsPointSelect
  8665                           
  8666                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  8667  0C3D  0A78               	incf	_Lights,w
  8668  0C3E  0084               	movwf	4
  8669  0C3F  1383               	bcf	3,7	;select IRP bank0
  8670  0C40  1D00               	btfss	0,2
  8671  0C41  0008               	return
  8672                           
  8673                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  8674  0C42  0A78               	incf	_Lights,w
  8675  0C43  0084               	movwf	4
  8676  0C44  1100               	bcf	0,2
  8677                           
  8678                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  8679  0C45  0A78               	incf	_Lights,w
  8680  0C46  0084               	movwf	4
  8681  0C47  1980               	btfsc	0,3
  8682  0C48  0008               	return
  8683                           
  8684                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  8685  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  8686  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  8687  0C4B  01D1               	clrf	setLights_Trigger@command
  8688  0C4C  0854               	movf	setLights_SwOff@sw,w
  8689  0C4D  158A  246A         	fcall	_setLights_Trigger
  8690  0C4F  0008               	return
  8691  0C50                     __end_of_setLights_SwOff:	
  8692                           
  8693                           	psect	text55
  8694  0C6A                     __ptext55:	
  8695 ;; *************** function _setLights_Trigger *****************
  8696 ;; Defined at:
  8697 ;;		line 278 in file "../src/TriacRelay_B1.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  lights          1    wreg     unsigned char 
  8700 ;;  command         1    0[BANK0 ] unsigned char 
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  lights          1    2[BANK0 ] unsigned char 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;		None               void
  8705 ;; Registers used:
  8706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8712 ;;      Params:         0       1       0       0
  8713 ;;      Locals:         0       1       0       0
  8714 ;;      Temps:          0       1       0       0
  8715 ;;      Totals:         0       3       0       0
  8716 ;;Total ram usage:        3 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    3
  8719 ;; This function calls:
  8720 ;;		_LightsPointSelect
  8721 ;; This function is called by:
  8722 ;;		_setLights_SwOn
  8723 ;;		_setLights_SwOff
  8724 ;;		_setLights_ErrorClose
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function _setLights_Trigger
  8730  0C6A                     _setLights_Trigger:	
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8734                           ;setLights_Trigger@lights stored from wreg
  8735  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  8736  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  8737  0C6C  00D3               	movwf	setLights_Trigger@lights
  8738                           
  8739                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  8740  0C6D  0853               	movf	setLights_Trigger@lights,w
  8741  0C6E  158A  22EF         	fcall	_LightsPointSelect
  8742                           
  8743                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  8744  0C70  0878               	movf	_Lights,w
  8745  0C71  0084               	movwf	4
  8746  0C72  1383               	bcf	3,7	;select IRP bank0
  8747  0C73  1580               	bsf	0,3
  8748                           
  8749                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  8750  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  8751  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  8752  0C76  0851               	movf	setLights_Trigger@command,w
  8753  0C77  3A01               	xorlw	1
  8754  0C78  3000               	movlw	0
  8755  0C79  1903               	skipnz
  8756  0C7A  3001               	movlw	1
  8757  0C7B  00D2               	movwf	??_setLights_Trigger
  8758  0C7C  0878               	movf	_Lights,w
  8759  0C7D  0084               	movwf	4
  8760  0C7E  0ED2               	swapf	??_setLights_Trigger,f
  8761  0C7F  0800               	movf	0,w
  8762  0C80  0652               	xorwf	??_setLights_Trigger,w
  8763  0C81  39EF               	andlw	-17
  8764  0C82  0652               	xorwf	??_setLights_Trigger,w
  8765  0C83  0080               	movwf	0
  8766  0C84  0008               	return
  8767  0C85                     __end_of_setLights_Trigger:	
  8768                           
  8769                           	psect	text56
  8770  0AEF                     __ptext56:	
  8771 ;; *************** function _LightsPointSelect *****************
  8772 ;; Defined at:
  8773 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;  lights          1    wreg     unsigned char 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  lights          1    5[COMMON] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;		None               void
  8780 ;; Registers used:
  8781 ;;		wreg
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8787 ;;      Params:         0       0       0       0
  8788 ;;      Locals:         1       0       0       0
  8789 ;;      Temps:          1       0       0       0
  8790 ;;      Totals:         2       0       0       0
  8791 ;;Total ram usage:        2 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    2
  8794 ;; This function calls:
  8795 ;;		Nothing
  8796 ;; This function is called by:
  8797 ;;		_setLights_Initialization
  8798 ;;		_setLights_Main
  8799 ;;		_Lights_Control
  8800 ;;		_getLights_Status
  8801 ;;		_setLights_Trigger
  8802 ;;		_setLights_SwOn
  8803 ;;		_setLights_SwOff
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _LightsPointSelect
  8809  0AEF                     _LightsPointSelect:	
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _LightsPointSelect: [wreg]
  8813                           ;LightsPointSelect@lights stored from wreg
  8814  0AEF  00F5               	movwf	LightsPointSelect@lights
  8815                           
  8816                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8817  0AF0  0875               	movf	LightsPointSelect@lights,w
  8818  0AF1  3A01               	xorlw	1
  8819  0AF2  1D03               	skipz
  8820  0AF3  0008               	return
  8821                           
  8822                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8823  0AF4  3040               	movlw	_Lights1& (0+255)
  8824  0AF5  00F4               	movwf	??_LightsPointSelect
  8825  0AF6  0874               	movf	??_LightsPointSelect,w
  8826  0AF7  00F8               	movwf	_Lights
  8827  0AF8  0008               	return
  8828  0AF9                     __end_of_LightsPointSelect:	
  8829                           
  8830                           	psect	text57
  8831  0F8F                     __ptext57:	
  8832 ;; *************** function _setLED *****************
  8833 ;; Defined at:
  8834 ;;		line 81 in file "../src/LED_B1.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  led             1    wreg     unsigned char 
  8837 ;;  command         1    0[BANK0 ] unsigned char 
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;  led             1    1[BANK0 ] unsigned char 
  8840 ;; Return value:  Size  Location     Type
  8841 ;;		None               void
  8842 ;; Registers used:
  8843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8849 ;;      Params:         0       1       0       0
  8850 ;;      Locals:         0       1       0       0
  8851 ;;      Temps:          0       0       0       0
  8852 ;;      Totals:         0       2       0       0
  8853 ;;Total ram usage:        2 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    3
  8856 ;; This function calls:
  8857 ;;		_LedPointSelect
  8858 ;; This function is called by:
  8859 ;;		_setLED_Initialization
  8860 ;;		_setPIRLED_Main
  8861 ;;		_Exception_Main
  8862 ;;		_PIR_Main
  8863 ;;		_setLights
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           
  8868                           ;psect for function _setLED
  8869  0F8F                     _setLED:	
  8870                           
  8871                           ;incstack = 0
  8872                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8873                           ;setLED@led stored from wreg
  8874  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8875  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8876  0F91  00D2               	movwf	setLED@led
  8877                           
  8878                           ;LED_B1.c: 82: LedPointSelect(led);
  8879  0F92  0852               	movf	setLED@led,w
  8880  0F93  158A  241C  158A   	fcall	_LedPointSelect
  8881                           
  8882                           ;LED_B1.c: 83: if (command == 0) {
  8883  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  8884  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  8885  0F98  08D1               	movf	setLED@command,f
  8886  0F99  1D03               	skipz
  8887  0F9A  2FA8               	goto	l4508
  8888                           
  8889                           ;LED_B1.c: 85: if (led == 1) {
  8890  0F9B  0852               	movf	setLED@led,w
  8891  0F9C  3A01               	xorlw	1
  8892  0F9D  1D03               	skipz
  8893  0F9E  2FA0               	goto	l4500
  8894                           
  8895                           ;LED_B1.c: 89: RB4 = 1;
  8896  0F9F  1606               	bsf	6,4	;volatile
  8897  0FA0                     l4500:	
  8898                           
  8899                           ;LED_B1.c: 91: }
  8900                           ;LED_B1.c: 94: if (led == 2) {
  8901  0FA0  0852               	movf	setLED@led,w
  8902  0FA1  3A02               	xorlw	2
  8903  0FA2  1903               	btfsc	3,2
  8904                           
  8905                           ;LED_B1.c: 98: RB5 = 1;
  8906  0FA3  1686               	bsf	6,5	;volatile
  8907                           
  8908                           ;LED_B1.c: 100: }
  8909                           ;LED_B1.c: 112: if (led == 99) {
  8910  0FA4  0852               	movf	setLED@led,w
  8911  0FA5  3A63               	xorlw	99
  8912  0FA6  1903               	btfsc	3,2
  8913                           
  8914                           ;LED_B1.c: 116: RB3 = 1;
  8915  0FA7  1586               	bsf	6,3	;volatile
  8916  0FA8                     l4508:	
  8917                           
  8918                           ;LED_B1.c: 118: }
  8919                           ;LED_B1.c: 120: }
  8920                           ;LED_B1.c: 121: if (command == 1) {
  8921  0FA8  0851               	movf	setLED@command,w
  8922  0FA9  3A01               	xorlw	1
  8923  0FAA  1D03               	skipz
  8924  0FAB  2FB9               	goto	l4522
  8925                           
  8926                           ;LED_B1.c: 123: if (led == 1) {
  8927  0FAC  0852               	movf	setLED@led,w
  8928  0FAD  3A01               	xorlw	1
  8929  0FAE  1D03               	skipz
  8930  0FAF  2FB1               	goto	l4514
  8931                           
  8932                           ;LED_B1.c: 127: RB4 = 0;
  8933  0FB0  1206               	bcf	6,4	;volatile
  8934  0FB1                     l4514:	
  8935                           
  8936                           ;LED_B1.c: 129: }
  8937                           ;LED_B1.c: 132: if (led == 2) {
  8938  0FB1  0852               	movf	setLED@led,w
  8939  0FB2  3A02               	xorlw	2
  8940  0FB3  1903               	btfsc	3,2
  8941                           
  8942                           ;LED_B1.c: 136: RB5 = 0;
  8943  0FB4  1286               	bcf	6,5	;volatile
  8944                           
  8945                           ;LED_B1.c: 138: }
  8946                           ;LED_B1.c: 150: if (led == 99) {
  8947  0FB5  0852               	movf	setLED@led,w
  8948  0FB6  3A63               	xorlw	99
  8949  0FB7  1903               	btfsc	3,2
  8950                           
  8951                           ;LED_B1.c: 154: RB3 = 0;
  8952  0FB8  1186               	bcf	6,3	;volatile
  8953  0FB9                     l4522:	
  8954                           
  8955                           ;LED_B1.c: 156: }
  8956                           ;LED_B1.c: 158: }
  8957                           ;LED_B1.c: 159: if (command == 10) {
  8958  0FB9  0851               	movf	setLED@command,w
  8959  0FBA  3A0A               	xorlw	10
  8960  0FBB  1D03               	skipz
  8961  0FBC  2FD4               	goto	l4540
  8962                           
  8963                           ;LED_B1.c: 160: LED->GO = 0;
  8964  0FBD  0876               	movf	_LED,w
  8965  0FBE  0084               	movwf	4
  8966  0FBF  1383               	bcf	3,7	;select IRP bank0
  8967  0FC0  1080               	bcf	0,1
  8968                           
  8969                           ;LED_B1.c: 161: LED->Time = 0;
  8970  0FC1  0A76               	incf	_LED,w
  8971  0FC2  0084               	movwf	4
  8972  0FC3  0180               	clrf	0
  8973  0FC4  0A84               	incf	4,f
  8974  0FC5  0180               	clrf	0
  8975                           
  8976                           ;LED_B1.c: 163: if (led == 1) {
  8977  0FC6  0852               	movf	setLED@led,w
  8978  0FC7  3A01               	xorlw	1
  8979  0FC8  1D03               	skipz
  8980  0FC9  2FCC               	goto	l4532
  8981                           
  8982                           ;LED_B1.c: 167: RB4 = 1;
  8983  0FCA  1606               	bsf	6,4	;volatile
  8984                           
  8985                           ;LED_B1.c: 169: }
  8986  0FCB  2FD0               	goto	l4536
  8987  0FCC                     l4532:	
  8988                           
  8989                           ;LED_B1.c: 172: else if (led == 2) {
  8990  0FCC  0852               	movf	setLED@led,w
  8991  0FCD  3A02               	xorlw	2
  8992  0FCE  1903               	btfsc	3,2
  8993                           
  8994                           ;LED_B1.c: 176: RB5 = 1;
  8995  0FCF  1686               	bsf	6,5	;volatile
  8996  0FD0                     l4536:	
  8997                           
  8998                           ;LED_B1.c: 178: }
  8999                           ;LED_B1.c: 190: if (led == 99) {
  9000  0FD0  0852               	movf	setLED@led,w
  9001  0FD1  3A63               	xorlw	99
  9002  0FD2  1903               	btfsc	3,2
  9003                           
  9004                           ;LED_B1.c: 194: RB3 = 1;
  9005  0FD3  1586               	bsf	6,3	;volatile
  9006  0FD4                     l4540:	
  9007                           
  9008                           ;LED_B1.c: 196: }
  9009                           ;LED_B1.c: 198: }
  9010                           ;LED_B1.c: 199: if (command == 11) {
  9011  0FD4  0851               	movf	setLED@command,w
  9012  0FD5  3A0B               	xorlw	11
  9013  0FD6  1D03               	skipz
  9014  0FD7  2FDC               	goto	l4544
  9015                           
  9016                           ;LED_B1.c: 200: LED->GO = 1;
  9017  0FD8  0876               	movf	_LED,w
  9018  0FD9  0084               	movwf	4
  9019  0FDA  1383               	bcf	3,7	;select IRP bank0
  9020  0FDB  1480               	bsf	0,1
  9021  0FDC                     l4544:	
  9022                           
  9023                           ;LED_B1.c: 201: }
  9024                           ;LED_B1.c: 205: if (command == 111) {
  9025  0FDC  0851               	movf	setLED@command,w
  9026  0FDD  3A6F               	xorlw	111
  9027  0FDE  1D03               	skipz
  9028  0FDF  2FFA               	goto	l4570
  9029                           
  9030                           ;LED_B1.c: 206: PIRLED.Count = 0;
  9031  0FE0  01AB               	clrf	_PIRLED+1
  9032                           
  9033                           ;LED_B1.c: 207: PIRLED.Time = 0;
  9034  0FE1  01AC               	clrf	_PIRLED+2
  9035  0FE2  01AD               	clrf	_PIRLED+3
  9036                           
  9037                           ;LED_B1.c: 208: PIRLED.status = 0;
  9038  0FE3  122A               	bcf	_PIRLED,4
  9039                           
  9040                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9041  0FE4  142A               	bsf	_PIRLED,0
  9042                           
  9043                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9044  0FE5  10AA               	bcf	_PIRLED,1
  9045                           
  9046                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9047  0FE6  112A               	bcf	_PIRLED,2
  9048                           
  9049                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9050  0FE7  11AA               	bcf	_PIRLED,3
  9051                           
  9052                           ;LED_B1.c: 213: if (led == 1) {
  9053  0FE8  0852               	movf	setLED@led,w
  9054  0FE9  3A01               	xorlw	1
  9055  0FEA  1D03               	skipz
  9056  0FEB  2FEE               	goto	l4562
  9057                           
  9058                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9059  0FEC  14AA               	bsf	_PIRLED,1
  9060                           
  9061                           ;LED_B1.c: 215: } else if (led == 2) {
  9062  0FED  0008               	return
  9063  0FEE                     l4562:	
  9064  0FEE  0852               	movf	setLED@led,w
  9065  0FEF  3A02               	xorlw	2
  9066  0FF0  1D03               	skipz
  9067  0FF1  2FF4               	goto	l4566
  9068                           
  9069                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9070  0FF2  152A               	bsf	_PIRLED,2
  9071                           
  9072                           ;LED_B1.c: 217: } else if (led == 3) {
  9073  0FF3  0008               	return
  9074  0FF4                     l4566:	
  9075  0FF4  0852               	movf	setLED@led,w
  9076  0FF5  3A03               	xorlw	3
  9077  0FF6  1D03               	skipz
  9078  0FF7  0008               	return
  9079                           
  9080                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9081  0FF8  15AA               	bsf	_PIRLED,3
  9082                           
  9083                           ;LED_B1.c: 219: }
  9084                           ;LED_B1.c: 220: } else if (command == 110) {
  9085  0FF9  0008               	return
  9086  0FFA                     l4570:	
  9087  0FFA  0851               	movf	setLED@command,w
  9088  0FFB  3A6E               	xorlw	110
  9089  0FFC  1D03               	skipz
  9090  0FFD  0008               	return
  9091                           
  9092                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9093  0FFE  102A               	bcf	_PIRLED,0
  9094  0FFF  0008               	return
  9095  1000                     __end_of_setLED:	
  9096                           
  9097                           	psect	text58
  9098  0C1C                     __ptext58:	
  9099 ;; *************** function _LedPointSelect *****************
  9100 ;; Defined at:
  9101 ;;		line 7 in file "../src/LED_B1.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  led             1    wreg     unsigned char 
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;  led             1    5[COMMON] unsigned char 
  9106 ;; Return value:  Size  Location     Type
  9107 ;;		None               void
  9108 ;; Registers used:
  9109 ;;		wreg
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9115 ;;      Params:         0       0       0       0
  9116 ;;      Locals:         1       0       0       0
  9117 ;;      Temps:          1       0       0       0
  9118 ;;      Totals:         2       0       0       0
  9119 ;;Total ram usage:        2 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    2
  9122 ;; This function calls:
  9123 ;;		Nothing
  9124 ;; This function is called by:
  9125 ;;		_setLED_Initialization
  9126 ;;		_setLED
  9127 ;;		_setLED_Main
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           
  9132                           ;psect for function _LedPointSelect
  9133  0C1C                     _LedPointSelect:	
  9134                           
  9135                           ;incstack = 0
  9136                           ; Regs used in _LedPointSelect: [wreg]
  9137                           ;LedPointSelect@led stored from wreg
  9138  0C1C  00F5               	movwf	LedPointSelect@led
  9139                           
  9140                           ;LED_B1.c: 9: if (led == 1) {
  9141  0C1D  0875               	movf	LedPointSelect@led,w
  9142  0C1E  3A01               	xorlw	1
  9143  0C1F  1D03               	skipz
  9144  0C20  2C25               	goto	l268
  9145                           
  9146                           ;LED_B1.c: 10: LED = &VarLED1;
  9147  0C21  3049               	movlw	_VarLED1& (0+255)
  9148  0C22  00F4               	movwf	??_LedPointSelect
  9149  0C23  0874               	movf	??_LedPointSelect,w
  9150  0C24  00F6               	movwf	_LED
  9151  0C25                     l268:	
  9152                           
  9153                           ;LED_B1.c: 11: }
  9154                           ;LED_B1.c: 14: if (led == 2) {
  9155  0C25  0875               	movf	LedPointSelect@led,w
  9156  0C26  3A02               	xorlw	2
  9157  0C27  1D03               	skipz
  9158  0C28  2C2D               	goto	l269
  9159                           
  9160                           ;LED_B1.c: 15: LED = &VarLED2;
  9161  0C29  304D               	movlw	_VarLED2& (0+255)
  9162  0C2A  00F4               	movwf	??_LedPointSelect
  9163  0C2B  0874               	movf	??_LedPointSelect,w
  9164  0C2C  00F6               	movwf	_LED
  9165  0C2D                     l269:	
  9166                           
  9167                           ;LED_B1.c: 16: }
  9168                           ;LED_B1.c: 24: if (led == 99) {
  9169  0C2D  0875               	movf	LedPointSelect@led,w
  9170  0C2E  3A63               	xorlw	99
  9171  0C2F  1D03               	skipz
  9172  0C30  0008               	return
  9173                           
  9174                           ;LED_B1.c: 25: LED = &VarErrLED;
  9175  0C31  3045               	movlw	_VarErrLED& (0+255)
  9176  0C32  00F4               	movwf	??_LedPointSelect
  9177  0C33  0874               	movf	??_LedPointSelect,w
  9178  0C34  00F6               	movwf	_LED
  9179  0C35  0008               	return
  9180  0C36                     __end_of_LedPointSelect:	
  9181                           
  9182                           	psect	text59
  9183  0AE6                     __ptext59:	
  9184 ;; *************** function _getMain_All_LightsStatus *****************
  9185 ;; Defined at:
  9186 ;;		line 373 in file "../src/Main_B1.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;		None
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;  status          1    4[COMMON] unsigned char 
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  1    wreg      unsigned char 
  9193 ;; Registers used:
  9194 ;;		wreg, status,2
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9200 ;;      Params:         0       0       0       0
  9201 ;;      Locals:         1       0       0       0
  9202 ;;      Temps:          0       0       0       0
  9203 ;;      Totals:         1       0       0       0
  9204 ;;Total ram usage:        1 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    2
  9207 ;; This function calls:
  9208 ;;		Nothing
  9209 ;; This function is called by:
  9210 ;;		_Exception_Main
  9211 ;;		_Load_Main
  9212 ;;		_setTemp_Main
  9213 ;;		_Lights_Main
  9214 ;; This function uses a non-reentrant model
  9215 ;;
  9216                           
  9217                           
  9218                           ;psect for function _getMain_All_LightsStatus
  9219  0AE6                     _getMain_All_LightsStatus:	
  9220                           
  9221                           ;Main_B1.c: 374: char status = 0;
  9222                           
  9223                           ;incstack = 0
  9224                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9225  0AE6  01F4               	clrf	getMain_All_LightsStatus@status
  9226                           
  9227                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9228  0AE7  3000               	movlw	0
  9229  0AE8  1283               	bcf	3,5	;RP0=0, select bank0
  9230  0AE9  1303               	bcf	3,6	;RP1=0, select bank0
  9231  0AEA  1940               	btfsc	_Lights1,2
  9232  0AEB  3001               	movlw	1
  9233  0AEC  00F4               	movwf	getMain_All_LightsStatus@status
  9234                           
  9235                           ;Main_B1.c: 420: return status;
  9236  0AED  0874               	movf	getMain_All_LightsStatus@status,w
  9237  0AEE  0008               	return
  9238  0AEF                     __end_of_getMain_All_LightsStatus:	
  9239                           
  9240                           	psect	text60
  9241  0DAE                     __ptext60:	
  9242 ;; *************** function _getMain_All_Error_Status *****************
  9243 ;; Defined at:
  9244 ;;		line 424 in file "../src/Main_B1.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  command         1    wreg     unsigned char 
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;  command         1    4[BANK0 ] unsigned char 
  9249 ;;  status          1    5[BANK0 ] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  1    wreg      unsigned char 
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9259 ;;      Params:         0       0       0       0
  9260 ;;      Locals:         0       6       0       0
  9261 ;;      Temps:          1       0       0       0
  9262 ;;      Totals:         1       6       0       0
  9263 ;;Total ram usage:        7 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    2
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_Exception_Main
  9270 ;;		_Load_Main
  9271 ;;		_setTemp_Main
  9272 ;;		_PIR_Main
  9273 ;;		_setSYSC_Main
  9274 ;;		_Lights_Main
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _getMain_All_Error_Status
  9280  0DAE                     _getMain_All_Error_Status:	
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9284                           ;getMain_All_Error_Status@command stored from wreg
  9285  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9286  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9287  0DB0  00D5               	movwf	getMain_All_Error_Status@command
  9288                           
  9289                           ;Main_B1.c: 425: char status = 0;
  9290  0DB1  01D6               	clrf	getMain_All_Error_Status@status
  9291                           
  9292                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9293  0DB2  08D6               	movf	getMain_All_Error_Status@status,f
  9294  0DB3  1D03               	skipz
  9295  0DB4  2DBD               	goto	l3282
  9296  0DB5  0855               	movf	getMain_All_Error_Status@command,w
  9297  0DB6  3A01               	xorlw	1
  9298  0DB7  1903               	skipnz
  9299  0DB8  2DBD               	goto	l3282
  9300                           
  9301                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9302  0DB9  3000               	movlw	0
  9303  0DBA  18A0               	btfsc	_SYSC,1
  9304  0DBB  3001               	movlw	1
  9305  0DBC  00D6               	movwf	getMain_All_Error_Status@status
  9306  0DBD                     l3282:	
  9307                           
  9308                           ;Main_B1.c: 430: }
  9309                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9310  0DBD  08D6               	movf	getMain_All_Error_Status@status,f
  9311  0DBE  1D03               	skipz
  9312  0DBF  2DD1               	goto	l3292
  9313  0DC0  0855               	movf	getMain_All_Error_Status@command,w
  9314  0DC1  3A02               	xorlw	2
  9315  0DC2  1903               	skipnz
  9316  0DC3  2DD1               	goto	l3292
  9317                           
  9318                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9319  0DC4  18B9               	btfsc	_Temp,1
  9320  0DC5  2DC9               	goto	l3290
  9321  0DC6  01D1               	clrf	_getMain_All_Error_Status$2142
  9322  0DC7  01D2               	clrf	_getMain_All_Error_Status$2142+1
  9323  0DC8  2DCD               	goto	l613
  9324  0DC9                     l3290:	
  9325  0DC9  3002               	movlw	2
  9326  0DCA  00D1               	movwf	_getMain_All_Error_Status$2142
  9327  0DCB  3000               	movlw	0
  9328  0DCC  00D2               	movwf	_getMain_All_Error_Status$2142+1
  9329  0DCD                     l613:	
  9330  0DCD  0851               	movf	_getMain_All_Error_Status$2142,w
  9331  0DCE  00F4               	movwf	??_getMain_All_Error_Status
  9332  0DCF  0874               	movf	??_getMain_All_Error_Status,w
  9333  0DD0  00D6               	movwf	getMain_All_Error_Status@status
  9334  0DD1                     l3292:	
  9335                           
  9336                           ;Main_B1.c: 438: }
  9337                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9338  0DD1  08D6               	movf	getMain_All_Error_Status@status,f
  9339  0DD2  1D03               	skipz
  9340  0DD3  2DEA               	goto	l614
  9341  0DD4  0855               	movf	getMain_All_Error_Status@command,w
  9342  0DD5  3A03               	xorlw	3
  9343  0DD6  1903               	skipnz
  9344  0DD7  2DEA               	goto	l614
  9345                           
  9346                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9347  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
  9348  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
  9349  0DDA  1ACA               	btfsc	_Load^(0+128),5
  9350  0DDB  2DE1               	goto	l3300
  9351  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  9352  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  9353  0DDE  01D3               	clrf	_getMain_All_Error_Status$2143
  9354  0DDF  01D4               	clrf	_getMain_All_Error_Status$2143+1
  9355  0DE0  2DE6               	goto	l618
  9356  0DE1                     l3300:	
  9357  0DE1  3003               	movlw	3
  9358  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
  9359  0DE3  00D3               	movwf	_getMain_All_Error_Status$2143
  9360  0DE4  3000               	movlw	0
  9361  0DE5  00D4               	movwf	_getMain_All_Error_Status$2143+1
  9362  0DE6                     l618:	
  9363  0DE6  0853               	movf	_getMain_All_Error_Status$2143,w
  9364  0DE7  00F4               	movwf	??_getMain_All_Error_Status
  9365  0DE8  0874               	movf	??_getMain_All_Error_Status,w
  9366  0DE9  00D6               	movwf	getMain_All_Error_Status@status
  9367  0DEA                     l614:	
  9368                           
  9369                           ;Main_B1.c: 445: }
  9370                           ;Main_B1.c: 455: return status;
  9371  0DEA  0856               	movf	getMain_All_Error_Status@status,w
  9372  0DEB  0008               	return
  9373  0DEC                     __end_of_getMain_All_Error_Status:	
  9374                           
  9375                           	psect	text61
  9376  0ADD                     __ptext61:	
  9377 ;; *************** function _getAll_Lights_Line *****************
  9378 ;; Defined at:
  9379 ;;		line 310 in file "../src/TriacRelay_B1.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  line            1    4[COMMON] unsigned char 
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      unsigned char 
  9386 ;; Registers used:
  9387 ;;		wreg, status,2
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9393 ;;      Params:         0       0       0       0
  9394 ;;      Locals:         1       0       0       0
  9395 ;;      Temps:          0       0       0       0
  9396 ;;      Totals:         1       0       0       0
  9397 ;;Total ram usage:        1 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    2
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_Exception_Main
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           
  9408                           ;psect for function _getAll_Lights_Line
  9409  0ADD                     _getAll_Lights_Line:	
  9410                           
  9411                           ;TriacRelay_B1.c: 311: char line = 0;
  9412                           
  9413                           ;incstack = 0
  9414                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9415  0ADD  01F4               	clrf	getAll_Lights_Line@line
  9416                           
  9417                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
  9418  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  9419  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  9420  0AE0  1C41               	btfss	_Lights1+1,0
  9421  0AE1  2AE4               	goto	l3558
  9422                           
  9423                           ;TriacRelay_B1.c: 314: line = 1;
  9424  0AE2  01F4               	clrf	getAll_Lights_Line@line
  9425  0AE3  0AF4               	incf	getAll_Lights_Line@line,f
  9426  0AE4                     l3558:	
  9427                           
  9428                           ;TriacRelay_B1.c: 315: }
  9429                           ;TriacRelay_B1.c: 327: return line;
  9430  0AE4  0874               	movf	getAll_Lights_Line@line,w
  9431  0AE5  0008               	return
  9432  0AE6                     __end_of_getAll_Lights_Line:	
  9433                           
  9434                           	psect	text62
  9435  0B1A                     __ptext62:	
  9436 ;; *************** function _DetectSYSC_Signal *****************
  9437 ;; Defined at:
  9438 ;;		line 50 in file "../src/SYSC_B1.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;		None
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;		None
  9443 ;; Return value:  Size  Location     Type
  9444 ;;		None               void
  9445 ;; Registers used:
  9446 ;;		status,2
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9452 ;;      Params:         0       0       0       0
  9453 ;;      Locals:         0       0       0       0
  9454 ;;      Temps:          0       0       0       0
  9455 ;;      Totals:         0       0       0       0
  9456 ;;Total ram usage:        0 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    2
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_main
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function _DetectSYSC_Signal
  9468  0B1A                     _DetectSYSC_Signal:	
  9469                           
  9470                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9471                           
  9472                           ;incstack = 0
  9473                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9474  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  9475  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  9476  0B1C  19A0               	btfsc	_SYSC,3
  9477  0B1D  2B24               	goto	l1146
  9478                           
  9479                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9480  0B1E  1E85               	btfss	5,5	;volatile
  9481  0B1F  0008               	return
  9482                           
  9483                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9484  0B20  15A0               	bsf	_SYSC,3
  9485                           
  9486                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9487  0B21  01A1               	clrf	_SYSC+1
  9488  0B22  01A2               	clrf	_SYSC+2
  9489                           
  9490                           ;SYSC_B1.c: 55: }
  9491                           ;SYSC_B1.c: 56: } else {
  9492  0B23  0008               	return
  9493  0B24                     l1146:	
  9494                           
  9495                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9496  0B24  1A85               	btfsc	5,5	;volatile
  9497  0B25  0008               	return
  9498                           
  9499                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9500  0B26  11A0               	bcf	_SYSC,3
  9501  0B27  0008               	return
  9502  0B28                     __end_of_DetectSYSC_Signal:	
  9503                           
  9504                           	psect	text63
  9505  0D7A                     __ptext63:	
  9506 ;; *************** function _CDS_Main *****************
  9507 ;; Defined at:
  9508 ;;		line 11 in file "../src/CDS_B1.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;		None
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;		None               void
  9515 ;; Registers used:
  9516 ;;		wreg, status,2, status,0
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9522 ;;      Params:         0       0       0       0
  9523 ;;      Locals:         0       0       0       0
  9524 ;;      Temps:          0       3       0       0
  9525 ;;      Totals:         0       3       0       0
  9526 ;;Total ram usage:        3 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    2
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_main
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _CDS_Main
  9538  0D7A                     _CDS_Main:	
  9539                           
  9540                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9541                           
  9542                           ;incstack = 0
  9543                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9544  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  9545  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  9546  0D7C  1C2E               	btfss	__CDS,0
  9547  0D7D  0008               	return
  9548                           
  9549                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9550  0D7E  18AE               	btfsc	__CDS,1
  9551  0D7F  2D8D               	goto	l123
  9552                           
  9553                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9554  0D80  19AE               	btfsc	__CDS,3
  9555  0D81  0008               	return
  9556                           
  9557                           ;CDS_B1.c: 16: _CDS.Time++;
  9558  0D82  3001               	movlw	1
  9559  0D83  00D1               	movwf	??_CDS_Main
  9560  0D84  0851               	movf	??_CDS_Main,w
  9561  0D85  07AF               	addwf	__CDS+1,f
  9562                           
  9563                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9564  0D86  3005               	movlw	5
  9565  0D87  022F               	subwf	__CDS+1,w
  9566  0D88  1C03               	skipc
  9567  0D89  0008               	return
  9568                           
  9569                           ;CDS_B1.c: 18: {
  9570                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9571  0D8A  01AF               	clrf	__CDS+1
  9572                           
  9573                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9574  0D8B  15AE               	bsf	__CDS,3
  9575                           
  9576                           ;CDS_B1.c: 21: }
  9577                           ;CDS_B1.c: 22: }
  9578                           ;CDS_B1.c: 23: } else {
  9579  0D8C  0008               	return
  9580  0D8D                     l123:	
  9581                           
  9582                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9583  0D8D  1CAE               	btfss	__CDS,1
  9584  0D8E  0008               	return
  9585                           
  9586                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9587  0D8F  10AE               	bcf	__CDS,1
  9588                           
  9589                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9590  0D90  1A2E               	btfsc	__CDS,4
  9591  0D91  2D98               	goto	l4898
  9592                           
  9593                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9594  0D92  0830               	movf	__CDS+2,w
  9595  0D93  0231               	subwf	__CDS+3,w
  9596  0D94  1C03               	skipc
  9597  0D95  0008               	return
  9598                           
  9599                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9600  0D96  162E               	bsf	__CDS,4
  9601                           
  9602                           ;CDS_B1.c: 29: }
  9603                           ;CDS_B1.c: 30: } else {
  9604  0D97  0008               	return
  9605  0D98                     l4898:	
  9606                           
  9607                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9608  0D98  0830               	movf	__CDS+2,w
  9609  0D99  3E9C               	addlw	156
  9610  0D9A  00D1               	movwf	??_CDS_Main
  9611  0D9B  30FF               	movlw	255
  9612  0D9C  1803               	skipnc
  9613  0D9D  3000               	movlw	0
  9614  0D9E  00D2               	movwf	??_CDS_Main+1
  9615  0D9F  0852               	movf	??_CDS_Main+1,w
  9616  0DA0  3A80               	xorlw	128
  9617  0DA1  00D3               	movwf	??_CDS_Main+2
  9618  0DA2  3080               	movlw	128
  9619  0DA3  0253               	subwf	??_CDS_Main+2,w
  9620  0DA4  1D03               	skipz
  9621  0DA5  2DA8               	goto	u5945
  9622  0DA6  0831               	movf	__CDS+3,w
  9623  0DA7  0251               	subwf	??_CDS_Main,w
  9624  0DA8                     u5945:	
  9625  0DA8  1C03               	skipc
  9626  0DA9  0008               	return
  9627                           
  9628                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9629  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  9630  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  9631  0DAC  122E               	bcf	__CDS,4
  9632  0DAD  0008               	return
  9633  0DAE                     __end_of_CDS_Main:	
  9634                           
  9635                           	psect	text64
  9636  0A9C                     __ptext64:	
  9637 ;; *************** function _CDS_Initialization *****************
  9638 ;; Defined at:
  9639 ;;		line 7 in file "../src/CDS_B1.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;		None
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;		None
  9644 ;; Return value:  Size  Location     Type
  9645 ;;		None               void
  9646 ;; Registers used:
  9647 ;;		None
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9653 ;;      Params:         0       0       0       0
  9654 ;;      Locals:         0       0       0       0
  9655 ;;      Temps:          0       0       0       0
  9656 ;;      Totals:         0       0       0       0
  9657 ;;Total ram usage:        0 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    2
  9660 ;; This function calls:
  9661 ;;		Nothing
  9662 ;; This function is called by:
  9663 ;;		_main
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function _CDS_Initialization
  9669  0A9C                     _CDS_Initialization:	
  9670                           
  9671                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in _CDS_Initialization: []
  9675  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  9676  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  9677  0A9E  142E               	bsf	__CDS,0
  9678  0A9F  0008               	return
  9679  0AA0                     __end_of_CDS_Initialization:	
  9680                           
  9681                           	psect	text65
  9682  0BEC                     __ptext65:	
  9683 ;; *************** function _ISR *****************
  9684 ;; Defined at:
  9685 ;;		line 116 in file "../src/MCU_B1.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;		None               void
  9692 ;; Registers used:
  9693 ;;		wreg, status,2, status,0, pclath, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9699 ;;      Params:         0       0       0       0
  9700 ;;      Locals:         0       0       0       0
  9701 ;;      Temps:          4       0       0       0
  9702 ;;      Totals:         4       0       0       0
  9703 ;;Total ram usage:        4 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    1
  9706 ;; This function calls:
  9707 ;;		_TMR1_ISR
  9708 ;; This function is called by:
  9709 ;;		Interrupt level 1
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _ISR
  9715  0BEC                     _ISR:	
  9716                           
  9717                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9718  0BEC  1683               	bsf	3,5	;RP0=1, select bank1
  9719  0BED  1303               	bcf	3,6	;RP1=0, select bank1
  9720  0BEE  1C0C               	btfss	12,0	;volatile
  9721  0BEF  2BF7               	goto	i1l447
  9722  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  9723  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  9724  0BF2  1C0C               	btfss	12,0	;volatile
  9725  0BF3  2BF7               	goto	i1l447
  9726                           
  9727                           ;MCU_B1.c: 126: TMR1_ISR();
  9728  0BF4  158A  23A9  158A   	fcall	_TMR1_ISR
  9729  0BF7                     i1l447:	
  9730                           ;MCU_B1.c: 127: }
  9731                           ;MCU_B1.c: 148: return;
  9732                           
  9733  0BF7  0873               	movf	??_ISR+3,w
  9734  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  9735  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  9736  0BFA  00FF               	movwf	127
  9737  0BFB  0872               	movf	??_ISR+2,w
  9738  0BFC  008A               	movwf	10
  9739  0BFD  0871               	movf	??_ISR+1,w
  9740  0BFE  0084               	movwf	4
  9741  0BFF  0E70               	swapf	??_ISR^(0+-128),w
  9742  0C00  0083               	movwf	3
  9743  0C01  0EFE               	swapf	126,f
  9744  0C02  0E7E               	swapf	126,w
  9745  0C03  0009               	retfie
  9746  0C04                     __end_of_ISR:	
  9747                           
  9748                           	psect	intentry
  9749  0004                     __pintentry:	
  9750                           ;incstack = 0
  9751                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9752                           
  9753  0004                     interrupt_function:	
  9754  007E                     saved_w	set	btemp
  9755  0004  00FE               	movwf	btemp
  9756  0005  0E03               	swapf	3,w
  9757  0006  00F0               	movwf	??_ISR
  9758  0007  0804               	movf	4,w
  9759  0008  00F1               	movwf	??_ISR+1
  9760  0009  080A               	movf	10,w
  9761  000A  00F2               	movwf	??_ISR+2
  9762  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9763  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9764  000D  087F               	movf	btemp+1,w
  9765  000E  00F3               	movwf	??_ISR+3
  9766  000F  158A  2BEC         	ljmp	_ISR
  9767                           
  9768                           	psect	text66
  9769  0BA9                     __ptext66:	
  9770 ;; *************** function _TMR1_ISR *****************
  9771 ;; Defined at:
  9772 ;;		line 236 in file "../src/MCU_B1.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;		None
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;		None
  9777 ;; Return value:  Size  Location     Type
  9778 ;;		None               void
  9779 ;; Registers used:
  9780 ;;		wreg, status,2
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9786 ;;      Params:         0       0       0       0
  9787 ;;      Locals:         0       0       0       0
  9788 ;;      Temps:          0       0       0       0
  9789 ;;      Totals:         0       0       0       0
  9790 ;;Total ram usage:        0 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; This function calls:
  9793 ;;		Nothing
  9794 ;; This function is called by:
  9795 ;;		_ISR
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           
  9800                           ;psect for function _TMR1_ISR
  9801  0BA9                     _TMR1_ISR:	
  9802                           
  9803                           ;MCU_B1.c: 268: Timer1.Count++;
  9804                           
  9805                           ;incstack = 0
  9806                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9807  0BA9  3001               	movlw	1
  9808  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  9809  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  9810  0BAC  07B3               	addwf	_Timer1+1,f
  9811  0BAD  1803               	skipnc
  9812  0BAE  0AB4               	incf	_Timer1+2,f
  9813  0BAF  3000               	movlw	0
  9814  0BB0  07B4               	addwf	_Timer1+2,f
  9815                           
  9816                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
  9817  0BB1  30C8               	movlw	200
  9818  0BB2  0633               	xorwf	_Timer1+1,w
  9819  0BB3  0434               	iorwf	_Timer1+2,w
  9820  0BB4  1D03               	skipz
  9821  0BB5  2BB9               	goto	i1l3800
  9822                           
  9823                           ;MCU_B1.c: 270: Timer1.Count = 0;
  9824  0BB6  01B3               	clrf	_Timer1+1
  9825  0BB7  01B4               	clrf	_Timer1+2
  9826                           
  9827                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
  9828  0BB8  1432               	bsf	_Timer1,0
  9829  0BB9                     i1l3800:	
  9830                           
  9831                           ;MCU_B1.c: 272: }
  9832                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
  9833  0BB9  30FA               	movlw	250
  9834  0BBA  008F               	movwf	15	;volatile
  9835                           
  9836                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
  9837  0BBB  3038               	movlw	56
  9838  0BBC  008E               	movwf	14	;volatile
  9839                           
  9840                           ;MCU_B1.c: 276: TMR1IF = 0;
  9841  0BBD  100C               	bcf	12,0	;volatile
  9842  0BBE  0008               	return
  9843  0BBF                     __end_of_TMR1_ISR:	
  9844  007E                     btemp	set	126	;btemp
  9845  007E                     wtemp	set	126
  9846  007E                     wtemp0	set	126
  9847  0080                     wtemp1	set	128
  9848  0082                     wtemp2	set	130
  9849  0084                     wtemp3	set	132
  9850  0086                     wtemp4	set	134
  9851  0088                     wtemp5	set	136
  9852  007F                     wtemp6	set	127
  9853  007E                     ttemp	set	126
  9854  007E                     ttemp0	set	126
  9855  0081                     ttemp1	set	129
  9856  0084                     ttemp2	set	132
  9857  0087                     ttemp3	set	135
  9858  007F                     ttemp4	set	127
  9859  007E                     ltemp	set	126
  9860  007E                     ltemp0	set	126
  9861  0082                     ltemp1	set	130
  9862  0086                     ltemp2	set	134
  9863  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      72
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   25604
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     654
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2829
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1053
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     347
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0     347
                                              5 COMMON     1     1      0
                                              6 BANK0      5     5      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    4060
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4318
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    3023
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2760
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1031
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     907
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2416
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2416
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2531
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2531
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4426
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2376
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      98       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      98      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Mar 11 11:02:01 2015

                        __CFG_CP$ON 0000                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 0074                        ___awdiv@sign 0056  
                    setTemp_Main@AD 005B                                  fsr 0004  
               ___wmul@multiplicand 0053                                 l123 0D8D  
                               l268 0C25                                 l613 0DCD  
                               l269 0C2D                                 l614 0DEA  
                               l618 0DE6                                 l644 0609  
                               l741 0395                                 l725 0412  
                               l735 03EB                                 l727 0269  
                               l736 03E9                                 l728 0265  
                               l729 025F                                 l853 0729  
                               l935 0091                                 l927 0212  
                               l847 0783                                 l928 008B  
                               l937 00A4                                 l929 0059  
                               l858 077F                                 _GIE 005F  
                               _RB2 0032                                 _RA4 002C  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RB4 0034  
                               _RB5 0035                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0BEC                                 _PSA 040B  
                               _WDT 0035                   ??_setLights_SwOff 0076  
                               _Cmd 0037              getAll_Lights_Line@line 0074  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0ACD           __end_of_LightsPointSelect 0AF9  
                  _getLights_Status 0B61             __size_of_Lights_Control 0083  
                              ?_ISR 0070                          Load_Main@i 0060  
                              l1304 0CB6                                l1146 0B24  
                    _Load_Main$2405 005B                                l1427 0D31  
                              l3300 0DE1                                l5002 048D  
                              l5012 04A6                                l5102 02CB  
                              l3290 0DC9                                l3282 0DBD  
                              l5210 0CB7                                l3602 072B  
                              l3610 073F                                l5042 0538  
                              l5034 050C                                l5018 04C2  
                              l3292 0DD1                                l4500 0FA0  
                              l5028 04F0                                l5134 0366  
                              l5128 0356                                l5080 0268  
                              l5064 0249                                l5320 0170  
                              l5312 013F                                l5304 012B  
                              l3608 073C                                l5048 0546  
                              l4514 0FB1                                l4522 0FB9  
                              l5410 05DB                                l5146 03B2  
                              l5138 0387                                l3634 076F  
                              l4532 0FCC                                l4540 0FD4  
                              l4508 0FA8                                l4612 0BE4  
                              l5156 03CB                                l5340 01DC  
                              l5324 01A2                                l3660 0E43  
                              l3644 077E                                l3558 0AE4  
                              l5414 05ED                                l5406 05CF  
                              l4710 0F22                                l4702 0F0F  
                              l5326 01B1                                l5238 007B  
                              l4544 0FDC                                l4536 0FD0  
                              l5408 05AC                                l4624 06A5  
                              l5192 03FF                                l5096 028F  
                              l4720 0C95                                l4562 0FEE  
                              l4570 0FFA                                l5418 05FB  
                              l4706 0F1A                                l4642 06D0  
                              l4810 0D73                                l3666 0E5E  
                              l4660 0707                                l5292 00EA  
                              l5276 00C7                                l4724 0C9B  
                              l4566 0FF4                                l5382 0563  
                              l4750 07AE                                l4646 06E3  
                              l4638 06C9                                l5358 020C  
                              l5294 00EB                                l4718 0C92  
                              l5454 0F44                                l5288 00DE  
                              l5394 0599                                l4770 07E8  
                              l4754 07B4                                l4842 0D27  
                              l5466 0F67                                l5396 0576  
                              l5388 0572                                l4764 07C6  
                              l4684 0EE3                                l4828 0659  
                              l4940 0EAB                                l3980 0C60  
                              l5398 05A5                                l4766 07D2  
                              l4758 07BA                                l4694 0EEB  
                              l4678 0ED8                                l4870 0E1A  
                              l4862 0DF6                                l4768 07DA  
                              l4696 0EF9                                l4864 0E04  
                              l4936 0EA3                                l4928 0E8F  
                              l4786 0D20                                l4874 0E25  
                              l4956 0EC7                                l4990 046C  
                              l4898 0D98                                l4994 0477  
                              l4986 0461                                l4998 0482  
             _myMain_Initialization 0A89                        __CFG_WDTE$ON 0000  
                              u3445 0E6A                                _PEIE 005E  
                              u5405 0EEE                                u5425 0EFA  
                              u5435 0F06                                u5275 0BA3  
                              u5445 0F10                                u6335 028D  
                              u5560 07CF                                u5720 0655  
                              u5705 0641                                u6345 02C9  
                              u6435 03AA                                u6355 0320  
                              u5580 07E5                                u5815 0DF9  
                              u5745 0678                                u5835 0E05  
                              u5845 0E11                                u5855 0E1B  
                              u5775 0D32                                u6815 0158  
                              u5945 0DA8                                u5785 0D39  
                              u6835 0194                                u6855 01C1  
                              u6785 0109                                u6970 05A2  
                              u6795 0121                                u6990 05D8  
                              u6975 057F                                u6895 01F9  
                              u6995 05B5                                __CDS 002E  
           ?_setSYSC_Initialization 0070                                _WPUB 0095  
                              _SYSC 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0039  
                              _main 0F29                                btemp 007E  
                   __end_of_WDT_Set 0B52                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0DAE  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0C6A                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 0A8D  
                ?_setLights_Trigger 0051                    ??_setPIRLED_Main 0053  
                             ?_main 0063                     __end_of___awdiv 0F29  
                             _ADRES 001E                     ___awdiv@divisor 0051  
                             _T1CON 0010                     __end_of___lwdiv 0E2C  
                             i1l447 0BF7                     ___awdiv@counter 0055  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0BA9                               _Light 0077  
               ??_setLights_Trigger 0052                    __end_of_PIR_Main 0230  
                  __end_of_TMR1_ISR 0BBF                    __end_of_TMR1_Set 0B44  
                             _getAD 0C85      __end_of_setSYSC_Initialization 0AA8  
    getLights_Allow_Condition@allow 0051             __end_of_getLight_LoadGO 0AB3  
                  __end_of_WDT_Main 0B83                       _LightsControl 0079  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0B03  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0B95                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 005E                   getPIR_AD@channel2 0059  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 0057  
                    _setLights_Main 0D4A                      _setLights_Line 0B28  
                   __initialization 0013                      _setLights_SwOn 0D00  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0C85  
                      __end_of_main 0F8F                    __end_of_Fosc_Set 0AAD  
    getMain_All_LightsStatus@status 0074                      _Exception_Main 0548  
                         ??_ADC_Set 0074                              ??_main 0067  
             PIR_Main@Enable_Switch 005E                 __end_of_Lights_Main 0CBF  
        __size_of_LightsPointSelect 000A            _getMain_All_LightsStatus 0AE6  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 0053                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0DAE                              i1l3800 0BB9  
                            _FVRCON 009D              getLights_Status@lights 0051  
                            _PIRLED 002A                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0C04  
              Exception_Main@i_2155 005D              getLights_Status@status 0052  
            __end_of_setLights_Main 0D7A              __end_of_setLights_Line 0B36  
            __end_of_setLights_SwOn 0D25        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0B61                              _Lights 0078  
                            _Timer1 0032         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 060A  
              Exception_Main@lights 0058                              ___wmul 0D25  
                         ??___awdiv 0074                           ??___lwdiv 0074  
              Exception_Main@status 005A                              _setLED 0F8F  
                            _myMain 0025                    ___awdiv@quotient 0057  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 005F  
       __end_of_Load_Initialization 0A90     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 0054  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0075  
                 __end_of_SYSC_Main 0A96                      _Lights_Control 060A  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0058                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                   ?_setLights_SwOn 0070                       ?_setSYSC_Main 0070  
                   _setLights_SwOff 0C36          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 0022  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0B72  
                     __end_of_getAD 0CA1                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0B0E                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0CA1            _setLights_Initialization 0ABF  
              _getMain_Lights_Count 0AF9                           ?_WDT_Main 0070  
                 __end_of_Load_Main 041A          __end_of_set_TimeoutCleared 0ABF  
               ?_LED_Initialization 0070              __end_of_Lights_Control 068D  
                           ??_getAD 0075                 _Temp_Initialization 0A96  
                        ??_CDS_Main 0051                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0009                   __end_of_Temp_Main 0A9C  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
                    ??_setSYSC_Main 0075                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                          __pmaintext 0F29  
        ?_getLights_Allow_Condition 0070                ?_Temp_Initialization 0070  
              PIR_Main@LightsStatus 0062                             ?___wmul 0051  
                        ??_PIR_Main 0057                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 007F  
                        _getLoad_AD 0E70                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0ACD  
                           ?_setLED 0051             setLights_Trigger@lights 0053  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0AC6  
                        _getTemp_AD 0CBF                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0D00                             _WDT_Set 0B44  
                     getPIR_AD@VRAD 0060                          ??_Fosc_Set 0074  
                 __end_of_getPIR_AD 0548             ??_setLoad_AH_AL_Restore 0074  
           __end_of_setLights_SwOff 0C50      _getLights_Allow_Condition$4248 0052  
                   __size_of_IO_Set 0018                          getCDS_AD@i 0054  
                        getCDS_AD@j 0055                             _Lights1 0040  
                           _VarLED1 0049                             _VarLED2 004D  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 0ECC                     __size_of___wmul 0025  
                           ___lwdiv 0DEC          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 005D                     __size_of_setLED 0071  
                           __ptext0 0000                             __ptext1 0C50  
                           __ptext2 0A89                             __ptext3 0CBF  
                           __ptext4 041A                             __ptext5 0E70  
                           __ptext6 0CDE                             __ptext7 0C85  
                           __ptext8 0AB9                             __ptext9 0B95  
                        getPIR_AD@i 0061                          getPIR_AD@j 005D  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0A90             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0C1C  
                   getTemp_AD@ADRES 0054                             clrloop0 07F9  
                 __end_of_setLights 070C                end_of_initialization 0023  
                     _getCDS_Status 0AD5                ?_SYSC_Initialization 0070  
             _setLED_Initialization 0B83                   setLights_SwOff@sw 0054  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0AA4                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0053             setTemp_Main@DangerValue 005A  
                _Mcu_Initialization 0B52                __end_of_my_MainTimer 0C6A  
              __end_of_setSYSC_Main 0E70              __end_of_LedPointSelect 0C36  
          Load_Main@ErrorCountValue 005D                 setPIRLED_Main@count 0054  
               ?_Mcu_Initialization 0070             __size_of_setPIRLED_Main 0071  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 0056                    ??_setLights_SwOn 0076  
                         _SYSC_Main 0A93     getMain_All_Error_Status@command 0055  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0057                      __end_of_IO_Set 0C1C  
        __end_of_CDS_Initialization 0AA0          ??_setLights_Initialization 0076  
                 __size_of_LED_Main 0003                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0D4A  
                 __size_of_PIR_Main 020A                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 0076                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 1000            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 0230                         __end_of_ISR 0C04  
        __end_of_PIR_Initialization 0B0E        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0AB9     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 0787  
               __size_of_getLoad_AD 005C                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0070                  _set_TimeoutCleared 0AB9  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0014  
                         _VarErrLED 0045                 __size_of_getTemp_AD 001F  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0A99  
                   setLights@lights 0055                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0059                     setLights@status 0053  
               Exception_Main@error 005F                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0AEF                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0059  
  __end_of_getMain_All_Error_Status 0DEC                         __pbssCOMMON 0076  
           Load_Main@Load_RunStatus 005E                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 0051  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0AE6  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 005C                           _getCDS_AD 0CDE  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0BD5  
                         _getPIR_AD 041A         __size_of_LED_Initialization 000C  
                   Exception_Main@i 005B                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0053                      Load_Main@error 005A  
            _setTemp_Initialization 0A88                       _PIR_Main$2874 005F  
                          ?___awdiv 0051               __size_of_my_MainTimer 001A  
                          ?___lwdiv 0051               __size_of_setSYSC_Main 0044  
          setLights_Trigger@command 0051     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0BD5      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0A8A                      __size_of_getAD 001C  
                  ___lwdiv@quotient 0056                      _setPIRLED_Main 0787  
                          _CDS_Main 0D7A                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0A99                   interrupt_function 0004  
                        ?_getCDS_AD 0051                      ___wmul@product 0074  
                          _LED_Main 0A8A                           _setLights 068D  
                         clear_ram0 07F8    __end_of_setLights_Initialization 0AC6  
                      _my_MainTimer 0C50                          ?_getPIR_AD 0059  
                      _setSYSC_Main 0E2C                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                PIR_Main@TriggerValue 0061  
                          _PIR_Main 0026                        ??_getLoad_AD 0051  
                          _TMR1_ISR 0BA9                        ??_getLoad_OK 0074  
              _getLight_Load_Status 0AB3                            _TMR1_Set 0B36  
                 ??_getLight_LoadGO 0074                        ??_getTemp_AD 0051  
                          _WDT_Main 0B72                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0051                      getPIR_AD@VRAD1 005F  
              __size_of_Lights_Main 001E               __size_of_setTemp_Main 007B  
                       ??_Load_Main 0058              __end_of_setPIRLED_Main 07F8  
    getMain_All_Error_Status@status 0056                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0AA8                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0ECC                  __end_of_getLoad_OK 0AD5  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 0053                  __end_of_getTemp_AD 0CDE  
            _setSYSC_Initialization 0AA4                   getLoad_AD@channel 0053  
                 _DetectSYSC_Signal 0B1A                            _SwDetect 0038  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2142 0051  
     _getMain_All_Error_Status$2143 0053                 _Load_Initialization 0A8D  
                ?_DetectSYSC_Signal 0070                           setLED@led 0052  
             ?_getLight_Load_Status 0070                        _setTemp_Main 070C  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0A9C               _Lights_Initialization 0AA0  
                 getTemp_AD@channel 0053                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 0051                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0055  
                          __ptext10 0B72                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0A99  
                          __ptext21 0AD5                            __ptext13 070C  
                          __ptext30 0AF9                            __ptext22 0B03  
                          __ptext14 0A96                            __ptext31 0AB3  
                          __ptext23 0B52                            __ptext15 0A88  
                          __ptext40 0B28                            __ptext32 0AAD  
                          __ptext24 0B44                            __ptext16 0A93  
                          __ptext41 0BD5                            __ptext33 0D25  
                          __ptext25 0B36                            __ptext17 0E2C  
                          __ptext50 0B83                            __ptext42 0ACD  
                          __ptext34 0DEC                            __ptext26 0C04  
                          __ptext18 0A90                            __ptext51 0548  
                          __ptext43 060A                            __ptext35 0A8D  
                          __ptext27 0AA8                            __ptext19 0AA4  
                          __ptext60 0DAE                            __ptext52 0D00  
                          __ptext44 0ECC                            __ptext36 0BBF  
                          __ptext28 0AC6                            __ptext61 0ADD  
                          __ptext53 0B61                            __ptext45 0AA0  
                          __ptext37 0CA1                            __ptext29 0230  
                          __ptext62 0B1A                            __ptext54 0C36  
                          __ptext46 0ABF                            __ptext38 0D4A  
                          __ptext63 0D7A                            __ptext55 0C6A  
                          __ptext47 0A8A                            __ptext39 068D  
                          __ptext64 0A9C                            __ptext56 0AEF  
                          __ptext48 0787                            __ptext65 0BEC  
                          __ptext57 0F8F                            __ptext49 0B0E  
                          __ptext66 0BA9                            __ptext58 0C1C  
                          __ptext59 0AE6           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0A93             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0052                       setLED@command 0051  
         __end_of_DetectSYSC_Signal 0B28                       __size_of_main 0066  
                       ??_getPIR_AD 005A                  _PIR_Initialization 0B03  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
          __size_of_setLights_SwOff 001A                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 0063  
                          main@argv 0065   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 005B                ??_PIR_Initialization 0074  
                          intlevel1 0000  __size_of_getLights_Allow_Condition 0017  
             setTemp_Main@SafeValue 0059                         ??_setLights 0054  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0ADD                     getLoad_AD@ADRES 0056  
            ??_getLight_Load_Status 0074                         getLoad_AD@i 0057  
                       getLoad_AD@j 0055                         getLoad_AD@k 0054  
           __size_of_setLights_Main 0030             __size_of_setLights_Line 000E  
           __size_of_setLights_SwOn 0025                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 00C2               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 0051         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0AEF                ??_getAll_Lights_Line 0074  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0B95          __end_of_LED_Initialization 0B1A  
             __end_of_getCDS_Status 0ADD      __end_of_setTemp_Initialization 0A89  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0AAD  
                 getCDS_AD@channel1 0056                   getCDS_AD@channel2 0051  
 __end_of_getLights_Allow_Condition 0BEC                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0BBF  
