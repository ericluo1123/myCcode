

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Feb 23 07:52:55 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text65,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	dabs	1,0x7E,2
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0096                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0186                     	;# 
   149  018C                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0096                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0186                     	;# 
   218  018C                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0096                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009F                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0186                     	;# 
   287  018C                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0096                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009F                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0186                     	;# 
   356  018C                     	;# 
   357  0000                     	;# 
   358  0001                     	;# 
   359  0002                     	;# 
   360  0003                     	;# 
   361  0004                     	;# 
   362  0005                     	;# 
   363  0006                     	;# 
   364  0007                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0089                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  008F                     	;# 
   400  0090                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0096                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009F                     	;# 
   415  0108                     	;# 
   416  0109                     	;# 
   417  010C                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0186                     	;# 
   425  018C                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0009                     	;# 
   435  000A                     	;# 
   436  000B                     	;# 
   437  000C                     	;# 
   438  000D                     	;# 
   439  000E                     	;# 
   440  000E                     	;# 
   441  000F                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001B                     	;# 
   456  001C                     	;# 
   457  001D                     	;# 
   458  001E                     	;# 
   459  001F                     	;# 
   460  0081                     	;# 
   461  0085                     	;# 
   462  0086                     	;# 
   463  0087                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0095                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0096                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009F                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0186                     	;# 
   494  018C                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0096                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009F                     	;# 
   553  0108                     	;# 
   554  0109                     	;# 
   555  010C                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0186                     	;# 
   563  018C                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  000E                     	;# 
   579  000F                     	;# 
   580  0010                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0014                     	;# 
   585  0015                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001D                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  0081                     	;# 
   599  0085                     	;# 
   600  0086                     	;# 
   601  0087                     	;# 
   602  0089                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  008F                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0096                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009F                     	;# 
   622  0108                     	;# 
   623  0109                     	;# 
   624  010C                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0186                     	;# 
   632  018C                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000E                     	;# 
   648  000F                     	;# 
   649  0010                     	;# 
   650  0011                     	;# 
   651  0012                     	;# 
   652  0013                     	;# 
   653  0014                     	;# 
   654  0015                     	;# 
   655  0015                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001B                     	;# 
   663  001C                     	;# 
   664  001D                     	;# 
   665  001E                     	;# 
   666  001F                     	;# 
   667  0081                     	;# 
   668  0085                     	;# 
   669  0086                     	;# 
   670  0087                     	;# 
   671  0089                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0093                     	;# 
   680  0093                     	;# 
   681  0094                     	;# 
   682  0095                     	;# 
   683  0095                     	;# 
   684  0096                     	;# 
   685  0096                     	;# 
   686  0098                     	;# 
   687  0099                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009F                     	;# 
   691  0108                     	;# 
   692  0109                     	;# 
   693  010C                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  0185                     	;# 
   700  0186                     	;# 
   701  018C                     	;# 
   702  0000                     	;# 
   703  0001                     	;# 
   704  0002                     	;# 
   705  0003                     	;# 
   706  0004                     	;# 
   707  0005                     	;# 
   708  0006                     	;# 
   709  0007                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0089                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0098                     	;# 
   756  0099                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009F                     	;# 
   760  0108                     	;# 
   761  0109                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  010F                     	;# 
   768  0185                     	;# 
   769  0186                     	;# 
   770  018C                     	;# 
   771  0000                     	;# 
   772  0001                     	;# 
   773  0002                     	;# 
   774  0003                     	;# 
   775  0004                     	;# 
   776  0005                     	;# 
   777  0006                     	;# 
   778  0007                     	;# 
   779  0009                     	;# 
   780  000A                     	;# 
   781  000B                     	;# 
   782  000C                     	;# 
   783  000D                     	;# 
   784  000E                     	;# 
   785  000E                     	;# 
   786  000F                     	;# 
   787  0010                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001D                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  0081                     	;# 
   806  0085                     	;# 
   807  0086                     	;# 
   808  0087                     	;# 
   809  0089                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  008F                     	;# 
   814  0090                     	;# 
   815  0091                     	;# 
   816  0092                     	;# 
   817  0093                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0096                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009F                     	;# 
   829  0108                     	;# 
   830  0109                     	;# 
   831  010C                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  010F                     	;# 
   837  0185                     	;# 
   838  0186                     	;# 
   839  018C                     	;# 
   840  0000                     	;# 
   841  0001                     	;# 
   842  0002                     	;# 
   843  0003                     	;# 
   844  0004                     	;# 
   845  0005                     	;# 
   846  0006                     	;# 
   847  0007                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  000E                     	;# 
   855  000F                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0015                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001B                     	;# 
   870  001C                     	;# 
   871  001D                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  0081                     	;# 
   875  0085                     	;# 
   876  0086                     	;# 
   877  0087                     	;# 
   878  0089                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  008F                     	;# 
   883  0090                     	;# 
   884  0091                     	;# 
   885  0092                     	;# 
   886  0093                     	;# 
   887  0093                     	;# 
   888  0094                     	;# 
   889  0095                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0096                     	;# 
   893  0098                     	;# 
   894  0099                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009F                     	;# 
   898  0108                     	;# 
   899  0109                     	;# 
   900  010C                     	;# 
   901  010C                     	;# 
   902  010D                     	;# 
   903  010D                     	;# 
   904  010E                     	;# 
   905  010F                     	;# 
   906  0185                     	;# 
   907  0186                     	;# 
   908  018C                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  000E                     	;# 
   924  000F                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0013                     	;# 
   929  0014                     	;# 
   930  0015                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0017                     	;# 
   934  0018                     	;# 
   935  0019                     	;# 
   936  001A                     	;# 
   937  001B                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  001D                     	;# 
   941  001E                     	;# 
   942  001F                     	;# 
   943  0081                     	;# 
   944  0085                     	;# 
   945  0086                     	;# 
   946  0087                     	;# 
   947  0089                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  008F                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0093                     	;# 
   956  0093                     	;# 
   957  0094                     	;# 
   958  0095                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0096                     	;# 
   962  0098                     	;# 
   963  0099                     	;# 
   964  009C                     	;# 
   965  009D                     	;# 
   966  009F                     	;# 
   967  0108                     	;# 
   968  0109                     	;# 
   969  010C                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  010F                     	;# 
   975  0185                     	;# 
   976  0186                     	;# 
   977  018C                     	;# 
   978  0000                     	;# 
   979  0001                     	;# 
   980  0002                     	;# 
   981  0003                     	;# 
   982  0004                     	;# 
   983  0005                     	;# 
   984  0006                     	;# 
   985  0007                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000D                     	;# 
   991  000E                     	;# 
   992  000E                     	;# 
   993  000F                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0013                     	;# 
   998  0014                     	;# 
   999  0015                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  001D                     	;# 
  1010  001E                     	;# 
  1011  001F                     	;# 
  1012  0081                     	;# 
  1013  0085                     	;# 
  1014  0086                     	;# 
  1015  0087                     	;# 
  1016  0089                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  008F                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0093                     	;# 
  1026  0094                     	;# 
  1027  0095                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0096                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009F                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0185                     	;# 
  1045  0186                     	;# 
  1046  018C                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  000E                     	;# 
  1062  000F                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0013                     	;# 
  1067  0014                     	;# 
  1068  0015                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  001D                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  0081                     	;# 
  1082  0085                     	;# 
  1083  0086                     	;# 
  1084  0087                     	;# 
  1085  0089                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  008F                     	;# 
  1090  0090                     	;# 
  1091  0091                     	;# 
  1092  0092                     	;# 
  1093  0093                     	;# 
  1094  0093                     	;# 
  1095  0094                     	;# 
  1096  0095                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0096                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009C                     	;# 
  1103  009D                     	;# 
  1104  009F                     	;# 
  1105  0108                     	;# 
  1106  0109                     	;# 
  1107  010C                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  010F                     	;# 
  1113  0185                     	;# 
  1114  0186                     	;# 
  1115  018C                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  000E                     	;# 
  1131  000F                     	;# 
  1132  0010                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0014                     	;# 
  1137  0015                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  001D                     	;# 
  1148  001E                     	;# 
  1149  001F                     	;# 
  1150  0081                     	;# 
  1151  0085                     	;# 
  1152  0086                     	;# 
  1153  0087                     	;# 
  1154  0089                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  008F                     	;# 
  1159  0090                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0093                     	;# 
  1163  0093                     	;# 
  1164  0094                     	;# 
  1165  0095                     	;# 
  1166  0095                     	;# 
  1167  0096                     	;# 
  1168  0096                     	;# 
  1169  0098                     	;# 
  1170  0099                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009F                     	;# 
  1174  0108                     	;# 
  1175  0109                     	;# 
  1176  010C                     	;# 
  1177  010C                     	;# 
  1178  010D                     	;# 
  1179  010D                     	;# 
  1180  010E                     	;# 
  1181  010F                     	;# 
  1182  0185                     	;# 
  1183  0186                     	;# 
  1184  018C                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  000E                     	;# 
  1200  000F                     	;# 
  1201  0010                     	;# 
  1202  0011                     	;# 
  1203  0012                     	;# 
  1204  0013                     	;# 
  1205  0014                     	;# 
  1206  0015                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  001D                     	;# 
  1217  001E                     	;# 
  1218  001F                     	;# 
  1219  0081                     	;# 
  1220  0085                     	;# 
  1221  0086                     	;# 
  1222  0087                     	;# 
  1223  0089                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  008F                     	;# 
  1228  0090                     	;# 
  1229  0091                     	;# 
  1230  0092                     	;# 
  1231  0093                     	;# 
  1232  0093                     	;# 
  1233  0094                     	;# 
  1234  0095                     	;# 
  1235  0095                     	;# 
  1236  0096                     	;# 
  1237  0096                     	;# 
  1238  0098                     	;# 
  1239  0099                     	;# 
  1240  009C                     	;# 
  1241  009D                     	;# 
  1242  009F                     	;# 
  1243  0108                     	;# 
  1244  0109                     	;# 
  1245  010C                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010F                     	;# 
  1251  0185                     	;# 
  1252  0186                     	;# 
  1253  018C                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  000E                     	;# 
  1269  000F                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0015                     	;# 
  1276  0015                     	;# 
  1277  0016                     	;# 
  1278  0017                     	;# 
  1279  0018                     	;# 
  1280  0019                     	;# 
  1281  001A                     	;# 
  1282  001B                     	;# 
  1283  001B                     	;# 
  1284  001C                     	;# 
  1285  001D                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  0081                     	;# 
  1289  0085                     	;# 
  1290  0086                     	;# 
  1291  0087                     	;# 
  1292  0089                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  008F                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0096                     	;# 
  1307  0098                     	;# 
  1308  0099                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009F                     	;# 
  1312  0108                     	;# 
  1313  0109                     	;# 
  1314  010C                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  010F                     	;# 
  1320  0185                     	;# 
  1321  0186                     	;# 
  1322  018C                     	;# 
  1323  001F                     _ADCON0	set	31
  1324  001E                     _ADRES	set	30
  1325  0005                     _PORTA	set	5
  1326  0006                     _PORTB	set	6
  1327  0007                     _PORTC	set	7
  1328  0010                     _T1CON	set	16
  1329  000F                     _TMR1H	set	15
  1330  000E                     _TMR1L	set	14
  1331  005F                     _GIE	set	95
  1332  00F9                     _GO_nDONE	set	249
  1333  005E                     _PEIE	set	94
  1334  002C                     _RA4	set	44
  1335  002D                     _RA5	set	45
  1336  0032                     _RB2	set	50
  1337  0033                     _RB3	set	51
  1338  0034                     _RB4	set	52
  1339  0035                     _RB5	set	53
  1340  0060                     _TMR1IF	set	96
  1341  009F                     _ADCON1	set	159
  1342  009D                     _FVRCON	set	157
  1343  0090                     _OSCCON	set	144
  1344  0085                     _TRISA	set	133
  1345  0086                     _TRISB	set	134
  1346  0087                     _TRISC	set	135
  1347  0095                     _WPUB	set	149
  1348  0408                     _PS0	set	1032
  1349  0409                     _PS1	set	1033
  1350  040A                     _PS2	set	1034
  1351  040B                     _PSA	set	1035
  1352  0460                     _TMR1IE	set	1120
  1353  0185                     _ANSELA	set	389
  1354  0186                     _ANSELB	set	390
  1355                           
  1356                           	psect	text0
  1357  0000                     __ptext0:	
  1358                           ; #config settings
  1359                           
  1360                           
  1361                           ;psect for function _TMR1_ISR
  1362  0000                     
  1363                           	psect	cinit
  1364  0013                     start_initialization:	
  1365  0013                     __initialization:	
  1366                           
  1367                           ; Clear objects allocated to COMMON
  1368  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1369  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1370  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1371  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1372                           
  1373                           ; Clear objects allocated to BANK0
  1374  0017  1383               	bcf	3,7	;select IRP bank0
  1375  0018  3020               	movlw	low __pbssBANK0
  1376  0019  0084               	movwf	4
  1377  001A  3051               	movlw	low (__pbssBANK0+49)
  1378  001B  158A  22D4  118A   	fcall	clear_ram0
  1379                           
  1380                           ; Clear objects allocated to BANK1
  1381  001E  30A0               	movlw	low __pbssBANK1
  1382  001F  0084               	movwf	4
  1383  0020  30E6               	movlw	low (__pbssBANK1+70)
  1384  0021  158A  22D4         	fcall	clear_ram0
  1385  0023                     end_of_initialization:	
  1386                           ;End of C runtime variable initialization code
  1387                           
  1388  0023                     __end_of__initialization:	
  1389  0023  0183               	clrf	3
  1390  0024  158A  2F29         	ljmp	_main	;jump to C main() function
  1391                           
  1392                           	psect	bssCOMMON
  1393  0076                     __pbssCOMMON:	
  1394  0076                     _LED:	
  1395  0076                     	ds	1
  1396  0077                     _Light:	
  1397  0077                     	ds	1
  1398  0078                     _Lights:	
  1399  0078                     	ds	1
  1400  0079                     _LightsControl:	
  1401  0079                     	ds	1
  1402                           
  1403                           	psect	bssBANK0
  1404  0020                     __pbssBANK0:	
  1405  0020                     _SYSC:	
  1406  0020                     	ds	5
  1407  0025                     _myMain:	
  1408  0025                     	ds	5
  1409  002A                     _PIRLED:	
  1410  002A                     	ds	4
  1411  002E                     __CDS:	
  1412  002E                     	ds	4
  1413  0032                     _Timer1:	
  1414  0032                     	ds	3
  1415  0035                     _WDT:	
  1416  0035                     	ds	2
  1417  0037                     _Cmd:	
  1418  0037                     	ds	1
  1419  0038                     _SwDetect:	
  1420  0038                     	ds	1
  1421  0039                     _Temp:	
  1422  0039                     	ds	7
  1423  0040                     _Lights1:	
  1424  0040                     	ds	5
  1425  0045                     _VarErrLED:	
  1426  0045                     	ds	4
  1427  0049                     _VarLED1:	
  1428  0049                     	ds	4
  1429  004D                     _VarLED2:	
  1430  004D                     	ds	4
  1431                           
  1432                           	psect	bssBANK1
  1433  00A0                     __pbssBANK1:	
  1434  00A0                     __PIR:	
  1435  00A0                     	ds	42
  1436  00CA                     _Load:	
  1437  00CA                     	ds	28
  1438                           
  1439                           	psect	clrtext
  1440  0AD4                     clear_ram0:	
  1441                           ;	Called with FSR containing the base address, and
  1442                           ;	W with the last address+1
  1443                           
  1444  0AD4  0064               	clrwdt	;clear the watchdog before getting into this loop
  1445  0AD5                     clrloop0:	
  1446  0AD5  0180               	clrf	0	;clear RAM location pointed to by FSR
  1447  0AD6  0A84               	incf	4,f	;increment pointer
  1448  0AD7  0604               	xorwf	4,w	;XOR with final address
  1449  0AD8  1903               	btfsc	3,2	;have we reached the end yet?
  1450  0AD9  3400               	retlw	0	;all done for this memory range, return
  1451  0ADA  0604               	xorwf	4,w	;XOR again to restore value
  1452  0ADB  2AD5               	goto	clrloop0	;do the next byte
  1453                           
  1454                           	psect	cstackCOMMON
  1455  0070                     __pcstackCOMMON:	
  1456  0070                     ?_setLED_Initialization:	
  1457  0070                     ?_setPIRLED_Main:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_Fosc_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_IO_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_TMR1_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_ADC_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_WDT_Set:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ??_TMR1_ISR:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_Timeout_Counter:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_set_TimeoutCleared:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_WDT_Clearing:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_myMain_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_SYSC_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Temp_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Load_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_Lights_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_PIR_Initialization:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_DetectSYSC_Signal:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getLoad_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_getTemp_AD:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_my_MainTimer:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_SYSC_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Temp_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Load_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_Lights_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_PIR_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_Exception_Main:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setLights_SwOn:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setLights_SwOff:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setLoad_AH_AL_Restore:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setTemp_Initialization:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setTemp_Main:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setSYSC_Initialization:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setSYSC_Main:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_setLights_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_setLights_Main:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_Lights_Control:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_setLights_Line:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_CDS_Initialization:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_CDS_Main:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LedPointSelect:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_LED_Initialization:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_LED_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_Mcu_Initialization:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ?_ISR:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ??_ISR:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_WDT_Main:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_LightsPointSelect:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_getLights_Status:	
  1602                           ; 0 bytes @ 0x0
  1603                           
  1604  0070                     ?_getAll_Lights_Line:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLight_LoadGO:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getLight_Load_Status:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getLights_Allow_Condition:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getCDS_Status:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_All_LightsStatus:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getMain_All_Error_Status:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_getMain_Lights_Count:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_getLoad_OK:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     getLights_Allow_Condition@lights:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634                           
  1635                           ; 1 bytes @ 0x0
  1636  0070                     	ds	4
  1637  0074                     ??_Fosc_Set:	
  1638  0074                     ??_IO_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_TMR1_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_ADC_Set:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_WDT_Set:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_Timeout_Counter:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_set_TimeoutCleared:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_WDT_Clearing:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_myMain_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_SYSC_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_Temp_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_PIR_Initialization:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_DetectSYSC_Signal:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_my_MainTimer:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getAll_Lights_Line:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_setLoad_AH_AL_Restore:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_getLight_LoadGO:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_getLight_Load_Status:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_setTemp_Initialization:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_setSYSC_Initialization:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_setLights_Line:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_CDS_Initialization:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_getCDS_Status:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_LedPointSelect:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_WDT_Main:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getMain_All_LightsStatus:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_getMain_All_Error_Status:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??_getMain_Lights_Count:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??_getLoad_OK:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ??_LightsPointSelect:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     ??___wmul:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0074                     ??___awdiv:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0074                     ??___lwdiv:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0074                     ?_getAD:	
  1735                           ; 0 bytes @ 0x4
  1736                           
  1737  0074                     getCDS_Status@status:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     getAD@adcon1:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getMain_All_LightsStatus@status:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     getMain_Lights_Count@count:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749  0074                     getLoad_OK@ok:	
  1750                           ; 1 bytes @ 0x4
  1751                           
  1752  0074                     setLights_Line@lights:	
  1753                           ; 1 bytes @ 0x4
  1754                           
  1755  0074                     getAll_Lights_Line@line:	
  1756                           ; 1 bytes @ 0x4
  1757                           
  1758  0074                     getLight_LoadGO@loadgo:	
  1759                           ; 1 bytes @ 0x4
  1760                           
  1761  0074                     getLight_Load_Status@loadstatus:	
  1762                           ; 1 bytes @ 0x4
  1763                           
  1764  0074                     ___wmul@product:	
  1765                           ; 1 bytes @ 0x4
  1766                           
  1767                           
  1768                           ; 2 bytes @ 0x4
  1769  0074                     	ds	1
  1770  0075                     ??_getAD:	
  1771  0075                     ??_SYSC_Main:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     ??_setTemp_Main:	
  1775                           ; 0 bytes @ 0x5
  1776                           
  1777  0075                     ??_setSYSC_Main:	
  1778                           ; 0 bytes @ 0x5
  1779                           
  1780  0075                     ??_getLights_Allow_Condition:	
  1781                           ; 0 bytes @ 0x5
  1782                           
  1783  0075                     ??_Mcu_Initialization:	
  1784                           ; 0 bytes @ 0x5
  1785                           
  1786  0075                     LedPointSelect@led:	
  1787                           ; 0 bytes @ 0x5
  1788                           
  1789  0075                     getAD@adcon0:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792  0075                     getMain_Lights_Count@status1:	
  1793                           ; 1 bytes @ 0x5
  1794                           
  1795  0075                     setLoad_AH_AL_Restore@i:	
  1796                           ; 1 bytes @ 0x5
  1797                           
  1798  0075                     LightsPointSelect@lights:	
  1799                           ; 1 bytes @ 0x5
  1800                           
  1801                           
  1802                           ; 1 bytes @ 0x5
  1803  0075                     	ds	1
  1804  0076                     ??_setLED_Initialization:	
  1805  0076                     ??_setLED:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_Load_Initialization:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_Lights_Initialization:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_Temp_Main:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_Lights_Main:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_getLights_Status:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823  0076                     ??_setLights_SwOn:	
  1824                           ; 0 bytes @ 0x6
  1825                           
  1826  0076                     ??_setLights_SwOff:	
  1827                           ; 0 bytes @ 0x6
  1828                           
  1829  0076                     ??_setLights_Initialization:	
  1830                           ; 0 bytes @ 0x6
  1831                           
  1832  0076                     ??_setLights_Main:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835  0076                     ??_LED_Initialization:	
  1836                           ; 0 bytes @ 0x6
  1837                           
  1838  0076                     ??_LED_Main:	
  1839                           ; 0 bytes @ 0x6
  1840                           
  1841                           
  1842                           	psect	cstackBANK0
  1843  0051                     __pcstackBANK0:	
  1844                           ; 0 bytes @ 0x6
  1845                           
  1846  0051                     ?_setLED:	
  1847  0051                     ??_getLoad_AD:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  0051                     ??_getTemp_AD:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  0051                     ??_CDS_Main:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  0051                     ?_getCDS_AD:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  0051                     ?_setLights_Trigger:	
  1860                           ; 0 bytes @ 0x0
  1861                           
  1862  0051                     ?___wmul:	
  1863                           ; 0 bytes @ 0x0
  1864                           
  1865  0051                     ?___awdiv:	
  1866                           ; 2 bytes @ 0x0
  1867                           
  1868  0051                     ?___lwdiv:	
  1869                           ; 2 bytes @ 0x0
  1870                           
  1871  0051                     getCDS_AD@channel2:	
  1872                           ; 2 bytes @ 0x0
  1873                           
  1874  0051                     setLED@command:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0051                     setLights_Initialization@lights:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  0051                     getLights_Status@lights:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  0051                     setLights_Trigger@command:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  0051                     getLights_Allow_Condition@allow:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  0051                     _getMain_All_Error_Status$2142:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892  0051                     ___wmul@multiplier:	
  1893                           ; 2 bytes @ 0x0
  1894                           
  1895  0051                     ___awdiv@divisor:	
  1896                           ; 2 bytes @ 0x0
  1897                           
  1898  0051                     ___lwdiv@divisor:	
  1899                           ; 2 bytes @ 0x0
  1900                           
  1901                           
  1902                           ; 2 bytes @ 0x0
  1903  0051                     	ds	1
  1904  0052                     ??_getCDS_AD:	
  1905  0052                     ??_setLights_Trigger:	
  1906                           ; 0 bytes @ 0x1
  1907                           
  1908  0052                     setLED@led:	
  1909                           ; 0 bytes @ 0x1
  1910                           
  1911  0052                     getLights_Status@status:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914  0052                     _getLights_Allow_Condition$4248:	
  1915                           ; 1 bytes @ 0x1
  1916                           
  1917                           
  1918                           ; 1 bytes @ 0x1
  1919  0052                     	ds	1
  1920  0053                     ??_setPIRLED_Main:	
  1921  0053                     ?_setLights:	
  1922                           ; 0 bytes @ 0x2
  1923                           
  1924  0053                     setLED_Initialization@led:	
  1925                           ; 0 bytes @ 0x2
  1926                           
  1927  0053                     getLoad_AD@channel:	
  1928                           ; 1 bytes @ 0x2
  1929                           
  1930  0053                     getTemp_AD@channel:	
  1931                           ; 1 bytes @ 0x2
  1932                           
  1933  0053                     setLights@status:	
  1934                           ; 1 bytes @ 0x2
  1935                           
  1936  0053                     setLights_Trigger@lights:	
  1937                           ; 1 bytes @ 0x2
  1938                           
  1939  0053                     _getMain_All_Error_Status$2143:	
  1940                           ; 1 bytes @ 0x2
  1941                           
  1942  0053                     ___wmul@multiplicand:	
  1943                           ; 2 bytes @ 0x2
  1944                           
  1945  0053                     ___awdiv@dividend:	
  1946                           ; 2 bytes @ 0x2
  1947                           
  1948  0053                     ___lwdiv@dividend:	
  1949                           ; 2 bytes @ 0x2
  1950                           
  1951                           
  1952                           ; 2 bytes @ 0x2
  1953  0053                     	ds	1
  1954  0054                     ??_setLights:	
  1955  0054                     getCDS_AD@i:	
  1956                           ; 0 bytes @ 0x3
  1957                           
  1958  0054                     setPIRLED_Main@count:	
  1959                           ; 1 bytes @ 0x3
  1960                           
  1961  0054                     getLoad_AD@k:	
  1962                           ; 1 bytes @ 0x3
  1963                           
  1964  0054                     getTemp_AD@ADRES:	
  1965                           ; 1 bytes @ 0x3
  1966                           
  1967  0054                     setLights_SwOn@sw:	
  1968                           ; 1 bytes @ 0x3
  1969                           
  1970  0054                     setLights_SwOff@sw:	
  1971                           ; 1 bytes @ 0x3
  1972                           
  1973                           
  1974                           ; 1 bytes @ 0x3
  1975  0054                     	ds	1
  1976  0055                     getCDS_AD@j:	
  1977  0055                     getMain_All_Error_Status@command:	
  1978                           ; 1 bytes @ 0x4
  1979                           
  1980  0055                     getLoad_AD@j:	
  1981                           ; 1 bytes @ 0x4
  1982                           
  1983  0055                     setLights@lights:	
  1984                           ; 1 bytes @ 0x4
  1985                           
  1986  0055                     ___awdiv@counter:	
  1987                           ; 1 bytes @ 0x4
  1988                           
  1989  0055                     ___lwdiv@counter:	
  1990                           ; 1 bytes @ 0x4
  1991                           
  1992                           
  1993                           ; 1 bytes @ 0x4
  1994  0055                     	ds	1
  1995  0056                     getCDS_AD@channel1:	
  1996  0056                     getMain_All_Error_Status@status:	
  1997                           ; 1 bytes @ 0x5
  1998                           
  1999  0056                     getLoad_AD@ADRES:	
  2000                           ; 1 bytes @ 0x5
  2001                           
  2002  0056                     setLights_Main@lights:	
  2003                           ; 1 bytes @ 0x5
  2004                           
  2005  0056                     ___awdiv@sign:	
  2006                           ; 1 bytes @ 0x5
  2007                           
  2008  0056                     ___lwdiv@quotient:	
  2009                           ; 1 bytes @ 0x5
  2010                           
  2011                           
  2012                           ; 2 bytes @ 0x5
  2013  0056                     	ds	1
  2014  0057                     ??_PIR_Main:	
  2015  0057                     ??_Exception_Main:	
  2016                           ; 0 bytes @ 0x6
  2017                           
  2018  0057                     getLoad_AD@i:	
  2019                           ; 0 bytes @ 0x6
  2020                           
  2021  0057                     setTemp_Main@error:	
  2022                           ; 1 bytes @ 0x6
  2023                           
  2024  0057                     ___awdiv@quotient:	
  2025                           ; 1 bytes @ 0x6
  2026                           
  2027                           
  2028                           ; 2 bytes @ 0x6
  2029  0057                     	ds	1
  2030  0058                     ??_Load_Main:	
  2031  0058                     Exception_Main@lights:	
  2032                           ; 0 bytes @ 0x7
  2033                           
  2034  0058                     setTemp_Main@TempGO:	
  2035                           ; 1 bytes @ 0x7
  2036                           
  2037                           
  2038                           ; 1 bytes @ 0x7
  2039  0058                     	ds	1
  2040  0059                     ?_getPIR_AD:	
  2041  0059                     ??_Lights_Control:	
  2042                           ; 0 bytes @ 0x8
  2043                           
  2044  0059                     Exception_Main@count:	
  2045                           ; 0 bytes @ 0x8
  2046                           
  2047  0059                     setTemp_Main@SafeValue:	
  2048                           ; 1 bytes @ 0x8
  2049                           
  2050  0059                     getPIR_AD@channel2:	
  2051                           ; 1 bytes @ 0x8
  2052                           
  2053                           
  2054                           ; 1 bytes @ 0x8
  2055  0059                     	ds	1
  2056  005A                     ??_getPIR_AD:	
  2057  005A                     Exception_Main@status:	
  2058                           ; 0 bytes @ 0x9
  2059                           
  2060  005A                     Load_Main@error:	
  2061                           ; 1 bytes @ 0x9
  2062                           
  2063  005A                     setTemp_Main@DangerValue:	
  2064                           ; 1 bytes @ 0x9
  2065                           
  2066                           
  2067                           ; 1 bytes @ 0x9
  2068  005A                     	ds	1
  2069  005B                     setTemp_Main@AD:	
  2070  005B                     Lights_Control@lights:	
  2071                           ; 1 bytes @ 0xA
  2072                           
  2073  005B                     Exception_Main@i:	
  2074                           ; 1 bytes @ 0xA
  2075                           
  2076  005B                     _Load_Main$2405:	
  2077                           ; 2 bytes @ 0xA
  2078                           
  2079                           
  2080                           ; 2 bytes @ 0xA
  2081  005B                     	ds	1
  2082  005C                     PIR_Main@error:	
  2083                           
  2084                           ; 1 bytes @ 0xB
  2085  005C                     	ds	1
  2086  005D                     Load_Main@ErrorCountValue:	
  2087  005D                     PIR_Main@cds:	
  2088                           ; 1 bytes @ 0xC
  2089                           
  2090  005D                     getPIR_AD@j:	
  2091                           ; 1 bytes @ 0xC
  2092                           
  2093  005D                     Exception_Main@i_2155:	
  2094                           ; 1 bytes @ 0xC
  2095                           
  2096                           
  2097                           ; 2 bytes @ 0xC
  2098  005D                     	ds	1
  2099  005E                     Load_Main@Load_RunStatus:	
  2100  005E                     PIR_Main@Enable_Switch:	
  2101                           ; 1 bytes @ 0xD
  2102                           
  2103  005E                     getPIR_AD@channel1:	
  2104                           ; 1 bytes @ 0xD
  2105                           
  2106                           
  2107                           ; 1 bytes @ 0xD
  2108  005E                     	ds	1
  2109  005F                     Exception_Main@error:	
  2110  005F                     Load_Main@LightsCount:	
  2111                           ; 1 bytes @ 0xE
  2112                           
  2113  005F                     getPIR_AD@VRAD1:	
  2114                           ; 1 bytes @ 0xE
  2115                           
  2116  005F                     _PIR_Main$2874:	
  2117                           ; 1 bytes @ 0xE
  2118                           
  2119                           
  2120                           ; 2 bytes @ 0xE
  2121  005F                     	ds	1
  2122  0060                     getPIR_AD@VRAD:	
  2123  0060                     Load_Main@i:	
  2124                           ; 1 bytes @ 0xF
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0xF
  2128  0060                     	ds	1
  2129  0061                     PIR_Main@TriggerValue:	
  2130  0061                     getPIR_AD@i:	
  2131                           ; 1 bytes @ 0x10
  2132                           
  2133                           
  2134                           ; 1 bytes @ 0x10
  2135  0061                     	ds	1
  2136  0062                     PIR_Main@LightsStatus:	
  2137                           
  2138                           ; 1 bytes @ 0x11
  2139  0062                     	ds	1
  2140  0063                     ?_main:	
  2141  0063                     main@argc:	
  2142                           ; 2 bytes @ 0x12
  2143                           
  2144                           
  2145                           ; 2 bytes @ 0x12
  2146  0063                     	ds	2
  2147  0065                     main@argv:	
  2148                           
  2149                           ; 2 bytes @ 0x14
  2150  0065                     	ds	2
  2151  0067                     ??_main:	
  2152                           
  2153                           ; 0 bytes @ 0x16
  2154  0067                     	ds	1
  2155                           
  2156                           	psect	maintext
  2157  0F29                     __pmaintext:	
  2158 ;;
  2159 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2160 ;;
  2161 ;; *************** function _main *****************
  2162 ;; Defined at:
  2163 ;;		line 7 in file "../src/Main_B1.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  argc            2   18[BANK0 ] int 
  2166 ;;  argv            2   20[BANK0 ] PTR PTR unsigned char 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  2   18[BANK0 ] int 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 17F/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2178 ;;      Params:         0       4       0       0
  2179 ;;      Locals:         0       0       0       0
  2180 ;;      Temps:          0       1       0       0
  2181 ;;      Totals:         0       5       0       0
  2182 ;;Total ram usage:        5 bytes
  2183 ;; Hardware stack levels required when called:    7
  2184 ;; This function calls:
  2185 ;;		_CDS_Initialization
  2186 ;;		_CDS_Main
  2187 ;;		_DetectSYSC_Signal
  2188 ;;		_Exception_Main
  2189 ;;		_LED_Initialization
  2190 ;;		_LED_Main
  2191 ;;		_Lights_Initialization
  2192 ;;		_Lights_Main
  2193 ;;		_Load_Initialization
  2194 ;;		_Load_Main
  2195 ;;		_Mcu_Initialization
  2196 ;;		_PIR_Initialization
  2197 ;;		_PIR_Main
  2198 ;;		_SYSC_Initialization
  2199 ;;		_SYSC_Main
  2200 ;;		_Temp_Initialization
  2201 ;;		_Temp_Main
  2202 ;;		_WDT_Main
  2203 ;;		_getCDS_AD
  2204 ;;		_getLoad_AD
  2205 ;;		_getPIR_AD
  2206 ;;		_getTemp_AD
  2207 ;;		_myMain_Initialization
  2208 ;;		_my_MainTimer
  2209 ;; This function is called by:
  2210 ;;		Startup code after reset
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           
  2215                           ;psect for function _main
  2216  0F29                     _main:	
  2217                           
  2218                           ;Main_B1.c: 8: myMain_Initialization();
  2219                           
  2220                           ;incstack = 0
  2221                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2222  0F29  158A  2280  158A   	fcall	_myMain_Initialization
  2223                           
  2224                           ;Main_B1.c: 9: Mcu_Initialization();
  2225  0F2C  158A  2346  158A   	fcall	_Mcu_Initialization
  2226                           
  2227                           ;Main_B1.c: 10: ;;
  2228                           ;Main_B1.c: 11: LED_Initialization();
  2229  0F2F  158A  2302  158A   	fcall	_LED_Initialization
  2230                           
  2231                           ;Main_B1.c: 12: ;;
  2232                           ;Main_B1.c: 14: SYSC_Initialization();
  2233  0F32  158A  2287  158A   	fcall	_SYSC_Initialization
  2234                           
  2235                           ;Main_B1.c: 15: Temp_Initialization();
  2236  0F35  158A  228D  158A   	fcall	_Temp_Initialization
  2237                           
  2238                           ;Main_B1.c: 16: Load_Initialization();
  2239  0F38  158A  2284  158A   	fcall	_Load_Initialization
  2240                           
  2241                           ;Main_B1.c: 17: ;;
  2242                           ;Main_B1.c: 18: ;;
  2243                           ;Main_B1.c: 20: ;;
  2244                           ;Main_B1.c: 21: Lights_Initialization();
  2245  0F3B  158A  2297  158A   	fcall	_Lights_Initialization
  2246                           
  2247                           ;Main_B1.c: 22: CDS_Initialization();
  2248  0F3E  158A  2293  158A   	fcall	_CDS_Initialization
  2249                           
  2250                           ;Main_B1.c: 23: PIR_Initialization();
  2251  0F41  118A  27F5  158A   	fcall	_PIR_Initialization
  2252  0F44                     l5460:	
  2253                           ;Main_B1.c: 24: ;;
  2254                           ;Main_B1.c: 25: ;;
  2255                           ;Main_B1.c: 26: ;;
  2256                           ;Main_B1.c: 27: ;;
  2257                           ;Main_B1.c: 28: ;;
  2258                           ;Main_B1.c: 30: while (1) {
  2259                           
  2260                           
  2261                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2262  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0F46  1C25               	btfss	_myMain,0
  2265  0F47  2F67               	goto	l5472
  2266                           
  2267                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2268  0F48  158A  230E  158A   	fcall	_DetectSYSC_Signal
  2269                           
  2270                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2271  0F4B  3001               	movlw	1
  2272  0F4C  158A  2670  158A   	fcall	_getLoad_AD
  2273                           
  2274                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2275  0F4F  3011               	movlw	17
  2276  0F50  158A  251F  158A   	fcall	_getTemp_AD
  2277                           
  2278                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2279  0F53  3031               	movlw	49
  2280  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2281  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2282  0F56  00E7               	movwf	??_main
  2283  0F57  0867               	movf	??_main,w
  2284  0F58  00D1               	movwf	getCDS_AD@channel2
  2285  0F59  3009               	movlw	9
  2286  0F5A  158A  24B3  158A   	fcall	_getCDS_AD
  2287                           
  2288                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2289  0F5D  300D               	movlw	13
  2290  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0F60  00E7               	movwf	??_main
  2293  0F61  0867               	movf	??_main,w
  2294  0F62  00D9               	movwf	getPIR_AD@channel2
  2295  0F63  3005               	movlw	5
  2296  0F64  118A  2417  158A   	fcall	_getPIR_AD
  2297  0F67                     l5472:	
  2298                           
  2299                           ;Main_B1.c: 57: }
  2300                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2301  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2302  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2303  0F69  1C32               	btfss	_Timer1,0
  2304  0F6A  2F44               	goto	l5460
  2305                           
  2306                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2307  0F6B  1032               	bcf	_Timer1,0
  2308                           
  2309                           ;Main_B1.c: 96: my_MainTimer();
  2310  0F6C  158A  2444  158A   	fcall	_my_MainTimer
  2311                           
  2312                           ;Main_B1.c: 97: WDT_Main();
  2313  0F6F  158A  2366  158A   	fcall	_WDT_Main
  2314                           
  2315                           ;Main_B1.c: 98: ;;
  2316                           ;Main_B1.c: 99: ;;
  2317                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2318  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2319  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2320  0F74  1C25               	btfss	_myMain,0
  2321  0F75  2F44               	goto	l5460
  2322                           
  2323                           ;Main_B1.c: 101: ;;
  2324                           ;Main_B1.c: 103: LED_Main();
  2325  0F76  158A  2281  158A   	fcall	_LED_Main
  2326                           
  2327                           ;Main_B1.c: 104: ;;
  2328                           ;Main_B1.c: 106: SYSC_Main();
  2329  0F79  158A  228A  158A   	fcall	_SYSC_Main
  2330                           
  2331                           ;Main_B1.c: 107: Temp_Main();
  2332  0F7C  158A  2290  158A   	fcall	_Temp_Main
  2333                           
  2334                           ;Main_B1.c: 108: Load_Main();
  2335  0F7F  118A  222D  158A   	fcall	_Load_Main
  2336                           
  2337                           ;Main_B1.c: 109: ;;
  2338                           ;Main_B1.c: 111: Lights_Main();
  2339  0F82  158A  2495  158A   	fcall	_Lights_Main
  2340                           
  2341                           ;Main_B1.c: 112: ;;
  2342                           ;Main_B1.c: 113: ;;
  2343                           ;Main_B1.c: 114: CDS_Main();
  2344  0F85  158A  257A  158A   	fcall	_CDS_Main
  2345                           
  2346                           ;Main_B1.c: 115: PIR_Main();
  2347  0F88  118A  2026  158A   	fcall	_PIR_Main
  2348                           
  2349                           ;Main_B1.c: 117: ;;
  2350                           ;Main_B1.c: 118: ;;
  2351                           ;Main_B1.c: 119: ;;
  2352                           ;Main_B1.c: 120: ;;
  2353                           ;Main_B1.c: 121: Exception_Main();
  2354  0F8B  118A  2545  158A   	fcall	_Exception_Main
  2355  0F8E  2F44               	goto	l5460
  2356  0F8F                     __end_of_main:	
  2357                           ;Main_B1.c: 128: }
  2358                           ;Main_B1.c: 129: }
  2359                           ;Main_B1.c: 163: }
  2360                           ;Main_B1.c: 164: return (0);
  2361                           ;	Return value of _main is never used
  2362                           
  2363                           
  2364                           	psect	text1
  2365  0C44                     __ptext1:	
  2366 ;; *************** function _my_MainTimer *****************
  2367 ;; Defined at:
  2368 ;;		line 185 in file "../src/Main_B1.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2382 ;;      Params:         0       0       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          1       0       0       0
  2385 ;;      Totals:         1       0       0       0
  2386 ;;Total ram usage:        1 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    2
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           
  2397                           ;psect for function _my_MainTimer
  2398  0C44                     _my_MainTimer:	
  2399                           
  2400                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2401                           
  2402                           ;incstack = 0
  2403                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2404  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  2406  0C46  1825               	btfsc	_myMain,0
  2407  0C47  2C54               	goto	l3984
  2408                           
  2409                           ;Main_B1.c: 188: myMain.PowerCount++;
  2410  0C48  3001               	movlw	1
  2411  0C49  00F4               	movwf	??_my_MainTimer
  2412  0C4A  0874               	movf	??_my_MainTimer,w
  2413  0C4B  07A6               	addwf	_myMain+1,f
  2414                           
  2415                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2416  0C4C  0826               	movf	_myMain+1,w
  2417  0C4D  3A4B               	xorlw	75
  2418  0C4E  1D03               	skipz
  2419  0C4F  0008               	return
  2420                           
  2421                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2422  0C50  01A6               	clrf	_myMain+1
  2423                           
  2424                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2425  0C51  1425               	bsf	_myMain,0
  2426                           
  2427                           ;Main_B1.c: 196: ;;
  2428                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2429  0C52  1625               	bsf	_myMain,4
  2430                           
  2431                           ;Main_B1.c: 206: }
  2432                           ;Main_B1.c: 207: } else {
  2433  0C53  0008               	return
  2434  0C54                     l3984:	
  2435                           
  2436                           ;Main_B1.c: 208: myMain.PowerCount++;
  2437  0C54  3001               	movlw	1
  2438  0C55  00F4               	movwf	??_my_MainTimer
  2439  0C56  0874               	movf	??_my_MainTimer,w
  2440  0C57  07A6               	addwf	_myMain+1,f
  2441                           
  2442                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2443  0C58  0826               	movf	_myMain+1,w
  2444  0C59  3A32               	xorlw	50
  2445  0C5A  1D03               	skipz
  2446  0C5B  0008               	return
  2447                           
  2448                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2449  0C5C  01A6               	clrf	_myMain+1
  2450  0C5D  0008               	return
  2451  0C5E                     __end_of_my_MainTimer:	
  2452                           
  2453                           	psect	text2
  2454  0A80                     __ptext2:	
  2455 ;; *************** function _myMain_Initialization *****************
  2456 ;; Defined at:
  2457 ;;		line 170 in file "../src/Main_B1.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		None
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2471 ;;      Params:         0       0       0       0
  2472 ;;      Locals:         0       0       0       0
  2473 ;;      Temps:          0       0       0       0
  2474 ;;      Totals:         0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    2
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _myMain_Initialization
  2487  0A80                     _myMain_Initialization:	
  2488                           
  2489                           ;incstack = 0
  2490                           ; Regs used in _myMain_Initialization: []
  2491  0A80  0008               	return
  2492  0A81                     __end_of_myMain_Initialization:	
  2493                           
  2494                           	psect	text3
  2495  0D1F                     __ptext3:	
  2496 ;; *************** function _getTemp_AD *****************
  2497 ;; Defined at:
  2498 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  channel         1    wreg     unsigned char 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  channel         1    2[BANK0 ] unsigned char 
  2503 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       2       0       0
  2515 ;;      Temps:          0       2       0       0
  2516 ;;      Totals:         0       4       0       0
  2517 ;;Total ram usage:        4 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		_getAD
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _getTemp_AD
  2529  0D1F                     _getTemp_AD:	
  2530                           
  2531                           ;incstack = 0
  2532                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2533                           ;getTemp_AD@channel stored from wreg
  2534  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  2535  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  2536  0D21  00D3               	movwf	getTemp_AD@channel
  2537                           
  2538                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2539  0D22  01D4               	clrf	getTemp_AD@ADRES
  2540                           
  2541                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2542  0D23  1D39               	btfss	_Temp,2
  2543  0D24  2D3D               	goto	l4976
  2544                           
  2545                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2546  0D25  3070               	movlw	112
  2547  0D26  00D1               	movwf	??_getTemp_AD
  2548  0D27  0851               	movf	??_getTemp_AD,w
  2549  0D28  00F4               	movwf	getAD@adcon1
  2550  0D29  0853               	movf	getTemp_AD@channel,w
  2551  0D2A  158A  2479  158A   	fcall	_getAD
  2552  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0D2F  00D2               	movwf	??_getTemp_AD+1
  2555  0D30  0852               	movf	??_getTemp_AD+1,w
  2556  0D31  00D4               	movwf	getTemp_AD@ADRES
  2557                           
  2558                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2559  0D32  0854               	movf	getTemp_AD@ADRES,w
  2560  0D33  1903               	btfsc	3,2
  2561  0D34  2D3D               	goto	l4976
  2562                           
  2563                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2564  0D35  0854               	movf	getTemp_AD@ADRES,w
  2565  0D36  023F               	subwf	_Temp+6,w
  2566  0D37  1803               	skipnc
  2567  0D38  2D3D               	goto	l4976
  2568                           
  2569                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2570  0D39  0854               	movf	getTemp_AD@ADRES,w
  2571  0D3A  00D1               	movwf	??_getTemp_AD
  2572  0D3B  0851               	movf	??_getTemp_AD,w
  2573  0D3C  00BF               	movwf	_Temp+6
  2574  0D3D                     l4976:	
  2575                           
  2576                           ;OverTemperature_B1.c: 32: }
  2577                           ;OverTemperature_B1.c: 33: }
  2578                           ;OverTemperature_B1.c: 34: }
  2579                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0x70);
  2580  0D3D  3070               	movlw	112
  2581  0D3E  00D1               	movwf	??_getTemp_AD
  2582  0D3F  0851               	movf	??_getTemp_AD,w
  2583  0D40  00F4               	movwf	getAD@adcon1
  2584  0D41  0853               	movf	getTemp_AD@channel,w
  2585  0D42  158A  2479         	fcall	_getAD
  2586  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  2587  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  2588  0D46  00D2               	movwf	??_getTemp_AD+1
  2589  0D47  0852               	movf	??_getTemp_AD+1,w
  2590  0D48  00D4               	movwf	getTemp_AD@ADRES
  2591  0D49  0008               	return
  2592  0D4A                     __end_of_getTemp_AD:	
  2593                           
  2594                           	psect	text4
  2595  0417                     __ptext4:	
  2596 ;; *************** function _getPIR_AD *****************
  2597 ;; Defined at:
  2598 ;;		line 342 in file "../src/PIR_B1.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  channel1        1    wreg     unsigned char 
  2601 ;;  channel2        1    8[BANK0 ] unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  channel1        1   13[BANK0 ] unsigned char 
  2604 ;;  i               1   16[BANK0 ] unsigned char 
  2605 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2606 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2607 ;;  j               1   12[BANK0 ] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2617 ;;      Params:         0       1       0       0
  2618 ;;      Locals:         0       5       0       0
  2619 ;;      Temps:          0       3       0       0
  2620 ;;      Totals:         0       9       0       0
  2621 ;;Total ram usage:        9 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    4
  2624 ;; This function calls:
  2625 ;;		___awdiv
  2626 ;;		___lwdiv
  2627 ;;		_getAD
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _getPIR_AD
  2635  0417                     _getPIR_AD:	
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2639                           ;getPIR_AD@channel1 stored from wreg
  2640  0417  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0418  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0419  00DE               	movwf	getPIR_AD@channel1
  2643                           
  2644                           ;PIR_B1.c: 343: char i = 0, j = 0;
  2645  041A  01E1               	clrf	getPIR_AD@i
  2646  041B  01DD               	clrf	getPIR_AD@j
  2647                           
  2648                           ;PIR_B1.c: 344: char VRAD = 0, VRAD1 = 0;
  2649  041C  01E0               	clrf	getPIR_AD@VRAD
  2650  041D  01DF               	clrf	getPIR_AD@VRAD1
  2651                           
  2652                           ;PIR_B1.c: 345: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2653  041E  1683               	bsf	3,5	;RP0=1, select bank1
  2654  041F  1303               	bcf	3,6	;RP1=0, select bank1
  2655  0420  1CA0               	btfss	__PIR^(0+128),1
  2656  0421  0008               	return
  2657  0422  1920               	btfsc	__PIR^(0+128),2
  2658  0423  0008               	return
  2659                           
  2660                           ;PIR_B1.c: 346: _PIR.GO = 1;
  2661  0424  1520               	bsf	__PIR^(0+128),2
  2662                           
  2663                           ;PIR_B1.c: 353: VRAD1 = getAD(channel1, 0x70);
  2664  0425  3070               	movlw	112
  2665  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0427  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0428  00DA               	movwf	??_getPIR_AD
  2668  0429  085A               	movf	??_getPIR_AD,w
  2669  042A  00F4               	movwf	getAD@adcon1
  2670  042B  085E               	movf	getPIR_AD@channel1,w
  2671  042C  158A  2479  118A   	fcall	_getAD
  2672  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2674  0431  00DB               	movwf	??_getPIR_AD+1
  2675  0432  085B               	movf	??_getPIR_AD+1,w
  2676  0433  00DF               	movwf	getPIR_AD@VRAD1
  2677                           
  2678                           ;PIR_B1.c: 354: VRAD = VRAD1 / 25;
  2679  0434  3019               	movlw	25
  2680  0435  00D1               	movwf	___awdiv@divisor
  2681  0436  3000               	movlw	0
  2682  0437  00D2               	movwf	___awdiv@divisor+1
  2683  0438  085F               	movf	getPIR_AD@VRAD1,w
  2684  0439  00DA               	movwf	??_getPIR_AD
  2685  043A  01DB               	clrf	??_getPIR_AD+1
  2686  043B  085A               	movf	??_getPIR_AD,w
  2687  043C  00D3               	movwf	___awdiv@dividend
  2688  043D  085B               	movf	??_getPIR_AD+1,w
  2689  043E  00D4               	movwf	___awdiv@dividend+1
  2690  043F  158A  26CC  118A   	fcall	___awdiv
  2691  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0444  0851               	movf	?___awdiv,w
  2694  0445  00DC               	movwf	??_getPIR_AD+2
  2695  0446  085C               	movf	??_getPIR_AD+2,w
  2696  0447  00E0               	movwf	getPIR_AD@VRAD
  2697                           
  2698                           ;PIR_B1.c: 355: _PIR.SignalAD = getAD(channel2, 0x70);
  2699  0448  3070               	movlw	112
  2700  0449  00DA               	movwf	??_getPIR_AD
  2701  044A  085A               	movf	??_getPIR_AD,w
  2702  044B  00F4               	movwf	getAD@adcon1
  2703  044C  0859               	movf	getPIR_AD@channel2,w
  2704  044D  158A  2479  118A   	fcall	_getAD
  2705  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2706  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2707  0452  00DB               	movwf	??_getPIR_AD+1
  2708  0453  085B               	movf	??_getPIR_AD+1,w
  2709  0454  1683               	bsf	3,5	;RP0=1, select bank1
  2710  0455  1303               	bcf	3,6	;RP1=0, select bank1
  2711  0456  00A1               	movwf	(__PIR^(0+128)+1)
  2712                           
  2713                           ;PIR_B1.c: 369: if (VRAD < 1) {
  2714  0457  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0458  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0459  08E0               	movf	getPIR_AD@VRAD,f
  2717  045A  1D03               	skipz
  2718  045B  2C5E               	goto	l4992
  2719                           
  2720                           ;PIR_B1.c: 370: _PIR.CloseTimeValue = 5;
  2721  045C  3005               	movlw	5
  2722  045D  2C64               	goto	L1
  2723  045E                     l4992:	
  2724                           ;PIR_B1.c: 371: } else if (VRAD < 3) {
  2725                           
  2726  045E  3003               	movlw	3
  2727  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2728  0460  0260               	subwf	getPIR_AD@VRAD,w
  2729  0461  1803               	skipnc
  2730  0462  2C69               	goto	l4996
  2731                           
  2732                           ;PIR_B1.c: 372: _PIR.CloseTimeValue = 60;
  2733  0463  303C               	movlw	60
  2734  0464                     L1:	
  2735  0464  1683               	bsf	3,5	;RP0=1, select bank1
  2736  0465  1303               	bcf	3,6	;RP1=0, select bank1
  2737  0466  00C3               	movwf	(__PIR^(0+128)+35)
  2738  0467  3000               	movlw	0
  2739  0468  2C8F               	goto	L5
  2740  0469                     l4996:	
  2741                           ;PIR_B1.c: 373: } else if (VRAD < 5) {
  2742                           
  2743  0469  3005               	movlw	5
  2744  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2745  046B  0260               	subwf	getPIR_AD@VRAD,w
  2746  046C  1803               	skipnc
  2747  046D  2C74               	goto	l5000
  2748                           
  2749                           ;PIR_B1.c: 374: _PIR.CloseTimeValue = 300;
  2750  046E  302C               	movlw	44
  2751  046F  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0470  1303               	bcf	3,6	;RP1=0, select bank1
  2753  0471  00C3               	movwf	(__PIR^(0+128)+35)
  2754  0472  3001               	movlw	1
  2755  0473  2C8F               	goto	L5
  2756  0474                     l5000:	
  2757                           ;PIR_B1.c: 375: } else if (VRAD < 7) {
  2758                           
  2759  0474  3007               	movlw	7
  2760  0475  1283               	bcf	3,5	;RP0=0, select bank0
  2761  0476  0260               	subwf	getPIR_AD@VRAD,w
  2762  0477  1803               	skipnc
  2763  0478  2C7F               	goto	l5004
  2764                           
  2765                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 600;
  2766  0479  3058               	movlw	88
  2767  047A  1683               	bsf	3,5	;RP0=1, select bank1
  2768  047B  1303               	bcf	3,6	;RP1=0, select bank1
  2769  047C  00C3               	movwf	(__PIR^(0+128)+35)
  2770  047D  3002               	movlw	2
  2771  047E  2C8F               	goto	L5
  2772  047F                     l5004:	
  2773                           ;PIR_B1.c: 377: } else if (VRAD < 9) {
  2774                           
  2775  047F  3009               	movlw	9
  2776  0480  1283               	bcf	3,5	;RP0=0, select bank0
  2777  0481  0260               	subwf	getPIR_AD@VRAD,w
  2778  0482  1803               	skipnc
  2779  0483  2C8A               	goto	l5008
  2780                           
  2781                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 900;
  2782  0484  3084               	movlw	132
  2783  0485  1683               	bsf	3,5	;RP0=1, select bank1
  2784  0486  1303               	bcf	3,6	;RP1=0, select bank1
  2785  0487  00C3               	movwf	(__PIR^(0+128)+35)
  2786  0488  3003               	movlw	3
  2787  0489  2C8F               	goto	L5
  2788  048A                     l5008:	
  2789                           ;PIR_B1.c: 379: } else {
  2790                           
  2791                           
  2792                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 1200;
  2793  048A  30B0               	movlw	176
  2794  048B  1683               	bsf	3,5	;RP0=1, select bank1
  2795  048C  1303               	bcf	3,6	;RP1=0, select bank1
  2796  048D  00C3               	movwf	(__PIR^(0+128)+35)
  2797  048E  3004               	movlw	4
  2798  048F                     L5:	
  2799  048F  00C4               	movwf	(__PIR^(0+128)+36)
  2800                           
  2801                           ;PIR_B1.c: 381: }
  2802                           ;PIR_B1.c: 390: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2803  0490  0821               	movf	(__PIR^(0+128)+1),w
  2804  0491  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0492  1303               	bcf	3,6	;RP1=0, select bank0
  2806  0493  00DA               	movwf	??_getPIR_AD
  2807  0494  1683               	bsf	3,5	;RP0=1, select bank1
  2808  0495  1303               	bcf	3,6	;RP1=0, select bank1
  2809  0496  0824               	movf	(__PIR^(0+128)+4),w
  2810  0497  3EA5               	addlw	(__PIR+5)& (0+255)
  2811  0498  0084               	movwf	4
  2812  0499  1283               	bcf	3,5	;RP0=0, select bank0
  2813  049A  1303               	bcf	3,6	;RP1=0, select bank0
  2814  049B  085A               	movf	??_getPIR_AD,w
  2815  049C  1383               	bcf	3,7	;select IRP bank1
  2816  049D  0080               	movwf	0
  2817                           
  2818                           ;PIR_B1.c: 391: for (i = 0; i < 10; i++) {
  2819  049E  01E1               	clrf	getPIR_AD@i
  2820  049F  300A               	movlw	10
  2821  04A0  0261               	subwf	getPIR_AD@i,w
  2822  04A1  1803               	btfsc	3,0
  2823  04A2  2CBF               	goto	l5024
  2824  04A3                     l5018:	
  2825                           
  2826                           ;PIR_B1.c: 392: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2827  04A3  0861               	movf	getPIR_AD@i,w
  2828  04A4  3EA5               	addlw	(__PIR+5)& (0+255)
  2829  04A5  0084               	movwf	4
  2830  04A6  0800               	movf	0,w
  2831  04A7  00DA               	movwf	??_getPIR_AD
  2832  04A8  01DB               	clrf	??_getPIR_AD+1
  2833  04A9  085A               	movf	??_getPIR_AD,w
  2834  04AA  1683               	bsf	3,5	;RP0=1, select bank1
  2835  04AB  1303               	bcf	3,6	;RP1=0, select bank1
  2836  04AC  07AF               	addwf	(__PIR^(0+128)+15),f
  2837  04AD  1803               	skipnc
  2838  04AE  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2839  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2840  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2841  04B1  085B               	movf	??_getPIR_AD+1,w
  2842  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  2843  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  2844  04B4  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2845  04B5  3001               	movlw	1
  2846  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  2847  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  2848  04B8  00DA               	movwf	??_getPIR_AD
  2849  04B9  085A               	movf	??_getPIR_AD,w
  2850  04BA  07E1               	addwf	getPIR_AD@i,f
  2851  04BB  300A               	movlw	10
  2852  04BC  0261               	subwf	getPIR_AD@i,w
  2853  04BD  1C03               	skipc
  2854  04BE  2CA3               	goto	l5018
  2855  04BF                     l5024:	
  2856                           
  2857                           ;PIR_B1.c: 393: }
  2858                           ;PIR_B1.c: 394: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2859  04BF  300A               	movlw	10
  2860  04C0  00D1               	movwf	___lwdiv@divisor
  2861  04C1  3000               	movlw	0
  2862  04C2  00D2               	movwf	___lwdiv@divisor+1
  2863  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  2864  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  2865  04C5  0830               	movf	((__PIR+1)^(0+128)+15),w
  2866  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2867  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2868  04C8  01D4               	clrf	___lwdiv@dividend+1
  2869  04C9  07D4               	addwf	___lwdiv@dividend+1,f
  2870  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  2871  04CB  1303               	bcf	3,6	;RP1=0, select bank1
  2872  04CC  082F               	movf	(__PIR^(0+128)+15),w
  2873  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  2874  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  2875  04CF  01D3               	clrf	___lwdiv@dividend
  2876  04D0  07D3               	addwf	___lwdiv@dividend,f
  2877  04D1  158A  25EC  118A   	fcall	___lwdiv
  2878  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  2879  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  2880  04D6  0851               	movf	?___lwdiv,w
  2881  04D7  00DA               	movwf	??_getPIR_AD
  2882  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  2883  04D9  1303               	bcf	3,6	;RP1=0, select bank1
  2884  04DA  0831               	movf	(__PIR^(0+128)+17),w
  2885  04DB  3EB2               	addlw	(__PIR+18)& (0+255)
  2886  04DC  0084               	movwf	4
  2887  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2888  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2889  04DF  085A               	movf	??_getPIR_AD,w
  2890  04E0  1383               	bcf	3,7	;select IRP bank1
  2891  04E1  0080               	movwf	0
  2892                           
  2893                           ;PIR_B1.c: 395: _PIR.TenAverageValue = 0;
  2894  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2895  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  2896  04E4  01AF               	clrf	(__PIR^(0+128)+15)
  2897  04E5  01B0               	clrf	((__PIR+1)^(0+128)+15)
  2898                           
  2899                           ;PIR_B1.c: 397: for (i = 0; i <= 9; i++) {
  2900  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  2901  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  2902  04E8  01E1               	clrf	getPIR_AD@i
  2903  04E9  300A               	movlw	10
  2904  04EA  0261               	subwf	getPIR_AD@i,w
  2905  04EB  1803               	btfsc	3,0
  2906  04EC  2D09               	goto	l5040
  2907  04ED                     l5034:	
  2908                           
  2909                           ;PIR_B1.c: 398: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2910  04ED  0861               	movf	getPIR_AD@i,w
  2911  04EE  3EB2               	addlw	(__PIR+18)& (0+255)
  2912  04EF  0084               	movwf	4
  2913  04F0  0800               	movf	0,w
  2914  04F1  00DA               	movwf	??_getPIR_AD
  2915  04F2  01DB               	clrf	??_getPIR_AD+1
  2916  04F3  085A               	movf	??_getPIR_AD,w
  2917  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  2918  04F5  1303               	bcf	3,6	;RP1=0, select bank1
  2919  04F6  07BC               	addwf	(__PIR^(0+128)+28),f
  2920  04F7  1803               	skipnc
  2921  04F8  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  2922  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2923  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2924  04FB  085B               	movf	??_getPIR_AD+1,w
  2925  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  2926  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  2927  04FE  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  2928  04FF  3001               	movlw	1
  2929  0500  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0501  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0502  00DA               	movwf	??_getPIR_AD
  2932  0503  085A               	movf	??_getPIR_AD,w
  2933  0504  07E1               	addwf	getPIR_AD@i,f
  2934  0505  300A               	movlw	10
  2935  0506  0261               	subwf	getPIR_AD@i,w
  2936  0507  1C03               	skipc
  2937  0508  2CED               	goto	l5034
  2938  0509                     l5040:	
  2939                           
  2940                           ;PIR_B1.c: 399: }
  2941                           ;PIR_B1.c: 400: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2942  0509  300A               	movlw	10
  2943  050A  00D1               	movwf	___lwdiv@divisor
  2944  050B  3000               	movlw	0
  2945  050C  00D2               	movwf	___lwdiv@divisor+1
  2946  050D  1683               	bsf	3,5	;RP0=1, select bank1
  2947  050E  1303               	bcf	3,6	;RP1=0, select bank1
  2948  050F  083D               	movf	((__PIR+1)^(0+128)+28),w
  2949  0510  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0511  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0512  01D4               	clrf	___lwdiv@dividend+1
  2952  0513  07D4               	addwf	___lwdiv@dividend+1,f
  2953  0514  1683               	bsf	3,5	;RP0=1, select bank1
  2954  0515  1303               	bcf	3,6	;RP1=0, select bank1
  2955  0516  083C               	movf	(__PIR^(0+128)+28),w
  2956  0517  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0518  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0519  01D3               	clrf	___lwdiv@dividend
  2959  051A  07D3               	addwf	___lwdiv@dividend,f
  2960  051B  158A  25EC  118A   	fcall	___lwdiv
  2961  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2962  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0520  0851               	movf	?___lwdiv,w
  2964  0521  00DA               	movwf	??_getPIR_AD
  2965  0522  085A               	movf	??_getPIR_AD,w
  2966  0523  1683               	bsf	3,5	;RP0=1, select bank1
  2967  0524  1303               	bcf	3,6	;RP1=0, select bank1
  2968  0525  00A3               	movwf	(__PIR^(0+128)+3)
  2969                           
  2970                           ;PIR_B1.c: 401: _PIR.HundredAverageValue = 0;
  2971  0526  01BC               	clrf	(__PIR^(0+128)+28)
  2972  0527  01BD               	clrf	((__PIR+1)^(0+128)+28)
  2973                           
  2974                           ;PIR_B1.c: 403: if (_PIR.TenCount < 10) {
  2975  0528  300A               	movlw	10
  2976  0529  0224               	subwf	(__PIR^(0+128)+4),w
  2977  052A  1803               	skipnc
  2978  052B  2D35               	goto	l5048
  2979                           
  2980                           ;PIR_B1.c: 404: _PIR.TenCount++;
  2981  052C  3001               	movlw	1
  2982  052D  1283               	bcf	3,5	;RP0=0, select bank0
  2983  052E  1303               	bcf	3,6	;RP1=0, select bank0
  2984  052F  00DA               	movwf	??_getPIR_AD
  2985  0530  085A               	movf	??_getPIR_AD,w
  2986  0531  1683               	bsf	3,5	;RP0=1, select bank1
  2987  0532  1303               	bcf	3,6	;RP1=0, select bank1
  2988  0533  07A4               	addwf	(__PIR^(0+128)+4),f
  2989                           
  2990                           ;PIR_B1.c: 405: } else {
  2991  0534  0008               	return
  2992  0535                     l5048:	
  2993                           
  2994                           ;PIR_B1.c: 406: _PIR.TenCount = 0;
  2995  0535  01A4               	clrf	(__PIR^(0+128)+4)
  2996                           
  2997                           ;PIR_B1.c: 407: if (_PIR.HundreCount < 10)
  2998  0536  300A               	movlw	10
  2999  0537  0231               	subwf	(__PIR^(0+128)+17),w
  3000  0538  1803               	skipnc
  3001  0539  2D43               	goto	l5054
  3002                           
  3003                           ;PIR_B1.c: 408: _PIR.HundreCount++;
  3004  053A  3001               	movlw	1
  3005  053B  1283               	bcf	3,5	;RP0=0, select bank0
  3006  053C  1303               	bcf	3,6	;RP1=0, select bank0
  3007  053D  00DA               	movwf	??_getPIR_AD
  3008  053E  085A               	movf	??_getPIR_AD,w
  3009  053F  1683               	bsf	3,5	;RP0=1, select bank1
  3010  0540  1303               	bcf	3,6	;RP1=0, select bank1
  3011  0541  07B1               	addwf	(__PIR^(0+128)+17),f
  3012  0542  0008               	return
  3013  0543                     l5054:	
  3014                           
  3015                           ;PIR_B1.c: 409: else
  3016                           ;PIR_B1.c: 410: _PIR.HundreCount = 0;
  3017  0543  01B1               	clrf	(__PIR^(0+128)+17)
  3018  0544  0008               	return
  3019  0545                     __end_of_getPIR_AD:	
  3020                           
  3021                           	psect	text5
  3022  0E70                     __ptext5:	
  3023 ;; *************** function _getLoad_AD *****************
  3024 ;; Defined at:
  3025 ;;		line 15 in file "../src/OverLoad_B1.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  channel         1    wreg     unsigned char 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  channel         1    2[BANK0 ] unsigned char 
  3030 ;;  i               1    6[BANK0 ] unsigned char 
  3031 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3032 ;;  j               1    4[BANK0 ] unsigned char 
  3033 ;;  k               1    3[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3043 ;;      Params:         0       0       0       0
  3044 ;;      Locals:         0       5       0       0
  3045 ;;      Temps:          0       2       0       0
  3046 ;;      Totals:         0       7       0       0
  3047 ;;Total ram usage:        7 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    4
  3050 ;; This function calls:
  3051 ;;		_getAD
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           
  3058                           ;psect for function _getLoad_AD
  3059  0E70                     _getLoad_AD:	
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3063                           ;getLoad_AD@channel stored from wreg
  3064  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0E72  00D3               	movwf	getLoad_AD@channel
  3067                           
  3068                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3069  0E73  01D7               	clrf	getLoad_AD@i
  3070  0E74  01D5               	clrf	getLoad_AD@j
  3071  0E75  01D4               	clrf	getLoad_AD@k
  3072                           
  3073                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3074  0E76  01D6               	clrf	getLoad_AD@ADRES
  3075                           
  3076                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3077  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3078  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3079  0E79  1E4A               	btfss	_Load^(0+128),4
  3080  0E7A  0008               	return
  3081                           
  3082                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3083  0E7B  3073               	movlw	115
  3084  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  3086  0E7E  00D1               	movwf	??_getLoad_AD
  3087  0E7F  0851               	movf	??_getLoad_AD,w
  3088  0E80  00F4               	movwf	getAD@adcon1
  3089  0E81  0853               	movf	getLoad_AD@channel,w
  3090  0E82  158A  2479  158A   	fcall	_getAD
  3091  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0E87  00D2               	movwf	??_getLoad_AD+1
  3094  0E88  0852               	movf	??_getLoad_AD+1,w
  3095  0E89  00D6               	movwf	getLoad_AD@ADRES
  3096                           
  3097                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3098  0E8A  01D7               	clrf	getLoad_AD@i
  3099  0E8B  3004               	movlw	4
  3100  0E8C  0257               	subwf	getLoad_AD@i,w
  3101  0E8D  1803               	btfsc	3,0
  3102  0E8E  2EAB               	goto	l4944
  3103  0E8F                     l4932:	
  3104                           
  3105                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3106  0E8F  0857               	movf	getLoad_AD@i,w
  3107  0E90  3ED4               	addlw	(_Load+10)& (0+255)
  3108  0E91  0084               	movwf	4
  3109  0E92  0856               	movf	getLoad_AD@ADRES,w
  3110  0E93  1383               	bcf	3,7	;select IRP bank1
  3111  0E94  0200               	subwf	0,w
  3112  0E95  1803               	skipnc
  3113  0E96  2EA3               	goto	l4940
  3114  0E97  08D5               	movf	getLoad_AD@j,f
  3115  0E98  1D03               	skipz
  3116  0E99  2EA3               	goto	l4940
  3117                           
  3118                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3119  0E9A  0856               	movf	getLoad_AD@ADRES,w
  3120  0E9B  00D1               	movwf	??_getLoad_AD
  3121  0E9C  0857               	movf	getLoad_AD@i,w
  3122  0E9D  3ED4               	addlw	(_Load+10)& (0+255)
  3123  0E9E  0084               	movwf	4
  3124  0E9F  0851               	movf	??_getLoad_AD,w
  3125  0EA0  0080               	movwf	0
  3126                           
  3127                           ;OverLoad_B1.c: 24: j = 1;
  3128  0EA1  01D5               	clrf	getLoad_AD@j
  3129  0EA2  0AD5               	incf	getLoad_AD@j,f
  3130  0EA3                     l4940:	
  3131  0EA3  3001               	movlw	1
  3132  0EA4  00D1               	movwf	??_getLoad_AD
  3133  0EA5  0851               	movf	??_getLoad_AD,w
  3134  0EA6  07D7               	addwf	getLoad_AD@i,f
  3135  0EA7  3004               	movlw	4
  3136  0EA8  0257               	subwf	getLoad_AD@i,w
  3137  0EA9  1C03               	skipc
  3138  0EAA  2E8F               	goto	l4932
  3139  0EAB                     l4944:	
  3140                           
  3141                           ;OverLoad_B1.c: 25: }
  3142                           ;OverLoad_B1.c: 26: }
  3143                           ;OverLoad_B1.c: 27: if (j == 0) {
  3144  0EAB  08D5               	movf	getLoad_AD@j,f
  3145  0EAC  1D03               	skipz
  3146  0EAD  0008               	return
  3147                           
  3148                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3149  0EAE  01D7               	clrf	getLoad_AD@i
  3150  0EAF                     L6:	
  3151  0EAF  3004               	movlw	4
  3152  0EB0  0257               	subwf	getLoad_AD@i,w
  3153  0EB1  1803               	btfsc	3,0
  3154  0EB2  0008               	return
  3155                           
  3156                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3157  0EB3  0857               	movf	getLoad_AD@i,w
  3158  0EB4  3ED9               	addlw	(_Load+15)& (0+255)
  3159  0EB5  0084               	movwf	4
  3160  0EB6  1383               	bcf	3,7	;select IRP bank1
  3161  0EB7  0800               	movf	0,w
  3162  0EB8  0256               	subwf	getLoad_AD@ADRES,w
  3163  0EB9  1803               	skipnc
  3164  0EBA  2EC7               	goto	l4960
  3165  0EBB  08D4               	movf	getLoad_AD@k,f
  3166  0EBC  1D03               	skipz
  3167  0EBD  2EC7               	goto	l4960
  3168                           
  3169                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3170  0EBE  0856               	movf	getLoad_AD@ADRES,w
  3171  0EBF  00D1               	movwf	??_getLoad_AD
  3172  0EC0  0857               	movf	getLoad_AD@i,w
  3173  0EC1  3ED9               	addlw	(_Load+15)& (0+255)
  3174  0EC2  0084               	movwf	4
  3175  0EC3  0851               	movf	??_getLoad_AD,w
  3176  0EC4  0080               	movwf	0
  3177                           
  3178                           ;OverLoad_B1.c: 31: k = 1;
  3179  0EC5  01D4               	clrf	getLoad_AD@k
  3180  0EC6  0AD4               	incf	getLoad_AD@k,f
  3181  0EC7                     l4960:	
  3182  0EC7  3001               	movlw	1
  3183  0EC8  00D1               	movwf	??_getLoad_AD
  3184  0EC9  0851               	movf	??_getLoad_AD,w
  3185  0ECA  07D7               	addwf	getLoad_AD@i,f
  3186  0ECB  2EAF               	goto	L6
  3187  0ECC                     __end_of_getLoad_AD:	
  3188                           
  3189                           	psect	text6
  3190  0CB3                     __ptext6:	
  3191 ;; *************** function _getCDS_AD *****************
  3192 ;; Defined at:
  3193 ;;		line 48 in file "../src/CDS_B1.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  channel1        1    wreg     unsigned char 
  3196 ;;  channel2        1    0[BANK0 ] unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  channel1        1    5[BANK0 ] unsigned char 
  3199 ;;  j               1    4[BANK0 ] unsigned char 
  3200 ;;  i               1    3[BANK0 ] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, pclath, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       1       0       0
  3211 ;;      Locals:         0       3       0       0
  3212 ;;      Temps:          0       2       0       0
  3213 ;;      Totals:         0       6       0       0
  3214 ;;Total ram usage:        6 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    4
  3217 ;; This function calls:
  3218 ;;		_getAD
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _getCDS_AD
  3226  0CB3                     _getCDS_AD:	
  3227                           
  3228                           ;incstack = 0
  3229                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3230                           ;getCDS_AD@channel1 stored from wreg
  3231  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  3232  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
  3233  0CB5  00D6               	movwf	getCDS_AD@channel1
  3234                           
  3235                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3236  0CB6  01D4               	clrf	getCDS_AD@i
  3237  0CB7  01D5               	clrf	getCDS_AD@j
  3238                           
  3239                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3240  0CB8  1DAE               	btfss	__CDS,3
  3241  0CB9  0008               	return
  3242                           
  3243                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3244  0CBA  14AE               	bsf	__CDS,1
  3245                           
  3246                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3247  0CBB  3070               	movlw	112
  3248  0CBC  00D2               	movwf	??_getCDS_AD
  3249  0CBD  0852               	movf	??_getCDS_AD,w
  3250  0CBE  00F4               	movwf	getAD@adcon1
  3251  0CBF  0856               	movf	getCDS_AD@channel1,w
  3252  0CC0  158A  2479  158A   	fcall	_getAD
  3253  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0CC5  00D3               	movwf	??_getCDS_AD+1
  3256  0CC6  0853               	movf	??_getCDS_AD+1,w
  3257  0CC7  00B0               	movwf	__CDS+2
  3258                           
  3259                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3260  0CC8  3070               	movlw	112
  3261  0CC9  00D2               	movwf	??_getCDS_AD
  3262  0CCA  0852               	movf	??_getCDS_AD,w
  3263  0CCB  00F4               	movwf	getAD@adcon1
  3264  0CCC  0851               	movf	getCDS_AD@channel2,w
  3265  0CCD  158A  2479         	fcall	_getAD
  3266  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  3267  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  3268  0CD1  00D3               	movwf	??_getCDS_AD+1
  3269  0CD2  0853               	movf	??_getCDS_AD+1,w
  3270  0CD3  00B1               	movwf	__CDS+3
  3271  0CD4  0008               	return
  3272  0CD5                     __end_of_getCDS_AD:	
  3273                           
  3274                           	psect	text7
  3275  0C79                     __ptext7:	
  3276 ;; *************** function _getAD *****************
  3277 ;; Defined at:
  3278 ;;		line 434 in file "../src/MCU_B1.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  adcon0          1    wreg     unsigned char 
  3281 ;;  adcon1          1    4[COMMON] unsigned char 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  adcon0          1    5[COMMON] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      unsigned char 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, pclath, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3293 ;;      Params:         1       0       0       0
  3294 ;;      Locals:         1       0       0       0
  3295 ;;      Temps:          0       0       0       0
  3296 ;;      Totals:         2       0       0       0
  3297 ;;Total ram usage:        2 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    3
  3300 ;; This function calls:
  3301 ;;		_Timeout_Counter
  3302 ;;		_set_TimeoutCleared
  3303 ;; This function is called by:
  3304 ;;		_getCDS_AD
  3305 ;;		_getLoad_AD
  3306 ;;		_getTemp_AD
  3307 ;;		_getPIR_AD
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _getAD
  3313  0C79                     _getAD:	
  3314                           
  3315                           ;incstack = 0
  3316                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3317                           ;getAD@adcon0 stored from wreg
  3318  0C79  00F5               	movwf	getAD@adcon0
  3319                           
  3320                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3321  0C7A  0875               	movf	getAD@adcon0,w
  3322  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  3324  0C7D  009F               	movwf	31	;volatile
  3325                           
  3326                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3327  0C7E  0874               	movf	getAD@adcon1,w
  3328  0C7F  1683               	bsf	3,5	;RP0=1, select bank1
  3329  0C80  1303               	bcf	3,6	;RP1=0, select bank1
  3330  0C81  009F               	movwf	31	;volatile
  3331                           
  3332                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3333  0C82  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0C83  1303               	bcf	3,6	;RP1=0, select bank0
  3335  0C84  149F               	bsf	31,1	;volatile
  3336                           
  3337                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3338  0C85  2C89               	goto	l4724
  3339  0C86                     l4722:	
  3340                           
  3341                           ;MCU_B1.c: 439: Timeout_Counter();
  3342  0C86  158A  2389  158A   	fcall	_Timeout_Counter
  3343  0C89                     l4724:	
  3344  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0C8B  1C9F               	btfss	31,1	;volatile
  3347  0C8C  2C8F               	goto	l4728
  3348  0C8D  1D27               	btfss	_myMain+2,2
  3349  0C8E  2C86               	goto	l4722
  3350  0C8F                     l4728:	
  3351                           
  3352                           ;MCU_B1.c: 440: };
  3353                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3354  0C8F  158A  22B0         	fcall	_set_TimeoutCleared
  3355                           
  3356                           ;MCU_B1.c: 442: return ADRES;
  3357  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0C93  081E               	movf	30,w	;volatile
  3360  0C94  0008               	return
  3361  0C95                     __end_of_getAD:	
  3362                           
  3363                           	psect	text8
  3364  0AB0                     __ptext8:	
  3365 ;; *************** function _set_TimeoutCleared *****************
  3366 ;; Defined at:
  3367 ;;		line 281 in file "../src/Main_B1.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;		None               void
  3374 ;; Registers used:
  3375 ;;		status,2
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3381 ;;      Params:         0       0       0       0
  3382 ;;      Locals:         0       0       0       0
  3383 ;;      Temps:          0       0       0       0
  3384 ;;      Totals:         0       0       0       0
  3385 ;;Total ram usage:        0 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    2
  3388 ;; This function calls:
  3389 ;;		Nothing
  3390 ;; This function is called by:
  3391 ;;		_getAD
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           
  3396                           ;psect for function _set_TimeoutCleared
  3397  0AB0                     _set_TimeoutCleared:	
  3398                           
  3399                           ;Main_B1.c: 282: myMain.Timeout = 0;
  3400                           
  3401                           ;incstack = 0
  3402                           ; Regs used in _set_TimeoutCleared: [status,2]
  3403  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0AB2  1127               	bcf	_myMain+2,2
  3406                           
  3407                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  3408  0AB3  01A8               	clrf	_myMain+3
  3409  0AB4  01A9               	clrf	_myMain+4
  3410  0AB5  0008               	return
  3411  0AB6                     __end_of_set_TimeoutCleared:	
  3412                           
  3413                           	psect	text9
  3414  0B89                     __ptext9:	
  3415 ;; *************** function _Timeout_Counter *****************
  3416 ;; Defined at:
  3417 ;;		line 272 in file "../src/Main_B1.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;		None               void
  3424 ;; Registers used:
  3425 ;;		wreg, status,2
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3431 ;;      Params:         0       0       0       0
  3432 ;;      Locals:         0       0       0       0
  3433 ;;      Temps:          0       0       0       0
  3434 ;;      Totals:         0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    2
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_getAD
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _Timeout_Counter
  3447  0B89                     _Timeout_Counter:	
  3448                           
  3449                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  3450                           
  3451                           ;incstack = 0
  3452                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3453  0B89  3001               	movlw	1
  3454  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  3455  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  3456  0B8C  07A8               	addwf	_myMain+3,f
  3457  0B8D  1803               	skipnc
  3458  0B8E  0AA9               	incf	_myMain+4,f
  3459  0B8F  3000               	movlw	0
  3460  0B90  07A9               	addwf	_myMain+4,f
  3461                           
  3462                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  3463  0B91  3061               	movlw	97
  3464  0B92  0629               	xorwf	_myMain+4,w
  3465  0B93  1D03               	skipz
  3466  0B94  2B97               	goto	u5275
  3467  0B95  30A8               	movlw	168
  3468  0B96  0628               	xorwf	_myMain+3,w
  3469  0B97                     u5275:	
  3470  0B97  1D03               	skipz
  3471  0B98  0008               	return
  3472                           
  3473                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  3474  0B99  01A8               	clrf	_myMain+3
  3475  0B9A  01A9               	clrf	_myMain+4
  3476                           
  3477                           ;Main_B1.c: 276: myMain.Timeout = 1;
  3478  0B9B  1527               	bsf	_myMain+2,2
  3479  0B9C  0008               	return
  3480  0B9D                     __end_of_Timeout_Counter:	
  3481                           
  3482                           	psect	text10
  3483  0B66                     __ptext10:	
  3484 ;; *************** function _WDT_Main *****************
  3485 ;; Defined at:
  3486 ;;		line 1116 in file "../src/MCU_B1.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;		None               void
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3500 ;;      Params:         0       0       0       0
  3501 ;;      Locals:         0       0       0       0
  3502 ;;      Temps:          1       0       0       0
  3503 ;;      Totals:         1       0       0       0
  3504 ;;Total ram usage:        1 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    3
  3507 ;; This function calls:
  3508 ;;		_WDT_Clearing
  3509 ;; This function is called by:
  3510 ;;		_main
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           
  3515                           ;psect for function _WDT_Main
  3516  0B66                     _WDT_Main:	
  3517                           
  3518                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3522  0B66  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0B67  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0B68  1C35               	btfss	_WDT,0
  3525  0B69  0008               	return
  3526                           
  3527                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3528  0B6A  3001               	movlw	1
  3529  0B6B  02B6               	subwf	_WDT+1,f
  3530  0B6C  0836               	movf	_WDT+1,w
  3531  0B6D  3AFF               	xorlw	255
  3532  0B6E  1903               	skipnz
  3533  0B6F  0008               	return
  3534                           
  3535                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3536  0B70  3064               	movlw	100
  3537  0B71  00F4               	movwf	??_WDT_Main
  3538  0B72  0874               	movf	??_WDT_Main,w
  3539  0B73  00B6               	movwf	_WDT+1
  3540                           
  3541                           ;MCU_B1.c: 1120: WDT_Clearing();
  3542  0B74  118A  2002         	fcall	_WDT_Clearing
  3543  0B76  0008               	return
  3544  0B77                     __end_of_WDT_Main:	
  3545                           
  3546                           	psect	text11
  3547  0002                     __ptext11:	
  3548 ;; *************** function _WDT_Clearing *****************
  3549 ;; Defined at:
  3550 ;;		line 1126 in file "../src/MCU_B1.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		None
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3564 ;;      Params:         0       0       0       0
  3565 ;;      Locals:         0       0       0       0
  3566 ;;      Temps:          0       0       0       0
  3567 ;;      Totals:         0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    2
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_WDT_Main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _WDT_Clearing
  3580  0002                     _WDT_Clearing:	
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _WDT_Clearing: []
  3584  0002  0064               	clrwdt	;# 
  3585  0003  0008               	return
  3586  0004                     __end_of_WDT_Clearing:	
  3587                           
  3588                           	psect	text12
  3589  0A90                     __ptext12:	
  3590 ;; *************** function _Temp_Main *****************
  3591 ;; Defined at:
  3592 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;		None               void
  3599 ;; Registers used:
  3600 ;;		wreg, status,2, status,0, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3606 ;;      Params:         0       0       0       0
  3607 ;;      Locals:         0       0       0       0
  3608 ;;      Temps:          0       0       0       0
  3609 ;;      Totals:         0       0       0       0
  3610 ;;Total ram usage:        0 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    4
  3613 ;; This function calls:
  3614 ;;		_setTemp_Main
  3615 ;; This function is called by:
  3616 ;;		_main
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function _Temp_Main
  3622  0A90                     _Temp_Main:	
  3623                           
  3624                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3625                           
  3626                           ;incstack = 0
  3627                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3628  0A90  118A  2709         	fcall	_setTemp_Main
  3629  0A92  0008               	return
  3630  0A93                     __end_of_Temp_Main:	
  3631                           
  3632                           	psect	text13
  3633  0709                     __ptext13:	
  3634 ;; *************** function _setTemp_Main *****************
  3635 ;; Defined at:
  3636 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  AD              1   10[BANK0 ] unsigned char 
  3641 ;;  DangerValue     1    9[BANK0 ] unsigned char 
  3642 ;;  SafeValue       1    8[BANK0 ] unsigned char 
  3643 ;;  TempGO          1    7[BANK0 ] unsigned char 
  3644 ;;  error           1    6[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3654 ;;      Params:         0       0       0       0
  3655 ;;      Locals:         0       5       0       0
  3656 ;;      Temps:          1       0       0       0
  3657 ;;      Totals:         1       5       0       0
  3658 ;;Total ram usage:        6 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    3
  3661 ;; This function calls:
  3662 ;;		_getMain_All_Error_Status
  3663 ;;		_getMain_All_LightsStatus
  3664 ;; This function is called by:
  3665 ;;		_Temp_Main
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _setTemp_Main
  3671  0709                     _setTemp_Main:	
  3672                           
  3673                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3674                           
  3675                           ;incstack = 0
  3676                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3677  0709  3000               	movlw	0
  3678  070A  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  3679  070D  00F5               	movwf	??_setTemp_Main
  3680  070E  0875               	movf	??_setTemp_Main,w
  3681  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0710  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0711  00D7               	movwf	setTemp_Main@error
  3684                           
  3685                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3686  0712  01D9               	clrf	setTemp_Main@SafeValue
  3687  0713  01DA               	clrf	setTemp_Main@DangerValue
  3688                           
  3689                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3690  0714  158A  22E5  118A   	fcall	_getMain_All_LightsStatus
  3691  0717  00F5               	movwf	??_setTemp_Main
  3692  0718  0875               	movf	??_setTemp_Main,w
  3693  0719  1283               	bcf	3,5	;RP0=0, select bank0
  3694  071A  1303               	bcf	3,6	;RP1=0, select bank0
  3695  071B  00D8               	movwf	setTemp_Main@TempGO
  3696                           
  3697                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3698  071C  1C39               	btfss	_Temp,0
  3699  071D  2F80               	goto	l847
  3700                           
  3701                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3702  071E  1939               	btfsc	_Temp,2
  3703  071F  2F3C               	goto	l3612
  3704                           
  3705                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3706  0720  0858               	movf	setTemp_Main@TempGO,w
  3707  0721  3A01               	xorlw	1
  3708  0722  1D03               	skipz
  3709  0723  2F26               	goto	l853
  3710  0724  1CB9               	btfss	_Temp,1
  3711  0725  2F28               	goto	l3604
  3712  0726                     l853:	
  3713  0726  1CB9               	btfss	_Temp,1
  3714  0727  2F39               	goto	l3610
  3715  0728                     l3604:	
  3716                           
  3717                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3718  0728  3001               	movlw	1
  3719  0729  07BA               	addwf	_Temp+1,f
  3720  072A  1803               	skipnc
  3721  072B  0ABB               	incf	_Temp+2,f
  3722  072C  3000               	movlw	0
  3723  072D  07BB               	addwf	_Temp+2,f
  3724                           
  3725                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3726  072E  3000               	movlw	0
  3727  072F  023B               	subwf	_Temp+2,w
  3728  0730  30FA               	movlw	250
  3729  0731  1903               	skipnz
  3730  0732  023A               	subwf	_Temp+1,w
  3731  0733  1C03               	skipc
  3732  0734  0008               	return
  3733                           
  3734                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3735  0735  01BA               	clrf	_Temp+1
  3736  0736  01BB               	clrf	_Temp+2
  3737                           
  3738                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3739  0737  1539               	bsf	_Temp,2
  3740                           
  3741                           ;OverTemperature_B1.c: 83: }
  3742                           ;OverTemperature_B1.c: 84: } else {
  3743  0738  0008               	return
  3744  0739                     l3610:	
  3745                           
  3746                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3747  0739  01BA               	clrf	_Temp+1
  3748  073A  01BB               	clrf	_Temp+2
  3749                           
  3750                           ;OverTemperature_B1.c: 86: }
  3751                           ;OverTemperature_B1.c: 87: } else {
  3752  073B  0008               	return
  3753  073C                     l3612:	
  3754                           
  3755                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3756  073C  3001               	movlw	1
  3757  073D  07BA               	addwf	_Temp+1,f
  3758  073E  1803               	skipnc
  3759  073F  0ABB               	incf	_Temp+2,f
  3760  0740  3000               	movlw	0
  3761  0741  07BB               	addwf	_Temp+2,f
  3762                           
  3763                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3764  0742  3000               	movlw	0
  3765  0743  023B               	subwf	_Temp+2,w
  3766  0744  3005               	movlw	5
  3767  0745  1903               	skipnz
  3768  0746  023A               	subwf	_Temp+1,w
  3769  0747  1C03               	skipc
  3770  0748  0008               	return
  3771                           
  3772                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3773  0749  01BA               	clrf	_Temp+1
  3774  074A  01BB               	clrf	_Temp+2
  3775                           
  3776                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3777  074B  083F               	movf	_Temp+6,w
  3778  074C  1903               	btfsc	3,2
  3779  074D  2F7C               	goto	l858
  3780                           
  3781                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3782  074E  1139               	bcf	_Temp,2
  3783                           
  3784                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3785  074F  083F               	movf	_Temp+6,w
  3786  0750  00F5               	movwf	??_setTemp_Main
  3787  0751  0875               	movf	??_setTemp_Main,w
  3788  0752  00DB               	movwf	setTemp_Main@AD
  3789                           
  3790                           ;OverTemperature_B1.c: 106: SafeValue = 0x50;
  3791  0753  3050               	movlw	80
  3792  0754  00F5               	movwf	??_setTemp_Main
  3793  0755  0875               	movf	??_setTemp_Main,w
  3794  0756  00D9               	movwf	setTemp_Main@SafeValue
  3795                           
  3796                           ;OverTemperature_B1.c: 107: DangerValue = 0x76;
  3797  0757  3076               	movlw	118
  3798  0758  00F5               	movwf	??_setTemp_Main
  3799  0759  0875               	movf	??_setTemp_Main,w
  3800  075A  00DA               	movwf	setTemp_Main@DangerValue
  3801                           
  3802                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3803  075B  1CB9               	btfss	_Temp,1
  3804  075C  2F6C               	goto	l3636
  3805                           
  3806                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3807  075D  0859               	movf	setTemp_Main@SafeValue,w
  3808  075E  025B               	subwf	setTemp_Main@AD,w
  3809  075F  1C03               	skipc
  3810  0760  2F7B               	goto	l3646
  3811                           
  3812                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3813  0761  3001               	movlw	1
  3814  0762  00F5               	movwf	??_setTemp_Main
  3815  0763  0875               	movf	??_setTemp_Main,w
  3816  0764  07BC               	addwf	_Temp+3,f
  3817                           
  3818                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3819  0765  3003               	movlw	3
  3820  0766  023C               	subwf	_Temp+3,w
  3821  0767  1C03               	skipc
  3822  0768  2F7C               	goto	l858
  3823                           
  3824                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3825  0769  01BC               	clrf	_Temp+3
  3826                           
  3827                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3828  076A  10B9               	bcf	_Temp,1
  3829                           
  3830                           ;OverTemperature_B1.c: 126: }
  3831                           ;OverTemperature_B1.c: 127: } else {
  3832                           
  3833                           ;OverTemperature_B1.c: 125: ;;
  3834  076B  2F7C               	goto	l858
  3835  076C                     l3636:	
  3836                           ;OverTemperature_B1.c: 129: }
  3837                           ;OverTemperature_B1.c: 130: } else {
  3838                           
  3839                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3840                           
  3841                           
  3842                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3843  076C  085B               	movf	setTemp_Main@AD,w
  3844  076D  025A               	subwf	setTemp_Main@DangerValue,w
  3845  076E  1C03               	skipc
  3846  076F  2F7B               	goto	l3646
  3847                           
  3848                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3849  0770  3001               	movlw	1
  3850  0771  00F5               	movwf	??_setTemp_Main
  3851  0772  0875               	movf	??_setTemp_Main,w
  3852  0773  07BC               	addwf	_Temp+3,f
  3853                           
  3854                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3855  0774  3003               	movlw	3
  3856  0775  023C               	subwf	_Temp+3,w
  3857  0776  1C03               	skipc
  3858  0777  2F7C               	goto	l858
  3859                           
  3860                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3861  0778  01BC               	clrf	_Temp+3
  3862                           
  3863                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3864  0779  14B9               	bsf	_Temp,1
  3865                           
  3866                           ;OverTemperature_B1.c: 136: }
  3867                           ;OverTemperature_B1.c: 137: } else {
  3868  077A  2F7C               	goto	l858
  3869  077B                     l3646:	
  3870                           
  3871                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3872  077B  01BC               	clrf	_Temp+3
  3873  077C                     l858:	
  3874                           ;OverTemperature_B1.c: 139: }
  3875                           ;OverTemperature_B1.c: 140: }
  3876                           ;OverTemperature_B1.c: 141: ;;
  3877                           ;OverTemperature_B1.c: 142: ;;
  3878                           
  3879                           
  3880                           ;OverTemperature_B1.c: 158: }
  3881                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3882  077C  01BD               	clrf	_Temp+4
  3883                           
  3884                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3885  077D  01BE               	clrf	_Temp+5
  3886                           
  3887                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3888  077E  01BF               	clrf	_Temp+6
  3889                           
  3890                           ;OverTemperature_B1.c: 162: }
  3891                           ;OverTemperature_B1.c: 163: }
  3892                           ;OverTemperature_B1.c: 166: } else {
  3893  077F  0008               	return
  3894  0780                     l847:	
  3895                           
  3896                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3897  0780  1C25               	btfss	_myMain,0
  3898  0781  0008               	return
  3899                           
  3900                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3901  0782  1439               	bsf	_Temp,0
  3902  0783  0008               	return
  3903  0784                     __end_of_setTemp_Main:	
  3904                           
  3905                           	psect	text14
  3906  0A8D                     __ptext14:	
  3907 ;; *************** function _Temp_Initialization *****************
  3908 ;; Defined at:
  3909 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		status,2, status,0, pclath, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3923 ;;      Params:         0       0       0       0
  3924 ;;      Locals:         0       0       0       0
  3925 ;;      Temps:          0       0       0       0
  3926 ;;      Totals:         0       0       0       0
  3927 ;;Total ram usage:        0 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    3
  3930 ;; This function calls:
  3931 ;;		_setTemp_Initialization
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _Temp_Initialization
  3939  0A8D                     _Temp_Initialization:	
  3940                           
  3941                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3942                           
  3943                           ;incstack = 0
  3944                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3945  0A8D  158A  227F         	fcall	_setTemp_Initialization
  3946  0A8F  0008               	return
  3947  0A90                     __end_of_Temp_Initialization:	
  3948                           
  3949                           	psect	text15
  3950  0A7F                     __ptext15:	
  3951 ;; *************** function _setTemp_Initialization *****************
  3952 ;; Defined at:
  3953 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;		None               void
  3960 ;; Registers used:
  3961 ;;		None
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3967 ;;      Params:         0       0       0       0
  3968 ;;      Locals:         0       0       0       0
  3969 ;;      Temps:          0       0       0       0
  3970 ;;      Totals:         0       0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    2
  3974 ;; This function calls:
  3975 ;;		Nothing
  3976 ;; This function is called by:
  3977 ;;		_Temp_Initialization
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _setTemp_Initialization
  3983  0A7F                     _setTemp_Initialization:	
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _setTemp_Initialization: []
  3987  0A7F  0008               	return
  3988  0A80                     __end_of_setTemp_Initialization:	
  3989                           
  3990                           	psect	text16
  3991  0A8A                     __ptext16:	
  3992 ;; *************** function _SYSC_Main *****************
  3993 ;; Defined at:
  3994 ;;		line 17 in file "../src/SYSC_B1.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;		None               void
  4001 ;; Registers used:
  4002 ;;		wreg, status,2, status,0, pclath, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4008 ;;      Params:         0       0       0       0
  4009 ;;      Locals:         0       0       0       0
  4010 ;;      Temps:          0       0       0       0
  4011 ;;      Totals:         0       0       0       0
  4012 ;;Total ram usage:        0 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    4
  4015 ;; This function calls:
  4016 ;;		_setSYSC_Main
  4017 ;; This function is called by:
  4018 ;;		_main
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _SYSC_Main
  4024  0A8A                     _SYSC_Main:	
  4025                           
  4026                           ;SYSC_B1.c: 19: setSYSC_Main();
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4030  0A8A  158A  262C         	fcall	_setSYSC_Main
  4031  0A8C  0008               	return
  4032  0A8D                     __end_of_SYSC_Main:	
  4033                           
  4034                           	psect	text17
  4035  0E2C                     __ptext17:	
  4036 ;; *************** function _setSYSC_Main *****************
  4037 ;; Defined at:
  4038 ;;		line 23 in file "../src/SYSC_B1.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;		None               void
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0, pclath, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4052 ;;      Params:         0       0       0       0
  4053 ;;      Locals:         0       0       0       0
  4054 ;;      Temps:          0       0       0       0
  4055 ;;      Totals:         0       0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    3
  4059 ;; This function calls:
  4060 ;;		_getMain_All_Error_Status
  4061 ;; This function is called by:
  4062 ;;		_SYSC_Main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _setSYSC_Main
  4068  0E2C                     _setSYSC_Main:	
  4069                           
  4070                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4074  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  4075  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  4076  0E2E  1C20               	btfss	_SYSC,0
  4077  0E2F  0008               	return
  4078                           
  4079                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4080  0E30  18A0               	btfsc	_SYSC,1
  4081  0E31  2E43               	goto	l3662
  4082                           
  4083                           ;SYSC_B1.c: 27: SYSC.Time++;
  4084  0E32  3001               	movlw	1
  4085  0E33  07A1               	addwf	_SYSC+1,f
  4086  0E34  1803               	skipnc
  4087  0E35  0AA2               	incf	_SYSC+2,f
  4088  0E36  3000               	movlw	0
  4089  0E37  07A2               	addwf	_SYSC+2,f
  4090                           
  4091                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4092  0E38  3000               	movlw	0
  4093  0E39  0222               	subwf	_SYSC+2,w
  4094  0E3A  3019               	movlw	25
  4095  0E3B  1903               	skipnz
  4096  0E3C  0221               	subwf	_SYSC+1,w
  4097  0E3D  1C03               	skipc
  4098  0E3E  0008               	return
  4099                           
  4100                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4101  0E3F  01A1               	clrf	_SYSC+1
  4102  0E40  01A2               	clrf	_SYSC+2
  4103                           
  4104                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4105  0E41  14A0               	bsf	_SYSC,1
  4106                           
  4107                           ;SYSC_B1.c: 31: }
  4108                           ;SYSC_B1.c: 32: } else {
  4109  0E42  0008               	return
  4110  0E43                     l3662:	
  4111                           
  4112                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4113  0E43  3001               	movlw	1
  4114  0E44  158A  25AE  158A   	fcall	_getMain_All_Error_Status
  4115  0E47  3800               	iorlw	0
  4116  0E48  1D03               	skipz
  4117  0E49  0008               	return
  4118                           
  4119                           ;SYSC_B1.c: 34: SYSC.Time++;
  4120  0E4A  3001               	movlw	1
  4121  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  4122  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  4123  0E4D  07A1               	addwf	_SYSC+1,f
  4124  0E4E  1803               	skipnc
  4125  0E4F  0AA2               	incf	_SYSC+2,f
  4126  0E50  3000               	movlw	0
  4127  0E51  07A2               	addwf	_SYSC+2,f
  4128                           
  4129                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4130  0E52  3000               	movlw	0
  4131  0E53  0222               	subwf	_SYSC+2,w
  4132  0E54  3019               	movlw	25
  4133  0E55  1903               	skipnz
  4134  0E56  0221               	subwf	_SYSC+1,w
  4135  0E57  1C03               	skipc
  4136  0E58  2E5E               	goto	l3668
  4137                           
  4138                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4139  0E59  01A1               	clrf	_SYSC+1
  4140  0E5A  01A2               	clrf	_SYSC+2
  4141                           
  4142                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4143  0E5B  01A3               	clrf	_SYSC+3
  4144  0E5C  01A4               	clrf	_SYSC+4
  4145                           
  4146                           ;SYSC_B1.c: 38: } else {
  4147  0E5D  0008               	return
  4148  0E5E                     l3668:	
  4149                           
  4150                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4151  0E5E  3001               	movlw	1
  4152  0E5F  07A3               	addwf	_SYSC+3,f
  4153  0E60  1803               	skipnc
  4154  0E61  0AA4               	incf	_SYSC+4,f
  4155  0E62  3000               	movlw	0
  4156  0E63  07A4               	addwf	_SYSC+4,f
  4157                           
  4158                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4159  0E64  3001               	movlw	1
  4160  0E65  0624               	xorwf	_SYSC+4,w
  4161  0E66  1D03               	skipz
  4162  0E67  2E6A               	goto	u3445
  4163  0E68  30F4               	movlw	244
  4164  0E69  0623               	xorwf	_SYSC+3,w
  4165  0E6A                     u3445:	
  4166  0E6A  1D03               	skipz
  4167  0E6B  0008               	return
  4168                           
  4169                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4170  0E6C  01A3               	clrf	_SYSC+3
  4171  0E6D  01A4               	clrf	_SYSC+4
  4172                           
  4173                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4174  0E6E  10A0               	bcf	_SYSC,1
  4175  0E6F  0008               	return
  4176  0E70                     __end_of_setSYSC_Main:	
  4177                           
  4178                           	psect	text18
  4179  0A87                     __ptext18:	
  4180 ;; *************** function _SYSC_Initialization *****************
  4181 ;; Defined at:
  4182 ;;		line 7 in file "../src/SYSC_B1.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;		None               void
  4189 ;; Registers used:
  4190 ;;		status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4196 ;;      Params:         0       0       0       0
  4197 ;;      Locals:         0       0       0       0
  4198 ;;      Temps:          0       0       0       0
  4199 ;;      Totals:         0       0       0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    3
  4203 ;; This function calls:
  4204 ;;		_setSYSC_Initialization
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _SYSC_Initialization
  4212  0A87                     _SYSC_Initialization:	
  4213                           
  4214                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4218  0A87  158A  229B         	fcall	_setSYSC_Initialization
  4219  0A89  0008               	return
  4220  0A8A                     __end_of_SYSC_Initialization:	
  4221                           
  4222                           	psect	text19
  4223  0A9B                     __ptext19:	
  4224 ;; *************** function _setSYSC_Initialization *****************
  4225 ;; Defined at:
  4226 ;;		line 13 in file "../src/SYSC_B1.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;		None               void
  4233 ;; Registers used:
  4234 ;;		None
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4240 ;;      Params:         0       0       0       0
  4241 ;;      Locals:         0       0       0       0
  4242 ;;      Temps:          0       0       0       0
  4243 ;;      Totals:         0       0       0       0
  4244 ;;Total ram usage:        0 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    2
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_SYSC_Initialization
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _setSYSC_Initialization
  4256  0A9B                     _setSYSC_Initialization:	
  4257                           
  4258                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _setSYSC_Initialization: []
  4262  0A9B  1283               	bcf	3,5	;RP0=0, select bank0
  4263  0A9C  1303               	bcf	3,6	;RP1=0, select bank0
  4264  0A9D  1420               	bsf	_SYSC,0
  4265  0A9E  0008               	return
  4266  0A9F                     __end_of_setSYSC_Initialization:	
  4267                           
  4268                           	psect	text20
  4269  0026                     __ptext20:	
  4270 ;; *************** function _PIR_Main *****************
  4271 ;; Defined at:
  4272 ;;		line 13 in file "../src/PIR_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  LightsStatus    1   17[BANK0 ] unsigned char 
  4277 ;;  TriggerValue    1   16[BANK0 ] unsigned char 
  4278 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  4279 ;;  cds             1   12[BANK0 ] unsigned char 
  4280 ;;  error           1   11[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;		None               void
  4283 ;; Registers used:
  4284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4290 ;;      Params:         0       0       0       0
  4291 ;;      Locals:         0       7       0       0
  4292 ;;      Temps:          0       5       0       0
  4293 ;;      Totals:         0      12       0       0
  4294 ;;Total ram usage:       12 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    5
  4297 ;; This function calls:
  4298 ;;		_getCDS_Status
  4299 ;;		_getLights_Status
  4300 ;;		_getMain_All_Error_Status
  4301 ;;		_setLED
  4302 ;;		_setLights_SwOff
  4303 ;;		_setLights_SwOn
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _PIR_Main
  4311  0026                     _PIR_Main:	
  4312                           
  4313                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4314                           
  4315                           ;incstack = 0
  4316                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4317  0026  3000               	movlw	0
  4318  0027  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  4319  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4320  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4321  002C  00D7               	movwf	??_PIR_Main
  4322  002D  0857               	movf	??_PIR_Main,w
  4323  002E  00DC               	movwf	PIR_Main@error
  4324                           
  4325                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4326  002F  158A  22CC  118A   	fcall	_getCDS_Status
  4327  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4328  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4329  0034  00D7               	movwf	??_PIR_Main
  4330  0035  0857               	movf	??_PIR_Main,w
  4331  0036  00DD               	movwf	PIR_Main@cds
  4332                           
  4333                           ;PIR_B1.c: 16: char LightsStatus = 0;
  4334  0037  01E2               	clrf	PIR_Main@LightsStatus
  4335                           
  4336                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  4337  0038  01DE               	clrf	PIR_Main@Enable_Switch
  4338  0039  0ADE               	incf	PIR_Main@Enable_Switch,f
  4339                           
  4340                           ;PIR_B1.c: 18: char TriggerValue = 0;
  4341  003A  01E1               	clrf	PIR_Main@TriggerValue
  4342                           
  4343                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  4344  003B  3001               	movlw	1
  4345  003C  158A  2355  118A   	fcall	_getLights_Status
  4346  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4347  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4348  0041  00D7               	movwf	??_PIR_Main
  4349  0042  0857               	movf	??_PIR_Main,w
  4350  0043  00E2               	movwf	PIR_Main@LightsStatus
  4351                           
  4352                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  4353  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4354  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4355  0046  1C20               	btfss	__PIR^(0+128),0
  4356  0047  2A0F               	goto	l927
  4357                           
  4358                           ;PIR_B1.c: 36: if (error == 0) {
  4359  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4361  004A  08DC               	movf	PIR_Main@error,f
  4362  004B  1D03               	skipz
  4363  004C  288B               	goto	l928
  4364                           
  4365                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  4366  004D  085D               	movf	PIR_Main@cds,w
  4367  004E  3A01               	xorlw	1
  4368  004F  1D03               	skipz
  4369  0050  2859               	goto	l929
  4370  0051  085E               	movf	PIR_Main@Enable_Switch,w
  4371  0052  3A01               	xorlw	1
  4372  0053  1D03               	skipz
  4373  0054  2859               	goto	l929
  4374                           
  4375                           ;PIR_B1.c: 39: _PIR.Available = 1;
  4376  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4377  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4378  0057  17A0               	bsf	__PIR^(0+128),7
  4379                           
  4380                           ;PIR_B1.c: 40: } else {
  4381  0058  287B               	goto	l5244
  4382  0059                     l929:	
  4383                           
  4384                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4385  0059  1683               	bsf	3,5	;RP0=1, select bank1
  4386  005A  1303               	bcf	3,6	;RP1=0, select bank1
  4387  005B  13A0               	bcf	__PIR^(0+128),7
  4388                           
  4389                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4390  005C  1DA0               	btfss	__PIR^(0+128),3
  4391  005D  287B               	goto	l5244
  4392                           
  4393                           ;PIR_B1.c: 45: setLED(1, 0);
  4394  005E  1283               	bcf	3,5	;RP0=0, select bank0
  4395  005F  1303               	bcf	3,6	;RP1=0, select bank0
  4396  0060  01D1               	clrf	setLED@command
  4397  0061  3001               	movlw	1
  4398  0062  158A  278F  118A   	fcall	_setLED
  4399                           
  4400                           ;PIR_B1.c: 46: setLED(2, 0);
  4401  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0067  01D1               	clrf	setLED@command
  4404  0068  3002               	movlw	2
  4405  0069  158A  278F  118A   	fcall	_setLED
  4406                           
  4407                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  4408  006C  3001               	movlw	1
  4409  006D  158A  2355  118A   	fcall	_getLights_Status
  4410  0070  3A01               	xorlw	1
  4411  0071  1D03               	skipz
  4412  0072  287B               	goto	l5244
  4413                           
  4414                           ;PIR_B1.c: 52: setLights_SwOn(1);
  4415  0073  3001               	movlw	1
  4416  0074  158A  24D5  118A   	fcall	_setLights_SwOn
  4417                           
  4418                           ;PIR_B1.c: 53: setLights_SwOff(1);
  4419  0077  3001               	movlw	1
  4420  0078  158A  242A  118A   	fcall	_setLights_SwOff
  4421  007B                     l5244:	
  4422                           
  4423                           ;PIR_B1.c: 55: }
  4424                           ;PIR_B1.c: 67: }
  4425                           ;PIR_B1.c: 68: }
  4426                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  4427  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4428  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4429  007D  1A20               	btfsc	__PIR^(0+128),4
  4430  007E  2891               	goto	l935
  4431                           
  4432                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  4433  007F  1620               	bsf	__PIR^(0+128),4
  4434                           
  4435                           ;PIR_B1.c: 75: if (_PIR.OK == 0) {
  4436  0080  19A0               	btfsc	__PIR^(0+128),3
  4437  0081  2891               	goto	l935
  4438                           
  4439                           ;PIR_B1.c: 76: setLED(1, 1);
  4440  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0084  01D1               	clrf	setLED@command
  4443  0085  0AD1               	incf	setLED@command,f
  4444  0086  3001               	movlw	1
  4445  0087  158A  278F  118A   	fcall	_setLED
  4446                           
  4447                           ;PIR_B1.c: 77: }
  4448                           ;PIR_B1.c: 80: }
  4449                           ;PIR_B1.c: 81: } else {
  4450  008A  2891               	goto	l935
  4451  008B                     l928:	
  4452                           
  4453                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  4454  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4455  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4456  008D  1E20               	btfss	__PIR^(0+128),4
  4457  008E  2891               	goto	l935
  4458                           
  4459                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  4460  008F  1220               	bcf	__PIR^(0+128),4
  4461                           
  4462                           ;PIR_B1.c: 84: _PIR.Available = 0;
  4463  0090  13A0               	bcf	__PIR^(0+128),7
  4464  0091                     l935:	
  4465                           
  4466                           ;PIR_B1.c: 102: }
  4467                           ;PIR_B1.c: 103: }
  4468                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  4469  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4470  0092  1303               	bcf	3,6	;RP1=0, select bank1
  4471  0093  18A0               	btfsc	__PIR^(0+128),1
  4472  0094  28A4               	goto	l937
  4473                           
  4474                           ;PIR_B1.c: 106: _PIR.Time++;
  4475  0095  3001               	movlw	1
  4476  0096  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0097  1303               	bcf	3,6	;RP1=0, select bank0
  4478  0098  00D7               	movwf	??_PIR_Main
  4479  0099  0857               	movf	??_PIR_Main,w
  4480  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4481  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4482  009C  07A2               	addwf	(__PIR^(0+128)+2),f
  4483                           
  4484                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  4485  009D  0822               	movf	(__PIR^(0+128)+2),w
  4486  009E  3A05               	xorlw	5
  4487  009F  1D03               	skipz
  4488  00A0  29AE               	goto	l5332
  4489                           
  4490                           ;PIR_B1.c: 108: _PIR.Time = 0;
  4491  00A1  01A2               	clrf	(__PIR^(0+128)+2)
  4492                           
  4493                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  4494  00A2  14A0               	bsf	__PIR^(0+128),1
  4495                           
  4496                           ;PIR_B1.c: 110: }
  4497                           ;PIR_B1.c: 111: } else {
  4498  00A3  29AE               	goto	l5332
  4499  00A4                     l937:	
  4500                           
  4501                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  4502  00A4  1D20               	btfss	__PIR^(0+128),2
  4503  00A5  29AE               	goto	l5332
  4504                           
  4505                           ;PIR_B1.c: 113: _PIR.GO = 0;
  4506  00A6  1120               	bcf	__PIR^(0+128),2
  4507                           
  4508                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  4509  00A7  10A0               	bcf	__PIR^(0+128),1
  4510                           
  4511                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  4512  00A8  1BA0               	btfsc	__PIR^(0+128),7
  4513                           
  4514                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  4515  00A9  1DA0               	btfss	__PIR^(0+128),3
  4516  00AA  29AE               	goto	l5332
  4517                           
  4518                           ;PIR_B1.c: 118: _PIR.Time++;
  4519  00AB  3001               	movlw	1
  4520  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  4521  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  4522  00AE  00D7               	movwf	??_PIR_Main
  4523  00AF  0857               	movf	??_PIR_Main,w
  4524  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  4525  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  4526  00B2  07A2               	addwf	(__PIR^(0+128)+2),f
  4527                           
  4528                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  4529  00B3  0822               	movf	(__PIR^(0+128)+2),w
  4530  00B4  3A3C               	xorlw	60
  4531  00B5  1D03               	skipz
  4532  00B6  28EB               	goto	l5300
  4533                           
  4534                           ;PIR_B1.c: 120: _PIR.Time = 0;
  4535  00B7  01A2               	clrf	(__PIR^(0+128)+2)
  4536                           
  4537                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  4538  00B8  305A               	movlw	90
  4539  00B9  0247               	subwf	(__PIR^(0+128)+39),w
  4540  00BA  1C03               	skipc
  4541  00BB  28C7               	goto	l5282
  4542                           
  4543                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  4544  00BC  01C6               	clrf	(__PIR^(0+128)+38)
  4545                           
  4546                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  4547  00BD  0848               	movf	(__PIR^(0+128)+40),w
  4548  00BE  3A19               	xorlw	25
  4549  00BF  1903               	btfsc	3,2
  4550  00C0  28DC               	goto	L12
  4551                           
  4552                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  4553                           
  4554                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  4555  00C1  0848               	movf	(__PIR^(0+128)+40),w
  4556  00C2  3A23               	xorlw	35
  4557  00C3  1D03               	skipz
  4558  00C4  28EA               	goto	l5298
  4559                           
  4560                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  4561  00C5  302D               	movlw	45
  4562  00C6  28E3               	goto	L9
  4563  00C7                     l5282:	
  4564                           ;PIR_B1.c: 128: }
  4565                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  4566                           
  4567  00C7  300B               	movlw	11
  4568  00C8  0247               	subwf	(__PIR^(0+128)+39),w
  4569  00C9  1803               	skipnc
  4570  00CA  28EA               	goto	l5298
  4571                           
  4572                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  4573  00CB  3001               	movlw	1
  4574  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4575  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4576  00CE  00D7               	movwf	??_PIR_Main
  4577  00CF  0857               	movf	??_PIR_Main,w
  4578  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4579  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4580  00D2  07C6               	addwf	(__PIR^(0+128)+38),f
  4581                           
  4582                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  4583  00D3  0846               	movf	(__PIR^(0+128)+38),w
  4584  00D4  3A02               	xorlw	2
  4585  00D5  1D03               	skipz
  4586  00D6  28EA               	goto	l5298
  4587                           
  4588                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  4589  00D7  01C6               	clrf	(__PIR^(0+128)+38)
  4590                           
  4591                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  4592  00D8  0848               	movf	(__PIR^(0+128)+40),w
  4593  00D9  3A2D               	xorlw	45
  4594  00DA  1D03               	skipz
  4595  00DB  28DE               	goto	l5294
  4596  00DC                     L12:	
  4597                           
  4598                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  4599  00DC  3023               	movlw	35
  4600  00DD  28E3               	goto	L9
  4601  00DE                     l5294:	
  4602                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  4603                           
  4604  00DE  0848               	movf	(__PIR^(0+128)+40),w
  4605  00DF  3A23               	xorlw	35
  4606  00E0  1D03               	skipz
  4607  00E1  28EA               	goto	l5298
  4608                           
  4609                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  4610  00E2  3019               	movlw	25
  4611  00E3                     L9:	
  4612  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4613  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4614  00E5  00D7               	movwf	??_PIR_Main
  4615  00E6  0857               	movf	??_PIR_Main,w
  4616  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  4617  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  4618  00E9  00C8               	movwf	(__PIR^(0+128)+40)
  4619  00EA                     l5298:	
  4620                           
  4621                           ;PIR_B1.c: 138: }
  4622                           ;PIR_B1.c: 139: }
  4623                           ;PIR_B1.c: 140: }
  4624                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  4625  00EA  01C7               	clrf	(__PIR^(0+128)+39)
  4626  00EB                     l5300:	
  4627                           
  4628                           ;PIR_B1.c: 142: }
  4629                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4630                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4631  00EB  0848               	movf	(__PIR^(0+128)+40),w
  4632  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4633  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4634  00EE  00D7               	movwf	??_PIR_Main
  4635  00EF  01D8               	clrf	??_PIR_Main+1
  4636  00F0  09D7               	comf	??_PIR_Main,f
  4637  00F1  09D8               	comf	??_PIR_Main+1,f
  4638  00F2  0AD7               	incf	??_PIR_Main,f
  4639  00F3  1903               	skipnz
  4640  00F4  0AD8               	incf	??_PIR_Main+1,f
  4641  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  4642  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  4643  00F7  0823               	movf	(__PIR^(0+128)+3),w
  4644  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  4645  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  4646  00FA  0757               	addwf	??_PIR_Main,w
  4647  00FB  00D9               	movwf	??_PIR_Main+2
  4648  00FC  0858               	movf	??_PIR_Main+1,w
  4649  00FD  1803               	skipnc
  4650  00FE  0A58               	incf	??_PIR_Main+1,w
  4651  00FF  00DA               	movwf	??_PIR_Main+3
  4652  0100  085A               	movf	??_PIR_Main+3,w
  4653  0101  3A80               	xorlw	128
  4654  0102  3C80               	sublw	128
  4655  0103  1D03               	skipz
  4656  0104  2909               	goto	u6785
  4657  0105  0859               	movf	??_PIR_Main+2,w
  4658  0106  1683               	bsf	3,5	;RP0=1, select bank1
  4659  0107  1303               	bcf	3,6	;RP1=0, select bank1
  4660  0108  0221               	subwf	(__PIR^(0+128)+1),w
  4661  0109                     u6785:	
  4662  0109  1C03               	skipc
  4663  010A  292B               	goto	l5310
  4664  010B  1683               	bsf	3,5	;RP0=1, select bank1
  4665  010C  1303               	bcf	3,6	;RP1=0, select bank1
  4666  010D  0823               	movf	(__PIR^(0+128)+3),w
  4667  010E  0748               	addwf	(__PIR^(0+128)+40),w
  4668  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4669  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4670  0111  00D7               	movwf	??_PIR_Main
  4671  0112  01D8               	clrf	??_PIR_Main+1
  4672  0113  0DD8               	rlf	??_PIR_Main+1,f
  4673  0114  0858               	movf	??_PIR_Main+1,w
  4674  0115  3A80               	xorlw	128
  4675  0116  00D9               	movwf	??_PIR_Main+2
  4676  0117  3080               	movlw	128
  4677  0118  0259               	subwf	??_PIR_Main+2,w
  4678  0119  1D03               	skipz
  4679  011A  2921               	goto	u6795
  4680  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4681  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4682  011D  0821               	movf	(__PIR^(0+128)+1),w
  4683  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4684  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4685  0120  0257               	subwf	??_PIR_Main,w
  4686  0121                     u6795:	
  4687  0121  1C03               	skipc
  4688  0122  292B               	goto	l5310
  4689                           
  4690                           ;PIR_B1.c: 148: _PIR.Count = 0;
  4691  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4692  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4693  0125  01BE               	clrf	(__PIR^(0+128)+30)
  4694  0126  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4695                           
  4696                           ;PIR_B1.c: 155: setLED(1, 0);
  4697  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0129  01D1               	clrf	setLED@command
  4700  012A  2997               	goto	L13
  4701  012B                     l5310:	
  4702                           ;PIR_B1.c: 159: } else {
  4703                           
  4704                           ;PIR_B1.c: 156: setLED(2, 0);
  4705                           
  4706                           
  4707                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  4708  012B  3001               	movlw	1
  4709  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4710  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4711  012E  00D7               	movwf	??_PIR_Main
  4712  012F  0857               	movf	??_PIR_Main,w
  4713  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4714  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4715  0132  07C7               	addwf	(__PIR^(0+128)+39),f
  4716                           
  4717                           ;PIR_B1.c: 163: _PIR.Count++;
  4718  0133  3001               	movlw	1
  4719  0134  07BE               	addwf	(__PIR^(0+128)+30),f
  4720  0135  1803               	skipnc
  4721  0136  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4722  0137  3000               	movlw	0
  4723  0138  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4724                           
  4725                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  4726  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4727  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4728  013B  0862               	movf	PIR_Main@LightsStatus,w
  4729  013C  3A01               	xorlw	1
  4730  013D  1903               	skipnz
  4731  013E  293F               	goto	l5318
  4732  013F                     l5318:	
  4733  013F  3003               	movlw	3
  4734  0140  00DF               	movwf	_PIR_Main$2874
  4735  0141  3000               	movlw	0
  4736  0142  00E0               	movwf	_PIR_Main$2874+1
  4737  0143  085F               	movf	_PIR_Main$2874,w
  4738  0144  00D7               	movwf	??_PIR_Main
  4739  0145  0857               	movf	??_PIR_Main,w
  4740  0146  00E1               	movwf	PIR_Main@TriggerValue
  4741                           
  4742                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  4743  0147  0861               	movf	PIR_Main@TriggerValue,w
  4744  0148  00D7               	movwf	??_PIR_Main
  4745  0149  01D8               	clrf	??_PIR_Main+1
  4746  014A  1683               	bsf	3,5	;RP0=1, select bank1
  4747  014B  1303               	bcf	3,6	;RP1=0, select bank1
  4748  014C  083F               	movf	((__PIR+1)^(0+128)+30),w
  4749  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4750  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4751  014F  0658               	xorwf	??_PIR_Main+1,w
  4752  0150  1D03               	skipz
  4753  0151  2958               	goto	u6815
  4754  0152  1683               	bsf	3,5	;RP0=1, select bank1
  4755  0153  1303               	bcf	3,6	;RP1=0, select bank1
  4756  0154  083E               	movf	(__PIR^(0+128)+30),w
  4757  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0157  0657               	xorwf	??_PIR_Main,w
  4760  0158                     u6815:	
  4761  0158  1D03               	skipz
  4762  0159  29AE               	goto	l5332
  4763                           
  4764                           ;PIR_B1.c: 168: _PIR.Count = 0;
  4765  015A  1683               	bsf	3,5	;RP0=1, select bank1
  4766  015B  1303               	bcf	3,6	;RP1=0, select bank1
  4767  015C  01BE               	clrf	(__PIR^(0+128)+30)
  4768  015D  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4769                           
  4770                           ;PIR_B1.c: 175: if (getLights_Status(1) == 0) {
  4771  015E  3001               	movlw	1
  4772  015F  158A  2355  118A   	fcall	_getLights_Status
  4773  0162  3800               	iorlw	0
  4774  0163  1D03               	skipz
  4775  0164  296D               	goto	l5326
  4776                           
  4777                           ;PIR_B1.c: 176: setLights_SwOn(1);
  4778  0165  3001               	movlw	1
  4779  0166  158A  24D5  118A   	fcall	_setLights_SwOn
  4780                           
  4781                           ;PIR_B1.c: 177: setLights_SwOff(1);
  4782  0169  3001               	movlw	1
  4783  016A  158A  242A  118A   	fcall	_setLights_SwOff
  4784  016D                     l5326:	
  4785                           
  4786                           ;PIR_B1.c: 179: }
  4787                           ;PIR_B1.c: 193: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4788  016D  1683               	bsf	3,5	;RP0=1, select bank1
  4789  016E  1303               	bcf	3,6	;RP1=0, select bank1
  4790  016F  0848               	movf	(__PIR^(0+128)+40),w
  4791  0170  1283               	bcf	3,5	;RP0=0, select bank0
  4792  0171  1303               	bcf	3,6	;RP1=0, select bank0
  4793  0172  00D7               	movwf	??_PIR_Main
  4794  0173  01D8               	clrf	??_PIR_Main+1
  4795  0174  09D7               	comf	??_PIR_Main,f
  4796  0175  09D8               	comf	??_PIR_Main+1,f
  4797  0176  0AD7               	incf	??_PIR_Main,f
  4798  0177  1903               	skipnz
  4799  0178  0AD8               	incf	??_PIR_Main+1,f
  4800  0179  1683               	bsf	3,5	;RP0=1, select bank1
  4801  017A  1303               	bcf	3,6	;RP1=0, select bank1
  4802  017B  0823               	movf	(__PIR^(0+128)+3),w
  4803  017C  1283               	bcf	3,5	;RP0=0, select bank0
  4804  017D  1303               	bcf	3,6	;RP1=0, select bank0
  4805  017E  0757               	addwf	??_PIR_Main,w
  4806  017F  00D9               	movwf	??_PIR_Main+2
  4807  0180  0858               	movf	??_PIR_Main+1,w
  4808  0181  1803               	skipnc
  4809  0182  0A58               	incf	??_PIR_Main+1,w
  4810  0183  00DA               	movwf	??_PIR_Main+3
  4811  0184  085A               	movf	??_PIR_Main+3,w
  4812  0185  3A80               	xorlw	128
  4813  0186  00DB               	movwf	??_PIR_Main+4
  4814  0187  3080               	movlw	128
  4815  0188  025B               	subwf	??_PIR_Main+4,w
  4816  0189  1D03               	skipz
  4817  018A  2991               	goto	u6835
  4818  018B  1683               	bsf	3,5	;RP0=1, select bank1
  4819  018C  1303               	bcf	3,6	;RP1=0, select bank1
  4820  018D  0821               	movf	(__PIR^(0+128)+1),w
  4821  018E  1283               	bcf	3,5	;RP0=0, select bank0
  4822  018F  1303               	bcf	3,6	;RP1=0, select bank0
  4823  0190  0259               	subwf	??_PIR_Main+2,w
  4824  0191                     u6835:	
  4825  0191  1C03               	skipc
  4826  0192  299F               	goto	l5330
  4827                           
  4828                           ;PIR_B1.c: 194: setLED(1, 1);
  4829  0193  1283               	bcf	3,5	;RP0=0, select bank0
  4830  0194  1303               	bcf	3,6	;RP1=0, select bank0
  4831  0195  01D1               	clrf	setLED@command
  4832  0196  0AD1               	incf	setLED@command,f
  4833  0197                     L13:	
  4834  0197  3001               	movlw	1
  4835  0198  158A  278F  118A   	fcall	_setLED
  4836                           
  4837                           ;PIR_B1.c: 195: setLED(2, 0);
  4838  019B  1283               	bcf	3,5	;RP0=0, select bank0
  4839  019C  1303               	bcf	3,6	;RP1=0, select bank0
  4840  019D  01D1               	clrf	setLED@command
  4841  019E  29AA               	goto	L10
  4842  019F                     l5330:	
  4843                           ;PIR_B1.c: 196: } else {
  4844                           
  4845                           
  4846                           ;PIR_B1.c: 197: setLED(1, 0);
  4847  019F  1283               	bcf	3,5	;RP0=0, select bank0
  4848  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  4849  01A1  01D1               	clrf	setLED@command
  4850  01A2  3001               	movlw	1
  4851  01A3  158A  278F  118A   	fcall	_setLED
  4852                           
  4853                           ;PIR_B1.c: 198: setLED(2, 1);
  4854  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  4855  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  4856  01A8  01D1               	clrf	setLED@command
  4857  01A9  0AD1               	incf	setLED@command,f
  4858  01AA                     L10:	
  4859  01AA  3002               	movlw	2
  4860  01AB  158A  278F  118A   	fcall	_setLED
  4861  01AE                     l5332:	
  4862                           
  4863                           ;PIR_B1.c: 199: }
  4864                           ;PIR_B1.c: 241: }
  4865                           ;PIR_B1.c: 242: }
  4866                           ;PIR_B1.c: 243: }
  4867                           ;PIR_B1.c: 244: }
  4868                           ;PIR_B1.c: 245: }
  4869                           ;PIR_B1.c: 246: }
  4870                           ;PIR_B1.c: 247: if (_PIR.OK == 0) {
  4871  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  4872  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  4873  01B0  19A0               	btfsc	__PIR^(0+128),3
  4874  01B1  29D9               	goto	l5346
  4875                           
  4876                           ;PIR_B1.c: 248: _PIR.Count++;
  4877  01B2  3001               	movlw	1
  4878  01B3  07BE               	addwf	(__PIR^(0+128)+30),f
  4879  01B4  1803               	skipnc
  4880  01B5  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  4881  01B6  3000               	movlw	0
  4882  01B7  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  4883                           
  4884                           ;PIR_B1.c: 249: if (_PIR.Count == (30000 / 20)) {
  4885  01B8  3005               	movlw	5
  4886  01B9  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  4887  01BA  1D03               	skipz
  4888  01BB  29BE               	goto	u6855
  4889  01BC  30DC               	movlw	220
  4890  01BD  063E               	xorwf	(__PIR^(0+128)+30),w
  4891  01BE                     u6855:	
  4892  01BE  1D03               	skipz
  4893  01BF  0008               	return
  4894                           
  4895                           ;PIR_B1.c: 250: _PIR.Count = 0;
  4896  01C0  01BE               	clrf	(__PIR^(0+128)+30)
  4897  01C1  01BF               	clrf	((__PIR+1)^(0+128)+30)
  4898                           
  4899                           ;PIR_B1.c: 251: _PIR.OK = 1;
  4900  01C2  15A0               	bsf	__PIR^(0+128),3
  4901                           
  4902                           ;PIR_B1.c: 253: setLED(1, 0);
  4903  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  4904  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  4905  01C5  01D1               	clrf	setLED@command
  4906  01C6  3001               	movlw	1
  4907  01C7  158A  278F  118A   	fcall	_setLED
  4908                           
  4909                           ;PIR_B1.c: 259: if (getLights_Status(1) == 1) {
  4910  01CA  3001               	movlw	1
  4911  01CB  158A  2355  118A   	fcall	_getLights_Status
  4912  01CE  3A01               	xorlw	1
  4913  01CF  1D03               	skipz
  4914  01D0  0008               	return
  4915                           
  4916                           ;PIR_B1.c: 260: setLights_SwOn(1);
  4917  01D1  3001               	movlw	1
  4918  01D2  158A  24D5  118A   	fcall	_setLights_SwOn
  4919                           
  4920                           ;PIR_B1.c: 261: setLights_SwOff(1);
  4921  01D5  3001               	movlw	1
  4922  01D6  158A  242A         	fcall	_setLights_SwOff
  4923                           
  4924                           ;PIR_B1.c: 263: }
  4925                           ;PIR_B1.c: 276: }
  4926                           ;PIR_B1.c: 277: } else {
  4927  01D8  0008               	return
  4928  01D9                     l5346:	
  4929                           
  4930                           ;PIR_B1.c: 278: if (LightsStatus == 1) {
  4931  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  4932  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  4933  01DB  0862               	movf	PIR_Main@LightsStatus,w
  4934  01DC  3A01               	xorlw	1
  4935  01DD  1D03               	skipz
  4936  01DE  2A09               	goto	l5364
  4937                           
  4938                           ;PIR_B1.c: 279: _PIR.CloseTimeSeconds++;
  4939  01DF  3001               	movlw	1
  4940  01E0  00D7               	movwf	??_PIR_Main
  4941  01E1  0857               	movf	??_PIR_Main,w
  4942  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  4943  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  4944  01E4  07C2               	addwf	(__PIR^(0+128)+34),f
  4945                           
  4946                           ;PIR_B1.c: 280: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4947  01E5  0842               	movf	(__PIR^(0+128)+34),w
  4948  01E6  3A32               	xorlw	50
  4949  01E7  1D03               	skipz
  4950  01E8  0008               	return
  4951                           
  4952                           ;PIR_B1.c: 281: _PIR.CloseTimeSeconds = 0;
  4953  01E9  01C2               	clrf	(__PIR^(0+128)+34)
  4954                           
  4955                           ;PIR_B1.c: 282: _PIR.CloseTimeMinutes++;
  4956  01EA  3001               	movlw	1
  4957  01EB  07C0               	addwf	(__PIR^(0+128)+32),f
  4958  01EC  1803               	skipnc
  4959  01ED  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  4960  01EE  3000               	movlw	0
  4961  01EF  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  4962                           
  4963                           ;PIR_B1.c: 283: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4964  01F0  0844               	movf	((__PIR+1)^(0+128)+35),w
  4965  01F1  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  4966  01F2  1D03               	skipz
  4967  01F3  29F6               	goto	u6895
  4968  01F4  0843               	movf	(__PIR^(0+128)+35),w
  4969  01F5  0640               	xorwf	(__PIR^(0+128)+32),w
  4970  01F6                     u6895:	
  4971  01F6  1D03               	skipz
  4972  01F7  0008               	return
  4973                           
  4974                           ;PIR_B1.c: 284: _PIR.CloseTimeMinutes = 0;
  4975  01F8  01C0               	clrf	(__PIR^(0+128)+32)
  4976  01F9  01C1               	clrf	((__PIR+1)^(0+128)+32)
  4977                           
  4978                           ;PIR_B1.c: 290: if (getLights_Status(1) == 1) {
  4979  01FA  3001               	movlw	1
  4980  01FB  158A  2355  118A   	fcall	_getLights_Status
  4981  01FE  3A01               	xorlw	1
  4982  01FF  1D03               	skipz
  4983  0200  0008               	return
  4984                           
  4985                           ;PIR_B1.c: 291: setLights_SwOn(1);
  4986  0201  3001               	movlw	1
  4987  0202  158A  24D5  118A   	fcall	_setLights_SwOn
  4988                           
  4989                           ;PIR_B1.c: 292: setLights_SwOff(1);
  4990  0205  3001               	movlw	1
  4991  0206  158A  242A         	fcall	_setLights_SwOff
  4992                           
  4993                           ;PIR_B1.c: 294: }
  4994                           ;PIR_B1.c: 306: }
  4995                           ;PIR_B1.c: 307: }
  4996                           ;PIR_B1.c: 308: } else {
  4997  0208  0008               	return
  4998  0209                     l5364:	
  4999                           
  5000                           ;PIR_B1.c: 309: _PIR.CloseTimeSeconds = 0;
  5001  0209  1683               	bsf	3,5	;RP0=1, select bank1
  5002  020A  1303               	bcf	3,6	;RP1=0, select bank1
  5003  020B  01C2               	clrf	(__PIR^(0+128)+34)
  5004                           
  5005                           ;PIR_B1.c: 310: _PIR.CloseTimeMinutes = 0;
  5006  020C  01C0               	clrf	(__PIR^(0+128)+32)
  5007  020D  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5008                           
  5009                           ;PIR_B1.c: 311: }
  5010                           ;PIR_B1.c: 312: }
  5011                           ;PIR_B1.c: 313: } else {
  5012  020E  0008               	return
  5013  020F                     l927:	
  5014                           
  5015                           ;PIR_B1.c: 314: if (myMain.PowerON == 1) {
  5016  020F  1283               	bcf	3,5	;RP0=0, select bank0
  5017  0210  1303               	bcf	3,6	;RP1=0, select bank0
  5018  0211  1C25               	btfss	_myMain,0
  5019  0212  0008               	return
  5020                           
  5021                           ;PIR_B1.c: 315: _PIR.Enable = 1;
  5022  0213  1683               	bsf	3,5	;RP0=1, select bank1
  5023  0214  1303               	bcf	3,6	;RP1=0, select bank1
  5024  0215  1420               	bsf	__PIR^(0+128),0
  5025                           
  5026                           ;PIR_B1.c: 317: setLED(1, 1);
  5027  0216  1283               	bcf	3,5	;RP0=0, select bank0
  5028  0217  1303               	bcf	3,6	;RP1=0, select bank0
  5029  0218  01D1               	clrf	setLED@command
  5030  0219  0AD1               	incf	setLED@command,f
  5031  021A  3001               	movlw	1
  5032  021B  158A  278F  118A   	fcall	_setLED
  5033                           
  5034                           ;PIR_B1.c: 322: if (getLights_Status(1) == 0) {
  5035  021E  3001               	movlw	1
  5036  021F  158A  2355  118A   	fcall	_getLights_Status
  5037  0222  3800               	iorlw	0
  5038  0223  1D03               	skipz
  5039  0224  0008               	return
  5040                           
  5041                           ;PIR_B1.c: 323: setLights_SwOn(1);
  5042  0225  3001               	movlw	1
  5043  0226  158A  24D5  118A   	fcall	_setLights_SwOn
  5044                           
  5045                           ;PIR_B1.c: 324: setLights_SwOff(1);
  5046  0229  3001               	movlw	1
  5047  022A  158A  242A         	fcall	_setLights_SwOff
  5048  022C  0008               	return
  5049  022D                     __end_of_PIR_Main:	
  5050                           
  5051                           	psect	text21
  5052  0ACC                     __ptext21:	
  5053 ;; *************** function _getCDS_Status *****************
  5054 ;; Defined at:
  5055 ;;		line 42 in file "../src/CDS_B1.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  status          1    4[COMMON] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      unsigned char 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5069 ;;      Params:         0       0       0       0
  5070 ;;      Locals:         1       0       0       0
  5071 ;;      Temps:          0       0       0       0
  5072 ;;      Totals:         1       0       0       0
  5073 ;;Total ram usage:        1 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    2
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_PIR_Main
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function _getCDS_Status
  5085  0ACC                     _getCDS_Status:	
  5086                           
  5087                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5091  0ACC  3000               	movlw	0
  5092  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  5093  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  5094  0ACF  1A2E               	btfsc	__CDS,4
  5095  0AD0  3001               	movlw	1
  5096  0AD1  00F4               	movwf	getCDS_Status@status
  5097                           
  5098                           ;CDS_B1.c: 44: return status;
  5099  0AD2  0874               	movf	getCDS_Status@status,w
  5100  0AD3  0008               	return
  5101  0AD4                     __end_of_getCDS_Status:	
  5102                           
  5103                           	psect	text22
  5104  07F5                     __ptext22:	
  5105 ;; *************** function _PIR_Initialization *****************
  5106 ;; Defined at:
  5107 ;;		line 7 in file "../src/PIR_B1.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;		None
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;		None
  5112 ;; Return value:  Size  Location     Type
  5113 ;;		None               void
  5114 ;; Registers used:
  5115 ;;		wreg
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5121 ;;      Params:         0       0       0       0
  5122 ;;      Locals:         0       0       0       0
  5123 ;;      Temps:          1       0       0       0
  5124 ;;      Totals:         1       0       0       0
  5125 ;;Total ram usage:        1 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:    2
  5128 ;; This function calls:
  5129 ;;		Nothing
  5130 ;; This function is called by:
  5131 ;;		_main
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           
  5136                           ;psect for function _PIR_Initialization
  5137  07F5                     _PIR_Initialization:	
  5138                           
  5139                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5140                           
  5141                           ;incstack = 0
  5142                           ; Regs used in _PIR_Initialization: [wreg]
  5143  07F5  3019               	movlw	25
  5144  07F6  00F4               	movwf	??_PIR_Initialization
  5145  07F7  0874               	movf	??_PIR_Initialization,w
  5146  07F8  1683               	bsf	3,5	;RP0=1, select bank1
  5147  07F9  1303               	bcf	3,6	;RP1=0, select bank1
  5148  07FA  00C8               	movwf	(__PIR^(0+128)+40)
  5149                           
  5150                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5151  07FB  3005               	movlw	5
  5152  07FC  00C3               	movwf	(__PIR^(0+128)+35)
  5153  07FD  3000               	movlw	0
  5154  07FE  00C4               	movwf	(__PIR^(0+128)+36)
  5155  07FF  0008               	return
  5156  0800                     __end_of_PIR_Initialization:	
  5157                           
  5158                           	psect	text23
  5159  0B46                     __ptext23:	
  5160 ;; *************** function _Mcu_Initialization *****************
  5161 ;; Defined at:
  5162 ;;		line 30 in file "../src/MCU_B1.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;		None
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;		None               void
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0, pclath, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5176 ;;      Params:         0       0       0       0
  5177 ;;      Locals:         0       0       0       0
  5178 ;;      Temps:          0       0       0       0
  5179 ;;      Totals:         0       0       0       0
  5180 ;;Total ram usage:        0 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    3
  5183 ;; This function calls:
  5184 ;;		_ADC_Set
  5185 ;;		_Fosc_Set
  5186 ;;		_IO_Set
  5187 ;;		_TMR1_Set
  5188 ;;		_WDT_Set
  5189 ;; This function is called by:
  5190 ;;		_main
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           
  5195                           ;psect for function _Mcu_Initialization
  5196  0B46                     _Mcu_Initialization:	
  5197                           
  5198                           ;MCU_B1.c: 32: Fosc_Set();
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5202  0B46  158A  229F  158A   	fcall	_Fosc_Set
  5203                           
  5204                           ;MCU_B1.c: 34: IO_Set();
  5205  0B49  158A  23F8  158A   	fcall	_IO_Set
  5206                           
  5207                           ;MCU_B1.c: 36: ;;
  5208                           ;MCU_B1.c: 38: TMR1_Set();
  5209  0B4C  158A  232A  158A   	fcall	_TMR1_Set
  5210                           
  5211                           ;MCU_B1.c: 40: ADC_Set();
  5212  0B4F  158A  22BD  158A   	fcall	_ADC_Set
  5213                           
  5214                           ;MCU_B1.c: 42: ;;
  5215                           ;MCU_B1.c: 44: ;;
  5216                           ;MCU_B1.c: 46: ;;
  5217                           ;MCU_B1.c: 48: ;;
  5218                           ;MCU_B1.c: 50: ;;
  5219                           ;MCU_B1.c: 52: WDT_Set();
  5220  0B52  158A  2338         	fcall	_WDT_Set
  5221  0B54  0008               	return
  5222  0B55                     __end_of_Mcu_Initialization:	
  5223                           
  5224                           	psect	text24
  5225  0B38                     __ptext24:	
  5226 ;; *************** function _WDT_Set *****************
  5227 ;; Defined at:
  5228 ;;		line 1102 in file "../src/MCU_B1.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;		None
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;		None
  5233 ;; Return value:  Size  Location     Type
  5234 ;;		None               void
  5235 ;; Registers used:
  5236 ;;		wreg
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5242 ;;      Params:         0       0       0       0
  5243 ;;      Locals:         0       0       0       0
  5244 ;;      Temps:          1       0       0       0
  5245 ;;      Totals:         1       0       0       0
  5246 ;;Total ram usage:        1 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    2
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_Mcu_Initialization
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _WDT_Set
  5258  0B38                     _WDT_Set:	
  5259                           
  5260                           ;MCU_B1.c: 1104: PSA = 1;
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _WDT_Set: [wreg]
  5264  0B38  1683               	bsf	3,5	;RP0=1, select bank1
  5265  0B39  1303               	bcf	3,6	;RP1=0, select bank1
  5266  0B3A  1581               	bsf	1,3	;volatile
  5267                           
  5268                           ;MCU_B1.c: 1105: PS0 = 1;
  5269  0B3B  1401               	bsf	1,0	;volatile
  5270                           
  5271                           ;MCU_B1.c: 1106: PS1 = 1;
  5272  0B3C  1481               	bsf	1,1	;volatile
  5273                           
  5274                           ;MCU_B1.c: 1107: PS2 = 1;
  5275  0B3D  1501               	bsf	1,2	;volatile
  5276                           
  5277                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5278  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  5279  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  5280  0B40  1435               	bsf	_WDT,0
  5281                           
  5282                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5283  0B41  300A               	movlw	10
  5284  0B42  00F4               	movwf	??_WDT_Set
  5285  0B43  0874               	movf	??_WDT_Set,w
  5286  0B44  00B6               	movwf	_WDT+1
  5287  0B45  0008               	return
  5288  0B46                     __end_of_WDT_Set:	
  5289                           
  5290                           	psect	text25
  5291  0B2A                     __ptext25:	
  5292 ;; *************** function _TMR1_Set *****************
  5293 ;; Defined at:
  5294 ;;		line 226 in file "../src/MCU_B1.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;		None
  5299 ;; Return value:  Size  Location     Type
  5300 ;;		None               void
  5301 ;; Registers used:
  5302 ;;		wreg
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5308 ;;      Params:         0       0       0       0
  5309 ;;      Locals:         0       0       0       0
  5310 ;;      Temps:          0       0       0       0
  5311 ;;      Totals:         0       0       0       0
  5312 ;;Total ram usage:        0 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    2
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_Mcu_Initialization
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _TMR1_Set
  5324  0B2A                     _TMR1_Set:	
  5325                           
  5326                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5327                           
  5328                           ;incstack = 0
  5329                           ; Regs used in _TMR1_Set: [wreg]
  5330  0B2A  3041               	movlw	65
  5331  0B2B  1283               	bcf	3,5	;RP0=0, select bank0
  5332  0B2C  1303               	bcf	3,6	;RP1=0, select bank0
  5333  0B2D  0090               	movwf	16	;volatile
  5334                           
  5335                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5336  0B2E  30FA               	movlw	250
  5337  0B2F  008F               	movwf	15	;volatile
  5338                           
  5339                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5340  0B30  3038               	movlw	56
  5341  0B31  008E               	movwf	14	;volatile
  5342                           
  5343                           ;MCU_B1.c: 230: TMR1IE = 1;
  5344  0B32  1683               	bsf	3,5	;RP0=1, select bank1
  5345  0B33  1303               	bcf	3,6	;RP1=0, select bank1
  5346  0B34  140C               	bsf	12,0	;volatile
  5347                           
  5348                           ;MCU_B1.c: 231: PEIE = 1;
  5349  0B35  170B               	bsf	11,6	;volatile
  5350                           
  5351                           ;MCU_B1.c: 232: GIE = 1;
  5352  0B36  178B               	bsf	11,7	;volatile
  5353  0B37  0008               	return
  5354  0B38                     __end_of_TMR1_Set:	
  5355                           
  5356                           	psect	text26
  5357  0BF8                     __ptext26:	
  5358 ;; *************** function _IO_Set *****************
  5359 ;; Defined at:
  5360 ;;		line 60 in file "../src/MCU_B1.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;		None               void
  5367 ;; Registers used:
  5368 ;;		wreg, status,2
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5374 ;;      Params:         0       0       0       0
  5375 ;;      Locals:         0       0       0       0
  5376 ;;      Temps:          0       0       0       0
  5377 ;;      Totals:         0       0       0       0
  5378 ;;Total ram usage:        0 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    2
  5381 ;; This function calls:
  5382 ;;		Nothing
  5383 ;; This function is called by:
  5384 ;;		_Mcu_Initialization
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           
  5389                           ;psect for function _IO_Set
  5390  0BF8                     _IO_Set:	
  5391                           
  5392                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _IO_Set: [wreg+status,2]
  5396  0BF8  302F               	movlw	47
  5397  0BF9  1683               	bsf	3,5	;RP0=1, select bank1
  5398  0BFA  1303               	bcf	3,6	;RP1=0, select bank1
  5399  0BFB  0085               	movwf	5	;volatile
  5400                           
  5401                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5402  0BFC  3001               	movlw	1
  5403  0BFD  0086               	movwf	6	;volatile
  5404                           
  5405                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5406  0BFE  0187               	clrf	7	;volatile
  5407                           
  5408                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5409  0BFF  3007               	movlw	7
  5410  0C00  1683               	bsf	3,5	;RP0=1, select bank3
  5411  0C01  1703               	bsf	3,6	;RP1=1, select bank3
  5412  0C02  0085               	movwf	5	;volatile
  5413                           
  5414                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5415  0C03  3001               	movlw	1
  5416  0C04  0086               	movwf	6	;volatile
  5417                           
  5418                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5419  0C05  30AF               	movlw	175
  5420  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0C08  0085               	movwf	5	;volatile
  5423                           
  5424                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5425  0C09  3001               	movlw	1
  5426  0C0A  0086               	movwf	6	;volatile
  5427                           
  5428                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5429  0C0B  0187               	clrf	7	;volatile
  5430                           
  5431                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  5432  0C0C  1683               	bsf	3,5	;RP0=1, select bank1
  5433  0C0D  1303               	bcf	3,6	;RP1=0, select bank1
  5434  0C0E  0195               	clrf	21	;volatile
  5435  0C0F  0008               	return
  5436  0C10                     __end_of_IO_Set:	
  5437                           
  5438                           	psect	text27
  5439  0A9F                     __ptext27:	
  5440 ;; *************** function _Fosc_Set *****************
  5441 ;; Defined at:
  5442 ;;		line 56 in file "../src/MCU_B1.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		wreg
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5456 ;;      Params:         0       0       0       0
  5457 ;;      Locals:         0       0       0       0
  5458 ;;      Temps:          0       0       0       0
  5459 ;;      Totals:         0       0       0       0
  5460 ;;Total ram usage:        0 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    2
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_Mcu_Initialization
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _Fosc_Set
  5472  0A9F                     _Fosc_Set:	
  5473                           
  5474                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _Fosc_Set: [wreg]
  5478  0A9F  303C               	movlw	60
  5479  0AA0  1683               	bsf	3,5	;RP0=1, select bank1
  5480  0AA1  1303               	bcf	3,6	;RP1=0, select bank1
  5481  0AA2  0090               	movwf	16	;volatile
  5482  0AA3  0008               	return
  5483  0AA4                     __end_of_Fosc_Set:	
  5484                           
  5485                           	psect	text28
  5486  0ABD                     __ptext28:	
  5487 ;; *************** function _ADC_Set *****************
  5488 ;; Defined at:
  5489 ;;		line 427 in file "../src/MCU_B1.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;		None
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;		None               void
  5496 ;; Registers used:
  5497 ;;		wreg
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5503 ;;      Params:         0       0       0       0
  5504 ;;      Locals:         0       0       0       0
  5505 ;;      Temps:          0       0       0       0
  5506 ;;      Totals:         0       0       0       0
  5507 ;;Total ram usage:        0 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    2
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_Mcu_Initialization
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _ADC_Set
  5519  0ABD                     _ADC_Set:	
  5520                           
  5521                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  5522                           
  5523                           ;incstack = 0
  5524                           ; Regs used in _ADC_Set: [wreg]
  5525  0ABD  3073               	movlw	115
  5526  0ABE  1683               	bsf	3,5	;RP0=1, select bank1
  5527  0ABF  1303               	bcf	3,6	;RP1=0, select bank1
  5528  0AC0  009F               	movwf	31	;volatile
  5529                           
  5530                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  5531  0AC1  30C1               	movlw	193
  5532  0AC2  009D               	movwf	29	;volatile
  5533  0AC3  0008               	return
  5534  0AC4                     __end_of_ADC_Set:	
  5535                           
  5536                           	psect	text29
  5537  022D                     __ptext29:	
  5538 ;; *************** function _Load_Main *****************
  5539 ;; Defined at:
  5540 ;;		line 39 in file "../src/OverLoad_B1.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  i               2   15[BANK0 ] int 
  5545 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  5546 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  5547 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  5548 ;;  error           1    9[BANK0 ] unsigned char 
  5549 ;; Return value:  Size  Location     Type
  5550 ;;		None               void
  5551 ;; Registers used:
  5552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5558 ;;      Params:         0       0       0       0
  5559 ;;      Locals:         0       8       0       0
  5560 ;;      Temps:          0       2       0       0
  5561 ;;      Totals:         0      10       0       0
  5562 ;;Total ram usage:       10 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    3
  5565 ;; This function calls:
  5566 ;;		___lwdiv
  5567 ;;		___wmul
  5568 ;;		_getLight_LoadGO
  5569 ;;		_getLight_Load_Status
  5570 ;;		_getMain_All_Error_Status
  5571 ;;		_getMain_All_LightsStatus
  5572 ;;		_getMain_Lights_Count
  5573 ;;		_setLoad_AH_AL_Restore
  5574 ;; This function is called by:
  5575 ;;		_main
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _Load_Main
  5581  022D                     _Load_Main:	
  5582                           
  5583                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5584                           
  5585                           ;incstack = 0
  5586                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5587  022D  3000               	movlw	0
  5588  022E  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  5589  0231  1283               	bcf	3,5	;RP0=0, select bank0
  5590  0232  1303               	bcf	3,6	;RP1=0, select bank0
  5591  0233  00D8               	movwf	??_Load_Main
  5592  0234  0858               	movf	??_Load_Main,w
  5593  0235  00DA               	movwf	Load_Main@error
  5594                           
  5595                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  5596  0236  01DE               	clrf	Load_Main@Load_RunStatus
  5597  0237  01DD               	clrf	Load_Main@ErrorCountValue
  5598  0238  01DF               	clrf	Load_Main@LightsCount
  5599                           
  5600                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5601  0239  1683               	bsf	3,5	;RP0=1, select bank1
  5602  023A  1303               	bcf	3,6	;RP1=0, select bank1
  5603  023B  1C4A               	btfss	_Load^(0+128),0
  5604  023C  2C0F               	goto	l725
  5605                           
  5606                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  5607  023D  158A  22E5  118A   	fcall	_getMain_All_LightsStatus
  5608  0240  3800               	iorlw	0
  5609  0241  1D03               	skipz
  5610  0242  2A46               	goto	l5070
  5611                           
  5612                           ;OverLoad_B1.c: 45: Load.GO = 0;
  5613  0243  1683               	bsf	3,5	;RP0=1, select bank1
  5614  0244  1303               	bcf	3,6	;RP1=0, select bank1
  5615  0245  2A65               	goto	l5086
  5616  0246                     l5070:	
  5617                           ;OverLoad_B1.c: 46: } else {
  5618                           
  5619                           
  5620                           ;OverLoad_B1.c: 69: if (error == 0) {
  5621  0246  1283               	bcf	3,5	;RP0=0, select bank0
  5622  0247  1303               	bcf	3,6	;RP1=0, select bank0
  5623  0248  08DA               	movf	Load_Main@error,f
  5624  0249  1D03               	skipz
  5625  024A  2A62               	goto	l728
  5626                           
  5627                           ;OverLoad_B1.c: 70: Load.GO = 1;
  5628  024B  1683               	bsf	3,5	;RP0=1, select bank1
  5629  024C  1303               	bcf	3,6	;RP1=0, select bank1
  5630  024D  14CA               	bsf	_Load^(0+128),1
  5631                           
  5632                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  5633  024E  158A  22A4  118A   	fcall	_getLight_LoadGO
  5634  0251  3A01               	xorlw	1
  5635  0252  1D03               	skipz
  5636  0253  2A5C               	goto	l729
  5637                           
  5638                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  5639  0254  1683               	bsf	3,5	;RP0=1, select bank1
  5640  0255  1303               	bcf	3,6	;RP1=0, select bank1
  5641  0256  1DCA               	btfss	_Load^(0+128),3
  5642  0257  1BCA               	btfsc	_Load^(0+128),7
  5643  0258  2A66               	goto	l727
  5644                           
  5645                           ;OverLoad_B1.c: 74: Load.Run = 1;
  5646  0259  15CA               	bsf	_Load^(0+128),3
  5647                           
  5648                           ;OverLoad_B1.c: 75: Load.Count = 0;
  5649  025A  01E3               	clrf	(_Load^(0+128)+25)
  5650                           
  5651                           ;OverLoad_B1.c: 76: }
  5652                           ;OverLoad_B1.c: 77: } else {
  5653  025B  2A66               	goto	l727
  5654  025C                     l729:	
  5655                           
  5656                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  5657  025C  1683               	bsf	3,5	;RP0=1, select bank1
  5658  025D  1303               	bcf	3,6	;RP1=0, select bank1
  5659  025E  1FCA               	btfss	_Load^(0+128),7
  5660  025F  2A66               	goto	l727
  5661                           
  5662                           ;OverLoad_B1.c: 79: Load.OK = 0;
  5663  0260  13CA               	bcf	_Load^(0+128),7
  5664                           
  5665                           ;OverLoad_B1.c: 80: }
  5666                           ;OverLoad_B1.c: 81: }
  5667                           ;OverLoad_B1.c: 82: } else {
  5668  0261  2A66               	goto	l727
  5669  0262                     l728:	
  5670                           
  5671                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  5672  0262  1683               	bsf	3,5	;RP0=1, select bank1
  5673  0263  1303               	bcf	3,6	;RP1=0, select bank1
  5674  0264  18CA               	btfsc	_Load^(0+128),1
  5675  0265                     l5086:	
  5676                           
  5677                           ;OverLoad_B1.c: 84: Load.GO = 0;
  5678  0265  10CA               	bcf	_Load^(0+128),1
  5679  0266                     l727:	
  5680                           
  5681                           ;OverLoad_B1.c: 85: }
  5682                           ;OverLoad_B1.c: 86: }
  5683                           ;OverLoad_B1.c: 88: }
  5684                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  5685  0266  1CCA               	btfss	_Load^(0+128),1
  5686  0267  2BE8               	goto	l735
  5687                           
  5688                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  5689  0268  154A               	bsf	_Load^(0+128),2
  5690                           
  5691                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  5692  0269  1E4A               	btfss	_Load^(0+128),4
  5693  026A  2BE6               	goto	l736
  5694                           
  5695                           ;OverLoad_B1.c: 95: Load.Time++;
  5696  026B  3001               	movlw	1
  5697  026C  07CB               	addwf	(_Load^(0+128)+1),f
  5698  026D  1803               	skipnc
  5699  026E  0ACC               	incf	((_Load+1)^(0+128)+1),f
  5700  026F  3000               	movlw	0
  5701  0270  07CC               	addwf	((_Load+1)^(0+128)+1),f
  5702                           
  5703                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  5704  0271  3000               	movlw	0
  5705  0272  024C               	subwf	((_Load+1)^(0+128)+1),w
  5706  0273  3002               	movlw	2
  5707  0274  1903               	skipnz
  5708  0275  024B               	subwf	(_Load^(0+128)+1),w
  5709  0276  1C03               	skipc
  5710  0277  0008               	return
  5711                           
  5712                           ;OverLoad_B1.c: 97: Load.Time = 0;
  5713  0278  01CB               	clrf	(_Load^(0+128)+1)
  5714  0279  01CC               	clrf	((_Load+1)^(0+128)+1)
  5715                           
  5716                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  5717  027A  124A               	bcf	_Load^(0+128),4
  5718                           
  5719                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  5720  027B  3001               	movlw	1
  5721  027C  1283               	bcf	3,5	;RP0=0, select bank0
  5722  027D  1303               	bcf	3,6	;RP1=0, select bank0
  5723  027E  00E0               	movwf	Load_Main@i
  5724  027F  3000               	movlw	0
  5725  0280  00E1               	movwf	Load_Main@i+1
  5726  0281  0861               	movf	Load_Main@i+1,w
  5727  0282  3A80               	xorlw	128
  5728  0283  00FF               	movwf	127
  5729  0284  3080               	movlw	128
  5730  0285  027F               	subwf	127,w
  5731  0286  1D03               	skipz
  5732  0287  2A8A               	goto	u6335
  5733  0288  3004               	movlw	4
  5734  0289  0260               	subwf	Load_Main@i,w
  5735  028A                     u6335:	
  5736  028A  1803               	btfsc	3,0
  5737  028B  2AC8               	goto	l5108
  5738  028C                     l5102:	
  5739                           
  5740                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  5741  028C  1283               	bcf	3,5	;RP0=0, select bank0
  5742  028D  1303               	bcf	3,6	;RP1=0, select bank0
  5743  028E  0860               	movf	Load_Main@i,w
  5744  028F  3ED4               	addlw	(_Load+10)& (0+255)
  5745  0290  0084               	movwf	4
  5746  0291  1383               	bcf	3,7	;select IRP bank1
  5747  0292  0800               	movf	0,w
  5748  0293  00D8               	movwf	??_Load_Main
  5749  0294  01D9               	clrf	??_Load_Main+1
  5750  0295  0858               	movf	??_Load_Main,w
  5751  0296  1683               	bsf	3,5	;RP0=1, select bank1
  5752  0297  1303               	bcf	3,6	;RP1=0, select bank1
  5753  0298  07CF               	addwf	(_Load^(0+128)+5),f
  5754  0299  1803               	skipnc
  5755  029A  0AD0               	incf	((_Load+1)^(0+128)+5),f
  5756  029B  1283               	bcf	3,5	;RP0=0, select bank0
  5757  029C  1303               	bcf	3,6	;RP1=0, select bank0
  5758  029D  0859               	movf	??_Load_Main+1,w
  5759  029E  1683               	bsf	3,5	;RP0=1, select bank1
  5760  029F  1303               	bcf	3,6	;RP1=0, select bank1
  5761  02A0  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5762                           
  5763                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  5764  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  5765  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  5766  02A3  0860               	movf	Load_Main@i,w
  5767  02A4  3ED9               	addlw	(_Load+15)& (0+255)
  5768  02A5  0084               	movwf	4
  5769  02A6  0800               	movf	0,w
  5770  02A7  00D8               	movwf	??_Load_Main
  5771  02A8  01D9               	clrf	??_Load_Main+1
  5772  02A9  0858               	movf	??_Load_Main,w
  5773  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  5774  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  5775  02AC  07D1               	addwf	(_Load^(0+128)+7),f
  5776  02AD  1803               	skipnc
  5777  02AE  0AD2               	incf	((_Load+1)^(0+128)+7),f
  5778  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  5779  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  5780  02B1  0859               	movf	??_Load_Main+1,w
  5781  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  5782  02B3  1303               	bcf	3,6	;RP1=0, select bank1
  5783  02B4  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5784  02B5  3001               	movlw	1
  5785  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  5786  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  5787  02B8  07E0               	addwf	Load_Main@i,f
  5788  02B9  1803               	skipnc
  5789  02BA  0AE1               	incf	Load_Main@i+1,f
  5790  02BB  3000               	movlw	0
  5791  02BC  07E1               	addwf	Load_Main@i+1,f
  5792  02BD  0861               	movf	Load_Main@i+1,w
  5793  02BE  3A80               	xorlw	128
  5794  02BF  00FF               	movwf	127
  5795  02C0  3080               	movlw	128
  5796  02C1  027F               	subwf	127,w
  5797  02C2  1D03               	skipz
  5798  02C3  2AC6               	goto	u6345
  5799  02C4  3004               	movlw	4
  5800  02C5  0260               	subwf	Load_Main@i,w
  5801  02C6                     u6345:	
  5802  02C6  1C03               	skipc
  5803  02C7  2A8C               	goto	l5102
  5804  02C8                     l5108:	
  5805                           
  5806                           ;OverLoad_B1.c: 103: }
  5807                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  5808  02C8  3003               	movlw	3
  5809  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  5810  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  5811  02CB  00D1               	movwf	___lwdiv@divisor
  5812  02CC  3000               	movlw	0
  5813  02CD  00D2               	movwf	___lwdiv@divisor+1
  5814  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  5815  02CF  1303               	bcf	3,6	;RP1=0, select bank1
  5816  02D0  0850               	movf	((_Load+1)^(0+128)+5),w
  5817  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  5818  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  5819  02D3  01D4               	clrf	___lwdiv@dividend+1
  5820  02D4  07D4               	addwf	___lwdiv@dividend+1,f
  5821  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  5822  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  5823  02D7  084F               	movf	(_Load^(0+128)+5),w
  5824  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  5825  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  5826  02DA  01D3               	clrf	___lwdiv@dividend
  5827  02DB  07D3               	addwf	___lwdiv@dividend,f
  5828  02DC  158A  25EC  118A   	fcall	___lwdiv
  5829  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  5830  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  5831  02E1  0852               	movf	?___lwdiv+1,w
  5832  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  5833  02E3  1303               	bcf	3,6	;RP1=0, select bank1
  5834  02E4  01D0               	clrf	((_Load+1)^(0+128)+5)
  5835  02E5  07D0               	addwf	((_Load+1)^(0+128)+5),f
  5836  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  5837  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  5838  02E8  0851               	movf	?___lwdiv,w
  5839  02E9  1683               	bsf	3,5	;RP0=1, select bank1
  5840  02EA  1303               	bcf	3,6	;RP1=0, select bank1
  5841  02EB  01CF               	clrf	(_Load^(0+128)+5)
  5842  02EC  07CF               	addwf	(_Load^(0+128)+5),f
  5843                           
  5844                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  5845  02ED  3003               	movlw	3
  5846  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  5847  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  5848  02F0  00D1               	movwf	___lwdiv@divisor
  5849  02F1  3000               	movlw	0
  5850  02F2  00D2               	movwf	___lwdiv@divisor+1
  5851  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  5852  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  5853  02F5  0852               	movf	((_Load+1)^(0+128)+7),w
  5854  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  5855  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  5856  02F8  01D4               	clrf	___lwdiv@dividend+1
  5857  02F9  07D4               	addwf	___lwdiv@dividend+1,f
  5858  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  5859  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  5860  02FC  0851               	movf	(_Load^(0+128)+7),w
  5861  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  5862  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  5863  02FF  01D3               	clrf	___lwdiv@dividend
  5864  0300  07D3               	addwf	___lwdiv@dividend,f
  5865  0301  158A  25EC  118A   	fcall	___lwdiv
  5866  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5867  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5868  0306  0852               	movf	?___lwdiv+1,w
  5869  0307  1683               	bsf	3,5	;RP0=1, select bank1
  5870  0308  1303               	bcf	3,6	;RP1=0, select bank1
  5871  0309  01D2               	clrf	((_Load+1)^(0+128)+7)
  5872  030A  07D2               	addwf	((_Load+1)^(0+128)+7),f
  5873  030B  1283               	bcf	3,5	;RP0=0, select bank0
  5874  030C  1303               	bcf	3,6	;RP1=0, select bank0
  5875  030D  0851               	movf	?___lwdiv,w
  5876  030E  1683               	bsf	3,5	;RP0=1, select bank1
  5877  030F  1303               	bcf	3,6	;RP1=0, select bank1
  5878  0310  01D1               	clrf	(_Load^(0+128)+7)
  5879  0311  07D1               	addwf	(_Load^(0+128)+7),f
  5880                           
  5881                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  5882  0312  158A  23B3  118A   	fcall	_setLoad_AH_AL_Restore
  5883                           
  5884                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  5885  0315  1683               	bsf	3,5	;RP0=1, select bank1
  5886  0316  1303               	bcf	3,6	;RP1=0, select bank1
  5887  0317  0852               	movf	((_Load+1)^(0+128)+7),w
  5888  0318  0250               	subwf	((_Load+1)^(0+128)+5),w
  5889  0319  1D03               	skipz
  5890  031A  2B1D               	goto	u6355
  5891  031B  0851               	movf	(_Load^(0+128)+7),w
  5892  031C  024F               	subwf	(_Load^(0+128)+5),w
  5893  031D                     u6355:	
  5894  031D  1C03               	skipc
  5895  031E  0008               	return
  5896                           
  5897                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  5898  031F  0351               	decf	(_Load^(0+128)+7),w
  5899  0320  3AFF               	xorlw	255
  5900  0321  074F               	addwf	(_Load^(0+128)+5),w
  5901  0322  1283               	bcf	3,5	;RP0=0, select bank0
  5902  0323  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0324  00D8               	movwf	??_Load_Main
  5904  0325  0858               	movf	??_Load_Main,w
  5905  0326  1683               	bsf	3,5	;RP0=1, select bank1
  5906  0327  1303               	bcf	3,6	;RP1=0, select bank1
  5907  0328  00DE               	movwf	(_Load^(0+128)+20)
  5908                           
  5909                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  5910  0329  01CF               	clrf	(_Load^(0+128)+5)
  5911  032A  01D0               	clrf	((_Load+1)^(0+128)+5)
  5912                           
  5913                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  5914  032B  01D1               	clrf	(_Load^(0+128)+7)
  5915  032C  01D2               	clrf	((_Load+1)^(0+128)+7)
  5916                           
  5917                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  5918  032D  1DCA               	btfss	_Load^(0+128),3
  5919  032E  2B92               	goto	l741
  5920                           
  5921                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  5922  032F  3002               	movlw	2
  5923  0330  0263               	subwf	(_Load^(0+128)+25),w
  5924  0331  1803               	skipnc
  5925  0332  2B92               	goto	l741
  5926                           
  5927                           ;OverLoad_B1.c: 115: Load.Count++;
  5928  0333  3001               	movlw	1
  5929  0334  1283               	bcf	3,5	;RP0=0, select bank0
  5930  0335  1303               	bcf	3,6	;RP1=0, select bank0
  5931  0336  00D8               	movwf	??_Load_Main
  5932  0337  0858               	movf	??_Load_Main,w
  5933  0338  1683               	bsf	3,5	;RP0=1, select bank1
  5934  0339  1303               	bcf	3,6	;RP1=0, select bank1
  5935  033A  07E3               	addwf	(_Load^(0+128)+25),f
  5936                           
  5937                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  5938  033B  158A  22AA  118A   	fcall	_getLight_Load_Status
  5939  033E  1283               	bcf	3,5	;RP0=0, select bank0
  5940  033F  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0340  00D8               	movwf	??_Load_Main
  5942  0341  0858               	movf	??_Load_Main,w
  5943  0342  00DE               	movwf	Load_Main@Load_RunStatus
  5944                           
  5945                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  5946  0343  158A  22F8  118A   	fcall	_getMain_Lights_Count
  5947  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5948  0347  1303               	bcf	3,6	;RP1=0, select bank0
  5949  0348  00D8               	movwf	??_Load_Main
  5950  0349  0858               	movf	??_Load_Main,w
  5951  034A  00DF               	movwf	Load_Main@LightsCount
  5952                           
  5953                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5954  034B  1683               	bsf	3,5	;RP0=1, select bank1
  5955  034C  1303               	bcf	3,6	;RP1=0, select bank1
  5956  034D  0863               	movf	(_Load^(0+128)+25),w
  5957  034E  3A01               	xorlw	1
  5958  034F  1D03               	skipz
  5959  0350  2B53               	goto	l5134
  5960                           
  5961                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*1.7);
  5962  0351  3022               	movlw	34
  5963  0352  2B60               	goto	L14
  5964  0353                     l5134:	
  5965                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5966                           
  5967  0353  0863               	movf	(_Load^(0+128)+25),w
  5968  0354  3A02               	xorlw	2
  5969  0355  1D03               	skipz
  5970  0356  2B92               	goto	l741
  5971                           
  5972                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  5973  0357  1283               	bcf	3,5	;RP0=0, select bank0
  5974  0358  1303               	bcf	3,6	;RP1=0, select bank0
  5975  0359  085F               	movf	Load_Main@LightsCount,w
  5976  035A  3A01               	xorlw	1
  5977  035B  1D03               	skipz
  5978  035C  2B63               	goto	l5140
  5979                           
  5980                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(8*1.7);
  5981  035D  300D               	movlw	13
  5982  035E  1683               	bsf	3,5	;RP0=1, select bank1
  5983  035F  1303               	bcf	3,6	;RP1=0, select bank1
  5984  0360                     L14:	
  5985  0360  00E1               	movwf	(_Load^(0+128)+23)
  5986  0361  3000               	movlw	0
  5987  0362  2B91               	goto	L15
  5988  0363                     l5140:	
  5989                           ;OverLoad_B1.c: 130: } else {
  5990                           
  5991                           
  5992                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  5993  0363  1283               	bcf	3,5	;RP0=0, select bank0
  5994  0364  08DE               	movf	Load_Main@Load_RunStatus,f
  5995  0365  1D03               	skipz
  5996  0366  2B84               	goto	l5144
  5997                           
  5998                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(8*1.7) * LightsCount;
  5999  0367  085F               	movf	Load_Main@LightsCount,w
  6000  0368  00D8               	movwf	??_Load_Main
  6001  0369  01D9               	clrf	??_Load_Main+1
  6002  036A  0858               	movf	??_Load_Main,w
  6003  036B  00D1               	movwf	___wmul@multiplier
  6004  036C  0859               	movf	??_Load_Main+1,w
  6005  036D  00D2               	movwf	___wmul@multiplier+1
  6006  036E  300D               	movlw	13
  6007  036F  00D3               	movwf	___wmul@multiplicand
  6008  0370  3000               	movlw	0
  6009  0371  00D4               	movwf	___wmul@multiplicand+1
  6010  0372  158A  24FA  118A   	fcall	___wmul
  6011  0375  1283               	bcf	3,5	;RP0=0, select bank0
  6012  0376  1303               	bcf	3,6	;RP1=0, select bank0
  6013  0377  0852               	movf	?___wmul+1,w
  6014  0378  1683               	bsf	3,5	;RP0=1, select bank1
  6015  0379  1303               	bcf	3,6	;RP1=0, select bank1
  6016  037A  01E2               	clrf	((_Load+1)^(0+128)+23)
  6017  037B  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6018  037C  1283               	bcf	3,5	;RP0=0, select bank0
  6019  037D  1303               	bcf	3,6	;RP1=0, select bank0
  6020  037E  0851               	movf	?___wmul,w
  6021  037F  1683               	bsf	3,5	;RP0=1, select bank1
  6022  0380  1303               	bcf	3,6	;RP1=0, select bank1
  6023  0381  01E1               	clrf	(_Load^(0+128)+23)
  6024  0382  07E1               	addwf	(_Load^(0+128)+23),f
  6025                           
  6026                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6027  0383  2B92               	goto	l741
  6028  0384                     l5144:	
  6029  0384  1283               	bcf	3,5	;RP0=0, select bank0
  6030  0385  085E               	movf	Load_Main@Load_RunStatus,w
  6031  0386  3A01               	xorlw	1
  6032  0387  1D03               	skipz
  6033  0388  2B92               	goto	l741
  6034                           
  6035                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(8*1.7) + Load.TotalLoad;
  6036  0389  1683               	bsf	3,5	;RP0=1, select bank1
  6037  038A  1303               	bcf	3,6	;RP1=0, select bank1
  6038  038B  0853               	movf	(_Load^(0+128)+9),w
  6039  038C  3E0D               	addlw	13
  6040  038D  00E1               	movwf	(_Load^(0+128)+23)
  6041  038E  3000               	movlw	0
  6042  038F  1803               	skipnc
  6043  0390  3001               	movlw	1
  6044  0391                     L15:	
  6045  0391  00E2               	movwf	(_Load^(0+128)+24)
  6046  0392                     l741:	
  6047                           
  6048                           ;OverLoad_B1.c: 135: }
  6049                           ;OverLoad_B1.c: 136: }
  6050                           ;OverLoad_B1.c: 137: }
  6051                           ;OverLoad_B1.c: 138: }
  6052                           ;OverLoad_B1.c: 139: }
  6053                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6054  0392  1683               	bsf	3,5	;RP0=1, select bank1
  6055  0393  1303               	bcf	3,6	;RP1=0, select bank1
  6056  0394  085E               	movf	(_Load^(0+128)+20),w
  6057  0395  1283               	bcf	3,5	;RP0=0, select bank0
  6058  0396  1303               	bcf	3,6	;RP1=0, select bank0
  6059  0397  00D8               	movwf	??_Load_Main
  6060  0398  01D9               	clrf	??_Load_Main+1
  6061  0399  1683               	bsf	3,5	;RP0=1, select bank1
  6062  039A  1303               	bcf	3,6	;RP1=0, select bank1
  6063  039B  0862               	movf	((_Load+1)^(0+128)+23),w
  6064  039C  1283               	bcf	3,5	;RP0=0, select bank0
  6065  039D  1303               	bcf	3,6	;RP1=0, select bank0
  6066  039E  0259               	subwf	??_Load_Main+1,w
  6067  039F  1D03               	skipz
  6068  03A0  2BA7               	goto	u6435
  6069  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  6070  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  6071  03A3  0861               	movf	(_Load^(0+128)+23),w
  6072  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  6073  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  6074  03A6  0258               	subwf	??_Load_Main,w
  6075  03A7                     u6435:	
  6076  03A7  1C03               	skipc
  6077  03A8  2BC8               	goto	l5162
  6078                           
  6079                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6080  03A9  085F               	movf	Load_Main@LightsCount,w
  6081  03AA  3A01               	xorlw	1
  6082  03AB  1903               	skipnz
  6083  03AC  2BAF               	goto	l5152
  6084  03AD  3003               	movlw	3
  6085  03AE  2BB0               	goto	L16
  6086  03AF                     l5152:	
  6087  03AF  3002               	movlw	2
  6088  03B0                     L16:	
  6089  03B0  00DB               	movwf	_Load_Main$2405
  6090  03B1  3000               	movlw	0
  6091  03B2  00DC               	movwf	_Load_Main$2405+1
  6092  03B3  085B               	movf	_Load_Main$2405,w
  6093  03B4  00D8               	movwf	??_Load_Main
  6094  03B5  0858               	movf	??_Load_Main,w
  6095  03B6  00DD               	movwf	Load_Main@ErrorCountValue
  6096                           
  6097                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6098  03B7  3001               	movlw	1
  6099  03B8  00D8               	movwf	??_Load_Main
  6100  03B9  0858               	movf	??_Load_Main,w
  6101  03BA  1683               	bsf	3,5	;RP0=1, select bank1
  6102  03BB  1303               	bcf	3,6	;RP1=0, select bank1
  6103  03BC  07E4               	addwf	(_Load^(0+128)+26),f
  6104                           
  6105                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6106  03BD  0864               	movf	(_Load^(0+128)+26),w
  6107  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  6108  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  6109  03C0  025D               	subwf	Load_Main@ErrorCountValue,w
  6110  03C1  1803               	skipnc
  6111  03C2  0008               	return
  6112                           
  6113                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6114  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  6115  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  6116  03C5  01E4               	clrf	(_Load^(0+128)+26)
  6117                           
  6118                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6119  03C6  16CA               	bsf	_Load^(0+128),5
  6120                           
  6121                           ;OverLoad_B1.c: 168: }
  6122                           ;OverLoad_B1.c: 169: } else {
  6123  03C7  0008               	return
  6124  03C8                     l5162:	
  6125                           
  6126                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6127  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  6128  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  6129  03CA  01E4               	clrf	(_Load^(0+128)+26)
  6130                           
  6131                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6132  03CB  1DCA               	btfss	_Load^(0+128),3
  6133  03CC  0008               	return
  6134                           
  6135                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6136  03CD  3001               	movlw	1
  6137  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  6138  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  6139  03D0  00D8               	movwf	??_Load_Main
  6140  03D1  0858               	movf	??_Load_Main,w
  6141  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  6142  03D3  1303               	bcf	3,6	;RP1=0, select bank1
  6143  03D4  07E5               	addwf	(_Load^(0+128)+27),f
  6144                           
  6145                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6146  03D5  3003               	movlw	3
  6147  03D6  0265               	subwf	(_Load^(0+128)+27),w
  6148  03D7  1C03               	skipc
  6149  03D8  0008               	return
  6150                           
  6151                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6152  03D9  01E5               	clrf	(_Load^(0+128)+27)
  6153                           
  6154                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6155  03DA  17CA               	bsf	_Load^(0+128),7
  6156                           
  6157                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6158  03DB  11CA               	bcf	_Load^(0+128),3
  6159                           
  6160                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6161  03DC  01E3               	clrf	(_Load^(0+128)+25)
  6162                           
  6163                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6164  03DD  085E               	movf	(_Load^(0+128)+20),w
  6165  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  6166  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  6167  03E0  00D8               	movwf	??_Load_Main
  6168  03E1  0858               	movf	??_Load_Main,w
  6169  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  6170  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  6171  03E4  00D3               	movwf	(_Load^(0+128)+9)
  6172                           
  6173                           ;OverLoad_B1.c: 182: }
  6174                           ;OverLoad_B1.c: 183: }
  6175                           ;OverLoad_B1.c: 206: }
  6176                           ;OverLoad_B1.c: 207: }
  6177                           ;OverLoad_B1.c: 208: }
  6178                           ;OverLoad_B1.c: 209: } else {
  6179  03E5  0008               	return
  6180  03E6                     l736:	
  6181                           
  6182                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6183  03E6  164A               	bsf	_Load^(0+128),4
  6184                           
  6185                           ;OverLoad_B1.c: 211: }
  6186                           ;OverLoad_B1.c: 212: } else {
  6187  03E7  0008               	return
  6188  03E8                     l735:	
  6189                           
  6190                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6191  03E8  1D4A               	btfss	_Load^(0+128),2
  6192  03E9  2BFC               	goto	l5198
  6193                           
  6194                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6195  03EA  114A               	bcf	_Load^(0+128),2
  6196                           
  6197                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6198  03EB  124A               	bcf	_Load^(0+128),4
  6199                           
  6200                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6201  03EC  01CB               	clrf	(_Load^(0+128)+1)
  6202  03ED  01CC               	clrf	((_Load+1)^(0+128)+1)
  6203                           
  6204                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6205  03EE  158A  23B3  118A   	fcall	_setLoad_AH_AL_Restore
  6206                           
  6207                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6208  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  6209  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  6210  03F3  01E4               	clrf	(_Load^(0+128)+26)
  6211                           
  6212                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6213  03F4  01E5               	clrf	(_Load^(0+128)+27)
  6214                           
  6215                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6216  03F5  01CF               	clrf	(_Load^(0+128)+5)
  6217  03F6  01D0               	clrf	((_Load+1)^(0+128)+5)
  6218                           
  6219                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6220  03F7  01D1               	clrf	(_Load^(0+128)+7)
  6221  03F8  01D2               	clrf	((_Load+1)^(0+128)+7)
  6222                           
  6223                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6224  03F9  11CA               	bcf	_Load^(0+128),3
  6225                           
  6226                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6227  03FA  01E3               	clrf	(_Load^(0+128)+25)
  6228                           
  6229                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6230  03FB  13CA               	bcf	_Load^(0+128),7
  6231  03FC                     l5198:	
  6232                           
  6233                           ;OverLoad_B1.c: 255: }
  6234                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6235  03FC  1ECA               	btfss	_Load^(0+128),5
  6236  03FD  0008               	return
  6237                           
  6238                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6239  03FE  3001               	movlw	1
  6240  03FF  07CD               	addwf	(_Load^(0+128)+3),f
  6241  0400  1803               	skipnc
  6242  0401  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6243  0402  3000               	movlw	0
  6244  0403  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6245                           
  6246                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6247  0404  3001               	movlw	1
  6248  0405  024E               	subwf	((_Load+1)^(0+128)+3),w
  6249  0406  30F4               	movlw	244
  6250  0407  1903               	skipnz
  6251  0408  024D               	subwf	(_Load^(0+128)+3),w
  6252  0409  1C03               	skipc
  6253  040A  0008               	return
  6254                           
  6255                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6256  040B  01CD               	clrf	(_Load^(0+128)+3)
  6257  040C  01CE               	clrf	((_Load+1)^(0+128)+3)
  6258                           
  6259                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6260  040D  12CA               	bcf	_Load^(0+128),5
  6261                           
  6262                           ;OverLoad_B1.c: 261: }
  6263                           ;OverLoad_B1.c: 262: }
  6264                           ;OverLoad_B1.c: 263: }
  6265                           ;OverLoad_B1.c: 264: } else {
  6266  040E  0008               	return
  6267  040F                     l725:	
  6268                           
  6269                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6270  040F  1283               	bcf	3,5	;RP0=0, select bank0
  6271  0410  1303               	bcf	3,6	;RP1=0, select bank0
  6272  0411  1C25               	btfss	_myMain,0
  6273  0412  0008               	return
  6274                           
  6275                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6276  0413  1683               	bsf	3,5	;RP0=1, select bank1
  6277  0414  1303               	bcf	3,6	;RP1=0, select bank1
  6278  0415  144A               	bsf	_Load^(0+128),0
  6279  0416  0008               	return
  6280  0417                     __end_of_Load_Main:	
  6281                           
  6282                           	psect	text30
  6283  0AF8                     __ptext30:	
  6284 ;; *************** function _getMain_Lights_Count *****************
  6285 ;; Defined at:
  6286 ;;		line 459 in file "../src/Main_B1.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  status1         1    5[COMMON] unsigned char 
  6291 ;;  count           1    4[COMMON] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      unsigned char 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6301 ;;      Params:         0       0       0       0
  6302 ;;      Locals:         2       0       0       0
  6303 ;;      Temps:          0       0       0       0
  6304 ;;      Totals:         2       0       0       0
  6305 ;;Total ram usage:        2 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    2
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_Load_Main
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _getMain_Lights_Count
  6317  0AF8                     _getMain_Lights_Count:	
  6318                           
  6319                           ;Main_B1.c: 460: char count = 0;
  6320                           
  6321                           ;incstack = 0
  6322                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6323  0AF8  01F4               	clrf	getMain_Lights_Count@count
  6324                           
  6325                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6326  0AF9  3000               	movlw	0
  6327  0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  6328  0AFB  1303               	bcf	3,6	;RP1=0, select bank0
  6329  0AFC  1940               	btfsc	_Lights1,2
  6330  0AFD  3001               	movlw	1
  6331  0AFE  00F5               	movwf	getMain_Lights_Count@status1
  6332                           
  6333                           ;Main_B1.c: 487: return count = status1;
  6334  0AFF  0875               	movf	getMain_Lights_Count@status1,w
  6335  0B00  00F4               	movwf	getMain_Lights_Count@count
  6336  0B01  0008               	return
  6337  0B02                     __end_of_getMain_Lights_Count:	
  6338                           
  6339                           	psect	text31
  6340  0AAA                     __ptext31:	
  6341 ;; *************** function _getLight_Load_Status *****************
  6342 ;; Defined at:
  6343 ;;		line 405 in file "../src/TriacRelay_B1.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;		None
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  loadstatus      1    4[COMMON] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      unsigned char 
  6350 ;; Registers used:
  6351 ;;		wreg, status,2
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6357 ;;      Params:         0       0       0       0
  6358 ;;      Locals:         1       0       0       0
  6359 ;;      Temps:          0       0       0       0
  6360 ;;      Totals:         1       0       0       0
  6361 ;;Total ram usage:        1 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    2
  6364 ;; This function calls:
  6365 ;;		Nothing
  6366 ;; This function is called by:
  6367 ;;		_Load_Main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _getLight_Load_Status
  6373  0AAA                     _getLight_Load_Status:	
  6374                           
  6375                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6379  0AAA  3000               	movlw	0
  6380  0AAB  18F7               	btfsc	_Light,1
  6381  0AAC  3001               	movlw	1
  6382  0AAD  00F4               	movwf	getLight_Load_Status@loadstatus
  6383                           
  6384                           ;TriacRelay_B1.c: 407: return loadstatus;
  6385  0AAE  0874               	movf	getLight_Load_Status@loadstatus,w
  6386  0AAF  0008               	return
  6387  0AB0                     __end_of_getLight_Load_Status:	
  6388                           
  6389                           	psect	text32
  6390  0AA4                     __ptext32:	
  6391 ;; *************** function _getLight_LoadGO *****************
  6392 ;; Defined at:
  6393 ;;		line 400 in file "../src/TriacRelay_B1.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;		None
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  loadgo          1    4[COMMON] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      unsigned char 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6407 ;;      Params:         0       0       0       0
  6408 ;;      Locals:         1       0       0       0
  6409 ;;      Temps:          0       0       0       0
  6410 ;;      Totals:         1       0       0       0
  6411 ;;Total ram usage:        1 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    2
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_Load_Main
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           
  6422                           ;psect for function _getLight_LoadGO
  6423  0AA4                     _getLight_LoadGO:	
  6424                           
  6425                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6429  0AA4  3000               	movlw	0
  6430  0AA5  1877               	btfsc	_Light,0
  6431  0AA6  3001               	movlw	1
  6432  0AA7  00F4               	movwf	getLight_LoadGO@loadgo
  6433                           
  6434                           ;TriacRelay_B1.c: 402: return loadgo;
  6435  0AA8  0874               	movf	getLight_LoadGO@loadgo,w
  6436  0AA9  0008               	return
  6437  0AAA                     __end_of_getLight_LoadGO:	
  6438                           
  6439                           	psect	text33
  6440  0CFA                     __ptext33:	
  6441 ;; *************** function ___wmul *****************
  6442 ;; Defined at:
  6443 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6446 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  product         2    4[COMMON] unsigned int 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  2    0[BANK0 ] unsigned int 
  6451 ;; Registers used:
  6452 ;;		wreg, status,2, status,0
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6458 ;;      Params:         0       4       0       0
  6459 ;;      Locals:         2       0       0       0
  6460 ;;      Temps:          0       0       0       0
  6461 ;;      Totals:         2       4       0       0
  6462 ;;Total ram usage:        6 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    2
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_Load_Main
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function ___wmul
  6474  0CFA                     ___wmul:	
  6475                           
  6476                           ;incstack = 0
  6477                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6478  0CFA  01F4               	clrf	___wmul@product
  6479  0CFB  01F5               	clrf	___wmul@product+1
  6480  0CFC                     l4846:	
  6481  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  6482  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  6483  0CFE  1C51               	btfss	___wmul@multiplier,0
  6484  0CFF  2D06               	goto	l1427
  6485  0D00  0853               	movf	___wmul@multiplicand,w
  6486  0D01  07F4               	addwf	___wmul@product,f
  6487  0D02  1803               	skipnc
  6488  0D03  0AF5               	incf	___wmul@product+1,f
  6489  0D04  0854               	movf	___wmul@multiplicand+1,w
  6490  0D05  07F5               	addwf	___wmul@product+1,f
  6491  0D06                     l1427:	
  6492  0D06  3001               	movlw	1
  6493  0D07                     u5775:	
  6494  0D07  1003               	clrc
  6495  0D08  0DD3               	rlf	___wmul@multiplicand,f
  6496  0D09  0DD4               	rlf	___wmul@multiplicand+1,f
  6497  0D0A  3EFF               	addlw	-1
  6498  0D0B  1D03               	skipz
  6499  0D0C  2D07               	goto	u5775
  6500  0D0D  3001               	movlw	1
  6501  0D0E                     u5785:	
  6502  0D0E  1003               	clrc
  6503  0D0F  0CD2               	rrf	___wmul@multiplier+1,f
  6504  0D10  0CD1               	rrf	___wmul@multiplier,f
  6505  0D11  3EFF               	addlw	-1
  6506  0D12  1D03               	skipz
  6507  0D13  2D0E               	goto	u5785
  6508  0D14  0852               	movf	___wmul@multiplier+1,w
  6509  0D15  0451               	iorwf	___wmul@multiplier,w
  6510  0D16  1D03               	skipz
  6511  0D17  2CFC               	goto	l4846
  6512  0D18  0875               	movf	___wmul@product+1,w
  6513  0D19  01D2               	clrf	?___wmul+1
  6514  0D1A  07D2               	addwf	?___wmul+1,f
  6515  0D1B  0874               	movf	___wmul@product,w
  6516  0D1C  01D1               	clrf	?___wmul
  6517  0D1D  07D1               	addwf	?___wmul,f
  6518  0D1E  0008               	return
  6519  0D1F                     __end_of___wmul:	
  6520                           
  6521                           	psect	text34
  6522  0DEC                     __ptext34:	
  6523 ;; *************** function ___lwdiv *****************
  6524 ;; Defined at:
  6525 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  divisor         2    0[BANK0 ] unsigned int 
  6528 ;;  dividend        2    2[BANK0 ] unsigned int 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  quotient        2    5[BANK0 ] unsigned int 
  6531 ;;  counter         1    4[BANK0 ] unsigned char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  2    0[BANK0 ] unsigned int 
  6534 ;; Registers used:
  6535 ;;		wreg, status,2, status,0
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6541 ;;      Params:         0       4       0       0
  6542 ;;      Locals:         0       3       0       0
  6543 ;;      Temps:          1       0       0       0
  6544 ;;      Totals:         1       7       0       0
  6545 ;;Total ram usage:        8 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    2
  6548 ;; This function calls:
  6549 ;;		Nothing
  6550 ;; This function is called by:
  6551 ;;		_Load_Main
  6552 ;;		_getPIR_AD
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           
  6557                           ;psect for function ___lwdiv
  6558  0DEC                     ___lwdiv:	
  6559                           
  6560                           ;incstack = 0
  6561                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6562  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  6563  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  6564  0DEE  01D6               	clrf	___lwdiv@quotient
  6565  0DEF  01D7               	clrf	___lwdiv@quotient+1
  6566  0DF0  0852               	movf	___lwdiv@divisor+1,w
  6567  0DF1  0451               	iorwf	___lwdiv@divisor,w
  6568  0DF2  1903               	skipnz
  6569  0DF3  2E25               	goto	l4878
  6570  0DF4  01D5               	clrf	___lwdiv@counter
  6571  0DF5  0AD5               	incf	___lwdiv@counter,f
  6572  0DF6                     l4866:	
  6573  0DF6  1BD2               	btfsc	___lwdiv@divisor+1,7
  6574  0DF7  2E04               	goto	l4868
  6575  0DF8  3001               	movlw	1
  6576  0DF9                     u5815:	
  6577  0DF9  1003               	clrc
  6578  0DFA  0DD1               	rlf	___lwdiv@divisor,f
  6579  0DFB  0DD2               	rlf	___lwdiv@divisor+1,f
  6580  0DFC  3EFF               	addlw	-1
  6581  0DFD  1D03               	skipz
  6582  0DFE  2DF9               	goto	u5815
  6583  0DFF  3001               	movlw	1
  6584  0E00  00F4               	movwf	??___lwdiv
  6585  0E01  0874               	movf	??___lwdiv,w
  6586  0E02  07D5               	addwf	___lwdiv@counter,f
  6587  0E03  2DF6               	goto	l4866
  6588  0E04                     l4868:	
  6589  0E04  3001               	movlw	1
  6590  0E05                     u5835:	
  6591  0E05  1003               	clrc
  6592  0E06  0DD6               	rlf	___lwdiv@quotient,f
  6593  0E07  0DD7               	rlf	___lwdiv@quotient+1,f
  6594  0E08  3EFF               	addlw	-1
  6595  0E09  1D03               	skipz
  6596  0E0A  2E05               	goto	u5835
  6597  0E0B  0852               	movf	___lwdiv@divisor+1,w
  6598  0E0C  0254               	subwf	___lwdiv@dividend+1,w
  6599  0E0D  1D03               	skipz
  6600  0E0E  2E11               	goto	u5845
  6601  0E0F  0851               	movf	___lwdiv@divisor,w
  6602  0E10  0253               	subwf	___lwdiv@dividend,w
  6603  0E11                     u5845:	
  6604  0E11  1C03               	skipc
  6605  0E12  2E1A               	goto	l4874
  6606  0E13  0851               	movf	___lwdiv@divisor,w
  6607  0E14  02D3               	subwf	___lwdiv@dividend,f
  6608  0E15  0852               	movf	___lwdiv@divisor+1,w
  6609  0E16  1C03               	skipc
  6610  0E17  03D4               	decf	___lwdiv@dividend+1,f
  6611  0E18  02D4               	subwf	___lwdiv@dividend+1,f
  6612  0E19  1456               	bsf	___lwdiv@quotient,0
  6613  0E1A                     l4874:	
  6614  0E1A  3001               	movlw	1
  6615  0E1B                     u5855:	
  6616  0E1B  1003               	clrc
  6617  0E1C  0CD2               	rrf	___lwdiv@divisor+1,f
  6618  0E1D  0CD1               	rrf	___lwdiv@divisor,f
  6619  0E1E  3EFF               	addlw	-1
  6620  0E1F  1D03               	skipz
  6621  0E20  2E1B               	goto	u5855
  6622  0E21  3001               	movlw	1
  6623  0E22  02D5               	subwf	___lwdiv@counter,f
  6624  0E23  1D03               	btfss	3,2
  6625  0E24  2E04               	goto	l4868
  6626  0E25                     l4878:	
  6627  0E25  0857               	movf	___lwdiv@quotient+1,w
  6628  0E26  01D2               	clrf	?___lwdiv+1
  6629  0E27  07D2               	addwf	?___lwdiv+1,f
  6630  0E28  0856               	movf	___lwdiv@quotient,w
  6631  0E29  01D1               	clrf	?___lwdiv
  6632  0E2A  07D1               	addwf	?___lwdiv,f
  6633  0E2B  0008               	return
  6634  0E2C                     __end_of___lwdiv:	
  6635                           
  6636                           	psect	text35
  6637  0A84                     __ptext35:	
  6638 ;; *************** function _Load_Initialization *****************
  6639 ;; Defined at:
  6640 ;;		line 9 in file "../src/OverLoad_B1.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;		None
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;		None
  6645 ;; Return value:  Size  Location     Type
  6646 ;;		None               void
  6647 ;; Registers used:
  6648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6654 ;;      Params:         0       0       0       0
  6655 ;;      Locals:         0       0       0       0
  6656 ;;      Temps:          0       0       0       0
  6657 ;;      Totals:         0       0       0       0
  6658 ;;Total ram usage:        0 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    3
  6661 ;; This function calls:
  6662 ;;		_setLoad_AH_AL_Restore
  6663 ;; This function is called by:
  6664 ;;		_main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _Load_Initialization
  6670  0A84                     _Load_Initialization:	
  6671                           
  6672                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6676  0A84  158A  23B3         	fcall	_setLoad_AH_AL_Restore
  6677  0A86  0008               	return
  6678  0A87                     __end_of_Load_Initialization:	
  6679                           
  6680                           	psect	text36
  6681  0BB3                     __ptext36:	
  6682 ;; *************** function _setLoad_AH_AL_Restore *****************
  6683 ;; Defined at:
  6684 ;;		line 292 in file "../src/OverLoad_B1.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  i               1    5[COMMON] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;		None               void
  6691 ;; Registers used:
  6692 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6698 ;;      Params:         0       0       0       0
  6699 ;;      Locals:         1       0       0       0
  6700 ;;      Temps:          1       0       0       0
  6701 ;;      Totals:         2       0       0       0
  6702 ;;Total ram usage:        2 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    2
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_Load_Initialization
  6709 ;;		_Load_Main
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _setLoad_AH_AL_Restore
  6715  0BB3                     _setLoad_AH_AL_Restore:	
  6716                           
  6717                           ;OverLoad_B1.c: 293: char i;
  6718                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  6719                           
  6720                           ;incstack = 0
  6721                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6722  0BB3  01F5               	clrf	setLoad_AH_AL_Restore@i
  6723  0BB4                     L17:	
  6724  0BB4  3005               	movlw	5
  6725  0BB5  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6726  0BB6  1803               	btfsc	3,0
  6727  0BB7  0008               	return
  6728                           
  6729                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  6730  0BB8  0875               	movf	setLoad_AH_AL_Restore@i,w
  6731  0BB9  3ED4               	addlw	(_Load+10)& (0+255)
  6732  0BBA  0084               	movwf	4
  6733  0BBB  1383               	bcf	3,7	;select IRP bank1
  6734  0BBC  0180               	clrf	0
  6735                           
  6736                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  6737  0BBD  30FF               	movlw	255
  6738  0BBE  00F4               	movwf	??_setLoad_AH_AL_Restore
  6739  0BBF  0875               	movf	setLoad_AH_AL_Restore@i,w
  6740  0BC0  3ED9               	addlw	(_Load+15)& (0+255)
  6741  0BC1  0084               	movwf	4
  6742  0BC2  0874               	movf	??_setLoad_AH_AL_Restore,w
  6743  0BC3  0080               	movwf	0
  6744  0BC4  3001               	movlw	1
  6745  0BC5  00F4               	movwf	??_setLoad_AH_AL_Restore
  6746  0BC6  0874               	movf	??_setLoad_AH_AL_Restore,w
  6747  0BC7  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6748  0BC8  2BB4               	goto	L17
  6749  0BC9                     __end_of_setLoad_AH_AL_Restore:	
  6750                           
  6751                           	psect	text37
  6752  0C95                     __ptext37:	
  6753 ;; *************** function _Lights_Main *****************
  6754 ;; Defined at:
  6755 ;;		line 52 in file "../src/TriacRelay_B1.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;		None
  6760 ;; Return value:  Size  Location     Type
  6761 ;;		None               void
  6762 ;; Registers used:
  6763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6769 ;;      Params:         0       0       0       0
  6770 ;;      Locals:         0       0       0       0
  6771 ;;      Temps:          0       0       0       0
  6772 ;;      Totals:         0       0       0       0
  6773 ;;Total ram usage:        0 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    6
  6776 ;; This function calls:
  6777 ;;		_Lights_Control
  6778 ;;		_getLoad_OK
  6779 ;;		_getMain_All_Error_Status
  6780 ;;		_getMain_All_LightsStatus
  6781 ;;		_setLights_Main
  6782 ;; This function is called by:
  6783 ;;		_main
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           
  6788                           ;psect for function _Lights_Main
  6789  0C95                     _Lights_Main:	
  6790                           
  6791                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  6792                           
  6793                           ;incstack = 0
  6794                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6795  0C95  1C77               	btfss	_Light,0
  6796  0C96  2CAB               	goto	l5216
  6797                           
  6798                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6799  0C97  158A  22C4  158A   	fcall	_getLoad_OK
  6800  0C9A  3A01               	xorlw	1
  6801  0C9B  1903               	skipnz
  6802  0C9C  2CAA               	goto	l1304
  6803  0C9D  3000               	movlw	0
  6804  0C9E  158A  25AE  158A   	fcall	_getMain_All_Error_Status
  6805  0CA1  3800               	iorlw	0
  6806  0CA2  1D03               	skipz
  6807  0CA3  2CAA               	goto	l1304
  6808  0CA4  158A  22E5  158A   	fcall	_getMain_All_LightsStatus
  6809  0CA7  3800               	iorlw	0
  6810  0CA8  1D03               	skipz
  6811  0CA9  2CAB               	goto	l5216
  6812  0CAA                     l1304:	
  6813                           
  6814                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  6815  0CAA  1077               	bcf	_Light,0
  6816  0CAB                     l5216:	
  6817                           
  6818                           ;TriacRelay_B1.c: 68: }
  6819                           ;TriacRelay_B1.c: 69: }
  6820                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  6821  0CAB  3001               	movlw	1
  6822  0CAC  158A  254A  158A   	fcall	_setLights_Main
  6823                           
  6824                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  6825  0CAF  3001               	movlw	1
  6826  0CB0  118A  2607         	fcall	_Lights_Control
  6827  0CB2  0008               	return
  6828  0CB3                     __end_of_Lights_Main:	
  6829                           
  6830                           	psect	text38
  6831  0D4A                     __ptext38:	
  6832 ;; *************** function _setLights_Main *****************
  6833 ;; Defined at:
  6834 ;;		line 91 in file "../src/TriacRelay_B1.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  lights          1    wreg     unsigned char 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  lights          1    5[BANK0 ] unsigned char 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;		None               void
  6841 ;; Registers used:
  6842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6848 ;;      Params:         0       0       0       0
  6849 ;;      Locals:         0       1       0       0
  6850 ;;      Temps:          0       0       0       0
  6851 ;;      Totals:         0       1       0       0
  6852 ;;Total ram usage:        1 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    5
  6855 ;; This function calls:
  6856 ;;		_LightsPointSelect
  6857 ;;		_getLights_Allow_Condition
  6858 ;;		_setLights
  6859 ;; This function is called by:
  6860 ;;		_Lights_Main
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           
  6865                           ;psect for function _setLights_Main
  6866  0D4A                     _setLights_Main:	
  6867                           
  6868                           ;incstack = 0
  6869                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6870                           ;setLights_Main@lights stored from wreg
  6871  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6872  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6873  0D4C  00D6               	movwf	setLights_Main@lights
  6874                           
  6875                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  6876  0D4D  0856               	movf	setLights_Main@lights,w
  6877  0D4E  158A  22EE  158A   	fcall	_LightsPointSelect
  6878                           
  6879                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  6880  0D51  0878               	movf	_Lights,w
  6881  0D52  0084               	movwf	4
  6882  0D53  1383               	bcf	3,7	;select IRP bank0
  6883  0D54  1880               	btfsc	0,1
  6884  0D55  0008               	return
  6885                           
  6886                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  6887  0D56  0878               	movf	_Lights,w
  6888  0D57  0084               	movwf	4
  6889  0D58  1D80               	btfss	0,3
  6890  0D59  0008               	return
  6891                           
  6892                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  6893  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6894  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6895  0D5C  0856               	movf	setLights_Main@lights,w
  6896  0D5D  158A  23C9  158A   	fcall	_getLights_Allow_Condition
  6897  0D60  3800               	iorlw	0
  6898  0D61  1D03               	skipz
  6899  0D62  0008               	return
  6900                           
  6901                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  6902  0D63  0878               	movf	_Lights,w
  6903  0D64  0084               	movwf	4
  6904  0D65  1383               	bcf	3,7	;select IRP bank0
  6905  0D66  1180               	bcf	0,3
  6906                           
  6907                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6908  0D67  0878               	movf	_Lights,w
  6909  0D68  0084               	movwf	4
  6910  0D69  1E00               	btfss	0,4
  6911  0D6A  2D73               	goto	l4814
  6912                           
  6913                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6914  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  6915  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  6916  0D6D  01D3               	clrf	setLights@status
  6917  0D6E  0AD3               	incf	setLights@status,f
  6918  0D6F  0856               	movf	setLights_Main@lights,w
  6919  0D70  118A  268A         	fcall	_setLights
  6920                           
  6921                           ;TriacRelay_B1.c: 99: } else {
  6922  0D72  0008               	return
  6923  0D73                     l4814:	
  6924                           
  6925                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6926  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  6927  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  6928  0D75  01D3               	clrf	setLights@status
  6929  0D76  0856               	movf	setLights_Main@lights,w
  6930  0D77  118A  268A         	fcall	_setLights
  6931  0D79  0008               	return
  6932  0D7A                     __end_of_setLights_Main:	
  6933                           
  6934                           	psect	text39
  6935  068A                     __ptext39:	
  6936 ;; *************** function _setLights *****************
  6937 ;; Defined at:
  6938 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  lights          1    wreg     unsigned char 
  6941 ;;  status          1    2[BANK0 ] unsigned char 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  lights          1    4[BANK0 ] unsigned char 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;		None               void
  6946 ;; Registers used:
  6947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6953 ;;      Params:         0       1       0       0
  6954 ;;      Locals:         0       1       0       0
  6955 ;;      Temps:          0       1       0       0
  6956 ;;      Totals:         0       3       0       0
  6957 ;;Total ram usage:        3 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    4
  6960 ;; This function calls:
  6961 ;;		_setLED
  6962 ;;		_setLights_Line
  6963 ;; This function is called by:
  6964 ;;		_setLights_Main
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _setLights
  6970  068A                     _setLights:	
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6974                           ;setLights@lights stored from wreg
  6975  068A  1283               	bcf	3,5	;RP0=0, select bank0
  6976  068B  1303               	bcf	3,6	;RP1=0, select bank0
  6977  068C  00D5               	movwf	setLights@lights
  6978                           
  6979                           ;TriacRelay_B1.c: 116: if (status == 1) {
  6980  068D  0853               	movf	setLights@status,w
  6981  068E  3A01               	xorlw	1
  6982  068F  1D03               	skipz
  6983  0690  2ECD               	goto	l4646
  6984                           
  6985                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  6986  0691  0855               	movf	setLights@lights,w
  6987  0692  3A02               	xorlw	2
  6988  0693  1D03               	skipz
  6989  0694  2EA2               	goto	l4628
  6990                           
  6991                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  6992  0695  01D1               	clrf	setLED@command
  6993  0696  3001               	movlw	1
  6994  0697  158A  278F  118A   	fcall	_setLED
  6995                           
  6996                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  6997  069A  1283               	bcf	3,5	;RP0=0, select bank0
  6998  069B  1303               	bcf	3,6	;RP1=0, select bank0
  6999  069C  01D1               	clrf	setLED@command
  7000  069D  0AD1               	incf	setLED@command,f
  7001  069E  3002               	movlw	2
  7002  069F  158A  278F  118A   	fcall	_setLED
  7003  06A2                     l4628:	
  7004                           
  7005                           ;TriacRelay_B1.c: 121: }
  7006                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7007  06A2  0878               	movf	_Lights,w
  7008  06A3  0084               	movwf	4
  7009  06A4  1383               	bcf	3,7	;select IRP bank0
  7010  06A5  1900               	btfsc	0,2
  7011  06A6  2EC6               	goto	l4642
  7012                           
  7013                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7014  06A7  0878               	movf	_Lights,w
  7015  06A8  0084               	movwf	4
  7016  06A9  1500               	bsf	0,2
  7017                           
  7018                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7019  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  7020  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  7021  06AC  0855               	movf	setLights@lights,w
  7022  06AD  3A01               	xorlw	1
  7023  06AE  1D03               	skipz
  7024  06AF  2EC6               	goto	l4642
  7025                           
  7026                           ;TriacRelay_B1.c: 131: RB2 = 1;
  7027  06B0  1506               	bsf	6,2	;volatile
  7028                           
  7029                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7030  06B1  3064               	movlw	100
  7031  06B2  00D4               	movwf	??_setLights
  7032  06B3  0878               	movf	_Lights,w
  7033  06B4  3E04               	addlw	4
  7034  06B5  0084               	movwf	4
  7035  06B6  0854               	movf	??_setLights,w
  7036  06B7  0080               	movwf	0
  7037                           
  7038                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7039  06B8  308C               	movlw	140
  7040  06B9  00D4               	movwf	??_setLights
  7041  06BA  0878               	movf	_Lights,w
  7042  06BB  3E03               	addlw	3
  7043  06BC  0084               	movwf	4
  7044  06BD  0854               	movf	??_setLights,w
  7045  06BE  0080               	movwf	0
  7046                           
  7047                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7048  06BF  0878               	movf	_Lights,w
  7049  06C0  3E02               	addlw	2
  7050  06C1  0084               	movwf	4
  7051  06C2  0180               	clrf	0
  7052                           
  7053                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7054  06C3  0878               	movf	_Lights,w
  7055  06C4  0084               	movwf	4
  7056  06C5  1480               	bsf	0,1
  7057  06C6                     l4642:	
  7058                           
  7059                           ;TriacRelay_B1.c: 136: }
  7060                           ;TriacRelay_B1.c: 162: }
  7061                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7062  06C6  14F7               	bsf	_Light,1
  7063                           
  7064                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7065  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  7066  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  7067  06C9  0855               	movf	setLights@lights,w
  7068  06CA  158A  231C         	fcall	_setLights_Line
  7069                           
  7070                           ;TriacRelay_B1.c: 167: } else {
  7071  06CC  0008               	return
  7072  06CD                     l4646:	
  7073                           
  7074                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7075  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  7076  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  7077  06CF  0855               	movf	setLights@lights,w
  7078  06D0  3A02               	xorlw	2
  7079  06D1  1D03               	skipz
  7080  06D2  2EE0               	goto	l4650
  7081                           
  7082                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7083  06D3  01D1               	clrf	setLED@command
  7084  06D4  0AD1               	incf	setLED@command,f
  7085  06D5  3001               	movlw	1
  7086  06D6  158A  278F  118A   	fcall	_setLED
  7087                           
  7088                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7089  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  7090  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  7091  06DB  01D1               	clrf	setLED@command
  7092  06DC  3002               	movlw	2
  7093  06DD  158A  278F  118A   	fcall	_setLED
  7094  06E0                     l4650:	
  7095                           
  7096                           ;TriacRelay_B1.c: 173: }
  7097                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7098  06E0  0878               	movf	_Lights,w
  7099  06E1  0084               	movwf	4
  7100  06E2  1383               	bcf	3,7	;select IRP bank0
  7101  06E3  1D00               	btfss	0,2
  7102  06E4  2F04               	goto	l4664
  7103                           
  7104                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7105  06E5  0878               	movf	_Lights,w
  7106  06E6  0084               	movwf	4
  7107  06E7  1100               	bcf	0,2
  7108                           
  7109                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7110  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  7111  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  7112  06EA  0855               	movf	setLights@lights,w
  7113  06EB  3A01               	xorlw	1
  7114  06EC  1D03               	skipz
  7115  06ED  2F04               	goto	l4664
  7116                           
  7117                           ;TriacRelay_B1.c: 179: RB2 = 1;
  7118  06EE  1506               	bsf	6,2	;volatile
  7119                           
  7120                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7121  06EF  3028               	movlw	40
  7122  06F0  00D4               	movwf	??_setLights
  7123  06F1  0878               	movf	_Lights,w
  7124  06F2  3E04               	addlw	4
  7125  06F3  0084               	movwf	4
  7126  06F4  0854               	movf	??_setLights,w
  7127  06F5  0080               	movwf	0
  7128                           
  7129                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7130  06F6  3050               	movlw	80
  7131  06F7  00D4               	movwf	??_setLights
  7132  06F8  0878               	movf	_Lights,w
  7133  06F9  3E03               	addlw	3
  7134  06FA  0084               	movwf	4
  7135  06FB  0854               	movf	??_setLights,w
  7136  06FC  0080               	movwf	0
  7137                           
  7138                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7139  06FD  0878               	movf	_Lights,w
  7140  06FE  3E02               	addlw	2
  7141  06FF  0084               	movwf	4
  7142  0700  0180               	clrf	0
  7143                           
  7144                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7145  0701  0878               	movf	_Lights,w
  7146  0702  0084               	movwf	4
  7147  0703  1480               	bsf	0,1
  7148  0704                     l4664:	
  7149                           
  7150                           ;TriacRelay_B1.c: 184: }
  7151                           ;TriacRelay_B1.c: 211: }
  7152                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7153  0704  10F7               	bcf	_Light,1
  7154                           
  7155                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7156  0705  3000               	movlw	0
  7157  0706  158A  231C         	fcall	_setLights_Line
  7158  0708  0008               	return
  7159  0709                     __end_of_setLights:	
  7160                           
  7161                           	psect	text40
  7162  0B1C                     __ptext40:	
  7163 ;; *************** function _setLights_Line *****************
  7164 ;; Defined at:
  7165 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  lights          1    wreg     unsigned char 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  lights          1    4[COMMON] unsigned char 
  7170 ;; Return value:  Size  Location     Type
  7171 ;;		None               void
  7172 ;; Registers used:
  7173 ;;		wreg
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7179 ;;      Params:         0       0       0       0
  7180 ;;      Locals:         1       0       0       0
  7181 ;;      Temps:          0       0       0       0
  7182 ;;      Totals:         1       0       0       0
  7183 ;;Total ram usage:        1 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    2
  7186 ;; This function calls:
  7187 ;;		Nothing
  7188 ;; This function is called by:
  7189 ;;		_setLights
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           
  7194                           ;psect for function _setLights_Line
  7195  0B1C                     _setLights_Line:	
  7196                           
  7197                           ;incstack = 0
  7198                           ; Regs used in _setLights_Line: [wreg]
  7199                           ;setLights_Line@lights stored from wreg
  7200  0B1C  00F4               	movwf	setLights_Line@lights
  7201                           
  7202                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7203  0B1D  1477               	bsf	_Light,0
  7204                           
  7205                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7206  0B1E  1283               	bcf	3,5	;RP0=0, select bank0
  7207  0B1F  1303               	bcf	3,6	;RP1=0, select bank0
  7208  0B20  1041               	bcf	_Lights1+1,0
  7209                           
  7210                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7211  0B21  0874               	movf	setLights_Line@lights,w
  7212  0B22  3A01               	xorlw	1
  7213  0B23  1D03               	skipz
  7214  0B24  0008               	return
  7215  0B25  0874               	movf	setLights_Line@lights,w
  7216  0B26  1903               	btfsc	3,2
  7217  0B27  0008               	return
  7218                           
  7219                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7220  0B28  1441               	bsf	_Lights1+1,0
  7221  0B29  0008               	return
  7222  0B2A                     __end_of_setLights_Line:	
  7223                           
  7224                           	psect	text41
  7225  0BC9                     __ptext41:	
  7226 ;; *************** function _getLights_Allow_Condition *****************
  7227 ;; Defined at:
  7228 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  lights          1    wreg     unsigned char 
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;  lights          1    0[COMMON] unsigned char 
  7233 ;;  allow           1    0[BANK0 ] unsigned char 
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  1    wreg      unsigned char 
  7236 ;; Registers used:
  7237 ;;		wreg, status,2, pclath, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7243 ;;      Params:         0       0       0       0
  7244 ;;      Locals:         0       2       0       0
  7245 ;;      Temps:          1       0       0       0
  7246 ;;      Totals:         1       2       0       0
  7247 ;;Total ram usage:        3 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    3
  7250 ;; This function calls:
  7251 ;;		_getLoad_OK
  7252 ;; This function is called by:
  7253 ;;		_setLights_Main
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           
  7258                           ;psect for function _getLights_Allow_Condition
  7259  0BC9                     _getLights_Allow_Condition:	
  7260                           
  7261                           ;TriacRelay_B1.c: 368: char allow = 0;
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7265  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  7266  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  7267  0BCB  01D1               	clrf	getLights_Allow_Condition@allow
  7268                           
  7269                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7270  0BCC  01D2               	clrf	_getLights_Allow_Condition$4248
  7271  0BCD  0AD2               	incf	_getLights_Allow_Condition$4248,f
  7272  0BCE  158A  22C4  158A   	fcall	_getLoad_OK
  7273  0BD1  3800               	iorlw	0
  7274  0BD2  1903               	btfsc	3,2
  7275  0BD3  1877               	btfsc	_Light,0
  7276  0BD4  2BD8               	goto	l4616
  7277  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  7278  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  7279  0BD7  01D2               	clrf	_getLights_Allow_Condition$4248
  7280  0BD8                     l4616:	
  7281  0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  7282  0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  7283  0BDA  0852               	movf	_getLights_Allow_Condition$4248,w
  7284  0BDB  00F5               	movwf	??_getLights_Allow_Condition
  7285  0BDC  0875               	movf	??_getLights_Allow_Condition,w
  7286  0BDD  00D1               	movwf	getLights_Allow_Condition@allow
  7287                           
  7288                           ;TriacRelay_B1.c: 396: return allow;
  7289  0BDE  0851               	movf	getLights_Allow_Condition@allow,w
  7290  0BDF  0008               	return
  7291  0BE0                     __end_of_getLights_Allow_Condition:	
  7292                           
  7293                           	psect	text42
  7294  0AC4                     __ptext42:	
  7295 ;; *************** function _getLoad_OK *****************
  7296 ;; Defined at:
  7297 ;;		line 272 in file "../src/OverLoad_B1.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;		None
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  ok              1    4[COMMON] unsigned char 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      unsigned char 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7311 ;;      Params:         0       0       0       0
  7312 ;;      Locals:         1       0       0       0
  7313 ;;      Temps:          0       0       0       0
  7314 ;;      Totals:         1       0       0       0
  7315 ;;Total ram usage:        1 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    2
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_Lights_Main
  7322 ;;		_getLights_Allow_Condition
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           
  7327                           ;psect for function _getLoad_OK
  7328  0AC4                     _getLoad_OK:	
  7329                           
  7330                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7334  0AC4  3000               	movlw	0
  7335  0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  7336  0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  7337  0AC7  1BCA               	btfsc	_Load^(0+128),7
  7338  0AC8  3001               	movlw	1
  7339  0AC9  00F4               	movwf	getLoad_OK@ok
  7340                           
  7341                           ;OverLoad_B1.c: 274: return ok;
  7342  0ACA  0874               	movf	getLoad_OK@ok,w
  7343  0ACB  0008               	return
  7344  0ACC                     __end_of_getLoad_OK:	
  7345                           
  7346                           	psect	text43
  7347  0607                     __ptext43:	
  7348 ;; *************** function _Lights_Control *****************
  7349 ;; Defined at:
  7350 ;;		line 220 in file "../src/TriacRelay_B1.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  lights          1    wreg     unsigned char 
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;  lights          1   10[BANK0 ] unsigned char 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;		None               void
  7357 ;; Registers used:
  7358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7364 ;;      Params:         0       0       0       0
  7365 ;;      Locals:         0       1       0       0
  7366 ;;      Temps:          0       2       0       0
  7367 ;;      Totals:         0       3       0       0
  7368 ;;Total ram usage:        3 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    3
  7371 ;; This function calls:
  7372 ;;		_LightsPointSelect
  7373 ;;		___awdiv
  7374 ;; This function is called by:
  7375 ;;		_Lights_Main
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _Lights_Control
  7381  0607                     _Lights_Control:	
  7382                           
  7383                           ;incstack = 0
  7384                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7385                           ;Lights_Control@lights stored from wreg
  7386  0607  1283               	bcf	3,5	;RP0=0, select bank0
  7387  0608  1303               	bcf	3,6	;RP1=0, select bank0
  7388  0609  00DB               	movwf	Lights_Control@lights
  7389                           
  7390                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  7391  060A  085B               	movf	Lights_Control@lights,w
  7392  060B  158A  22EE  118A   	fcall	_LightsPointSelect
  7393                           
  7394                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  7395  060E  0878               	movf	_Lights,w
  7396  060F  0084               	movwf	4
  7397  0610  1383               	bcf	3,7	;select IRP bank0
  7398  0611  1C80               	btfss	0,1
  7399  0612  0008               	return
  7400                           
  7401                           ;TriacRelay_B1.c: 223: Lights->Time++;
  7402  0613  3001               	movlw	1
  7403  0614  1283               	bcf	3,5	;RP0=0, select bank0
  7404  0615  1303               	bcf	3,6	;RP1=0, select bank0
  7405  0616  00D9               	movwf	??_Lights_Control
  7406  0617  0878               	movf	_Lights,w
  7407  0618  3E02               	addlw	2
  7408  0619  0084               	movwf	4
  7409  061A  0859               	movf	??_Lights_Control,w
  7410  061B  0780               	addwf	0,f
  7411                           
  7412                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  7413  061C  0878               	movf	_Lights,w
  7414  061D  0084               	movwf	4
  7415  061E  1B80               	btfsc	0,7
  7416  061F  2E56               	goto	l4832
  7417                           
  7418                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  7419  0620  3014               	movlw	20
  7420  0621  00D1               	movwf	___awdiv@divisor
  7421  0622  3000               	movlw	0
  7422  0623  00D2               	movwf	___awdiv@divisor+1
  7423  0624  0878               	movf	_Lights,w
  7424  0625  3E04               	addlw	4
  7425  0626  0084               	movwf	4
  7426  0627  0800               	movf	0,w
  7427  0628  00D9               	movwf	??_Lights_Control
  7428  0629  01DA               	clrf	??_Lights_Control+1
  7429  062A  0859               	movf	??_Lights_Control,w
  7430  062B  00D3               	movwf	___awdiv@dividend
  7431  062C  085A               	movf	??_Lights_Control+1,w
  7432  062D  00D4               	movwf	___awdiv@dividend+1
  7433  062E  158A  26CC  118A   	fcall	___awdiv
  7434  0631  0878               	movf	_Lights,w
  7435  0632  3E02               	addlw	2
  7436  0633  0084               	movwf	4
  7437  0634  1283               	bcf	3,5	;RP0=0, select bank0
  7438  0635  1303               	bcf	3,6	;RP1=0, select bank0
  7439  0636  0852               	movf	?___awdiv+1,w
  7440  0637  3A80               	xorlw	128
  7441  0638  3C80               	sublw	128
  7442  0639  1D03               	skipz
  7443  063A  2E3E               	goto	u5705
  7444  063B  0851               	movf	?___awdiv,w
  7445  063C  1383               	bcf	3,7	;select IRP bank0
  7446  063D  0200               	subwf	0,w
  7447  063E                     u5705:	
  7448  063E  1C03               	skipc
  7449  063F  0008               	return
  7450                           
  7451                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  7452  0640  0878               	movf	_Lights,w
  7453  0641  0084               	movwf	4
  7454  0642  1383               	bcf	3,7	;select IRP bank0
  7455  0643  1780               	bsf	0,7
  7456                           
  7457                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  7458  0644  1283               	bcf	3,5	;RP0=0, select bank0
  7459  0645  1303               	bcf	3,6	;RP1=0, select bank0
  7460  0646  085B               	movf	Lights_Control@lights,w
  7461  0647  3A01               	xorlw	1
  7462  0648  1D03               	skipz
  7463  0649  0008               	return
  7464                           
  7465                           ;TriacRelay_B1.c: 229: RA4 = Lights->Status == 1 ? 1 : 0;
  7466  064A  0878               	movf	_Lights,w
  7467  064B  0084               	movwf	4
  7468  064C  1D00               	btfss	0,2
  7469  064D  2E52               	goto	u5720
  7470  064E  1283               	bcf	3,5	;RP0=0, select bank0
  7471  064F  1303               	bcf	3,6	;RP1=0, select bank0
  7472  0650  1605               	bsf	5,4	;volatile
  7473  0651  0008               	return
  7474  0652                     u5720:	
  7475  0652  1283               	bcf	3,5	;RP0=0, select bank0
  7476  0653  1303               	bcf	3,6	;RP1=0, select bank0
  7477  0654  1205               	bcf	5,4	;volatile
  7478                           
  7479                           ;TriacRelay_B1.c: 230: }
  7480                           ;TriacRelay_B1.c: 242: }
  7481                           ;TriacRelay_B1.c: 243: } else {
  7482  0655  0008               	return
  7483  0656                     l4832:	
  7484                           
  7485                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  7486  0656  3014               	movlw	20
  7487  0657  00D1               	movwf	___awdiv@divisor
  7488  0658  3000               	movlw	0
  7489  0659  00D2               	movwf	___awdiv@divisor+1
  7490  065A  0878               	movf	_Lights,w
  7491  065B  3E03               	addlw	3
  7492  065C  0084               	movwf	4
  7493  065D  1383               	bcf	3,7	;select IRP bank0
  7494  065E  0800               	movf	0,w
  7495  065F  00D9               	movwf	??_Lights_Control
  7496  0660  01DA               	clrf	??_Lights_Control+1
  7497  0661  0859               	movf	??_Lights_Control,w
  7498  0662  00D3               	movwf	___awdiv@dividend
  7499  0663  085A               	movf	??_Lights_Control+1,w
  7500  0664  00D4               	movwf	___awdiv@dividend+1
  7501  0665  158A  26CC  118A   	fcall	___awdiv
  7502  0668  0878               	movf	_Lights,w
  7503  0669  3E02               	addlw	2
  7504  066A  0084               	movwf	4
  7505  066B  1283               	bcf	3,5	;RP0=0, select bank0
  7506  066C  1303               	bcf	3,6	;RP1=0, select bank0
  7507  066D  0852               	movf	?___awdiv+1,w
  7508  066E  3A80               	xorlw	128
  7509  066F  3C80               	sublw	128
  7510  0670  1D03               	skipz
  7511  0671  2E75               	goto	u5745
  7512  0672  0851               	movf	?___awdiv,w
  7513  0673  1383               	bcf	3,7	;select IRP bank0
  7514  0674  0200               	subwf	0,w
  7515  0675                     u5745:	
  7516  0675  1C03               	skipc
  7517  0676  0008               	return
  7518                           
  7519                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  7520  0677  0878               	movf	_Lights,w
  7521  0678  3E02               	addlw	2
  7522  0679  0084               	movwf	4
  7523  067A  1383               	bcf	3,7	;select IRP bank0
  7524  067B  0180               	clrf	0
  7525                           
  7526                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  7527  067C  0878               	movf	_Lights,w
  7528  067D  0084               	movwf	4
  7529  067E  1080               	bcf	0,1
  7530                           
  7531                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  7532  067F  0878               	movf	_Lights,w
  7533  0680  0084               	movwf	4
  7534  0681  1380               	bcf	0,7
  7535                           
  7536                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  7537  0682  1283               	bcf	3,5	;RP0=0, select bank0
  7538  0683  1303               	bcf	3,6	;RP1=0, select bank0
  7539  0684  085B               	movf	Lights_Control@lights,w
  7540  0685  3A01               	xorlw	1
  7541  0686  1D03               	skipz
  7542  0687  0008               	return
  7543                           
  7544                           ;TriacRelay_B1.c: 251: RB2 = 0;
  7545  0688  1106               	bcf	6,2	;volatile
  7546  0689  0008               	return
  7547  068A                     __end_of_Lights_Control:	
  7548                           
  7549                           	psect	text44
  7550  0ECC                     __ptext44:	
  7551 ;; *************** function ___awdiv *****************
  7552 ;; Defined at:
  7553 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  divisor         2    0[BANK0 ] int 
  7556 ;;  dividend        2    2[BANK0 ] int 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  quotient        2    6[BANK0 ] int 
  7559 ;;  sign            1    5[BANK0 ] unsigned char 
  7560 ;;  counter         1    4[BANK0 ] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  2    0[BANK0 ] int 
  7563 ;; Registers used:
  7564 ;;		wreg, status,2, status,0
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7570 ;;      Params:         0       4       0       0
  7571 ;;      Locals:         0       4       0       0
  7572 ;;      Temps:          1       0       0       0
  7573 ;;      Totals:         1       8       0       0
  7574 ;;Total ram usage:        9 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    2
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_getPIR_AD
  7581 ;;		_Lights_Control
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           
  7586                           ;psect for function ___awdiv
  7587  0ECC                     ___awdiv:	
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7591  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7592  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  7593  0ECE  01D6               	clrf	___awdiv@sign
  7594  0ECF  1FD2               	btfss	___awdiv@divisor+1,7
  7595  0ED0  2ED8               	goto	l4682
  7596  0ED1  09D1               	comf	___awdiv@divisor,f
  7597  0ED2  09D2               	comf	___awdiv@divisor+1,f
  7598  0ED3  0AD1               	incf	___awdiv@divisor,f
  7599  0ED4  1903               	skipnz
  7600  0ED5  0AD2               	incf	___awdiv@divisor+1,f
  7601  0ED6  01D6               	clrf	___awdiv@sign
  7602  0ED7  0AD6               	incf	___awdiv@sign,f
  7603  0ED8                     l4682:	
  7604  0ED8  1FD4               	btfss	___awdiv@dividend+1,7
  7605  0ED9  2EE3               	goto	l4688
  7606  0EDA  09D3               	comf	___awdiv@dividend,f
  7607  0EDB  09D4               	comf	___awdiv@dividend+1,f
  7608  0EDC  0AD3               	incf	___awdiv@dividend,f
  7609  0EDD  1903               	skipnz
  7610  0EDE  0AD4               	incf	___awdiv@dividend+1,f
  7611  0EDF  3001               	movlw	1
  7612  0EE0  00F4               	movwf	??___awdiv
  7613  0EE1  0874               	movf	??___awdiv,w
  7614  0EE2  06D6               	xorwf	___awdiv@sign,f
  7615  0EE3                     l4688:	
  7616  0EE3  01D7               	clrf	___awdiv@quotient
  7617  0EE4  01D8               	clrf	___awdiv@quotient+1
  7618  0EE5  0852               	movf	___awdiv@divisor+1,w
  7619  0EE6  0451               	iorwf	___awdiv@divisor,w
  7620  0EE7  1903               	skipnz
  7621  0EE8  2F1A               	goto	l4710
  7622  0EE9  01D5               	clrf	___awdiv@counter
  7623  0EEA  0AD5               	incf	___awdiv@counter,f
  7624  0EEB                     l4698:	
  7625  0EEB  1BD2               	btfsc	___awdiv@divisor+1,7
  7626  0EEC  2EF9               	goto	l4700
  7627  0EED  3001               	movlw	1
  7628  0EEE                     u5405:	
  7629  0EEE  1003               	clrc
  7630  0EEF  0DD1               	rlf	___awdiv@divisor,f
  7631  0EF0  0DD2               	rlf	___awdiv@divisor+1,f
  7632  0EF1  3EFF               	addlw	-1
  7633  0EF2  1D03               	skipz
  7634  0EF3  2EEE               	goto	u5405
  7635  0EF4  3001               	movlw	1
  7636  0EF5  00F4               	movwf	??___awdiv
  7637  0EF6  0874               	movf	??___awdiv,w
  7638  0EF7  07D5               	addwf	___awdiv@counter,f
  7639  0EF8  2EEB               	goto	l4698
  7640  0EF9                     l4700:	
  7641  0EF9  3001               	movlw	1
  7642  0EFA                     u5425:	
  7643  0EFA  1003               	clrc
  7644  0EFB  0DD7               	rlf	___awdiv@quotient,f
  7645  0EFC  0DD8               	rlf	___awdiv@quotient+1,f
  7646  0EFD  3EFF               	addlw	-1
  7647  0EFE  1D03               	skipz
  7648  0EFF  2EFA               	goto	u5425
  7649  0F00  0852               	movf	___awdiv@divisor+1,w
  7650  0F01  0254               	subwf	___awdiv@dividend+1,w
  7651  0F02  1D03               	skipz
  7652  0F03  2F06               	goto	u5435
  7653  0F04  0851               	movf	___awdiv@divisor,w
  7654  0F05  0253               	subwf	___awdiv@dividend,w
  7655  0F06                     u5435:	
  7656  0F06  1C03               	skipc
  7657  0F07  2F0F               	goto	l4706
  7658  0F08  0851               	movf	___awdiv@divisor,w
  7659  0F09  02D3               	subwf	___awdiv@dividend,f
  7660  0F0A  0852               	movf	___awdiv@divisor+1,w
  7661  0F0B  1C03               	skipc
  7662  0F0C  03D4               	decf	___awdiv@dividend+1,f
  7663  0F0D  02D4               	subwf	___awdiv@dividend+1,f
  7664  0F0E  1457               	bsf	___awdiv@quotient,0
  7665  0F0F                     l4706:	
  7666  0F0F  3001               	movlw	1
  7667  0F10                     u5445:	
  7668  0F10  1003               	clrc
  7669  0F11  0CD2               	rrf	___awdiv@divisor+1,f
  7670  0F12  0CD1               	rrf	___awdiv@divisor,f
  7671  0F13  3EFF               	addlw	-1
  7672  0F14  1D03               	skipz
  7673  0F15  2F10               	goto	u5445
  7674  0F16  3001               	movlw	1
  7675  0F17  02D5               	subwf	___awdiv@counter,f
  7676  0F18  1D03               	btfss	3,2
  7677  0F19  2EF9               	goto	l4700
  7678  0F1A                     l4710:	
  7679  0F1A  0856               	movf	___awdiv@sign,w
  7680  0F1B  1903               	btfsc	3,2
  7681  0F1C  2F22               	goto	l4714
  7682  0F1D  09D7               	comf	___awdiv@quotient,f
  7683  0F1E  09D8               	comf	___awdiv@quotient+1,f
  7684  0F1F  0AD7               	incf	___awdiv@quotient,f
  7685  0F20  1903               	skipnz
  7686  0F21  0AD8               	incf	___awdiv@quotient+1,f
  7687  0F22                     l4714:	
  7688  0F22  0858               	movf	___awdiv@quotient+1,w
  7689  0F23  01D2               	clrf	?___awdiv+1
  7690  0F24  07D2               	addwf	?___awdiv+1,f
  7691  0F25  0857               	movf	___awdiv@quotient,w
  7692  0F26  01D1               	clrf	?___awdiv
  7693  0F27  07D1               	addwf	?___awdiv,f
  7694  0F28  0008               	return
  7695  0F29                     __end_of___awdiv:	
  7696                           
  7697                           	psect	text45
  7698  0A97                     __ptext45:	
  7699 ;; *************** function _Lights_Initialization *****************
  7700 ;; Defined at:
  7701 ;;		line 32 in file "../src/TriacRelay_B1.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, pclath, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7715 ;;      Params:         0       0       0       0
  7716 ;;      Locals:         0       0       0       0
  7717 ;;      Temps:          0       0       0       0
  7718 ;;      Totals:         0       0       0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		_setLights_Initialization
  7724 ;; This function is called by:
  7725 ;;		_main
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _Lights_Initialization
  7731  0A97                     _Lights_Initialization:	
  7732                           
  7733                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  7734                           
  7735                           ;incstack = 0
  7736                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7737  0A97  3001               	movlw	1
  7738  0A98  158A  22B6         	fcall	_setLights_Initialization
  7739  0A9A  0008               	return
  7740  0A9B                     __end_of_Lights_Initialization:	
  7741                           
  7742                           	psect	text46
  7743  0AB6                     __ptext46:	
  7744 ;; *************** function _setLights_Initialization *****************
  7745 ;; Defined at:
  7746 ;;		line 47 in file "../src/TriacRelay_B1.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  lights          1    wreg     unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  lights          1    0[BANK0 ] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;		None               void
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, pclath, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7760 ;;      Params:         0       0       0       0
  7761 ;;      Locals:         0       1       0       0
  7762 ;;      Temps:          0       0       0       0
  7763 ;;      Totals:         0       1       0       0
  7764 ;;Total ram usage:        1 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    3
  7767 ;; This function calls:
  7768 ;;		_LightsPointSelect
  7769 ;; This function is called by:
  7770 ;;		_Lights_Initialization
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           
  7775                           ;psect for function _setLights_Initialization
  7776  0AB6                     _setLights_Initialization:	
  7777                           
  7778                           ;incstack = 0
  7779                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7780                           ;setLights_Initialization@lights stored from wreg
  7781  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  7782  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  7783  0AB8  00D1               	movwf	setLights_Initialization@lights
  7784                           
  7785                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  7786  0AB9  0851               	movf	setLights_Initialization@lights,w
  7787  0ABA  158A  22EE         	fcall	_LightsPointSelect
  7788  0ABC  0008               	return
  7789  0ABD                     __end_of_setLights_Initialization:	
  7790                           
  7791                           	psect	text47
  7792  0A81                     __ptext47:	
  7793 ;; *************** function _LED_Main *****************
  7794 ;; Defined at:
  7795 ;;		line 47 in file "../src/LED_B1.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;		None
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;		None               void
  7802 ;; Registers used:
  7803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7809 ;;      Params:         0       0       0       0
  7810 ;;      Locals:         0       0       0       0
  7811 ;;      Temps:          0       0       0       0
  7812 ;;      Totals:         0       0       0       0
  7813 ;;Total ram usage:        0 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    5
  7816 ;; This function calls:
  7817 ;;		_setPIRLED_Main
  7818 ;; This function is called by:
  7819 ;;		_main
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function _LED_Main
  7825  0A81                     _LED_Main:	
  7826                           
  7827                           ;LED_B1.c: 55: setPIRLED_Main();
  7828                           
  7829                           ;incstack = 0
  7830                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7831  0A81  118A  2784         	fcall	_setPIRLED_Main
  7832  0A83  0008               	return
  7833  0A84                     __end_of_LED_Main:	
  7834                           
  7835                           	psect	text48
  7836  0784                     __ptext48:	
  7837 ;; *************** function _setPIRLED_Main *****************
  7838 ;; Defined at:
  7839 ;;		line 265 in file "../src/LED_B1.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;		None
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  count           1    3[BANK0 ] unsigned char 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;		None               void
  7846 ;; Registers used:
  7847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7853 ;;      Params:         0       0       0       0
  7854 ;;      Locals:         0       1       0       0
  7855 ;;      Temps:          0       1       0       0
  7856 ;;      Totals:         0       2       0       0
  7857 ;;Total ram usage:        2 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    4
  7860 ;; This function calls:
  7861 ;;		_setLED
  7862 ;; This function is called by:
  7863 ;;		_LED_Main
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           
  7868                           ;psect for function _setPIRLED_Main
  7869  0784                     _setPIRLED_Main:	
  7870                           
  7871                           ;LED_B1.c: 267: char count;
  7872                           ;LED_B1.c: 268: if (PIRLED.GO == 1) {
  7873                           
  7874                           ;incstack = 0
  7875                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7876  0784  1283               	bcf	3,5	;RP0=0, select bank0
  7877  0785  1303               	bcf	3,6	;RP1=0, select bank0
  7878  0786  1C2A               	btfss	_PIRLED,0
  7879  0787  0008               	return
  7880                           
  7881                           ;LED_B1.c: 269: PIRLED.Time++;
  7882  0788  3001               	movlw	1
  7883  0789  07AC               	addwf	_PIRLED+2,f
  7884  078A  1803               	skipnc
  7885  078B  0AAD               	incf	_PIRLED+3,f
  7886  078C  3000               	movlw	0
  7887  078D  07AD               	addwf	_PIRLED+3,f
  7888                           
  7889                           ;LED_B1.c: 270: if (PIRLED.Time >= 500 / 20) {
  7890  078E  3000               	movlw	0
  7891  078F  022D               	subwf	_PIRLED+3,w
  7892  0790  3019               	movlw	25
  7893  0791  1903               	skipnz
  7894  0792  022C               	subwf	_PIRLED+2,w
  7895  0793  1C03               	skipc
  7896  0794  0008               	return
  7897                           
  7898                           ;LED_B1.c: 271: PIRLED.Time = 0;
  7899  0795  01AC               	clrf	_PIRLED+2
  7900  0796  01AD               	clrf	_PIRLED+3
  7901                           
  7902                           ;LED_B1.c: 272: setLED(1, 0);
  7903  0797  01D1               	clrf	setLED@command
  7904  0798  3001               	movlw	1
  7905  0799  158A  278F  118A   	fcall	_setLED
  7906                           
  7907                           ;LED_B1.c: 273: setLED(2, 0);
  7908  079C  1283               	bcf	3,5	;RP0=0, select bank0
  7909  079D  1303               	bcf	3,6	;RP1=0, select bank0
  7910  079E  01D1               	clrf	setLED@command
  7911  079F  3002               	movlw	2
  7912  07A0  158A  278F  118A   	fcall	_setLED
  7913                           
  7914                           ;LED_B1.c: 274: if (PIRLED.GO1 == 1) {
  7915  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  7916  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  7917  07A5  1CAA               	btfss	_PIRLED,1
  7918  07A6  2FAB               	goto	l4754
  7919                           
  7920                           ;LED_B1.c: 275: count = 4;
  7921  07A7  3004               	movlw	4
  7922  07A8  00D3               	movwf	??_setPIRLED_Main
  7923  07A9  0853               	movf	??_setPIRLED_Main,w
  7924  07AA  00D4               	movwf	setPIRLED_Main@count
  7925  07AB                     l4754:	
  7926                           
  7927                           ;LED_B1.c: 276: }
  7928                           ;LED_B1.c: 277: if (PIRLED.GO2 == 1) {
  7929  07AB  1D2A               	btfss	_PIRLED,2
  7930  07AC  2FB1               	goto	l4758
  7931                           
  7932                           ;LED_B1.c: 278: count = 6;
  7933  07AD  3006               	movlw	6
  7934  07AE  00D3               	movwf	??_setPIRLED_Main
  7935  07AF  0853               	movf	??_setPIRLED_Main,w
  7936  07B0  00D4               	movwf	setPIRLED_Main@count
  7937  07B1                     l4758:	
  7938                           
  7939                           ;LED_B1.c: 279: }
  7940                           ;LED_B1.c: 280: if (PIRLED.GO3 == 1) {
  7941  07B1  1DAA               	btfss	_PIRLED,3
  7942  07B2  2FB7               	goto	l4762
  7943                           
  7944                           ;LED_B1.c: 281: count = 8;
  7945  07B3  3008               	movlw	8
  7946  07B4  00D3               	movwf	??_setPIRLED_Main
  7947  07B5  0853               	movf	??_setPIRLED_Main,w
  7948  07B6  00D4               	movwf	setPIRLED_Main@count
  7949  07B7                     l4762:	
  7950                           
  7951                           ;LED_B1.c: 282: }
  7952                           ;LED_B1.c: 283: PIRLED.Count++;
  7953  07B7  3001               	movlw	1
  7954  07B8  00D3               	movwf	??_setPIRLED_Main
  7955  07B9  0853               	movf	??_setPIRLED_Main,w
  7956  07BA  07AB               	addwf	_PIRLED+1,f
  7957                           
  7958                           ;LED_B1.c: 284: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7959  07BB  082B               	movf	_PIRLED+1,w
  7960  07BC  3A01               	xorlw	1
  7961  07BD  1903               	skipnz
  7962  07BE  2FC3               	goto	l4768
  7963  07BF  082B               	movf	_PIRLED+1,w
  7964  07C0  3A02               	xorlw	2
  7965  07C1  1D03               	skipz
  7966  07C2  2FD7               	goto	l4772
  7967  07C3                     l4768:	
  7968                           
  7969                           ;LED_B1.c: 285: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7970  07C3  1003               	clrc
  7971  07C4  1E2A               	btfss	_PIRLED,4
  7972  07C5  1403               	setc
  7973  07C6  1C03               	btfss	3,0
  7974  07C7  2FCC               	goto	u5560
  7975  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  7976  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  7977  07CA  162A               	bsf	_PIRLED,4
  7978  07CB  2FCF               	goto	l4770
  7979  07CC                     u5560:	
  7980  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  7981  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  7982  07CE  122A               	bcf	_PIRLED,4
  7983  07CF                     l4770:	
  7984                           
  7985                           ;LED_B1.c: 286: setLED(2, PIRLED.status);
  7986  07CF  3000               	movlw	0
  7987  07D0  1A2A               	btfsc	_PIRLED,4
  7988  07D1  3001               	movlw	1
  7989  07D2  00D1               	movwf	setLED@command
  7990  07D3  3002               	movlw	2
  7991  07D4  158A  278F         	fcall	_setLED
  7992                           
  7993                           ;LED_B1.c: 287: } else {
  7994  07D6  0008               	return
  7995  07D7                     l4772:	
  7996                           
  7997                           ;LED_B1.c: 288: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7998  07D7  1003               	clrc
  7999  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  8000  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  8001  07DA  1E2A               	btfss	_PIRLED,4
  8002  07DB  1403               	setc
  8003  07DC  1C03               	btfss	3,0
  8004  07DD  2FE2               	goto	u5580
  8005  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  8006  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  8007  07E0  162A               	bsf	_PIRLED,4
  8008  07E1  2FE5               	goto	l4774
  8009  07E2                     u5580:	
  8010  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  8011  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  8012  07E4  122A               	bcf	_PIRLED,4
  8013  07E5                     l4774:	
  8014                           
  8015                           ;LED_B1.c: 289: setLED(1, PIRLED.status);
  8016  07E5  3000               	movlw	0
  8017  07E6  1A2A               	btfsc	_PIRLED,4
  8018  07E7  3001               	movlw	1
  8019  07E8  00D1               	movwf	setLED@command
  8020  07E9  3001               	movlw	1
  8021  07EA  158A  278F  118A   	fcall	_setLED
  8022                           
  8023                           ;LED_B1.c: 290: if (PIRLED.Count == count) {
  8024  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  8025  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  8026  07EF  082B               	movf	_PIRLED+1,w
  8027  07F0  0654               	xorwf	setPIRLED_Main@count,w
  8028  07F1  1D03               	skipz
  8029  07F2  0008               	return
  8030                           
  8031                           ;LED_B1.c: 291: PIRLED.Count = 0;
  8032  07F3  01AB               	clrf	_PIRLED+1
  8033  07F4  0008               	return
  8034  07F5                     __end_of_setPIRLED_Main:	
  8035                           
  8036                           	psect	text49
  8037  0B02                     __ptext49:	
  8038 ;; *************** function _LED_Initialization *****************
  8039 ;; Defined at:
  8040 ;;		line 31 in file "../src/LED_B1.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;		None
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;		None
  8045 ;; Return value:  Size  Location     Type
  8046 ;;		None               void
  8047 ;; Registers used:
  8048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8054 ;;      Params:         0       0       0       0
  8055 ;;      Locals:         0       0       0       0
  8056 ;;      Temps:          0       0       0       0
  8057 ;;      Totals:         0       0       0       0
  8058 ;;Total ram usage:        0 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    5
  8061 ;; This function calls:
  8062 ;;		_setLED_Initialization
  8063 ;; This function is called by:
  8064 ;;		_main
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           
  8069                           ;psect for function _LED_Initialization
  8070  0B02                     _LED_Initialization:	
  8071                           
  8072                           ;LED_B1.c: 33: setLED_Initialization(1);
  8073                           
  8074                           ;incstack = 0
  8075                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8076  0B02  3001               	movlw	1
  8077  0B03  158A  2377  158A   	fcall	_setLED_Initialization
  8078                           
  8079                           ;LED_B1.c: 36: setLED_Initialization(2);
  8080  0B06  3002               	movlw	2
  8081  0B07  158A  2377  158A   	fcall	_setLED_Initialization
  8082                           
  8083                           ;LED_B1.c: 42: setLED_Initialization(99);
  8084  0B0A  3063               	movlw	99
  8085  0B0B  158A  2377         	fcall	_setLED_Initialization
  8086  0B0D  0008               	return
  8087  0B0E                     __end_of_LED_Initialization:	
  8088                           
  8089                           	psect	text50
  8090  0B77                     __ptext50:	
  8091 ;; *************** function _setLED_Initialization *****************
  8092 ;; Defined at:
  8093 ;;		line 74 in file "../src/LED_B1.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  led             1    wreg     unsigned char 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  led             1    2[BANK0 ] unsigned char 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;		None               void
  8100 ;; Registers used:
  8101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8107 ;;      Params:         0       0       0       0
  8108 ;;      Locals:         0       1       0       0
  8109 ;;      Temps:          0       0       0       0
  8110 ;;      Totals:         0       1       0       0
  8111 ;;Total ram usage:        1 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    4
  8114 ;; This function calls:
  8115 ;;		_LedPointSelect
  8116 ;;		_setLED
  8117 ;; This function is called by:
  8118 ;;		_LED_Initialization
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _setLED_Initialization
  8124  0B77                     _setLED_Initialization:	
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8128                           ;setLED_Initialization@led stored from wreg
  8129  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  8130  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  8131  0B79  00D3               	movwf	setLED_Initialization@led
  8132                           
  8133                           ;LED_B1.c: 75: LedPointSelect(led);
  8134  0B7A  0853               	movf	setLED_Initialization@led,w
  8135  0B7B  158A  2410  158A   	fcall	_LedPointSelect
  8136                           
  8137                           ;LED_B1.c: 76: LED->Enable = 1;
  8138  0B7E  0876               	movf	_LED,w
  8139  0B7F  0084               	movwf	4
  8140  0B80  1383               	bcf	3,7	;select IRP bank0
  8141  0B81  1400               	bsf	0,0
  8142                           
  8143                           ;LED_B1.c: 77: setLED(led, 0);
  8144  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  8145  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  8146  0B84  01D1               	clrf	setLED@command
  8147  0B85  0853               	movf	setLED_Initialization@led,w
  8148  0B86  158A  278F         	fcall	_setLED
  8149  0B88  0008               	return
  8150  0B89                     __end_of_setLED_Initialization:	
  8151                           
  8152                           	psect	text51
  8153  0545                     __ptext51:	
  8154 ;; *************** function _Exception_Main *****************
  8155 ;; Defined at:
  8156 ;;		line 499 in file "../src/Main_B1.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;		None
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;  i               2   12[BANK0 ] int 
  8161 ;;  i               2   10[BANK0 ] int 
  8162 ;;  error           1   14[BANK0 ] unsigned char 
  8163 ;;  status          1    9[BANK0 ] unsigned char 
  8164 ;;  count           1    8[BANK0 ] unsigned char 
  8165 ;;  lights          1    7[BANK0 ] unsigned char 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;		None               void
  8168 ;; Registers used:
  8169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8175 ;;      Params:         0       0       0       0
  8176 ;;      Locals:         0       8       0       0
  8177 ;;      Temps:          0       1       0       0
  8178 ;;      Totals:         0       9       0       0
  8179 ;;Total ram usage:        9 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    5
  8182 ;; This function calls:
  8183 ;;		_getAll_Lights_Line
  8184 ;;		_getLights_Status
  8185 ;;		_getMain_All_Error_Status
  8186 ;;		_getMain_All_LightsStatus
  8187 ;;		_setLED
  8188 ;;		_setLights_SwOff
  8189 ;;		_setLights_SwOn
  8190 ;; This function is called by:
  8191 ;;		_main
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           
  8196                           ;psect for function _Exception_Main
  8197  0545                     _Exception_Main:	
  8198                           
  8199                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8200                           
  8201                           ;incstack = 0
  8202                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8203  0545  3000               	movlw	0
  8204  0546  158A  25AE  118A   	fcall	_getMain_All_Error_Status
  8205  0549  1283               	bcf	3,5	;RP0=0, select bank0
  8206  054A  1303               	bcf	3,6	;RP1=0, select bank0
  8207  054B  00D7               	movwf	??_Exception_Main
  8208  054C  0857               	movf	??_Exception_Main,w
  8209  054D  00DF               	movwf	Exception_Main@error
  8210                           
  8211                           ;Main_B1.c: 501: char lights = 0, count = 1;
  8212  054E  01D8               	clrf	Exception_Main@lights
  8213  054F  01D9               	clrf	Exception_Main@count
  8214  0550  0AD9               	incf	Exception_Main@count,f
  8215                           
  8216                           ;Main_B1.c: 502: char status = 0;
  8217  0551  01DA               	clrf	Exception_Main@status
  8218                           
  8219                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8220  0552  1DA7               	btfss	_myMain+2,3
  8221  0553  2D60               	goto	l5388
  8222                           
  8223                           ;Main_B1.c: 505: if (error == 0) {
  8224  0554  08DF               	movf	Exception_Main@error,f
  8225  0555  1D03               	skipz
  8226  0556  0008               	return
  8227                           
  8228                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8229  0557  11A7               	bcf	_myMain+2,3
  8230                           
  8231                           ;Main_B1.c: 511: setLED(error, 110);
  8232  0558  306E               	movlw	110
  8233  0559  00D7               	movwf	??_Exception_Main
  8234  055A  0857               	movf	??_Exception_Main,w
  8235  055B  00D1               	movwf	setLED@command
  8236  055C  085F               	movf	Exception_Main@error,w
  8237  055D  158A  278F         	fcall	_setLED
  8238                           
  8239                           ;Main_B1.c: 522: }
  8240                           ;Main_B1.c: 523: } else {
  8241  055F  0008               	return
  8242  0560                     l5388:	
  8243                           
  8244                           ;Main_B1.c: 524: if (error != 0) {
  8245  0560  1283               	bcf	3,5	;RP0=0, select bank0
  8246  0561  1303               	bcf	3,6	;RP1=0, select bank0
  8247  0562  085F               	movf	Exception_Main@error,w
  8248  0563  1903               	btfsc	3,2
  8249  0564  0008               	return
  8250                           
  8251                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8252  0565  15A7               	bsf	_myMain+2,3
  8253                           
  8254                           ;Main_B1.c: 529: setLED(error, 111);
  8255  0566  306F               	movlw	111
  8256  0567  00D7               	movwf	??_Exception_Main
  8257  0568  0857               	movf	??_Exception_Main,w
  8258  0569  00D1               	movwf	setLED@command
  8259  056A  085F               	movf	Exception_Main@error,w
  8260  056B  158A  278F  118A   	fcall	_setLED
  8261                           
  8262                           ;Main_B1.c: 591: switch (error) {
  8263  056E  2DF8               	goto	l5424
  8264  056F                     l5394:	
  8265                           ;Main_B1.c: 592: case 1:
  8266                           
  8267                           
  8268                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8269  056F  1283               	bcf	3,5	;RP0=0, select bank0
  8270  0570  1303               	bcf	3,6	;RP1=0, select bank0
  8271  0571  01DB               	clrf	Exception_Main@i
  8272  0572  01DC               	clrf	Exception_Main@i+1
  8273  0573                     l5402:	
  8274  0573  085C               	movf	Exception_Main@i+1,w
  8275  0574  3A80               	xorlw	128
  8276  0575  00D7               	movwf	??_Exception_Main
  8277  0576  3080               	movlw	128
  8278  0577  0257               	subwf	??_Exception_Main,w
  8279  0578  1D03               	skipz
  8280  0579  2D7C               	goto	u6975
  8281  057A  0859               	movf	Exception_Main@count,w
  8282  057B  025B               	subwf	Exception_Main@i,w
  8283  057C                     u6975:	
  8284  057C  1803               	btfsc	3,0
  8285  057D  2D9F               	goto	u6970
  8286                           
  8287                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8288  057E  1283               	bcf	3,5	;RP0=0, select bank0
  8289  057F  1303               	bcf	3,6	;RP1=0, select bank0
  8290  0580  085B               	movf	Exception_Main@i,w
  8291  0581  3E01               	addlw	1
  8292  0582  158A  2355  118A   	fcall	_getLights_Status
  8293  0585  3A01               	xorlw	1
  8294  0586  1D03               	skipz
  8295  0587  2D96               	goto	l5400
  8296                           
  8297                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8298  0588  1283               	bcf	3,5	;RP0=0, select bank0
  8299  0589  1303               	bcf	3,6	;RP1=0, select bank0
  8300  058A  085B               	movf	Exception_Main@i,w
  8301  058B  3E01               	addlw	1
  8302  058C  158A  24D5  118A   	fcall	_setLights_SwOn
  8303                           
  8304                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8305  058F  1283               	bcf	3,5	;RP0=0, select bank0
  8306  0590  1303               	bcf	3,6	;RP1=0, select bank0
  8307  0591  085B               	movf	Exception_Main@i,w
  8308  0592  3E01               	addlw	1
  8309  0593  158A  242A  118A   	fcall	_setLights_SwOff
  8310  0596                     l5400:	
  8311  0596  3001               	movlw	1
  8312  0597  1283               	bcf	3,5	;RP0=0, select bank0
  8313  0598  1303               	bcf	3,6	;RP1=0, select bank0
  8314  0599  07DB               	addwf	Exception_Main@i,f
  8315  059A  1803               	skipnc
  8316  059B  0ADC               	incf	Exception_Main@i+1,f
  8317  059C  3000               	movlw	0
  8318  059D  07DC               	addwf	Exception_Main@i+1,f
  8319  059E  2D73               	goto	l5402
  8320  059F                     u6970:	
  8321  059F  1283               	bcf	3,5	;RP0=0, select bank0
  8322  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  8323  05A1  0008               	return
  8324  05A2                     l5404:	
  8325                           ;Main_B1.c: 601: case 2:
  8326                           
  8327                           ;Main_B1.c: 598: }
  8328                           ;Main_B1.c: 599: }
  8329                           ;Main_B1.c: 600: break;
  8330                           
  8331                           
  8332                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8333  05A2  158A  22E5  118A   	fcall	_getMain_All_LightsStatus
  8334                           
  8335                           ;Main_B1.c: 604: }
  8336                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8337                           
  8338                           ;Main_B1.c: 603: ;;
  8339  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  8340  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  8341  05A7  01DD               	clrf	Exception_Main@i_2155
  8342  05A8  01DE               	clrf	Exception_Main@i_2155+1
  8343  05A9                     l5414:	
  8344  05A9  085E               	movf	Exception_Main@i_2155+1,w
  8345  05AA  3A80               	xorlw	128
  8346  05AB  00D7               	movwf	??_Exception_Main
  8347  05AC  3080               	movlw	128
  8348  05AD  0257               	subwf	??_Exception_Main,w
  8349  05AE  1D03               	skipz
  8350  05AF  2DB2               	goto	u6995
  8351  05B0  0859               	movf	Exception_Main@count,w
  8352  05B1  025D               	subwf	Exception_Main@i_2155,w
  8353  05B2                     u6995:	
  8354  05B2  1803               	btfsc	3,0
  8355  05B3  2DD5               	goto	u6990
  8356                           
  8357                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8358  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  8359  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  8360  05B6  085D               	movf	Exception_Main@i_2155,w
  8361  05B7  3E01               	addlw	1
  8362  05B8  158A  2355  118A   	fcall	_getLights_Status
  8363  05BB  3A01               	xorlw	1
  8364  05BC  1D03               	skipz
  8365  05BD  2DCC               	goto	l5412
  8366                           
  8367                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8368  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  8369  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  8370  05C0  085D               	movf	Exception_Main@i_2155,w
  8371  05C1  3E01               	addlw	1
  8372  05C2  158A  24D5  118A   	fcall	_setLights_SwOn
  8373                           
  8374                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8375  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  8376  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  8377  05C7  085D               	movf	Exception_Main@i_2155,w
  8378  05C8  3E01               	addlw	1
  8379  05C9  158A  242A  118A   	fcall	_setLights_SwOff
  8380  05CC                     l5412:	
  8381  05CC  3001               	movlw	1
  8382  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  8383  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  8384  05CF  07DD               	addwf	Exception_Main@i_2155,f
  8385  05D0  1803               	skipnc
  8386  05D1  0ADE               	incf	Exception_Main@i_2155+1,f
  8387  05D2  3000               	movlw	0
  8388  05D3  07DE               	addwf	Exception_Main@i_2155+1,f
  8389  05D4  2DA9               	goto	l5414
  8390  05D5                     u6990:	
  8391  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  8392  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  8393  05D7  0008               	return
  8394  05D8                     l5416:	
  8395                           ;Main_B1.c: 613: case 3:
  8396                           
  8397                           ;Main_B1.c: 610: }
  8398                           ;Main_B1.c: 611: }
  8399                           ;Main_B1.c: 612: break;
  8400                           
  8401                           
  8402                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8403  05D8  158A  22DC  118A   	fcall	_getAll_Lights_Line
  8404  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  8405  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  8406  05DD  00D7               	movwf	??_Exception_Main
  8407  05DE  0857               	movf	??_Exception_Main,w
  8408  05DF  00DA               	movwf	Exception_Main@status
  8409                           
  8410                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8411  05E0  085A               	movf	Exception_Main@status,w
  8412  05E1  158A  2355  118A   	fcall	_getLights_Status
  8413  05E4  3A01               	xorlw	1
  8414  05E5  1903               	btfsc	3,2
  8415  05E6  2DEA               	goto	l5420
  8416  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  8417  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  8418  05E9  0008               	return
  8419  05EA                     l5420:	
  8420                           
  8421                           ;Main_B1.c: 617: setLights_SwOn(status);
  8422  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  8423  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  8424  05EC  085A               	movf	Exception_Main@status,w
  8425  05ED  158A  24D5  118A   	fcall	_setLights_SwOn
  8426                           
  8427                           ;Main_B1.c: 618: setLights_SwOff(status);
  8428  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  8429  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  8430  05F2  085A               	movf	Exception_Main@status,w
  8431  05F3  158A  242A         	fcall	_setLights_SwOff
  8432  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  8433  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  8434  05F7  0008               	return
  8435  05F8                     l5424:	
  8436                           ;Main_B1.c: 623: }
  8437                           
  8438                           ;Main_B1.c: 620: }
  8439                           ;Main_B1.c: 621: ;;
  8440                           ;Main_B1.c: 622: break;
  8441                           
  8442  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  8443  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  8444  05FA  085F               	movf	Exception_Main@error,w
  8445                           
  8446                           ; Switch size 1, requested type "space"
  8447                           ; Number of cases is 3, Range of values is 1 to 3
  8448                           ; switch strategies available:
  8449                           ; Name         Instructions Cycles
  8450                           ; simple_byte           10     6 (average)
  8451                           ; direct_byte           16    10 (fixed)
  8452                           ; jumptable            263     9 (fixed)
  8453                           ;	Chosen strategy is simple_byte
  8454  05FB  3A01               	xorlw	1	; case 1
  8455  05FC  1903               	skipnz
  8456  05FD  2D6F               	goto	l5394
  8457  05FE  3A03               	xorlw	3	; case 2
  8458  05FF  1903               	skipnz
  8459  0600  2DA2               	goto	l5404
  8460  0601  3A01               	xorlw	1	; case 3
  8461  0602  1903               	skipnz
  8462  0603  2DD8               	goto	l5416
  8463  0604  2E06               	goto	l644
  8464  0605  0008               	return
  8465  0606                     l644:	
  8466  0606  0008               	return
  8467  0607                     __end_of_Exception_Main:	
  8468                           
  8469                           	psect	text52
  8470  0CD5                     __ptext52:	
  8471 ;; *************** function _setLights_SwOn *****************
  8472 ;; Defined at:
  8473 ;;		line 410 in file "../src/TriacRelay_B1.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  sw              1    wreg     unsigned char 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;  sw              1    3[BANK0 ] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;		None               void
  8480 ;; Registers used:
  8481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8487 ;;      Params:         0       0       0       0
  8488 ;;      Locals:         0       1       0       0
  8489 ;;      Temps:          0       0       0       0
  8490 ;;      Totals:         0       1       0       0
  8491 ;;Total ram usage:        1 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    4
  8494 ;; This function calls:
  8495 ;;		_LightsPointSelect
  8496 ;;		_getLights_Status
  8497 ;;		_setLights_Trigger
  8498 ;; This function is called by:
  8499 ;;		_Exception_Main
  8500 ;;		_PIR_Main
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           
  8505                           ;psect for function _setLights_SwOn
  8506  0CD5                     _setLights_SwOn:	
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8510                           ;setLights_SwOn@sw stored from wreg
  8511  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  8512  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  8513  0CD7  00D4               	movwf	setLights_SwOn@sw
  8514                           
  8515                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  8516  0CD8  0854               	movf	setLights_SwOn@sw,w
  8517  0CD9  158A  22EE  158A   	fcall	_LightsPointSelect
  8518                           
  8519                           ;TriacRelay_B1.c: 414: Lights->SwFlag = 1;
  8520  0CDC  0A78               	incf	_Lights,w
  8521  0CDD  0084               	movwf	4
  8522  0CDE  1383               	bcf	3,7	;select IRP bank0
  8523  0CDF  1500               	bsf	0,2
  8524                           
  8525                           ;TriacRelay_B1.c: 415: if (getLights_Status(sw) == 0) {
  8526  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
  8527  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
  8528  0CE2  0854               	movf	setLights_SwOn@sw,w
  8529  0CE3  158A  2355  158A   	fcall	_getLights_Status
  8530  0CE6  3800               	iorlw	0
  8531  0CE7  1D03               	skipz
  8532  0CE8  2CF5               	goto	l4790
  8533                           
  8534                           ;TriacRelay_B1.c: 416: Lights->SwStatus = 1;
  8535  0CE9  0A78               	incf	_Lights,w
  8536  0CEA  0084               	movwf	4
  8537  0CEB  1383               	bcf	3,7	;select IRP bank0
  8538  0CEC  1580               	bsf	0,3
  8539                           
  8540                           ;TriacRelay_B1.c: 417: setLights_Trigger(sw, 1);
  8541  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  8542  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  8543  0CEF  01D1               	clrf	setLights_Trigger@command
  8544  0CF0  0AD1               	incf	setLights_Trigger@command,f
  8545  0CF1  0854               	movf	setLights_SwOn@sw,w
  8546  0CF2  158A  245E         	fcall	_setLights_Trigger
  8547                           
  8548                           ;TriacRelay_B1.c: 418: } else {
  8549  0CF4  0008               	return
  8550  0CF5                     l4790:	
  8551                           
  8552                           ;TriacRelay_B1.c: 419: Lights->SwStatus = 0;
  8553  0CF5  0A78               	incf	_Lights,w
  8554  0CF6  0084               	movwf	4
  8555  0CF7  1383               	bcf	3,7	;select IRP bank0
  8556  0CF8  1180               	bcf	0,3
  8557  0CF9  0008               	return
  8558  0CFA                     __end_of_setLights_SwOn:	
  8559                           
  8560                           	psect	text53
  8561  0B55                     __ptext53:	
  8562 ;; *************** function _getLights_Status *****************
  8563 ;; Defined at:
  8564 ;;		line 271 in file "../src/TriacRelay_B1.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  lights          1    wreg     unsigned char 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  lights          1    0[BANK0 ] unsigned char 
  8569 ;;  status          1    1[BANK0 ] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      unsigned char 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8579 ;;      Params:         0       0       0       0
  8580 ;;      Locals:         0       2       0       0
  8581 ;;      Temps:          0       0       0       0
  8582 ;;      Totals:         0       2       0       0
  8583 ;;Total ram usage:        2 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    3
  8586 ;; This function calls:
  8587 ;;		_LightsPointSelect
  8588 ;; This function is called by:
  8589 ;;		_Exception_Main
  8590 ;;		_PIR_Main
  8591 ;;		_setLights_SwOn
  8592 ;;		_setLights_ErrorClose
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function _getLights_Status
  8598  0B55                     _getLights_Status:	
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8602                           ;getLights_Status@lights stored from wreg
  8603  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  8604  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  8605  0B57  00D1               	movwf	getLights_Status@lights
  8606                           
  8607                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  8608  0B58  0851               	movf	getLights_Status@lights,w
  8609  0B59  158A  22EE         	fcall	_LightsPointSelect
  8610                           
  8611                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  8612  0B5B  0878               	movf	_Lights,w
  8613  0B5C  0084               	movwf	4
  8614  0B5D  3000               	movlw	0
  8615  0B5E  1383               	bcf	3,7	;select IRP bank0
  8616  0B5F  1900               	btfsc	0,2
  8617  0B60  3001               	movlw	1
  8618  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  8619  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  8620  0B63  00D2               	movwf	getLights_Status@status
  8621                           
  8622                           ;TriacRelay_B1.c: 274: return status;
  8623  0B64  0852               	movf	getLights_Status@status,w
  8624  0B65  0008               	return
  8625  0B66                     __end_of_getLights_Status:	
  8626                           
  8627                           	psect	text54
  8628  0C2A                     __ptext54:	
  8629 ;; *************** function _setLights_SwOff *****************
  8630 ;; Defined at:
  8631 ;;		line 438 in file "../src/TriacRelay_B1.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;  sw              1    wreg     unsigned char 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  sw              1    3[BANK0 ] unsigned char 
  8636 ;; Return value:  Size  Location     Type
  8637 ;;		None               void
  8638 ;; Registers used:
  8639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8645 ;;      Params:         0       0       0       0
  8646 ;;      Locals:         0       1       0       0
  8647 ;;      Temps:          0       0       0       0
  8648 ;;      Totals:         0       1       0       0
  8649 ;;Total ram usage:        1 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    4
  8652 ;; This function calls:
  8653 ;;		_LightsPointSelect
  8654 ;;		_setLights_Trigger
  8655 ;; This function is called by:
  8656 ;;		_Exception_Main
  8657 ;;		_PIR_Main
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           
  8662                           ;psect for function _setLights_SwOff
  8663  0C2A                     _setLights_SwOff:	
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8667                           ;setLights_SwOff@sw stored from wreg
  8668  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  8669  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  8670  0C2C  00D4               	movwf	setLights_SwOff@sw
  8671                           
  8672                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  8673  0C2D  0854               	movf	setLights_SwOff@sw,w
  8674  0C2E  158A  22EE  158A   	fcall	_LightsPointSelect
  8675                           
  8676                           ;TriacRelay_B1.c: 442: if (Lights->SwFlag == 1) {
  8677  0C31  0A78               	incf	_Lights,w
  8678  0C32  0084               	movwf	4
  8679  0C33  1383               	bcf	3,7	;select IRP bank0
  8680  0C34  1D00               	btfss	0,2
  8681  0C35  0008               	return
  8682                           
  8683                           ;TriacRelay_B1.c: 443: Lights->SwFlag = 0;
  8684  0C36  0A78               	incf	_Lights,w
  8685  0C37  0084               	movwf	4
  8686  0C38  1100               	bcf	0,2
  8687                           
  8688                           ;TriacRelay_B1.c: 444: if (Lights->SwStatus == 0) {
  8689  0C39  0A78               	incf	_Lights,w
  8690  0C3A  0084               	movwf	4
  8691  0C3B  1980               	btfsc	0,3
  8692  0C3C  0008               	return
  8693                           
  8694                           ;TriacRelay_B1.c: 445: setLights_Trigger(sw, 0);
  8695  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  8696  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  8697  0C3F  01D1               	clrf	setLights_Trigger@command
  8698  0C40  0854               	movf	setLights_SwOff@sw,w
  8699  0C41  158A  245E         	fcall	_setLights_Trigger
  8700  0C43  0008               	return
  8701  0C44                     __end_of_setLights_SwOff:	
  8702                           
  8703                           	psect	text55
  8704  0C5E                     __ptext55:	
  8705 ;; *************** function _setLights_Trigger *****************
  8706 ;; Defined at:
  8707 ;;		line 278 in file "../src/TriacRelay_B1.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  lights          1    wreg     unsigned char 
  8710 ;;  command         1    0[BANK0 ] unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  lights          1    2[BANK0 ] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;		None               void
  8715 ;; Registers used:
  8716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8722 ;;      Params:         0       1       0       0
  8723 ;;      Locals:         0       1       0       0
  8724 ;;      Temps:          0       1       0       0
  8725 ;;      Totals:         0       3       0       0
  8726 ;;Total ram usage:        3 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    3
  8729 ;; This function calls:
  8730 ;;		_LightsPointSelect
  8731 ;; This function is called by:
  8732 ;;		_setLights_SwOn
  8733 ;;		_setLights_SwOff
  8734 ;;		_setLights_ErrorClose
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           
  8739                           ;psect for function _setLights_Trigger
  8740  0C5E                     _setLights_Trigger:	
  8741                           
  8742                           ;incstack = 0
  8743                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8744                           ;setLights_Trigger@lights stored from wreg
  8745  0C5E  1283               	bcf	3,5	;RP0=0, select bank0
  8746  0C5F  1303               	bcf	3,6	;RP1=0, select bank0
  8747  0C60  00D3               	movwf	setLights_Trigger@lights
  8748                           
  8749                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  8750  0C61  0853               	movf	setLights_Trigger@lights,w
  8751  0C62  158A  22EE         	fcall	_LightsPointSelect
  8752                           
  8753                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  8754  0C64  0878               	movf	_Lights,w
  8755  0C65  0084               	movwf	4
  8756  0C66  1383               	bcf	3,7	;select IRP bank0
  8757  0C67  1580               	bsf	0,3
  8758                           
  8759                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  8760  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  8761  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  8762  0C6A  0851               	movf	setLights_Trigger@command,w
  8763  0C6B  3A01               	xorlw	1
  8764  0C6C  3000               	movlw	0
  8765  0C6D  1903               	skipnz
  8766  0C6E  3001               	movlw	1
  8767  0C6F  00D2               	movwf	??_setLights_Trigger
  8768  0C70  0878               	movf	_Lights,w
  8769  0C71  0084               	movwf	4
  8770  0C72  0ED2               	swapf	??_setLights_Trigger,f
  8771  0C73  0800               	movf	0,w
  8772  0C74  0652               	xorwf	??_setLights_Trigger,w
  8773  0C75  39EF               	andlw	-17
  8774  0C76  0652               	xorwf	??_setLights_Trigger,w
  8775  0C77  0080               	movwf	0
  8776  0C78  0008               	return
  8777  0C79                     __end_of_setLights_Trigger:	
  8778                           
  8779                           	psect	text56
  8780  0AEE                     __ptext56:	
  8781 ;; *************** function _LightsPointSelect *****************
  8782 ;; Defined at:
  8783 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  lights          1    wreg     unsigned char 
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;  lights          1    5[COMMON] unsigned char 
  8788 ;; Return value:  Size  Location     Type
  8789 ;;		None               void
  8790 ;; Registers used:
  8791 ;;		wreg
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8797 ;;      Params:         0       0       0       0
  8798 ;;      Locals:         1       0       0       0
  8799 ;;      Temps:          1       0       0       0
  8800 ;;      Totals:         2       0       0       0
  8801 ;;Total ram usage:        2 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    2
  8804 ;; This function calls:
  8805 ;;		Nothing
  8806 ;; This function is called by:
  8807 ;;		_setLights_Initialization
  8808 ;;		_setLights_Main
  8809 ;;		_Lights_Control
  8810 ;;		_getLights_Status
  8811 ;;		_setLights_Trigger
  8812 ;;		_setLights_SwOn
  8813 ;;		_setLights_SwOff
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           
  8818                           ;psect for function _LightsPointSelect
  8819  0AEE                     _LightsPointSelect:	
  8820                           
  8821                           ;incstack = 0
  8822                           ; Regs used in _LightsPointSelect: [wreg]
  8823                           ;LightsPointSelect@lights stored from wreg
  8824  0AEE  00F5               	movwf	LightsPointSelect@lights
  8825                           
  8826                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  8827  0AEF  0875               	movf	LightsPointSelect@lights,w
  8828  0AF0  3A01               	xorlw	1
  8829  0AF1  1D03               	skipz
  8830  0AF2  0008               	return
  8831                           
  8832                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  8833  0AF3  3040               	movlw	_Lights1& (0+255)
  8834  0AF4  00F4               	movwf	??_LightsPointSelect
  8835  0AF5  0874               	movf	??_LightsPointSelect,w
  8836  0AF6  00F8               	movwf	_Lights
  8837  0AF7  0008               	return
  8838  0AF8                     __end_of_LightsPointSelect:	
  8839                           
  8840                           	psect	text57
  8841  0F8F                     __ptext57:	
  8842 ;; *************** function _setLED *****************
  8843 ;; Defined at:
  8844 ;;		line 81 in file "../src/LED_B1.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;  led             1    wreg     unsigned char 
  8847 ;;  command         1    0[BANK0 ] unsigned char 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  led             1    1[BANK0 ] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;		None               void
  8852 ;; Registers used:
  8853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8859 ;;      Params:         0       1       0       0
  8860 ;;      Locals:         0       1       0       0
  8861 ;;      Temps:          0       0       0       0
  8862 ;;      Totals:         0       2       0       0
  8863 ;;Total ram usage:        2 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    3
  8866 ;; This function calls:
  8867 ;;		_LedPointSelect
  8868 ;; This function is called by:
  8869 ;;		_setLED_Initialization
  8870 ;;		_setPIRLED_Main
  8871 ;;		_Exception_Main
  8872 ;;		_PIR_Main
  8873 ;;		_setLights
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           
  8878                           ;psect for function _setLED
  8879  0F8F                     _setLED:	
  8880                           
  8881                           ;incstack = 0
  8882                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8883                           ;setLED@led stored from wreg
  8884  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8885  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8886  0F91  00D2               	movwf	setLED@led
  8887                           
  8888                           ;LED_B1.c: 82: LedPointSelect(led);
  8889  0F92  0852               	movf	setLED@led,w
  8890  0F93  158A  2410  158A   	fcall	_LedPointSelect
  8891                           
  8892                           ;LED_B1.c: 83: if (command == 0) {
  8893  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  8894  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  8895  0F98  08D1               	movf	setLED@command,f
  8896  0F99  1D03               	skipz
  8897  0F9A  2FA8               	goto	l4512
  8898                           
  8899                           ;LED_B1.c: 85: if (led == 1) {
  8900  0F9B  0852               	movf	setLED@led,w
  8901  0F9C  3A01               	xorlw	1
  8902  0F9D  1D03               	skipz
  8903  0F9E  2FA0               	goto	l4504
  8904                           
  8905                           ;LED_B1.c: 89: RB4 = 1;
  8906  0F9F  1606               	bsf	6,4	;volatile
  8907  0FA0                     l4504:	
  8908                           
  8909                           ;LED_B1.c: 91: }
  8910                           ;LED_B1.c: 94: if (led == 2) {
  8911  0FA0  0852               	movf	setLED@led,w
  8912  0FA1  3A02               	xorlw	2
  8913  0FA2  1903               	btfsc	3,2
  8914                           
  8915                           ;LED_B1.c: 98: RB5 = 1;
  8916  0FA3  1686               	bsf	6,5	;volatile
  8917                           
  8918                           ;LED_B1.c: 100: }
  8919                           ;LED_B1.c: 112: if (led == 99) {
  8920  0FA4  0852               	movf	setLED@led,w
  8921  0FA5  3A63               	xorlw	99
  8922  0FA6  1903               	btfsc	3,2
  8923                           
  8924                           ;LED_B1.c: 116: RB3 = 1;
  8925  0FA7  1586               	bsf	6,3	;volatile
  8926  0FA8                     l4512:	
  8927                           
  8928                           ;LED_B1.c: 118: }
  8929                           ;LED_B1.c: 120: }
  8930                           ;LED_B1.c: 121: if (command == 1) {
  8931  0FA8  0851               	movf	setLED@command,w
  8932  0FA9  3A01               	xorlw	1
  8933  0FAA  1D03               	skipz
  8934  0FAB  2FB9               	goto	l4526
  8935                           
  8936                           ;LED_B1.c: 123: if (led == 1) {
  8937  0FAC  0852               	movf	setLED@led,w
  8938  0FAD  3A01               	xorlw	1
  8939  0FAE  1D03               	skipz
  8940  0FAF  2FB1               	goto	l4518
  8941                           
  8942                           ;LED_B1.c: 127: RB4 = 0;
  8943  0FB0  1206               	bcf	6,4	;volatile
  8944  0FB1                     l4518:	
  8945                           
  8946                           ;LED_B1.c: 129: }
  8947                           ;LED_B1.c: 132: if (led == 2) {
  8948  0FB1  0852               	movf	setLED@led,w
  8949  0FB2  3A02               	xorlw	2
  8950  0FB3  1903               	btfsc	3,2
  8951                           
  8952                           ;LED_B1.c: 136: RB5 = 0;
  8953  0FB4  1286               	bcf	6,5	;volatile
  8954                           
  8955                           ;LED_B1.c: 138: }
  8956                           ;LED_B1.c: 150: if (led == 99) {
  8957  0FB5  0852               	movf	setLED@led,w
  8958  0FB6  3A63               	xorlw	99
  8959  0FB7  1903               	btfsc	3,2
  8960                           
  8961                           ;LED_B1.c: 154: RB3 = 0;
  8962  0FB8  1186               	bcf	6,3	;volatile
  8963  0FB9                     l4526:	
  8964                           
  8965                           ;LED_B1.c: 156: }
  8966                           ;LED_B1.c: 158: }
  8967                           ;LED_B1.c: 159: if (command == 10) {
  8968  0FB9  0851               	movf	setLED@command,w
  8969  0FBA  3A0A               	xorlw	10
  8970  0FBB  1D03               	skipz
  8971  0FBC  2FD4               	goto	l4544
  8972                           
  8973                           ;LED_B1.c: 160: LED->GO = 0;
  8974  0FBD  0876               	movf	_LED,w
  8975  0FBE  0084               	movwf	4
  8976  0FBF  1383               	bcf	3,7	;select IRP bank0
  8977  0FC0  1080               	bcf	0,1
  8978                           
  8979                           ;LED_B1.c: 161: LED->Time = 0;
  8980  0FC1  0A76               	incf	_LED,w
  8981  0FC2  0084               	movwf	4
  8982  0FC3  0180               	clrf	0
  8983  0FC4  0A84               	incf	4,f
  8984  0FC5  0180               	clrf	0
  8985                           
  8986                           ;LED_B1.c: 163: if (led == 1) {
  8987  0FC6  0852               	movf	setLED@led,w
  8988  0FC7  3A01               	xorlw	1
  8989  0FC8  1D03               	skipz
  8990  0FC9  2FCC               	goto	l4536
  8991                           
  8992                           ;LED_B1.c: 167: RB4 = 1;
  8993  0FCA  1606               	bsf	6,4	;volatile
  8994                           
  8995                           ;LED_B1.c: 169: }
  8996  0FCB  2FD0               	goto	l4540
  8997  0FCC                     l4536:	
  8998                           
  8999                           ;LED_B1.c: 172: else if (led == 2) {
  9000  0FCC  0852               	movf	setLED@led,w
  9001  0FCD  3A02               	xorlw	2
  9002  0FCE  1903               	btfsc	3,2
  9003                           
  9004                           ;LED_B1.c: 176: RB5 = 1;
  9005  0FCF  1686               	bsf	6,5	;volatile
  9006  0FD0                     l4540:	
  9007                           
  9008                           ;LED_B1.c: 178: }
  9009                           ;LED_B1.c: 190: if (led == 99) {
  9010  0FD0  0852               	movf	setLED@led,w
  9011  0FD1  3A63               	xorlw	99
  9012  0FD2  1903               	btfsc	3,2
  9013                           
  9014                           ;LED_B1.c: 194: RB3 = 1;
  9015  0FD3  1586               	bsf	6,3	;volatile
  9016  0FD4                     l4544:	
  9017                           
  9018                           ;LED_B1.c: 196: }
  9019                           ;LED_B1.c: 198: }
  9020                           ;LED_B1.c: 199: if (command == 11) {
  9021  0FD4  0851               	movf	setLED@command,w
  9022  0FD5  3A0B               	xorlw	11
  9023  0FD6  1D03               	skipz
  9024  0FD7  2FDC               	goto	l4548
  9025                           
  9026                           ;LED_B1.c: 200: LED->GO = 1;
  9027  0FD8  0876               	movf	_LED,w
  9028  0FD9  0084               	movwf	4
  9029  0FDA  1383               	bcf	3,7	;select IRP bank0
  9030  0FDB  1480               	bsf	0,1
  9031  0FDC                     l4548:	
  9032                           
  9033                           ;LED_B1.c: 201: }
  9034                           ;LED_B1.c: 205: if (command == 111) {
  9035  0FDC  0851               	movf	setLED@command,w
  9036  0FDD  3A6F               	xorlw	111
  9037  0FDE  1D03               	skipz
  9038  0FDF  2FFA               	goto	l4574
  9039                           
  9040                           ;LED_B1.c: 206: PIRLED.Count = 0;
  9041  0FE0  01AB               	clrf	_PIRLED+1
  9042                           
  9043                           ;LED_B1.c: 207: PIRLED.Time = 0;
  9044  0FE1  01AC               	clrf	_PIRLED+2
  9045  0FE2  01AD               	clrf	_PIRLED+3
  9046                           
  9047                           ;LED_B1.c: 208: PIRLED.status = 0;
  9048  0FE3  122A               	bcf	_PIRLED,4
  9049                           
  9050                           ;LED_B1.c: 209: PIRLED.GO = 1;
  9051  0FE4  142A               	bsf	_PIRLED,0
  9052                           
  9053                           ;LED_B1.c: 210: PIRLED.GO1 = 0;
  9054  0FE5  10AA               	bcf	_PIRLED,1
  9055                           
  9056                           ;LED_B1.c: 211: PIRLED.GO2 = 0;
  9057  0FE6  112A               	bcf	_PIRLED,2
  9058                           
  9059                           ;LED_B1.c: 212: PIRLED.GO3 = 0;
  9060  0FE7  11AA               	bcf	_PIRLED,3
  9061                           
  9062                           ;LED_B1.c: 213: if (led == 1) {
  9063  0FE8  0852               	movf	setLED@led,w
  9064  0FE9  3A01               	xorlw	1
  9065  0FEA  1D03               	skipz
  9066  0FEB  2FEE               	goto	l4566
  9067                           
  9068                           ;LED_B1.c: 214: PIRLED.GO1 = 1;
  9069  0FEC  14AA               	bsf	_PIRLED,1
  9070                           
  9071                           ;LED_B1.c: 215: } else if (led == 2) {
  9072  0FED  0008               	return
  9073  0FEE                     l4566:	
  9074  0FEE  0852               	movf	setLED@led,w
  9075  0FEF  3A02               	xorlw	2
  9076  0FF0  1D03               	skipz
  9077  0FF1  2FF4               	goto	l4570
  9078                           
  9079                           ;LED_B1.c: 216: PIRLED.GO2 = 1;
  9080  0FF2  152A               	bsf	_PIRLED,2
  9081                           
  9082                           ;LED_B1.c: 217: } else if (led == 3) {
  9083  0FF3  0008               	return
  9084  0FF4                     l4570:	
  9085  0FF4  0852               	movf	setLED@led,w
  9086  0FF5  3A03               	xorlw	3
  9087  0FF6  1D03               	skipz
  9088  0FF7  0008               	return
  9089                           
  9090                           ;LED_B1.c: 218: PIRLED.GO3 = 1;
  9091  0FF8  15AA               	bsf	_PIRLED,3
  9092                           
  9093                           ;LED_B1.c: 219: }
  9094                           ;LED_B1.c: 220: } else if (command == 110) {
  9095  0FF9  0008               	return
  9096  0FFA                     l4574:	
  9097  0FFA  0851               	movf	setLED@command,w
  9098  0FFB  3A6E               	xorlw	110
  9099  0FFC  1D03               	skipz
  9100  0FFD  0008               	return
  9101                           
  9102                           ;LED_B1.c: 221: PIRLED.GO = 0;
  9103  0FFE  102A               	bcf	_PIRLED,0
  9104  0FFF  0008               	return
  9105  1000                     __end_of_setLED:	
  9106                           
  9107                           	psect	text58
  9108  0C10                     __ptext58:	
  9109 ;; *************** function _LedPointSelect *****************
  9110 ;; Defined at:
  9111 ;;		line 7 in file "../src/LED_B1.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;  led             1    wreg     unsigned char 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  led             1    5[COMMON] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;		None               void
  9118 ;; Registers used:
  9119 ;;		wreg
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9125 ;;      Params:         0       0       0       0
  9126 ;;      Locals:         1       0       0       0
  9127 ;;      Temps:          1       0       0       0
  9128 ;;      Totals:         2       0       0       0
  9129 ;;Total ram usage:        2 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    2
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_setLED_Initialization
  9136 ;;		_setLED
  9137 ;;		_setLED_Main
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           
  9142                           ;psect for function _LedPointSelect
  9143  0C10                     _LedPointSelect:	
  9144                           
  9145                           ;incstack = 0
  9146                           ; Regs used in _LedPointSelect: [wreg]
  9147                           ;LedPointSelect@led stored from wreg
  9148  0C10  00F5               	movwf	LedPointSelect@led
  9149                           
  9150                           ;LED_B1.c: 9: if (led == 1) {
  9151  0C11  0875               	movf	LedPointSelect@led,w
  9152  0C12  3A01               	xorlw	1
  9153  0C13  1D03               	skipz
  9154  0C14  2C19               	goto	l268
  9155                           
  9156                           ;LED_B1.c: 10: LED = &VarLED1;
  9157  0C15  3049               	movlw	_VarLED1& (0+255)
  9158  0C16  00F4               	movwf	??_LedPointSelect
  9159  0C17  0874               	movf	??_LedPointSelect,w
  9160  0C18  00F6               	movwf	_LED
  9161  0C19                     l268:	
  9162                           
  9163                           ;LED_B1.c: 11: }
  9164                           ;LED_B1.c: 14: if (led == 2) {
  9165  0C19  0875               	movf	LedPointSelect@led,w
  9166  0C1A  3A02               	xorlw	2
  9167  0C1B  1D03               	skipz
  9168  0C1C  2C21               	goto	l269
  9169                           
  9170                           ;LED_B1.c: 15: LED = &VarLED2;
  9171  0C1D  304D               	movlw	_VarLED2& (0+255)
  9172  0C1E  00F4               	movwf	??_LedPointSelect
  9173  0C1F  0874               	movf	??_LedPointSelect,w
  9174  0C20  00F6               	movwf	_LED
  9175  0C21                     l269:	
  9176                           
  9177                           ;LED_B1.c: 16: }
  9178                           ;LED_B1.c: 24: if (led == 99) {
  9179  0C21  0875               	movf	LedPointSelect@led,w
  9180  0C22  3A63               	xorlw	99
  9181  0C23  1D03               	skipz
  9182  0C24  0008               	return
  9183                           
  9184                           ;LED_B1.c: 25: LED = &VarErrLED;
  9185  0C25  3045               	movlw	_VarErrLED& (0+255)
  9186  0C26  00F4               	movwf	??_LedPointSelect
  9187  0C27  0874               	movf	??_LedPointSelect,w
  9188  0C28  00F6               	movwf	_LED
  9189  0C29  0008               	return
  9190  0C2A                     __end_of_LedPointSelect:	
  9191                           
  9192                           	psect	text59
  9193  0AE5                     __ptext59:	
  9194 ;; *************** function _getMain_All_LightsStatus *****************
  9195 ;; Defined at:
  9196 ;;		line 373 in file "../src/Main_B1.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;  status          1    4[COMMON] unsigned char 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      unsigned char 
  9203 ;; Registers used:
  9204 ;;		wreg, status,2
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9210 ;;      Params:         0       0       0       0
  9211 ;;      Locals:         1       0       0       0
  9212 ;;      Temps:          0       0       0       0
  9213 ;;      Totals:         1       0       0       0
  9214 ;;Total ram usage:        1 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    2
  9217 ;; This function calls:
  9218 ;;		Nothing
  9219 ;; This function is called by:
  9220 ;;		_Exception_Main
  9221 ;;		_Load_Main
  9222 ;;		_setTemp_Main
  9223 ;;		_Lights_Main
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _getMain_All_LightsStatus
  9229  0AE5                     _getMain_All_LightsStatus:	
  9230                           
  9231                           ;Main_B1.c: 374: char status = 0;
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  9235  0AE5  01F4               	clrf	getMain_All_LightsStatus@status
  9236                           
  9237                           ;Main_B1.c: 378: status = Lights1.Status == 1 ? 1 : 0;
  9238  0AE6  3000               	movlw	0
  9239  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  9240  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  9241  0AE9  1940               	btfsc	_Lights1,2
  9242  0AEA  3001               	movlw	1
  9243  0AEB  00F4               	movwf	getMain_All_LightsStatus@status
  9244                           
  9245                           ;Main_B1.c: 420: return status;
  9246  0AEC  0874               	movf	getMain_All_LightsStatus@status,w
  9247  0AED  0008               	return
  9248  0AEE                     __end_of_getMain_All_LightsStatus:	
  9249                           
  9250                           	psect	text60
  9251  0DAE                     __ptext60:	
  9252 ;; *************** function _getMain_All_Error_Status *****************
  9253 ;; Defined at:
  9254 ;;		line 424 in file "../src/Main_B1.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  command         1    wreg     unsigned char 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  command         1    4[BANK0 ] unsigned char 
  9259 ;;  status          1    5[BANK0 ] unsigned char 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  1    wreg      unsigned char 
  9262 ;; Registers used:
  9263 ;;		wreg, status,2, status,0
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9269 ;;      Params:         0       0       0       0
  9270 ;;      Locals:         0       6       0       0
  9271 ;;      Temps:          1       0       0       0
  9272 ;;      Totals:         1       6       0       0
  9273 ;;Total ram usage:        7 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    2
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_Exception_Main
  9280 ;;		_Load_Main
  9281 ;;		_setTemp_Main
  9282 ;;		_PIR_Main
  9283 ;;		_setSYSC_Main
  9284 ;;		_Lights_Main
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           
  9289                           ;psect for function _getMain_All_Error_Status
  9290  0DAE                     _getMain_All_Error_Status:	
  9291                           
  9292                           ;incstack = 0
  9293                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  9294                           ;getMain_All_Error_Status@command stored from wreg
  9295  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9296  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9297  0DB0  00D5               	movwf	getMain_All_Error_Status@command
  9298                           
  9299                           ;Main_B1.c: 425: char status = 0;
  9300  0DB1  01D6               	clrf	getMain_All_Error_Status@status
  9301                           
  9302                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
  9303  0DB2  08D6               	movf	getMain_All_Error_Status@status,f
  9304  0DB3  1D03               	skipz
  9305  0DB4  2DBD               	goto	l3284
  9306  0DB5  0855               	movf	getMain_All_Error_Status@command,w
  9307  0DB6  3A01               	xorlw	1
  9308  0DB7  1903               	skipnz
  9309  0DB8  2DBD               	goto	l3284
  9310                           
  9311                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
  9312  0DB9  3000               	movlw	0
  9313  0DBA  18A0               	btfsc	_SYSC,1
  9314  0DBB  3001               	movlw	1
  9315  0DBC  00D6               	movwf	getMain_All_Error_Status@status
  9316  0DBD                     l3284:	
  9317                           
  9318                           ;Main_B1.c: 430: }
  9319                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
  9320  0DBD  08D6               	movf	getMain_All_Error_Status@status,f
  9321  0DBE  1D03               	skipz
  9322  0DBF  2DD1               	goto	l3294
  9323  0DC0  0855               	movf	getMain_All_Error_Status@command,w
  9324  0DC1  3A02               	xorlw	2
  9325  0DC2  1903               	skipnz
  9326  0DC3  2DD1               	goto	l3294
  9327                           
  9328                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
  9329  0DC4  18B9               	btfsc	_Temp,1
  9330  0DC5  2DC9               	goto	l3292
  9331  0DC6  01D1               	clrf	_getMain_All_Error_Status$2142
  9332  0DC7  01D2               	clrf	_getMain_All_Error_Status$2142+1
  9333  0DC8  2DCD               	goto	l613
  9334  0DC9                     l3292:	
  9335  0DC9  3002               	movlw	2
  9336  0DCA  00D1               	movwf	_getMain_All_Error_Status$2142
  9337  0DCB  3000               	movlw	0
  9338  0DCC  00D2               	movwf	_getMain_All_Error_Status$2142+1
  9339  0DCD                     l613:	
  9340  0DCD  0851               	movf	_getMain_All_Error_Status$2142,w
  9341  0DCE  00F4               	movwf	??_getMain_All_Error_Status
  9342  0DCF  0874               	movf	??_getMain_All_Error_Status,w
  9343  0DD0  00D6               	movwf	getMain_All_Error_Status@status
  9344  0DD1                     l3294:	
  9345                           
  9346                           ;Main_B1.c: 438: }
  9347                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
  9348  0DD1  08D6               	movf	getMain_All_Error_Status@status,f
  9349  0DD2  1D03               	skipz
  9350  0DD3  2DEA               	goto	l614
  9351  0DD4  0855               	movf	getMain_All_Error_Status@command,w
  9352  0DD5  3A03               	xorlw	3
  9353  0DD6  1903               	skipnz
  9354  0DD7  2DEA               	goto	l614
  9355                           
  9356                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
  9357  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
  9358  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
  9359  0DDA  1ACA               	btfsc	_Load^(0+128),5
  9360  0DDB  2DE1               	goto	l3302
  9361  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  9362  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  9363  0DDE  01D3               	clrf	_getMain_All_Error_Status$2143
  9364  0DDF  01D4               	clrf	_getMain_All_Error_Status$2143+1
  9365  0DE0  2DE6               	goto	l618
  9366  0DE1                     l3302:	
  9367  0DE1  3003               	movlw	3
  9368  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
  9369  0DE3  00D3               	movwf	_getMain_All_Error_Status$2143
  9370  0DE4  3000               	movlw	0
  9371  0DE5  00D4               	movwf	_getMain_All_Error_Status$2143+1
  9372  0DE6                     l618:	
  9373  0DE6  0853               	movf	_getMain_All_Error_Status$2143,w
  9374  0DE7  00F4               	movwf	??_getMain_All_Error_Status
  9375  0DE8  0874               	movf	??_getMain_All_Error_Status,w
  9376  0DE9  00D6               	movwf	getMain_All_Error_Status@status
  9377  0DEA                     l614:	
  9378                           
  9379                           ;Main_B1.c: 445: }
  9380                           ;Main_B1.c: 455: return status;
  9381  0DEA  0856               	movf	getMain_All_Error_Status@status,w
  9382  0DEB  0008               	return
  9383  0DEC                     __end_of_getMain_All_Error_Status:	
  9384                           
  9385                           	psect	text61
  9386  0ADC                     __ptext61:	
  9387 ;; *************** function _getAll_Lights_Line *****************
  9388 ;; Defined at:
  9389 ;;		line 310 in file "../src/TriacRelay_B1.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;		None
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  line            1    4[COMMON] unsigned char 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;                  1    wreg      unsigned char 
  9396 ;; Registers used:
  9397 ;;		wreg, status,2
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9403 ;;      Params:         0       0       0       0
  9404 ;;      Locals:         1       0       0       0
  9405 ;;      Temps:          0       0       0       0
  9406 ;;      Totals:         1       0       0       0
  9407 ;;Total ram usage:        1 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    2
  9410 ;; This function calls:
  9411 ;;		Nothing
  9412 ;; This function is called by:
  9413 ;;		_Exception_Main
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           
  9418                           ;psect for function _getAll_Lights_Line
  9419  0ADC                     _getAll_Lights_Line:	
  9420                           
  9421                           ;TriacRelay_B1.c: 311: char line = 0;
  9422                           
  9423                           ;incstack = 0
  9424                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
  9425  0ADC  01F4               	clrf	getAll_Lights_Line@line
  9426                           
  9427                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
  9428  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
  9429  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
  9430  0ADF  1C41               	btfss	_Lights1+1,0
  9431  0AE0  2AE3               	goto	l3560
  9432                           
  9433                           ;TriacRelay_B1.c: 314: line = 1;
  9434  0AE1  01F4               	clrf	getAll_Lights_Line@line
  9435  0AE2  0AF4               	incf	getAll_Lights_Line@line,f
  9436  0AE3                     l3560:	
  9437                           
  9438                           ;TriacRelay_B1.c: 315: }
  9439                           ;TriacRelay_B1.c: 327: return line;
  9440  0AE3  0874               	movf	getAll_Lights_Line@line,w
  9441  0AE4  0008               	return
  9442  0AE5                     __end_of_getAll_Lights_Line:	
  9443                           
  9444                           	psect	text62
  9445  0B0E                     __ptext62:	
  9446 ;; *************** function _DetectSYSC_Signal *****************
  9447 ;; Defined at:
  9448 ;;		line 50 in file "../src/SYSC_B1.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;		None               void
  9455 ;; Registers used:
  9456 ;;		status,2
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9462 ;;      Params:         0       0       0       0
  9463 ;;      Locals:         0       0       0       0
  9464 ;;      Temps:          0       0       0       0
  9465 ;;      Totals:         0       0       0       0
  9466 ;;Total ram usage:        0 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    2
  9469 ;; This function calls:
  9470 ;;		Nothing
  9471 ;; This function is called by:
  9472 ;;		_main
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           
  9477                           ;psect for function _DetectSYSC_Signal
  9478  0B0E                     _DetectSYSC_Signal:	
  9479                           
  9480                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9481                           
  9482                           ;incstack = 0
  9483                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9484  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  9485  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  9486  0B10  19A0               	btfsc	_SYSC,3
  9487  0B11  2B18               	goto	l1146
  9488                           
  9489                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9490  0B12  1E85               	btfss	5,5	;volatile
  9491  0B13  0008               	return
  9492                           
  9493                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9494  0B14  15A0               	bsf	_SYSC,3
  9495                           
  9496                           ;SYSC_B1.c: 54: SYSC.Time = 0;
  9497  0B15  01A1               	clrf	_SYSC+1
  9498  0B16  01A2               	clrf	_SYSC+2
  9499                           
  9500                           ;SYSC_B1.c: 55: }
  9501                           ;SYSC_B1.c: 56: } else {
  9502  0B17  0008               	return
  9503  0B18                     l1146:	
  9504                           
  9505                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9506  0B18  1A85               	btfsc	5,5	;volatile
  9507  0B19  0008               	return
  9508                           
  9509                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9510  0B1A  11A0               	bcf	_SYSC,3
  9511  0B1B  0008               	return
  9512  0B1C                     __end_of_DetectSYSC_Signal:	
  9513                           
  9514                           	psect	text63
  9515  0D7A                     __ptext63:	
  9516 ;; *************** function _CDS_Main *****************
  9517 ;; Defined at:
  9518 ;;		line 11 in file "../src/CDS_B1.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;		None
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;		None
  9523 ;; Return value:  Size  Location     Type
  9524 ;;		None               void
  9525 ;; Registers used:
  9526 ;;		wreg, status,2, status,0
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/0
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9532 ;;      Params:         0       0       0       0
  9533 ;;      Locals:         0       0       0       0
  9534 ;;      Temps:          0       3       0       0
  9535 ;;      Totals:         0       3       0       0
  9536 ;;Total ram usage:        3 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    2
  9539 ;; This function calls:
  9540 ;;		Nothing
  9541 ;; This function is called by:
  9542 ;;		_main
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           
  9547                           ;psect for function _CDS_Main
  9548  0D7A                     _CDS_Main:	
  9549                           
  9550                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9551                           
  9552                           ;incstack = 0
  9553                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9554  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  9555  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  9556  0D7C  1C2E               	btfss	__CDS,0
  9557  0D7D  0008               	return
  9558                           
  9559                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9560  0D7E  18AE               	btfsc	__CDS,1
  9561  0D7F  2D8D               	goto	l123
  9562                           
  9563                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9564  0D80  19AE               	btfsc	__CDS,3
  9565  0D81  0008               	return
  9566                           
  9567                           ;CDS_B1.c: 16: _CDS.Time++;
  9568  0D82  3001               	movlw	1
  9569  0D83  00D1               	movwf	??_CDS_Main
  9570  0D84  0851               	movf	??_CDS_Main,w
  9571  0D85  07AF               	addwf	__CDS+1,f
  9572                           
  9573                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9574  0D86  3005               	movlw	5
  9575  0D87  022F               	subwf	__CDS+1,w
  9576  0D88  1C03               	skipc
  9577  0D89  0008               	return
  9578                           
  9579                           ;CDS_B1.c: 18: {
  9580                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9581  0D8A  01AF               	clrf	__CDS+1
  9582                           
  9583                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9584  0D8B  15AE               	bsf	__CDS,3
  9585                           
  9586                           ;CDS_B1.c: 21: }
  9587                           ;CDS_B1.c: 22: }
  9588                           ;CDS_B1.c: 23: } else {
  9589  0D8C  0008               	return
  9590  0D8D                     l123:	
  9591                           
  9592                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9593  0D8D  1CAE               	btfss	__CDS,1
  9594  0D8E  0008               	return
  9595                           
  9596                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9597  0D8F  10AE               	bcf	__CDS,1
  9598                           
  9599                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9600  0D90  1A2E               	btfsc	__CDS,4
  9601  0D91  2D98               	goto	l4902
  9602                           
  9603                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9604  0D92  0830               	movf	__CDS+2,w
  9605  0D93  0231               	subwf	__CDS+3,w
  9606  0D94  1C03               	skipc
  9607  0D95  0008               	return
  9608                           
  9609                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9610  0D96  162E               	bsf	__CDS,4
  9611                           
  9612                           ;CDS_B1.c: 29: }
  9613                           ;CDS_B1.c: 30: } else {
  9614  0D97  0008               	return
  9615  0D98                     l4902:	
  9616                           
  9617                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9618  0D98  0830               	movf	__CDS+2,w
  9619  0D99  3E9C               	addlw	156
  9620  0D9A  00D1               	movwf	??_CDS_Main
  9621  0D9B  30FF               	movlw	255
  9622  0D9C  1803               	skipnc
  9623  0D9D  3000               	movlw	0
  9624  0D9E  00D2               	movwf	??_CDS_Main+1
  9625  0D9F  0852               	movf	??_CDS_Main+1,w
  9626  0DA0  3A80               	xorlw	128
  9627  0DA1  00D3               	movwf	??_CDS_Main+2
  9628  0DA2  3080               	movlw	128
  9629  0DA3  0253               	subwf	??_CDS_Main+2,w
  9630  0DA4  1D03               	skipz
  9631  0DA5  2DA8               	goto	u5945
  9632  0DA6  0831               	movf	__CDS+3,w
  9633  0DA7  0251               	subwf	??_CDS_Main,w
  9634  0DA8                     u5945:	
  9635  0DA8  1C03               	skipc
  9636  0DA9  0008               	return
  9637                           
  9638                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9639  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  9640  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  9641  0DAC  122E               	bcf	__CDS,4
  9642  0DAD  0008               	return
  9643  0DAE                     __end_of_CDS_Main:	
  9644                           
  9645                           	psect	text64
  9646  0A93                     __ptext64:	
  9647 ;; *************** function _CDS_Initialization *****************
  9648 ;; Defined at:
  9649 ;;		line 7 in file "../src/CDS_B1.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;		None
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;		None               void
  9656 ;; Registers used:
  9657 ;;		None
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9663 ;;      Params:         0       0       0       0
  9664 ;;      Locals:         0       0       0       0
  9665 ;;      Temps:          0       0       0       0
  9666 ;;      Totals:         0       0       0       0
  9667 ;;Total ram usage:        0 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    2
  9670 ;; This function calls:
  9671 ;;		Nothing
  9672 ;; This function is called by:
  9673 ;;		_main
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _CDS_Initialization
  9679  0A93                     _CDS_Initialization:	
  9680                           
  9681                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9682                           
  9683                           ;incstack = 0
  9684                           ; Regs used in _CDS_Initialization: []
  9685  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  9686  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  9687  0A95  142E               	bsf	__CDS,0
  9688  0A96  0008               	return
  9689  0A97                     __end_of_CDS_Initialization:	
  9690                           
  9691                           	psect	text65
  9692  0BE0                     __ptext65:	
  9693 ;; *************** function _ISR *****************
  9694 ;; Defined at:
  9695 ;;		line 116 in file "../src/MCU_B1.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;		None
  9700 ;; Return value:  Size  Location     Type
  9701 ;;		None               void
  9702 ;; Registers used:
  9703 ;;		wreg, status,2, status,0, pclath, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9709 ;;      Params:         0       0       0       0
  9710 ;;      Locals:         0       0       0       0
  9711 ;;      Temps:          4       0       0       0
  9712 ;;      Totals:         4       0       0       0
  9713 ;;Total ram usage:        4 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    1
  9716 ;; This function calls:
  9717 ;;		_TMR1_ISR
  9718 ;; This function is called by:
  9719 ;;		Interrupt level 1
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           
  9724                           ;psect for function _ISR
  9725  0BE0                     _ISR:	
  9726                           
  9727                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
  9728  0BE0  1683               	bsf	3,5	;RP0=1, select bank1
  9729  0BE1  1303               	bcf	3,6	;RP1=0, select bank1
  9730  0BE2  1C0C               	btfss	12,0	;volatile
  9731  0BE3  2BEB               	goto	i1l447
  9732  0BE4  1283               	bcf	3,5	;RP0=0, select bank0
  9733  0BE5  1303               	bcf	3,6	;RP1=0, select bank0
  9734  0BE6  1C0C               	btfss	12,0	;volatile
  9735  0BE7  2BEB               	goto	i1l447
  9736                           
  9737                           ;MCU_B1.c: 126: TMR1_ISR();
  9738  0BE8  158A  239D  158A   	fcall	_TMR1_ISR
  9739  0BEB                     i1l447:	
  9740                           ;MCU_B1.c: 127: }
  9741                           ;MCU_B1.c: 148: return;
  9742                           
  9743  0BEB  0873               	movf	??_ISR+3,w
  9744  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  9745  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  9746  0BEE  00FF               	movwf	127
  9747  0BEF  0872               	movf	??_ISR+2,w
  9748  0BF0  008A               	movwf	10
  9749  0BF1  0871               	movf	??_ISR+1,w
  9750  0BF2  0084               	movwf	4
  9751  0BF3  0E70               	swapf	??_ISR^(0+-128),w
  9752  0BF4  0083               	movwf	3
  9753  0BF5  0EFE               	swapf	126,f
  9754  0BF6  0E7E               	swapf	126,w
  9755  0BF7  0009               	retfie
  9756  0BF8                     __end_of_ISR:	
  9757                           
  9758                           	psect	intentry
  9759  0004                     __pintentry:	
  9760                           ;incstack = 0
  9761                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9762                           
  9763  0004                     interrupt_function:	
  9764  007E                     saved_w	set	btemp
  9765  0004  00FE               	movwf	btemp
  9766  0005  0E03               	swapf	3,w
  9767  0006  00F0               	movwf	??_ISR
  9768  0007  0804               	movf	4,w
  9769  0008  00F1               	movwf	??_ISR+1
  9770  0009  080A               	movf	10,w
  9771  000A  00F2               	movwf	??_ISR+2
  9772  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9773  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9774  000D  087F               	movf	btemp+1,w
  9775  000E  00F3               	movwf	??_ISR+3
  9776  000F  158A  2BE0         	ljmp	_ISR
  9777                           
  9778                           	psect	text66
  9779  0B9D                     __ptext66:	
  9780 ;; *************** function _TMR1_ISR *****************
  9781 ;; Defined at:
  9782 ;;		line 236 in file "../src/MCU_B1.c"
  9783 ;; Parameters:    Size  Location     Type
  9784 ;;		None
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;		None
  9787 ;; Return value:  Size  Location     Type
  9788 ;;		None               void
  9789 ;; Registers used:
  9790 ;;		wreg, status,2
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9796 ;;      Params:         0       0       0       0
  9797 ;;      Locals:         0       0       0       0
  9798 ;;      Temps:          0       0       0       0
  9799 ;;      Totals:         0       0       0       0
  9800 ;;Total ram usage:        0 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_ISR
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _TMR1_ISR
  9811  0B9D                     _TMR1_ISR:	
  9812                           
  9813                           ;MCU_B1.c: 268: Timer1.Count++;
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9817  0B9D  3001               	movlw	1
  9818  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  9819  0B9F  1303               	bcf	3,6	;RP1=0, select bank0
  9820  0BA0  07B3               	addwf	_Timer1+1,f
  9821  0BA1  1803               	skipnc
  9822  0BA2  0AB4               	incf	_Timer1+2,f
  9823  0BA3  3000               	movlw	0
  9824  0BA4  07B4               	addwf	_Timer1+2,f
  9825                           
  9826                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
  9827  0BA5  30C8               	movlw	200
  9828  0BA6  0633               	xorwf	_Timer1+1,w
  9829  0BA7  0434               	iorwf	_Timer1+2,w
  9830  0BA8  1D03               	skipz
  9831  0BA9  2BAD               	goto	i1l3802
  9832                           
  9833                           ;MCU_B1.c: 270: Timer1.Count = 0;
  9834  0BAA  01B3               	clrf	_Timer1+1
  9835  0BAB  01B4               	clrf	_Timer1+2
  9836                           
  9837                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
  9838  0BAC  1432               	bsf	_Timer1,0
  9839  0BAD                     i1l3802:	
  9840                           
  9841                           ;MCU_B1.c: 272: }
  9842                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
  9843  0BAD  30FA               	movlw	250
  9844  0BAE  008F               	movwf	15	;volatile
  9845                           
  9846                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
  9847  0BAF  3038               	movlw	56
  9848  0BB0  008E               	movwf	14	;volatile
  9849                           
  9850                           ;MCU_B1.c: 276: TMR1IF = 0;
  9851  0BB1  100C               	bcf	12,0	;volatile
  9852  0BB2  0008               	return
  9853  0BB3                     __end_of_TMR1_ISR:	
  9854  007E                     btemp	set	126	;btemp
  9855  007E                     wtemp	set	126
  9856  007E                     wtemp0	set	126
  9857  0080                     wtemp1	set	128
  9858  0082                     wtemp2	set	130
  9859  0084                     wtemp3	set	132
  9860  0086                     wtemp4	set	134
  9861  0088                     wtemp5	set	136
  9862  007F                     wtemp6	set	127
  9863  007E                     ttemp	set	126
  9864  007E                     ttemp0	set	126
  9865  0081                     ttemp1	set	129
  9866  0084                     ttemp2	set	132
  9867  0087                     ttemp3	set	135
  9868  007F                     ttemp4	set	127
  9869  007E                     ltemp	set	126
  9870  007E                     ltemp0	set	126
  9871  0082                     ltemp1	set	130
  9872  0086                     ltemp2	set	134
  9873  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     23      72
    BANK1            80      0      70
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights1(BANK0[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_SwOn->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   25946
                                             18 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     765
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2906
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1130
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     746
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     601
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     347
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0     347
                                              5 COMMON     1     1      0
                                              6 BANK0      5     5      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            12    12      0    4060
                                              6 BANK0     12    12      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1943
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4318
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    3023
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2760
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1031
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     907
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2416
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2416
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2531
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2531
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4426
                                              6 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOn                                       1     1      0     621
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_SwOff                                      1     1      0     494
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     401
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2376
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      98       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      46       7       87.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      98      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Feb 23 07:52:55 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 0056                      setTemp_Main@AD 005B  
                                fsr 0004                 ___wmul@multiplicand 0053  
                               l123 0D8D                                 l268 0C19  
                               l613 0DCD                                 l269 0C21  
                               l614 0DEA                                 l618 0DE6  
                               l644 0606                                 l741 0392  
                               l725 040F                                 l735 03E8  
                               l727 0266                                 l736 03E6  
                               l728 0262                                 l729 025C  
                               l853 0726                                 l935 0091  
                               l927 020F                                 l847 0780  
                               l928 008B                                 l937 00A4  
                               l929 0059                                 l858 077C  
                               _GIE 005F                                 _RB2 0032  
                               _RA4 002C                                 _LED 0076  
                               _RB3 0033                                 _RA5 002D  
                               _RB4 0034                                 _RB5 0035  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0BE0  
                               _PSA 040B                                 _WDT 0035  
                 ??_setLights_SwOff 0076                                 _Cmd 0037  
            getAll_Lights_Line@line 0074                                 fsr0 0004  
                               indf 0000                     __end_of_ADC_Set 0AC4  
         __end_of_LightsPointSelect 0AF8                    _getLights_Status 0B55  
           __size_of_Lights_Control 0083                                ?_ISR 0070  
                        Load_Main@i 0060                                l1304 0CAA  
                              l1146 0B18                      _Load_Main$2405 005B  
                              l1427 0D06                                l3302 0DE1  
                              l5000 0474                                l5004 047F  
                              l5102 028C                                l5040 0509  
                              l5024 04BF                                l5008 048A  
                              l3610 0739                                l5034 04ED  
                              l5018 04A3                                l3292 0DC9  
                              l3284 0DBD                                l5140 0363  
                              l5108 02C8                                l5300 00EB  
                              l3604 0728                                l3612 073C  
                              l3294 0DD1                                l5134 0353  
                              l5070 0246                                l5310 012B  
                              l5054 0543                                l3560 0AE3  
                              l4504 0FA0                                l4512 0FA8  
                              l5400 0596                                l5216 0CAB  
                              l5152 03AF                                l5144 0384  
                              l5048 0535                                l5402 0573  
                              l5162 03C8                                l5330 019F  
                              l4540 0FD0                                l5420 05EA  
                              l5412 05CC                                l5404 05A2  
                              l4700 0EF9                                l5332 01AE  
                              l5244 007B                                l3636 076C  
                              l4518 0FB1                                l4526 0FB9  
                              l5414 05A9                                l4710 0F1A  
                              l5086 0265                                l5326 016D  
                              l5318 013F                                l3662 0E43  
                              l3646 077B                                l4536 0FCC  
                              l4544 0FD4                                l5416 05D8  
                              l5424 05F8                                l4616 0BD8  
                              l4570 0FF4                                l4714 0F22  
                              l4706 0F0F                                l4650 06E0  
                              l4642 06C6                                l5346 01D9  
                              l5282 00C7                                l4722 0C86  
                              l4548 0FDC                                l4628 06A2  
                              l5364 0209                                l3668 0E5E  
                              l4724 0C89                                l5460 0F44  
                              l4902 0D98                                l4566 0FEE  
                              l4574 0FFA                                l4646 06CD  
                              l4814 0D73                                l5198 03FC  
                              l5294 00DE                                l4832 0656  
                              l4664 0704                                l4728 0C8F  
                              l5472 0F67                                l5394 056F  
                              l4770 07CF                                l4762 07B7  
                              l4754 07AB                                l4682 0ED8  
                              l5298 00EA                                l5388 0560  
                              l4772 07D7                                l4940 0EA3  
                              l4932 0E8F                                l4790 0CF5  
                              l4774 07E5                                l4758 07B1  
                              l4846 0CFC                                l4768 07C3  
                              l4688 0EE3                                l4960 0EC7  
                              l4944 0EAB                                l3984 0C54  
                              l4698 0EEB                                l4874 0E1A  
                              l4866 0DF6                                l4868 0E04  
                              l4878 0E25                                l4992 045E  
                              l4976 0D3D                                l4996 0469  
             _myMain_Initialization 0A80                        __CFG_WDTE$ON 0000  
                              u3445 0E6A                                _PEIE 005E  
                              u5405 0EEE                                u5425 0EFA  
                              u5435 0F06                                u5275 0B97  
                              u5445 0F10                                u6335 028A  
                              u5560 07CC                                u5720 0652  
                              u5705 063E                                u6345 02C6  
                              u6435 03A7                                u6355 031D  
                              u5580 07E2                                u5815 0DF9  
                              u5745 0675                                u5835 0E05  
                              u5845 0E11                                u5855 0E1B  
                              u5775 0D07                                u6815 0158  
                              u5945 0DA8                                u5785 0D0E  
                              u6835 0191                                u6855 01BE  
                              u6785 0109                                u6970 059F  
                              u6795 0121                                u6990 05D5  
                              u6975 057C                                u6895 01F6  
                              u6995 05B2                                __CDS 002E  
           ?_setSYSC_Initialization 0070                                _WPUB 0095  
                              _SYSC 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0039  
                              _main 0F29                                btemp 007E  
                   __end_of_WDT_Set 0B46                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0DAE  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0C5E                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 0A84  
                ?_setLights_Trigger 0051                    ??_setPIRLED_Main 0053  
                             ?_main 0063                     __end_of___awdiv 0F29  
                             _ADRES 001E                     ___awdiv@divisor 0051  
                             _T1CON 0010                     __end_of___lwdiv 0E2C  
                             i1l447 0BEB                     ___awdiv@counter 0055  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0B9D                               _Light 0077  
               ??_setLights_Trigger 0052                    __end_of_PIR_Main 022D  
                  __end_of_TMR1_ISR 0BB3                    __end_of_TMR1_Set 0B38  
                             _getAD 0C79      __end_of_setSYSC_Initialization 0A9F  
    getLights_Allow_Condition@allow 0051             __end_of_getLight_LoadGO 0AAA  
                  __end_of_WDT_Main 0B77                       _LightsControl 0079  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0B02  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0B89                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 005E                   getPIR_AD@channel2 0059  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 0057  
                    _setLights_Main 0D4A                      _setLights_Line 0B1C  
                   __initialization 0013                      _setLights_SwOn 0CD5  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0C79  
                      __end_of_main 0F8F                    __end_of_Fosc_Set 0AA4  
    getMain_All_LightsStatus@status 0074                      _Exception_Main 0545  
                         ??_ADC_Set 0074                              ??_main 0067  
             PIR_Main@Enable_Switch 005E                 __end_of_Lights_Main 0CB3  
        __size_of_LightsPointSelect 000A            _getMain_All_LightsStatus 0AE5  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 0053                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0DAE                              i1l3802 0BAD  
                            _FVRCON 009D              getLights_Status@lights 0051  
                            _PIRLED 002A                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0BF8  
              Exception_Main@i_2155 005D              getLights_Status@status 0052  
            __end_of_setLights_Main 0D7A              __end_of_setLights_Line 0B2A  
            __end_of_setLights_SwOn 0CFA        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0B55                              _Lights 0078  
                            _Timer1 0032         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 0607  
              Exception_Main@lights 0058                              ___wmul 0CFA  
                         ??___awdiv 0074                           ??___lwdiv 0074  
              Exception_Main@status 005A                              _setLED 0F8F  
                            _myMain 0025                    ___awdiv@quotient 0057  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 005F  
       __end_of_Load_Initialization 0A87     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 0054  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0075  
                 __end_of_SYSC_Main 0A8D                      _Lights_Control 0607  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0058                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                   ?_setLights_SwOn 0070                       ?_setSYSC_Main 0070  
                   _setLights_SwOff 0C2A          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 0022  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0B66  
                     __end_of_getAD 0C95                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0B02                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0C95            _setLights_Initialization 0AB6  
              _getMain_Lights_Count 0AF8                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0417          __end_of_set_TimeoutCleared 0AB6  
               ?_LED_Initialization 0070              __end_of_Lights_Control 068A  
                           ??_getAD 0075                 _Temp_Initialization 0A8D  
                        ??_CDS_Main 0051                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0009                   __end_of_Temp_Main 0A93  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
                    ??_setSYSC_Main 0075                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                          __pmaintext 0F29  
        ?_getLights_Allow_Condition 0070                ?_Temp_Initialization 0070  
              PIR_Main@LightsStatus 0062                             ?___wmul 0051  
                        ??_PIR_Main 0057                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 007F  
                        _getLoad_AD 0E70                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0AC4  
                           ?_setLED 0051             setLights_Trigger@lights 0053  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0ABD  
                        _getTemp_AD 0D1F                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0CD5                             _WDT_Set 0B38  
                     getPIR_AD@VRAD 0060                          ??_Fosc_Set 0074  
                 __end_of_getPIR_AD 0545             ??_setLoad_AH_AL_Restore 0074  
           __end_of_setLights_SwOff 0C44      _getLights_Allow_Condition$4248 0052  
                   __size_of_IO_Set 0018                          getCDS_AD@i 0054  
                        getCDS_AD@j 0055                             _Lights1 0040  
                           _VarLED1 0049                             _VarLED2 004D  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 0ECC                     __size_of___wmul 0025  
                           ___lwdiv 0DEC          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 005D                     __size_of_setLED 0071  
                           __ptext0 0000                             __ptext1 0C44  
                           __ptext2 0A80                             __ptext3 0D1F  
                           __ptext4 0417                             __ptext5 0E70  
                           __ptext6 0CB3                             __ptext7 0C79  
                           __ptext8 0AB0                             __ptext9 0B89  
                        getPIR_AD@i 0061                          getPIR_AD@j 005D  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0A87             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0C10  
                   getTemp_AD@ADRES 0054                             clrloop0 0AD5  
                 __end_of_setLights 0709                end_of_initialization 0023  
                     _getCDS_Status 0ACC                ?_SYSC_Initialization 0070  
             _setLED_Initialization 0B77                   setLights_SwOff@sw 0054  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0A9B                         ?_getTemp_AD 0070  
          setLED_Initialization@led 0053             setTemp_Main@DangerValue 005A  
                _Mcu_Initialization 0B46                __end_of_my_MainTimer 0C5E  
              __end_of_setSYSC_Main 0E70              __end_of_LedPointSelect 0C2A  
          Load_Main@ErrorCountValue 005D                 setPIRLED_Main@count 0054  
               ?_Mcu_Initialization 0070             __size_of_setPIRLED_Main 0071  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 0056                    ??_setLights_SwOn 0076  
                         _SYSC_Main 0A8A     getMain_All_Error_Status@command 0055  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0057                      __end_of_IO_Set 0C10  
        __end_of_CDS_Initialization 0A97          ??_setLights_Initialization 0076  
                 __size_of_LED_Main 0003                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0D1F  
                 __size_of_PIR_Main 0207                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 0076                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 1000            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 022D                         __end_of_ISR 0BF8  
        __end_of_PIR_Initialization 0800        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0AB0     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 0784  
               __size_of_getLoad_AD 005C                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0070                  _set_TimeoutCleared 0AB0  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0014  
                         _VarErrLED 0045                 __size_of_getTemp_AD 002B  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0A90  
                   setLights@lights 0055                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0059                     setLights@status 0053  
               Exception_Main@error 005F                            ??___wmul 0074  
  __end_of_getMain_All_LightsStatus 0AEE                            ??_setLED 0076  
                          ?_ADC_Set 0070                    ??_Lights_Control 0059  
  __end_of_getMain_All_Error_Status 0DEC                         __pbssCOMMON 0076  
           Load_Main@Load_RunStatus 005E                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 0051  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0AE5  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 005C                           _getCDS_AD 0CB3  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0BC9  
                         _getPIR_AD 0417         __size_of_LED_Initialization 000C  
                   Exception_Main@i 005B                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0053                      Load_Main@error 005A  
            _setTemp_Initialization 0A7F                       _PIR_Main$2874 005F  
                          ?___awdiv 0051               __size_of_my_MainTimer 001A  
                          ?___lwdiv 0051               __size_of_setSYSC_Main 0044  
          setLights_Trigger@command 0051     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0BC9      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0A81                      __size_of_getAD 001C  
                  ___lwdiv@quotient 0056                      _setPIRLED_Main 0784  
                          _CDS_Main 0D7A                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0A90                   interrupt_function 0004  
                        ?_getCDS_AD 0051                      ___wmul@product 0074  
                          _LED_Main 0A81                           _setLights 068A  
                         clear_ram0 0AD4    __end_of_setLights_Initialization 0ABD  
                      _my_MainTimer 0C44                          ?_getPIR_AD 0059  
                      _setSYSC_Main 0E2C                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                PIR_Main@TriggerValue 0061  
                          _PIR_Main 0026                        ??_getLoad_AD 0051  
                          _TMR1_ISR 0B9D                        ??_getLoad_OK 0074  
              _getLight_Load_Status 0AAA                            _TMR1_Set 0B2A  
                 ??_getLight_LoadGO 0074                        ??_getTemp_AD 0051  
                          _WDT_Main 0B66                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0051                      getPIR_AD@VRAD1 005F  
              __size_of_Lights_Main 001E               __size_of_setTemp_Main 007B  
                       ??_Load_Main 0058              __end_of_setPIRLED_Main 07F5  
    getMain_All_Error_Status@status 0056                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0A9F                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0ECC                  __end_of_getLoad_OK 0ACC  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 0053                  __end_of_getTemp_AD 0D4A  
            _setSYSC_Initialization 0A9B                   getLoad_AD@channel 0053  
                 _DetectSYSC_Signal 0B0E                            _SwDetect 0038  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2142 0051  
     _getMain_All_Error_Status$2143 0053                 _Load_Initialization 0A84  
                ?_DetectSYSC_Signal 0070                           setLED@led 0052  
             ?_getLight_Load_Status 0070                        _setTemp_Main 0709  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0A93               _Lights_Initialization 0A97  
                 getTemp_AD@channel 0053                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 0051                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 0055  
                          __ptext10 0B66                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0A90  
                          __ptext21 0ACC                            __ptext13 0709  
                          __ptext30 0AF8                            __ptext22 07F5  
                          __ptext14 0A8D                            __ptext31 0AAA  
                          __ptext23 0B46                            __ptext15 0A7F  
                          __ptext40 0B1C                            __ptext32 0AA4  
                          __ptext24 0B38                            __ptext16 0A8A  
                          __ptext41 0BC9                            __ptext33 0CFA  
                          __ptext25 0B2A                            __ptext17 0E2C  
                          __ptext50 0B77                            __ptext42 0AC4  
                          __ptext34 0DEC                            __ptext26 0BF8  
                          __ptext18 0A87                            __ptext51 0545  
                          __ptext43 0607                            __ptext35 0A84  
                          __ptext27 0A9F                            __ptext19 0A9B  
                          __ptext60 0DAE                            __ptext52 0CD5  
                          __ptext44 0ECC                            __ptext36 0BB3  
                          __ptext28 0ABD                            __ptext61 0ADC  
                          __ptext53 0B55                            __ptext45 0A97  
                          __ptext37 0C95                            __ptext29 022D  
                          __ptext62 0B0E                            __ptext54 0C2A  
                          __ptext46 0AB6                            __ptext38 0D4A  
                          __ptext63 0D7A                            __ptext55 0C5E  
                          __ptext47 0A81                            __ptext39 068A  
                          __ptext64 0A93                            __ptext56 0AEE  
                          __ptext48 0784                            __ptext65 0BE0  
                          __ptext57 0F8F                            __ptext49 0B02  
                          __ptext66 0B9D                            __ptext58 0C10  
                          __ptext59 0AE5           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0A8A             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0052                       setLED@command 0051  
         __end_of_DetectSYSC_Signal 0B1C                       __size_of_main 0066  
                       ??_getPIR_AD 005A                  _PIR_Initialization 07F5  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
          __size_of_setLights_SwOff 001A                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 0063  
                          main@argv 0065   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 005B                ??_PIR_Initialization 0074  
                          intlevel1 0000  __size_of_getLights_Allow_Condition 0017  
             setTemp_Main@SafeValue 0059                         ??_setLights 0054  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0ADC                     getLoad_AD@ADRES 0056  
            ??_getLight_Load_Status 0074                         getLoad_AD@i 0057  
                       getLoad_AD@j 0055                         getLoad_AD@k 0054  
           __size_of_setLights_Main 0030             __size_of_setLights_Line 000E  
           __size_of_setLights_SwOn 0025                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 00C2               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 0051         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0AEE                ??_getAll_Lights_Line 0074  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0B89          __end_of_LED_Initialization 0B0E  
             __end_of_getCDS_Status 0AD4      __end_of_setTemp_Initialization 0A80  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0AA4  
                 getCDS_AD@channel1 0056                   getCDS_AD@channel2 0051  
 __end_of_getLights_Allow_Condition 0BE0                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0BB3  
