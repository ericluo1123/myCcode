

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Jan 07 10:14:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text64,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0096                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009F                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0186                     	;# 
   148  018C                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0096                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009F                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0186                     	;# 
   217  018C                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  008F                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0096                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009F                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0186                     	;# 
   286  018C                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  008F                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0095                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0096                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009F                     	;# 
   345  0108                     	;# 
   346  0109                     	;# 
   347  010C                     	;# 
   348  010C                     	;# 
   349  010D                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  010F                     	;# 
   353  0185                     	;# 
   354  0186                     	;# 
   355  018C                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0009                     	;# 
   365  000A                     	;# 
   366  000B                     	;# 
   367  000C                     	;# 
   368  000D                     	;# 
   369  000E                     	;# 
   370  000E                     	;# 
   371  000F                     	;# 
   372  0010                     	;# 
   373  0011                     	;# 
   374  0012                     	;# 
   375  0013                     	;# 
   376  0014                     	;# 
   377  0015                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  001D                     	;# 
   388  001E                     	;# 
   389  001F                     	;# 
   390  0081                     	;# 
   391  0085                     	;# 
   392  0086                     	;# 
   393  0087                     	;# 
   394  0089                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  008F                     	;# 
   399  0090                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0093                     	;# 
   404  0094                     	;# 
   405  0095                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0096                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009F                     	;# 
   414  0108                     	;# 
   415  0109                     	;# 
   416  010C                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  010F                     	;# 
   422  0185                     	;# 
   423  0186                     	;# 
   424  018C                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0089                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  008F                     	;# 
   468  0090                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0094                     	;# 
   474  0095                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0096                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009F                     	;# 
   483  0108                     	;# 
   484  0109                     	;# 
   485  010C                     	;# 
   486  010C                     	;# 
   487  010D                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  0185                     	;# 
   492  0186                     	;# 
   493  018C                     	;# 
   494  0000                     	;# 
   495  0001                     	;# 
   496  0002                     	;# 
   497  0003                     	;# 
   498  0004                     	;# 
   499  0005                     	;# 
   500  0006                     	;# 
   501  0007                     	;# 
   502  0009                     	;# 
   503  000A                     	;# 
   504  000B                     	;# 
   505  000C                     	;# 
   506  000D                     	;# 
   507  000E                     	;# 
   508  000E                     	;# 
   509  000F                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0013                     	;# 
   514  0014                     	;# 
   515  0015                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  001D                     	;# 
   526  001E                     	;# 
   527  001F                     	;# 
   528  0081                     	;# 
   529  0085                     	;# 
   530  0086                     	;# 
   531  0087                     	;# 
   532  0089                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  008F                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0093                     	;# 
   541  0093                     	;# 
   542  0094                     	;# 
   543  0095                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0096                     	;# 
   547  0098                     	;# 
   548  0099                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009F                     	;# 
   552  0108                     	;# 
   553  0109                     	;# 
   554  010C                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010D                     	;# 
   558  010E                     	;# 
   559  010F                     	;# 
   560  0185                     	;# 
   561  0186                     	;# 
   562  018C                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001D                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  0081                     	;# 
   598  0085                     	;# 
   599  0086                     	;# 
   600  0087                     	;# 
   601  0089                     	;# 
   602  008C                     	;# 
   603  008D                     	;# 
   604  008E                     	;# 
   605  008F                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0095                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0096                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009F                     	;# 
   621  0108                     	;# 
   622  0109                     	;# 
   623  010C                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0185                     	;# 
   630  0186                     	;# 
   631  018C                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  000E                     	;# 
   647  000F                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0013                     	;# 
   652  0014                     	;# 
   653  0015                     	;# 
   654  0015                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001B                     	;# 
   662  001C                     	;# 
   663  001D                     	;# 
   664  001E                     	;# 
   665  001F                     	;# 
   666  0081                     	;# 
   667  0085                     	;# 
   668  0086                     	;# 
   669  0087                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  008F                     	;# 
   675  0090                     	;# 
   676  0091                     	;# 
   677  0092                     	;# 
   678  0093                     	;# 
   679  0093                     	;# 
   680  0094                     	;# 
   681  0095                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0096                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009F                     	;# 
   690  0108                     	;# 
   691  0109                     	;# 
   692  010C                     	;# 
   693  010C                     	;# 
   694  010D                     	;# 
   695  010D                     	;# 
   696  010E                     	;# 
   697  010F                     	;# 
   698  0185                     	;# 
   699  0186                     	;# 
   700  018C                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  000E                     	;# 
   716  000F                     	;# 
   717  0010                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0013                     	;# 
   721  0014                     	;# 
   722  0015                     	;# 
   723  0015                     	;# 
   724  0016                     	;# 
   725  0017                     	;# 
   726  0018                     	;# 
   727  0019                     	;# 
   728  001A                     	;# 
   729  001B                     	;# 
   730  001B                     	;# 
   731  001C                     	;# 
   732  001D                     	;# 
   733  001E                     	;# 
   734  001F                     	;# 
   735  0081                     	;# 
   736  0085                     	;# 
   737  0086                     	;# 
   738  0087                     	;# 
   739  0089                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  008F                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0093                     	;# 
   749  0094                     	;# 
   750  0095                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0096                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009C                     	;# 
   757  009D                     	;# 
   758  009F                     	;# 
   759  0108                     	;# 
   760  0109                     	;# 
   761  010C                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  010F                     	;# 
   767  0185                     	;# 
   768  0186                     	;# 
   769  018C                     	;# 
   770  0000                     	;# 
   771  0001                     	;# 
   772  0002                     	;# 
   773  0003                     	;# 
   774  0004                     	;# 
   775  0005                     	;# 
   776  0006                     	;# 
   777  0007                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  000D                     	;# 
   783  000E                     	;# 
   784  000E                     	;# 
   785  000F                     	;# 
   786  0010                     	;# 
   787  0011                     	;# 
   788  0012                     	;# 
   789  0013                     	;# 
   790  0014                     	;# 
   791  0015                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0017                     	;# 
   795  0018                     	;# 
   796  0019                     	;# 
   797  001A                     	;# 
   798  001B                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001D                     	;# 
   802  001E                     	;# 
   803  001F                     	;# 
   804  0081                     	;# 
   805  0085                     	;# 
   806  0086                     	;# 
   807  0087                     	;# 
   808  0089                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0095                     	;# 
   821  0096                     	;# 
   822  0096                     	;# 
   823  0098                     	;# 
   824  0099                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009F                     	;# 
   828  0108                     	;# 
   829  0109                     	;# 
   830  010C                     	;# 
   831  010C                     	;# 
   832  010D                     	;# 
   833  010D                     	;# 
   834  010E                     	;# 
   835  010F                     	;# 
   836  0185                     	;# 
   837  0186                     	;# 
   838  018C                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  000E                     	;# 
   854  000F                     	;# 
   855  0010                     	;# 
   856  0011                     	;# 
   857  0012                     	;# 
   858  0013                     	;# 
   859  0014                     	;# 
   860  0015                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0017                     	;# 
   864  0018                     	;# 
   865  0019                     	;# 
   866  001A                     	;# 
   867  001B                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  001D                     	;# 
   871  001E                     	;# 
   872  001F                     	;# 
   873  0081                     	;# 
   874  0085                     	;# 
   875  0086                     	;# 
   876  0087                     	;# 
   877  0089                     	;# 
   878  008C                     	;# 
   879  008D                     	;# 
   880  008E                     	;# 
   881  008F                     	;# 
   882  0090                     	;# 
   883  0091                     	;# 
   884  0092                     	;# 
   885  0093                     	;# 
   886  0093                     	;# 
   887  0094                     	;# 
   888  0095                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0096                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009C                     	;# 
   895  009D                     	;# 
   896  009F                     	;# 
   897  0108                     	;# 
   898  0109                     	;# 
   899  010C                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010D                     	;# 
   903  010E                     	;# 
   904  010F                     	;# 
   905  0185                     	;# 
   906  0186                     	;# 
   907  018C                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0009                     	;# 
   917  000A                     	;# 
   918  000B                     	;# 
   919  000C                     	;# 
   920  000D                     	;# 
   921  000E                     	;# 
   922  000E                     	;# 
   923  000F                     	;# 
   924  0010                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0015                     	;# 
   930  0015                     	;# 
   931  0016                     	;# 
   932  0017                     	;# 
   933  0018                     	;# 
   934  0019                     	;# 
   935  001A                     	;# 
   936  001B                     	;# 
   937  001B                     	;# 
   938  001C                     	;# 
   939  001D                     	;# 
   940  001E                     	;# 
   941  001F                     	;# 
   942  0081                     	;# 
   943  0085                     	;# 
   944  0086                     	;# 
   945  0087                     	;# 
   946  0089                     	;# 
   947  008C                     	;# 
   948  008D                     	;# 
   949  008E                     	;# 
   950  008F                     	;# 
   951  0090                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0093                     	;# 
   955  0093                     	;# 
   956  0094                     	;# 
   957  0095                     	;# 
   958  0095                     	;# 
   959  0096                     	;# 
   960  0096                     	;# 
   961  0098                     	;# 
   962  0099                     	;# 
   963  009C                     	;# 
   964  009D                     	;# 
   965  009F                     	;# 
   966  0108                     	;# 
   967  0109                     	;# 
   968  010C                     	;# 
   969  010C                     	;# 
   970  010D                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  010F                     	;# 
   974  0185                     	;# 
   975  0186                     	;# 
   976  018C                     	;# 
   977  0000                     	;# 
   978  0001                     	;# 
   979  0002                     	;# 
   980  0003                     	;# 
   981  0004                     	;# 
   982  0005                     	;# 
   983  0006                     	;# 
   984  0007                     	;# 
   985  0009                     	;# 
   986  000A                     	;# 
   987  000B                     	;# 
   988  000C                     	;# 
   989  000D                     	;# 
   990  000E                     	;# 
   991  000E                     	;# 
   992  000F                     	;# 
   993  0010                     	;# 
   994  0011                     	;# 
   995  0012                     	;# 
   996  0013                     	;# 
   997  0014                     	;# 
   998  0015                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0017                     	;# 
  1002  0018                     	;# 
  1003  0019                     	;# 
  1004  001A                     	;# 
  1005  001B                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  001D                     	;# 
  1009  001E                     	;# 
  1010  001F                     	;# 
  1011  0081                     	;# 
  1012  0085                     	;# 
  1013  0086                     	;# 
  1014  0087                     	;# 
  1015  0089                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  008F                     	;# 
  1020  0090                     	;# 
  1021  0091                     	;# 
  1022  0092                     	;# 
  1023  0093                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0095                     	;# 
  1028  0096                     	;# 
  1029  0096                     	;# 
  1030  0098                     	;# 
  1031  0099                     	;# 
  1032  009C                     	;# 
  1033  009D                     	;# 
  1034  009F                     	;# 
  1035  0108                     	;# 
  1036  0109                     	;# 
  1037  010C                     	;# 
  1038  010C                     	;# 
  1039  010D                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0186                     	;# 
  1045  018C                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  000E                     	;# 
  1061  000F                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  001D                     	;# 
  1078  001E                     	;# 
  1079  001F                     	;# 
  1080  0081                     	;# 
  1081  0085                     	;# 
  1082  0086                     	;# 
  1083  0087                     	;# 
  1084  0089                     	;# 
  1085  008C                     	;# 
  1086  008D                     	;# 
  1087  008E                     	;# 
  1088  008F                     	;# 
  1089  0090                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0093                     	;# 
  1093  0093                     	;# 
  1094  0094                     	;# 
  1095  0095                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0096                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009F                     	;# 
  1104  0108                     	;# 
  1105  0109                     	;# 
  1106  010C                     	;# 
  1107  010C                     	;# 
  1108  010D                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  010F                     	;# 
  1112  0185                     	;# 
  1113  0186                     	;# 
  1114  018C                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000D                     	;# 
  1128  000E                     	;# 
  1129  000E                     	;# 
  1130  000F                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  001D                     	;# 
  1147  001E                     	;# 
  1148  001F                     	;# 
  1149  0081                     	;# 
  1150  0085                     	;# 
  1151  0086                     	;# 
  1152  0087                     	;# 
  1153  0089                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  008F                     	;# 
  1158  0090                     	;# 
  1159  0091                     	;# 
  1160  0092                     	;# 
  1161  0093                     	;# 
  1162  0093                     	;# 
  1163  0094                     	;# 
  1164  0095                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0096                     	;# 
  1168  0098                     	;# 
  1169  0099                     	;# 
  1170  009C                     	;# 
  1171  009D                     	;# 
  1172  009F                     	;# 
  1173  0108                     	;# 
  1174  0109                     	;# 
  1175  010C                     	;# 
  1176  010C                     	;# 
  1177  010D                     	;# 
  1178  010D                     	;# 
  1179  010E                     	;# 
  1180  010F                     	;# 
  1181  0185                     	;# 
  1182  0186                     	;# 
  1183  018C                     	;# 
  1184  0000                     	;# 
  1185  0001                     	;# 
  1186  0002                     	;# 
  1187  0003                     	;# 
  1188  0004                     	;# 
  1189  0005                     	;# 
  1190  0006                     	;# 
  1191  0007                     	;# 
  1192  0009                     	;# 
  1193  000A                     	;# 
  1194  000B                     	;# 
  1195  000C                     	;# 
  1196  000D                     	;# 
  1197  000E                     	;# 
  1198  000E                     	;# 
  1199  000F                     	;# 
  1200  0010                     	;# 
  1201  0011                     	;# 
  1202  0012                     	;# 
  1203  0013                     	;# 
  1204  0014                     	;# 
  1205  0015                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0017                     	;# 
  1209  0018                     	;# 
  1210  0019                     	;# 
  1211  001A                     	;# 
  1212  001B                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  001D                     	;# 
  1216  001E                     	;# 
  1217  001F                     	;# 
  1218  0081                     	;# 
  1219  0085                     	;# 
  1220  0086                     	;# 
  1221  0087                     	;# 
  1222  0089                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  008F                     	;# 
  1227  0090                     	;# 
  1228  0091                     	;# 
  1229  0092                     	;# 
  1230  0093                     	;# 
  1231  0093                     	;# 
  1232  0094                     	;# 
  1233  0095                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0096                     	;# 
  1237  0098                     	;# 
  1238  0099                     	;# 
  1239  009C                     	;# 
  1240  009D                     	;# 
  1241  009F                     	;# 
  1242  0108                     	;# 
  1243  0109                     	;# 
  1244  010C                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  010D                     	;# 
  1248  010E                     	;# 
  1249  010F                     	;# 
  1250  0185                     	;# 
  1251  0186                     	;# 
  1252  018C                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0009                     	;# 
  1262  000A                     	;# 
  1263  000B                     	;# 
  1264  000C                     	;# 
  1265  000D                     	;# 
  1266  000E                     	;# 
  1267  000E                     	;# 
  1268  000F                     	;# 
  1269  0010                     	;# 
  1270  0011                     	;# 
  1271  0012                     	;# 
  1272  0013                     	;# 
  1273  0014                     	;# 
  1274  0015                     	;# 
  1275  0015                     	;# 
  1276  0016                     	;# 
  1277  0017                     	;# 
  1278  0018                     	;# 
  1279  0019                     	;# 
  1280  001A                     	;# 
  1281  001B                     	;# 
  1282  001B                     	;# 
  1283  001C                     	;# 
  1284  001D                     	;# 
  1285  001E                     	;# 
  1286  001F                     	;# 
  1287  0081                     	;# 
  1288  0085                     	;# 
  1289  0086                     	;# 
  1290  0087                     	;# 
  1291  0089                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  008F                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0093                     	;# 
  1300  0093                     	;# 
  1301  0094                     	;# 
  1302  0095                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0096                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009C                     	;# 
  1309  009D                     	;# 
  1310  009F                     	;# 
  1311  0108                     	;# 
  1312  0109                     	;# 
  1313  010C                     	;# 
  1314  010C                     	;# 
  1315  010D                     	;# 
  1316  010D                     	;# 
  1317  010E                     	;# 
  1318  010F                     	;# 
  1319  0185                     	;# 
  1320  0186                     	;# 
  1321  018C                     	;# 
  1322  001F                     _ADCON0	set	31
  1323  001E                     _ADRES	set	30
  1324  0005                     _PORTA	set	5
  1325  0006                     _PORTB	set	6
  1326  0007                     _PORTC	set	7
  1327  0010                     _T1CON	set	16
  1328  000F                     _TMR1H	set	15
  1329  000E                     _TMR1L	set	14
  1330  005F                     _GIE	set	95
  1331  00F9                     _GO_nDONE	set	249
  1332  005E                     _PEIE	set	94
  1333  002C                     _RA4	set	44
  1334  002D                     _RA5	set	45
  1335  0032                     _RB2	set	50
  1336  0033                     _RB3	set	51
  1337  0034                     _RB4	set	52
  1338  0035                     _RB5	set	53
  1339  0060                     _TMR1IF	set	96
  1340  009F                     _ADCON1	set	159
  1341  009D                     _FVRCON	set	157
  1342  0090                     _OSCCON	set	144
  1343  0085                     _TRISA	set	133
  1344  0086                     _TRISB	set	134
  1345  0087                     _TRISC	set	135
  1346  0408                     _PS0	set	1032
  1347  0409                     _PS1	set	1033
  1348  040A                     _PS2	set	1034
  1349  040B                     _PSA	set	1035
  1350  0460                     _TMR1IE	set	1120
  1351  0185                     _ANSELA	set	389
  1352  0186                     _ANSELB	set	390
  1353                           
  1354                           	psect	text0
  1355  0000                     __ptext0:	
  1356                           ; #config settings
  1357                           
  1358                           
  1359                           ;psect for function _TMR1_ISR
  1360  0000                     
  1361                           	psect	cinit
  1362  0013                     start_initialization:	
  1363  0013                     __initialization:	
  1364                           
  1365                           ; Clear objects allocated to COMMON
  1366  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1367  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1368  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1369  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1370                           
  1371                           ; Clear objects allocated to BANK0
  1372  0017  1383               	bcf	3,7	;select IRP bank0
  1373  0018  3020               	movlw	low __pbssBANK0
  1374  0019  0084               	movwf	4
  1375  001A  305A               	movlw	low (__pbssBANK0+58)
  1376  001B  158A  2337  118A   	fcall	clear_ram0
  1377                           
  1378                           ; Clear objects allocated to BANK1
  1379  001E  30A0               	movlw	low __pbssBANK1
  1380  001F  0084               	movwf	4
  1381  0020  30EF               	movlw	low (__pbssBANK1+79)
  1382  0021  158A  2337         	fcall	clear_ram0
  1383  0023                     end_of_initialization:	
  1384                           ;End of C runtime variable initialization code
  1385                           
  1386  0023                     __end_of__initialization:	
  1387  0023  0183               	clrf	3
  1388  0024  158A  2F29         	ljmp	_main	;jump to C main() function
  1389                           
  1390                           	psect	bssCOMMON
  1391  0076                     __pbssCOMMON:	
  1392  0076                     _LED:	
  1393  0076                     	ds	1
  1394  0077                     _Light:	
  1395  0077                     	ds	1
  1396  0078                     _Lights:	
  1397  0078                     	ds	1
  1398  0079                     _LightsControl:	
  1399  0079                     	ds	1
  1400                           
  1401                           	psect	bssBANK0
  1402  0020                     __pbssBANK0:	
  1403  0020                     _myMain:	
  1404  0020                     	ds	6
  1405  0026                     _SYSC:	
  1406  0026                     	ds	5
  1407  002B                     __CDS:	
  1408  002B                     	ds	5
  1409  0030                     _PIRLED:	
  1410  0030                     	ds	4
  1411  0034                     _Timer1:	
  1412  0034                     	ds	3
  1413  0037                     _WDT:	
  1414  0037                     	ds	2
  1415  0039                     _Cmd:	
  1416  0039                     	ds	1
  1417  003A                     _SwDetect:	
  1418  003A                     	ds	1
  1419  003B                     _Temp:	
  1420  003B                     	ds	12
  1421  0047                     _Lights1:	
  1422  0047                     	ds	7
  1423  004E                     _VarErrLED:	
  1424  004E                     	ds	4
  1425  0052                     _VarLED1:	
  1426  0052                     	ds	4
  1427  0056                     _VarLED2:	
  1428  0056                     	ds	4
  1429                           
  1430                           	psect	bssBANK1
  1431  00A0                     __pbssBANK1:	
  1432  00A0                     __PIR:	
  1433  00A0                     	ds	46
  1434  00CE                     _Load:	
  1435  00CE                     	ds	33
  1436                           
  1437                           	psect	clrtext
  1438  0B37                     clear_ram0:	
  1439                           ;	Called with FSR containing the base address, and
  1440                           ;	W with the last address+1
  1441                           
  1442  0B37  0064               	clrwdt	;clear the watchdog before getting into this loop
  1443  0B38                     clrloop0:	
  1444  0B38  0180               	clrf	0	;clear RAM location pointed to by FSR
  1445  0B39  0A84               	incf	4,f	;increment pointer
  1446  0B3A  0604               	xorwf	4,w	;XOR with final address
  1447  0B3B  1903               	btfsc	3,2	;have we reached the end yet?
  1448  0B3C  3400               	retlw	0	;all done for this memory range, return
  1449  0B3D  0604               	xorwf	4,w	;XOR again to restore value
  1450  0B3E  2B38               	goto	clrloop0	;do the next byte
  1451                           
  1452                           	psect	cstackCOMMON
  1453  0070                     __pcstackCOMMON:	
  1454  0070                     ?_setLED_Initialization:	
  1455  0070                     ?_setPIRLED_Main:	
  1456                           ; 0 bytes @ 0x0
  1457                           
  1458  0070                     ?_Fosc_Set:	
  1459                           ; 0 bytes @ 0x0
  1460                           
  1461  0070                     ?_IO_Set:	
  1462                           ; 0 bytes @ 0x0
  1463                           
  1464  0070                     ?_TMR1_Set:	
  1465                           ; 0 bytes @ 0x0
  1466                           
  1467  0070                     ?_ADC_Set:	
  1468                           ; 0 bytes @ 0x0
  1469                           
  1470  0070                     ?_WDT_Set:	
  1471                           ; 0 bytes @ 0x0
  1472                           
  1473  0070                     ?_TMR1_ISR:	
  1474                           ; 0 bytes @ 0x0
  1475                           
  1476  0070                     ??_TMR1_ISR:	
  1477                           ; 0 bytes @ 0x0
  1478                           
  1479  0070                     ?_Timeout_Counter:	
  1480                           ; 0 bytes @ 0x0
  1481                           
  1482  0070                     ?_set_TimeoutCleared:	
  1483                           ; 0 bytes @ 0x0
  1484                           
  1485  0070                     ?_WDT_Clearing:	
  1486                           ; 0 bytes @ 0x0
  1487                           
  1488  0070                     ?_myMain_Initialization:	
  1489                           ; 0 bytes @ 0x0
  1490                           
  1491  0070                     ?_SYSC_Initialization:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Temp_Initialization:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_Load_Initialization:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_Lights_Initialization:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_PIR_Initialization:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_DetectSYSC_Signal:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_getLoad_AD:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ?_getTemp_AD:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_my_MainTimer:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_SYSC_Main:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_Temp_Main:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_Load_Main:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_Lights_Main:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_PIR_Main:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_Exception_Main:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_setLoad_AH_AL_Restore:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_setTemp_Initialization:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_setTemp_Main:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_setSYSC_Initialization:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_setSYSC_Main:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_setLights_Initialization:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_setLights_Main:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_Lights_Control:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_Lights_Close:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_setLights_Line:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_CDS_Initialization:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_CDS_Main:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_LedPointSelect:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_LED_Initialization:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_LED_Main:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_Mcu_Initialization:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_ISR:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ??_ISR:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_WDT_Main:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_LightsPointSelect:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0070                     ?_getAll_Lights_Line:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0070                     ?_getLights_Status:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_getLight_LoadGO:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_getLight_Load_Status:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_getLights_Allow_Condition:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_getCDS_Status:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_getMain_All_LightsStatus:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_getMain_All_Error_Status:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     ?_getMain_Lights_Count:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_getLoad_OK:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     getLights_Allow_Condition@lights:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629                           
  1630                           ; 1 bytes @ 0x0
  1631  0070                     	ds	4
  1632  0074                     ??_Fosc_Set:	
  1633  0074                     ??_IO_Set:	
  1634                           ; 0 bytes @ 0x4
  1635                           
  1636  0074                     ??_TMR1_Set:	
  1637                           ; 0 bytes @ 0x4
  1638                           
  1639  0074                     ??_ADC_Set:	
  1640                           ; 0 bytes @ 0x4
  1641                           
  1642  0074                     ??_WDT_Set:	
  1643                           ; 0 bytes @ 0x4
  1644                           
  1645  0074                     ??_Timeout_Counter:	
  1646                           ; 0 bytes @ 0x4
  1647                           
  1648  0074                     ??_set_TimeoutCleared:	
  1649                           ; 0 bytes @ 0x4
  1650                           
  1651  0074                     ??_WDT_Clearing:	
  1652                           ; 0 bytes @ 0x4
  1653                           
  1654  0074                     ??_myMain_Initialization:	
  1655                           ; 0 bytes @ 0x4
  1656                           
  1657  0074                     ??_SYSC_Initialization:	
  1658                           ; 0 bytes @ 0x4
  1659                           
  1660  0074                     ??_Temp_Initialization:	
  1661                           ; 0 bytes @ 0x4
  1662                           
  1663  0074                     ??_PIR_Initialization:	
  1664                           ; 0 bytes @ 0x4
  1665                           
  1666  0074                     ??_DetectSYSC_Signal:	
  1667                           ; 0 bytes @ 0x4
  1668                           
  1669  0074                     ??_my_MainTimer:	
  1670                           ; 0 bytes @ 0x4
  1671                           
  1672  0074                     ??_setLoad_AH_AL_Restore:	
  1673                           ; 0 bytes @ 0x4
  1674                           
  1675  0074                     ??_getLight_LoadGO:	
  1676                           ; 0 bytes @ 0x4
  1677                           
  1678  0074                     ??_getLight_Load_Status:	
  1679                           ; 0 bytes @ 0x4
  1680                           
  1681  0074                     ??_setTemp_Initialization:	
  1682                           ; 0 bytes @ 0x4
  1683                           
  1684  0074                     ??_setSYSC_Initialization:	
  1685                           ; 0 bytes @ 0x4
  1686                           
  1687  0074                     ??_setLights_Line:	
  1688                           ; 0 bytes @ 0x4
  1689                           
  1690  0074                     ??_CDS_Initialization:	
  1691                           ; 0 bytes @ 0x4
  1692                           
  1693  0074                     ??_getCDS_Status:	
  1694                           ; 0 bytes @ 0x4
  1695                           
  1696  0074                     ??_LedPointSelect:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_WDT_Main:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_getMain_All_LightsStatus:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_getMain_All_Error_Status:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_getMain_Lights_Count:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??_getLoad_OK:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??_LightsPointSelect:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??___wmul:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ??___awdiv:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     ??___lwdiv:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0074                     ?_getAD:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0074                     getCDS_Status@status:	
  1730                           ; 1 bytes @ 0x4
  1731                           
  1732  0074                     getAD@adcon1:	
  1733                           ; 1 bytes @ 0x4
  1734                           
  1735  0074                     getMain_All_LightsStatus@status:	
  1736                           ; 1 bytes @ 0x4
  1737                           
  1738  0074                     getMain_Lights_Count@count:	
  1739                           ; 1 bytes @ 0x4
  1740                           
  1741  0074                     getLoad_OK@ok:	
  1742                           ; 1 bytes @ 0x4
  1743                           
  1744  0074                     setLights_Line@lights:	
  1745                           ; 1 bytes @ 0x4
  1746                           
  1747  0074                     getLight_LoadGO@loadgo:	
  1748                           ; 1 bytes @ 0x4
  1749                           
  1750  0074                     getLight_Load_Status@loadstatus:	
  1751                           ; 1 bytes @ 0x4
  1752                           
  1753  0074                     ___wmul@product:	
  1754                           ; 1 bytes @ 0x4
  1755                           
  1756                           
  1757                           ; 2 bytes @ 0x4
  1758  0074                     	ds	1
  1759  0075                     ??_getAD:	
  1760  0075                     ??_SYSC_Main:	
  1761                           ; 0 bytes @ 0x5
  1762                           
  1763  0075                     ??_setTemp_Main:	
  1764                           ; 0 bytes @ 0x5
  1765                           
  1766  0075                     ??_setSYSC_Main:	
  1767                           ; 0 bytes @ 0x5
  1768                           
  1769  0075                     ??_Lights_Close:	
  1770                           ; 0 bytes @ 0x5
  1771                           
  1772  0075                     ??_getLights_Allow_Condition:	
  1773                           ; 0 bytes @ 0x5
  1774                           
  1775  0075                     ??_Mcu_Initialization:	
  1776                           ; 0 bytes @ 0x5
  1777                           
  1778  0075                     LedPointSelect@led:	
  1779                           ; 0 bytes @ 0x5
  1780                           
  1781  0075                     getAD@adcon0:	
  1782                           ; 1 bytes @ 0x5
  1783                           
  1784  0075                     getMain_Lights_Count@status1:	
  1785                           ; 1 bytes @ 0x5
  1786                           
  1787  0075                     setLoad_AH_AL_Restore@i:	
  1788                           ; 1 bytes @ 0x5
  1789                           
  1790  0075                     LightsPointSelect@lights:	
  1791                           ; 1 bytes @ 0x5
  1792                           
  1793                           
  1794                           ; 1 bytes @ 0x5
  1795  0075                     	ds	1
  1796  0076                     ??_setLED_Initialization:	
  1797  0076                     ??_setLED:	
  1798                           ; 0 bytes @ 0x6
  1799                           
  1800  0076                     ??_Load_Initialization:	
  1801                           ; 0 bytes @ 0x6
  1802                           
  1803  0076                     ??_Lights_Initialization:	
  1804                           ; 0 bytes @ 0x6
  1805                           
  1806  0076                     ??_Temp_Main:	
  1807                           ; 0 bytes @ 0x6
  1808                           
  1809  0076                     ??_Lights_Main:	
  1810                           ; 0 bytes @ 0x6
  1811                           
  1812  0076                     ??_getAll_Lights_Line:	
  1813                           ; 0 bytes @ 0x6
  1814                           
  1815  0076                     ??_getLights_Status:	
  1816                           ; 0 bytes @ 0x6
  1817                           
  1818  0076                     ??_setLights_Initialization:	
  1819                           ; 0 bytes @ 0x6
  1820                           
  1821  0076                     ??_setLights_Main:	
  1822                           ; 0 bytes @ 0x6
  1823                           
  1824  0076                     ??_LED_Initialization:	
  1825                           ; 0 bytes @ 0x6
  1826                           
  1827  0076                     ??_LED_Main:	
  1828                           ; 0 bytes @ 0x6
  1829                           
  1830                           
  1831                           	psect	cstackBANK0
  1832  005A                     __pcstackBANK0:	
  1833                           ; 0 bytes @ 0x6
  1834                           
  1835  005A                     ?_setLED:	
  1836  005A                     ??_getLoad_AD:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  005A                     ??_getTemp_AD:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  005A                     ?_setLights_Trigger:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  005A                     ?_setLights:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  005A                     ??_CDS_Main:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  005A                     ?_getCDS_AD:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  005A                     ?___wmul:	
  1855                           ; 0 bytes @ 0x0
  1856                           
  1857  005A                     ?___awdiv:	
  1858                           ; 2 bytes @ 0x0
  1859                           
  1860  005A                     ?___lwdiv:	
  1861                           ; 2 bytes @ 0x0
  1862                           
  1863  005A                     getCDS_AD@channel2:	
  1864                           ; 2 bytes @ 0x0
  1865                           
  1866  005A                     setLED@command:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  005A                     setLights_Initialization@lights:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  005A                     setLights@status:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  005A                     getLights_Status@lights:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  005A                     setLights_Trigger@command:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  005A                     getAll_Lights_Line@line:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  005A                     getLights_Allow_Condition@allow:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  005A                     _getMain_All_Error_Status$2341:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  005A                     ___wmul@multiplier:	
  1891                           ; 2 bytes @ 0x0
  1892                           
  1893  005A                     ___awdiv@divisor:	
  1894                           ; 2 bytes @ 0x0
  1895                           
  1896  005A                     ___lwdiv@divisor:	
  1897                           ; 2 bytes @ 0x0
  1898                           
  1899                           
  1900                           ; 2 bytes @ 0x0
  1901  005A                     	ds	1
  1902  005B                     ??_setLights_Trigger:	
  1903  005B                     ??_setLights:	
  1904                           ; 0 bytes @ 0x1
  1905                           
  1906  005B                     ??_getCDS_AD:	
  1907                           ; 0 bytes @ 0x1
  1908                           
  1909  005B                     setLED@led:	
  1910                           ; 0 bytes @ 0x1
  1911                           
  1912  005B                     getLights_Status@status:	
  1913                           ; 1 bytes @ 0x1
  1914                           
  1915  005B                     _getLights_Allow_Condition$4633:	
  1916                           ; 1 bytes @ 0x1
  1917                           
  1918                           
  1919                           ; 1 bytes @ 0x1
  1920  005B                     	ds	1
  1921  005C                     ??_setPIRLED_Main:	
  1922  005C                     setLED_Initialization@led:	
  1923                           ; 0 bytes @ 0x2
  1924                           
  1925  005C                     getLoad_AD@channel:	
  1926                           ; 1 bytes @ 0x2
  1927                           
  1928  005C                     getTemp_AD@channel:	
  1929                           ; 1 bytes @ 0x2
  1930                           
  1931  005C                     setLights@lights:	
  1932                           ; 1 bytes @ 0x2
  1933                           
  1934  005C                     setLights_Trigger@lights:	
  1935                           ; 1 bytes @ 0x2
  1936                           
  1937  005C                     _getMain_All_Error_Status$2342:	
  1938                           ; 1 bytes @ 0x2
  1939                           
  1940  005C                     ___wmul@multiplicand:	
  1941                           ; 2 bytes @ 0x2
  1942                           
  1943  005C                     ___awdiv@dividend:	
  1944                           ; 2 bytes @ 0x2
  1945                           
  1946  005C                     ___lwdiv@dividend:	
  1947                           ; 2 bytes @ 0x2
  1948                           
  1949                           
  1950                           ; 2 bytes @ 0x2
  1951  005C                     	ds	1
  1952  005D                     getCDS_AD@i:	
  1953  005D                     setPIRLED_Main@count:	
  1954                           ; 1 bytes @ 0x3
  1955                           
  1956  005D                     getLoad_AD@k:	
  1957                           ; 1 bytes @ 0x3
  1958                           
  1959  005D                     setLights_Main@lights:	
  1960                           ; 1 bytes @ 0x3
  1961                           
  1962                           
  1963                           ; 1 bytes @ 0x3
  1964  005D                     	ds	1
  1965  005E                     getCDS_AD@j:	
  1966  005E                     getMain_All_Error_Status@command:	
  1967                           ; 1 bytes @ 0x4
  1968                           
  1969  005E                     getLoad_AD@j:	
  1970                           ; 1 bytes @ 0x4
  1971                           
  1972  005E                     ___awdiv@counter:	
  1973                           ; 1 bytes @ 0x4
  1974                           
  1975  005E                     ___lwdiv@counter:	
  1976                           ; 1 bytes @ 0x4
  1977                           
  1978                           
  1979                           ; 1 bytes @ 0x4
  1980  005E                     	ds	1
  1981  005F                     getCDS_AD@channel1:	
  1982  005F                     getMain_All_Error_Status@status:	
  1983                           ; 1 bytes @ 0x5
  1984                           
  1985  005F                     getLoad_AD@i:	
  1986                           ; 1 bytes @ 0x5
  1987                           
  1988  005F                     ___awdiv@sign:	
  1989                           ; 1 bytes @ 0x5
  1990                           
  1991  005F                     ___lwdiv@quotient:	
  1992                           ; 1 bytes @ 0x5
  1993                           
  1994                           
  1995                           ; 2 bytes @ 0x5
  1996  005F                     	ds	1
  1997  0060                     ??_PIR_Main:	
  1998  0060                     ??_Exception_Main:	
  1999                           ; 0 bytes @ 0x6
  2000                           
  2001  0060                     ___awdiv@quotient:	
  2002                           ; 0 bytes @ 0x6
  2003                           
  2004                           
  2005                           ; 2 bytes @ 0x6
  2006  0060                     	ds	1
  2007  0061                     ??_Load_Main:	
  2008  0061                     Exception_Main@lights:	
  2009                           ; 0 bytes @ 0x7
  2010                           
  2011                           
  2012                           ; 1 bytes @ 0x7
  2013  0061                     	ds	1
  2014  0062                     ?_getPIR_AD:	
  2015  0062                     ??_Lights_Control:	
  2016                           ; 0 bytes @ 0x8
  2017                           
  2018  0062                     Exception_Main@count:	
  2019                           ; 0 bytes @ 0x8
  2020                           
  2021  0062                     setTemp_Main@error:	
  2022                           ; 1 bytes @ 0x8
  2023                           
  2024  0062                     getPIR_AD@channel2:	
  2025                           ; 1 bytes @ 0x8
  2026                           
  2027                           
  2028                           ; 1 bytes @ 0x8
  2029  0062                     	ds	1
  2030  0063                     ??_getPIR_AD:	
  2031  0063                     Exception_Main@status:	
  2032                           ; 0 bytes @ 0x9
  2033                           
  2034  0063                     Load_Main@error:	
  2035                           ; 1 bytes @ 0x9
  2036                           
  2037                           
  2038                           ; 1 bytes @ 0x9
  2039  0063                     	ds	1
  2040  0064                     Load_Main@Load_Status:	
  2041  0064                     Exception_Main@i:	
  2042                           ; 1 bytes @ 0xA
  2043                           
  2044  0064                     _Lights_Control$4611:	
  2045                           ; 2 bytes @ 0xA
  2046                           
  2047                           
  2048                           ; 2 bytes @ 0xA
  2049  0064                     	ds	1
  2050  0065                     PIR_Main@error:	
  2051  0065                     Load_Main@i:	
  2052                           ; 1 bytes @ 0xB
  2053                           
  2054                           
  2055                           ; 2 bytes @ 0xB
  2056  0065                     	ds	1
  2057  0066                     Exception_Main@error:	
  2058  0066                     getPIR_AD@j:	
  2059                           ; 1 bytes @ 0xC
  2060                           
  2061  0066                     Lights_Control@lights:	
  2062                           ; 1 bytes @ 0xC
  2063                           
  2064  0066                     _PIR_Main$3125:	
  2065                           ; 1 bytes @ 0xC
  2066                           
  2067                           
  2068                           ; 2 bytes @ 0xC
  2069  0066                     	ds	1
  2070  0067                     getPIR_AD@channel1:	
  2071                           
  2072                           ; 1 bytes @ 0xD
  2073  0067                     	ds	1
  2074  0068                     PIR_Main@cds:	
  2075  0068                     getPIR_AD@i:	
  2076                           ; 1 bytes @ 0xE
  2077                           
  2078                           
  2079                           ; 1 bytes @ 0xE
  2080  0068                     	ds	1
  2081  0069                     ?_main:	
  2082  0069                     main@argc:	
  2083                           ; 2 bytes @ 0xF
  2084                           
  2085                           
  2086                           ; 2 bytes @ 0xF
  2087  0069                     	ds	2
  2088  006B                     main@argv:	
  2089                           
  2090                           ; 2 bytes @ 0x11
  2091  006B                     	ds	2
  2092  006D                     ??_main:	
  2093                           
  2094                           ; 0 bytes @ 0x13
  2095  006D                     	ds	1
  2096                           
  2097                           	psect	maintext
  2098  0F29                     __pmaintext:	
  2099 ;;
  2100 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2101 ;;
  2102 ;; *************** function _main *****************
  2103 ;; Defined at:
  2104 ;;		line 7 in file "../src/Main_B1.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  argc            2   15[BANK0 ] int 
  2107 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  2   15[BANK0 ] int 
  2112 ;; Registers used:
  2113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 17F/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2119 ;;      Params:         0       4       0       0
  2120 ;;      Locals:         0       0       0       0
  2121 ;;      Temps:          0       1       0       0
  2122 ;;      Totals:         0       5       0       0
  2123 ;;Total ram usage:        5 bytes
  2124 ;; Hardware stack levels required when called:    6
  2125 ;; This function calls:
  2126 ;;		_CDS_Initialization
  2127 ;;		_CDS_Main
  2128 ;;		_DetectSYSC_Signal
  2129 ;;		_Exception_Main
  2130 ;;		_LED_Initialization
  2131 ;;		_LED_Main
  2132 ;;		_Lights_Initialization
  2133 ;;		_Lights_Main
  2134 ;;		_Load_Initialization
  2135 ;;		_Load_Main
  2136 ;;		_Mcu_Initialization
  2137 ;;		_PIR_Initialization
  2138 ;;		_PIR_Main
  2139 ;;		_SYSC_Initialization
  2140 ;;		_SYSC_Main
  2141 ;;		_Temp_Initialization
  2142 ;;		_Temp_Main
  2143 ;;		_WDT_Main
  2144 ;;		_getCDS_AD
  2145 ;;		_getLoad_AD
  2146 ;;		_getPIR_AD
  2147 ;;		_getTemp_AD
  2148 ;;		_myMain_Initialization
  2149 ;;		_my_MainTimer
  2150 ;; This function is called by:
  2151 ;;		Startup code after reset
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           
  2156                           ;psect for function _main
  2157  0F29                     _main:	
  2158                           
  2159                           ;Main_B1.c: 8: myMain_Initialization();
  2160                           
  2161                           ;incstack = 0
  2162                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2163  0F29  158A  22E7  158A   	fcall	_myMain_Initialization
  2164                           
  2165                           ;Main_B1.c: 9: Mcu_Initialization();
  2166  0F2C  158A  23AB  158A   	fcall	_Mcu_Initialization
  2167                           
  2168                           ;Main_B1.c: 10: ;;
  2169                           ;Main_B1.c: 11: LED_Initialization();
  2170  0F2F  158A  2367  158A   	fcall	_LED_Initialization
  2171                           
  2172                           ;Main_B1.c: 12: ;;
  2173                           ;Main_B1.c: 14: SYSC_Initialization();
  2174  0F32  158A  22EE  158A   	fcall	_SYSC_Initialization
  2175                           
  2176                           ;Main_B1.c: 15: Temp_Initialization();
  2177  0F35  158A  22F4  158A   	fcall	_Temp_Initialization
  2178                           
  2179                           ;Main_B1.c: 16: Load_Initialization();
  2180  0F38  158A  22EB  158A   	fcall	_Load_Initialization
  2181                           
  2182                           ;Main_B1.c: 17: ;;
  2183                           ;Main_B1.c: 18: ;;
  2184                           ;Main_B1.c: 20: ;;
  2185                           ;Main_B1.c: 21: Lights_Initialization();
  2186  0F3B  158A  22FE  158A   	fcall	_Lights_Initialization
  2187                           
  2188                           ;Main_B1.c: 22: CDS_Initialization();
  2189  0F3E  158A  22FA  158A   	fcall	_CDS_Initialization
  2190                           
  2191                           ;Main_B1.c: 23: PIR_Initialization();
  2192  0F41  158A  235C  158A   	fcall	_PIR_Initialization
  2193  0F44                     l5412:	
  2194                           ;Main_B1.c: 24: ;;
  2195                           ;Main_B1.c: 25: ;;
  2196                           ;Main_B1.c: 26: ;;
  2197                           ;Main_B1.c: 27: ;;
  2198                           ;Main_B1.c: 28: ;;
  2199                           ;Main_B1.c: 30: while (1) {
  2200                           
  2201                           
  2202                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2203  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0F46  1C20               	btfss	_myMain,0
  2206  0F47  2F67               	goto	l5424
  2207                           
  2208                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2209  0F48  158A  2373  158A   	fcall	_DetectSYSC_Signal
  2210                           
  2211                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2212  0F4B  3001               	movlw	1
  2213  0F4C  118A  26D8  158A   	fcall	_getLoad_AD
  2214                           
  2215                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2216  0F4F  3011               	movlw	17
  2217  0F50  158A  2545  158A   	fcall	_getTemp_AD
  2218                           
  2219                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2220  0F53  3031               	movlw	49
  2221  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0F56  00ED               	movwf	??_main
  2224  0F57  086D               	movf	??_main,w
  2225  0F58  00DA               	movwf	getCDS_AD@channel2
  2226  0F59  3009               	movlw	9
  2227  0F5A  158A  256C  158A   	fcall	_getCDS_AD
  2228                           
  2229                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2230  0F5D  300D               	movlw	13
  2231  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0F60  00ED               	movwf	??_main
  2234  0F61  086D               	movf	??_main,w
  2235  0F62  00E2               	movwf	getPIR_AD@channel2
  2236  0F63  3005               	movlw	5
  2237  0F64  118A  2409  158A   	fcall	_getPIR_AD
  2238  0F67                     l5424:	
  2239                           
  2240                           ;Main_B1.c: 57: }
  2241                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2242  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0F69  1C34               	btfss	_Timer1,0
  2245  0F6A  2F44               	goto	l5412
  2246                           
  2247                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2248  0F6B  1034               	bcf	_Timer1,0
  2249                           
  2250                           ;Main_B1.c: 96: my_MainTimer();
  2251  0F6C  158A  24AE  158A   	fcall	_my_MainTimer
  2252                           
  2253                           ;Main_B1.c: 97: WDT_Main();
  2254  0F6F  158A  23ED  158A   	fcall	_WDT_Main
  2255                           
  2256                           ;Main_B1.c: 98: ;;
  2257                           ;Main_B1.c: 99: ;;
  2258                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2259  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2260  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2261  0F74  1C20               	btfss	_myMain,0
  2262  0F75  2F44               	goto	l5412
  2263                           
  2264                           ;Main_B1.c: 101: ;;
  2265                           ;Main_B1.c: 103: LED_Main();
  2266  0F76  158A  22E8  158A   	fcall	_LED_Main
  2267                           
  2268                           ;Main_B1.c: 104: ;;
  2269                           ;Main_B1.c: 106: SYSC_Main();
  2270  0F79  158A  22F1  158A   	fcall	_SYSC_Main
  2271                           
  2272                           ;Main_B1.c: 107: Temp_Main();
  2273  0F7C  158A  22F7  158A   	fcall	_Temp_Main
  2274                           
  2275                           ;Main_B1.c: 108: Load_Main();
  2276  0F7F  118A  2222  158A   	fcall	_Load_Main
  2277                           
  2278                           ;Main_B1.c: 109: ;;
  2279                           ;Main_B1.c: 111: Lights_Main();
  2280  0F82  158A  24FF  158A   	fcall	_Lights_Main
  2281                           
  2282                           ;Main_B1.c: 112: ;;
  2283                           ;Main_B1.c: 113: ;;
  2284                           ;Main_B1.c: 114: CDS_Main();
  2285  0F85  158A  25C6  158A   	fcall	_CDS_Main
  2286                           
  2287                           ;Main_B1.c: 115: PIR_Main();
  2288  0F88  118A  2026  158A   	fcall	_PIR_Main
  2289                           
  2290                           ;Main_B1.c: 117: ;;
  2291                           ;Main_B1.c: 118: ;;
  2292                           ;Main_B1.c: 119: ;;
  2293                           ;Main_B1.c: 120: ;;
  2294                           ;Main_B1.c: 121: Exception_Main();
  2295  0F8B  118A  2662  158A   	fcall	_Exception_Main
  2296  0F8E  2F44               	goto	l5412
  2297  0F8F                     __end_of_main:	
  2298                           ;Main_B1.c: 128: }
  2299                           ;Main_B1.c: 129: }
  2300                           ;Main_B1.c: 163: }
  2301                           ;Main_B1.c: 164: return (0);
  2302                           ;	Return value of _main is never used
  2303                           
  2304                           
  2305                           	psect	text1
  2306  0CAE                     __ptext1:	
  2307 ;; *************** function _my_MainTimer *****************
  2308 ;; Defined at:
  2309 ;;		line 185 in file "../src/Main_B1.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;		None               void
  2316 ;; Registers used:
  2317 ;;		wreg, status,2, status,0
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2323 ;;      Params:         0       0       0       0
  2324 ;;      Locals:         0       0       0       0
  2325 ;;      Temps:          1       0       0       0
  2326 ;;      Totals:         1       0       0       0
  2327 ;;Total ram usage:        1 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    2
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _my_MainTimer
  2339  0CAE                     _my_MainTimer:	
  2340                           
  2341                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2342                           
  2343                           ;incstack = 0
  2344                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2345  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  2346  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  2347  0CB0  1820               	btfsc	_myMain,0
  2348  0CB1  2CBE               	goto	l3912
  2349                           
  2350                           ;Main_B1.c: 189: myMain.PowerCount++;
  2351  0CB2  3001               	movlw	1
  2352  0CB3  00F4               	movwf	??_my_MainTimer
  2353  0CB4  0874               	movf	??_my_MainTimer,w
  2354  0CB5  07A1               	addwf	_myMain+1,f
  2355                           
  2356                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  2357  0CB6  0821               	movf	_myMain+1,w
  2358  0CB7  3A4B               	xorlw	75
  2359  0CB8  1D03               	skipz
  2360  0CB9  0008               	return
  2361                           
  2362                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2363  0CBA  01A1               	clrf	_myMain+1
  2364                           
  2365                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2366  0CBB  1420               	bsf	_myMain,0
  2367                           
  2368                           ;Main_B1.c: 197: ;;
  2369                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2370  0CBC  1620               	bsf	_myMain,4
  2371                           
  2372                           ;Main_B1.c: 207: }
  2373                           ;Main_B1.c: 208: } else {
  2374  0CBD  0008               	return
  2375  0CBE                     l3912:	
  2376                           
  2377                           ;Main_B1.c: 209: myMain.PowerCount++;
  2378  0CBE  3001               	movlw	1
  2379  0CBF  00F4               	movwf	??_my_MainTimer
  2380  0CC0  0874               	movf	??_my_MainTimer,w
  2381  0CC1  07A1               	addwf	_myMain+1,f
  2382                           
  2383                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  2384  0CC2  0821               	movf	_myMain+1,w
  2385  0CC3  3A32               	xorlw	50
  2386  0CC4  1D03               	skipz
  2387  0CC5  0008               	return
  2388                           
  2389                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2390  0CC6  01A1               	clrf	_myMain+1
  2391  0CC7  0008               	return
  2392  0CC8                     __end_of_my_MainTimer:	
  2393                           
  2394                           	psect	text2
  2395  0AE7                     __ptext2:	
  2396 ;; *************** function _myMain_Initialization *****************
  2397 ;; Defined at:
  2398 ;;		line 170 in file "../src/Main_B1.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;		None               void
  2405 ;; Registers used:
  2406 ;;		None
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2412 ;;      Params:         0       0       0       0
  2413 ;;      Locals:         0       0       0       0
  2414 ;;      Temps:          0       0       0       0
  2415 ;;      Totals:         0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    2
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function _myMain_Initialization
  2428  0AE7                     _myMain_Initialization:	
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _myMain_Initialization: []
  2432  0AE7  0008               	return
  2433  0AE8                     __end_of_myMain_Initialization:	
  2434                           
  2435                           	psect	text3
  2436  0D45                     __ptext3:	
  2437 ;; *************** function _getTemp_AD *****************
  2438 ;; Defined at:
  2439 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  channel         1    wreg     unsigned char 
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  channel         1    2[BANK0 ] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;		None               void
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0, pclath, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2453 ;;      Params:         0       0       0       0
  2454 ;;      Locals:         0       1       0       0
  2455 ;;      Temps:          0       2       0       0
  2456 ;;      Totals:         0       3       0       0
  2457 ;;Total ram usage:        3 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    4
  2460 ;; This function calls:
  2461 ;;		_getAD
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           
  2468                           ;psect for function _getTemp_AD
  2469  0D45                     _getTemp_AD:	
  2470                           
  2471                           ;incstack = 0
  2472                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2473                           ;getTemp_AD@channel stored from wreg
  2474  0D45  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0D46  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0D47  00DC               	movwf	getTemp_AD@channel
  2477                           
  2478                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2479  0D48  1D3B               	btfss	_Temp,2
  2480  0D49  0008               	return
  2481                           
  2482                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2483  0D4A  3070               	movlw	112
  2484  0D4B  00DA               	movwf	??_getTemp_AD
  2485  0D4C  085A               	movf	??_getTemp_AD,w
  2486  0D4D  00F4               	movwf	getAD@adcon1
  2487  0D4E  085C               	movf	getTemp_AD@channel,w
  2488  0D4F  158A  24E3  158A   	fcall	_getAD
  2489  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0D54  00DB               	movwf	??_getTemp_AD+1
  2492  0D55  085B               	movf	??_getTemp_AD+1,w
  2493  0D56  00C4               	movwf	_Temp+9
  2494                           
  2495                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2496  0D57  0844               	movf	_Temp+9,w
  2497  0D58  1903               	btfsc	3,2
  2498  0D59  0008               	return
  2499                           
  2500                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2501  0D5A  0844               	movf	_Temp+9,w
  2502  0D5B  0242               	subwf	_Temp+7,w
  2503  0D5C  1803               	skipnc
  2504  0D5D  2D63               	goto	l4950
  2505                           
  2506                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2507  0D5E  0844               	movf	_Temp+9,w
  2508  0D5F  00DA               	movwf	??_getTemp_AD
  2509  0D60  085A               	movf	??_getTemp_AD,w
  2510  0D61  00C2               	movwf	_Temp+7
  2511                           
  2512                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2513  0D62  0008               	return
  2514  0D63                     l4950:	
  2515  0D63  0844               	movf	_Temp+9,w
  2516  0D64  0243               	subwf	_Temp+8,w
  2517  0D65  1803               	skipnc
  2518  0D66  0008               	return
  2519                           
  2520                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2521  0D67  0844               	movf	_Temp+9,w
  2522  0D68  00DA               	movwf	??_getTemp_AD
  2523  0D69  085A               	movf	??_getTemp_AD,w
  2524  0D6A  00C3               	movwf	_Temp+8
  2525  0D6B  0008               	return
  2526  0D6C                     __end_of_getTemp_AD:	
  2527                           
  2528                           	psect	text4
  2529  0409                     __ptext4:	
  2530 ;; *************** function _getPIR_AD *****************
  2531 ;; Defined at:
  2532 ;;		line 222 in file "../src/PIR_B1.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  channel1        1    wreg     unsigned char 
  2535 ;;  channel2        1    8[BANK0 ] unsigned char 
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;  channel1        1   13[BANK0 ] unsigned char 
  2538 ;;  i               1   14[BANK0 ] unsigned char 
  2539 ;;  j               1   12[BANK0 ] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;		None               void
  2542 ;; Registers used:
  2543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2549 ;;      Params:         0       1       0       0
  2550 ;;      Locals:         0       3       0       0
  2551 ;;      Temps:          0       3       0       0
  2552 ;;      Totals:         0       7       0       0
  2553 ;;Total ram usage:        7 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    4
  2556 ;; This function calls:
  2557 ;;		___awdiv
  2558 ;;		___lwdiv
  2559 ;;		_getAD
  2560 ;; This function is called by:
  2561 ;;		_main
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           
  2566                           ;psect for function _getPIR_AD
  2567  0409                     _getPIR_AD:	
  2568                           
  2569                           ;incstack = 0
  2570                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2571                           ;getPIR_AD@channel1 stored from wreg
  2572  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2573  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2574  040B  00E7               	movwf	getPIR_AD@channel1
  2575                           
  2576                           ;PIR_B1.c: 223: char i = 0, j = 0;
  2577  040C  01E8               	clrf	getPIR_AD@i
  2578  040D  01E6               	clrf	getPIR_AD@j
  2579                           
  2580                           ;PIR_B1.c: 225: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2581  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2582  040F  1303               	bcf	3,6	;RP1=0, select bank1
  2583  0410  1CA0               	btfss	__PIR^(0+128),1
  2584  0411  0008               	return
  2585  0412  1920               	btfsc	__PIR^(0+128),2
  2586  0413  0008               	return
  2587                           
  2588                           ;PIR_B1.c: 226: _PIR.GO = 1;
  2589  0414  1520               	bsf	__PIR^(0+128),2
  2590                           
  2591                           ;PIR_B1.c: 227: _PIR.ADRES = getAD(channel1, 0x70);
  2592  0415  3070               	movlw	112
  2593  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2594  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2595  0418  00E3               	movwf	??_getPIR_AD
  2596  0419  0863               	movf	??_getPIR_AD,w
  2597  041A  00F4               	movwf	getAD@adcon1
  2598  041B  0867               	movf	getPIR_AD@channel1,w
  2599  041C  158A  24E3  118A   	fcall	_getAD
  2600  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2601  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2602  0421  00E4               	movwf	??_getPIR_AD+1
  2603  0422  0864               	movf	??_getPIR_AD+1,w
  2604  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2605  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2606  0425  00A2               	movwf	(__PIR^(0+128)+2)
  2607                           
  2608                           ;PIR_B1.c: 228: _PIR.VRAD = _PIR.ADRES / 25;
  2609  0426  3019               	movlw	25
  2610  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2612  0429  00DA               	movwf	___awdiv@divisor
  2613  042A  3000               	movlw	0
  2614  042B  00DB               	movwf	___awdiv@divisor+1
  2615  042C  1683               	bsf	3,5	;RP0=1, select bank1
  2616  042D  1303               	bcf	3,6	;RP1=0, select bank1
  2617  042E  0822               	movf	(__PIR^(0+128)+2),w
  2618  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0431  00E3               	movwf	??_getPIR_AD
  2621  0432  01E4               	clrf	??_getPIR_AD+1
  2622  0433  0863               	movf	??_getPIR_AD,w
  2623  0434  00DC               	movwf	___awdiv@dividend
  2624  0435  0864               	movf	??_getPIR_AD+1,w
  2625  0436  00DD               	movwf	___awdiv@dividend+1
  2626  0437  158A  26CC  118A   	fcall	___awdiv
  2627  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2628  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2629  043C  085A               	movf	?___awdiv,w
  2630  043D  00E5               	movwf	??_getPIR_AD+2
  2631  043E  0865               	movf	??_getPIR_AD+2,w
  2632  043F  1683               	bsf	3,5	;RP0=1, select bank1
  2633  0440  1303               	bcf	3,6	;RP1=0, select bank1
  2634  0441  00A3               	movwf	(__PIR^(0+128)+3)
  2635                           
  2636                           ;PIR_B1.c: 229: _PIR.VRAD1 = _PIR.ADRES;
  2637  0442  0822               	movf	(__PIR^(0+128)+2),w
  2638  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0444  1303               	bcf	3,6	;RP1=0, select bank0
  2640  0445  00E3               	movwf	??_getPIR_AD
  2641  0446  0863               	movf	??_getPIR_AD,w
  2642  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2643  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2644  0449  00A4               	movwf	(__PIR^(0+128)+4)
  2645                           
  2646                           ;PIR_B1.c: 230: _PIR.ADRES = getAD(channel2, 0x70);
  2647  044A  3070               	movlw	112
  2648  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2649  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2650  044D  00E3               	movwf	??_getPIR_AD
  2651  044E  0863               	movf	??_getPIR_AD,w
  2652  044F  00F4               	movwf	getAD@adcon1
  2653  0450  0862               	movf	getPIR_AD@channel2,w
  2654  0451  158A  24E3  118A   	fcall	_getAD
  2655  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0456  00E4               	movwf	??_getPIR_AD+1
  2658  0457  0864               	movf	??_getPIR_AD+1,w
  2659  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2660  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2661  045A  00A2               	movwf	(__PIR^(0+128)+2)
  2662                           
  2663                           ;PIR_B1.c: 231: _PIR.SignalAD = _PIR.ADRES;
  2664  045B  0822               	movf	(__PIR^(0+128)+2),w
  2665  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2666  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2667  045E  00E3               	movwf	??_getPIR_AD
  2668  045F  0863               	movf	??_getPIR_AD,w
  2669  0460  1683               	bsf	3,5	;RP0=1, select bank1
  2670  0461  1303               	bcf	3,6	;RP1=0, select bank1
  2671  0462  00A1               	movwf	(__PIR^(0+128)+1)
  2672                           
  2673                           ;PIR_B1.c: 233: if (_PIR.VRAD < 1) {
  2674  0463  08A3               	movf	(__PIR^(0+128)+3),f
  2675  0464  1D03               	skipz
  2676  0465  2C68               	goto	l4972
  2677                           
  2678                           ;PIR_B1.c: 234: _PIR.CloseTimeValue = 5;
  2679  0466  3005               	movlw	5
  2680  0467  2C6D               	goto	L1
  2681  0468                     l4972:	
  2682                           ;PIR_B1.c: 235: } else if (_PIR.VRAD < 3) {
  2683                           
  2684  0468  3003               	movlw	3
  2685  0469  0223               	subwf	(__PIR^(0+128)+3),w
  2686  046A  1803               	skipnc
  2687  046B  2C70               	goto	l4976
  2688                           
  2689                           ;PIR_B1.c: 236: _PIR.CloseTimeValue = 60;
  2690  046C  303C               	movlw	60
  2691  046D                     L1:	
  2692  046D  00C7               	movwf	(__PIR^(0+128)+39)
  2693  046E  3000               	movlw	0
  2694  046F  2C8B               	goto	L5
  2695  0470                     l4976:	
  2696                           ;PIR_B1.c: 237: } else if (_PIR.VRAD < 5) {
  2697                           
  2698  0470  3005               	movlw	5
  2699  0471  0223               	subwf	(__PIR^(0+128)+3),w
  2700  0472  1803               	skipnc
  2701  0473  2C78               	goto	l4980
  2702                           
  2703                           ;PIR_B1.c: 238: _PIR.CloseTimeValue = 300;
  2704  0474  302C               	movlw	44
  2705  0475  00C7               	movwf	(__PIR^(0+128)+39)
  2706  0476  3001               	movlw	1
  2707  0477  2C8B               	goto	L5
  2708  0478                     l4980:	
  2709                           ;PIR_B1.c: 239: } else if (_PIR.VRAD < 7) {
  2710                           
  2711  0478  3007               	movlw	7
  2712  0479  0223               	subwf	(__PIR^(0+128)+3),w
  2713  047A  1803               	skipnc
  2714  047B  2C80               	goto	l4984
  2715                           
  2716                           ;PIR_B1.c: 240: _PIR.CloseTimeValue = 600;
  2717  047C  3058               	movlw	88
  2718  047D  00C7               	movwf	(__PIR^(0+128)+39)
  2719  047E  3002               	movlw	2
  2720  047F  2C8B               	goto	L5
  2721  0480                     l4984:	
  2722                           ;PIR_B1.c: 241: } else if (_PIR.VRAD < 9) {
  2723                           
  2724  0480  3009               	movlw	9
  2725  0481  0223               	subwf	(__PIR^(0+128)+3),w
  2726  0482  1803               	skipnc
  2727  0483  2C88               	goto	l4988
  2728                           
  2729                           ;PIR_B1.c: 242: _PIR.CloseTimeValue = 900;
  2730  0484  3084               	movlw	132
  2731  0485  00C7               	movwf	(__PIR^(0+128)+39)
  2732  0486  3003               	movlw	3
  2733  0487  2C8B               	goto	L5
  2734  0488                     l4988:	
  2735                           ;PIR_B1.c: 243: } else {
  2736                           
  2737                           
  2738                           ;PIR_B1.c: 244: _PIR.CloseTimeValue = 1200;
  2739  0488  30B0               	movlw	176
  2740  0489  00C7               	movwf	(__PIR^(0+128)+39)
  2741  048A  3004               	movlw	4
  2742  048B                     L5:	
  2743  048B  00C8               	movwf	(__PIR^(0+128)+40)
  2744                           
  2745                           ;PIR_B1.c: 245: }
  2746                           ;PIR_B1.c: 254: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2747  048C  0821               	movf	(__PIR^(0+128)+1),w
  2748  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2749  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2750  048F  00E3               	movwf	??_getPIR_AD
  2751  0490  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0491  1303               	bcf	3,6	;RP1=0, select bank1
  2753  0492  0827               	movf	(__PIR^(0+128)+7),w
  2754  0493  3EA8               	addlw	(__PIR+8)& (0+255)
  2755  0494  0084               	movwf	4
  2756  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0497  0863               	movf	??_getPIR_AD,w
  2759  0498  1383               	bcf	3,7	;select IRP bank1
  2760  0499  0080               	movwf	0
  2761                           
  2762                           ;PIR_B1.c: 255: for (i = 0; i < 10; i++) {
  2763  049A  01E8               	clrf	getPIR_AD@i
  2764  049B  300A               	movlw	10
  2765  049C  0268               	subwf	getPIR_AD@i,w
  2766  049D  1803               	btfsc	3,0
  2767  049E  2CBB               	goto	l5004
  2768  049F                     l4998:	
  2769                           
  2770                           ;PIR_B1.c: 256: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2771  049F  0868               	movf	getPIR_AD@i,w
  2772  04A0  3EA8               	addlw	(__PIR+8)& (0+255)
  2773  04A1  0084               	movwf	4
  2774  04A2  0800               	movf	0,w
  2775  04A3  00E3               	movwf	??_getPIR_AD
  2776  04A4  01E4               	clrf	??_getPIR_AD+1
  2777  04A5  0863               	movf	??_getPIR_AD,w
  2778  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2779  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  2780  04A8  07B2               	addwf	(__PIR^(0+128)+18),f
  2781  04A9  1803               	skipnc
  2782  04AA  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2783  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2784  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2785  04AD  0864               	movf	??_getPIR_AD+1,w
  2786  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  2787  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  2788  04B0  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2789  04B1  3001               	movlw	1
  2790  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  2791  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  2792  04B4  00E3               	movwf	??_getPIR_AD
  2793  04B5  0863               	movf	??_getPIR_AD,w
  2794  04B6  07E8               	addwf	getPIR_AD@i,f
  2795  04B7  300A               	movlw	10
  2796  04B8  0268               	subwf	getPIR_AD@i,w
  2797  04B9  1C03               	skipc
  2798  04BA  2C9F               	goto	l4998
  2799  04BB                     l5004:	
  2800                           
  2801                           ;PIR_B1.c: 257: }
  2802                           ;PIR_B1.c: 258: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2803  04BB  300A               	movlw	10
  2804  04BC  00DA               	movwf	___lwdiv@divisor
  2805  04BD  3000               	movlw	0
  2806  04BE  00DB               	movwf	___lwdiv@divisor+1
  2807  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2808  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2809  04C1  0833               	movf	((__PIR+1)^(0+128)+18),w
  2810  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2811  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2812  04C4  01DD               	clrf	___lwdiv@dividend+1
  2813  04C5  07DD               	addwf	___lwdiv@dividend+1,f
  2814  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2815  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2816  04C8  0832               	movf	(__PIR^(0+128)+18),w
  2817  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2818  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2819  04CB  01DC               	clrf	___lwdiv@dividend
  2820  04CC  07DC               	addwf	___lwdiv@dividend,f
  2821  04CD  158A  2638  118A   	fcall	___lwdiv
  2822  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2823  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2824  04D2  085A               	movf	?___lwdiv,w
  2825  04D3  00E3               	movwf	??_getPIR_AD
  2826  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  2827  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  2828  04D6  0834               	movf	(__PIR^(0+128)+20),w
  2829  04D7  3EB5               	addlw	(__PIR+21)& (0+255)
  2830  04D8  0084               	movwf	4
  2831  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2832  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2833  04DB  0863               	movf	??_getPIR_AD,w
  2834  04DC  1383               	bcf	3,7	;select IRP bank1
  2835  04DD  0080               	movwf	0
  2836                           
  2837                           ;PIR_B1.c: 259: _PIR.TenAverageValue = 0;
  2838  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2839  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2840  04E0  01B2               	clrf	(__PIR^(0+128)+18)
  2841  04E1  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2842                           
  2843                           ;PIR_B1.c: 261: for (i = 0; i <= 9; i++) {
  2844  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2845  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2846  04E4  01E8               	clrf	getPIR_AD@i
  2847  04E5  300A               	movlw	10
  2848  04E6  0268               	subwf	getPIR_AD@i,w
  2849  04E7  1803               	btfsc	3,0
  2850  04E8  2D05               	goto	l5020
  2851  04E9                     l5014:	
  2852                           
  2853                           ;PIR_B1.c: 262: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2854  04E9  0868               	movf	getPIR_AD@i,w
  2855  04EA  3EB5               	addlw	(__PIR+21)& (0+255)
  2856  04EB  0084               	movwf	4
  2857  04EC  0800               	movf	0,w
  2858  04ED  00E3               	movwf	??_getPIR_AD
  2859  04EE  01E4               	clrf	??_getPIR_AD+1
  2860  04EF  0863               	movf	??_getPIR_AD,w
  2861  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  2862  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  2863  04F2  07BF               	addwf	(__PIR^(0+128)+31),f
  2864  04F3  1803               	skipnc
  2865  04F4  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2866  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2867  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2868  04F7  0864               	movf	??_getPIR_AD+1,w
  2869  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2870  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2871  04FA  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2872  04FB  3001               	movlw	1
  2873  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2874  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2875  04FE  00E3               	movwf	??_getPIR_AD
  2876  04FF  0863               	movf	??_getPIR_AD,w
  2877  0500  07E8               	addwf	getPIR_AD@i,f
  2878  0501  300A               	movlw	10
  2879  0502  0268               	subwf	getPIR_AD@i,w
  2880  0503  1C03               	skipc
  2881  0504  2CE9               	goto	l5014
  2882  0505                     l5020:	
  2883                           
  2884                           ;PIR_B1.c: 263: }
  2885                           ;PIR_B1.c: 264: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2886  0505  300A               	movlw	10
  2887  0506  00DA               	movwf	___lwdiv@divisor
  2888  0507  3000               	movlw	0
  2889  0508  00DB               	movwf	___lwdiv@divisor+1
  2890  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2891  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2892  050B  0840               	movf	((__PIR+1)^(0+128)+31),w
  2893  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2894  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2895  050E  01DD               	clrf	___lwdiv@dividend+1
  2896  050F  07DD               	addwf	___lwdiv@dividend+1,f
  2897  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2898  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2899  0512  083F               	movf	(__PIR^(0+128)+31),w
  2900  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2901  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2902  0515  01DC               	clrf	___lwdiv@dividend
  2903  0516  07DC               	addwf	___lwdiv@dividend,f
  2904  0517  158A  2638  118A   	fcall	___lwdiv
  2905  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2906  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2907  051C  085A               	movf	?___lwdiv,w
  2908  051D  00E3               	movwf	??_getPIR_AD
  2909  051E  0863               	movf	??_getPIR_AD,w
  2910  051F  1683               	bsf	3,5	;RP0=1, select bank1
  2911  0520  1303               	bcf	3,6	;RP1=0, select bank1
  2912  0521  00A6               	movwf	(__PIR^(0+128)+6)
  2913                           
  2914                           ;PIR_B1.c: 265: _PIR.HundredAverageValue = 0;
  2915  0522  01BF               	clrf	(__PIR^(0+128)+31)
  2916  0523  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2917                           
  2918                           ;PIR_B1.c: 267: if (_PIR.TenCount < 10) {
  2919  0524  300A               	movlw	10
  2920  0525  0227               	subwf	(__PIR^(0+128)+7),w
  2921  0526  1803               	skipnc
  2922  0527  2D31               	goto	l5028
  2923                           
  2924                           ;PIR_B1.c: 268: _PIR.TenCount++;
  2925  0528  3001               	movlw	1
  2926  0529  1283               	bcf	3,5	;RP0=0, select bank0
  2927  052A  1303               	bcf	3,6	;RP1=0, select bank0
  2928  052B  00E3               	movwf	??_getPIR_AD
  2929  052C  0863               	movf	??_getPIR_AD,w
  2930  052D  1683               	bsf	3,5	;RP0=1, select bank1
  2931  052E  1303               	bcf	3,6	;RP1=0, select bank1
  2932  052F  07A7               	addwf	(__PIR^(0+128)+7),f
  2933                           
  2934                           ;PIR_B1.c: 269: } else {
  2935  0530  0008               	return
  2936  0531                     l5028:	
  2937                           
  2938                           ;PIR_B1.c: 270: _PIR.TenCount = 0;
  2939  0531  01A7               	clrf	(__PIR^(0+128)+7)
  2940                           
  2941                           ;PIR_B1.c: 271: if (_PIR.HundreCount < 10)
  2942  0532  300A               	movlw	10
  2943  0533  0234               	subwf	(__PIR^(0+128)+20),w
  2944  0534  1803               	skipnc
  2945  0535  2D3F               	goto	l5034
  2946                           
  2947                           ;PIR_B1.c: 272: _PIR.HundreCount++;
  2948  0536  3001               	movlw	1
  2949  0537  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0538  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0539  00E3               	movwf	??_getPIR_AD
  2952  053A  0863               	movf	??_getPIR_AD,w
  2953  053B  1683               	bsf	3,5	;RP0=1, select bank1
  2954  053C  1303               	bcf	3,6	;RP1=0, select bank1
  2955  053D  07B4               	addwf	(__PIR^(0+128)+20),f
  2956  053E  0008               	return
  2957  053F                     l5034:	
  2958                           
  2959                           ;PIR_B1.c: 273: else
  2960                           ;PIR_B1.c: 274: _PIR.HundreCount = 0;
  2961  053F  01B4               	clrf	(__PIR^(0+128)+20)
  2962  0540  0008               	return
  2963  0541                     __end_of_getPIR_AD:	
  2964                           
  2965                           	psect	text5
  2966  06D8                     __ptext5:	
  2967 ;; *************** function _getLoad_AD *****************
  2968 ;; Defined at:
  2969 ;;		line 15 in file "../src/OverLoad_B1.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  channel         1    wreg     unsigned char 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  channel         1    2[BANK0 ] unsigned char 
  2974 ;;  i               1    5[BANK0 ] unsigned char 
  2975 ;;  j               1    4[BANK0 ] unsigned char 
  2976 ;;  k               1    3[BANK0 ] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;		None               void
  2979 ;; Registers used:
  2980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2986 ;;      Params:         0       0       0       0
  2987 ;;      Locals:         0       4       0       0
  2988 ;;      Temps:          0       2       0       0
  2989 ;;      Totals:         0       6       0       0
  2990 ;;Total ram usage:        6 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    4
  2993 ;; This function calls:
  2994 ;;		_getAD
  2995 ;; This function is called by:
  2996 ;;		_main
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _getLoad_AD
  3002  06D8                     _getLoad_AD:	
  3003                           
  3004                           ;incstack = 0
  3005                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3006                           ;getLoad_AD@channel stored from wreg
  3007  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3008  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  3009  06DA  00DC               	movwf	getLoad_AD@channel
  3010                           
  3011                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3012  06DB  01DF               	clrf	getLoad_AD@i
  3013  06DC  01DE               	clrf	getLoad_AD@j
  3014  06DD  01DD               	clrf	getLoad_AD@k
  3015                           
  3016                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3017  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  3018  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  3019  06E0  1E4E               	btfss	_Load^(0+128),4
  3020  06E1  0008               	return
  3021                           
  3022                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3023  06E2  3073               	movlw	115
  3024  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  3025  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  3026  06E5  00DA               	movwf	??_getLoad_AD
  3027  06E6  085A               	movf	??_getLoad_AD,w
  3028  06E7  00F4               	movwf	getAD@adcon1
  3029  06E8  085C               	movf	getLoad_AD@channel,w
  3030  06E9  158A  24E3  118A   	fcall	_getAD
  3031  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  3032  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  3033  06EE  00DB               	movwf	??_getLoad_AD+1
  3034  06EF  085B               	movf	??_getLoad_AD+1,w
  3035  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  3036  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  3037  06F2  00E3               	movwf	(_Load^(0+128)+21)
  3038                           
  3039                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3040  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  3041  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  3042  06F5  01DF               	clrf	getLoad_AD@i
  3043  06F6  3004               	movlw	4
  3044  06F7  025F               	subwf	getLoad_AD@i,w
  3045  06F8  1803               	btfsc	3,0
  3046  06F9  2F1F               	goto	l4920
  3047  06FA                     l4908:	
  3048                           
  3049                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3050  06FA  085F               	movf	getLoad_AD@i,w
  3051  06FB  3ED8               	addlw	(_Load+10)& (0+255)
  3052  06FC  0084               	movwf	4
  3053  06FD  1683               	bsf	3,5	;RP0=1, select bank1
  3054  06FE  1303               	bcf	3,6	;RP1=0, select bank1
  3055  06FF  0863               	movf	(_Load^(0+128)+21),w
  3056  0700  1383               	bcf	3,7	;select IRP bank1
  3057  0701  0200               	subwf	0,w
  3058  0702  1803               	skipnc
  3059  0703  2F16               	goto	l4916
  3060  0704  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0705  1303               	bcf	3,6	;RP1=0, select bank0
  3062  0706  08DE               	movf	getLoad_AD@j,f
  3063  0707  1D03               	skipz
  3064  0708  2F16               	goto	l4916
  3065                           
  3066                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3067  0709  1683               	bsf	3,5	;RP0=1, select bank1
  3068  070A  1303               	bcf	3,6	;RP1=0, select bank1
  3069  070B  0863               	movf	(_Load^(0+128)+21),w
  3070  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3071  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3072  070E  00DA               	movwf	??_getLoad_AD
  3073  070F  085F               	movf	getLoad_AD@i,w
  3074  0710  3ED8               	addlw	(_Load+10)& (0+255)
  3075  0711  0084               	movwf	4
  3076  0712  085A               	movf	??_getLoad_AD,w
  3077  0713  0080               	movwf	0
  3078                           
  3079                           ;OverLoad_B1.c: 24: j = 1;
  3080  0714  01DE               	clrf	getLoad_AD@j
  3081  0715  0ADE               	incf	getLoad_AD@j,f
  3082  0716                     l4916:	
  3083  0716  3001               	movlw	1
  3084  0717  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0718  00DA               	movwf	??_getLoad_AD
  3086  0719  085A               	movf	??_getLoad_AD,w
  3087  071A  07DF               	addwf	getLoad_AD@i,f
  3088  071B  3004               	movlw	4
  3089  071C  025F               	subwf	getLoad_AD@i,w
  3090  071D  1C03               	skipc
  3091  071E  2EFA               	goto	l4908
  3092  071F                     l4920:	
  3093                           
  3094                           ;OverLoad_B1.c: 25: }
  3095                           ;OverLoad_B1.c: 26: }
  3096                           ;OverLoad_B1.c: 27: if (j == 0) {
  3097  071F  08DE               	movf	getLoad_AD@j,f
  3098  0720  1D03               	skipz
  3099  0721  0008               	return
  3100                           
  3101                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3102  0722  01DF               	clrf	getLoad_AD@i
  3103  0723                     L6:	
  3104  0723  3004               	movlw	4
  3105  0724  025F               	subwf	getLoad_AD@i,w
  3106  0725  1803               	btfsc	3,0
  3107  0726  0008               	return
  3108                           
  3109                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3110  0727  085F               	movf	getLoad_AD@i,w
  3111  0728  3EDD               	addlw	(_Load+15)& (0+255)
  3112  0729  0084               	movwf	4
  3113  072A  1383               	bcf	3,7	;select IRP bank1
  3114  072B  0800               	movf	0,w
  3115  072C  1683               	bsf	3,5	;RP0=1, select bank1
  3116  072D  1303               	bcf	3,6	;RP1=0, select bank1
  3117  072E  0263               	subwf	(_Load^(0+128)+21),w
  3118  072F  1803               	skipnc
  3119  0730  2F43               	goto	l4936
  3120  0731  1283               	bcf	3,5	;RP0=0, select bank0
  3121  0732  1303               	bcf	3,6	;RP1=0, select bank0
  3122  0733  08DD               	movf	getLoad_AD@k,f
  3123  0734  1D03               	skipz
  3124  0735  2F43               	goto	l4936
  3125                           
  3126                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3127  0736  1683               	bsf	3,5	;RP0=1, select bank1
  3128  0737  1303               	bcf	3,6	;RP1=0, select bank1
  3129  0738  0863               	movf	(_Load^(0+128)+21),w
  3130  0739  1283               	bcf	3,5	;RP0=0, select bank0
  3131  073A  1303               	bcf	3,6	;RP1=0, select bank0
  3132  073B  00DA               	movwf	??_getLoad_AD
  3133  073C  085F               	movf	getLoad_AD@i,w
  3134  073D  3EDD               	addlw	(_Load+15)& (0+255)
  3135  073E  0084               	movwf	4
  3136  073F  085A               	movf	??_getLoad_AD,w
  3137  0740  0080               	movwf	0
  3138                           
  3139                           ;OverLoad_B1.c: 31: k = 1;
  3140  0741  01DD               	clrf	getLoad_AD@k
  3141  0742  0ADD               	incf	getLoad_AD@k,f
  3142  0743                     l4936:	
  3143  0743  3001               	movlw	1
  3144  0744  1283               	bcf	3,5	;RP0=0, select bank0
  3145  0745  00DA               	movwf	??_getLoad_AD
  3146  0746  085A               	movf	??_getLoad_AD,w
  3147  0747  07DF               	addwf	getLoad_AD@i,f
  3148  0748  2F23               	goto	L6
  3149  0749                     __end_of_getLoad_AD:	
  3150                           
  3151                           	psect	text6
  3152  0D6C                     __ptext6:	
  3153 ;; *************** function _getCDS_AD *****************
  3154 ;; Defined at:
  3155 ;;		line 48 in file "../src/CDS_B1.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  channel1        1    wreg     unsigned char 
  3158 ;;  channel2        1    0[BANK0 ] unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  channel1        1    5[BANK0 ] unsigned char 
  3161 ;;  j               1    4[BANK0 ] unsigned char 
  3162 ;;  i               1    3[BANK0 ] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;		None               void
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0, pclath, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3172 ;;      Params:         0       1       0       0
  3173 ;;      Locals:         0       3       0       0
  3174 ;;      Temps:          0       2       0       0
  3175 ;;      Totals:         0       6       0       0
  3176 ;;Total ram usage:        6 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    4
  3179 ;; This function calls:
  3180 ;;		_getAD
  3181 ;; This function is called by:
  3182 ;;		_main
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           
  3187                           ;psect for function _getCDS_AD
  3188  0D6C                     _getCDS_AD:	
  3189                           
  3190                           ;incstack = 0
  3191                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3192                           ;getCDS_AD@channel1 stored from wreg
  3193  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  3194  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  3195  0D6E  00DF               	movwf	getCDS_AD@channel1
  3196                           
  3197                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3198  0D6F  01DD               	clrf	getCDS_AD@i
  3199  0D70  01DE               	clrf	getCDS_AD@j
  3200                           
  3201                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3202  0D71  1DAB               	btfss	__CDS,3
  3203  0D72  0008               	return
  3204                           
  3205                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3206  0D73  14AB               	bsf	__CDS,1
  3207                           
  3208                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3209  0D74  3070               	movlw	112
  3210  0D75  00DB               	movwf	??_getCDS_AD
  3211  0D76  085B               	movf	??_getCDS_AD,w
  3212  0D77  00F4               	movwf	getAD@adcon1
  3213  0D78  085F               	movf	getCDS_AD@channel1,w
  3214  0D79  158A  24E3  158A   	fcall	_getAD
  3215  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0D7E  00DC               	movwf	??_getCDS_AD+1
  3218  0D7F  085C               	movf	??_getCDS_AD+1,w
  3219  0D80  00AF               	movwf	__CDS+4
  3220                           
  3221                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3222  0D81  082F               	movf	__CDS+4,w
  3223  0D82  00DB               	movwf	??_getCDS_AD
  3224  0D83  085B               	movf	??_getCDS_AD,w
  3225  0D84  00AD               	movwf	__CDS+2
  3226                           
  3227                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3228  0D85  3070               	movlw	112
  3229  0D86  00DB               	movwf	??_getCDS_AD
  3230  0D87  085B               	movf	??_getCDS_AD,w
  3231  0D88  00F4               	movwf	getAD@adcon1
  3232  0D89  085A               	movf	getCDS_AD@channel2,w
  3233  0D8A  158A  24E3         	fcall	_getAD
  3234  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0D8E  00DC               	movwf	??_getCDS_AD+1
  3237  0D8F  085C               	movf	??_getCDS_AD+1,w
  3238  0D90  00AF               	movwf	__CDS+4
  3239                           
  3240                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3241  0D91  082F               	movf	__CDS+4,w
  3242  0D92  00DB               	movwf	??_getCDS_AD
  3243  0D93  085B               	movf	??_getCDS_AD,w
  3244  0D94  00AE               	movwf	__CDS+3
  3245  0D95  0008               	return
  3246  0D96                     __end_of_getCDS_AD:	
  3247                           
  3248                           	psect	text7
  3249  0CE3                     __ptext7:	
  3250 ;; *************** function _getAD *****************
  3251 ;; Defined at:
  3252 ;;		line 416 in file "../src/MCU_B1.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  adcon0          1    wreg     unsigned char 
  3255 ;;  adcon1          1    4[COMMON] unsigned char 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  adcon0          1    5[COMMON] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      unsigned char 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3267 ;;      Params:         1       0       0       0
  3268 ;;      Locals:         1       0       0       0
  3269 ;;      Temps:          0       0       0       0
  3270 ;;      Totals:         2       0       0       0
  3271 ;;Total ram usage:        2 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    3
  3274 ;; This function calls:
  3275 ;;		_Timeout_Counter
  3276 ;;		_set_TimeoutCleared
  3277 ;; This function is called by:
  3278 ;;		_getCDS_AD
  3279 ;;		_getLoad_AD
  3280 ;;		_getTemp_AD
  3281 ;;		_getPIR_AD
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _getAD
  3287  0CE3                     _getAD:	
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3291                           ;getAD@adcon0 stored from wreg
  3292  0CE3  00F5               	movwf	getAD@adcon0
  3293                           
  3294                           ;MCU_B1.c: 417: ADCON0 = adcon0;
  3295  0CE4  0875               	movf	getAD@adcon0,w
  3296  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0CE7  009F               	movwf	31	;volatile
  3299                           
  3300                           ;MCU_B1.c: 418: ADCON1 = adcon1;
  3301  0CE8  0874               	movf	getAD@adcon1,w
  3302  0CE9  1683               	bsf	3,5	;RP0=1, select bank1
  3303  0CEA  1303               	bcf	3,6	;RP1=0, select bank1
  3304  0CEB  009F               	movwf	31	;volatile
  3305                           
  3306                           ;MCU_B1.c: 419: GO_nDONE = 1;
  3307  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0CEE  149F               	bsf	31,1	;volatile
  3310                           
  3311                           ;MCU_B1.c: 420: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3312  0CEF  2CF3               	goto	l4630
  3313  0CF0                     l4628:	
  3314                           
  3315                           ;MCU_B1.c: 421: Timeout_Counter();
  3316  0CF0  158A  2410  158A   	fcall	_Timeout_Counter
  3317  0CF3                     l4630:	
  3318  0CF3  1283               	bcf	3,5	;RP0=0, select bank0
  3319  0CF4  1303               	bcf	3,6	;RP1=0, select bank0
  3320  0CF5  1C9F               	btfss	31,1	;volatile
  3321  0CF6  2CF9               	goto	l4634
  3322  0CF7  1D23               	btfss	_myMain+3,2
  3323  0CF8  2CF0               	goto	l4628
  3324  0CF9                     l4634:	
  3325                           
  3326                           ;MCU_B1.c: 422: };
  3327                           ;MCU_B1.c: 423: set_TimeoutCleared();
  3328  0CF9  158A  2313         	fcall	_set_TimeoutCleared
  3329                           
  3330                           ;MCU_B1.c: 424: return ADRES;
  3331  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  3332  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  3333  0CFD  081E               	movf	30,w	;volatile
  3334  0CFE  0008               	return
  3335  0CFF                     __end_of_getAD:	
  3336                           
  3337                           	psect	text8
  3338  0B13                     __ptext8:	
  3339 ;; *************** function _set_TimeoutCleared *****************
  3340 ;; Defined at:
  3341 ;;		line 282 in file "../src/Main_B1.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;		None
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;		None               void
  3348 ;; Registers used:
  3349 ;;		status,2
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3355 ;;      Params:         0       0       0       0
  3356 ;;      Locals:         0       0       0       0
  3357 ;;      Temps:          0       0       0       0
  3358 ;;      Totals:         0       0       0       0
  3359 ;;Total ram usage:        0 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    2
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_getAD
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _set_TimeoutCleared
  3371  0B13                     _set_TimeoutCleared:	
  3372                           
  3373                           ;Main_B1.c: 283: myMain.Timeout = 0;
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _set_TimeoutCleared: [status,2]
  3377  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  3379  0B15  1123               	bcf	_myMain+3,2
  3380                           
  3381                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  3382  0B16  01A4               	clrf	_myMain+4
  3383  0B17  01A5               	clrf	_myMain+5
  3384  0B18  0008               	return
  3385  0B19                     __end_of_set_TimeoutCleared:	
  3386                           
  3387                           	psect	text9
  3388  0C10                     __ptext9:	
  3389 ;; *************** function _Timeout_Counter *****************
  3390 ;; Defined at:
  3391 ;;		line 273 in file "../src/Main_B1.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, status,2
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3405 ;;      Params:         0       0       0       0
  3406 ;;      Locals:         0       0       0       0
  3407 ;;      Temps:          0       0       0       0
  3408 ;;      Totals:         0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    2
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_getAD
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _Timeout_Counter
  3421  0C10                     _Timeout_Counter:	
  3422                           
  3423                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3427  0C10  3001               	movlw	1
  3428  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  3429  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  3430  0C13  07A4               	addwf	_myMain+4,f
  3431  0C14  1803               	skipnc
  3432  0C15  0AA5               	incf	_myMain+5,f
  3433  0C16  3000               	movlw	0
  3434  0C17  07A5               	addwf	_myMain+5,f
  3435                           
  3436                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  3437  0C18  3061               	movlw	97
  3438  0C19  0625               	xorwf	_myMain+5,w
  3439  0C1A  1D03               	skipz
  3440  0C1B  2C1E               	goto	u5275
  3441  0C1C  30A8               	movlw	168
  3442  0C1D  0624               	xorwf	_myMain+4,w
  3443  0C1E                     u5275:	
  3444  0C1E  1D03               	skipz
  3445  0C1F  0008               	return
  3446                           
  3447                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  3448  0C20  01A4               	clrf	_myMain+4
  3449  0C21  01A5               	clrf	_myMain+5
  3450                           
  3451                           ;Main_B1.c: 277: myMain.Timeout = 1;
  3452  0C22  1523               	bsf	_myMain+3,2
  3453  0C23  0008               	return
  3454  0C24                     __end_of_Timeout_Counter:	
  3455                           
  3456                           	psect	text10
  3457  0BED                     __ptext10:	
  3458 ;; *************** function _WDT_Main *****************
  3459 ;; Defined at:
  3460 ;;		line 1087 in file "../src/MCU_B1.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;		None               void
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0, pclath, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3474 ;;      Params:         0       0       0       0
  3475 ;;      Locals:         0       0       0       0
  3476 ;;      Temps:          1       0       0       0
  3477 ;;      Totals:         1       0       0       0
  3478 ;;Total ram usage:        1 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    3
  3481 ;; This function calls:
  3482 ;;		_WDT_Clearing
  3483 ;; This function is called by:
  3484 ;;		_main
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           
  3489                           ;psect for function _WDT_Main
  3490  0BED                     _WDT_Main:	
  3491                           
  3492                           ;MCU_B1.c: 1088: if (WDT.Enable == 1) {
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3496  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  3498  0BEF  1C37               	btfss	_WDT,0
  3499  0BF0  0008               	return
  3500                           
  3501                           ;MCU_B1.c: 1089: if (WDT.Timer-- > 0) {
  3502  0BF1  3001               	movlw	1
  3503  0BF2  02B8               	subwf	_WDT+1,f
  3504  0BF3  0838               	movf	_WDT+1,w
  3505  0BF4  3AFF               	xorlw	255
  3506  0BF5  1903               	skipnz
  3507  0BF6  0008               	return
  3508                           
  3509                           ;MCU_B1.c: 1090: WDT.Timer = 100;
  3510  0BF7  3064               	movlw	100
  3511  0BF8  00F4               	movwf	??_WDT_Main
  3512  0BF9  0874               	movf	??_WDT_Main,w
  3513  0BFA  00B8               	movwf	_WDT+1
  3514                           
  3515                           ;MCU_B1.c: 1091: WDT_Clearing();
  3516  0BFB  118A  2002         	fcall	_WDT_Clearing
  3517  0BFD  0008               	return
  3518  0BFE                     __end_of_WDT_Main:	
  3519                           
  3520                           	psect	text11
  3521  0002                     __ptext11:	
  3522 ;; *************** function _WDT_Clearing *****************
  3523 ;; Defined at:
  3524 ;;		line 1097 in file "../src/MCU_B1.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;		None               void
  3531 ;; Registers used:
  3532 ;;		None
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3538 ;;      Params:         0       0       0       0
  3539 ;;      Locals:         0       0       0       0
  3540 ;;      Temps:          0       0       0       0
  3541 ;;      Totals:         0       0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    2
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_WDT_Main
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _WDT_Clearing
  3554  0002                     _WDT_Clearing:	
  3555                           
  3556                           ;incstack = 0
  3557                           ; Regs used in _WDT_Clearing: []
  3558  0002  0064               	clrwdt	;# 
  3559  0003  0008               	return
  3560  0004                     __end_of_WDT_Clearing:	
  3561                           
  3562                           	psect	text12
  3563  0AF7                     __ptext12:	
  3564 ;; *************** function _Temp_Main *****************
  3565 ;; Defined at:
  3566 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;		None
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;		None
  3571 ;; Return value:  Size  Location     Type
  3572 ;;		None               void
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0, pclath, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3580 ;;      Params:         0       0       0       0
  3581 ;;      Locals:         0       0       0       0
  3582 ;;      Temps:          0       0       0       0
  3583 ;;      Totals:         0       0       0       0
  3584 ;;Total ram usage:        0 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    4
  3587 ;; This function calls:
  3588 ;;		_setTemp_Main
  3589 ;; This function is called by:
  3590 ;;		_main
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           
  3595                           ;psect for function _Temp_Main
  3596  0AF7                     _Temp_Main:	
  3597                           
  3598                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3599                           
  3600                           ;incstack = 0
  3601                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3602  0AF7  118A  25DC         	fcall	_setTemp_Main
  3603  0AF9  0008               	return
  3604  0AFA                     __end_of_Temp_Main:	
  3605                           
  3606                           	psect	text13
  3607  05DC                     __ptext13:	
  3608 ;; *************** function _setTemp_Main *****************
  3609 ;; Defined at:
  3610 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  error           1    8[BANK0 ] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;		None               void
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, pclath, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3624 ;;      Params:         0       0       0       0
  3625 ;;      Locals:         0       1       0       0
  3626 ;;      Temps:          1       0       0       0
  3627 ;;      Totals:         1       1       0       0
  3628 ;;Total ram usage:        2 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    3
  3631 ;; This function calls:
  3632 ;;		___awdiv
  3633 ;;		_getMain_All_Error_Status
  3634 ;;		_getMain_All_LightsStatus
  3635 ;; This function is called by:
  3636 ;;		_Temp_Main
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _setTemp_Main
  3642  05DC                     _setTemp_Main:	
  3643                           
  3644                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3648  05DC  3000               	movlw	0
  3649  05DD  158A  25FA  118A   	fcall	_getMain_All_Error_Status
  3650  05E0  00F5               	movwf	??_setTemp_Main
  3651  05E1  0875               	movf	??_setTemp_Main,w
  3652  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3653  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3654  05E4  00E2               	movwf	setTemp_Main@error
  3655                           
  3656                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3657  05E5  1C3B               	btfss	_Temp,0
  3658  05E6  2E5E               	goto	l849
  3659                           
  3660                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3661  05E7  193B               	btfsc	_Temp,2
  3662  05E8  2DFA               	goto	l4722
  3663                           
  3664                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3665  05E9  3001               	movlw	1
  3666  05EA  07BC               	addwf	_Temp+1,f
  3667  05EB  1803               	skipnc
  3668  05EC  0ABD               	incf	_Temp+2,f
  3669  05ED  3000               	movlw	0
  3670  05EE  07BD               	addwf	_Temp+2,f
  3671                           
  3672                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  3673  05EF  3000               	movlw	0
  3674  05F0  023D               	subwf	_Temp+2,w
  3675  05F1  30FA               	movlw	250
  3676  05F2  1903               	skipnz
  3677  05F3  023C               	subwf	_Temp+1,w
  3678  05F4  1C03               	skipc
  3679  05F5  0008               	return
  3680                           
  3681                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3682  05F6  01BC               	clrf	_Temp+1
  3683  05F7  01BD               	clrf	_Temp+2
  3684                           
  3685                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3686  05F8  153B               	bsf	_Temp,2
  3687                           
  3688                           ;OverTemperature_B1.c: 70: }
  3689                           ;OverTemperature_B1.c: 71: } else {
  3690  05F9  0008               	return
  3691  05FA                     l4722:	
  3692                           
  3693                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3694  05FA  3001               	movlw	1
  3695  05FB  07BC               	addwf	_Temp+1,f
  3696  05FC  1803               	skipnc
  3697  05FD  0ABD               	incf	_Temp+2,f
  3698  05FE  3000               	movlw	0
  3699  05FF  07BD               	addwf	_Temp+2,f
  3700                           
  3701                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  3702  0600  3000               	movlw	0
  3703  0601  023D               	subwf	_Temp+2,w
  3704  0602  3002               	movlw	2
  3705  0603  1903               	skipnz
  3706  0604  023C               	subwf	_Temp+1,w
  3707  0605  1C03               	skipc
  3708  0606  0008               	return
  3709                           
  3710                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3711  0607  01BC               	clrf	_Temp+1
  3712  0608  01BD               	clrf	_Temp+2
  3713                           
  3714                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3715  0609  0842               	movf	_Temp+7,w
  3716  060A  1903               	btfsc	3,2
  3717  060B  2E5B               	goto	l854
  3718  060C  0843               	movf	_Temp+8,w
  3719  060D  1903               	btfsc	3,2
  3720  060E  2E5B               	goto	l854
  3721                           
  3722                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3723  060F  113B               	bcf	_Temp,2
  3724                           
  3725                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3726  0610  3002               	movlw	2
  3727  0611  00DA               	movwf	___awdiv@divisor
  3728  0612  3000               	movlw	0
  3729  0613  00DB               	movwf	___awdiv@divisor+1
  3730  0614  0842               	movf	_Temp+7,w
  3731  0615  0743               	addwf	_Temp+8,w
  3732  0616  00DC               	movwf	___awdiv@dividend
  3733  0617  01DD               	clrf	___awdiv@dividend+1
  3734  0618  0DDD               	rlf	___awdiv@dividend+1,f
  3735  0619  158A  26CC  118A   	fcall	___awdiv
  3736  061C  1283               	bcf	3,5	;RP0=0, select bank0
  3737  061D  1303               	bcf	3,6	;RP1=0, select bank0
  3738  061E  085A               	movf	?___awdiv,w
  3739  061F  00F5               	movwf	??_setTemp_Main
  3740  0620  0875               	movf	??_setTemp_Main,w
  3741  0621  00C1               	movwf	_Temp+6
  3742                           
  3743                           ;OverTemperature_B1.c: 81: if (getMain_All_LightsStatus() == 1) {
  3744  0622  158A  233F  118A   	fcall	_getMain_All_LightsStatus
  3745  0625  3A01               	xorlw	1
  3746  0626  1D03               	skipz
  3747  0627  2E30               	goto	l4738
  3748                           
  3749                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3750  0628  3085               	movlw	133
  3751  0629  00F5               	movwf	??_setTemp_Main
  3752  062A  0875               	movf	??_setTemp_Main,w
  3753  062B  1283               	bcf	3,5	;RP0=0, select bank0
  3754  062C  1303               	bcf	3,6	;RP1=0, select bank0
  3755  062D  00C5               	movwf	_Temp+10
  3756                           
  3757                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3758  062E  3070               	movlw	112
  3759  062F  2E37               	goto	L7
  3760  0630                     l4738:	
  3761                           ;OverTemperature_B1.c: 84: } else {
  3762                           
  3763                           
  3764                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3765  0630  304F               	movlw	79
  3766  0631  00F5               	movwf	??_setTemp_Main
  3767  0632  0875               	movf	??_setTemp_Main,w
  3768  0633  1283               	bcf	3,5	;RP0=0, select bank0
  3769  0634  1303               	bcf	3,6	;RP1=0, select bank0
  3770  0635  00C5               	movwf	_Temp+10
  3771                           
  3772                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3773  0636  3040               	movlw	64
  3774  0637                     L7:	
  3775  0637  00F5               	movwf	??_setTemp_Main
  3776  0638  0875               	movf	??_setTemp_Main,w
  3777  0639  00C6               	movwf	_Temp+11
  3778                           
  3779                           ;OverTemperature_B1.c: 87: }
  3780                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  3781  063A  1CBB               	btfss	_Temp,1
  3782  063B  2E4B               	goto	l4754
  3783                           
  3784                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  3785  063C  0845               	movf	_Temp+10,w
  3786  063D  0241               	subwf	_Temp+6,w
  3787  063E  1C03               	skipc
  3788  063F  2E5A               	goto	l4764
  3789                           
  3790                           ;OverTemperature_B1.c: 98: Temp.Count++;
  3791  0640  3001               	movlw	1
  3792  0641  00F5               	movwf	??_setTemp_Main
  3793  0642  0875               	movf	??_setTemp_Main,w
  3794  0643  07BE               	addwf	_Temp+3,f
  3795                           
  3796                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  3797  0644  3003               	movlw	3
  3798  0645  023E               	subwf	_Temp+3,w
  3799  0646  1C03               	skipc
  3800  0647  2E5B               	goto	l854
  3801                           
  3802                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  3803  0648  01BE               	clrf	_Temp+3
  3804                           
  3805                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  3806  0649  10BB               	bcf	_Temp,1
  3807                           
  3808                           ;OverTemperature_B1.c: 103: }
  3809                           ;OverTemperature_B1.c: 104: } else {
  3810                           
  3811                           ;OverTemperature_B1.c: 102: ;;
  3812  064A  2E5B               	goto	l854
  3813  064B                     l4754:	
  3814                           ;OverTemperature_B1.c: 106: }
  3815                           ;OverTemperature_B1.c: 107: } else {
  3816                           
  3817                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  3818                           
  3819                           
  3820                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  3821  064B  0841               	movf	_Temp+6,w
  3822  064C  0246               	subwf	_Temp+11,w
  3823  064D  1C03               	skipc
  3824  064E  2E5A               	goto	l4764
  3825                           
  3826                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3827  064F  3001               	movlw	1
  3828  0650  00F5               	movwf	??_setTemp_Main
  3829  0651  0875               	movf	??_setTemp_Main,w
  3830  0652  07BE               	addwf	_Temp+3,f
  3831                           
  3832                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3833  0653  3003               	movlw	3
  3834  0654  023E               	subwf	_Temp+3,w
  3835  0655  1C03               	skipc
  3836  0656  2E5B               	goto	l854
  3837                           
  3838                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3839  0657  01BE               	clrf	_Temp+3
  3840                           
  3841                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  3842  0658  14BB               	bsf	_Temp,1
  3843                           
  3844                           ;OverTemperature_B1.c: 113: }
  3845                           ;OverTemperature_B1.c: 114: } else {
  3846  0659  2E5B               	goto	l854
  3847  065A                     l4764:	
  3848                           
  3849                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3850  065A  01BE               	clrf	_Temp+3
  3851  065B                     l854:	
  3852                           ;OverTemperature_B1.c: 116: }
  3853                           ;OverTemperature_B1.c: 117: }
  3854                           ;OverTemperature_B1.c: 118: ;;
  3855                           ;OverTemperature_B1.c: 119: ;;
  3856                           
  3857                           
  3858                           ;OverTemperature_B1.c: 135: }
  3859                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  3860  065B  01C2               	clrf	_Temp+7
  3861                           
  3862                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  3863  065C  01C3               	clrf	_Temp+8
  3864                           
  3865                           ;OverTemperature_B1.c: 138: }
  3866                           ;OverTemperature_B1.c: 139: }
  3867                           ;OverTemperature_B1.c: 141: } else {
  3868  065D  0008               	return
  3869  065E                     l849:	
  3870                           
  3871                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  3872  065E  1C20               	btfss	_myMain,0
  3873  065F  0008               	return
  3874                           
  3875                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  3876  0660  143B               	bsf	_Temp,0
  3877  0661  0008               	return
  3878  0662                     __end_of_setTemp_Main:	
  3879                           
  3880                           	psect	text14
  3881  0AF4                     __ptext14:	
  3882 ;; *************** function _Temp_Initialization *****************
  3883 ;; Defined at:
  3884 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;		None               void
  3891 ;; Registers used:
  3892 ;;		status,2, status,0, pclath, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3898 ;;      Params:         0       0       0       0
  3899 ;;      Locals:         0       0       0       0
  3900 ;;      Temps:          0       0       0       0
  3901 ;;      Totals:         0       0       0       0
  3902 ;;Total ram usage:        0 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    3
  3905 ;; This function calls:
  3906 ;;		_setTemp_Initialization
  3907 ;; This function is called by:
  3908 ;;		_main
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           
  3913                           ;psect for function _Temp_Initialization
  3914  0AF4                     _Temp_Initialization:	
  3915                           
  3916                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3920  0AF4  158A  22E6         	fcall	_setTemp_Initialization
  3921  0AF6  0008               	return
  3922  0AF7                     __end_of_Temp_Initialization:	
  3923                           
  3924                           	psect	text15
  3925  0AE6                     __ptext15:	
  3926 ;; *************** function _setTemp_Initialization *****************
  3927 ;; Defined at:
  3928 ;;		line 44 in file "../src/OverTemperature_B1.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;		None
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;		None
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		None
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3942 ;;      Params:         0       0       0       0
  3943 ;;      Locals:         0       0       0       0
  3944 ;;      Temps:          0       0       0       0
  3945 ;;      Totals:         0       0       0       0
  3946 ;;Total ram usage:        0 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    2
  3949 ;; This function calls:
  3950 ;;		Nothing
  3951 ;; This function is called by:
  3952 ;;		_Temp_Initialization
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _setTemp_Initialization
  3958  0AE6                     _setTemp_Initialization:	
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _setTemp_Initialization: []
  3962  0AE6  0008               	return
  3963  0AE7                     __end_of_setTemp_Initialization:	
  3964                           
  3965                           	psect	text16
  3966  0AF1                     __ptext16:	
  3967 ;; *************** function _SYSC_Main *****************
  3968 ;; Defined at:
  3969 ;;		line 17 in file "../src/SYSC_B1.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;		None               void
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3983 ;;      Params:         0       0       0       0
  3984 ;;      Locals:         0       0       0       0
  3985 ;;      Temps:          0       0       0       0
  3986 ;;      Totals:         0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    4
  3990 ;; This function calls:
  3991 ;;		_setSYSC_Main
  3992 ;; This function is called by:
  3993 ;;		_main
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _SYSC_Main
  3999  0AF1                     _SYSC_Main:	
  4000                           
  4001                           ;SYSC_B1.c: 19: setSYSC_Main();
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4005  0AF1  118A  27BA         	fcall	_setSYSC_Main
  4006  0AF3  0008               	return
  4007  0AF4                     __end_of_SYSC_Main:	
  4008                           
  4009                           	psect	text17
  4010  07BA                     __ptext17:	
  4011 ;; *************** function _setSYSC_Main *****************
  4012 ;; Defined at:
  4013 ;;		line 23 in file "../src/SYSC_B1.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;		None               void
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0, pclath, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4027 ;;      Params:         0       0       0       0
  4028 ;;      Locals:         0       0       0       0
  4029 ;;      Temps:          0       0       0       0
  4030 ;;      Totals:         0       0       0       0
  4031 ;;Total ram usage:        0 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:    3
  4034 ;; This function calls:
  4035 ;;		_getMain_All_Error_Status
  4036 ;; This function is called by:
  4037 ;;		_SYSC_Main
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function _setSYSC_Main
  4043  07BA                     _setSYSC_Main:	
  4044                           
  4045                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4046                           
  4047                           ;incstack = 0
  4048                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4049  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  4050  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  4051  07BC  1C26               	btfss	_SYSC,0
  4052  07BD  0008               	return
  4053                           
  4054                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4055  07BE  18A6               	btfsc	_SYSC,1
  4056  07BF  2FD1               	goto	l3576
  4057                           
  4058                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4059  07C0  3001               	movlw	1
  4060  07C1  07A7               	addwf	_SYSC+1,f
  4061  07C2  1803               	skipnc
  4062  07C3  0AA8               	incf	_SYSC+2,f
  4063  07C4  3000               	movlw	0
  4064  07C5  07A8               	addwf	_SYSC+2,f
  4065                           
  4066                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  4067  07C6  3000               	movlw	0
  4068  07C7  0228               	subwf	_SYSC+2,w
  4069  07C8  3008               	movlw	8
  4070  07C9  1903               	skipnz
  4071  07CA  0227               	subwf	_SYSC+1,w
  4072  07CB  1C03               	skipc
  4073  07CC  0008               	return
  4074                           
  4075                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  4076  07CD  01A7               	clrf	_SYSC+1
  4077  07CE  01A8               	clrf	_SYSC+2
  4078                           
  4079                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4080  07CF  14A6               	bsf	_SYSC,1
  4081                           
  4082                           ;SYSC_B1.c: 31: }
  4083                           ;SYSC_B1.c: 32: } else {
  4084  07D0  0008               	return
  4085  07D1                     l3576:	
  4086                           
  4087                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4088  07D1  3001               	movlw	1
  4089  07D2  158A  25FA  118A   	fcall	_getMain_All_Error_Status
  4090  07D5  3800               	iorlw	0
  4091  07D6  1D03               	skipz
  4092  07D7  0008               	return
  4093                           
  4094                           ;SYSC_B1.c: 34: SYSC.Timer++;
  4095  07D8  3001               	movlw	1
  4096  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  4097  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  4098  07DB  07A7               	addwf	_SYSC+1,f
  4099  07DC  1803               	skipnc
  4100  07DD  0AA8               	incf	_SYSC+2,f
  4101  07DE  3000               	movlw	0
  4102  07DF  07A8               	addwf	_SYSC+2,f
  4103                           
  4104                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  4105  07E0  3019               	movlw	25
  4106  07E1  0627               	xorwf	_SYSC+1,w
  4107  07E2  0428               	iorwf	_SYSC+2,w
  4108  07E3  1D03               	skipz
  4109  07E4  2FEA               	goto	l3582
  4110                           
  4111                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  4112  07E5  01A7               	clrf	_SYSC+1
  4113  07E6  01A8               	clrf	_SYSC+2
  4114                           
  4115                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4116  07E7  01A9               	clrf	_SYSC+3
  4117  07E8  01AA               	clrf	_SYSC+4
  4118                           
  4119                           ;SYSC_B1.c: 38: } else {
  4120  07E9  0008               	return
  4121  07EA                     l3582:	
  4122                           
  4123                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4124  07EA  3001               	movlw	1
  4125  07EB  07A9               	addwf	_SYSC+3,f
  4126  07EC  1803               	skipnc
  4127  07ED  0AAA               	incf	_SYSC+4,f
  4128  07EE  3000               	movlw	0
  4129  07EF  07AA               	addwf	_SYSC+4,f
  4130                           
  4131                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4132  07F0  3001               	movlw	1
  4133  07F1  062A               	xorwf	_SYSC+4,w
  4134  07F2  1D03               	skipz
  4135  07F3  2FF6               	goto	u3355
  4136  07F4  30F4               	movlw	244
  4137  07F5  0629               	xorwf	_SYSC+3,w
  4138  07F6                     u3355:	
  4139  07F6  1D03               	skipz
  4140  07F7  0008               	return
  4141                           
  4142                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4143  07F8  01A9               	clrf	_SYSC+3
  4144  07F9  01AA               	clrf	_SYSC+4
  4145                           
  4146                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4147  07FA  10A6               	bcf	_SYSC,1
  4148  07FB  0008               	return
  4149  07FC                     __end_of_setSYSC_Main:	
  4150                           
  4151                           	psect	text18
  4152  0AEE                     __ptext18:	
  4153 ;; *************** function _SYSC_Initialization *****************
  4154 ;; Defined at:
  4155 ;;		line 7 in file "../src/SYSC_B1.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;		None               void
  4162 ;; Registers used:
  4163 ;;		status,2, status,0, pclath, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4169 ;;      Params:         0       0       0       0
  4170 ;;      Locals:         0       0       0       0
  4171 ;;      Temps:          0       0       0       0
  4172 ;;      Totals:         0       0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    3
  4176 ;; This function calls:
  4177 ;;		_setSYSC_Initialization
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _SYSC_Initialization
  4185  0AEE                     _SYSC_Initialization:	
  4186                           
  4187                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4191  0AEE  118A  27FC         	fcall	_setSYSC_Initialization
  4192  0AF0  0008               	return
  4193  0AF1                     __end_of_SYSC_Initialization:	
  4194                           
  4195                           	psect	text19
  4196  07FC                     __ptext19:	
  4197 ;; *************** function _setSYSC_Initialization *****************
  4198 ;; Defined at:
  4199 ;;		line 13 in file "../src/SYSC_B1.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;		None               void
  4206 ;; Registers used:
  4207 ;;		None
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4213 ;;      Params:         0       0       0       0
  4214 ;;      Locals:         0       0       0       0
  4215 ;;      Temps:          0       0       0       0
  4216 ;;      Totals:         0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    2
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_SYSC_Initialization
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _setSYSC_Initialization
  4229  07FC                     _setSYSC_Initialization:	
  4230                           
  4231                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4232                           
  4233                           ;incstack = 0
  4234                           ; Regs used in _setSYSC_Initialization: []
  4235  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  4236  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  4237  07FE  1426               	bsf	_SYSC,0
  4238  07FF  0008               	return
  4239  0800                     __end_of_setSYSC_Initialization:	
  4240                           
  4241                           	psect	text20
  4242  0026                     __ptext20:	
  4243 ;; *************** function _PIR_Main *****************
  4244 ;; Defined at:
  4245 ;;		line 13 in file "../src/PIR_B1.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  cds             1   14[BANK0 ] unsigned char 
  4250 ;;  error           1   11[BANK0 ] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;		None               void
  4253 ;; Registers used:
  4254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4260 ;;      Params:         0       0       0       0
  4261 ;;      Locals:         0       4       0       0
  4262 ;;      Temps:          0       5       0       0
  4263 ;;      Totals:         0       9       0       0
  4264 ;;Total ram usage:        9 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    4
  4267 ;; This function calls:
  4268 ;;		_getCDS_Status
  4269 ;;		_getLights_Status
  4270 ;;		_getMain_All_Error_Status
  4271 ;;		_setLED
  4272 ;;		_setLights_Trigger
  4273 ;; This function is called by:
  4274 ;;		_main
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _PIR_Main
  4280  0026                     _PIR_Main:	
  4281                           
  4282                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4286  0026  3000               	movlw	0
  4287  0027  158A  25FA  118A   	fcall	_getMain_All_Error_Status
  4288  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4289  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4290  002C  00E0               	movwf	??_PIR_Main
  4291  002D  0860               	movf	??_PIR_Main,w
  4292  002E  00E5               	movwf	PIR_Main@error
  4293                           
  4294                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4295  002F  158A  232F  118A   	fcall	_getCDS_Status
  4296  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4297  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4298  0034  00E0               	movwf	??_PIR_Main
  4299  0035  0860               	movf	??_PIR_Main,w
  4300  0036  00E8               	movwf	PIR_Main@cds
  4301                           
  4302                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4303  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4304  0038  1303               	bcf	3,6	;RP1=0, select bank1
  4305  0039  1C20               	btfss	__PIR^(0+128),0
  4306  003A  2A04               	goto	l923
  4307                           
  4308                           ;PIR_B1.c: 17: if (error == 0) {
  4309  003B  1283               	bcf	3,5	;RP0=0, select bank0
  4310  003C  1303               	bcf	3,6	;RP1=0, select bank0
  4311  003D  08E5               	movf	PIR_Main@error,f
  4312  003E  1D03               	skipz
  4313  003F  2879               	goto	l924
  4314                           
  4315                           ;PIR_B1.c: 19: if (cds == 1) {
  4316  0040  0868               	movf	PIR_Main@cds,w
  4317  0041  3A01               	xorlw	1
  4318  0042  1D03               	skipz
  4319  0043  2848               	goto	l925
  4320                           
  4321                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4322  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4323  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4324  0046  17A0               	bsf	__PIR^(0+128),7
  4325                           
  4326                           ;PIR_B1.c: 21: } else {
  4327  0047  2869               	goto	l5210
  4328  0048                     l925:	
  4329                           
  4330                           ;PIR_B1.c: 22: _PIR.Available = 0;
  4331  0048  1683               	bsf	3,5	;RP0=1, select bank1
  4332  0049  1303               	bcf	3,6	;RP1=0, select bank1
  4333  004A  13A0               	bcf	__PIR^(0+128),7
  4334                           
  4335                           ;PIR_B1.c: 23: if (_PIR.OK == 1) {
  4336  004B  1DA0               	btfss	__PIR^(0+128),3
  4337  004C  2869               	goto	l5210
  4338                           
  4339                           ;PIR_B1.c: 24: if (getLights_Status(1) == 1) {
  4340  004D  3001               	movlw	1
  4341  004E  158A  23CB  118A   	fcall	_getLights_Status
  4342  0051  3A01               	xorlw	1
  4343  0052  1D03               	skipz
  4344  0053  285B               	goto	l928
  4345                           
  4346                           ;PIR_B1.c: 25: setLights_Trigger(1, 0);
  4347  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4348  0055  1303               	bcf	3,6	;RP1=0, select bank0
  4349  0056  01DA               	clrf	setLights_Trigger@command
  4350  0057  3001               	movlw	1
  4351  0058  158A  24C8  118A   	fcall	_setLights_Trigger
  4352  005B                     l928:	
  4353                           
  4354                           ;PIR_B1.c: 26: }
  4355                           ;PIR_B1.c: 27: setLED(1, 0);
  4356  005B  1283               	bcf	3,5	;RP0=0, select bank0
  4357  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4358  005D  01DA               	clrf	setLED@command
  4359  005E  3001               	movlw	1
  4360  005F  158A  278F  118A   	fcall	_setLED
  4361                           
  4362                           ;PIR_B1.c: 28: setLED(2, 0);
  4363  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4364  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4365  0064  01DA               	clrf	setLED@command
  4366  0065  3002               	movlw	2
  4367  0066  158A  278F  118A   	fcall	_setLED
  4368  0069                     l5210:	
  4369                           
  4370                           ;PIR_B1.c: 29: }
  4371                           ;PIR_B1.c: 30: }
  4372                           ;PIR_B1.c: 34: if (_PIR.Detect == 0) {
  4373  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4374  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4375  006B  1A20               	btfsc	__PIR^(0+128),4
  4376  006C  287F               	goto	l931
  4377                           
  4378                           ;PIR_B1.c: 35: _PIR.Detect = 1;
  4379  006D  1620               	bsf	__PIR^(0+128),4
  4380                           
  4381                           ;PIR_B1.c: 36: if (_PIR.OK == 0) {
  4382  006E  19A0               	btfsc	__PIR^(0+128),3
  4383  006F  287F               	goto	l931
  4384                           
  4385                           ;PIR_B1.c: 37: setLED(1, 1);
  4386  0070  1283               	bcf	3,5	;RP0=0, select bank0
  4387  0071  1303               	bcf	3,6	;RP1=0, select bank0
  4388  0072  01DA               	clrf	setLED@command
  4389  0073  0ADA               	incf	setLED@command,f
  4390  0074  3001               	movlw	1
  4391  0075  158A  278F  118A   	fcall	_setLED
  4392                           
  4393                           ;PIR_B1.c: 38: }
  4394                           ;PIR_B1.c: 39: }
  4395                           ;PIR_B1.c: 40: } else {
  4396  0078  287F               	goto	l931
  4397  0079                     l924:	
  4398                           
  4399                           ;PIR_B1.c: 41: if (_PIR.Detect == 1) {
  4400  0079  1683               	bsf	3,5	;RP0=1, select bank1
  4401  007A  1303               	bcf	3,6	;RP1=0, select bank1
  4402  007B  1E20               	btfss	__PIR^(0+128),4
  4403  007C  287F               	goto	l931
  4404                           
  4405                           ;PIR_B1.c: 42: _PIR.Detect = 0;
  4406  007D  1220               	bcf	__PIR^(0+128),4
  4407                           
  4408                           ;PIR_B1.c: 43: _PIR.Available = 0;
  4409  007E  13A0               	bcf	__PIR^(0+128),7
  4410  007F                     l931:	
  4411                           
  4412                           ;PIR_B1.c: 61: }
  4413                           ;PIR_B1.c: 62: }
  4414                           ;PIR_B1.c: 64: if (_PIR.ADtoGO == 0) {
  4415  007F  1683               	bsf	3,5	;RP0=1, select bank1
  4416  0080  1303               	bcf	3,6	;RP1=0, select bank1
  4417  0081  18A0               	btfsc	__PIR^(0+128),1
  4418  0082  2892               	goto	l933
  4419                           
  4420                           ;PIR_B1.c: 65: _PIR.Time++;
  4421  0083  3001               	movlw	1
  4422  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4423  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4424  0086  00E0               	movwf	??_PIR_Main
  4425  0087  0860               	movf	??_PIR_Main,w
  4426  0088  1683               	bsf	3,5	;RP0=1, select bank1
  4427  0089  1303               	bcf	3,6	;RP1=0, select bank1
  4428  008A  07A5               	addwf	(__PIR^(0+128)+5),f
  4429                           
  4430                           ;PIR_B1.c: 66: if (_PIR.Time == (100 / 20)) {
  4431  008B  0825               	movf	(__PIR^(0+128)+5),w
  4432  008C  3A05               	xorlw	5
  4433  008D  1D03               	skipz
  4434  008E  29A5               	goto	l5300
  4435                           
  4436                           ;PIR_B1.c: 67: _PIR.Time = 0;
  4437  008F  01A5               	clrf	(__PIR^(0+128)+5)
  4438                           
  4439                           ;PIR_B1.c: 68: _PIR.ADtoGO = 1;
  4440  0090  14A0               	bsf	__PIR^(0+128),1
  4441                           
  4442                           ;PIR_B1.c: 69: }
  4443                           ;PIR_B1.c: 70: } else {
  4444  0091  29A5               	goto	l5300
  4445  0092                     l933:	
  4446                           
  4447                           ;PIR_B1.c: 71: if (_PIR.GO == 1) {
  4448  0092  1D20               	btfss	__PIR^(0+128),2
  4449  0093  29A5               	goto	l5300
  4450                           
  4451                           ;PIR_B1.c: 72: _PIR.GO = 0;
  4452  0094  1120               	bcf	__PIR^(0+128),2
  4453                           
  4454                           ;PIR_B1.c: 73: _PIR.ADtoGO = 0;
  4455  0095  10A0               	bcf	__PIR^(0+128),1
  4456                           
  4457                           ;PIR_B1.c: 74: if (_PIR.Available == 1) {
  4458  0096  1BA0               	btfsc	__PIR^(0+128),7
  4459                           
  4460                           ;PIR_B1.c: 75: if (_PIR.OK == 1) {
  4461  0097  1DA0               	btfss	__PIR^(0+128),3
  4462  0098  29A5               	goto	l5300
  4463                           
  4464                           ;PIR_B1.c: 77: _PIR.Time++;
  4465  0099  3001               	movlw	1
  4466  009A  1283               	bcf	3,5	;RP0=0, select bank0
  4467  009B  1303               	bcf	3,6	;RP1=0, select bank0
  4468  009C  00E0               	movwf	??_PIR_Main
  4469  009D  0860               	movf	??_PIR_Main,w
  4470  009E  1683               	bsf	3,5	;RP0=1, select bank1
  4471  009F  1303               	bcf	3,6	;RP1=0, select bank1
  4472  00A0  07A5               	addwf	(__PIR^(0+128)+5),f
  4473                           
  4474                           ;PIR_B1.c: 78: if (_PIR.Time == 60) {
  4475  00A1  0825               	movf	(__PIR^(0+128)+5),w
  4476  00A2  3A3C               	xorlw	60
  4477  00A3  1D03               	skipz
  4478  00A4  28D9               	goto	l5266
  4479                           
  4480                           ;PIR_B1.c: 79: _PIR.Time = 0;
  4481  00A5  01A5               	clrf	(__PIR^(0+128)+5)
  4482                           
  4483                           ;PIR_B1.c: 80: if (_PIR.RangeCount >= 90) {
  4484  00A6  305A               	movlw	90
  4485  00A7  024B               	subwf	(__PIR^(0+128)+43),w
  4486  00A8  1C03               	skipc
  4487  00A9  28B5               	goto	l5248
  4488                           
  4489                           ;PIR_B1.c: 81: _PIR.RangeTime1 = 0;
  4490  00AA  01CA               	clrf	(__PIR^(0+128)+42)
  4491                           
  4492                           ;PIR_B1.c: 83: if (_PIR.RangeValue == 25) {
  4493  00AB  084C               	movf	(__PIR^(0+128)+44),w
  4494  00AC  3A19               	xorlw	25
  4495  00AD  1903               	btfsc	3,2
  4496  00AE  28CA               	goto	L14
  4497                           
  4498                           ;PIR_B1.c: 85: } else if (_PIR.RangeValue == (25+10)) {
  4499                           
  4500                           ;PIR_B1.c: 84: _PIR.RangeValue = (25+10);
  4501  00AF  084C               	movf	(__PIR^(0+128)+44),w
  4502  00B0  3A23               	xorlw	35
  4503  00B1  1D03               	skipz
  4504  00B2  28D8               	goto	l5264
  4505                           
  4506                           ;PIR_B1.c: 86: _PIR.RangeValue = (25+20);
  4507  00B3  302D               	movlw	45
  4508  00B4  28D1               	goto	L10
  4509  00B5                     l5248:	
  4510                           ;PIR_B1.c: 87: }
  4511                           ;PIR_B1.c: 88: } else if (_PIR.RangeCount <= 10) {
  4512                           
  4513  00B5  300B               	movlw	11
  4514  00B6  024B               	subwf	(__PIR^(0+128)+43),w
  4515  00B7  1803               	skipnc
  4516  00B8  28D8               	goto	l5264
  4517                           
  4518                           ;PIR_B1.c: 89: _PIR.RangeTime1++;
  4519  00B9  3001               	movlw	1
  4520  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4521  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4522  00BC  00E0               	movwf	??_PIR_Main
  4523  00BD  0860               	movf	??_PIR_Main,w
  4524  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  4525  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  4526  00C0  07CA               	addwf	(__PIR^(0+128)+42),f
  4527                           
  4528                           ;PIR_B1.c: 90: if (_PIR.RangeTime1 == 2) {
  4529  00C1  084A               	movf	(__PIR^(0+128)+42),w
  4530  00C2  3A02               	xorlw	2
  4531  00C3  1D03               	skipz
  4532  00C4  28D8               	goto	l5264
  4533                           
  4534                           ;PIR_B1.c: 91: _PIR.RangeTime1 = 0;
  4535  00C5  01CA               	clrf	(__PIR^(0+128)+42)
  4536                           
  4537                           ;PIR_B1.c: 93: if (_PIR.RangeValue == (25+20)) {
  4538  00C6  084C               	movf	(__PIR^(0+128)+44),w
  4539  00C7  3A2D               	xorlw	45
  4540  00C8  1D03               	skipz
  4541  00C9  28CC               	goto	l5260
  4542  00CA                     L14:	
  4543                           
  4544                           ;PIR_B1.c: 94: _PIR.RangeValue = (25+10);
  4545  00CA  3023               	movlw	35
  4546  00CB  28D1               	goto	L10
  4547  00CC                     l5260:	
  4548                           ;PIR_B1.c: 95: } else if (_PIR.RangeValue == (25+10)) {
  4549                           
  4550  00CC  084C               	movf	(__PIR^(0+128)+44),w
  4551  00CD  3A23               	xorlw	35
  4552  00CE  1D03               	skipz
  4553  00CF  28D8               	goto	l5264
  4554                           
  4555                           ;PIR_B1.c: 96: _PIR.RangeValue = 25;
  4556  00D0  3019               	movlw	25
  4557  00D1                     L10:	
  4558  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4559  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4560  00D3  00E0               	movwf	??_PIR_Main
  4561  00D4  0860               	movf	??_PIR_Main,w
  4562  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  4563  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  4564  00D7  00CC               	movwf	(__PIR^(0+128)+44)
  4565  00D8                     l5264:	
  4566                           
  4567                           ;PIR_B1.c: 97: }
  4568                           ;PIR_B1.c: 98: }
  4569                           ;PIR_B1.c: 99: }
  4570                           ;PIR_B1.c: 100: _PIR.RangeCount = 0;
  4571  00D8  01CB               	clrf	(__PIR^(0+128)+43)
  4572  00D9                     l5266:	
  4573                           
  4574                           ;PIR_B1.c: 101: }
  4575                           ;PIR_B1.c: 104: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4576                           ;PIR_B1.c: 105: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4577  00D9  084C               	movf	(__PIR^(0+128)+44),w
  4578  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  4579  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  4580  00DC  00E0               	movwf	??_PIR_Main
  4581  00DD  01E1               	clrf	??_PIR_Main+1
  4582  00DE  09E0               	comf	??_PIR_Main,f
  4583  00DF  09E1               	comf	??_PIR_Main+1,f
  4584  00E0  0AE0               	incf	??_PIR_Main,f
  4585  00E1  1903               	skipnz
  4586  00E2  0AE1               	incf	??_PIR_Main+1,f
  4587  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  4588  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  4589  00E5  0826               	movf	(__PIR^(0+128)+6),w
  4590  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  4591  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  4592  00E8  0760               	addwf	??_PIR_Main,w
  4593  00E9  00E2               	movwf	??_PIR_Main+2
  4594  00EA  0861               	movf	??_PIR_Main+1,w
  4595  00EB  1803               	skipnc
  4596  00EC  0A61               	incf	??_PIR_Main+1,w
  4597  00ED  00E3               	movwf	??_PIR_Main+3
  4598  00EE  0863               	movf	??_PIR_Main+3,w
  4599  00EF  3A80               	xorlw	128
  4600  00F0  3C80               	sublw	128
  4601  00F1  1D03               	skipz
  4602  00F2  28F7               	goto	u6855
  4603  00F3  0862               	movf	??_PIR_Main+2,w
  4604  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  4605  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  4606  00F6  0221               	subwf	(__PIR^(0+128)+1),w
  4607  00F7                     u6855:	
  4608  00F7  1C03               	skipc
  4609  00F8  2919               	goto	l5276
  4610  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4611  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4612  00FB  0826               	movf	(__PIR^(0+128)+6),w
  4613  00FC  074C               	addwf	(__PIR^(0+128)+44),w
  4614  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  4615  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  4616  00FF  00E0               	movwf	??_PIR_Main
  4617  0100  01E1               	clrf	??_PIR_Main+1
  4618  0101  0DE1               	rlf	??_PIR_Main+1,f
  4619  0102  0861               	movf	??_PIR_Main+1,w
  4620  0103  3A80               	xorlw	128
  4621  0104  00E2               	movwf	??_PIR_Main+2
  4622  0105  3080               	movlw	128
  4623  0106  0262               	subwf	??_PIR_Main+2,w
  4624  0107  1D03               	skipz
  4625  0108  290F               	goto	u6865
  4626  0109  1683               	bsf	3,5	;RP0=1, select bank1
  4627  010A  1303               	bcf	3,6	;RP1=0, select bank1
  4628  010B  0821               	movf	(__PIR^(0+128)+1),w
  4629  010C  1283               	bcf	3,5	;RP0=0, select bank0
  4630  010D  1303               	bcf	3,6	;RP1=0, select bank0
  4631  010E  0260               	subwf	??_PIR_Main,w
  4632  010F                     u6865:	
  4633  010F  1C03               	skipc
  4634  0110  2919               	goto	l5276
  4635                           
  4636                           ;PIR_B1.c: 107: _PIR.Count = 0;
  4637  0111  1683               	bsf	3,5	;RP0=1, select bank1
  4638  0112  1303               	bcf	3,6	;RP1=0, select bank1
  4639  0113  01C1               	clrf	(__PIR^(0+128)+33)
  4640  0114  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4641                           
  4642                           ;PIR_B1.c: 113: setLED(1, 0);
  4643  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4644  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4645  0117  01DA               	clrf	setLED@command
  4646  0118  298E               	goto	L15
  4647  0119                     l5276:	
  4648                           ;PIR_B1.c: 115: } else {
  4649                           
  4650                           ;PIR_B1.c: 114: setLED(2, 0);
  4651                           
  4652                           
  4653                           ;PIR_B1.c: 117: _PIR.RangeCount++;
  4654  0119  3001               	movlw	1
  4655  011A  1283               	bcf	3,5	;RP0=0, select bank0
  4656  011B  1303               	bcf	3,6	;RP1=0, select bank0
  4657  011C  00E0               	movwf	??_PIR_Main
  4658  011D  0860               	movf	??_PIR_Main,w
  4659  011E  1683               	bsf	3,5	;RP0=1, select bank1
  4660  011F  1303               	bcf	3,6	;RP1=0, select bank1
  4661  0120  07CB               	addwf	(__PIR^(0+128)+43),f
  4662                           
  4663                           ;PIR_B1.c: 118: _PIR.Count++;
  4664  0121  3001               	movlw	1
  4665  0122  07C1               	addwf	(__PIR^(0+128)+33),f
  4666  0123  1803               	skipnc
  4667  0124  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4668  0125  3000               	movlw	0
  4669  0126  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4670                           
  4671                           ;PIR_B1.c: 120: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 3;
  4672  0127  1B20               	btfsc	__PIR^(0+128),6
  4673  0128  292D               	goto	l5284
  4674  0129  3003               	movlw	3
  4675  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4676  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4677  012C  292F               	goto	L11
  4678  012D                     l5284:	
  4679  012D  3003               	movlw	3
  4680  012E  1283               	bcf	3,5	;RP0=0, select bank0
  4681  012F                     L11:	
  4682  012F  00E6               	movwf	_PIR_Main$3125
  4683  0130  3000               	movlw	0
  4684  0131  00E7               	movwf	_PIR_Main$3125+1
  4685  0132  0866               	movf	_PIR_Main$3125,w
  4686  0133  00E0               	movwf	??_PIR_Main
  4687  0134  0860               	movf	??_PIR_Main,w
  4688  0135  1683               	bsf	3,5	;RP0=1, select bank1
  4689  0136  1303               	bcf	3,6	;RP1=0, select bank1
  4690  0137  00C3               	movwf	(__PIR^(0+128)+35)
  4691                           
  4692                           ;PIR_B1.c: 122: if (_PIR.Count == _PIR.TriggerValue) {
  4693  0138  0843               	movf	(__PIR^(0+128)+35),w
  4694  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4695  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4696  013B  00E0               	movwf	??_PIR_Main
  4697  013C  01E1               	clrf	??_PIR_Main+1
  4698  013D  1683               	bsf	3,5	;RP0=1, select bank1
  4699  013E  1303               	bcf	3,6	;RP1=0, select bank1
  4700  013F  0842               	movf	((__PIR+1)^(0+128)+33),w
  4701  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4702  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4703  0142  0661               	xorwf	??_PIR_Main+1,w
  4704  0143  1D03               	skipz
  4705  0144  294B               	goto	u6885
  4706  0145  1683               	bsf	3,5	;RP0=1, select bank1
  4707  0146  1303               	bcf	3,6	;RP1=0, select bank1
  4708  0147  0841               	movf	(__PIR^(0+128)+33),w
  4709  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4710  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4711  014A  0660               	xorwf	??_PIR_Main,w
  4712  014B                     u6885:	
  4713  014B  1D03               	skipz
  4714  014C  29A5               	goto	l5300
  4715                           
  4716                           ;PIR_B1.c: 123: _PIR.Count = 0;
  4717  014D  1683               	bsf	3,5	;RP0=1, select bank1
  4718  014E  1303               	bcf	3,6	;RP1=0, select bank1
  4719  014F  01C1               	clrf	(__PIR^(0+128)+33)
  4720  0150  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4721                           
  4722                           ;PIR_B1.c: 125: _PIR.CloseTimeSeconds = 0;
  4723  0151  01C6               	clrf	(__PIR^(0+128)+38)
  4724                           
  4725                           ;PIR_B1.c: 126: _PIR.CloseTimeMinutes = 0;
  4726  0152  01C4               	clrf	(__PIR^(0+128)+36)
  4727  0153  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4728                           
  4729                           ;PIR_B1.c: 127: _PIR.Status = 1;
  4730  0154  1720               	bsf	__PIR^(0+128),6
  4731                           
  4732                           ;PIR_B1.c: 131: if (getLights_Status(1) == 0) {
  4733  0155  3001               	movlw	1
  4734  0156  158A  23CB  118A   	fcall	_getLights_Status
  4735  0159  3800               	iorlw	0
  4736  015A  1D03               	skipz
  4737  015B  2964               	goto	l5294
  4738                           
  4739                           ;PIR_B1.c: 132: setLights_Trigger(1, 1);
  4740  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4741  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4742  015E  01DA               	clrf	setLights_Trigger@command
  4743  015F  0ADA               	incf	setLights_Trigger@command,f
  4744  0160  3001               	movlw	1
  4745  0161  158A  24C8  118A   	fcall	_setLights_Trigger
  4746  0164                     l5294:	
  4747                           
  4748                           ;PIR_B1.c: 133: }
  4749                           ;PIR_B1.c: 137: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4750  0164  1683               	bsf	3,5	;RP0=1, select bank1
  4751  0165  1303               	bcf	3,6	;RP1=0, select bank1
  4752  0166  084C               	movf	(__PIR^(0+128)+44),w
  4753  0167  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0168  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0169  00E0               	movwf	??_PIR_Main
  4756  016A  01E1               	clrf	??_PIR_Main+1
  4757  016B  09E0               	comf	??_PIR_Main,f
  4758  016C  09E1               	comf	??_PIR_Main+1,f
  4759  016D  0AE0               	incf	??_PIR_Main,f
  4760  016E  1903               	skipnz
  4761  016F  0AE1               	incf	??_PIR_Main+1,f
  4762  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4763  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4764  0172  0826               	movf	(__PIR^(0+128)+6),w
  4765  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4766  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4767  0175  0760               	addwf	??_PIR_Main,w
  4768  0176  00E2               	movwf	??_PIR_Main+2
  4769  0177  0861               	movf	??_PIR_Main+1,w
  4770  0178  1803               	skipnc
  4771  0179  0A61               	incf	??_PIR_Main+1,w
  4772  017A  00E3               	movwf	??_PIR_Main+3
  4773  017B  0863               	movf	??_PIR_Main+3,w
  4774  017C  3A80               	xorlw	128
  4775  017D  00E4               	movwf	??_PIR_Main+4
  4776  017E  3080               	movlw	128
  4777  017F  0264               	subwf	??_PIR_Main+4,w
  4778  0180  1D03               	skipz
  4779  0181  2988               	goto	u6905
  4780  0182  1683               	bsf	3,5	;RP0=1, select bank1
  4781  0183  1303               	bcf	3,6	;RP1=0, select bank1
  4782  0184  0821               	movf	(__PIR^(0+128)+1),w
  4783  0185  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0186  1303               	bcf	3,6	;RP1=0, select bank0
  4785  0187  0262               	subwf	??_PIR_Main+2,w
  4786  0188                     u6905:	
  4787  0188  1C03               	skipc
  4788  0189  2996               	goto	l5298
  4789                           
  4790                           ;PIR_B1.c: 138: setLED(1, 1);
  4791  018A  1283               	bcf	3,5	;RP0=0, select bank0
  4792  018B  1303               	bcf	3,6	;RP1=0, select bank0
  4793  018C  01DA               	clrf	setLED@command
  4794  018D  0ADA               	incf	setLED@command,f
  4795  018E                     L15:	
  4796  018E  3001               	movlw	1
  4797  018F  158A  278F  118A   	fcall	_setLED
  4798                           
  4799                           ;PIR_B1.c: 139: setLED(2, 0);
  4800  0192  1283               	bcf	3,5	;RP0=0, select bank0
  4801  0193  1303               	bcf	3,6	;RP1=0, select bank0
  4802  0194  01DA               	clrf	setLED@command
  4803  0195  29A1               	goto	L12
  4804  0196                     l5298:	
  4805                           ;PIR_B1.c: 140: } else {
  4806                           
  4807                           
  4808                           ;PIR_B1.c: 141: setLED(1, 0);
  4809  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4810  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0198  01DA               	clrf	setLED@command
  4812  0199  3001               	movlw	1
  4813  019A  158A  278F  118A   	fcall	_setLED
  4814                           
  4815                           ;PIR_B1.c: 142: setLED(2, 1);
  4816  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4817  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4818  019F  01DA               	clrf	setLED@command
  4819  01A0  0ADA               	incf	setLED@command,f
  4820  01A1                     L12:	
  4821  01A1  3002               	movlw	2
  4822  01A2  158A  278F  118A   	fcall	_setLED
  4823  01A5                     l5300:	
  4824                           
  4825                           ;PIR_B1.c: 143: }
  4826                           ;PIR_B1.c: 167: }
  4827                           ;PIR_B1.c: 168: }
  4828                           ;PIR_B1.c: 169: }
  4829                           ;PIR_B1.c: 170: }
  4830                           ;PIR_B1.c: 171: }
  4831                           ;PIR_B1.c: 172: }
  4832                           ;PIR_B1.c: 173: if (_PIR.OK == 0) {
  4833  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  4834  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  4835  01A7  19A0               	btfsc	__PIR^(0+128),3
  4836  01A8  29D4               	goto	l5316
  4837                           
  4838                           ;PIR_B1.c: 174: _PIR.Count++;
  4839  01A9  3001               	movlw	1
  4840  01AA  07C1               	addwf	(__PIR^(0+128)+33),f
  4841  01AB  1803               	skipnc
  4842  01AC  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4843  01AD  3000               	movlw	0
  4844  01AE  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4845                           
  4846                           ;PIR_B1.c: 175: if (_PIR.Count == (30000 / 20)) {
  4847  01AF  3005               	movlw	5
  4848  01B0  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4849  01B1  1D03               	skipz
  4850  01B2  29B5               	goto	u6925
  4851  01B3  30DC               	movlw	220
  4852  01B4  0641               	xorwf	(__PIR^(0+128)+33),w
  4853  01B5                     u6925:	
  4854  01B5  1D03               	skipz
  4855  01B6  29D4               	goto	l5316
  4856                           
  4857                           ;PIR_B1.c: 176: _PIR.Count = 0;
  4858  01B7  01C1               	clrf	(__PIR^(0+128)+33)
  4859  01B8  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4860                           
  4861                           ;PIR_B1.c: 177: _PIR.OK = 1;
  4862  01B9  15A0               	bsf	__PIR^(0+128),3
  4863                           
  4864                           ;PIR_B1.c: 178: setLED(1, 0);
  4865  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4866  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4867  01BC  01DA               	clrf	setLED@command
  4868  01BD  3001               	movlw	1
  4869  01BE  158A  278F  118A   	fcall	_setLED
  4870                           
  4871                           ;PIR_B1.c: 179: if (cds == 0) {
  4872  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  4873  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  4874  01C3  08E8               	movf	PIR_Main@cds,f
  4875  01C4  1D03               	skipz
  4876  01C5  29D4               	goto	l5316
  4877                           
  4878                           ;PIR_B1.c: 180: if (getLights_Status(1) == 1) {
  4879  01C6  3001               	movlw	1
  4880  01C7  158A  23CB  118A   	fcall	_getLights_Status
  4881  01CA  3A01               	xorlw	1
  4882  01CB  1D03               	skipz
  4883  01CC  29D4               	goto	l5316
  4884                           
  4885                           ;PIR_B1.c: 181: setLights_Trigger(1, 0);
  4886  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4887  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4888  01CF  01DA               	clrf	setLights_Trigger@command
  4889  01D0  3001               	movlw	1
  4890  01D1  158A  24C8  118A   	fcall	_setLights_Trigger
  4891  01D4                     l5316:	
  4892                           
  4893                           ;PIR_B1.c: 182: }
  4894                           ;PIR_B1.c: 183: }
  4895                           ;PIR_B1.c: 184: }
  4896                           ;PIR_B1.c: 185: }
  4897                           ;PIR_B1.c: 186: if (_PIR.Status == 1) {
  4898  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  4899  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  4900  01D6  1F20               	btfss	__PIR^(0+128),6
  4901  01D7  0008               	return
  4902                           
  4903                           ;PIR_B1.c: 187: _PIR.CloseTimeSeconds++;
  4904  01D8  3001               	movlw	1
  4905  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  4906  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  4907  01DB  00E0               	movwf	??_PIR_Main
  4908  01DC  0860               	movf	??_PIR_Main,w
  4909  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4910  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4911  01DF  07C6               	addwf	(__PIR^(0+128)+38),f
  4912                           
  4913                           ;PIR_B1.c: 188: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4914  01E0  0846               	movf	(__PIR^(0+128)+38),w
  4915  01E1  3A32               	xorlw	50
  4916  01E2  1D03               	skipz
  4917  01E3  0008               	return
  4918                           
  4919                           ;PIR_B1.c: 189: _PIR.CloseTimeSeconds = 0;
  4920  01E4  01C6               	clrf	(__PIR^(0+128)+38)
  4921                           
  4922                           ;PIR_B1.c: 190: _PIR.CloseTimeMinutes++;
  4923  01E5  3001               	movlw	1
  4924  01E6  07C4               	addwf	(__PIR^(0+128)+36),f
  4925  01E7  1803               	skipnc
  4926  01E8  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4927  01E9  3000               	movlw	0
  4928  01EA  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4929                           
  4930                           ;PIR_B1.c: 191: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4931  01EB  0848               	movf	((__PIR+1)^(0+128)+39),w
  4932  01EC  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4933  01ED  1D03               	skipz
  4934  01EE  29F1               	goto	u6975
  4935  01EF  0847               	movf	(__PIR^(0+128)+39),w
  4936  01F0  0644               	xorwf	(__PIR^(0+128)+36),w
  4937  01F1                     u6975:	
  4938  01F1  1D03               	skipz
  4939  01F2  0008               	return
  4940                           
  4941                           ;PIR_B1.c: 192: _PIR.CloseTimeMinutes = 0;
  4942  01F3  01C4               	clrf	(__PIR^(0+128)+36)
  4943  01F4  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4944                           
  4945                           ;PIR_B1.c: 193: _PIR.Status = 0;
  4946  01F5  1320               	bcf	__PIR^(0+128),6
  4947                           
  4948                           ;PIR_B1.c: 197: if (getLights_Status(1) == 1) {
  4949  01F6  3001               	movlw	1
  4950  01F7  158A  23CB  118A   	fcall	_getLights_Status
  4951  01FA  3A01               	xorlw	1
  4952  01FB  1D03               	skipz
  4953  01FC  0008               	return
  4954                           
  4955                           ;PIR_B1.c: 198: setLights_Trigger(1, 0);
  4956  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4957  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4958  01FF  01DA               	clrf	setLights_Trigger@command
  4959  0200  3001               	movlw	1
  4960  0201  158A  24C8         	fcall	_setLights_Trigger
  4961                           
  4962                           ;PIR_B1.c: 199: }
  4963                           ;PIR_B1.c: 203: }
  4964                           ;PIR_B1.c: 204: }
  4965                           ;PIR_B1.c: 205: }
  4966                           ;PIR_B1.c: 206: } else {
  4967  0203  0008               	return
  4968  0204                     l923:	
  4969                           
  4970                           ;PIR_B1.c: 207: if (myMain.PowerON == 1) {
  4971  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4972  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4973  0206  1C20               	btfss	_myMain,0
  4974  0207  0008               	return
  4975                           
  4976                           ;PIR_B1.c: 208: _PIR.Enable = 1;
  4977  0208  1683               	bsf	3,5	;RP0=1, select bank1
  4978  0209  1303               	bcf	3,6	;RP1=0, select bank1
  4979  020A  1420               	bsf	__PIR^(0+128),0
  4980                           
  4981                           ;PIR_B1.c: 209: setLED(1, 1);
  4982  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4983  020C  1303               	bcf	3,6	;RP1=0, select bank0
  4984  020D  01DA               	clrf	setLED@command
  4985  020E  0ADA               	incf	setLED@command,f
  4986  020F  3001               	movlw	1
  4987  0210  158A  278F  118A   	fcall	_setLED
  4988                           
  4989                           ;PIR_B1.c: 212: if (getLights_Status(1) == 0) {
  4990  0213  3001               	movlw	1
  4991  0214  158A  23CB  118A   	fcall	_getLights_Status
  4992  0217  3800               	iorlw	0
  4993  0218  1D03               	skipz
  4994  0219  0008               	return
  4995                           
  4996                           ;PIR_B1.c: 213: setLights_Trigger(1, 1);
  4997  021A  1283               	bcf	3,5	;RP0=0, select bank0
  4998  021B  1303               	bcf	3,6	;RP1=0, select bank0
  4999  021C  01DA               	clrf	setLights_Trigger@command
  5000  021D  0ADA               	incf	setLights_Trigger@command,f
  5001  021E  3001               	movlw	1
  5002  021F  158A  24C8         	fcall	_setLights_Trigger
  5003  0221  0008               	return
  5004  0222                     __end_of_PIR_Main:	
  5005                           
  5006                           	psect	text21
  5007  0B2F                     __ptext21:	
  5008 ;; *************** function _getCDS_Status *****************
  5009 ;; Defined at:
  5010 ;;		line 42 in file "../src/CDS_B1.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  status          1    4[COMMON] unsigned char 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      unsigned char 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5024 ;;      Params:         0       0       0       0
  5025 ;;      Locals:         1       0       0       0
  5026 ;;      Temps:          0       0       0       0
  5027 ;;      Totals:         1       0       0       0
  5028 ;;Total ram usage:        1 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    2
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_PIR_Main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _getCDS_Status
  5040  0B2F                     _getCDS_Status:	
  5041                           
  5042                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5046  0B2F  3000               	movlw	0
  5047  0B30  1283               	bcf	3,5	;RP0=0, select bank0
  5048  0B31  1303               	bcf	3,6	;RP1=0, select bank0
  5049  0B32  1A2B               	btfsc	__CDS,4
  5050  0B33  3001               	movlw	1
  5051  0B34  00F4               	movwf	getCDS_Status@status
  5052                           
  5053                           ;CDS_B1.c: 44: return status;
  5054  0B35  0874               	movf	getCDS_Status@status,w
  5055  0B36  0008               	return
  5056  0B37                     __end_of_getCDS_Status:	
  5057                           
  5058                           	psect	text22
  5059  0B5C                     __ptext22:	
  5060 ;; *************** function _PIR_Initialization *****************
  5061 ;; Defined at:
  5062 ;;		line 7 in file "../src/PIR_B1.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;		None               void
  5069 ;; Registers used:
  5070 ;;		wreg
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5076 ;;      Params:         0       0       0       0
  5077 ;;      Locals:         0       0       0       0
  5078 ;;      Temps:          1       0       0       0
  5079 ;;      Totals:         1       0       0       0
  5080 ;;Total ram usage:        1 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    2
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_main
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _PIR_Initialization
  5092  0B5C                     _PIR_Initialization:	
  5093                           
  5094                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _PIR_Initialization: [wreg]
  5098  0B5C  3019               	movlw	25
  5099  0B5D  00F4               	movwf	??_PIR_Initialization
  5100  0B5E  0874               	movf	??_PIR_Initialization,w
  5101  0B5F  1683               	bsf	3,5	;RP0=1, select bank1
  5102  0B60  1303               	bcf	3,6	;RP1=0, select bank1
  5103  0B61  00CC               	movwf	(__PIR^(0+128)+44)
  5104                           
  5105                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5106  0B62  3005               	movlw	5
  5107  0B63  00C7               	movwf	(__PIR^(0+128)+39)
  5108  0B64  3000               	movlw	0
  5109  0B65  00C8               	movwf	(__PIR^(0+128)+40)
  5110  0B66  0008               	return
  5111  0B67                     __end_of_PIR_Initialization:	
  5112                           
  5113                           	psect	text23
  5114  0BAB                     __ptext23:	
  5115 ;; *************** function _Mcu_Initialization *****************
  5116 ;; Defined at:
  5117 ;;		line 30 in file "../src/MCU_B1.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;		None               void
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0, pclath, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5131 ;;      Params:         0       0       0       0
  5132 ;;      Locals:         0       0       0       0
  5133 ;;      Temps:          0       0       0       0
  5134 ;;      Totals:         0       0       0       0
  5135 ;;Total ram usage:        0 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    3
  5138 ;; This function calls:
  5139 ;;		_ADC_Set
  5140 ;;		_Fosc_Set
  5141 ;;		_IO_Set
  5142 ;;		_TMR1_Set
  5143 ;;		_WDT_Set
  5144 ;; This function is called by:
  5145 ;;		_main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _Mcu_Initialization
  5151  0BAB                     _Mcu_Initialization:	
  5152                           
  5153                           ;MCU_B1.c: 32: Fosc_Set();
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5157  0BAB  158A  2302  158A   	fcall	_Fosc_Set
  5158                           
  5159                           ;MCU_B1.c: 34: IO_Set();
  5160  0BAE  158A  2424  158A   	fcall	_IO_Set
  5161                           
  5162                           ;MCU_B1.c: 36: ;;
  5163                           ;MCU_B1.c: 38: TMR1_Set();
  5164  0BB1  158A  238F  158A   	fcall	_TMR1_Set
  5165                           
  5166                           ;MCU_B1.c: 40: ADC_Set();
  5167  0BB4  158A  2320  158A   	fcall	_ADC_Set
  5168                           
  5169                           ;MCU_B1.c: 42: ;;
  5170                           ;MCU_B1.c: 44: ;;
  5171                           ;MCU_B1.c: 46: ;;
  5172                           ;MCU_B1.c: 48: ;;
  5173                           ;MCU_B1.c: 50: ;;
  5174                           ;MCU_B1.c: 52: WDT_Set();
  5175  0BB7  158A  239D         	fcall	_WDT_Set
  5176  0BB9  0008               	return
  5177  0BBA                     __end_of_Mcu_Initialization:	
  5178                           
  5179                           	psect	text24
  5180  0B9D                     __ptext24:	
  5181 ;; *************** function _WDT_Set *****************
  5182 ;; Defined at:
  5183 ;;		line 1073 in file "../src/MCU_B1.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;		None               void
  5190 ;; Registers used:
  5191 ;;		wreg
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5197 ;;      Params:         0       0       0       0
  5198 ;;      Locals:         0       0       0       0
  5199 ;;      Temps:          1       0       0       0
  5200 ;;      Totals:         1       0       0       0
  5201 ;;Total ram usage:        1 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    2
  5204 ;; This function calls:
  5205 ;;		Nothing
  5206 ;; This function is called by:
  5207 ;;		_Mcu_Initialization
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           
  5212                           ;psect for function _WDT_Set
  5213  0B9D                     _WDT_Set:	
  5214                           
  5215                           ;MCU_B1.c: 1075: PSA = 1;
  5216                           
  5217                           ;incstack = 0
  5218                           ; Regs used in _WDT_Set: [wreg]
  5219  0B9D  1683               	bsf	3,5	;RP0=1, select bank1
  5220  0B9E  1303               	bcf	3,6	;RP1=0, select bank1
  5221  0B9F  1581               	bsf	1,3	;volatile
  5222                           
  5223                           ;MCU_B1.c: 1076: PS0 = 1;
  5224  0BA0  1401               	bsf	1,0	;volatile
  5225                           
  5226                           ;MCU_B1.c: 1077: PS1 = 1;
  5227  0BA1  1481               	bsf	1,1	;volatile
  5228                           
  5229                           ;MCU_B1.c: 1078: PS2 = 1;
  5230  0BA2  1501               	bsf	1,2	;volatile
  5231                           
  5232                           ;MCU_B1.c: 1082: WDT.Enable = 1;
  5233  0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  5234  0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  5235  0BA5  1437               	bsf	_WDT,0
  5236                           
  5237                           ;MCU_B1.c: 1083: WDT.Timer = 10;
  5238  0BA6  300A               	movlw	10
  5239  0BA7  00F4               	movwf	??_WDT_Set
  5240  0BA8  0874               	movf	??_WDT_Set,w
  5241  0BA9  00B8               	movwf	_WDT+1
  5242  0BAA  0008               	return
  5243  0BAB                     __end_of_WDT_Set:	
  5244                           
  5245                           	psect	text25
  5246  0B8F                     __ptext25:	
  5247 ;; *************** function _TMR1_Set *****************
  5248 ;; Defined at:
  5249 ;;		line 222 in file "../src/MCU_B1.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;		None
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;		None
  5254 ;; Return value:  Size  Location     Type
  5255 ;;		None               void
  5256 ;; Registers used:
  5257 ;;		wreg
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5263 ;;      Params:         0       0       0       0
  5264 ;;      Locals:         0       0       0       0
  5265 ;;      Temps:          0       0       0       0
  5266 ;;      Totals:         0       0       0       0
  5267 ;;Total ram usage:        0 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    2
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_Mcu_Initialization
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _TMR1_Set
  5279  0B8F                     _TMR1_Set:	
  5280                           
  5281                           ;MCU_B1.c: 223: T1CON = (0x40 | 0x00 | 0x01);
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _TMR1_Set: [wreg]
  5285  0B8F  3041               	movlw	65
  5286  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  5287  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  5288  0B92  0090               	movwf	16	;volatile
  5289                           
  5290                           ;MCU_B1.c: 224: TMR1H = (int)((65536-1480)/256);
  5291  0B93  30FA               	movlw	250
  5292  0B94  008F               	movwf	15	;volatile
  5293                           
  5294                           ;MCU_B1.c: 225: TMR1L = (int)((65536-1480)%256);
  5295  0B95  3038               	movlw	56
  5296  0B96  008E               	movwf	14	;volatile
  5297                           
  5298                           ;MCU_B1.c: 226: TMR1IE = 1;
  5299  0B97  1683               	bsf	3,5	;RP0=1, select bank1
  5300  0B98  1303               	bcf	3,6	;RP1=0, select bank1
  5301  0B99  140C               	bsf	12,0	;volatile
  5302                           
  5303                           ;MCU_B1.c: 227: PEIE = 1;
  5304  0B9A  170B               	bsf	11,6	;volatile
  5305                           
  5306                           ;MCU_B1.c: 228: GIE = 1;
  5307  0B9B  178B               	bsf	11,7	;volatile
  5308  0B9C  0008               	return
  5309  0B9D                     __end_of_TMR1_Set:	
  5310                           
  5311                           	psect	text26
  5312  0C24                     __ptext26:	
  5313 ;; *************** function _IO_Set *****************
  5314 ;; Defined at:
  5315 ;;		line 60 in file "../src/MCU_B1.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;		None               void
  5322 ;; Registers used:
  5323 ;;		wreg, status,2
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5329 ;;      Params:         0       0       0       0
  5330 ;;      Locals:         0       0       0       0
  5331 ;;      Temps:          0       0       0       0
  5332 ;;      Totals:         0       0       0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_Mcu_Initialization
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _IO_Set
  5345  0C24                     _IO_Set:	
  5346                           
  5347                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5348                           
  5349                           ;incstack = 0
  5350                           ; Regs used in _IO_Set: [wreg+status,2]
  5351  0C24  302F               	movlw	47
  5352  0C25  1683               	bsf	3,5	;RP0=1, select bank1
  5353  0C26  1303               	bcf	3,6	;RP1=0, select bank1
  5354  0C27  0085               	movwf	5	;volatile
  5355                           
  5356                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5357  0C28  3001               	movlw	1
  5358  0C29  0086               	movwf	6	;volatile
  5359                           
  5360                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5361  0C2A  0187               	clrf	7	;volatile
  5362                           
  5363                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5364  0C2B  3007               	movlw	7
  5365  0C2C  1683               	bsf	3,5	;RP0=1, select bank3
  5366  0C2D  1703               	bsf	3,6	;RP1=1, select bank3
  5367  0C2E  0085               	movwf	5	;volatile
  5368                           
  5369                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5370  0C2F  3001               	movlw	1
  5371  0C30  0086               	movwf	6	;volatile
  5372                           
  5373                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5374  0C31  30AF               	movlw	175
  5375  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  5376  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  5377  0C34  0085               	movwf	5	;volatile
  5378                           
  5379                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5380  0C35  3001               	movlw	1
  5381  0C36  0086               	movwf	6	;volatile
  5382                           
  5383                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5384  0C37  0187               	clrf	7	;volatile
  5385  0C38  0008               	return
  5386  0C39                     __end_of_IO_Set:	
  5387                           
  5388                           	psect	text27
  5389  0B02                     __ptext27:	
  5390 ;; *************** function _Fosc_Set *****************
  5391 ;; Defined at:
  5392 ;;		line 56 in file "../src/MCU_B1.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;		None
  5397 ;; Return value:  Size  Location     Type
  5398 ;;		None               void
  5399 ;; Registers used:
  5400 ;;		wreg
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5406 ;;      Params:         0       0       0       0
  5407 ;;      Locals:         0       0       0       0
  5408 ;;      Temps:          0       0       0       0
  5409 ;;      Totals:         0       0       0       0
  5410 ;;Total ram usage:        0 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    2
  5413 ;; This function calls:
  5414 ;;		Nothing
  5415 ;; This function is called by:
  5416 ;;		_Mcu_Initialization
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           
  5421                           ;psect for function _Fosc_Set
  5422  0B02                     _Fosc_Set:	
  5423                           
  5424                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _Fosc_Set: [wreg]
  5428  0B02  303C               	movlw	60
  5429  0B03  1683               	bsf	3,5	;RP0=1, select bank1
  5430  0B04  1303               	bcf	3,6	;RP1=0, select bank1
  5431  0B05  0090               	movwf	16	;volatile
  5432  0B06  0008               	return
  5433  0B07                     __end_of_Fosc_Set:	
  5434                           
  5435                           	psect	text28
  5436  0B20                     __ptext28:	
  5437 ;; *************** function _ADC_Set *****************
  5438 ;; Defined at:
  5439 ;;		line 409 in file "../src/MCU_B1.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		wreg
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5453 ;;      Params:         0       0       0       0
  5454 ;;      Locals:         0       0       0       0
  5455 ;;      Temps:          0       0       0       0
  5456 ;;      Totals:         0       0       0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_Mcu_Initialization
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           
  5468                           ;psect for function _ADC_Set
  5469  0B20                     _ADC_Set:	
  5470                           
  5471                           ;MCU_B1.c: 410: ADCON1 = 0x73;
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in _ADC_Set: [wreg]
  5475  0B20  3073               	movlw	115
  5476  0B21  1683               	bsf	3,5	;RP0=1, select bank1
  5477  0B22  1303               	bcf	3,6	;RP1=0, select bank1
  5478  0B23  009F               	movwf	31	;volatile
  5479                           
  5480                           ;MCU_B1.c: 411: FVRCON = 0xc1;
  5481  0B24  30C1               	movlw	193
  5482  0B25  009D               	movwf	29	;volatile
  5483  0B26  0008               	return
  5484  0B27                     __end_of_ADC_Set:	
  5485                           
  5486                           	psect	text29
  5487  0222                     __ptext29:	
  5488 ;; *************** function _Load_Main *****************
  5489 ;; Defined at:
  5490 ;;		line 39 in file "../src/OverLoad_B1.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  i               2   11[BANK0 ] int 
  5495 ;;  Load_Status     1   10[BANK0 ] unsigned char 
  5496 ;;  error           1    9[BANK0 ] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5506 ;;      Params:         0       0       0       0
  5507 ;;      Locals:         0       4       0       0
  5508 ;;      Temps:          0       2       0       0
  5509 ;;      Totals:         0       6       0       0
  5510 ;;Total ram usage:        6 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    3
  5513 ;; This function calls:
  5514 ;;		___lwdiv
  5515 ;;		___wmul
  5516 ;;		_getLight_LoadGO
  5517 ;;		_getLight_Load_Status
  5518 ;;		_getMain_All_Error_Status
  5519 ;;		_getMain_All_LightsStatus
  5520 ;;		_getMain_Lights_Count
  5521 ;;		_setLoad_AH_AL_Restore
  5522 ;; This function is called by:
  5523 ;;		_main
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _Load_Main
  5529  0222                     _Load_Main:	
  5530                           
  5531                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5535  0222  3000               	movlw	0
  5536  0223  158A  25FA  118A   	fcall	_getMain_All_Error_Status
  5537  0226  1283               	bcf	3,5	;RP0=0, select bank0
  5538  0227  1303               	bcf	3,6	;RP1=0, select bank0
  5539  0228  00E1               	movwf	??_Load_Main
  5540  0229  0861               	movf	??_Load_Main,w
  5541  022A  00E3               	movwf	Load_Main@error
  5542                           
  5543                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  5544  022B  01E4               	clrf	Load_Main@Load_Status
  5545                           
  5546                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5547  022C  1683               	bsf	3,5	;RP0=1, select bank1
  5548  022D  1303               	bcf	3,6	;RP1=0, select bank1
  5549  022E  1C4E               	btfss	_Load^(0+128),0
  5550  022F  2C01               	goto	l729
  5551                           
  5552                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5553  0230  158A  233F  118A   	fcall	_getMain_All_LightsStatus
  5554  0233  3800               	iorlw	0
  5555  0234  1D03               	skipz
  5556  0235  2A39               	goto	l5048
  5557                           
  5558                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5559  0236  1683               	bsf	3,5	;RP0=1, select bank1
  5560  0237  1303               	bcf	3,6	;RP1=0, select bank1
  5561  0238  2A58               	goto	l5064
  5562  0239                     l5048:	
  5563                           ;OverLoad_B1.c: 47: } else {
  5564                           
  5565                           
  5566                           ;OverLoad_B1.c: 70: if (error == 0) {
  5567  0239  1283               	bcf	3,5	;RP0=0, select bank0
  5568  023A  1303               	bcf	3,6	;RP1=0, select bank0
  5569  023B  08E3               	movf	Load_Main@error,f
  5570  023C  1D03               	skipz
  5571  023D  2A55               	goto	l732
  5572                           
  5573                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5574  023E  1683               	bsf	3,5	;RP0=1, select bank1
  5575  023F  1303               	bcf	3,6	;RP1=0, select bank1
  5576  0240  14CE               	bsf	_Load^(0+128),1
  5577                           
  5578                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5579  0241  158A  2307  118A   	fcall	_getLight_LoadGO
  5580  0244  3A01               	xorlw	1
  5581  0245  1D03               	skipz
  5582  0246  2A4F               	goto	l733
  5583                           
  5584                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5585  0247  1683               	bsf	3,5	;RP0=1, select bank1
  5586  0248  1303               	bcf	3,6	;RP1=0, select bank1
  5587  0249  1DCE               	btfss	_Load^(0+128),3
  5588  024A  1BCE               	btfsc	_Load^(0+128),7
  5589  024B  2A59               	goto	l731
  5590                           
  5591                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5592  024C  15CE               	bsf	_Load^(0+128),3
  5593                           
  5594                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5595  024D  01EA               	clrf	(_Load^(0+128)+28)
  5596                           
  5597                           ;OverLoad_B1.c: 77: }
  5598                           ;OverLoad_B1.c: 78: } else {
  5599  024E  2A59               	goto	l731
  5600  024F                     l733:	
  5601                           
  5602                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5603  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5604  0250  1303               	bcf	3,6	;RP1=0, select bank1
  5605  0251  1FCE               	btfss	_Load^(0+128),7
  5606  0252  2A59               	goto	l731
  5607                           
  5608                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5609  0253  13CE               	bcf	_Load^(0+128),7
  5610                           
  5611                           ;OverLoad_B1.c: 81: }
  5612                           ;OverLoad_B1.c: 82: }
  5613                           ;OverLoad_B1.c: 83: } else {
  5614  0254  2A59               	goto	l731
  5615  0255                     l732:	
  5616                           
  5617                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5618  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5619  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5620  0257  18CE               	btfsc	_Load^(0+128),1
  5621  0258                     l5064:	
  5622                           
  5623                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5624  0258  10CE               	bcf	_Load^(0+128),1
  5625  0259                     l731:	
  5626                           
  5627                           ;OverLoad_B1.c: 86: }
  5628                           ;OverLoad_B1.c: 87: }
  5629                           ;OverLoad_B1.c: 89: }
  5630                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5631  0259  1CCE               	btfss	_Load^(0+128),1
  5632  025A  2BDA               	goto	l739
  5633                           
  5634                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5635  025B  154E               	bsf	_Load^(0+128),2
  5636                           
  5637                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5638  025C  1E4E               	btfss	_Load^(0+128),4
  5639  025D  2BD8               	goto	l740
  5640                           
  5641                           ;OverLoad_B1.c: 96: Load.Time++;
  5642  025E  3001               	movlw	1
  5643  025F  07CF               	addwf	(_Load^(0+128)+1),f
  5644  0260  1803               	skipnc
  5645  0261  0AD0               	incf	((_Load+1)^(0+128)+1),f
  5646  0262  3000               	movlw	0
  5647  0263  07D0               	addwf	((_Load+1)^(0+128)+1),f
  5648                           
  5649                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5650  0264  3000               	movlw	0
  5651  0265  0250               	subwf	((_Load+1)^(0+128)+1),w
  5652  0266  3002               	movlw	2
  5653  0267  1903               	skipnz
  5654  0268  024F               	subwf	(_Load^(0+128)+1),w
  5655  0269  1C03               	skipc
  5656  026A  0008               	return
  5657                           
  5658                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5659  026B  01CF               	clrf	(_Load^(0+128)+1)
  5660  026C  01D0               	clrf	((_Load+1)^(0+128)+1)
  5661                           
  5662                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5663  026D  124E               	bcf	_Load^(0+128),4
  5664                           
  5665                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5666  026E  3001               	movlw	1
  5667  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5668  0270  1303               	bcf	3,6	;RP1=0, select bank0
  5669  0271  00E5               	movwf	Load_Main@i
  5670  0272  3000               	movlw	0
  5671  0273  00E6               	movwf	Load_Main@i+1
  5672  0274  0866               	movf	Load_Main@i+1,w
  5673  0275  3A80               	xorlw	128
  5674  0276  00FF               	movwf	127
  5675  0277  3080               	movlw	128
  5676  0278  027F               	subwf	127,w
  5677  0279  1D03               	skipz
  5678  027A  2A7D               	goto	u6425
  5679  027B  3004               	movlw	4
  5680  027C  0265               	subwf	Load_Main@i,w
  5681  027D                     u6425:	
  5682  027D  1803               	btfsc	3,0
  5683  027E  2ABB               	goto	l5086
  5684  027F                     l5080:	
  5685                           
  5686                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5687  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0281  0865               	movf	Load_Main@i,w
  5690  0282  3ED8               	addlw	(_Load+10)& (0+255)
  5691  0283  0084               	movwf	4
  5692  0284  1383               	bcf	3,7	;select IRP bank1
  5693  0285  0800               	movf	0,w
  5694  0286  00E1               	movwf	??_Load_Main
  5695  0287  01E2               	clrf	??_Load_Main+1
  5696  0288  0861               	movf	??_Load_Main,w
  5697  0289  1683               	bsf	3,5	;RP0=1, select bank1
  5698  028A  1303               	bcf	3,6	;RP1=0, select bank1
  5699  028B  07D3               	addwf	(_Load^(0+128)+5),f
  5700  028C  1803               	skipnc
  5701  028D  0AD4               	incf	((_Load+1)^(0+128)+5),f
  5702  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5703  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0290  0862               	movf	??_Load_Main+1,w
  5705  0291  1683               	bsf	3,5	;RP0=1, select bank1
  5706  0292  1303               	bcf	3,6	;RP1=0, select bank1
  5707  0293  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5708                           
  5709                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5710  0294  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0295  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0296  0865               	movf	Load_Main@i,w
  5713  0297  3EDD               	addlw	(_Load+15)& (0+255)
  5714  0298  0084               	movwf	4
  5715  0299  0800               	movf	0,w
  5716  029A  00E1               	movwf	??_Load_Main
  5717  029B  01E2               	clrf	??_Load_Main+1
  5718  029C  0861               	movf	??_Load_Main,w
  5719  029D  1683               	bsf	3,5	;RP0=1, select bank1
  5720  029E  1303               	bcf	3,6	;RP1=0, select bank1
  5721  029F  07D5               	addwf	(_Load^(0+128)+7),f
  5722  02A0  1803               	skipnc
  5723  02A1  0AD6               	incf	((_Load+1)^(0+128)+7),f
  5724  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5725  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5726  02A4  0862               	movf	??_Load_Main+1,w
  5727  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  5728  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  5729  02A7  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5730  02A8  3001               	movlw	1
  5731  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  5732  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  5733  02AB  07E5               	addwf	Load_Main@i,f
  5734  02AC  1803               	skipnc
  5735  02AD  0AE6               	incf	Load_Main@i+1,f
  5736  02AE  3000               	movlw	0
  5737  02AF  07E6               	addwf	Load_Main@i+1,f
  5738  02B0  0866               	movf	Load_Main@i+1,w
  5739  02B1  3A80               	xorlw	128
  5740  02B2  00FF               	movwf	127
  5741  02B3  3080               	movlw	128
  5742  02B4  027F               	subwf	127,w
  5743  02B5  1D03               	skipz
  5744  02B6  2AB9               	goto	u6435
  5745  02B7  3004               	movlw	4
  5746  02B8  0265               	subwf	Load_Main@i,w
  5747  02B9                     u6435:	
  5748  02B9  1C03               	skipc
  5749  02BA  2A7F               	goto	l5080
  5750  02BB                     l5086:	
  5751                           
  5752                           ;OverLoad_B1.c: 104: }
  5753                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5754  02BB  3003               	movlw	3
  5755  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  5756  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  5757  02BE  00DA               	movwf	___lwdiv@divisor
  5758  02BF  3000               	movlw	0
  5759  02C0  00DB               	movwf	___lwdiv@divisor+1
  5760  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  5761  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  5762  02C3  0854               	movf	((_Load+1)^(0+128)+5),w
  5763  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  5764  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5765  02C6  01DD               	clrf	___lwdiv@dividend+1
  5766  02C7  07DD               	addwf	___lwdiv@dividend+1,f
  5767  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5768  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  5769  02CA  0853               	movf	(_Load^(0+128)+5),w
  5770  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5771  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5772  02CD  01DC               	clrf	___lwdiv@dividend
  5773  02CE  07DC               	addwf	___lwdiv@dividend,f
  5774  02CF  158A  2638  118A   	fcall	___lwdiv
  5775  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  5776  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  5777  02D4  085B               	movf	?___lwdiv+1,w
  5778  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  5779  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  5780  02D7  01D4               	clrf	((_Load+1)^(0+128)+5)
  5781  02D8  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5782  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  5783  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  5784  02DB  085A               	movf	?___lwdiv,w
  5785  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5786  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5787  02DE  01D3               	clrf	(_Load^(0+128)+5)
  5788  02DF  07D3               	addwf	(_Load^(0+128)+5),f
  5789                           
  5790                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5791  02E0  3003               	movlw	3
  5792  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  5793  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  5794  02E3  00DA               	movwf	___lwdiv@divisor
  5795  02E4  3000               	movlw	0
  5796  02E5  00DB               	movwf	___lwdiv@divisor+1
  5797  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5798  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5799  02E8  0856               	movf	((_Load+1)^(0+128)+7),w
  5800  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5801  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5802  02EB  01DD               	clrf	___lwdiv@dividend+1
  5803  02EC  07DD               	addwf	___lwdiv@dividend+1,f
  5804  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  5805  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  5806  02EF  0855               	movf	(_Load^(0+128)+7),w
  5807  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5808  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5809  02F2  01DC               	clrf	___lwdiv@dividend
  5810  02F3  07DC               	addwf	___lwdiv@dividend,f
  5811  02F4  158A  2638  118A   	fcall	___lwdiv
  5812  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  5813  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  5814  02F9  085B               	movf	?___lwdiv+1,w
  5815  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  5816  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  5817  02FC  01D6               	clrf	((_Load+1)^(0+128)+7)
  5818  02FD  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5819  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5820  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0300  085A               	movf	?___lwdiv,w
  5822  0301  1683               	bsf	3,5	;RP0=1, select bank1
  5823  0302  1303               	bcf	3,6	;RP1=0, select bank1
  5824  0303  01D5               	clrf	(_Load^(0+128)+7)
  5825  0304  07D5               	addwf	(_Load^(0+128)+7),f
  5826                           
  5827                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
  5828  0305  158A  244F  118A   	fcall	_setLoad_AH_AL_Restore
  5829                           
  5830                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
  5831  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5832  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5833  030A  0856               	movf	((_Load+1)^(0+128)+7),w
  5834  030B  0254               	subwf	((_Load+1)^(0+128)+5),w
  5835  030C  1D03               	skipz
  5836  030D  2B10               	goto	u6445
  5837  030E  0855               	movf	(_Load^(0+128)+7),w
  5838  030F  0253               	subwf	(_Load^(0+128)+5),w
  5839  0310                     u6445:	
  5840  0310  1C03               	skipc
  5841  0311  0008               	return
  5842                           
  5843                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
  5844  0312  0355               	decf	(_Load^(0+128)+7),w
  5845  0313  3AFF               	xorlw	255
  5846  0314  0753               	addwf	(_Load^(0+128)+5),w
  5847  0315  1283               	bcf	3,5	;RP0=0, select bank0
  5848  0316  1303               	bcf	3,6	;RP1=0, select bank0
  5849  0317  00E1               	movwf	??_Load_Main
  5850  0318  0861               	movf	??_Load_Main,w
  5851  0319  1683               	bsf	3,5	;RP0=1, select bank1
  5852  031A  1303               	bcf	3,6	;RP1=0, select bank1
  5853  031B  00E2               	movwf	(_Load^(0+128)+20)
  5854                           
  5855                           ;OverLoad_B1.c: 111: Load.ADH = 0;
  5856  031C  01D3               	clrf	(_Load^(0+128)+5)
  5857  031D  01D4               	clrf	((_Load+1)^(0+128)+5)
  5858                           
  5859                           ;OverLoad_B1.c: 112: Load.ADL = 0;
  5860  031E  01D5               	clrf	(_Load^(0+128)+7)
  5861  031F  01D6               	clrf	((_Load+1)^(0+128)+7)
  5862                           
  5863                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
  5864  0320  1DCE               	btfss	_Load^(0+128),3
  5865  0321  2B8E               	goto	l745
  5866                           
  5867                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
  5868  0322  3002               	movlw	2
  5869  0323  026A               	subwf	(_Load^(0+128)+28),w
  5870  0324  1803               	skipnc
  5871  0325  2B8E               	goto	l745
  5872                           
  5873                           ;OverLoad_B1.c: 116: Load.Count++;
  5874  0326  3001               	movlw	1
  5875  0327  1283               	bcf	3,5	;RP0=0, select bank0
  5876  0328  1303               	bcf	3,6	;RP1=0, select bank0
  5877  0329  00E1               	movwf	??_Load_Main
  5878  032A  0861               	movf	??_Load_Main,w
  5879  032B  1683               	bsf	3,5	;RP0=1, select bank1
  5880  032C  1303               	bcf	3,6	;RP1=0, select bank1
  5881  032D  07EA               	addwf	(_Load^(0+128)+28),f
  5882                           
  5883                           ;OverLoad_B1.c: 121: Load_Status = getLight_Load_Status();
  5884  032E  158A  230D  118A   	fcall	_getLight_Load_Status
  5885  0331  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0332  1303               	bcf	3,6	;RP1=0, select bank0
  5887  0333  00E1               	movwf	??_Load_Main
  5888  0334  0861               	movf	??_Load_Main,w
  5889  0335  00E4               	movwf	Load_Main@Load_Status
  5890                           
  5891                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
  5892  0336  158A  2352  118A   	fcall	_getMain_Lights_Count
  5893  0339  1283               	bcf	3,5	;RP0=0, select bank0
  5894  033A  1303               	bcf	3,6	;RP1=0, select bank0
  5895  033B  00E1               	movwf	??_Load_Main
  5896  033C  0861               	movf	??_Load_Main,w
  5897  033D  1683               	bsf	3,5	;RP0=1, select bank1
  5898  033E  1303               	bcf	3,6	;RP1=0, select bank1
  5899  033F  00ED               	movwf	(_Load^(0+128)+31)
  5900                           
  5901                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5902  0340  086A               	movf	(_Load^(0+128)+28),w
  5903  0341  3A01               	xorlw	1
  5904  0342  1D03               	skipz
  5905  0343  2B4E               	goto	l5112
  5906                           
  5907                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
  5908  0344  3002               	movlw	2
  5909  0345  1283               	bcf	3,5	;RP0=0, select bank0
  5910  0346  1303               	bcf	3,6	;RP1=0, select bank0
  5911  0347  00E1               	movwf	??_Load_Main
  5912  0348  0861               	movf	??_Load_Main,w
  5913  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5914  034A  1303               	bcf	3,6	;RP1=0, select bank1
  5915  034B  00EC               	movwf	(_Load^(0+128)+30)
  5916                           
  5917                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*1.7);
  5918  034C  3022               	movlw	34
  5919  034D  2B57               	goto	L16
  5920  034E                     l5112:	
  5921                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5922                           
  5923  034E  086A               	movf	(_Load^(0+128)+28),w
  5924  034F  3A02               	xorlw	2
  5925  0350  1D03               	skipz
  5926  0351  2B8E               	goto	l745
  5927                           
  5928                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
  5929  0352  086D               	movf	(_Load^(0+128)+31),w
  5930  0353  3A01               	xorlw	1
  5931  0354  1D03               	skipz
  5932  0355  2B5A               	goto	l5118
  5933                           
  5934                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(7*1.7);
  5935  0356  300B               	movlw	11
  5936  0357                     L16:	
  5937  0357  00E6               	movwf	(_Load^(0+128)+24)
  5938  0358  3000               	movlw	0
  5939  0359  2B8D               	goto	L17
  5940  035A                     l5118:	
  5941                           ;OverLoad_B1.c: 130: } else {
  5942                           
  5943                           
  5944                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
  5945  035A  1283               	bcf	3,5	;RP0=0, select bank0
  5946  035B  1303               	bcf	3,6	;RP1=0, select bank0
  5947  035C  08E4               	movf	Load_Main@Load_Status,f
  5948  035D  1D03               	skipz
  5949  035E  2B80               	goto	l5122
  5950                           
  5951                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(7*1.7) * Load.LightsCount;
  5952  035F  1683               	bsf	3,5	;RP0=1, select bank1
  5953  0360  1303               	bcf	3,6	;RP1=0, select bank1
  5954  0361  086D               	movf	(_Load^(0+128)+31),w
  5955  0362  1283               	bcf	3,5	;RP0=0, select bank0
  5956  0363  1303               	bcf	3,6	;RP1=0, select bank0
  5957  0364  00E1               	movwf	??_Load_Main
  5958  0365  01E2               	clrf	??_Load_Main+1
  5959  0366  0861               	movf	??_Load_Main,w
  5960  0367  00DA               	movwf	___wmul@multiplier
  5961  0368  0862               	movf	??_Load_Main+1,w
  5962  0369  00DB               	movwf	___wmul@multiplier+1
  5963  036A  300B               	movlw	11
  5964  036B  00DC               	movwf	___wmul@multiplicand
  5965  036C  3000               	movlw	0
  5966  036D  00DD               	movwf	___wmul@multiplicand+1
  5967  036E  158A  2520  118A   	fcall	___wmul
  5968  0371  1283               	bcf	3,5	;RP0=0, select bank0
  5969  0372  1303               	bcf	3,6	;RP1=0, select bank0
  5970  0373  085B               	movf	?___wmul+1,w
  5971  0374  1683               	bsf	3,5	;RP0=1, select bank1
  5972  0375  1303               	bcf	3,6	;RP1=0, select bank1
  5973  0376  01E7               	clrf	((_Load+1)^(0+128)+24)
  5974  0377  07E7               	addwf	((_Load+1)^(0+128)+24),f
  5975  0378  1283               	bcf	3,5	;RP0=0, select bank0
  5976  0379  1303               	bcf	3,6	;RP1=0, select bank0
  5977  037A  085A               	movf	?___wmul,w
  5978  037B  1683               	bsf	3,5	;RP0=1, select bank1
  5979  037C  1303               	bcf	3,6	;RP1=0, select bank1
  5980  037D  01E6               	clrf	(_Load^(0+128)+24)
  5981  037E  07E6               	addwf	(_Load^(0+128)+24),f
  5982                           
  5983                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
  5984  037F  2B8E               	goto	l745
  5985  0380                     l5122:	
  5986  0380  1283               	bcf	3,5	;RP0=0, select bank0
  5987  0381  0864               	movf	Load_Main@Load_Status,w
  5988  0382  3A01               	xorlw	1
  5989  0383  1D03               	skipz
  5990  0384  2B8E               	goto	l745
  5991                           
  5992                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(7*1.7) + Load.TotalLoad;
  5993  0385  1683               	bsf	3,5	;RP0=1, select bank1
  5994  0386  1303               	bcf	3,6	;RP1=0, select bank1
  5995  0387  0857               	movf	(_Load^(0+128)+9),w
  5996  0388  3E0B               	addlw	11
  5997  0389  00E6               	movwf	(_Load^(0+128)+24)
  5998  038A  3000               	movlw	0
  5999  038B  1803               	skipnc
  6000  038C  3001               	movlw	1
  6001  038D                     L17:	
  6002  038D  00E7               	movwf	(_Load^(0+128)+25)
  6003  038E                     l745:	
  6004                           
  6005                           ;OverLoad_B1.c: 135: }
  6006                           ;OverLoad_B1.c: 136: }
  6007                           ;OverLoad_B1.c: 137: }
  6008                           ;OverLoad_B1.c: 138: }
  6009                           ;OverLoad_B1.c: 139: }
  6010                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6011  038E  1683               	bsf	3,5	;RP0=1, select bank1
  6012  038F  1303               	bcf	3,6	;RP1=0, select bank1
  6013  0390  0862               	movf	(_Load^(0+128)+20),w
  6014  0391  1283               	bcf	3,5	;RP0=0, select bank0
  6015  0392  1303               	bcf	3,6	;RP1=0, select bank0
  6016  0393  00E1               	movwf	??_Load_Main
  6017  0394  01E2               	clrf	??_Load_Main+1
  6018  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6019  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6020  0397  0867               	movf	((_Load+1)^(0+128)+24),w
  6021  0398  1283               	bcf	3,5	;RP0=0, select bank0
  6022  0399  1303               	bcf	3,6	;RP1=0, select bank0
  6023  039A  0262               	subwf	??_Load_Main+1,w
  6024  039B  1D03               	skipz
  6025  039C  2BA3               	goto	u6525
  6026  039D  1683               	bsf	3,5	;RP0=1, select bank1
  6027  039E  1303               	bcf	3,6	;RP1=0, select bank1
  6028  039F  0866               	movf	(_Load^(0+128)+24),w
  6029  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  6030  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  6031  03A2  0261               	subwf	??_Load_Main,w
  6032  03A3                     u6525:	
  6033  03A3  1C03               	skipc
  6034  03A4  2BB2               	goto	l5134
  6035                           
  6036                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
  6037  03A5  3001               	movlw	1
  6038  03A6  00E1               	movwf	??_Load_Main
  6039  03A7  0861               	movf	??_Load_Main,w
  6040  03A8  1683               	bsf	3,5	;RP0=1, select bank1
  6041  03A9  1303               	bcf	3,6	;RP1=0, select bank1
  6042  03AA  07EB               	addwf	(_Load^(0+128)+29),f
  6043                           
  6044                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
  6045  03AB  086B               	movf	(_Load^(0+128)+29),w
  6046  03AC  026C               	subwf	(_Load^(0+128)+30),w
  6047  03AD  1803               	skipnc
  6048  03AE  0008               	return
  6049                           
  6050                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
  6051  03AF  01EB               	clrf	(_Load^(0+128)+29)
  6052                           
  6053                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
  6054  03B0  16CE               	bsf	_Load^(0+128),5
  6055                           
  6056                           ;OverLoad_B1.c: 167: }
  6057                           ;OverLoad_B1.c: 168: } else {
  6058  03B1  0008               	return
  6059  03B2                     l5134:	
  6060                           
  6061                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
  6062  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  6063  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  6064  03B4  01EB               	clrf	(_Load^(0+128)+29)
  6065                           
  6066                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
  6067  03B5  1DCE               	btfss	_Load^(0+128),3
  6068  03B6  0008               	return
  6069                           
  6070                           ;OverLoad_B1.c: 171: Load.SafeCount++;
  6071  03B7  3001               	movlw	1
  6072  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  6073  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  6074  03BA  00E1               	movwf	??_Load_Main
  6075  03BB  0861               	movf	??_Load_Main,w
  6076  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  6077  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  6078  03BE  07EE               	addwf	(_Load^(0+128)+32),f
  6079                           
  6080                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
  6081  03BF  3003               	movlw	3
  6082  03C0  026E               	subwf	(_Load^(0+128)+32),w
  6083  03C1  1C03               	skipc
  6084  03C2  0008               	return
  6085                           
  6086                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
  6087  03C3  01EE               	clrf	(_Load^(0+128)+32)
  6088                           
  6089                           ;OverLoad_B1.c: 174: Load.OK = 1;
  6090  03C4  17CE               	bsf	_Load^(0+128),7
  6091                           
  6092                           ;OverLoad_B1.c: 175: Load.Run = 0;
  6093  03C5  11CE               	bcf	_Load^(0+128),3
  6094                           
  6095                           ;OverLoad_B1.c: 176: Load.Count = 0;
  6096  03C6  01EA               	clrf	(_Load^(0+128)+28)
  6097                           
  6098                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
  6099  03C7  0862               	movf	(_Load^(0+128)+20),w
  6100  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  6101  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  6102  03CA  00E1               	movwf	??_Load_Main
  6103  03CB  0861               	movf	??_Load_Main,w
  6104  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  6105  03CD  1303               	bcf	3,6	;RP1=0, select bank1
  6106  03CE  00D7               	movwf	(_Load^(0+128)+9)
  6107                           
  6108                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
  6109  03CF  3003               	movlw	3
  6110  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  6111  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  6112  03D2  00E1               	movwf	??_Load_Main
  6113  03D3  0861               	movf	??_Load_Main,w
  6114  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  6115  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  6116  03D6  00EC               	movwf	(_Load^(0+128)+30)
  6117                           
  6118                           ;OverLoad_B1.c: 181: }
  6119                           ;OverLoad_B1.c: 182: }
  6120                           ;OverLoad_B1.c: 205: }
  6121                           ;OverLoad_B1.c: 206: }
  6122                           ;OverLoad_B1.c: 207: }
  6123                           ;OverLoad_B1.c: 208: } else {
  6124  03D7  0008               	return
  6125  03D8                     l740:	
  6126                           
  6127                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
  6128  03D8  164E               	bsf	_Load^(0+128),4
  6129                           
  6130                           ;OverLoad_B1.c: 210: }
  6131                           ;OverLoad_B1.c: 211: } else {
  6132  03D9  0008               	return
  6133  03DA                     l739:	
  6134                           
  6135                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
  6136  03DA  1D4E               	btfss	_Load^(0+128),2
  6137  03DB  2BEE               	goto	l5172
  6138                           
  6139                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
  6140  03DC  114E               	bcf	_Load^(0+128),2
  6141                           
  6142                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
  6143  03DD  124E               	bcf	_Load^(0+128),4
  6144                           
  6145                           ;OverLoad_B1.c: 217: Load.Time = 0;
  6146  03DE  01CF               	clrf	(_Load^(0+128)+1)
  6147  03DF  01D0               	clrf	((_Load+1)^(0+128)+1)
  6148                           
  6149                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
  6150  03E0  158A  244F  118A   	fcall	_setLoad_AH_AL_Restore
  6151                           
  6152                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
  6153  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  6154  03E4  1303               	bcf	3,6	;RP1=0, select bank1
  6155  03E5  01EB               	clrf	(_Load^(0+128)+29)
  6156                           
  6157                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
  6158  03E6  01EE               	clrf	(_Load^(0+128)+32)
  6159                           
  6160                           ;OverLoad_B1.c: 223: Load.ADH = 0;
  6161  03E7  01D3               	clrf	(_Load^(0+128)+5)
  6162  03E8  01D4               	clrf	((_Load+1)^(0+128)+5)
  6163                           
  6164                           ;OverLoad_B1.c: 224: Load.ADL = 0;
  6165  03E9  01D5               	clrf	(_Load^(0+128)+7)
  6166  03EA  01D6               	clrf	((_Load+1)^(0+128)+7)
  6167                           
  6168                           ;OverLoad_B1.c: 230: Load.Run = 0;
  6169  03EB  11CE               	bcf	_Load^(0+128),3
  6170                           
  6171                           ;OverLoad_B1.c: 231: Load.Count = 0;
  6172  03EC  01EA               	clrf	(_Load^(0+128)+28)
  6173                           
  6174                           ;OverLoad_B1.c: 232: Load.OK = 0;
  6175  03ED  13CE               	bcf	_Load^(0+128),7
  6176  03EE                     l5172:	
  6177                           
  6178                           ;OverLoad_B1.c: 254: }
  6179                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
  6180  03EE  1ECE               	btfss	_Load^(0+128),5
  6181  03EF  0008               	return
  6182                           
  6183                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
  6184  03F0  3001               	movlw	1
  6185  03F1  07D1               	addwf	(_Load^(0+128)+3),f
  6186  03F2  1803               	skipnc
  6187  03F3  0AD2               	incf	((_Load+1)^(0+128)+3),f
  6188  03F4  3000               	movlw	0
  6189  03F5  07D2               	addwf	((_Load+1)^(0+128)+3),f
  6190                           
  6191                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
  6192  03F6  3001               	movlw	1
  6193  03F7  0252               	subwf	((_Load+1)^(0+128)+3),w
  6194  03F8  30F4               	movlw	244
  6195  03F9  1903               	skipnz
  6196  03FA  0251               	subwf	(_Load^(0+128)+3),w
  6197  03FB  1C03               	skipc
  6198  03FC  0008               	return
  6199                           
  6200                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
  6201  03FD  01D1               	clrf	(_Load^(0+128)+3)
  6202  03FE  01D2               	clrf	((_Load+1)^(0+128)+3)
  6203                           
  6204                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
  6205  03FF  12CE               	bcf	_Load^(0+128),5
  6206                           
  6207                           ;OverLoad_B1.c: 260: }
  6208                           ;OverLoad_B1.c: 261: }
  6209                           ;OverLoad_B1.c: 262: }
  6210                           ;OverLoad_B1.c: 263: } else {
  6211  0400  0008               	return
  6212  0401                     l729:	
  6213                           
  6214                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
  6215  0401  1283               	bcf	3,5	;RP0=0, select bank0
  6216  0402  1303               	bcf	3,6	;RP1=0, select bank0
  6217  0403  1C20               	btfss	_myMain,0
  6218  0404  0008               	return
  6219                           
  6220                           ;OverLoad_B1.c: 265: Load.Enable = 1;
  6221  0405  1683               	bsf	3,5	;RP0=1, select bank1
  6222  0406  1303               	bcf	3,6	;RP1=0, select bank1
  6223  0407  144E               	bsf	_Load^(0+128),0
  6224  0408  0008               	return
  6225  0409                     __end_of_Load_Main:	
  6226                           
  6227                           	psect	text30
  6228  0B52                     __ptext30:	
  6229 ;; *************** function _getMain_Lights_Count *****************
  6230 ;; Defined at:
  6231 ;;		line 466 in file "../src/Main_B1.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  status1         1    5[COMMON] unsigned char 
  6236 ;;  count           1    4[COMMON] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      unsigned char 
  6239 ;; Registers used:
  6240 ;;		wreg, status,2
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6246 ;;      Params:         0       0       0       0
  6247 ;;      Locals:         2       0       0       0
  6248 ;;      Temps:          0       0       0       0
  6249 ;;      Totals:         2       0       0       0
  6250 ;;Total ram usage:        2 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    2
  6253 ;; This function calls:
  6254 ;;		Nothing
  6255 ;; This function is called by:
  6256 ;;		_Load_Main
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _getMain_Lights_Count
  6262  0B52                     _getMain_Lights_Count:	
  6263                           
  6264                           ;Main_B1.c: 467: char count = 0;
  6265                           
  6266                           ;incstack = 0
  6267                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6268  0B52  01F4               	clrf	getMain_Lights_Count@count
  6269                           
  6270                           ;Main_B1.c: 483: char status1 = Lights1.Loop == 1 ? 1 : 0;
  6271  0B53  3000               	movlw	0
  6272  0B54  1283               	bcf	3,5	;RP0=0, select bank0
  6273  0B55  1303               	bcf	3,6	;RP1=0, select bank0
  6274  0B56  18C8               	btfsc	_Lights1+1,1
  6275  0B57  3001               	movlw	1
  6276  0B58  00F5               	movwf	getMain_Lights_Count@status1
  6277                           
  6278                           ;Main_B1.c: 494: return count = status1;
  6279  0B59  0875               	movf	getMain_Lights_Count@status1,w
  6280  0B5A  00F4               	movwf	getMain_Lights_Count@count
  6281  0B5B  0008               	return
  6282  0B5C                     __end_of_getMain_Lights_Count:	
  6283                           
  6284                           	psect	text31
  6285  0B0D                     __ptext31:	
  6286 ;; *************** function _getLight_Load_Status *****************
  6287 ;; Defined at:
  6288 ;;		line 358 in file "../src/TriacRelay_B1.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  loadstatus      1    4[COMMON] unsigned char 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      unsigned char 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6302 ;;      Params:         0       0       0       0
  6303 ;;      Locals:         1       0       0       0
  6304 ;;      Temps:          0       0       0       0
  6305 ;;      Totals:         1       0       0       0
  6306 ;;Total ram usage:        1 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    2
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_Load_Main
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function _getLight_Load_Status
  6318  0B0D                     _getLight_Load_Status:	
  6319                           
  6320                           ;TriacRelay_B1.c: 359: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6324  0B0D  3000               	movlw	0
  6325  0B0E  18F7               	btfsc	_Light,1
  6326  0B0F  3001               	movlw	1
  6327  0B10  00F4               	movwf	getLight_Load_Status@loadstatus
  6328                           
  6329                           ;TriacRelay_B1.c: 360: return loadstatus;
  6330  0B11  0874               	movf	getLight_Load_Status@loadstatus,w
  6331  0B12  0008               	return
  6332  0B13                     __end_of_getLight_Load_Status:	
  6333                           
  6334                           	psect	text32
  6335  0B07                     __ptext32:	
  6336 ;; *************** function _getLight_LoadGO *****************
  6337 ;; Defined at:
  6338 ;;		line 353 in file "../src/TriacRelay_B1.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;		None
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  loadgo          1    4[COMMON] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      unsigned char 
  6345 ;; Registers used:
  6346 ;;		wreg, status,2
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6352 ;;      Params:         0       0       0       0
  6353 ;;      Locals:         1       0       0       0
  6354 ;;      Temps:          0       0       0       0
  6355 ;;      Totals:         1       0       0       0
  6356 ;;Total ram usage:        1 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    2
  6359 ;; This function calls:
  6360 ;;		Nothing
  6361 ;; This function is called by:
  6362 ;;		_Load_Main
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _getLight_LoadGO
  6368  0B07                     _getLight_LoadGO:	
  6369                           
  6370                           ;TriacRelay_B1.c: 354: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6374  0B07  3000               	movlw	0
  6375  0B08  1877               	btfsc	_Light,0
  6376  0B09  3001               	movlw	1
  6377  0B0A  00F4               	movwf	getLight_LoadGO@loadgo
  6378                           
  6379                           ;TriacRelay_B1.c: 355: return loadgo;
  6380  0B0B  0874               	movf	getLight_LoadGO@loadgo,w
  6381  0B0C  0008               	return
  6382  0B0D                     __end_of_getLight_LoadGO:	
  6383                           
  6384                           	psect	text33
  6385  0D20                     __ptext33:	
  6386 ;; *************** function ___wmul *****************
  6387 ;; Defined at:
  6388 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6391 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  product         2    4[COMMON] unsigned int 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  2    0[BANK0 ] unsigned int 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6403 ;;      Params:         0       4       0       0
  6404 ;;      Locals:         2       0       0       0
  6405 ;;      Temps:          0       0       0       0
  6406 ;;      Totals:         2       4       0       0
  6407 ;;Total ram usage:        6 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    2
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_Load_Main
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function ___wmul
  6419  0D20                     ___wmul:	
  6420                           
  6421                           ;incstack = 0
  6422                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6423  0D20  01F4               	clrf	___wmul@product
  6424  0D21  01F5               	clrf	___wmul@product+1
  6425  0D22                     l4818:	
  6426  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  6427  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  6428  0D24  1C5A               	btfss	___wmul@multiplier,0
  6429  0D25  2D2C               	goto	l1415
  6430  0D26  085C               	movf	___wmul@multiplicand,w
  6431  0D27  07F4               	addwf	___wmul@product,f
  6432  0D28  1803               	skipnc
  6433  0D29  0AF5               	incf	___wmul@product+1,f
  6434  0D2A  085D               	movf	___wmul@multiplicand+1,w
  6435  0D2B  07F5               	addwf	___wmul@product+1,f
  6436  0D2C                     l1415:	
  6437  0D2C  3001               	movlw	1
  6438  0D2D                     u5855:	
  6439  0D2D  1003               	clrc
  6440  0D2E  0DDC               	rlf	___wmul@multiplicand,f
  6441  0D2F  0DDD               	rlf	___wmul@multiplicand+1,f
  6442  0D30  3EFF               	addlw	-1
  6443  0D31  1D03               	skipz
  6444  0D32  2D2D               	goto	u5855
  6445  0D33  3001               	movlw	1
  6446  0D34                     u5865:	
  6447  0D34  1003               	clrc
  6448  0D35  0CDB               	rrf	___wmul@multiplier+1,f
  6449  0D36  0CDA               	rrf	___wmul@multiplier,f
  6450  0D37  3EFF               	addlw	-1
  6451  0D38  1D03               	skipz
  6452  0D39  2D34               	goto	u5865
  6453  0D3A  085B               	movf	___wmul@multiplier+1,w
  6454  0D3B  045A               	iorwf	___wmul@multiplier,w
  6455  0D3C  1D03               	skipz
  6456  0D3D  2D22               	goto	l4818
  6457  0D3E  0875               	movf	___wmul@product+1,w
  6458  0D3F  01DB               	clrf	?___wmul+1
  6459  0D40  07DB               	addwf	?___wmul+1,f
  6460  0D41  0874               	movf	___wmul@product,w
  6461  0D42  01DA               	clrf	?___wmul
  6462  0D43  07DA               	addwf	?___wmul,f
  6463  0D44  0008               	return
  6464  0D45                     __end_of___wmul:	
  6465                           
  6466                           	psect	text34
  6467  0E38                     __ptext34:	
  6468 ;; *************** function ___lwdiv *****************
  6469 ;; Defined at:
  6470 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  divisor         2    0[BANK0 ] unsigned int 
  6473 ;;  dividend        2    2[BANK0 ] unsigned int 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  quotient        2    5[BANK0 ] unsigned int 
  6476 ;;  counter         1    4[BANK0 ] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  2    0[BANK0 ] unsigned int 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6486 ;;      Params:         0       4       0       0
  6487 ;;      Locals:         0       3       0       0
  6488 ;;      Temps:          1       0       0       0
  6489 ;;      Totals:         1       7       0       0
  6490 ;;Total ram usage:        8 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    2
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_Load_Main
  6497 ;;		_getPIR_AD
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function ___lwdiv
  6503  0E38                     ___lwdiv:	
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6507  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  6508  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  6509  0E3A  01DF               	clrf	___lwdiv@quotient
  6510  0E3B  01E0               	clrf	___lwdiv@quotient+1
  6511  0E3C  085B               	movf	___lwdiv@divisor+1,w
  6512  0E3D  045A               	iorwf	___lwdiv@divisor,w
  6513  0E3E  1903               	skipnz
  6514  0E3F  2E71               	goto	l4850
  6515  0E40  01DE               	clrf	___lwdiv@counter
  6516  0E41  0ADE               	incf	___lwdiv@counter,f
  6517  0E42                     l4838:	
  6518  0E42  1BDB               	btfsc	___lwdiv@divisor+1,7
  6519  0E43  2E50               	goto	l4840
  6520  0E44  3001               	movlw	1
  6521  0E45                     u5895:	
  6522  0E45  1003               	clrc
  6523  0E46  0DDA               	rlf	___lwdiv@divisor,f
  6524  0E47  0DDB               	rlf	___lwdiv@divisor+1,f
  6525  0E48  3EFF               	addlw	-1
  6526  0E49  1D03               	skipz
  6527  0E4A  2E45               	goto	u5895
  6528  0E4B  3001               	movlw	1
  6529  0E4C  00F4               	movwf	??___lwdiv
  6530  0E4D  0874               	movf	??___lwdiv,w
  6531  0E4E  07DE               	addwf	___lwdiv@counter,f
  6532  0E4F  2E42               	goto	l4838
  6533  0E50                     l4840:	
  6534  0E50  3001               	movlw	1
  6535  0E51                     u5915:	
  6536  0E51  1003               	clrc
  6537  0E52  0DDF               	rlf	___lwdiv@quotient,f
  6538  0E53  0DE0               	rlf	___lwdiv@quotient+1,f
  6539  0E54  3EFF               	addlw	-1
  6540  0E55  1D03               	skipz
  6541  0E56  2E51               	goto	u5915
  6542  0E57  085B               	movf	___lwdiv@divisor+1,w
  6543  0E58  025D               	subwf	___lwdiv@dividend+1,w
  6544  0E59  1D03               	skipz
  6545  0E5A  2E5D               	goto	u5925
  6546  0E5B  085A               	movf	___lwdiv@divisor,w
  6547  0E5C  025C               	subwf	___lwdiv@dividend,w
  6548  0E5D                     u5925:	
  6549  0E5D  1C03               	skipc
  6550  0E5E  2E66               	goto	l4846
  6551  0E5F  085A               	movf	___lwdiv@divisor,w
  6552  0E60  02DC               	subwf	___lwdiv@dividend,f
  6553  0E61  085B               	movf	___lwdiv@divisor+1,w
  6554  0E62  1C03               	skipc
  6555  0E63  03DD               	decf	___lwdiv@dividend+1,f
  6556  0E64  02DD               	subwf	___lwdiv@dividend+1,f
  6557  0E65  145F               	bsf	___lwdiv@quotient,0
  6558  0E66                     l4846:	
  6559  0E66  3001               	movlw	1
  6560  0E67                     u5935:	
  6561  0E67  1003               	clrc
  6562  0E68  0CDB               	rrf	___lwdiv@divisor+1,f
  6563  0E69  0CDA               	rrf	___lwdiv@divisor,f
  6564  0E6A  3EFF               	addlw	-1
  6565  0E6B  1D03               	skipz
  6566  0E6C  2E67               	goto	u5935
  6567  0E6D  3001               	movlw	1
  6568  0E6E  02DE               	subwf	___lwdiv@counter,f
  6569  0E6F  1D03               	btfss	3,2
  6570  0E70  2E50               	goto	l4840
  6571  0E71                     l4850:	
  6572  0E71  0860               	movf	___lwdiv@quotient+1,w
  6573  0E72  01DB               	clrf	?___lwdiv+1
  6574  0E73  07DB               	addwf	?___lwdiv+1,f
  6575  0E74  085F               	movf	___lwdiv@quotient,w
  6576  0E75  01DA               	clrf	?___lwdiv
  6577  0E76  07DA               	addwf	?___lwdiv,f
  6578  0E77  0008               	return
  6579  0E78                     __end_of___lwdiv:	
  6580                           
  6581                           	psect	text35
  6582  0AEB                     __ptext35:	
  6583 ;; *************** function _Load_Initialization *****************
  6584 ;; Defined at:
  6585 ;;		line 9 in file "../src/OverLoad_B1.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;		None
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;		None
  6590 ;; Return value:  Size  Location     Type
  6591 ;;		None               void
  6592 ;; Registers used:
  6593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6599 ;;      Params:         0       0       0       0
  6600 ;;      Locals:         0       0       0       0
  6601 ;;      Temps:          0       0       0       0
  6602 ;;      Totals:         0       0       0       0
  6603 ;;Total ram usage:        0 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    3
  6606 ;; This function calls:
  6607 ;;		_setLoad_AH_AL_Restore
  6608 ;; This function is called by:
  6609 ;;		_main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _Load_Initialization
  6615  0AEB                     _Load_Initialization:	
  6616                           
  6617                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6621  0AEB  158A  244F         	fcall	_setLoad_AH_AL_Restore
  6622  0AED  0008               	return
  6623  0AEE                     __end_of_Load_Initialization:	
  6624                           
  6625                           	psect	text36
  6626  0C4F                     __ptext36:	
  6627 ;; *************** function _setLoad_AH_AL_Restore *****************
  6628 ;; Defined at:
  6629 ;;		line 291 in file "../src/OverLoad_B1.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  i               1    5[COMMON] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6643 ;;      Params:         0       0       0       0
  6644 ;;      Locals:         1       0       0       0
  6645 ;;      Temps:          1       0       0       0
  6646 ;;      Totals:         2       0       0       0
  6647 ;;Total ram usage:        2 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    2
  6650 ;; This function calls:
  6651 ;;		Nothing
  6652 ;; This function is called by:
  6653 ;;		_Load_Initialization
  6654 ;;		_Load_Main
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _setLoad_AH_AL_Restore
  6660  0C4F                     _setLoad_AH_AL_Restore:	
  6661                           
  6662                           ;OverLoad_B1.c: 292: char i;
  6663                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6667  0C4F  01F5               	clrf	setLoad_AH_AL_Restore@i
  6668  0C50                     L18:	
  6669  0C50  3005               	movlw	5
  6670  0C51  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6671  0C52  1803               	btfsc	3,0
  6672  0C53  0008               	return
  6673                           
  6674                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
  6675  0C54  0875               	movf	setLoad_AH_AL_Restore@i,w
  6676  0C55  3ED8               	addlw	(_Load+10)& (0+255)
  6677  0C56  0084               	movwf	4
  6678  0C57  1383               	bcf	3,7	;select IRP bank1
  6679  0C58  0180               	clrf	0
  6680                           
  6681                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xff;
  6682  0C59  30FF               	movlw	255
  6683  0C5A  00F4               	movwf	??_setLoad_AH_AL_Restore
  6684  0C5B  0875               	movf	setLoad_AH_AL_Restore@i,w
  6685  0C5C  3EDD               	addlw	(_Load+15)& (0+255)
  6686  0C5D  0084               	movwf	4
  6687  0C5E  0874               	movf	??_setLoad_AH_AL_Restore,w
  6688  0C5F  0080               	movwf	0
  6689  0C60  3001               	movlw	1
  6690  0C61  00F4               	movwf	??_setLoad_AH_AL_Restore
  6691  0C62  0874               	movf	??_setLoad_AH_AL_Restore,w
  6692  0C63  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6693  0C64  2C50               	goto	L18
  6694  0C65                     __end_of_setLoad_AH_AL_Restore:	
  6695                           
  6696                           	psect	text37
  6697  0CFF                     __ptext37:	
  6698 ;; *************** function _Lights_Main *****************
  6699 ;; Defined at:
  6700 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;		None               void
  6707 ;; Registers used:
  6708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6714 ;;      Params:         0       0       0       0
  6715 ;;      Locals:         0       0       0       0
  6716 ;;      Temps:          0       0       0       0
  6717 ;;      Totals:         0       0       0       0
  6718 ;;Total ram usage:        0 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    5
  6721 ;; This function calls:
  6722 ;;		_Lights_Close
  6723 ;;		_Lights_Control
  6724 ;;		_getLoad_OK
  6725 ;;		_getMain_All_Error_Status
  6726 ;;		_getMain_All_LightsStatus
  6727 ;;		_setLights_Main
  6728 ;; This function is called by:
  6729 ;;		_main
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           
  6734                           ;psect for function _Lights_Main
  6735  0CFF                     _Lights_Main:	
  6736                           
  6737                           ;TriacRelay_B1.c: 67: if (Light.LoadGO == 1) {
  6738                           
  6739                           ;incstack = 0
  6740                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6741  0CFF  1C77               	btfss	_Light,0
  6742  0D00  2D15               	goto	l5190
  6743                           
  6744                           ;TriacRelay_B1.c: 68: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6745  0D01  158A  2327  158A   	fcall	_getLoad_OK
  6746  0D04  3A01               	xorlw	1
  6747  0D05  1903               	skipnz
  6748  0D06  2D14               	goto	l1299
  6749  0D07  3000               	movlw	0
  6750  0D08  158A  25FA  158A   	fcall	_getMain_All_Error_Status
  6751  0D0B  3800               	iorlw	0
  6752  0D0C  1D03               	skipz
  6753  0D0D  2D14               	goto	l1299
  6754  0D0E  158A  233F  158A   	fcall	_getMain_All_LightsStatus
  6755  0D11  3800               	iorlw	0
  6756  0D12  1D03               	skipz
  6757  0D13  2D15               	goto	l5190
  6758  0D14                     l1299:	
  6759                           
  6760                           ;TriacRelay_B1.c: 69: Light.LoadGO = 0;
  6761  0D14  1077               	bcf	_Light,0
  6762  0D15                     l5190:	
  6763                           
  6764                           ;TriacRelay_B1.c: 70: }
  6765                           ;TriacRelay_B1.c: 71: }
  6766                           ;TriacRelay_B1.c: 75: setLights_Main(1);
  6767  0D15  3001               	movlw	1
  6768  0D16  158A  2596  158A   	fcall	_setLights_Main
  6769                           
  6770                           ;TriacRelay_B1.c: 76: Lights_Control(1);
  6771  0D19  3001               	movlw	1
  6772  0D1A  118A  2541  158A   	fcall	_Lights_Control
  6773                           
  6774                           ;TriacRelay_B1.c: 89: Lights_Close();
  6775  0D1D  158A  23DC         	fcall	_Lights_Close
  6776  0D1F  0008               	return
  6777  0D20                     __end_of_Lights_Main:	
  6778                           
  6779                           	psect	text38
  6780  0D96                     __ptext38:	
  6781 ;; *************** function _setLights_Main *****************
  6782 ;; Defined at:
  6783 ;;		line 101 in file "../src/TriacRelay_B1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  lights          1    wreg     unsigned char 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  lights          1    3[BANK0 ] unsigned char 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6797 ;;      Params:         0       0       0       0
  6798 ;;      Locals:         0       1       0       0
  6799 ;;      Temps:          0       0       0       0
  6800 ;;      Totals:         0       1       0       0
  6801 ;;Total ram usage:        1 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    4
  6804 ;; This function calls:
  6805 ;;		_LightsPointSelect
  6806 ;;		_getLights_Allow_Condition
  6807 ;;		_setLights
  6808 ;; This function is called by:
  6809 ;;		_Lights_Main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _setLights_Main
  6815  0D96                     _setLights_Main:	
  6816                           
  6817                           ;incstack = 0
  6818                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6819                           ;setLights_Main@lights stored from wreg
  6820  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  6821  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  6822  0D98  00DD               	movwf	setLights_Main@lights
  6823                           
  6824                           ;TriacRelay_B1.c: 102: LightsPointSelect(lights);
  6825  0D99  085D               	movf	setLights_Main@lights,w
  6826  0D9A  158A  2348  158A   	fcall	_LightsPointSelect
  6827                           
  6828                           ;TriacRelay_B1.c: 103: if (Lights->GO == 0) {
  6829  0D9D  0878               	movf	_Lights,w
  6830  0D9E  0084               	movwf	4
  6831  0D9F  1383               	bcf	3,7	;select IRP bank0
  6832  0DA0  1880               	btfsc	0,1
  6833  0DA1  0008               	return
  6834                           
  6835                           ;TriacRelay_B1.c: 104: if (Lights->Trigger == 1) {
  6836  0DA2  0878               	movf	_Lights,w
  6837  0DA3  0084               	movwf	4
  6838  0DA4  1D80               	btfss	0,3
  6839  0DA5  0008               	return
  6840                           
  6841                           ;TriacRelay_B1.c: 105: if (getLights_Allow_Condition(lights) == 0) {
  6842  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  6843  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  6844  0DA8  085D               	movf	setLights_Main@lights,w
  6845  0DA9  158A  2465  158A   	fcall	_getLights_Allow_Condition
  6846  0DAC  3800               	iorlw	0
  6847  0DAD  1D03               	skipz
  6848  0DAE  0008               	return
  6849                           
  6850                           ;TriacRelay_B1.c: 106: Lights->Trigger = 0;
  6851  0DAF  0878               	movf	_Lights,w
  6852  0DB0  0084               	movwf	4
  6853  0DB1  1383               	bcf	3,7	;select IRP bank0
  6854  0DB2  1180               	bcf	0,3
  6855                           
  6856                           ;TriacRelay_B1.c: 108: if (Lights->Switch == 1) {
  6857  0DB3  0878               	movf	_Lights,w
  6858  0DB4  0084               	movwf	4
  6859  0DB5  1E00               	btfss	0,4
  6860  0DB6  2DBF               	goto	l4782
  6861                           
  6862                           ;TriacRelay_B1.c: 109: setLights(lights, 1);
  6863  0DB7  1283               	bcf	3,5	;RP0=0, select bank0
  6864  0DB8  1303               	bcf	3,6	;RP1=0, select bank0
  6865  0DB9  01DA               	clrf	setLights@status
  6866  0DBA  0ADA               	incf	setLights@status,f
  6867  0DBB  085D               	movf	setLights_Main@lights,w
  6868  0DBC  158A  2678         	fcall	_setLights
  6869                           
  6870                           ;TriacRelay_B1.c: 110: } else {
  6871  0DBE  0008               	return
  6872  0DBF                     l4782:	
  6873                           
  6874                           ;TriacRelay_B1.c: 111: setLights(lights, 0);
  6875  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  6876  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  6877  0DC1  01DA               	clrf	setLights@status
  6878  0DC2  085D               	movf	setLights_Main@lights,w
  6879  0DC3  158A  2678         	fcall	_setLights
  6880  0DC5  0008               	return
  6881  0DC6                     __end_of_setLights_Main:	
  6882                           
  6883                           	psect	text39
  6884  0E78                     __ptext39:	
  6885 ;; *************** function _setLights *****************
  6886 ;; Defined at:
  6887 ;;		line 119 in file "../src/TriacRelay_B1.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  lights          1    wreg     unsigned char 
  6890 ;;  status          1    0[BANK0 ] unsigned char 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;  lights          1    2[BANK0 ] unsigned char 
  6893 ;; Return value:  Size  Location     Type
  6894 ;;		None               void
  6895 ;; Registers used:
  6896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6902 ;;      Params:         0       1       0       0
  6903 ;;      Locals:         0       1       0       0
  6904 ;;      Temps:          0       1       0       0
  6905 ;;      Totals:         0       3       0       0
  6906 ;;Total ram usage:        3 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    3
  6909 ;; This function calls:
  6910 ;;		_LightsPointSelect
  6911 ;;		_setLights_Line
  6912 ;; This function is called by:
  6913 ;;		_setLights_Main
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           
  6918                           ;psect for function _setLights
  6919  0E78                     _setLights:	
  6920                           
  6921                           ;incstack = 0
  6922                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6923                           ;setLights@lights stored from wreg
  6924  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  6925  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  6926  0E7A  00DC               	movwf	setLights@lights
  6927                           
  6928                           ;TriacRelay_B1.c: 121: LightsPointSelect(lights);
  6929  0E7B  085C               	movf	setLights@lights,w
  6930  0E7C  158A  2348  158A   	fcall	_LightsPointSelect
  6931                           
  6932                           ;TriacRelay_B1.c: 128: Lights->GO = 1;
  6933  0E7F  0878               	movf	_Lights,w
  6934  0E80  0084               	movwf	4
  6935  0E81  1383               	bcf	3,7	;select IRP bank0
  6936  0E82  1480               	bsf	0,1
  6937                           
  6938                           ;TriacRelay_B1.c: 129: if (status == 1) {
  6939  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  6940  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  6941  0E85  085A               	movf	setLights@status,w
  6942  0E86  3A01               	xorlw	1
  6943  0E87  1D03               	skipz
  6944  0E88  2EA4               	goto	l4568
  6945                           
  6946                           ;TriacRelay_B1.c: 135: if (Lights->Status == 0) {
  6947  0E89  0878               	movf	_Lights,w
  6948  0E8A  0084               	movwf	4
  6949  0E8B  1900               	btfsc	0,2
  6950  0E8C  2EC4               	goto	l4576
  6951                           
  6952                           ;TriacRelay_B1.c: 136: Lights->Status = 1;
  6953  0E8D  0878               	movf	_Lights,w
  6954  0E8E  0084               	movwf	4
  6955  0E8F  1500               	bsf	0,2
  6956                           
  6957                           ;TriacRelay_B1.c: 137: Lights->Loop = 1;
  6958  0E90  0A78               	incf	_Lights,w
  6959  0E91  0084               	movwf	4
  6960  0E92  1480               	bsf	0,1
  6961                           
  6962                           ;TriacRelay_B1.c: 138: Lights->RelayValue = 100;
  6963  0E93  3064               	movlw	100
  6964  0E94  00DB               	movwf	??_setLights
  6965  0E95  0878               	movf	_Lights,w
  6966  0E96  3E06               	addlw	6
  6967  0E97  0084               	movwf	4
  6968  0E98  085B               	movf	??_setLights,w
  6969  0E99  0080               	movwf	0
  6970                           
  6971                           ;TriacRelay_B1.c: 139: Lights->TriacValue = 130;
  6972  0E9A  3082               	movlw	130
  6973  0E9B  00DB               	movwf	??_setLights
  6974  0E9C  0878               	movf	_Lights,w
  6975  0E9D  3E04               	addlw	4
  6976  0E9E  0084               	movwf	4
  6977  0E9F  085B               	movf	??_setLights,w
  6978  0EA0  0080               	movwf	0
  6979                           
  6980                           ;TriacRelay_B1.c: 141: Light.Load_Status = 1;
  6981  0EA1  14F7               	bsf	_Light,1
  6982                           
  6983                           ;TriacRelay_B1.c: 142: setLights_Line(lights);
  6984  0EA2  085C               	movf	setLights@lights,w
  6985  0EA3  2EC1               	goto	L19
  6986  0EA4                     l4568:	
  6987                           ;TriacRelay_B1.c: 144: }
  6988                           ;TriacRelay_B1.c: 145: } else {
  6989                           
  6990                           
  6991                           ;TriacRelay_B1.c: 146: if (Lights->Status == 1) {
  6992  0EA4  0878               	movf	_Lights,w
  6993  0EA5  0084               	movwf	4
  6994  0EA6  1383               	bcf	3,7	;select IRP bank0
  6995  0EA7  1D00               	btfss	0,2
  6996  0EA8  2EC4               	goto	l4576
  6997                           
  6998                           ;TriacRelay_B1.c: 147: Lights->Status = 0;
  6999  0EA9  0878               	movf	_Lights,w
  7000  0EAA  0084               	movwf	4
  7001  0EAB  1100               	bcf	0,2
  7002                           
  7003                           ;TriacRelay_B1.c: 148: Lights->Loop = 0;
  7004  0EAC  0A78               	incf	_Lights,w
  7005  0EAD  0084               	movwf	4
  7006  0EAE  1080               	bcf	0,1
  7007                           
  7008                           ;TriacRelay_B1.c: 149: Lights->RelayValue = 40;
  7009  0EAF  3028               	movlw	40
  7010  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  7011  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  7012  0EB2  00DB               	movwf	??_setLights
  7013  0EB3  0878               	movf	_Lights,w
  7014  0EB4  3E06               	addlw	6
  7015  0EB5  0084               	movwf	4
  7016  0EB6  085B               	movf	??_setLights,w
  7017  0EB7  0080               	movwf	0
  7018                           
  7019                           ;TriacRelay_B1.c: 150: Lights->TriacValue = 70;
  7020  0EB8  3046               	movlw	70
  7021  0EB9  00DB               	movwf	??_setLights
  7022  0EBA  0878               	movf	_Lights,w
  7023  0EBB  3E04               	addlw	4
  7024  0EBC  0084               	movwf	4
  7025  0EBD  085B               	movf	??_setLights,w
  7026  0EBE  0080               	movwf	0
  7027                           
  7028                           ;TriacRelay_B1.c: 152: Light.Load_Status = 0;
  7029  0EBF  10F7               	bcf	_Light,1
  7030                           
  7031                           ;TriacRelay_B1.c: 153: setLights_Line(0);
  7032  0EC0  3000               	movlw	0
  7033  0EC1                     L19:	
  7034  0EC1  158A  2381  158A   	fcall	_setLights_Line
  7035  0EC4                     l4576:	
  7036                           
  7037                           ;TriacRelay_B1.c: 155: }
  7038                           ;TriacRelay_B1.c: 156: }
  7039                           ;TriacRelay_B1.c: 158: if (lights == 1) {
  7040  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  7041  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  7042  0EC6  085C               	movf	setLights@lights,w
  7043  0EC7  3A01               	xorlw	1
  7044  0EC8  1D03               	skipz
  7045  0EC9  0008               	return
  7046                           
  7047                           ;TriacRelay_B1.c: 159: RB2 = 1;
  7048  0ECA  1506               	bsf	6,2	;volatile
  7049  0ECB  0008               	return
  7050  0ECC                     __end_of_setLights:	
  7051                           
  7052                           	psect	text40
  7053  0B81                     __ptext40:	
  7054 ;; *************** function _setLights_Line *****************
  7055 ;; Defined at:
  7056 ;;		line 241 in file "../src/TriacRelay_B1.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  lights          1    wreg     unsigned char 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  lights          1    4[COMMON] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;		None               void
  7063 ;; Registers used:
  7064 ;;		wreg
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7070 ;;      Params:         0       0       0       0
  7071 ;;      Locals:         1       0       0       0
  7072 ;;      Temps:          0       0       0       0
  7073 ;;      Totals:         1       0       0       0
  7074 ;;Total ram usage:        1 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    2
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_setLights
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           
  7085                           ;psect for function _setLights_Line
  7086  0B81                     _setLights_Line:	
  7087                           
  7088                           ;incstack = 0
  7089                           ; Regs used in _setLights_Line: [wreg]
  7090                           ;setLights_Line@lights stored from wreg
  7091  0B81  00F4               	movwf	setLights_Line@lights
  7092                           
  7093                           ;TriacRelay_B1.c: 242: Light.LoadGO = 1;
  7094  0B82  1477               	bsf	_Light,0
  7095                           
  7096                           ;TriacRelay_B1.c: 244: Lights1.Line = 0;
  7097  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  7098  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  7099  0B85  1048               	bcf	_Lights1+1,0
  7100                           
  7101                           ;TriacRelay_B1.c: 245: if (lights == 1 && lights != 0) {
  7102  0B86  0874               	movf	setLights_Line@lights,w
  7103  0B87  3A01               	xorlw	1
  7104  0B88  1D03               	skipz
  7105  0B89  0008               	return
  7106  0B8A  0874               	movf	setLights_Line@lights,w
  7107  0B8B  1903               	btfsc	3,2
  7108  0B8C  0008               	return
  7109                           
  7110                           ;TriacRelay_B1.c: 246: Lights1.Line = 1;
  7111  0B8D  1448               	bsf	_Lights1+1,0
  7112  0B8E  0008               	return
  7113  0B8F                     __end_of_setLights_Line:	
  7114                           
  7115                           	psect	text41
  7116  0C65                     __ptext41:	
  7117 ;; *************** function _getLights_Allow_Condition *****************
  7118 ;; Defined at:
  7119 ;;		line 320 in file "../src/TriacRelay_B1.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  lights          1    wreg     unsigned char 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  lights          1    0[COMMON] unsigned char 
  7124 ;;  allow           1    0[BANK0 ] unsigned char 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      unsigned char 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, pclath, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7134 ;;      Params:         0       0       0       0
  7135 ;;      Locals:         0       2       0       0
  7136 ;;      Temps:          1       0       0       0
  7137 ;;      Totals:         1       2       0       0
  7138 ;;Total ram usage:        3 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    3
  7141 ;; This function calls:
  7142 ;;		_getLoad_OK
  7143 ;; This function is called by:
  7144 ;;		_setLights_Main
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _getLights_Allow_Condition
  7150  0C65                     _getLights_Allow_Condition:	
  7151                           
  7152                           ;TriacRelay_B1.c: 321: char allow = 0;
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7156  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  7157  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  7158  0C67  01DA               	clrf	getLights_Allow_Condition@allow
  7159                           
  7160                           ;TriacRelay_B1.c: 324: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7161  0C68  01DB               	clrf	_getLights_Allow_Condition$4633
  7162  0C69  0ADB               	incf	_getLights_Allow_Condition$4633,f
  7163  0C6A  158A  2327  158A   	fcall	_getLoad_OK
  7164  0C6D  3800               	iorlw	0
  7165  0C6E  1903               	btfsc	3,2
  7166  0C6F  1877               	btfsc	_Light,0
  7167  0C70  2C74               	goto	l4548
  7168  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  7169  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  7170  0C73  01DB               	clrf	_getLights_Allow_Condition$4633
  7171  0C74                     l4548:	
  7172  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  7173  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  7174  0C76  085B               	movf	_getLights_Allow_Condition$4633,w
  7175  0C77  00F5               	movwf	??_getLights_Allow_Condition
  7176  0C78  0875               	movf	??_getLights_Allow_Condition,w
  7177  0C79  00DA               	movwf	getLights_Allow_Condition@allow
  7178                           
  7179                           ;TriacRelay_B1.c: 349: return allow;
  7180  0C7A  085A               	movf	getLights_Allow_Condition@allow,w
  7181  0C7B  0008               	return
  7182  0C7C                     __end_of_getLights_Allow_Condition:	
  7183                           
  7184                           	psect	text42
  7185  0B27                     __ptext42:	
  7186 ;; *************** function _getLoad_OK *****************
  7187 ;; Defined at:
  7188 ;;		line 271 in file "../src/OverLoad_B1.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  ok              1    4[COMMON] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      unsigned char 
  7195 ;; Registers used:
  7196 ;;		wreg, status,2
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7202 ;;      Params:         0       0       0       0
  7203 ;;      Locals:         1       0       0       0
  7204 ;;      Temps:          0       0       0       0
  7205 ;;      Totals:         1       0       0       0
  7206 ;;Total ram usage:        1 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    2
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_Lights_Main
  7213 ;;		_getLights_Allow_Condition
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _getLoad_OK
  7219  0B27                     _getLoad_OK:	
  7220                           
  7221                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7225  0B27  3000               	movlw	0
  7226  0B28  1683               	bsf	3,5	;RP0=1, select bank1
  7227  0B29  1303               	bcf	3,6	;RP1=0, select bank1
  7228  0B2A  1BCE               	btfsc	_Load^(0+128),7
  7229  0B2B  3001               	movlw	1
  7230  0B2C  00F4               	movwf	getLoad_OK@ok
  7231                           
  7232                           ;OverLoad_B1.c: 273: return ok;
  7233  0B2D  0874               	movf	getLoad_OK@ok,w
  7234  0B2E  0008               	return
  7235  0B2F                     __end_of_getLoad_OK:	
  7236                           
  7237                           	psect	text43
  7238  0541                     __ptext43:	
  7239 ;; *************** function _Lights_Control *****************
  7240 ;; Defined at:
  7241 ;;		line 175 in file "../src/TriacRelay_B1.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  lights          1    wreg     unsigned char 
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  lights          1   12[BANK0 ] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7255 ;;      Params:         0       0       0       0
  7256 ;;      Locals:         0       3       0       0
  7257 ;;      Temps:          0       2       0       0
  7258 ;;      Totals:         0       5       0       0
  7259 ;;Total ram usage:        5 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    3
  7262 ;; This function calls:
  7263 ;;		_LightsPointSelect
  7264 ;;		___awdiv
  7265 ;; This function is called by:
  7266 ;;		_Lights_Main
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _Lights_Control
  7272  0541                     _Lights_Control:	
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7276                           ;Lights_Control@lights stored from wreg
  7277  0541  1283               	bcf	3,5	;RP0=0, select bank0
  7278  0542  1303               	bcf	3,6	;RP1=0, select bank0
  7279  0543  00E6               	movwf	Lights_Control@lights
  7280                           
  7281                           ;TriacRelay_B1.c: 176: LightsPointSelect(lights);
  7282  0544  0866               	movf	Lights_Control@lights,w
  7283  0545  158A  2348  118A   	fcall	_LightsPointSelect
  7284                           
  7285                           ;TriacRelay_B1.c: 177: if (Lights->GO == 1) {
  7286  0548  0878               	movf	_Lights,w
  7287  0549  0084               	movwf	4
  7288  054A  1383               	bcf	3,7	;select IRP bank0
  7289  054B  1C80               	btfss	0,1
  7290  054C  0008               	return
  7291                           
  7292                           ;TriacRelay_B1.c: 178: Lights->Time++;
  7293  054D  3001               	movlw	1
  7294  054E  1283               	bcf	3,5	;RP0=0, select bank0
  7295  054F  1303               	bcf	3,6	;RP1=0, select bank0
  7296  0550  00E2               	movwf	??_Lights_Control
  7297  0551  0878               	movf	_Lights,w
  7298  0552  3E02               	addlw	2
  7299  0553  0084               	movwf	4
  7300  0554  0862               	movf	??_Lights_Control,w
  7301  0555  0780               	addwf	0,f
  7302                           
  7303                           ;TriacRelay_B1.c: 179: if (Lights->Time >= (Lights->RelayValue / 20) && Lights->RelaySet
      +                           == 0) {
  7304  0556  3014               	movlw	20
  7305  0557  00DA               	movwf	___awdiv@divisor
  7306  0558  3000               	movlw	0
  7307  0559  00DB               	movwf	___awdiv@divisor+1
  7308  055A  0878               	movf	_Lights,w
  7309  055B  3E06               	addlw	6
  7310  055C  0084               	movwf	4
  7311  055D  0800               	movf	0,w
  7312  055E  00E2               	movwf	??_Lights_Control
  7313  055F  01E3               	clrf	??_Lights_Control+1
  7314  0560  0862               	movf	??_Lights_Control,w
  7315  0561  00DC               	movwf	___awdiv@dividend
  7316  0562  0863               	movf	??_Lights_Control+1,w
  7317  0563  00DD               	movwf	___awdiv@dividend+1
  7318  0564  158A  26CC  118A   	fcall	___awdiv
  7319  0567  0878               	movf	_Lights,w
  7320  0568  3E02               	addlw	2
  7321  0569  0084               	movwf	4
  7322  056A  1283               	bcf	3,5	;RP0=0, select bank0
  7323  056B  1303               	bcf	3,6	;RP1=0, select bank0
  7324  056C  085B               	movf	?___awdiv+1,w
  7325  056D  3A80               	xorlw	128
  7326  056E  3C80               	sublw	128
  7327  056F  1D03               	skipz
  7328  0570  2D74               	goto	u5765
  7329  0571  085A               	movf	?___awdiv,w
  7330  0572  1383               	bcf	3,7	;select IRP bank0
  7331  0573  0200               	subwf	0,w
  7332  0574                     u5765:	
  7333  0574  1C03               	skipc
  7334  0575  2D90               	goto	l4800
  7335  0576  0878               	movf	_Lights,w
  7336  0577  0084               	movwf	4
  7337  0578  1383               	bcf	3,7	;select IRP bank0
  7338  0579  1B80               	btfsc	0,7
  7339  057A  2D90               	goto	l4800
  7340                           
  7341                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 1;
  7342  057B  0878               	movf	_Lights,w
  7343  057C  0084               	movwf	4
  7344  057D  1780               	bsf	0,7
  7345                           
  7346                           ;TriacRelay_B1.c: 182: if (lights == 1) {
  7347  057E  1283               	bcf	3,5	;RP0=0, select bank0
  7348  057F  1303               	bcf	3,6	;RP1=0, select bank0
  7349  0580  0866               	movf	Lights_Control@lights,w
  7350  0581  3A01               	xorlw	1
  7351  0582  1D03               	skipz
  7352  0583  0008               	return
  7353                           
  7354                           ;TriacRelay_B1.c: 183: RA4 = Lights->Status == 1 ? 1 : 0;
  7355  0584  0878               	movf	_Lights,w
  7356  0585  0084               	movwf	4
  7357  0586  1D00               	btfss	0,2
  7358  0587  2D8C               	goto	u5790
  7359  0588  1283               	bcf	3,5	;RP0=0, select bank0
  7360  0589  1303               	bcf	3,6	;RP1=0, select bank0
  7361  058A  1605               	bsf	5,4	;volatile
  7362  058B  0008               	return
  7363  058C                     u5790:	
  7364  058C  1283               	bcf	3,5	;RP0=0, select bank0
  7365  058D  1303               	bcf	3,6	;RP1=0, select bank0
  7366  058E  1205               	bcf	5,4	;volatile
  7367                           
  7368                           ;TriacRelay_B1.c: 184: }
  7369                           ;TriacRelay_B1.c: 197: } else if (Lights->Time >= (Lights->TriacValue / 20)) {
  7370  058F  0008               	return
  7371  0590                     l4800:	
  7372  0590  3014               	movlw	20
  7373  0591  1283               	bcf	3,5	;RP0=0, select bank0
  7374  0592  1303               	bcf	3,6	;RP1=0, select bank0
  7375  0593  00DA               	movwf	___awdiv@divisor
  7376  0594  3000               	movlw	0
  7377  0595  00DB               	movwf	___awdiv@divisor+1
  7378  0596  0878               	movf	_Lights,w
  7379  0597  3E04               	addlw	4
  7380  0598  0084               	movwf	4
  7381  0599  1383               	bcf	3,7	;select IRP bank0
  7382  059A  0800               	movf	0,w
  7383  059B  00E2               	movwf	??_Lights_Control
  7384  059C  01E3               	clrf	??_Lights_Control+1
  7385  059D  0862               	movf	??_Lights_Control,w
  7386  059E  00DC               	movwf	___awdiv@dividend
  7387  059F  0863               	movf	??_Lights_Control+1,w
  7388  05A0  00DD               	movwf	___awdiv@dividend+1
  7389  05A1  158A  26CC  118A   	fcall	___awdiv
  7390  05A4  0878               	movf	_Lights,w
  7391  05A5  3E02               	addlw	2
  7392  05A6  0084               	movwf	4
  7393  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  7394  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  7395  05A9  085B               	movf	?___awdiv+1,w
  7396  05AA  3A80               	xorlw	128
  7397  05AB  3C80               	sublw	128
  7398  05AC  1D03               	skipz
  7399  05AD  2DB1               	goto	u5815
  7400  05AE  085A               	movf	?___awdiv,w
  7401  05AF  1383               	bcf	3,7	;select IRP bank0
  7402  05B0  0200               	subwf	0,w
  7403  05B1                     u5815:	
  7404  05B1  1C03               	skipc
  7405  05B2  0008               	return
  7406                           
  7407                           ;TriacRelay_B1.c: 198: Lights->Time = 0;
  7408  05B3  0878               	movf	_Lights,w
  7409  05B4  3E02               	addlw	2
  7410  05B5  0084               	movwf	4
  7411  05B6  1383               	bcf	3,7	;select IRP bank0
  7412  05B7  0180               	clrf	0
  7413                           
  7414                           ;TriacRelay_B1.c: 199: Lights->GO = 0;
  7415  05B8  0878               	movf	_Lights,w
  7416  05B9  0084               	movwf	4
  7417  05BA  1080               	bcf	0,1
  7418                           
  7419                           ;TriacRelay_B1.c: 200: Lights->RelaySet = 0;
  7420  05BB  0878               	movf	_Lights,w
  7421  05BC  0084               	movwf	4
  7422  05BD  1380               	bcf	0,7
  7423                           
  7424                           ;TriacRelay_B1.c: 203: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7425  05BE  0878               	movf	_Lights,w
  7426  05BF  0084               	movwf	4
  7427  05C0  1D00               	btfss	0,2
  7428  05C1  2DCC               	goto	l4812
  7429  05C2  0879               	movf	_LightsControl,w
  7430  05C3  3901               	andlw	1
  7431  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  7432  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  7433  05C6  00E2               	movwf	??_Lights_Control
  7434  05C7  01E3               	clrf	??_Lights_Control+1
  7435  05C8  0862               	movf	??_Lights_Control,w
  7436  05C9  00E4               	movwf	_Lights_Control$4611
  7437  05CA  0863               	movf	??_Lights_Control+1,w
  7438  05CB  2DD1               	goto	L20
  7439  05CC                     l4812:	
  7440  05CC  3001               	movlw	1
  7441  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  7442  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  7443  05CF  00E4               	movwf	_Lights_Control$4611
  7444  05D0  3000               	movlw	0
  7445  05D1                     L20:	
  7446  05D1  00E5               	movwf	_Lights_Control$4611+1
  7447  05D2  0864               	movf	_Lights_Control$4611,w
  7448  05D3  1079               	bcf	_LightsControl,0
  7449  05D4  1D03               	skipz
  7450  05D5  1479               	bsf	_LightsControl,0
  7451                           
  7452                           ;TriacRelay_B1.c: 207: if (lights == 1) {
  7453  05D6  0866               	movf	Lights_Control@lights,w
  7454  05D7  3A01               	xorlw	1
  7455  05D8  1D03               	skipz
  7456  05D9  0008               	return
  7457                           
  7458                           ;TriacRelay_B1.c: 208: RB2 = 0;
  7459  05DA  1106               	bcf	6,2	;volatile
  7460  05DB  0008               	return
  7461  05DC                     __end_of_Lights_Control:	
  7462                           
  7463                           	psect	text44
  7464  0ECC                     __ptext44:	
  7465 ;; *************** function ___awdiv *****************
  7466 ;; Defined at:
  7467 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;  divisor         2    0[BANK0 ] int 
  7470 ;;  dividend        2    2[BANK0 ] int 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  quotient        2    6[BANK0 ] int 
  7473 ;;  sign            1    5[BANK0 ] unsigned char 
  7474 ;;  counter         1    4[BANK0 ] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  2    0[BANK0 ] int 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2, status,0
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7484 ;;      Params:         0       4       0       0
  7485 ;;      Locals:         0       4       0       0
  7486 ;;      Temps:          1       0       0       0
  7487 ;;      Totals:         1       8       0       0
  7488 ;;Total ram usage:        9 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    2
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_setTemp_Main
  7495 ;;		_getPIR_AD
  7496 ;;		_Lights_Control
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function ___awdiv
  7502  0ECC                     ___awdiv:	
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7506  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7507  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  7508  0ECE  01DF               	clrf	___awdiv@sign
  7509  0ECF  1FDB               	btfss	___awdiv@divisor+1,7
  7510  0ED0  2ED8               	goto	l4588
  7511  0ED1  09DA               	comf	___awdiv@divisor,f
  7512  0ED2  09DB               	comf	___awdiv@divisor+1,f
  7513  0ED3  0ADA               	incf	___awdiv@divisor,f
  7514  0ED4  1903               	skipnz
  7515  0ED5  0ADB               	incf	___awdiv@divisor+1,f
  7516  0ED6  01DF               	clrf	___awdiv@sign
  7517  0ED7  0ADF               	incf	___awdiv@sign,f
  7518  0ED8                     l4588:	
  7519  0ED8  1FDD               	btfss	___awdiv@dividend+1,7
  7520  0ED9  2EE3               	goto	l4594
  7521  0EDA  09DC               	comf	___awdiv@dividend,f
  7522  0EDB  09DD               	comf	___awdiv@dividend+1,f
  7523  0EDC  0ADC               	incf	___awdiv@dividend,f
  7524  0EDD  1903               	skipnz
  7525  0EDE  0ADD               	incf	___awdiv@dividend+1,f
  7526  0EDF  3001               	movlw	1
  7527  0EE0  00F4               	movwf	??___awdiv
  7528  0EE1  0874               	movf	??___awdiv,w
  7529  0EE2  06DF               	xorwf	___awdiv@sign,f
  7530  0EE3                     l4594:	
  7531  0EE3  01E0               	clrf	___awdiv@quotient
  7532  0EE4  01E1               	clrf	___awdiv@quotient+1
  7533  0EE5  085B               	movf	___awdiv@divisor+1,w
  7534  0EE6  045A               	iorwf	___awdiv@divisor,w
  7535  0EE7  1903               	skipnz
  7536  0EE8  2F1A               	goto	l4616
  7537  0EE9  01DE               	clrf	___awdiv@counter
  7538  0EEA  0ADE               	incf	___awdiv@counter,f
  7539  0EEB                     l4604:	
  7540  0EEB  1BDB               	btfsc	___awdiv@divisor+1,7
  7541  0EEC  2EF9               	goto	l4606
  7542  0EED  3001               	movlw	1
  7543  0EEE                     u5375:	
  7544  0EEE  1003               	clrc
  7545  0EEF  0DDA               	rlf	___awdiv@divisor,f
  7546  0EF0  0DDB               	rlf	___awdiv@divisor+1,f
  7547  0EF1  3EFF               	addlw	-1
  7548  0EF2  1D03               	skipz
  7549  0EF3  2EEE               	goto	u5375
  7550  0EF4  3001               	movlw	1
  7551  0EF5  00F4               	movwf	??___awdiv
  7552  0EF6  0874               	movf	??___awdiv,w
  7553  0EF7  07DE               	addwf	___awdiv@counter,f
  7554  0EF8  2EEB               	goto	l4604
  7555  0EF9                     l4606:	
  7556  0EF9  3001               	movlw	1
  7557  0EFA                     u5395:	
  7558  0EFA  1003               	clrc
  7559  0EFB  0DE0               	rlf	___awdiv@quotient,f
  7560  0EFC  0DE1               	rlf	___awdiv@quotient+1,f
  7561  0EFD  3EFF               	addlw	-1
  7562  0EFE  1D03               	skipz
  7563  0EFF  2EFA               	goto	u5395
  7564  0F00  085B               	movf	___awdiv@divisor+1,w
  7565  0F01  025D               	subwf	___awdiv@dividend+1,w
  7566  0F02  1D03               	skipz
  7567  0F03  2F06               	goto	u5405
  7568  0F04  085A               	movf	___awdiv@divisor,w
  7569  0F05  025C               	subwf	___awdiv@dividend,w
  7570  0F06                     u5405:	
  7571  0F06  1C03               	skipc
  7572  0F07  2F0F               	goto	l4612
  7573  0F08  085A               	movf	___awdiv@divisor,w
  7574  0F09  02DC               	subwf	___awdiv@dividend,f
  7575  0F0A  085B               	movf	___awdiv@divisor+1,w
  7576  0F0B  1C03               	skipc
  7577  0F0C  03DD               	decf	___awdiv@dividend+1,f
  7578  0F0D  02DD               	subwf	___awdiv@dividend+1,f
  7579  0F0E  1460               	bsf	___awdiv@quotient,0
  7580  0F0F                     l4612:	
  7581  0F0F  3001               	movlw	1
  7582  0F10                     u5415:	
  7583  0F10  1003               	clrc
  7584  0F11  0CDB               	rrf	___awdiv@divisor+1,f
  7585  0F12  0CDA               	rrf	___awdiv@divisor,f
  7586  0F13  3EFF               	addlw	-1
  7587  0F14  1D03               	skipz
  7588  0F15  2F10               	goto	u5415
  7589  0F16  3001               	movlw	1
  7590  0F17  02DE               	subwf	___awdiv@counter,f
  7591  0F18  1D03               	btfss	3,2
  7592  0F19  2EF9               	goto	l4606
  7593  0F1A                     l4616:	
  7594  0F1A  085F               	movf	___awdiv@sign,w
  7595  0F1B  1903               	btfsc	3,2
  7596  0F1C  2F22               	goto	l4620
  7597  0F1D  09E0               	comf	___awdiv@quotient,f
  7598  0F1E  09E1               	comf	___awdiv@quotient+1,f
  7599  0F1F  0AE0               	incf	___awdiv@quotient,f
  7600  0F20  1903               	skipnz
  7601  0F21  0AE1               	incf	___awdiv@quotient+1,f
  7602  0F22                     l4620:	
  7603  0F22  0861               	movf	___awdiv@quotient+1,w
  7604  0F23  01DB               	clrf	?___awdiv+1
  7605  0F24  07DB               	addwf	?___awdiv+1,f
  7606  0F25  0860               	movf	___awdiv@quotient,w
  7607  0F26  01DA               	clrf	?___awdiv
  7608  0F27  07DA               	addwf	?___awdiv,f
  7609  0F28  0008               	return
  7610  0F29                     __end_of___awdiv:	
  7611                           
  7612                           	psect	text45
  7613  0BDC                     __ptext45:	
  7614 ;; *************** function _Lights_Close *****************
  7615 ;; Defined at:
  7616 ;;		line 93 in file "../src/TriacRelay_B1.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, pclath, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7630 ;;      Params:         0       0       0       0
  7631 ;;      Locals:         0       0       0       0
  7632 ;;      Temps:          1       0       0       0
  7633 ;;      Totals:         1       0       0       0
  7634 ;;Total ram usage:        1 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    3
  7637 ;; This function calls:
  7638 ;;		_getMain_All_LightsStatus
  7639 ;; This function is called by:
  7640 ;;		_Lights_Main
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function _Lights_Close
  7646  0BDC                     _Lights_Close:	
  7647                           
  7648                           ;TriacRelay_B1.c: 94: if (LightsControl.Detect == 1) {
  7649                           
  7650                           ;incstack = 0
  7651                           ; Regs used in _Lights_Close: [wreg+status,2+status,0+pclath+cstack]
  7652  0BDC  1C79               	btfss	_LightsControl,0
  7653  0BDD  0008               	return
  7654                           
  7655                           ;TriacRelay_B1.c: 95: LightsControl.Detect = 0;
  7656  0BDE  1079               	bcf	_LightsControl,0
  7657                           
  7658                           ;TriacRelay_B1.c: 96: LightsControl.LoadGO = getMain_All_LightsStatus() == 0 ? 0 : 1;
  7659  0BDF  158A  233F         	fcall	_getMain_All_LightsStatus
  7660  0BE1  3800               	iorlw	0
  7661  0BE2  3000               	movlw	0
  7662  0BE3  1D03               	skipz
  7663  0BE4  3001               	movlw	1
  7664  0BE5  00F5               	movwf	??_Lights_Close
  7665  0BE6  0DF5               	rlf	??_Lights_Close,f
  7666  0BE7  0879               	movf	_LightsControl,w
  7667  0BE8  0675               	xorwf	??_Lights_Close,w
  7668  0BE9  39FD               	andlw	-3
  7669  0BEA  0675               	xorwf	??_Lights_Close,w
  7670  0BEB  00F9               	movwf	_LightsControl
  7671  0BEC  0008               	return
  7672  0BED                     __end_of_Lights_Close:	
  7673                           
  7674                           	psect	text46
  7675  0B3F                     __ptext46:	
  7676 ;; *************** function _getMain_All_LightsStatus *****************
  7677 ;; Defined at:
  7678 ;;		line 374 in file "../src/Main_B1.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;		None
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  status          1    4[COMMON] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      unsigned char 
  7685 ;; Registers used:
  7686 ;;		wreg, status,2
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7692 ;;      Params:         0       0       0       0
  7693 ;;      Locals:         1       0       0       0
  7694 ;;      Temps:          0       0       0       0
  7695 ;;      Totals:         1       0       0       0
  7696 ;;Total ram usage:        1 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    2
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_Load_Main
  7703 ;;		_setTemp_Main
  7704 ;;		_Lights_Main
  7705 ;;		_Lights_Close
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _getMain_All_LightsStatus
  7711  0B3F                     _getMain_All_LightsStatus:	
  7712                           
  7713                           ;Main_B1.c: 375: char status = 0;
  7714                           
  7715                           ;incstack = 0
  7716                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  7717  0B3F  01F4               	clrf	getMain_All_LightsStatus@status
  7718                           
  7719                           ;Main_B1.c: 379: status = Lights1.Status == 1 ? 1 : 0;
  7720  0B40  3000               	movlw	0
  7721  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  7722  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  7723  0B43  1947               	btfsc	_Lights1,2
  7724  0B44  3001               	movlw	1
  7725  0B45  00F4               	movwf	getMain_All_LightsStatus@status
  7726                           
  7727                           ;Main_B1.c: 421: return status;
  7728  0B46  0874               	movf	getMain_All_LightsStatus@status,w
  7729  0B47  0008               	return
  7730  0B48                     __end_of_getMain_All_LightsStatus:	
  7731                           
  7732                           	psect	text47
  7733  0AFE                     __ptext47:	
  7734 ;; *************** function _Lights_Initialization *****************
  7735 ;; Defined at:
  7736 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7750 ;;      Params:         0       0       0       0
  7751 ;;      Locals:         0       0       0       0
  7752 ;;      Temps:          0       0       0       0
  7753 ;;      Totals:         0       0       0       0
  7754 ;;Total ram usage:        0 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    4
  7757 ;; This function calls:
  7758 ;;		_setLights_Initialization
  7759 ;; This function is called by:
  7760 ;;		_main
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _Lights_Initialization
  7766  0AFE                     _Lights_Initialization:	
  7767                           
  7768                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7772  0AFE  3001               	movlw	1
  7773  0AFF  158A  2319         	fcall	_setLights_Initialization
  7774  0B01  0008               	return
  7775  0B02                     __end_of_Lights_Initialization:	
  7776                           
  7777                           	psect	text48
  7778  0B19                     __ptext48:	
  7779 ;; *************** function _setLights_Initialization *****************
  7780 ;; Defined at:
  7781 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  lights          1    wreg     unsigned char 
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;  lights          1    0[BANK0 ] unsigned char 
  7786 ;; Return value:  Size  Location     Type
  7787 ;;		None               void
  7788 ;; Registers used:
  7789 ;;		wreg, status,2, status,0, pclath, cstack
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7795 ;;      Params:         0       0       0       0
  7796 ;;      Locals:         0       1       0       0
  7797 ;;      Temps:          0       0       0       0
  7798 ;;      Totals:         0       1       0       0
  7799 ;;Total ram usage:        1 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    3
  7802 ;; This function calls:
  7803 ;;		_LightsPointSelect
  7804 ;; This function is called by:
  7805 ;;		_Lights_Initialization
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           
  7810                           ;psect for function _setLights_Initialization
  7811  0B19                     _setLights_Initialization:	
  7812                           
  7813                           ;incstack = 0
  7814                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7815                           ;setLights_Initialization@lights stored from wreg
  7816  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  7817  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  7818  0B1B  00DA               	movwf	setLights_Initialization@lights
  7819                           
  7820                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7821  0B1C  085A               	movf	setLights_Initialization@lights,w
  7822  0B1D  158A  2348         	fcall	_LightsPointSelect
  7823  0B1F  0008               	return
  7824  0B20                     __end_of_setLights_Initialization:	
  7825                           
  7826                           	psect	text49
  7827  0AE8                     __ptext49:	
  7828 ;; *************** function _LED_Main *****************
  7829 ;; Defined at:
  7830 ;;		line 47 in file "../src/LED_B1.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;		None               void
  7837 ;; Registers used:
  7838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7844 ;;      Params:         0       0       0       0
  7845 ;;      Locals:         0       0       0       0
  7846 ;;      Temps:          0       0       0       0
  7847 ;;      Totals:         0       0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    5
  7851 ;; This function calls:
  7852 ;;		_setPIRLED_Main
  7853 ;; This function is called by:
  7854 ;;		_main
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function _LED_Main
  7860  0AE8                     _LED_Main:	
  7861                           
  7862                           ;LED_B1.c: 50: setPIRLED_Main();
  7863                           
  7864                           ;incstack = 0
  7865                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7866  0AE8  118A  2749         	fcall	_setPIRLED_Main
  7867  0AEA  0008               	return
  7868  0AEB                     __end_of_LED_Main:	
  7869                           
  7870                           	psect	text50
  7871  0749                     __ptext50:	
  7872 ;; *************** function _setPIRLED_Main *****************
  7873 ;; Defined at:
  7874 ;;		line 253 in file "../src/LED_B1.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;		None
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  count           1    3[BANK0 ] unsigned char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;		None               void
  7881 ;; Registers used:
  7882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7888 ;;      Params:         0       0       0       0
  7889 ;;      Locals:         0       1       0       0
  7890 ;;      Temps:          0       1       0       0
  7891 ;;      Totals:         0       2       0       0
  7892 ;;Total ram usage:        2 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    4
  7895 ;; This function calls:
  7896 ;;		_setLED
  7897 ;; This function is called by:
  7898 ;;		_LED_Main
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           
  7903                           ;psect for function _setPIRLED_Main
  7904  0749                     _setPIRLED_Main:	
  7905                           
  7906                           ;LED_B1.c: 254: char count;
  7907                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7911  0749  1283               	bcf	3,5	;RP0=0, select bank0
  7912  074A  1303               	bcf	3,6	;RP1=0, select bank0
  7913  074B  1C30               	btfss	_PIRLED,0
  7914  074C  0008               	return
  7915                           
  7916                           ;LED_B1.c: 256: PIRLED.Time++;
  7917  074D  3001               	movlw	1
  7918  074E  07B2               	addwf	_PIRLED+2,f
  7919  074F  1803               	skipnc
  7920  0750  0AB3               	incf	_PIRLED+3,f
  7921  0751  3000               	movlw	0
  7922  0752  07B3               	addwf	_PIRLED+3,f
  7923                           
  7924                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 20) {
  7925  0753  3000               	movlw	0
  7926  0754  0233               	subwf	_PIRLED+3,w
  7927  0755  3019               	movlw	25
  7928  0756  1903               	skipnz
  7929  0757  0232               	subwf	_PIRLED+2,w
  7930  0758  1C03               	skipc
  7931  0759  0008               	return
  7932                           
  7933                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7934  075A  01B2               	clrf	_PIRLED+2
  7935  075B  01B3               	clrf	_PIRLED+3
  7936                           
  7937                           ;LED_B1.c: 259: setLED(1, 0);
  7938  075C  01DA               	clrf	setLED@command
  7939  075D  3001               	movlw	1
  7940  075E  158A  278F  118A   	fcall	_setLED
  7941                           
  7942                           ;LED_B1.c: 260: setLED(2, 0);
  7943  0761  1283               	bcf	3,5	;RP0=0, select bank0
  7944  0762  1303               	bcf	3,6	;RP1=0, select bank0
  7945  0763  01DA               	clrf	setLED@command
  7946  0764  3002               	movlw	2
  7947  0765  158A  278F  118A   	fcall	_setLED
  7948                           
  7949                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7950  0768  1283               	bcf	3,5	;RP0=0, select bank0
  7951  0769  1303               	bcf	3,6	;RP1=0, select bank0
  7952  076A  1CB0               	btfss	_PIRLED,1
  7953  076B  2F70               	goto	l4660
  7954                           
  7955                           ;LED_B1.c: 262: count = 4;
  7956  076C  3004               	movlw	4
  7957  076D  00DC               	movwf	??_setPIRLED_Main
  7958  076E  085C               	movf	??_setPIRLED_Main,w
  7959  076F  00DD               	movwf	setPIRLED_Main@count
  7960  0770                     l4660:	
  7961                           
  7962                           ;LED_B1.c: 263: }
  7963                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7964  0770  1D30               	btfss	_PIRLED,2
  7965  0771  2F76               	goto	l4664
  7966                           
  7967                           ;LED_B1.c: 265: count = 6;
  7968  0772  3006               	movlw	6
  7969  0773  00DC               	movwf	??_setPIRLED_Main
  7970  0774  085C               	movf	??_setPIRLED_Main,w
  7971  0775  00DD               	movwf	setPIRLED_Main@count
  7972  0776                     l4664:	
  7973                           
  7974                           ;LED_B1.c: 266: }
  7975                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7976  0776  1DB0               	btfss	_PIRLED,3
  7977  0777  2F7C               	goto	l4668
  7978                           
  7979                           ;LED_B1.c: 268: count = 8;
  7980  0778  3008               	movlw	8
  7981  0779  00DC               	movwf	??_setPIRLED_Main
  7982  077A  085C               	movf	??_setPIRLED_Main,w
  7983  077B  00DD               	movwf	setPIRLED_Main@count
  7984  077C                     l4668:	
  7985                           
  7986                           ;LED_B1.c: 269: }
  7987                           ;LED_B1.c: 270: PIRLED.Count++;
  7988  077C  3001               	movlw	1
  7989  077D  00DC               	movwf	??_setPIRLED_Main
  7990  077E  085C               	movf	??_setPIRLED_Main,w
  7991  077F  07B1               	addwf	_PIRLED+1,f
  7992                           
  7993                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7994  0780  0831               	movf	_PIRLED+1,w
  7995  0781  3A01               	xorlw	1
  7996  0782  1903               	skipnz
  7997  0783  2F88               	goto	l4674
  7998  0784  0831               	movf	_PIRLED+1,w
  7999  0785  3A02               	xorlw	2
  8000  0786  1D03               	skipz
  8001  0787  2F9C               	goto	l4678
  8002  0788                     l4674:	
  8003                           
  8004                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8005  0788  1003               	clrc
  8006  0789  1E30               	btfss	_PIRLED,4
  8007  078A  1403               	setc
  8008  078B  1C03               	btfss	3,0
  8009  078C  2F91               	goto	u5530
  8010  078D  1283               	bcf	3,5	;RP0=0, select bank0
  8011  078E  1303               	bcf	3,6	;RP1=0, select bank0
  8012  078F  1630               	bsf	_PIRLED,4
  8013  0790  2F94               	goto	l4676
  8014  0791                     u5530:	
  8015  0791  1283               	bcf	3,5	;RP0=0, select bank0
  8016  0792  1303               	bcf	3,6	;RP1=0, select bank0
  8017  0793  1230               	bcf	_PIRLED,4
  8018  0794                     l4676:	
  8019                           
  8020                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  8021  0794  3000               	movlw	0
  8022  0795  1A30               	btfsc	_PIRLED,4
  8023  0796  3001               	movlw	1
  8024  0797  00DA               	movwf	setLED@command
  8025  0798  3002               	movlw	2
  8026  0799  158A  278F         	fcall	_setLED
  8027                           
  8028                           ;LED_B1.c: 274: } else {
  8029  079B  0008               	return
  8030  079C                     l4678:	
  8031                           
  8032                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8033  079C  1003               	clrc
  8034  079D  1283               	bcf	3,5	;RP0=0, select bank0
  8035  079E  1303               	bcf	3,6	;RP1=0, select bank0
  8036  079F  1E30               	btfss	_PIRLED,4
  8037  07A0  1403               	setc
  8038  07A1  1C03               	btfss	3,0
  8039  07A2  2FA7               	goto	u5550
  8040  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  8041  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  8042  07A5  1630               	bsf	_PIRLED,4
  8043  07A6  2FAA               	goto	l4680
  8044  07A7                     u5550:	
  8045  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  8046  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  8047  07A9  1230               	bcf	_PIRLED,4
  8048  07AA                     l4680:	
  8049                           
  8050                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  8051  07AA  3000               	movlw	0
  8052  07AB  1A30               	btfsc	_PIRLED,4
  8053  07AC  3001               	movlw	1
  8054  07AD  00DA               	movwf	setLED@command
  8055  07AE  3001               	movlw	1
  8056  07AF  158A  278F  118A   	fcall	_setLED
  8057                           
  8058                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  8059  07B2  1283               	bcf	3,5	;RP0=0, select bank0
  8060  07B3  1303               	bcf	3,6	;RP1=0, select bank0
  8061  07B4  0831               	movf	_PIRLED+1,w
  8062  07B5  065D               	xorwf	setPIRLED_Main@count,w
  8063  07B6  1D03               	skipz
  8064  07B7  0008               	return
  8065                           
  8066                           ;LED_B1.c: 278: PIRLED.Count = 0;
  8067  07B8  01B1               	clrf	_PIRLED+1
  8068  07B9  0008               	return
  8069  07BA                     __end_of_setPIRLED_Main:	
  8070                           
  8071                           	psect	text51
  8072  0B67                     __ptext51:	
  8073 ;; *************** function _LED_Initialization *****************
  8074 ;; Defined at:
  8075 ;;		line 31 in file "../src/LED_B1.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;		None
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;		None
  8080 ;; Return value:  Size  Location     Type
  8081 ;;		None               void
  8082 ;; Registers used:
  8083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8089 ;;      Params:         0       0       0       0
  8090 ;;      Locals:         0       0       0       0
  8091 ;;      Temps:          0       0       0       0
  8092 ;;      Totals:         0       0       0       0
  8093 ;;Total ram usage:        0 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    5
  8096 ;; This function calls:
  8097 ;;		_setLED_Initialization
  8098 ;; This function is called by:
  8099 ;;		_main
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           
  8104                           ;psect for function _LED_Initialization
  8105  0B67                     _LED_Initialization:	
  8106                           
  8107                           ;LED_B1.c: 33: setLED_Initialization(1);
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8111  0B67  3001               	movlw	1
  8112  0B68  158A  23FE  158A   	fcall	_setLED_Initialization
  8113                           
  8114                           ;LED_B1.c: 36: setLED_Initialization(2);
  8115  0B6B  3002               	movlw	2
  8116  0B6C  158A  23FE  158A   	fcall	_setLED_Initialization
  8117                           
  8118                           ;LED_B1.c: 42: setLED_Initialization(99);
  8119  0B6F  3063               	movlw	99
  8120  0B70  158A  23FE         	fcall	_setLED_Initialization
  8121  0B72  0008               	return
  8122  0B73                     __end_of_LED_Initialization:	
  8123                           
  8124                           	psect	text52
  8125  0BFE                     __ptext52:	
  8126 ;; *************** function _setLED_Initialization *****************
  8127 ;; Defined at:
  8128 ;;		line 69 in file "../src/LED_B1.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  led             1    wreg     unsigned char 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;  led             1    2[BANK0 ] unsigned char 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;		None               void
  8135 ;; Registers used:
  8136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8142 ;;      Params:         0       0       0       0
  8143 ;;      Locals:         0       1       0       0
  8144 ;;      Temps:          0       0       0       0
  8145 ;;      Totals:         0       1       0       0
  8146 ;;Total ram usage:        1 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    4
  8149 ;; This function calls:
  8150 ;;		_LedPointSelect
  8151 ;;		_setLED
  8152 ;; This function is called by:
  8153 ;;		_LED_Initialization
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           
  8158                           ;psect for function _setLED_Initialization
  8159  0BFE                     _setLED_Initialization:	
  8160                           
  8161                           ;incstack = 0
  8162                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8163                           ;setLED_Initialization@led stored from wreg
  8164  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  8165  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  8166  0C00  00DC               	movwf	setLED_Initialization@led
  8167                           
  8168                           ;LED_B1.c: 70: LedPointSelect(led);
  8169  0C01  085C               	movf	setLED_Initialization@led,w
  8170  0C02  158A  2494  158A   	fcall	_LedPointSelect
  8171                           
  8172                           ;LED_B1.c: 71: LED->Enable = 1;
  8173  0C05  0876               	movf	_LED,w
  8174  0C06  0084               	movwf	4
  8175  0C07  1383               	bcf	3,7	;select IRP bank0
  8176  0C08  1400               	bsf	0,0
  8177                           
  8178                           ;LED_B1.c: 72: setLED(led, 0);
  8179  0C09  1283               	bcf	3,5	;RP0=0, select bank0
  8180  0C0A  1303               	bcf	3,6	;RP1=0, select bank0
  8181  0C0B  01DA               	clrf	setLED@command
  8182  0C0C  085C               	movf	setLED_Initialization@led,w
  8183  0C0D  158A  278F         	fcall	_setLED
  8184  0C0F  0008               	return
  8185  0C10                     __end_of_setLED_Initialization:	
  8186                           
  8187                           	psect	text53
  8188  0662                     __ptext53:	
  8189 ;; *************** function _Exception_Main *****************
  8190 ;; Defined at:
  8191 ;;		line 506 in file "../src/Main_B1.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  i               2   10[BANK0 ] int 
  8196 ;;  status          1    9[BANK0 ] unsigned char 
  8197 ;;  error           1   12[BANK0 ] unsigned char 
  8198 ;;  count           1    8[BANK0 ] unsigned char 
  8199 ;;  lights          1    7[BANK0 ] unsigned char 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;		None               void
  8202 ;; Registers used:
  8203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8209 ;;      Params:         0       0       0       0
  8210 ;;      Locals:         0       6       0       0
  8211 ;;      Temps:          0       1       0       0
  8212 ;;      Totals:         0       7       0       0
  8213 ;;Total ram usage:        7 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    4
  8216 ;; This function calls:
  8217 ;;		_getAll_Lights_Line
  8218 ;;		_getLights_Status
  8219 ;;		_getMain_All_Error_Status
  8220 ;;		_setLED
  8221 ;;		_setLights_Trigger
  8222 ;; This function is called by:
  8223 ;;		_main
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           
  8228                           ;psect for function _Exception_Main
  8229  0662                     _Exception_Main:	
  8230                           
  8231                           ;Main_B1.c: 507: char error = getMain_All_Error_Status(0);
  8232                           
  8233                           ;incstack = 0
  8234                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8235  0662  3000               	movlw	0
  8236  0663  158A  25FA  118A   	fcall	_getMain_All_Error_Status
  8237  0666  1283               	bcf	3,5	;RP0=0, select bank0
  8238  0667  1303               	bcf	3,6	;RP1=0, select bank0
  8239  0668  00E0               	movwf	??_Exception_Main
  8240  0669  0860               	movf	??_Exception_Main,w
  8241  066A  00E6               	movwf	Exception_Main@error
  8242                           
  8243                           ;Main_B1.c: 508: char lights = 0, count = 1;
  8244  066B  01E1               	clrf	Exception_Main@lights
  8245  066C  01E2               	clrf	Exception_Main@count
  8246  066D  0AE2               	incf	Exception_Main@count,f
  8247                           
  8248                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
  8249  066E  1DA3               	btfss	_myMain+3,3
  8250  066F  2E7C               	goto	l5356
  8251                           
  8252                           ;Main_B1.c: 510: if (error == 0) {
  8253  0670  08E6               	movf	Exception_Main@error,f
  8254  0671  1D03               	skipz
  8255  0672  0008               	return
  8256                           
  8257                           ;Main_B1.c: 511: myMain.Error_Run = 0;
  8258  0673  11A3               	bcf	_myMain+3,3
  8259                           
  8260                           ;Main_B1.c: 513: setLED(error, 110);
  8261  0674  306E               	movlw	110
  8262  0675  00E0               	movwf	??_Exception_Main
  8263  0676  0860               	movf	??_Exception_Main,w
  8264  0677  00DA               	movwf	setLED@command
  8265  0678  0866               	movf	Exception_Main@error,w
  8266  0679  158A  278F         	fcall	_setLED
  8267                           
  8268                           ;Main_B1.c: 518: }
  8269                           ;Main_B1.c: 519: } else {
  8270  067B  0008               	return
  8271  067C                     l5356:	
  8272                           
  8273                           ;Main_B1.c: 520: if (error != 0) {
  8274  067C  1283               	bcf	3,5	;RP0=0, select bank0
  8275  067D  1303               	bcf	3,6	;RP1=0, select bank0
  8276  067E  0866               	movf	Exception_Main@error,w
  8277  067F  1903               	btfsc	3,2
  8278  0680  0008               	return
  8279                           
  8280                           ;Main_B1.c: 521: myMain.Error_Run = 1;
  8281  0681  15A3               	bsf	_myMain+3,3
  8282                           
  8283                           ;Main_B1.c: 569: setLED(error, 111);
  8284  0682  306F               	movlw	111
  8285  0683  00E0               	movwf	??_Exception_Main
  8286  0684  0860               	movf	??_Exception_Main,w
  8287  0685  00DA               	movwf	setLED@command
  8288  0686  0866               	movf	Exception_Main@error,w
  8289  0687  158A  278F  118A   	fcall	_setLED
  8290                           
  8291                           ;Main_B1.c: 570: if (error == 3) {
  8292  068A  1283               	bcf	3,5	;RP0=0, select bank0
  8293  068B  1303               	bcf	3,6	;RP1=0, select bank0
  8294  068C  0866               	movf	Exception_Main@error,w
  8295  068D  3A03               	xorlw	3
  8296  068E  1D03               	skipz
  8297  068F  2EAB               	goto	l5368
  8298                           
  8299                           ;Main_B1.c: 571: char status = getAll_Lights_Line();
  8300  0690  158A  23BA  118A   	fcall	_getAll_Lights_Line
  8301  0693  1283               	bcf	3,5	;RP0=0, select bank0
  8302  0694  1303               	bcf	3,6	;RP1=0, select bank0
  8303  0695  00E0               	movwf	??_Exception_Main
  8304  0696  0860               	movf	??_Exception_Main,w
  8305  0697  00E3               	movwf	Exception_Main@status
  8306                           
  8307                           ;Main_B1.c: 572: if (getLights_Status(status) == 1) {
  8308  0698  0863               	movf	Exception_Main@status,w
  8309  0699  158A  23CB  118A   	fcall	_getLights_Status
  8310  069C  3A01               	xorlw	1
  8311  069D  1903               	btfsc	3,2
  8312  069E  2EA2               	goto	l5366
  8313  069F  1283               	bcf	3,5	;RP0=0, select bank0
  8314  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  8315  06A1  0008               	return
  8316  06A2                     l5366:	
  8317                           
  8318                           ;Main_B1.c: 573: setLights_Trigger(status, 0);
  8319  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  8320  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  8321  06A4  01DA               	clrf	setLights_Trigger@command
  8322  06A5  0863               	movf	Exception_Main@status,w
  8323  06A6  158A  24C8         	fcall	_setLights_Trigger
  8324  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  8325  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  8326  06AA  0008               	return
  8327  06AB                     l5368:	
  8328                           ;Main_B1.c: 574: }
  8329                           ;Main_B1.c: 575: } else {
  8330                           
  8331                           
  8332                           ;Main_B1.c: 577: for (int i = 0; i < count; i++) {
  8333  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  8334  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  8335  06AD  01E4               	clrf	Exception_Main@i
  8336  06AE  01E5               	clrf	Exception_Main@i+1
  8337  06AF                     l5376:	
  8338  06AF  0865               	movf	Exception_Main@i+1,w
  8339  06B0  3A80               	xorlw	128
  8340  06B1  00E0               	movwf	??_Exception_Main
  8341  06B2  3080               	movlw	128
  8342  06B3  0260               	subwf	??_Exception_Main,w
  8343  06B4  1D03               	skipz
  8344  06B5  2EB8               	goto	u7075
  8345  06B6  0862               	movf	Exception_Main@count,w
  8346  06B7  0264               	subwf	Exception_Main@i,w
  8347  06B8                     u7075:	
  8348  06B8  1803               	btfsc	3,0
  8349  06B9  2ED5               	goto	u7070
  8350                           
  8351                           ;Main_B1.c: 578: if (getLights_Status(i + 1) == 1) {
  8352  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  8353  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  8354  06BC  0864               	movf	Exception_Main@i,w
  8355  06BD  3E01               	addlw	1
  8356  06BE  158A  23CB  118A   	fcall	_getLights_Status
  8357  06C1  3A01               	xorlw	1
  8358  06C2  1D03               	skipz
  8359  06C3  2ECC               	goto	l5374
  8360                           
  8361                           ;Main_B1.c: 579: setLights_Trigger(i + 1, 0);
  8362  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  8363  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  8364  06C6  01DA               	clrf	setLights_Trigger@command
  8365  06C7  0864               	movf	Exception_Main@i,w
  8366  06C8  3E01               	addlw	1
  8367  06C9  158A  24C8  118A   	fcall	_setLights_Trigger
  8368  06CC                     l5374:	
  8369  06CC  3001               	movlw	1
  8370  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  8371  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  8372  06CF  07E4               	addwf	Exception_Main@i,f
  8373  06D0  1803               	skipnc
  8374  06D1  0AE5               	incf	Exception_Main@i+1,f
  8375  06D2  3000               	movlw	0
  8376  06D3  07E5               	addwf	Exception_Main@i+1,f
  8377  06D4  2EAF               	goto	l5376
  8378  06D5                     u7070:	
  8379  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  8380  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  8381  06D7  0008               	return
  8382  06D8                     __end_of_Exception_Main:	
  8383                           
  8384                           	psect	text54
  8385  0CC8                     __ptext54:	
  8386 ;; *************** function _setLights_Trigger *****************
  8387 ;; Defined at:
  8388 ;;		line 234 in file "../src/TriacRelay_B1.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  lights          1    wreg     unsigned char 
  8391 ;;  command         1    0[BANK0 ] unsigned char 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  lights          1    2[BANK0 ] unsigned char 
  8394 ;; Return value:  Size  Location     Type
  8395 ;;		None               void
  8396 ;; Registers used:
  8397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8403 ;;      Params:         0       1       0       0
  8404 ;;      Locals:         0       1       0       0
  8405 ;;      Temps:          0       1       0       0
  8406 ;;      Totals:         0       3       0       0
  8407 ;;Total ram usage:        3 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    3
  8410 ;; This function calls:
  8411 ;;		_LightsPointSelect
  8412 ;; This function is called by:
  8413 ;;		_Exception_Main
  8414 ;;		_PIR_Main
  8415 ;;		_setMain_Exception
  8416 ;;		_setLights_ErrorClose
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _setLights_Trigger
  8422  0CC8                     _setLights_Trigger:	
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8426                           ;setLights_Trigger@lights stored from wreg
  8427  0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  8428  0CC9  1303               	bcf	3,6	;RP1=0, select bank0
  8429  0CCA  00DC               	movwf	setLights_Trigger@lights
  8430                           
  8431                           ;TriacRelay_B1.c: 235: LightsPointSelect(lights);
  8432  0CCB  085C               	movf	setLights_Trigger@lights,w
  8433  0CCC  158A  2348         	fcall	_LightsPointSelect
  8434                           
  8435                           ;TriacRelay_B1.c: 236: Lights->Trigger = 1;
  8436  0CCE  0878               	movf	_Lights,w
  8437  0CCF  0084               	movwf	4
  8438  0CD0  1383               	bcf	3,7	;select IRP bank0
  8439  0CD1  1580               	bsf	0,3
  8440                           
  8441                           ;TriacRelay_B1.c: 237: Lights->Switch = command == 1 ? 1 : 0;
  8442  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  8443  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  8444  0CD4  085A               	movf	setLights_Trigger@command,w
  8445  0CD5  3A01               	xorlw	1
  8446  0CD6  3000               	movlw	0
  8447  0CD7  1903               	skipnz
  8448  0CD8  3001               	movlw	1
  8449  0CD9  00DB               	movwf	??_setLights_Trigger
  8450  0CDA  0878               	movf	_Lights,w
  8451  0CDB  0084               	movwf	4
  8452  0CDC  0EDB               	swapf	??_setLights_Trigger,f
  8453  0CDD  0800               	movf	0,w
  8454  0CDE  065B               	xorwf	??_setLights_Trigger,w
  8455  0CDF  39EF               	andlw	-17
  8456  0CE0  065B               	xorwf	??_setLights_Trigger,w
  8457  0CE1  0080               	movwf	0
  8458  0CE2  0008               	return
  8459  0CE3                     __end_of_setLights_Trigger:	
  8460                           
  8461                           	psect	text55
  8462  0F8F                     __ptext55:	
  8463 ;; *************** function _setLED *****************
  8464 ;; Defined at:
  8465 ;;		line 76 in file "../src/LED_B1.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  led             1    wreg     unsigned char 
  8468 ;;  command         1    0[BANK0 ] unsigned char 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  led             1    1[BANK0 ] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;		None               void
  8473 ;; Registers used:
  8474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8480 ;;      Params:         0       1       0       0
  8481 ;;      Locals:         0       1       0       0
  8482 ;;      Temps:          0       0       0       0
  8483 ;;      Totals:         0       2       0       0
  8484 ;;Total ram usage:        2 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    3
  8487 ;; This function calls:
  8488 ;;		_LedPointSelect
  8489 ;; This function is called by:
  8490 ;;		_setLED_Initialization
  8491 ;;		_setPIRLED_Main
  8492 ;;		_Exception_Main
  8493 ;;		_PIR_Main
  8494 ;;		_setMain_Exception
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           
  8499                           ;psect for function _setLED
  8500  0F8F                     _setLED:	
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8504                           ;setLED@led stored from wreg
  8505  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8506  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8507  0F91  00DB               	movwf	setLED@led
  8508                           
  8509                           ;LED_B1.c: 77: LedPointSelect(led);
  8510  0F92  085B               	movf	setLED@led,w
  8511  0F93  158A  2494  158A   	fcall	_LedPointSelect
  8512                           
  8513                           ;LED_B1.c: 78: if (command == 0) {
  8514  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  8515  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  8516  0F98  08DA               	movf	setLED@command,f
  8517  0F99  1D03               	skipz
  8518  0F9A  2FA8               	goto	l4462
  8519                           
  8520                           ;LED_B1.c: 80: if (led == 1) {
  8521  0F9B  085B               	movf	setLED@led,w
  8522  0F9C  3A01               	xorlw	1
  8523  0F9D  1D03               	skipz
  8524  0F9E  2FA0               	goto	l4454
  8525                           
  8526                           ;LED_B1.c: 84: RB4 = 1;
  8527  0F9F  1606               	bsf	6,4	;volatile
  8528  0FA0                     l4454:	
  8529                           
  8530                           ;LED_B1.c: 86: }
  8531                           ;LED_B1.c: 89: if (led == 2) {
  8532  0FA0  085B               	movf	setLED@led,w
  8533  0FA1  3A02               	xorlw	2
  8534  0FA2  1903               	btfsc	3,2
  8535                           
  8536                           ;LED_B1.c: 93: RB5 = 1;
  8537  0FA3  1686               	bsf	6,5	;volatile
  8538                           
  8539                           ;LED_B1.c: 95: }
  8540                           ;LED_B1.c: 107: if (led == 99) {
  8541  0FA4  085B               	movf	setLED@led,w
  8542  0FA5  3A63               	xorlw	99
  8543  0FA6  1903               	btfsc	3,2
  8544                           
  8545                           ;LED_B1.c: 111: RB3 = 1;
  8546  0FA7  1586               	bsf	6,3	;volatile
  8547  0FA8                     l4462:	
  8548                           
  8549                           ;LED_B1.c: 113: }
  8550                           ;LED_B1.c: 115: }
  8551                           ;LED_B1.c: 116: if (command == 1) {
  8552  0FA8  085A               	movf	setLED@command,w
  8553  0FA9  3A01               	xorlw	1
  8554  0FAA  1D03               	skipz
  8555  0FAB  2FB9               	goto	l4476
  8556                           
  8557                           ;LED_B1.c: 118: if (led == 1) {
  8558  0FAC  085B               	movf	setLED@led,w
  8559  0FAD  3A01               	xorlw	1
  8560  0FAE  1D03               	skipz
  8561  0FAF  2FB1               	goto	l4468
  8562                           
  8563                           ;LED_B1.c: 122: RB4 = 0;
  8564  0FB0  1206               	bcf	6,4	;volatile
  8565  0FB1                     l4468:	
  8566                           
  8567                           ;LED_B1.c: 124: }
  8568                           ;LED_B1.c: 127: if (led == 2) {
  8569  0FB1  085B               	movf	setLED@led,w
  8570  0FB2  3A02               	xorlw	2
  8571  0FB3  1903               	btfsc	3,2
  8572                           
  8573                           ;LED_B1.c: 131: RB5 = 0;
  8574  0FB4  1286               	bcf	6,5	;volatile
  8575                           
  8576                           ;LED_B1.c: 133: }
  8577                           ;LED_B1.c: 145: if (led == 99) {
  8578  0FB5  085B               	movf	setLED@led,w
  8579  0FB6  3A63               	xorlw	99
  8580  0FB7  1903               	btfsc	3,2
  8581                           
  8582                           ;LED_B1.c: 149: RB3 = 0;
  8583  0FB8  1186               	bcf	6,3	;volatile
  8584  0FB9                     l4476:	
  8585                           
  8586                           ;LED_B1.c: 151: }
  8587                           ;LED_B1.c: 153: }
  8588                           ;LED_B1.c: 154: if (command == 10) {
  8589  0FB9  085A               	movf	setLED@command,w
  8590  0FBA  3A0A               	xorlw	10
  8591  0FBB  1D03               	skipz
  8592  0FBC  2FD4               	goto	l4494
  8593                           
  8594                           ;LED_B1.c: 155: LED->GO = 0;
  8595  0FBD  0876               	movf	_LED,w
  8596  0FBE  0084               	movwf	4
  8597  0FBF  1383               	bcf	3,7	;select IRP bank0
  8598  0FC0  1080               	bcf	0,1
  8599                           
  8600                           ;LED_B1.c: 156: LED->Time = 0;
  8601  0FC1  0A76               	incf	_LED,w
  8602  0FC2  0084               	movwf	4
  8603  0FC3  0180               	clrf	0
  8604  0FC4  0A84               	incf	4,f
  8605  0FC5  0180               	clrf	0
  8606                           
  8607                           ;LED_B1.c: 158: if (led == 1) {
  8608  0FC6  085B               	movf	setLED@led,w
  8609  0FC7  3A01               	xorlw	1
  8610  0FC8  1D03               	skipz
  8611  0FC9  2FCC               	goto	l4486
  8612                           
  8613                           ;LED_B1.c: 162: RB4 = 1;
  8614  0FCA  1606               	bsf	6,4	;volatile
  8615                           
  8616                           ;LED_B1.c: 164: }
  8617  0FCB  2FD0               	goto	l4490
  8618  0FCC                     l4486:	
  8619                           
  8620                           ;LED_B1.c: 167: else if (led == 2) {
  8621  0FCC  085B               	movf	setLED@led,w
  8622  0FCD  3A02               	xorlw	2
  8623  0FCE  1903               	btfsc	3,2
  8624                           
  8625                           ;LED_B1.c: 171: RB5 = 1;
  8626  0FCF  1686               	bsf	6,5	;volatile
  8627  0FD0                     l4490:	
  8628                           
  8629                           ;LED_B1.c: 173: }
  8630                           ;LED_B1.c: 185: if (led == 99) {
  8631  0FD0  085B               	movf	setLED@led,w
  8632  0FD1  3A63               	xorlw	99
  8633  0FD2  1903               	btfsc	3,2
  8634                           
  8635                           ;LED_B1.c: 189: RB3 = 1;
  8636  0FD3  1586               	bsf	6,3	;volatile
  8637  0FD4                     l4494:	
  8638                           
  8639                           ;LED_B1.c: 191: }
  8640                           ;LED_B1.c: 193: }
  8641                           ;LED_B1.c: 194: if (command == 11) {
  8642  0FD4  085A               	movf	setLED@command,w
  8643  0FD5  3A0B               	xorlw	11
  8644  0FD6  1D03               	skipz
  8645  0FD7  2FDC               	goto	l4498
  8646                           
  8647                           ;LED_B1.c: 195: LED->GO = 1;
  8648  0FD8  0876               	movf	_LED,w
  8649  0FD9  0084               	movwf	4
  8650  0FDA  1383               	bcf	3,7	;select IRP bank0
  8651  0FDB  1480               	bsf	0,1
  8652  0FDC                     l4498:	
  8653                           
  8654                           ;LED_B1.c: 196: }
  8655                           ;LED_B1.c: 198: if (command == 111) {
  8656  0FDC  085A               	movf	setLED@command,w
  8657  0FDD  3A6F               	xorlw	111
  8658  0FDE  1D03               	skipz
  8659  0FDF  2FFA               	goto	l4524
  8660                           
  8661                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8662  0FE0  01B1               	clrf	_PIRLED+1
  8663                           
  8664                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8665  0FE1  01B2               	clrf	_PIRLED+2
  8666  0FE2  01B3               	clrf	_PIRLED+3
  8667                           
  8668                           ;LED_B1.c: 201: PIRLED.status = 0;
  8669  0FE3  1230               	bcf	_PIRLED,4
  8670                           
  8671                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8672  0FE4  1430               	bsf	_PIRLED,0
  8673                           
  8674                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8675  0FE5  10B0               	bcf	_PIRLED,1
  8676                           
  8677                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8678  0FE6  1130               	bcf	_PIRLED,2
  8679                           
  8680                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8681  0FE7  11B0               	bcf	_PIRLED,3
  8682                           
  8683                           ;LED_B1.c: 206: if (led == 1) {
  8684  0FE8  085B               	movf	setLED@led,w
  8685  0FE9  3A01               	xorlw	1
  8686  0FEA  1D03               	skipz
  8687  0FEB  2FEE               	goto	l4516
  8688                           
  8689                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8690  0FEC  14B0               	bsf	_PIRLED,1
  8691                           
  8692                           ;LED_B1.c: 208: } else if (led == 2) {
  8693  0FED  0008               	return
  8694  0FEE                     l4516:	
  8695  0FEE  085B               	movf	setLED@led,w
  8696  0FEF  3A02               	xorlw	2
  8697  0FF0  1D03               	skipz
  8698  0FF1  2FF4               	goto	l4520
  8699                           
  8700                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8701  0FF2  1530               	bsf	_PIRLED,2
  8702                           
  8703                           ;LED_B1.c: 210: } else if (led == 3) {
  8704  0FF3  0008               	return
  8705  0FF4                     l4520:	
  8706  0FF4  085B               	movf	setLED@led,w
  8707  0FF5  3A03               	xorlw	3
  8708  0FF6  1D03               	skipz
  8709  0FF7  0008               	return
  8710                           
  8711                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8712  0FF8  15B0               	bsf	_PIRLED,3
  8713                           
  8714                           ;LED_B1.c: 212: }
  8715                           ;LED_B1.c: 213: } else if (command == 110) {
  8716  0FF9  0008               	return
  8717  0FFA                     l4524:	
  8718  0FFA  085A               	movf	setLED@command,w
  8719  0FFB  3A6E               	xorlw	110
  8720  0FFC  1D03               	skipz
  8721  0FFD  0008               	return
  8722                           
  8723                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8724  0FFE  1030               	bcf	_PIRLED,0
  8725  0FFF  0008               	return
  8726  1000                     __end_of_setLED:	
  8727                           
  8728                           	psect	text56
  8729  0C94                     __ptext56:	
  8730 ;; *************** function _LedPointSelect *****************
  8731 ;; Defined at:
  8732 ;;		line 7 in file "../src/LED_B1.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;  led             1    wreg     unsigned char 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  led             1    5[COMMON] unsigned char 
  8737 ;; Return value:  Size  Location     Type
  8738 ;;		None               void
  8739 ;; Registers used:
  8740 ;;		wreg
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8746 ;;      Params:         0       0       0       0
  8747 ;;      Locals:         1       0       0       0
  8748 ;;      Temps:          1       0       0       0
  8749 ;;      Totals:         2       0       0       0
  8750 ;;Total ram usage:        2 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    2
  8753 ;; This function calls:
  8754 ;;		Nothing
  8755 ;; This function is called by:
  8756 ;;		_setLED_Initialization
  8757 ;;		_setLED
  8758 ;;		_setLED_Main
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           
  8763                           ;psect for function _LedPointSelect
  8764  0C94                     _LedPointSelect:	
  8765                           
  8766                           ;incstack = 0
  8767                           ; Regs used in _LedPointSelect: [wreg]
  8768                           ;LedPointSelect@led stored from wreg
  8769  0C94  00F5               	movwf	LedPointSelect@led
  8770                           
  8771                           ;LED_B1.c: 9: if (led == 1) {
  8772  0C95  0875               	movf	LedPointSelect@led,w
  8773  0C96  3A01               	xorlw	1
  8774  0C97  1D03               	skipz
  8775  0C98  2C9D               	goto	l268
  8776                           
  8777                           ;LED_B1.c: 10: LED = &VarLED1;
  8778  0C99  3052               	movlw	_VarLED1& (0+255)
  8779  0C9A  00F4               	movwf	??_LedPointSelect
  8780  0C9B  0874               	movf	??_LedPointSelect,w
  8781  0C9C  00F6               	movwf	_LED
  8782  0C9D                     l268:	
  8783                           
  8784                           ;LED_B1.c: 11: }
  8785                           ;LED_B1.c: 14: if (led == 2) {
  8786  0C9D  0875               	movf	LedPointSelect@led,w
  8787  0C9E  3A02               	xorlw	2
  8788  0C9F  1D03               	skipz
  8789  0CA0  2CA5               	goto	l269
  8790                           
  8791                           ;LED_B1.c: 15: LED = &VarLED2;
  8792  0CA1  3056               	movlw	_VarLED2& (0+255)
  8793  0CA2  00F4               	movwf	??_LedPointSelect
  8794  0CA3  0874               	movf	??_LedPointSelect,w
  8795  0CA4  00F6               	movwf	_LED
  8796  0CA5                     l269:	
  8797                           
  8798                           ;LED_B1.c: 16: }
  8799                           ;LED_B1.c: 24: if (led == 99) {
  8800  0CA5  0875               	movf	LedPointSelect@led,w
  8801  0CA6  3A63               	xorlw	99
  8802  0CA7  1D03               	skipz
  8803  0CA8  0008               	return
  8804                           
  8805                           ;LED_B1.c: 25: LED = &VarErrLED;
  8806  0CA9  304E               	movlw	_VarErrLED& (0+255)
  8807  0CAA  00F4               	movwf	??_LedPointSelect
  8808  0CAB  0874               	movf	??_LedPointSelect,w
  8809  0CAC  00F6               	movwf	_LED
  8810  0CAD  0008               	return
  8811  0CAE                     __end_of_LedPointSelect:	
  8812                           
  8813                           	psect	text57
  8814  0DFA                     __ptext57:	
  8815 ;; *************** function _getMain_All_Error_Status *****************
  8816 ;; Defined at:
  8817 ;;		line 425 in file "../src/Main_B1.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;  command         1    wreg     unsigned char 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;  command         1    4[BANK0 ] unsigned char 
  8822 ;;  status          1    5[BANK0 ] unsigned char 
  8823 ;; Return value:  Size  Location     Type
  8824 ;;                  1    wreg      unsigned char 
  8825 ;; Registers used:
  8826 ;;		wreg, status,2, status,0
  8827 ;; Tracked objects:
  8828 ;;		On entry : 0/0
  8829 ;;		On exit  : 0/0
  8830 ;;		Unchanged: 0/0
  8831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8832 ;;      Params:         0       0       0       0
  8833 ;;      Locals:         0       6       0       0
  8834 ;;      Temps:          1       0       0       0
  8835 ;;      Totals:         1       6       0       0
  8836 ;;Total ram usage:        7 bytes
  8837 ;; Hardware stack levels used:    1
  8838 ;; Hardware stack levels required when called:    2
  8839 ;; This function calls:
  8840 ;;		Nothing
  8841 ;; This function is called by:
  8842 ;;		_Exception_Main
  8843 ;;		_Load_Main
  8844 ;;		_setTemp_Main
  8845 ;;		_PIR_Main
  8846 ;;		_setSYSC_Main
  8847 ;;		_Lights_Main
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function _getMain_All_Error_Status
  8853  0DFA                     _getMain_All_Error_Status:	
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8857                           ;getMain_All_Error_Status@command stored from wreg
  8858  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  8859  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  8860  0DFC  00DE               	movwf	getMain_All_Error_Status@command
  8861                           
  8862                           ;Main_B1.c: 426: char status = 0;
  8863  0DFD  01DF               	clrf	getMain_All_Error_Status@status
  8864                           
  8865                           ;Main_B1.c: 429: if (status == 0 && command != 1) {
  8866  0DFE  08DF               	movf	getMain_All_Error_Status@status,f
  8867  0DFF  1D03               	skipz
  8868  0E00  2E09               	goto	l3244
  8869  0E01  085E               	movf	getMain_All_Error_Status@command,w
  8870  0E02  3A01               	xorlw	1
  8871  0E03  1903               	skipnz
  8872  0E04  2E09               	goto	l3244
  8873                           
  8874                           ;Main_B1.c: 430: status = SYSC.ERROR == 1 ? 1 : 0;
  8875  0E05  3000               	movlw	0
  8876  0E06  18A6               	btfsc	_SYSC,1
  8877  0E07  3001               	movlw	1
  8878  0E08  00DF               	movwf	getMain_All_Error_Status@status
  8879  0E09                     l3244:	
  8880                           
  8881                           ;Main_B1.c: 431: }
  8882                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
  8883  0E09  08DF               	movf	getMain_All_Error_Status@status,f
  8884  0E0A  1D03               	skipz
  8885  0E0B  2E1D               	goto	l3254
  8886  0E0C  085E               	movf	getMain_All_Error_Status@command,w
  8887  0E0D  3A02               	xorlw	2
  8888  0E0E  1903               	skipnz
  8889  0E0F  2E1D               	goto	l3254
  8890                           
  8891                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
  8892  0E10  18BB               	btfsc	_Temp,1
  8893  0E11  2E15               	goto	l3252
  8894  0E12  01DA               	clrf	_getMain_All_Error_Status$2341
  8895  0E13  01DB               	clrf	_getMain_All_Error_Status$2341+1
  8896  0E14  2E19               	goto	l625
  8897  0E15                     l3252:	
  8898  0E15  3002               	movlw	2
  8899  0E16  00DA               	movwf	_getMain_All_Error_Status$2341
  8900  0E17  3000               	movlw	0
  8901  0E18  00DB               	movwf	_getMain_All_Error_Status$2341+1
  8902  0E19                     l625:	
  8903  0E19  085A               	movf	_getMain_All_Error_Status$2341,w
  8904  0E1A  00F4               	movwf	??_getMain_All_Error_Status
  8905  0E1B  0874               	movf	??_getMain_All_Error_Status,w
  8906  0E1C  00DF               	movwf	getMain_All_Error_Status@status
  8907  0E1D                     l3254:	
  8908                           
  8909                           ;Main_B1.c: 439: }
  8910                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
  8911  0E1D  08DF               	movf	getMain_All_Error_Status@status,f
  8912  0E1E  1D03               	skipz
  8913  0E1F  2E36               	goto	l626
  8914  0E20  085E               	movf	getMain_All_Error_Status@command,w
  8915  0E21  3A03               	xorlw	3
  8916  0E22  1903               	skipnz
  8917  0E23  2E36               	goto	l626
  8918                           
  8919                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
  8920  0E24  1683               	bsf	3,5	;RP0=1, select bank1
  8921  0E25  1303               	bcf	3,6	;RP1=0, select bank1
  8922  0E26  1ACE               	btfsc	_Load^(0+128),5
  8923  0E27  2E2D               	goto	l3262
  8924  0E28  1283               	bcf	3,5	;RP0=0, select bank0
  8925  0E29  1303               	bcf	3,6	;RP1=0, select bank0
  8926  0E2A  01DC               	clrf	_getMain_All_Error_Status$2342
  8927  0E2B  01DD               	clrf	_getMain_All_Error_Status$2342+1
  8928  0E2C  2E32               	goto	l630
  8929  0E2D                     l3262:	
  8930  0E2D  3003               	movlw	3
  8931  0E2E  1283               	bcf	3,5	;RP0=0, select bank0
  8932  0E2F  00DC               	movwf	_getMain_All_Error_Status$2342
  8933  0E30  3000               	movlw	0
  8934  0E31  00DD               	movwf	_getMain_All_Error_Status$2342+1
  8935  0E32                     l630:	
  8936  0E32  085C               	movf	_getMain_All_Error_Status$2342,w
  8937  0E33  00F4               	movwf	??_getMain_All_Error_Status
  8938  0E34  0874               	movf	??_getMain_All_Error_Status,w
  8939  0E35  00DF               	movwf	getMain_All_Error_Status@status
  8940  0E36                     l626:	
  8941                           
  8942                           ;Main_B1.c: 446: }
  8943                           ;Main_B1.c: 462: return status;
  8944  0E36  085F               	movf	getMain_All_Error_Status@status,w
  8945  0E37  0008               	return
  8946  0E38                     __end_of_getMain_All_Error_Status:	
  8947                           
  8948                           	psect	text58
  8949  0BCB                     __ptext58:	
  8950 ;; *************** function _getLights_Status *****************
  8951 ;; Defined at:
  8952 ;;		line 227 in file "../src/TriacRelay_B1.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  lights          1    wreg     unsigned char 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;  lights          1    0[BANK0 ] unsigned char 
  8957 ;;  status          1    1[BANK0 ] unsigned char 
  8958 ;; Return value:  Size  Location     Type
  8959 ;;                  1    wreg      unsigned char 
  8960 ;; Registers used:
  8961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8962 ;; Tracked objects:
  8963 ;;		On entry : 0/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8967 ;;      Params:         0       0       0       0
  8968 ;;      Locals:         0       2       0       0
  8969 ;;      Temps:          0       0       0       0
  8970 ;;      Totals:         0       2       0       0
  8971 ;;Total ram usage:        2 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:    3
  8974 ;; This function calls:
  8975 ;;		_LightsPointSelect
  8976 ;; This function is called by:
  8977 ;;		_Exception_Main
  8978 ;;		_PIR_Main
  8979 ;;		_setMain_Exception
  8980 ;;		_setLights_ErrorClose
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           
  8985                           ;psect for function _getLights_Status
  8986  0BCB                     _getLights_Status:	
  8987                           
  8988                           ;incstack = 0
  8989                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8990                           ;getLights_Status@lights stored from wreg
  8991  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  8992  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  8993  0BCD  00DA               	movwf	getLights_Status@lights
  8994                           
  8995                           ;TriacRelay_B1.c: 228: LightsPointSelect(lights);
  8996  0BCE  085A               	movf	getLights_Status@lights,w
  8997  0BCF  158A  2348         	fcall	_LightsPointSelect
  8998                           
  8999                           ;TriacRelay_B1.c: 229: char status = Lights->Status == 1 ? 1 : 0;
  9000  0BD1  0878               	movf	_Lights,w
  9001  0BD2  0084               	movwf	4
  9002  0BD3  3000               	movlw	0
  9003  0BD4  1383               	bcf	3,7	;select IRP bank0
  9004  0BD5  1900               	btfsc	0,2
  9005  0BD6  3001               	movlw	1
  9006  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  9007  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  9008  0BD9  00DB               	movwf	getLights_Status@status
  9009                           
  9010                           ;TriacRelay_B1.c: 230: return status;
  9011  0BDA  085B               	movf	getLights_Status@status,w
  9012  0BDB  0008               	return
  9013  0BDC                     __end_of_getLights_Status:	
  9014                           
  9015                           	psect	text59
  9016  0BBA                     __ptext59:	
  9017 ;; *************** function _getAll_Lights_Line *****************
  9018 ;; Defined at:
  9019 ;;		line 266 in file "../src/TriacRelay_B1.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;		None
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;  line            1    0[BANK0 ] unsigned char 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;                  1    wreg      unsigned char 
  9026 ;; Registers used:
  9027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9033 ;;      Params:         0       0       0       0
  9034 ;;      Locals:         0       1       0       0
  9035 ;;      Temps:          0       0       0       0
  9036 ;;      Totals:         0       1       0       0
  9037 ;;Total ram usage:        1 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    3
  9040 ;; This function calls:
  9041 ;;		_LightsPointSelect
  9042 ;; This function is called by:
  9043 ;;		_Exception_Main
  9044 ;;		_setMain_Exception
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function _getAll_Lights_Line
  9050  0BBA                     _getAll_Lights_Line:	
  9051                           
  9052                           ;TriacRelay_B1.c: 267: char line = 0;
  9053                           
  9054                           ;incstack = 0
  9055                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9056  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  9057  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  9058  0BBC  01DA               	clrf	getAll_Lights_Line@line
  9059                           
  9060                           ;TriacRelay_B1.c: 269: LightsPointSelect(1);
  9061  0BBD  3001               	movlw	1
  9062  0BBE  158A  2348         	fcall	_LightsPointSelect
  9063                           
  9064                           ;TriacRelay_B1.c: 270: line = Lights->Line == 1 ? 1 : 0;
  9065  0BC0  0A78               	incf	_Lights,w
  9066  0BC1  0084               	movwf	4
  9067  0BC2  3000               	movlw	0
  9068  0BC3  1383               	bcf	3,7	;select IRP bank0
  9069  0BC4  1800               	btfsc	0,0
  9070  0BC5  3001               	movlw	1
  9071  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  9072  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  9073  0BC8  00DA               	movwf	getAll_Lights_Line@line
  9074                           
  9075                           ;TriacRelay_B1.c: 280: return line;
  9076  0BC9  085A               	movf	getAll_Lights_Line@line,w
  9077  0BCA  0008               	return
  9078  0BCB                     __end_of_getAll_Lights_Line:	
  9079                           
  9080                           	psect	text60
  9081  0B48                     __ptext60:	
  9082 ;; *************** function _LightsPointSelect *****************
  9083 ;; Defined at:
  9084 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  lights          1    wreg     unsigned char 
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;  lights          1    5[COMMON] unsigned char 
  9089 ;; Return value:  Size  Location     Type
  9090 ;;		None               void
  9091 ;; Registers used:
  9092 ;;		wreg
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9098 ;;      Params:         0       0       0       0
  9099 ;;      Locals:         1       0       0       0
  9100 ;;      Temps:          1       0       0       0
  9101 ;;      Totals:         2       0       0       0
  9102 ;;Total ram usage:        2 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    2
  9105 ;; This function calls:
  9106 ;;		Nothing
  9107 ;; This function is called by:
  9108 ;;		_setLights_Initialization
  9109 ;;		_setLights_Main
  9110 ;;		_setLights
  9111 ;;		_Lights_Control
  9112 ;;		_getLights_Status
  9113 ;;		_setLights_Trigger
  9114 ;;		_getAll_Lights_Line
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _LightsPointSelect
  9120  0B48                     _LightsPointSelect:	
  9121                           
  9122                           ;incstack = 0
  9123                           ; Regs used in _LightsPointSelect: [wreg]
  9124                           ;LightsPointSelect@lights stored from wreg
  9125  0B48  00F5               	movwf	LightsPointSelect@lights
  9126                           
  9127                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  9128  0B49  0875               	movf	LightsPointSelect@lights,w
  9129  0B4A  3A01               	xorlw	1
  9130  0B4B  1D03               	skipz
  9131  0B4C  0008               	return
  9132                           
  9133                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  9134  0B4D  3047               	movlw	_Lights1& (0+255)
  9135  0B4E  00F4               	movwf	??_LightsPointSelect
  9136  0B4F  0874               	movf	??_LightsPointSelect,w
  9137  0B50  00F8               	movwf	_Lights
  9138  0B51  0008               	return
  9139  0B52                     __end_of_LightsPointSelect:	
  9140                           
  9141                           	psect	text61
  9142  0B73                     __ptext61:	
  9143 ;; *************** function _DetectSYSC_Signal *****************
  9144 ;; Defined at:
  9145 ;;		line 50 in file "../src/SYSC_B1.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;		None
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;		None
  9150 ;; Return value:  Size  Location     Type
  9151 ;;		None               void
  9152 ;; Registers used:
  9153 ;;		status,2
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9159 ;;      Params:         0       0       0       0
  9160 ;;      Locals:         0       0       0       0
  9161 ;;      Temps:          0       0       0       0
  9162 ;;      Totals:         0       0       0       0
  9163 ;;Total ram usage:        0 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:    2
  9166 ;; This function calls:
  9167 ;;		Nothing
  9168 ;; This function is called by:
  9169 ;;		_main
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           
  9174                           ;psect for function _DetectSYSC_Signal
  9175  0B73                     _DetectSYSC_Signal:	
  9176                           
  9177                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9178                           
  9179                           ;incstack = 0
  9180                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9181  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  9182  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  9183  0B75  19A6               	btfsc	_SYSC,3
  9184  0B76  2B7D               	goto	l1141
  9185                           
  9186                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9187  0B77  1E85               	btfss	5,5	;volatile
  9188  0B78  0008               	return
  9189                           
  9190                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9191  0B79  15A6               	bsf	_SYSC,3
  9192                           
  9193                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
  9194  0B7A  01A7               	clrf	_SYSC+1
  9195  0B7B  01A8               	clrf	_SYSC+2
  9196                           
  9197                           ;SYSC_B1.c: 55: }
  9198                           ;SYSC_B1.c: 56: } else {
  9199  0B7C  0008               	return
  9200  0B7D                     l1141:	
  9201                           
  9202                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9203  0B7D  1A85               	btfsc	5,5	;volatile
  9204  0B7E  0008               	return
  9205                           
  9206                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9207  0B7F  11A6               	bcf	_SYSC,3
  9208  0B80  0008               	return
  9209  0B81                     __end_of_DetectSYSC_Signal:	
  9210                           
  9211                           	psect	text62
  9212  0DC6                     __ptext62:	
  9213 ;; *************** function _CDS_Main *****************
  9214 ;; Defined at:
  9215 ;;		line 11 in file "../src/CDS_B1.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;		None
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;		None
  9220 ;; Return value:  Size  Location     Type
  9221 ;;		None               void
  9222 ;; Registers used:
  9223 ;;		wreg, status,2, status,0
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9229 ;;      Params:         0       0       0       0
  9230 ;;      Locals:         0       0       0       0
  9231 ;;      Temps:          0       3       0       0
  9232 ;;      Totals:         0       3       0       0
  9233 ;;Total ram usage:        3 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    2
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		_main
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           
  9244                           ;psect for function _CDS_Main
  9245  0DC6                     _CDS_Main:	
  9246                           
  9247                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9248                           
  9249                           ;incstack = 0
  9250                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9251  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  9252  0DC7  1303               	bcf	3,6	;RP1=0, select bank0
  9253  0DC8  1C2B               	btfss	__CDS,0
  9254  0DC9  0008               	return
  9255                           
  9256                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9257  0DCA  18AB               	btfsc	__CDS,1
  9258  0DCB  2DD9               	goto	l123
  9259                           
  9260                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9261  0DCC  19AB               	btfsc	__CDS,3
  9262  0DCD  0008               	return
  9263                           
  9264                           ;CDS_B1.c: 16: _CDS.Time++;
  9265  0DCE  3001               	movlw	1
  9266  0DCF  00DA               	movwf	??_CDS_Main
  9267  0DD0  085A               	movf	??_CDS_Main,w
  9268  0DD1  07AC               	addwf	__CDS+1,f
  9269                           
  9270                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9271  0DD2  3005               	movlw	5
  9272  0DD3  022C               	subwf	__CDS+1,w
  9273  0DD4  1C03               	skipc
  9274  0DD5  0008               	return
  9275                           
  9276                           ;CDS_B1.c: 18: {
  9277                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9278  0DD6  01AC               	clrf	__CDS+1
  9279                           
  9280                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9281  0DD7  15AB               	bsf	__CDS,3
  9282                           
  9283                           ;CDS_B1.c: 21: }
  9284                           ;CDS_B1.c: 22: }
  9285                           ;CDS_B1.c: 23: } else {
  9286  0DD8  0008               	return
  9287  0DD9                     l123:	
  9288                           
  9289                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9290  0DD9  1CAB               	btfss	__CDS,1
  9291  0DDA  0008               	return
  9292                           
  9293                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9294  0DDB  10AB               	bcf	__CDS,1
  9295                           
  9296                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9297  0DDC  1A2B               	btfsc	__CDS,4
  9298  0DDD  2DE4               	goto	l4874
  9299                           
  9300                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9301  0DDE  082D               	movf	__CDS+2,w
  9302  0DDF  022E               	subwf	__CDS+3,w
  9303  0DE0  1C03               	skipc
  9304  0DE1  0008               	return
  9305                           
  9306                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9307  0DE2  162B               	bsf	__CDS,4
  9308                           
  9309                           ;CDS_B1.c: 29: }
  9310                           ;CDS_B1.c: 30: } else {
  9311  0DE3  0008               	return
  9312  0DE4                     l4874:	
  9313                           
  9314                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9315  0DE4  082D               	movf	__CDS+2,w
  9316  0DE5  3E9C               	addlw	156
  9317  0DE6  00DA               	movwf	??_CDS_Main
  9318  0DE7  30FF               	movlw	255
  9319  0DE8  1803               	skipnc
  9320  0DE9  3000               	movlw	0
  9321  0DEA  00DB               	movwf	??_CDS_Main+1
  9322  0DEB  085B               	movf	??_CDS_Main+1,w
  9323  0DEC  3A80               	xorlw	128
  9324  0DED  00DC               	movwf	??_CDS_Main+2
  9325  0DEE  3080               	movlw	128
  9326  0DEF  025C               	subwf	??_CDS_Main+2,w
  9327  0DF0  1D03               	skipz
  9328  0DF1  2DF4               	goto	u6025
  9329  0DF2  082E               	movf	__CDS+3,w
  9330  0DF3  025A               	subwf	??_CDS_Main,w
  9331  0DF4                     u6025:	
  9332  0DF4  1C03               	skipc
  9333  0DF5  0008               	return
  9334                           
  9335                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9336  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  9337  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  9338  0DF8  122B               	bcf	__CDS,4
  9339  0DF9  0008               	return
  9340  0DFA                     __end_of_CDS_Main:	
  9341                           
  9342                           	psect	text63
  9343  0AFA                     __ptext63:	
  9344 ;; *************** function _CDS_Initialization *****************
  9345 ;; Defined at:
  9346 ;;		line 7 in file "../src/CDS_B1.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;		None
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;		None
  9351 ;; Return value:  Size  Location     Type
  9352 ;;		None               void
  9353 ;; Registers used:
  9354 ;;		None
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9360 ;;      Params:         0       0       0       0
  9361 ;;      Locals:         0       0       0       0
  9362 ;;      Temps:          0       0       0       0
  9363 ;;      Totals:         0       0       0       0
  9364 ;;Total ram usage:        0 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    2
  9367 ;; This function calls:
  9368 ;;		Nothing
  9369 ;; This function is called by:
  9370 ;;		_main
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function _CDS_Initialization
  9376  0AFA                     _CDS_Initialization:	
  9377                           
  9378                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9379                           
  9380                           ;incstack = 0
  9381                           ; Regs used in _CDS_Initialization: []
  9382  0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  9383  0AFB  1303               	bcf	3,6	;RP1=0, select bank0
  9384  0AFC  142B               	bsf	__CDS,0
  9385  0AFD  0008               	return
  9386  0AFE                     __end_of_CDS_Initialization:	
  9387                           
  9388                           	psect	text64
  9389  0C7C                     __ptext64:	
  9390 ;; *************** function _ISR *****************
  9391 ;; Defined at:
  9392 ;;		line 112 in file "../src/MCU_B1.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;		None
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;		None
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9406 ;;      Params:         0       0       0       0
  9407 ;;      Locals:         0       0       0       0
  9408 ;;      Temps:          4       0       0       0
  9409 ;;      Totals:         4       0       0       0
  9410 ;;Total ram usage:        4 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    1
  9413 ;; This function calls:
  9414 ;;		_TMR1_ISR
  9415 ;; This function is called by:
  9416 ;;		Interrupt level 1
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _ISR
  9422  0C7C                     _ISR:	
  9423                           
  9424                           ;MCU_B1.c: 121: if (TMR1IE == 1 && TMR1IF == 1) {
  9425  0C7C  1683               	bsf	3,5	;RP0=1, select bank1
  9426  0C7D  1303               	bcf	3,6	;RP1=0, select bank1
  9427  0C7E  1C0C               	btfss	12,0	;volatile
  9428  0C7F  2C87               	goto	i1l445
  9429  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  9430  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  9431  0C82  1C0C               	btfss	12,0	;volatile
  9432  0C83  2C87               	goto	i1l445
  9433                           
  9434                           ;MCU_B1.c: 122: TMR1_ISR();
  9435  0C84  158A  2439  158A   	fcall	_TMR1_ISR
  9436  0C87                     i1l445:	
  9437                           ;MCU_B1.c: 123: }
  9438                           ;MCU_B1.c: 144: return;
  9439                           
  9440  0C87  0873               	movf	??_ISR+3,w
  9441  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  9442  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  9443  0C8A  00FF               	movwf	127
  9444  0C8B  0872               	movf	??_ISR+2,w
  9445  0C8C  008A               	movwf	10
  9446  0C8D  0871               	movf	??_ISR+1,w
  9447  0C8E  0084               	movwf	4
  9448  0C8F  0E70               	swapf	??_ISR^(0+-128),w
  9449  0C90  0083               	movwf	3
  9450  0C91  0EFE               	swapf	126,f
  9451  0C92  0E7E               	swapf	126,w
  9452  0C93  0009               	retfie
  9453  0C94                     __end_of_ISR:	
  9454                           
  9455                           	psect	intentry
  9456  0004                     __pintentry:	
  9457                           ;incstack = 0
  9458                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9459                           
  9460  0004                     interrupt_function:	
  9461  007E                     saved_w	set	btemp
  9462  0004  00FE               	movwf	btemp
  9463  0005  0E03               	swapf	3,w
  9464  0006  00F0               	movwf	??_ISR
  9465  0007  0804               	movf	4,w
  9466  0008  00F1               	movwf	??_ISR+1
  9467  0009  080A               	movf	10,w
  9468  000A  00F2               	movwf	??_ISR+2
  9469  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9470  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9471  000D  087F               	movf	btemp+1,w
  9472  000E  00F3               	movwf	??_ISR+3
  9473  000F  158A  2C7C         	ljmp	_ISR
  9474                           
  9475                           	psect	text65
  9476  0C39                     __ptext65:	
  9477 ;; *************** function _TMR1_ISR *****************
  9478 ;; Defined at:
  9479 ;;		line 232 in file "../src/MCU_B1.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;		None               void
  9486 ;; Registers used:
  9487 ;;		wreg, status,2
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9493 ;;      Params:         0       0       0       0
  9494 ;;      Locals:         0       0       0       0
  9495 ;;      Temps:          0       0       0       0
  9496 ;;      Totals:         0       0       0       0
  9497 ;;Total ram usage:        0 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_ISR
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           
  9507                           ;psect for function _TMR1_ISR
  9508  0C39                     _TMR1_ISR:	
  9509                           
  9510                           ;MCU_B1.c: 234: TMR1H = (int)((65536-1480)/256);
  9511                           
  9512                           ;incstack = 0
  9513                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9514  0C39  30FA               	movlw	250
  9515  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  9516  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  9517  0C3C  008F               	movwf	15	;volatile
  9518                           
  9519                           ;MCU_B1.c: 235: TMR1L = (int)((65536-1480)%256);
  9520  0C3D  3038               	movlw	56
  9521  0C3E  008E               	movwf	14	;volatile
  9522                           
  9523                           ;MCU_B1.c: 236: TMR1IF = 0;
  9524  0C3F  100C               	bcf	12,0	;volatile
  9525                           
  9526                           ;MCU_B1.c: 255: Timer1.Count++;
  9527  0C40  3001               	movlw	1
  9528  0C41  07B5               	addwf	_Timer1+1,f
  9529  0C42  1803               	skipnc
  9530  0C43  0AB6               	incf	_Timer1+2,f
  9531  0C44  3000               	movlw	0
  9532  0C45  07B6               	addwf	_Timer1+2,f
  9533                           
  9534                           ;MCU_B1.c: 256: if (Timer1.Count == (int)(20*10)) {
  9535  0C46  30C8               	movlw	200
  9536  0C47  0635               	xorwf	_Timer1+1,w
  9537  0C48  0436               	iorwf	_Timer1+2,w
  9538  0C49  1D03               	skipz
  9539  0C4A  0008               	return
  9540                           
  9541                           ;MCU_B1.c: 257: Timer1.Count = 0;
  9542  0C4B  01B5               	clrf	_Timer1+1
  9543  0C4C  01B6               	clrf	_Timer1+2
  9544                           
  9545                           ;MCU_B1.c: 258: Timer1.Timeout = 1;
  9546  0C4D  1434               	bsf	_Timer1,0
  9547  0C4E  0008               	return
  9548  0C4F                     __end_of_TMR1_ISR:	
  9549  007E                     btemp	set	126	;btemp
  9550  007E                     wtemp	set	126
  9551  007E                     wtemp0	set	126
  9552  0080                     wtemp1	set	128
  9553  0082                     wtemp2	set	130
  9554  0084                     wtemp3	set	132
  9555  0086                     wtemp4	set	134
  9556  0088                     wtemp5	set	136
  9557  007F                     wtemp6	set	127
  9558  007E                     ttemp	set	126
  9559  007E                     ttemp0	set	126
  9560  0081                     ttemp1	set	129
  9561  0084                     ttemp2	set	132
  9562  0087                     ttemp3	set	135
  9563  007F                     ttemp4	set	127
  9564  007E                     ltemp	set	126
  9565  007E                     ltemp0	set	126
  9566  0082                     ltemp1	set	130
  9567  0086                     ltemp2	set	134
  9568  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     20      78
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_Lights_Close
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _setLights->_LightsPointSelect
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_All_LightsStatus
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22651
                                             15 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     555
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2785
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     923
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1294
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1294
                                              5 COMMON     1     1      0
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    3623
                                              6 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1770
                                              7 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    2144
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     634
                                              3 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     371
                                              0 BANK0      3     2      1
                  _LightsPointSelect
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0    1222
                                              8 BANK0      5     5      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0      24
                                              5 COMMON     1     1      0
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2262
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2262
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2377
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2377
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       7     7      0    3891
                                              6 BANK0      7     7      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     940
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2222
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_All_LightsStatus
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _LightsPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A7      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Jan 07 10:14:14 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 005F                                  fsr 0004  
               ___wmul@multiplicand 005C                                 l123 0DD9  
                               l268 0C9D                                 l269 0CA5  
                               l630 0E32                                 l625 0E19  
                               l626 0E36                                 l731 0259  
                               l740 03D8                                 l732 0255  
                               l733 024F                                 l745 038E  
                               l729 0401                                 l739 03DA  
                               l931 007F                                 l923 0204  
                               l924 0079                                 l933 0092  
                               l925 0048                                 l854 065B  
                               l928 005B                                 l849 065E  
                               _GIE 005F                                 _RB2 0032  
                               _RA4 002C                                 _LED 0076  
                               _RB3 0033                                 _RA5 002D  
                               _RB4 0034                                 _RB5 0035  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0C7C  
                               _PSA 040B                                 _WDT 0037  
                               _Cmd 0039              getAll_Lights_Line@line 005A  
                               fsr0 0004                                 indf 0000  
                   __end_of_ADC_Set 0B27           __end_of_LightsPointSelect 0B52  
                  _getLights_Status 0BCB             __size_of_Lights_Control 009B  
                              ?_ISR 0070                          Load_Main@i 0065  
                              l1141 0B7D                                l1415 0D2C  
                              l1299 0D14                                l3252 0E15  
                              l3244 0E09                                l5020 0505  
                              l5004 04BB                                l3262 0E2D  
                              l3254 0E1D                                l5014 04E9  
                              l5112 034E                                l5122 0380  
                              l5210 0069                                l5034 053F  
                              l5300 01A5                                l5028 0531  
                              l5134 03B2                                l5118 035A  
                              l4520 0FF4                                l5080 027F  
                              l5064 0258                                l5048 0239  
                              l4516 0FEE                                l4524 0FFA  
                              l4620 0F22                                l4612 0F0F  
                              l4604 0EEB                                l5172 03EE  
                              l5316 01D4                                l5260 00CC  
                              l5412 0F44                                l4454 0FA0  
                              l4462 0FA8                                l4606 0EF9  
                              l5190 0D15                                l5086 02BB  
                              l3582 07EA                                l4630 0CF3  
                              l4616 0F1A                                l4800 0590  
                              l5264 00D8                                l5248 00B5  
                              l3576 07D1                                l3912 0CBE  
                              l5424 0F67                                l4490 0FD0  
                              l5266 00D9                                l4722 05FA  
                              l4634 0CF9                                l4468 0FB1  
                              l4476 0FB9                                l5356 067C  
                              l4660 0770                                l4812 05CC  
                              l4548 0C74                                l5284 012D  
                              l5276 0119                                l4628 0CF0  
                              l4486 0FCC                                l4494 0FD4  
                              l5374 06CC                                l5366 06A2  
                              l5294 0164                                l5376 06AF  
                              l5368 06AB                                l4680 07AA  
                              l4664 0776                                l4576 0EC4  
                              l4568 0EA4                                l4840 0E50  
                              l4920 071F                                l4498 0FDC  
                              l4674 0788                                l4594 0EE3  
                              l4850 0E71                                l4818 0D22  
                              l5298 0196                                l4754 064B  
                              l4738 0630                                l4676 0794  
                              l4668 077C                                l4588 0ED8  
                              l4764 065A                                l4916 0716  
                              l4908 06FA                                l4678 079C  
                              l4782 0DBF                                l4846 0E66  
                              l4838 0E42                                l4950 0D63  
                              l4936 0743                                l4874 0DE4  
                              l4980 0478                                l4972 0468  
                              l4984 0480                                l4976 0470  
                              l4988 0488                                l4998 049F  
             _myMain_Initialization 0AE7                        __CFG_WDTE$ON 0000  
                              u3355 07F6                                u6025 0DF4  
                              _PEIE 005E                                u5405 0F06  
                              u5415 0F10                                u5530 0791  
                              u5275 0C1E                                u7070 06D5  
                              u5550 07A7                                u5375 0EEE  
                              u6425 027D                                u7075 06B8  
                              u5395 0EFA                                u6435 02B9  
                              u6525 03A3                                u6445 0310  
                              u5815 05B1                                u5915 0E51  
                              u5765 0574                                u5925 0E5D  
                              u5790 058C                                u5935 0E67  
                              u5855 0D2D                                u5865 0D34  
                              u6905 0188                                u6925 01B5  
                              u5895 0E45                                u6855 00F7  
                              u6865 010F                                u6885 014B  
                              u6975 01F1                                __CDS 002B  
           ?_setSYSC_Initialization 0070                                _SYSC 0026  
                              __PIR 00A0                                _Load 00CE  
                              _Temp 003B                                _main 0F29  
                              btemp 007E                     __end_of_WDT_Set 0BAB  
                              ltemp 007E                                start 0011  
                              ttemp 007E                                wtemp 007E  
                  __end_of_CDS_Main 0DFA        __size_of_Temp_Initialization 0003  
                             ??_ISR 0070                   _setLights_Trigger 0CC8  
                     ??_Lights_Main 0076                       __CFG_PLLEN$ON 0000  
                  __end_of_LED_Main 0AEB                  ?_setLights_Trigger 005A  
                  ??_setPIRLED_Main 005C                               ?_main 0069  
                   __end_of___awdiv 0F29                               _ADRES 001E  
                   ___awdiv@divisor 005A                               _T1CON 0010  
                   __end_of___lwdiv 0E78                       ?_Lights_Close 0070  
                             i1l445 0C87                     ___awdiv@counter 005E  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0C24                               _Light 0077  
               ??_setLights_Trigger 005B                    __end_of_PIR_Main 0222  
                  __end_of_TMR1_ISR 0C4F                    __end_of_TMR1_Set 0B9D  
                             _getAD 0CE3      __end_of_setSYSC_Initialization 0800  
    getLights_Allow_Condition@allow 005A             __end_of_getLight_LoadGO 0B0D  
                  __end_of_WDT_Main 0BFE                       _LightsControl 0079  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0B5C  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0C10                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 0067                   getPIR_AD@channel2 0062  
            ?_setLoad_AH_AL_Restore 0070                   setTemp_Main@error 0062  
                    _setLights_Main 0D96                      _setLights_Line 0B81  
                   __initialization 0013                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0CE3                        __end_of_main 0F8F  
                  __end_of_Fosc_Set 0B07      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 0662                           ??_ADC_Set 0074  
                            ??_main 006D                      ??_Lights_Close 0075  
               __end_of_Lights_Main 0D20          __size_of_LightsPointSelect 000A  
          _getMain_All_LightsStatus 0B3F                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 005C  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0DFA  
                            _FVRCON 009D              getLights_Status@lights 005A  
                            _PIRLED 0030                              _OSCCON 0090  
                __size_of_Load_Main 01E7                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0C24  
            getLights_Status@status 005B              __end_of_setLights_Main 0DC6  
            __end_of_setLights_Line 0B8F        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0BBA                              _Lights 0078  
                            _Timer1 0034         __size_of_CDS_Initialization 0004  
           ??_Lights_Initialization 0076              __end_of_Exception_Main 06D8  
              Load_Main@Load_Status 0064                Exception_Main@lights 0061  
                            ___wmul 0D20                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0063  
                            _setLED 0F8F                              _myMain 0020  
                  ___awdiv@quotient 0060                  __size_of_Temp_Main 0003  
       __end_of_Load_Initialization 0AEE     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 0075                   __end_of_SYSC_Main 0AF4  
                    _Lights_Control 0541             __size_of_LedPointSelect 001A  
                         ?_CDS_Main 0070                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                     ?_setSYSC_Main 0070          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 002A  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0BDC  
                     __end_of_getAD 0CFF                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0B67                  __size_of_getPIR_AD 0138  
                       _Lights_Main 0CFF            _setLights_Initialization 0B19  
              _getMain_Lights_Count 0B52                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0409          __end_of_set_TimeoutCleared 0B19  
               ?_LED_Initialization 0070              __end_of_Lights_Control 05DC  
                           ??_getAD 0075                 _Temp_Initialization 0AF4  
                        ??_CDS_Main 005A                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0011                   __end_of_Temp_Main 0AFA  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
              __end_of_Lights_Close 0BED                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F29          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                             ?___wmul 005A  
                        ??_PIR_Main 0060                          ??_TMR1_ISR 0070  
                     ?_setTemp_Main 0070                  __size_of_setLights 0054  
                        _getLoad_AD 06D8                          ??_TMR1_Set 0074  
                        __pintentry 0004                          _getLoad_OK 0B27  
                           ?_setLED 005A             setLights_Trigger@lights 005C  
             ?_getMain_Lights_Count 0070                             _ADC_Set 0B20  
                        _getTemp_AD 0D45                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0D96                             _WDT_Set 0B9D  
                        ??_Fosc_Set 0074                   __end_of_getPIR_AD 0541  
           ??_setLoad_AH_AL_Restore 0074      _getLights_Allow_Condition$4633 005B  
                   __size_of_IO_Set 0015                          getCDS_AD@i 005D  
                        getCDS_AD@j 005E                             _Lights1 0047  
                           _VarLED1 0052                             _VarLED2 0056  
             ??_Temp_Initialization 0074                      ??_setTemp_Main 0075  
                           ___awdiv 0ECC                     __size_of___wmul 0025  
                           ___lwdiv 0E38          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 0068                     __size_of_setLED 0071  
                           __ptext0 0000                             __ptext1 0CAE  
                           __ptext2 0AE7                             __ptext3 0D45  
                           __ptext4 0409                             __ptext5 06D8  
                           __ptext6 0D6C                             __ptext7 0CE3  
                           __ptext8 0B13                             __ptext9 0C10  
                        getPIR_AD@i 0068                          getPIR_AD@j 0066  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0AEE             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0C94  
                           clrloop0 0B38                   __end_of_setLights 0ECC  
              end_of_initialization 0023                       _getCDS_Status 0B2F  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0BFE  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0B02                         ?_getTemp_AD 0070  
          setLED_Initialization@led 005C                  _Mcu_Initialization 0BAB  
              __end_of_my_MainTimer 0CC8                __end_of_setSYSC_Main 07FC  
            __end_of_LedPointSelect 0CAE                 setPIRLED_Main@count 005D  
               ?_Mcu_Initialization 0070               __size_of_Lights_Close 0011  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 005D  
                         _SYSC_Main 0AF1     getMain_All_Error_Status@command 005E  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0060  
                    __end_of_IO_Set 0C39          __end_of_CDS_Initialization 0AFE  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                    __end_of___wmul 0D45                   __size_of_PIR_Main 01FC  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 1000  
          ??_setSYSC_Initialization 0074                        _Lights_Close 0BDC  
                 __size_of_WDT_Main 0011                 _Lights_Control$4611 0064  
               start_initialization 0013                     ?_LedPointSelect 0070  
              setLights_Line@lights 0074                           _Load_Main 0222  
                       __end_of_ISR 0C94          __end_of_PIR_Initialization 0B67  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0B13  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0074  
              __end_of_setTemp_Main 0662                 __size_of_getLoad_AD 0071  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0B13                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 004E  
               __size_of_getTemp_AD 0027              ?_setLED_Initialization 0070  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 0AF7                     setLights@lights 005C  
               ?_set_TimeoutCleared 0070                      ??_WDT_Clearing 0074  
       ??_getLights_Allow_Condition 0075                 Exception_Main@count 0062  
                   setLights@status 005A                 Exception_Main@error 0066  
                          ??___wmul 0074    __end_of_getMain_All_LightsStatus 0B48  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 0062    __end_of_getMain_All_Error_Status 0E38  
                       __pbssCOMMON 0076                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 005A  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0BCB  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 0065                           _getCDS_AD 0D6C  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0C65  
                         _getPIR_AD 0409         __size_of_LED_Initialization 000C  
                   Exception_Main@i 0064                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 005C                      Load_Main@error 0063  
            _setTemp_Initialization 0AE6                       _PIR_Main$3125 0066  
                          ?___awdiv 005A               __size_of_my_MainTimer 001A  
                          ?___lwdiv 005A               __size_of_setSYSC_Main 0042  
          setLights_Trigger@command 005A     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0C65      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0AE8                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005F                      _setPIRLED_Main 0749  
                          _CDS_Main 0DC6                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0AF7                   interrupt_function 0004  
                        ?_getCDS_AD 005A                      ___wmul@product 0074  
                          _LED_Main 0AE8                           _setLights 0E78  
                         clear_ram0 0B37    __end_of_setLights_Initialization 0B20  
                      _my_MainTimer 0CAE                          ?_getPIR_AD 0062  
                      _setSYSC_Main 07BA                            _GO_nDONE 00F9  
                 ??_Timeout_Counter 0074                            _PIR_Main 0026  
                      ??_getLoad_AD 005A                            _TMR1_ISR 0C39  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0B0D  
                          _TMR1_Set 0B8F                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 005A                            _WDT_Main 0BED  
                  __size_of_ADC_Set 0007                   ___wmul@multiplier 005A  
              __size_of_Lights_Main 0021               __size_of_setTemp_Main 0086  
                       ??_Load_Main 0061              __end_of_setPIRLED_Main 07BA  
    getMain_All_Error_Status@status 005F                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0B02                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0749                  __end_of_getLoad_OK 0B2F  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 005A                  __end_of_getTemp_AD 0D6C  
            _setSYSC_Initialization 07FC                   getLoad_AD@channel 005C  
                 _DetectSYSC_Signal 0B73                            _SwDetect 003A  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2341 005A  
     _getMain_All_Error_Status$2342 005C                 _Load_Initialization 0AEB  
                ?_DetectSYSC_Signal 0070                           setLED@led 005B  
             ?_getLight_Load_Status 0070                        _setTemp_Main 05DC  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0AFA               _Lights_Initialization 0AFE  
                 getTemp_AD@channel 005C                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 005A                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 005E  
                          __ptext10 0BED                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0AF7  
                          __ptext21 0B2F                            __ptext13 05DC  
                          __ptext30 0B52                            __ptext22 0B5C  
                          __ptext14 0AF4                            __ptext31 0B0D  
                          __ptext23 0BAB                            __ptext15 0AE6  
                          __ptext40 0B81                            __ptext32 0B07  
                          __ptext24 0B9D                            __ptext16 0AF1  
                          __ptext41 0C65                            __ptext33 0D20  
                          __ptext25 0B8F                            __ptext17 07BA  
                          __ptext50 0749                            __ptext42 0B27  
                          __ptext34 0E38                            __ptext26 0C24  
                          __ptext18 0AEE                            __ptext51 0B67  
                          __ptext43 0541                            __ptext35 0AEB  
                          __ptext27 0B02                            __ptext19 07FC  
                          __ptext60 0B48                            __ptext52 0BFE  
                          __ptext44 0ECC                            __ptext36 0C4F  
                          __ptext28 0B20                            __ptext61 0B73  
                          __ptext53 0662                            __ptext45 0BDC  
                          __ptext37 0CFF                            __ptext29 0222  
                          __ptext62 0DC6                            __ptext54 0CC8  
                          __ptext46 0B3F                            __ptext38 0D96  
                          __ptext63 0AFA                            __ptext55 0F8F  
                          __ptext47 0AFE                            __ptext39 0E78  
                          __ptext64 0C7C                            __ptext56 0C94  
                          __ptext48 0B19                            __ptext65 0C39  
                          __ptext57 0DFA                            __ptext49 0AE8  
                          __ptext58 0BCB                            __ptext59 0BBA  
         __size_of_getLights_Status 0011         __end_of_SYSC_Initialization 0AF1  
           ??_setLED_Initialization 0076                         ??_getCDS_AD 005B  
                     setLED@command 005A           __end_of_DetectSYSC_Signal 0B81  
                     __size_of_main 0066                         ??_getPIR_AD 0063  
                _PIR_Initialization 0B5C                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F                        getLoad_OK@ok 0074  
               ?_PIR_Initialization 0070                            main@argc 0069  
                          main@argv 006B   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070               ??_Load_Initialization 0076  
              Lights_Control@lights 0066                ??_PIR_Initialization 0074  
                          intlevel1 0000  __size_of_getLights_Allow_Condition 0017  
                       ??_setLights 005B             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 0BBA  
            ??_getLight_Load_Status 0074                         getLoad_AD@i 005F  
                       getLoad_AD@j 005E                         getLoad_AD@k 005D  
           __size_of_setLights_Main 0030             __size_of_setLights_Line 000E  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 0076  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 005A  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0B48  
              ??_getAll_Lights_Line 0076                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0C10  
        __end_of_LED_Initialization 0B73               __end_of_getCDS_Status 0B37  
    __end_of_setTemp_Initialization 0AE7          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0B07                   getCDS_AD@channel1 005F  
                 getCDS_AD@channel2 005A   __end_of_getLights_Allow_Condition 0C7C  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0C4F  
