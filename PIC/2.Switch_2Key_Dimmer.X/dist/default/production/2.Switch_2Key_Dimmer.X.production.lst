

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 14 16:31:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,delta=2
   153                           	psect	intentry,global,class=CODE,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text142,local,class=CODE,merge=1,delta=2
   164                           	psect	text143,local,class=CODE,merge=1,delta=2
   165                           	psect	text144,local,class=CODE,merge=1,delta=2
   166                           	psect	text145,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055                           
  2056                           	psect	idataBANK3
  2057  1AA8                     __pidataBANK3:	
  2058                           
  2059                           ;initializer for __product
  2060  1AA8  3463               	retlw	99
  2061  1AA9  3402               	retlw	2
  2062  1AAA  3400               	retlw	0
  2063  1AAB  3400               	retlw	0
  2064  1AAC  3400               	retlw	0
  2065  1AAD  3400               	retlw	0
  2066  1AAE  3400               	retlw	0
  2067  1AAF  3400               	retlw	0
  2068  1AB0  3400               	retlw	0
  2069  1AB1  3400               	retlw	0
  2070  1AB2  3400               	retlw	0
  2071  1AB3  3400               	retlw	0
  2072  1AB4  34FF               	retlw	255
  2073  1AB5  34FF               	retlw	255
  2074  1AB6  34FF               	retlw	255
  2075  1AB7  3400               	retlw	0
  2076  1AB8  3400               	retlw	0
  2077  1AB9  3400               	retlw	0
  2078  1ABA  3400               	retlw	0
  2079  1ABB  3400               	retlw	0
  2080  1ABC  3400               	retlw	0
  2081  1ABD  3400               	retlw	0
  2082  1ABE  3400               	retlw	0
  2083  1ABF  3400               	retlw	0
  2084  1AC0  3400               	retlw	0
  2085  1AC1  3400               	retlw	0
  2086  1AC2  3400               	retlw	0
  2087  1AC3  3400               	retlw	0
  2088  1AC4  3400               	retlw	0
  2089  1AC5  3400               	retlw	0
  2090  1AC6  3400               	retlw	0
  2091  1AC7  3400               	retlw	0
  2092                           
  2093                           	psect	stringtext
  2094  1800                     __pstringtext:	
  2095  1800                     _CC2500_registers_address:	
  2096  1800  3403               	retlw	3
  2097  1801  3416               	retlw	22
  2098  1802  3417               	retlw	23
  2099  1803  341E               	retlw	30
  2100  1804  341F               	retlw	31
  2101  1805  3420               	retlw	32
  2102  1806  342A               	retlw	42
  2103  1807  342B               	retlw	43
  2104  1808  340B               	retlw	11
  2105  1809  340C               	retlw	12
  2106  180A  340D               	retlw	13
  2107  180B  340E               	retlw	14
  2108  180C  340F               	retlw	15
  2109  180D  3410               	retlw	16
  2110  180E  3411               	retlw	17
  2111  180F  3412               	retlw	18
  2112  1810  3413               	retlw	19
  2113  1811  3414               	retlw	20
  2114  1812  340A               	retlw	10
  2115  1813  3415               	retlw	21
  2116  1814  3421               	retlw	33
  2117  1815  3422               	retlw	34
  2118  1816  3418               	retlw	24
  2119  1817  3419               	retlw	25
  2120  1818  341A               	retlw	26
  2121  1819  341B               	retlw	27
  2122  181A  341C               	retlw	28
  2123  181B  341D               	retlw	29
  2124  181C  3423               	retlw	35
  2125  181D  3424               	retlw	36
  2126  181E  3425               	retlw	37
  2127  181F  3426               	retlw	38
  2128  1820  3429               	retlw	41
  2129  1821  342C               	retlw	44
  2130  1822  342D               	retlw	45
  2131  1823  342E               	retlw	46
  2132  1824  3400               	retlw	0
  2133  1825  3401               	retlw	1
  2134  1826  3402               	retlw	2
  2135  1827  3407               	retlw	7
  2136  1828  3408               	retlw	8
  2137  1829  3409               	retlw	9
  2138  182A  3406               	retlw	6
  2139  182B  3404               	retlw	4
  2140  182C  3405               	retlw	5
  2141  182D  3427               	retlw	39
  2142  182E  3428               	retlw	40
  2143  182F                     __end_of_CC2500_registers_address:	
  2144  182F                     _CC2500_rfSettings:	
  2145  182F  3407               	retlw	7
  2146  1830  3407               	retlw	7
  2147  1831  3430               	retlw	48
  2148  1832  3487               	retlw	135
  2149  1833  346B               	retlw	107
  2150  1834  34F8               	retlw	248
  2151  1835  347F               	retlw	127
  2152  1836  343F               	retlw	63
  2153  1837  3409               	retlw	9
  2154  1838  3400               	retlw	0
  2155  1839  345C               	retlw	92
  2156  183A  34A7               	retlw	167
  2157  183B  3462               	retlw	98
  2158  183C  3486               	retlw	134
  2159  183D  3483               	retlw	131
  2160  183E  3403               	retlw	3
  2161  183F  3422               	retlw	34
  2162  1840  34F8               	retlw	248
  2163  1841  3400               	retlw	0
  2164  1842  3444               	retlw	68
  2165  1843  34B6               	retlw	182
  2166  1844  3410               	retlw	16
  2167  1845  3418               	retlw	24
  2168  1846  341D               	retlw	29
  2169  1847  341C               	retlw	28
  2170  1848  34C7               	retlw	199
  2171  1849  3400               	retlw	0
  2172  184A  34B2               	retlw	178
  2173  184B  34EA               	retlw	234
  2174  184C  340A               	retlw	10
  2175  184D  3400               	retlw	0
  2176  184E  3411               	retlw	17
  2177  184F  3459               	retlw	89
  2178  1850  3488               	retlw	136
  2179  1851  3431               	retlw	49
  2180  1852  340B               	retlw	11
  2181  1853  342F               	retlw	47
  2182  1854  342E               	retlw	46
  2183  1855  3406               	retlw	6
  2184  1856  3404               	retlw	4
  2185  1857  3405               	retlw	5
  2186  1858  3400               	retlw	0
  2187  1859  3430               	retlw	48
  2188  185A  34D3               	retlw	211
  2189  185B  3491               	retlw	145
  2190  185C  3441               	retlw	65
  2191  185D  3400               	retlw	0
  2192  185E                     __end_of_CC2500_rfSettings:	
  2193  185E                     _CC2500_patable_vaule:	
  2194  185E  34FE               	retlw	254
  2195  185F  34FE               	retlw	254
  2196  1860  34FE               	retlw	254
  2197  1861  34FE               	retlw	254
  2198  1862  34FE               	retlw	254
  2199  1863  34FE               	retlw	254
  2200  1864  34FE               	retlw	254
  2201  1865  34FE               	retlw	254
  2202  1866                     __end_of_CC2500_patable_vaule:	
  2203                           
  2204                           	psect	nvCOMMON
  2205  007D                     __pnvCOMMON:	
  2206  007D                     _product:	
  2207  007D                     	ds	1
  2208                           
  2209                           	psect	nvBANK1
  2210  00EB                     __pnvBANK1:	
  2211  00EB                     _Timer0:	
  2212  00EB                     	ds	1
  2213  00EC                     _WDT:	
  2214  00EC                     	ds	1
  2215  00ED                     _myMain:	
  2216  00ED                     	ds	1
  2217  00EE                     _Memory:	
  2218  00EE                     	ds	1
  2219  000C                     _PORTA	set	12
  2220  000D                     _PORTB	set	13
  2221  000E                     _PORTC	set	14
  2222  0015                     _TMR0	set	21
  2223  005F                     _GIE	set	95
  2224  005C                     _INTE	set	92
  2225  0059                     _INTF	set	89
  2226  005B                     _IOCIE	set	91
  2227  0058                     _IOCIF	set	88
  2228  005E                     _PEIE	set	94
  2229  0060                     _RA0	set	96
  2230  0063                     _RA3	set	99
  2231  0064                     _RA4	set	100
  2232  0066                     _RA6	set	102
  2233  0067                     _RA7	set	103
  2234  0068                     _RB0	set	104
  2235  0069                     _RB1	set	105
  2236  006B                     _RB3	set	107
  2237  006C                     _RB4	set	108
  2238  006D                     _RB5	set	109
  2239  0070                     _RC0	set	112
  2240  0071                     _RC1	set	113
  2241  0072                     _RC2	set	114
  2242  0074                     _RC4	set	116
  2243  0075                     _RC5	set	117
  2244  0077                     _RC7	set	119
  2245  005D                     _TMR0IE	set	93
  2246  005A                     _TMR0IF	set	90
  2247  009D                     _ADCON0	set	157
  2248  009E                     _ADCON1	set	158
  2249  009C                     _ADRESH	set	156
  2250  009B                     _ADRESL	set	155
  2251  0095                     _OPTION_REG	set	149
  2252  0099                     _OSCCON	set	153
  2253  008C                     _TRISA	set	140
  2254  008D                     _TRISB	set	141
  2255  008E                     _TRISC	set	142
  2256  0097                     _WDTCON	set	151
  2257  04E9                     _GO_nDONE	set	1257
  2258  0117                     _FVRCON	set	279
  2259  010C                     _LATA	set	268
  2260  010D                     _LATB	set	269
  2261  010E                     _LATC	set	270
  2262  018C                     _ANSELA	set	396
  2263  018D                     _ANSELB	set	397
  2264  018E                     _ANSELC	set	398
  2265  0192                     _PMADRH	set	402
  2266  0191                     _PMADRL	set	401
  2267  0196                     _PMCON2	set	406
  2268  0194                     _PMDATH	set	404
  2269  0193                     _PMDATL	set	403
  2270  0CAE                     _CFGS	set	3246
  2271  0CAC                     _FREE	set	3244
  2272  0CAD                     _LWLO	set	3245
  2273  0CA8                     _RD	set	3240
  2274  0CA9                     _WR	set	3241
  2275  0CAA                     _WREN	set	3242
  2276  1068                     _WPUB0	set	4200
  2277  1069                     _WPUB1	set	4201
  2278  106A                     _WPUB2	set	4202
  2279  0396                     _IOCBF	set	918
  2280  0395                     _IOCBN	set	917
  2281  0394                     _IOCBP	set	916
  2282  1CB2                     _IOCBF2	set	7346
  2283                           
  2284                           ; #config settings
  2285  0000                     
  2286                           	psect	cinit
  2287  0018                     start_initialization:	
  2288  0018                     __initialization:	
  2289                           
  2290                           ; Clear objects allocated to BITCOMMON
  2291  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2292                           
  2293                           ; Clear objects allocated to COMMON
  2294  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2295  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2296  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2297  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2298                           
  2299                           ; Clear objects allocated to BANK1
  2300  001D  30A0               	movlw	low __pbssBANK1
  2301  001E  0084               	movwf	4
  2302  001F  3000               	movlw	high __pbssBANK1
  2303  0020  0085               	movwf	5
  2304  0021  304B               	movlw	75
  2305  0022  31A5  258D  3180   	fcall	clear_ram0
  2306                           
  2307                           ; Clear objects allocated to BANK2
  2308  0025  3020               	movlw	low __pbssBANK2
  2309  0026  0084               	movwf	4
  2310  0027  3001               	movlw	high __pbssBANK2
  2311  0028  0085               	movwf	5
  2312  0029  3044               	movlw	68
  2313  002A  31A5  258D  3180   	fcall	clear_ram0
  2314                           
  2315                           ; Clear objects allocated to BANK3
  2316  002D  30C0               	movlw	low __pbssBANK3
  2317  002E  0084               	movwf	4
  2318  002F  3001               	movlw	high __pbssBANK3
  2319  0030  0085               	movwf	5
  2320  0031  301E               	movlw	30
  2321  0032  31A5  258D  3180   	fcall	clear_ram0
  2322                           
  2323                           ; Clear objects allocated to BANK4
  2324  0035  3020               	movlw	low __pbssBANK4
  2325  0036  0084               	movwf	4
  2326  0037  3002               	movlw	high __pbssBANK4
  2327  0038  0085               	movwf	5
  2328  0039  3025               	movlw	37
  2329  003A  31A5  258D  3180   	fcall	clear_ram0
  2330                           
  2331                           ; Clear objects allocated to BANK5
  2332  003D  30A0               	movlw	low __pbssBANK5
  2333  003E  0084               	movwf	4
  2334  003F  3002               	movlw	high __pbssBANK5
  2335  0040  0085               	movwf	5
  2336  0041  3047               	movlw	71
  2337  0042  31A5  258D  3180   	fcall	clear_ram0
  2338                           
  2339                           ; Initialize objects allocated to BANK3
  2340  0045  30A8               	movlw	low __pidataBANK3
  2341  0046  0084               	movwf	4
  2342  0047  309A               	movlw	(high __pidataBANK3)| (0+128)
  2343  0048  0085               	movwf	5
  2344  0049  30A0               	movlw	low __pdataBANK3
  2345  004A  0086               	movwf	6
  2346  004B  3001               	movlw	high __pdataBANK3
  2347  004C  0087               	movwf	7
  2348  004D  3020               	movlw	32
  2349  004E  31A5  2587         	fcall	init_ram
  2350  0050                     end_of_initialization:	
  2351                           ;End of C runtime variable initialization code
  2352                           
  2353  0050                     __end_of__initialization:	
  2354  0050  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2355  0051  0020               	movlb	0
  2356  0052  3193  2BE1         	ljmp	_main	;jump to C main() function
  2357                           
  2358                           	psect	bitbssCOMMON
  2359  03E0                     __pbitbssCOMMON:	
  2360  03E0                     _Receive_OK:	
  2361  03E0                     	ds	1
  2362  03E1                     _Transceive_OK:	
  2363  03E1                     	ds	1
  2364                           
  2365                           	psect	bssCOMMON
  2366  0078                     __pbssCOMMON:	
  2367  0078                     _DimmerLights:	
  2368  0078                     	ds	1
  2369  0079                     _DimmerLightsIntr:	
  2370  0079                     	ds	1
  2371  007A                     _Sw:	
  2372  007A                     	ds	1
  2373  007B                     _Load:	
  2374  007B                     	ds	1
  2375                           
  2376                           	psect	bssBANK1
  2377  00A0                     __pbssBANK1:	
  2378  00A0                     _RF_Data:	
  2379  00A0                     	ds	21
  2380  00B5                     _RF_Count:	
  2381  00B5                     	ds	2
  2382  00B7                     _Buz:	
  2383  00B7                     	ds	1
  2384  00B8                     _CRC:	
  2385  00B8                     	ds	1
  2386  00B9                     _DelayOff:	
  2387  00B9                     	ds	1
  2388  00BA                     _Dimmer:	
  2389  00BA                     	ds	1
  2390  00BB                     _DimmerLights11:	
  2391  00BB                     	ds	1
  2392  00BC                     _DimmerLights22:	
  2393  00BC                     	ds	1
  2394  00BD                     _DimmerLightsIntrIOC:	
  2395  00BD                     	ds	1
  2396  00BE                     _LED:	
  2397  00BE                     	ds	1
  2398  00BF                     _RF:	
  2399  00BF                     	ds	1
  2400  00C0                     _RFSW:	
  2401  00C0                     	ds	1
  2402  00C1                     _RSSI:	
  2403  00C1                     	ds	1
  2404  00C2                     _Rx_Length:	
  2405  00C2                     	ds	1
  2406  00C3                     _SPI0Buffer:	
  2407  00C3                     	ds	1
  2408  00C4                     _Temp:	
  2409  00C4                     	ds	1
  2410  00C5                     _Tx_Length:	
  2411  00C5                     	ds	1
  2412  00C6                     _r_address:	
  2413  00C6                     	ds	1
  2414  00C7                     _r_data:	
  2415  00C7                     	ds	1
  2416  00C8                     _s_data:	
  2417  00C8                     	ds	1
  2418  00C9                     _DlySw1:	
  2419  00C9                     	ds	5
  2420  00CE                     _DlySw2:	
  2421  00CE                     	ds	5
  2422  00D3                     _RF1:	
  2423  00D3                     	ds	5
  2424  00D8                     _VarErrLED:	
  2425  00D8                     	ds	4
  2426  00DC                     _VarLED1:	
  2427  00DC                     	ds	4
  2428  00E0                     _VarLED2:	
  2429  00E0                     	ds	4
  2430  00E4                     _Dimmer1:	
  2431  00E4                     	ds	3
  2432  00E7                     __WDT:	
  2433  00E7                     	ds	2
  2434  00E9                     _RFSW1:	
  2435  00E9                     	ds	1
  2436  00EA                     _RFSW2:	
  2437  00EA                     	ds	1
  2438                           
  2439                           	psect	bssBANK2
  2440  0120                     __pbssBANK2:	
  2441  0120                     _DimmerLights1:	
  2442  0120                     	ds	15
  2443  012F                     _DimmerLights2:	
  2444  012F                     	ds	15
  2445  013E                     _Buz1:	
  2446  013E                     	ds	12
  2447  014A                     _Sw1:	
  2448  014A                     	ds	9
  2449  0153                     _Sw2:	
  2450  0153                     	ds	9
  2451  015C                     _VarTimer0:	
  2452  015C                     	ds	8
  2453                           
  2454                           	psect	bssBANK3
  2455  01C0                     __pbssBANK3:	
  2456  01C0                     __myMain:	
  2457  01C0                     	ds	16
  2458  01D0                     _Temp1:	
  2459  01D0                     	ds	14
  2460                           
  2461                           	psect	dataBANK3
  2462  01A0                     __pdataBANK3:	
  2463  01A0                     __product:	
  2464  01A0                     	ds	32
  2465                           
  2466                           	psect	bssBANK4
  2467  0220                     __pbssBANK4:	
  2468  0220                     _VarMemory:	
  2469  0220                     	ds	37
  2470                           
  2471                           	psect	bssBANK5
  2472  02A0                     __pbssBANK5:	
  2473  02A0                     _Load1:	
  2474  02A0                     	ds	71
  2475                           
  2476                           	psect	clrtext
  2477  258D                     clear_ram0:	
  2478                           ;	Called with FSR0 containing the base address, and
  2479                           ;	WREG with the size to clear
  2480                           
  2481  258D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2482  258E                     clrloop0:	
  2483  258E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2484  258F  3101               	addfsr 0,1
  2485  2590  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2486  2591  2D8E               	goto	clrloop0	;have we reached the end yet?
  2487  2592  3400               	retlw	0	;all done for this memory range, return
  2488                           
  2489                           	psect	inittext
  2490  2587                     init_ram:	
  2491  2587  00FE               	movwf	126
  2492  2588                     initloop:	
  2493  2588  0012               	moviw fsr0++
  2494  2589  001E               	movwi fsr1++
  2495  258A  0BFE               	decfsz	126,f
  2496  258B  2D88               	goto	initloop
  2497  258C  3400               	retlw	0
  2498                           
  2499                           	psect	cstackCOMMON
  2500  0070                     __pcstackCOMMON:	
  2501  0070                     ?_CC2500_WriteByte:	
  2502  0070                     ?_CC2500_WriteCommand:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_CC2500_ReadStatus:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_CC2500_ReadByte:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_CC2500_PowerRST:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_CC2500_InitSetREG:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_CC2500_InitPATable:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_CC2500_ClearTXFIFO:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_CC2500_ClearRXFIFO:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_CC2500_FrequencyCabr:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_CC2500_SIDLEMode:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_DlyOff_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_DlyOff_Main:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setTxData:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setDimmerLights_Initialization:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_Dimmer_Initialization:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setLoad_GO:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setMemory_GO:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setDimmerLights_Main:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setDimmerLights_ERROR:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_setLoad_Count:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_setLED_Initialization:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_setLED_Main:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_Fosc_Set:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_IO_Set:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_TMR0_Set:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_ADC_Set:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_INT_Set:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_IOC_Set:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_WDT_Set:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_IOC_ISR:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_TMR0_ISR:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_INT_ISR:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_Flash_Memory_Write:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Flash_Memory_Modify:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_WDT_Clearing:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_myMain_Initialization:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_Temp_Initialization:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_Load_Initialization:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Switch_Initialization:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_RF_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_getLoad_AD:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_getTemp_AD:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_my_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_Temp_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_Load_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_Switch_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_RF_Main:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setTemp_Enable:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setLoad_Enable:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setSw_Enable:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setLoad_AH_AL_Restore:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setLoad_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setTemp_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setTemp_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setOverTemp_Exceptions:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setRF_Initialization:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setRF_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_RF_RxDisable:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_getRxData:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setLog_Code:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setControl_Lights_Table:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setRFSW_Control:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setRFSW_AdjControl:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setRF_DimmerValue:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setSw_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setSw_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Sw_DimmerOnFunc:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_Sw_DimmerAdjFunc:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_Sw_DimmerOffFunc:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Buzzer_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Buz_Counter:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ??_Buz_Counter:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Buzzer_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_CC2500_TxData:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_CC2500_RxData:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_CC2500_PowerOnInitial:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_DelayOffPointSelect:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_DelayOff_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_DelayOff_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_DimmerIntrIOCPointSelect:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ??_DimmerIntrIOCPointSelect:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_DimmerIntrPointSelect:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ??_DimmerIntrPointSelect:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setDimmerLights_IntrControl:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_DimmerLightsPointSelect:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_DimmerLights_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_DimmerLights_Close:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_DimmerLights_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_DimmerLights_Exceptions:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setDimmerLights_AdjRF:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_LedPointSelect:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_LED_Initialization:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_LED_Main:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_Mcu_Initialization:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_ISR:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setDimmerReClock:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_Flash_Memory_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_Flash_Memory_Main:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_Flash_Memory_Unlock:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_Flash_Memory_Erasing:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_WDT_Main:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_RfPointSelect:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_RfSWPointSelect:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_TouchPower:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_SwPointSelect:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?i1_setLoad_StatusOff:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?i1_RfPointSelect:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ??i1_RfPointSelect:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayTimejudge:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_getDimmerLights_StatusFlag:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_getPercentValue:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_Flash_Memory_Read:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_getTemp_Safe:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_setPercentValue:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ?_getLoad_Safe:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     setRF_Initialization@rf:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     i1setLoad_StatusOff@command:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x0
  2858  0070                     	ds	1
  2859  0071                     ??i1_setLoad_StatusOff:	
  2860  0071                     DimmerIntrIOCPointSelect@lights:	
  2861                           ; 0 bytes @ 0x1
  2862                           
  2863  0071                     DimmerIntrPointSelect@lights:	
  2864                           ; 1 bytes @ 0x1
  2865                           
  2866  0071                     i1setLoad_StatusOff@lights:	
  2867                           ; 1 bytes @ 0x1
  2868                           
  2869  0071                     i1RfPointSelect@rf:	
  2870                           ; 1 bytes @ 0x1
  2871                           
  2872                           
  2873                           ; 1 bytes @ 0x1
  2874  0071                     	ds	1
  2875  0072                     ?_setRF_ReceiveGO:	
  2876  0072                     ?_setRF_RxStatus:	
  2877                           ; 0 bytes @ 0x2
  2878                           
  2879  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2880                           ; 0 bytes @ 0x2
  2881                           
  2882  0072                     ??_setDimmerLights_IntrControl:	
  2883                           ; 0 bytes @ 0x2
  2884                           
  2885  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2886                           ; 0 bytes @ 0x2
  2887                           
  2888  0072                     setRF_ReceiveGO@command:	
  2889                           ; 1 bytes @ 0x2
  2890                           
  2891  0072                     setRF_RxStatus@command:	
  2892                           ; 1 bytes @ 0x2
  2893                           
  2894                           
  2895                           ; 1 bytes @ 0x2
  2896  0072                     	ds	1
  2897  0073                     ??_IOC_ISR:	
  2898  0073                     ??_setRF_ReceiveGO:	
  2899                           ; 0 bytes @ 0x3
  2900                           
  2901  0073                     ??_setRF_RxStatus:	
  2902                           ; 0 bytes @ 0x3
  2903                           
  2904  0073                     ??_setDimmerReClock:	
  2905                           ; 0 bytes @ 0x3
  2906                           
  2907  0073                     setRF_ReceiveGO@rf:	
  2908                           ; 0 bytes @ 0x3
  2909                           
  2910  0073                     setRF_RxStatus@rf:	
  2911                           ; 1 bytes @ 0x3
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0x3
  2915  0073                     	ds	1
  2916  0074                     ??_INT_ISR:	
  2917                           
  2918                           ; 0 bytes @ 0x4
  2919  0074                     	ds	2
  2920  0076                     setDimmerLights_IntrControl@lights:	
  2921                           
  2922                           ; 1 bytes @ 0x6
  2923  0076                     	ds	1
  2924  0077                     ??_TMR0_ISR:	
  2925  0077                     ??_ISR:	
  2926                           ; 0 bytes @ 0x7
  2927                           
  2928                           
  2929                           ; 0 bytes @ 0x7
  2930  0077                     	ds	1
  2931                           
  2932                           	psect	cstackBANK0
  2933  0020                     __pcstackBANK0:	
  2934  0020                     ??_CC2500_WriteByte:	
  2935  0020                     ??_CC2500_ReadByte:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ?_DelayTime_1us:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_DelayTimejudge:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ?_setLoad_StatusOff:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Dimmer_Initialization:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_getDimmerLights_StatusFlag:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_setLoad_GO:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_setMemory_GO:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_setLoad_Count:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ?_setLoad_StatusOn:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_Fosc_Set:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_IO_Set:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_TMR0_Set:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_ADC_Set:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_INT_Set:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_IOC_Set:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_WDT_Set:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_Flash_Memory_Read:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_Flash_Memory_Write:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_WDT_Clearing:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_myMain_Initialization:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_setTemp_Enable:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_setLoad_Enable:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_setLoad_AH_AL_Restore:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_getTemp_Safe:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_setTemp_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_setRF_Initialization:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_Buzzer_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_Buzzer_Main:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_DelayOffPointSelect:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_DimmerLightsPointSelect:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_LedPointSelect:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_Flash_Memory_Unlock:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_Flash_Memory_Erasing:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_WDT_Main:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_getLoad_Safe:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_RfPointSelect:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_RfSWPointSelect:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_TouchPower:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_SwPointSelect:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ?_getAD:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ?___wmul:	
  3059                           ; 2 bytes @ 0x0
  3060                           
  3061  0020                     ?___awdiv:	
  3062                           ; 2 bytes @ 0x0
  3063                           
  3064  0020                     ?___lwdiv:	
  3065                           ; 2 bytes @ 0x0
  3066                           
  3067  0020                     ?___ftpack:	
  3068                           ; 2 bytes @ 0x0
  3069                           
  3070  0020                     getAD@adcon1:	
  3071                           ; 3 bytes @ 0x0
  3072                           
  3073  0020                     setLoad_Enable@command:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0020                     setLoad_GO@command:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0020                     setLoad_StatusOn@command:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0020                     setLoad_StatusOff@command:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0020                     setTemp_Enable@command:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0020                     DelayTime_1us@count:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0020                     ___wmul@multiplier:	
  3092                           ; 2 bytes @ 0x0
  3093                           
  3094  0020                     ___awdiv@divisor:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097  0020                     ___lwdiv@divisor:	
  3098                           ; 2 bytes @ 0x0
  3099                           
  3100  0020                     ___ftpack@arg:	
  3101                           ; 2 bytes @ 0x0
  3102                           
  3103                           
  3104                           ; 3 bytes @ 0x0
  3105  0020                     	ds	1
  3106  0021                     ??_setLoad_StatusOff:	
  3107  0021                     ??_setLoad_StatusOn:	
  3108                           ; 0 bytes @ 0x1
  3109                           
  3110  0021                     ??_Temp_Initialization:	
  3111                           ; 0 bytes @ 0x1
  3112                           
  3113  0021                     ??_RF_Initialization:	
  3114                           ; 0 bytes @ 0x1
  3115                           
  3116  0021                     ??_Mcu_Initialization:	
  3117                           ; 0 bytes @ 0x1
  3118                           
  3119  0021                     CC2500_WriteByte@loop_a:	
  3120                           ; 0 bytes @ 0x1
  3121                           
  3122  0021                     CC2500_ReadByte@loop_b:	
  3123                           ; 1 bytes @ 0x1
  3124                           
  3125  0021                     DelayOffPointSelect@sw:	
  3126                           ; 1 bytes @ 0x1
  3127                           
  3128  0021                     DelayTimejudge@value:	
  3129                           ; 1 bytes @ 0x1
  3130                           
  3131  0021                     DimmerLightsPointSelect@lights:	
  3132                           ; 1 bytes @ 0x1
  3133                           
  3134  0021                     getDimmerLights_StatusFlag@Status:	
  3135                           ; 1 bytes @ 0x1
  3136                           
  3137  0021                     LedPointSelect@led:	
  3138                           ; 1 bytes @ 0x1
  3139                           
  3140  0021                     Flash_Memory_Read@i:	
  3141                           ; 1 bytes @ 0x1
  3142                           
  3143  0021                     Flash_Memory_Write@i:	
  3144                           ; 1 bytes @ 0x1
  3145                           
  3146  0021                     setLoad_Count@command:	
  3147                           ; 1 bytes @ 0x1
  3148                           
  3149  0021                     setLoad_StatusOn@lights:	
  3150                           ; 1 bytes @ 0x1
  3151                           
  3152  0021                     setLoad_StatusOff@lights:	
  3153                           ; 1 bytes @ 0x1
  3154                           
  3155  0021                     setLoad_AH_AL_Restore@i:	
  3156                           ; 1 bytes @ 0x1
  3157                           
  3158  0021                     RfPointSelect@rf:	
  3159                           ; 1 bytes @ 0x1
  3160                           
  3161  0021                     RfSWPointSelect@sw:	
  3162                           ; 1 bytes @ 0x1
  3163                           
  3164  0021                     SwPointSelect@sw:	
  3165                           ; 1 bytes @ 0x1
  3166                           
  3167                           
  3168                           ; 1 bytes @ 0x1
  3169  0021                     	ds	1
  3170  0022                     ??_CC2500_WriteCommand:	
  3171  0022                     ??_CC2500_ReadStatus:	
  3172                           ; 0 bytes @ 0x2
  3173                           
  3174  0022                     ??_DelayTime_1us:	
  3175                           ; 0 bytes @ 0x2
  3176                           
  3177  0022                     ?_CC2500_WriteREG:	
  3178                           ; 0 bytes @ 0x2
  3179                           
  3180  0022                     ??_DlyOff_Initialization:	
  3181                           ; 0 bytes @ 0x2
  3182                           
  3183  0022                     ?_setSw_Status:	
  3184                           ; 0 bytes @ 0x2
  3185                           
  3186  0022                     ?_setRFSW_Status:	
  3187                           ; 0 bytes @ 0x2
  3188                           
  3189  0022                     ?_setDimmerLights_Trigger:	
  3190                           ; 0 bytes @ 0x2
  3191                           
  3192  0022                     ?_setDimmerLights_Switch:	
  3193                           ; 0 bytes @ 0x2
  3194                           
  3195  0022                     ??_setTxData:	
  3196                           ; 0 bytes @ 0x2
  3197                           
  3198  0022                     ??_setDimmerLights_Initialization:	
  3199                           ; 0 bytes @ 0x2
  3200                           
  3201  0022                     ?_setDimmerLights_TriggerERROR:	
  3202                           ; 0 bytes @ 0x2
  3203                           
  3204  0022                     ?_setLED:	
  3205                           ; 0 bytes @ 0x2
  3206                           
  3207  0022                     ??_setLED_Main:	
  3208                           ; 0 bytes @ 0x2
  3209                           
  3210  0022                     ??_Load_Initialization:	
  3211                           ; 0 bytes @ 0x2
  3212                           
  3213  0022                     ??_setSw_Enable:	
  3214                           ; 0 bytes @ 0x2
  3215                           
  3216  0022                     ?_setRF_Enable:	
  3217                           ; 0 bytes @ 0x2
  3218                           
  3219  0022                     ?_setDimmerLights_AdjGo:	
  3220                           ; 0 bytes @ 0x2
  3221                           
  3222  0022                     ?_setDimmerLights_TriggerAdj:	
  3223                           ; 0 bytes @ 0x2
  3224                           
  3225  0022                     ?_setDimmerLights_Clear:	
  3226                           ; 0 bytes @ 0x2
  3227                           
  3228  0022                     ?_setRF_Learn:	
  3229                           ; 0 bytes @ 0x2
  3230                           
  3231  0022                     CC2500_WriteREG@value:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     DlyOff_Initialization@sw:	
  3235                           ; 1 bytes @ 0x2
  3236                           
  3237  0022                     DelayTimejudge@i:	
  3238                           ; 1 bytes @ 0x2
  3239                           
  3240  0022                     _getDimmerLights_StatusFlag$2271:	
  3241                           ; 1 bytes @ 0x2
  3242                           
  3243  0022                     setDimmerLights_TriggerERROR@command:	
  3244                           ; 1 bytes @ 0x2
  3245                           
  3246  0022                     setDimmerLights_Switch@command:	
  3247                           ; 1 bytes @ 0x2
  3248                           
  3249  0022                     setDimmerLights_AdjGo@command:	
  3250                           ; 1 bytes @ 0x2
  3251                           
  3252  0022                     setDimmerLights_Trigger@command:	
  3253                           ; 1 bytes @ 0x2
  3254                           
  3255  0022                     setDimmerLights_TriggerAdj@command:	
  3256                           ; 1 bytes @ 0x2
  3257                           
  3258  0022                     setDimmerLights_Clear@command:	
  3259                           ; 1 bytes @ 0x2
  3260                           
  3261  0022                     setLED@command:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     Flash_Memory_Read@address:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  0022                     setMemory_GO@command:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  0022                     setRF_Learn@command:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  0022                     setRF_Enable@command:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     setRFSW_Status@command:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     setSw_Enable@command:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     setSw_Status@command:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     DelayTime_1us@i:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     ___wmul@multiplicand:	
  3289                           ; 2 bytes @ 0x2
  3290                           
  3291  0022                     ___awdiv@dividend:	
  3292                           ; 2 bytes @ 0x2
  3293                           
  3294  0022                     ___lwdiv@dividend:	
  3295                           ; 2 bytes @ 0x2
  3296                           
  3297                           
  3298                           ; 2 bytes @ 0x2
  3299  0022                     	ds	1
  3300  0023                     ??_CC2500_WriteREG:	
  3301  0023                     ??_setSw_Status:	
  3302                           ; 0 bytes @ 0x3
  3303                           
  3304  0023                     ??_setRFSW_Status:	
  3305                           ; 0 bytes @ 0x3
  3306                           
  3307  0023                     ??_setDimmerLights_Trigger:	
  3308                           ; 0 bytes @ 0x3
  3309                           
  3310  0023                     ??_setDimmerLights_Switch:	
  3311                           ; 0 bytes @ 0x3
  3312                           
  3313  0023                     ??_setDimmerLights_TriggerERROR:	
  3314                           ; 0 bytes @ 0x3
  3315                           
  3316  0023                     ??_setLED:	
  3317                           ; 0 bytes @ 0x3
  3318                           
  3319  0023                     ??_setRF_Enable:	
  3320                           ; 0 bytes @ 0x3
  3321                           
  3322  0023                     ??_DelayOff_Initialization:	
  3323                           ; 0 bytes @ 0x3
  3324                           
  3325  0023                     ?_setDelayOff_GO:	
  3326                           ; 0 bytes @ 0x3
  3327                           
  3328  0023                     ??_DimmerLights_Close:	
  3329                           ; 0 bytes @ 0x3
  3330                           
  3331  0023                     ??_setDimmerLights_AdjGo:	
  3332                           ; 0 bytes @ 0x3
  3333                           
  3334  0023                     ??_setDimmerLights_TriggerAdj:	
  3335                           ; 0 bytes @ 0x3
  3336                           
  3337  0023                     ??_setDimmerLights_Clear:	
  3338                           ; 0 bytes @ 0x3
  3339                           
  3340  0023                     ??_getAD:	
  3341                           ; 0 bytes @ 0x3
  3342                           
  3343  0023                     ??_setRF_Learn:	
  3344                           ; 0 bytes @ 0x3
  3345                           
  3346  0023                     CC2500_WriteCommand@command:	
  3347                           ; 0 bytes @ 0x3
  3348                           
  3349  0023                     CC2500_ReadStatus@status_addr:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0023                     setDelayOff_GO@command:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0023                     setDimmerLights_Initialization@lights:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0023                     setDimmerLights_TriggerERROR@lights:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     setDimmerLights_Switch@lights:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     setDimmerLights_AdjGo@lights:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367  0023                     setDimmerLights_Trigger@lights:	
  3368                           ; 1 bytes @ 0x3
  3369                           
  3370  0023                     setDimmerLights_TriggerAdj@lights:	
  3371                           ; 1 bytes @ 0x3
  3372                           
  3373  0023                     setDimmerLights_Clear@lights:	
  3374                           ; 1 bytes @ 0x3
  3375                           
  3376  0023                     setLED@led:	
  3377                           ; 1 bytes @ 0x3
  3378                           
  3379  0023                     getAD@adcon0:	
  3380                           ; 1 bytes @ 0x3
  3381                           
  3382  0023                     Flash_Memory_Read@ret:	
  3383                           ; 1 bytes @ 0x3
  3384                           
  3385  0023                     setRF_Learn@rf:	
  3386                           ; 1 bytes @ 0x3
  3387                           
  3388  0023                     setTxData@rf:	
  3389                           ; 1 bytes @ 0x3
  3390                           
  3391  0023                     setRF_Enable@rf:	
  3392                           ; 1 bytes @ 0x3
  3393                           
  3394  0023                     setRFSW_Status@sw:	
  3395                           ; 1 bytes @ 0x3
  3396                           
  3397  0023                     setSw_Status@sw:	
  3398                           ; 1 bytes @ 0x3
  3399                           
  3400  0023                     ___ftpack@exp:	
  3401                           ; 1 bytes @ 0x3
  3402                           
  3403                           
  3404                           ; 1 bytes @ 0x3
  3405  0023                     	ds	1
  3406  0024                     ??_CC2500_ClearTXFIFO:	
  3407  0024                     ??_CC2500_ClearRXFIFO:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??_CC2500_SIDLEMode:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ?_setDimmerLights:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     ??_setDimmerLights_ERROR:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     ??_setLED_Initialization:	
  3420                           ; 0 bytes @ 0x4
  3421                           
  3422  0024                     ??_Flash_Memory_Modify:	
  3423                           ; 0 bytes @ 0x4
  3424                           
  3425  0024                     ??_getLoad_AD:	
  3426                           ; 0 bytes @ 0x4
  3427                           
  3428  0024                     ??_getTemp_AD:	
  3429                           ; 0 bytes @ 0x4
  3430                           
  3431  0024                     ??_RF_RxDisable:	
  3432                           ; 0 bytes @ 0x4
  3433                           
  3434  0024                     ??_setSw_Initialization:	
  3435                           ; 0 bytes @ 0x4
  3436                           
  3437  0024                     ??_Sw_DimmerAdjFunc:	
  3438                           ; 0 bytes @ 0x4
  3439                           
  3440  0024                     ??_CC2500_TxData:	
  3441                           ; 0 bytes @ 0x4
  3442                           
  3443  0024                     ??_CC2500_RxData:	
  3444                           ; 0 bytes @ 0x4
  3445                           
  3446  0024                     ??_DimmerLights_Initialization:	
  3447                           ; 0 bytes @ 0x4
  3448                           
  3449  0024                     ??___wmul:	
  3450                           ; 0 bytes @ 0x4
  3451                           
  3452  0024                     ??___awdiv:	
  3453                           ; 0 bytes @ 0x4
  3454                           
  3455  0024                     ??___lwdiv:	
  3456                           ; 0 bytes @ 0x4
  3457                           
  3458  0024                     CC2500_WriteREG@w_addr:	
  3459                           ; 0 bytes @ 0x4
  3460                           
  3461  0024                     setDelayOff_GO@value:	
  3462                           ; 1 bytes @ 0x4
  3463                           
  3464  0024                     setDimmerLights@status:	
  3465                           ; 1 bytes @ 0x4
  3466                           
  3467  0024                     setLED_Initialization@led:	
  3468                           ; 1 bytes @ 0x4
  3469                           
  3470  0024                     setLED_Main@led:	
  3471                           ; 1 bytes @ 0x4
  3472                           
  3473  0024                     RF_RxDisable@rf:	
  3474                           ; 1 bytes @ 0x4
  3475                           
  3476  0024                     setSw_Initialization@sw:	
  3477                           ; 1 bytes @ 0x4
  3478                           
  3479  0024                     Sw_DimmerAdjFunc@Idle:	
  3480                           ; 1 bytes @ 0x4
  3481                           
  3482  0024                     ___ftpack@sign:	
  3483                           ; 1 bytes @ 0x4
  3484                           
  3485  0024                     DelayTime_1us@j:	
  3486                           ; 1 bytes @ 0x4
  3487                           
  3488  0024                     ___wmul@product:	
  3489                           ; 2 bytes @ 0x4
  3490                           
  3491                           
  3492                           ; 2 bytes @ 0x4
  3493  0024                     	ds	1
  3494  0025                     ??_CC2500_InitSetREG:	
  3495  0025                     ??_CC2500_InitPATable:	
  3496                           ; 0 bytes @ 0x5
  3497                           
  3498  0025                     ??_setDimmerLights:	
  3499                           ; 0 bytes @ 0x5
  3500                           
  3501  0025                     ??_Switch_Initialization:	
  3502                           ; 0 bytes @ 0x5
  3503                           
  3504  0025                     ??___ftpack:	
  3505                           ; 0 bytes @ 0x5
  3506                           
  3507  0025                     ??_setDelayOff_GO:	
  3508                           ; 0 bytes @ 0x5
  3509                           
  3510  0025                     ??_LED_Initialization:	
  3511                           ; 0 bytes @ 0x5
  3512                           
  3513  0025                     ??_LED_Main:	
  3514                           ; 0 bytes @ 0x5
  3515                           
  3516  0025                     CC2500_TxData@loop_e:	
  3517                           ; 0 bytes @ 0x5
  3518                           
  3519  0025                     CC2500_RxData@loop_f:	
  3520                           ; 1 bytes @ 0x5
  3521                           
  3522  0025                     setDimmerLights_ERROR@lights:	
  3523                           ; 1 bytes @ 0x5
  3524                           
  3525  0025                     Sw_DimmerAdjFunc@sw:	
  3526                           ; 1 bytes @ 0x5
  3527                           
  3528  0025                     ___awdiv@counter:	
  3529                           ; 1 bytes @ 0x5
  3530                           
  3531  0025                     ___lwdiv@quotient:	
  3532                           ; 1 bytes @ 0x5
  3533                           
  3534                           
  3535                           ; 2 bytes @ 0x5
  3536  0025                     	ds	1
  3537  0026                     ??_CC2500_PowerRST:	
  3538  0026                     ??_CC2500_FrequencyCabr:	
  3539                           ; 0 bytes @ 0x6
  3540                           
  3541  0026                     CC2500_InitSetREG@temp1:	
  3542                           ; 0 bytes @ 0x6
  3543                           
  3544  0026                     CC2500_InitPATable@temp:	
  3545                           ; 1 bytes @ 0x6
  3546                           
  3547  0026                     setDimmerLights@lights:	
  3548                           ; 1 bytes @ 0x6
  3549                           
  3550  0026                     Flash_Memory_Modify@i:	
  3551                           ; 1 bytes @ 0x6
  3552                           
  3553  0026                     ___awdiv@sign:	
  3554                           ; 1 bytes @ 0x6
  3555                           
  3556                           
  3557                           ; 1 bytes @ 0x6
  3558  0026                     	ds	1
  3559  0027                     ??_Flash_Memory_Main:	
  3560  0027                     CC2500_InitSetREG@temp2:	
  3561                           ; 0 bytes @ 0x7
  3562                           
  3563  0027                     CC2500_InitPATable@loop_d:	
  3564                           ; 1 bytes @ 0x7
  3565                           
  3566  0027                     setDelayOff_GO@sw:	
  3567                           ; 1 bytes @ 0x7
  3568                           
  3569  0027                     ___lwdiv@counter:	
  3570                           ; 1 bytes @ 0x7
  3571                           
  3572  0027                     ___awdiv@quotient:	
  3573                           ; 1 bytes @ 0x7
  3574                           
  3575                           
  3576                           ; 2 bytes @ 0x7
  3577  0027                     	ds	1
  3578  0028                     ?___awtoft:	
  3579  0028                     CC2500_InitSetREG@loop_c:	
  3580                           ; 3 bytes @ 0x8
  3581                           
  3582  0028                     getTemp_AD@channel:	
  3583                           ; 1 bytes @ 0x8
  3584                           
  3585  0028                     ___awtoft@c:	
  3586                           ; 1 bytes @ 0x8
  3587                           
  3588                           
  3589                           ; 2 bytes @ 0x8
  3590  0028                     	ds	1
  3591  0029                     ?_setBuz:	
  3592  0029                     ??_CC2500_PowerOnInitial:	
  3593                           ; 0 bytes @ 0x9
  3594                           
  3595  0029                     getLoad_AD@channel:	
  3596                           ; 0 bytes @ 0x9
  3597                           
  3598  0029                     setBuz@time:	
  3599                           ; 1 bytes @ 0x9
  3600                           
  3601                           
  3602                           ; 2 bytes @ 0x9
  3603  0029                     	ds	1
  3604  002A                     getLoad_AD@j:	
  3605                           
  3606                           ; 1 bytes @ 0xA
  3607  002A                     	ds	1
  3608  002B                     ??_setBuz:	
  3609  002B                     ??___awtoft:	
  3610                           ; 0 bytes @ 0xB
  3611                           
  3612  002B                     getLoad_AD@i:	
  3613                           ; 0 bytes @ 0xB
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0xB
  3617  002B                     	ds	1
  3618  002C                     setBuz@count:	
  3619                           
  3620                           ; 1 bytes @ 0xC
  3621  002C                     	ds	1
  3622  002D                     ??_my_Main:	
  3623  002D                     ??_setLog_Code:	
  3624                           ; 0 bytes @ 0xD
  3625                           
  3626  002D                     ??_DimmerLights_Exceptions:	
  3627                           ; 0 bytes @ 0xD
  3628                           
  3629  002D                     DimmerLights_Exceptions@status:	
  3630                           ; 0 bytes @ 0xD
  3631                           
  3632  002D                     ___awtoft@sign:	
  3633                           ; 1 bytes @ 0xD
  3634                           
  3635                           
  3636                           ; 1 bytes @ 0xD
  3637  002D                     	ds	1
  3638  002E                     ??_setLoad_Exceptions:	
  3639  002E                     ??_setOverTemp_Exceptions:	
  3640                           ; 0 bytes @ 0xE
  3641                           
  3642  002E                     ?___ftdiv:	
  3643                           ; 0 bytes @ 0xE
  3644                           
  3645  002E                     ?___ftmul:	
  3646                           ; 3 bytes @ 0xE
  3647                           
  3648  002E                     setLog_Code@rf:	
  3649                           ; 3 bytes @ 0xE
  3650                           
  3651  002E                     ___ftdiv@f2:	
  3652                           ; 1 bytes @ 0xE
  3653                           
  3654  002E                     ___ftmul@f1:	
  3655                           ; 3 bytes @ 0xE
  3656                           
  3657                           
  3658                           ; 3 bytes @ 0xE
  3659  002E                     	ds	1
  3660  002F                     setLoad_Exceptions@command:	
  3661  002F                     setOverTemp_Exceptions@command:	
  3662                           ; 1 bytes @ 0xF
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0xF
  3666  002F                     	ds	1
  3667  0030                     ??_Load_Main:	
  3668  0030                     ??_setTemp_Main:	
  3669                           ; 0 bytes @ 0x10
  3670                           
  3671                           
  3672                           ; 0 bytes @ 0x10
  3673  0030                     	ds	1
  3674  0031                     ___ftdiv@f1:	
  3675  0031                     ___ftmul@f2:	
  3676                           ; 3 bytes @ 0x11
  3677                           
  3678                           
  3679                           ; 3 bytes @ 0x11
  3680  0031                     	ds	2
  3681  0033                     ??_Temp_Main:	
  3682                           
  3683                           ; 0 bytes @ 0x13
  3684  0033                     	ds	1
  3685  0034                     ??___ftdiv:	
  3686  0034                     ??___ftmul:	
  3687                           ; 0 bytes @ 0x14
  3688                           
  3689  0034                     Load_Main@i:	
  3690                           ; 0 bytes @ 0x14
  3691                           
  3692                           
  3693                           ; 1 bytes @ 0x14
  3694  0034                     	ds	4
  3695  0038                     ___ftdiv@cntr:	
  3696  0038                     ___ftmul@exp:	
  3697                           ; 1 bytes @ 0x18
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x18
  3701  0038                     	ds	1
  3702  0039                     ___ftdiv@f3:	
  3703  0039                     ___ftmul@f3_as_product:	
  3704                           ; 3 bytes @ 0x19
  3705                           
  3706                           
  3707                           ; 3 bytes @ 0x19
  3708  0039                     	ds	3
  3709  003C                     ___ftdiv@exp:	
  3710  003C                     ___ftmul@cntr:	
  3711                           ; 1 bytes @ 0x1C
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x1C
  3715  003C                     	ds	1
  3716  003D                     ___ftdiv@sign:	
  3717  003D                     ___ftmul@sign:	
  3718                           ; 1 bytes @ 0x1D
  3719                           
  3720                           
  3721                           ; 1 bytes @ 0x1D
  3722  003D                     	ds	1
  3723  003E                     ?___ftadd:	
  3724  003E                     ___ftadd@f1:	
  3725                           ; 3 bytes @ 0x1E
  3726                           
  3727                           
  3728                           ; 3 bytes @ 0x1E
  3729  003E                     	ds	3
  3730  0041                     ___ftadd@f2:	
  3731                           
  3732                           ; 3 bytes @ 0x21
  3733  0041                     	ds	3
  3734  0044                     ??___ftadd:	
  3735                           
  3736                           ; 0 bytes @ 0x24
  3737  0044                     	ds	4
  3738  0048                     ___ftadd@sign:	
  3739                           
  3740                           ; 1 bytes @ 0x28
  3741  0048                     	ds	1
  3742  0049                     ___ftadd@exp2:	
  3743                           
  3744                           ; 1 bytes @ 0x29
  3745  0049                     	ds	1
  3746  004A                     ___ftadd@exp1:	
  3747                           
  3748                           ; 1 bytes @ 0x2A
  3749  004A                     	ds	1
  3750  004B                     ?___fttol:	
  3751  004B                     ___fttol@f1:	
  3752                           ; 4 bytes @ 0x2B
  3753                           
  3754                           
  3755                           ; 3 bytes @ 0x2B
  3756  004B                     	ds	4
  3757  004F                     ??___fttol:	
  3758                           
  3759                           ; 0 bytes @ 0x2F
  3760  004F                     	ds	4
  3761  0053                     ___fttol@sign1:	
  3762                           
  3763                           ; 1 bytes @ 0x33
  3764  0053                     	ds	1
  3765  0054                     ___fttol@lval:	
  3766                           
  3767                           ; 4 bytes @ 0x34
  3768  0054                     	ds	4
  3769  0058                     ___fttol@exp1:	
  3770                           
  3771                           ; 1 bytes @ 0x38
  3772  0058                     	ds	1
  3773  0059                     ??_getPercentValue:	
  3774  0059                     ??_setPercentValue:	
  3775                           ; 0 bytes @ 0x39
  3776                           
  3777  0059                     setPercentValue@value:	
  3778                           ; 0 bytes @ 0x39
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0x39
  3782  0059                     	ds	1
  3783  005A                     setPercentValue@i:	
  3784                           
  3785                           ; 3 bytes @ 0x3A
  3786  005A                     	ds	1
  3787  005B                     getPercentValue@value:	
  3788                           
  3789                           ; 1 bytes @ 0x3B
  3790  005B                     	ds	1
  3791  005C                     getPercentValue@i:	
  3792                           
  3793                           ; 3 bytes @ 0x3C
  3794  005C                     	ds	1
  3795  005D                     ?_setRF_DimmerLights:	
  3796  005D                     ??_Flash_Memory_Initialization:	
  3797                           ; 0 bytes @ 0x3D
  3798                           
  3799  005D                     setRF_DimmerLights@on:	
  3800                           ; 0 bytes @ 0x3D
  3801                           
  3802                           
  3803                           ; 1 bytes @ 0x3D
  3804  005D                     	ds	1
  3805  005E                     ??_setRF_DimmerLights:	
  3806  005E                     Flash_Memory_Initialization@i:	
  3807                           ; 0 bytes @ 0x3E
  3808                           
  3809                           
  3810                           ; 1 bytes @ 0x3E
  3811  005E                     	ds	1
  3812  005F                     ??_setDimmerLights_AdjRF:	
  3813                           
  3814                           ; 0 bytes @ 0x3F
  3815  005F                     	ds	1
  3816  0060                     setDimmerLights_AdjRF@lights:	
  3817  0060                     setRF_DimmerLights@status:	
  3818                           ; 1 bytes @ 0x40
  3819                           
  3820                           
  3821                           ; 1 bytes @ 0x40
  3822  0060                     	ds	1
  3823  0061                     ??_setRF_DimmerValue:	
  3824  0061                     setRF_DimmerLights@lights:	
  3825                           ; 0 bytes @ 0x41
  3826                           
  3827                           
  3828                           ; 1 bytes @ 0x41
  3829  0061                     	ds	1
  3830  0062                     ??_DlyOff_Main:	
  3831  0062                     ?_setDimmerLights_Adj:	
  3832                           ; 0 bytes @ 0x42
  3833                           
  3834  0062                     ??_setRFSW_Control:	
  3835                           ; 0 bytes @ 0x42
  3836                           
  3837  0062                     ??_Sw_DimmerOnFunc:	
  3838                           ; 0 bytes @ 0x42
  3839                           
  3840  0062                     ??_Sw_DimmerOffFunc:	
  3841                           ; 0 bytes @ 0x42
  3842                           
  3843  0062                     setDimmerLights_Adj@status:	
  3844                           ; 0 bytes @ 0x42
  3845                           
  3846  0062                     Sw_DimmerOnFunc@Idle:	
  3847                           ; 1 bytes @ 0x42
  3848                           
  3849                           
  3850                           ; 1 bytes @ 0x42
  3851  0062                     	ds	1
  3852  0063                     ??_setDimmerLights_Adj:	
  3853  0063                     setRFSW_Control@sw:	
  3854                           ; 0 bytes @ 0x43
  3855                           
  3856  0063                     setRF_DimmerValue@lights:	
  3857                           ; 1 bytes @ 0x43
  3858                           
  3859  0063                     Sw_DimmerOnFunc@sw:	
  3860                           ; 1 bytes @ 0x43
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x43
  3864  0063                     	ds	1
  3865  0064                     ??_setRFSW_AdjControl:	
  3866  0064                     DlyOff_Main@sw:	
  3867                           ; 0 bytes @ 0x44
  3868                           
  3869  0064                     setDimmerLights_Adj@lights:	
  3870                           ; 1 bytes @ 0x44
  3871                           
  3872  0064                     Sw_DimmerOffFunc@sw:	
  3873                           ; 1 bytes @ 0x44
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x44
  3877  0064                     	ds	1
  3878  0065                     ??_setDimmerLights_Main:	
  3879  0065                     ??_setSw_Main:	
  3880                           ; 0 bytes @ 0x45
  3881                           
  3882  0065                     ??_DelayOff_Main:	
  3883                           ; 0 bytes @ 0x45
  3884                           
  3885  0065                     setDimmerLights_Main@clear:	
  3886                           ; 0 bytes @ 0x45
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x45
  3890  0065                     	ds	1
  3891  0066                     setDimmerLights_Main@lights:	
  3892  0066                     setRFSW_AdjControl@sw:	
  3893                           ; 1 bytes @ 0x46
  3894                           
  3895                           
  3896                           ; 1 bytes @ 0x46
  3897  0066                     	ds	1
  3898  0067                     ??_setControl_Lights_Table:	
  3899  0067                     ??_DimmerLights_Main:	
  3900                           ; 0 bytes @ 0x47
  3901                           
  3902  0067                     setControl_Lights_Table@rf:	
  3903                           ; 0 bytes @ 0x47
  3904                           
  3905  0067                     _setSw_Main$6226:	
  3906                           ; 1 bytes @ 0x47
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0x47
  3910  0067                     	ds	1
  3911  0068                     ??_getRxData:	
  3912  0068                     getRxData@rf:	
  3913                           ; 0 bytes @ 0x48
  3914                           
  3915  0068                     _setSw_Main$6227:	
  3916                           ; 1 bytes @ 0x48
  3917                           
  3918                           
  3919                           ; 1 bytes @ 0x48
  3920  0068                     	ds	1
  3921  0069                     ??_setRF_Main:	
  3922  0069                     setSw_Main@sw:	
  3923                           ; 0 bytes @ 0x49
  3924                           
  3925                           
  3926                           ; 1 bytes @ 0x49
  3927  0069                     	ds	1
  3928  006A                     ??_Switch_Main:	
  3929  006A                     setRF_Main@rf:	
  3930                           ; 0 bytes @ 0x4A
  3931                           
  3932                           
  3933                           ; 1 bytes @ 0x4A
  3934  006A                     	ds	1
  3935  006B                     _setRF_Main$5236:	
  3936                           
  3937                           ; 1 bytes @ 0x4B
  3938  006B                     	ds	1
  3939  006C                     ??_RF_Main:	
  3940  006C                     ?_main:	
  3941                           ; 0 bytes @ 0x4C
  3942                           
  3943  006C                     main@argc:	
  3944                           ; 2 bytes @ 0x4C
  3945                           
  3946                           
  3947                           ; 2 bytes @ 0x4C
  3948  006C                     	ds	2
  3949  006E                     main@argv:	
  3950                           
  3951                           ; 2 bytes @ 0x4E
  3952  006E                     	ds	2
  3953  0070                     ??_main:	
  3954                           
  3955                           	psect	maintext
  3956  13E1                     __pmaintext:	
  3957                           ; 0 bytes @ 0x50
  3958 ;;
  3959 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3960 ;;
  3961 ;; *************** function _main *****************
  3962 ;; Defined at:
  3963 ;;		line 7 in file "../src/Main_B1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  argc            2   76[BANK0 ] int 
  3966 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  2   76[BANK0 ] int 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 17F/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3978 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;Total ram usage:        4 bytes
  3983 ;; Hardware stack levels required when called:   15
  3984 ;; This function calls:
  3985 ;;		_Buzzer_Initialization
  3986 ;;		_Buzzer_Main
  3987 ;;		_CC2500_PowerOnInitial
  3988 ;;		_DelayOff_Initialization
  3989 ;;		_DelayOff_Main
  3990 ;;		_DimmerLights_Initialization
  3991 ;;		_DimmerLights_Main
  3992 ;;		_Flash_Memory_Initialization
  3993 ;;		_Flash_Memory_Main
  3994 ;;		_LED_Initialization
  3995 ;;		_LED_Main
  3996 ;;		_Load_Initialization
  3997 ;;		_Load_Main
  3998 ;;		_Mcu_Initialization
  3999 ;;		_RF_Initialization
  4000 ;;		_RF_Main
  4001 ;;		_Switch_Initialization
  4002 ;;		_Switch_Main
  4003 ;;		_Temp_Initialization
  4004 ;;		_Temp_Main
  4005 ;;		_WDT_Main
  4006 ;;		_getLoad_AD
  4007 ;;		_getTemp_AD
  4008 ;;		_myMain_Initialization
  4009 ;;		_my_Main
  4010 ;; This function is called by:
  4011 ;;		Startup code after reset
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _main
  4017  13E1                     _main:	
  4018                           
  4019                           ;Main_B1.c: 9: myMain_Initialization();
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4023  13E1  3198  2075  3193   	fcall	_myMain_Initialization
  4024                           
  4025                           ;Main_B1.c: 10: Mcu_Initialization();
  4026  13E4  3199  21A2  3193   	fcall	_Mcu_Initialization
  4027                           
  4028                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  4029  13E7  318F  2708  3193   	fcall	_Flash_Memory_Initialization
  4030                           
  4031                           ;Main_B1.c: 12: LED_Initialization();
  4032  13EA  31A6  2634  3193   	fcall	_LED_Initialization
  4033                           
  4034                           ;Main_B1.c: 13: Buzzer_Initialization();
  4035  13ED  31A6  2610  3193   	fcall	_Buzzer_Initialization
  4036                           
  4037                           ;Main_B1.c: 15: ;;
  4038                           ;Main_B1.c: 16: Temp_Initialization();
  4039  13F0  31A5  255E  3193   	fcall	_Temp_Initialization
  4040                           
  4041                           ;Main_B1.c: 17: Load_Initialization();
  4042  13F3  31A6  2672  3193   	fcall	_Load_Initialization
  4043                           
  4044                           ;Main_B1.c: 18: ;;
  4045                           ;Main_B1.c: 19: DelayOff_Initialization();
  4046  13F6  31A5  25A8  3193   	fcall	_DelayOff_Initialization
  4047                           
  4048                           ;Main_B1.c: 21: DimmerLights_Initialization();
  4049  13F9  3198  20F6  3193   	fcall	_DimmerLights_Initialization
  4050                           
  4051                           ;Main_B1.c: 22: ;;
  4052                           ;Main_B1.c: 23: ;;
  4053                           ;Main_B1.c: 24: ;;
  4054                           ;Main_B1.c: 26: Switch_Initialization();
  4055  13FC  31A6  2699  3193   	fcall	_Switch_Initialization
  4056                           
  4057                           ;Main_B1.c: 27: RF_Initialization();
  4058  13FF  31A5  2574  3193   	fcall	_RF_Initialization
  4059                           
  4060                           ;Main_B1.c: 28: CC2500_PowerOnInitial();
  4061  1402  3198  2089  3193   	fcall	_CC2500_PowerOnInitial
  4062  1405                     l8343:	
  4063                           ;Main_B1.c: 29: ;;
  4064                           ;Main_B1.c: 32: while (1) {
  4065                           
  4066                           
  4067                           ;Main_B1.c: 33: if (myMain->PowerON) {
  4068  1405  0021               	movlb	1	; select bank1
  4069  1406  086D               	movf	_myMain^(0+128),w
  4070  1407  0086               	movwf	6
  4071  1408  3001               	movlw	1	; select bank2/3
  4072  1409  0087               	movwf	7
  4073  140A  1C01               	btfss	1,0
  4074  140B  2C14               	goto	l8347
  4075                           
  4076                           ;Main_B1.c: 35: ;;
  4077                           ;Main_B1.c: 39: getLoad_AD(0x05);
  4078  140C  3005               	movlw	5
  4079  140D  318A  22AD  3193   	fcall	_getLoad_AD
  4080                           
  4081                           ;Main_B1.c: 43: getTemp_AD(0x09);
  4082  1410  3009               	movlw	9
  4083  1411  3188  2000  3193   	fcall	_getTemp_AD
  4084  1414                     l8347:	
  4085                           ;Main_B1.c: 47: ;;
  4086                           
  4087                           
  4088                           ;Main_B1.c: 58: }
  4089                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  4090  1414  0021               	movlb	1	; select bank1
  4091  1415  086D               	movf	_myMain^(0+128),w
  4092  1416  0086               	movwf	6
  4093  1417  3001               	movlw	1	; select bank2/3
  4094  1418  0087               	movwf	7
  4095  1419  1C81               	btfss	1,1
  4096  141A  2C05               	goto	l8343
  4097                           
  4098                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  4099  141B  086D               	movf	_myMain^(0+128),w
  4100  141C  0086               	movwf	6
  4101  141D  3001               	movlw	1	; select bank2/3
  4102  141E  0087               	movwf	7
  4103  141F  1081               	bcf	1,1
  4104                           
  4105                           ;Main_B1.c: 63: my_Main();
  4106  1420  3196  267F  3193   	fcall	_my_Main
  4107                           
  4108                           ;Main_B1.c: 64: WDT_Main();
  4109  1423  3199  21F4  3193   	fcall	_WDT_Main
  4110                           
  4111                           ;Main_B1.c: 65: ;;
  4112                           ;Main_B1.c: 66: ;;
  4113                           ;Main_B1.c: 67: if (myMain->PowerON) {
  4114  1426  0021               	movlb	1	; select bank1
  4115  1427  086D               	movf	_myMain^(0+128),w
  4116  1428  0086               	movwf	6
  4117  1429  3001               	movlw	1	; select bank2/3
  4118  142A  0087               	movwf	7
  4119  142B  1C01               	btfss	1,0
  4120  142C  2C05               	goto	l8343
  4121                           
  4122                           ;Main_B1.c: 68: Flash_Memory_Main();
  4123  142D  319F  272F  3193   	fcall	_Flash_Memory_Main
  4124                           
  4125                           ;Main_B1.c: 70: LED_Main();
  4126  1430  31A6  2640  3193   	fcall	_LED_Main
  4127                           
  4128                           ;Main_B1.c: 71: Buzzer_Main();
  4129  1433  318C  248D  3193   	fcall	_Buzzer_Main
  4130                           
  4131                           ;Main_B1.c: 73: ;;
  4132                           ;Main_B1.c: 74: Temp_Main();
  4133  1436  31A5  2561  3193   	fcall	_Temp_Main
  4134                           
  4135                           ;Main_B1.c: 75: Load_Main();
  4136  1439  3180  2054  3193   	fcall	_Load_Main
  4137                           
  4138                           ;Main_B1.c: 76: ;;
  4139                           ;Main_B1.c: 78: ;;
  4140                           ;Main_B1.c: 79: DimmerLights_Main();
  4141  143C  31A5  25FA  3193   	fcall	_DimmerLights_Main
  4142                           
  4143                           ;Main_B1.c: 80: Switch_Main();
  4144  143F  31A5  25C8  3193   	fcall	_Switch_Main
  4145                           
  4146                           ;Main_B1.c: 81: ;;
  4147                           ;Main_B1.c: 82: ;;
  4148                           ;Main_B1.c: 84: RF_Main();
  4149  1442  31A5  2578  3193   	fcall	_RF_Main
  4150                           
  4151                           ;Main_B1.c: 85: DelayOff_Main();
  4152  1445  31A5  25B0  3193   	fcall	_DelayOff_Main
  4153                           
  4154                           ;Main_B1.c: 86: ;;
  4155  1448  2C05               	goto	l8343
  4156  1449                     __end_of_main:	
  4157                           
  4158                           	psect	text1
  4159  167F                     __ptext1:	
  4160 ;; *************** function _my_Main *****************
  4161 ;; Defined at:
  4162 ;;		line 123 in file "../src/Main_B1.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;		None               void
  4169 ;; Registers used:
  4170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;Total ram usage:        0 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    7
  4183 ;; This function calls:
  4184 ;;		_setBuz
  4185 ;;		_setLoad_Enable
  4186 ;;		_setRF_Enable
  4187 ;;		_setSw_Enable
  4188 ;;		_setTemp_Enable
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _my_Main
  4196  167F                     _my_Main:	
  4197                           
  4198                           ;Main_B1.c: 125: if (myMain->PowerON == 0) {
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4202  167F  0021               	movlb	1	; select bank1
  4203  1680  086D               	movf	_myMain^(0+128),w
  4204  1681  0086               	movwf	6
  4205  1682  3001               	movlw	1	; select bank2/3
  4206  1683  0087               	movwf	7
  4207  1684  1801               	btfsc	1,0
  4208  1685  2EC9               	goto	l8149
  4209                           
  4210                           ;Main_B1.c: 126: myMain->PowerCount++;
  4211  1686  0A6D               	incf	_myMain^(0+128),w
  4212  1687  0086               	movwf	6
  4213  1688  3001               	movlw	1	; select bank2/3
  4214  1689  0087               	movwf	7
  4215  168A  3001               	movlw	1
  4216  168B  0781               	addwf	1,f
  4217  168C  3141               	addfsr 1,1
  4218  168D  1803               	skipnc
  4219  168E  0A81               	incf	1,f
  4220                           
  4221                           ;Main_B1.c: 127: if (myMain->PowerCount == 150)
  4222  168F  0A6D               	incf	_myMain^(0+128),w
  4223  1690  0086               	movwf	6
  4224  1691  3001               	movlw	1	; select bank2/3
  4225  1692  0087               	movwf	7
  4226  1693  3F40               	moviw [0]fsr1
  4227  1694  3A96               	xorlw	150
  4228  1695  1D03               	skipz
  4229  1696  2E99               	goto	u7565
  4230  1697  3F41               	moviw [1]fsr1
  4231  1698  3A00               	xorlw	0
  4232  1699                     u7565:	
  4233  1699  1D03               	skipz
  4234  169A  0008               	return
  4235                           
  4236                           ;Main_B1.c: 128: {
  4237                           ;Main_B1.c: 129: myMain->PowerCount = 0;
  4238  169B  0A6D               	incf	_myMain^(0+128),w
  4239  169C  0086               	movwf	6
  4240  169D  3001               	movlw	1	; select bank2/3
  4241  169E  0087               	movwf	7
  4242  169F  3000               	movlw	0
  4243  16A0  3FC0               	movwi [0]fsr1
  4244  16A1  3FC1               	movwi [1]fsr1
  4245                           
  4246                           ;Main_B1.c: 130: myMain->PowerON = 1;
  4247  16A2  086D               	movf	_myMain^(0+128),w
  4248  16A3  0086               	movwf	6
  4249  16A4  3001               	movlw	1	; select bank2/3
  4250  16A5  0087               	movwf	7
  4251  16A6  1401               	bsf	1,0
  4252                           
  4253                           ;Main_B1.c: 133: setTemp_Enable(1);
  4254  16A7  3001               	movlw	1
  4255  16A8  31A6  26A6  3196   	fcall	_setTemp_Enable
  4256                           
  4257                           ;Main_B1.c: 137: setLoad_Enable(1);
  4258  16AB  3001               	movlw	1
  4259  16AC  31A7  274E  3196   	fcall	_setLoad_Enable
  4260                           
  4261                           ;Main_B1.c: 143: setBuz(3, 50);
  4262  16AF  3032               	movlw	50
  4263  16B0  0020               	movlb	0	; select bank0
  4264  16B1  00A9               	movwf	setBuz@time
  4265  16B2  3000               	movlw	0
  4266  16B3  00AA               	movwf	setBuz@time+1
  4267  16B4  3003               	movlw	3
  4268  16B5  3188  2079  3196   	fcall	_setBuz
  4269                           
  4270                           ;Main_B1.c: 144: myMain->SelfTest = 1;
  4271  16B8  0021               	movlb	1	; select bank1
  4272  16B9  086D               	movf	_myMain^(0+128),w
  4273  16BA  0086               	movwf	6
  4274  16BB  3001               	movlw	1	; select bank2/3
  4275  16BC  0087               	movwf	7
  4276  16BD  1701               	bsf	1,6
  4277                           
  4278                           ;Main_B1.c: 146: setSw_Enable(1);
  4279  16BE  3001               	movlw	1
  4280  16BF  3199  21D8  3196   	fcall	_setSw_Enable
  4281                           
  4282                           ;Main_B1.c: 149: setRF_Enable(1, 1);
  4283  16C2  0020               	movlb	0	; select bank0
  4284  16C3  01A2               	clrf	setRF_Enable@command
  4285  16C4  0AA2               	incf	setRF_Enable@command,f
  4286  16C5  3001               	movlw	1
  4287  16C6  319B  2375         	fcall	_setRF_Enable
  4288                           
  4289                           ;Main_B1.c: 153: }
  4290                           ;Main_B1.c: 154: } else {
  4291  16C8  0008               	return
  4292  16C9                     l8149:	
  4293                           
  4294                           ;Main_B1.c: 162: myMain->Count1++;
  4295  16C9  0021               	movlb	1	; select bank1
  4296  16CA  086D               	movf	_myMain^(0+128),w
  4297  16CB  3E05               	addlw	5
  4298  16CC  0086               	movwf	6
  4299  16CD  3001               	movlw	1	; select bank2/3
  4300  16CE  0087               	movwf	7
  4301  16CF  3001               	movlw	1
  4302  16D0  0781               	addwf	1,f
  4303  16D1  3141               	addfsr 1,1
  4304  16D2  1803               	skipnc
  4305  16D3  0A81               	incf	1,f
  4306                           
  4307                           ;Main_B1.c: 163: if (myMain->Count1 == 100)
  4308  16D4  086D               	movf	_myMain^(0+128),w
  4309  16D5  3E05               	addlw	5
  4310  16D6  0086               	movwf	6
  4311  16D7  3001               	movlw	1	; select bank2/3
  4312  16D8  0087               	movwf	7
  4313  16D9  3F40               	moviw [0]fsr1
  4314  16DA  3A64               	xorlw	100
  4315  16DB  1D03               	skipz
  4316  16DC  2EDF               	goto	u7575
  4317  16DD  3F41               	moviw [1]fsr1
  4318  16DE  3A00               	xorlw	0
  4319  16DF                     u7575:	
  4320  16DF  1D03               	skipz
  4321  16E0  0008               	return
  4322                           
  4323                           ;Main_B1.c: 164: {
  4324                           ;Main_B1.c: 165: myMain->Count1 = 0;
  4325  16E1  086D               	movf	_myMain^(0+128),w
  4326  16E2  3E05               	addlw	5
  4327  16E3  0086               	movwf	6
  4328  16E4  3001               	movlw	1	; select bank2/3
  4329  16E5  0087               	movwf	7
  4330  16E6  3000               	movlw	0
  4331  16E7  3FC0               	movwi [0]fsr1
  4332  16E8  3FC1               	movwi [1]fsr1
  4333                           
  4334                           ;Main_B1.c: 178: if (myMain->Flag) {
  4335  16E9  086D               	movf	_myMain^(0+128),w
  4336  16EA  0086               	movwf	6
  4337  16EB  3001               	movlw	1	; select bank2/3
  4338  16EC  0087               	movwf	7
  4339  16ED  1D81               	btfss	1,3
  4340  16EE  2EF5               	goto	l8157
  4341                           
  4342                           ;Main_B1.c: 179: myMain->Flag = 0;
  4343  16EF  086D               	movf	_myMain^(0+128),w
  4344  16F0  0086               	movwf	6
  4345  16F1  3001               	movlw	1	; select bank2/3
  4346  16F2  0087               	movwf	7
  4347  16F3  1181               	bcf	1,3
  4348                           
  4349                           ;Main_B1.c: 188: } else {
  4350  16F4  0008               	return
  4351  16F5                     l8157:	
  4352                           
  4353                           ;Main_B1.c: 189: myMain->Flag = 1;
  4354  16F5  086D               	movf	_myMain^(0+128),w
  4355  16F6  0086               	movwf	6
  4356  16F7  3001               	movlw	1	; select bank2/3
  4357  16F8  0087               	movwf	7
  4358  16F9  1581               	bsf	1,3
  4359  16FA  0008               	return
  4360  16FB                     __end_of_my_Main:	
  4361                           
  4362                           	psect	text2
  4363  26A6                     __ptext2:	
  4364 ;; *************** function _setTemp_Enable *****************
  4365 ;; Defined at:
  4366 ;;		line 22 in file "../src/OverTemperature_B1.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  command         1    wreg     unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  command         1    0[BANK0 ] unsigned char 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, fsr1l, fsr1h
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        1 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    5
  4387 ;; This function calls:
  4388 ;;		Nothing
  4389 ;; This function is called by:
  4390 ;;		_my_Main
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _setTemp_Enable
  4396  26A6                     _setTemp_Enable:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in _setTemp_Enable: [wregfsr1]
  4400                           ;setTemp_Enable@command stored from wreg
  4401  26A6  0020               	movlb	0	; select bank0
  4402  26A7  00A0               	movwf	setTemp_Enable@command
  4403                           
  4404                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
  4405  26A8  0021               	movlb	1	; select bank1
  4406  26A9  0844               	movf	_Temp^(0+128),w
  4407  26AA  0086               	movwf	6
  4408  26AB  3001               	movlw	1	; select bank2/3
  4409  26AC  0087               	movwf	7
  4410  26AD  0020               	movlb	0	; select bank0
  4411  26AE  0820               	movf	setTemp_Enable@command,w
  4412  26AF  1001               	bcf	1,0
  4413  26B0  1D03               	skipz
  4414  26B1  1401               	bsf	1,0
  4415  26B2  0008               	return
  4416  26B3                     __end_of_setTemp_Enable:	
  4417                           
  4418                           	psect	text3
  4419  274E                     __ptext3:	
  4420 ;; *************** function _setLoad_Enable *****************
  4421 ;; Defined at:
  4422 ;;		line 260 in file "../src/OverLoad_B1.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  command         1    wreg     unsigned char 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  command         1    0[BANK0 ] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;		None               void
  4429 ;; Registers used:
  4430 ;;		wreg, fsr1l, fsr1h
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;Total ram usage:        1 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    5
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_my_Main
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _setLoad_Enable
  4452  274E                     _setLoad_Enable:	
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in _setLoad_Enable: [wregfsr1]
  4456                           ;setLoad_Enable@command stored from wreg
  4457  274E  0020               	movlb	0	; select bank0
  4458  274F  00A0               	movwf	setLoad_Enable@command
  4459                           
  4460                           ;OverLoad_B1.c: 261: Load->Enable = command;
  4461  2750  087B               	movf	_Load,w
  4462  2751  0086               	movwf	6
  4463  2752  3002               	movlw	2	; select bank4/5
  4464  2753  0087               	movwf	7
  4465  2754  0820               	movf	setLoad_Enable@command,w
  4466  2755  1001               	bcf	1,0
  4467  2756  1D03               	skipz
  4468  2757  1401               	bsf	1,0
  4469                           
  4470                           ;OverLoad_B1.c: 262: Load->GO = 0;
  4471  2758  087B               	movf	_Load,w
  4472  2759  0086               	movwf	6
  4473  275A  3002               	movlw	2	; select bank4/5
  4474  275B  0087               	movwf	7
  4475  275C  1081               	bcf	1,1
  4476  275D  0008               	return
  4477  275E                     __end_of_setLoad_Enable:	
  4478                           
  4479                           	psect	text4
  4480  1875                     __ptext4:	
  4481 ;; *************** function _myMain_Initialization *****************
  4482 ;; Defined at:
  4483 ;;		line 111 in file "../src/Main_B1.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;		None               void
  4490 ;; Registers used:
  4491 ;;		wreg, fsr1l, fsr1h
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4500 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;Total ram usage:        1 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    5
  4504 ;; This function calls:
  4505 ;;		Nothing
  4506 ;; This function is called by:
  4507 ;;		_main
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           
  4512                           ;psect for function _myMain_Initialization
  4513  1875                     _myMain_Initialization:	
  4514                           
  4515                           ;Main_B1.c: 113: product = &_product;
  4516                           
  4517                           ;incstack = 0
  4518                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4519  1875  30A0               	movlw	__product& (0+255)
  4520  1876  0020               	movlb	0	; select bank0
  4521  1877  00A0               	movwf	??_myMain_Initialization
  4522  1878  0820               	movf	??_myMain_Initialization,w
  4523  1879  00FD               	movwf	_product
  4524                           
  4525                           ;Main_B1.c: 114: product->Data[20] = 210;
  4526  187A  30D2               	movlw	210
  4527  187B  00A0               	movwf	??_myMain_Initialization
  4528  187C  087D               	movf	_product,w
  4529  187D  3E14               	addlw	20
  4530  187E  0086               	movwf	6
  4531  187F  3001               	movlw	1	; select bank2/3
  4532  1880  0087               	movwf	7
  4533  1881  0820               	movf	??_myMain_Initialization,w
  4534  1882  0081               	movwf	1
  4535                           
  4536                           ;Main_B1.c: 117: myMain = &_myMain;
  4537  1883  30C0               	movlw	__myMain& (0+255)
  4538  1884  00A0               	movwf	??_myMain_Initialization
  4539  1885  0820               	movf	??_myMain_Initialization,w
  4540  1886  0021               	movlb	1	; select bank1
  4541  1887  00ED               	movwf	_myMain^(0+128)
  4542  1888  0008               	return
  4543  1889                     __end_of_myMain_Initialization:	
  4544                           
  4545                           	psect	text5
  4546  0800                     __ptext5:	
  4547 ;; *************** function _getTemp_AD *****************
  4548 ;; Defined at:
  4549 ;;		line 35 in file "../src/OverTemperature_B1.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  channel         1    wreg     unsigned char 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  channel         1    8[BANK0 ] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;		None               void
  4556 ;; Registers used:
  4557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;Total ram usage:        5 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    6
  4570 ;; This function calls:
  4571 ;;		_getAD
  4572 ;; This function is called by:
  4573 ;;		_main
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           
  4578                           ;psect for function _getTemp_AD
  4579  0800                     _getTemp_AD:	
  4580                           
  4581                           ;incstack = 0
  4582                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4583                           ;getTemp_AD@channel stored from wreg
  4584  0800  0020               	movlb	0	; select bank0
  4585  0801  00A8               	movwf	getTemp_AD@channel
  4586                           
  4587                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4588  0802  0021               	movlb	1	; select bank1
  4589  0803  0844               	movf	_Temp^(0+128),w
  4590  0804  0086               	movwf	6
  4591  0805  3001               	movlw	1	; select bank2/3
  4592  0806  0087               	movwf	7
  4593  0807  1D01               	btfss	1,2
  4594  0808  0008               	return
  4595                           
  4596                           ;OverTemperature_B1.c: 38: {
  4597                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4598  0809  30F0               	movlw	240
  4599  080A  0020               	movlb	0	; select bank0
  4600  080B  00A4               	movwf	??_getTemp_AD
  4601  080C  0824               	movf	??_getTemp_AD,w
  4602  080D  00A0               	movwf	getAD@adcon1
  4603  080E  0828               	movf	getTemp_AD@channel,w
  4604  080F  3198  20C9  3188   	fcall	_getAD
  4605  0812  0021               	movlb	1	; select bank1
  4606  0813  0844               	movf	_Temp^(0+128),w
  4607  0814  3E0C               	addlw	12
  4608  0815  0086               	movwf	6
  4609  0816  3001               	movlw	1	; select bank2/3
  4610  0817  0087               	movwf	7
  4611  0818  0020               	movlb	0	; select bank0
  4612  0819  0820               	movf	?_getAD,w
  4613  081A  3FC0               	movwi [0]fsr1
  4614  081B  0821               	movf	?_getAD+1,w
  4615  081C  3FC1               	movwi [1]fsr1
  4616                           
  4617                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4618  081D  0021               	movlb	1	; select bank1
  4619  081E  0844               	movf	_Temp^(0+128),w
  4620  081F  3E0C               	addlw	12
  4621  0820  0086               	movwf	6
  4622  0821  3001               	movlw	1	; select bank2/3
  4623  0822  0087               	movwf	7
  4624  0823  3F40               	moviw [0]fsr1
  4625  0824  0020               	movlb	0	; select bank0
  4626  0825  00A4               	movwf	??_getTemp_AD
  4627  0826  3F41               	moviw [1]fsr1
  4628  0827  00A5               	movwf	??_getTemp_AD+1
  4629  0828  0021               	movlb	1	; select bank1
  4630  0829  0844               	movf	_Temp^(0+128),w
  4631  082A  3E08               	addlw	8
  4632  082B  0086               	movwf	6
  4633  082C  3001               	movlw	1	; select bank2/3
  4634  082D  0087               	movwf	7
  4635  082E  3F40               	moviw [0]fsr1
  4636  082F  0020               	movlb	0	; select bank0
  4637  0830  00A6               	movwf	??_getTemp_AD+2
  4638  0831  3F41               	moviw [1]fsr1
  4639  0832  00A7               	movwf	??_getTemp_AD+3
  4640  0833  0825               	movf	??_getTemp_AD+1,w
  4641  0834  0227               	subwf	??_getTemp_AD+3,w
  4642  0835  1D03               	skipz
  4643  0836  2839               	goto	u7535
  4644  0837  0824               	movf	??_getTemp_AD,w
  4645  0838  0226               	subwf	??_getTemp_AD+2,w
  4646  0839                     u7535:	
  4647  0839  1803               	skipnc
  4648  083A  284B               	goto	l8129
  4649                           
  4650                           ;OverTemperature_B1.c: 41: {
  4651                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4652  083B  0021               	movlb	1	; select bank1
  4653  083C  0844               	movf	_Temp^(0+128),w
  4654  083D  3E0C               	addlw	12
  4655  083E  0086               	movwf	6
  4656  083F  3001               	movlw	1	; select bank2/3
  4657  0840  0087               	movwf	7
  4658  0841  0844               	movf	_Temp^(0+128),w
  4659  0842  3E08               	addlw	8
  4660  0843  0084               	movwf	4
  4661  0844  3001               	movlw	1	; select bank2/3
  4662  0845  0085               	movwf	5
  4663  0846  3F40               	moviw [0]fsr1
  4664  0847  3F80               	movwi [0]fsr0
  4665  0848  3F41               	moviw [1]fsr1
  4666  0849  3F81               	movwi [1]fsr0
  4667                           
  4668                           ;OverTemperature_B1.c: 43: }
  4669  084A  0008               	return
  4670  084B                     l8129:	
  4671                           
  4672                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4673  084B  0021               	movlb	1	; select bank1
  4674  084C  0844               	movf	_Temp^(0+128),w
  4675  084D  3E0C               	addlw	12
  4676  084E  0086               	movwf	6
  4677  084F  3001               	movlw	1	; select bank2/3
  4678  0850  0087               	movwf	7
  4679  0851  3F40               	moviw [0]fsr1
  4680  0852  0020               	movlb	0	; select bank0
  4681  0853  00A4               	movwf	??_getTemp_AD
  4682  0854  3F41               	moviw [1]fsr1
  4683  0855  00A5               	movwf	??_getTemp_AD+1
  4684  0856  0021               	movlb	1	; select bank1
  4685  0857  0844               	movf	_Temp^(0+128),w
  4686  0858  3E0A               	addlw	10
  4687  0859  0086               	movwf	6
  4688  085A  3001               	movlw	1	; select bank2/3
  4689  085B  0087               	movwf	7
  4690  085C  3F40               	moviw [0]fsr1
  4691  085D  0020               	movlb	0	; select bank0
  4692  085E  00A6               	movwf	??_getTemp_AD+2
  4693  085F  3F41               	moviw [1]fsr1
  4694  0860  00A7               	movwf	??_getTemp_AD+3
  4695  0861  0825               	movf	??_getTemp_AD+1,w
  4696  0862  0227               	subwf	??_getTemp_AD+3,w
  4697  0863  1D03               	skipz
  4698  0864  2867               	goto	u7545
  4699  0865  0824               	movf	??_getTemp_AD,w
  4700  0866  0226               	subwf	??_getTemp_AD+2,w
  4701  0867                     u7545:	
  4702  0867  1803               	skipnc
  4703  0868  0008               	return
  4704                           
  4705                           ;OverTemperature_B1.c: 45: {
  4706                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4707  0869  0021               	movlb	1	; select bank1
  4708  086A  0844               	movf	_Temp^(0+128),w
  4709  086B  3E0C               	addlw	12
  4710  086C  0086               	movwf	6
  4711  086D  3001               	movlw	1	; select bank2/3
  4712  086E  0087               	movwf	7
  4713  086F  0844               	movf	_Temp^(0+128),w
  4714  0870  3E0A               	addlw	10
  4715  0871  0084               	movwf	4
  4716  0872  3001               	movlw	1	; select bank2/3
  4717  0873  0085               	movwf	5
  4718  0874  3F40               	moviw [0]fsr1
  4719  0875  3F80               	movwi [0]fsr0
  4720  0876  3F41               	moviw [1]fsr1
  4721  0877  3F81               	movwi [1]fsr0
  4722  0878  0008               	return
  4723  0879                     __end_of_getTemp_AD:	
  4724                           
  4725                           	psect	text6
  4726  0AAD                     __ptext6:	
  4727 ;; *************** function _getLoad_AD *****************
  4728 ;; Defined at:
  4729 ;;		line 16 in file "../src/OverLoad_B1.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  channel         1    wreg     unsigned char 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  channel         1    9[BANK0 ] unsigned char 
  4734 ;;  i               1   11[BANK0 ] unsigned char 
  4735 ;;  j               1   10[BANK0 ] unsigned char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;Total ram usage:        8 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    6
  4752 ;; This function calls:
  4753 ;;		_getAD
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _getLoad_AD
  4761  0AAD                     _getLoad_AD:	
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4765                           ;getLoad_AD@channel stored from wreg
  4766  0AAD  0020               	movlb	0	; select bank0
  4767  0AAE  00A9               	movwf	getLoad_AD@channel
  4768                           
  4769                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4770  0AAF  01AB               	clrf	getLoad_AD@i
  4771  0AB0  01AA               	clrf	getLoad_AD@j
  4772                           
  4773                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4774  0AB1  087B               	movf	_Load,w
  4775  0AB2  0086               	movwf	6
  4776  0AB3  3002               	movlw	2	; select bank4/5
  4777  0AB4  0087               	movwf	7
  4778  0AB5  1E01               	btfss	1,4
  4779  0AB6  0008               	return
  4780                           
  4781                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4782  0AB7  30C0               	movlw	192
  4783  0AB8  00A4               	movwf	??_getLoad_AD
  4784  0AB9  0824               	movf	??_getLoad_AD,w
  4785  0ABA  00A0               	movwf	getAD@adcon1
  4786  0ABB  0829               	movf	getLoad_AD@channel,w
  4787  0ABC  3198  20C9  318A   	fcall	_getAD
  4788  0ABF  087B               	movf	_Load,w
  4789  0AC0  3E32               	addlw	50
  4790  0AC1  0086               	movwf	6
  4791  0AC2  3002               	movlw	2	; select bank4/5
  4792  0AC3  0087               	movwf	7
  4793  0AC4  0020               	movlb	0	; select bank0
  4794  0AC5  0820               	movf	?_getAD,w
  4795  0AC6  3FC0               	movwi [0]fsr1
  4796  0AC7  0821               	movf	?_getAD+1,w
  4797  0AC8  3FC1               	movwi [1]fsr1
  4798                           
  4799                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4800  0AC9  01AB               	clrf	getLoad_AD@i
  4801  0ACA  3005               	movlw	5
  4802  0ACB  022B               	subwf	getLoad_AD@i,w
  4803  0ACC  1803               	btfsc	3,0
  4804  0ACD  2B07               	goto	l8105
  4805  0ACE                     l8095:	
  4806                           
  4807                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4808  0ACE  087B               	movf	_Load,w
  4809  0ACF  3E32               	addlw	50
  4810  0AD0  0086               	movwf	6
  4811  0AD1  3002               	movlw	2	; select bank4/5
  4812  0AD2  0087               	movwf	7
  4813  0AD3  3F40               	moviw [0]fsr1
  4814  0AD4  00A4               	movwf	??_getLoad_AD
  4815  0AD5  3F41               	moviw [1]fsr1
  4816  0AD6  00A5               	movwf	??_getLoad_AD+1
  4817  0AD7  352B               	lslf	getLoad_AD@i,w
  4818  0AD8  3E08               	addlw	8
  4819  0AD9  077B               	addwf	_Load,w
  4820  0ADA  00A6               	movwf	??_getLoad_AD+2
  4821  0ADB  0826               	movf	??_getLoad_AD+2,w
  4822  0ADC  0086               	movwf	6
  4823  0ADD  3002               	movlw	2	; select bank4/5
  4824  0ADE  0087               	movwf	7
  4825  0ADF  3F40               	moviw [0]fsr1
  4826  0AE0  00A7               	movwf	??_getLoad_AD+3
  4827  0AE1  3F41               	moviw [1]fsr1
  4828  0AE2  00A8               	movwf	??_getLoad_AD+4
  4829  0AE3  0825               	movf	??_getLoad_AD+1,w
  4830  0AE4  0228               	subwf	??_getLoad_AD+4,w
  4831  0AE5  1D03               	skipz
  4832  0AE6  2AE9               	goto	u7465
  4833  0AE7  0824               	movf	??_getLoad_AD,w
  4834  0AE8  0227               	subwf	??_getLoad_AD+3,w
  4835  0AE9                     u7465:	
  4836  0AE9  1803               	skipnc
  4837  0AEA  2AFF               	goto	l8101
  4838                           
  4839                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4840  0AEB  087B               	movf	_Load,w
  4841  0AEC  3E32               	addlw	50
  4842  0AED  0086               	movwf	6
  4843  0AEE  3002               	movlw	2	; select bank4/5
  4844  0AEF  0087               	movwf	7
  4845  0AF0  352B               	lslf	getLoad_AD@i,w
  4846  0AF1  3E08               	addlw	8
  4847  0AF2  077B               	addwf	_Load,w
  4848  0AF3  00A4               	movwf	??_getLoad_AD
  4849  0AF4  0824               	movf	??_getLoad_AD,w
  4850  0AF5  0084               	movwf	4
  4851  0AF6  3002               	movlw	2	; select bank4/5
  4852  0AF7  0085               	movwf	5
  4853  0AF8  3F40               	moviw [0]fsr1
  4854  0AF9  3F80               	movwi [0]fsr0
  4855  0AFA  3F41               	moviw [1]fsr1
  4856  0AFB  3F81               	movwi [1]fsr0
  4857                           
  4858                           ;OverLoad_B1.c: 24: j = 1;
  4859  0AFC  01AA               	clrf	getLoad_AD@j
  4860  0AFD  0AAA               	incf	getLoad_AD@j,f
  4861                           
  4862                           ;OverLoad_B1.c: 25: break;
  4863  0AFE  2B07               	goto	l8105
  4864  0AFF                     l8101:	
  4865  0AFF  3001               	movlw	1
  4866  0B00  00A4               	movwf	??_getLoad_AD
  4867  0B01  0824               	movf	??_getLoad_AD,w
  4868  0B02  07AB               	addwf	getLoad_AD@i,f
  4869  0B03  3005               	movlw	5
  4870  0B04  022B               	subwf	getLoad_AD@i,w
  4871  0B05  1C03               	skipc
  4872  0B06  2ACE               	goto	l8095
  4873  0B07                     l8105:	
  4874                           
  4875                           ;OverLoad_B1.c: 26: }
  4876                           ;OverLoad_B1.c: 27: }
  4877                           ;OverLoad_B1.c: 28: if (!j) {
  4878  0B07  08AA               	movf	getLoad_AD@j,f
  4879  0B08  1D03               	skipz
  4880  0B09  0008               	return
  4881                           
  4882                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4883  0B0A  01AB               	clrf	getLoad_AD@i
  4884  0B0B                     L1:	
  4885  0B0B  3005               	movlw	5
  4886  0B0C  022B               	subwf	getLoad_AD@i,w
  4887  0B0D  1803               	btfsc	3,0
  4888  0B0E  0008               	return
  4889                           
  4890                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4891  0B0F  352B               	lslf	getLoad_AD@i,w
  4892  0B10  3E1A               	addlw	26
  4893  0B11  077B               	addwf	_Load,w
  4894  0B12  00A4               	movwf	??_getLoad_AD
  4895  0B13  0824               	movf	??_getLoad_AD,w
  4896  0B14  0086               	movwf	6
  4897  0B15  3002               	movlw	2	; select bank4/5
  4898  0B16  0087               	movwf	7
  4899  0B17  3F40               	moviw [0]fsr1
  4900  0B18  00A5               	movwf	??_getLoad_AD+1
  4901  0B19  3F41               	moviw [1]fsr1
  4902  0B1A  00A6               	movwf	??_getLoad_AD+2
  4903  0B1B  087B               	movf	_Load,w
  4904  0B1C  3E32               	addlw	50
  4905  0B1D  0086               	movwf	6
  4906  0B1E  3002               	movlw	2	; select bank4/5
  4907  0B1F  0087               	movwf	7
  4908  0B20  3F40               	moviw [0]fsr1
  4909  0B21  00A7               	movwf	??_getLoad_AD+3
  4910  0B22  3F41               	moviw [1]fsr1
  4911  0B23  00A8               	movwf	??_getLoad_AD+4
  4912  0B24  0826               	movf	??_getLoad_AD+2,w
  4913  0B25  0228               	subwf	??_getLoad_AD+4,w
  4914  0B26  1D03               	skipz
  4915  0B27  2B2A               	goto	u7505
  4916  0B28  0825               	movf	??_getLoad_AD+1,w
  4917  0B29  0227               	subwf	??_getLoad_AD+3,w
  4918  0B2A                     u7505:	
  4919  0B2A  1803               	skipnc
  4920  0B2B  2B3E               	goto	l8117
  4921                           
  4922                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  4923  0B2C  087B               	movf	_Load,w
  4924  0B2D  3E32               	addlw	50
  4925  0B2E  0086               	movwf	6
  4926  0B2F  3002               	movlw	2	; select bank4/5
  4927  0B30  0087               	movwf	7
  4928  0B31  352B               	lslf	getLoad_AD@i,w
  4929  0B32  3E1A               	addlw	26
  4930  0B33  077B               	addwf	_Load,w
  4931  0B34  00A4               	movwf	??_getLoad_AD
  4932  0B35  0824               	movf	??_getLoad_AD,w
  4933  0B36  0084               	movwf	4
  4934  0B37  3002               	movlw	2	; select bank4/5
  4935  0B38  0085               	movwf	5
  4936  0B39  3F40               	moviw [0]fsr1
  4937  0B3A  3F80               	movwi [0]fsr0
  4938  0B3B  3F41               	moviw [1]fsr1
  4939  0B3C  3F81               	movwi [1]fsr0
  4940                           
  4941                           ;OverLoad_B1.c: 32: break;
  4942  0B3D  0008               	return
  4943  0B3E                     l8117:	
  4944  0B3E  3001               	movlw	1
  4945  0B3F  00A4               	movwf	??_getLoad_AD
  4946  0B40  0824               	movf	??_getLoad_AD,w
  4947  0B41  07AB               	addwf	getLoad_AD@i,f
  4948  0B42  2B0B               	goto	L1
  4949  0B43                     __end_of_getLoad_AD:	
  4950                           
  4951                           	psect	text7
  4952  18C9                     __ptext7:	
  4953 ;; *************** function _getAD *****************
  4954 ;; Defined at:
  4955 ;;		line 343 in file "../src/MCU_B1.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  adcon0          1    wreg     unsigned char 
  4958 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  2    0[BANK0 ] int 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4970 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;Total ram usage:        4 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    5
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_getLoad_AD
  4981 ;;		_getTemp_AD
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _getAD
  4987  18C9                     _getAD:	
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4991                           ;getAD@adcon0 stored from wreg
  4992  18C9  0020               	movlb	0	; select bank0
  4993  18CA  00A3               	movwf	getAD@adcon0
  4994                           
  4995                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4996  18CB  0823               	movf	getAD@adcon0,w
  4997  18CC  0021               	movlb	1	; select bank1
  4998  18CD  009D               	movwf	29	;volatile
  4999                           
  5000                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  5001  18CE  0020               	movlb	0	; select bank0
  5002  18CF  0820               	movf	getAD@adcon1,w
  5003  18D0  0021               	movlb	1	; select bank1
  5004  18D1  009E               	movwf	30	;volatile
  5005                           
  5006                           ;MCU_B1.c: 346: GO_nDONE = 1;
  5007  18D2  149D               	bsf	29,1	;volatile
  5008  18D3                     l1441:	
  5009                           ;MCU_B1.c: 347: while (GO_nDONE == 1);
  5010                           
  5011  18D3  189D               	btfsc	29,1	;volatile
  5012  18D4  28D3               	goto	l1441
  5013                           
  5014                           ;MCU_B1.c: 348: return ((ADRESH*256)+ADRESL);
  5015  18D5  081C               	movf	28,w	;volatile
  5016  18D6  0020               	movlb	0	; select bank0
  5017  18D7  01A1               	clrf	?_getAD+1
  5018  18D8  07A1               	addwf	?_getAD+1,f
  5019  18D9  0021               	movlb	1	; select bank1
  5020  18DA  081B               	movf	27,w	;volatile
  5021  18DB  0020               	movlb	0	; select bank0
  5022  18DC  01A0               	clrf	?_getAD
  5023  18DD  07A0               	addwf	?_getAD,f
  5024  18DE  0008               	return
  5025  18DF                     __end_of_getAD:	
  5026                           
  5027                           	psect	text8
  5028  19F4                     __ptext8:	
  5029 ;; *************** function _WDT_Main *****************
  5030 ;; Defined at:
  5031 ;;		line 900 in file "../src/MCU_B1.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;		None               void
  5038 ;; Registers used:
  5039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;Total ram usage:        1 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    6
  5052 ;; This function calls:
  5053 ;;		_WDT_Clearing
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function _WDT_Main
  5061  19F4                     _WDT_Main:	
  5062                           
  5063                           ;MCU_B1.c: 901: if (WDT->Enable == 1) {
  5064                           
  5065                           ;incstack = 0
  5066                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5067  19F4  0021               	movlb	1	; select bank1
  5068  19F5  086C               	movf	_WDT^(0+128),w
  5069  19F6  0086               	movwf	6
  5070  19F7  0187               	clrf	7
  5071  19F8  1C01               	btfss	1,0
  5072  19F9  0008               	return
  5073                           
  5074                           ;MCU_B1.c: 902: if (WDT->Count-- > 0) {
  5075  19FA  0A6C               	incf	_WDT^(0+128),w
  5076  19FB  0086               	movwf	6
  5077  19FC  0187               	clrf	7
  5078  19FD  3001               	movlw	1
  5079  19FE  0281               	subwf	1,f
  5080  19FF  0801               	movf	1,w
  5081  1A00  3AFF               	xorlw	255
  5082  1A01  1903               	skipnz
  5083  1A02  0008               	return
  5084                           
  5085                           ;MCU_B1.c: 903: WDT->Count = 10;
  5086  1A03  300A               	movlw	10
  5087  1A04  0020               	movlb	0	; select bank0
  5088  1A05  00A0               	movwf	??_WDT_Main
  5089  1A06  0021               	movlb	1	; select bank1
  5090  1A07  0A6C               	incf	_WDT^(0+128),w
  5091  1A08  0086               	movwf	6
  5092  1A09  0187               	clrf	7
  5093  1A0A  0020               	movlb	0	; select bank0
  5094  1A0B  0820               	movf	??_WDT_Main,w
  5095  1A0C  0081               	movwf	1
  5096                           
  5097                           ;MCU_B1.c: 904: WDT_Clearing();
  5098  1A0D  3180  2002         	fcall	_WDT_Clearing
  5099  1A0F  0008               	return
  5100  1A10                     __end_of_WDT_Main:	
  5101                           
  5102                           	psect	text9
  5103  0002                     __ptext9:	
  5104 ;; *************** function _WDT_Clearing *****************
  5105 ;; Defined at:
  5106 ;;		line 910 in file "../src/MCU_B1.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;		None               void
  5113 ;; Registers used:
  5114 ;;		None
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    5
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_WDT_Main
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           
  5135                           ;psect for function _WDT_Clearing
  5136  0002                     _WDT_Clearing:	
  5137                           
  5138                           ;incstack = 0
  5139                           ; Regs used in _WDT_Clearing: []
  5140  0002  0064               	clrwdt	;# 
  5141  0003  0008               	return
  5142  0004                     __end_of_WDT_Clearing:	
  5143                           
  5144                           	psect	text10
  5145  2561                     __ptext10:	
  5146 ;; *************** function _Temp_Main *****************
  5147 ;; Defined at:
  5148 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;Total ram usage:        0 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:   11
  5169 ;; This function calls:
  5170 ;;		_setTemp_Main
  5171 ;; This function is called by:
  5172 ;;		_main
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           
  5177                           ;psect for function _Temp_Main
  5178  2561                     _Temp_Main:	
  5179                           
  5180                           ;OverTemperature_B1.c: 60: setTemp_Main();
  5181                           
  5182                           ;incstack = 0
  5183                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5184  2561  3186  261E         	fcall	_setTemp_Main
  5185  2563  0008               	return
  5186  2564                     __end_of_Temp_Main:	
  5187                           
  5188                           	psect	text11
  5189  061E                     __ptext11:	
  5190 ;; *************** function _setTemp_Main *****************
  5191 ;; Defined at:
  5192 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;		None
  5197 ;; Return value:  Size  Location     Type
  5198 ;;		None               void
  5199 ;; Registers used:
  5200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;Total ram usage:        3 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:   10
  5213 ;; This function calls:
  5214 ;;		_getLoad_Safe
  5215 ;;		_setOverTemp_Exceptions
  5216 ;; This function is called by:
  5217 ;;		_Temp_Main
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function _setTemp_Main
  5223  061E                     _setTemp_Main:	
  5224                           
  5225                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  5226                           
  5227                           ;incstack = 0
  5228                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5229  061E  0021               	movlb	1	; select bank1
  5230  061F  0844               	movf	_Temp^(0+128),w
  5231  0620  0086               	movwf	6
  5232  0621  3001               	movlw	1	; select bank2/3
  5233  0622  0087               	movwf	7
  5234  0623  1C01               	btfss	1,0
  5235  0624  0008               	return
  5236                           
  5237                           ;OverTemperature_B1.c: 67: {
  5238                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  5239  0625  0844               	movf	_Temp^(0+128),w
  5240  0626  0086               	movwf	6
  5241  0627  3001               	movlw	1	; select bank2/3
  5242  0628  0087               	movwf	7
  5243  0629  1901               	btfsc	1,2
  5244  062A  2E67               	goto	l7603
  5245                           
  5246                           ;OverTemperature_B1.c: 69: {
  5247                           ;OverTemperature_B1.c: 70: Temp->Time++;
  5248  062B  0A44               	incf	_Temp^(0+128),w
  5249  062C  0086               	movwf	6
  5250  062D  3001               	movlw	1	; select bank2/3
  5251  062E  0087               	movwf	7
  5252  062F  3001               	movlw	1
  5253  0630  0781               	addwf	1,f
  5254  0631  3141               	addfsr 1,1
  5255  0632  1803               	skipnc
  5256  0633  0A81               	incf	1,f
  5257                           
  5258                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  5259  0634  0A44               	incf	_Temp^(0+128),w
  5260  0635  0086               	movwf	6
  5261  0636  3001               	movlw	1	; select bank2/3
  5262  0637  0087               	movwf	7
  5263  0638  3F40               	moviw [0]fsr1
  5264  0639  0020               	movlb	0	; select bank0
  5265  063A  00B0               	movwf	??_setTemp_Main
  5266  063B  3F41               	moviw [1]fsr1
  5267  063C  00B1               	movwf	??_setTemp_Main+1
  5268  063D  3001               	movlw	1
  5269  063E  0231               	subwf	??_setTemp_Main+1,w
  5270  063F  30F4               	movlw	244
  5271  0640  1903               	skipnz
  5272  0641  0230               	subwf	??_setTemp_Main,w
  5273  0642  1C03               	skipc
  5274  0643  0008               	return
  5275                           
  5276                           ;OverTemperature_B1.c: 72: {
  5277                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && 1)
  5278  0644  31A6  2605  3186   	fcall	_getLoad_Safe
  5279  0647  3A00               	xorlw	0
  5280  0648  1903               	skipnz
  5281  0649  2E5D               	goto	l7601
  5282                           
  5283                           ;OverTemperature_B1.c: 74: {
  5284                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  5285  064A  0021               	movlb	1	; select bank1
  5286  064B  0A44               	incf	_Temp^(0+128),w
  5287  064C  0086               	movwf	6
  5288  064D  3001               	movlw	1	; select bank2/3
  5289  064E  0087               	movwf	7
  5290  064F  3000               	movlw	0
  5291  0650  3FC0               	movwi [0]fsr1
  5292  0651  3FC1               	movwi [1]fsr1
  5293                           
  5294                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  5295  0652  0844               	movf	_Temp^(0+128),w
  5296  0653  0086               	movwf	6
  5297  0654  3001               	movlw	1	; select bank2/3
  5298  0655  0087               	movwf	7
  5299  0656  1501               	bsf	1,2
  5300                           
  5301                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  5302  0657  0844               	movf	_Temp^(0+128),w
  5303  0658  0086               	movwf	6
  5304  0659  3001               	movlw	1	; select bank2/3
  5305  065A  0087               	movwf	7
  5306  065B  1201               	bcf	1,4
  5307                           
  5308                           ;OverTemperature_B1.c: 78: }
  5309  065C  0008               	return
  5310  065D                     l7601:	
  5311                           
  5312                           ;OverTemperature_B1.c: 79: else
  5313                           ;OverTemperature_B1.c: 80: {
  5314                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  5315  065D  0021               	movlb	1	; select bank1
  5316  065E  0A44               	incf	_Temp^(0+128),w
  5317  065F  0086               	movwf	6
  5318  0660  3001               	movlw	1	; select bank2/3
  5319  0661  0087               	movwf	7
  5320  0662  30E8               	movlw	232
  5321  0663  3FC0               	movwi [0]fsr1
  5322  0664  3003               	movlw	3
  5323  0665  3FC1               	movwi [1]fsr1
  5324                           
  5325                           ;OverTemperature_B1.c: 82: }
  5326                           ;OverTemperature_B1.c: 83: }
  5327                           ;OverTemperature_B1.c: 84: }
  5328  0666  0008               	return
  5329  0667                     l7603:	
  5330                           
  5331                           ;OverTemperature_B1.c: 85: else
  5332                           ;OverTemperature_B1.c: 86: {
  5333                           ;OverTemperature_B1.c: 87: Temp->Time++;
  5334  0667  0A44               	incf	_Temp^(0+128),w
  5335  0668  0086               	movwf	6
  5336  0669  3001               	movlw	1	; select bank2/3
  5337  066A  0087               	movwf	7
  5338  066B  3001               	movlw	1
  5339  066C  0781               	addwf	1,f
  5340  066D  3141               	addfsr 1,1
  5341  066E  1803               	skipnc
  5342  066F  0A81               	incf	1,f
  5343                           
  5344                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  5345  0670  0A44               	incf	_Temp^(0+128),w
  5346  0671  0086               	movwf	6
  5347  0672  3001               	movlw	1	; select bank2/3
  5348  0673  0087               	movwf	7
  5349  0674  3F40               	moviw [0]fsr1
  5350  0675  0020               	movlb	0	; select bank0
  5351  0676  00B0               	movwf	??_setTemp_Main
  5352  0677  3F41               	moviw [1]fsr1
  5353  0678  00B1               	movwf	??_setTemp_Main+1
  5354  0679  3000               	movlw	0
  5355  067A  0231               	subwf	??_setTemp_Main+1,w
  5356  067B  3004               	movlw	4
  5357  067C  1903               	skipnz
  5358  067D  0230               	subwf	??_setTemp_Main,w
  5359  067E  1C03               	skipc
  5360  067F  0008               	return
  5361                           
  5362                           ;OverTemperature_B1.c: 89: {
  5363                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  5364  0680  0021               	movlb	1	; select bank1
  5365  0681  0A44               	incf	_Temp^(0+128),w
  5366  0682  0086               	movwf	6
  5367  0683  3001               	movlw	1	; select bank2/3
  5368  0684  0087               	movwf	7
  5369  0685  3000               	movlw	0
  5370  0686  3FC0               	movwi [0]fsr1
  5371  0687  3FC1               	movwi [1]fsr1
  5372                           
  5373                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  5374  0688  0844               	movf	_Temp^(0+128),w
  5375  0689  0086               	movwf	6
  5376  068A  3001               	movlw	1	; select bank2/3
  5377  068B  0087               	movwf	7
  5378  068C  1101               	bcf	1,2
  5379                           
  5380                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  5381  068D  0844               	movf	_Temp^(0+128),w
  5382  068E  3E0A               	addlw	10
  5383  068F  0086               	movwf	6
  5384  0690  3001               	movlw	1	; select bank2/3
  5385  0691  0087               	movwf	7
  5386  0692  0844               	movf	_Temp^(0+128),w
  5387  0693  3E06               	addlw	6
  5388  0694  0084               	movwf	4
  5389  0695  3001               	movlw	1	; select bank2/3
  5390  0696  0085               	movwf	5
  5391  0697  3F40               	moviw [0]fsr1
  5392  0698  3F80               	movwi [0]fsr0
  5393  0699  3F41               	moviw [1]fsr1
  5394  069A  3F81               	movwi [1]fsr0
  5395                           
  5396                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  5397  069B  0844               	movf	_Temp^(0+128),w
  5398  069C  0086               	movwf	6
  5399  069D  3001               	movlw	1	; select bank2/3
  5400  069E  0087               	movwf	7
  5401  069F  1C81               	btfss	1,1
  5402  06A0  2ED2               	goto	l7625
  5403                           
  5404                           ;OverTemperature_B1.c: 94: {
  5405                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  5406  06A1  0844               	movf	_Temp^(0+128),w
  5407  06A2  3E06               	addlw	6
  5408  06A3  0086               	movwf	6
  5409  06A4  3001               	movlw	1	; select bank2/3
  5410  06A5  0087               	movwf	7
  5411  06A6  3F40               	moviw [0]fsr1
  5412  06A7  0020               	movlb	0	; select bank0
  5413  06A8  00B0               	movwf	??_setTemp_Main
  5414  06A9  3F41               	moviw [1]fsr1
  5415  06AA  00B1               	movwf	??_setTemp_Main+1
  5416  06AB  3002               	movlw	2
  5417  06AC  0231               	subwf	??_setTemp_Main+1,w
  5418  06AD  3058               	movlw	88
  5419  06AE  1903               	skipnz
  5420  06AF  0230               	subwf	??_setTemp_Main,w
  5421  06B0  1C03               	skipc
  5422  06B1  2F03               	goto	l7635
  5423                           
  5424                           ;OverTemperature_B1.c: 96: {
  5425                           ;OverTemperature_B1.c: 97: Temp->Count++;
  5426  06B2  3001               	movlw	1
  5427  06B3  00B0               	movwf	??_setTemp_Main
  5428  06B4  0021               	movlb	1	; select bank1
  5429  06B5  0844               	movf	_Temp^(0+128),w
  5430  06B6  3E03               	addlw	3
  5431  06B7  0086               	movwf	6
  5432  06B8  3001               	movlw	1	; select bank2/3
  5433  06B9  0087               	movwf	7
  5434  06BA  0020               	movlb	0	; select bank0
  5435  06BB  0830               	movf	??_setTemp_Main,w
  5436  06BC  0781               	addwf	1,f
  5437                           
  5438                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5439  06BD  0021               	movlb	1	; select bank1
  5440  06BE  0844               	movf	_Temp^(0+128),w
  5441  06BF  3E03               	addlw	3
  5442  06C0  0086               	movwf	6
  5443  06C1  3001               	movlw	1	; select bank2/3
  5444  06C2  0087               	movwf	7
  5445  06C3  3003               	movlw	3
  5446  06C4  0201               	subwf	1,w
  5447  06C5  1C03               	skipc
  5448  06C6  2F0A               	goto	l7637
  5449                           
  5450                           ;OverTemperature_B1.c: 99: {
  5451                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5452  06C7  0844               	movf	_Temp^(0+128),w
  5453  06C8  3E03               	addlw	3
  5454  06C9  0086               	movwf	6
  5455  06CA  3001               	movlw	1	; select bank2/3
  5456  06CB  0087               	movwf	7
  5457  06CC  0181               	clrf	1
  5458                           
  5459                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5460  06CD  3000               	movlw	0
  5461  06CE  319F  27BA  3186   	fcall	_setOverTemp_Exceptions
  5462                           
  5463                           ;OverTemperature_B1.c: 102: }
  5464                           ;OverTemperature_B1.c: 103: }
  5465  06D1  2F0A               	goto	l7637
  5466  06D2                     l7625:	
  5467                           ;OverTemperature_B1.c: 107: }
  5468                           ;OverTemperature_B1.c: 108: }
  5469                           
  5470                           ;OverTemperature_B1.c: 104: else
  5471                           ;OverTemperature_B1.c: 105: {
  5472                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5473                           
  5474                           
  5475                           ;OverTemperature_B1.c: 109: else
  5476                           ;OverTemperature_B1.c: 110: {
  5477                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5478  06D2  0844               	movf	_Temp^(0+128),w
  5479  06D3  3E06               	addlw	6
  5480  06D4  0086               	movwf	6
  5481  06D5  3001               	movlw	1	; select bank2/3
  5482  06D6  0087               	movwf	7
  5483  06D7  3F40               	moviw [0]fsr1
  5484  06D8  0020               	movlb	0	; select bank0
  5485  06D9  00B0               	movwf	??_setTemp_Main
  5486  06DA  3F41               	moviw [1]fsr1
  5487  06DB  00B1               	movwf	??_setTemp_Main+1
  5488  06DC  3002               	movlw	2
  5489  06DD  0231               	subwf	??_setTemp_Main+1,w
  5490  06DE  3027               	movlw	39
  5491  06DF  1903               	skipnz
  5492  06E0  0230               	subwf	??_setTemp_Main,w
  5493  06E1  1803               	skipnc
  5494  06E2  2F03               	goto	l7635
  5495                           
  5496                           ;OverTemperature_B1.c: 112: {
  5497                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5498  06E3  3001               	movlw	1
  5499  06E4  00B0               	movwf	??_setTemp_Main
  5500  06E5  0021               	movlb	1	; select bank1
  5501  06E6  0844               	movf	_Temp^(0+128),w
  5502  06E7  3E03               	addlw	3
  5503  06E8  0086               	movwf	6
  5504  06E9  3001               	movlw	1	; select bank2/3
  5505  06EA  0087               	movwf	7
  5506  06EB  0020               	movlb	0	; select bank0
  5507  06EC  0830               	movf	??_setTemp_Main,w
  5508  06ED  0781               	addwf	1,f
  5509                           
  5510                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5511  06EE  0021               	movlb	1	; select bank1
  5512  06EF  0844               	movf	_Temp^(0+128),w
  5513  06F0  3E03               	addlw	3
  5514  06F1  0086               	movwf	6
  5515  06F2  3001               	movlw	1	; select bank2/3
  5516  06F3  0087               	movwf	7
  5517  06F4  3003               	movlw	3
  5518  06F5  0201               	subwf	1,w
  5519  06F6  1C03               	skipc
  5520  06F7  2F0A               	goto	l7637
  5521                           
  5522                           ;OverTemperature_B1.c: 115: {
  5523                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5524  06F8  0844               	movf	_Temp^(0+128),w
  5525  06F9  3E03               	addlw	3
  5526  06FA  0086               	movwf	6
  5527  06FB  3001               	movlw	1	; select bank2/3
  5528  06FC  0087               	movwf	7
  5529  06FD  0181               	clrf	1
  5530                           
  5531                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5532  06FE  3001               	movlw	1
  5533  06FF  319F  27BA  3186   	fcall	_setOverTemp_Exceptions
  5534                           
  5535                           ;OverTemperature_B1.c: 118: }
  5536                           ;OverTemperature_B1.c: 119: }
  5537  0702  2F0A               	goto	l7637
  5538  0703                     l7635:	
  5539                           
  5540                           ;OverTemperature_B1.c: 120: else
  5541                           ;OverTemperature_B1.c: 121: {
  5542                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5543  0703  0021               	movlb	1	; select bank1
  5544  0704  0844               	movf	_Temp^(0+128),w
  5545  0705  3E03               	addlw	3
  5546  0706  0086               	movwf	6
  5547  0707  3001               	movlw	1	; select bank2/3
  5548  0708  0087               	movwf	7
  5549  0709  0181               	clrf	1
  5550  070A                     l7637:	
  5551                           
  5552                           ;OverTemperature_B1.c: 123: }
  5553                           ;OverTemperature_B1.c: 124: }
  5554                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5555  070A  0021               	movlb	1	; select bank1
  5556  070B  0844               	movf	_Temp^(0+128),w
  5557  070C  0086               	movwf	6
  5558  070D  3001               	movlw	1	; select bank2/3
  5559  070E  0087               	movwf	7
  5560  070F  1881               	btfsc	1,1
  5561  0710  2F16               	goto	l7641
  5562                           
  5563                           ;OverTemperature_B1.c: 126: {
  5564                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5565  0711  0844               	movf	_Temp^(0+128),w
  5566  0712  0086               	movwf	6
  5567  0713  3001               	movlw	1	; select bank2/3
  5568  0714  0087               	movwf	7
  5569  0715  1601               	bsf	1,4
  5570  0716                     l7641:	
  5571                           
  5572                           ;OverTemperature_B1.c: 128: }
  5573                           ;OverTemperature_B1.c: 129: product->Data[24]=Temp->AD >> 8;
  5574  0716  0844               	movf	_Temp^(0+128),w
  5575  0717  3E06               	addlw	6
  5576  0718  0086               	movwf	6
  5577  0719  3001               	movlw	1	; select bank2/3
  5578  071A  0087               	movwf	7
  5579  071B  3F40               	moviw [0]fsr1
  5580  071C  0020               	movlb	0	; select bank0
  5581  071D  00B0               	movwf	??_setTemp_Main
  5582  071E  3F41               	moviw [1]fsr1
  5583  071F  00B1               	movwf	??_setTemp_Main+1
  5584  0720  0831               	movf	??_setTemp_Main+1,w
  5585  0721  00B2               	movwf	??_setTemp_Main+2
  5586  0722  087D               	movf	_product,w
  5587  0723  3E18               	addlw	24
  5588  0724  0086               	movwf	6
  5589  0725  3001               	movlw	1	; select bank2/3
  5590  0726  0087               	movwf	7
  5591  0727  0832               	movf	??_setTemp_Main+2,w
  5592  0728  0081               	movwf	1
  5593                           
  5594                           ;OverTemperature_B1.c: 130: product->Data[25]=Temp->AD;
  5595  0729  0021               	movlb	1	; select bank1
  5596  072A  0844               	movf	_Temp^(0+128),w
  5597  072B  3E06               	addlw	6
  5598  072C  0086               	movwf	6
  5599  072D  3001               	movlw	1	; select bank2/3
  5600  072E  0087               	movwf	7
  5601  072F  0801               	movf	1,w
  5602  0730  0020               	movlb	0	; select bank0
  5603  0731  00B0               	movwf	??_setTemp_Main
  5604  0732  087D               	movf	_product,w
  5605  0733  3E19               	addlw	25
  5606  0734  0086               	movwf	6
  5607  0735  3001               	movlw	1	; select bank2/3
  5608  0736  0087               	movwf	7
  5609  0737  0830               	movf	??_setTemp_Main,w
  5610  0738  0081               	movwf	1
  5611                           
  5612                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5613  0739  0021               	movlb	1	; select bank1
  5614  073A  0844               	movf	_Temp^(0+128),w
  5615  073B  3E08               	addlw	8
  5616  073C  0086               	movwf	6
  5617  073D  3001               	movlw	1	; select bank2/3
  5618  073E  0087               	movwf	7
  5619  073F  3000               	movlw	0
  5620  0740  3FC0               	movwi [0]fsr1
  5621  0741  3FC1               	movwi [1]fsr1
  5622                           
  5623                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5624  0742  0844               	movf	_Temp^(0+128),w
  5625  0743  3E0A               	addlw	10
  5626  0744  0086               	movwf	6
  5627  0745  3001               	movlw	1	; select bank2/3
  5628  0746  0087               	movwf	7
  5629  0747  3000               	movlw	0
  5630  0748  3FC0               	movwi [0]fsr1
  5631  0749  3FC1               	movwi [1]fsr1
  5632  074A  0008               	return
  5633  074B                     __end_of_setTemp_Main:	
  5634                           
  5635                           	psect	text12
  5636  1FBA                     __ptext12:	
  5637 ;; *************** function _setOverTemp_Exceptions *****************
  5638 ;; Defined at:
  5639 ;;		line 138 in file "../src/OverTemperature_B1.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  command         1    wreg     unsigned char 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  command         1   15[BANK0 ] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;		None               void
  5646 ;; Registers used:
  5647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;Total ram usage:        2 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    9
  5660 ;; This function calls:
  5661 ;;		_DimmerLights_Exceptions
  5662 ;;		_setBuz
  5663 ;;		_setLED
  5664 ;;		_setRF_Enable
  5665 ;;		_setSw_Enable
  5666 ;; This function is called by:
  5667 ;;		_setTemp_Main
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _setOverTemp_Exceptions
  5673  1FBA                     _setOverTemp_Exceptions:	
  5674                           
  5675                           ;incstack = 0
  5676                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5677                           ;setOverTemp_Exceptions@command stored from wreg
  5678  1FBA  0020               	movlb	0	; select bank0
  5679  1FBB  00AF               	movwf	setOverTemp_Exceptions@command
  5680                           
  5681                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5682  1FBC  0021               	movlb	1	; select bank1
  5683  1FBD  0844               	movf	_Temp^(0+128),w
  5684  1FBE  0086               	movwf	6
  5685  1FBF  3001               	movlw	1	; select bank2/3
  5686  1FC0  0087               	movwf	7
  5687  1FC1  0020               	movlb	0	; select bank0
  5688  1FC2  082F               	movf	setOverTemp_Exceptions@command,w
  5689  1FC3  1081               	bcf	1,1
  5690  1FC4  1D03               	skipz
  5691  1FC5  1481               	bsf	1,1
  5692                           
  5693                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5694  1FC6  092F               	comf	setOverTemp_Exceptions@command,w
  5695  1FC7  3901               	andlw	1
  5696  1FC8  00AE               	movwf	??_setOverTemp_Exceptions
  5697  1FC9  0021               	movlb	1	; select bank1
  5698  1FCA  0844               	movf	_Temp^(0+128),w
  5699  1FCB  0086               	movwf	6
  5700  1FCC  3001               	movlw	1	; select bank2/3
  5701  1FCD  0087               	movwf	7
  5702  1FCE  0020               	movlb	0	; select bank0
  5703  1FCF  0EAE               	swapf	??_setOverTemp_Exceptions,f
  5704  1FD0  0801               	movf	1,w
  5705  1FD1  062E               	xorwf	??_setOverTemp_Exceptions,w
  5706  1FD2  39EF               	andlw	-17
  5707  1FD3  062E               	xorwf	??_setOverTemp_Exceptions,w
  5708  1FD4  0081               	movwf	1
  5709                           
  5710                           ;OverTemperature_B1.c: 142: if(command)
  5711  1FD5  082F               	movf	setOverTemp_Exceptions@command,w
  5712  1FD6  1903               	btfsc	3,2
  5713  1FD7  2FDD               	goto	l6993
  5714                           
  5715                           ;OverTemperature_B1.c: 143: {
  5716                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5717  1FD8  3001               	movlw	1
  5718  1FD9  3193  237D  319F   	fcall	_DimmerLights_Exceptions
  5719                           
  5720                           ;OverTemperature_B1.c: 148: }
  5721  1FDC  2FE6               	goto	l2057
  5722  1FDD                     l6993:	
  5723                           
  5724                           ;OverTemperature_B1.c: 149: else
  5725                           ;OverTemperature_B1.c: 150: {
  5726                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5727  1FDD  3064               	movlw	100
  5728  1FDE  0020               	movlb	0	; select bank0
  5729  1FDF  00A9               	movwf	setBuz@time
  5730  1FE0  3000               	movlw	0
  5731  1FE1  00AA               	movwf	setBuz@time+1
  5732  1FE2  3002               	movlw	2
  5733  1FE3  3188  2079  319F   	fcall	_setBuz
  5734  1FE6                     l2057:	
  5735                           
  5736                           ;OverTemperature_B1.c: 152: }
  5737                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5738  1FE6  0020               	movlb	0	; select bank0
  5739  1FE7  082F               	movf	setOverTemp_Exceptions@command,w
  5740  1FE8  3E0A               	addlw	10
  5741  1FE9  00AE               	movwf	??_setOverTemp_Exceptions
  5742  1FEA  082E               	movf	??_setOverTemp_Exceptions,w
  5743  1FEB  00A2               	movwf	setLED@command
  5744  1FEC  3063               	movlw	99
  5745  1FED  3192  2260  319F   	fcall	_setLED
  5746                           
  5747                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5748  1FF0  0020               	movlb	0	; select bank0
  5749  1FF1  092F               	comf	setOverTemp_Exceptions@command,w
  5750  1FF2  3901               	andlw	1
  5751  1FF3  3199  21D8  319F   	fcall	_setSw_Enable
  5752                           
  5753                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5754  1FF6  0020               	movlb	0	; select bank0
  5755  1FF7  092F               	comf	setOverTemp_Exceptions@command,w
  5756  1FF8  3901               	andlw	1
  5757  1FF9  00AE               	movwf	??_setOverTemp_Exceptions
  5758  1FFA  082E               	movf	??_setOverTemp_Exceptions,w
  5759  1FFB  00A2               	movwf	setRF_Enable@command
  5760  1FFC  3001               	movlw	1
  5761  1FFD  319B  2375         	fcall	_setRF_Enable
  5762  1FFF  0008               	return
  5763  2000                     __end_of_setOverTemp_Exceptions:	
  5764                           
  5765                           	psect	text13
  5766  2605                     __ptext13:	
  5767 ;; *************** function _getLoad_Safe *****************
  5768 ;; Defined at:
  5769 ;;		line 298 in file "../src/OverLoad_B1.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      unsigned char 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;Total ram usage:        1 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    5
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_setTemp_Main
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           
  5798                           ;psect for function _getLoad_Safe
  5799  2605                     _getLoad_Safe:	
  5800                           
  5801                           ;OverLoad_B1.c: 299: return Load->Safe;
  5802                           
  5803                           ;incstack = 0
  5804                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
  5805  2605  087B               	movf	_Load,w
  5806  2606  0086               	movwf	6
  5807  2607  3002               	movlw	2	; select bank4/5
  5808  2608  0087               	movwf	7
  5809  2609  0C01               	rrf	1,w
  5810  260A  0020               	movlb	0	; select bank0
  5811  260B  00A0               	movwf	??_getLoad_Safe
  5812  260C  0CA0               	rrf	??_getLoad_Safe,f
  5813  260D  0C20               	rrf	??_getLoad_Safe,w
  5814  260E  3901               	andlw	1
  5815  260F  0008               	return
  5816  2610                     __end_of_getLoad_Safe:	
  5817                           
  5818                           	psect	text14
  5819  255E                     __ptext14:	
  5820 ;; *************** function _Temp_Initialization *****************
  5821 ;; Defined at:
  5822 ;;		line 15 in file "../src/OverTemperature_B1.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;		None
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;		None               void
  5829 ;; Registers used:
  5830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;Total ram usage:        0 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    6
  5843 ;; This function calls:
  5844 ;;		_setTemp_Initialization
  5845 ;; This function is called by:
  5846 ;;		_main
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           
  5851                           ;psect for function _Temp_Initialization
  5852  255E                     _Temp_Initialization:	
  5853                           
  5854                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5855                           
  5856                           ;incstack = 0
  5857                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5858  255E  31A6  264C         	fcall	_setTemp_Initialization
  5859  2560  0008               	return
  5860  2561                     __end_of_Temp_Initialization:	
  5861                           
  5862                           	psect	text15
  5863  264C                     __ptext15:	
  5864 ;; *************** function _setTemp_Initialization *****************
  5865 ;; Defined at:
  5866 ;;		line 51 in file "../src/OverTemperature_B1.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;		None               void
  5873 ;; Registers used:
  5874 ;;		wreg, fsr1l, fsr1h
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;Total ram usage:        1 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    5
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_Temp_Initialization
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _setTemp_Initialization
  5896  264C                     _setTemp_Initialization:	
  5897                           
  5898                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5899                           
  5900                           ;incstack = 0
  5901                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5902  264C  30D0               	movlw	_Temp1& (0+255)
  5903  264D  0020               	movlb	0	; select bank0
  5904  264E  00A0               	movwf	??_setTemp_Initialization
  5905  264F  0820               	movf	??_setTemp_Initialization,w
  5906  2650  0021               	movlb	1	; select bank1
  5907  2651  00C4               	movwf	_Temp^(0+128)
  5908                           
  5909                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5910  2652  0844               	movf	_Temp^(0+128),w
  5911  2653  0086               	movwf	6
  5912  2654  3001               	movlw	1	; select bank2/3
  5913  2655  0087               	movwf	7
  5914  2656  1601               	bsf	1,4
  5915  2657  0008               	return
  5916  2658                     __end_of_setTemp_Initialization:	
  5917                           
  5918                           	psect	text16
  5919  25C8                     __ptext16:	
  5920 ;; *************** function _Switch_Main *****************
  5921 ;; Defined at:
  5922 ;;		line 61 in file "../src/Switch_B1.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;		None               void
  5929 ;; Registers used:
  5930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;Total ram usage:        0 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:   11
  5943 ;; This function calls:
  5944 ;;		_setSw_Main
  5945 ;; This function is called by:
  5946 ;;		_main
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _Switch_Main
  5952  25C8                     _Switch_Main:	
  5953                           
  5954                           ;Switch_B1.c: 63: setSw_Main(1);
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5958  25C8  3001               	movlw	1
  5959  25C9  3184  24C4  31A5   	fcall	_setSw_Main
  5960                           
  5961                           ;Switch_B1.c: 67: setSw_Main(2);
  5962  25CC  3002               	movlw	2
  5963  25CD  3184  24C4         	fcall	_setSw_Main
  5964  25CF  0008               	return
  5965  25D0                     __end_of_Switch_Main:	
  5966                           
  5967                           	psect	text17
  5968  04C4                     __ptext17:	
  5969 ;; *************** function _setSw_Main *****************
  5970 ;; Defined at:
  5971 ;;		line 111 in file "../src/Switch_B1.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  sw              1    wreg     unsigned char 
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;  sw              1   73[BANK0 ] unsigned char 
  5976 ;; Return value:  Size  Location     Type
  5977 ;;		None               void
  5978 ;; Registers used:
  5979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5988 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5989 ;;Total ram usage:        5 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:   10
  5992 ;; This function calls:
  5993 ;;		_SwPointSelect
  5994 ;;		_Sw_DimmerAdjFunc
  5995 ;;		_Sw_DimmerOffFunc
  5996 ;;		_Sw_DimmerOnFunc
  5997 ;;		_setBuz
  5998 ;;		_setRF_Learn
  5999 ;; This function is called by:
  6000 ;;		_Switch_Main
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           
  6005                           ;psect for function _setSw_Main
  6006  04C4                     _setSw_Main:	
  6007                           
  6008                           ;incstack = 0
  6009                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6010                           ;setSw_Main@sw stored from wreg
  6011  04C4  0020               	movlb	0	; select bank0
  6012  04C5  00E9               	movwf	setSw_Main@sw
  6013                           
  6014                           ;Switch_B1.c: 112: if (Sw->Enable == 1) {
  6015  04C6  087A               	movf	_Sw,w
  6016  04C7  0086               	movwf	6
  6017  04C8  3001               	movlw	1	; select bank2/3
  6018  04C9  0087               	movwf	7
  6019  04CA  1C01               	btfss	1,0
  6020  04CB  0008               	return
  6021                           
  6022                           ;Switch_B1.c: 113: SwPointSelect(sw);
  6023  04CC  0869               	movf	setSw_Main@sw,w
  6024  04CD  31A7  27EC  3184   	fcall	_SwPointSelect
  6025                           
  6026                           ;Switch_B1.c: 125: if (sw == 1) {
  6027  04D0  0020               	movlb	0	; select bank0
  6028  04D1  0869               	movf	setSw_Main@sw,w
  6029  04D2  3A01               	xorlw	1
  6030  04D3  1D03               	skipz
  6031  04D4  2CE1               	goto	l7755
  6032                           
  6033                           ;Switch_B1.c: 126: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  6034  04D5  01E7               	clrf	_setSw_Main$6226
  6035  04D6  0AE7               	incf	_setSw_Main$6226,f
  6036  04D7  1F0C               	btfss	12,6	;volatile
  6037  04D8  1A0C               	btfsc	12,4	;volatile
  6038  04D9  2CDB               	goto	l7753
  6039  04DA  01E7               	clrf	_setSw_Main$6226
  6040  04DB                     l7753:	
  6041  04DB  087A               	movf	_Sw,w
  6042  04DC  0086               	movwf	6
  6043  04DD  3001               	movlw	1	; select bank2/3
  6044  04DE  0087               	movwf	7
  6045  04DF  0867               	movf	_setSw_Main$6226,w
  6046  04E0  2CF0               	goto	L2
  6047  04E1                     l7755:	
  6048                           ;Switch_B1.c: 127: } else if (sw == 2) {
  6049                           
  6050  04E1  0869               	movf	setSw_Main@sw,w
  6051  04E2  3A02               	xorlw	2
  6052  04E3  1D03               	skipz
  6053  04E4  2CF3               	goto	l7765
  6054                           
  6055                           ;Switch_B1.c: 128: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  6056  04E5  01E8               	clrf	_setSw_Main$6227
  6057  04E6  0AE8               	incf	_setSw_Main$6227,f
  6058  04E7  1C0C               	btfss	12,0	;volatile
  6059  04E8  188D               	btfsc	13,1	;volatile
  6060  04E9  2CEB               	goto	l7763
  6061  04EA  01E8               	clrf	_setSw_Main$6227
  6062  04EB                     l7763:	
  6063  04EB  087A               	movf	_Sw,w
  6064  04EC  0086               	movwf	6
  6065  04ED  3001               	movlw	1	; select bank2/3
  6066  04EE  0087               	movwf	7
  6067  04EF  0868               	movf	_setSw_Main$6227,w
  6068  04F0                     L2:	
  6069  04F0  1081               	bcf	1,1
  6070  04F1  1D03               	skipz
  6071  04F2  1481               	bsf	1,1
  6072  04F3                     l7765:	
  6073                           
  6074                           ;Switch_B1.c: 129: }
  6075                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  6076  04F3  087A               	movf	_Sw,w
  6077  04F4  0086               	movwf	6
  6078  04F5  3001               	movlw	1	; select bank2/3
  6079  04F6  0087               	movwf	7
  6080  04F7  1C81               	btfss	1,1
  6081  04F8  2DC9               	goto	l7813
  6082                           
  6083                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  6084  04F9  087A               	movf	_Sw,w
  6085  04FA  0086               	movwf	6
  6086  04FB  3001               	movlw	1	; select bank2/3
  6087  04FC  0087               	movwf	7
  6088  04FD  1901               	btfsc	1,2
  6089  04FE  2D20               	goto	l7779
  6090                           
  6091                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  6092  04FF  3001               	movlw	1
  6093  0500  00E5               	movwf	??_setSw_Main
  6094  0501  087A               	movf	_Sw,w
  6095  0502  3E02               	addlw	2
  6096  0503  0086               	movwf	6
  6097  0504  3001               	movlw	1	; select bank2/3
  6098  0505  0087               	movwf	7
  6099  0506  0865               	movf	??_setSw_Main,w
  6100  0507  0781               	addwf	1,f
  6101                           
  6102                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  6103  0508  087A               	movf	_Sw,w
  6104  0509  3E02               	addlw	2
  6105  050A  0086               	movwf	6
  6106  050B  3001               	movlw	1	; select bank2/3
  6107  050C  0087               	movwf	7
  6108  050D  3005               	movlw	5
  6109  050E  0201               	subwf	1,w
  6110  050F  1C03               	skipc
  6111  0510  0008               	return
  6112                           
  6113                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  6114  0511  087A               	movf	_Sw,w
  6115  0512  3E02               	addlw	2
  6116  0513  0086               	movwf	6
  6117  0514  3001               	movlw	1	; select bank2/3
  6118  0515  0087               	movwf	7
  6119  0516  0181               	clrf	1
  6120                           
  6121                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  6122  0517  087A               	movf	_Sw,w
  6123  0518  0086               	movwf	6
  6124  0519  3001               	movlw	1	; select bank2/3
  6125  051A  0087               	movwf	7
  6126  051B  1501               	bsf	1,2
  6127                           
  6128                           ;Switch_B1.c: 142: Sw_DimmerOnFunc(sw);
  6129  051C  0869               	movf	setSw_Main@sw,w
  6130  051D  3195  2594         	fcall	_Sw_DimmerOnFunc
  6131                           
  6132                           ;Switch_B1.c: 144: }
  6133                           ;Switch_B1.c: 145: } else {
  6134  051F  0008               	return
  6135  0520                     l7779:	
  6136                           
  6137                           ;Switch_B1.c: 146: if (Sw->Hold1 == 0) {
  6138  0520  087A               	movf	_Sw,w
  6139  0521  0086               	movwf	6
  6140  0522  3001               	movlw	1	; select bank2/3
  6141  0523  0087               	movwf	7
  6142  0524  1981               	btfsc	1,3
  6143  0525  2D52               	goto	l7789
  6144                           
  6145                           ;Switch_B1.c: 147: Sw->Hold1Time++;
  6146  0526  087A               	movf	_Sw,w
  6147  0527  3E03               	addlw	3
  6148  0528  0086               	movwf	6
  6149  0529  3001               	movlw	1	; select bank2/3
  6150  052A  0087               	movwf	7
  6151  052B  3001               	movlw	1
  6152  052C  0781               	addwf	1,f
  6153  052D  3141               	addfsr 1,1
  6154  052E  1803               	skipnc
  6155  052F  0A81               	incf	1,f
  6156                           
  6157                           ;Switch_B1.c: 148: if (Sw->Hold1Time >= 150) {
  6158  0530  087A               	movf	_Sw,w
  6159  0531  3E03               	addlw	3
  6160  0532  0086               	movwf	6
  6161  0533  3001               	movlw	1	; select bank2/3
  6162  0534  0087               	movwf	7
  6163  0535  3F40               	moviw [0]fsr1
  6164  0536  0020               	movlb	0	; select bank0
  6165  0537  00E5               	movwf	??_setSw_Main
  6166  0538  3F41               	moviw [1]fsr1
  6167  0539  00E6               	movwf	??_setSw_Main+1
  6168  053A  3000               	movlw	0
  6169  053B  0266               	subwf	??_setSw_Main+1,w
  6170  053C  3096               	movlw	150
  6171  053D  1903               	skipnz
  6172  053E  0265               	subwf	??_setSw_Main,w
  6173  053F  1C03               	skipc
  6174  0540  0008               	return
  6175                           
  6176                           ;Switch_B1.c: 149: Sw->Hold1Time = 0;
  6177  0541  087A               	movf	_Sw,w
  6178  0542  3E03               	addlw	3
  6179  0543  0086               	movwf	6
  6180  0544  3001               	movlw	1	; select bank2/3
  6181  0545  0087               	movwf	7
  6182  0546  3000               	movlw	0
  6183  0547  3FC0               	movwi [0]fsr1
  6184  0548  3FC1               	movwi [1]fsr1
  6185                           
  6186                           ;Switch_B1.c: 150: Sw->Hold1 = 1;
  6187  0549  087A               	movf	_Sw,w
  6188  054A  0086               	movwf	6
  6189  054B  3001               	movlw	1	; select bank2/3
  6190  054C  0087               	movwf	7
  6191  054D  1581               	bsf	1,3
  6192                           
  6193                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  6194  054E  0869               	movf	setSw_Main@sw,w
  6195  054F  3190  2069         	fcall	_Sw_DimmerAdjFunc
  6196                           
  6197                           ;Switch_B1.c: 156: }
  6198                           ;Switch_B1.c: 157: } else {
  6199  0551  0008               	return
  6200  0552                     l7789:	
  6201                           
  6202                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  6203  0552  087A               	movf	_Sw,w
  6204  0553  0086               	movwf	6
  6205  0554  3001               	movlw	1	; select bank2/3
  6206  0555  0087               	movwf	7
  6207  0556  1A01               	btfsc	1,4
  6208  0557  2D96               	goto	l7803
  6209                           
  6210                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  6211  0558  087A               	movf	_Sw,w
  6212  0559  3E05               	addlw	5
  6213  055A  0086               	movwf	6
  6214  055B  3001               	movlw	1	; select bank2/3
  6215  055C  0087               	movwf	7
  6216  055D  3001               	movlw	1
  6217  055E  0781               	addwf	1,f
  6218  055F  3141               	addfsr 1,1
  6219  0560  1803               	skipnc
  6220  0561  0A81               	incf	1,f
  6221                           
  6222                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  6223  0562  087A               	movf	_Sw,w
  6224  0563  3E05               	addlw	5
  6225  0564  0086               	movwf	6
  6226  0565  3001               	movlw	1	; select bank2/3
  6227  0566  0087               	movwf	7
  6228  0567  3F40               	moviw [0]fsr1
  6229  0568  0020               	movlb	0	; select bank0
  6230  0569  00E5               	movwf	??_setSw_Main
  6231  056A  3F41               	moviw [1]fsr1
  6232  056B  00E6               	movwf	??_setSw_Main+1
  6233  056C  3000               	movlw	0
  6234  056D  0266               	subwf	??_setSw_Main+1,w
  6235  056E  3096               	movlw	150
  6236  056F  1903               	skipnz
  6237  0570  0265               	subwf	??_setSw_Main,w
  6238  0571  1C03               	skipc
  6239  0572  0008               	return
  6240                           
  6241                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  6242  0573  087A               	movf	_Sw,w
  6243  0574  3E05               	addlw	5
  6244  0575  0086               	movwf	6
  6245  0576  3001               	movlw	1	; select bank2/3
  6246  0577  0087               	movwf	7
  6247  0578  3000               	movlw	0
  6248  0579  3FC0               	movwi [0]fsr1
  6249  057A  3FC1               	movwi [1]fsr1
  6250                           
  6251                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  6252  057B  087A               	movf	_Sw,w
  6253  057C  0086               	movwf	6
  6254  057D  3001               	movlw	1	; select bank2/3
  6255  057E  0087               	movwf	7
  6256  057F  1601               	bsf	1,4
  6257                           
  6258                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  6259  0580  01A2               	clrf	setRF_Learn@command
  6260  0581  0AA2               	incf	setRF_Learn@command,f
  6261  0582  3001               	movlw	1
  6262  0583  3198  2066  3184   	fcall	_setRF_Learn
  6263                           
  6264                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  6265  0586  0021               	movlb	1	; select bank1
  6266  0587  086D               	movf	_myMain^(0+128),w
  6267  0588  0086               	movwf	6
  6268  0589  3001               	movlw	1	; select bank2/3
  6269  058A  0087               	movwf	7
  6270  058B  1F81               	btfss	1,7
  6271  058C  0008               	return
  6272                           
  6273                           ;Switch_B1.c: 168: setBuz(2, 100);
  6274  058D  3064               	movlw	100
  6275  058E  0020               	movlb	0	; select bank0
  6276  058F  00A9               	movwf	setBuz@time
  6277  0590  3000               	movlw	0
  6278  0591  00AA               	movwf	setBuz@time+1
  6279  0592  3002               	movlw	2
  6280  0593  3188  2079         	fcall	_setBuz
  6281                           
  6282                           ;Switch_B1.c: 169: }
  6283                           ;Switch_B1.c: 171: }
  6284                           ;Switch_B1.c: 172: } else {
  6285  0595  0008               	return
  6286  0596                     l7803:	
  6287                           
  6288                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  6289  0596  087A               	movf	_Sw,w
  6290  0597  0086               	movwf	6
  6291  0598  3001               	movlw	1	; select bank2/3
  6292  0599  0087               	movwf	7
  6293  059A  1A81               	btfsc	1,5
  6294  059B  0008               	return
  6295                           
  6296                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  6297  059C  087A               	movf	_Sw,w
  6298  059D  3E07               	addlw	7
  6299  059E  0086               	movwf	6
  6300  059F  3001               	movlw	1	; select bank2/3
  6301  05A0  0087               	movwf	7
  6302  05A1  3001               	movlw	1
  6303  05A2  0781               	addwf	1,f
  6304  05A3  3141               	addfsr 1,1
  6305  05A4  1803               	skipnc
  6306  05A5  0A81               	incf	1,f
  6307                           
  6308                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  6309  05A6  087A               	movf	_Sw,w
  6310  05A7  3E07               	addlw	7
  6311  05A8  0086               	movwf	6
  6312  05A9  3001               	movlw	1	; select bank2/3
  6313  05AA  0087               	movwf	7
  6314  05AB  3F40               	moviw [0]fsr1
  6315  05AC  0020               	movlb	0	; select bank0
  6316  05AD  00E5               	movwf	??_setSw_Main
  6317  05AE  3F41               	moviw [1]fsr1
  6318  05AF  00E6               	movwf	??_setSw_Main+1
  6319  05B0  3001               	movlw	1
  6320  05B1  0266               	subwf	??_setSw_Main+1,w
  6321  05B2  302C               	movlw	44
  6322  05B3  1903               	skipnz
  6323  05B4  0265               	subwf	??_setSw_Main,w
  6324  05B5  1C03               	skipc
  6325  05B6  0008               	return
  6326                           
  6327                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  6328  05B7  087A               	movf	_Sw,w
  6329  05B8  3E07               	addlw	7
  6330  05B9  0086               	movwf	6
  6331  05BA  3001               	movlw	1	; select bank2/3
  6332  05BB  0087               	movwf	7
  6333  05BC  3000               	movlw	0
  6334  05BD  3FC0               	movwi [0]fsr1
  6335  05BE  3FC1               	movwi [1]fsr1
  6336                           
  6337                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  6338  05BF  087A               	movf	_Sw,w
  6339  05C0  0086               	movwf	6
  6340  05C1  3001               	movlw	1	; select bank2/3
  6341  05C2  0087               	movwf	7
  6342  05C3  1681               	bsf	1,5
  6343                           
  6344                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  6345  05C4  01A2               	clrf	setRF_Learn@command
  6346  05C5  3001               	movlw	1
  6347  05C6  3198  2066         	fcall	_setRF_Learn
  6348                           
  6349                           ;Switch_B1.c: 183: }
  6350                           ;Switch_B1.c: 184: }
  6351                           ;Switch_B1.c: 185: }
  6352                           ;Switch_B1.c: 186: }
  6353                           ;Switch_B1.c: 187: }
  6354                           ;Switch_B1.c: 188: } else {
  6355  05C8  0008               	return
  6356  05C9                     l7813:	
  6357                           
  6358                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  6359  05C9  087A               	movf	_Sw,w
  6360  05CA  0086               	movwf	6
  6361  05CB  3001               	movlw	1	; select bank2/3
  6362  05CC  0087               	movwf	7
  6363  05CD  1D01               	btfss	1,2
  6364  05CE  0008               	return
  6365                           
  6366                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  6367  05CF  3001               	movlw	1
  6368  05D0  0020               	movlb	0	; select bank0
  6369  05D1  00E5               	movwf	??_setSw_Main
  6370  05D2  087A               	movf	_Sw,w
  6371  05D3  3E02               	addlw	2
  6372  05D4  0086               	movwf	6
  6373  05D5  3001               	movlw	1	; select bank2/3
  6374  05D6  0087               	movwf	7
  6375  05D7  0865               	movf	??_setSw_Main,w
  6376  05D8  0781               	addwf	1,f
  6377                           
  6378                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  6379  05D9  087A               	movf	_Sw,w
  6380  05DA  3E02               	addlw	2
  6381  05DB  0086               	movwf	6
  6382  05DC  3001               	movlw	1	; select bank2/3
  6383  05DD  0087               	movwf	7
  6384  05DE  3005               	movlw	5
  6385  05DF  0201               	subwf	1,w
  6386  05E0  1C03               	skipc
  6387  05E1  0008               	return
  6388                           
  6389                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  6390  05E2  087A               	movf	_Sw,w
  6391  05E3  3E02               	addlw	2
  6392  05E4  0086               	movwf	6
  6393  05E5  3001               	movlw	1	; select bank2/3
  6394  05E6  0087               	movwf	7
  6395  05E7  0181               	clrf	1
  6396                           
  6397                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  6398  05E8  087A               	movf	_Sw,w
  6399  05E9  0086               	movwf	6
  6400  05EA  3001               	movlw	1	; select bank2/3
  6401  05EB  0087               	movwf	7
  6402  05EC  1101               	bcf	1,2
  6403                           
  6404                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  6405  05ED  087A               	movf	_Sw,w
  6406  05EE  3E03               	addlw	3
  6407  05EF  0086               	movwf	6
  6408  05F0  3001               	movlw	1	; select bank2/3
  6409  05F1  0087               	movwf	7
  6410  05F2  3000               	movlw	0
  6411  05F3  3FC0               	movwi [0]fsr1
  6412  05F4  3FC1               	movwi [1]fsr1
  6413                           
  6414                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  6415  05F5  087A               	movf	_Sw,w
  6416  05F6  0086               	movwf	6
  6417  05F7  3001               	movlw	1	; select bank2/3
  6418  05F8  0087               	movwf	7
  6419  05F9  1181               	bcf	1,3
  6420                           
  6421                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  6422  05FA  087A               	movf	_Sw,w
  6423  05FB  3E05               	addlw	5
  6424  05FC  0086               	movwf	6
  6425  05FD  3001               	movlw	1	; select bank2/3
  6426  05FE  0087               	movwf	7
  6427  05FF  3000               	movlw	0
  6428  0600  3FC0               	movwi [0]fsr1
  6429  0601  3FC1               	movwi [1]fsr1
  6430                           
  6431                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  6432  0602  087A               	movf	_Sw,w
  6433  0603  0086               	movwf	6
  6434  0604  3001               	movlw	1	; select bank2/3
  6435  0605  0087               	movwf	7
  6436  0606  1201               	bcf	1,4
  6437                           
  6438                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  6439  0607  087A               	movf	_Sw,w
  6440  0608  3E07               	addlw	7
  6441  0609  0086               	movwf	6
  6442  060A  3001               	movlw	1	; select bank2/3
  6443  060B  0087               	movwf	7
  6444  060C  3000               	movlw	0
  6445  060D  3FC0               	movwi [0]fsr1
  6446  060E  3FC1               	movwi [1]fsr1
  6447                           
  6448                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  6449  060F  087A               	movf	_Sw,w
  6450  0610  0086               	movwf	6
  6451  0611  3001               	movlw	1	; select bank2/3
  6452  0612  0087               	movwf	7
  6453  0613  1281               	bcf	1,5
  6454                           
  6455                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  6456  0614  0869               	movf	setSw_Main@sw,w
  6457  0615  3195  2523  3184   	fcall	_Sw_DimmerOffFunc
  6458                           
  6459                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  6460  0618  0020               	movlb	0	; select bank0
  6461  0619  01A2               	clrf	setRF_Learn@command
  6462  061A  3001               	movlw	1
  6463  061B  3198  2066         	fcall	_setRF_Learn
  6464  061D  0008               	return
  6465  061E                     __end_of_setSw_Main:	
  6466                           
  6467                           	psect	text18
  6468  1866                     __ptext18:	
  6469 ;; *************** function _setRF_Learn *****************
  6470 ;; Defined at:
  6471 ;;		line 33 in file "../src/RF_Control_B1.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  rf              1    wreg     unsigned char 
  6474 ;;  command         1    2[BANK0 ] unsigned char 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  rf              1    3[BANK0 ] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;		None               void
  6479 ;; Registers used:
  6480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6486 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;Total ram usage:        2 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    6
  6493 ;; This function calls:
  6494 ;;		_RfPointSelect
  6495 ;; This function is called by:
  6496 ;;		_setSw_Main
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _setRF_Learn
  6502  1866                     _setRF_Learn:	
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6506                           ;setRF_Learn@rf stored from wreg
  6507  1866  0020               	movlb	0	; select bank0
  6508  1867  00A3               	movwf	setRF_Learn@rf
  6509                           
  6510                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  6511  1868  0823               	movf	setRF_Learn@rf,w
  6512  1869  31A6  26DF         	fcall	_RfPointSelect
  6513                           
  6514                           ;RF_Control_B1.c: 35: RF->Learn = command;
  6515  186B  0021               	movlb	1	; select bank1
  6516  186C  083F               	movf	_RF^(0+128),w
  6517  186D  0086               	movwf	6
  6518  186E  0187               	clrf	7
  6519  186F  0020               	movlb	0	; select bank0
  6520  1870  0822               	movf	setRF_Learn@command,w
  6521  1871  1301               	bcf	1,6
  6522  1872  1D03               	skipz
  6523  1873  1701               	bsf	1,6
  6524  1874  0008               	return
  6525  1875                     __end_of_setRF_Learn:	
  6526                           
  6527                           	psect	text19
  6528  1594                     __ptext19:	
  6529 ;; *************** function _Sw_DimmerOnFunc *****************
  6530 ;; Defined at:
  6531 ;;		line 213 in file "../src/Switch_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  sw              1    wreg     unsigned char 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  sw              1   67[BANK0 ] unsigned char 
  6536 ;;  Idle            1   66[BANK0 ] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;		None               void
  6539 ;; Registers used:
  6540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:        2 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    9
  6553 ;; This function calls:
  6554 ;;		_setBuz
  6555 ;;		_setDimmerLights_Switch
  6556 ;;		_setDimmerLights_Trigger
  6557 ;;		_setRFSW_Status
  6558 ;;		_setRF_DimmerLights
  6559 ;;		_setTxData
  6560 ;; This function is called by:
  6561 ;;		_setSw_Main
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _Sw_DimmerOnFunc
  6567  1594                     _Sw_DimmerOnFunc:	
  6568                           
  6569                           ;incstack = 0
  6570                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6571                           ;Sw_DimmerOnFunc@sw stored from wreg
  6572  1594  0020               	movlb	0	; select bank0
  6573  1595  00E3               	movwf	Sw_DimmerOnFunc@sw
  6574                           
  6575                           ;Switch_B1.c: 214: char Idle = 1;
  6576  1596  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6577  1597  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6578                           
  6579                           ;Switch_B1.c: 228: if (sw == 1) {
  6580  1598  0863               	movf	Sw_DimmerOnFunc@sw,w
  6581  1599  3A01               	xorlw	1
  6582  159A  1D03               	skipz
  6583  159B  2D9F               	goto	l7057
  6584                           
  6585                           ;Switch_B1.c: 229: Idle = (DimmerLights22->AdjGo == 1) ? 0 : 1;
  6586  159C  0021               	movlb	1	; select bank1
  6587  159D  083C               	movf	_DimmerLights22^(0+128),w
  6588  159E  2DA5               	goto	L3
  6589  159F                     l7057:	
  6590                           ;Switch_B1.c: 230: } else if (sw == 2) {
  6591                           
  6592  159F  0863               	movf	Sw_DimmerOnFunc@sw,w
  6593  15A0  3A02               	xorlw	2
  6594  15A1  1D03               	skipz
  6595  15A2  2DB1               	goto	l7061
  6596                           
  6597                           ;Switch_B1.c: 231: Idle = (DimmerLights11->AdjGo == 1) ? 0 : 1;
  6598  15A3  0021               	movlb	1	; select bank1
  6599  15A4  083B               	movf	_DimmerLights11^(0+128),w
  6600  15A5                     L3:	
  6601  15A5  3E08               	addlw	8
  6602  15A6  0086               	movwf	6
  6603  15A7  3001               	movlw	1	; select bank2/3
  6604  15A8  0087               	movwf	7
  6605  15A9  1003               	clrc
  6606  15AA  1D81               	btfss	1,3
  6607  15AB  1403               	setc
  6608  15AC  3000               	movlw	0
  6609  15AD  1803               	btfsc	3,0
  6610  15AE  3001               	movlw	1
  6611  15AF  0020               	movlb	0	; select bank0
  6612  15B0  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6613  15B1                     l7061:	
  6614                           
  6615                           ;Switch_B1.c: 232: }
  6616                           ;Switch_B1.c: 235: if (Idle) {
  6617  15B1  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6618  15B2  1903               	btfsc	3,2
  6619  15B3  0008               	return
  6620                           
  6621                           ;Switch_B1.c: 236: Sw->Flag = 1;
  6622  15B4  087A               	movf	_Sw,w
  6623  15B5  0086               	movwf	6
  6624  15B6  3001               	movlw	1	; select bank2/3
  6625  15B7  0087               	movwf	7
  6626  15B8  1781               	bsf	1,7
  6627                           
  6628                           ;Switch_B1.c: 237: setBuz(1, 100);
  6629  15B9  3064               	movlw	100
  6630  15BA  00A9               	movwf	setBuz@time
  6631  15BB  3000               	movlw	0
  6632  15BC  00AA               	movwf	setBuz@time+1
  6633  15BD  3001               	movlw	1
  6634  15BE  3188  2079  3195   	fcall	_setBuz
  6635                           
  6636                           ;Switch_B1.c: 238: if (!Sw->Status) {
  6637  15C1  087A               	movf	_Sw,w
  6638  15C2  0086               	movwf	6
  6639  15C3  3001               	movlw	1	; select bank2/3
  6640  15C4  0087               	movwf	7
  6641  15C5  1B01               	btfsc	1,6
  6642  15C6  2DF3               	goto	l7081
  6643                           
  6644                           ;Switch_B1.c: 239: Sw->Status = 1;
  6645  15C7  087A               	movf	_Sw,w
  6646  15C8  0086               	movwf	6
  6647  15C9  3001               	movlw	1	; select bank2/3
  6648  15CA  0087               	movwf	7
  6649  15CB  1701               	bsf	1,6
  6650                           
  6651                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  6652  15CC  0020               	movlb	0	; select bank0
  6653  15CD  01A2               	clrf	setRFSW_Status@command
  6654  15CE  0AA2               	incf	setRFSW_Status@command,f
  6655  15CF  0863               	movf	Sw_DimmerOnFunc@sw,w
  6656  15D0  31A6  26C1  3195   	fcall	_setRFSW_Status
  6657                           
  6658                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  6659  15D3  0020               	movlb	0	; select bank0
  6660  15D4  01A2               	clrf	setDimmerLights_Trigger@command
  6661  15D5  0AA2               	incf	setDimmerLights_Trigger@command,f
  6662  15D6  0863               	movf	Sw_DimmerOnFunc@sw,w
  6663  15D7  31A7  270E  3195   	fcall	_setDimmerLights_Trigger
  6664                           
  6665                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  6666  15DA  0020               	movlb	0	; select bank0
  6667  15DB  01A2               	clrf	setDimmerLights_Switch@command
  6668  15DC  0AA2               	incf	setDimmerLights_Switch@command,f
  6669  15DD  0863               	movf	Sw_DimmerOnFunc@sw,w
  6670  15DE  31A6  26FE  3195   	fcall	_setDimmerLights_Switch
  6671                           
  6672                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  6673  15E1  087A               	movf	_Sw,w
  6674  15E2  0086               	movwf	6
  6675  15E3  3001               	movlw	1	; select bank2/3
  6676  15E4  0087               	movwf	7
  6677  15E5  3000               	movlw	0
  6678  15E6  1B01               	btfsc	1,6
  6679  15E7  3001               	movlw	1
  6680  15E8  0020               	movlb	0	; select bank0
  6681  15E9  00DD               	movwf	setRF_DimmerLights@on
  6682  15EA  0863               	movf	Sw_DimmerOnFunc@sw,w
  6683  15EB  3194  2449  3195   	fcall	_setRF_DimmerLights
  6684                           
  6685                           ;Switch_B1.c: 246: setTxData(1);
  6686  15EE  3001               	movlw	1
  6687  15EF  318B  2343         	fcall	_setTxData
  6688                           
  6689                           ;Switch_B1.c: 248: } else {
  6690  15F1  0020               	movlb	0	; select bank0
  6691  15F2  0008               	return
  6692  15F3                     l7081:	
  6693                           
  6694                           ;Switch_B1.c: 249: Sw->Status = 0;
  6695  15F3  087A               	movf	_Sw,w
  6696  15F4  0086               	movwf	6
  6697  15F5  3001               	movlw	1	; select bank2/3
  6698  15F6  0087               	movwf	7
  6699  15F7  1301               	bcf	1,6
  6700                           
  6701                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  6702  15F8  087A               	movf	_Sw,w
  6703  15F9  0086               	movwf	6
  6704  15FA  3001               	movlw	1	; select bank2/3
  6705  15FB  0087               	movwf	7
  6706  15FC  3000               	movlw	0
  6707  15FD  1B01               	btfsc	1,6
  6708  15FE  3001               	movlw	1
  6709  15FF  0020               	movlb	0	; select bank0
  6710  1600  00A2               	movwf	setRFSW_Status@command
  6711  1601  0863               	movf	Sw_DimmerOnFunc@sw,w
  6712  1602  31A6  26C1         	fcall	_setRFSW_Status
  6713  1604  0020               	movlb	0	; select bank0
  6714  1605  0008               	return
  6715  1606                     __end_of_Sw_DimmerOnFunc:	
  6716                           
  6717                           	psect	text20
  6718  1523                     __ptext20:	
  6719 ;; *************** function _Sw_DimmerOffFunc *****************
  6720 ;; Defined at:
  6721 ;;		line 256 in file "../src/Switch_B1.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  sw              1    wreg     unsigned char 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;  sw              1   68[BANK0 ] unsigned char 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;		None               void
  6728 ;; Registers used:
  6729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;Total ram usage:        3 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    9
  6742 ;; This function calls:
  6743 ;;		_setDelayOff_GO
  6744 ;;		_setDimmerLights_AdjGo
  6745 ;;		_setDimmerLights_Switch
  6746 ;;		_setDimmerLights_Trigger
  6747 ;;		_setDimmerLights_TriggerAdj
  6748 ;;		_setRF_DimmerLights
  6749 ;;		_setTxData
  6750 ;; This function is called by:
  6751 ;;		_setSw_Main
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _Sw_DimmerOffFunc
  6757  1523                     _Sw_DimmerOffFunc:	
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6761                           ;Sw_DimmerOffFunc@sw stored from wreg
  6762  1523  0020               	movlb	0	; select bank0
  6763  1524  00E4               	movwf	Sw_DimmerOffFunc@sw
  6764                           
  6765                           ;Switch_B1.c: 257: if (Sw->Flag) {
  6766  1525  087A               	movf	_Sw,w
  6767  1526  0086               	movwf	6
  6768  1527  3001               	movlw	1	; select bank2/3
  6769  1528  0087               	movwf	7
  6770  1529  1F81               	btfss	1,7
  6771  152A  0008               	return
  6772                           
  6773                           ;Switch_B1.c: 258: Sw->Flag = 0;
  6774  152B  087A               	movf	_Sw,w
  6775  152C  0086               	movwf	6
  6776  152D  3001               	movlw	1	; select bank2/3
  6777  152E  0087               	movwf	7
  6778  152F  1381               	bcf	1,7
  6779                           
  6780                           ;Switch_B1.c: 259: if (Sw->Status) {
  6781  1530  087A               	movf	_Sw,w
  6782  1531  0086               	movwf	6
  6783  1532  3001               	movlw	1	; select bank2/3
  6784  1533  0087               	movwf	7
  6785  1534  1F01               	btfss	1,6
  6786  1535  2D6F               	goto	l7125
  6787                           
  6788                           ;Switch_B1.c: 260: if (Sw->Adj) {
  6789  1536  0A7A               	incf	_Sw,w
  6790  1537  0086               	movwf	6
  6791  1538  3001               	movlw	1	; select bank2/3
  6792  1539  0087               	movwf	7
  6793  153A  1C01               	btfss	1,0
  6794  153B  0008               	return
  6795                           
  6796                           ;Switch_B1.c: 261: Sw->Adj = 0;
  6797  153C  0A7A               	incf	_Sw,w
  6798  153D  0086               	movwf	6
  6799  153E  3001               	movlw	1	; select bank2/3
  6800  153F  0087               	movwf	7
  6801  1540  1001               	bcf	1,0
  6802                           
  6803                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  6804  1541  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6805  1542  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6806  1543  0864               	movf	Sw_DimmerOffFunc@sw,w
  6807  1544  31A7  273E  3195   	fcall	_setDimmerLights_TriggerAdj
  6808                           
  6809                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  6810  1547  0020               	movlb	0	; select bank0
  6811  1548  01A2               	clrf	setDimmerLights_AdjGo@command
  6812  1549  0864               	movf	Sw_DimmerOffFunc@sw,w
  6813  154A  31A7  272E  3195   	fcall	_setDimmerLights_AdjGo
  6814                           
  6815                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  6816  154D  0020               	movlb	0	; select bank0
  6817  154E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6818  154F  3E1A               	addlw	26
  6819  1550  077D               	addwf	_product,w
  6820  1551  00E2               	movwf	??_Sw_DimmerOffFunc
  6821  1552  0862               	movf	??_Sw_DimmerOffFunc,w
  6822  1553  0086               	movwf	6
  6823  1554  3001               	movlw	1	; select bank2/3
  6824  1555  0087               	movwf	7
  6825  1556  0801               	movf	1,w
  6826  1557  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6827  1558  087D               	movf	_product,w
  6828  1559  3E11               	addlw	17
  6829  155A  0086               	movwf	6
  6830  155B  3001               	movlw	1	; select bank2/3
  6831  155C  0087               	movwf	7
  6832  155D  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6833  155E  0081               	movwf	1
  6834                           
  6835                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  6836  155F  087A               	movf	_Sw,w
  6837  1560  0086               	movwf	6
  6838  1561  3001               	movlw	1	; select bank2/3
  6839  1562  0087               	movwf	7
  6840  1563  3000               	movlw	0
  6841  1564  1B01               	btfsc	1,6
  6842  1565  3001               	movlw	1
  6843  1566  00DD               	movwf	setRF_DimmerLights@on
  6844  1567  0864               	movf	Sw_DimmerOffFunc@sw,w
  6845  1568  3194  2449  3195   	fcall	_setRF_DimmerLights
  6846                           
  6847                           ;Switch_B1.c: 267: setTxData(1);
  6848  156B  3001               	movlw	1
  6849  156C  318B  2343         	fcall	_setTxData
  6850                           
  6851                           ;Switch_B1.c: 269: }
  6852                           ;Switch_B1.c: 270: } else {
  6853  156E  0008               	return
  6854  156F                     l7125:	
  6855                           
  6856                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  6857  156F  0020               	movlb	0	; select bank0
  6858  1570  01A2               	clrf	setDimmerLights_Trigger@command
  6859  1571  0AA2               	incf	setDimmerLights_Trigger@command,f
  6860  1572  0864               	movf	Sw_DimmerOffFunc@sw,w
  6861  1573  31A7  270E  3195   	fcall	_setDimmerLights_Trigger
  6862                           
  6863                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  6864  1576  0020               	movlb	0	; select bank0
  6865  1577  01A2               	clrf	setDimmerLights_Switch@command
  6866  1578  0864               	movf	Sw_DimmerOffFunc@sw,w
  6867  1579  31A6  26FE  3195   	fcall	_setDimmerLights_Switch
  6868                           
  6869                           ;Switch_B1.c: 274: setDelayOff_GO(sw, 0, 0);
  6870  157C  0020               	movlb	0	; select bank0
  6871  157D  01A3               	clrf	setDelayOff_GO@command
  6872  157E  01A4               	clrf	setDelayOff_GO@value
  6873  157F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6874  1580  3192  2203  3195   	fcall	_setDelayOff_GO
  6875                           
  6876                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  6877  1583  087A               	movf	_Sw,w
  6878  1584  0086               	movwf	6
  6879  1585  3001               	movlw	1	; select bank2/3
  6880  1586  0087               	movwf	7
  6881  1587  3000               	movlw	0
  6882  1588  1B01               	btfsc	1,6
  6883  1589  3001               	movlw	1
  6884  158A  0020               	movlb	0	; select bank0
  6885  158B  00DD               	movwf	setRF_DimmerLights@on
  6886  158C  0864               	movf	Sw_DimmerOffFunc@sw,w
  6887  158D  3194  2449  3195   	fcall	_setRF_DimmerLights
  6888                           
  6889                           ;Switch_B1.c: 276: setTxData(1);
  6890  1590  3001               	movlw	1
  6891  1591  318B  2343         	fcall	_setTxData
  6892  1593  0008               	return
  6893  1594                     __end_of_Sw_DimmerOffFunc:	
  6894                           
  6895                           	psect	text21
  6896  1069                     __ptext21:	
  6897 ;; *************** function _Sw_DimmerAdjFunc *****************
  6898 ;; Defined at:
  6899 ;;		line 283 in file "../src/Switch_B1.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;  sw              1    wreg     unsigned char 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  sw              1    5[BANK0 ] unsigned char 
  6904 ;;  Idle            1    4[BANK0 ] unsigned char 
  6905 ;; Return value:  Size  Location     Type
  6906 ;;		None               void
  6907 ;; Registers used:
  6908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;Total ram usage:        2 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    7
  6921 ;; This function calls:
  6922 ;;		_setDimmerLights_AdjGo
  6923 ;;		_setDimmerLights_TriggerAdj
  6924 ;;		_setRFSW_Status
  6925 ;; This function is called by:
  6926 ;;		_setSw_Main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _Sw_DimmerAdjFunc
  6932  1069                     _Sw_DimmerAdjFunc:	
  6933                           
  6934                           ;incstack = 0
  6935                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6936                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6937  1069  0020               	movlb	0	; select bank0
  6938  106A  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6939                           
  6940                           ;Switch_B1.c: 284: char Idle = 1;
  6941  106B  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6942  106C  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6943                           
  6944                           ;Switch_B1.c: 297: if (sw == 1) {
  6945  106D  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6946  106E  3A01               	xorlw	1
  6947  106F  1D03               	skipz
  6948  1070  287B               	goto	l7091
  6949                           
  6950                           ;Switch_B1.c: 298: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6951  1071  1003               	clrc
  6952  1072  0022               	movlb	2	; select bank2
  6953  1073  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  6954  1074  1403               	setc
  6955  1075  3000               	movlw	0
  6956  1076  1803               	btfsc	3,0
  6957  1077  3001               	movlw	1
  6958  1078  0020               	movlb	0	; select bank0
  6959  1079  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6960                           
  6961                           ;Switch_B1.c: 299: } else if (sw == 2) {
  6962  107A  2888               	goto	l7095
  6963  107B                     l7091:	
  6964  107B  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6965  107C  3A02               	xorlw	2
  6966  107D  1D03               	skipz
  6967  107E  2888               	goto	l7095
  6968                           
  6969                           ;Switch_B1.c: 300: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6970  107F  1003               	clrc
  6971  1080  0022               	movlb	2	; select bank2
  6972  1081  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  6973  1082  1403               	setc
  6974  1083  3000               	movlw	0
  6975  1084  1803               	btfsc	3,0
  6976  1085  3001               	movlw	1
  6977  1086  0020               	movlb	0	; select bank0
  6978  1087  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6979  1088                     l7095:	
  6980                           
  6981                           ;Switch_B1.c: 301: }
  6982                           ;Switch_B1.c: 304: if (Idle == 1) {
  6983  1088  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6984  1089  3A01               	xorlw	1
  6985  108A  1D03               	skipz
  6986  108B  0008               	return
  6987                           
  6988                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  6989  108C  087A               	movf	_Sw,w
  6990  108D  0086               	movwf	6
  6991  108E  3001               	movlw	1	; select bank2/3
  6992  108F  0087               	movwf	7
  6993  1090  1F81               	btfss	1,7
  6994  1091  0008               	return
  6995                           
  6996                           ;Switch_B1.c: 306: Sw->Adj = 1;
  6997  1092  0A7A               	incf	_Sw,w
  6998  1093  0086               	movwf	6
  6999  1094  3001               	movlw	1	; select bank2/3
  7000  1095  0087               	movwf	7
  7001  1096  1401               	bsf	1,0
  7002                           
  7003                           ;Switch_B1.c: 307: Sw->Status = 1;
  7004  1097  087A               	movf	_Sw,w
  7005  1098  0086               	movwf	6
  7006  1099  3001               	movlw	1	; select bank2/3
  7007  109A  0087               	movwf	7
  7008  109B  1701               	bsf	1,6
  7009                           
  7010                           ;Switch_B1.c: 308: setRFSW_Status(sw, 1);
  7011  109C  01A2               	clrf	setRFSW_Status@command
  7012  109D  0AA2               	incf	setRFSW_Status@command,f
  7013  109E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7014  109F  31A6  26C1  3190   	fcall	_setRFSW_Status
  7015                           
  7016                           ;Switch_B1.c: 310: setDimmerLights_TriggerAdj(sw, 1);
  7017  10A2  0020               	movlb	0	; select bank0
  7018  10A3  01A2               	clrf	setDimmerLights_TriggerAdj@command
  7019  10A4  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  7020  10A5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7021  10A6  31A7  273E  3190   	fcall	_setDimmerLights_TriggerAdj
  7022                           
  7023                           ;Switch_B1.c: 311: setDimmerLights_AdjGo(sw, 1);
  7024  10A9  0020               	movlb	0	; select bank0
  7025  10AA  01A2               	clrf	setDimmerLights_AdjGo@command
  7026  10AB  0AA2               	incf	setDimmerLights_AdjGo@command,f
  7027  10AC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7028  10AD  31A7  272E         	fcall	_setDimmerLights_AdjGo
  7029  10AF  0008               	return
  7030  10B0                     __end_of_Sw_DimmerAdjFunc:	
  7031                           
  7032                           	psect	text22
  7033  273E                     __ptext22:	
  7034 ;; *************** function _setDimmerLights_TriggerAdj *****************
  7035 ;; Defined at:
  7036 ;;		line 729 in file "../src/Dimmer_B1.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  lights          1    wreg     unsigned char 
  7039 ;;  command         1    2[BANK0 ] unsigned char 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  lights          1    3[BANK0 ] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;		None               void
  7044 ;; Registers used:
  7045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7051 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;Total ram usage:        2 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    6
  7058 ;; This function calls:
  7059 ;;		_DimmerLightsPointSelect
  7060 ;; This function is called by:
  7061 ;;		_Sw_DimmerOffFunc
  7062 ;;		_Sw_DimmerAdjFunc
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           
  7067                           ;psect for function _setDimmerLights_TriggerAdj
  7068  273E                     _setDimmerLights_TriggerAdj:	
  7069                           
  7070                           ;incstack = 0
  7071                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7072                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  7073  273E  0020               	movlb	0	; select bank0
  7074  273F  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  7075                           
  7076                           ;Dimmer_B1.c: 731: DimmerLightsPointSelect(lights);
  7077  2740  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  7078  2741  31A7  27C5         	fcall	_DimmerLightsPointSelect
  7079                           
  7080                           ;Dimmer_B1.c: 732: DimmerLights->TriggerAdj = command;
  7081  2743  0878               	movf	_DimmerLights,w
  7082  2744  3E08               	addlw	8
  7083  2745  0086               	movwf	6
  7084  2746  3001               	movlw	1	; select bank2/3
  7085  2747  0087               	movwf	7
  7086  2748  0020               	movlb	0	; select bank0
  7087  2749  0822               	movf	setDimmerLights_TriggerAdj@command,w
  7088  274A  1201               	bcf	1,4
  7089  274B  1D03               	skipz
  7090  274C  1601               	bsf	1,4
  7091  274D  0008               	return
  7092  274E                     __end_of_setDimmerLights_TriggerAdj:	
  7093                           
  7094                           	psect	text23
  7095  272E                     __ptext23:	
  7096 ;; *************** function _setDimmerLights_AdjGo *****************
  7097 ;; Defined at:
  7098 ;;		line 717 in file "../src/Dimmer_B1.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  lights          1    wreg     unsigned char 
  7101 ;;  command         1    2[BANK0 ] unsigned char 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  lights          1    3[BANK0 ] unsigned char 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;		None               void
  7106 ;; Registers used:
  7107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7113 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;Total ram usage:        2 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    6
  7120 ;; This function calls:
  7121 ;;		_DimmerLightsPointSelect
  7122 ;; This function is called by:
  7123 ;;		_Sw_DimmerOffFunc
  7124 ;;		_Sw_DimmerAdjFunc
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _setDimmerLights_AdjGo
  7130  272E                     _setDimmerLights_AdjGo:	
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7134                           ;setDimmerLights_AdjGo@lights stored from wreg
  7135  272E  0020               	movlb	0	; select bank0
  7136  272F  00A3               	movwf	setDimmerLights_AdjGo@lights
  7137                           
  7138                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
  7139  2730  0823               	movf	setDimmerLights_AdjGo@lights,w
  7140  2731  31A7  27C5         	fcall	_DimmerLightsPointSelect
  7141                           
  7142                           ;Dimmer_B1.c: 720: DimmerLights->AdjGo = command;
  7143  2733  0878               	movf	_DimmerLights,w
  7144  2734  3E08               	addlw	8
  7145  2735  0086               	movwf	6
  7146  2736  3001               	movlw	1	; select bank2/3
  7147  2737  0087               	movwf	7
  7148  2738  0020               	movlb	0	; select bank0
  7149  2739  0822               	movf	setDimmerLights_AdjGo@command,w
  7150  273A  1181               	bcf	1,3
  7151  273B  1D03               	skipz
  7152  273C  1581               	bsf	1,3
  7153  273D  0008               	return
  7154  273E                     __end_of_setDimmerLights_AdjGo:	
  7155                           
  7156                           	psect	text24
  7157  2699                     __ptext24:	
  7158 ;; *************** function _Switch_Initialization *****************
  7159 ;; Defined at:
  7160 ;;		line 37 in file "../src/Switch_B1.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;		None               void
  7167 ;; Registers used:
  7168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    8
  7181 ;; This function calls:
  7182 ;;		_TouchPower
  7183 ;;		_setSw_Initialization
  7184 ;; This function is called by:
  7185 ;;		_main
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           
  7190                           ;psect for function _Switch_Initialization
  7191  2699                     _Switch_Initialization:	
  7192                           
  7193                           ;Switch_B1.c: 38: TouchPower();
  7194                           
  7195                           ;incstack = 0
  7196                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7197  2699  31A5  257C  31A6   	fcall	_TouchPower
  7198                           
  7199                           ;Switch_B1.c: 40: WPUB1 = 0;
  7200  269C  0024               	movlb	4	; select bank4
  7201  269D  108D               	bcf	13,1	;volatile
  7202                           
  7203                           ;Switch_B1.c: 49: setSw_Initialization(1);
  7204  269E  3001               	movlw	1
  7205  269F  31A5  25C0  31A6   	fcall	_setSw_Initialization
  7206                           
  7207                           ;Switch_B1.c: 52: setSw_Initialization(2);
  7208  26A2  3002               	movlw	2
  7209  26A3  31A5  25C0         	fcall	_setSw_Initialization
  7210  26A5  0008               	return
  7211  26A6                     __end_of_Switch_Initialization:	
  7212                           
  7213                           	psect	text25
  7214  25C0                     __ptext25:	
  7215 ;; *************** function _setSw_Initialization *****************
  7216 ;; Defined at:
  7217 ;;		line 77 in file "../src/Switch_B1.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  sw              1    wreg     unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  sw              1    4[BANK0 ] unsigned char 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;		None               void
  7224 ;; Registers used:
  7225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;Total ram usage:        1 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    7
  7238 ;; This function calls:
  7239 ;;		_setLED
  7240 ;; This function is called by:
  7241 ;;		_Switch_Initialization
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           
  7246                           ;psect for function _setSw_Initialization
  7247  25C0                     _setSw_Initialization:	
  7248                           
  7249                           ;incstack = 0
  7250                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7251                           ;setSw_Initialization@sw stored from wreg
  7252  25C0  0020               	movlb	0	; select bank0
  7253  25C1  00A4               	movwf	setSw_Initialization@sw
  7254                           
  7255                           ;Switch_B1.c: 78: setLED(sw, 1);
  7256  25C2  01A2               	clrf	setLED@command
  7257  25C3  0AA2               	incf	setLED@command,f
  7258  25C4  0824               	movf	setSw_Initialization@sw,w
  7259  25C5  3192  2260         	fcall	_setLED
  7260  25C7  0008               	return
  7261  25C8                     __end_of_setSw_Initialization:	
  7262                           
  7263                           	psect	text26
  7264  257C                     __ptext26:	
  7265 ;; *************** function _TouchPower *****************
  7266 ;; Defined at:
  7267 ;;		line 10 in file "../src/Switch_B1.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;		None               void
  7274 ;; Registers used:
  7275 ;;		None
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;Total ram usage:        0 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    5
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_Switch_Initialization
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _TouchPower
  7297  257C                     _TouchPower:	
  7298  257C                     l2919:	
  7299                           ;Switch_B1.c: 11: while (RC5 == 0)
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in _TouchPower: []
  7303                           
  7304  257C  0020               	movlb	0	; select bank0
  7305  257D  1A8E               	btfsc	14,5	;volatile
  7306  257E  0008               	return
  7307                           
  7308                           ;Switch_B1.c: 12: RC5 = 1;
  7309  257F  168E               	bsf	14,5	;volatile
  7310  2580  2D7C               	goto	l2919
  7311  2581                     __end_of_TouchPower:	
  7312                           
  7313                           	psect	text27
  7314  2578                     __ptext27:	
  7315 ;; *************** function _RF_Main *****************
  7316 ;; Defined at:
  7317 ;;		line 26 in file "../src/RF_Control_B1.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;		None
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;		None
  7322 ;; Return value:  Size  Location     Type
  7323 ;;		None               void
  7324 ;; Registers used:
  7325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;Total ram usage:        0 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:   14
  7338 ;; This function calls:
  7339 ;;		_setRF_Main
  7340 ;; This function is called by:
  7341 ;;		_main
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           
  7346                           ;psect for function _RF_Main
  7347  2578                     _RF_Main:	
  7348                           
  7349                           ;RF_Control_B1.c: 28: setRF_Main(1);
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7353  2578  3001               	movlw	1
  7354  2579  318D  2540         	fcall	_setRF_Main
  7355  257B  0008               	return
  7356  257C                     __end_of_RF_Main:	
  7357                           
  7358                           	psect	text28
  7359  0D40                     __ptext28:	
  7360 ;; *************** function _setRF_Main *****************
  7361 ;; Defined at:
  7362 ;;		line 60 in file "../src/RF_Control_B1.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;  rf              1    wreg     unsigned char 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  rf              1   74[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;		None               void
  7369 ;; Registers used:
  7370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;Total ram usage:        3 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:   13
  7383 ;; This function calls:
  7384 ;;		_CC2500_RxData
  7385 ;;		_CC2500_TxData
  7386 ;;		_CC2500_WriteCommand
  7387 ;;		_RF_RxDisable
  7388 ;;		_RfPointSelect
  7389 ;;		_getRxData
  7390 ;; This function is called by:
  7391 ;;		_RF_Main
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           
  7396                           ;psect for function _setRF_Main
  7397  0D40                     _setRF_Main:	
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7401                           ;setRF_Main@rf stored from wreg
  7402  0D40  0020               	movlb	0	; select bank0
  7403  0D41  00EA               	movwf	setRF_Main@rf
  7404                           
  7405                           ;RF_Control_B1.c: 61: RfPointSelect(rf);
  7406  0D42  086A               	movf	setRF_Main@rf,w
  7407  0D43  31A6  26DF  318D   	fcall	_RfPointSelect
  7408                           
  7409                           ;RF_Control_B1.c: 62: if (RF->Enable == 1) {
  7410  0D46  0021               	movlb	1	; select bank1
  7411  0D47  083F               	movf	_RF^(0+128),w
  7412  0D48  0086               	movwf	6
  7413  0D49  0187               	clrf	7
  7414  0D4A  1C01               	btfss	1,0
  7415  0D4B  0008               	return
  7416                           
  7417                           ;RF_Control_B1.c: 65: if (Buz->GO == 0) {
  7418  0D4C  0837               	movf	_Buz^(0+128),w
  7419  0D4D  0086               	movwf	6
  7420  0D4E  3001               	movlw	1	; select bank2/3
  7421  0D4F  0087               	movwf	7
  7422  0D50  1881               	btfsc	1,1
  7423  0D51  0008               	return
  7424                           
  7425                           ;RF_Control_B1.c: 71: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7426  0D52  0020               	movlb	0	; select bank0
  7427  0D53  01EB               	clrf	_setRF_Main$5236
  7428  0D54  0AEB               	incf	_setRF_Main$5236,f
  7429  0D55  1F0C               	btfss	12,6	;volatile
  7430  0D56  1A0C               	btfsc	12,4	;volatile
  7431  0D57  2D5C               	goto	l7667
  7432  0D58  1C0C               	btfss	12,0	;volatile
  7433  0D59  188D               	btfsc	13,1	;volatile
  7434  0D5A  2D5C               	goto	l7667
  7435  0D5B  01EB               	clrf	_setRF_Main$5236
  7436  0D5C                     l7667:	
  7437  0D5C  0021               	movlb	1	; select bank1
  7438  0D5D  083F               	movf	_RF^(0+128),w
  7439  0D5E  0086               	movwf	6
  7440  0D5F  0187               	clrf	7
  7441  0D60  0020               	movlb	0	; select bank0
  7442  0D61  086B               	movf	_setRF_Main$5236,w
  7443  0D62  1381               	bcf	1,7
  7444  0D63  1D03               	skipz
  7445  0D64  1781               	bsf	1,7
  7446                           
  7447                           ;RF_Control_B1.c: 77: if (RF->Key == 1 && RF->Learn == 0) {
  7448  0D65  0021               	movlb	1	; select bank1
  7449  0D66  083F               	movf	_RF^(0+128),w
  7450  0D67  0086               	movwf	6
  7451  0D68  0187               	clrf	7
  7452  0D69  1F81               	btfss	1,7
  7453  0D6A  2D78               	goto	l7677
  7454  0D6B  083F               	movf	_RF^(0+128),w
  7455  0D6C  0086               	movwf	6
  7456  0D6D  0187               	clrf	7
  7457  0D6E  1B01               	btfsc	1,6
  7458  0D6F  2D78               	goto	l7677
  7459                           
  7460                           ;RF_Control_B1.c: 78: RF->Run = 1;
  7461  0D70  0A3F               	incf	_RF^(0+128),w
  7462  0D71  0086               	movwf	6
  7463  0D72  0187               	clrf	7
  7464  0D73  1481               	bsf	1,1
  7465                           
  7466                           ;RF_Control_B1.c: 79: RF_RxDisable(1);
  7467  0D74  3001               	movlw	1
  7468  0D75  319A  22C8         	fcall	_RF_RxDisable
  7469                           
  7470                           ;RF_Control_B1.c: 80: } else {
  7471  0D77  0008               	return
  7472  0D78                     l7677:	
  7473                           
  7474                           ;RF_Control_B1.c: 81: if (RF->Run == 1 && RF->Learn == 0) {
  7475  0D78  0021               	movlb	1	; select bank1
  7476  0D79  0A3F               	incf	_RF^(0+128),w
  7477  0D7A  0086               	movwf	6
  7478  0D7B  0187               	clrf	7
  7479  0D7C  1C81               	btfss	1,1
  7480  0D7D  2DA1               	goto	l7689
  7481  0D7E  083F               	movf	_RF^(0+128),w
  7482  0D7F  0086               	movwf	6
  7483  0D80  0187               	clrf	7
  7484  0D81  1B01               	btfsc	1,6
  7485  0D82  2DA1               	goto	l7689
  7486                           
  7487                           ;RF_Control_B1.c: 82: RF->Count++;
  7488  0D83  3001               	movlw	1
  7489  0D84  0020               	movlb	0	; select bank0
  7490  0D85  00E9               	movwf	??_setRF_Main
  7491  0D86  0021               	movlb	1	; select bank1
  7492  0D87  083F               	movf	_RF^(0+128),w
  7493  0D88  3E03               	addlw	3
  7494  0D89  0086               	movwf	6
  7495  0D8A  0187               	clrf	7
  7496  0D8B  0020               	movlb	0	; select bank0
  7497  0D8C  0869               	movf	??_setRF_Main,w
  7498  0D8D  0781               	addwf	1,f
  7499                           
  7500                           ;RF_Control_B1.c: 83: if (RF->Count == 25) {
  7501  0D8E  0021               	movlb	1	; select bank1
  7502  0D8F  083F               	movf	_RF^(0+128),w
  7503  0D90  3E03               	addlw	3
  7504  0D91  0086               	movwf	6
  7505  0D92  0187               	clrf	7
  7506  0D93  0801               	movf	1,w
  7507  0D94  3A19               	xorlw	25
  7508  0D95  1D03               	skipz
  7509  0D96  0008               	return
  7510                           
  7511                           ;RF_Control_B1.c: 84: RF->Count = 0;
  7512  0D97  083F               	movf	_RF^(0+128),w
  7513  0D98  3E03               	addlw	3
  7514  0D99  0086               	movwf	6
  7515  0D9A  0187               	clrf	7
  7516  0D9B  0181               	clrf	1
  7517                           
  7518                           ;RF_Control_B1.c: 85: RF->Run = 0;
  7519  0D9C  0A3F               	incf	_RF^(0+128),w
  7520  0D9D  0086               	movwf	6
  7521  0D9E  0187               	clrf	7
  7522  0D9F  1081               	bcf	1,1
  7523                           
  7524                           ;RF_Control_B1.c: 86: }
  7525                           ;RF_Control_B1.c: 87: } else {
  7526  0DA0  0008               	return
  7527  0DA1                     l7689:	
  7528                           
  7529                           ;RF_Control_B1.c: 88: RF->Count = 0;
  7530  0DA1  083F               	movf	_RF^(0+128),w
  7531  0DA2  3E03               	addlw	3
  7532  0DA3  0086               	movwf	6
  7533  0DA4  0187               	clrf	7
  7534  0DA5  0181               	clrf	1
  7535                           
  7536                           ;RF_Control_B1.c: 89: RF->Run = 0;
  7537  0DA6  0A3F               	incf	_RF^(0+128),w
  7538  0DA7  0086               	movwf	6
  7539  0DA8  0187               	clrf	7
  7540  0DA9  1081               	bcf	1,1
  7541                           
  7542                           ;RF_Control_B1.c: 91: if (RF->ReceiveGO == 1) {
  7543  0DAA  083F               	movf	_RF^(0+128),w
  7544  0DAB  0086               	movwf	6
  7545  0DAC  0187               	clrf	7
  7546  0DAD  1C81               	btfss	1,1
  7547  0DAE  2DBA               	goto	l7701
  7548                           
  7549                           ;RF_Control_B1.c: 92: RF->ReceiveGO = 0;
  7550  0DAF  083F               	movf	_RF^(0+128),w
  7551  0DB0  0086               	movwf	6
  7552  0DB1  0187               	clrf	7
  7553  0DB2  1081               	bcf	1,1
  7554                           
  7555                           ;RF_Control_B1.c: 93: CC2500_RxData();
  7556  0DB3  3192  22BE  318D   	fcall	_CC2500_RxData
  7557                           
  7558                           ;RF_Control_B1.c: 101: getRxData(1);
  7559  0DB6  3001               	movlw	1
  7560  0DB7  3190  20B0         	fcall	_getRxData
  7561                           
  7562                           ;RF_Control_B1.c: 105: } else {
  7563  0DB9  0008               	return
  7564  0DBA                     l7701:	
  7565                           
  7566                           ;RF_Control_B1.c: 106: if (RF->Learn == 0) {
  7567  0DBA  0021               	movlb	1	; select bank1
  7568  0DBB  083F               	movf	_RF^(0+128),w
  7569  0DBC  0086               	movwf	6
  7570  0DBD  0187               	clrf	7
  7571  0DBE  1B01               	btfsc	1,6
  7572  0DBF  2DF7               	goto	l7725
  7573                           
  7574                           ;RF_Control_B1.c: 107: if (RF->TransceiveGO == 1) {
  7575  0DC0  083F               	movf	_RF^(0+128),w
  7576  0DC1  0086               	movwf	6
  7577  0DC2  0187               	clrf	7
  7578  0DC3  1D01               	btfss	1,2
  7579  0DC4  2DDC               	goto	l7713
  7580                           
  7581                           ;RF_Control_B1.c: 108: RF->TransceiveGO = 0;
  7582  0DC5  083F               	movf	_RF^(0+128),w
  7583  0DC6  0086               	movwf	6
  7584  0DC7  0187               	clrf	7
  7585  0DC8  1101               	bcf	1,2
  7586                           
  7587                           ;RF_Control_B1.c: 109: RF->RxStatus = 0;
  7588  0DC9  083F               	movf	_RF^(0+128),w
  7589  0DCA  0086               	movwf	6
  7590  0DCB  0187               	clrf	7
  7591  0DCC  1181               	bcf	1,3
  7592                           
  7593                           ;RF_Control_B1.c: 110: RF->ReceiveGO = 0;
  7594  0DCD  083F               	movf	_RF^(0+128),w
  7595  0DCE  0086               	movwf	6
  7596  0DCF  0187               	clrf	7
  7597  0DD0  1081               	bcf	1,1
  7598                           
  7599                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x36);
  7600  0DD1  3036               	movlw	54
  7601  0DD2  31A6  26EE  318D   	fcall	_CC2500_WriteCommand
  7602                           
  7603                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x3B);
  7604  0DD5  303B               	movlw	59
  7605  0DD6  31A6  26EE  318D   	fcall	_CC2500_WriteCommand
  7606                           
  7607                           ;RF_Control_B1.c: 114: CC2500_TxData();
  7608  0DD9  319E  26A6         	fcall	_CC2500_TxData
  7609                           
  7610                           ;RF_Control_B1.c: 116: } else {
  7611  0DDB  0008               	return
  7612  0DDC                     l7713:	
  7613                           
  7614                           ;RF_Control_B1.c: 118: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  7615  0DDC  0021               	movlb	1	; select bank1
  7616  0DDD  083F               	movf	_RF^(0+128),w
  7617  0DDE  0086               	movwf	6
  7618  0DDF  0187               	clrf	7
  7619  0DE0  1981               	btfsc	1,3
  7620  0DE1  0008               	return
  7621  0DE2  083F               	movf	_RF^(0+128),w
  7622  0DE3  0086               	movwf	6
  7623  0DE4  0187               	clrf	7
  7624  0DE5  1881               	btfsc	1,1
  7625  0DE6  0008               	return
  7626                           
  7627                           ;RF_Control_B1.c: 119: RF->RxStatus = 1;
  7628  0DE7  083F               	movf	_RF^(0+128),w
  7629  0DE8  0086               	movwf	6
  7630  0DE9  0187               	clrf	7
  7631  0DEA  1581               	bsf	1,3
  7632                           
  7633                           ;RF_Control_B1.c: 120: CC2500_WriteCommand(0x36);
  7634  0DEB  3036               	movlw	54
  7635  0DEC  31A6  26EE  318D   	fcall	_CC2500_WriteCommand
  7636                           
  7637                           ;RF_Control_B1.c: 121: CC2500_WriteCommand(0x3A);
  7638  0DEF  303A               	movlw	58
  7639  0DF0  31A6  26EE  318D   	fcall	_CC2500_WriteCommand
  7640                           
  7641                           ;RF_Control_B1.c: 122: CC2500_WriteCommand(0x34);
  7642  0DF3  3034               	movlw	52
  7643  0DF4  31A6  26EE         	fcall	_CC2500_WriteCommand
  7644                           
  7645                           ;RF_Control_B1.c: 124: }
  7646                           ;RF_Control_B1.c: 127: }
  7647                           ;RF_Control_B1.c: 128: } else {
  7648  0DF6  0008               	return
  7649  0DF7                     l7725:	
  7650                           
  7651                           ;RF_Control_B1.c: 130: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  7652  0DF7  0021               	movlb	1	; select bank1
  7653  0DF8  083F               	movf	_RF^(0+128),w
  7654  0DF9  0086               	movwf	6
  7655  0DFA  0187               	clrf	7
  7656  0DFB  1981               	btfsc	1,3
  7657  0DFC  0008               	return
  7658  0DFD  083F               	movf	_RF^(0+128),w
  7659  0DFE  0086               	movwf	6
  7660  0DFF  0187               	clrf	7
  7661  0E00  1881               	btfsc	1,1
  7662  0E01  0008               	return
  7663                           
  7664                           ;RF_Control_B1.c: 131: RF->RxStatus = 1;
  7665  0E02  083F               	movf	_RF^(0+128),w
  7666  0E03  0086               	movwf	6
  7667  0E04  0187               	clrf	7
  7668  0E05  1581               	bsf	1,3
  7669                           
  7670                           ;RF_Control_B1.c: 132: CC2500_WriteCommand(0x36);
  7671  0E06  3036               	movlw	54
  7672  0E07  31A6  26EE  318D   	fcall	_CC2500_WriteCommand
  7673                           
  7674                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x3A);
  7675  0E0A  303A               	movlw	58
  7676  0E0B  31A6  26EE  318D   	fcall	_CC2500_WriteCommand
  7677                           
  7678                           ;RF_Control_B1.c: 134: CC2500_WriteCommand(0x34);
  7679  0E0E  3034               	movlw	52
  7680  0E0F  31A6  26EE         	fcall	_CC2500_WriteCommand
  7681  0E11  0008               	return
  7682  0E12                     __end_of_setRF_Main:	
  7683                           
  7684                           	psect	text29
  7685  10B0                     __ptext29:	
  7686 ;; *************** function _getRxData *****************
  7687 ;; Defined at:
  7688 ;;		line 223 in file "../src/RF_Control_B1.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;  rf              1    wreg     unsigned char 
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;  rf              1   72[BANK0 ] unsigned char 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;		None               void
  7695 ;; Registers used:
  7696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:        1 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:   12
  7709 ;; This function calls:
  7710 ;;		_RfPointSelect
  7711 ;;		_setControl_Lights_Table
  7712 ;;		_setLog_Code
  7713 ;; This function is called by:
  7714 ;;		_setRF_Main
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _getRxData
  7720  10B0                     _getRxData:	
  7721                           
  7722                           ;incstack = 0
  7723                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7724                           ;getRxData@rf stored from wreg
  7725  10B0  0020               	movlb	0	; select bank0
  7726  10B1  00E8               	movwf	getRxData@rf
  7727                           
  7728                           ;RF_Control_B1.c: 224: RfPointSelect(rf);
  7729  10B2  0868               	movf	getRxData@rf,w
  7730  10B3  31A6  26DF  3190   	fcall	_RfPointSelect
  7731                           
  7732                           ;RF_Control_B1.c: 225: if (RF->Learn) {
  7733  10B6  0021               	movlb	1	; select bank1
  7734  10B7  083F               	movf	_RF^(0+128),w
  7735  10B8  0086               	movwf	6
  7736  10B9  0187               	clrf	7
  7737  10BA  1F01               	btfss	1,6
  7738  10BB  28C7               	goto	l7021
  7739                           
  7740                           ;RF_Control_B1.c: 226: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7741  10BC  08A0               	movf	_RF_Data^(0+128),f
  7742  10BD  1D03               	skipz
  7743  10BE  0008               	return
  7744  10BF  0821               	movf	(_RF_Data^(0+128)+1),w
  7745  10C0  3A64               	xorlw	100
  7746  10C1  1D03               	skipz
  7747  10C2  0008               	return
  7748                           
  7749                           ;RF_Control_B1.c: 227: {
  7750                           ;RF_Control_B1.c: 228: setLog_Code(1);
  7751  10C3  3001               	movlw	1
  7752  10C4  3190  2022         	fcall	_setLog_Code
  7753                           
  7754                           ;RF_Control_B1.c: 229: }
  7755                           ;RF_Control_B1.c: 230: } else {
  7756  10C6  0008               	return
  7757  10C7                     l7021:	
  7758                           
  7759                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7760  10C7  0021               	movlb	1	; select bank1
  7761  10C8  08A0               	movf	_RF_Data^(0+128),f
  7762  10C9  1D03               	skipz
  7763  10CA  0008               	return
  7764  10CB  0821               	movf	(_RF_Data^(0+128)+1),w
  7765  10CC  3A02               	xorlw	2
  7766  10CD  1D03               	skipz
  7767  10CE  0008               	return
  7768                           
  7769                           ;RF_Control_B1.c: 232: {
  7770                           ;RF_Control_B1.c: 233: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7771  10CF  082C               	movf	(_RF_Data^(0+128)+12),w
  7772  10D0  3AFF               	xorlw	255
  7773  10D1  1D03               	skipz
  7774  10D2  28DD               	goto	l7033
  7775  10D3  082D               	movf	(_RF_Data^(0+128)+13),w
  7776  10D4  3AFF               	xorlw	255
  7777  10D5  1D03               	skipz
  7778  10D6  28DD               	goto	l7033
  7779  10D7  082E               	movf	(_RF_Data^(0+128)+14),w
  7780  10D8  3AFF               	xorlw	255
  7781  10D9  1D03               	skipz
  7782  10DA  28DD               	goto	l7033
  7783                           
  7784                           ;RF_Control_B1.c: 234: __nop();
  7785  10DB  0000               	nop
  7786                           
  7787                           ;RF_Control_B1.c: 235: } else {
  7788  10DC  0008               	return
  7789  10DD                     l7033:	
  7790                           
  7791                           ;RF_Control_B1.c: 236: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7792  10DD  087D               	movf	_product,w
  7793  10DE  3E0C               	addlw	12
  7794  10DF  0086               	movwf	6
  7795  10E0  3001               	movlw	1	; select bank2/3
  7796  10E1  0087               	movwf	7
  7797  10E2  0021               	movlb	1	; select bank1
  7798  10E3  082C               	movf	(_RF_Data^(0+128)+12),w
  7799  10E4  0601               	xorwf	1,w
  7800  10E5  1D03               	skipz
  7801  10E6  0008               	return
  7802  10E7  087D               	movf	_product,w
  7803  10E8  3E0D               	addlw	13
  7804  10E9  0086               	movwf	6
  7805  10EA  3001               	movlw	1	; select bank2/3
  7806  10EB  0087               	movwf	7
  7807  10EC  082D               	movf	(_RF_Data^(0+128)+13),w
  7808  10ED  0601               	xorwf	1,w
  7809  10EE  1D03               	skipz
  7810  10EF  0008               	return
  7811  10F0  087D               	movf	_product,w
  7812  10F1  3E0E               	addlw	14
  7813  10F2  0086               	movwf	6
  7814  10F3  3001               	movlw	1	; select bank2/3
  7815  10F4  0087               	movwf	7
  7816  10F5  082E               	movf	(_RF_Data^(0+128)+14),w
  7817  10F6  0601               	xorwf	1,w
  7818  10F7  1D03               	skipz
  7819  10F8  0008               	return
  7820                           
  7821                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  7822  10F9  3001               	movlw	1
  7823  10FA  318A  221B         	fcall	_setControl_Lights_Table
  7824                           
  7825                           ;RF_Control_B1.c: 244: {
  7826                           ;RF_Control_B1.c: 245: ;
  7827                           
  7828                           ;RF_Control_B1.c: 241: {
  7829                           ;RF_Control_B1.c: 242: ;
  7830                           ;RF_Control_B1.c: 243: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7831                           
  7832                           ;RF_Control_B1.c: 238: }
  7833                           ;RF_Control_B1.c: 239: }
  7834                           ;RF_Control_B1.c: 240: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7835  10FC  0008               	return
  7836  10FD                     __end_of_getRxData:	
  7837                           
  7838                           	psect	text30
  7839  1022                     __ptext30:	
  7840 ;; *************** function _setLog_Code *****************
  7841 ;; Defined at:
  7842 ;;		line 255 in file "../src/RF_Control_B1.c"
  7843 ;; Parameters:    Size  Location     Type
  7844 ;;  rf              1    wreg     unsigned char 
  7845 ;; Auto vars:     Size  Location     Type
  7846 ;;  rf              1   14[BANK0 ] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;		None               void
  7849 ;; Registers used:
  7850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;Total ram usage:        2 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    7
  7863 ;; This function calls:
  7864 ;;		_RfPointSelect
  7865 ;;		_setBuz
  7866 ;; This function is called by:
  7867 ;;		_getRxData
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           
  7872                           ;psect for function _setLog_Code
  7873  1022                     _setLog_Code:	
  7874                           
  7875                           ;incstack = 0
  7876                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7877                           ;setLog_Code@rf stored from wreg
  7878  1022  0020               	movlb	0	; select bank0
  7879  1023  00AE               	movwf	setLog_Code@rf
  7880                           
  7881                           ;RF_Control_B1.c: 256: RfPointSelect(rf);
  7882  1024  082E               	movf	setLog_Code@rf,w
  7883  1025  31A6  26DF  3190   	fcall	_RfPointSelect
  7884                           
  7885                           ;RF_Control_B1.c: 257: product->Data[12]=RF_Data[12];
  7886  1028  0021               	movlb	1	; select bank1
  7887  1029  082C               	movf	(_RF_Data^(0+128)+12),w
  7888  102A  0020               	movlb	0	; select bank0
  7889  102B  00AD               	movwf	??_setLog_Code
  7890  102C  087D               	movf	_product,w
  7891  102D  3E0C               	addlw	12
  7892  102E  0086               	movwf	6
  7893  102F  3001               	movlw	1	; select bank2/3
  7894  1030  0087               	movwf	7
  7895  1031  082D               	movf	??_setLog_Code,w
  7896  1032  0081               	movwf	1
  7897                           
  7898                           ;RF_Control_B1.c: 258: product->Data[13]=RF_Data[13];
  7899  1033  0021               	movlb	1	; select bank1
  7900  1034  082D               	movf	(_RF_Data^(0+128)+13),w
  7901  1035  0020               	movlb	0	; select bank0
  7902  1036  00AD               	movwf	??_setLog_Code
  7903  1037  087D               	movf	_product,w
  7904  1038  3E0D               	addlw	13
  7905  1039  0086               	movwf	6
  7906  103A  3001               	movlw	1	; select bank2/3
  7907  103B  0087               	movwf	7
  7908  103C  082D               	movf	??_setLog_Code,w
  7909  103D  0081               	movwf	1
  7910                           
  7911                           ;RF_Control_B1.c: 259: product->Data[14]=RF_Data[14];
  7912  103E  0021               	movlb	1	; select bank1
  7913  103F  082E               	movf	(_RF_Data^(0+128)+14),w
  7914  1040  0020               	movlb	0	; select bank0
  7915  1041  00AD               	movwf	??_setLog_Code
  7916  1042  087D               	movf	_product,w
  7917  1043  3E0E               	addlw	14
  7918  1044  0086               	movwf	6
  7919  1045  3001               	movlw	1	; select bank2/3
  7920  1046  0087               	movwf	7
  7921  1047  082D               	movf	??_setLog_Code,w
  7922  1048  0081               	movwf	1
  7923                           
  7924                           ;RF_Control_B1.c: 260: setBuz(1, 100);
  7925  1049  3064               	movlw	100
  7926  104A  00A9               	movwf	setBuz@time
  7927  104B  3000               	movlw	0
  7928  104C  00AA               	movwf	setBuz@time+1
  7929  104D  3001               	movlw	1
  7930  104E  3188  2079  3190   	fcall	_setBuz
  7931                           
  7932                           ;RF_Control_B1.c: 261: RF->Learn = 0;
  7933  1051  0021               	movlb	1	; select bank1
  7934  1052  083F               	movf	_RF^(0+128),w
  7935  1053  0086               	movwf	6
  7936  1054  0187               	clrf	7
  7937  1055  1301               	bcf	1,6
  7938                           
  7939                           ;RF_Control_B1.c: 262: if (myMain->First) {
  7940  1056  086D               	movf	_myMain^(0+128),w
  7941  1057  0086               	movwf	6
  7942  1058  3001               	movlw	1	; select bank2/3
  7943  1059  0087               	movwf	7
  7944  105A  1F81               	btfss	1,7
  7945  105B  2862               	goto	l2505
  7946                           
  7947                           ;RF_Control_B1.c: 263: Memory->LoopSave=1;
  7948  105C  086E               	movf	_Memory^(0+128),w
  7949  105D  3E24               	addlw	36
  7950  105E  0086               	movwf	6
  7951  105F  3002               	movlw	2	; select bank4/5
  7952  1060  0087               	movwf	7
  7953  1061  1501               	bsf	1,2
  7954  1062                     l2505:	
  7955                           
  7956                           ;RF_Control_B1.c: 264: }
  7957                           ;RF_Control_B1.c: 265: Memory->Modify=1;
  7958  1062  086E               	movf	_Memory^(0+128),w
  7959  1063  3E24               	addlw	36
  7960  1064  0086               	movwf	6
  7961  1065  3002               	movlw	2	; select bank4/5
  7962  1066  0087               	movwf	7
  7963  1067  1401               	bsf	1,0
  7964  1068  0008               	return
  7965  1069                     __end_of_setLog_Code:	
  7966                           
  7967                           	psect	text31
  7968  0A1B                     __ptext31:	
  7969 ;; *************** function _setControl_Lights_Table *****************
  7970 ;; Defined at:
  7971 ;;		line 269 in file "../src/RF_Control_B1.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  rf              1    wreg     unsigned char 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;  rf              1   71[BANK0 ] unsigned char 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;		None               void
  7978 ;; Registers used:
  7979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;Total ram usage:        1 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:   11
  7992 ;; This function calls:
  7993 ;;		_RfPointSelect
  7994 ;;		_setBuz
  7995 ;;		_setDimmerLights
  7996 ;;		_setRFSW_AdjControl
  7997 ;;		_setRFSW_Control
  7998 ;;		_setRFSW_Status
  7999 ;;		_setSw_Status
  8000 ;;		_setTxData
  8001 ;; This function is called by:
  8002 ;;		_getRxData
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _setControl_Lights_Table
  8008  0A1B                     _setControl_Lights_Table:	
  8009                           
  8010                           ;incstack = 0
  8011                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8012                           ;setControl_Lights_Table@rf stored from wreg
  8013  0A1B  0020               	movlb	0	; select bank0
  8014  0A1C  00E7               	movwf	setControl_Lights_Table@rf
  8015                           
  8016                           ;RF_Control_B1.c: 270: RfPointSelect(rf);
  8017  0A1D  0867               	movf	setControl_Lights_Table@rf,w
  8018  0A1E  31A6  26DF  318A   	fcall	_RfPointSelect
  8019                           
  8020                           ;RF_Control_B1.c: 271: if (RF_Data[15] == 0x00) {
  8021  0A21  0021               	movlb	1	; select bank1
  8022  0A22  08AF               	movf	(_RF_Data^(0+128)+15),f
  8023  0A23  1D03               	skipz
  8024  0A24  2A6E               	goto	l6773
  8025                           
  8026                           ;RF_Control_B1.c: 273: setDimmerLights(1, 0);
  8027  0A25  0020               	movlb	0	; select bank0
  8028  0A26  01A4               	clrf	setDimmerLights@status
  8029  0A27  3001               	movlw	1
  8030  0A28  3189  2102  318A   	fcall	_setDimmerLights
  8031                           
  8032                           ;RF_Control_B1.c: 274: setRFSW_Status(1, 0);
  8033  0A2B  0020               	movlb	0	; select bank0
  8034  0A2C  01A2               	clrf	setRFSW_Status@command
  8035  0A2D  3001               	movlw	1
  8036  0A2E  31A6  26C1  318A   	fcall	_setRFSW_Status
  8037                           
  8038                           ;RF_Control_B1.c: 275: setSw_Status(1, 0);
  8039  0A31  0020               	movlb	0	; select bank0
  8040  0A32  01A2               	clrf	setSw_Status@command
  8041  0A33  3001               	movlw	1
  8042  0A34  31A6  26D0  318A   	fcall	_setSw_Status
  8043                           
  8044                           ;RF_Control_B1.c: 278: setDimmerLights(2, 0);
  8045  0A37  0020               	movlb	0	; select bank0
  8046  0A38  01A4               	clrf	setDimmerLights@status
  8047  0A39  3002               	movlw	2
  8048  0A3A  3189  2102  318A   	fcall	_setDimmerLights
  8049                           
  8050                           ;RF_Control_B1.c: 279: setRFSW_Status(2, 0);
  8051  0A3D  0020               	movlb	0	; select bank0
  8052  0A3E  01A2               	clrf	setRFSW_Status@command
  8053  0A3F  3002               	movlw	2
  8054  0A40  31A6  26C1  318A   	fcall	_setRFSW_Status
  8055                           
  8056                           ;RF_Control_B1.c: 280: setSw_Status(2, 0);
  8057  0A43  0020               	movlb	0	; select bank0
  8058  0A44  01A2               	clrf	setSw_Status@command
  8059  0A45  3002               	movlw	2
  8060  0A46  31A6  26D0  318A   	fcall	_setSw_Status
  8061                           
  8062                           ;RF_Control_B1.c: 288: product->Data[9]=0;
  8063  0A49  087D               	movf	_product,w
  8064  0A4A  3E09               	addlw	9
  8065  0A4B  0086               	movwf	6
  8066  0A4C  3001               	movlw	1	; select bank2/3
  8067  0A4D  0087               	movwf	7
  8068  0A4E  0181               	clrf	1
  8069                           
  8070                           ;RF_Control_B1.c: 289: product->Data[11]=0;
  8071  0A4F  087D               	movf	_product,w
  8072  0A50  3E0B               	addlw	11
  8073  0A51  0086               	movwf	6
  8074  0A52  3001               	movlw	1	; select bank2/3
  8075  0A53  0087               	movwf	7
  8076  0A54  0181               	clrf	1
  8077                           
  8078                           ;RF_Control_B1.c: 290: product->Data[15]=0;
  8079  0A55  087D               	movf	_product,w
  8080  0A56  3E0F               	addlw	15
  8081  0A57  0086               	movwf	6
  8082  0A58  3001               	movlw	1	; select bank2/3
  8083  0A59  0087               	movwf	7
  8084  0A5A  0181               	clrf	1
  8085                           
  8086                           ;RF_Control_B1.c: 291: product->Data[17]=0;
  8087  0A5B  087D               	movf	_product,w
  8088  0A5C  3E11               	addlw	17
  8089  0A5D  0086               	movwf	6
  8090  0A5E  3001               	movlw	1	; select bank2/3
  8091  0A5F  0087               	movwf	7
  8092  0A60  0181               	clrf	1
  8093                           
  8094                           ;RF_Control_B1.c: 292: setBuz(1, 100);
  8095  0A61  3064               	movlw	100
  8096  0A62  0020               	movlb	0	; select bank0
  8097  0A63  00A9               	movwf	setBuz@time
  8098  0A64  3000               	movlw	0
  8099  0A65  00AA               	movwf	setBuz@time+1
  8100  0A66  3001               	movlw	1
  8101  0A67  3188  2079  318A   	fcall	_setBuz
  8102                           
  8103                           ;RF_Control_B1.c: 293: setTxData(1);
  8104  0A6A  3001               	movlw	1
  8105  0A6B  318B  2343         	fcall	_setTxData
  8106                           
  8107                           ;RF_Control_B1.c: 294: } else if (RF_Data[15] == 0x20) {
  8108  0A6D  0008               	return
  8109  0A6E                     l6773:	
  8110  0A6E  0021               	movlb	1	; select bank1
  8111  0A6F  082F               	movf	(_RF_Data^(0+128)+15),w
  8112  0A70  3A20               	xorlw	32
  8113  0A71  1D03               	skipz
  8114  0A72  2A89               	goto	l6779
  8115                           
  8116                           ;RF_Control_B1.c: 295: product->Data[9]=0;
  8117  0A73  087D               	movf	_product,w
  8118  0A74  3E09               	addlw	9
  8119  0A75  0086               	movwf	6
  8120  0A76  3001               	movlw	1	; select bank2/3
  8121  0A77  0087               	movwf	7
  8122  0A78  0181               	clrf	1
  8123                           
  8124                           ;RF_Control_B1.c: 296: product->Data[11]=0;
  8125  0A79  087D               	movf	_product,w
  8126  0A7A  3E0B               	addlw	11
  8127  0A7B  0086               	movwf	6
  8128  0A7C  3001               	movlw	1	; select bank2/3
  8129  0A7D  0087               	movwf	7
  8130  0A7E  0181               	clrf	1
  8131                           
  8132                           ;RF_Control_B1.c: 297: product->Data[17]=0;
  8133  0A7F  087D               	movf	_product,w
  8134  0A80  3E11               	addlw	17
  8135  0A81  0086               	movwf	6
  8136  0A82  3001               	movlw	1	; select bank2/3
  8137  0A83  0087               	movwf	7
  8138  0A84  0181               	clrf	1
  8139                           
  8140                           ;RF_Control_B1.c: 298: setTxData(1);
  8141  0A85  3001               	movlw	1
  8142  0A86  318B  2343         	fcall	_setTxData
  8143                           
  8144                           ;RF_Control_B1.c: 299: }
  8145  0A88  0008               	return
  8146  0A89                     l6779:	
  8147                           
  8148                           ;RF_Control_B1.c: 301: else if (RF_Data[15] == 0x01) {
  8149  0A89  0021               	movlb	1	; select bank1
  8150  0A8A  082F               	movf	(_RF_Data^(0+128)+15),w
  8151  0A8B  3A01               	xorlw	1
  8152  0A8C  1D03               	skipz
  8153  0A8D  2A92               	goto	l6783
  8154                           
  8155                           ;RF_Control_B1.c: 302: setRFSW_Control(1);
  8156  0A8E  3001               	movlw	1
  8157  0A8F  3189  218B         	fcall	_setRFSW_Control
  8158                           
  8159                           ;RF_Control_B1.c: 303: }
  8160  0A91  0008               	return
  8161  0A92                     l6783:	
  8162                           
  8163                           ;RF_Control_B1.c: 305: else if (RF_Data[15] == 0x11) {
  8164  0A92  0021               	movlb	1	; select bank1
  8165  0A93  082F               	movf	(_RF_Data^(0+128)+15),w
  8166  0A94  3A11               	xorlw	17
  8167  0A95  1D03               	skipz
  8168  0A96  2A9B               	goto	l6787
  8169                           
  8170                           ;RF_Control_B1.c: 306: setRFSW_AdjControl(1);
  8171  0A97  3001               	movlw	1
  8172  0A98  319E  2623         	fcall	_setRFSW_AdjControl
  8173                           
  8174                           ;RF_Control_B1.c: 307: }
  8175  0A9A  0008               	return
  8176  0A9B                     l6787:	
  8177                           
  8178                           ;RF_Control_B1.c: 312: else if (RF_Data[15] == 0x02) {
  8179  0A9B  0021               	movlb	1	; select bank1
  8180  0A9C  082F               	movf	(_RF_Data^(0+128)+15),w
  8181  0A9D  3A02               	xorlw	2
  8182  0A9E  1D03               	skipz
  8183  0A9F  2AA4               	goto	l6791
  8184                           
  8185                           ;RF_Control_B1.c: 313: setRFSW_Control(2);
  8186  0AA0  3002               	movlw	2
  8187  0AA1  3189  218B         	fcall	_setRFSW_Control
  8188                           
  8189                           ;RF_Control_B1.c: 314: }
  8190  0AA3  0008               	return
  8191  0AA4                     l6791:	
  8192                           
  8193                           ;RF_Control_B1.c: 316: else if (RF_Data[15] == 0x21) {
  8194  0AA4  0021               	movlb	1	; select bank1
  8195  0AA5  082F               	movf	(_RF_Data^(0+128)+15),w
  8196  0AA6  3A21               	xorlw	33
  8197  0AA7  1D03               	skipz
  8198  0AA8  0008               	return
  8199                           
  8200                           ;RF_Control_B1.c: 317: setRFSW_AdjControl(2);
  8201  0AA9  3002               	movlw	2
  8202  0AAA  319E  2623         	fcall	_setRFSW_AdjControl
  8203  0AAC  0008               	return
  8204  0AAD                     __end_of_setControl_Lights_Table:	
  8205                           
  8206                           	psect	text32
  8207  098B                     __ptext32:	
  8208 ;; *************** function _setRFSW_Control *****************
  8209 ;; Defined at:
  8210 ;;		line 354 in file "../src/RF_Control_B1.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;  sw              1    wreg     unsigned char 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  sw              1   67[BANK0 ] unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;		None               void
  8217 ;; Registers used:
  8218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;Total ram usage:        2 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    9
  8231 ;; This function calls:
  8232 ;;		_RfSWPointSelect
  8233 ;;		_setBuz
  8234 ;;		_setDelayOff_GO
  8235 ;;		_setDimmerLights_Switch
  8236 ;;		_setDimmerLights_Trigger
  8237 ;;		_setRF_DimmerLights
  8238 ;;		_setSw_Status
  8239 ;;		_setTxData
  8240 ;; This function is called by:
  8241 ;;		_setControl_Lights_Table
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _setRFSW_Control
  8247  098B                     _setRFSW_Control:	
  8248                           
  8249                           ;incstack = 0
  8250                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8251                           ;setRFSW_Control@sw stored from wreg
  8252  098B  0020               	movlb	0	; select bank0
  8253  098C  00E3               	movwf	setRFSW_Control@sw
  8254                           
  8255                           ;RF_Control_B1.c: 355: RfSWPointSelect(sw);
  8256  098D  0863               	movf	setRFSW_Control@sw,w
  8257  098E  3198  20B3  3189   	fcall	_RfSWPointSelect
  8258                           
  8259                           ;RF_Control_B1.c: 356: if (!RFSW->Status) {
  8260  0991  0021               	movlb	1	; select bank1
  8261  0992  0840               	movf	_RFSW^(0+128),w
  8262  0993  0086               	movwf	6
  8263  0994  0187               	clrf	7
  8264  0995  1801               	btfsc	1,0
  8265  0996  29CC               	goto	l6629
  8266                           
  8267                           ;RF_Control_B1.c: 357: if (RF_Data[16] == 0x80) {
  8268  0997  0830               	movf	(_RF_Data^(0+128)+16),w
  8269  0998  3A80               	xorlw	128
  8270  0999  1D03               	skipz
  8271  099A  29A8               	goto	l6619
  8272                           
  8273                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 1, RF_Data[17]);
  8274  099B  0020               	movlb	0	; select bank0
  8275  099C  01A3               	clrf	setDelayOff_GO@command
  8276  099D  0AA3               	incf	setDelayOff_GO@command,f
  8277  099E  0021               	movlb	1	; select bank1
  8278  099F  0831               	movf	(_RF_Data^(0+128)+17),w
  8279  09A0  0020               	movlb	0	; select bank0
  8280  09A1  00E2               	movwf	??_setRFSW_Control
  8281  09A2  0862               	movf	??_setRFSW_Control,w
  8282  09A3  00A4               	movwf	setDelayOff_GO@value
  8283  09A4  0863               	movf	setRFSW_Control@sw,w
  8284  09A5  3192  2203  3189   	fcall	_setDelayOff_GO
  8285  09A8                     l6619:	
  8286                           
  8287                           ;RF_Control_B1.c: 359: }
  8288                           ;RF_Control_B1.c: 360: RFSW->Status = 1;
  8289  09A8  0021               	movlb	1	; select bank1
  8290  09A9  0840               	movf	_RFSW^(0+128),w
  8291  09AA  0086               	movwf	6
  8292  09AB  0187               	clrf	7
  8293  09AC  1401               	bsf	1,0
  8294                           
  8295                           ;RF_Control_B1.c: 361: setSw_Status(sw, 1);
  8296  09AD  0020               	movlb	0	; select bank0
  8297  09AE  01A2               	clrf	setSw_Status@command
  8298  09AF  0AA2               	incf	setSw_Status@command,f
  8299  09B0  0863               	movf	setRFSW_Control@sw,w
  8300  09B1  31A6  26D0  3189   	fcall	_setSw_Status
  8301                           
  8302                           ;RF_Control_B1.c: 363: setDimmerLights_Trigger(sw, 1);
  8303  09B4  0020               	movlb	0	; select bank0
  8304  09B5  01A2               	clrf	setDimmerLights_Trigger@command
  8305  09B6  0AA2               	incf	setDimmerLights_Trigger@command,f
  8306  09B7  0863               	movf	setRFSW_Control@sw,w
  8307  09B8  31A7  270E  3189   	fcall	_setDimmerLights_Trigger
  8308                           
  8309                           ;RF_Control_B1.c: 364: setDimmerLights_Switch(sw, 1);
  8310  09BB  0020               	movlb	0	; select bank0
  8311  09BC  01A2               	clrf	setDimmerLights_Switch@command
  8312  09BD  0AA2               	incf	setDimmerLights_Switch@command,f
  8313  09BE  0863               	movf	setRFSW_Control@sw,w
  8314  09BF  31A6  26FE  3189   	fcall	_setDimmerLights_Switch
  8315                           
  8316                           ;RF_Control_B1.c: 366: setRF_DimmerLights(sw, RFSW->Status);
  8317  09C2  0021               	movlb	1	; select bank1
  8318  09C3  0840               	movf	_RFSW^(0+128),w
  8319  09C4  0086               	movwf	6
  8320  09C5  0187               	clrf	7
  8321  09C6  3000               	movlw	0
  8322  09C7  1801               	btfsc	1,0
  8323  09C8  3001               	movlw	1
  8324  09C9  0020               	movlb	0	; select bank0
  8325  09CA  00DD               	movwf	setRF_DimmerLights@on
  8326  09CB  2A0A               	goto	L4
  8327  09CC                     l6629:	
  8328                           ;RF_Control_B1.c: 367: } else {
  8329                           
  8330                           
  8331                           ;RF_Control_B1.c: 368: if (RF_Data[16] == 0x80) {
  8332  09CC  0021               	movlb	1	; select bank1
  8333  09CD  0830               	movf	(_RF_Data^(0+128)+16),w
  8334  09CE  3A80               	xorlw	128
  8335  09CF  1D03               	skipz
  8336  09D0  29E2               	goto	l6635
  8337                           
  8338                           ;RF_Control_B1.c: 369: setDelayOff_GO(sw, 1, RF_Data[17]);
  8339  09D1  0020               	movlb	0	; select bank0
  8340  09D2  01A3               	clrf	setDelayOff_GO@command
  8341  09D3  0AA3               	incf	setDelayOff_GO@command,f
  8342  09D4  0021               	movlb	1	; select bank1
  8343  09D5  0831               	movf	(_RF_Data^(0+128)+17),w
  8344  09D6  0020               	movlb	0	; select bank0
  8345  09D7  00E2               	movwf	??_setRFSW_Control
  8346  09D8  0862               	movf	??_setRFSW_Control,w
  8347  09D9  00A4               	movwf	setDelayOff_GO@value
  8348  09DA  0863               	movf	setRFSW_Control@sw,w
  8349  09DB  3192  2203  3189   	fcall	_setDelayOff_GO
  8350                           
  8351                           ;RF_Control_B1.c: 370: setRF_DimmerLights(sw, 1);
  8352  09DE  0020               	movlb	0	; select bank0
  8353  09DF  01DD               	clrf	setRF_DimmerLights@on
  8354  09E0  0ADD               	incf	setRF_DimmerLights@on,f
  8355  09E1  2A0A               	goto	L4
  8356  09E2                     l6635:	
  8357                           ;RF_Control_B1.c: 371: } else {
  8358                           
  8359                           
  8360                           ;RF_Control_B1.c: 372: RFSW->Status = 0;
  8361  09E2  0021               	movlb	1	; select bank1
  8362  09E3  0840               	movf	_RFSW^(0+128),w
  8363  09E4  0086               	movwf	6
  8364  09E5  0187               	clrf	7
  8365  09E6  1001               	bcf	1,0
  8366                           
  8367                           ;RF_Control_B1.c: 373: setSw_Status(sw, 0);
  8368  09E7  0020               	movlb	0	; select bank0
  8369  09E8  01A2               	clrf	setSw_Status@command
  8370  09E9  0863               	movf	setRFSW_Control@sw,w
  8371  09EA  31A6  26D0  3189   	fcall	_setSw_Status
  8372                           
  8373                           ;RF_Control_B1.c: 375: setDimmerLights_Trigger(sw, 1);
  8374  09ED  0020               	movlb	0	; select bank0
  8375  09EE  01A2               	clrf	setDimmerLights_Trigger@command
  8376  09EF  0AA2               	incf	setDimmerLights_Trigger@command,f
  8377  09F0  0863               	movf	setRFSW_Control@sw,w
  8378  09F1  31A7  270E  3189   	fcall	_setDimmerLights_Trigger
  8379                           
  8380                           ;RF_Control_B1.c: 376: setDimmerLights_Switch(sw, RFSW->Status);
  8381  09F4  0021               	movlb	1	; select bank1
  8382  09F5  0840               	movf	_RFSW^(0+128),w
  8383  09F6  0086               	movwf	6
  8384  09F7  0187               	clrf	7
  8385  09F8  3000               	movlw	0
  8386  09F9  1801               	btfsc	1,0
  8387  09FA  3001               	movlw	1
  8388  09FB  0020               	movlb	0	; select bank0
  8389  09FC  00A2               	movwf	setDimmerLights_Switch@command
  8390  09FD  0863               	movf	setRFSW_Control@sw,w
  8391  09FE  31A6  26FE  3189   	fcall	_setDimmerLights_Switch
  8392                           
  8393                           ;RF_Control_B1.c: 378: setDelayOff_GO(sw, 0, 0);
  8394  0A01  0020               	movlb	0	; select bank0
  8395  0A02  01A3               	clrf	setDelayOff_GO@command
  8396  0A03  01A4               	clrf	setDelayOff_GO@value
  8397  0A04  0863               	movf	setRFSW_Control@sw,w
  8398  0A05  3192  2203  3189   	fcall	_setDelayOff_GO
  8399                           
  8400                           ;RF_Control_B1.c: 379: setRF_DimmerLights(sw, 0);
  8401  0A08  0020               	movlb	0	; select bank0
  8402  0A09  01DD               	clrf	setRF_DimmerLights@on
  8403  0A0A                     L4:	
  8404  0A0A  0863               	movf	setRFSW_Control@sw,w
  8405  0A0B  3194  2449  3189   	fcall	_setRF_DimmerLights
  8406                           
  8407                           ;RF_Control_B1.c: 380: }
  8408                           ;RF_Control_B1.c: 381: }
  8409                           ;RF_Control_B1.c: 382: setBuz(1, 100);
  8410  0A0E  3064               	movlw	100
  8411  0A0F  0020               	movlb	0	; select bank0
  8412  0A10  00A9               	movwf	setBuz@time
  8413  0A11  3000               	movlw	0
  8414  0A12  00AA               	movwf	setBuz@time+1
  8415  0A13  3001               	movlw	1
  8416  0A14  3188  2079  3189   	fcall	_setBuz
  8417                           
  8418                           ;RF_Control_B1.c: 383: setTxData(1);
  8419  0A17  3001               	movlw	1
  8420  0A18  318B  2343         	fcall	_setTxData
  8421  0A1A  0008               	return
  8422  0A1B                     __end_of_setRFSW_Control:	
  8423                           
  8424                           	psect	text33
  8425  1203                     __ptext33:	
  8426 ;; *************** function _setDelayOff_GO *****************
  8427 ;; Defined at:
  8428 ;;		line 85 in file "../src/DelayOff_B1.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  sw              1    wreg     unsigned char 
  8431 ;;  command         1    3[BANK0 ] unsigned char 
  8432 ;;  value           1    4[BANK0 ] unsigned char 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  sw              1    7[BANK0 ] unsigned char 
  8435 ;; Return value:  Size  Location     Type
  8436 ;;		None               void
  8437 ;; Registers used:
  8438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;Total ram usage:        5 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    6
  8451 ;; This function calls:
  8452 ;;		_DelayOffPointSelect
  8453 ;;		_DelayTimejudge
  8454 ;; This function is called by:
  8455 ;;		_setRFSW_Control
  8456 ;;		_Sw_DimmerOffFunc
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           
  8461                           ;psect for function _setDelayOff_GO
  8462  1203                     _setDelayOff_GO:	
  8463                           
  8464                           ;incstack = 0
  8465                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8466                           ;setDelayOff_GO@sw stored from wreg
  8467  1203  0020               	movlb	0	; select bank0
  8468  1204  00A7               	movwf	setDelayOff_GO@sw
  8469                           
  8470                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  8471  1205  0827               	movf	setDelayOff_GO@sw,w
  8472  1206  3198  20DF  3192   	fcall	_DelayOffPointSelect
  8473                           
  8474                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  8475  1209  0021               	movlb	1	; select bank1
  8476  120A  0839               	movf	_DelayOff^(0+128),w
  8477  120B  0086               	movwf	6
  8478  120C  0187               	clrf	7
  8479  120D  1C01               	btfss	1,0
  8480  120E  0008               	return
  8481                           
  8482                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  8483  120F  0839               	movf	_DelayOff^(0+128),w
  8484  1210  0086               	movwf	6
  8485  1211  0187               	clrf	7
  8486  1212  0020               	movlb	0	; select bank0
  8487  1213  0823               	movf	setDelayOff_GO@command,w
  8488  1214  1081               	bcf	1,1
  8489  1215  1D03               	skipz
  8490  1216  1481               	bsf	1,1
  8491                           
  8492                           ;DelayOff_B1.c: 89: if (command == 1) {
  8493  1217  0823               	movf	setDelayOff_GO@command,w
  8494  1218  3A01               	xorlw	1
  8495  1219  1D03               	skipz
  8496  121A  2A46               	goto	l6409
  8497                           
  8498                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  8499  121B  0824               	movf	setDelayOff_GO@value,w
  8500  121C  319B  23F3  3192   	fcall	_DelayTimejudge
  8501  121F  0020               	movlb	0	; select bank0
  8502  1220  00A5               	movwf	??_setDelayOff_GO
  8503  1221  0021               	movlb	1	; select bank1
  8504  1222  0A39               	incf	_DelayOff^(0+128),w
  8505  1223  0086               	movwf	6
  8506  1224  0187               	clrf	7
  8507  1225  0020               	movlb	0	; select bank0
  8508  1226  0825               	movf	??_setDelayOff_GO,w
  8509  1227  0081               	movwf	1
  8510                           
  8511                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  8512  1228  300F               	movlw	15
  8513  1229  0524               	andwf	setDelayOff_GO@value,w
  8514  122A  00A5               	movwf	??_setDelayOff_GO
  8515  122B  0825               	movf	??_setDelayOff_GO,w
  8516  122C  3A05               	xorlw	5
  8517  122D  1903               	skipnz
  8518  122E  2A33               	goto	l6403
  8519  122F  0824               	movf	setDelayOff_GO@value,w
  8520  1230  390F               	andlw	15
  8521  1231  1D03               	btfss	3,2
  8522  1232  2A39               	goto	l6407
  8523  1233                     l6403:	
  8524  1233  3026               	movlw	38
  8525  1234  0224               	subwf	setDelayOff_GO@value,w
  8526  1235  1803               	skipnc
  8527  1236  2A39               	goto	l6407
  8528                           
  8529                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  8530  1237  0824               	movf	setDelayOff_GO@value,w
  8531  1238  2A3A               	goto	L5
  8532  1239                     l6407:	
  8533                           ;DelayOff_B1.c: 93: } else {
  8534                           
  8535                           
  8536                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  8537  1239  3005               	movlw	5
  8538  123A                     L5:	
  8539  123A  00A5               	movwf	??_setDelayOff_GO
  8540  123B  0827               	movf	setDelayOff_GO@sw,w
  8541  123C  3E1A               	addlw	26
  8542  123D  077D               	addwf	_product,w
  8543  123E  00A6               	movwf	??_setDelayOff_GO+1
  8544  123F  0826               	movf	??_setDelayOff_GO+1,w
  8545  1240  0086               	movwf	6
  8546  1241  3001               	movlw	1	; select bank2/3
  8547  1242  0087               	movwf	7
  8548  1243  0825               	movf	??_setDelayOff_GO,w
  8549  1244  0081               	movwf	1
  8550                           
  8551                           ;DelayOff_B1.c: 95: }
  8552                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  8553  1245  2A52               	goto	l6413
  8554  1246                     l6409:	
  8555  1246  08A3               	movf	setDelayOff_GO@command,f
  8556  1247  1D03               	skipz
  8557  1248  2A52               	goto	l6413
  8558                           
  8559                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  8560  1249  0827               	movf	setDelayOff_GO@sw,w
  8561  124A  3E1A               	addlw	26
  8562  124B  077D               	addwf	_product,w
  8563  124C  00A5               	movwf	??_setDelayOff_GO
  8564  124D  0825               	movf	??_setDelayOff_GO,w
  8565  124E  0086               	movwf	6
  8566  124F  3001               	movlw	1	; select bank2/3
  8567  1250  0087               	movwf	7
  8568  1251  0181               	clrf	1
  8569  1252                     l6413:	
  8570                           
  8571                           ;DelayOff_B1.c: 98: }
  8572                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  8573  1252  0021               	movlb	1	; select bank1
  8574  1253  0839               	movf	_DelayOff^(0+128),w
  8575  1254  3E02               	addlw	2
  8576  1255  0086               	movwf	6
  8577  1256  0187               	clrf	7
  8578  1257  3000               	movlw	0
  8579  1258  3FC0               	movwi [0]fsr1
  8580  1259  3FC1               	movwi [1]fsr1
  8581                           
  8582                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  8583  125A  0839               	movf	_DelayOff^(0+128),w
  8584  125B  3E04               	addlw	4
  8585  125C  0086               	movwf	6
  8586  125D  0187               	clrf	7
  8587  125E  0181               	clrf	1
  8588  125F  0008               	return
  8589  1260                     __end_of_setDelayOff_GO:	
  8590                           
  8591                           	psect	text34
  8592  1BF3                     __ptext34:	
  8593 ;; *************** function _DelayTimejudge *****************
  8594 ;; Defined at:
  8595 ;;		line 105 in file "../src/DelayOff_B1.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  value           1    wreg     unsigned char 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  value           1    1[BANK0 ] unsigned char 
  8600 ;;  i               1    2[BANK0 ] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      unsigned char 
  8603 ;; Registers used:
  8604 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;Total ram usage:        3 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    5
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		_setDelayOff_GO
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _DelayTimejudge
  8626  1BF3                     _DelayTimejudge:	
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  8630                           ;DelayTimejudge@value stored from wreg
  8631  1BF3  0020               	movlb	0	; select bank0
  8632  1BF4  00A1               	movwf	DelayTimejudge@value
  8633                           
  8634                           ;DelayOff_B1.c: 106: char i = 5;
  8635  1BF5  3005               	movlw	5
  8636  1BF6  00A0               	movwf	??_DelayTimejudge
  8637  1BF7  0820               	movf	??_DelayTimejudge,w
  8638  1BF8  00A2               	movwf	DelayTimejudge@i
  8639                           
  8640                           ;DelayOff_B1.c: 107: switch (value) {
  8641  1BF9  2C09               	goto	l6225
  8642  1BFA                     l6211:	
  8643                           ;DelayOff_B1.c: 108: case 0x05:
  8644                           
  8645                           
  8646                           ;DelayOff_B1.c: 109: i = 5;
  8647  1BFA  3005               	movlw	5
  8648  1BFB  2C05               	goto	L10
  8649  1BFC                     l6213:	
  8650                           ;DelayOff_B1.c: 111: case 0x10:
  8651                           
  8652                           ;DelayOff_B1.c: 110: break;
  8653                           
  8654                           
  8655                           ;DelayOff_B1.c: 112: i = 10;
  8656  1BFC  300A               	movlw	10
  8657  1BFD  2C05               	goto	L10
  8658  1BFE                     l6215:	
  8659                           ;DelayOff_B1.c: 114: case 0x15:
  8660                           
  8661                           ;DelayOff_B1.c: 113: break;
  8662                           
  8663                           
  8664                           ;DelayOff_B1.c: 115: i = 15;
  8665  1BFE  300F               	movlw	15
  8666  1BFF  2C05               	goto	L10
  8667  1C00                     l6217:	
  8668                           ;DelayOff_B1.c: 117: case 0x20:
  8669                           
  8670                           ;DelayOff_B1.c: 116: break;
  8671                           
  8672                           
  8673                           ;DelayOff_B1.c: 118: i = 20;
  8674  1C00  3014               	movlw	20
  8675  1C01  2C05               	goto	L10
  8676  1C02                     l6219:	
  8677                           ;DelayOff_B1.c: 120: case 0x25:
  8678                           
  8679                           ;DelayOff_B1.c: 119: break;
  8680                           
  8681                           
  8682                           ;DelayOff_B1.c: 121: i = 25;
  8683  1C02  3019               	movlw	25
  8684  1C03  2C05               	goto	L10
  8685  1C04                     l6221:	
  8686                           ;DelayOff_B1.c: 123: case 0x30:
  8687                           
  8688                           ;DelayOff_B1.c: 122: break;
  8689                           
  8690                           
  8691                           ;DelayOff_B1.c: 124: i = 30;
  8692  1C04  301E               	movlw	30
  8693  1C05                     L10:	
  8694  1C05  00A0               	movwf	??_DelayTimejudge
  8695  1C06  0820               	movf	??_DelayTimejudge,w
  8696  1C07  00A2               	movwf	DelayTimejudge@i
  8697                           
  8698                           ;DelayOff_B1.c: 126: }
  8699                           
  8700                           ;DelayOff_B1.c: 125: break;
  8701  1C08  2C1D               	goto	l6227
  8702  1C09                     l6225:	
  8703  1C09  0821               	movf	DelayTimejudge@value,w
  8704                           
  8705                           ; Switch size 1, requested type "space"
  8706                           ; Number of cases is 6, Range of values is 5 to 48
  8707                           ; switch strategies available:
  8708                           ; Name         Instructions Cycles
  8709                           ; simple_byte           19    10 (average)
  8710                           ; direct_byte           97     9 (fixed)
  8711                           ; jumptable            263     9 (fixed)
  8712                           ;	Chosen strategy is simple_byte
  8713  1C0A  3A05               	xorlw	5	; case 5
  8714  1C0B  1903               	skipnz
  8715  1C0C  2BFA               	goto	l6211
  8716  1C0D  3A15               	xorlw	21	; case 16
  8717  1C0E  1903               	skipnz
  8718  1C0F  2BFC               	goto	l6213
  8719  1C10  3A05               	xorlw	5	; case 21
  8720  1C11  1903               	skipnz
  8721  1C12  2BFE               	goto	l6215
  8722  1C13  3A35               	xorlw	53	; case 32
  8723  1C14  1903               	skipnz
  8724  1C15  2C00               	goto	l6217
  8725  1C16  3A05               	xorlw	5	; case 37
  8726  1C17  1903               	skipnz
  8727  1C18  2C02               	goto	l6219
  8728  1C19  3A15               	xorlw	21	; case 48
  8729  1C1A  1903               	skipnz
  8730  1C1B  2C04               	goto	l6221
  8731  1C1C  2C1D               	goto	l6227
  8732  1C1D                     l6227:	
  8733                           
  8734                           ;DelayOff_B1.c: 127: return i;
  8735  1C1D  0822               	movf	DelayTimejudge@i,w
  8736  1C1E  0008               	return
  8737  1C1F                     __end_of_DelayTimejudge:	
  8738                           
  8739                           	psect	text35
  8740  1E23                     __ptext35:	
  8741 ;; *************** function _setRFSW_AdjControl *****************
  8742 ;; Defined at:
  8743 ;;		line 387 in file "../src/RF_Control_B1.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  sw              1    wreg     unsigned char 
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;  sw              1   70[BANK0 ] unsigned char 
  8748 ;; Return value:  Size  Location     Type
  8749 ;;		None               void
  8750 ;; Registers used:
  8751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;Total ram usage:        3 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:   10
  8764 ;; This function calls:
  8765 ;;		_RfSWPointSelect
  8766 ;;		_setRF_DimmerValue
  8767 ;;		_setTxData
  8768 ;; This function is called by:
  8769 ;;		_setControl_Lights_Table
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           
  8774                           ;psect for function _setRFSW_AdjControl
  8775  1E23                     _setRFSW_AdjControl:	
  8776                           
  8777                           ;incstack = 0
  8778                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8779                           ;setRFSW_AdjControl@sw stored from wreg
  8780  1E23  0020               	movlb	0	; select bank0
  8781  1E24  00E6               	movwf	setRFSW_AdjControl@sw
  8782                           
  8783                           ;RF_Control_B1.c: 388: RfSWPointSelect(sw);
  8784  1E25  0866               	movf	setRFSW_AdjControl@sw,w
  8785  1E26  3198  20B3  319E   	fcall	_RfSWPointSelect
  8786                           
  8787                           ;RF_Control_B1.c: 389: if (RFSW->Status == 1) {
  8788  1E29  0021               	movlb	1	; select bank1
  8789  1E2A  0840               	movf	_RFSW^(0+128),w
  8790  1E2B  0086               	movwf	6
  8791  1E2C  0187               	clrf	7
  8792  1E2D  1C01               	btfss	1,0
  8793  1E2E  2E3B               	goto	l6659
  8794                           
  8795                           ;RF_Control_B1.c: 390: Memory->Modify=1;
  8796  1E2F  086E               	movf	_Memory^(0+128),w
  8797  1E30  3E24               	addlw	36
  8798  1E31  0086               	movwf	6
  8799  1E32  3002               	movlw	2	; select bank4/5
  8800  1E33  0087               	movwf	7
  8801  1E34  1401               	bsf	1,0
  8802                           
  8803                           ;RF_Control_B1.c: 391: setRF_DimmerValue(sw);
  8804  1E35  0020               	movlb	0	; select bank0
  8805  1E36  0866               	movf	setRFSW_AdjControl@sw,w
  8806  1E37  319D  2577  319E   	fcall	_setRF_DimmerValue
  8807                           
  8808                           ;RF_Control_B1.c: 392: } else {
  8809  1E3A  2E4D               	goto	l2537
  8810  1E3B                     l6659:	
  8811                           
  8812                           ;RF_Control_B1.c: 393: product->Data[9]=product->Data[20 + sw];
  8813  1E3B  0020               	movlb	0	; select bank0
  8814  1E3C  0866               	movf	setRFSW_AdjControl@sw,w
  8815  1E3D  3E14               	addlw	20
  8816  1E3E  077D               	addwf	_product,w
  8817  1E3F  00E4               	movwf	??_setRFSW_AdjControl
  8818  1E40  0864               	movf	??_setRFSW_AdjControl,w
  8819  1E41  0086               	movwf	6
  8820  1E42  3001               	movlw	1	; select bank2/3
  8821  1E43  0087               	movwf	7
  8822  1E44  0801               	movf	1,w
  8823  1E45  00E5               	movwf	??_setRFSW_AdjControl+1
  8824  1E46  087D               	movf	_product,w
  8825  1E47  3E09               	addlw	9
  8826  1E48  0086               	movwf	6
  8827  1E49  3001               	movlw	1	; select bank2/3
  8828  1E4A  0087               	movwf	7
  8829  1E4B  0865               	movf	??_setRFSW_AdjControl+1,w
  8830  1E4C  0081               	movwf	1
  8831  1E4D                     l2537:	
  8832                           
  8833                           ;RF_Control_B1.c: 394: }
  8834                           ;RF_Control_B1.c: 395: product->Data[17]=product->Data[26 + sw];
  8835  1E4D  0020               	movlb	0	; select bank0
  8836  1E4E  0866               	movf	setRFSW_AdjControl@sw,w
  8837  1E4F  3E1A               	addlw	26
  8838  1E50  077D               	addwf	_product,w
  8839  1E51  00E4               	movwf	??_setRFSW_AdjControl
  8840  1E52  0864               	movf	??_setRFSW_AdjControl,w
  8841  1E53  0086               	movwf	6
  8842  1E54  3001               	movlw	1	; select bank2/3
  8843  1E55  0087               	movwf	7
  8844  1E56  0801               	movf	1,w
  8845  1E57  00E5               	movwf	??_setRFSW_AdjControl+1
  8846  1E58  087D               	movf	_product,w
  8847  1E59  3E11               	addlw	17
  8848  1E5A  0086               	movwf	6
  8849  1E5B  3001               	movlw	1	; select bank2/3
  8850  1E5C  0087               	movwf	7
  8851  1E5D  0865               	movf	??_setRFSW_AdjControl+1,w
  8852  1E5E  0081               	movwf	1
  8853                           
  8854                           ;RF_Control_B1.c: 396: setTxData(1);
  8855  1E5F  3001               	movlw	1
  8856  1E60  318B  2343         	fcall	_setTxData
  8857  1E62  0008               	return
  8858  1E63                     __end_of_setRFSW_AdjControl:	
  8859                           
  8860                           	psect	text36
  8861  1D77                     __ptext36:	
  8862 ;; *************** function _setRF_DimmerValue *****************
  8863 ;; Defined at:
  8864 ;;		line 407 in file "../src/RF_Control_B1.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;  lights          1    wreg     unsigned char 
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  lights          1   67[BANK0 ] unsigned char 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;		None               void
  8871 ;; Registers used:
  8872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;Total ram usage:        3 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    9
  8885 ;; This function calls:
  8886 ;;		_setDimmerLights_AdjRF
  8887 ;; This function is called by:
  8888 ;;		_setRFSW_AdjControl
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           
  8893                           ;psect for function _setRF_DimmerValue
  8894  1D77                     _setRF_DimmerValue:	
  8895                           
  8896                           ;incstack = 0
  8897                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8898                           ;setRF_DimmerValue@lights stored from wreg
  8899  1D77  0020               	movlb	0	; select bank0
  8900  1D78  00E3               	movwf	setRF_DimmerValue@lights
  8901                           
  8902                           ;RF_Control_B1.c: 408: if (RF_Data[9] > 0x64) {
  8903  1D79  3065               	movlw	101
  8904  1D7A  0021               	movlb	1	; select bank1
  8905  1D7B  0229               	subwf	(_RF_Data^(0+128)+9),w
  8906  1D7C  1C03               	skipc
  8907  1D7D  2D84               	goto	l6509
  8908                           
  8909                           ;RF_Control_B1.c: 409: RF_Data[9] = 0x64;
  8910  1D7E  3064               	movlw	100
  8911  1D7F  0020               	movlb	0	; select bank0
  8912  1D80  00E1               	movwf	??_setRF_DimmerValue
  8913  1D81  0861               	movf	??_setRF_DimmerValue,w
  8914  1D82  0021               	movlb	1	; select bank1
  8915  1D83  00A9               	movwf	(_RF_Data^(0+128)+9)
  8916  1D84                     l6509:	
  8917                           
  8918                           ;RF_Control_B1.c: 410: }
  8919                           ;RF_Control_B1.c: 411: product->Data[9]=RF_Data[9];
  8920  1D84  0829               	movf	(_RF_Data^(0+128)+9),w
  8921  1D85  0020               	movlb	0	; select bank0
  8922  1D86  00E1               	movwf	??_setRF_DimmerValue
  8923  1D87  087D               	movf	_product,w
  8924  1D88  3E09               	addlw	9
  8925  1D89  0086               	movwf	6
  8926  1D8A  3001               	movlw	1	; select bank2/3
  8927  1D8B  0087               	movwf	7
  8928  1D8C  0861               	movf	??_setRF_DimmerValue,w
  8929  1D8D  0081               	movwf	1
  8930                           
  8931                           ;RF_Control_B1.c: 412: product->Data[11]=lights;
  8932  1D8E  0863               	movf	setRF_DimmerValue@lights,w
  8933  1D8F  00E1               	movwf	??_setRF_DimmerValue
  8934  1D90  087D               	movf	_product,w
  8935  1D91  3E0B               	addlw	11
  8936  1D92  0086               	movwf	6
  8937  1D93  3001               	movlw	1	; select bank2/3
  8938  1D94  0087               	movwf	7
  8939  1D95  0861               	movf	??_setRF_DimmerValue,w
  8940  1D96  0081               	movwf	1
  8941                           
  8942                           ;RF_Control_B1.c: 413: product->Data[(20 + lights)]=product->Data[9];
  8943  1D97  087D               	movf	_product,w
  8944  1D98  3E09               	addlw	9
  8945  1D99  0086               	movwf	6
  8946  1D9A  3001               	movlw	1	; select bank2/3
  8947  1D9B  0087               	movwf	7
  8948  1D9C  0801               	movf	1,w
  8949  1D9D  00E1               	movwf	??_setRF_DimmerValue
  8950  1D9E  0863               	movf	setRF_DimmerValue@lights,w
  8951  1D9F  3E14               	addlw	20
  8952  1DA0  077D               	addwf	_product,w
  8953  1DA1  00E2               	movwf	??_setRF_DimmerValue+1
  8954  1DA2  0862               	movf	??_setRF_DimmerValue+1,w
  8955  1DA3  0086               	movwf	6
  8956  1DA4  3001               	movlw	1	; select bank2/3
  8957  1DA5  0087               	movwf	7
  8958  1DA6  0861               	movf	??_setRF_DimmerValue,w
  8959  1DA7  0081               	movwf	1
  8960                           
  8961                           ;RF_Control_B1.c: 414: setDimmerLights_AdjRF(lights);
  8962  1DA8  0863               	movf	setRF_DimmerValue@lights,w
  8963  1DA9  3190  2000         	fcall	_setDimmerLights_AdjRF
  8964  1DAB  0008               	return
  8965  1DAC                     __end_of_setRF_DimmerValue:	
  8966                           
  8967                           	psect	text37
  8968  1000                     __ptext37:	
  8969 ;; *************** function _setDimmerLights_AdjRF *****************
  8970 ;; Defined at:
  8971 ;;		line 697 in file "../src/Dimmer_B1.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  lights          1    wreg     unsigned char 
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  lights          1   64[BANK0 ] unsigned char 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;		None               void
  8978 ;; Registers used:
  8979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;Total ram usage:        2 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    8
  8992 ;; This function calls:
  8993 ;;		_DimmerLightsPointSelect
  8994 ;;		_getPercentValue
  8995 ;; This function is called by:
  8996 ;;		_setRF_DimmerValue
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           
  9001                           ;psect for function _setDimmerLights_AdjRF
  9002  1000                     _setDimmerLights_AdjRF:	
  9003                           
  9004                           ;incstack = 0
  9005                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9006                           ;setDimmerLights_AdjRF@lights stored from wreg
  9007  1000  0020               	movlb	0	; select bank0
  9008  1001  00E0               	movwf	setDimmerLights_AdjRF@lights
  9009                           
  9010                           ;Dimmer_B1.c: 699: DimmerLightsPointSelect(lights);
  9011  1002  0860               	movf	setDimmerLights_AdjRF@lights,w
  9012  1003  31A7  27C5  3190   	fcall	_DimmerLightsPointSelect
  9013                           
  9014                           ;Dimmer_B1.c: 700: DimmerLights->AdjRF = 1;
  9015  1006  0878               	movf	_DimmerLights,w
  9016  1007  0086               	movwf	6
  9017  1008  3001               	movlw	1	; select bank2/3
  9018  1009  0087               	movwf	7
  9019  100A  1501               	bsf	1,2
  9020                           
  9021                           ;Dimmer_B1.c: 701: DimmerLights->Signal = 1;
  9022  100B  0878               	movf	_DimmerLights,w
  9023  100C  0086               	movwf	6
  9024  100D  3001               	movlw	1	; select bank2/3
  9025  100E  0087               	movwf	7
  9026  100F  1481               	bsf	1,1
  9027                           
  9028                           ;Dimmer_B1.c: 702: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  9029  1010  087D               	movf	_product,w
  9030  1011  3E09               	addlw	9
  9031  1012  0086               	movwf	6
  9032  1013  3001               	movlw	1	; select bank2/3
  9033  1014  0087               	movwf	7
  9034  1015  0801               	movf	1,w
  9035  1016  3191  21A8         	fcall	_getPercentValue
  9036  1018  0020               	movlb	0	; select bank0
  9037  1019  00DF               	movwf	??_setDimmerLights_AdjRF
  9038  101A  0878               	movf	_DimmerLights,w
  9039  101B  3E05               	addlw	5
  9040  101C  0086               	movwf	6
  9041  101D  3001               	movlw	1	; select bank2/3
  9042  101E  0087               	movwf	7
  9043  101F  085F               	movf	??_setDimmerLights_AdjRF,w
  9044  1020  0081               	movwf	1
  9045  1021  0008               	return
  9046  1022                     __end_of_setDimmerLights_AdjRF:	
  9047                           
  9048                           	psect	text38
  9049  11A8                     __ptext38:	
  9050 ;; *************** function _getPercentValue *****************
  9051 ;; Defined at:
  9052 ;;		line 770 in file "../src/Dimmer_B1.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;  value           1    wreg     unsigned char 
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  value           1   59[BANK0 ] unsigned char 
  9057 ;;  i               3   60[BANK0 ] float 
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      unsigned char 
  9060 ;; Registers used:
  9061 ;;		wreg, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;Total ram usage:        6 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    7
  9074 ;; This function calls:
  9075 ;;		___awtoft
  9076 ;;		___ftadd
  9077 ;;		___ftdiv
  9078 ;;		___ftmul
  9079 ;;		___fttol
  9080 ;; This function is called by:
  9081 ;;		_setDimmerLights_AdjRF
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           
  9086                           ;psect for function _getPercentValue
  9087  11A8                     _getPercentValue:	
  9088                           
  9089                           ;incstack = 0
  9090                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  9091                           ;getPercentValue@value stored from wreg
  9092  11A8  0020               	movlb	0	; select bank0
  9093  11A9  00DB               	movwf	getPercentValue@value
  9094                           
  9095                           ;Dimmer_B1.c: 772: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  9096  11AA  3000               	movlw	0
  9097  11AB  00DC               	movwf	getPercentValue@i
  9098  11AC  30E0               	movlw	224
  9099  11AD  00DD               	movwf	getPercentValue@i+1
  9100  11AE  3041               	movlw	65
  9101  11AF  00DE               	movwf	getPercentValue@i+2
  9102                           
  9103                           ;Dimmer_B1.c: 773: i /= 100;
  9104  11B0  3000               	movlw	0
  9105  11B1  00AE               	movwf	___ftdiv@f2
  9106  11B2  30C8               	movlw	200
  9107  11B3  00AF               	movwf	___ftdiv@f2+1
  9108  11B4  3042               	movlw	66
  9109  11B5  00B0               	movwf	___ftdiv@f2+2
  9110  11B6  085C               	movf	getPercentValue@i,w
  9111  11B7  00B1               	movwf	___ftdiv@f1
  9112  11B8  085D               	movf	getPercentValue@i+1,w
  9113  11B9  00B2               	movwf	___ftdiv@f1+1
  9114  11BA  085E               	movf	getPercentValue@i+2,w
  9115  11BB  00B3               	movwf	___ftdiv@f1+2
  9116  11BC  318B  23E4  3191   	fcall	___ftdiv
  9117  11BF  0020               	movlb	0	; select bank0
  9118  11C0  082E               	movf	?___ftdiv,w
  9119  11C1  00DC               	movwf	getPercentValue@i
  9120  11C2  082F               	movf	?___ftdiv+1,w
  9121  11C3  00DD               	movwf	getPercentValue@i+1
  9122  11C4  0830               	movf	?___ftdiv+2,w
  9123  11C5  00DE               	movwf	getPercentValue@i+2
  9124                           
  9125                           ;Dimmer_B1.c: 774: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  9126  11C6  085B               	movf	getPercentValue@value,w
  9127  11C7  00D9               	movwf	??_getPercentValue
  9128  11C8  01DA               	clrf	??_getPercentValue+1
  9129  11C9  09D9               	comf	??_getPercentValue,f
  9130  11CA  09DA               	comf	??_getPercentValue+1,f
  9131  11CB  0AD9               	incf	??_getPercentValue,f
  9132  11CC  1903               	skipnz
  9133  11CD  0ADA               	incf	??_getPercentValue+1,f
  9134  11CE  0859               	movf	??_getPercentValue,w
  9135  11CF  3E64               	addlw	100
  9136  11D0  00A8               	movwf	___awtoft@c
  9137  11D1  3000               	movlw	0
  9138  11D2  3D5A               	addwfc	??_getPercentValue+1,w
  9139  11D3  00A9               	movwf	___awtoft@c+1
  9140  11D4  319A  22E9  3191   	fcall	___awtoft
  9141  11D7  0020               	movlb	0	; select bank0
  9142  11D8  0828               	movf	?___awtoft,w
  9143  11D9  00B1               	movwf	___ftmul@f2
  9144  11DA  0829               	movf	?___awtoft+1,w
  9145  11DB  00B2               	movwf	___ftmul@f2+1
  9146  11DC  082A               	movf	?___awtoft+2,w
  9147  11DD  00B3               	movwf	___ftmul@f2+2
  9148  11DE  085C               	movf	getPercentValue@i,w
  9149  11DF  00AE               	movwf	___ftmul@f1
  9150  11E0  085D               	movf	getPercentValue@i+1,w
  9151  11E1  00AF               	movwf	___ftmul@f1+1
  9152  11E2  085E               	movf	getPercentValue@i+2,w
  9153  11E3  00B0               	movwf	___ftmul@f1+2
  9154  11E4  3187  274B  3191   	fcall	___ftmul
  9155  11E7  0020               	movlb	0	; select bank0
  9156  11E8  082E               	movf	?___ftmul,w
  9157  11E9  00C1               	movwf	___ftadd@f2
  9158  11EA  082F               	movf	?___ftmul+1,w
  9159  11EB  00C2               	movwf	___ftadd@f2+1
  9160  11EC  0830               	movf	?___ftmul+2,w
  9161  11ED  00C3               	movwf	___ftadd@f2+2
  9162  11EE  3000               	movlw	0
  9163  11EF  00BE               	movwf	___ftadd@f1
  9164  11F0  3000               	movlw	0
  9165  11F1  00BF               	movwf	___ftadd@f1+1
  9166  11F2  3042               	movlw	66
  9167  11F3  00C0               	movwf	___ftadd@f1+2
  9168  11F4  318E  2612  3191   	fcall	___ftadd
  9169  11F7  0020               	movlb	0	; select bank0
  9170  11F8  083E               	movf	?___ftadd,w
  9171  11F9  00CB               	movwf	___fttol@f1
  9172  11FA  083F               	movf	?___ftadd+1,w
  9173  11FB  00CC               	movwf	___fttol@f1+1
  9174  11FC  0840               	movf	?___ftadd+2,w
  9175  11FD  00CD               	movwf	___fttol@f1+2
  9176  11FE  3197  2779         	fcall	___fttol
  9177  1200  0020               	movlb	0	; select bank0
  9178  1201  084B               	movf	?___fttol,w
  9179  1202  0008               	return
  9180  1203                     __end_of_getPercentValue:	
  9181                           
  9182                           	psect	text39
  9183  074B                     __ptext39:	
  9184 ;; *************** function ___ftmul *****************
  9185 ;; Defined at:
  9186 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;  f1              3   14[BANK0 ] float 
  9189 ;;  f2              3   17[BANK0 ] float 
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  9192 ;;  sign            1   29[BANK0 ] unsigned char 
  9193 ;;  cntr            1   28[BANK0 ] unsigned char 
  9194 ;;  exp             1   24[BANK0 ] unsigned char 
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  3   14[BANK0 ] float 
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0, pclath, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9204 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;Total ram usage:       16 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    6
  9211 ;; This function calls:
  9212 ;;		___ftpack
  9213 ;; This function is called by:
  9214 ;;		_getPercentValue
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           
  9219                           ;psect for function ___ftmul
  9220  074B                     ___ftmul:	
  9221                           
  9222                           ;incstack = 0
  9223                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9224  074B  0020               	movlb	0	; select bank0
  9225  074C  082E               	movf	___ftmul@f1,w
  9226  074D  00B4               	movwf	??___ftmul
  9227  074E  082F               	movf	___ftmul@f1+1,w
  9228  074F  00B5               	movwf	??___ftmul+1
  9229  0750  0830               	movf	___ftmul@f1+2,w
  9230  0751  00B6               	movwf	??___ftmul+2
  9231  0752  1003               	clrc
  9232  0753  0D35               	rlf	??___ftmul+1,w
  9233  0754  0D36               	rlf	??___ftmul+2,w
  9234  0755  00B7               	movwf	??___ftmul+3
  9235  0756  0837               	movf	??___ftmul+3,w
  9236  0757  00B8               	movwf	___ftmul@exp
  9237  0758  08B8               	movf	___ftmul@exp,f
  9238  0759  1D03               	skipz
  9239  075A  2F62               	goto	l6099
  9240  075B  3000               	movlw	0
  9241  075C  00AE               	movwf	?___ftmul
  9242  075D  3000               	movlw	0
  9243  075E  00AF               	movwf	?___ftmul+1
  9244  075F  3000               	movlw	0
  9245  0760  00B0               	movwf	?___ftmul+2
  9246  0761  0008               	return
  9247  0762                     l6099:	
  9248  0762  0831               	movf	___ftmul@f2,w
  9249  0763  00B4               	movwf	??___ftmul
  9250  0764  0832               	movf	___ftmul@f2+1,w
  9251  0765  00B5               	movwf	??___ftmul+1
  9252  0766  0833               	movf	___ftmul@f2+2,w
  9253  0767  00B6               	movwf	??___ftmul+2
  9254  0768  1003               	clrc
  9255  0769  0D35               	rlf	??___ftmul+1,w
  9256  076A  0D36               	rlf	??___ftmul+2,w
  9257  076B  00B7               	movwf	??___ftmul+3
  9258  076C  0837               	movf	??___ftmul+3,w
  9259  076D  00BD               	movwf	___ftmul@sign
  9260  076E  08BD               	movf	___ftmul@sign,f
  9261  076F  1D03               	skipz
  9262  0770  2F78               	goto	l6105
  9263  0771  3000               	movlw	0
  9264  0772  00AE               	movwf	?___ftmul
  9265  0773  3000               	movlw	0
  9266  0774  00AF               	movwf	?___ftmul+1
  9267  0775  3000               	movlw	0
  9268  0776  00B0               	movwf	?___ftmul+2
  9269  0777  0008               	return
  9270  0778                     l6105:	
  9271  0778  083D               	movf	___ftmul@sign,w
  9272  0779  3E7B               	addlw	123
  9273  077A  00B4               	movwf	??___ftmul
  9274  077B  0834               	movf	??___ftmul,w
  9275  077C  07B8               	addwf	___ftmul@exp,f
  9276  077D  082E               	movf	___ftmul@f1,w
  9277  077E  00B4               	movwf	??___ftmul
  9278  077F  082F               	movf	___ftmul@f1+1,w
  9279  0780  00B5               	movwf	??___ftmul+1
  9280  0781  0830               	movf	___ftmul@f1+2,w
  9281  0782  00B6               	movwf	??___ftmul+2
  9282  0783  3010               	movlw	16
  9283  0784                     u4425:	
  9284  0784  36B6               	lsrf	??___ftmul+2,f
  9285  0785  0CB5               	rrf	??___ftmul+1,f
  9286  0786  0CB4               	rrf	??___ftmul,f
  9287  0787  0B89               	decfsz	9,f
  9288  0788  2F84               	goto	u4425
  9289  0789  0834               	movf	??___ftmul,w
  9290  078A  00B7               	movwf	??___ftmul+3
  9291  078B  0837               	movf	??___ftmul+3,w
  9292  078C  00BD               	movwf	___ftmul@sign
  9293  078D  0831               	movf	___ftmul@f2,w
  9294  078E  00B4               	movwf	??___ftmul
  9295  078F  0832               	movf	___ftmul@f2+1,w
  9296  0790  00B5               	movwf	??___ftmul+1
  9297  0791  0833               	movf	___ftmul@f2+2,w
  9298  0792  00B6               	movwf	??___ftmul+2
  9299  0793  3010               	movlw	16
  9300  0794                     u4435:	
  9301  0794  36B6               	lsrf	??___ftmul+2,f
  9302  0795  0CB5               	rrf	??___ftmul+1,f
  9303  0796  0CB4               	rrf	??___ftmul,f
  9304  0797  0B89               	decfsz	9,f
  9305  0798  2F94               	goto	u4435
  9306  0799  0834               	movf	??___ftmul,w
  9307  079A  00B7               	movwf	??___ftmul+3
  9308  079B  0837               	movf	??___ftmul+3,w
  9309  079C  06BD               	xorwf	___ftmul@sign,f
  9310  079D  3080               	movlw	128
  9311  079E  00B4               	movwf	??___ftmul
  9312  079F  0834               	movf	??___ftmul,w
  9313  07A0  05BD               	andwf	___ftmul@sign,f
  9314  07A1  17AF               	bsf	___ftmul@f1+1,7
  9315  07A2  17B2               	bsf	___ftmul@f2+1,7
  9316  07A3  30FF               	movlw	255
  9317  07A4  05B1               	andwf	___ftmul@f2,f
  9318  07A5  30FF               	movlw	255
  9319  07A6  05B2               	andwf	___ftmul@f2+1,f
  9320  07A7  3000               	movlw	0
  9321  07A8  05B3               	andwf	___ftmul@f2+2,f
  9322  07A9  3000               	movlw	0
  9323  07AA  00B9               	movwf	___ftmul@f3_as_product
  9324  07AB  3000               	movlw	0
  9325  07AC  00BA               	movwf	___ftmul@f3_as_product+1
  9326  07AD  3000               	movlw	0
  9327  07AE  00BB               	movwf	___ftmul@f3_as_product+2
  9328  07AF  3007               	movlw	7
  9329  07B0  00B4               	movwf	??___ftmul
  9330  07B1  0834               	movf	??___ftmul,w
  9331  07B2  00BC               	movwf	___ftmul@cntr
  9332  07B3                     l6117:	
  9333  07B3  1C2E               	btfss	___ftmul@f1,0
  9334  07B4  2FBB               	goto	l6121
  9335  07B5  0831               	movf	___ftmul@f2,w
  9336  07B6  07B9               	addwf	___ftmul@f3_as_product,f
  9337  07B7  0832               	movf	___ftmul@f2+1,w
  9338  07B8  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9339  07B9  0833               	movf	___ftmul@f2+2,w
  9340  07BA  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9341  07BB                     l6121:	
  9342  07BB  3001               	movlw	1
  9343  07BC                     u4455:	
  9344  07BC  36B0               	lsrf	___ftmul@f1+2,f
  9345  07BD  0CAF               	rrf	___ftmul@f1+1,f
  9346  07BE  0CAE               	rrf	___ftmul@f1,f
  9347  07BF  0B89               	decfsz	9,f
  9348  07C0  2FBC               	goto	u4455
  9349  07C1  3001               	movlw	1
  9350  07C2                     u4465:	
  9351  07C2  35B1               	lslf	___ftmul@f2,f
  9352  07C3  0DB2               	rlf	___ftmul@f2+1,f
  9353  07C4  0DB3               	rlf	___ftmul@f2+2,f
  9354  07C5  0B89               	decfsz	9,f
  9355  07C6  2FC2               	goto	u4465
  9356  07C7  3001               	movlw	1
  9357  07C8  02BC               	subwf	___ftmul@cntr,f
  9358  07C9  1D03               	btfss	3,2
  9359  07CA  2FB3               	goto	l6117
  9360  07CB  3009               	movlw	9
  9361  07CC  00B4               	movwf	??___ftmul
  9362  07CD  0834               	movf	??___ftmul,w
  9363  07CE  00BC               	movwf	___ftmul@cntr
  9364  07CF                     l6129:	
  9365  07CF  1C2E               	btfss	___ftmul@f1,0
  9366  07D0  2FD7               	goto	l6133
  9367  07D1  0831               	movf	___ftmul@f2,w
  9368  07D2  07B9               	addwf	___ftmul@f3_as_product,f
  9369  07D3  0832               	movf	___ftmul@f2+1,w
  9370  07D4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9371  07D5  0833               	movf	___ftmul@f2+2,w
  9372  07D6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9373  07D7                     l6133:	
  9374  07D7  3001               	movlw	1
  9375  07D8                     u4495:	
  9376  07D8  36B0               	lsrf	___ftmul@f1+2,f
  9377  07D9  0CAF               	rrf	___ftmul@f1+1,f
  9378  07DA  0CAE               	rrf	___ftmul@f1,f
  9379  07DB  0B89               	decfsz	9,f
  9380  07DC  2FD8               	goto	u4495
  9381  07DD  3001               	movlw	1
  9382  07DE                     u4505:	
  9383  07DE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9384  07DF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9385  07E0  0CB9               	rrf	___ftmul@f3_as_product,f
  9386  07E1  0B89               	decfsz	9,f
  9387  07E2  2FDE               	goto	u4505
  9388  07E3  3001               	movlw	1
  9389  07E4  02BC               	subwf	___ftmul@cntr,f
  9390  07E5  1D03               	btfss	3,2
  9391  07E6  2FCF               	goto	l6129
  9392  07E7  0839               	movf	___ftmul@f3_as_product,w
  9393  07E8  00A0               	movwf	___ftpack@arg
  9394  07E9  083A               	movf	___ftmul@f3_as_product+1,w
  9395  07EA  00A1               	movwf	___ftpack@arg+1
  9396  07EB  083B               	movf	___ftmul@f3_as_product+2,w
  9397  07EC  00A2               	movwf	___ftpack@arg+2
  9398  07ED  0838               	movf	___ftmul@exp,w
  9399  07EE  00B4               	movwf	??___ftmul
  9400  07EF  0834               	movf	??___ftmul,w
  9401  07F0  00A3               	movwf	___ftpack@exp
  9402  07F1  083D               	movf	___ftmul@sign,w
  9403  07F2  00B5               	movwf	??___ftmul+1
  9404  07F3  0835               	movf	??___ftmul+1,w
  9405  07F4  00A4               	movwf	___ftpack@sign
  9406  07F5  3193  231C         	fcall	___ftpack
  9407  07F7  0020               	movlb	0	; select bank0
  9408  07F8  0820               	movf	?___ftpack,w
  9409  07F9  00AE               	movwf	?___ftmul
  9410  07FA  0821               	movf	?___ftpack+1,w
  9411  07FB  00AF               	movwf	?___ftmul+1
  9412  07FC  0822               	movf	?___ftpack+2,w
  9413  07FD  00B0               	movwf	?___ftmul+2
  9414  07FE  0008               	return
  9415  07FF                     __end_of___ftmul:	
  9416                           
  9417                           	psect	text40
  9418  0E12                     __ptext40:	
  9419 ;; *************** function ___ftadd *****************
  9420 ;; Defined at:
  9421 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  f1              3   30[BANK0 ] float 
  9424 ;;  f2              3   33[BANK0 ] float 
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;  exp1            1   42[BANK0 ] unsigned char 
  9427 ;;  exp2            1   41[BANK0 ] unsigned char 
  9428 ;;  sign            1   40[BANK0 ] unsigned char 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  3   30[BANK0 ] float 
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0, pclath, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9438 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;Total ram usage:       13 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    6
  9445 ;; This function calls:
  9446 ;;		___ftpack
  9447 ;; This function is called by:
  9448 ;;		_getPercentValue
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           
  9453                           ;psect for function ___ftadd
  9454  0E12                     ___ftadd:	
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9458  0E12  0020               	movlb	0	; select bank0
  9459  0E13  083E               	movf	___ftadd@f1,w
  9460  0E14  00C4               	movwf	??___ftadd
  9461  0E15  083F               	movf	___ftadd@f1+1,w
  9462  0E16  00C5               	movwf	??___ftadd+1
  9463  0E17  0840               	movf	___ftadd@f1+2,w
  9464  0E18  00C6               	movwf	??___ftadd+2
  9465  0E19  1003               	clrc
  9466  0E1A  0D45               	rlf	??___ftadd+1,w
  9467  0E1B  0D46               	rlf	??___ftadd+2,w
  9468  0E1C  00C7               	movwf	??___ftadd+3
  9469  0E1D  0847               	movf	??___ftadd+3,w
  9470  0E1E  00CA               	movwf	___ftadd@exp1
  9471  0E1F  0841               	movf	___ftadd@f2,w
  9472  0E20  00C4               	movwf	??___ftadd
  9473  0E21  0842               	movf	___ftadd@f2+1,w
  9474  0E22  00C5               	movwf	??___ftadd+1
  9475  0E23  0843               	movf	___ftadd@f2+2,w
  9476  0E24  00C6               	movwf	??___ftadd+2
  9477  0E25  1003               	clrc
  9478  0E26  0D45               	rlf	??___ftadd+1,w
  9479  0E27  0D46               	rlf	??___ftadd+2,w
  9480  0E28  00C7               	movwf	??___ftadd+3
  9481  0E29  0847               	movf	??___ftadd+3,w
  9482  0E2A  00C9               	movwf	___ftadd@exp2
  9483  0E2B  084A               	movf	___ftadd@exp1,w
  9484  0E2C  1903               	btfsc	3,2
  9485  0E2D  2E3A               	goto	l5987
  9486  0E2E  0849               	movf	___ftadd@exp2,w
  9487  0E2F  024A               	subwf	___ftadd@exp1,w
  9488  0E30  1803               	skipnc
  9489  0E31  2E41               	goto	l5991
  9490  0E32  034A               	decf	___ftadd@exp1,w
  9491  0E33  3AFF               	xorlw	255
  9492  0E34  0749               	addwf	___ftadd@exp2,w
  9493  0E35  00C4               	movwf	??___ftadd
  9494  0E36  3019               	movlw	25
  9495  0E37  0244               	subwf	??___ftadd,w
  9496  0E38  1C03               	skipc
  9497  0E39  2E41               	goto	l5991
  9498  0E3A                     l5987:	
  9499  0E3A  0841               	movf	___ftadd@f2,w
  9500  0E3B  00BE               	movwf	?___ftadd
  9501  0E3C  0842               	movf	___ftadd@f2+1,w
  9502  0E3D  00BF               	movwf	?___ftadd+1
  9503  0E3E  0843               	movf	___ftadd@f2+2,w
  9504  0E3F  00C0               	movwf	?___ftadd+2
  9505  0E40  0008               	return
  9506  0E41                     l5991:	
  9507  0E41  0849               	movf	___ftadd@exp2,w
  9508  0E42  1903               	btfsc	3,2
  9509  0E43  0008               	return
  9510  0E44  084A               	movf	___ftadd@exp1,w
  9511  0E45  0249               	subwf	___ftadd@exp2,w
  9512  0E46  1803               	skipnc
  9513  0E47  2E50               	goto	l5997
  9514  0E48  0349               	decf	___ftadd@exp2,w
  9515  0E49  3AFF               	xorlw	255
  9516  0E4A  074A               	addwf	___ftadd@exp1,w
  9517  0E4B  00C4               	movwf	??___ftadd
  9518  0E4C  3019               	movlw	25
  9519  0E4D  0244               	subwf	??___ftadd,w
  9520  0E4E  1803               	btfsc	3,0
  9521  0E4F  0008               	return
  9522  0E50                     l5997:	
  9523  0E50  3006               	movlw	6
  9524  0E51  00C4               	movwf	??___ftadd
  9525  0E52  0844               	movf	??___ftadd,w
  9526  0E53  00C8               	movwf	___ftadd@sign
  9527  0E54  1BC0               	btfsc	___ftadd@f1+2,7
  9528  0E55  17C8               	bsf	___ftadd@sign,7
  9529  0E56  1BC3               	btfsc	___ftadd@f2+2,7
  9530  0E57  1748               	bsf	___ftadd@sign,6
  9531  0E58  17BF               	bsf	___ftadd@f1+1,7
  9532  0E59  30FF               	movlw	255
  9533  0E5A  05BE               	andwf	___ftadd@f1,f
  9534  0E5B  30FF               	movlw	255
  9535  0E5C  05BF               	andwf	___ftadd@f1+1,f
  9536  0E5D  3000               	movlw	0
  9537  0E5E  05C0               	andwf	___ftadd@f1+2,f
  9538  0E5F  17C2               	bsf	___ftadd@f2+1,7
  9539  0E60  30FF               	movlw	255
  9540  0E61  05C1               	andwf	___ftadd@f2,f
  9541  0E62  30FF               	movlw	255
  9542  0E63  05C2               	andwf	___ftadd@f2+1,f
  9543  0E64  3000               	movlw	0
  9544  0E65  05C3               	andwf	___ftadd@f2+2,f
  9545  0E66  0849               	movf	___ftadd@exp2,w
  9546  0E67  024A               	subwf	___ftadd@exp1,w
  9547  0E68  1803               	skipnc
  9548  0E69  2E8C               	goto	l6019
  9549  0E6A                     l6009:	
  9550  0E6A  3001               	movlw	1
  9551  0E6B                     u4185:	
  9552  0E6B  35C1               	lslf	___ftadd@f2,f
  9553  0E6C  0DC2               	rlf	___ftadd@f2+1,f
  9554  0E6D  0DC3               	rlf	___ftadd@f2+2,f
  9555  0E6E  0B89               	decfsz	9,f
  9556  0E6F  2E6B               	goto	u4185
  9557  0E70  3001               	movlw	1
  9558  0E71  02C9               	subwf	___ftadd@exp2,f
  9559  0E72  0849               	movf	___ftadd@exp2,w
  9560  0E73  064A               	xorwf	___ftadd@exp1,w
  9561  0E74  1903               	skipnz
  9562  0E75  2E87               	goto	l6017
  9563  0E76  3001               	movlw	1
  9564  0E77  02C8               	subwf	___ftadd@sign,f
  9565  0E78  0848               	movf	___ftadd@sign,w
  9566  0E79  3907               	andlw	7
  9567  0E7A  1903               	btfsc	3,2
  9568  0E7B  2E87               	goto	l6017
  9569  0E7C  2E6A               	goto	l6009
  9570  0E7D                     l6015:	
  9571  0E7D  3001               	movlw	1
  9572  0E7E                     u4215:	
  9573  0E7E  36C0               	lsrf	___ftadd@f1+2,f
  9574  0E7F  0CBF               	rrf	___ftadd@f1+1,f
  9575  0E80  0CBE               	rrf	___ftadd@f1,f
  9576  0E81  0B89               	decfsz	9,f
  9577  0E82  2E7E               	goto	u4215
  9578  0E83  3001               	movlw	1
  9579  0E84  00C4               	movwf	??___ftadd
  9580  0E85  0844               	movf	??___ftadd,w
  9581  0E86  07CA               	addwf	___ftadd@exp1,f
  9582  0E87                     l6017:	
  9583  0E87  084A               	movf	___ftadd@exp1,w
  9584  0E88  0649               	xorwf	___ftadd@exp2,w
  9585  0E89  1903               	btfsc	3,2
  9586  0E8A  2EB1               	goto	l3300
  9587  0E8B  2E7D               	goto	l6015
  9588  0E8C                     l6019:	
  9589  0E8C  084A               	movf	___ftadd@exp1,w
  9590  0E8D  0249               	subwf	___ftadd@exp2,w
  9591  0E8E  1803               	skipnc
  9592  0E8F  2EB1               	goto	l3300
  9593  0E90                     l6021:	
  9594  0E90  3001               	movlw	1
  9595  0E91                     u4245:	
  9596  0E91  35BE               	lslf	___ftadd@f1,f
  9597  0E92  0DBF               	rlf	___ftadd@f1+1,f
  9598  0E93  0DC0               	rlf	___ftadd@f1+2,f
  9599  0E94  0B89               	decfsz	9,f
  9600  0E95  2E91               	goto	u4245
  9601  0E96  3001               	movlw	1
  9602  0E97  02CA               	subwf	___ftadd@exp1,f
  9603  0E98  0849               	movf	___ftadd@exp2,w
  9604  0E99  064A               	xorwf	___ftadd@exp1,w
  9605  0E9A  1903               	skipnz
  9606  0E9B  2EAD               	goto	l6029
  9607  0E9C  3001               	movlw	1
  9608  0E9D  02C8               	subwf	___ftadd@sign,f
  9609  0E9E  0848               	movf	___ftadd@sign,w
  9610  0E9F  3907               	andlw	7
  9611  0EA0  1903               	btfsc	3,2
  9612  0EA1  2EAD               	goto	l6029
  9613  0EA2  2E90               	goto	l6021
  9614  0EA3                     l6027:	
  9615  0EA3  3001               	movlw	1
  9616  0EA4                     u4275:	
  9617  0EA4  36C3               	lsrf	___ftadd@f2+2,f
  9618  0EA5  0CC2               	rrf	___ftadd@f2+1,f
  9619  0EA6  0CC1               	rrf	___ftadd@f2,f
  9620  0EA7  0B89               	decfsz	9,f
  9621  0EA8  2EA4               	goto	u4275
  9622  0EA9  3001               	movlw	1
  9623  0EAA  00C4               	movwf	??___ftadd
  9624  0EAB  0844               	movf	??___ftadd,w
  9625  0EAC  07C9               	addwf	___ftadd@exp2,f
  9626  0EAD                     l6029:	
  9627  0EAD  084A               	movf	___ftadd@exp1,w
  9628  0EAE  0649               	xorwf	___ftadd@exp2,w
  9629  0EAF  1D03               	skipz
  9630  0EB0  2EA3               	goto	l6027
  9631  0EB1                     l3300:	
  9632  0EB1  1FC8               	btfss	___ftadd@sign,7
  9633  0EB2  2EC3               	goto	l6033
  9634  0EB3  30FF               	movlw	255
  9635  0EB4  06BE               	xorwf	___ftadd@f1,f
  9636  0EB5  30FF               	movlw	255
  9637  0EB6  06BF               	xorwf	___ftadd@f1+1,f
  9638  0EB7  30FF               	movlw	255
  9639  0EB8  06C0               	xorwf	___ftadd@f1+2,f
  9640  0EB9  3001               	movlw	1
  9641  0EBA  07BE               	addwf	___ftadd@f1,f
  9642  0EBB  3000               	movlw	0
  9643  0EBC  1803               	skipnc
  9644  0EBD  3001               	movlw	1
  9645  0EBE  07BF               	addwf	___ftadd@f1+1,f
  9646  0EBF  3000               	movlw	0
  9647  0EC0  1803               	skipnc
  9648  0EC1  3001               	movlw	1
  9649  0EC2  07C0               	addwf	___ftadd@f1+2,f
  9650  0EC3                     l6033:	
  9651  0EC3  1F48               	btfss	___ftadd@sign,6
  9652  0EC4  2ED5               	goto	l6037
  9653  0EC5  30FF               	movlw	255
  9654  0EC6  06C1               	xorwf	___ftadd@f2,f
  9655  0EC7  30FF               	movlw	255
  9656  0EC8  06C2               	xorwf	___ftadd@f2+1,f
  9657  0EC9  30FF               	movlw	255
  9658  0ECA  06C3               	xorwf	___ftadd@f2+2,f
  9659  0ECB  3001               	movlw	1
  9660  0ECC  07C1               	addwf	___ftadd@f2,f
  9661  0ECD  3000               	movlw	0
  9662  0ECE  1803               	skipnc
  9663  0ECF  3001               	movlw	1
  9664  0ED0  07C2               	addwf	___ftadd@f2+1,f
  9665  0ED1  3000               	movlw	0
  9666  0ED2  1803               	skipnc
  9667  0ED3  3001               	movlw	1
  9668  0ED4  07C3               	addwf	___ftadd@f2+2,f
  9669  0ED5                     l6037:	
  9670  0ED5  01C8               	clrf	___ftadd@sign
  9671  0ED6  083E               	movf	___ftadd@f1,w
  9672  0ED7  07C1               	addwf	___ftadd@f2,f
  9673  0ED8  083F               	movf	___ftadd@f1+1,w
  9674  0ED9  3DC2               	addwfc	___ftadd@f2+1,f
  9675  0EDA  0840               	movf	___ftadd@f1+2,w
  9676  0EDB  3DC3               	addwfc	___ftadd@f2+2,f
  9677  0EDC  1FC3               	btfss	___ftadd@f2+2,7
  9678  0EDD  2EF0               	goto	l6047
  9679  0EDE  30FF               	movlw	255
  9680  0EDF  06C1               	xorwf	___ftadd@f2,f
  9681  0EE0  30FF               	movlw	255
  9682  0EE1  06C2               	xorwf	___ftadd@f2+1,f
  9683  0EE2  30FF               	movlw	255
  9684  0EE3  06C3               	xorwf	___ftadd@f2+2,f
  9685  0EE4  3001               	movlw	1
  9686  0EE5  07C1               	addwf	___ftadd@f2,f
  9687  0EE6  3000               	movlw	0
  9688  0EE7  1803               	skipnc
  9689  0EE8  3001               	movlw	1
  9690  0EE9  07C2               	addwf	___ftadd@f2+1,f
  9691  0EEA  3000               	movlw	0
  9692  0EEB  1803               	skipnc
  9693  0EEC  3001               	movlw	1
  9694  0EED  07C3               	addwf	___ftadd@f2+2,f
  9695  0EEE  01C8               	clrf	___ftadd@sign
  9696  0EEF  0AC8               	incf	___ftadd@sign,f
  9697  0EF0                     l6047:	
  9698  0EF0  0841               	movf	___ftadd@f2,w
  9699  0EF1  00A0               	movwf	___ftpack@arg
  9700  0EF2  0842               	movf	___ftadd@f2+1,w
  9701  0EF3  00A1               	movwf	___ftpack@arg+1
  9702  0EF4  0843               	movf	___ftadd@f2+2,w
  9703  0EF5  00A2               	movwf	___ftpack@arg+2
  9704  0EF6  084A               	movf	___ftadd@exp1,w
  9705  0EF7  00C4               	movwf	??___ftadd
  9706  0EF8  0844               	movf	??___ftadd,w
  9707  0EF9  00A3               	movwf	___ftpack@exp
  9708  0EFA  0848               	movf	___ftadd@sign,w
  9709  0EFB  00C5               	movwf	??___ftadd+1
  9710  0EFC  0845               	movf	??___ftadd+1,w
  9711  0EFD  00A4               	movwf	___ftpack@sign
  9712  0EFE  3193  231C         	fcall	___ftpack
  9713  0F00  0020               	movlb	0	; select bank0
  9714  0F01  0820               	movf	?___ftpack,w
  9715  0F02  00BE               	movwf	?___ftadd
  9716  0F03  0821               	movf	?___ftpack+1,w
  9717  0F04  00BF               	movwf	?___ftadd+1
  9718  0F05  0822               	movf	?___ftpack+2,w
  9719  0F06  00C0               	movwf	?___ftadd+2
  9720  0F07  0008               	return
  9721  0F08                     __end_of___ftadd:	
  9722                           
  9723                           	psect	text41
  9724  1AC8                     __ptext41:	
  9725 ;; *************** function _RF_RxDisable *****************
  9726 ;; Defined at:
  9727 ;;		line 210 in file "../src/RF_Control_B1.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;  rf              1    wreg     unsigned char 
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;  rf              1    4[BANK0 ] unsigned char 
  9732 ;; Return value:  Size  Location     Type
  9733 ;;		None               void
  9734 ;; Registers used:
  9735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;Total ram usage:        1 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    7
  9748 ;; This function calls:
  9749 ;;		_CC2500_WriteCommand
  9750 ;;		_RfPointSelect
  9751 ;; This function is called by:
  9752 ;;		_setRF_Main
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           
  9757                           ;psect for function _RF_RxDisable
  9758  1AC8                     _RF_RxDisable:	
  9759                           
  9760                           ;incstack = 0
  9761                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9762                           ;RF_RxDisable@rf stored from wreg
  9763  1AC8  0020               	movlb	0	; select bank0
  9764  1AC9  00A4               	movwf	RF_RxDisable@rf
  9765                           
  9766                           ;RF_Control_B1.c: 211: RfPointSelect(rf);
  9767  1ACA  0824               	movf	RF_RxDisable@rf,w
  9768  1ACB  31A6  26DF  319A   	fcall	_RfPointSelect
  9769                           
  9770                           ;RF_Control_B1.c: 213: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  9771  1ACE  0021               	movlb	1	; select bank1
  9772  1ACF  083F               	movf	_RF^(0+128),w
  9773  1AD0  0086               	movwf	6
  9774  1AD1  0187               	clrf	7
  9775  1AD2  1881               	btfsc	1,1
  9776  1AD3  2AD9               	goto	l7005
  9777  1AD4  083F               	movf	_RF^(0+128),w
  9778  1AD5  0086               	movwf	6
  9779  1AD6  0187               	clrf	7
  9780  1AD7  1D81               	btfss	1,3
  9781  1AD8  0008               	return
  9782  1AD9                     l7005:	
  9783                           
  9784                           ;RF_Control_B1.c: 214: RF->RxStatus = 0;
  9785  1AD9  083F               	movf	_RF^(0+128),w
  9786  1ADA  0086               	movwf	6
  9787  1ADB  0187               	clrf	7
  9788  1ADC  1181               	bcf	1,3
  9789                           
  9790                           ;RF_Control_B1.c: 215: RF->ReceiveGO = 0;
  9791  1ADD  083F               	movf	_RF^(0+128),w
  9792  1ADE  0086               	movwf	6
  9793  1ADF  0187               	clrf	7
  9794  1AE0  1081               	bcf	1,1
  9795                           
  9796                           ;RF_Control_B1.c: 216: CC2500_WriteCommand(0x36);
  9797  1AE1  3036               	movlw	54
  9798  1AE2  31A6  26EE  319A   	fcall	_CC2500_WriteCommand
  9799                           
  9800                           ;RF_Control_B1.c: 217: CC2500_WriteCommand(0x3A);
  9801  1AE5  303A               	movlw	58
  9802  1AE6  31A6  26EE         	fcall	_CC2500_WriteCommand
  9803  1AE8  0008               	return
  9804  1AE9                     __end_of_RF_RxDisable:	
  9805                           
  9806                           	psect	text42
  9807  1EA6                     __ptext42:	
  9808 ;; *************** function _CC2500_TxData *****************
  9809 ;; Defined at:
  9810 ;;		line 32 in file "../src/CC2500_B1.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;		None
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9815 ;; Return value:  Size  Location     Type
  9816 ;;		None               void
  9817 ;; Registers used:
  9818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;Total ram usage:        2 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    7
  9831 ;; This function calls:
  9832 ;;		_CC2500_WriteByte
  9833 ;;		_CC2500_WriteCommand
  9834 ;; This function is called by:
  9835 ;;		_setRF_Main
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           
  9840                           ;psect for function _CC2500_TxData
  9841  1EA6                     _CC2500_TxData:	
  9842                           
  9843                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9844                           ;CC2500_B1.c: 35: RC4 = 0;
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9848  1EA6  0020               	movlb	0	; select bank0
  9849  1EA7  120E               	bcf	14,4	;volatile
  9850                           
  9851                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9852  1EA8  307F               	movlw	127
  9853  1EA9  00A4               	movwf	??_CC2500_TxData
  9854  1EAA  0824               	movf	??_CC2500_TxData,w
  9855  1EAB  0021               	movlb	1	; select bank1
  9856  1EAC  00C3               	movwf	_SPI0Buffer^(0+128)
  9857  1EAD                     l288:	
  9858                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9859                           
  9860  1EAD  0020               	movlb	0	; select bank0
  9861  1EAE  190E               	btfsc	14,2	;volatile
  9862  1EAF  2EAD               	goto	l288
  9863                           
  9864                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9865  1EB0  3199  213D  319E   	fcall	_CC2500_WriteByte
  9866                           
  9867                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9868  1EB3  0021               	movlb	1	; select bank1
  9869  1EB4  0845               	movf	_Tx_Length^(0+128),w
  9870  1EB5  0020               	movlb	0	; select bank0
  9871  1EB6  00A4               	movwf	??_CC2500_TxData
  9872  1EB7  0824               	movf	??_CC2500_TxData,w
  9873  1EB8  0021               	movlb	1	; select bank1
  9874  1EB9  00C3               	movwf	_SPI0Buffer^(0+128)
  9875                           
  9876                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9877  1EBA  3199  213D  319E   	fcall	_CC2500_WriteByte
  9878                           
  9879                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9880  1EBD  0020               	movlb	0	; select bank0
  9881  1EBE  01A5               	clrf	CC2500_TxData@loop_e
  9882  1EBF                     l6813:	
  9883  1EBF  0021               	movlb	1	; select bank1
  9884  1EC0  0845               	movf	_Tx_Length^(0+128),w
  9885  1EC1  0020               	movlb	0	; select bank0
  9886  1EC2  0225               	subwf	CC2500_TxData@loop_e,w
  9887  1EC3  1803               	btfsc	3,0
  9888  1EC4  2ED7               	goto	l293
  9889                           
  9890                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9891  1EC5  0825               	movf	CC2500_TxData@loop_e,w
  9892  1EC6  3EA0               	addlw	_RF_Data& (0+255)
  9893  1EC7  0086               	movwf	6
  9894  1EC8  0187               	clrf	7
  9895  1EC9  0801               	movf	1,w
  9896  1ECA  00A4               	movwf	??_CC2500_TxData
  9897  1ECB  0824               	movf	??_CC2500_TxData,w
  9898  1ECC  0021               	movlb	1	; select bank1
  9899  1ECD  00C3               	movwf	_SPI0Buffer^(0+128)
  9900                           
  9901                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9902  1ECE  3199  213D  319E   	fcall	_CC2500_WriteByte
  9903  1ED1  3001               	movlw	1
  9904  1ED2  0020               	movlb	0	; select bank0
  9905  1ED3  00A4               	movwf	??_CC2500_TxData
  9906  1ED4  0824               	movf	??_CC2500_TxData,w
  9907  1ED5  07A5               	addwf	CC2500_TxData@loop_e,f
  9908  1ED6  2EBF               	goto	l6813
  9909  1ED7                     l293:	
  9910                           
  9911                           ;CC2500_B1.c: 44: }
  9912                           ;CC2500_B1.c: 45: RC4 = 1;
  9913  1ED7  160E               	bsf	14,4	;volatile
  9914                           
  9915                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9916  1ED8  3035               	movlw	53
  9917  1ED9  31A6  26EE  319E   	fcall	_CC2500_WriteCommand
  9918  1EDC                     l294:	
  9919                           ;CC2500_B1.c: 47: while (RB0 == 0);
  9920                           
  9921  1EDC  0020               	movlb	0	; select bank0
  9922  1EDD  1C0D               	btfss	13,0	;volatile
  9923  1EDE  2EDC               	goto	l294
  9924  1EDF                     l297:	
  9925                           ;CC2500_B1.c: 48: while (RB0 == 1);
  9926                           
  9927  1EDF  180D               	btfsc	13,0	;volatile
  9928  1EE0  2EDF               	goto	l297
  9929                           
  9930                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9931  1EE1  3036               	movlw	54
  9932  1EE2  31A6  26EE  319E   	fcall	_CC2500_WriteCommand
  9933                           
  9934                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9935  1EE5  303B               	movlw	59
  9936  1EE6  31A6  26EE         	fcall	_CC2500_WriteCommand
  9937                           
  9938                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  9939  1EE8  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9940  1EE9  0008               	return
  9941  1EEA                     __end_of_CC2500_TxData:	
  9942                           
  9943                           	psect	text43
  9944  12BE                     __ptext43:	
  9945 ;; *************** function _CC2500_RxData *****************
  9946 ;; Defined at:
  9947 ;;		line 57 in file "../src/CC2500_B1.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;		None
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9952 ;; Return value:  Size  Location     Type
  9953 ;;		None               void
  9954 ;; Registers used:
  9955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;Total ram usage:        2 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    7
  9968 ;; This function calls:
  9969 ;;		_CC2500_ReadByte
  9970 ;;		_CC2500_ReadStatus
  9971 ;;		_CC2500_WriteByte
  9972 ;;		_CC2500_WriteCommand
  9973 ;; This function is called by:
  9974 ;;		_setRF_Main
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           
  9979                           ;psect for function _CC2500_RxData
  9980  12BE                     _CC2500_RxData:	
  9981                           
  9982                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9983                           ;CC2500_B1.c: 62: if (RB0 == 1)
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9987  12BE  0020               	movlb	0	; select bank0
  9988  12BF  180D               	btfsc	13,0	;volatile
  9989  12C0                     l304:	
  9990                           ;CC2500_B1.c: 63: {
  9991                           ;CC2500_B1.c: 64: while (RB0 == 1);
  9992                           
  9993  12C0  180D               	btfsc	13,0	;volatile
  9994  12C1  2AC0               	goto	l304
  9995                           
  9996                           ;CC2500_B1.c: 65: }
  9997                           ;CC2500_B1.c: 67: CC2500_ReadStatus(0x3B);
  9998  12C2  303B               	movlw	59
  9999  12C3  3199  21BD  3192   	fcall	_CC2500_ReadStatus
 10000                           
 10001                           ;CC2500_B1.c: 68: if (s_data != 0) {
 10002  12C6  0021               	movlb	1	; select bank1
 10003  12C7  0848               	movf	_s_data^(0+128),w
 10004  12C8  1903               	btfsc	3,2
 10005  12C9  2B14               	goto	l6859
 10006                           
 10007                           ;CC2500_B1.c: 69: RC4 = 0;
 10008  12CA  0020               	movlb	0	; select bank0
 10009  12CB  120E               	bcf	14,4	;volatile
 10010                           
 10011                           ;CC2500_B1.c: 70: SPI0Buffer = 0x3F + 0xC0;
 10012  12CC  30FF               	movlw	255
 10013  12CD  00A4               	movwf	??_CC2500_RxData
 10014  12CE  0824               	movf	??_CC2500_RxData,w
 10015  12CF  0021               	movlb	1	; select bank1
 10016  12D0  00C3               	movwf	_SPI0Buffer^(0+128)
 10017  12D1                     l308:	
 10018                           ;CC2500_B1.c: 71: while (RC2 == 1);
 10019                           
 10020  12D1  0020               	movlb	0	; select bank0
 10021  12D2  190E               	btfsc	14,2	;volatile
 10022  12D3  2AD1               	goto	l308
 10023                           
 10024                           ;CC2500_B1.c: 72: CC2500_WriteByte();
 10025  12D4  3199  213D  3192   	fcall	_CC2500_WriteByte
 10026                           
 10027                           ;CC2500_B1.c: 74: CC2500_ReadByte();
 10028  12D7  319A  2210  3192   	fcall	_CC2500_ReadByte
 10029                           
 10030                           ;CC2500_B1.c: 75: Rx_Length = SPI0Buffer;
 10031  12DA  0021               	movlb	1	; select bank1
 10032  12DB  0843               	movf	_SPI0Buffer^(0+128),w
 10033  12DC  0020               	movlb	0	; select bank0
 10034  12DD  00A4               	movwf	??_CC2500_RxData
 10035  12DE  0824               	movf	??_CC2500_RxData,w
 10036  12DF  0021               	movlb	1	; select bank1
 10037  12E0  00C2               	movwf	_Rx_Length^(0+128)
 10038                           
 10039                           ;CC2500_B1.c: 76: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
 10040  12E1  0020               	movlb	0	; select bank0
 10041  12E2  01A5               	clrf	CC2500_RxData@loop_f
 10042  12E3                     l6845:	
 10043  12E3  0021               	movlb	1	; select bank1
 10044  12E4  0842               	movf	_Rx_Length^(0+128),w
 10045  12E5  0020               	movlb	0	; select bank0
 10046  12E6  0225               	subwf	CC2500_RxData@loop_f,w
 10047  12E7  1803               	btfsc	3,0
 10048  12E8  2AFB               	goto	l6847
 10049                           
 10050                           ;CC2500_B1.c: 77: CC2500_ReadByte();
 10051  12E9  319A  2210  3192   	fcall	_CC2500_ReadByte
 10052                           
 10053                           ;CC2500_B1.c: 78: RF_Data[loop_f] = SPI0Buffer;
 10054  12EC  0021               	movlb	1	; select bank1
 10055  12ED  0843               	movf	_SPI0Buffer^(0+128),w
 10056  12EE  0020               	movlb	0	; select bank0
 10057  12EF  00A4               	movwf	??_CC2500_RxData
 10058  12F0  0825               	movf	CC2500_RxData@loop_f,w
 10059  12F1  3EA0               	addlw	_RF_Data& (0+255)
 10060  12F2  0086               	movwf	6
 10061  12F3  0187               	clrf	7
 10062  12F4  0824               	movf	??_CC2500_RxData,w
 10063  12F5  0081               	movwf	1
 10064  12F6  3001               	movlw	1
 10065  12F7  00A4               	movwf	??_CC2500_RxData
 10066  12F8  0824               	movf	??_CC2500_RxData,w
 10067  12F9  07A5               	addwf	CC2500_RxData@loop_f,f
 10068  12FA  2AE3               	goto	l6845
 10069  12FB                     l6847:	
 10070                           
 10071                           ;CC2500_B1.c: 79: }
 10072                           ;CC2500_B1.c: 80: CC2500_ReadByte();
 10073  12FB  319A  2210  3192   	fcall	_CC2500_ReadByte
 10074                           
 10075                           ;CC2500_B1.c: 81: RSSI = SPI0Buffer;
 10076  12FE  0021               	movlb	1	; select bank1
 10077  12FF  0843               	movf	_SPI0Buffer^(0+128),w
 10078  1300  0020               	movlb	0	; select bank0
 10079  1301  00A4               	movwf	??_CC2500_RxData
 10080  1302  0824               	movf	??_CC2500_RxData,w
 10081  1303  0021               	movlb	1	; select bank1
 10082  1304  00C1               	movwf	_RSSI^(0+128)
 10083                           
 10084                           ;CC2500_B1.c: 82: CC2500_ReadByte();
 10085  1305  319A  2210  3192   	fcall	_CC2500_ReadByte
 10086                           
 10087                           ;CC2500_B1.c: 83: CRC = SPI0Buffer;
 10088  1308  0021               	movlb	1	; select bank1
 10089  1309  0843               	movf	_SPI0Buffer^(0+128),w
 10090  130A  0020               	movlb	0	; select bank0
 10091  130B  00A4               	movwf	??_CC2500_RxData
 10092  130C  0824               	movf	??_CC2500_RxData,w
 10093  130D  0021               	movlb	1	; select bank1
 10094  130E  00B8               	movwf	_CRC^(0+128)
 10095                           
 10096                           ;CC2500_B1.c: 84: RC4 = 1;
 10097  130F  0020               	movlb	0	; select bank0
 10098  1310  160E               	bsf	14,4	;volatile
 10099                           
 10100                           ;CC2500_B1.c: 85: if (CRC & 0x80)
 10101  1311  0021               	movlb	1	; select bank1
 10102  1312  1BB8               	btfsc	_CRC^(0+128),7
 10103                           
 10104                           ;CC2500_B1.c: 86: Receive_OK = 1;
 10105  1313  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
 10106  1314                     l6859:	
 10107                           
 10108                           ;CC2500_B1.c: 87: }
 10109                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
 10110  1314  3036               	movlw	54
 10111  1315  31A6  26EE  3192   	fcall	_CC2500_WriteCommand
 10112                           
 10113                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
 10114  1318  303A               	movlw	58
 10115  1319  31A6  26EE         	fcall	_CC2500_WriteCommand
 10116  131B  0008               	return
 10117  131C                     __end_of_CC2500_RxData:	
 10118                           
 10119                           	psect	text44
 10120  19BD                     __ptext44:	
 10121 ;; *************** function _CC2500_ReadStatus *****************
 10122 ;; Defined at:
 10123 ;;		line 262 in file "../src/CC2500_B1.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;  status_addr     1    wreg     unsigned char 
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;  status_addr     1    3[BANK0 ] unsigned char 
 10128 ;; Return value:  Size  Location     Type
 10129 ;;		None               void
 10130 ;; Registers used:
 10131 ;;		wreg, status,2, status,0, pclath, cstack
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;Total ram usage:        2 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    6
 10144 ;; This function calls:
 10145 ;;		_CC2500_ReadByte
 10146 ;;		_CC2500_WriteByte
 10147 ;; This function is called by:
 10148 ;;		_CC2500_RxData
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function _CC2500_ReadStatus
 10154  19BD                     _CC2500_ReadStatus:	
 10155                           
 10156                           ;incstack = 0
 10157                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
 10158                           ;CC2500_ReadStatus@status_addr stored from wreg
 10159  19BD  0020               	movlb	0	; select bank0
 10160  19BE  00A3               	movwf	CC2500_ReadStatus@status_addr
 10161                           
 10162                           ;CC2500_B1.c: 263: RC4 = 0;
 10163  19BF  120E               	bcf	14,4	;volatile
 10164                           
 10165                           ;CC2500_B1.c: 264: SPI0Buffer = status_addr + 0xC0;
 10166  19C0  0823               	movf	CC2500_ReadStatus@status_addr,w
 10167  19C1  3EC0               	addlw	192
 10168  19C2  00A2               	movwf	??_CC2500_ReadStatus
 10169  19C3  0822               	movf	??_CC2500_ReadStatus,w
 10170  19C4  0021               	movlb	1	; select bank1
 10171  19C5  00C3               	movwf	_SPI0Buffer^(0+128)
 10172  19C6                     l384:	
 10173                           ;CC2500_B1.c: 266: while (RC2 == 1);
 10174                           
 10175  19C6  0020               	movlb	0	; select bank0
 10176  19C7  190E               	btfsc	14,2	;volatile
 10177  19C8  29C6               	goto	l384
 10178                           
 10179                           ;CC2500_B1.c: 268: CC2500_WriteByte();
 10180  19C9  3199  213D  3199   	fcall	_CC2500_WriteByte
 10181                           
 10182                           ;CC2500_B1.c: 269: CC2500_ReadByte();
 10183  19CC  319A  2210         	fcall	_CC2500_ReadByte
 10184                           
 10185                           ;CC2500_B1.c: 270: RC4 = 1;
 10186  19CE  0020               	movlb	0	; select bank0
 10187  19CF  160E               	bsf	14,4	;volatile
 10188                           
 10189                           ;CC2500_B1.c: 272: s_data = SPI0Buffer;
 10190  19D0  0021               	movlb	1	; select bank1
 10191  19D1  0843               	movf	_SPI0Buffer^(0+128),w
 10192  19D2  0020               	movlb	0	; select bank0
 10193  19D3  00A2               	movwf	??_CC2500_ReadStatus
 10194  19D4  0822               	movf	??_CC2500_ReadStatus,w
 10195  19D5  0021               	movlb	1	; select bank1
 10196  19D6  00C8               	movwf	_s_data^(0+128)
 10197  19D7  0008               	return
 10198  19D8                     __end_of_CC2500_ReadStatus:	
 10199                           
 10200                           	psect	text45
 10201  1A10                     __ptext45:	
 10202 ;; *************** function _CC2500_ReadByte *****************
 10203 ;; Defined at:
 10204 ;;		line 206 in file "../src/CC2500_B1.c"
 10205 ;; Parameters:    Size  Location     Type
 10206 ;;		None
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10209 ;; Return value:  Size  Location     Type
 10210 ;;		None               void
 10211 ;; Registers used:
 10212 ;;		wreg, status,2, status,0
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;Total ram usage:        2 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    5
 10225 ;; This function calls:
 10226 ;;		Nothing
 10227 ;; This function is called by:
 10228 ;;		_CC2500_RxData
 10229 ;;		_CC2500_ReadStatus
 10230 ;;		_CC2500_ReadREG
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _CC2500_ReadByte
 10236  1A10                     _CC2500_ReadByte:	
 10237                           
 10238                           ;CC2500_B1.c: 207: unsigned char loop_b;
 10239                           ;CC2500_B1.c: 208: for (loop_b = 0; loop_b < 8; loop_b++) {
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10243  1A10  0020               	movlb	0	; select bank0
 10244  1A11  01A1               	clrf	CC2500_ReadByte@loop_b
 10245  1A12                     L11:	
 10246  1A12  3008               	movlw	8
 10247  1A13  0221               	subwf	CC2500_ReadByte@loop_b,w
 10248  1A14  1803               	btfsc	3,0
 10249  1A15  0008               	return
 10250                           
 10251                           ;CC2500_B1.c: 209: RC1 = 1;
 10252  1A16  148E               	bsf	14,1	;volatile
 10253                           
 10254                           ;CC2500_B1.c: 210: SPI0Buffer <<= 1;
 10255  1A17  1003               	clrc
 10256  1A18  0021               	movlb	1	; select bank1
 10257  1A19  0DC3               	rlf	_SPI0Buffer^(0+128),f
 10258                           
 10259                           ;CC2500_B1.c: 211: if (RC2 == 1)
 10260  1A1A  0020               	movlb	0	; select bank0
 10261  1A1B  1D0E               	btfss	14,2	;volatile
 10262  1A1C  2A20               	goto	l6545
 10263                           
 10264                           ;CC2500_B1.c: 212: SPI0Buffer |= 0x01;
 10265  1A1D  0021               	movlb	1	; select bank1
 10266  1A1E  1443               	bsf	_SPI0Buffer^(0+128),0
 10267  1A1F  2A26               	goto	l6547
 10268  1A20                     l6545:	
 10269                           
 10270                           ;CC2500_B1.c: 213: else
 10271                           ;CC2500_B1.c: 214: SPI0Buffer &= 0xFE;
 10272  1A20  30FE               	movlw	254
 10273  1A21  0020               	movlb	0	; select bank0
 10274  1A22  00A0               	movwf	??_CC2500_ReadByte
 10275  1A23  0820               	movf	??_CC2500_ReadByte,w
 10276  1A24  0021               	movlb	1	; select bank1
 10277  1A25  05C3               	andwf	_SPI0Buffer^(0+128),f
 10278  1A26                     l6547:	
 10279                           
 10280                           ;CC2500_B1.c: 215: RC1 = 0;
 10281  1A26  0020               	movlb	0	; select bank0
 10282  1A27  108E               	bcf	14,1	;volatile
 10283  1A28  3001               	movlw	1
 10284  1A29  00A0               	movwf	??_CC2500_ReadByte
 10285  1A2A  0820               	movf	??_CC2500_ReadByte,w
 10286  1A2B  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10287  1A2C  2A12               	goto	L11
 10288  1A2D                     __end_of_CC2500_ReadByte:	
 10289                           
 10290                           	psect	text46
 10291  2574                     __ptext46:	
 10292 ;; *************** function _RF_Initialization *****************
 10293 ;; Defined at:
 10294 ;;		line 19 in file "../src/RF_Control_B1.c"
 10295 ;; Parameters:    Size  Location     Type
 10296 ;;		None
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;		None
 10299 ;; Return value:  Size  Location     Type
 10300 ;;		None               void
 10301 ;; Registers used:
 10302 ;;		wreg, status,2, status,0, pclath, cstack
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;Total ram usage:        0 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    6
 10315 ;; This function calls:
 10316 ;;		_setRF_Initialization
 10317 ;; This function is called by:
 10318 ;;		_main
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           
 10323                           ;psect for function _RF_Initialization
 10324  2574                     _RF_Initialization:	
 10325                           
 10326                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
 10327                           
 10328                           ;incstack = 0
 10329                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10330  2574  3001               	movlw	1
 10331  2575  31A5  25A1         	fcall	_setRF_Initialization
 10332  2577  0008               	return
 10333  2578                     __end_of_RF_Initialization:	
 10334                           
 10335                           	psect	text47
 10336  25A1                     __ptext47:	
 10337 ;; *************** function _setRF_Initialization *****************
 10338 ;; Defined at:
 10339 ;;		line 52 in file "../src/RF_Control_B1.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  rf              1    wreg     unsigned char 
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  rf              1    0[COMMON] unsigned char 
 10344 ;; Return value:  Size  Location     Type
 10345 ;;		None               void
 10346 ;; Registers used:
 10347 ;;		wreg
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10357 ;;Total ram usage:        1 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; Hardware stack levels required when called:    5
 10360 ;; This function calls:
 10361 ;;		Nothing
 10362 ;; This function is called by:
 10363 ;;		_RF_Initialization
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           
 10368                           ;psect for function _setRF_Initialization
 10369  25A1                     _setRF_Initialization:	
 10370                           
 10371                           ;RF_Control_B1.c: 55: Tx_Length = 21;
 10372                           
 10373                           ;incstack = 0
 10374                           ; Regs used in _setRF_Initialization: [wreg]
 10375  25A1  3015               	movlw	21
 10376  25A2  0020               	movlb	0	; select bank0
 10377  25A3  00A0               	movwf	??_setRF_Initialization
 10378  25A4  0820               	movf	??_setRF_Initialization,w
 10379  25A5  0021               	movlb	1	; select bank1
 10380  25A6  00C5               	movwf	_Tx_Length^(0+128)
 10381  25A7  0008               	return
 10382  25A8                     __end_of_setRF_Initialization:	
 10383                           
 10384                           	psect	text48
 10385  19A2                     __ptext48:	
 10386 ;; *************** function _Mcu_Initialization *****************
 10387 ;; Defined at:
 10388 ;;		line 30 in file "../src/MCU_B1.c"
 10389 ;; Parameters:    Size  Location     Type
 10390 ;;		None
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;		None
 10393 ;; Return value:  Size  Location     Type
 10394 ;;		None               void
 10395 ;; Registers used:
 10396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;Total ram usage:        1 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; Hardware stack levels required when called:    6
 10409 ;; This function calls:
 10410 ;;		_ADC_Set
 10411 ;;		_Fosc_Set
 10412 ;;		_INT_Set
 10413 ;;		_IOC_Set
 10414 ;;		_IO_Set
 10415 ;;		_TMR0_Set
 10416 ;;		_WDT_Set
 10417 ;; This function is called by:
 10418 ;;		_main
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           
 10423                           ;psect for function _Mcu_Initialization
 10424  19A2                     _Mcu_Initialization:	
 10425                           
 10426                           ;MCU_B1.c: 32: Fosc_Set();
 10427                           
 10428                           ;incstack = 0
 10429                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10430  19A2  31A5  2570  3199   	fcall	_Fosc_Set
 10431                           
 10432                           ;MCU_B1.c: 34: IO_Set();
 10433  19A5  3199  216F  3199   	fcall	_IO_Set
 10434                           
 10435                           ;MCU_B1.c: 36: TMR0_Set();
 10436  19A8  31A6  268C  3199   	fcall	_TMR0_Set
 10437                           
 10438                           ;MCU_B1.c: 38: ;;
 10439                           ;MCU_B1.c: 40: ADC_Set();
 10440  19AB  31A5  259A  3199   	fcall	_ADC_Set
 10441                           
 10442                           ;MCU_B1.c: 44: INT_Set();
 10443  19AE  31A5  2581  3199   	fcall	_INT_Set
 10444                           
 10445                           ;MCU_B1.c: 46: IOC_Set();
 10446  19B1  31A6  267F  3199   	fcall	_IOC_Set
 10447                           
 10448                           ;MCU_B1.c: 48: ;;
 10449                           ;MCU_B1.c: 50: ;;
 10450                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10451  19B4  3020               	movlw	_VarMemory& (0+255)
 10452  19B5  0020               	movlb	0	; select bank0
 10453  19B6  00A1               	movwf	??_Mcu_Initialization
 10454  19B7  0821               	movf	??_Mcu_Initialization,w
 10455  19B8  0021               	movlb	1	; select bank1
 10456  19B9  00EE               	movwf	_Memory^(0+128)
 10457                           
 10458                           ;MCU_B1.c: 54: WDT_Set();
 10459  19BA  3199  2125         	fcall	_WDT_Set
 10460  19BC  0008               	return
 10461  19BD                     __end_of_Mcu_Initialization:	
 10462                           
 10463                           	psect	text49
 10464  1925                     __ptext49:	
 10465 ;; *************** function _WDT_Set *****************
 10466 ;; Defined at:
 10467 ;;		line 892 in file "../src/MCU_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg, fsr1l, fsr1h
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        1 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_Mcu_Initialization
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _WDT_Set
 10497  1925                     _WDT_Set:	
 10498                           
 10499                           ;MCU_B1.c: 893: WDTCON = 0b00010111;;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _WDT_Set: [wregfsr1]
 10503  1925  3017               	movlw	23
 10504  1926  0021               	movlb	1	; select bank1
 10505  1927  0097               	movwf	23	;volatile
 10506                           
 10507                           ;MCU_B1.c: 894: WDT = &_WDT;
 10508  1928  30E7               	movlw	__WDT& (0+255)
 10509  1929  0020               	movlb	0	; select bank0
 10510  192A  00A0               	movwf	??_WDT_Set
 10511  192B  0820               	movf	??_WDT_Set,w
 10512  192C  0021               	movlb	1	; select bank1
 10513  192D  00EC               	movwf	_WDT^(0+128)
 10514                           
 10515                           ;MCU_B1.c: 895: WDT->Enable = 1;
 10516  192E  086C               	movf	_WDT^(0+128),w
 10517  192F  0086               	movwf	6
 10518  1930  0187               	clrf	7
 10519  1931  1401               	bsf	1,0
 10520                           
 10521                           ;MCU_B1.c: 896: WDT->Count = 10;
 10522  1932  300A               	movlw	10
 10523  1933  0020               	movlb	0	; select bank0
 10524  1934  00A0               	movwf	??_WDT_Set
 10525  1935  0021               	movlb	1	; select bank1
 10526  1936  0A6C               	incf	_WDT^(0+128),w
 10527  1937  0086               	movwf	6
 10528  1938  0187               	clrf	7
 10529  1939  0020               	movlb	0	; select bank0
 10530  193A  0820               	movf	??_WDT_Set,w
 10531  193B  0081               	movwf	1
 10532  193C  0008               	return
 10533  193D                     __end_of_WDT_Set:	
 10534                           
 10535                           	psect	text50
 10536  268C                     __ptext50:	
 10537 ;; *************** function _TMR0_Set *****************
 10538 ;; Defined at:
 10539 ;;		line 128 in file "../src/MCU_B1.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;		None               void
 10546 ;; Registers used:
 10547 ;;		wreg, status,2
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;Total ram usage:        1 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    5
 10560 ;; This function calls:
 10561 ;;		Nothing
 10562 ;; This function is called by:
 10563 ;;		_Mcu_Initialization
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           
 10568                           ;psect for function _TMR0_Set
 10569  268C                     _TMR0_Set:	
 10570                           
 10571                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10575  268C  305C               	movlw	_VarTimer0& (0+255)
 10576  268D  0020               	movlb	0	; select bank0
 10577  268E  00A0               	movwf	??_TMR0_Set
 10578  268F  0820               	movf	??_TMR0_Set,w
 10579  2690  0021               	movlb	1	; select bank1
 10580  2691  00EB               	movwf	_Timer0^(0+128)
 10581                           
 10582                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10583  2692  0195               	clrf	21	;volatile
 10584                           
 10585                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10586  2693  3042               	movlw	66
 10587  2694  0020               	movlb	0	; select bank0
 10588  2695  0095               	movwf	21	;volatile
 10589                           
 10590                           ;MCU_B1.c: 132: TMR0IE = 1;
 10591  2696  168B               	bsf	11,5	;volatile
 10592                           
 10593                           ;MCU_B1.c: 133: GIE = 1;
 10594  2697  178B               	bsf	11,7	;volatile
 10595  2698  0008               	return
 10596  2699                     __end_of_TMR0_Set:	
 10597                           
 10598                           	psect	text51
 10599  196F                     __ptext51:	
 10600 ;; *************** function _IO_Set *****************
 10601 ;; Defined at:
 10602 ;;		line 62 in file "../src/MCU_B1.c"
 10603 ;; Parameters:    Size  Location     Type
 10604 ;;		None
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;		None
 10607 ;; Return value:  Size  Location     Type
 10608 ;;		None               void
 10609 ;; Registers used:
 10610 ;;		wreg, status,2
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;Total ram usage:        0 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    5
 10623 ;; This function calls:
 10624 ;;		Nothing
 10625 ;; This function is called by:
 10626 ;;		_Mcu_Initialization
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           
 10631                           ;psect for function _IO_Set
 10632  196F                     _IO_Set:	
 10633                           
 10634                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10635                           
 10636                           ;incstack = 0
 10637                           ; Regs used in _IO_Set: [wreg+status,2]
 10638  196F  3077               	movlw	119
 10639  1970  0021               	movlb	1	; select bank1
 10640  1971  008C               	movwf	12	;volatile
 10641                           
 10642                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 10643  1972  3007               	movlw	7
 10644  1973  008D               	movwf	13	;volatile
 10645                           
 10646                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 10647  1974  300C               	movlw	12
 10648  1975  008E               	movwf	14	;volatile
 10649                           
 10650                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 10651  1976  0022               	movlb	2	; select bank2
 10652  1977  018C               	clrf	12	;volatile
 10653                           
 10654                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 10655  1978  3002               	movlw	2
 10656  1979  008D               	movwf	13	;volatile
 10657                           
 10658                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 10659  197A  018E               	clrf	14	;volatile
 10660                           
 10661                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10662  197B  3022               	movlw	34
 10663  197C  0023               	movlb	3	; select bank3
 10664  197D  008C               	movwf	12	;volatile
 10665                           
 10666                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10667  197E  018D               	clrf	13	;volatile
 10668                           
 10669                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10670  197F  018E               	clrf	14	;volatile
 10671                           
 10672                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 10673  1980  3077               	movlw	119
 10674  1981  0020               	movlb	0	; select bank0
 10675  1982  008C               	movwf	12	;volatile
 10676                           
 10677                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 10678  1983  3007               	movlw	7
 10679  1984  008D               	movwf	13	;volatile
 10680                           
 10681                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 10682  1985  300C               	movlw	12
 10683  1986  008E               	movwf	14	;volatile
 10684  1987  0008               	return
 10685  1988                     __end_of_IO_Set:	
 10686                           
 10687                           	psect	text52
 10688  267F                     __ptext52:	
 10689 ;; *************** function _IOC_Set *****************
 10690 ;; Defined at:
 10691 ;;		line 270 in file "../src/MCU_B1.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;		None               void
 10698 ;; Registers used:
 10699 ;;		wreg, status,2
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:        0 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    5
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_Mcu_Initialization
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function _IOC_Set
 10721  267F                     _IOC_Set:	
 10722                           
 10723                           ;MCU_B1.c: 271: WPUB2 = 0;
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _IOC_Set: [wreg+status,2]
 10727  267F  0024               	movlb	4	; select bank4
 10728  2680  110D               	bcf	13,2	;volatile
 10729                           
 10730                           ;MCU_B1.c: 273: IOCBP = 0b00000100;
 10731  2681  3004               	movlw	4
 10732  2682  0027               	movlb	7	; select bank7
 10733  2683  0094               	movwf	20	;volatile
 10734                           
 10735                           ;MCU_B1.c: 274: IOCBN = 0b00000100;
 10736  2684  3004               	movlw	4
 10737  2685  0095               	movwf	21	;volatile
 10738                           
 10739                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
 10740  2686  0196               	clrf	22	;volatile
 10741                           
 10742                           ;MCU_B1.c: 291: IOCIE = 1;
 10743  2687  158B               	bsf	11,3	;volatile
 10744                           
 10745                           ;MCU_B1.c: 292: IOCIF = 0;
 10746  2688  100B               	bcf	11,0	;volatile
 10747                           
 10748                           ;MCU_B1.c: 293: PEIE = 1;
 10749  2689  170B               	bsf	11,6	;volatile
 10750                           
 10751                           ;MCU_B1.c: 294: GIE = 1;
 10752  268A  178B               	bsf	11,7	;volatile
 10753  268B  0008               	return
 10754  268C                     __end_of_IOC_Set:	
 10755                           
 10756                           	psect	text53
 10757  2581                     __ptext53:	
 10758 ;; *************** function _INT_Set *****************
 10759 ;; Defined at:
 10760 ;;		line 242 in file "../src/MCU_B1.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;		None               void
 10767 ;; Registers used:
 10768 ;;		None
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        0 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    5
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_Mcu_Initialization
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _INT_Set
 10790  2581                     _INT_Set:	
 10791                           
 10792                           ;MCU_B1.c: 243: WPUB0 = 0;
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in _INT_Set: []
 10796  2581  0024               	movlb	4	; select bank4
 10797  2582  100D               	bcf	13,0	;volatile
 10798                           
 10799                           ;MCU_B1.c: 244: INTE = 0;
 10800  2583  120B               	bcf	11,4	;volatile
 10801                           
 10802                           ;MCU_B1.c: 245: PEIE = 1;
 10803  2584  170B               	bsf	11,6	;volatile
 10804                           
 10805                           ;MCU_B1.c: 246: GIE = 1;
 10806  2585  178B               	bsf	11,7	;volatile
 10807  2586  0008               	return
 10808  2587                     __end_of_INT_Set:	
 10809                           
 10810                           	psect	text54
 10811  2570                     __ptext54:	
 10812 ;; *************** function _Fosc_Set *****************
 10813 ;; Defined at:
 10814 ;;		line 58 in file "../src/MCU_B1.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;		None
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;		None
 10819 ;; Return value:  Size  Location     Type
 10820 ;;		None               void
 10821 ;; Registers used:
 10822 ;;		wreg
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;Total ram usage:        0 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    5
 10835 ;; This function calls:
 10836 ;;		Nothing
 10837 ;; This function is called by:
 10838 ;;		_Mcu_Initialization
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           
 10843                           ;psect for function _Fosc_Set
 10844  2570                     _Fosc_Set:	
 10845                           
 10846                           ;MCU_B1.c: 59: OSCCON = 0x78;
 10847                           
 10848                           ;incstack = 0
 10849                           ; Regs used in _Fosc_Set: [wreg]
 10850  2570  3078               	movlw	120
 10851  2571  0021               	movlb	1	; select bank1
 10852  2572  0099               	movwf	25	;volatile
 10853  2573  0008               	return
 10854  2574                     __end_of_Fosc_Set:	
 10855                           
 10856                           	psect	text55
 10857  259A                     __ptext55:	
 10858 ;; *************** function _ADC_Set *****************
 10859 ;; Defined at:
 10860 ;;		line 316 in file "../src/MCU_B1.c"
 10861 ;; Parameters:    Size  Location     Type
 10862 ;;		None
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;		None
 10865 ;; Return value:  Size  Location     Type
 10866 ;;		None               void
 10867 ;; Registers used:
 10868 ;;		wreg
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;Total ram usage:        0 bytes
 10879 ;; Hardware stack levels used:    1
 10880 ;; Hardware stack levels required when called:    5
 10881 ;; This function calls:
 10882 ;;		Nothing
 10883 ;; This function is called by:
 10884 ;;		_Mcu_Initialization
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           
 10889                           ;psect for function _ADC_Set
 10890  259A                     _ADC_Set:	
 10891                           
 10892                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
 10893                           
 10894                           ;incstack = 0
 10895                           ; Regs used in _ADC_Set: [wreg]
 10896  259A  30F2               	movlw	242
 10897  259B  0021               	movlb	1	; select bank1
 10898  259C  009E               	movwf	30	;volatile
 10899                           
 10900                           ;MCU_B1.c: 318: FVRCON = 0xc0;
 10901  259D  30C0               	movlw	192
 10902  259E  0022               	movlb	2	; select bank2
 10903  259F  0097               	movwf	23	;volatile
 10904  25A0  0008               	return
 10905  25A1                     __end_of_ADC_Set:	
 10906                           
 10907                           	psect	text56
 10908  0054                     __ptext56:	
 10909 ;; *************** function _Load_Main *****************
 10910 ;; Defined at:
 10911 ;;		line 40 in file "../src/OverLoad_B1.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;  i               1   20[BANK0 ] unsigned char 
 10916 ;; Return value:  Size  Location     Type
 10917 ;;		None               void
 10918 ;; Registers used:
 10919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        5 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:   10
 10932 ;; This function calls:
 10933 ;;		___lwdiv
 10934 ;;		___wmul
 10935 ;;		_getTemp_Safe
 10936 ;;		_setDimmerLights_Clear
 10937 ;;		_setLoad_AH_AL_Restore
 10938 ;;		_setLoad_Exceptions
 10939 ;; This function is called by:
 10940 ;;		_main
 10941 ;; This function uses a non-reentrant model
 10942 ;;
 10943                           
 10944                           
 10945                           ;psect for function _Load_Main
 10946  0054                     _Load_Main:	
 10947                           
 10948                           ;OverLoad_B1.c: 41: char i;
 10949                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
 10950                           
 10951                           ;incstack = 0
 10952                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10953  0054  087B               	movf	_Load,w
 10954  0055  0086               	movwf	6
 10955  0056  3002               	movlw	2	; select bank4/5
 10956  0057  0087               	movwf	7
 10957  0058  1E81               	btfss	1,5
 10958  0059  2881               	goto	l8171
 10959                           
 10960                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
 10961  005A  087B               	movf	_Load,w
 10962  005B  3E03               	addlw	3
 10963  005C  0086               	movwf	6
 10964  005D  3002               	movlw	2	; select bank4/5
 10965  005E  0087               	movwf	7
 10966  005F  3001               	movlw	1
 10967  0060  0781               	addwf	1,f
 10968  0061  3141               	addfsr 1,1
 10969  0062  1803               	skipnc
 10970  0063  0A81               	incf	1,f
 10971                           
 10972                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
 10973  0064  087B               	movf	_Load,w
 10974  0065  3E03               	addlw	3
 10975  0066  0086               	movwf	6
 10976  0067  3002               	movlw	2	; select bank4/5
 10977  0068  0087               	movwf	7
 10978  0069  3F40               	moviw [0]fsr1
 10979  006A  0020               	movlb	0	; select bank0
 10980  006B  00B0               	movwf	??_Load_Main
 10981  006C  3F41               	moviw [1]fsr1
 10982  006D  00B1               	movwf	??_Load_Main+1
 10983  006E  3003               	movlw	3
 10984  006F  0231               	subwf	??_Load_Main+1,w
 10985  0070  30E8               	movlw	232
 10986  0071  1903               	skipnz
 10987  0072  0230               	subwf	??_Load_Main,w
 10988  0073  1C03               	skipc
 10989  0074  0008               	return
 10990                           
 10991                           ;OverLoad_B1.c: 45: {
 10992                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
 10993  0075  087B               	movf	_Load,w
 10994  0076  3E03               	addlw	3
 10995  0077  0086               	movwf	6
 10996  0078  3002               	movlw	2	; select bank4/5
 10997  0079  0087               	movwf	7
 10998  007A  3000               	movlw	0
 10999  007B  3FC0               	movwi [0]fsr1
 11000  007C  3FC1               	movwi [1]fsr1
 11001                           
 11002                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
 11003  007D  3000               	movlw	0
 11004  007E  319E  2663         	fcall	_setLoad_Exceptions
 11005                           
 11006                           ;OverLoad_B1.c: 48: }
 11007                           ;OverLoad_B1.c: 49: } else {
 11008  0080  0008               	return
 11009  0081                     l8171:	
 11010                           
 11011                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
 11012  0081  087B               	movf	_Load,w
 11013  0082  0086               	movwf	6
 11014  0083  3002               	movlw	2	; select bank4/5
 11015  0084  0087               	movwf	7
 11016  0085  1E01               	btfss	1,4
 11017  0086  2A88               	goto	l8253
 11018                           
 11019                           ;OverLoad_B1.c: 51: Load->Time++;
 11020  0087  0A7B               	incf	_Load,w
 11021  0088  0086               	movwf	6
 11022  0089  3002               	movlw	2	; select bank4/5
 11023  008A  0087               	movwf	7
 11024  008B  3001               	movlw	1
 11025  008C  0781               	addwf	1,f
 11026  008D  3141               	addfsr 1,1
 11027  008E  1803               	skipnc
 11028  008F  0A81               	incf	1,f
 11029                           
 11030                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
 11031  0090  0A7B               	incf	_Load,w
 11032  0091  0086               	movwf	6
 11033  0092  3002               	movlw	2	; select bank4/5
 11034  0093  0087               	movwf	7
 11035  0094  3F40               	moviw [0]fsr1
 11036  0095  0020               	movlb	0	; select bank0
 11037  0096  00B0               	movwf	??_Load_Main
 11038  0097  3F41               	moviw [1]fsr1
 11039  0098  00B1               	movwf	??_Load_Main+1
 11040  0099  3000               	movlw	0
 11041  009A  0231               	subwf	??_Load_Main+1,w
 11042  009B  3005               	movlw	5
 11043  009C  1903               	skipnz
 11044  009D  0230               	subwf	??_Load_Main,w
 11045  009E  1C03               	skipc
 11046  009F  0008               	return
 11047                           
 11048                           ;OverLoad_B1.c: 53: {
 11049                           ;OverLoad_B1.c: 54: Load->Time = 0;
 11050  00A0  0A7B               	incf	_Load,w
 11051  00A1  0086               	movwf	6
 11052  00A2  3002               	movlw	2	; select bank4/5
 11053  00A3  0087               	movwf	7
 11054  00A4  3000               	movlw	0
 11055  00A5  3FC0               	movwi [0]fsr1
 11056  00A6  3FC1               	movwi [1]fsr1
 11057                           
 11058                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
 11059  00A7  087B               	movf	_Load,w
 11060  00A8  0086               	movwf	6
 11061  00A9  3002               	movlw	2	; select bank4/5
 11062  00AA  0087               	movwf	7
 11063  00AB  1201               	bcf	1,4
 11064                           
 11065                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
 11066  00AC  087B               	movf	_Load,w
 11067  00AD  3E45               	addlw	69
 11068  00AE  0086               	movwf	6
 11069  00AF  3002               	movlw	2	; select bank4/5
 11070  00B0  0087               	movwf	7
 11071  00B1  087B               	movf	_Load,w
 11072  00B2  3E44               	addlw	68
 11073  00B3  0084               	movwf	4
 11074  00B4  3002               	movlw	2	; select bank4/5
 11075  00B5  0085               	movwf	5
 11076  00B6  0800               	movf	0,w
 11077  00B7  00B0               	movwf	??_Load_Main
 11078  00B8  087B               	movf	_Load,w
 11079  00B9  3E43               	addlw	67
 11080  00BA  0084               	movwf	4
 11081  00BB  3002               	movlw	2	; select bank4/5
 11082  00BC  0085               	movwf	5
 11083  00BD  0800               	movf	0,w
 11084  00BE  0730               	addwf	??_Load_Main,w
 11085  00BF  0701               	addwf	1,w
 11086  00C0  00B1               	movwf	??_Load_Main+1
 11087  00C1  087B               	movf	_Load,w
 11088  00C2  3E3E               	addlw	62
 11089  00C3  0086               	movwf	6
 11090  00C4  3002               	movlw	2	; select bank4/5
 11091  00C5  0087               	movwf	7
 11092  00C6  0831               	movf	??_Load_Main+1,w
 11093  00C7  0081               	movwf	1
 11094                           
 11095                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
 11096  00C8  01B4               	clrf	Load_Main@i
 11097  00C9  0AB4               	incf	Load_Main@i,f
 11098  00CA  3004               	movlw	4
 11099  00CB  0234               	subwf	Load_Main@i,w
 11100  00CC  1803               	btfsc	3,0
 11101  00CD  28FC               	goto	l8193
 11102  00CE                     l8187:	
 11103                           
 11104                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
 11105  00CE  3534               	lslf	Load_Main@i,w
 11106  00CF  3E08               	addlw	8
 11107  00D0  077B               	addwf	_Load,w
 11108  00D1  00B0               	movwf	??_Load_Main
 11109  00D2  0830               	movf	??_Load_Main,w
 11110  00D3  0086               	movwf	6
 11111  00D4  3002               	movlw	2	; select bank4/5
 11112  00D5  0087               	movwf	7
 11113  00D6  087B               	movf	_Load,w
 11114  00D7  3E2E               	addlw	46
 11115  00D8  0084               	movwf	4
 11116  00D9  3002               	movlw	2	; select bank4/5
 11117  00DA  0085               	movwf	5
 11118  00DB  3F40               	moviw [0]fsr1
 11119  00DC  0780               	addwf	0,f
 11120  00DD  3101               	addfsr 0,1
 11121  00DE  3F41               	moviw [1]fsr1
 11122  00DF  3D80               	addwfc	0,f
 11123  00E0  313F               	addfsr 0,-1
 11124                           
 11125                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
 11126  00E1  3534               	lslf	Load_Main@i,w
 11127  00E2  3E1A               	addlw	26
 11128  00E3  077B               	addwf	_Load,w
 11129  00E4  00B0               	movwf	??_Load_Main
 11130  00E5  0830               	movf	??_Load_Main,w
 11131  00E6  0086               	movwf	6
 11132  00E7  3002               	movlw	2	; select bank4/5
 11133  00E8  0087               	movwf	7
 11134  00E9  087B               	movf	_Load,w
 11135  00EA  3E30               	addlw	48
 11136  00EB  0084               	movwf	4
 11137  00EC  3002               	movlw	2	; select bank4/5
 11138  00ED  0085               	movwf	5
 11139  00EE  3F40               	moviw [0]fsr1
 11140  00EF  0780               	addwf	0,f
 11141  00F0  3101               	addfsr 0,1
 11142  00F1  3F41               	moviw [1]fsr1
 11143  00F2  3D80               	addwfc	0,f
 11144  00F3  313F               	addfsr 0,-1
 11145  00F4  3001               	movlw	1
 11146  00F5  00B0               	movwf	??_Load_Main
 11147  00F6  0830               	movf	??_Load_Main,w
 11148  00F7  07B4               	addwf	Load_Main@i,f
 11149  00F8  3004               	movlw	4
 11150  00F9  0234               	subwf	Load_Main@i,w
 11151  00FA  1C03               	skipc
 11152  00FB  28CE               	goto	l8187
 11153  00FC                     l8193:	
 11154                           
 11155                           ;OverLoad_B1.c: 60: }
 11156                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 11157  00FC  3003               	movlw	3
 11158  00FD  00A0               	movwf	___lwdiv@divisor
 11159  00FE  3000               	movlw	0
 11160  00FF  00A1               	movwf	___lwdiv@divisor+1
 11161  0100  087B               	movf	_Load,w
 11162  0101  3E2E               	addlw	46
 11163  0102  0086               	movwf	6
 11164  0103  3002               	movlw	2	; select bank4/5
 11165  0104  0087               	movwf	7
 11166  0105  3F40               	moviw [0]fsr1
 11167  0106  00A2               	movwf	___lwdiv@dividend
 11168  0107  3F41               	moviw [1]fsr1
 11169  0108  00A3               	movwf	___lwdiv@dividend+1
 11170  0109  319D  25AC  3180   	fcall	___lwdiv
 11171  010C  087B               	movf	_Load,w
 11172  010D  3E2E               	addlw	46
 11173  010E  0086               	movwf	6
 11174  010F  3002               	movlw	2	; select bank4/5
 11175  0110  0087               	movwf	7
 11176  0111  0020               	movlb	0	; select bank0
 11177  0112  0820               	movf	?___lwdiv,w
 11178  0113  3FC0               	movwi [0]fsr1
 11179  0114  0821               	movf	?___lwdiv+1,w
 11180  0115  3FC1               	movwi [1]fsr1
 11181                           
 11182                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 11183  0116  3003               	movlw	3
 11184  0117  00A0               	movwf	___lwdiv@divisor
 11185  0118  3000               	movlw	0
 11186  0119  00A1               	movwf	___lwdiv@divisor+1
 11187  011A  087B               	movf	_Load,w
 11188  011B  3E30               	addlw	48
 11189  011C  0086               	movwf	6
 11190  011D  3002               	movlw	2	; select bank4/5
 11191  011E  0087               	movwf	7
 11192  011F  3F40               	moviw [0]fsr1
 11193  0120  00A2               	movwf	___lwdiv@dividend
 11194  0121  3F41               	moviw [1]fsr1
 11195  0122  00A3               	movwf	___lwdiv@dividend+1
 11196  0123  319D  25AC  3180   	fcall	___lwdiv
 11197  0126  087B               	movf	_Load,w
 11198  0127  3E30               	addlw	48
 11199  0128  0086               	movwf	6
 11200  0129  3002               	movlw	2	; select bank4/5
 11201  012A  0087               	movwf	7
 11202  012B  0020               	movlb	0	; select bank0
 11203  012C  0820               	movf	?___lwdiv,w
 11204  012D  3FC0               	movwi [0]fsr1
 11205  012E  0821               	movf	?___lwdiv+1,w
 11206  012F  3FC1               	movwi [1]fsr1
 11207                           
 11208                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 11209  0130  087B               	movf	_Load,w
 11210  0131  3E2E               	addlw	46
 11211  0132  0086               	movwf	6
 11212  0133  3002               	movlw	2	; select bank4/5
 11213  0134  0087               	movwf	7
 11214  0135  3F40               	moviw [0]fsr1
 11215  0136  00B0               	movwf	??_Load_Main
 11216  0137  3F41               	moviw [1]fsr1
 11217  0138  00B1               	movwf	??_Load_Main+1
 11218  0139  087B               	movf	_Load,w
 11219  013A  3E30               	addlw	48
 11220  013B  0086               	movwf	6
 11221  013C  3002               	movlw	2	; select bank4/5
 11222  013D  0087               	movwf	7
 11223  013E  3F40               	moviw [0]fsr1
 11224  013F  00B2               	movwf	??_Load_Main+2
 11225  0140  3F41               	moviw [1]fsr1
 11226  0141  00B3               	movwf	??_Load_Main+3
 11227  0142  0831               	movf	??_Load_Main+1,w
 11228  0143  0233               	subwf	??_Load_Main+3,w
 11229  0144  1D03               	skipz
 11230  0145  2948               	goto	u7655
 11231  0146  0830               	movf	??_Load_Main,w
 11232  0147  0232               	subwf	??_Load_Main+2,w
 11233  0148                     u7655:	
 11234  0148  1803               	skipnc
 11235  0149  2A85               	goto	l8251
 11236                           
 11237                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 11238  014A  087B               	movf	_Load,w
 11239  014B  3E2E               	addlw	46
 11240  014C  0086               	movwf	6
 11241  014D  3002               	movlw	2	; select bank4/5
 11242  014E  0087               	movwf	7
 11243  014F  087B               	movf	_Load,w
 11244  0150  3E30               	addlw	48
 11245  0151  0084               	movwf	4
 11246  0152  3002               	movlw	2	; select bank4/5
 11247  0153  0085               	movwf	5
 11248  0154  3F00               	moviw [0]fsr0
 11249  0155  00B0               	movwf	??_Load_Main
 11250  0156  3F01               	moviw [1]fsr0
 11251  0157  00B1               	movwf	??_Load_Main+1
 11252  0158  09B0               	comf	??_Load_Main,f
 11253  0159  09B1               	comf	??_Load_Main+1,f
 11254  015A  0AB0               	incf	??_Load_Main,f
 11255  015B  1903               	skipnz
 11256  015C  0AB1               	incf	??_Load_Main+1,f
 11257  015D  3F40               	moviw [0]fsr1
 11258  015E  0730               	addwf	??_Load_Main,w
 11259  015F  00B2               	movwf	??_Load_Main+2
 11260  0160  3F41               	moviw [1]fsr1
 11261  0161  3D31               	addwfc	??_Load_Main+1,w
 11262  0162  00B3               	movwf	??_Load_Main+3
 11263  0163  087B               	movf	_Load,w
 11264  0164  3E2C               	addlw	44
 11265  0165  0086               	movwf	6
 11266  0166  3002               	movlw	2	; select bank4/5
 11267  0167  0087               	movwf	7
 11268  0168  0832               	movf	??_Load_Main+2,w
 11269  0169  3FC0               	movwi [0]fsr1
 11270  016A  0833               	movf	??_Load_Main+3,w
 11271  016B  3FC1               	movwi [1]fsr1
 11272                           
 11273                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 11274  016C  087B               	movf	_Load,w
 11275  016D  3E3A               	addlw	58
 11276  016E  0086               	movwf	6
 11277  016F  3002               	movlw	2	; select bank4/5
 11278  0170  0087               	movwf	7
 11279  0171  3002               	movlw	2
 11280  0172  0201               	subwf	1,w
 11281  0173  1803               	skipnc
 11282  0174  29C5               	goto	l8215
 11283                           
 11284                           ;OverLoad_B1.c: 67: Load->Count++;
 11285  0175  3001               	movlw	1
 11286  0176  00B0               	movwf	??_Load_Main
 11287  0177  087B               	movf	_Load,w
 11288  0178  3E3A               	addlw	58
 11289  0179  0086               	movwf	6
 11290  017A  3002               	movlw	2	; select bank4/5
 11291  017B  0087               	movwf	7
 11292  017C  0830               	movf	??_Load_Main,w
 11293  017D  0781               	addwf	1,f
 11294                           
 11295                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 11296  017E  087B               	movf	_Load,w
 11297  017F  3E3A               	addlw	58
 11298  0180  0086               	movwf	6
 11299  0181  3002               	movlw	2	; select bank4/5
 11300  0182  0087               	movwf	7
 11301  0183  0801               	movf	1,w
 11302  0184  3A01               	xorlw	1
 11303  0185  1D03               	skipz
 11304  0186  2991               	goto	l8207
 11305                           
 11306                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 11307  0187  087B               	movf	_Load,w
 11308  0188  3E36               	addlw	54
 11309  0189  0086               	movwf	6
 11310  018A  3002               	movlw	2	; select bank4/5
 11311  018B  0087               	movwf	7
 11312  018C  30F4               	movlw	244
 11313  018D  3FC0               	movwi [0]fsr1
 11314  018E  3001               	movlw	1
 11315  018F  3FC1               	movwi [1]fsr1
 11316                           
 11317                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 11318  0190  29C5               	goto	l8215
 11319  0191                     l8207:	
 11320  0191  087B               	movf	_Load,w
 11321  0192  3E3A               	addlw	58
 11322  0193  0086               	movwf	6
 11323  0194  3002               	movlw	2	; select bank4/5
 11324  0195  0087               	movwf	7
 11325  0196  0801               	movf	1,w
 11326  0197  3A02               	xorlw	2
 11327  0198  1D03               	skipz
 11328  0199  29C5               	goto	l8215
 11329                           
 11330                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 11331  019A  087B               	movf	_Load,w
 11332  019B  3E3E               	addlw	62
 11333  019C  0086               	movwf	6
 11334  019D  3002               	movlw	2	; select bank4/5
 11335  019E  0087               	movwf	7
 11336  019F  0801               	movf	1,w
 11337  01A0  3A01               	xorlw	1
 11338  01A1  1D03               	skipz
 11339  01A2  29AD               	goto	l8213
 11340                           
 11341                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x32;
 11342  01A3  087B               	movf	_Load,w
 11343  01A4  3E36               	addlw	54
 11344  01A5  0086               	movwf	6
 11345  01A6  3002               	movlw	2	; select bank4/5
 11346  01A7  0087               	movwf	7
 11347  01A8  3032               	movlw	50
 11348  01A9  3FC0               	movwi [0]fsr1
 11349  01AA  3000               	movlw	0
 11350  01AB  3FC1               	movwi [1]fsr1
 11351                           
 11352                           ;OverLoad_B1.c: 73: } else {
 11353  01AC  29C5               	goto	l8215
 11354  01AD                     l8213:	
 11355                           
 11356                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x32 + Load->TotalLoad) - 0x08;
 11357  01AD  087B               	movf	_Load,w
 11358  01AE  3E06               	addlw	6
 11359  01AF  0086               	movwf	6
 11360  01B0  3002               	movlw	2	; select bank4/5
 11361  01B1  0087               	movwf	7
 11362  01B2  3F40               	moviw [0]fsr1
 11363  01B3  00B0               	movwf	??_Load_Main
 11364  01B4  3F41               	moviw [1]fsr1
 11365  01B5  00B1               	movwf	??_Load_Main+1
 11366  01B6  0830               	movf	??_Load_Main,w
 11367  01B7  3E2A               	addlw	42
 11368  01B8  00B2               	movwf	??_Load_Main+2
 11369  01B9  3000               	movlw	0
 11370  01BA  3D31               	addwfc	??_Load_Main+1,w
 11371  01BB  00B3               	movwf	??_Load_Main+3
 11372  01BC  087B               	movf	_Load,w
 11373  01BD  3E36               	addlw	54
 11374  01BE  0086               	movwf	6
 11375  01BF  3002               	movlw	2	; select bank4/5
 11376  01C0  0087               	movwf	7
 11377  01C1  0832               	movf	??_Load_Main+2,w
 11378  01C2  3FC0               	movwi [0]fsr1
 11379  01C3  0833               	movf	??_Load_Main+3,w
 11380  01C4  3FC1               	movwi [1]fsr1
 11381  01C5                     l8215:	
 11382                           
 11383                           ;OverLoad_B1.c: 75: }
 11384                           ;OverLoad_B1.c: 76: }
 11385                           ;OverLoad_B1.c: 77: }
 11386                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 11387  01C5  087B               	movf	_Load,w
 11388  01C6  3E36               	addlw	54
 11389  01C7  0086               	movwf	6
 11390  01C8  3002               	movlw	2	; select bank4/5
 11391  01C9  0087               	movwf	7
 11392  01CA  3F40               	moviw [0]fsr1
 11393  01CB  00B0               	movwf	??_Load_Main
 11394  01CC  3F41               	moviw [1]fsr1
 11395  01CD  00B1               	movwf	??_Load_Main+1
 11396  01CE  087B               	movf	_Load,w
 11397  01CF  3E2C               	addlw	44
 11398  01D0  0086               	movwf	6
 11399  01D1  3002               	movlw	2	; select bank4/5
 11400  01D2  0087               	movwf	7
 11401  01D3  3F40               	moviw [0]fsr1
 11402  01D4  00B2               	movwf	??_Load_Main+2
 11403  01D5  3F41               	moviw [1]fsr1
 11404  01D6  00B3               	movwf	??_Load_Main+3
 11405  01D7  0831               	movf	??_Load_Main+1,w
 11406  01D8  0233               	subwf	??_Load_Main+3,w
 11407  01D9  1D03               	skipz
 11408  01DA  29DD               	goto	u7705
 11409  01DB  0830               	movf	??_Load_Main,w
 11410  01DC  0232               	subwf	??_Load_Main+2,w
 11411  01DD                     u7705:	
 11412  01DD  1C03               	skipc
 11413  01DE  29FC               	goto	l8225
 11414                           
 11415                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 11416  01DF  3001               	movlw	1
 11417  01E0  00B0               	movwf	??_Load_Main
 11418  01E1  087B               	movf	_Load,w
 11419  01E2  3E3C               	addlw	60
 11420  01E3  0086               	movwf	6
 11421  01E4  3002               	movlw	2	; select bank4/5
 11422  01E5  0087               	movwf	7
 11423  01E6  0830               	movf	??_Load_Main,w
 11424  01E7  0781               	addwf	1,f
 11425                           
 11426                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 11427  01E8  087B               	movf	_Load,w
 11428  01E9  3E3C               	addlw	60
 11429  01EA  0086               	movwf	6
 11430  01EB  3002               	movlw	2	; select bank4/5
 11431  01EC  0087               	movwf	7
 11432  01ED  3003               	movlw	3
 11433  01EE  0201               	subwf	1,w
 11434  01EF  1C03               	skipc
 11435  01F0  2A85               	goto	l8251
 11436                           
 11437                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 11438  01F1  087B               	movf	_Load,w
 11439  01F2  3E3C               	addlw	60
 11440  01F3  0086               	movwf	6
 11441  01F4  3002               	movlw	2	; select bank4/5
 11442  01F5  0087               	movwf	7
 11443  01F6  0181               	clrf	1
 11444                           
 11445                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 11446  01F7  3001               	movlw	1
 11447  01F8  319E  2663  3180   	fcall	_setLoad_Exceptions
 11448                           
 11449                           ;OverLoad_B1.c: 92: }
 11450                           ;OverLoad_B1.c: 93: } else {
 11451  01FB  2A85               	goto	l8251
 11452  01FC                     l8225:	
 11453                           
 11454                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 11455  01FC  087B               	movf	_Load,w
 11456  01FD  3E3C               	addlw	60
 11457  01FE  0086               	movwf	6
 11458  01FF  3002               	movlw	2	; select bank4/5
 11459  0200  0087               	movwf	7
 11460  0201  0181               	clrf	1
 11461                           
 11462                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 11463  0202  087B               	movf	_Load,w
 11464  0203  3E42               	addlw	66
 11465  0204  0086               	movwf	6
 11466  0205  3002               	movlw	2	; select bank4/5
 11467  0206  0087               	movwf	7
 11468  0207  300A               	movlw	10
 11469  0208  0201               	subwf	1,w
 11470  0209  1803               	skipnc
 11471  020A  2A15               	goto	l8231
 11472                           
 11473                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 11474  020B  3001               	movlw	1
 11475  020C  0020               	movlb	0	; select bank0
 11476  020D  00B0               	movwf	??_Load_Main
 11477  020E  087B               	movf	_Load,w
 11478  020F  3E42               	addlw	66
 11479  0210  0086               	movwf	6
 11480  0211  3002               	movlw	2	; select bank4/5
 11481  0212  0087               	movwf	7
 11482  0213  0830               	movf	??_Load_Main,w
 11483  0214  0781               	addwf	1,f
 11484  0215                     l8231:	
 11485                           
 11486                           ;OverLoad_B1.c: 97: }
 11487                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 11488  0215  087B               	movf	_Load,w
 11489  0216  3E42               	addlw	66
 11490  0217  0086               	movwf	6
 11491  0218  3002               	movlw	2	; select bank4/5
 11492  0219  0087               	movwf	7
 11493  021A  300A               	movlw	10
 11494  021B  0201               	subwf	1,w
 11495  021C  1C03               	skipc
 11496  021D  2A85               	goto	l8251
 11497                           
 11498                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 11499  021E  087B               	movf	_Load,w
 11500  021F  0086               	movwf	6
 11501  0220  3002               	movlw	2	; select bank4/5
 11502  0221  0087               	movwf	7
 11503  0222  1581               	bsf	1,3
 11504                           
 11505                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 11506  0223  0020               	movlb	0	; select bank0
 11507  0224  01A2               	clrf	setDimmerLights_Clear@command
 11508  0225  0AA2               	incf	setDimmerLights_Clear@command,f
 11509  0226  3001               	movlw	1
 11510  0227  31A7  271E  3180   	fcall	_setDimmerLights_Clear
 11511                           
 11512                           ;OverLoad_B1.c: 107: ;;
 11513                           ;OverLoad_B1.c: 113: setDimmerLights_Clear(2, 1);
 11514  022A  0020               	movlb	0	; select bank0
 11515  022B  01A2               	clrf	setDimmerLights_Clear@command
 11516  022C  0AA2               	incf	setDimmerLights_Clear@command,f
 11517  022D  3002               	movlw	2
 11518  022E  31A7  271E  3180   	fcall	_setDimmerLights_Clear
 11519                           
 11520                           ;OverLoad_B1.c: 117: ;;
 11521                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 11522  0231  087B               	movf	_Load,w
 11523  0232  3E46               	addlw	70
 11524  0233  0086               	movwf	6
 11525  0234  3002               	movlw	2	; select bank4/5
 11526  0235  0087               	movwf	7
 11527  0236  1C01               	btfss	1,0
 11528  0237  2A4C               	goto	l8243
 11529                           
 11530                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 11531  0238  087B               	movf	_Load,w
 11532  0239  3E46               	addlw	70
 11533  023A  0086               	movwf	6
 11534  023B  3002               	movlw	2	; select bank4/5
 11535  023C  0087               	movwf	7
 11536  023D  1001               	bcf	1,0
 11537                           
 11538                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 11539  023E  087B               	movf	_Load,w
 11540  023F  3E2C               	addlw	44
 11541  0240  0086               	movwf	6
 11542  0241  3002               	movlw	2	; select bank4/5
 11543  0242  0087               	movwf	7
 11544  0243  087B               	movf	_Load,w
 11545  0244  3E06               	addlw	6
 11546  0245  0084               	movwf	4
 11547  0246  3002               	movlw	2	; select bank4/5
 11548  0247  0085               	movwf	5
 11549  0248  3F40               	moviw [0]fsr1
 11550  0249  3F80               	movwi [0]fsr0
 11551  024A  3F41               	moviw [1]fsr1
 11552  024B  3F81               	movwi [1]fsr0
 11553  024C                     l8243:	
 11554                           
 11555                           ;OverLoad_B1.c: 136: }
 11556                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 11557  024C  087B               	movf	_Load,w
 11558  024D  3E46               	addlw	70
 11559  024E  0086               	movwf	6
 11560  024F  3002               	movlw	2	; select bank4/5
 11561  0250  0087               	movwf	7
 11562  0251  1C81               	btfss	1,1
 11563  0252  2A85               	goto	l8251
 11564                           
 11565                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 11566  0253  087B               	movf	_Load,w
 11567  0254  3E46               	addlw	70
 11568  0255  0086               	movwf	6
 11569  0256  3002               	movlw	2	; select bank4/5
 11570  0257  0087               	movwf	7
 11571  0258  1081               	bcf	1,1
 11572                           
 11573                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 11574  0259  087B               	movf	_Load,w
 11575  025A  3E2C               	addlw	44
 11576  025B  0086               	movwf	6
 11577  025C  3002               	movlw	2	; select bank4/5
 11578  025D  0087               	movwf	7
 11579  025E  087B               	movf	_Load,w
 11580  025F  3E06               	addlw	6
 11581  0260  0084               	movwf	4
 11582  0261  3002               	movlw	2	; select bank4/5
 11583  0262  0085               	movwf	5
 11584  0263  3F40               	moviw [0]fsr1
 11585  0264  3F80               	movwi [0]fsr0
 11586  0265  3F41               	moviw [1]fsr1
 11587  0266  3F81               	movwi [1]fsr0
 11588                           
 11589                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x32 * Load->LightsCount;
 11590  0267  087B               	movf	_Load,w
 11591  0268  3E3E               	addlw	62
 11592  0269  0086               	movwf	6
 11593  026A  3002               	movlw	2	; select bank4/5
 11594  026B  0087               	movwf	7
 11595  026C  0801               	movf	1,w
 11596  026D  0020               	movlb	0	; select bank0
 11597  026E  00B0               	movwf	??_Load_Main
 11598  026F  01B1               	clrf	??_Load_Main+1
 11599  0270  0830               	movf	??_Load_Main,w
 11600  0271  00A0               	movwf	___wmul@multiplier
 11601  0272  0831               	movf	??_Load_Main+1,w
 11602  0273  00A1               	movwf	___wmul@multiplier+1
 11603  0274  3032               	movlw	50
 11604  0275  00A2               	movwf	___wmul@multiplicand
 11605  0276  3000               	movlw	0
 11606  0277  00A3               	movwf	___wmul@multiplicand+1
 11607  0278  319A  222D  3180   	fcall	___wmul
 11608  027B  087B               	movf	_Load,w
 11609  027C  3E36               	addlw	54
 11610  027D  0086               	movwf	6
 11611  027E  3002               	movlw	2	; select bank4/5
 11612  027F  0087               	movwf	7
 11613  0280  0020               	movlb	0	; select bank0
 11614  0281  0820               	movf	?___wmul,w
 11615  0282  3FC0               	movwi [0]fsr1
 11616  0283  0821               	movf	?___wmul+1,w
 11617  0284  3FC1               	movwi [1]fsr1
 11618  0285                     l8251:	
 11619                           
 11620                           ;OverLoad_B1.c: 142: }
 11621                           ;OverLoad_B1.c: 143: }
 11622                           ;OverLoad_B1.c: 144: }
 11623                           ;OverLoad_B1.c: 145: }
 11624                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 11625  0285  319B  232D         	fcall	_setLoad_AH_AL_Restore
 11626                           
 11627                           ;OverLoad_B1.c: 158: }
 11628                           ;OverLoad_B1.c: 159: } else {
 11629  0287  0008               	return
 11630  0288                     l8253:	
 11631                           
 11632                           ;OverLoad_B1.c: 160: if (Load->GO) {
 11633  0288  087B               	movf	_Load,w
 11634  0289  0086               	movwf	6
 11635  028A  3002               	movlw	2	; select bank4/5
 11636  028B  0087               	movwf	7
 11637  028C  1C81               	btfss	1,1
 11638  028D  2AAA               	goto	l8263
 11639                           
 11640                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 11641  028E  087B               	movf	_Load,w
 11642  028F  0086               	movwf	6
 11643  0290  3002               	movlw	2	; select bank4/5
 11644  0291  0087               	movwf	7
 11645  0292  1901               	btfsc	1,2
 11646  0293  2A9E               	goto	l8259
 11647                           
 11648                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 11649  0294  087B               	movf	_Load,w
 11650  0295  0086               	movwf	6
 11651  0296  3002               	movlw	2	; select bank4/5
 11652  0297  0087               	movwf	7
 11653  0298  1501               	bsf	1,2
 11654                           
 11655                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 11656  0299  087B               	movf	_Load,w
 11657  029A  0086               	movwf	6
 11658  029B  3002               	movlw	2	; select bank4/5
 11659  029C  0087               	movwf	7
 11660  029D  1181               	bcf	1,3
 11661  029E                     l8259:	
 11662                           
 11663                           ;OverLoad_B1.c: 164: }
 11664                           ;OverLoad_B1.c: 165: if (getTemp_Safe() && 1) {
 11665  029E  31A5  25B8  3180   	fcall	_getTemp_Safe
 11666  02A1  3A00               	xorlw	0
 11667  02A2  1903               	skipnz
 11668  02A3  0008               	return
 11669                           
 11670                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 11671  02A4  087B               	movf	_Load,w
 11672  02A5  0086               	movwf	6
 11673  02A6  3002               	movlw	2	; select bank4/5
 11674  02A7  0087               	movwf	7
 11675  02A8  1601               	bsf	1,4
 11676                           
 11677                           ;OverLoad_B1.c: 167: }
 11678                           ;OverLoad_B1.c: 168: } else {
 11679  02A9  0008               	return
 11680  02AA                     l8263:	
 11681                           
 11682                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 11683  02AA  087B               	movf	_Load,w
 11684  02AB  0086               	movwf	6
 11685  02AC  3002               	movlw	2	; select bank4/5
 11686  02AD  0087               	movwf	7
 11687  02AE  1D01               	btfss	1,2
 11688  02AF  0008               	return
 11689                           
 11690                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 11691  02B0  087B               	movf	_Load,w
 11692  02B1  0086               	movwf	6
 11693  02B2  3002               	movlw	2	; select bank4/5
 11694  02B3  0087               	movwf	7
 11695  02B4  1101               	bcf	1,2
 11696                           
 11697                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 11698  02B5  087B               	movf	_Load,w
 11699  02B6  0086               	movwf	6
 11700  02B7  3002               	movlw	2	; select bank4/5
 11701  02B8  0087               	movwf	7
 11702  02B9  1581               	bsf	1,3
 11703                           
 11704                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 11705  02BA  087B               	movf	_Load,w
 11706  02BB  3E3C               	addlw	60
 11707  02BC  0086               	movwf	6
 11708  02BD  3002               	movlw	2	; select bank4/5
 11709  02BE  0087               	movwf	7
 11710  02BF  0181               	clrf	1
 11711                           
 11712                           ;OverLoad_B1.c: 173: Load->Count = 0;
 11713  02C0  087B               	movf	_Load,w
 11714  02C1  3E3A               	addlw	58
 11715  02C2  0086               	movwf	6
 11716  02C3  3002               	movlw	2	; select bank4/5
 11717  02C4  0087               	movwf	7
 11718  02C5  0181               	clrf	1
 11719                           
 11720                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 11721  02C6  087B               	movf	_Load,w
 11722  02C7  3E06               	addlw	6
 11723  02C8  0086               	movwf	6
 11724  02C9  3002               	movlw	2	; select bank4/5
 11725  02CA  0087               	movwf	7
 11726  02CB  3000               	movlw	0
 11727  02CC  3FC0               	movwi [0]fsr1
 11728  02CD  3FC1               	movwi [1]fsr1
 11729                           
 11730                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 11731  02CE  087B               	movf	_Load,w
 11732  02CF  3E3F               	addlw	63
 11733  02D0  0086               	movwf	6
 11734  02D1  3002               	movlw	2	; select bank4/5
 11735  02D2  0087               	movwf	7
 11736  02D3  0181               	clrf	1
 11737                           
 11738                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 11739  02D4  087B               	movf	_Load,w
 11740  02D5  3E46               	addlw	70
 11741  02D6  0086               	movwf	6
 11742  02D7  3002               	movlw	2	; select bank4/5
 11743  02D8  0087               	movwf	7
 11744  02D9  1001               	bcf	1,0
 11745                           
 11746                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 11747  02DA  087B               	movf	_Load,w
 11748  02DB  3E46               	addlw	70
 11749  02DC  0086               	movwf	6
 11750  02DD  3002               	movlw	2	; select bank4/5
 11751  02DE  0087               	movwf	7
 11752  02DF  1081               	bcf	1,1
 11753                           
 11754                           ;OverLoad_B1.c: 178: Load->AD = 0;
 11755  02E0  087B               	movf	_Load,w
 11756  02E1  3E2C               	addlw	44
 11757  02E2  0086               	movwf	6
 11758  02E3  3002               	movlw	2	; select bank4/5
 11759  02E4  0087               	movwf	7
 11760  02E5  3000               	movlw	0
 11761  02E6  3FC0               	movwi [0]fsr1
 11762  02E7  3FC1               	movwi [1]fsr1
 11763                           
 11764                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 11765  02E8  319B  232D  3180   	fcall	_setLoad_AH_AL_Restore
 11766                           
 11767                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 11768  02EB  0020               	movlb	0	; select bank0
 11769  02EC  01A2               	clrf	setDimmerLights_Clear@command
 11770  02ED  0AA2               	incf	setDimmerLights_Clear@command,f
 11771  02EE  3001               	movlw	1
 11772  02EF  31A7  271E  3180   	fcall	_setDimmerLights_Clear
 11773                           
 11774                           ;OverLoad_B1.c: 187: ;;
 11775                           ;OverLoad_B1.c: 193: setDimmerLights_Clear(2, 1);
 11776  02F2  0020               	movlb	0	; select bank0
 11777  02F3  01A2               	clrf	setDimmerLights_Clear@command
 11778  02F4  0AA2               	incf	setDimmerLights_Clear@command,f
 11779  02F5  3002               	movlw	2
 11780  02F6  31A7  271E         	fcall	_setDimmerLights_Clear
 11781                           
 11782                           ;OverLoad_B1.c: 197: ;;
 11783  02F8  0008               	return
 11784  02F9                     __end_of_Load_Main:	
 11785                           
 11786                           	psect	text57
 11787  1E63                     __ptext57:	
 11788 ;; *************** function _setLoad_Exceptions *****************
 11789 ;; Defined at:
 11790 ;;		line 232 in file "../src/OverLoad_B1.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;  command         1    wreg     unsigned char 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  command         1   15[BANK0 ] unsigned char 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;		None               void
 11797 ;; Registers used:
 11798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;Total ram usage:        2 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    9
 11811 ;; This function calls:
 11812 ;;		_DimmerLights_Exceptions
 11813 ;;		_setLED
 11814 ;;		_setRF_Enable
 11815 ;;		_setSw_Enable
 11816 ;; This function is called by:
 11817 ;;		_Load_Main
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           
 11822                           ;psect for function _setLoad_Exceptions
 11823  1E63                     _setLoad_Exceptions:	
 11824                           
 11825                           ;incstack = 0
 11826                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11827                           ;setLoad_Exceptions@command stored from wreg
 11828  1E63  0020               	movlb	0	; select bank0
 11829  1E64  00AF               	movwf	setLoad_Exceptions@command
 11830                           
 11831                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 11832  1E65  087B               	movf	_Load,w
 11833  1E66  0086               	movwf	6
 11834  1E67  3002               	movlw	2	; select bank4/5
 11835  1E68  0087               	movwf	7
 11836  1E69  082F               	movf	setLoad_Exceptions@command,w
 11837  1E6A  1281               	bcf	1,5
 11838  1E6B  1D03               	skipz
 11839  1E6C  1681               	bsf	1,5
 11840                           
 11841                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 11842  1E6D  092F               	comf	setLoad_Exceptions@command,w
 11843  1E6E  3901               	andlw	1
 11844  1E6F  00AE               	movwf	??_setLoad_Exceptions
 11845  1E70  087B               	movf	_Load,w
 11846  1E71  0086               	movwf	6
 11847  1E72  3002               	movlw	2	; select bank4/5
 11848  1E73  0087               	movwf	7
 11849  1E74  0DAE               	rlf	??_setLoad_Exceptions,f
 11850  1E75  0DAE               	rlf	??_setLoad_Exceptions,f
 11851  1E76  0DAE               	rlf	??_setLoad_Exceptions,f
 11852  1E77  0801               	movf	1,w
 11853  1E78  062E               	xorwf	??_setLoad_Exceptions,w
 11854  1E79  39F7               	andlw	-9
 11855  1E7A  062E               	xorwf	??_setLoad_Exceptions,w
 11856  1E7B  0081               	movwf	1
 11857                           
 11858                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 11859  1E7C  082F               	movf	setLoad_Exceptions@command,w
 11860  1E7D  00AE               	movwf	??_setLoad_Exceptions
 11861  1E7E  087B               	movf	_Load,w
 11862  1E7F  3E05               	addlw	5
 11863  1E80  0086               	movwf	6
 11864  1E81  3002               	movlw	2	; select bank4/5
 11865  1E82  0087               	movwf	7
 11866  1E83  082E               	movf	??_setLoad_Exceptions,w
 11867  1E84  0081               	movwf	1
 11868                           
 11869                           ;OverLoad_B1.c: 237: if (command) {
 11870  1E85  082F               	movf	setLoad_Exceptions@command,w
 11871  1E86  1903               	btfsc	3,2
 11872  1E87  2E8C               	goto	l1850
 11873                           
 11874                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11875  1E88  3002               	movlw	2
 11876  1E89  3193  237D  319E   	fcall	_DimmerLights_Exceptions
 11877  1E8C                     l1850:	
 11878                           
 11879                           ;OverLoad_B1.c: 242: }
 11880                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11881  1E8C  0020               	movlb	0	; select bank0
 11882  1E8D  082F               	movf	setLoad_Exceptions@command,w
 11883  1E8E  3E0A               	addlw	10
 11884  1E8F  00AE               	movwf	??_setLoad_Exceptions
 11885  1E90  082E               	movf	??_setLoad_Exceptions,w
 11886  1E91  00A2               	movwf	setLED@command
 11887  1E92  3063               	movlw	99
 11888  1E93  3192  2260  319E   	fcall	_setLED
 11889                           
 11890                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 11891  1E96  0020               	movlb	0	; select bank0
 11892  1E97  092F               	comf	setLoad_Exceptions@command,w
 11893  1E98  3901               	andlw	1
 11894  1E99  3199  21D8  319E   	fcall	_setSw_Enable
 11895                           
 11896                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 11897  1E9C  0020               	movlb	0	; select bank0
 11898  1E9D  092F               	comf	setLoad_Exceptions@command,w
 11899  1E9E  3901               	andlw	1
 11900  1E9F  00AE               	movwf	??_setLoad_Exceptions
 11901  1EA0  082E               	movf	??_setLoad_Exceptions,w
 11902  1EA1  00A2               	movwf	setRF_Enable@command
 11903  1EA2  3001               	movlw	1
 11904  1EA3  319B  2375         	fcall	_setRF_Enable
 11905  1EA5  0008               	return
 11906  1EA6                     __end_of_setLoad_Exceptions:	
 11907                           
 11908                           	psect	text58
 11909  19D8                     __ptext58:	
 11910 ;; *************** function _setSw_Enable *****************
 11911 ;; Defined at:
 11912 ;;		line 85 in file "../src/Switch_B1.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  command         1    wreg     unsigned char 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  command         1    2[BANK0 ] unsigned char 
 11917 ;; Return value:  Size  Location     Type
 11918 ;;		None               void
 11919 ;; Registers used:
 11920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11921 ;; Tracked objects:
 11922 ;;		On entry : 0/0
 11923 ;;		On exit  : 0/0
 11924 ;;		Unchanged: 0/0
 11925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;Total ram usage:        1 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; Hardware stack levels required when called:    6
 11933 ;; This function calls:
 11934 ;;		_SwPointSelect
 11935 ;; This function is called by:
 11936 ;;		_my_Main
 11937 ;;		_setLoad_Exceptions
 11938 ;;		_setOverTemp_Exceptions
 11939 ;; This function uses a non-reentrant model
 11940 ;;
 11941                           
 11942                           
 11943                           ;psect for function _setSw_Enable
 11944  19D8                     _setSw_Enable:	
 11945                           
 11946                           ;incstack = 0
 11947                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11948                           ;setSw_Enable@command stored from wreg
 11949  19D8  0020               	movlb	0	; select bank0
 11950  19D9  00A2               	movwf	setSw_Enable@command
 11951                           
 11952                           ;Switch_B1.c: 88: SwPointSelect(1);
 11953  19DA  3001               	movlw	1
 11954  19DB  31A7  27EC  3199   	fcall	_SwPointSelect
 11955                           
 11956                           ;Switch_B1.c: 89: Sw->Enable = command;
 11957  19DE  087A               	movf	_Sw,w
 11958  19DF  0086               	movwf	6
 11959  19E0  3001               	movlw	1	; select bank2/3
 11960  19E1  0087               	movwf	7
 11961  19E2  0020               	movlb	0	; select bank0
 11962  19E3  0822               	movf	setSw_Enable@command,w
 11963  19E4  1001               	bcf	1,0
 11964  19E5  1D03               	skipz
 11965  19E6  1401               	bsf	1,0
 11966                           
 11967                           ;Switch_B1.c: 93: SwPointSelect(2);
 11968  19E7  3002               	movlw	2
 11969  19E8  31A7  27EC         	fcall	_SwPointSelect
 11970                           
 11971                           ;Switch_B1.c: 94: Sw->Enable = command;
 11972  19EA  087A               	movf	_Sw,w
 11973  19EB  0086               	movwf	6
 11974  19EC  3001               	movlw	1	; select bank2/3
 11975  19ED  0087               	movwf	7
 11976  19EE  0020               	movlb	0	; select bank0
 11977  19EF  0822               	movf	setSw_Enable@command,w
 11978  19F0  1001               	bcf	1,0
 11979  19F1  1D03               	skipz
 11980  19F2  1401               	bsf	1,0
 11981  19F3  0008               	return
 11982  19F4                     __end_of_setSw_Enable:	
 11983                           
 11984                           	psect	text59
 11985  1B75                     __ptext59:	
 11986 ;; *************** function _setRF_Enable *****************
 11987 ;; Defined at:
 11988 ;;		line 197 in file "../src/RF_Control_B1.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  rf              1    wreg     unsigned char 
 11991 ;;  command         1    2[BANK0 ] unsigned char 
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  rf              1    3[BANK0 ] unsigned char 
 11994 ;; Return value:  Size  Location     Type
 11995 ;;		None               void
 11996 ;; Registers used:
 11997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12003 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;Total ram usage:        2 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; Hardware stack levels required when called:    6
 12010 ;; This function calls:
 12011 ;;		_RfPointSelect
 12012 ;; This function is called by:
 12013 ;;		_my_Main
 12014 ;;		_setLoad_Exceptions
 12015 ;;		_setOverTemp_Exceptions
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           
 12020                           ;psect for function _setRF_Enable
 12021  1B75                     _setRF_Enable:	
 12022                           
 12023                           ;incstack = 0
 12024                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12025                           ;setRF_Enable@rf stored from wreg
 12026  1B75  0020               	movlb	0	; select bank0
 12027  1B76  00A3               	movwf	setRF_Enable@rf
 12028                           
 12029                           ;RF_Control_B1.c: 198: RfPointSelect(rf);
 12030  1B77  0823               	movf	setRF_Enable@rf,w
 12031  1B78  31A6  26DF         	fcall	_RfPointSelect
 12032                           
 12033                           ;RF_Control_B1.c: 199: RF->Enable = command;
 12034  1B7A  0021               	movlb	1	; select bank1
 12035  1B7B  083F               	movf	_RF^(0+128),w
 12036  1B7C  0086               	movwf	6
 12037  1B7D  0187               	clrf	7
 12038  1B7E  0020               	movlb	0	; select bank0
 12039  1B7F  0822               	movf	setRF_Enable@command,w
 12040  1B80  1001               	bcf	1,0
 12041  1B81  1D03               	skipz
 12042  1B82  1401               	bsf	1,0
 12043                           
 12044                           ;RF_Control_B1.c: 200: RF->Learn = 0;
 12045  1B83  0021               	movlb	1	; select bank1
 12046  1B84  083F               	movf	_RF^(0+128),w
 12047  1B85  0086               	movwf	6
 12048  1B86  0187               	clrf	7
 12049  1B87  1301               	bcf	1,6
 12050                           
 12051                           ;RF_Control_B1.c: 201: RF->TransceiveGO = 0;
 12052  1B88  083F               	movf	_RF^(0+128),w
 12053  1B89  0086               	movwf	6
 12054  1B8A  0187               	clrf	7
 12055  1B8B  1101               	bcf	1,2
 12056                           
 12057                           ;RF_Control_B1.c: 202: RF->RxStatus = 0;
 12058  1B8C  083F               	movf	_RF^(0+128),w
 12059  1B8D  0086               	movwf	6
 12060  1B8E  0187               	clrf	7
 12061  1B8F  1181               	bcf	1,3
 12062                           
 12063                           ;RF_Control_B1.c: 203: RF->ReceiveGO = 0;
 12064  1B90  083F               	movf	_RF^(0+128),w
 12065  1B91  0086               	movwf	6
 12066  1B92  0187               	clrf	7
 12067  1B93  1081               	bcf	1,1
 12068                           
 12069                           ;RF_Control_B1.c: 204: RF->DebounceTime = 0;
 12070  1B94  083F               	movf	_RF^(0+128),w
 12071  1B95  3E04               	addlw	4
 12072  1B96  0086               	movwf	6
 12073  1B97  0187               	clrf	7
 12074  1B98  0181               	clrf	1
 12075                           
 12076                           ;RF_Control_B1.c: 205: RF->Debounce = 0;
 12077  1B99  083F               	movf	_RF^(0+128),w
 12078  1B9A  0086               	movwf	6
 12079  1B9B  0187               	clrf	7
 12080  1B9C  1281               	bcf	1,5
 12081  1B9D  0008               	return
 12082  1B9E                     __end_of_setRF_Enable:	
 12083                           
 12084                           	psect	text60
 12085  137D                     __ptext60:	
 12086 ;; *************** function _DimmerLights_Exceptions *****************
 12087 ;; Defined at:
 12088 ;;		line 528 in file "../src/Dimmer_B1.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;  status          1    wreg     unsigned char 
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;  status          1   13[BANK0 ] unsigned char 
 12093 ;; Return value:  Size  Location     Type
 12094 ;;		None               void
 12095 ;; Registers used:
 12096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12097 ;; Tracked objects:
 12098 ;;		On entry : 0/0
 12099 ;;		On exit  : 0/0
 12100 ;;		Unchanged: 0/0
 12101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;Total ram usage:        1 bytes
 12107 ;; Hardware stack levels used:    1
 12108 ;; Hardware stack levels required when called:    8
 12109 ;; This function calls:
 12110 ;;		_getDimmerLights_StatusFlag
 12111 ;;		_setBuz
 12112 ;;		_setDimmerLights_ERROR
 12113 ;;		_setDimmerLights_TriggerERROR
 12114 ;; This function is called by:
 12115 ;;		_setLoad_Exceptions
 12116 ;;		_setOverTemp_Exceptions
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _DimmerLights_Exceptions
 12122  137D                     _DimmerLights_Exceptions:	
 12123                           
 12124                           ;incstack = 0
 12125                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12126                           ;DimmerLights_Exceptions@status stored from wreg
 12127  137D  0020               	movlb	0	; select bank0
 12128  137E  00AD               	movwf	DimmerLights_Exceptions@status
 12129                           
 12130                           ;Dimmer_B1.c: 529: if (status == 1)
 12131  137F  082D               	movf	DimmerLights_Exceptions@status,w
 12132  1380  3A01               	xorlw	1
 12133  1381  1D03               	skipz
 12134  1382  2B93               	goto	l6693
 12135                           
 12136                           ;Dimmer_B1.c: 530: {
 12137                           ;Dimmer_B1.c: 531: if (getDimmerLights_StatusFlag()) {
 12138  1383  31A7  2791  3193   	fcall	_getDimmerLights_StatusFlag
 12139  1386  3A00               	xorlw	0
 12140  1387  1903               	skipnz
 12141  1388  2BAB               	goto	l6699
 12142                           
 12143                           ;Dimmer_B1.c: 532: setBuz(10, 300);
 12144  1389  302C               	movlw	44
 12145  138A  0020               	movlb	0	; select bank0
 12146  138B  00A9               	movwf	setBuz@time
 12147  138C  3001               	movlw	1
 12148  138D  00AA               	movwf	setBuz@time+1
 12149  138E  300A               	movlw	10
 12150  138F  3188  2079  3193   	fcall	_setBuz
 12151  1392  2BAB               	goto	l6699
 12152  1393                     l6693:	
 12153                           ;Dimmer_B1.c: 544: } else if (status == 2)
 12154                           
 12155                           ;Dimmer_B1.c: 539: setDimmerLights_ERROR(2);
 12156                           
 12157                           ;Dimmer_B1.c: 533: }
 12158                           ;Dimmer_B1.c: 536: setDimmerLights_ERROR(1);
 12159                           
 12160  1393  0020               	movlb	0	; select bank0
 12161  1394  082D               	movf	DimmerLights_Exceptions@status,w
 12162  1395  3A02               	xorlw	2
 12163  1396  1D03               	skipz
 12164  1397  2BA6               	goto	l6697
 12165                           
 12166                           ;Dimmer_B1.c: 545: {
 12167                           ;Dimmer_B1.c: 546: setBuz(5, 300);
 12168  1398  302C               	movlw	44
 12169  1399  00A9               	movwf	setBuz@time
 12170  139A  3001               	movlw	1
 12171  139B  00AA               	movwf	setBuz@time+1
 12172  139C  3005               	movlw	5
 12173  139D  3188  2079  3193   	fcall	_setBuz
 12174                           
 12175                           ;Dimmer_B1.c: 547: setDimmerLights_ERROR(Dimmer->Load);
 12176  13A0  0021               	movlb	1	; select bank1
 12177  13A1  0A3A               	incf	_Dimmer^(0+128),w
 12178  13A2  0086               	movwf	6
 12179  13A3  0187               	clrf	7
 12180  13A4  0801               	movf	1,w
 12181  13A5  2BB0               	goto	L12
 12182  13A6                     l6697:	
 12183                           ;Dimmer_B1.c: 548: } else if (status == 3)
 12184                           
 12185  13A6  0020               	movlb	0	; select bank0
 12186  13A7  082D               	movf	DimmerLights_Exceptions@status,w
 12187  13A8  3A03               	xorlw	3
 12188  13A9  1D03               	skipz
 12189  13AA  2BB3               	goto	l925
 12190  13AB                     l6699:	
 12191                           
 12192                           ;Dimmer_B1.c: 549: {
 12193                           ;Dimmer_B1.c: 551: setDimmerLights_ERROR(1);
 12194  13AB  3001               	movlw	1
 12195  13AC  3191  2151  3193   	fcall	_setDimmerLights_ERROR
 12196                           
 12197                           ;Dimmer_B1.c: 554: setDimmerLights_ERROR(2);
 12198  13AF  3002               	movlw	2
 12199  13B0                     L12:	
 12200  13B0  3191  2151  3193   	fcall	_setDimmerLights_ERROR
 12201  13B3                     l925:	
 12202                           
 12203                           ;Dimmer_B1.c: 559: }
 12204                           ;Dimmer_B1.c: 562: setDimmerLights_TriggerERROR(1, 0);
 12205  13B3  0020               	movlb	0	; select bank0
 12206  13B4  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12207  13B5  3001               	movlw	1
 12208  13B6  319B  23C8  3193   	fcall	_setDimmerLights_TriggerERROR
 12209                           
 12210                           ;Dimmer_B1.c: 565: setDimmerLights_TriggerERROR(2, 0);
 12211  13B9  0020               	movlb	0	; select bank0
 12212  13BA  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12213  13BB  3002               	movlw	2
 12214  13BC  319B  23C8  3193   	fcall	_setDimmerLights_TriggerERROR
 12215                           
 12216                           ;Dimmer_B1.c: 571: if (myMain->SelfTest == 0) {
 12217  13BF  0021               	movlb	1	; select bank1
 12218  13C0  086D               	movf	_myMain^(0+128),w
 12219  13C1  0086               	movwf	6
 12220  13C2  3001               	movlw	1	; select bank2/3
 12221  13C3  0087               	movwf	7
 12222  13C4  1B01               	btfsc	1,6
 12223  13C5  0008               	return
 12224                           
 12225                           ;Dimmer_B1.c: 573: myMain->i = 0;
 12226  13C6  086D               	movf	_myMain^(0+128),w
 12227  13C7  3E0E               	addlw	14
 12228  13C8  0086               	movwf	6
 12229  13C9  3001               	movlw	1	; select bank2/3
 12230  13CA  0087               	movwf	7
 12231  13CB  1001               	bcf	1,0
 12232                           
 12233                           ;Dimmer_B1.c: 574: myMain->j = 0;
 12234  13CC  086D               	movf	_myMain^(0+128),w
 12235  13CD  3E0E               	addlw	14
 12236  13CE  0086               	movwf	6
 12237  13CF  3001               	movlw	1	; select bank2/3
 12238  13D0  0087               	movwf	7
 12239  13D1  1081               	bcf	1,1
 12240                           
 12241                           ;Dimmer_B1.c: 575: myMain->k = 1;
 12242  13D2  086D               	movf	_myMain^(0+128),w
 12243  13D3  3E0E               	addlw	14
 12244  13D4  0086               	movwf	6
 12245  13D5  3001               	movlw	1	; select bank2/3
 12246  13D6  0087               	movwf	7
 12247  13D7  1501               	bsf	1,2
 12248                           
 12249                           ;Dimmer_B1.c: 576: myMain->Count2 = 0;
 12250  13D8  086D               	movf	_myMain^(0+128),w
 12251  13D9  3E07               	addlw	7
 12252  13DA  0086               	movwf	6
 12253  13DB  3001               	movlw	1	; select bank2/3
 12254  13DC  0087               	movwf	7
 12255  13DD  3000               	movlw	0
 12256  13DE  3FC0               	movwi [0]fsr1
 12257  13DF  3FC1               	movwi [1]fsr1
 12258  13E0  0008               	return
 12259  13E1                     __end_of_DimmerLights_Exceptions:	
 12260                           
 12261                           	psect	text61
 12262  1BC8                     __ptext61:	
 12263 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12264 ;; Defined at:
 12265 ;;		line 599 in file "../src/Dimmer_B1.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  lights          1    wreg     unsigned char 
 12268 ;;  command         1    2[BANK0 ] unsigned char 
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;  lights          1    3[BANK0 ] unsigned char 
 12271 ;; Return value:  Size  Location     Type
 12272 ;;		None               void
 12273 ;; Registers used:
 12274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12280 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12284 ;;Total ram usage:        2 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; Hardware stack levels required when called:    6
 12287 ;; This function calls:
 12288 ;;		_DimmerLightsPointSelect
 12289 ;; This function is called by:
 12290 ;;		_DimmerLights_Exceptions
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           
 12295                           ;psect for function _setDimmerLights_TriggerERROR
 12296  1BC8                     _setDimmerLights_TriggerERROR:	
 12297                           
 12298                           ;incstack = 0
 12299                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12300                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12301  1BC8  0020               	movlb	0	; select bank0
 12302  1BC9  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12303                           
 12304                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(lights);
 12305  1BCA  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12306  1BCB  31A7  27C5         	fcall	_DimmerLightsPointSelect
 12307                           
 12308                           ;Dimmer_B1.c: 602: DimmerLights->Trigger = command;
 12309  1BCD  0878               	movf	_DimmerLights,w
 12310  1BCE  3E08               	addlw	8
 12311  1BCF  0086               	movwf	6
 12312  1BD0  3001               	movlw	1	; select bank2/3
 12313  1BD1  0087               	movwf	7
 12314  1BD2  0020               	movlb	0	; select bank0
 12315  1BD3  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12316  1BD4  1101               	bcf	1,2
 12317  1BD5  1D03               	skipz
 12318  1BD6  1501               	bsf	1,2
 12319                           
 12320                           ;Dimmer_B1.c: 603: DimmerLights->Switch = command;
 12321  1BD7  0878               	movf	_DimmerLights,w
 12322  1BD8  3E08               	addlw	8
 12323  1BD9  0086               	movwf	6
 12324  1BDA  3001               	movlw	1	; select bank2/3
 12325  1BDB  0087               	movwf	7
 12326  1BDC  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12327  1BDD  1081               	bcf	1,1
 12328  1BDE  1D03               	skipz
 12329  1BDF  1481               	bsf	1,1
 12330                           
 12331                           ;Dimmer_B1.c: 604: DimmerLights->TriggerAdj = command;
 12332  1BE0  0878               	movf	_DimmerLights,w
 12333  1BE1  3E08               	addlw	8
 12334  1BE2  0086               	movwf	6
 12335  1BE3  3001               	movlw	1	; select bank2/3
 12336  1BE4  0087               	movwf	7
 12337  1BE5  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12338  1BE6  1201               	bcf	1,4
 12339  1BE7  1D03               	skipz
 12340  1BE8  1601               	bsf	1,4
 12341                           
 12342                           ;Dimmer_B1.c: 605: DimmerLights->AdjGo = command;
 12343  1BE9  0878               	movf	_DimmerLights,w
 12344  1BEA  3E08               	addlw	8
 12345  1BEB  0086               	movwf	6
 12346  1BEC  3001               	movlw	1	; select bank2/3
 12347  1BED  0087               	movwf	7
 12348  1BEE  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12349  1BEF  1181               	bcf	1,3
 12350  1BF0  1D03               	skipz
 12351  1BF1  1581               	bsf	1,3
 12352  1BF2  0008               	return
 12353  1BF3                     __end_of_setDimmerLights_TriggerERROR:	
 12354                           
 12355                           	psect	text62
 12356  1151                     __ptext62:	
 12357 ;; *************** function _setDimmerLights_ERROR *****************
 12358 ;; Defined at:
 12359 ;;		line 581 in file "../src/Dimmer_B1.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;  lights          1    wreg     unsigned char 
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;  lights          1    5[BANK0 ] unsigned char 
 12364 ;; Return value:  Size  Location     Type
 12365 ;;		None               void
 12366 ;; Registers used:
 12367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;Total ram usage:        2 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    7
 12380 ;; This function calls:
 12381 ;;		_DimmerLightsPointSelect
 12382 ;;		_setLED
 12383 ;;		_setLoad_StatusOff
 12384 ;;		_setRFSW_Status
 12385 ;;		_setSw_Status
 12386 ;; This function is called by:
 12387 ;;		_DimmerLights_Exceptions
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391                           
 12392                           ;psect for function _setDimmerLights_ERROR
 12393  1151                     _setDimmerLights_ERROR:	
 12394                           
 12395                           ;incstack = 0
 12396                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12397                           ;setDimmerLights_ERROR@lights stored from wreg
 12398  1151  0020               	movlb	0	; select bank0
 12399  1152  00A5               	movwf	setDimmerLights_ERROR@lights
 12400                           
 12401                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 12402  1153  0825               	movf	setDimmerLights_ERROR@lights,w
 12403  1154  31A7  27C5  3191   	fcall	_DimmerLightsPointSelect
 12404                           
 12405                           ;Dimmer_B1.c: 583: if (DimmerLights->Status) {
 12406  1157  0878               	movf	_DimmerLights,w
 12407  1158  0086               	movwf	6
 12408  1159  3001               	movlw	1	; select bank2/3
 12409  115A  0087               	movwf	7
 12410  115B  1E81               	btfss	1,5
 12411  115C  0008               	return
 12412                           
 12413                           ;Dimmer_B1.c: 585: DimmerLights->Signal = 0;
 12414  115D  0878               	movf	_DimmerLights,w
 12415  115E  0086               	movwf	6
 12416  115F  3001               	movlw	1	; select bank2/3
 12417  1160  0087               	movwf	7
 12418  1161  1081               	bcf	1,1
 12419                           
 12420                           ;Dimmer_B1.c: 586: DimmerLights->AdjFlag = 0;
 12421  1162  0878               	movf	_DimmerLights,w
 12422  1163  0086               	movwf	6
 12423  1164  3001               	movlw	1	; select bank2/3
 12424  1165  0087               	movwf	7
 12425  1166  1181               	bcf	1,3
 12426                           
 12427                           ;Dimmer_B1.c: 587: DimmerLights->AdjStatus = 0;
 12428  1167  0878               	movf	_DimmerLights,w
 12429  1168  0086               	movwf	6
 12430  1169  3001               	movlw	1	; select bank2/3
 12431  116A  0087               	movwf	7
 12432  116B  1201               	bcf	1,4
 12433                           
 12434                           ;Dimmer_B1.c: 588: DimmerLights->StatusFlag = 0;
 12435  116C  0878               	movf	_DimmerLights,w
 12436  116D  0086               	movwf	6
 12437  116E  3001               	movlw	1	; select bank2/3
 12438  116F  0087               	movwf	7
 12439  1170  1301               	bcf	1,6
 12440                           
 12441                           ;Dimmer_B1.c: 589: DimmerLights->DimmingTimeValue = 6;
 12442  1171  3006               	movlw	6
 12443  1172  0020               	movlb	0	; select bank0
 12444  1173  00A4               	movwf	??_setDimmerLights_ERROR
 12445  1174  0878               	movf	_DimmerLights,w
 12446  1175  3E02               	addlw	2
 12447  1176  0086               	movwf	6
 12448  1177  3001               	movlw	1	; select bank2/3
 12449  1178  0087               	movwf	7
 12450  1179  0824               	movf	??_setDimmerLights_ERROR,w
 12451  117A  0081               	movwf	1
 12452                           
 12453                           ;Dimmer_B1.c: 590: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12454  117B  0878               	movf	_DimmerLights,w
 12455  117C  3E06               	addlw	6
 12456  117D  0086               	movwf	6
 12457  117E  3001               	movlw	1	; select bank2/3
 12458  117F  0087               	movwf	7
 12459  1180  0801               	movf	1,w
 12460  1181  00A4               	movwf	??_setDimmerLights_ERROR
 12461  1182  0878               	movf	_DimmerLights,w
 12462  1183  3E04               	addlw	4
 12463  1184  0086               	movwf	6
 12464  1185  3001               	movlw	1	; select bank2/3
 12465  1186  0087               	movwf	7
 12466  1187  0824               	movf	??_setDimmerLights_ERROR,w
 12467  1188  0081               	movwf	1
 12468                           
 12469                           ;Dimmer_B1.c: 591: Dimmer->Detect = 1;
 12470  1189  0021               	movlb	1	; select bank1
 12471  118A  083A               	movf	_Dimmer^(0+128),w
 12472  118B  0086               	movwf	6
 12473  118C  0187               	clrf	7
 12474  118D  1401               	bsf	1,0
 12475                           
 12476                           ;Dimmer_B1.c: 592: setLoad_StatusOff(lights, 1);
 12477  118E  0020               	movlb	0	; select bank0
 12478  118F  01A0               	clrf	setLoad_StatusOff@command
 12479  1190  0AA0               	incf	setLoad_StatusOff@command,f
 12480  1191  0825               	movf	setDimmerLights_ERROR@lights,w
 12481  1192  319C  24AC  3191   	fcall	_setLoad_StatusOff
 12482                           
 12483                           ;Dimmer_B1.c: 593: setLED(lights, 1);
 12484  1195  0020               	movlb	0	; select bank0
 12485  1196  01A2               	clrf	setLED@command
 12486  1197  0AA2               	incf	setLED@command,f
 12487  1198  0825               	movf	setDimmerLights_ERROR@lights,w
 12488  1199  3192  2260  3191   	fcall	_setLED
 12489                           
 12490                           ;Dimmer_B1.c: 594: setSw_Status(lights, 0);
 12491  119C  0020               	movlb	0	; select bank0
 12492  119D  01A2               	clrf	setSw_Status@command
 12493  119E  0825               	movf	setDimmerLights_ERROR@lights,w
 12494  119F  31A6  26D0  3191   	fcall	_setSw_Status
 12495                           
 12496                           ;Dimmer_B1.c: 595: setRFSW_Status(lights, 0);
 12497  11A2  0020               	movlb	0	; select bank0
 12498  11A3  01A2               	clrf	setRFSW_Status@command
 12499  11A4  0825               	movf	setDimmerLights_ERROR@lights,w
 12500  11A5  31A6  26C1         	fcall	_setRFSW_Status
 12501  11A7  0008               	return
 12502  11A8                     __end_of_setDimmerLights_ERROR:	
 12503                           
 12504                           	psect	text63
 12505  271E                     __ptext63:	
 12506 ;; *************** function _setDimmerLights_Clear *****************
 12507 ;; Defined at:
 12508 ;;		line 735 in file "../src/Dimmer_B1.c"
 12509 ;; Parameters:    Size  Location     Type
 12510 ;;  lights          1    wreg     unsigned char 
 12511 ;;  command         1    2[BANK0 ] unsigned char 
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  lights          1    3[BANK0 ] unsigned char 
 12514 ;; Return value:  Size  Location     Type
 12515 ;;		None               void
 12516 ;; Registers used:
 12517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12518 ;; Tracked objects:
 12519 ;;		On entry : 0/0
 12520 ;;		On exit  : 0/0
 12521 ;;		Unchanged: 0/0
 12522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12523 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;Total ram usage:        2 bytes
 12528 ;; Hardware stack levels used:    1
 12529 ;; Hardware stack levels required when called:    6
 12530 ;; This function calls:
 12531 ;;		_DimmerLightsPointSelect
 12532 ;; This function is called by:
 12533 ;;		_Load_Main
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _setDimmerLights_Clear
 12539  271E                     _setDimmerLights_Clear:	
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12543                           ;setDimmerLights_Clear@lights stored from wreg
 12544  271E  0020               	movlb	0	; select bank0
 12545  271F  00A3               	movwf	setDimmerLights_Clear@lights
 12546                           
 12547                           ;Dimmer_B1.c: 737: DimmerLightsPointSelect(lights);
 12548  2720  0823               	movf	setDimmerLights_Clear@lights,w
 12549  2721  31A7  27C5         	fcall	_DimmerLightsPointSelect
 12550                           
 12551                           ;Dimmer_B1.c: 738: DimmerLights->Clear = command;
 12552  2723  0878               	movf	_DimmerLights,w
 12553  2724  3E09               	addlw	9
 12554  2725  0086               	movwf	6
 12555  2726  3001               	movlw	1	; select bank2/3
 12556  2727  0087               	movwf	7
 12557  2728  0020               	movlb	0	; select bank0
 12558  2729  0822               	movf	setDimmerLights_Clear@command,w
 12559  272A  1101               	bcf	1,2
 12560  272B  1D03               	skipz
 12561  272C  1501               	bsf	1,2
 12562  272D  0008               	return
 12563  272E                     __end_of_setDimmerLights_Clear:	
 12564                           
 12565                           	psect	text64
 12566  25B8                     __ptext64:	
 12567 ;; *************** function _getTemp_Safe *****************
 12568 ;; Defined at:
 12569 ;;		line 26 in file "../src/OverTemperature_B1.c"
 12570 ;; Parameters:    Size  Location     Type
 12571 ;;		None
 12572 ;; Auto vars:     Size  Location     Type
 12573 ;;		None
 12574 ;; Return value:  Size  Location     Type
 12575 ;;                  1    wreg      unsigned char 
 12576 ;; Registers used:
 12577 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12578 ;; Tracked objects:
 12579 ;;		On entry : 0/0
 12580 ;;		On exit  : 0/0
 12581 ;;		Unchanged: 0/0
 12582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;Total ram usage:        0 bytes
 12588 ;; Hardware stack levels used:    1
 12589 ;; Hardware stack levels required when called:    5
 12590 ;; This function calls:
 12591 ;;		Nothing
 12592 ;; This function is called by:
 12593 ;;		_Load_Main
 12594 ;; This function uses a non-reentrant model
 12595 ;;
 12596                           
 12597                           
 12598                           ;psect for function _getTemp_Safe
 12599  25B8                     _getTemp_Safe:	
 12600                           
 12601                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 12602                           
 12603                           ;incstack = 0
 12604                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12605  25B8  0021               	movlb	1	; select bank1
 12606  25B9  0844               	movf	_Temp^(0+128),w
 12607  25BA  0086               	movwf	6
 12608  25BB  3001               	movlw	1	; select bank2/3
 12609  25BC  0087               	movwf	7
 12610  25BD  0E01               	swapf	1,w
 12611  25BE  3901               	andlw	1
 12612  25BF  0008               	return
 12613  25C0                     __end_of_getTemp_Safe:	
 12614                           
 12615                           	psect	text65
 12616  1A2D                     __ptext65:	
 12617 ;; *************** function ___wmul *****************
 12618 ;; Defined at:
 12619 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12622 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  product         2    4[BANK0 ] unsigned int 
 12625 ;; Return value:  Size  Location     Type
 12626 ;;                  2    0[BANK0 ] unsigned int 
 12627 ;; Registers used:
 12628 ;;		wreg, status,2, status,0
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12634 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;Total ram usage:        6 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    5
 12641 ;; This function calls:
 12642 ;;		Nothing
 12643 ;; This function is called by:
 12644 ;;		_Load_Main
 12645 ;; This function uses a non-reentrant model
 12646 ;;
 12647                           
 12648                           
 12649                           ;psect for function ___wmul
 12650  1A2D                     ___wmul:	
 12651                           
 12652                           ;incstack = 0
 12653                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12654  1A2D  0020               	movlb	0	; select bank0
 12655  1A2E  01A4               	clrf	___wmul@product
 12656  1A2F  01A5               	clrf	___wmul@product+1
 12657  1A30                     l7841:	
 12658  1A30  1C20               	btfss	___wmul@multiplier,0
 12659  1A31  2A36               	goto	l3110
 12660  1A32  0822               	movf	___wmul@multiplicand,w
 12661  1A33  07A4               	addwf	___wmul@product,f
 12662  1A34  0823               	movf	___wmul@multiplicand+1,w
 12663  1A35  3DA5               	addwfc	___wmul@product+1,f
 12664  1A36                     l3110:	
 12665  1A36  3001               	movlw	1
 12666  1A37                     u7115:	
 12667  1A37  35A2               	lslf	___wmul@multiplicand,f
 12668  1A38  0DA3               	rlf	___wmul@multiplicand+1,f
 12669  1A39  0B89               	decfsz	9,f
 12670  1A3A  2A37               	goto	u7115
 12671  1A3B  3001               	movlw	1
 12672  1A3C                     u7125:	
 12673  1A3C  36A1               	lsrf	___wmul@multiplier+1,f
 12674  1A3D  0CA0               	rrf	___wmul@multiplier,f
 12675  1A3E  0B89               	decfsz	9,f
 12676  1A3F  2A3C               	goto	u7125
 12677  1A40  0821               	movf	___wmul@multiplier+1,w
 12678  1A41  0420               	iorwf	___wmul@multiplier,w
 12679  1A42  1D03               	skipz
 12680  1A43  2A30               	goto	l7841
 12681  1A44  0825               	movf	___wmul@product+1,w
 12682  1A45  01A1               	clrf	?___wmul+1
 12683  1A46  07A1               	addwf	?___wmul+1,f
 12684  1A47  0824               	movf	___wmul@product,w
 12685  1A48  01A0               	clrf	?___wmul
 12686  1A49  07A0               	addwf	?___wmul,f
 12687  1A4A  0008               	return
 12688  1A4B                     __end_of___wmul:	
 12689                           
 12690                           	psect	text66
 12691  1DAC                     __ptext66:	
 12692 ;; *************** function ___lwdiv *****************
 12693 ;; Defined at:
 12694 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;  divisor         2    0[BANK0 ] unsigned int 
 12697 ;;  dividend        2    2[BANK0 ] unsigned int 
 12698 ;; Auto vars:     Size  Location     Type
 12699 ;;  quotient        2    5[BANK0 ] unsigned int 
 12700 ;;  counter         1    7[BANK0 ] unsigned char 
 12701 ;; Return value:  Size  Location     Type
 12702 ;;                  2    0[BANK0 ] unsigned int 
 12703 ;; Registers used:
 12704 ;;		wreg, status,2, status,0
 12705 ;; Tracked objects:
 12706 ;;		On entry : 0/0
 12707 ;;		On exit  : 0/0
 12708 ;;		Unchanged: 0/0
 12709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12710 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;Total ram usage:        8 bytes
 12715 ;; Hardware stack levels used:    1
 12716 ;; Hardware stack levels required when called:    5
 12717 ;; This function calls:
 12718 ;;		Nothing
 12719 ;; This function is called by:
 12720 ;;		_Load_Main
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           
 12725                           ;psect for function ___lwdiv
 12726  1DAC                     ___lwdiv:	
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12730  1DAC  0020               	movlb	0	; select bank0
 12731  1DAD  01A5               	clrf	___lwdiv@quotient
 12732  1DAE  01A6               	clrf	___lwdiv@quotient+1
 12733  1DAF  0821               	movf	___lwdiv@divisor+1,w
 12734  1DB0  0420               	iorwf	___lwdiv@divisor,w
 12735  1DB1  1903               	skipnz
 12736  1DB2  2DDC               	goto	l7873
 12737  1DB3  01A7               	clrf	___lwdiv@counter
 12738  1DB4  0AA7               	incf	___lwdiv@counter,f
 12739  1DB5                     l7861:	
 12740  1DB5  1BA1               	btfsc	___lwdiv@divisor+1,7
 12741  1DB6  2DC1               	goto	l7863
 12742  1DB7  3001               	movlw	1
 12743  1DB8                     u7155:	
 12744  1DB8  35A0               	lslf	___lwdiv@divisor,f
 12745  1DB9  0DA1               	rlf	___lwdiv@divisor+1,f
 12746  1DBA  0B89               	decfsz	9,f
 12747  1DBB  2DB8               	goto	u7155
 12748  1DBC  3001               	movlw	1
 12749  1DBD  00A4               	movwf	??___lwdiv
 12750  1DBE  0824               	movf	??___lwdiv,w
 12751  1DBF  07A7               	addwf	___lwdiv@counter,f
 12752  1DC0  2DB5               	goto	l7861
 12753  1DC1                     l7863:	
 12754  1DC1  3001               	movlw	1
 12755  1DC2                     u7175:	
 12756  1DC2  35A5               	lslf	___lwdiv@quotient,f
 12757  1DC3  0DA6               	rlf	___lwdiv@quotient+1,f
 12758  1DC4  0B89               	decfsz	9,f
 12759  1DC5  2DC2               	goto	u7175
 12760  1DC6  0821               	movf	___lwdiv@divisor+1,w
 12761  1DC7  0223               	subwf	___lwdiv@dividend+1,w
 12762  1DC8  1D03               	skipz
 12763  1DC9  2DCC               	goto	u7185
 12764  1DCA  0820               	movf	___lwdiv@divisor,w
 12765  1DCB  0222               	subwf	___lwdiv@dividend,w
 12766  1DCC                     u7185:	
 12767  1DCC  1C03               	skipc
 12768  1DCD  2DD3               	goto	l7869
 12769  1DCE  0820               	movf	___lwdiv@divisor,w
 12770  1DCF  02A2               	subwf	___lwdiv@dividend,f
 12771  1DD0  0821               	movf	___lwdiv@divisor+1,w
 12772  1DD1  3BA3               	subwfb	___lwdiv@dividend+1,f
 12773  1DD2  1425               	bsf	___lwdiv@quotient,0
 12774  1DD3                     l7869:	
 12775  1DD3  3001               	movlw	1
 12776  1DD4                     u7195:	
 12777  1DD4  36A1               	lsrf	___lwdiv@divisor+1,f
 12778  1DD5  0CA0               	rrf	___lwdiv@divisor,f
 12779  1DD6  0B89               	decfsz	9,f
 12780  1DD7  2DD4               	goto	u7195
 12781  1DD8  3001               	movlw	1
 12782  1DD9  02A7               	subwf	___lwdiv@counter,f
 12783  1DDA  1D03               	btfss	3,2
 12784  1DDB  2DC1               	goto	l7863
 12785  1DDC                     l7873:	
 12786  1DDC  0826               	movf	___lwdiv@quotient+1,w
 12787  1DDD  01A1               	clrf	?___lwdiv+1
 12788  1DDE  07A1               	addwf	?___lwdiv+1,f
 12789  1DDF  0825               	movf	___lwdiv@quotient,w
 12790  1DE0  01A0               	clrf	?___lwdiv
 12791  1DE1  07A0               	addwf	?___lwdiv,f
 12792  1DE2  0008               	return
 12793  1DE3                     __end_of___lwdiv:	
 12794                           
 12795                           	psect	text67
 12796  2672                     __ptext67:	
 12797 ;; *************** function _Load_Initialization *****************
 12798 ;; Defined at:
 12799 ;;		line 9 in file "../src/OverLoad_B1.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;		None
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;		None               void
 12806 ;; Registers used:
 12807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:        1 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    6
 12820 ;; This function calls:
 12821 ;;		_setLoad_AH_AL_Restore
 12822 ;; This function is called by:
 12823 ;;		_main
 12824 ;; This function uses a non-reentrant model
 12825 ;;
 12826                           
 12827                           
 12828                           ;psect for function _Load_Initialization
 12829  2672                     _Load_Initialization:	
 12830                           
 12831                           ;OverLoad_B1.c: 10: Load = &Load1;
 12832                           
 12833                           ;incstack = 0
 12834                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12835  2672  30A0               	movlw	_Load1& (0+255)
 12836  2673  0020               	movlb	0	; select bank0
 12837  2674  00A2               	movwf	??_Load_Initialization
 12838  2675  0822               	movf	??_Load_Initialization,w
 12839  2676  00FB               	movwf	_Load
 12840                           
 12841                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 12842  2677  087B               	movf	_Load,w
 12843  2678  0086               	movwf	6
 12844  2679  3002               	movlw	2	; select bank4/5
 12845  267A  0087               	movwf	7
 12846  267B  1581               	bsf	1,3
 12847                           
 12848                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 12849  267C  319B  232D         	fcall	_setLoad_AH_AL_Restore
 12850  267E  0008               	return
 12851  267F                     __end_of_Load_Initialization:	
 12852                           
 12853                           	psect	text68
 12854  1B2D                     __ptext68:	
 12855 ;; *************** function _setLoad_AH_AL_Restore *****************
 12856 ;; Defined at:
 12857 ;;		line 307 in file "../src/OverLoad_B1.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;		None
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;  i               1    1[BANK0 ] unsigned char 
 12862 ;; Return value:  Size  Location     Type
 12863 ;;		None               void
 12864 ;; Registers used:
 12865 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;Total ram usage:        2 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:    5
 12878 ;; This function calls:
 12879 ;;		Nothing
 12880 ;; This function is called by:
 12881 ;;		_Load_Initialization
 12882 ;;		_Load_Main
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           
 12887                           ;psect for function _setLoad_AH_AL_Restore
 12888  1B2D                     _setLoad_AH_AL_Restore:	
 12889                           
 12890                           ;OverLoad_B1.c: 308: char i;
 12891                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12892                           
 12893                           ;incstack = 0
 12894                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12895  1B2D  0020               	movlb	0	; select bank0
 12896  1B2E  01A1               	clrf	setLoad_AH_AL_Restore@i
 12897  1B2F                     L13:	
 12898  1B2F  3005               	movlw	5
 12899  1B30  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12900  1B31  1803               	btfsc	3,0
 12901  1B32  0008               	return
 12902                           
 12903                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 12904  1B33  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12905  1B34  3E08               	addlw	8
 12906  1B35  077B               	addwf	_Load,w
 12907  1B36  00A0               	movwf	??_setLoad_AH_AL_Restore
 12908  1B37  0820               	movf	??_setLoad_AH_AL_Restore,w
 12909  1B38  0086               	movwf	6
 12910  1B39  3002               	movlw	2	; select bank4/5
 12911  1B3A  0087               	movwf	7
 12912  1B3B  3000               	movlw	0
 12913  1B3C  3FC0               	movwi [0]fsr1
 12914  1B3D  3FC1               	movwi [1]fsr1
 12915                           
 12916                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 12917  1B3E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12918  1B3F  3E1A               	addlw	26
 12919  1B40  077B               	addwf	_Load,w
 12920  1B41  00A0               	movwf	??_setLoad_AH_AL_Restore
 12921  1B42  0820               	movf	??_setLoad_AH_AL_Restore,w
 12922  1B43  0086               	movwf	6
 12923  1B44  3002               	movlw	2	; select bank4/5
 12924  1B45  0087               	movwf	7
 12925  1B46  30FF               	movlw	255
 12926  1B47  3FC0               	movwi [0]fsr1
 12927  1B48  30FF               	movlw	255
 12928  1B49  3FC1               	movwi [1]fsr1
 12929  1B4A  3001               	movlw	1
 12930  1B4B  00A0               	movwf	??_setLoad_AH_AL_Restore
 12931  1B4C  0820               	movf	??_setLoad_AH_AL_Restore,w
 12932  1B4D  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12933  1B4E  2B2F               	goto	L13
 12934  1B4F                     __end_of_setLoad_AH_AL_Restore:	
 12935                           
 12936                           	psect	text69
 12937  2640                     __ptext69:	
 12938 ;; *************** function _LED_Main *****************
 12939 ;; Defined at:
 12940 ;;		line 51 in file "../src/LED_B1.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;		None
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;		None
 12945 ;; Return value:  Size  Location     Type
 12946 ;;		None               void
 12947 ;; Registers used:
 12948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12949 ;; Tracked objects:
 12950 ;;		On entry : 0/0
 12951 ;;		On exit  : 0/0
 12952 ;;		Unchanged: 0/0
 12953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12958 ;;Total ram usage:        0 bytes
 12959 ;; Hardware stack levels used:    1
 12960 ;; Hardware stack levels required when called:    7
 12961 ;; This function calls:
 12962 ;;		_setLED_Main
 12963 ;; This function is called by:
 12964 ;;		_main
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _LED_Main
 12970  2640                     _LED_Main:	
 12971                           
 12972                           ;LED_B1.c: 54: setLED_Main(1);
 12973                           
 12974                           ;incstack = 0
 12975                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12976  2640  3001               	movlw	1
 12977  2641  319D  25E3  31A6   	fcall	_setLED_Main
 12978                           
 12979                           ;LED_B1.c: 57: setLED_Main(2);
 12980  2644  3002               	movlw	2
 12981  2645  319D  25E3  31A6   	fcall	_setLED_Main
 12982                           
 12983                           ;LED_B1.c: 63: setLED_Main(99);
 12984  2648  3063               	movlw	99
 12985  2649  319D  25E3         	fcall	_setLED_Main
 12986  264B  0008               	return
 12987  264C                     __end_of_LED_Main:	
 12988                           
 12989                           	psect	text70
 12990  1DE3                     __ptext70:	
 12991 ;; *************** function _setLED_Main *****************
 12992 ;; Defined at:
 12993 ;;		line 215 in file "../src/LED_B1.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;  led             1    wreg     unsigned char 
 12996 ;; Auto vars:     Size  Location     Type
 12997 ;;  led             1    4[BANK0 ] unsigned char 
 12998 ;; Return value:  Size  Location     Type
 12999 ;;		None               void
 13000 ;; Registers used:
 13001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13002 ;; Tracked objects:
 13003 ;;		On entry : 0/0
 13004 ;;		On exit  : 0/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;Total ram usage:        3 bytes
 13012 ;; Hardware stack levels used:    1
 13013 ;; Hardware stack levels required when called:    6
 13014 ;; This function calls:
 13015 ;;		_LedPointSelect
 13016 ;; This function is called by:
 13017 ;;		_LED_Main
 13018 ;; This function uses a non-reentrant model
 13019 ;;
 13020                           
 13021                           
 13022                           ;psect for function _setLED_Main
 13023  1DE3                     _setLED_Main:	
 13024                           
 13025                           ;incstack = 0
 13026                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13027                           ;setLED_Main@led stored from wreg
 13028  1DE3  0020               	movlb	0	; select bank0
 13029  1DE4  00A4               	movwf	setLED_Main@led
 13030                           
 13031                           ;LED_B1.c: 217: LedPointSelect(led);
 13032  1DE5  0824               	movf	setLED_Main@led,w
 13033  1DE6  319B  230B  319D   	fcall	_LedPointSelect
 13034                           
 13035                           ;LED_B1.c: 218: if(LED->GO)
 13036  1DE9  0021               	movlb	1	; select bank1
 13037  1DEA  083E               	movf	_LED^(0+128),w
 13038  1DEB  0086               	movwf	6
 13039  1DEC  0187               	clrf	7
 13040  1DED  1C81               	btfss	1,1
 13041  1DEE  0008               	return
 13042                           
 13043                           ;LED_B1.c: 219: {
 13044                           ;LED_B1.c: 220: LED->Time++;
 13045  1DEF  0A3E               	incf	_LED^(0+128),w
 13046  1DF0  0086               	movwf	6
 13047  1DF1  0187               	clrf	7
 13048  1DF2  3001               	movlw	1
 13049  1DF3  0781               	addwf	1,f
 13050  1DF4  3141               	addfsr 1,1
 13051  1DF5  1803               	skipnc
 13052  1DF6  0A81               	incf	1,f
 13053                           
 13054                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
 13055  1DF7  0A3E               	incf	_LED^(0+128),w
 13056  1DF8  0086               	movwf	6
 13057  1DF9  0187               	clrf	7
 13058  1DFA  3F40               	moviw [0]fsr1
 13059  1DFB  0020               	movlb	0	; select bank0
 13060  1DFC  00A2               	movwf	??_setLED_Main
 13061  1DFD  3F41               	moviw [1]fsr1
 13062  1DFE  00A3               	movwf	??_setLED_Main+1
 13063  1DFF  3000               	movlw	0
 13064  1E00  0223               	subwf	??_setLED_Main+1,w
 13065  1E01  3032               	movlw	50
 13066  1E02  1903               	skipnz
 13067  1E03  0222               	subwf	??_setLED_Main,w
 13068  1E04  1C03               	skipc
 13069  1E05  0008               	return
 13070                           
 13071                           ;LED_B1.c: 222: {
 13072                           ;LED_B1.c: 223: LED->Time=0;
 13073  1E06  0021               	movlb	1	; select bank1
 13074  1E07  0A3E               	incf	_LED^(0+128),w
 13075  1E08  0086               	movwf	6
 13076  1E09  0187               	clrf	7
 13077  1E0A  3000               	movlw	0
 13078  1E0B  3FC0               	movwi [0]fsr1
 13079  1E0C  3FC1               	movwi [1]fsr1
 13080                           
 13081                           ;LED_B1.c: 225: if(led == 1)
 13082  1E0D  0020               	movlb	0	; select bank0
 13083  1E0E  0824               	movf	setLED_Main@led,w
 13084  1E0F  3A01               	xorlw	1
 13085  1E10  1D03               	skipz
 13086  1E11  2E15               	goto	l7447
 13087                           
 13088                           ;LED_B1.c: 226: {
 13089                           ;LED_B1.c: 227: RA3=~RA3;
 13090  1E12  3008               	movlw	8
 13091  1E13  068C               	xorwf	12,f
 13092                           
 13093                           ;LED_B1.c: 228: }
 13094  1E14  0008               	return
 13095  1E15                     l7447:	
 13096                           
 13097                           ;LED_B1.c: 231: else if(led == 2)
 13098  1E15  0824               	movf	setLED_Main@led,w
 13099  1E16  3A02               	xorlw	2
 13100  1E17  1D03               	skipz
 13101  1E18  2E1C               	goto	l7451
 13102                           
 13103                           ;LED_B1.c: 232: {
 13104                           ;LED_B1.c: 233: RC7=~RC7;
 13105  1E19  3080               	movlw	128
 13106  1E1A  068E               	xorwf	14,f
 13107                           
 13108                           ;LED_B1.c: 234: }
 13109  1E1B  0008               	return
 13110  1E1C                     l7451:	
 13111                           
 13112                           ;LED_B1.c: 243: else if(led == 99)
 13113  1E1C  0824               	movf	setLED_Main@led,w
 13114  1E1D  3A63               	xorlw	99
 13115  1E1E  1D03               	skipz
 13116  1E1F  0008               	return
 13117                           
 13118                           ;LED_B1.c: 244: {
 13119                           ;LED_B1.c: 245: RB5=~RB5;
 13120  1E20  3020               	movlw	32
 13121  1E21  068D               	xorwf	13,f
 13122  1E22  0008               	return
 13123  1E23                     __end_of_setLED_Main:	
 13124                           
 13125                           	psect	text71
 13126  2634                     __ptext71:	
 13127 ;; *************** function _LED_Initialization *****************
 13128 ;; Defined at:
 13129 ;;		line 35 in file "../src/LED_B1.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;		None
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;		None
 13134 ;; Return value:  Size  Location     Type
 13135 ;;		None               void
 13136 ;; Registers used:
 13137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;Total ram usage:        0 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    8
 13150 ;; This function calls:
 13151 ;;		_setLED_Initialization
 13152 ;; This function is called by:
 13153 ;;		_main
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function _LED_Initialization
 13159  2634                     _LED_Initialization:	
 13160                           
 13161                           ;LED_B1.c: 38: setLED_Initialization(1);
 13162                           
 13163                           ;incstack = 0
 13164                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13165  2634  3001               	movlw	1
 13166  2635  31A7  27A2  31A6   	fcall	_setLED_Initialization
 13167                           
 13168                           ;LED_B1.c: 41: setLED_Initialization(2);
 13169  2638  3002               	movlw	2
 13170  2639  31A7  27A2  31A6   	fcall	_setLED_Initialization
 13171                           
 13172                           ;LED_B1.c: 47: setLED_Initialization(99);
 13173  263C  3063               	movlw	99
 13174  263D  31A7  27A2         	fcall	_setLED_Initialization
 13175  263F  0008               	return
 13176  2640                     __end_of_LED_Initialization:	
 13177                           
 13178                           	psect	text72
 13179  27A2                     __ptext72:	
 13180 ;; *************** function _setLED_Initialization *****************
 13181 ;; Defined at:
 13182 ;;		line 67 in file "../src/LED_B1.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;  led             1    wreg     unsigned char 
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;  led             1    4[BANK0 ] unsigned char 
 13187 ;; Return value:  Size  Location     Type
 13188 ;;		None               void
 13189 ;; Registers used:
 13190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;Total ram usage:        1 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; Hardware stack levels required when called:    7
 13203 ;; This function calls:
 13204 ;;		_LedPointSelect
 13205 ;;		_setLED
 13206 ;; This function is called by:
 13207 ;;		_LED_Initialization
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           
 13212                           ;psect for function _setLED_Initialization
 13213  27A2                     _setLED_Initialization:	
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13217                           ;setLED_Initialization@led stored from wreg
 13218  27A2  0020               	movlb	0	; select bank0
 13219  27A3  00A4               	movwf	setLED_Initialization@led
 13220                           
 13221                           ;LED_B1.c: 69: LedPointSelect(led);
 13222  27A4  0824               	movf	setLED_Initialization@led,w
 13223  27A5  319B  230B  31A7   	fcall	_LedPointSelect
 13224                           
 13225                           ;LED_B1.c: 70: LED->Enable=1;
 13226  27A8  0021               	movlb	1	; select bank1
 13227  27A9  083E               	movf	_LED^(0+128),w
 13228  27AA  0086               	movwf	6
 13229  27AB  0187               	clrf	7
 13230  27AC  1401               	bsf	1,0
 13231                           
 13232                           ;LED_B1.c: 71: setLED(led,0);
 13233  27AD  0020               	movlb	0	; select bank0
 13234  27AE  01A2               	clrf	setLED@command
 13235  27AF  0824               	movf	setLED_Initialization@led,w
 13236  27B0  3192  2260         	fcall	_setLED
 13237  27B2  0008               	return
 13238  27B3                     __end_of_setLED_Initialization:	
 13239                           
 13240                           	psect	text73
 13241  1F2F                     __ptext73:	
 13242 ;; *************** function _Flash_Memory_Main *****************
 13243 ;; Defined at:
 13244 ;;		line 787 in file "../src/MCU_B1.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;		None
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;		None
 13249 ;; Return value:  Size  Location     Type
 13250 ;;		None               void
 13251 ;; Registers used:
 13252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;Total ram usage:        0 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    8
 13265 ;; This function calls:
 13266 ;;		_Flash_Memory_Modify
 13267 ;; This function is called by:
 13268 ;;		_main
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           
 13273                           ;psect for function _Flash_Memory_Main
 13274  1F2F                     _Flash_Memory_Main:	
 13275                           
 13276                           ;MCU_B1.c: 788: if (Memory->GO == 1) {
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13280  1F2F  0021               	movlb	1	; select bank1
 13281  1F30  086E               	movf	_Memory^(0+128),w
 13282  1F31  3E24               	addlw	36
 13283  1F32  0086               	movwf	6
 13284  1F33  3002               	movlw	2	; select bank4/5
 13285  1F34  0087               	movwf	7
 13286  1F35  1C81               	btfss	1,1
 13287  1F36  0008               	return
 13288                           
 13289                           ;MCU_B1.c: 789: if (Memory->Modify == 1) {
 13290  1F37  086E               	movf	_Memory^(0+128),w
 13291  1F38  3E24               	addlw	36
 13292  1F39  0086               	movwf	6
 13293  1F3A  3002               	movlw	2	; select bank4/5
 13294  1F3B  0087               	movwf	7
 13295  1F3C  1C01               	btfss	1,0
 13296  1F3D  2F6C               	goto	l8049
 13297                           
 13298                           ;MCU_B1.c: 790: Memory->Time++;
 13299  1F3E  086E               	movf	_Memory^(0+128),w
 13300  1F3F  3E22               	addlw	34
 13301  1F40  0086               	movwf	6
 13302  1F41  3002               	movlw	2	; select bank4/5
 13303  1F42  0087               	movwf	7
 13304  1F43  3001               	movlw	1
 13305  1F44  0781               	addwf	1,f
 13306  1F45  3141               	addfsr 1,1
 13307  1F46  1803               	skipnc
 13308  1F47  0A81               	incf	1,f
 13309                           
 13310                           ;MCU_B1.c: 791: if (Memory->Time == 25)
 13311  1F48  086E               	movf	_Memory^(0+128),w
 13312  1F49  3E22               	addlw	34
 13313  1F4A  0086               	movwf	6
 13314  1F4B  3002               	movlw	2	; select bank4/5
 13315  1F4C  0087               	movwf	7
 13316  1F4D  3F40               	moviw [0]fsr1
 13317  1F4E  3A19               	xorlw	25
 13318  1F4F  1D03               	skipz
 13319  1F50  2F53               	goto	u7415
 13320  1F51  3F41               	moviw [1]fsr1
 13321  1F52  3A00               	xorlw	0
 13322  1F53                     u7415:	
 13323  1F53  1D03               	skipz
 13324  1F54  0008               	return
 13325                           
 13326                           ;MCU_B1.c: 792: {
 13327                           ;MCU_B1.c: 793: Memory->Time = 0;
 13328  1F55  086E               	movf	_Memory^(0+128),w
 13329  1F56  3E22               	addlw	34
 13330  1F57  0086               	movwf	6
 13331  1F58  3002               	movlw	2	; select bank4/5
 13332  1F59  0087               	movwf	7
 13333  1F5A  3000               	movlw	0
 13334  1F5B  3FC0               	movwi [0]fsr1
 13335  1F5C  3FC1               	movwi [1]fsr1
 13336                           
 13337                           ;MCU_B1.c: 794: Memory->Modify = 0;
 13338  1F5D  086E               	movf	_Memory^(0+128),w
 13339  1F5E  3E24               	addlw	36
 13340  1F5F  0086               	movwf	6
 13341  1F60  3002               	movlw	2	; select bank4/5
 13342  1F61  0087               	movwf	7
 13343  1F62  1001               	bcf	1,0
 13344                           
 13345                           ;MCU_B1.c: 795: Memory->GO = 0;
 13346  1F63  086E               	movf	_Memory^(0+128),w
 13347  1F64  3E24               	addlw	36
 13348  1F65  0086               	movwf	6
 13349  1F66  3002               	movlw	2	; select bank4/5
 13350  1F67  0087               	movwf	7
 13351  1F68  1081               	bcf	1,1
 13352                           
 13353                           ;MCU_B1.c: 796: Flash_Memory_Modify();
 13354  1F69  3194  24B5         	fcall	_Flash_Memory_Modify
 13355                           
 13356                           ;MCU_B1.c: 797: }
 13357                           ;MCU_B1.c: 798: } else {
 13358  1F6B  0008               	return
 13359  1F6C                     l8049:	
 13360                           
 13361                           ;MCU_B1.c: 799: Memory->GO = 0;
 13362  1F6C  0021               	movlb	1	; select bank1
 13363  1F6D  086E               	movf	_Memory^(0+128),w
 13364  1F6E  3E24               	addlw	36
 13365  1F6F  0086               	movwf	6
 13366  1F70  3002               	movlw	2	; select bank4/5
 13367  1F71  0087               	movwf	7
 13368  1F72  1081               	bcf	1,1
 13369  1F73  0008               	return
 13370  1F74                     __end_of_Flash_Memory_Main:	
 13371                           
 13372                           	psect	text74
 13373  14B5                     __ptext74:	
 13374 ;; *************** function _Flash_Memory_Modify *****************
 13375 ;; Defined at:
 13376 ;;		line 856 in file "../src/MCU_B1.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;		None
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  i               1    6[BANK0 ] unsigned char 
 13381 ;; Return value:  Size  Location     Type
 13382 ;;		None               void
 13383 ;; Registers used:
 13384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13385 ;; Tracked objects:
 13386 ;;		On entry : 0/0
 13387 ;;		On exit  : 0/0
 13388 ;;		Unchanged: 0/0
 13389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;Total ram usage:        3 bytes
 13395 ;; Hardware stack levels used:    1
 13396 ;; Hardware stack levels required when called:    7
 13397 ;; This function calls:
 13398 ;;		_Flash_Memory_Erasing
 13399 ;;		_Flash_Memory_Read
 13400 ;;		_Flash_Memory_Write
 13401 ;; This function is called by:
 13402 ;;		_Flash_Memory_Main
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           
 13407                           ;psect for function _Flash_Memory_Modify
 13408  14B5                     _Flash_Memory_Modify:	
 13409                           
 13410                           ;MCU_B1.c: 857: char i = 0;
 13411                           
 13412                           ;incstack = 0
 13413                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13414  14B5  0020               	movlb	0	; select bank0
 13415  14B6  01A6               	clrf	Flash_Memory_Modify@i
 13416                           
 13417                           ;MCU_B1.c: 858: for (i = 0; i < 32; i++) {
 13418  14B7  01A6               	clrf	Flash_Memory_Modify@i
 13419  14B8  3020               	movlw	32
 13420  14B9  0226               	subwf	Flash_Memory_Modify@i,w
 13421  14BA  1803               	btfsc	3,0
 13422  14BB  2CD5               	goto	l7541
 13423  14BC                     l7535:	
 13424                           
 13425                           ;MCU_B1.c: 859: Memory->Data[i] = Flash_Memory_Read(i);
 13426  14BC  0826               	movf	Flash_Memory_Modify@i,w
 13427  14BD  3199  2188  3194   	fcall	_Flash_Memory_Read
 13428  14C0  0020               	movlb	0	; select bank0
 13429  14C1  00A4               	movwf	??_Flash_Memory_Modify
 13430  14C2  0826               	movf	Flash_Memory_Modify@i,w
 13431  14C3  0021               	movlb	1	; select bank1
 13432  14C4  076E               	addwf	_Memory^(0+128),w
 13433  14C5  0020               	movlb	0	; select bank0
 13434  14C6  00A5               	movwf	??_Flash_Memory_Modify+1
 13435  14C7  0825               	movf	??_Flash_Memory_Modify+1,w
 13436  14C8  0086               	movwf	6
 13437  14C9  3002               	movlw	2	; select bank4/5
 13438  14CA  0087               	movwf	7
 13439  14CB  0824               	movf	??_Flash_Memory_Modify,w
 13440  14CC  0081               	movwf	1
 13441  14CD  3001               	movlw	1
 13442  14CE  00A4               	movwf	??_Flash_Memory_Modify
 13443  14CF  0824               	movf	??_Flash_Memory_Modify,w
 13444  14D0  07A6               	addwf	Flash_Memory_Modify@i,f
 13445  14D1  3020               	movlw	32
 13446  14D2  0226               	subwf	Flash_Memory_Modify@i,w
 13447  14D3  1C03               	skipc
 13448  14D4  2CBC               	goto	l7535
 13449  14D5                     l7541:	
 13450                           
 13451                           ;MCU_B1.c: 860: }
 13452                           ;MCU_B1.c: 861: Memory->Data[0]=product->Data[12];
 13453  14D5  087D               	movf	_product,w
 13454  14D6  3E0C               	addlw	12
 13455  14D7  0086               	movwf	6
 13456  14D8  3001               	movlw	1	; select bank2/3
 13457  14D9  0087               	movwf	7
 13458  14DA  0801               	movf	1,w
 13459  14DB  00A4               	movwf	??_Flash_Memory_Modify
 13460  14DC  0021               	movlb	1	; select bank1
 13461  14DD  086E               	movf	_Memory^(0+128),w
 13462  14DE  0086               	movwf	6
 13463  14DF  3002               	movlw	2	; select bank4/5
 13464  14E0  0087               	movwf	7
 13465  14E1  0020               	movlb	0	; select bank0
 13466  14E2  0824               	movf	??_Flash_Memory_Modify,w
 13467  14E3  0081               	movwf	1
 13468                           
 13469                           ;MCU_B1.c: 862: Memory->Data[1]=product->Data[13];
 13470  14E4  087D               	movf	_product,w
 13471  14E5  3E0D               	addlw	13
 13472  14E6  0086               	movwf	6
 13473  14E7  3001               	movlw	1	; select bank2/3
 13474  14E8  0087               	movwf	7
 13475  14E9  0801               	movf	1,w
 13476  14EA  00A4               	movwf	??_Flash_Memory_Modify
 13477  14EB  0021               	movlb	1	; select bank1
 13478  14EC  0A6E               	incf	_Memory^(0+128),w
 13479  14ED  0086               	movwf	6
 13480  14EE  3002               	movlw	2	; select bank4/5
 13481  14EF  0087               	movwf	7
 13482  14F0  0020               	movlb	0	; select bank0
 13483  14F1  0824               	movf	??_Flash_Memory_Modify,w
 13484  14F2  0081               	movwf	1
 13485                           
 13486                           ;MCU_B1.c: 863: Memory->Data[2]=product->Data[14];
 13487  14F3  087D               	movf	_product,w
 13488  14F4  3E0E               	addlw	14
 13489  14F5  0086               	movwf	6
 13490  14F6  3001               	movlw	1	; select bank2/3
 13491  14F7  0087               	movwf	7
 13492  14F8  0801               	movf	1,w
 13493  14F9  00A4               	movwf	??_Flash_Memory_Modify
 13494  14FA  0021               	movlb	1	; select bank1
 13495  14FB  086E               	movf	_Memory^(0+128),w
 13496  14FC  3E02               	addlw	2
 13497  14FD  0086               	movwf	6
 13498  14FE  3002               	movlw	2	; select bank4/5
 13499  14FF  0087               	movwf	7
 13500  1500  0020               	movlb	0	; select bank0
 13501  1501  0824               	movf	??_Flash_Memory_Modify,w
 13502  1502  0081               	movwf	1
 13503                           
 13504                           ;MCU_B1.c: 869: if (Memory->LoopSave == 1) {
 13505  1503  0021               	movlb	1	; select bank1
 13506  1504  086E               	movf	_Memory^(0+128),w
 13507  1505  3E24               	addlw	36
 13508  1506  0086               	movwf	6
 13509  1507  3002               	movlw	2	; select bank4/5
 13510  1508  0087               	movwf	7
 13511  1509  1D01               	btfss	1,2
 13512  150A  2D1B               	goto	l7545
 13513                           
 13514                           ;MCU_B1.c: 870: Memory->LoopSave = 0;
 13515  150B  086E               	movf	_Memory^(0+128),w
 13516  150C  3E24               	addlw	36
 13517  150D  0086               	movwf	6
 13518  150E  3002               	movlw	2	; select bank4/5
 13519  150F  0087               	movwf	7
 13520  1510  1101               	bcf	1,2
 13521                           
 13522                           ;MCU_B1.c: 871: myMain->FirstOpen = 0;
 13523  1511  086D               	movf	_myMain^(0+128),w
 13524  1512  0086               	movwf	6
 13525  1513  3001               	movlw	1	; select bank2/3
 13526  1514  0087               	movwf	7
 13527  1515  1281               	bcf	1,5
 13528                           
 13529                           ;MCU_B1.c: 872: myMain->First = 0;
 13530  1516  086D               	movf	_myMain^(0+128),w
 13531  1517  0086               	movwf	6
 13532  1518  3001               	movlw	1	; select bank2/3
 13533  1519  0087               	movwf	7
 13534  151A  1381               	bcf	1,7
 13535  151B                     l7545:	
 13536                           
 13537                           ;MCU_B1.c: 874: }
 13538                           ;MCU_B1.c: 875: GIE = 0;
 13539  151B  138B               	bcf	11,7	;volatile
 13540                           
 13541                           ;MCU_B1.c: 876: Flash_Memory_Erasing();
 13542  151C  31A6  2628  3194   	fcall	_Flash_Memory_Erasing
 13543                           
 13544                           ;MCU_B1.c: 877: Flash_Memory_Write();
 13545  151F  319D  250F         	fcall	_Flash_Memory_Write
 13546                           
 13547                           ;MCU_B1.c: 878: GIE = 1;
 13548  1521  178B               	bsf	11,7	;volatile
 13549  1522  0008               	return
 13550  1523                     __end_of_Flash_Memory_Modify:	
 13551                           
 13552                           	psect	text75
 13553  2628                     __ptext75:	
 13554 ;; *************** function _Flash_Memory_Erasing *****************
 13555 ;; Defined at:
 13556 ;;		line 845 in file "../src/MCU_B1.c"
 13557 ;; Parameters:    Size  Location     Type
 13558 ;;		None
 13559 ;; Auto vars:     Size  Location     Type
 13560 ;;		None
 13561 ;; Return value:  Size  Location     Type
 13562 ;;		None               void
 13563 ;; Registers used:
 13564 ;;		wreg, status,2, status,0, pclath, cstack
 13565 ;; Tracked objects:
 13566 ;;		On entry : 0/0
 13567 ;;		On exit  : 0/0
 13568 ;;		Unchanged: 0/0
 13569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;Total ram usage:        0 bytes
 13575 ;; Hardware stack levels used:    1
 13576 ;; Hardware stack levels required when called:    6
 13577 ;; This function calls:
 13578 ;;		_Flash_Memory_Unlock
 13579 ;; This function is called by:
 13580 ;;		_Flash_Memory_Modify
 13581 ;; This function uses a non-reentrant model
 13582 ;;
 13583                           
 13584                           
 13585                           ;psect for function _Flash_Memory_Erasing
 13586  2628                     _Flash_Memory_Erasing:	
 13587                           
 13588                           ;MCU_B1.c: 846: CFGS = 0;
 13589                           
 13590                           ;incstack = 0
 13591                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13592  2628  0023               	movlb	3	; select bank3
 13593  2629  1315               	bcf	21,6	;volatile
 13594                           
 13595                           ;MCU_B1.c: 847: PMADRH = 0x30;
 13596  262A  3030               	movlw	48
 13597  262B  0092               	movwf	18	;volatile
 13598                           
 13599                           ;MCU_B1.c: 848: PMADRL = 0x00;
 13600  262C  0191               	clrf	17	;volatile
 13601                           
 13602                           ;MCU_B1.c: 849: FREE = 1;
 13603  262D  1615               	bsf	21,4	;volatile
 13604                           
 13605                           ;MCU_B1.c: 850: WREN = 1;
 13606  262E  1515               	bsf	21,2	;volatile
 13607                           
 13608                           ;MCU_B1.c: 851: Flash_Memory_Unlock();
 13609  262F  31A5  25D0         	fcall	_Flash_Memory_Unlock
 13610                           
 13611                           ;MCU_B1.c: 852: WREN = 0;
 13612  2631  0023               	movlb	3	; select bank3
 13613  2632  1115               	bcf	21,2	;volatile
 13614  2633  0008               	return
 13615  2634                     __end_of_Flash_Memory_Erasing:	
 13616                           
 13617                           	psect	text76
 13618  0F08                     __ptext76:	
 13619 ;; *************** function _Flash_Memory_Initialization *****************
 13620 ;; Defined at:
 13621 ;;		line 746 in file "../src/MCU_B1.c"
 13622 ;; Parameters:    Size  Location     Type
 13623 ;;		None
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;  i               1   62[BANK0 ] unsigned char 
 13626 ;; Return value:  Size  Location     Type
 13627 ;;		None               void
 13628 ;; Registers used:
 13629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13630 ;; Tracked objects:
 13631 ;;		On entry : 0/0
 13632 ;;		On exit  : 0/0
 13633 ;;		Unchanged: 0/0
 13634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;Total ram usage:        2 bytes
 13640 ;; Hardware stack levels used:    1
 13641 ;; Hardware stack levels required when called:    8
 13642 ;; This function calls:
 13643 ;;		_Flash_Memory_Read
 13644 ;;		_Flash_Memory_Write
 13645 ;;		_setPercentValue
 13646 ;; This function is called by:
 13647 ;;		_main
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           
 13652                           ;psect for function _Flash_Memory_Initialization
 13653  0F08                     _Flash_Memory_Initialization:	
 13654                           
 13655                           ;MCU_B1.c: 747: char i = 0;
 13656                           
 13657                           ;incstack = 0
 13658                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13659  0F08  0020               	movlb	0	; select bank0
 13660  0F09  01DE               	clrf	Flash_Memory_Initialization@i
 13661                           
 13662                           ;MCU_B1.c: 748: if (Flash_Memory_Read(31) == 0xaa) {
 13663  0F0A  301F               	movlw	31
 13664  0F0B  3199  2188  318F   	fcall	_Flash_Memory_Read
 13665  0F0E  3AAA               	xorlw	170
 13666  0F0F  1D03               	skipz
 13667  0F10  2F82               	goto	l8005
 13668                           
 13669                           ;MCU_B1.c: 749: product->Data[12] = Flash_Memory_Read(0);
 13670  0F11  3000               	movlw	0
 13671  0F12  3199  2188  318F   	fcall	_Flash_Memory_Read
 13672  0F15  0020               	movlb	0	; select bank0
 13673  0F16  00DD               	movwf	??_Flash_Memory_Initialization
 13674  0F17  087D               	movf	_product,w
 13675  0F18  3E0C               	addlw	12
 13676  0F19  0086               	movwf	6
 13677  0F1A  3001               	movlw	1	; select bank2/3
 13678  0F1B  0087               	movwf	7
 13679  0F1C  085D               	movf	??_Flash_Memory_Initialization,w
 13680  0F1D  0081               	movwf	1
 13681                           
 13682                           ;MCU_B1.c: 750: product->Data[13] = Flash_Memory_Read(1);
 13683  0F1E  3001               	movlw	1
 13684  0F1F  3199  2188  318F   	fcall	_Flash_Memory_Read
 13685  0F22  0020               	movlb	0	; select bank0
 13686  0F23  00DD               	movwf	??_Flash_Memory_Initialization
 13687  0F24  087D               	movf	_product,w
 13688  0F25  3E0D               	addlw	13
 13689  0F26  0086               	movwf	6
 13690  0F27  3001               	movlw	1	; select bank2/3
 13691  0F28  0087               	movwf	7
 13692  0F29  085D               	movf	??_Flash_Memory_Initialization,w
 13693  0F2A  0081               	movwf	1
 13694                           
 13695                           ;MCU_B1.c: 751: product->Data[14] = Flash_Memory_Read(2);
 13696  0F2B  3002               	movlw	2
 13697  0F2C  3199  2188  318F   	fcall	_Flash_Memory_Read
 13698  0F2F  0020               	movlb	0	; select bank0
 13699  0F30  00DD               	movwf	??_Flash_Memory_Initialization
 13700  0F31  087D               	movf	_product,w
 13701  0F32  3E0E               	addlw	14
 13702  0F33  0086               	movwf	6
 13703  0F34  3001               	movlw	1	; select bank2/3
 13704  0F35  0087               	movwf	7
 13705  0F36  085D               	movf	??_Flash_Memory_Initialization,w
 13706  0F37  0081               	movwf	1
 13707                           
 13708                           ;MCU_B1.c: 757: i = setPercentValue(((char)((100-60)*0.8)));
 13709  0F38  3020               	movlw	32
 13710  0F39  319F  2774  318F   	fcall	_setPercentValue
 13711  0F3C  0020               	movlb	0	; select bank0
 13712  0F3D  00DD               	movwf	??_Flash_Memory_Initialization
 13713  0F3E  085D               	movf	??_Flash_Memory_Initialization,w
 13714  0F3F  00DE               	movwf	Flash_Memory_Initialization@i
 13715                           
 13716                           ;MCU_B1.c: 758: product->Data[21] = i;
 13717  0F40  085E               	movf	Flash_Memory_Initialization@i,w
 13718  0F41  00DD               	movwf	??_Flash_Memory_Initialization
 13719  0F42  087D               	movf	_product,w
 13720  0F43  3E15               	addlw	21
 13721  0F44  0086               	movwf	6
 13722  0F45  3001               	movlw	1	; select bank2/3
 13723  0F46  0087               	movwf	7
 13724  0F47  085D               	movf	??_Flash_Memory_Initialization,w
 13725  0F48  0081               	movwf	1
 13726                           
 13727                           ;MCU_B1.c: 759: product->Data[22] = i;
 13728  0F49  085E               	movf	Flash_Memory_Initialization@i,w
 13729  0F4A  00DD               	movwf	??_Flash_Memory_Initialization
 13730  0F4B  087D               	movf	_product,w
 13731  0F4C  3E16               	addlw	22
 13732  0F4D  0086               	movwf	6
 13733  0F4E  3001               	movlw	1	; select bank2/3
 13734  0F4F  0087               	movwf	7
 13735  0F50  085D               	movf	??_Flash_Memory_Initialization,w
 13736  0F51  0081               	movwf	1
 13737                           
 13738                           ;MCU_B1.c: 760: product->Data[23] = i;
 13739  0F52  085E               	movf	Flash_Memory_Initialization@i,w
 13740  0F53  00DD               	movwf	??_Flash_Memory_Initialization
 13741  0F54  087D               	movf	_product,w
 13742  0F55  3E17               	addlw	23
 13743  0F56  0086               	movwf	6
 13744  0F57  3001               	movlw	1	; select bank2/3
 13745  0F58  0087               	movwf	7
 13746  0F59  085D               	movf	??_Flash_Memory_Initialization,w
 13747  0F5A  0081               	movwf	1
 13748                           
 13749                           ;MCU_B1.c: 762: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13750  0F5B  087D               	movf	_product,w
 13751  0F5C  3E0C               	addlw	12
 13752  0F5D  0086               	movwf	6
 13753  0F5E  3001               	movlw	1	; select bank2/3
 13754  0F5F  0087               	movwf	7
 13755  0F60  0801               	movf	1,w
 13756  0F61  3AFF               	xorlw	255
 13757  0F62  1D03               	skipz
 13758  0F63  0008               	return
 13759  0F64  087D               	movf	_product,w
 13760  0F65  3E0D               	addlw	13
 13761  0F66  0086               	movwf	6
 13762  0F67  3001               	movlw	1	; select bank2/3
 13763  0F68  0087               	movwf	7
 13764  0F69  0801               	movf	1,w
 13765  0F6A  3AFF               	xorlw	255
 13766  0F6B  1D03               	skipz
 13767  0F6C  0008               	return
 13768  0F6D  087D               	movf	_product,w
 13769  0F6E  3E0E               	addlw	14
 13770  0F6F  0086               	movwf	6
 13771  0F70  3001               	movlw	1	; select bank2/3
 13772  0F71  0087               	movwf	7
 13773  0F72  0801               	movf	1,w
 13774  0F73  3AFF               	xorlw	255
 13775  0F74  1D03               	skipz
 13776  0F75  0008               	return
 13777                           
 13778                           ;MCU_B1.c: 763: myMain->FirstOpen = 1;
 13779  0F76  0021               	movlb	1	; select bank1
 13780  0F77  086D               	movf	_myMain^(0+128),w
 13781  0F78  0086               	movwf	6
 13782  0F79  3001               	movlw	1	; select bank2/3
 13783  0F7A  0087               	movwf	7
 13784  0F7B  1681               	bsf	1,5
 13785                           
 13786                           ;MCU_B1.c: 764: myMain->First = 1;
 13787  0F7C  086D               	movf	_myMain^(0+128),w
 13788  0F7D  0086               	movwf	6
 13789  0F7E  3001               	movlw	1	; select bank2/3
 13790  0F7F  0087               	movwf	7
 13791  0F80  1781               	bsf	1,7
 13792                           
 13793                           ;MCU_B1.c: 765: }
 13794                           ;MCU_B1.c: 766: } else {
 13795  0F81  0008               	return
 13796  0F82                     l8005:	
 13797                           
 13798                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-60)*0.8)));
 13799  0F82  3020               	movlw	32
 13800  0F83  319F  2774  318F   	fcall	_setPercentValue
 13801  0F86  0020               	movlb	0	; select bank0
 13802  0F87  00DD               	movwf	??_Flash_Memory_Initialization
 13803  0F88  085D               	movf	??_Flash_Memory_Initialization,w
 13804  0F89  00DE               	movwf	Flash_Memory_Initialization@i
 13805                           
 13806                           ;MCU_B1.c: 768: Memory->Data[0]=0xff;
 13807  0F8A  30FF               	movlw	255
 13808  0F8B  00DD               	movwf	??_Flash_Memory_Initialization
 13809  0F8C  0021               	movlb	1	; select bank1
 13810  0F8D  086E               	movf	_Memory^(0+128),w
 13811  0F8E  0086               	movwf	6
 13812  0F8F  3002               	movlw	2	; select bank4/5
 13813  0F90  0087               	movwf	7
 13814  0F91  0020               	movlb	0	; select bank0
 13815  0F92  085D               	movf	??_Flash_Memory_Initialization,w
 13816  0F93  0081               	movwf	1
 13817                           
 13818                           ;MCU_B1.c: 769: Memory->Data[1]=0xff;
 13819  0F94  30FF               	movlw	255
 13820  0F95  00DD               	movwf	??_Flash_Memory_Initialization
 13821  0F96  0021               	movlb	1	; select bank1
 13822  0F97  0A6E               	incf	_Memory^(0+128),w
 13823  0F98  0086               	movwf	6
 13824  0F99  3002               	movlw	2	; select bank4/5
 13825  0F9A  0087               	movwf	7
 13826  0F9B  0020               	movlb	0	; select bank0
 13827  0F9C  085D               	movf	??_Flash_Memory_Initialization,w
 13828  0F9D  0081               	movwf	1
 13829                           
 13830                           ;MCU_B1.c: 770: Memory->Data[2]=0xff;
 13831  0F9E  30FF               	movlw	255
 13832  0F9F  00DD               	movwf	??_Flash_Memory_Initialization
 13833  0FA0  0021               	movlb	1	; select bank1
 13834  0FA1  086E               	movf	_Memory^(0+128),w
 13835  0FA2  3E02               	addlw	2
 13836  0FA3  0086               	movwf	6
 13837  0FA4  3002               	movlw	2	; select bank4/5
 13838  0FA5  0087               	movwf	7
 13839  0FA6  0020               	movlb	0	; select bank0
 13840  0FA7  085D               	movf	??_Flash_Memory_Initialization,w
 13841  0FA8  0081               	movwf	1
 13842                           
 13843                           ;MCU_B1.c: 771: Memory->Data[3]=0xff;
 13844  0FA9  30FF               	movlw	255
 13845  0FAA  00DD               	movwf	??_Flash_Memory_Initialization
 13846  0FAB  0021               	movlb	1	; select bank1
 13847  0FAC  086E               	movf	_Memory^(0+128),w
 13848  0FAD  3E03               	addlw	3
 13849  0FAE  0086               	movwf	6
 13850  0FAF  3002               	movlw	2	; select bank4/5
 13851  0FB0  0087               	movwf	7
 13852  0FB1  0020               	movlb	0	; select bank0
 13853  0FB2  085D               	movf	??_Flash_Memory_Initialization,w
 13854  0FB3  0081               	movwf	1
 13855                           
 13856                           ;MCU_B1.c: 772: Memory->Data[4]=0xff;
 13857  0FB4  30FF               	movlw	255
 13858  0FB5  00DD               	movwf	??_Flash_Memory_Initialization
 13859  0FB6  0021               	movlb	1	; select bank1
 13860  0FB7  086E               	movf	_Memory^(0+128),w
 13861  0FB8  3E04               	addlw	4
 13862  0FB9  0086               	movwf	6
 13863  0FBA  3002               	movlw	2	; select bank4/5
 13864  0FBB  0087               	movwf	7
 13865  0FBC  0020               	movlb	0	; select bank0
 13866  0FBD  085D               	movf	??_Flash_Memory_Initialization,w
 13867  0FBE  0081               	movwf	1
 13868                           
 13869                           ;MCU_B1.c: 773: Memory->Data[5]=0xff;
 13870  0FBF  30FF               	movlw	255
 13871  0FC0  00DD               	movwf	??_Flash_Memory_Initialization
 13872  0FC1  0021               	movlb	1	; select bank1
 13873  0FC2  086E               	movf	_Memory^(0+128),w
 13874  0FC3  3E05               	addlw	5
 13875  0FC4  0086               	movwf	6
 13876  0FC5  3002               	movlw	2	; select bank4/5
 13877  0FC6  0087               	movwf	7
 13878  0FC7  0020               	movlb	0	; select bank0
 13879  0FC8  085D               	movf	??_Flash_Memory_Initialization,w
 13880  0FC9  0081               	movwf	1
 13881                           
 13882                           ;MCU_B1.c: 774: Memory->Data[31]=0xaa;
 13883  0FCA  30AA               	movlw	170
 13884  0FCB  00DD               	movwf	??_Flash_Memory_Initialization
 13885  0FCC  0021               	movlb	1	; select bank1
 13886  0FCD  086E               	movf	_Memory^(0+128),w
 13887  0FCE  3E1F               	addlw	31
 13888  0FCF  0086               	movwf	6
 13889  0FD0  3002               	movlw	2	; select bank4/5
 13890  0FD1  0087               	movwf	7
 13891  0FD2  0020               	movlb	0	; select bank0
 13892  0FD3  085D               	movf	??_Flash_Memory_Initialization,w
 13893  0FD4  0081               	movwf	1
 13894                           
 13895                           ;MCU_B1.c: 775: product->Data[21] = i;
 13896  0FD5  085E               	movf	Flash_Memory_Initialization@i,w
 13897  0FD6  00DD               	movwf	??_Flash_Memory_Initialization
 13898  0FD7  087D               	movf	_product,w
 13899  0FD8  3E15               	addlw	21
 13900  0FD9  0086               	movwf	6
 13901  0FDA  3001               	movlw	1	; select bank2/3
 13902  0FDB  0087               	movwf	7
 13903  0FDC  085D               	movf	??_Flash_Memory_Initialization,w
 13904  0FDD  0081               	movwf	1
 13905                           
 13906                           ;MCU_B1.c: 776: product->Data[22] = i;
 13907  0FDE  085E               	movf	Flash_Memory_Initialization@i,w
 13908  0FDF  00DD               	movwf	??_Flash_Memory_Initialization
 13909  0FE0  087D               	movf	_product,w
 13910  0FE1  3E16               	addlw	22
 13911  0FE2  0086               	movwf	6
 13912  0FE3  3001               	movlw	1	; select bank2/3
 13913  0FE4  0087               	movwf	7
 13914  0FE5  085D               	movf	??_Flash_Memory_Initialization,w
 13915  0FE6  0081               	movwf	1
 13916                           
 13917                           ;MCU_B1.c: 777: product->Data[23] = i;
 13918  0FE7  085E               	movf	Flash_Memory_Initialization@i,w
 13919  0FE8  00DD               	movwf	??_Flash_Memory_Initialization
 13920  0FE9  087D               	movf	_product,w
 13921  0FEA  3E17               	addlw	23
 13922  0FEB  0086               	movwf	6
 13923  0FEC  3001               	movlw	1	; select bank2/3
 13924  0FED  0087               	movwf	7
 13925  0FEE  085D               	movf	??_Flash_Memory_Initialization,w
 13926  0FEF  0081               	movwf	1
 13927                           
 13928                           ;MCU_B1.c: 778: GIE = 0;
 13929  0FF0  138B               	bcf	11,7	;volatile
 13930                           
 13931                           ;MCU_B1.c: 779: Flash_Memory_Write();
 13932  0FF1  319D  250F         	fcall	_Flash_Memory_Write
 13933                           
 13934                           ;MCU_B1.c: 780: GIE = 1;
 13935  0FF3  178B               	bsf	11,7	;volatile
 13936                           
 13937                           ;MCU_B1.c: 781: myMain->FirstOpen = 1;
 13938  0FF4  0021               	movlb	1	; select bank1
 13939  0FF5  086D               	movf	_myMain^(0+128),w
 13940  0FF6  0086               	movwf	6
 13941  0FF7  3001               	movlw	1	; select bank2/3
 13942  0FF8  0087               	movwf	7
 13943  0FF9  1681               	bsf	1,5
 13944                           
 13945                           ;MCU_B1.c: 782: myMain->First = 1;
 13946  0FFA  086D               	movf	_myMain^(0+128),w
 13947  0FFB  0086               	movwf	6
 13948  0FFC  3001               	movlw	1	; select bank2/3
 13949  0FFD  0087               	movwf	7
 13950  0FFE  1781               	bsf	1,7
 13951  0FFF  0008               	return
 13952  1000                     __end_of_Flash_Memory_Initialization:	
 13953                           
 13954                           	psect	text77
 13955  1D0F                     __ptext77:	
 13956 ;; *************** function _Flash_Memory_Write *****************
 13957 ;; Defined at:
 13958 ;;		line 826 in file "../src/MCU_B1.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;		None
 13961 ;; Auto vars:     Size  Location     Type
 13962 ;;  i               1    1[BANK0 ] unsigned char 
 13963 ;; Return value:  Size  Location     Type
 13964 ;;		None               void
 13965 ;; Registers used:
 13966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13967 ;; Tracked objects:
 13968 ;;		On entry : 0/0
 13969 ;;		On exit  : 0/0
 13970 ;;		Unchanged: 0/0
 13971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;Total ram usage:        2 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; Hardware stack levels required when called:    6
 13979 ;; This function calls:
 13980 ;;		_Flash_Memory_Unlock
 13981 ;; This function is called by:
 13982 ;;		_Flash_Memory_Initialization
 13983 ;;		_Flash_Memory_Modify
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           
 13988                           ;psect for function _Flash_Memory_Write
 13989  1D0F                     _Flash_Memory_Write:	
 13990                           
 13991                           ;MCU_B1.c: 827: char i = 0;
 13992                           
 13993                           ;incstack = 0
 13994                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13995  1D0F  0020               	movlb	0	; select bank0
 13996  1D10  01A1               	clrf	Flash_Memory_Write@i
 13997                           
 13998                           ;MCU_B1.c: 828: CFGS = 0;
 13999  1D11  0023               	movlb	3	; select bank3
 14000  1D12  1315               	bcf	21,6	;volatile
 14001                           
 14002                           ;MCU_B1.c: 829: PMADRH = 0x30;
 14003  1D13  3030               	movlw	48
 14004  1D14  0092               	movwf	18	;volatile
 14005                           
 14006                           ;MCU_B1.c: 830: PMDATH = 0;
 14007  1D15  0194               	clrf	20	;volatile
 14008                           
 14009                           ;MCU_B1.c: 831: FREE = 0;
 14010  1D16  1215               	bcf	21,4	;volatile
 14011                           
 14012                           ;MCU_B1.c: 832: LWLO = 1;
 14013  1D17  1695               	bsf	21,5	;volatile
 14014                           
 14015                           ;MCU_B1.c: 833: WREN = 1;
 14016  1D18  1515               	bsf	21,2	;volatile
 14017                           
 14018                           ;MCU_B1.c: 834: for (i = 0; i < 32; i++) {
 14019  1D19  0020               	movlb	0	; select bank0
 14020  1D1A  01A1               	clrf	Flash_Memory_Write@i
 14021  1D1B  3020               	movlw	32
 14022  1D1C  0221               	subwf	Flash_Memory_Write@i,w
 14023  1D1D  1803               	btfsc	3,0
 14024  1D1E  2D3B               	goto	l1467
 14025  1D1F                     l6953:	
 14026                           
 14027                           ;MCU_B1.c: 835: PMADRL = i;
 14028  1D1F  0821               	movf	Flash_Memory_Write@i,w
 14029  1D20  0023               	movlb	3	; select bank3
 14030  1D21  0091               	movwf	17	;volatile
 14031                           
 14032                           ;MCU_B1.c: 836: PMDATL = Memory->Data[i];
 14033  1D22  0020               	movlb	0	; select bank0
 14034  1D23  0821               	movf	Flash_Memory_Write@i,w
 14035  1D24  0021               	movlb	1	; select bank1
 14036  1D25  076E               	addwf	_Memory^(0+128),w
 14037  1D26  0020               	movlb	0	; select bank0
 14038  1D27  00A0               	movwf	??_Flash_Memory_Write
 14039  1D28  0820               	movf	??_Flash_Memory_Write,w
 14040  1D29  0086               	movwf	6
 14041  1D2A  3002               	movlw	2	; select bank4/5
 14042  1D2B  0087               	movwf	7
 14043  1D2C  0801               	movf	1,w
 14044  1D2D  0023               	movlb	3	; select bank3
 14045  1D2E  0093               	movwf	19	;volatile
 14046                           
 14047                           ;MCU_B1.c: 837: Flash_Memory_Unlock();
 14048  1D2F  31A5  25D0  319D   	fcall	_Flash_Memory_Unlock
 14049  1D32  3001               	movlw	1
 14050  1D33  0020               	movlb	0	; select bank0
 14051  1D34  00A0               	movwf	??_Flash_Memory_Write
 14052  1D35  0820               	movf	??_Flash_Memory_Write,w
 14053  1D36  07A1               	addwf	Flash_Memory_Write@i,f
 14054  1D37  3020               	movlw	32
 14055  1D38  0221               	subwf	Flash_Memory_Write@i,w
 14056  1D39  1C03               	skipc
 14057  1D3A  2D1F               	goto	l6953
 14058  1D3B                     l1467:	
 14059                           
 14060                           ;MCU_B1.c: 838: }
 14061                           ;MCU_B1.c: 839: LWLO = 0;
 14062  1D3B  0023               	movlb	3	; select bank3
 14063  1D3C  1295               	bcf	21,5	;volatile
 14064                           
 14065                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 14066  1D3D  31A5  25D0         	fcall	_Flash_Memory_Unlock
 14067                           
 14068                           ;MCU_B1.c: 841: WREN = 0;
 14069  1D3F  0023               	movlb	3	; select bank3
 14070  1D40  1115               	bcf	21,2	;volatile
 14071  1D41  0008               	return
 14072  1D42                     __end_of_Flash_Memory_Write:	
 14073                           
 14074                           	psect	text78
 14075  25D0                     __ptext78:	
 14076 ;; *************** function _Flash_Memory_Unlock *****************
 14077 ;; Defined at:
 14078 ;;		line 805 in file "../src/MCU_B1.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;		None
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;		None
 14083 ;; Return value:  Size  Location     Type
 14084 ;;		None               void
 14085 ;; Registers used:
 14086 ;;		wreg
 14087 ;; Tracked objects:
 14088 ;;		On entry : 0/0
 14089 ;;		On exit  : 0/0
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;Total ram usage:        0 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; Hardware stack levels required when called:    5
 14099 ;; This function calls:
 14100 ;;		Nothing
 14101 ;; This function is called by:
 14102 ;;		_Flash_Memory_Write
 14103 ;;		_Flash_Memory_Erasing
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function _Flash_Memory_Unlock
 14109  25D0                     _Flash_Memory_Unlock:	
 14110                           
 14111                           ;MCU_B1.c: 806: PMCON2 = 0x55;
 14112                           
 14113                           ;incstack = 0
 14114                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14115  25D0  3055               	movlw	85
 14116  25D1  0023               	movlb	3	; select bank3
 14117  25D2  0096               	movwf	22	;volatile
 14118                           
 14119                           ;MCU_B1.c: 807: PMCON2 = 0xaa;
 14120  25D3  30AA               	movlw	170
 14121  25D4  0096               	movwf	22	;volatile
 14122                           
 14123                           ;MCU_B1.c: 808: WR = 1;
 14124  25D5  1495               	bsf	21,1	;volatile
 14125                           
 14126                           ;MCU_B1.c: 809: __nop();
 14127  25D6  0000               	nop
 14128                           
 14129                           ;MCU_B1.c: 810: __nop();
 14130  25D7  0000               	nop
 14131  25D8  0008               	return
 14132  25D9                     __end_of_Flash_Memory_Unlock:	
 14133                           
 14134                           	psect	text79
 14135  1988                     __ptext79:	
 14136 ;; *************** function _Flash_Memory_Read *****************
 14137 ;; Defined at:
 14138 ;;		line 814 in file "../src/MCU_B1.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;  address         1    wreg     unsigned char 
 14141 ;; Auto vars:     Size  Location     Type
 14142 ;;  address         1    2[BANK0 ] unsigned char 
 14143 ;;  ret             1    3[BANK0 ] unsigned char 
 14144 ;;  i               1    1[BANK0 ] unsigned char 
 14145 ;; Return value:  Size  Location     Type
 14146 ;;                  1    wreg      unsigned char 
 14147 ;; Registers used:
 14148 ;;		wreg, status,2
 14149 ;; Tracked objects:
 14150 ;;		On entry : 0/0
 14151 ;;		On exit  : 0/0
 14152 ;;		Unchanged: 0/0
 14153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;Total ram usage:        4 bytes
 14159 ;; Hardware stack levels used:    1
 14160 ;; Hardware stack levels required when called:    5
 14161 ;; This function calls:
 14162 ;;		Nothing
 14163 ;; This function is called by:
 14164 ;;		_Flash_Memory_Initialization
 14165 ;;		_Flash_Memory_Modify
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           
 14170                           ;psect for function _Flash_Memory_Read
 14171  1988                     _Flash_Memory_Read:	
 14172                           
 14173                           ;incstack = 0
 14174                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14175                           ;Flash_Memory_Read@address stored from wreg
 14176  1988  0020               	movlb	0	; select bank0
 14177  1989  00A2               	movwf	Flash_Memory_Read@address
 14178                           
 14179                           ;MCU_B1.c: 815: char i = 0, ret = 0;
 14180  198A  01A1               	clrf	Flash_Memory_Read@i
 14181  198B  01A3               	clrf	Flash_Memory_Read@ret
 14182                           
 14183                           ;MCU_B1.c: 816: PMADRH = 0x30;
 14184  198C  3030               	movlw	48
 14185  198D  0023               	movlb	3	; select bank3
 14186  198E  0092               	movwf	18	;volatile
 14187                           
 14188                           ;MCU_B1.c: 817: PMADRL = address;
 14189  198F  0020               	movlb	0	; select bank0
 14190  1990  0822               	movf	Flash_Memory_Read@address,w
 14191  1991  0023               	movlb	3	; select bank3
 14192  1992  0091               	movwf	17	;volatile
 14193                           
 14194                           ;MCU_B1.c: 818: CFGS = 0;
 14195  1993  1315               	bcf	21,6	;volatile
 14196                           
 14197                           ;MCU_B1.c: 819: RD = 1;
 14198  1994  1415               	bsf	21,0	;volatile
 14199                           
 14200                           ;MCU_B1.c: 820: i = PMDATH;
 14201  1995  0814               	movf	20,w	;volatile
 14202  1996  0020               	movlb	0	; select bank0
 14203  1997  00A0               	movwf	??_Flash_Memory_Read
 14204  1998  0820               	movf	??_Flash_Memory_Read,w
 14205  1999  00A1               	movwf	Flash_Memory_Read@i
 14206                           
 14207                           ;MCU_B1.c: 821: ret = PMDATL;
 14208  199A  0023               	movlb	3	; select bank3
 14209  199B  0813               	movf	19,w	;volatile
 14210  199C  0020               	movlb	0	; select bank0
 14211  199D  00A0               	movwf	??_Flash_Memory_Read
 14212  199E  0820               	movf	??_Flash_Memory_Read,w
 14213  199F  00A3               	movwf	Flash_Memory_Read@ret
 14214                           
 14215                           ;MCU_B1.c: 822: return ret;
 14216  19A0  0823               	movf	Flash_Memory_Read@ret,w
 14217  19A1  0008               	return
 14218  19A2                     __end_of_Flash_Memory_Read:	
 14219                           
 14220                           	psect	text80
 14221  25FA                     __ptext80:	
 14222 ;; *************** function _DimmerLights_Main *****************
 14223 ;; Defined at:
 14224 ;;		line 420 in file "../src/Dimmer_B1.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;		None
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;		None
 14229 ;; Return value:  Size  Location     Type
 14230 ;;		None               void
 14231 ;; Registers used:
 14232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14233 ;; Tracked objects:
 14234 ;;		On entry : 0/0
 14235 ;;		On exit  : 0/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;Total ram usage:        0 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; Hardware stack levels required when called:   11
 14245 ;; This function calls:
 14246 ;;		_DimmerLights_Close
 14247 ;;		_setDimmerLights_Main
 14248 ;; This function is called by:
 14249 ;;		_main
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _DimmerLights_Main
 14255  25FA                     _DimmerLights_Main:	
 14256                           
 14257                           ;Dimmer_B1.c: 423: setDimmerLights_Main(1);
 14258                           
 14259                           ;incstack = 0
 14260                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14261  25FA  3001               	movlw	1
 14262  25FB  3196  26FB  31A5   	fcall	_setDimmerLights_Main
 14263                           
 14264                           ;Dimmer_B1.c: 427: setDimmerLights_Main(2);
 14265  25FE  3002               	movlw	2
 14266  25FF  3196  26FB  31A5   	fcall	_setDimmerLights_Main
 14267                           
 14268                           ;Dimmer_B1.c: 434: DimmerLights_Close();
 14269  2602  3199  210D         	fcall	_DimmerLights_Close
 14270  2604  0008               	return
 14271  2605                     __end_of_DimmerLights_Main:	
 14272                           
 14273                           	psect	text81
 14274  16FB                     __ptext81:	
 14275 ;; *************** function _setDimmerLights_Main *****************
 14276 ;; Defined at:
 14277 ;;		line 438 in file "../src/Dimmer_B1.c"
 14278 ;; Parameters:    Size  Location     Type
 14279 ;;  lights          1    wreg     unsigned char 
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;  lights          1   70[BANK0 ] unsigned char 
 14282 ;;  clear           1   69[BANK0 ] unsigned char 
 14283 ;; Return value:  Size  Location     Type
 14284 ;;		None               void
 14285 ;; Registers used:
 14286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14287 ;; Tracked objects:
 14288 ;;		On entry : 0/0
 14289 ;;		On exit  : 0/0
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;Total ram usage:        2 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; Hardware stack levels required when called:   10
 14299 ;; This function calls:
 14300 ;;		_DimmerLightsPointSelect
 14301 ;;		_setBuz
 14302 ;;		_setDimmerLights
 14303 ;;		_setDimmerLights_Adj
 14304 ;; This function is called by:
 14305 ;;		_DimmerLights_Main
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           
 14310                           ;psect for function _setDimmerLights_Main
 14311  16FB                     _setDimmerLights_Main:	
 14312                           
 14313                           ;incstack = 0
 14314                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14315                           ;setDimmerLights_Main@lights stored from wreg
 14316  16FB  0020               	movlb	0	; select bank0
 14317  16FC  00E6               	movwf	setDimmerLights_Main@lights
 14318                           
 14319                           ;Dimmer_B1.c: 439: char clear = 1;
 14320  16FD  01E5               	clrf	setDimmerLights_Main@clear
 14321  16FE  0AE5               	incf	setDimmerLights_Main@clear,f
 14322                           
 14323                           ;Dimmer_B1.c: 440: DimmerLightsPointSelect(lights);
 14324  16FF  0866               	movf	setDimmerLights_Main@lights,w
 14325  1700  31A7  27C5  3196   	fcall	_DimmerLightsPointSelect
 14326                           
 14327                           ;Dimmer_B1.c: 453: if (lights == 1) {
 14328  1703  0020               	movlb	0	; select bank0
 14329  1704  0866               	movf	setDimmerLights_Main@lights,w
 14330  1705  3A01               	xorlw	1
 14331  1706  1D03               	skipz
 14332  1707  2F0F               	goto	l7389
 14333                           
 14334                           ;Dimmer_B1.c: 454: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 14335  1708  3000               	movlw	0
 14336  1709  0022               	movlb	2	; select bank2
 14337  170A  1938               	btfsc	(_DimmerLights2^(0+256)+9),2
 14338  170B  3001               	movlw	1
 14339  170C  0020               	movlb	0	; select bank0
 14340  170D  00E5               	movwf	setDimmerLights_Main@clear
 14341                           
 14342                           ;Dimmer_B1.c: 455: } else if (lights == 2) {
 14343  170E  2F19               	goto	l7393
 14344  170F                     l7389:	
 14345  170F  0866               	movf	setDimmerLights_Main@lights,w
 14346  1710  3A02               	xorlw	2
 14347  1711  1D03               	skipz
 14348  1712  2F19               	goto	l7393
 14349                           
 14350                           ;Dimmer_B1.c: 456: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 14351  1713  3000               	movlw	0
 14352  1714  0022               	movlb	2	; select bank2
 14353  1715  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 14354  1716  3001               	movlw	1
 14355  1717  0020               	movlb	0	; select bank0
 14356  1718  00E5               	movwf	setDimmerLights_Main@clear
 14357  1719                     l7393:	
 14358                           
 14359                           ;Dimmer_B1.c: 457: }
 14360                           ;Dimmer_B1.c: 460: if (DimmerLights->Trigger == 1) {
 14361  1719  0878               	movf	_DimmerLights,w
 14362  171A  3E08               	addlw	8
 14363  171B  0086               	movwf	6
 14364  171C  3001               	movlw	1	; select bank2/3
 14365  171D  0087               	movwf	7
 14366  171E  1D01               	btfss	1,2
 14367  171F  2F46               	goto	l7409
 14368                           
 14369                           ;Dimmer_B1.c: 461: if (clear == 1) {
 14370  1720  0865               	movf	setDimmerLights_Main@clear,w
 14371  1721  3A01               	xorlw	1
 14372  1722  1D03               	skipz
 14373  1723  0008               	return
 14374                           
 14375                           ;Dimmer_B1.c: 462: if (DimmerLights->Switch == 1) {
 14376  1724  0878               	movf	_DimmerLights,w
 14377  1725  3E08               	addlw	8
 14378  1726  0086               	movwf	6
 14379  1727  3001               	movlw	1	; select bank2/3
 14380  1728  0087               	movwf	7
 14381  1729  1C81               	btfss	1,1
 14382  172A  2F34               	goto	l7403
 14383                           
 14384                           ;Dimmer_B1.c: 463: DimmerLights->Trigger = 0;
 14385  172B  0878               	movf	_DimmerLights,w
 14386  172C  3E08               	addlw	8
 14387  172D  0086               	movwf	6
 14388  172E  3001               	movlw	1	; select bank2/3
 14389  172F  0087               	movwf	7
 14390  1730  1101               	bcf	1,2
 14391                           
 14392                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 1);
 14393  1731  01A4               	clrf	setDimmerLights@status
 14394  1732  0AA4               	incf	setDimmerLights@status,f
 14395  1733  2F3C               	goto	L14
 14396  1734                     l7403:	
 14397                           ;Dimmer_B1.c: 465: } else {
 14398                           
 14399                           
 14400                           ;Dimmer_B1.c: 466: DimmerLights->Trigger = 0;
 14401  1734  0878               	movf	_DimmerLights,w
 14402  1735  3E08               	addlw	8
 14403  1736  0086               	movwf	6
 14404  1737  3001               	movlw	1	; select bank2/3
 14405  1738  0087               	movwf	7
 14406  1739  1101               	bcf	1,2
 14407                           
 14408                           ;Dimmer_B1.c: 467: setDimmerLights(lights, 0);
 14409  173A  0020               	movlb	0	; select bank0
 14410  173B  01A4               	clrf	setDimmerLights@status
 14411  173C                     L14:	
 14412  173C  0866               	movf	setDimmerLights_Main@lights,w
 14413  173D  3189  2102         	fcall	_setDimmerLights
 14414                           
 14415                           ;Dimmer_B1.c: 468: }
 14416                           ;Dimmer_B1.c: 470: DimmerLights->Clear = 0;
 14417  173F  0878               	movf	_DimmerLights,w
 14418  1740  3E09               	addlw	9
 14419  1741  0086               	movwf	6
 14420  1742  3001               	movlw	1	; select bank2/3
 14421  1743  0087               	movwf	7
 14422  1744  1101               	bcf	1,2
 14423                           
 14424                           ;Dimmer_B1.c: 472: }
 14425                           ;Dimmer_B1.c: 473: } else {
 14426  1745  0008               	return
 14427  1746                     l7409:	
 14428                           
 14429                           ;Dimmer_B1.c: 474: if (DimmerLights->TriggerAdj == 1) {
 14430  1746  0878               	movf	_DimmerLights,w
 14431  1747  3E08               	addlw	8
 14432  1748  0086               	movwf	6
 14433  1749  3001               	movlw	1	; select bank2/3
 14434  174A  0087               	movwf	7
 14435  174B  1E01               	btfss	1,4
 14436  174C  0008               	return
 14437                           
 14438                           ;Dimmer_B1.c: 475: if (clear == 1) {
 14439  174D  0020               	movlb	0	; select bank0
 14440  174E  0865               	movf	setDimmerLights_Main@clear,w
 14441  174F  3A01               	xorlw	1
 14442  1750  1D03               	skipz
 14443  1751  0008               	return
 14444                           
 14445                           ;Dimmer_B1.c: 476: DimmerLightsPointSelect(lights);
 14446  1752  0866               	movf	setDimmerLights_Main@lights,w
 14447  1753  31A7  27C5  3196   	fcall	_DimmerLightsPointSelect
 14448                           
 14449                           ;Dimmer_B1.c: 477: DimmerLights->TriggerAdj = 0;
 14450  1756  0878               	movf	_DimmerLights,w
 14451  1757  3E08               	addlw	8
 14452  1758  0086               	movwf	6
 14453  1759  3001               	movlw	1	; select bank2/3
 14454  175A  0087               	movwf	7
 14455  175B  1201               	bcf	1,4
 14456                           
 14457                           ;Dimmer_B1.c: 478: if (DimmerLights->AdjGo == 1) {
 14458  175C  0878               	movf	_DimmerLights,w
 14459  175D  3E08               	addlw	8
 14460  175E  0086               	movwf	6
 14461  175F  3001               	movlw	1	; select bank2/3
 14462  1760  0087               	movwf	7
 14463  1761  1D81               	btfss	1,3
 14464  1762  2F73               	goto	l7421
 14465                           
 14466                           ;Dimmer_B1.c: 479: setDimmerLights_Adj(lights, 1);
 14467  1763  0020               	movlb	0	; select bank0
 14468  1764  01E2               	clrf	setDimmerLights_Adj@status
 14469  1765  0AE2               	incf	setDimmerLights_Adj@status,f
 14470  1766  0866               	movf	setDimmerLights_Main@lights,w
 14471  1767  319E  26EA  3196   	fcall	_setDimmerLights_Adj
 14472                           
 14473                           ;Dimmer_B1.c: 480: setBuz(1, 100);
 14474  176A  3064               	movlw	100
 14475  176B  0020               	movlb	0	; select bank0
 14476  176C  00A9               	movwf	setBuz@time
 14477  176D  3000               	movlw	0
 14478  176E  00AA               	movwf	setBuz@time+1
 14479  176F  3001               	movlw	1
 14480  1770  3188  2079         	fcall	_setBuz
 14481                           
 14482                           ;Dimmer_B1.c: 481: } else {
 14483  1772  0008               	return
 14484  1773                     l7421:	
 14485                           
 14486                           ;Dimmer_B1.c: 482: setDimmerLights_Adj(lights, 0);
 14487  1773  0020               	movlb	0	; select bank0
 14488  1774  01E2               	clrf	setDimmerLights_Adj@status
 14489  1775  0866               	movf	setDimmerLights_Main@lights,w
 14490  1776  319E  26EA         	fcall	_setDimmerLights_Adj
 14491  1778  0008               	return
 14492  1779                     __end_of_setDimmerLights_Main:	
 14493                           
 14494                           	psect	text82
 14495  1EEA                     __ptext82:	
 14496 ;; *************** function _setDimmerLights_Adj *****************
 14497 ;; Defined at:
 14498 ;;		line 664 in file "../src/Dimmer_B1.c"
 14499 ;; Parameters:    Size  Location     Type
 14500 ;;  lights          1    wreg     unsigned char 
 14501 ;;  status          1   66[BANK0 ] unsigned char 
 14502 ;; Auto vars:     Size  Location     Type
 14503 ;;  lights          1   68[BANK0 ] unsigned char 
 14504 ;; Return value:  Size  Location     Type
 14505 ;;		None               void
 14506 ;; Registers used:
 14507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14508 ;; Tracked objects:
 14509 ;;		On entry : 0/0
 14510 ;;		On exit  : 0/0
 14511 ;;		Unchanged: 0/0
 14512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14513 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;Total ram usage:        3 bytes
 14518 ;; Hardware stack levels used:    1
 14519 ;; Hardware stack levels required when called:    9
 14520 ;; This function calls:
 14521 ;;		_DimmerLightsPointSelect
 14522 ;;		_setLoad_StatusOff
 14523 ;;		_setRF_DimmerLights
 14524 ;;		_setTxData
 14525 ;; This function is called by:
 14526 ;;		_setDimmerLights_Main
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _setDimmerLights_Adj
 14532  1EEA                     _setDimmerLights_Adj:	
 14533                           
 14534                           ;incstack = 0
 14535                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14536                           ;setDimmerLights_Adj@lights stored from wreg
 14537  1EEA  0020               	movlb	0	; select bank0
 14538  1EEB  00E4               	movwf	setDimmerLights_Adj@lights
 14539                           
 14540                           ;Dimmer_B1.c: 665: DimmerLightsPointSelect(lights);
 14541  1EEC  0864               	movf	setDimmerLights_Adj@lights,w
 14542  1EED  31A7  27C5  319E   	fcall	_DimmerLightsPointSelect
 14543                           
 14544                           ;Dimmer_B1.c: 666: if (status == 1) {
 14545  1EF0  0020               	movlb	0	; select bank0
 14546  1EF1  0862               	movf	setDimmerLights_Adj@status,w
 14547  1EF2  3A01               	xorlw	1
 14548  1EF3  1D03               	skipz
 14549  1EF4  2F00               	goto	l6907
 14550                           
 14551                           ;Dimmer_B1.c: 667: DimmerLights->AdjFlag = 1;
 14552  1EF5  0878               	movf	_DimmerLights,w
 14553  1EF6  0086               	movwf	6
 14554  1EF7  3001               	movlw	1	; select bank2/3
 14555  1EF8  0087               	movwf	7
 14556  1EF9  1581               	bsf	1,3
 14557                           
 14558                           ;Dimmer_B1.c: 668: DimmerLights->Signal = 1;
 14559  1EFA  0878               	movf	_DimmerLights,w
 14560  1EFB  0086               	movwf	6
 14561  1EFC  3001               	movlw	1	; select bank2/3
 14562  1EFD  0087               	movwf	7
 14563  1EFE  1481               	bsf	1,1
 14564                           
 14565                           ;Dimmer_B1.c: 669: } else {
 14566  1EFF  0008               	return
 14567  1F00                     l6907:	
 14568                           
 14569                           ;Dimmer_B1.c: 670: if (DimmerLights->AdjFlag) {
 14570  1F00  0878               	movf	_DimmerLights,w
 14571  1F01  0086               	movwf	6
 14572  1F02  3001               	movlw	1	; select bank2/3
 14573  1F03  0087               	movwf	7
 14574  1F04  1D81               	btfss	1,3
 14575  1F05  0008               	return
 14576                           
 14577                           ;Dimmer_B1.c: 672: DimmerLights->Signal = 0;
 14578  1F06  0878               	movf	_DimmerLights,w
 14579  1F07  0086               	movwf	6
 14580  1F08  3001               	movlw	1	; select bank2/3
 14581  1F09  0087               	movwf	7
 14582  1F0A  1081               	bcf	1,1
 14583                           
 14584                           ;Dimmer_B1.c: 673: DimmerLights->AdjFlag = 0;
 14585  1F0B  0878               	movf	_DimmerLights,w
 14586  1F0C  0086               	movwf	6
 14587  1F0D  3001               	movlw	1	; select bank2/3
 14588  1F0E  0087               	movwf	7
 14589  1F0F  1181               	bcf	1,3
 14590                           
 14591                           ;Dimmer_B1.c: 674: setLoad_StatusOff(0, 1);
 14592  1F10  01A0               	clrf	setLoad_StatusOff@command
 14593  1F11  0AA0               	incf	setLoad_StatusOff@command,f
 14594  1F12  3000               	movlw	0
 14595  1F13  319C  24AC  319E   	fcall	_setLoad_StatusOff
 14596                           
 14597                           ;Dimmer_B1.c: 675: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 14598  1F16  0878               	movf	_DimmerLights,w
 14599  1F17  3E04               	addlw	4
 14600  1F18  0086               	movwf	6
 14601  1F19  3001               	movlw	1	; select bank2/3
 14602  1F1A  0087               	movwf	7
 14603  1F1B  0801               	movf	1,w
 14604  1F1C  0020               	movlb	0	; select bank0
 14605  1F1D  00E3               	movwf	??_setDimmerLights_Adj
 14606  1F1E  0878               	movf	_DimmerLights,w
 14607  1F1F  3E05               	addlw	5
 14608  1F20  0086               	movwf	6
 14609  1F21  3001               	movlw	1	; select bank2/3
 14610  1F22  0087               	movwf	7
 14611  1F23  0863               	movf	??_setDimmerLights_Adj,w
 14612  1F24  0081               	movwf	1
 14613                           
 14614                           ;Dimmer_B1.c: 683: setRF_DimmerLights(lights, 1);
 14615  1F25  01DD               	clrf	setRF_DimmerLights@on
 14616  1F26  0ADD               	incf	setRF_DimmerLights@on,f
 14617  1F27  0864               	movf	setDimmerLights_Adj@lights,w
 14618  1F28  3194  2449  319E   	fcall	_setRF_DimmerLights
 14619                           
 14620                           ;Dimmer_B1.c: 684: setTxData(1);
 14621  1F2B  3001               	movlw	1
 14622  1F2C  318B  2343         	fcall	_setTxData
 14623  1F2E  0008               	return
 14624  1F2F                     __end_of_setDimmerLights_Adj:	
 14625                           
 14626                           	psect	text83
 14627  1CAC                     __ptext83:	
 14628 ;; *************** function _setLoad_StatusOff *****************
 14629 ;; Defined at:
 14630 ;;		line 284 in file "../src/OverLoad_B1.c"
 14631 ;; Parameters:    Size  Location     Type
 14632 ;;  lights          1    wreg     unsigned char 
 14633 ;;  command         1    0[BANK0 ] unsigned char 
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;  lights          1    1[BANK0 ] unsigned char 
 14636 ;; Return value:  Size  Location     Type
 14637 ;;		None               void
 14638 ;; Registers used:
 14639 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14640 ;; Tracked objects:
 14641 ;;		On entry : 0/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14645 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;Total ram usage:        2 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; Hardware stack levels required when called:    5
 14652 ;; This function calls:
 14653 ;;		Nothing
 14654 ;; This function is called by:
 14655 ;;		_setDimmerLights_ERROR
 14656 ;;		_setDimmerLights_Adj
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           
 14661                           ;psect for function _setLoad_StatusOff
 14662  1CAC                     _setLoad_StatusOff:	
 14663                           
 14664                           ;incstack = 0
 14665                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 14666                           ;setLoad_StatusOff@lights stored from wreg
 14667  1CAC  0020               	movlb	0	; select bank0
 14668  1CAD  00A1               	movwf	setLoad_StatusOff@lights
 14669                           
 14670                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 14671  1CAE  087B               	movf	_Load,w
 14672  1CAF  3E46               	addlw	70
 14673  1CB0  0086               	movwf	6
 14674  1CB1  3002               	movlw	2	; select bank4/5
 14675  1CB2  0087               	movwf	7
 14676  1CB3  0820               	movf	setLoad_StatusOff@command,w
 14677  1CB4  1081               	bcf	1,1
 14678  1CB5  1D03               	skipz
 14679  1CB6  1481               	bsf	1,1
 14680                           
 14681                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 14682  1CB7  087B               	movf	_Load,w
 14683  1CB8  3E42               	addlw	66
 14684  1CB9  0086               	movwf	6
 14685  1CBA  3002               	movlw	2	; select bank4/5
 14686  1CBB  0087               	movwf	7
 14687  1CBC  3002               	movlw	2
 14688  1CBD  0281               	subwf	1,f
 14689                           
 14690                           ;OverLoad_B1.c: 287: if (lights == 1) {
 14691  1CBE  0821               	movf	setLoad_StatusOff@lights,w
 14692  1CBF  3A01               	xorlw	1
 14693  1CC0  1D03               	skipz
 14694  1CC1  2CC8               	goto	l6425
 14695                           
 14696                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 14697  1CC2  087B               	movf	_Load,w
 14698  1CC3  3E43               	addlw	67
 14699  1CC4  0086               	movwf	6
 14700  1CC5  3002               	movlw	2	; select bank4/5
 14701  1CC6  0087               	movwf	7
 14702  1CC7  0181               	clrf	1
 14703  1CC8                     l6425:	
 14704                           
 14705                           ;OverLoad_B1.c: 289: }
 14706                           ;OverLoad_B1.c: 290: if (lights == 2) {
 14707  1CC8  0821               	movf	setLoad_StatusOff@lights,w
 14708  1CC9  3A02               	xorlw	2
 14709  1CCA  1D03               	skipz
 14710  1CCB  2CD2               	goto	l6429
 14711                           
 14712                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 14713  1CCC  087B               	movf	_Load,w
 14714  1CCD  3E44               	addlw	68
 14715  1CCE  0086               	movwf	6
 14716  1CCF  3002               	movlw	2	; select bank4/5
 14717  1CD0  0087               	movwf	7
 14718  1CD1  0181               	clrf	1
 14719  1CD2                     l6429:	
 14720                           
 14721                           ;OverLoad_B1.c: 292: }
 14722                           ;OverLoad_B1.c: 293: if (lights == 3) {
 14723  1CD2  0821               	movf	setLoad_StatusOff@lights,w
 14724  1CD3  3A03               	xorlw	3
 14725  1CD4  1D03               	skipz
 14726  1CD5  0008               	return
 14727                           
 14728                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 14729  1CD6  087B               	movf	_Load,w
 14730  1CD7  3E45               	addlw	69
 14731  1CD8  0086               	movwf	6
 14732  1CD9  3002               	movlw	2	; select bank4/5
 14733  1CDA  0087               	movwf	7
 14734  1CDB  0181               	clrf	1
 14735  1CDC  0008               	return
 14736  1CDD                     __end_of_setLoad_StatusOff:	
 14737                           
 14738                           	psect	text84
 14739  0902                     __ptext84:	
 14740 ;; *************** function _setDimmerLights *****************
 14741 ;; Defined at:
 14742 ;;		line 610 in file "../src/Dimmer_B1.c"
 14743 ;; Parameters:    Size  Location     Type
 14744 ;;  lights          1    wreg     unsigned char 
 14745 ;;  status          1    4[BANK0 ] unsigned char 
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;  lights          1    6[BANK0 ] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;		None               void
 14750 ;; Registers used:
 14751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14757 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;Total ram usage:        3 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    7
 14764 ;; This function calls:
 14765 ;;		_DimmerLightsPointSelect
 14766 ;;		_setLED
 14767 ;;		_setLoad_Count
 14768 ;;		_setLoad_StatusOn
 14769 ;;		_setMemory_GO
 14770 ;; This function is called by:
 14771 ;;		_setDimmerLights_Main
 14772 ;;		_setControl_Lights_Table
 14773 ;; This function uses a non-reentrant model
 14774 ;;
 14775                           
 14776                           
 14777                           ;psect for function _setDimmerLights
 14778  0902                     _setDimmerLights:	
 14779                           
 14780                           ;incstack = 0
 14781                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14782                           ;setDimmerLights@lights stored from wreg
 14783  0902  0020               	movlb	0	; select bank0
 14784  0903  00A6               	movwf	setDimmerLights@lights
 14785                           
 14786                           ;Dimmer_B1.c: 611: DimmerLightsPointSelect(lights);
 14787  0904  0826               	movf	setDimmerLights@lights,w
 14788  0905  31A7  27C5  3189   	fcall	_DimmerLightsPointSelect
 14789                           
 14790                           ;Dimmer_B1.c: 612: Dimmer->Load = lights;
 14791  0908  0020               	movlb	0	; select bank0
 14792  0909  0826               	movf	setDimmerLights@lights,w
 14793  090A  00A5               	movwf	??_setDimmerLights
 14794  090B  0021               	movlb	1	; select bank1
 14795  090C  0A3A               	incf	_Dimmer^(0+128),w
 14796  090D  0086               	movwf	6
 14797  090E  0187               	clrf	7
 14798  090F  0020               	movlb	0	; select bank0
 14799  0910  0825               	movf	??_setDimmerLights,w
 14800  0911  0081               	movwf	1
 14801                           
 14802                           ;Dimmer_B1.c: 613: if (status) {
 14803  0912  0824               	movf	setDimmerLights@status,w
 14804  0913  1903               	btfsc	3,2
 14805  0914  295F               	goto	l6585
 14806                           
 14807                           ;Dimmer_B1.c: 614: DimmerLights->Status = 1;
 14808  0915  0878               	movf	_DimmerLights,w
 14809  0916  0086               	movwf	6
 14810  0917  3001               	movlw	1	; select bank2/3
 14811  0918  0087               	movwf	7
 14812  0919  1681               	bsf	1,5
 14813                           
 14814                           ;Dimmer_B1.c: 615: setLED(lights, 0);
 14815  091A  01A2               	clrf	setLED@command
 14816  091B  0826               	movf	setDimmerLights@lights,w
 14817  091C  3192  2260  3189   	fcall	_setLED
 14818                           
 14819                           ;Dimmer_B1.c: 617: setLoad_Count(0);
 14820  091F  3000               	movlw	0
 14821  0920  3198  209E  3189   	fcall	_setLoad_Count
 14822                           
 14823                           ;Dimmer_B1.c: 619: DimmerLights->Signal = 1;
 14824  0923  0878               	movf	_DimmerLights,w
 14825  0924  0086               	movwf	6
 14826  0925  3001               	movlw	1	; select bank2/3
 14827  0926  0087               	movwf	7
 14828  0927  1481               	bsf	1,1
 14829                           
 14830                           ;Dimmer_B1.c: 620: DimmerLights->DimmingTimeValue = 6;
 14831  0928  3006               	movlw	6
 14832  0929  0020               	movlb	0	; select bank0
 14833  092A  00A5               	movwf	??_setDimmerLights
 14834  092B  0878               	movf	_DimmerLights,w
 14835  092C  3E02               	addlw	2
 14836  092D  0086               	movwf	6
 14837  092E  3001               	movlw	1	; select bank2/3
 14838  092F  0087               	movwf	7
 14839  0930  0825               	movf	??_setDimmerLights,w
 14840  0931  0081               	movwf	1
 14841                           
 14842                           ;Dimmer_B1.c: 622: if (!DimmerLights->StatusFlag) {
 14843  0932  0878               	movf	_DimmerLights,w
 14844  0933  0086               	movwf	6
 14845  0934  3001               	movlw	1	; select bank2/3
 14846  0935  0087               	movwf	7
 14847  0936  1B01               	btfsc	1,6
 14848  0937  0008               	return
 14849                           
 14850                           ;Dimmer_B1.c: 623: DimmerLights->StatusFlag = 1;
 14851  0938  0878               	movf	_DimmerLights,w
 14852  0939  0086               	movwf	6
 14853  093A  3001               	movlw	1	; select bank2/3
 14854  093B  0087               	movwf	7
 14855  093C  1701               	bsf	1,6
 14856                           
 14857                           ;Dimmer_B1.c: 624: setLoad_StatusOn(lights, 1);
 14858  093D  01A0               	clrf	setLoad_StatusOn@command
 14859  093E  0AA0               	incf	setLoad_StatusOn@command,f
 14860  093F  0826               	movf	setDimmerLights@lights,w
 14861  0940  319C  24DD  3189   	fcall	_setLoad_StatusOn
 14862                           
 14863                           ;Dimmer_B1.c: 625: setMemory_GO(0);
 14864  0943  3000               	movlw	0
 14865  0944  319A  2289         	fcall	_setMemory_GO
 14866                           
 14867                           ;Dimmer_B1.c: 628: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14868  0946  0878               	movf	_DimmerLights,w
 14869  0947  3E05               	addlw	5
 14870  0948  0086               	movwf	6
 14871  0949  3001               	movlw	1	; select bank2/3
 14872  094A  0087               	movwf	7
 14873  094B  0801               	movf	1,w
 14874  094C  0020               	movlb	0	; select bank0
 14875  094D  00A5               	movwf	??_setDimmerLights
 14876  094E  0878               	movf	_DimmerLights,w
 14877  094F  3E04               	addlw	4
 14878  0950  0086               	movwf	6
 14879  0951  3001               	movlw	1	; select bank2/3
 14880  0952  0087               	movwf	7
 14881  0953  0825               	movf	??_setDimmerLights,w
 14882  0954  0081               	movwf	1
 14883                           
 14884                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 14885  0955  3020               	movlw	32
 14886  0956  00A5               	movwf	??_setDimmerLights
 14887  0957  0878               	movf	_DimmerLights,w
 14888  0958  3E04               	addlw	4
 14889  0959  0086               	movwf	6
 14890  095A  3001               	movlw	1	; select bank2/3
 14891  095B  0087               	movwf	7
 14892  095C  0825               	movf	??_setDimmerLights,w
 14893  095D  0081               	movwf	1
 14894                           
 14895                           ;Dimmer_B1.c: 634: }
 14896                           ;Dimmer_B1.c: 635: } else {
 14897  095E  0008               	return
 14898  095F                     l6585:	
 14899                           
 14900                           ;Dimmer_B1.c: 637: DimmerLights->Status = 0;
 14901  095F  0878               	movf	_DimmerLights,w
 14902  0960  0086               	movwf	6
 14903  0961  3001               	movlw	1	; select bank2/3
 14904  0962  0087               	movwf	7
 14905  0963  1281               	bcf	1,5
 14906                           
 14907                           ;Dimmer_B1.c: 639: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14908  0964  0878               	movf	_DimmerLights,w
 14909  0965  3E06               	addlw	6
 14910  0966  0086               	movwf	6
 14911  0967  3001               	movlw	1	; select bank2/3
 14912  0968  0087               	movwf	7
 14913  0969  0801               	movf	1,w
 14914  096A  00A5               	movwf	??_setDimmerLights
 14915  096B  0878               	movf	_DimmerLights,w
 14916  096C  3E04               	addlw	4
 14917  096D  0086               	movwf	6
 14918  096E  3001               	movlw	1	; select bank2/3
 14919  096F  0087               	movwf	7
 14920  0970  0825               	movf	??_setDimmerLights,w
 14921  0971  0081               	movwf	1
 14922                           
 14923                           ;Dimmer_B1.c: 646: DimmerLights->Signal = 1;
 14924  0972  0878               	movf	_DimmerLights,w
 14925  0973  0086               	movwf	6
 14926  0974  3001               	movlw	1	; select bank2/3
 14927  0975  0087               	movwf	7
 14928  0976  1481               	bsf	1,1
 14929                           
 14930                           ;Dimmer_B1.c: 647: DimmerLights->AdjFlag = 0;
 14931  0977  0878               	movf	_DimmerLights,w
 14932  0978  0086               	movwf	6
 14933  0979  3001               	movlw	1	; select bank2/3
 14934  097A  0087               	movwf	7
 14935  097B  1181               	bcf	1,3
 14936                           
 14937                           ;Dimmer_B1.c: 648: DimmerLights->AdjStatus = 0;
 14938  097C  0878               	movf	_DimmerLights,w
 14939  097D  0086               	movwf	6
 14940  097E  3001               	movlw	1	; select bank2/3
 14941  097F  0087               	movwf	7
 14942  0980  1201               	bcf	1,4
 14943                           
 14944                           ;Dimmer_B1.c: 649: DimmerLights->DimmingTimeValue = 6;
 14945  0981  3006               	movlw	6
 14946  0982  00A5               	movwf	??_setDimmerLights
 14947  0983  0878               	movf	_DimmerLights,w
 14948  0984  3E02               	addlw	2
 14949  0985  0086               	movwf	6
 14950  0986  3001               	movlw	1	; select bank2/3
 14951  0987  0087               	movwf	7
 14952  0988  0825               	movf	??_setDimmerLights,w
 14953  0989  0081               	movwf	1
 14954  098A  0008               	return
 14955  098B                     __end_of_setDimmerLights:	
 14956                           
 14957                           	psect	text85
 14958  1CDD                     __ptext85:	
 14959 ;; *************** function _setLoad_StatusOn *****************
 14960 ;; Defined at:
 14961 ;;		line 269 in file "../src/OverLoad_B1.c"
 14962 ;; Parameters:    Size  Location     Type
 14963 ;;  lights          1    wreg     unsigned char 
 14964 ;;  command         1    0[BANK0 ] unsigned char 
 14965 ;; Auto vars:     Size  Location     Type
 14966 ;;  lights          1    1[BANK0 ] unsigned char 
 14967 ;; Return value:  Size  Location     Type
 14968 ;;		None               void
 14969 ;; Registers used:
 14970 ;;		wreg, fsr1l, fsr1h
 14971 ;; Tracked objects:
 14972 ;;		On entry : 0/0
 14973 ;;		On exit  : 0/0
 14974 ;;		Unchanged: 0/0
 14975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14976 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;Total ram usage:        2 bytes
 14981 ;; Hardware stack levels used:    1
 14982 ;; Hardware stack levels required when called:    5
 14983 ;; This function calls:
 14984 ;;		Nothing
 14985 ;; This function is called by:
 14986 ;;		_setDimmerLights
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990                           
 14991                           ;psect for function _setLoad_StatusOn
 14992  1CDD                     _setLoad_StatusOn:	
 14993                           
 14994                           ;incstack = 0
 14995                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 14996                           ;setLoad_StatusOn@lights stored from wreg
 14997  1CDD  0020               	movlb	0	; select bank0
 14998  1CDE  00A1               	movwf	setLoad_StatusOn@lights
 14999                           
 15000                           ;OverLoad_B1.c: 270: Load->GO = 1;
 15001  1CDF  087B               	movf	_Load,w
 15002  1CE0  0086               	movwf	6
 15003  1CE1  3002               	movlw	2	; select bank4/5
 15004  1CE2  0087               	movwf	7
 15005  1CE3  1481               	bsf	1,1
 15006                           
 15007                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 15008  1CE4  087B               	movf	_Load,w
 15009  1CE5  3E46               	addlw	70
 15010  1CE6  0086               	movwf	6
 15011  1CE7  3002               	movlw	2	; select bank4/5
 15012  1CE8  0087               	movwf	7
 15013  1CE9  0820               	movf	setLoad_StatusOn@command,w
 15014  1CEA  1001               	bcf	1,0
 15015  1CEB  1D03               	skipz
 15016  1CEC  1401               	bsf	1,0
 15017                           
 15018                           ;OverLoad_B1.c: 273: if (lights == 1) {
 15019  1CED  0821               	movf	setLoad_StatusOn@lights,w
 15020  1CEE  3A01               	xorlw	1
 15021  1CEF  1D03               	skipz
 15022  1CF0  2CF8               	goto	l6497
 15023                           
 15024                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 15025  1CF1  087B               	movf	_Load,w
 15026  1CF2  3E43               	addlw	67
 15027  1CF3  0086               	movwf	6
 15028  1CF4  3002               	movlw	2	; select bank4/5
 15029  1CF5  0087               	movwf	7
 15030  1CF6  0181               	clrf	1
 15031  1CF7  0A81               	incf	1,f
 15032  1CF8                     l6497:	
 15033                           
 15034                           ;OverLoad_B1.c: 275: }
 15035                           ;OverLoad_B1.c: 276: if (lights == 2) {
 15036  1CF8  0821               	movf	setLoad_StatusOn@lights,w
 15037  1CF9  3A02               	xorlw	2
 15038  1CFA  1D03               	skipz
 15039  1CFB  2D03               	goto	l6501
 15040                           
 15041                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 15042  1CFC  087B               	movf	_Load,w
 15043  1CFD  3E44               	addlw	68
 15044  1CFE  0086               	movwf	6
 15045  1CFF  3002               	movlw	2	; select bank4/5
 15046  1D00  0087               	movwf	7
 15047  1D01  0181               	clrf	1
 15048  1D02  0A81               	incf	1,f
 15049  1D03                     l6501:	
 15050                           
 15051                           ;OverLoad_B1.c: 278: }
 15052                           ;OverLoad_B1.c: 279: if (lights == 3) {
 15053  1D03  0821               	movf	setLoad_StatusOn@lights,w
 15054  1D04  3A03               	xorlw	3
 15055  1D05  1D03               	skipz
 15056  1D06  0008               	return
 15057                           
 15058                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 15059  1D07  087B               	movf	_Load,w
 15060  1D08  3E45               	addlw	69
 15061  1D09  0086               	movwf	6
 15062  1D0A  3002               	movlw	2	; select bank4/5
 15063  1D0B  0087               	movwf	7
 15064  1D0C  0181               	clrf	1
 15065  1D0D  0A81               	incf	1,f
 15066  1D0E  0008               	return
 15067  1D0F                     __end_of_setLoad_StatusOn:	
 15068                           
 15069                           	psect	text86
 15070  189E                     __ptext86:	
 15071 ;; *************** function _setLoad_Count *****************
 15072 ;; Defined at:
 15073 ;;		line 254 in file "../src/OverLoad_B1.c"
 15074 ;; Parameters:    Size  Location     Type
 15075 ;;  command         1    wreg     unsigned char 
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;  command         1    1[BANK0 ] unsigned char 
 15078 ;; Return value:  Size  Location     Type
 15079 ;;		None               void
 15080 ;; Registers used:
 15081 ;;		wreg, fsr1l, fsr1h
 15082 ;; Tracked objects:
 15083 ;;		On entry : 0/0
 15084 ;;		On exit  : 0/0
 15085 ;;		Unchanged: 0/0
 15086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;Total ram usage:        2 bytes
 15092 ;; Hardware stack levels used:    1
 15093 ;; Hardware stack levels required when called:    5
 15094 ;; This function calls:
 15095 ;;		Nothing
 15096 ;; This function is called by:
 15097 ;;		_setDimmerLights
 15098 ;; This function uses a non-reentrant model
 15099 ;;
 15100                           
 15101                           
 15102                           ;psect for function _setLoad_Count
 15103  189E                     _setLoad_Count:	
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _setLoad_Count: [wregfsr1]
 15107                           ;setLoad_Count@command stored from wreg
 15108  189E  0020               	movlb	0	; select bank0
 15109  189F  00A1               	movwf	setLoad_Count@command
 15110                           
 15111                           ;OverLoad_B1.c: 255: Load->Count = command;
 15112  18A0  0821               	movf	setLoad_Count@command,w
 15113  18A1  00A0               	movwf	??_setLoad_Count
 15114  18A2  087B               	movf	_Load,w
 15115  18A3  3E3A               	addlw	58
 15116  18A4  0086               	movwf	6
 15117  18A5  3002               	movlw	2	; select bank4/5
 15118  18A6  0087               	movwf	7
 15119  18A7  0820               	movf	??_setLoad_Count,w
 15120  18A8  0081               	movwf	1
 15121                           
 15122                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 15123  18A9  0821               	movf	setLoad_Count@command,w
 15124  18AA  00A0               	movwf	??_setLoad_Count
 15125  18AB  087B               	movf	_Load,w
 15126  18AC  3E42               	addlw	66
 15127  18AD  0086               	movwf	6
 15128  18AE  3002               	movlw	2	; select bank4/5
 15129  18AF  0087               	movwf	7
 15130  18B0  0820               	movf	??_setLoad_Count,w
 15131  18B1  0081               	movwf	1
 15132  18B2  0008               	return
 15133  18B3                     __end_of_setLoad_Count:	
 15134                           
 15135                           	psect	text87
 15136  1260                     __ptext87:	
 15137 ;; *************** function _setLED *****************
 15138 ;; Defined at:
 15139 ;;		line 74 in file "../src/LED_B1.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;  led             1    wreg     unsigned char 
 15142 ;;  command         1    2[BANK0 ] unsigned char 
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;  led             1    3[BANK0 ] unsigned char 
 15145 ;; Return value:  Size  Location     Type
 15146 ;;		None               void
 15147 ;; Registers used:
 15148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15149 ;; Tracked objects:
 15150 ;;		On entry : 0/0
 15151 ;;		On exit  : 0/0
 15152 ;;		Unchanged: 0/0
 15153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15154 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;Total ram usage:        2 bytes
 15159 ;; Hardware stack levels used:    1
 15160 ;; Hardware stack levels required when called:    6
 15161 ;; This function calls:
 15162 ;;		_LedPointSelect
 15163 ;; This function is called by:
 15164 ;;		_setDimmerLights_ERROR
 15165 ;;		_setDimmerLights
 15166 ;;		_setLED_Initialization
 15167 ;;		_setLoad_Exceptions
 15168 ;;		_setOverTemp_Exceptions
 15169 ;;		_setSw_Initialization
 15170 ;; This function uses a non-reentrant model
 15171 ;;
 15172                           
 15173                           
 15174                           ;psect for function _setLED
 15175  1260                     _setLED:	
 15176                           
 15177                           ;incstack = 0
 15178                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15179                           ;setLED@led stored from wreg
 15180  1260  0020               	movlb	0	; select bank0
 15181  1261  00A3               	movwf	setLED@led
 15182                           
 15183                           ;LED_B1.c: 76: LedPointSelect(led);
 15184  1262  0823               	movf	setLED@led,w
 15185  1263  319B  230B  3192   	fcall	_LedPointSelect
 15186                           
 15187                           ;LED_B1.c: 77: if(command == 0)
 15188  1266  0020               	movlb	0	; select bank0
 15189  1267  08A2               	movf	setLED@command,f
 15190  1268  1D03               	skipz
 15191  1269  2A7C               	goto	l6455
 15192                           
 15193                           ;LED_B1.c: 78: {
 15194                           ;LED_B1.c: 80: if(led == 1)
 15195  126A  0823               	movf	setLED@led,w
 15196  126B  3A01               	xorlw	1
 15197  126C  1D03               	skipz
 15198  126D  2A70               	goto	l6447
 15199                           
 15200                           ;LED_B1.c: 81: {
 15201                           ;LED_B1.c: 85: RA3=1;
 15202  126E  158C               	bsf	12,3	;volatile
 15203                           
 15204                           ;LED_B1.c: 87: }
 15205  126F  0008               	return
 15206  1270                     l6447:	
 15207                           
 15208                           ;LED_B1.c: 90: else if(led == 2)
 15209  1270  0823               	movf	setLED@led,w
 15210  1271  3A02               	xorlw	2
 15211  1272  1D03               	skipz
 15212  1273  2A76               	goto	l6451
 15213                           
 15214                           ;LED_B1.c: 91: {
 15215                           ;LED_B1.c: 95: RC7=1;
 15216  1274  178E               	bsf	14,7	;volatile
 15217                           
 15218                           ;LED_B1.c: 97: }
 15219  1275  0008               	return
 15220  1276                     l6451:	
 15221                           
 15222                           ;LED_B1.c: 110: else if(led == 99)
 15223  1276  0823               	movf	setLED@led,w
 15224  1277  3A63               	xorlw	99
 15225  1278  1D03               	skipz
 15226  1279  0008               	return
 15227                           
 15228                           ;LED_B1.c: 111: {
 15229                           ;LED_B1.c: 115: RB5=1;
 15230  127A  168D               	bsf	13,5	;volatile
 15231                           
 15232                           ;LED_B1.c: 117: }
 15233                           ;LED_B1.c: 119: }
 15234  127B  0008               	return
 15235  127C                     l6455:	
 15236                           
 15237                           ;LED_B1.c: 120: else if(command == 1)
 15238  127C  0822               	movf	setLED@command,w
 15239  127D  3A01               	xorlw	1
 15240  127E  1D03               	skipz
 15241  127F  2A92               	goto	l6469
 15242                           
 15243                           ;LED_B1.c: 121: {
 15244                           ;LED_B1.c: 123: if(led == 1)
 15245  1280  0823               	movf	setLED@led,w
 15246  1281  3A01               	xorlw	1
 15247  1282  1D03               	skipz
 15248  1283  2A86               	goto	l6461
 15249                           
 15250                           ;LED_B1.c: 124: {
 15251                           ;LED_B1.c: 128: RA3=0;
 15252  1284  118C               	bcf	12,3	;volatile
 15253                           
 15254                           ;LED_B1.c: 130: }
 15255  1285  0008               	return
 15256  1286                     l6461:	
 15257                           
 15258                           ;LED_B1.c: 133: else if(led == 2)
 15259  1286  0823               	movf	setLED@led,w
 15260  1287  3A02               	xorlw	2
 15261  1288  1D03               	skipz
 15262  1289  2A8C               	goto	l6465
 15263                           
 15264                           ;LED_B1.c: 134: {
 15265                           ;LED_B1.c: 138: RC7=0;
 15266  128A  138E               	bcf	14,7	;volatile
 15267                           
 15268                           ;LED_B1.c: 140: }
 15269  128B  0008               	return
 15270  128C                     l6465:	
 15271                           
 15272                           ;LED_B1.c: 153: else if(led == 99)
 15273  128C  0823               	movf	setLED@led,w
 15274  128D  3A63               	xorlw	99
 15275  128E  1D03               	skipz
 15276  128F  0008               	return
 15277                           
 15278                           ;LED_B1.c: 154: {
 15279                           ;LED_B1.c: 158: RB5=0;
 15280  1290  128D               	bcf	13,5	;volatile
 15281                           
 15282                           ;LED_B1.c: 160: }
 15283                           ;LED_B1.c: 162: }
 15284  1291  0008               	return
 15285  1292                     l6469:	
 15286                           
 15287                           ;LED_B1.c: 163: else if(command == 10)
 15288  1292  0822               	movf	setLED@command,w
 15289  1293  3A0A               	xorlw	10
 15290  1294  1D03               	skipz
 15291  1295  2AB4               	goto	l6485
 15292                           
 15293                           ;LED_B1.c: 164: {
 15294                           ;LED_B1.c: 165: LED->GO=0;
 15295  1296  0021               	movlb	1	; select bank1
 15296  1297  083E               	movf	_LED^(0+128),w
 15297  1298  0086               	movwf	6
 15298  1299  0187               	clrf	7
 15299  129A  1081               	bcf	1,1
 15300                           
 15301                           ;LED_B1.c: 166: LED->Time=0;
 15302  129B  0A3E               	incf	_LED^(0+128),w
 15303  129C  0086               	movwf	6
 15304  129D  0187               	clrf	7
 15305  129E  3000               	movlw	0
 15306  129F  3FC0               	movwi [0]fsr1
 15307  12A0  3FC1               	movwi [1]fsr1
 15308                           
 15309                           ;LED_B1.c: 168: if(led == 1)
 15310  12A1  0020               	movlb	0	; select bank0
 15311  12A2  0823               	movf	setLED@led,w
 15312  12A3  3A01               	xorlw	1
 15313  12A4  1D03               	skipz
 15314  12A5  2AA8               	goto	l6477
 15315                           
 15316                           ;LED_B1.c: 169: {
 15317                           ;LED_B1.c: 173: RA3=1;
 15318  12A6  158C               	bsf	12,3	;volatile
 15319                           
 15320                           ;LED_B1.c: 175: }
 15321  12A7  0008               	return
 15322  12A8                     l6477:	
 15323                           
 15324                           ;LED_B1.c: 178: else if(led == 2)
 15325  12A8  0823               	movf	setLED@led,w
 15326  12A9  3A02               	xorlw	2
 15327  12AA  1D03               	skipz
 15328  12AB  2AAE               	goto	l6481
 15329                           
 15330                           ;LED_B1.c: 179: {
 15331                           ;LED_B1.c: 183: RC7=1;
 15332  12AC  178E               	bsf	14,7	;volatile
 15333                           
 15334                           ;LED_B1.c: 185: }
 15335  12AD  0008               	return
 15336  12AE                     l6481:	
 15337                           
 15338                           ;LED_B1.c: 198: else if(led == 99)
 15339  12AE  0823               	movf	setLED@led,w
 15340  12AF  3A63               	xorlw	99
 15341  12B0  1D03               	skipz
 15342  12B1  0008               	return
 15343                           
 15344                           ;LED_B1.c: 199: {
 15345                           ;LED_B1.c: 203: RB5=1;
 15346  12B2  168D               	bsf	13,5	;volatile
 15347                           
 15348                           ;LED_B1.c: 205: }
 15349                           ;LED_B1.c: 207: }
 15350  12B3  0008               	return
 15351  12B4                     l6485:	
 15352                           
 15353                           ;LED_B1.c: 208: else if(command == 11)
 15354  12B4  0822               	movf	setLED@command,w
 15355  12B5  3A0B               	xorlw	11
 15356  12B6  1D03               	skipz
 15357  12B7  0008               	return
 15358                           
 15359                           ;LED_B1.c: 209: {
 15360                           ;LED_B1.c: 210: LED->GO=1;
 15361  12B8  0021               	movlb	1	; select bank1
 15362  12B9  083E               	movf	_LED^(0+128),w
 15363  12BA  0086               	movwf	6
 15364  12BB  0187               	clrf	7
 15365  12BC  1481               	bsf	1,1
 15366  12BD  0008               	return
 15367  12BE                     __end_of_setLED:	
 15368                           
 15369                           	psect	text88
 15370  1B0B                     __ptext88:	
 15371 ;; *************** function _LedPointSelect *****************
 15372 ;; Defined at:
 15373 ;;		line 7 in file "../src/LED_B1.c"
 15374 ;; Parameters:    Size  Location     Type
 15375 ;;  led             1    wreg     unsigned char 
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;  led             1    1[BANK0 ] unsigned char 
 15378 ;; Return value:  Size  Location     Type
 15379 ;;		None               void
 15380 ;; Registers used:
 15381 ;;		wreg
 15382 ;; Tracked objects:
 15383 ;;		On entry : 0/0
 15384 ;;		On exit  : 0/0
 15385 ;;		Unchanged: 0/0
 15386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;Total ram usage:        2 bytes
 15392 ;; Hardware stack levels used:    1
 15393 ;; Hardware stack levels required when called:    5
 15394 ;; This function calls:
 15395 ;;		Nothing
 15396 ;; This function is called by:
 15397 ;;		_setLED_Initialization
 15398 ;;		_setLED
 15399 ;;		_setLED_Main
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           
 15404                           ;psect for function _LedPointSelect
 15405  1B0B                     _LedPointSelect:	
 15406                           
 15407                           ;incstack = 0
 15408                           ; Regs used in _LedPointSelect: [wreg]
 15409                           ;LedPointSelect@led stored from wreg
 15410  1B0B  0020               	movlb	0	; select bank0
 15411  1B0C  00A1               	movwf	LedPointSelect@led
 15412                           
 15413                           ;LED_B1.c: 10: if(led == 1)
 15414  1B0D  0821               	movf	LedPointSelect@led,w
 15415  1B0E  3A01               	xorlw	1
 15416  1B0F  1D03               	skipz
 15417  1B10  2B17               	goto	l6251
 15418                           
 15419                           ;LED_B1.c: 11: {
 15420                           ;LED_B1.c: 12: LED=&VarLED1;
 15421  1B11  30DC               	movlw	_VarLED1& (0+255)
 15422  1B12  00A0               	movwf	??_LedPointSelect
 15423  1B13  0820               	movf	??_LedPointSelect,w
 15424  1B14  0021               	movlb	1	; select bank1
 15425  1B15  00BE               	movwf	_LED^(0+128)
 15426                           
 15427                           ;LED_B1.c: 13: }
 15428  1B16  0008               	return
 15429  1B17                     l6251:	
 15430                           
 15431                           ;LED_B1.c: 16: else if(led == 2)
 15432  1B17  0020               	movlb	0	; select bank0
 15433  1B18  0821               	movf	LedPointSelect@led,w
 15434  1B19  3A02               	xorlw	2
 15435  1B1A  1D03               	skipz
 15436  1B1B  2B22               	goto	l6255
 15437                           
 15438                           ;LED_B1.c: 17: {
 15439                           ;LED_B1.c: 18: LED=&VarLED2;
 15440  1B1C  30E0               	movlw	_VarLED2& (0+255)
 15441  1B1D  00A0               	movwf	??_LedPointSelect
 15442  1B1E  0820               	movf	??_LedPointSelect,w
 15443  1B1F  0021               	movlb	1	; select bank1
 15444  1B20  00BE               	movwf	_LED^(0+128)
 15445                           
 15446                           ;LED_B1.c: 19: }
 15447  1B21  0008               	return
 15448  1B22                     l6255:	
 15449                           
 15450                           ;LED_B1.c: 28: else if(led == 99)
 15451  1B22  0020               	movlb	0	; select bank0
 15452  1B23  0821               	movf	LedPointSelect@led,w
 15453  1B24  3A63               	xorlw	99
 15454  1B25  1D03               	skipz
 15455  1B26  0008               	return
 15456                           
 15457                           ;LED_B1.c: 29: {
 15458                           ;LED_B1.c: 30: LED=&VarErrLED;
 15459  1B27  30D8               	movlw	_VarErrLED& (0+255)
 15460  1B28  00A0               	movwf	??_LedPointSelect
 15461  1B29  0820               	movf	??_LedPointSelect,w
 15462  1B2A  0021               	movlb	1	; select bank1
 15463  1B2B  00BE               	movwf	_LED^(0+128)
 15464  1B2C  0008               	return
 15465  1B2D                     __end_of_LedPointSelect:	
 15466                           
 15467                           	psect	text89
 15468  190D                     __ptext89:	
 15469 ;; *************** function _DimmerLights_Close *****************
 15470 ;; Defined at:
 15471 ;;		line 408 in file "../src/Dimmer_B1.c"
 15472 ;; Parameters:    Size  Location     Type
 15473 ;;		None
 15474 ;; Auto vars:     Size  Location     Type
 15475 ;;		None
 15476 ;; Return value:  Size  Location     Type
 15477 ;;		None               void
 15478 ;; Registers used:
 15479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15480 ;; Tracked objects:
 15481 ;;		On entry : 0/0
 15482 ;;		On exit  : 0/0
 15483 ;;		Unchanged: 0/0
 15484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;Total ram usage:        0 bytes
 15490 ;; Hardware stack levels used:    1
 15491 ;; Hardware stack levels required when called:    6
 15492 ;; This function calls:
 15493 ;;		_getDimmerLights_StatusFlag
 15494 ;;		_setLoad_GO
 15495 ;;		_setMemory_GO
 15496 ;; This function is called by:
 15497 ;;		_DimmerLights_Main
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           
 15502                           ;psect for function _DimmerLights_Close
 15503  190D                     _DimmerLights_Close:	
 15504                           
 15505                           ;Dimmer_B1.c: 409: if (Dimmer->Detect) {
 15506                           
 15507                           ;incstack = 0
 15508                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15509  190D  0021               	movlb	1	; select bank1
 15510  190E  083A               	movf	_Dimmer^(0+128),w
 15511  190F  0086               	movwf	6
 15512  1910  0187               	clrf	7
 15513  1911  1C01               	btfss	1,0
 15514  1912  0008               	return
 15515                           
 15516                           ;Dimmer_B1.c: 410: Dimmer->Detect = 0;
 15517  1913  083A               	movf	_Dimmer^(0+128),w
 15518  1914  0086               	movwf	6
 15519  1915  0187               	clrf	7
 15520  1916  1001               	bcf	1,0
 15521                           
 15522                           ;Dimmer_B1.c: 411: if (!getDimmerLights_StatusFlag()) {
 15523  1917  31A7  2791  3199   	fcall	_getDimmerLights_StatusFlag
 15524  191A  3800               	iorlw	0
 15525  191B  1D03               	skipz
 15526  191C  0008               	return
 15527                           
 15528                           ;Dimmer_B1.c: 413: setLoad_GO(0);
 15529  191D  3000               	movlw	0
 15530  191E  31A5  25EF  3199   	fcall	_setLoad_GO
 15531                           
 15532                           ;Dimmer_B1.c: 414: setMemory_GO(1);
 15533  1921  3001               	movlw	1
 15534  1922  319A  2289         	fcall	_setMemory_GO
 15535  1924  0008               	return
 15536  1925                     __end_of_DimmerLights_Close:	
 15537                           
 15538                           	psect	text90
 15539  1A89                     __ptext90:	
 15540 ;; *************** function _setMemory_GO *****************
 15541 ;; Defined at:
 15542 ;;		line 883 in file "../src/MCU_B1.c"
 15543 ;; Parameters:    Size  Location     Type
 15544 ;;  command         1    wreg     unsigned char 
 15545 ;; Auto vars:     Size  Location     Type
 15546 ;;  command         1    2[BANK0 ] unsigned char 
 15547 ;; Return value:  Size  Location     Type
 15548 ;;		None               void
 15549 ;; Registers used:
 15550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15551 ;; Tracked objects:
 15552 ;;		On entry : 0/0
 15553 ;;		On exit  : 0/0
 15554 ;;		Unchanged: 0/0
 15555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15559 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;Total ram usage:        3 bytes
 15561 ;; Hardware stack levels used:    1
 15562 ;; Hardware stack levels required when called:    5
 15563 ;; This function calls:
 15564 ;;		Nothing
 15565 ;; This function is called by:
 15566 ;;		_DimmerLights_Close
 15567 ;;		_setDimmerLights
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           
 15572                           ;psect for function _setMemory_GO
 15573  1A89                     _setMemory_GO:	
 15574                           
 15575                           ;incstack = 0
 15576                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 15577                           ;setMemory_GO@command stored from wreg
 15578  1A89  0020               	movlb	0	; select bank0
 15579  1A8A  00A2               	movwf	setMemory_GO@command
 15580                           
 15581                           ;MCU_B1.c: 884: Memory->GO = command;
 15582  1A8B  0021               	movlb	1	; select bank1
 15583  1A8C  086E               	movf	_Memory^(0+128),w
 15584  1A8D  3E24               	addlw	36
 15585  1A8E  0086               	movwf	6
 15586  1A8F  3002               	movlw	2	; select bank4/5
 15587  1A90  0087               	movwf	7
 15588  1A91  0020               	movlb	0	; select bank0
 15589  1A92  0822               	movf	setMemory_GO@command,w
 15590  1A93  1081               	bcf	1,1
 15591  1A94  1D03               	skipz
 15592  1A95  1481               	bsf	1,1
 15593                           
 15594                           ;MCU_B1.c: 885: if (command == 0) {
 15595  1A96  08A2               	movf	setMemory_GO@command,f
 15596  1A97  1D03               	skipz
 15597  1A98  0008               	return
 15598                           
 15599                           ;MCU_B1.c: 886: Memory->Time = command;
 15600  1A99  0822               	movf	setMemory_GO@command,w
 15601  1A9A  00A0               	movwf	??_setMemory_GO
 15602  1A9B  01A1               	clrf	??_setMemory_GO+1
 15603  1A9C  0021               	movlb	1	; select bank1
 15604  1A9D  086E               	movf	_Memory^(0+128),w
 15605  1A9E  3E22               	addlw	34
 15606  1A9F  0086               	movwf	6
 15607  1AA0  3002               	movlw	2	; select bank4/5
 15608  1AA1  0087               	movwf	7
 15609  1AA2  0020               	movlb	0	; select bank0
 15610  1AA3  0820               	movf	??_setMemory_GO,w
 15611  1AA4  3FC0               	movwi [0]fsr1
 15612  1AA5  0821               	movf	??_setMemory_GO+1,w
 15613  1AA6  3FC1               	movwi [1]fsr1
 15614  1AA7  0008               	return
 15615  1AA8                     __end_of_setMemory_GO:	
 15616                           
 15617                           	psect	text91
 15618  25EF                     __ptext91:	
 15619 ;; *************** function _setLoad_GO *****************
 15620 ;; Defined at:
 15621 ;;		line 265 in file "../src/OverLoad_B1.c"
 15622 ;; Parameters:    Size  Location     Type
 15623 ;;  command         1    wreg     unsigned char 
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;  command         1    0[BANK0 ] unsigned char 
 15626 ;; Return value:  Size  Location     Type
 15627 ;;		None               void
 15628 ;; Registers used:
 15629 ;;		wreg, fsr1l, fsr1h
 15630 ;; Tracked objects:
 15631 ;;		On entry : 0/0
 15632 ;;		On exit  : 0/0
 15633 ;;		Unchanged: 0/0
 15634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15639 ;;Total ram usage:        1 bytes
 15640 ;; Hardware stack levels used:    1
 15641 ;; Hardware stack levels required when called:    5
 15642 ;; This function calls:
 15643 ;;		Nothing
 15644 ;; This function is called by:
 15645 ;;		_DimmerLights_Close
 15646 ;; This function uses a non-reentrant model
 15647 ;;
 15648                           
 15649                           
 15650                           ;psect for function _setLoad_GO
 15651  25EF                     _setLoad_GO:	
 15652                           
 15653                           ;incstack = 0
 15654                           ; Regs used in _setLoad_GO: [wregfsr1]
 15655                           ;setLoad_GO@command stored from wreg
 15656  25EF  0020               	movlb	0	; select bank0
 15657  25F0  00A0               	movwf	setLoad_GO@command
 15658                           
 15659                           ;OverLoad_B1.c: 266: Load->GO = command;
 15660  25F1  087B               	movf	_Load,w
 15661  25F2  0086               	movwf	6
 15662  25F3  3002               	movlw	2	; select bank4/5
 15663  25F4  0087               	movwf	7
 15664  25F5  0820               	movf	setLoad_GO@command,w
 15665  25F6  1081               	bcf	1,1
 15666  25F7  1D03               	skipz
 15667  25F8  1481               	bsf	1,1
 15668  25F9  0008               	return
 15669  25FA                     __end_of_setLoad_GO:	
 15670                           
 15671                           	psect	text92
 15672  2791                     __ptext92:	
 15673 ;; *************** function _getDimmerLights_StatusFlag *****************
 15674 ;; Defined at:
 15675 ;;		line 490 in file "../src/Dimmer_B1.c"
 15676 ;; Parameters:    Size  Location     Type
 15677 ;;		None
 15678 ;; Auto vars:     Size  Location     Type
 15679 ;;  Status          1    1[BANK0 ] unsigned char 
 15680 ;; Return value:  Size  Location     Type
 15681 ;;                  1    wreg      unsigned char 
 15682 ;; Registers used:
 15683 ;;		wreg, status,2
 15684 ;; Tracked objects:
 15685 ;;		On entry : 0/0
 15686 ;;		On exit  : 0/0
 15687 ;;		Unchanged: 0/0
 15688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;Total ram usage:        3 bytes
 15694 ;; Hardware stack levels used:    1
 15695 ;; Hardware stack levels required when called:    5
 15696 ;; This function calls:
 15697 ;;		Nothing
 15698 ;; This function is called by:
 15699 ;;		_DimmerLights_Close
 15700 ;;		_DimmerLights_Exceptions
 15701 ;; This function uses a non-reentrant model
 15702 ;;
 15703                           
 15704                           
 15705                           ;psect for function _getDimmerLights_StatusFlag
 15706  2791                     _getDimmerLights_StatusFlag:	
 15707                           
 15708                           ;Dimmer_B1.c: 491: char Status = 0;
 15709                           
 15710                           ;incstack = 0
 15711                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 15712  2791  0020               	movlb	0	; select bank0
 15713  2792  01A1               	clrf	getDimmerLights_StatusFlag@Status
 15714                           
 15715                           ;Dimmer_B1.c: 498: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 15716  2793  01A2               	clrf	_getDimmerLights_StatusFlag$2271
 15717  2794  0AA2               	incf	_getDimmerLights_StatusFlag$2271,f
 15718  2795  0022               	movlb	2	; select bank2
 15719  2796  1F20               	btfss	_DimmerLights1^(0+256),6
 15720  2797  1B2F               	btfsc	_DimmerLights2^(0+256),6
 15721  2798  2F9B               	goto	l6561
 15722  2799  0020               	movlb	0	; select bank0
 15723  279A  01A2               	clrf	_getDimmerLights_StatusFlag$2271
 15724  279B                     l6561:	
 15725  279B  0020               	movlb	0	; select bank0
 15726  279C  0822               	movf	_getDimmerLights_StatusFlag$2271,w
 15727  279D  00A0               	movwf	??_getDimmerLights_StatusFlag
 15728  279E  0820               	movf	??_getDimmerLights_StatusFlag,w
 15729  279F  00A1               	movwf	getDimmerLights_StatusFlag@Status
 15730                           
 15731                           ;Dimmer_B1.c: 505: return Status;
 15732  27A0  0821               	movf	getDimmerLights_StatusFlag@Status,w
 15733  27A1  0008               	return
 15734  27A2                     __end_of_getDimmerLights_StatusFlag:	
 15735                           
 15736                           	psect	text93
 15737  18F6                     __ptext93:	
 15738 ;; *************** function _DimmerLights_Initialization *****************
 15739 ;; Defined at:
 15740 ;;		line 346 in file "../src/Dimmer_B1.c"
 15741 ;; Parameters:    Size  Location     Type
 15742 ;;		None
 15743 ;; Auto vars:     Size  Location     Type
 15744 ;;		None
 15745 ;; Return value:  Size  Location     Type
 15746 ;;		None               void
 15747 ;; Registers used:
 15748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15749 ;; Tracked objects:
 15750 ;;		On entry : 0/0
 15751 ;;		On exit  : 0/0
 15752 ;;		Unchanged: 0/0
 15753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15758 ;;Total ram usage:        1 bytes
 15759 ;; Hardware stack levels used:    1
 15760 ;; Hardware stack levels required when called:    7
 15761 ;; This function calls:
 15762 ;;		_Dimmer_Initialization
 15763 ;;		_setDimmerLights_Initialization
 15764 ;; This function is called by:
 15765 ;;		_main
 15766 ;; This function uses a non-reentrant model
 15767 ;;
 15768                           
 15769                           
 15770                           ;psect for function _DimmerLights_Initialization
 15771  18F6                     _DimmerLights_Initialization:	
 15772                           
 15773                           ;Dimmer_B1.c: 349: DimmerLights11 = &DimmerLights1;
 15774                           
 15775                           ;incstack = 0
 15776                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15777  18F6  3020               	movlw	_DimmerLights1& (0+255)
 15778  18F7  0020               	movlb	0	; select bank0
 15779  18F8  00A4               	movwf	??_DimmerLights_Initialization
 15780  18F9  0824               	movf	??_DimmerLights_Initialization,w
 15781  18FA  0021               	movlb	1	; select bank1
 15782  18FB  00BB               	movwf	_DimmerLights11^(0+128)
 15783                           
 15784                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(1);
 15785  18FC  3001               	movlw	1
 15786  18FD  319C  241F  3198   	fcall	_setDimmerLights_Initialization
 15787                           
 15788                           ;Dimmer_B1.c: 354: DimmerLights22 = &DimmerLights2;
 15789  1900  302F               	movlw	_DimmerLights2& (0+255)
 15790  1901  0020               	movlb	0	; select bank0
 15791  1902  00A4               	movwf	??_DimmerLights_Initialization
 15792  1903  0824               	movf	??_DimmerLights_Initialization,w
 15793  1904  0021               	movlb	1	; select bank1
 15794  1905  00BC               	movwf	_DimmerLights22^(0+128)
 15795                           
 15796                           ;Dimmer_B1.c: 355: setDimmerLights_Initialization(2);
 15797  1906  3002               	movlw	2
 15798  1907  319C  241F  3198   	fcall	_setDimmerLights_Initialization
 15799                           
 15800                           ;Dimmer_B1.c: 364: Dimmer_Initialization();
 15801  190A  31A5  2593         	fcall	_Dimmer_Initialization
 15802  190C  0008               	return
 15803  190D                     __end_of_DimmerLights_Initialization:	
 15804                           
 15805                           	psect	text94
 15806  1C1F                     __ptext94:	
 15807 ;; *************** function _setDimmerLights_Initialization *****************
 15808 ;; Defined at:
 15809 ;;		line 369 in file "../src/Dimmer_B1.c"
 15810 ;; Parameters:    Size  Location     Type
 15811 ;;  lights          1    wreg     unsigned char 
 15812 ;; Auto vars:     Size  Location     Type
 15813 ;;  lights          1    3[BANK0 ] unsigned char 
 15814 ;; Return value:  Size  Location     Type
 15815 ;;		None               void
 15816 ;; Registers used:
 15817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15818 ;; Tracked objects:
 15819 ;;		On entry : 0/0
 15820 ;;		On exit  : 0/0
 15821 ;;		Unchanged: 0/0
 15822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;Total ram usage:        2 bytes
 15828 ;; Hardware stack levels used:    1
 15829 ;; Hardware stack levels required when called:    6
 15830 ;; This function calls:
 15831 ;;		_DimmerLightsPointSelect
 15832 ;; This function is called by:
 15833 ;;		_DimmerLights_Initialization
 15834 ;; This function uses a non-reentrant model
 15835 ;;
 15836                           
 15837                           
 15838                           ;psect for function _setDimmerLights_Initialization
 15839  1C1F                     _setDimmerLights_Initialization:	
 15840                           
 15841                           ;incstack = 0
 15842                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15843                           ;setDimmerLights_Initialization@lights stored from wreg
 15844  1C1F  0020               	movlb	0	; select bank0
 15845  1C20  00A3               	movwf	setDimmerLights_Initialization@lights
 15846                           
 15847                           ;Dimmer_B1.c: 371: DimmerLightsPointSelect(lights);
 15848  1C21  0823               	movf	setDimmerLights_Initialization@lights,w
 15849  1C22  31A7  27C5         	fcall	_DimmerLightsPointSelect
 15850                           
 15851                           ;Dimmer_B1.c: 372: DimmerLights->Clear = 1;
 15852  1C24  0878               	movf	_DimmerLights,w
 15853  1C25  3E09               	addlw	9
 15854  1C26  0086               	movwf	6
 15855  1C27  3001               	movlw	1	; select bank2/3
 15856  1C28  0087               	movwf	7
 15857  1C29  1501               	bsf	1,2
 15858                           
 15859                           ;Dimmer_B1.c: 378: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 15860  1C2A  3020               	movlw	32
 15861  1C2B  0020               	movlb	0	; select bank0
 15862  1C2C  00A2               	movwf	??_setDimmerLights_Initialization
 15863  1C2D  0878               	movf	_DimmerLights,w
 15864  1C2E  3E05               	addlw	5
 15865  1C2F  0086               	movwf	6
 15866  1C30  3001               	movlw	1	; select bank2/3
 15867  1C31  0087               	movwf	7
 15868  1C32  0822               	movf	??_setDimmerLights_Initialization,w
 15869  1C33  0081               	movwf	1
 15870                           
 15871                           ;Dimmer_B1.c: 379: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 15872  1C34  303C               	movlw	60
 15873  1C35  00A2               	movwf	??_setDimmerLights_Initialization
 15874  1C36  0878               	movf	_DimmerLights,w
 15875  1C37  3E06               	addlw	6
 15876  1C38  0086               	movwf	6
 15877  1C39  3001               	movlw	1	; select bank2/3
 15878  1C3A  0087               	movwf	7
 15879  1C3B  0822               	movf	??_setDimmerLights_Initialization,w
 15880  1C3C  0081               	movwf	1
 15881                           
 15882                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 15883  1C3D  0878               	movf	_DimmerLights,w
 15884  1C3E  3E06               	addlw	6
 15885  1C3F  0086               	movwf	6
 15886  1C40  3001               	movlw	1	; select bank2/3
 15887  1C41  0087               	movwf	7
 15888  1C42  0801               	movf	1,w
 15889  1C43  00A2               	movwf	??_setDimmerLights_Initialization
 15890  1C44  0878               	movf	_DimmerLights,w
 15891  1C45  3E04               	addlw	4
 15892  1C46  0086               	movwf	6
 15893  1C47  3001               	movlw	1	; select bank2/3
 15894  1C48  0087               	movwf	7
 15895  1C49  0822               	movf	??_setDimmerLights_Initialization,w
 15896  1C4A  0081               	movwf	1
 15897  1C4B  0008               	return
 15898  1C4C                     __end_of_setDimmerLights_Initialization:	
 15899                           
 15900                           	psect	text95
 15901  2593                     __ptext95:	
 15902 ;; *************** function _Dimmer_Initialization *****************
 15903 ;; Defined at:
 15904 ;;		line 804 in file "../src/Dimmer_B1.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;		None
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;		None
 15909 ;; Return value:  Size  Location     Type
 15910 ;;		None               void
 15911 ;; Registers used:
 15912 ;;		wreg
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;Total ram usage:        1 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    5
 15925 ;; This function calls:
 15926 ;;		Nothing
 15927 ;; This function is called by:
 15928 ;;		_DimmerLights_Initialization
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           
 15933                           ;psect for function _Dimmer_Initialization
 15934  2593                     _Dimmer_Initialization:	
 15935                           
 15936                           ;Dimmer_B1.c: 806: Dimmer = &Dimmer1;
 15937                           
 15938                           ;incstack = 0
 15939                           ; Regs used in _Dimmer_Initialization: [wreg]
 15940  2593  30E4               	movlw	_Dimmer1& (0+255)
 15941  2594  0020               	movlb	0	; select bank0
 15942  2595  00A0               	movwf	??_Dimmer_Initialization
 15943  2596  0820               	movf	??_Dimmer_Initialization,w
 15944  2597  0021               	movlb	1	; select bank1
 15945  2598  00BA               	movwf	_Dimmer^(0+128)
 15946  2599  0008               	return
 15947  259A                     __end_of_Dimmer_Initialization:	
 15948                           
 15949                           	psect	text96
 15950  25B0                     __ptext96:	
 15951 ;; *************** function _DelayOff_Main *****************
 15952 ;; Defined at:
 15953 ;;		line 41 in file "../src/DelayOff_B1.c"
 15954 ;; Parameters:    Size  Location     Type
 15955 ;;		None
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;		None
 15958 ;; Return value:  Size  Location     Type
 15959 ;;		None               void
 15960 ;; Registers used:
 15961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15962 ;; Tracked objects:
 15963 ;;		On entry : 0/0
 15964 ;;		On exit  : 0/0
 15965 ;;		Unchanged: 0/0
 15966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;Total ram usage:        0 bytes
 15972 ;; Hardware stack levels used:    1
 15973 ;; Hardware stack levels required when called:   10
 15974 ;; This function calls:
 15975 ;;		_DlyOff_Main
 15976 ;; This function is called by:
 15977 ;;		_main
 15978 ;; This function uses a non-reentrant model
 15979 ;;
 15980                           
 15981                           
 15982                           ;psect for function _DelayOff_Main
 15983  25B0                     _DelayOff_Main:	
 15984                           
 15985                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15986                           
 15987                           ;incstack = 0
 15988                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15989  25B0  3001               	movlw	1
 15990  25B1  3196  2606  31A5   	fcall	_DlyOff_Main
 15991                           
 15992                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15993  25B4  3002               	movlw	2
 15994  25B5  3196  2606         	fcall	_DlyOff_Main
 15995  25B7  0008               	return
 15996  25B8                     __end_of_DelayOff_Main:	
 15997                           
 15998                           	psect	text97
 15999  1606                     __ptext97:	
 16000 ;; *************** function _DlyOff_Main *****************
 16001 ;; Defined at:
 16002 ;;		line 62 in file "../src/DelayOff_B1.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;  sw              1    wreg     unsigned char 
 16005 ;; Auto vars:     Size  Location     Type
 16006 ;;  sw              1   68[BANK0 ] unsigned char 
 16007 ;; Return value:  Size  Location     Type
 16008 ;;		None               void
 16009 ;; Registers used:
 16010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16011 ;; Tracked objects:
 16012 ;;		On entry : 0/0
 16013 ;;		On exit  : 0/0
 16014 ;;		Unchanged: 0/0
 16015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;Total ram usage:        3 bytes
 16021 ;; Hardware stack levels used:    1
 16022 ;; Hardware stack levels required when called:    9
 16023 ;; This function calls:
 16024 ;;		_DelayOffPointSelect
 16025 ;;		_setBuz
 16026 ;;		_setDimmerLights_Switch
 16027 ;;		_setDimmerLights_Trigger
 16028 ;;		_setRFSW_Status
 16029 ;;		_setRF_DimmerLights
 16030 ;;		_setSw_Status
 16031 ;;		_setTxData
 16032 ;; This function is called by:
 16033 ;;		_DelayOff_Main
 16034 ;; This function uses a non-reentrant model
 16035 ;;
 16036                           
 16037                           
 16038                           ;psect for function _DlyOff_Main
 16039  1606                     _DlyOff_Main:	
 16040                           
 16041                           ;incstack = 0
 16042                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16043                           ;DlyOff_Main@sw stored from wreg
 16044  1606  0020               	movlb	0	; select bank0
 16045  1607  00E4               	movwf	DlyOff_Main@sw
 16046                           
 16047                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16048  1608  0864               	movf	DlyOff_Main@sw,w
 16049  1609  3198  20DF  3196   	fcall	_DelayOffPointSelect
 16050                           
 16051                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 16052  160C  0021               	movlb	1	; select bank1
 16053  160D  0839               	movf	_DelayOff^(0+128),w
 16054  160E  0086               	movwf	6
 16055  160F  0187               	clrf	7
 16056  1610  1C81               	btfss	1,1
 16057  1611  0008               	return
 16058                           
 16059                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16060  1612  0839               	movf	_DelayOff^(0+128),w
 16061  1613  3E02               	addlw	2
 16062  1614  0086               	movwf	6
 16063  1615  0187               	clrf	7
 16064  1616  3001               	movlw	1
 16065  1617  0781               	addwf	1,f
 16066  1618  3141               	addfsr 1,1
 16067  1619  1803               	skipnc
 16068  161A  0A81               	incf	1,f
 16069                           
 16070                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 16071  161B  0839               	movf	_DelayOff^(0+128),w
 16072  161C  3E02               	addlw	2
 16073  161D  0086               	movwf	6
 16074  161E  0187               	clrf	7
 16075  161F  3F40               	moviw [0]fsr1
 16076  1620  0020               	movlb	0	; select bank0
 16077  1621  00E2               	movwf	??_DlyOff_Main
 16078  1622  3F41               	moviw [1]fsr1
 16079  1623  00E3               	movwf	??_DlyOff_Main+1
 16080  1624  3016               	movlw	22
 16081  1625  0263               	subwf	??_DlyOff_Main+1,w
 16082  1626  3012               	movlw	18
 16083  1627  1903               	skipnz
 16084  1628  0262               	subwf	??_DlyOff_Main,w
 16085  1629  1C03               	skipc
 16086  162A  0008               	return
 16087                           
 16088                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16089  162B  0021               	movlb	1	; select bank1
 16090  162C  0839               	movf	_DelayOff^(0+128),w
 16091  162D  3E02               	addlw	2
 16092  162E  0086               	movwf	6
 16093  162F  0187               	clrf	7
 16094  1630  3000               	movlw	0
 16095  1631  3FC0               	movwi [0]fsr1
 16096  1632  3FC1               	movwi [1]fsr1
 16097                           
 16098                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16099  1633  3001               	movlw	1
 16100  1634  0020               	movlb	0	; select bank0
 16101  1635  00E2               	movwf	??_DlyOff_Main
 16102  1636  0021               	movlb	1	; select bank1
 16103  1637  0839               	movf	_DelayOff^(0+128),w
 16104  1638  3E04               	addlw	4
 16105  1639  0086               	movwf	6
 16106  163A  0187               	clrf	7
 16107  163B  0020               	movlb	0	; select bank0
 16108  163C  0862               	movf	??_DlyOff_Main,w
 16109  163D  0781               	addwf	1,f
 16110                           
 16111                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 16112  163E  0021               	movlb	1	; select bank1
 16113  163F  0839               	movf	_DelayOff^(0+128),w
 16114  1640  3E04               	addlw	4
 16115  1641  0086               	movwf	6
 16116  1642  0187               	clrf	7
 16117  1643  0A39               	incf	_DelayOff^(0+128),w
 16118  1644  0084               	movwf	4
 16119  1645  0185               	clrf	5
 16120  1646  0800               	movf	0,w
 16121  1647  0201               	subwf	1,w
 16122  1648  1C03               	skipc
 16123  1649  0008               	return
 16124                           
 16125                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 16126  164A  0839               	movf	_DelayOff^(0+128),w
 16127  164B  3E04               	addlw	4
 16128  164C  0086               	movwf	6
 16129  164D  0187               	clrf	7
 16130  164E  0181               	clrf	1
 16131                           
 16132                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 16133  164F  0839               	movf	_DelayOff^(0+128),w
 16134  1650  0086               	movwf	6
 16135  1651  0187               	clrf	7
 16136  1652  1081               	bcf	1,1
 16137                           
 16138                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 16139  1653  0020               	movlb	0	; select bank0
 16140  1654  01A2               	clrf	setSw_Status@command
 16141  1655  0864               	movf	DlyOff_Main@sw,w
 16142  1656  31A6  26D0  3196   	fcall	_setSw_Status
 16143                           
 16144                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 16145  1659  0020               	movlb	0	; select bank0
 16146  165A  01A2               	clrf	setRFSW_Status@command
 16147  165B  0864               	movf	DlyOff_Main@sw,w
 16148  165C  31A6  26C1  3196   	fcall	_setRFSW_Status
 16149                           
 16150                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 16151  165F  0020               	movlb	0	; select bank0
 16152  1660  01DD               	clrf	setRF_DimmerLights@on
 16153  1661  0864               	movf	DlyOff_Main@sw,w
 16154  1662  3194  2449  3196   	fcall	_setRF_DimmerLights
 16155                           
 16156                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 16157  1665  0020               	movlb	0	; select bank0
 16158  1666  01A2               	clrf	setDimmerLights_Trigger@command
 16159  1667  0AA2               	incf	setDimmerLights_Trigger@command,f
 16160  1668  0864               	movf	DlyOff_Main@sw,w
 16161  1669  31A7  270E  3196   	fcall	_setDimmerLights_Trigger
 16162                           
 16163                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 16164  166C  0020               	movlb	0	; select bank0
 16165  166D  01A2               	clrf	setDimmerLights_Switch@command
 16166  166E  0864               	movf	DlyOff_Main@sw,w
 16167  166F  31A6  26FE  3196   	fcall	_setDimmerLights_Switch
 16168                           
 16169                           ;DelayOff_B1.c: 77: setTxData(1);
 16170  1672  3001               	movlw	1
 16171  1673  318B  2343  3196   	fcall	_setTxData
 16172                           
 16173                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 16174  1676  3064               	movlw	100
 16175  1677  0020               	movlb	0	; select bank0
 16176  1678  00A9               	movwf	setBuz@time
 16177  1679  3000               	movlw	0
 16178  167A  00AA               	movwf	setBuz@time+1
 16179  167B  3001               	movlw	1
 16180  167C  3188  2079         	fcall	_setBuz
 16181  167E  0008               	return
 16182  167F                     __end_of_DlyOff_Main:	
 16183                           
 16184                           	psect	text98
 16185  0B43                     __ptext98:	
 16186 ;; *************** function _setTxData *****************
 16187 ;; Defined at:
 16188 ;;		line 156 in file "../src/RF_Control_B1.c"
 16189 ;; Parameters:    Size  Location     Type
 16190 ;;  rf              1    wreg     unsigned char 
 16191 ;; Auto vars:     Size  Location     Type
 16192 ;;  rf              1    3[BANK0 ] unsigned char 
 16193 ;;  i               1    0        unsigned char 
 16194 ;; Return value:  Size  Location     Type
 16195 ;;		None               void
 16196 ;; Registers used:
 16197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16198 ;; Tracked objects:
 16199 ;;		On entry : 0/0
 16200 ;;		On exit  : 0/0
 16201 ;;		Unchanged: 0/0
 16202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;Total ram usage:        2 bytes
 16208 ;; Hardware stack levels used:    1
 16209 ;; Hardware stack levels required when called:    6
 16210 ;; This function calls:
 16211 ;;		_RfPointSelect
 16212 ;; This function is called by:
 16213 ;;		_DlyOff_Main
 16214 ;;		_setDimmerLights_Adj
 16215 ;;		_setControl_Lights_Table
 16216 ;;		_setRFSW_Control
 16217 ;;		_setRFSW_AdjControl
 16218 ;;		_Sw_DimmerOnFunc
 16219 ;;		_Sw_DimmerOffFunc
 16220 ;; This function uses a non-reentrant model
 16221 ;;
 16222                           
 16223                           
 16224                           ;psect for function _setTxData
 16225  0B43                     _setTxData:	
 16226                           
 16227                           ;incstack = 0
 16228                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16229                           ;setTxData@rf stored from wreg
 16230  0B43  0020               	movlb	0	; select bank0
 16231  0B44  00A3               	movwf	setTxData@rf
 16232                           
 16233                           ;RF_Control_B1.c: 157: char i;
 16234                           ;RF_Control_B1.c: 158: RfPointSelect(rf);
 16235  0B45  0823               	movf	setTxData@rf,w
 16236  0B46  31A6  26DF  318B   	fcall	_RfPointSelect
 16237                           
 16238                           ;RF_Control_B1.c: 159: if (RF->Enable == 1) {
 16239  0B49  0021               	movlb	1	; select bank1
 16240  0B4A  083F               	movf	_RF^(0+128),w
 16241  0B4B  0086               	movwf	6
 16242  0B4C  0187               	clrf	7
 16243  0B4D  1C01               	btfss	1,0
 16244  0B4E  0008               	return
 16245                           
 16246                           ;RF_Control_B1.c: 161: RF->TransceiveGO = 1;
 16247  0B4F  083F               	movf	_RF^(0+128),w
 16248  0B50  0086               	movwf	6
 16249  0B51  0187               	clrf	7
 16250  0B52  1501               	bsf	1,2
 16251                           
 16252                           ;RF_Control_B1.c: 171: RF_Data[0] = 0x63;
 16253  0B53  3063               	movlw	99
 16254  0B54  0020               	movlb	0	; select bank0
 16255  0B55  00A2               	movwf	??_setTxData
 16256  0B56  0822               	movf	??_setTxData,w
 16257  0B57  0021               	movlb	1	; select bank1
 16258  0B58  00A0               	movwf	_RF_Data^(0+128)
 16259                           
 16260                           ;RF_Control_B1.c: 172: RF_Data[1] = 0x02;
 16261  0B59  3002               	movlw	2
 16262  0B5A  0020               	movlb	0	; select bank0
 16263  0B5B  00A2               	movwf	??_setTxData
 16264  0B5C  0822               	movf	??_setTxData,w
 16265  0B5D  0021               	movlb	1	; select bank1
 16266  0B5E  00A1               	movwf	(_RF_Data^(0+128)+1)
 16267                           
 16268                           ;RF_Control_B1.c: 173: RF_Data[2] = product->Data[2];
 16269  0B5F  087D               	movf	_product,w
 16270  0B60  0086               	movwf	6
 16271  0B61  3001               	movlw	1	; select bank2/3
 16272  0B62  0087               	movwf	7
 16273  0B63  3001               	movlw	1	; select bank2/3
 16274  0B64  3F42               	moviw [2]fsr1
 16275  0B65  00A2               	movwf	(_RF_Data^(0+128)+2)
 16276                           
 16277                           ;RF_Control_B1.c: 174: RF_Data[3] = product->Data[3];
 16278  0B66  087D               	movf	_product,w
 16279  0B67  0086               	movwf	6
 16280  0B68  3001               	movlw	1	; select bank2/3
 16281  0B69  0087               	movwf	7
 16282  0B6A  3001               	movlw	1	; select bank2/3
 16283  0B6B  3F43               	moviw [3]fsr1
 16284  0B6C  00A3               	movwf	(_RF_Data^(0+128)+3)
 16285                           
 16286                           ;RF_Control_B1.c: 175: RF_Data[4] = product->Data[4];
 16287  0B6D  087D               	movf	_product,w
 16288  0B6E  0086               	movwf	6
 16289  0B6F  3001               	movlw	1	; select bank2/3
 16290  0B70  0087               	movwf	7
 16291  0B71  3001               	movlw	1	; select bank2/3
 16292  0B72  3F44               	moviw [4]fsr1
 16293  0B73  00A4               	movwf	(_RF_Data^(0+128)+4)
 16294                           
 16295                           ;RF_Control_B1.c: 176: RF_Data[5] = product->Data[5];
 16296  0B74  087D               	movf	_product,w
 16297  0B75  0086               	movwf	6
 16298  0B76  3001               	movlw	1	; select bank2/3
 16299  0B77  0087               	movwf	7
 16300  0B78  3001               	movlw	1	; select bank2/3
 16301  0B79  3F45               	moviw [5]fsr1
 16302  0B7A  00A5               	movwf	(_RF_Data^(0+128)+5)
 16303                           
 16304                           ;RF_Control_B1.c: 177: RF_Data[6] = product->Data[6];
 16305  0B7B  087D               	movf	_product,w
 16306  0B7C  0086               	movwf	6
 16307  0B7D  3001               	movlw	1	; select bank2/3
 16308  0B7E  0087               	movwf	7
 16309  0B7F  3001               	movlw	1	; select bank2/3
 16310  0B80  3F46               	moviw [6]fsr1
 16311  0B81  00A6               	movwf	(_RF_Data^(0+128)+6)
 16312                           
 16313                           ;RF_Control_B1.c: 178: RF_Data[7] = product->Data[7];
 16314  0B82  087D               	movf	_product,w
 16315  0B83  0086               	movwf	6
 16316  0B84  3001               	movlw	1	; select bank2/3
 16317  0B85  0087               	movwf	7
 16318  0B86  3001               	movlw	1	; select bank2/3
 16319  0B87  3F47               	moviw [7]fsr1
 16320  0B88  00A7               	movwf	(_RF_Data^(0+128)+7)
 16321                           
 16322                           ;RF_Control_B1.c: 179: RF_Data[8] = product->Data[8];
 16323  0B89  087D               	movf	_product,w
 16324  0B8A  0086               	movwf	6
 16325  0B8B  3001               	movlw	1	; select bank2/3
 16326  0B8C  0087               	movwf	7
 16327  0B8D  3001               	movlw	1	; select bank2/3
 16328  0B8E  3F48               	moviw [8]fsr1
 16329  0B8F  00A8               	movwf	(_RF_Data^(0+128)+8)
 16330                           
 16331                           ;RF_Control_B1.c: 180: RF_Data[9] = product->Data[9];
 16332  0B90  087D               	movf	_product,w
 16333  0B91  0086               	movwf	6
 16334  0B92  3001               	movlw	1	; select bank2/3
 16335  0B93  0087               	movwf	7
 16336  0B94  3001               	movlw	1	; select bank2/3
 16337  0B95  3F49               	moviw [9]fsr1
 16338  0B96  00A9               	movwf	(_RF_Data^(0+128)+9)
 16339                           
 16340                           ;RF_Control_B1.c: 181: RF_Data[10] = product->Data[10];
 16341  0B97  087D               	movf	_product,w
 16342  0B98  0086               	movwf	6
 16343  0B99  3001               	movlw	1	; select bank2/3
 16344  0B9A  0087               	movwf	7
 16345  0B9B  3001               	movlw	1	; select bank2/3
 16346  0B9C  3F4A               	moviw [10]fsr1
 16347  0B9D  00AA               	movwf	(_RF_Data^(0+128)+10)
 16348                           
 16349                           ;RF_Control_B1.c: 182: RF_Data[11] = product->Data[11];
 16350  0B9E  087D               	movf	_product,w
 16351  0B9F  0086               	movwf	6
 16352  0BA0  3001               	movlw	1	; select bank2/3
 16353  0BA1  0087               	movwf	7
 16354  0BA2  3001               	movlw	1	; select bank2/3
 16355  0BA3  3F4B               	moviw [11]fsr1
 16356  0BA4  00AB               	movwf	(_RF_Data^(0+128)+11)
 16357                           
 16358                           ;RF_Control_B1.c: 183: RF_Data[12] = product->Data[12];
 16359  0BA5  087D               	movf	_product,w
 16360  0BA6  0086               	movwf	6
 16361  0BA7  3001               	movlw	1	; select bank2/3
 16362  0BA8  0087               	movwf	7
 16363  0BA9  3001               	movlw	1	; select bank2/3
 16364  0BAA  3F4C               	moviw [12]fsr1
 16365  0BAB  00AC               	movwf	(_RF_Data^(0+128)+12)
 16366                           
 16367                           ;RF_Control_B1.c: 184: RF_Data[13] = product->Data[13];
 16368  0BAC  087D               	movf	_product,w
 16369  0BAD  0086               	movwf	6
 16370  0BAE  3001               	movlw	1	; select bank2/3
 16371  0BAF  0087               	movwf	7
 16372  0BB0  3001               	movlw	1	; select bank2/3
 16373  0BB1  3F4D               	moviw [13]fsr1
 16374  0BB2  00AD               	movwf	(_RF_Data^(0+128)+13)
 16375                           
 16376                           ;RF_Control_B1.c: 185: RF_Data[14] = product->Data[14];
 16377  0BB3  087D               	movf	_product,w
 16378  0BB4  0086               	movwf	6
 16379  0BB5  3001               	movlw	1	; select bank2/3
 16380  0BB6  0087               	movwf	7
 16381  0BB7  3001               	movlw	1	; select bank2/3
 16382  0BB8  3F4E               	moviw [14]fsr1
 16383  0BB9  00AE               	movwf	(_RF_Data^(0+128)+14)
 16384                           
 16385                           ;RF_Control_B1.c: 186: RF_Data[15] = product->Data[15];
 16386  0BBA  087D               	movf	_product,w
 16387  0BBB  0086               	movwf	6
 16388  0BBC  3001               	movlw	1	; select bank2/3
 16389  0BBD  0087               	movwf	7
 16390  0BBE  3001               	movlw	1	; select bank2/3
 16391  0BBF  3F4F               	moviw [15]fsr1
 16392  0BC0  00AF               	movwf	(_RF_Data^(0+128)+15)
 16393                           
 16394                           ;RF_Control_B1.c: 187: RF_Data[16] = product->Data[16];
 16395  0BC1  087D               	movf	_product,w
 16396  0BC2  0086               	movwf	6
 16397  0BC3  3001               	movlw	1	; select bank2/3
 16398  0BC4  0087               	movwf	7
 16399  0BC5  3001               	movlw	1	; select bank2/3
 16400  0BC6  3F50               	moviw [16]fsr1
 16401  0BC7  00B0               	movwf	(_RF_Data^(0+128)+16)
 16402                           
 16403                           ;RF_Control_B1.c: 188: RF_Data[17] = product->Data[17];
 16404  0BC8  087D               	movf	_product,w
 16405  0BC9  0086               	movwf	6
 16406  0BCA  3001               	movlw	1	; select bank2/3
 16407  0BCB  0087               	movwf	7
 16408  0BCC  3001               	movlw	1	; select bank2/3
 16409  0BCD  3F51               	moviw [17]fsr1
 16410  0BCE  00B1               	movwf	(_RF_Data^(0+128)+17)
 16411                           
 16412                           ;RF_Control_B1.c: 189: RF_Data[18] = product->Data[18];
 16413  0BCF  087D               	movf	_product,w
 16414  0BD0  0086               	movwf	6
 16415  0BD1  3001               	movlw	1	; select bank2/3
 16416  0BD2  0087               	movwf	7
 16417  0BD3  3001               	movlw	1	; select bank2/3
 16418  0BD4  3F52               	moviw [18]fsr1
 16419  0BD5  00B2               	movwf	(_RF_Data^(0+128)+18)
 16420                           
 16421                           ;RF_Control_B1.c: 190: RF_Data[19] = product->Data[19];
 16422  0BD6  087D               	movf	_product,w
 16423  0BD7  0086               	movwf	6
 16424  0BD8  3001               	movlw	1	; select bank2/3
 16425  0BD9  0087               	movwf	7
 16426  0BDA  3001               	movlw	1	; select bank2/3
 16427  0BDB  3F53               	moviw [19]fsr1
 16428  0BDC  00B3               	movwf	(_RF_Data^(0+128)+19)
 16429                           
 16430                           ;RF_Control_B1.c: 191: RF_Data[20] = 210;
 16431  0BDD  30D2               	movlw	210
 16432  0BDE  0020               	movlb	0	; select bank0
 16433  0BDF  00A2               	movwf	??_setTxData
 16434  0BE0  0822               	movf	??_setTxData,w
 16435  0BE1  0021               	movlb	1	; select bank1
 16436  0BE2  00B4               	movwf	(_RF_Data^(0+128)+20)
 16437  0BE3  0008               	return
 16438  0BE4                     __end_of_setTxData:	
 16439                           
 16440                           	psect	text99
 16441  26DF                     __ptext99:	
 16442 ;; *************** function _RfPointSelect *****************
 16443 ;; Defined at:
 16444 ;;		line 7 in file "../src/RF_Control_B1.c"
 16445 ;; Parameters:    Size  Location     Type
 16446 ;;  rf              1    wreg     unsigned char 
 16447 ;; Auto vars:     Size  Location     Type
 16448 ;;  rf              1    1[BANK0 ] unsigned char 
 16449 ;; Return value:  Size  Location     Type
 16450 ;;		None               void
 16451 ;; Registers used:
 16452 ;;		wreg
 16453 ;; Tracked objects:
 16454 ;;		On entry : 0/0
 16455 ;;		On exit  : 0/0
 16456 ;;		Unchanged: 0/0
 16457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;Total ram usage:        2 bytes
 16463 ;; Hardware stack levels used:    1
 16464 ;; Hardware stack levels required when called:    5
 16465 ;; This function calls:
 16466 ;;		Nothing
 16467 ;; This function is called by:
 16468 ;;		_setRF_Learn
 16469 ;;		_setRF_Main
 16470 ;;		_setTxData
 16471 ;;		_setRF_Enable
 16472 ;;		_RF_RxDisable
 16473 ;;		_getRxData
 16474 ;;		_setLog_Code
 16475 ;;		_setControl_Lights_Table
 16476 ;; This function uses a non-reentrant model
 16477 ;;
 16478                           
 16479                           
 16480                           ;psect for function _RfPointSelect
 16481  26DF                     _RfPointSelect:	
 16482                           
 16483                           ;incstack = 0
 16484                           ; Regs used in _RfPointSelect: [wreg]
 16485                           ;RfPointSelect@rf stored from wreg
 16486  26DF  0020               	movlb	0	; select bank0
 16487  26E0  00A1               	movwf	RfPointSelect@rf
 16488                           
 16489                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16490  26E1  0821               	movf	RfPointSelect@rf,w
 16491  26E2  3A01               	xorlw	1
 16492  26E3  1D03               	skipz
 16493  26E4  2EEA               	goto	l6263
 16494                           
 16495                           ;RF_Control_B1.c: 10: RF = &RF1;
 16496  26E5  30D3               	movlw	_RF1& (0+255)
 16497  26E6  00A0               	movwf	??_RfPointSelect
 16498  26E7  0820               	movf	??_RfPointSelect,w
 16499  26E8  0021               	movlb	1	; select bank1
 16500  26E9  00BF               	movwf	_RF^(0+128)
 16501  26EA                     l6263:	
 16502                           
 16503                           ;RF_Control_B1.c: 11: }
 16504                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 16505  26EA  1A0B               	btfsc	11,4	;volatile
 16506  26EB  0008               	return
 16507                           
 16508                           ;RF_Control_B1.c: 13: INTE = 1;
 16509  26EC  160B               	bsf	11,4	;volatile
 16510  26ED  0008               	return
 16511  26EE                     __end_of_RfPointSelect:	
 16512                           
 16513                           	psect	text100
 16514  26D0                     __ptext100:	
 16515 ;; *************** function _setSw_Status *****************
 16516 ;; Defined at:
 16517 ;;		line 105 in file "../src/Switch_B1.c"
 16518 ;; Parameters:    Size  Location     Type
 16519 ;;  sw              1    wreg     unsigned char 
 16520 ;;  command         1    2[BANK0 ] unsigned char 
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;  sw              1    3[BANK0 ] unsigned char 
 16523 ;; Return value:  Size  Location     Type
 16524 ;;		None               void
 16525 ;; Registers used:
 16526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16532 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;Total ram usage:        2 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    6
 16539 ;; This function calls:
 16540 ;;		_SwPointSelect
 16541 ;; This function is called by:
 16542 ;;		_DlyOff_Main
 16543 ;;		_setDimmerLights_ERROR
 16544 ;;		_setControl_Lights_Table
 16545 ;;		_setRFSW_Control
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           
 16550                           ;psect for function _setSw_Status
 16551  26D0                     _setSw_Status:	
 16552                           
 16553                           ;incstack = 0
 16554                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16555                           ;setSw_Status@sw stored from wreg
 16556  26D0  0020               	movlb	0	; select bank0
 16557  26D1  00A3               	movwf	setSw_Status@sw
 16558                           
 16559                           ;Switch_B1.c: 106: SwPointSelect(sw);
 16560  26D2  0823               	movf	setSw_Status@sw,w
 16561  26D3  31A7  27EC         	fcall	_SwPointSelect
 16562                           
 16563                           ;Switch_B1.c: 107: Sw->Status = command;
 16564  26D5  087A               	movf	_Sw,w
 16565  26D6  0086               	movwf	6
 16566  26D7  3001               	movlw	1	; select bank2/3
 16567  26D8  0087               	movwf	7
 16568  26D9  0020               	movlb	0	; select bank0
 16569  26DA  0822               	movf	setSw_Status@command,w
 16570  26DB  1301               	bcf	1,6
 16571  26DC  1D03               	skipz
 16572  26DD  1701               	bsf	1,6
 16573  26DE  0008               	return
 16574  26DF                     __end_of_setSw_Status:	
 16575                           
 16576                           	psect	text101
 16577  27EC                     __ptext101:	
 16578 ;; *************** function _SwPointSelect *****************
 16579 ;; Defined at:
 16580 ;;		line 17 in file "../src/Switch_B1.c"
 16581 ;; Parameters:    Size  Location     Type
 16582 ;;  sw              1    wreg     unsigned char 
 16583 ;; Auto vars:     Size  Location     Type
 16584 ;;  sw              1    1[BANK0 ] unsigned char 
 16585 ;; Return value:  Size  Location     Type
 16586 ;;		None               void
 16587 ;; Registers used:
 16588 ;;		wreg
 16589 ;; Tracked objects:
 16590 ;;		On entry : 0/0
 16591 ;;		On exit  : 0/0
 16592 ;;		Unchanged: 0/0
 16593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;Total ram usage:        2 bytes
 16599 ;; Hardware stack levels used:    1
 16600 ;; Hardware stack levels required when called:    5
 16601 ;; This function calls:
 16602 ;;		Nothing
 16603 ;; This function is called by:
 16604 ;;		_setSw_Enable
 16605 ;;		_setSw_Status
 16606 ;;		_setSw_Main
 16607 ;;		_Sw_Detect
 16608 ;; This function uses a non-reentrant model
 16609 ;;
 16610                           
 16611                           
 16612                           ;psect for function _SwPointSelect
 16613  27EC                     _SwPointSelect:	
 16614                           
 16615                           ;incstack = 0
 16616                           ; Regs used in _SwPointSelect: [wreg]
 16617                           ;SwPointSelect@sw stored from wreg
 16618  27EC  0020               	movlb	0	; select bank0
 16619  27ED  00A1               	movwf	SwPointSelect@sw
 16620                           
 16621                           ;Switch_B1.c: 20: if (sw == 1) {
 16622  27EE  0821               	movf	SwPointSelect@sw,w
 16623  27EF  3A01               	xorlw	1
 16624  27F0  1D03               	skipz
 16625  27F1  2FF7               	goto	l6277
 16626                           
 16627                           ;Switch_B1.c: 21: Sw = &Sw1;
 16628  27F2  304A               	movlw	_Sw1& (0+255)
 16629  27F3  00A0               	movwf	??_SwPointSelect
 16630  27F4  0820               	movf	??_SwPointSelect,w
 16631  27F5  00FA               	movwf	_Sw
 16632                           
 16633                           ;Switch_B1.c: 22: }
 16634  27F6  0008               	return
 16635  27F7                     l6277:	
 16636                           
 16637                           ;Switch_B1.c: 25: else if (sw == 2) {
 16638  27F7  0821               	movf	SwPointSelect@sw,w
 16639  27F8  3A02               	xorlw	2
 16640  27F9  1D03               	skipz
 16641  27FA  0008               	return
 16642                           
 16643                           ;Switch_B1.c: 26: Sw = &Sw2;
 16644  27FB  3053               	movlw	_Sw2& (0+255)
 16645  27FC  00A0               	movwf	??_SwPointSelect
 16646  27FD  0820               	movf	??_SwPointSelect,w
 16647  27FE  00FA               	movwf	_Sw
 16648  27FF  0008               	return
 16649  2800                     __end_of_SwPointSelect:	
 16650                           
 16651                           	psect	text102
 16652  1449                     __ptext102:	
 16653 ;; *************** function _setRF_DimmerLights *****************
 16654 ;; Defined at:
 16655 ;;		line 418 in file "../src/RF_Control_B1.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  lights          1    wreg     unsigned char 
 16658 ;;  on              1   61[BANK0 ] unsigned char 
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;  lights          1   65[BANK0 ] unsigned char 
 16661 ;;  status          1   64[BANK0 ] unsigned char 
 16662 ;; Return value:  Size  Location     Type
 16663 ;;		None               void
 16664 ;; Registers used:
 16665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16666 ;; Tracked objects:
 16667 ;;		On entry : 0/0
 16668 ;;		On exit  : 0/0
 16669 ;;		Unchanged: 0/0
 16670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16671 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16675 ;;Total ram usage:        5 bytes
 16676 ;; Hardware stack levels used:    1
 16677 ;; Hardware stack levels required when called:    8
 16678 ;; This function calls:
 16679 ;;		_setPercentValue
 16680 ;; This function is called by:
 16681 ;;		_DlyOff_Main
 16682 ;;		_setDimmerLights_Adj
 16683 ;;		_setRFSW_Control
 16684 ;;		_Sw_DimmerOnFunc
 16685 ;;		_Sw_DimmerOffFunc
 16686 ;; This function uses a non-reentrant model
 16687 ;;
 16688                           
 16689                           
 16690                           ;psect for function _setRF_DimmerLights
 16691  1449                     _setRF_DimmerLights:	
 16692                           
 16693                           ;incstack = 0
 16694                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16695                           ;setRF_DimmerLights@lights stored from wreg
 16696  1449  0020               	movlb	0	; select bank0
 16697  144A  00E1               	movwf	setRF_DimmerLights@lights
 16698                           
 16699                           ;RF_Control_B1.c: 419: char status;
 16700                           ;RF_Control_B1.c: 420: status = 1;
 16701  144B  01E0               	clrf	setRF_DimmerLights@status
 16702  144C  0AE0               	incf	setRF_DimmerLights@status,f
 16703                           
 16704                           ;RF_Control_B1.c: 421: status <<= (lights - 1);
 16705  144D  0861               	movf	setRF_DimmerLights@lights,w
 16706  144E  3EFF               	addlw	-1
 16707  144F  0A89               	incf	9,f
 16708  1450  2C53               	goto	u4890
 16709  1451                     u4895:	
 16710  1451  1003               	clrc
 16711  1452  0DE0               	rlf	setRF_DimmerLights@status,f
 16712  1453                     u4890:	
 16713  1453  3EFF               	addlw	-1
 16714  1454  1D03               	skipz
 16715  1455  2C51               	goto	u4895
 16716                           
 16717                           ;RF_Control_B1.c: 422: product->Data[11]=lights;
 16718  1456  0861               	movf	setRF_DimmerLights@lights,w
 16719  1457  00DE               	movwf	??_setRF_DimmerLights
 16720  1458  087D               	movf	_product,w
 16721  1459  3E0B               	addlw	11
 16722  145A  0086               	movwf	6
 16723  145B  3001               	movlw	1	; select bank2/3
 16724  145C  0087               	movwf	7
 16725  145D  085E               	movf	??_setRF_DimmerLights,w
 16726  145E  0081               	movwf	1
 16727                           
 16728                           ;RF_Control_B1.c: 425: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 16729  145F  3020               	movlw	32
 16730  1460  319F  2774  3194   	fcall	_setPercentValue
 16731  1463  0020               	movlb	0	; select bank0
 16732  1464  00DE               	movwf	??_setRF_DimmerLights
 16733  1465  0861               	movf	setRF_DimmerLights@lights,w
 16734  1466  3E14               	addlw	20
 16735  1467  077D               	addwf	_product,w
 16736  1468  00DF               	movwf	??_setRF_DimmerLights+1
 16737  1469  085F               	movf	??_setRF_DimmerLights+1,w
 16738  146A  0086               	movwf	6
 16739  146B  3001               	movlw	1	; select bank2/3
 16740  146C  0087               	movwf	7
 16741  146D  085E               	movf	??_setRF_DimmerLights,w
 16742  146E  0081               	movwf	1
 16743                           
 16744                           ;RF_Control_B1.c: 428: product->Data[9]=product->Data[20 + lights];
 16745  146F  0861               	movf	setRF_DimmerLights@lights,w
 16746  1470  3E14               	addlw	20
 16747  1471  077D               	addwf	_product,w
 16748  1472  00DE               	movwf	??_setRF_DimmerLights
 16749  1473  085E               	movf	??_setRF_DimmerLights,w
 16750  1474  0086               	movwf	6
 16751  1475  3001               	movlw	1	; select bank2/3
 16752  1476  0087               	movwf	7
 16753  1477  0801               	movf	1,w
 16754  1478  00DF               	movwf	??_setRF_DimmerLights+1
 16755  1479  087D               	movf	_product,w
 16756  147A  3E09               	addlw	9
 16757  147B  0086               	movwf	6
 16758  147C  3001               	movlw	1	; select bank2/3
 16759  147D  0087               	movwf	7
 16760  147E  085F               	movf	??_setRF_DimmerLights+1,w
 16761  147F  0081               	movwf	1
 16762                           
 16763                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + lights];
 16764  1480  0861               	movf	setRF_DimmerLights@lights,w
 16765  1481  3E1A               	addlw	26
 16766  1482  077D               	addwf	_product,w
 16767  1483  00DE               	movwf	??_setRF_DimmerLights
 16768  1484  085E               	movf	??_setRF_DimmerLights,w
 16769  1485  0086               	movwf	6
 16770  1486  3001               	movlw	1	; select bank2/3
 16771  1487  0087               	movwf	7
 16772  1488  0801               	movf	1,w
 16773  1489  00DF               	movwf	??_setRF_DimmerLights+1
 16774  148A  087D               	movf	_product,w
 16775  148B  3E11               	addlw	17
 16776  148C  0086               	movwf	6
 16777  148D  3001               	movlw	1	; select bank2/3
 16778  148E  0087               	movwf	7
 16779  148F  085F               	movf	??_setRF_DimmerLights+1,w
 16780  1490  0081               	movwf	1
 16781                           
 16782                           ;RF_Control_B1.c: 430: if (on == 1) {
 16783  1491  085D               	movf	setRF_DimmerLights@on,w
 16784  1492  3A01               	xorlw	1
 16785  1493  1D03               	skipz
 16786  1494  2CA5               	goto	l6367
 16787                           
 16788                           ;RF_Control_B1.c: 431: product->Data[15]=(product->Data[15] | status);
 16789  1495  087D               	movf	_product,w
 16790  1496  3E0F               	addlw	15
 16791  1497  0086               	movwf	6
 16792  1498  3001               	movlw	1	; select bank2/3
 16793  1499  0087               	movwf	7
 16794  149A  0801               	movf	1,w
 16795  149B  0460               	iorwf	setRF_DimmerLights@status,w
 16796  149C  00DE               	movwf	??_setRF_DimmerLights
 16797  149D  087D               	movf	_product,w
 16798  149E  3E0F               	addlw	15
 16799  149F  0086               	movwf	6
 16800  14A0  3001               	movlw	1	; select bank2/3
 16801  14A1  0087               	movwf	7
 16802  14A2  085E               	movf	??_setRF_DimmerLights,w
 16803  14A3  0081               	movwf	1
 16804                           
 16805                           ;RF_Control_B1.c: 432: } else {
 16806  14A4  0008               	return
 16807  14A5                     l6367:	
 16808                           
 16809                           ;RF_Control_B1.c: 433: product->Data[15]=(product->Data[15]&(~status));
 16810  14A5  087D               	movf	_product,w
 16811  14A6  3E0F               	addlw	15
 16812  14A7  0086               	movwf	6
 16813  14A8  3001               	movlw	1	; select bank2/3
 16814  14A9  0087               	movwf	7
 16815  14AA  0960               	comf	setRF_DimmerLights@status,w
 16816  14AB  0501               	andwf	1,w
 16817  14AC  00DE               	movwf	??_setRF_DimmerLights
 16818  14AD  087D               	movf	_product,w
 16819  14AE  3E0F               	addlw	15
 16820  14AF  0086               	movwf	6
 16821  14B0  3001               	movlw	1	; select bank2/3
 16822  14B1  0087               	movwf	7
 16823  14B2  085E               	movf	??_setRF_DimmerLights,w
 16824  14B3  0081               	movwf	1
 16825  14B4  0008               	return
 16826  14B5                     __end_of_setRF_DimmerLights:	
 16827                           
 16828                           	psect	text103
 16829  1F74                     __ptext103:	
 16830 ;; *************** function _setPercentValue *****************
 16831 ;; Defined at:
 16832 ;;		line 786 in file "../src/Dimmer_B1.c"
 16833 ;; Parameters:    Size  Location     Type
 16834 ;;  value           1    wreg     unsigned char 
 16835 ;; Auto vars:     Size  Location     Type
 16836 ;;  value           1   57[BANK0 ] unsigned char 
 16837 ;;  i               3   58[BANK0 ] float 
 16838 ;; Return value:  Size  Location     Type
 16839 ;;                  1    wreg      unsigned char 
 16840 ;; Registers used:
 16841 ;;		wreg, status,2, status,0, pclath, cstack
 16842 ;; Tracked objects:
 16843 ;;		On entry : 0/0
 16844 ;;		On exit  : 0/0
 16845 ;;		Unchanged: 0/0
 16846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;Total ram usage:        4 bytes
 16852 ;; Hardware stack levels used:    1
 16853 ;; Hardware stack levels required when called:    7
 16854 ;; This function calls:
 16855 ;;		___awtoft
 16856 ;;		___ftdiv
 16857 ;;		___fttol
 16858 ;; This function is called by:
 16859 ;;		_Flash_Memory_Initialization
 16860 ;;		_setRF_DimmerLights
 16861 ;; This function uses a non-reentrant model
 16862 ;;
 16863                           
 16864                           
 16865                           ;psect for function _setPercentValue
 16866  1F74                     _setPercentValue:	
 16867                           
 16868                           ;incstack = 0
 16869                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 16870                           ;setPercentValue@value stored from wreg
 16871  1F74  0020               	movlb	0	; select bank0
 16872  1F75  00D9               	movwf	setPercentValue@value
 16873                           
 16874                           ;Dimmer_B1.c: 788: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 16875  1F76  3000               	movlw	0
 16876  1F77  00DA               	movwf	setPercentValue@i
 16877  1F78  30E0               	movlw	224
 16878  1F79  00DB               	movwf	setPercentValue@i+1
 16879  1F7A  3041               	movlw	65
 16880  1F7B  00DC               	movwf	setPercentValue@i+2
 16881                           
 16882                           ;Dimmer_B1.c: 789: i /= 100;
 16883  1F7C  3000               	movlw	0
 16884  1F7D  00AE               	movwf	___ftdiv@f2
 16885  1F7E  30C8               	movlw	200
 16886  1F7F  00AF               	movwf	___ftdiv@f2+1
 16887  1F80  3042               	movlw	66
 16888  1F81  00B0               	movwf	___ftdiv@f2+2
 16889  1F82  085A               	movf	setPercentValue@i,w
 16890  1F83  00B1               	movwf	___ftdiv@f1
 16891  1F84  085B               	movf	setPercentValue@i+1,w
 16892  1F85  00B2               	movwf	___ftdiv@f1+1
 16893  1F86  085C               	movf	setPercentValue@i+2,w
 16894  1F87  00B3               	movwf	___ftdiv@f1+2
 16895  1F88  318B  23E4  319F   	fcall	___ftdiv
 16896  1F8B  0020               	movlb	0	; select bank0
 16897  1F8C  082E               	movf	?___ftdiv,w
 16898  1F8D  00DA               	movwf	setPercentValue@i
 16899  1F8E  082F               	movf	?___ftdiv+1,w
 16900  1F8F  00DB               	movwf	setPercentValue@i+1
 16901  1F90  0830               	movf	?___ftdiv+2,w
 16902  1F91  00DC               	movwf	setPercentValue@i+2
 16903                           
 16904                           ;Dimmer_B1.c: 790: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 16905  1F92  0859               	movf	setPercentValue@value,w
 16906  1F93  3EE0               	addlw	224
 16907  1F94  00A8               	movwf	___awtoft@c
 16908  1F95  30FF               	movlw	255
 16909  1F96  1803               	skipnc
 16910  1F97  3000               	movlw	0
 16911  1F98  00A9               	movwf	___awtoft@c+1
 16912  1F99  319A  22E9  319F   	fcall	___awtoft
 16913  1F9C  0020               	movlb	0	; select bank0
 16914  1F9D  0828               	movf	?___awtoft,w
 16915  1F9E  00B1               	movwf	___ftdiv@f1
 16916  1F9F  0829               	movf	?___awtoft+1,w
 16917  1FA0  00B2               	movwf	___ftdiv@f1+1
 16918  1FA1  082A               	movf	?___awtoft+2,w
 16919  1FA2  00B3               	movwf	___ftdiv@f1+2
 16920  1FA3  085A               	movf	setPercentValue@i,w
 16921  1FA4  00AE               	movwf	___ftdiv@f2
 16922  1FA5  085B               	movf	setPercentValue@i+1,w
 16923  1FA6  00AF               	movwf	___ftdiv@f2+1
 16924  1FA7  085C               	movf	setPercentValue@i+2,w
 16925  1FA8  00B0               	movwf	___ftdiv@f2+2
 16926  1FA9  318B  23E4  319F   	fcall	___ftdiv
 16927  1FAC  0020               	movlb	0	; select bank0
 16928  1FAD  082E               	movf	?___ftdiv,w
 16929  1FAE  00CB               	movwf	___fttol@f1
 16930  1FAF  082F               	movf	?___ftdiv+1,w
 16931  1FB0  00CC               	movwf	___fttol@f1+1
 16932  1FB1  0830               	movf	?___ftdiv+2,w
 16933  1FB2  00CD               	movwf	___fttol@f1+2
 16934  1FB3  3197  2779         	fcall	___fttol
 16935  1FB5  0020               	movlb	0	; select bank0
 16936  1FB6  034B               	decf	?___fttol,w
 16937  1FB7  3AFF               	xorlw	255
 16938  1FB8  3E64               	addlw	100
 16939  1FB9  0008               	return
 16940  1FBA                     __end_of_setPercentValue:	
 16941                           
 16942                           	psect	text104
 16943  1779                     __ptext104:	
 16944 ;; *************** function ___fttol *****************
 16945 ;; Defined at:
 16946 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16947 ;; Parameters:    Size  Location     Type
 16948 ;;  f1              3   43[BANK0 ] float 
 16949 ;; Auto vars:     Size  Location     Type
 16950 ;;  lval            4   52[BANK0 ] unsigned long 
 16951 ;;  exp1            1   56[BANK0 ] unsigned char 
 16952 ;;  sign1           1   51[BANK0 ] unsigned char 
 16953 ;; Return value:  Size  Location     Type
 16954 ;;                  4   43[BANK0 ] long 
 16955 ;; Registers used:
 16956 ;;		wreg, status,2, status,0
 16957 ;; Tracked objects:
 16958 ;;		On entry : 0/0
 16959 ;;		On exit  : 0/0
 16960 ;;		Unchanged: 0/0
 16961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16965 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16966 ;;Total ram usage:       14 bytes
 16967 ;; Hardware stack levels used:    1
 16968 ;; Hardware stack levels required when called:    5
 16969 ;; This function calls:
 16970 ;;		Nothing
 16971 ;; This function is called by:
 16972 ;;		_getPercentValue
 16973 ;;		_setPercentValue
 16974 ;; This function uses a non-reentrant model
 16975 ;;
 16976                           
 16977                           
 16978                           ;psect for function ___fttol
 16979  1779                     ___fttol:	
 16980                           
 16981                           ;incstack = 0
 16982                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16983  1779  0020               	movlb	0	; select bank0
 16984  177A  084B               	movf	___fttol@f1,w
 16985  177B  00CF               	movwf	??___fttol
 16986  177C  084C               	movf	___fttol@f1+1,w
 16987  177D  00D0               	movwf	??___fttol+1
 16988  177E  084D               	movf	___fttol@f1+2,w
 16989  177F  00D1               	movwf	??___fttol+2
 16990  1780  1003               	clrc
 16991  1781  0D50               	rlf	??___fttol+1,w
 16992  1782  0D51               	rlf	??___fttol+2,w
 16993  1783  00D2               	movwf	??___fttol+3
 16994  1784  0852               	movf	??___fttol+3,w
 16995  1785  00D8               	movwf	___fttol@exp1
 16996  1786  08D8               	movf	___fttol@exp1,f
 16997  1787  1D03               	skipz
 16998  1788  2F92               	goto	l6149
 16999  1789  3000               	movlw	0
 17000  178A  00CE               	movwf	?___fttol+3
 17001  178B  3000               	movlw	0
 17002  178C  00CD               	movwf	?___fttol+2
 17003  178D  3000               	movlw	0
 17004  178E  00CC               	movwf	?___fttol+1
 17005  178F  3000               	movlw	0
 17006  1790  00CB               	movwf	?___fttol
 17007  1791  0008               	return
 17008  1792                     l6149:	
 17009  1792  084B               	movf	___fttol@f1,w
 17010  1793  00CF               	movwf	??___fttol
 17011  1794  084C               	movf	___fttol@f1+1,w
 17012  1795  00D0               	movwf	??___fttol+1
 17013  1796  084D               	movf	___fttol@f1+2,w
 17014  1797  00D1               	movwf	??___fttol+2
 17015  1798  3017               	movlw	23
 17016  1799                     u4535:	
 17017  1799  36D1               	lsrf	??___fttol+2,f
 17018  179A  0CD0               	rrf	??___fttol+1,f
 17019  179B  0CCF               	rrf	??___fttol,f
 17020  179C  0B89               	decfsz	9,f
 17021  179D  2F99               	goto	u4535
 17022  179E  084F               	movf	??___fttol,w
 17023  179F  00D2               	movwf	??___fttol+3
 17024  17A0  0852               	movf	??___fttol+3,w
 17025  17A1  00D3               	movwf	___fttol@sign1
 17026  17A2  17CC               	bsf	___fttol@f1+1,7
 17027  17A3  30FF               	movlw	255
 17028  17A4  05CB               	andwf	___fttol@f1,f
 17029  17A5  30FF               	movlw	255
 17030  17A6  05CC               	andwf	___fttol@f1+1,f
 17031  17A7  3000               	movlw	0
 17032  17A8  05CD               	andwf	___fttol@f1+2,f
 17033  17A9  084B               	movf	___fttol@f1,w
 17034  17AA  00D4               	movwf	___fttol@lval
 17035  17AB  084C               	movf	___fttol@f1+1,w
 17036  17AC  00D5               	movwf	___fttol@lval+1
 17037  17AD  084D               	movf	___fttol@f1+2,w
 17038  17AE  00D6               	movwf	___fttol@lval+2
 17039  17AF  01D7               	clrf	___fttol@lval+3
 17040  17B0  308E               	movlw	142
 17041  17B1  02D8               	subwf	___fttol@exp1,f
 17042  17B2  1FD8               	btfss	___fttol@exp1,7
 17043  17B3  2FD0               	goto	l6169
 17044  17B4  0858               	movf	___fttol@exp1,w
 17045  17B5  3A80               	xorlw	128
 17046  17B6  3E8F               	addlw	143
 17047  17B7  1803               	skipnc
 17048  17B8  2FC2               	goto	l6167
 17049  17B9  3000               	movlw	0
 17050  17BA  00CE               	movwf	?___fttol+3
 17051  17BB  3000               	movlw	0
 17052  17BC  00CD               	movwf	?___fttol+2
 17053  17BD  3000               	movlw	0
 17054  17BE  00CC               	movwf	?___fttol+1
 17055  17BF  3000               	movlw	0
 17056  17C0  00CB               	movwf	?___fttol
 17057  17C1  0008               	return
 17058  17C2                     l6167:	
 17059  17C2  3001               	movlw	1
 17060  17C3                     u4565:	
 17061  17C3  36D7               	lsrf	___fttol@lval+3,f
 17062  17C4  0CD6               	rrf	___fttol@lval+2,f
 17063  17C5  0CD5               	rrf	___fttol@lval+1,f
 17064  17C6  0CD4               	rrf	___fttol@lval,f
 17065  17C7  0B89               	decfsz	9,f
 17066  17C8  2FC3               	goto	u4565
 17067  17C9  3001               	movlw	1
 17068  17CA  00CF               	movwf	??___fttol
 17069  17CB  084F               	movf	??___fttol,w
 17070  17CC  07D8               	addwf	___fttol@exp1,f
 17071  17CD  1903               	btfsc	3,2
 17072  17CE  2FE9               	goto	l6179
 17073  17CF  2FC2               	goto	l6167
 17074  17D0                     l6169:	
 17075  17D0  3018               	movlw	24
 17076  17D1  0258               	subwf	___fttol@exp1,w
 17077  17D2  1C03               	skipc
 17078  17D3  2FE6               	goto	l6177
 17079  17D4  3000               	movlw	0
 17080  17D5  00CE               	movwf	?___fttol+3
 17081  17D6  3000               	movlw	0
 17082  17D7  00CD               	movwf	?___fttol+2
 17083  17D8  3000               	movlw	0
 17084  17D9  00CC               	movwf	?___fttol+1
 17085  17DA  3000               	movlw	0
 17086  17DB  00CB               	movwf	?___fttol
 17087  17DC  0008               	return
 17088  17DD                     l6175:	
 17089  17DD  3001               	movlw	1
 17090  17DE                     u4595:	
 17091  17DE  35D4               	lslf	___fttol@lval,f
 17092  17DF  0DD5               	rlf	___fttol@lval+1,f
 17093  17E0  0DD6               	rlf	___fttol@lval+2,f
 17094  17E1  0DD7               	rlf	___fttol@lval+3,f
 17095  17E2  0B89               	decfsz	9,f
 17096  17E3  2FDE               	goto	u4595
 17097  17E4  3001               	movlw	1
 17098  17E5  02D8               	subwf	___fttol@exp1,f
 17099  17E6                     l6177:	
 17100  17E6  08D8               	movf	___fttol@exp1,f
 17101  17E7  1D03               	skipz
 17102  17E8  2FDD               	goto	l6175
 17103  17E9                     l6179:	
 17104  17E9  0853               	movf	___fttol@sign1,w
 17105  17EA  1903               	btfsc	3,2
 17106  17EB  2FF7               	goto	l6183
 17107  17EC  09D4               	comf	___fttol@lval,f
 17108  17ED  09D5               	comf	___fttol@lval+1,f
 17109  17EE  09D6               	comf	___fttol@lval+2,f
 17110  17EF  09D7               	comf	___fttol@lval+3,f
 17111  17F0  0AD4               	incf	___fttol@lval,f
 17112  17F1  1903               	skipnz
 17113  17F2  0AD5               	incf	___fttol@lval+1,f
 17114  17F3  1903               	skipnz
 17115  17F4  0AD6               	incf	___fttol@lval+2,f
 17116  17F5  1903               	skipnz
 17117  17F6  0AD7               	incf	___fttol@lval+3,f
 17118  17F7                     l6183:	
 17119  17F7  0857               	movf	___fttol@lval+3,w
 17120  17F8  00CE               	movwf	?___fttol+3
 17121  17F9  0856               	movf	___fttol@lval+2,w
 17122  17FA  00CD               	movwf	?___fttol+2
 17123  17FB  0855               	movf	___fttol@lval+1,w
 17124  17FC  00CC               	movwf	?___fttol+1
 17125  17FD  0854               	movf	___fttol@lval,w
 17126  17FE  00CB               	movwf	?___fttol
 17127  17FF  0008               	return
 17128  1800                     __end_of___fttol:	
 17129                           
 17130                           	psect	text105
 17131  0BE4                     __ptext105:	
 17132 ;; *************** function ___ftdiv *****************
 17133 ;; Defined at:
 17134 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17135 ;; Parameters:    Size  Location     Type
 17136 ;;  f2              3   14[BANK0 ] float 
 17137 ;;  f1              3   17[BANK0 ] float 
 17138 ;; Auto vars:     Size  Location     Type
 17139 ;;  f3              3   25[BANK0 ] float 
 17140 ;;  sign            1   29[BANK0 ] unsigned char 
 17141 ;;  exp             1   28[BANK0 ] unsigned char 
 17142 ;;  cntr            1   24[BANK0 ] unsigned char 
 17143 ;; Return value:  Size  Location     Type
 17144 ;;                  3   14[BANK0 ] float 
 17145 ;; Registers used:
 17146 ;;		wreg, status,2, status,0, pclath, cstack
 17147 ;; Tracked objects:
 17148 ;;		On entry : 0/0
 17149 ;;		On exit  : 0/0
 17150 ;;		Unchanged: 0/0
 17151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17152 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17153 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17154 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17155 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;Total ram usage:       16 bytes
 17157 ;; Hardware stack levels used:    1
 17158 ;; Hardware stack levels required when called:    6
 17159 ;; This function calls:
 17160 ;;		___ftpack
 17161 ;; This function is called by:
 17162 ;;		_getPercentValue
 17163 ;;		_setPercentValue
 17164 ;; This function uses a non-reentrant model
 17165 ;;
 17166                           
 17167                           
 17168                           ;psect for function ___ftdiv
 17169  0BE4                     ___ftdiv:	
 17170                           
 17171                           ;incstack = 0
 17172                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17173  0BE4  0020               	movlb	0	; select bank0
 17174  0BE5  0831               	movf	___ftdiv@f1,w
 17175  0BE6  00B4               	movwf	??___ftdiv
 17176  0BE7  0832               	movf	___ftdiv@f1+1,w
 17177  0BE8  00B5               	movwf	??___ftdiv+1
 17178  0BE9  0833               	movf	___ftdiv@f1+2,w
 17179  0BEA  00B6               	movwf	??___ftdiv+2
 17180  0BEB  1003               	clrc
 17181  0BEC  0D35               	rlf	??___ftdiv+1,w
 17182  0BED  0D36               	rlf	??___ftdiv+2,w
 17183  0BEE  00B7               	movwf	??___ftdiv+3
 17184  0BEF  0837               	movf	??___ftdiv+3,w
 17185  0BF0  00BC               	movwf	___ftdiv@exp
 17186  0BF1  08BC               	movf	___ftdiv@exp,f
 17187  0BF2  1D03               	skipz
 17188  0BF3  2BFB               	goto	l6057
 17189  0BF4  3000               	movlw	0
 17190  0BF5  00AE               	movwf	?___ftdiv
 17191  0BF6  3000               	movlw	0
 17192  0BF7  00AF               	movwf	?___ftdiv+1
 17193  0BF8  3000               	movlw	0
 17194  0BF9  00B0               	movwf	?___ftdiv+2
 17195  0BFA  0008               	return
 17196  0BFB                     l6057:	
 17197  0BFB  082E               	movf	___ftdiv@f2,w
 17198  0BFC  00B4               	movwf	??___ftdiv
 17199  0BFD  082F               	movf	___ftdiv@f2+1,w
 17200  0BFE  00B5               	movwf	??___ftdiv+1
 17201  0BFF  0830               	movf	___ftdiv@f2+2,w
 17202  0C00  00B6               	movwf	??___ftdiv+2
 17203  0C01  1003               	clrc
 17204  0C02  0D35               	rlf	??___ftdiv+1,w
 17205  0C03  0D36               	rlf	??___ftdiv+2,w
 17206  0C04  00B7               	movwf	??___ftdiv+3
 17207  0C05  0837               	movf	??___ftdiv+3,w
 17208  0C06  00BD               	movwf	___ftdiv@sign
 17209  0C07  08BD               	movf	___ftdiv@sign,f
 17210  0C08  1D03               	skipz
 17211  0C09  2C11               	goto	l6063
 17212  0C0A  3000               	movlw	0
 17213  0C0B  00AE               	movwf	?___ftdiv
 17214  0C0C  3000               	movlw	0
 17215  0C0D  00AF               	movwf	?___ftdiv+1
 17216  0C0E  3000               	movlw	0
 17217  0C0F  00B0               	movwf	?___ftdiv+2
 17218  0C10  0008               	return
 17219  0C11                     l6063:	
 17220  0C11  3000               	movlw	0
 17221  0C12  00B9               	movwf	___ftdiv@f3
 17222  0C13  3000               	movlw	0
 17223  0C14  00BA               	movwf	___ftdiv@f3+1
 17224  0C15  3000               	movlw	0
 17225  0C16  00BB               	movwf	___ftdiv@f3+2
 17226  0C17  3089               	movlw	137
 17227  0C18  073D               	addwf	___ftdiv@sign,w
 17228  0C19  00B4               	movwf	??___ftdiv
 17229  0C1A  0834               	movf	??___ftdiv,w
 17230  0C1B  02BC               	subwf	___ftdiv@exp,f
 17231  0C1C  0831               	movf	___ftdiv@f1,w
 17232  0C1D  00B4               	movwf	??___ftdiv
 17233  0C1E  0832               	movf	___ftdiv@f1+1,w
 17234  0C1F  00B5               	movwf	??___ftdiv+1
 17235  0C20  0833               	movf	___ftdiv@f1+2,w
 17236  0C21  00B6               	movwf	??___ftdiv+2
 17237  0C22  3010               	movlw	16
 17238  0C23                     u4345:	
 17239  0C23  36B6               	lsrf	??___ftdiv+2,f
 17240  0C24  0CB5               	rrf	??___ftdiv+1,f
 17241  0C25  0CB4               	rrf	??___ftdiv,f
 17242  0C26  0B89               	decfsz	9,f
 17243  0C27  2C23               	goto	u4345
 17244  0C28  0834               	movf	??___ftdiv,w
 17245  0C29  00B7               	movwf	??___ftdiv+3
 17246  0C2A  0837               	movf	??___ftdiv+3,w
 17247  0C2B  00BD               	movwf	___ftdiv@sign
 17248  0C2C  082E               	movf	___ftdiv@f2,w
 17249  0C2D  00B4               	movwf	??___ftdiv
 17250  0C2E  082F               	movf	___ftdiv@f2+1,w
 17251  0C2F  00B5               	movwf	??___ftdiv+1
 17252  0C30  0830               	movf	___ftdiv@f2+2,w
 17253  0C31  00B6               	movwf	??___ftdiv+2
 17254  0C32  3010               	movlw	16
 17255  0C33                     u4355:	
 17256  0C33  36B6               	lsrf	??___ftdiv+2,f
 17257  0C34  0CB5               	rrf	??___ftdiv+1,f
 17258  0C35  0CB4               	rrf	??___ftdiv,f
 17259  0C36  0B89               	decfsz	9,f
 17260  0C37  2C33               	goto	u4355
 17261  0C38  0834               	movf	??___ftdiv,w
 17262  0C39  00B7               	movwf	??___ftdiv+3
 17263  0C3A  0837               	movf	??___ftdiv+3,w
 17264  0C3B  06BD               	xorwf	___ftdiv@sign,f
 17265  0C3C  3080               	movlw	128
 17266  0C3D  00B4               	movwf	??___ftdiv
 17267  0C3E  0834               	movf	??___ftdiv,w
 17268  0C3F  05BD               	andwf	___ftdiv@sign,f
 17269  0C40  17B2               	bsf	___ftdiv@f1+1,7
 17270  0C41  30FF               	movlw	255
 17271  0C42  05B1               	andwf	___ftdiv@f1,f
 17272  0C43  30FF               	movlw	255
 17273  0C44  05B2               	andwf	___ftdiv@f1+1,f
 17274  0C45  3000               	movlw	0
 17275  0C46  05B3               	andwf	___ftdiv@f1+2,f
 17276  0C47  17AF               	bsf	___ftdiv@f2+1,7
 17277  0C48  30FF               	movlw	255
 17278  0C49  05AE               	andwf	___ftdiv@f2,f
 17279  0C4A  30FF               	movlw	255
 17280  0C4B  05AF               	andwf	___ftdiv@f2+1,f
 17281  0C4C  3000               	movlw	0
 17282  0C4D  05B0               	andwf	___ftdiv@f2+2,f
 17283  0C4E  3018               	movlw	24
 17284  0C4F  00B4               	movwf	??___ftdiv
 17285  0C50  0834               	movf	??___ftdiv,w
 17286  0C51  00B8               	movwf	___ftdiv@cntr
 17287  0C52                     l6077:	
 17288  0C52  3001               	movlw	1
 17289  0C53                     u4365:	
 17290  0C53  35B9               	lslf	___ftdiv@f3,f
 17291  0C54  0DBA               	rlf	___ftdiv@f3+1,f
 17292  0C55  0DBB               	rlf	___ftdiv@f3+2,f
 17293  0C56  0B89               	decfsz	9,f
 17294  0C57  2C53               	goto	u4365
 17295  0C58  0830               	movf	___ftdiv@f2+2,w
 17296  0C59  0233               	subwf	___ftdiv@f1+2,w
 17297  0C5A  1D03               	skipz
 17298  0C5B  2C62               	goto	u4375
 17299  0C5C  082F               	movf	___ftdiv@f2+1,w
 17300  0C5D  0232               	subwf	___ftdiv@f1+1,w
 17301  0C5E  1D03               	skipz
 17302  0C5F  2C62               	goto	u4375
 17303  0C60  082E               	movf	___ftdiv@f2,w
 17304  0C61  0231               	subwf	___ftdiv@f1,w
 17305  0C62                     u4375:	
 17306  0C62  1C03               	skipc
 17307  0C63  2C6B               	goto	l6085
 17308  0C64  082E               	movf	___ftdiv@f2,w
 17309  0C65  02B1               	subwf	___ftdiv@f1,f
 17310  0C66  082F               	movf	___ftdiv@f2+1,w
 17311  0C67  3BB2               	subwfb	___ftdiv@f1+1,f
 17312  0C68  0830               	movf	___ftdiv@f2+2,w
 17313  0C69  3BB3               	subwfb	___ftdiv@f1+2,f
 17314  0C6A  1439               	bsf	___ftdiv@f3,0
 17315  0C6B                     l6085:	
 17316  0C6B  3001               	movlw	1
 17317  0C6C                     u4385:	
 17318  0C6C  35B1               	lslf	___ftdiv@f1,f
 17319  0C6D  0DB2               	rlf	___ftdiv@f1+1,f
 17320  0C6E  0DB3               	rlf	___ftdiv@f1+2,f
 17321  0C6F  0B89               	decfsz	9,f
 17322  0C70  2C6C               	goto	u4385
 17323  0C71  3001               	movlw	1
 17324  0C72  02B8               	subwf	___ftdiv@cntr,f
 17325  0C73  1D03               	btfss	3,2
 17326  0C74  2C52               	goto	l6077
 17327  0C75  0839               	movf	___ftdiv@f3,w
 17328  0C76  00A0               	movwf	___ftpack@arg
 17329  0C77  083A               	movf	___ftdiv@f3+1,w
 17330  0C78  00A1               	movwf	___ftpack@arg+1
 17331  0C79  083B               	movf	___ftdiv@f3+2,w
 17332  0C7A  00A2               	movwf	___ftpack@arg+2
 17333  0C7B  083C               	movf	___ftdiv@exp,w
 17334  0C7C  00B4               	movwf	??___ftdiv
 17335  0C7D  0834               	movf	??___ftdiv,w
 17336  0C7E  00A3               	movwf	___ftpack@exp
 17337  0C7F  083D               	movf	___ftdiv@sign,w
 17338  0C80  00B5               	movwf	??___ftdiv+1
 17339  0C81  0835               	movf	??___ftdiv+1,w
 17340  0C82  00A4               	movwf	___ftpack@sign
 17341  0C83  3193  231C         	fcall	___ftpack
 17342  0C85  0020               	movlb	0	; select bank0
 17343  0C86  0820               	movf	?___ftpack,w
 17344  0C87  00AE               	movwf	?___ftdiv
 17345  0C88  0821               	movf	?___ftpack+1,w
 17346  0C89  00AF               	movwf	?___ftdiv+1
 17347  0C8A  0822               	movf	?___ftpack+2,w
 17348  0C8B  00B0               	movwf	?___ftdiv+2
 17349  0C8C  0008               	return
 17350  0C8D                     __end_of___ftdiv:	
 17351                           
 17352                           	psect	text106
 17353  1AE9                     __ptext106:	
 17354 ;; *************** function ___awtoft *****************
 17355 ;; Defined at:
 17356 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17357 ;; Parameters:    Size  Location     Type
 17358 ;;  c               2    8[BANK0 ] int 
 17359 ;; Auto vars:     Size  Location     Type
 17360 ;;  sign            1   13[BANK0 ] unsigned char 
 17361 ;; Return value:  Size  Location     Type
 17362 ;;                  3    8[BANK0 ] float 
 17363 ;; Registers used:
 17364 ;;		wreg, status,2, status,0, pclath, cstack
 17365 ;; Tracked objects:
 17366 ;;		On entry : 0/0
 17367 ;;		On exit  : 0/0
 17368 ;;		Unchanged: 0/0
 17369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17370 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17374 ;;Total ram usage:        6 bytes
 17375 ;; Hardware stack levels used:    1
 17376 ;; Hardware stack levels required when called:    6
 17377 ;; This function calls:
 17378 ;;		___ftpack
 17379 ;; This function is called by:
 17380 ;;		_getPercentValue
 17381 ;;		_setPercentValue
 17382 ;; This function uses a non-reentrant model
 17383 ;;
 17384                           
 17385                           
 17386                           ;psect for function ___awtoft
 17387  1AE9                     ___awtoft:	
 17388                           
 17389                           ;incstack = 0
 17390                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17391  1AE9  0020               	movlb	0	; select bank0
 17392  1AEA  01AD               	clrf	___awtoft@sign
 17393  1AEB  1FA9               	btfss	___awtoft@c+1,7
 17394  1AEC  2AF4               	goto	l5975
 17395  1AED  09A8               	comf	___awtoft@c,f
 17396  1AEE  09A9               	comf	___awtoft@c+1,f
 17397  1AEF  0AA8               	incf	___awtoft@c,f
 17398  1AF0  1903               	skipnz
 17399  1AF1  0AA9               	incf	___awtoft@c+1,f
 17400  1AF2  01AD               	clrf	___awtoft@sign
 17401  1AF3  0AAD               	incf	___awtoft@sign,f
 17402  1AF4                     l5975:	
 17403  1AF4  0828               	movf	___awtoft@c,w
 17404  1AF5  00A0               	movwf	___ftpack@arg
 17405  1AF6  0829               	movf	___awtoft@c+1,w
 17406  1AF7  00A1               	movwf	___ftpack@arg+1
 17407  1AF8  01A2               	clrf	___ftpack@arg+2
 17408  1AF9  308E               	movlw	142
 17409  1AFA  00AB               	movwf	??___awtoft
 17410  1AFB  082B               	movf	??___awtoft,w
 17411  1AFC  00A3               	movwf	___ftpack@exp
 17412  1AFD  082D               	movf	___awtoft@sign,w
 17413  1AFE  00AC               	movwf	??___awtoft+1
 17414  1AFF  082C               	movf	??___awtoft+1,w
 17415  1B00  00A4               	movwf	___ftpack@sign
 17416  1B01  3193  231C         	fcall	___ftpack
 17417  1B03  0020               	movlb	0	; select bank0
 17418  1B04  0820               	movf	?___ftpack,w
 17419  1B05  00A8               	movwf	?___awtoft
 17420  1B06  0821               	movf	?___ftpack+1,w
 17421  1B07  00A9               	movwf	?___awtoft+1
 17422  1B08  0822               	movf	?___ftpack+2,w
 17423  1B09  00AA               	movwf	?___awtoft+2
 17424  1B0A  0008               	return
 17425  1B0B                     __end_of___awtoft:	
 17426                           
 17427                           	psect	text107
 17428  131C                     __ptext107:	
 17429 ;; *************** function ___ftpack *****************
 17430 ;; Defined at:
 17431 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17432 ;; Parameters:    Size  Location     Type
 17433 ;;  arg             3    0[BANK0 ] unsigned um
 17434 ;;  exp             1    3[BANK0 ] unsigned char 
 17435 ;;  sign            1    4[BANK0 ] unsigned char 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;		None
 17438 ;; Return value:  Size  Location     Type
 17439 ;;                  3    0[BANK0 ] float 
 17440 ;; Registers used:
 17441 ;;		wreg, status,2, status,0
 17442 ;; Tracked objects:
 17443 ;;		On entry : 0/0
 17444 ;;		On exit  : 0/0
 17445 ;;		Unchanged: 0/0
 17446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17447 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;Total ram usage:        8 bytes
 17452 ;; Hardware stack levels used:    1
 17453 ;; Hardware stack levels required when called:    5
 17454 ;; This function calls:
 17455 ;;		Nothing
 17456 ;; This function is called by:
 17457 ;;		___awtoft
 17458 ;;		___ftadd
 17459 ;;		___ftdiv
 17460 ;;		___ftmul
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           
 17465                           ;psect for function ___ftpack
 17466  131C                     ___ftpack:	
 17467                           
 17468                           ;incstack = 0
 17469                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17470  131C  0020               	movlb	0	; select bank0
 17471  131D  0823               	movf	___ftpack@exp,w
 17472  131E  1903               	btfsc	3,2
 17473  131F  2B25               	goto	l5941
 17474  1320  0822               	movf	___ftpack@arg+2,w
 17475  1321  0421               	iorwf	___ftpack@arg+1,w
 17476  1322  0420               	iorwf	___ftpack@arg,w
 17477  1323  1D03               	skipz
 17478  1324  2B36               	goto	l5947
 17479  1325                     l5941:	
 17480  1325  3000               	movlw	0
 17481  1326  00A0               	movwf	?___ftpack
 17482  1327  3000               	movlw	0
 17483  1328  00A1               	movwf	?___ftpack+1
 17484  1329  3000               	movlw	0
 17485  132A  00A2               	movwf	?___ftpack+2
 17486  132B  0008               	return
 17487  132C                     l5945:	
 17488  132C  3001               	movlw	1
 17489  132D  00A5               	movwf	??___ftpack
 17490  132E  0825               	movf	??___ftpack,w
 17491  132F  07A3               	addwf	___ftpack@exp,f
 17492  1330  3001               	movlw	1
 17493  1331                     u3995:	
 17494  1331  36A2               	lsrf	___ftpack@arg+2,f
 17495  1332  0CA1               	rrf	___ftpack@arg+1,f
 17496  1333  0CA0               	rrf	___ftpack@arg,f
 17497  1334  0B89               	decfsz	9,f
 17498  1335  2B31               	goto	u3995
 17499  1336                     l5947:	
 17500  1336  30FE               	movlw	254
 17501  1337  0522               	andwf	___ftpack@arg+2,w
 17502  1338  1903               	btfsc	3,2
 17503  1339  2B4F               	goto	l3271
 17504  133A  2B2C               	goto	l5945
 17505  133B                     l5949:	
 17506  133B  3001               	movlw	1
 17507  133C  00A5               	movwf	??___ftpack
 17508  133D  0825               	movf	??___ftpack,w
 17509  133E  07A3               	addwf	___ftpack@exp,f
 17510  133F  3001               	movlw	1
 17511  1340  07A0               	addwf	___ftpack@arg,f
 17512  1341  3000               	movlw	0
 17513  1342  1803               	skipnc
 17514  1343  3001               	movlw	1
 17515  1344  07A1               	addwf	___ftpack@arg+1,f
 17516  1345  3000               	movlw	0
 17517  1346  1803               	skipnc
 17518  1347  3001               	movlw	1
 17519  1348  07A2               	addwf	___ftpack@arg+2,f
 17520  1349  3001               	movlw	1
 17521  134A                     u4015:	
 17522  134A  36A2               	lsrf	___ftpack@arg+2,f
 17523  134B  0CA1               	rrf	___ftpack@arg+1,f
 17524  134C  0CA0               	rrf	___ftpack@arg,f
 17525  134D  0B89               	decfsz	9,f
 17526  134E  2B4A               	goto	u4015
 17527  134F                     l3271:	
 17528  134F  30FF               	movlw	255
 17529  1350  0522               	andwf	___ftpack@arg+2,w
 17530  1351  1903               	btfsc	3,2
 17531  1352  2B5C               	goto	l5957
 17532  1353  2B3B               	goto	l5949
 17533  1354                     l5955:	
 17534  1354  3001               	movlw	1
 17535  1355  02A3               	subwf	___ftpack@exp,f
 17536  1356  3001               	movlw	1
 17537  1357                     u4035:	
 17538  1357  35A0               	lslf	___ftpack@arg,f
 17539  1358  0DA1               	rlf	___ftpack@arg+1,f
 17540  1359  0DA2               	rlf	___ftpack@arg+2,f
 17541  135A  0B89               	decfsz	9,f
 17542  135B  2B57               	goto	u4035
 17543  135C                     l5957:	
 17544  135C  1FA1               	btfss	___ftpack@arg+1,7
 17545  135D  2B54               	goto	l5955
 17546  135E  1823               	btfsc	___ftpack@exp,0
 17547  135F  2B66               	goto	l3277
 17548  1360  30FF               	movlw	255
 17549  1361  05A0               	andwf	___ftpack@arg,f
 17550  1362  307F               	movlw	127
 17551  1363  05A1               	andwf	___ftpack@arg+1,f
 17552  1364  30FF               	movlw	255
 17553  1365  05A2               	andwf	___ftpack@arg+2,f
 17554  1366                     l3277:	
 17555  1366  1003               	clrc
 17556  1367  0CA3               	rrf	___ftpack@exp,f
 17557  1368  0823               	movf	___ftpack@exp,w
 17558  1369  00A5               	movwf	??___ftpack
 17559  136A  01A6               	clrf	??___ftpack+1
 17560  136B  01A7               	clrf	??___ftpack+2
 17561  136C  3010               	movlw	16
 17562  136D                     u4065:	
 17563  136D  35A5               	lslf	??___ftpack,f
 17564  136E  0DA6               	rlf	??___ftpack+1,f
 17565  136F  0DA7               	rlf	??___ftpack+2,f
 17566  1370  0B89               	decfsz	9,f
 17567  1371  2B6D               	goto	u4065
 17568  1372  0825               	movf	??___ftpack,w
 17569  1373  04A0               	iorwf	___ftpack@arg,f
 17570  1374  0826               	movf	??___ftpack+1,w
 17571  1375  04A1               	iorwf	___ftpack@arg+1,f
 17572  1376  0827               	movf	??___ftpack+2,w
 17573  1377  04A2               	iorwf	___ftpack@arg+2,f
 17574  1378  0824               	movf	___ftpack@sign,w
 17575  1379  1903               	btfsc	3,2
 17576  137A  0008               	return
 17577  137B  17A2               	bsf	___ftpack@arg+2,7
 17578  137C  0008               	return
 17579  137D                     __end_of___ftpack:	
 17580                           
 17581                           	psect	text108
 17582  26C1                     __ptext108:	
 17583 ;; *************** function _setRFSW_Status *****************
 17584 ;; Defined at:
 17585 ;;		line 400 in file "../src/RF_Control_B1.c"
 17586 ;; Parameters:    Size  Location     Type
 17587 ;;  sw              1    wreg     unsigned char 
 17588 ;;  command         1    2[BANK0 ] unsigned char 
 17589 ;; Auto vars:     Size  Location     Type
 17590 ;;  sw              1    3[BANK0 ] unsigned char 
 17591 ;; Return value:  Size  Location     Type
 17592 ;;		None               void
 17593 ;; Registers used:
 17594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17595 ;; Tracked objects:
 17596 ;;		On entry : 0/0
 17597 ;;		On exit  : 0/0
 17598 ;;		Unchanged: 0/0
 17599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17600 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17604 ;;Total ram usage:        2 bytes
 17605 ;; Hardware stack levels used:    1
 17606 ;; Hardware stack levels required when called:    6
 17607 ;; This function calls:
 17608 ;;		_RfSWPointSelect
 17609 ;; This function is called by:
 17610 ;;		_DlyOff_Main
 17611 ;;		_setDimmerLights_ERROR
 17612 ;;		_setControl_Lights_Table
 17613 ;;		_Sw_DimmerOnFunc
 17614 ;;		_Sw_DimmerAdjFunc
 17615 ;; This function uses a non-reentrant model
 17616 ;;
 17617                           
 17618                           
 17619                           ;psect for function _setRFSW_Status
 17620  26C1                     _setRFSW_Status:	
 17621                           
 17622                           ;incstack = 0
 17623                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17624                           ;setRFSW_Status@sw stored from wreg
 17625  26C1  0020               	movlb	0	; select bank0
 17626  26C2  00A3               	movwf	setRFSW_Status@sw
 17627                           
 17628                           ;RF_Control_B1.c: 401: RfSWPointSelect(sw);
 17629  26C3  0823               	movf	setRFSW_Status@sw,w
 17630  26C4  3198  20B3         	fcall	_RfSWPointSelect
 17631                           
 17632                           ;RF_Control_B1.c: 402: RFSW->Status = command;
 17633  26C6  0021               	movlb	1	; select bank1
 17634  26C7  0840               	movf	_RFSW^(0+128),w
 17635  26C8  0086               	movwf	6
 17636  26C9  0187               	clrf	7
 17637  26CA  0020               	movlb	0	; select bank0
 17638  26CB  0822               	movf	setRFSW_Status@command,w
 17639  26CC  1001               	bcf	1,0
 17640  26CD  1D03               	skipz
 17641  26CE  1401               	bsf	1,0
 17642  26CF  0008               	return
 17643  26D0                     __end_of_setRFSW_Status:	
 17644                           
 17645                           	psect	text109
 17646  18B3                     __ptext109:	
 17647 ;; *************** function _RfSWPointSelect *****************
 17648 ;; Defined at:
 17649 ;;		line 335 in file "../src/RF_Control_B1.c"
 17650 ;; Parameters:    Size  Location     Type
 17651 ;;  sw              1    wreg     unsigned char 
 17652 ;; Auto vars:     Size  Location     Type
 17653 ;;  sw              1    1[BANK0 ] unsigned char 
 17654 ;; Return value:  Size  Location     Type
 17655 ;;		None               void
 17656 ;; Registers used:
 17657 ;;		wreg
 17658 ;; Tracked objects:
 17659 ;;		On entry : 0/0
 17660 ;;		On exit  : 0/0
 17661 ;;		Unchanged: 0/0
 17662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17667 ;;Total ram usage:        2 bytes
 17668 ;; Hardware stack levels used:    1
 17669 ;; Hardware stack levels required when called:    5
 17670 ;; This function calls:
 17671 ;;		Nothing
 17672 ;; This function is called by:
 17673 ;;		_setRFSW_Control
 17674 ;;		_setRFSW_AdjControl
 17675 ;;		_setRFSW_Status
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           
 17680                           ;psect for function _RfSWPointSelect
 17681  18B3                     _RfSWPointSelect:	
 17682                           
 17683                           ;incstack = 0
 17684                           ; Regs used in _RfSWPointSelect: [wreg]
 17685                           ;RfSWPointSelect@sw stored from wreg
 17686  18B3  0020               	movlb	0	; select bank0
 17687  18B4  00A1               	movwf	RfSWPointSelect@sw
 17688                           
 17689                           ;RF_Control_B1.c: 337: if (sw == 1) {
 17690  18B5  0821               	movf	RfSWPointSelect@sw,w
 17691  18B6  3A01               	xorlw	1
 17692  18B7  1D03               	skipz
 17693  18B8  28BE               	goto	l2523
 17694                           
 17695                           ;RF_Control_B1.c: 338: RFSW = &RFSW1;
 17696  18B9  30E9               	movlw	_RFSW1& (0+255)
 17697  18BA  00A0               	movwf	??_RfSWPointSelect
 17698  18BB  0820               	movf	??_RfSWPointSelect,w
 17699  18BC  0021               	movlb	1	; select bank1
 17700  18BD  00C0               	movwf	_RFSW^(0+128)
 17701  18BE                     l2523:	
 17702                           
 17703                           ;RF_Control_B1.c: 339: }
 17704                           ;RF_Control_B1.c: 342: if (sw == 2) {
 17705  18BE  0020               	movlb	0	; select bank0
 17706  18BF  0821               	movf	RfSWPointSelect@sw,w
 17707  18C0  3A02               	xorlw	2
 17708  18C1  1D03               	skipz
 17709  18C2  0008               	return
 17710                           
 17711                           ;RF_Control_B1.c: 343: RFSW = &RFSW2;
 17712  18C3  30EA               	movlw	_RFSW2& (0+255)
 17713  18C4  00A0               	movwf	??_RfSWPointSelect
 17714  18C5  0820               	movf	??_RfSWPointSelect,w
 17715  18C6  0021               	movlb	1	; select bank1
 17716  18C7  00C0               	movwf	_RFSW^(0+128)
 17717  18C8  0008               	return
 17718  18C9                     __end_of_RfSWPointSelect:	
 17719                           
 17720                           	psect	text110
 17721  270E                     __ptext110:	
 17722 ;; *************** function _setDimmerLights_Trigger *****************
 17723 ;; Defined at:
 17724 ;;		line 723 in file "../src/Dimmer_B1.c"
 17725 ;; Parameters:    Size  Location     Type
 17726 ;;  lights          1    wreg     unsigned char 
 17727 ;;  command         1    2[BANK0 ] unsigned char 
 17728 ;; Auto vars:     Size  Location     Type
 17729 ;;  lights          1    3[BANK0 ] unsigned char 
 17730 ;; Return value:  Size  Location     Type
 17731 ;;		None               void
 17732 ;; Registers used:
 17733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17734 ;; Tracked objects:
 17735 ;;		On entry : 0/0
 17736 ;;		On exit  : 0/0
 17737 ;;		Unchanged: 0/0
 17738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17739 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17743 ;;Total ram usage:        2 bytes
 17744 ;; Hardware stack levels used:    1
 17745 ;; Hardware stack levels required when called:    6
 17746 ;; This function calls:
 17747 ;;		_DimmerLightsPointSelect
 17748 ;; This function is called by:
 17749 ;;		_DlyOff_Main
 17750 ;;		_setRFSW_Control
 17751 ;;		_Sw_DimmerOnFunc
 17752 ;;		_Sw_DimmerOffFunc
 17753 ;; This function uses a non-reentrant model
 17754 ;;
 17755                           
 17756                           
 17757                           ;psect for function _setDimmerLights_Trigger
 17758  270E                     _setDimmerLights_Trigger:	
 17759                           
 17760                           ;incstack = 0
 17761                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17762                           ;setDimmerLights_Trigger@lights stored from wreg
 17763  270E  0020               	movlb	0	; select bank0
 17764  270F  00A3               	movwf	setDimmerLights_Trigger@lights
 17765                           
 17766                           ;Dimmer_B1.c: 725: DimmerLightsPointSelect(lights);
 17767  2710  0823               	movf	setDimmerLights_Trigger@lights,w
 17768  2711  31A7  27C5         	fcall	_DimmerLightsPointSelect
 17769                           
 17770                           ;Dimmer_B1.c: 726: DimmerLights->Trigger = command;
 17771  2713  0878               	movf	_DimmerLights,w
 17772  2714  3E08               	addlw	8
 17773  2715  0086               	movwf	6
 17774  2716  3001               	movlw	1	; select bank2/3
 17775  2717  0087               	movwf	7
 17776  2718  0020               	movlb	0	; select bank0
 17777  2719  0822               	movf	setDimmerLights_Trigger@command,w
 17778  271A  1101               	bcf	1,2
 17779  271B  1D03               	skipz
 17780  271C  1501               	bsf	1,2
 17781  271D  0008               	return
 17782  271E                     __end_of_setDimmerLights_Trigger:	
 17783                           
 17784                           	psect	text111
 17785  26FE                     __ptext111:	
 17786 ;; *************** function _setDimmerLights_Switch *****************
 17787 ;; Defined at:
 17788 ;;		line 711 in file "../src/Dimmer_B1.c"
 17789 ;; Parameters:    Size  Location     Type
 17790 ;;  lights          1    wreg     unsigned char 
 17791 ;;  command         1    2[BANK0 ] unsigned char 
 17792 ;; Auto vars:     Size  Location     Type
 17793 ;;  lights          1    3[BANK0 ] unsigned char 
 17794 ;; Return value:  Size  Location     Type
 17795 ;;		None               void
 17796 ;; Registers used:
 17797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17803 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;Total ram usage:        2 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; Hardware stack levels required when called:    6
 17810 ;; This function calls:
 17811 ;;		_DimmerLightsPointSelect
 17812 ;; This function is called by:
 17813 ;;		_DlyOff_Main
 17814 ;;		_setRFSW_Control
 17815 ;;		_Sw_DimmerOnFunc
 17816 ;;		_Sw_DimmerOffFunc
 17817 ;; This function uses a non-reentrant model
 17818 ;;
 17819                           
 17820                           
 17821                           ;psect for function _setDimmerLights_Switch
 17822  26FE                     _setDimmerLights_Switch:	
 17823                           
 17824                           ;incstack = 0
 17825                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17826                           ;setDimmerLights_Switch@lights stored from wreg
 17827  26FE  0020               	movlb	0	; select bank0
 17828  26FF  00A3               	movwf	setDimmerLights_Switch@lights
 17829                           
 17830                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
 17831  2700  0823               	movf	setDimmerLights_Switch@lights,w
 17832  2701  31A7  27C5         	fcall	_DimmerLightsPointSelect
 17833                           
 17834                           ;Dimmer_B1.c: 714: DimmerLights->Switch = command;
 17835  2703  0878               	movf	_DimmerLights,w
 17836  2704  3E08               	addlw	8
 17837  2705  0086               	movwf	6
 17838  2706  3001               	movlw	1	; select bank2/3
 17839  2707  0087               	movwf	7
 17840  2708  0020               	movlb	0	; select bank0
 17841  2709  0822               	movf	setDimmerLights_Switch@command,w
 17842  270A  1081               	bcf	1,1
 17843  270B  1D03               	skipz
 17844  270C  1481               	bsf	1,1
 17845  270D  0008               	return
 17846  270E                     __end_of_setDimmerLights_Switch:	
 17847                           
 17848                           	psect	text112
 17849  27C5                     __ptext112:	
 17850 ;; *************** function _DimmerLightsPointSelect *****************
 17851 ;; Defined at:
 17852 ;;		line 315 in file "../src/Dimmer_B1.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;  lights          1    wreg     unsigned char 
 17855 ;; Auto vars:     Size  Location     Type
 17856 ;;  lights          1    1[BANK0 ] unsigned char 
 17857 ;; Return value:  Size  Location     Type
 17858 ;;		None               void
 17859 ;; Registers used:
 17860 ;;		wreg
 17861 ;; Tracked objects:
 17862 ;;		On entry : 0/0
 17863 ;;		On exit  : 0/0
 17864 ;;		Unchanged: 0/0
 17865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;Total ram usage:        2 bytes
 17871 ;; Hardware stack levels used:    1
 17872 ;; Hardware stack levels required when called:    5
 17873 ;; This function calls:
 17874 ;;		Nothing
 17875 ;; This function is called by:
 17876 ;;		_setDimmerLights_Initialization
 17877 ;;		_setDimmerLights_Main
 17878 ;;		_setDimmerLights_ERROR
 17879 ;;		_setDimmerLights_TriggerERROR
 17880 ;;		_setDimmerLights
 17881 ;;		_setDimmerLights_Adj
 17882 ;;		_setDimmerLights_AdjRF
 17883 ;;		_setDimmerLights_Switch
 17884 ;;		_setDimmerLights_AdjGo
 17885 ;;		_setDimmerLights_Trigger
 17886 ;;		_setDimmerLights_TriggerAdj
 17887 ;;		_setDimmerLights_Clear
 17888 ;;		_setDimmerLights_GO
 17889 ;;		_setDimmerLights_MaxmumValue
 17890 ;; This function uses a non-reentrant model
 17891 ;;
 17892                           
 17893                           
 17894                           ;psect for function _DimmerLightsPointSelect
 17895  27C5                     _DimmerLightsPointSelect:	
 17896                           
 17897                           ;incstack = 0
 17898                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 17899                           ;DimmerLightsPointSelect@lights stored from wreg
 17900  27C5  0020               	movlb	0	; select bank0
 17901  27C6  00A1               	movwf	DimmerLightsPointSelect@lights
 17902                           
 17903                           ;Dimmer_B1.c: 317: if (lights == 1) {
 17904  27C7  0821               	movf	DimmerLightsPointSelect@lights,w
 17905  27C8  3A01               	xorlw	1
 17906  27C9  1D03               	skipz
 17907  27CA  2FCF               	goto	l879
 17908                           
 17909                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 17910  27CB  3020               	movlw	_DimmerLights1& (0+255)
 17911  27CC  00A0               	movwf	??_DimmerLightsPointSelect
 17912  27CD  0820               	movf	??_DimmerLightsPointSelect,w
 17913  27CE  00F8               	movwf	_DimmerLights
 17914  27CF                     l879:	
 17915                           
 17916                           ;Dimmer_B1.c: 319: }
 17917                           ;Dimmer_B1.c: 326: if (lights == 2) {
 17918  27CF  0821               	movf	DimmerLightsPointSelect@lights,w
 17919  27D0  3A02               	xorlw	2
 17920  27D1  1D03               	skipz
 17921  27D2  0008               	return
 17922                           
 17923                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights2;
 17924  27D3  302F               	movlw	_DimmerLights2& (0+255)
 17925  27D4  00A0               	movwf	??_DimmerLightsPointSelect
 17926  27D5  0820               	movf	??_DimmerLightsPointSelect,w
 17927  27D6  00F8               	movwf	_DimmerLights
 17928  27D7  0008               	return
 17929  27D8                     __end_of_DimmerLightsPointSelect:	
 17930                           
 17931                           	psect	text113
 17932  0879                     __ptext113:	
 17933 ;; *************** function _setBuz *****************
 17934 ;; Defined at:
 17935 ;;		line 30 in file "../src/Buzzer_B1.c"
 17936 ;; Parameters:    Size  Location     Type
 17937 ;;  count           1    wreg     unsigned char 
 17938 ;;  time            2    9[BANK0 ] int 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;  count           1   12[BANK0 ] unsigned char 
 17941 ;; Return value:  Size  Location     Type
 17942 ;;		None               void
 17943 ;; Registers used:
 17944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;Total ram usage:        4 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    6
 17957 ;; This function calls:
 17958 ;;		___awdiv
 17959 ;; This function is called by:
 17960 ;;		_DlyOff_Main
 17961 ;;		_setDimmerLights_Main
 17962 ;;		_DimmerLights_Exceptions
 17963 ;;		_my_Main
 17964 ;;		_setOverTemp_Exceptions
 17965 ;;		_setLog_Code
 17966 ;;		_setControl_Lights_Table
 17967 ;;		_setRFSW_Control
 17968 ;;		_setSw_Main
 17969 ;;		_Sw_DimmerOnFunc
 17970 ;; This function uses a non-reentrant model
 17971 ;;
 17972                           
 17973                           
 17974                           ;psect for function _setBuz
 17975  0879                     _setBuz:	
 17976                           
 17977                           ;incstack = 0
 17978                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17979                           ;setBuz@count stored from wreg
 17980  0879  0020               	movlb	0	; select bank0
 17981  087A  00AC               	movwf	setBuz@count
 17982                           
 17983                           ;Buzzer_B1.c: 31: time /=10;
 17984  087B  300A               	movlw	10
 17985  087C  00A0               	movwf	___awdiv@divisor
 17986  087D  3000               	movlw	0
 17987  087E  00A1               	movwf	___awdiv@divisor+1
 17988  087F  082A               	movf	setBuz@time+1,w
 17989  0880  01A3               	clrf	___awdiv@dividend+1
 17990  0881  07A3               	addwf	___awdiv@dividend+1,f
 17991  0882  0829               	movf	setBuz@time,w
 17992  0883  01A2               	clrf	___awdiv@dividend
 17993  0884  07A2               	addwf	___awdiv@dividend,f
 17994  0885  3190  20FD  3188   	fcall	___awdiv
 17995  0888  0020               	movlb	0	; select bank0
 17996  0889  0821               	movf	?___awdiv+1,w
 17997  088A  01AA               	clrf	setBuz@time+1
 17998  088B  07AA               	addwf	setBuz@time+1,f
 17999  088C  0820               	movf	?___awdiv,w
 18000  088D  01A9               	clrf	setBuz@time
 18001  088E  07A9               	addwf	setBuz@time,f
 18002                           
 18003                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 18004  088F  0021               	movlb	1	; select bank1
 18005  0890  0837               	movf	_Buz^(0+128),w
 18006  0891  0086               	movwf	6
 18007  0892  3001               	movlw	1	; select bank2/3
 18008  0893  0087               	movwf	7
 18009  0894  1C01               	btfss	1,0
 18010  0895  0008               	return
 18011                           
 18012                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 18013  0896  0837               	movf	_Buz^(0+128),w
 18014  0897  0086               	movwf	6
 18015  0898  3001               	movlw	1	; select bank2/3
 18016  0899  0087               	movwf	7
 18017  089A  1881               	btfsc	1,1
 18018  089B  28BA               	goto	l6335
 18019                           
 18020                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 18021  089C  0837               	movf	_Buz^(0+128),w
 18022  089D  0086               	movwf	6
 18023  089E  3001               	movlw	1	; select bank2/3
 18024  089F  0087               	movwf	7
 18025  08A0  1481               	bsf	1,1
 18026                           
 18027                           ;Buzzer_B1.c: 35: Buz->Count = count;
 18028  08A1  0020               	movlb	0	; select bank0
 18029  08A2  082C               	movf	setBuz@count,w
 18030  08A3  00AB               	movwf	??_setBuz
 18031  08A4  0021               	movlb	1	; select bank1
 18032  08A5  0837               	movf	_Buz^(0+128),w
 18033  08A6  3E03               	addlw	3
 18034  08A7  0086               	movwf	6
 18035  08A8  3001               	movlw	1	; select bank2/3
 18036  08A9  0087               	movwf	7
 18037  08AA  0020               	movlb	0	; select bank0
 18038  08AB  082B               	movf	??_setBuz,w
 18039  08AC  0081               	movwf	1
 18040                           
 18041                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 18042  08AD  0021               	movlb	1	; select bank1
 18043  08AE  0837               	movf	_Buz^(0+128),w
 18044  08AF  3E06               	addlw	6
 18045  08B0  0086               	movwf	6
 18046  08B1  3001               	movlw	1	; select bank2/3
 18047  08B2  0087               	movwf	7
 18048  08B3  0020               	movlb	0	; select bank0
 18049  08B4  0829               	movf	setBuz@time,w
 18050  08B5  3FC0               	movwi [0]fsr1
 18051  08B6  082A               	movf	setBuz@time+1,w
 18052  08B7  3FC1               	movwi [1]fsr1
 18053                           
 18054                           ;Buzzer_B1.c: 37: RB3 = 1;
 18055  08B8  158D               	bsf	13,3	;volatile
 18056                           
 18057                           ;Buzzer_B1.c: 38: } else {
 18058  08B9  0008               	return
 18059  08BA                     l6335:	
 18060                           
 18061                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 18062  08BA  0021               	movlb	1	; select bank1
 18063  08BB  0837               	movf	_Buz^(0+128),w
 18064  08BC  0086               	movwf	6
 18065  08BD  3001               	movlw	1	; select bank2/3
 18066  08BE  0087               	movwf	7
 18067  08BF  1981               	btfsc	1,3
 18068  08C0  28DE               	goto	l6339
 18069                           
 18070                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 18071  08C1  0837               	movf	_Buz^(0+128),w
 18072  08C2  0086               	movwf	6
 18073  08C3  3001               	movlw	1	; select bank2/3
 18074  08C4  0087               	movwf	7
 18075  08C5  1581               	bsf	1,3
 18076                           
 18077                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 18078  08C6  0020               	movlb	0	; select bank0
 18079  08C7  082C               	movf	setBuz@count,w
 18080  08C8  00AB               	movwf	??_setBuz
 18081  08C9  0021               	movlb	1	; select bank1
 18082  08CA  0837               	movf	_Buz^(0+128),w
 18083  08CB  3E04               	addlw	4
 18084  08CC  0086               	movwf	6
 18085  08CD  3001               	movlw	1	; select bank2/3
 18086  08CE  0087               	movwf	7
 18087  08CF  0020               	movlb	0	; select bank0
 18088  08D0  082B               	movf	??_setBuz,w
 18089  08D1  0081               	movwf	1
 18090                           
 18091                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 18092  08D2  0021               	movlb	1	; select bank1
 18093  08D3  0837               	movf	_Buz^(0+128),w
 18094  08D4  3E08               	addlw	8
 18095  08D5  0086               	movwf	6
 18096  08D6  3001               	movlw	1	; select bank2/3
 18097  08D7  0087               	movwf	7
 18098  08D8  0020               	movlb	0	; select bank0
 18099  08D9  0829               	movf	setBuz@time,w
 18100  08DA  3FC0               	movwi [0]fsr1
 18101  08DB  082A               	movf	setBuz@time+1,w
 18102  08DC  3FC1               	movwi [1]fsr1
 18103                           
 18104                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 18105  08DD  0008               	return
 18106  08DE                     l6339:	
 18107  08DE  0021               	movlb	1	; select bank1
 18108  08DF  0837               	movf	_Buz^(0+128),w
 18109  08E0  0086               	movwf	6
 18110  08E1  3001               	movlw	1	; select bank2/3
 18111  08E2  0087               	movwf	7
 18112  08E3  1A01               	btfsc	1,4
 18113  08E4  0008               	return
 18114                           
 18115                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 18116  08E5  0837               	movf	_Buz^(0+128),w
 18117  08E6  0086               	movwf	6
 18118  08E7  3001               	movlw	1	; select bank2/3
 18119  08E8  0087               	movwf	7
 18120  08E9  1601               	bsf	1,4
 18121                           
 18122                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 18123  08EA  0020               	movlb	0	; select bank0
 18124  08EB  082C               	movf	setBuz@count,w
 18125  08EC  00AB               	movwf	??_setBuz
 18126  08ED  0021               	movlb	1	; select bank1
 18127  08EE  0837               	movf	_Buz^(0+128),w
 18128  08EF  3E05               	addlw	5
 18129  08F0  0086               	movwf	6
 18130  08F1  3001               	movlw	1	; select bank2/3
 18131  08F2  0087               	movwf	7
 18132  08F3  0020               	movlb	0	; select bank0
 18133  08F4  082B               	movf	??_setBuz,w
 18134  08F5  0081               	movwf	1
 18135                           
 18136                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 18137  08F6  0021               	movlb	1	; select bank1
 18138  08F7  0837               	movf	_Buz^(0+128),w
 18139  08F8  3E0A               	addlw	10
 18140  08F9  0086               	movwf	6
 18141  08FA  3001               	movlw	1	; select bank2/3
 18142  08FB  0087               	movwf	7
 18143  08FC  0020               	movlb	0	; select bank0
 18144  08FD  0829               	movf	setBuz@time,w
 18145  08FE  3FC0               	movwi [0]fsr1
 18146  08FF  082A               	movf	setBuz@time+1,w
 18147  0900  3FC1               	movwi [1]fsr1
 18148  0901  0008               	return
 18149  0902                     __end_of_setBuz:	
 18150                           
 18151                           	psect	text114
 18152  10FD                     __ptext114:	
 18153 ;; *************** function ___awdiv *****************
 18154 ;; Defined at:
 18155 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18156 ;; Parameters:    Size  Location     Type
 18157 ;;  divisor         2    0[BANK0 ] int 
 18158 ;;  dividend        2    2[BANK0 ] int 
 18159 ;; Auto vars:     Size  Location     Type
 18160 ;;  quotient        2    7[BANK0 ] int 
 18161 ;;  sign            1    6[BANK0 ] unsigned char 
 18162 ;;  counter         1    5[BANK0 ] unsigned char 
 18163 ;; Return value:  Size  Location     Type
 18164 ;;                  2    0[BANK0 ] int 
 18165 ;; Registers used:
 18166 ;;		wreg, status,2, status,0
 18167 ;; Tracked objects:
 18168 ;;		On entry : 0/0
 18169 ;;		On exit  : 0/0
 18170 ;;		Unchanged: 0/0
 18171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18172 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18173 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;Total ram usage:        9 bytes
 18177 ;; Hardware stack levels used:    1
 18178 ;; Hardware stack levels required when called:    5
 18179 ;; This function calls:
 18180 ;;		Nothing
 18181 ;; This function is called by:
 18182 ;;		_setBuz
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           
 18187                           ;psect for function ___awdiv
 18188  10FD                     ___awdiv:	
 18189                           
 18190                           ;incstack = 0
 18191                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18192  10FD  0020               	movlb	0	; select bank0
 18193  10FE  01A6               	clrf	___awdiv@sign
 18194  10FF  1FA1               	btfss	___awdiv@divisor+1,7
 18195  1100  2908               	goto	l6289
 18196  1101  09A0               	comf	___awdiv@divisor,f
 18197  1102  09A1               	comf	___awdiv@divisor+1,f
 18198  1103  0AA0               	incf	___awdiv@divisor,f
 18199  1104  1903               	skipnz
 18200  1105  0AA1               	incf	___awdiv@divisor+1,f
 18201  1106  01A6               	clrf	___awdiv@sign
 18202  1107  0AA6               	incf	___awdiv@sign,f
 18203  1108                     l6289:	
 18204  1108  1FA3               	btfss	___awdiv@dividend+1,7
 18205  1109  2913               	goto	l6295
 18206  110A  09A2               	comf	___awdiv@dividend,f
 18207  110B  09A3               	comf	___awdiv@dividend+1,f
 18208  110C  0AA2               	incf	___awdiv@dividend,f
 18209  110D  1903               	skipnz
 18210  110E  0AA3               	incf	___awdiv@dividend+1,f
 18211  110F  3001               	movlw	1
 18212  1110  00A4               	movwf	??___awdiv
 18213  1111  0824               	movf	??___awdiv,w
 18214  1112  06A6               	xorwf	___awdiv@sign,f
 18215  1113                     l6295:	
 18216  1113  01A7               	clrf	___awdiv@quotient
 18217  1114  01A8               	clrf	___awdiv@quotient+1
 18218  1115  0821               	movf	___awdiv@divisor+1,w
 18219  1116  0420               	iorwf	___awdiv@divisor,w
 18220  1117  1903               	skipnz
 18221  1118  2942               	goto	l6317
 18222  1119  01A5               	clrf	___awdiv@counter
 18223  111A  0AA5               	incf	___awdiv@counter,f
 18224  111B                     l6305:	
 18225  111B  1BA1               	btfsc	___awdiv@divisor+1,7
 18226  111C  2927               	goto	l6307
 18227  111D  3001               	movlw	1
 18228  111E                     u4785:	
 18229  111E  35A0               	lslf	___awdiv@divisor,f
 18230  111F  0DA1               	rlf	___awdiv@divisor+1,f
 18231  1120  0B89               	decfsz	9,f
 18232  1121  291E               	goto	u4785
 18233  1122  3001               	movlw	1
 18234  1123  00A4               	movwf	??___awdiv
 18235  1124  0824               	movf	??___awdiv,w
 18236  1125  07A5               	addwf	___awdiv@counter,f
 18237  1126  291B               	goto	l6305
 18238  1127                     l6307:	
 18239  1127  3001               	movlw	1
 18240  1128                     u4805:	
 18241  1128  35A7               	lslf	___awdiv@quotient,f
 18242  1129  0DA8               	rlf	___awdiv@quotient+1,f
 18243  112A  0B89               	decfsz	9,f
 18244  112B  2928               	goto	u4805
 18245  112C  0821               	movf	___awdiv@divisor+1,w
 18246  112D  0223               	subwf	___awdiv@dividend+1,w
 18247  112E  1D03               	skipz
 18248  112F  2932               	goto	u4815
 18249  1130  0820               	movf	___awdiv@divisor,w
 18250  1131  0222               	subwf	___awdiv@dividend,w
 18251  1132                     u4815:	
 18252  1132  1C03               	skipc
 18253  1133  2939               	goto	l6313
 18254  1134  0820               	movf	___awdiv@divisor,w
 18255  1135  02A2               	subwf	___awdiv@dividend,f
 18256  1136  0821               	movf	___awdiv@divisor+1,w
 18257  1137  3BA3               	subwfb	___awdiv@dividend+1,f
 18258  1138  1427               	bsf	___awdiv@quotient,0
 18259  1139                     l6313:	
 18260  1139  3001               	movlw	1
 18261  113A                     u4825:	
 18262  113A  36A1               	lsrf	___awdiv@divisor+1,f
 18263  113B  0CA0               	rrf	___awdiv@divisor,f
 18264  113C  0B89               	decfsz	9,f
 18265  113D  293A               	goto	u4825
 18266  113E  3001               	movlw	1
 18267  113F  02A5               	subwf	___awdiv@counter,f
 18268  1140  1D03               	btfss	3,2
 18269  1141  2927               	goto	l6307
 18270  1142                     l6317:	
 18271  1142  0826               	movf	___awdiv@sign,w
 18272  1143  1903               	btfsc	3,2
 18273  1144  294A               	goto	l6321
 18274  1145  09A7               	comf	___awdiv@quotient,f
 18275  1146  09A8               	comf	___awdiv@quotient+1,f
 18276  1147  0AA7               	incf	___awdiv@quotient,f
 18277  1148  1903               	skipnz
 18278  1149  0AA8               	incf	___awdiv@quotient+1,f
 18279  114A                     l6321:	
 18280  114A  0828               	movf	___awdiv@quotient+1,w
 18281  114B  01A1               	clrf	?___awdiv+1
 18282  114C  07A1               	addwf	?___awdiv+1,f
 18283  114D  0827               	movf	___awdiv@quotient,w
 18284  114E  01A0               	clrf	?___awdiv
 18285  114F  07A0               	addwf	?___awdiv,f
 18286  1150  0008               	return
 18287  1151                     __end_of___awdiv:	
 18288                           
 18289                           	psect	text115
 18290  25A8                     __ptext115:	
 18291 ;; *************** function _DelayOff_Initialization *****************
 18292 ;; Defined at:
 18293 ;;		line 26 in file "../src/DelayOff_B1.c"
 18294 ;; Parameters:    Size  Location     Type
 18295 ;;		None
 18296 ;; Auto vars:     Size  Location     Type
 18297 ;;		None
 18298 ;; Return value:  Size  Location     Type
 18299 ;;		None               void
 18300 ;; Registers used:
 18301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18302 ;; Tracked objects:
 18303 ;;		On entry : 0/0
 18304 ;;		On exit  : 0/0
 18305 ;;		Unchanged: 0/0
 18306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18311 ;;Total ram usage:        0 bytes
 18312 ;; Hardware stack levels used:    1
 18313 ;; Hardware stack levels required when called:    7
 18314 ;; This function calls:
 18315 ;;		_DlyOff_Initialization
 18316 ;; This function is called by:
 18317 ;;		_main
 18318 ;; This function uses a non-reentrant model
 18319 ;;
 18320                           
 18321                           
 18322                           ;psect for function _DelayOff_Initialization
 18323  25A8                     _DelayOff_Initialization:	
 18324                           
 18325                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18326                           
 18327                           ;incstack = 0
 18328                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18329  25A8  3001               	movlw	1
 18330  25A9  31A5  25E4  31A5   	fcall	_DlyOff_Initialization
 18331                           
 18332                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18333  25AC  3002               	movlw	2
 18334  25AD  31A5  25E4         	fcall	_DlyOff_Initialization
 18335  25AF  0008               	return
 18336  25B0                     __end_of_DelayOff_Initialization:	
 18337                           
 18338                           	psect	text116
 18339  25E4                     __ptext116:	
 18340 ;; *************** function _DlyOff_Initialization *****************
 18341 ;; Defined at:
 18342 ;;		line 56 in file "../src/DelayOff_B1.c"
 18343 ;; Parameters:    Size  Location     Type
 18344 ;;  sw              1    wreg     unsigned char 
 18345 ;; Auto vars:     Size  Location     Type
 18346 ;;  sw              1    2[BANK0 ] unsigned char 
 18347 ;; Return value:  Size  Location     Type
 18348 ;;		None               void
 18349 ;; Registers used:
 18350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18351 ;; Tracked objects:
 18352 ;;		On entry : 0/0
 18353 ;;		On exit  : 0/0
 18354 ;;		Unchanged: 0/0
 18355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18359 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18360 ;;Total ram usage:        1 bytes
 18361 ;; Hardware stack levels used:    1
 18362 ;; Hardware stack levels required when called:    6
 18363 ;; This function calls:
 18364 ;;		_DelayOffPointSelect
 18365 ;; This function is called by:
 18366 ;;		_DelayOff_Initialization
 18367 ;; This function uses a non-reentrant model
 18368 ;;
 18369                           
 18370                           
 18371                           ;psect for function _DlyOff_Initialization
 18372  25E4                     _DlyOff_Initialization:	
 18373                           
 18374                           ;incstack = 0
 18375                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18376                           ;DlyOff_Initialization@sw stored from wreg
 18377  25E4  0020               	movlb	0	; select bank0
 18378  25E5  00A2               	movwf	DlyOff_Initialization@sw
 18379                           
 18380                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18381  25E6  0822               	movf	DlyOff_Initialization@sw,w
 18382  25E7  3198  20DF         	fcall	_DelayOffPointSelect
 18383                           
 18384                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 18385  25E9  0021               	movlb	1	; select bank1
 18386  25EA  0839               	movf	_DelayOff^(0+128),w
 18387  25EB  0086               	movwf	6
 18388  25EC  0187               	clrf	7
 18389  25ED  1401               	bsf	1,0
 18390  25EE  0008               	return
 18391  25EF                     __end_of_DlyOff_Initialization:	
 18392                           
 18393                           	psect	text117
 18394  18DF                     __ptext117:	
 18395 ;; *************** function _DelayOffPointSelect *****************
 18396 ;; Defined at:
 18397 ;;		line 7 in file "../src/DelayOff_B1.c"
 18398 ;; Parameters:    Size  Location     Type
 18399 ;;  sw              1    wreg     unsigned char 
 18400 ;; Auto vars:     Size  Location     Type
 18401 ;;  sw              1    1[BANK0 ] unsigned char 
 18402 ;; Return value:  Size  Location     Type
 18403 ;;		None               void
 18404 ;; Registers used:
 18405 ;;		wreg
 18406 ;; Tracked objects:
 18407 ;;		On entry : 0/0
 18408 ;;		On exit  : 0/0
 18409 ;;		Unchanged: 0/0
 18410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18415 ;;Total ram usage:        2 bytes
 18416 ;; Hardware stack levels used:    1
 18417 ;; Hardware stack levels required when called:    5
 18418 ;; This function calls:
 18419 ;;		Nothing
 18420 ;; This function is called by:
 18421 ;;		_DlyOff_Initialization
 18422 ;;		_DlyOff_Main
 18423 ;;		_setDelayOff_GO
 18424 ;; This function uses a non-reentrant model
 18425 ;;
 18426                           
 18427                           
 18428                           ;psect for function _DelayOffPointSelect
 18429  18DF                     _DelayOffPointSelect:	
 18430                           
 18431                           ;incstack = 0
 18432                           ; Regs used in _DelayOffPointSelect: [wreg]
 18433                           ;DelayOffPointSelect@sw stored from wreg
 18434  18DF  0020               	movlb	0	; select bank0
 18435  18E0  00A1               	movwf	DelayOffPointSelect@sw
 18436                           
 18437                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18438  18E1  0821               	movf	DelayOffPointSelect@sw,w
 18439  18E2  3A01               	xorlw	1
 18440  18E3  1D03               	skipz
 18441  18E4  28EB               	goto	l6205
 18442                           
 18443                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18444  18E5  30C9               	movlw	_DlySw1& (0+255)
 18445  18E6  00A0               	movwf	??_DelayOffPointSelect
 18446  18E7  0820               	movf	??_DelayOffPointSelect,w
 18447  18E8  0021               	movlb	1	; select bank1
 18448  18E9  00B9               	movwf	_DelayOff^(0+128)
 18449                           
 18450                           ;DelayOff_B1.c: 11: }
 18451  18EA  0008               	return
 18452  18EB                     l6205:	
 18453                           
 18454                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18455  18EB  0020               	movlb	0	; select bank0
 18456  18EC  0821               	movf	DelayOffPointSelect@sw,w
 18457  18ED  3A02               	xorlw	2
 18458  18EE  1D03               	skipz
 18459  18EF  0008               	return
 18460                           
 18461                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18462  18F0  30CE               	movlw	_DlySw2& (0+255)
 18463  18F1  00A0               	movwf	??_DelayOffPointSelect
 18464  18F2  0820               	movf	??_DelayOffPointSelect,w
 18465  18F3  0021               	movlb	1	; select bank1
 18466  18F4  00B9               	movwf	_DelayOff^(0+128)
 18467  18F5  0008               	return
 18468  18F6                     __end_of_DelayOffPointSelect:	
 18469                           
 18470                           	psect	text118
 18471  1889                     __ptext118:	
 18472 ;; *************** function _CC2500_PowerOnInitial *****************
 18473 ;; Defined at:
 18474 ;;		line 96 in file "../src/CC2500_B1.c"
 18475 ;; Parameters:    Size  Location     Type
 18476 ;;		None
 18477 ;; Auto vars:     Size  Location     Type
 18478 ;;		None
 18479 ;; Return value:  Size  Location     Type
 18480 ;;		None               void
 18481 ;; Registers used:
 18482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18483 ;; Tracked objects:
 18484 ;;		On entry : 0/0
 18485 ;;		On exit  : 0/0
 18486 ;;		Unchanged: 0/0
 18487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;Total ram usage:        0 bytes
 18493 ;; Hardware stack levels used:    1
 18494 ;; Hardware stack levels required when called:    8
 18495 ;; This function calls:
 18496 ;;		_CC2500_ClearRXFIFO
 18497 ;;		_CC2500_ClearTXFIFO
 18498 ;;		_CC2500_FrequencyCabr
 18499 ;;		_CC2500_InitPATable
 18500 ;;		_CC2500_InitSetREG
 18501 ;;		_CC2500_PowerRST
 18502 ;;		_CC2500_SIDLEMode
 18503 ;; This function is called by:
 18504 ;;		_main
 18505 ;; This function uses a non-reentrant model
 18506 ;;
 18507                           
 18508                           
 18509                           ;psect for function _CC2500_PowerOnInitial
 18510  1889                     _CC2500_PowerOnInitial:	
 18511                           
 18512                           ;CC2500_B1.c: 97: CC2500_PowerRST();
 18513                           
 18514                           ;incstack = 0
 18515                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18516  1889  319C  247C  3198   	fcall	_CC2500_PowerRST
 18517                           
 18518                           ;CC2500_B1.c: 98: CC2500_InitSetREG();
 18519  188C  319B  239E  3198   	fcall	_CC2500_InitSetREG
 18520                           
 18521                           ;CC2500_B1.c: 99: CC2500_InitPATable();
 18522  188F  319A  226A  3198   	fcall	_CC2500_InitPATable
 18523                           
 18524                           ;CC2500_B1.c: 100: CC2500_ClearTXFIFO();
 18525  1892  31A5  2568  3198   	fcall	_CC2500_ClearTXFIFO
 18526                           
 18527                           ;CC2500_B1.c: 101: CC2500_ClearRXFIFO();
 18528  1895  31A5  2564  3198   	fcall	_CC2500_ClearRXFIFO
 18529                           
 18530                           ;CC2500_B1.c: 102: CC2500_FrequencyCabr();
 18531  1898  31A6  261C  3198   	fcall	_CC2500_FrequencyCabr
 18532                           
 18533                           ;CC2500_B1.c: 103: CC2500_SIDLEMode();
 18534  189B  31A5  256C         	fcall	_CC2500_SIDLEMode
 18535  189D  0008               	return
 18536  189E                     __end_of_CC2500_PowerOnInitial:	
 18537                           
 18538                           	psect	text119
 18539  256C                     __ptext119:	
 18540 ;; *************** function _CC2500_SIDLEMode *****************
 18541 ;; Defined at:
 18542 ;;		line 180 in file "../src/CC2500_B1.c"
 18543 ;; Parameters:    Size  Location     Type
 18544 ;;		None
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;		None
 18547 ;; Return value:  Size  Location     Type
 18548 ;;		None               void
 18549 ;; Registers used:
 18550 ;;		wreg, status,2, status,0, pclath, cstack
 18551 ;; Tracked objects:
 18552 ;;		On entry : 0/0
 18553 ;;		On exit  : 0/0
 18554 ;;		Unchanged: 0/0
 18555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18560 ;;Total ram usage:        0 bytes
 18561 ;; Hardware stack levels used:    1
 18562 ;; Hardware stack levels required when called:    7
 18563 ;; This function calls:
 18564 ;;		_CC2500_WriteCommand
 18565 ;; This function is called by:
 18566 ;;		_CC2500_PowerOnInitial
 18567 ;; This function uses a non-reentrant model
 18568 ;;
 18569                           
 18570                           
 18571                           ;psect for function _CC2500_SIDLEMode
 18572  256C                     _CC2500_SIDLEMode:	
 18573                           
 18574                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x36);
 18575                           
 18576                           ;incstack = 0
 18577                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 18578  256C  3036               	movlw	54
 18579  256D  31A6  26EE         	fcall	_CC2500_WriteCommand
 18580  256F  0008               	return
 18581  2570                     __end_of_CC2500_SIDLEMode:	
 18582                           
 18583                           	psect	text120
 18584  1C7C                     __ptext120:	
 18585 ;; *************** function _CC2500_PowerRST *****************
 18586 ;; Defined at:
 18587 ;;		line 109 in file "../src/CC2500_B1.c"
 18588 ;; Parameters:    Size  Location     Type
 18589 ;;		None
 18590 ;; Auto vars:     Size  Location     Type
 18591 ;;		None
 18592 ;; Return value:  Size  Location     Type
 18593 ;;		None               void
 18594 ;; Registers used:
 18595 ;;		wreg, status,2, status,0, pclath, cstack
 18596 ;; Tracked objects:
 18597 ;;		On entry : 0/0
 18598 ;;		On exit  : 0/0
 18599 ;;		Unchanged: 0/0
 18600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18604 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18605 ;;Total ram usage:        1 bytes
 18606 ;; Hardware stack levels used:    1
 18607 ;; Hardware stack levels required when called:    6
 18608 ;; This function calls:
 18609 ;;		_CC2500_WriteByte
 18610 ;;		_DelayTime_1us
 18611 ;; This function is called by:
 18612 ;;		_CC2500_PowerOnInitial
 18613 ;; This function uses a non-reentrant model
 18614 ;;
 18615                           
 18616                           
 18617                           ;psect for function _CC2500_PowerRST
 18618  1C7C                     _CC2500_PowerRST:	
 18619                           
 18620                           ;CC2500_B1.c: 110: RC1 = 0;
 18621                           
 18622                           ;incstack = 0
 18623                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 18624  1C7C  0020               	movlb	0	; select bank0
 18625  1C7D  108E               	bcf	14,1	;volatile
 18626                           
 18627                           ;CC2500_B1.c: 111: RC0 = 0;
 18628  1C7E  100E               	bcf	14,0	;volatile
 18629                           
 18630                           ;CC2500_B1.c: 112: RC4 = 1;
 18631  1C7F  160E               	bsf	14,4	;volatile
 18632                           
 18633                           ;CC2500_B1.c: 113: DelayTime_1us(10);
 18634  1C80  300A               	movlw	10
 18635  1C81  00A0               	movwf	DelayTime_1us@count
 18636  1C82  3000               	movlw	0
 18637  1C83  00A1               	movwf	DelayTime_1us@count+1
 18638  1C84  319B  234F  319C   	fcall	_DelayTime_1us
 18639                           
 18640                           ;CC2500_B1.c: 114: RC4 = 0;
 18641  1C87  0020               	movlb	0	; select bank0
 18642  1C88  120E               	bcf	14,4	;volatile
 18643                           
 18644                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 18645  1C89  300A               	movlw	10
 18646  1C8A  00A0               	movwf	DelayTime_1us@count
 18647  1C8B  3000               	movlw	0
 18648  1C8C  00A1               	movwf	DelayTime_1us@count+1
 18649  1C8D  319B  234F  319C   	fcall	_DelayTime_1us
 18650                           
 18651                           ;CC2500_B1.c: 116: RC4 = 1;
 18652  1C90  0020               	movlb	0	; select bank0
 18653  1C91  160E               	bsf	14,4	;volatile
 18654                           
 18655                           ;CC2500_B1.c: 117: DelayTime_1us(40);
 18656  1C92  3028               	movlw	40
 18657  1C93  00A0               	movwf	DelayTime_1us@count
 18658  1C94  3000               	movlw	0
 18659  1C95  00A1               	movwf	DelayTime_1us@count+1
 18660  1C96  319B  234F  319C   	fcall	_DelayTime_1us
 18661                           
 18662                           ;CC2500_B1.c: 118: RC4 = 0;
 18663  1C99  0020               	movlb	0	; select bank0
 18664  1C9A  120E               	bcf	14,4	;volatile
 18665                           
 18666                           ;CC2500_B1.c: 119: SPI0Buffer = 0x30;
 18667  1C9B  3030               	movlw	48
 18668  1C9C  00A6               	movwf	??_CC2500_PowerRST
 18669  1C9D  0826               	movf	??_CC2500_PowerRST,w
 18670  1C9E  0021               	movlb	1	; select bank1
 18671  1C9F  00C3               	movwf	_SPI0Buffer^(0+128)
 18672  1CA0                     l321:	
 18673                           ;CC2500_B1.c: 120: while (RC2 == 1);
 18674                           
 18675  1CA0  0020               	movlb	0	; select bank0
 18676  1CA1  190E               	btfsc	14,2	;volatile
 18677  1CA2  2CA0               	goto	l321
 18678                           
 18679                           ;CC2500_B1.c: 121: CC2500_WriteByte();
 18680  1CA3  3199  213D  319C   	fcall	_CC2500_WriteByte
 18681  1CA6                     l324:	
 18682                           ;CC2500_B1.c: 122: while (RC2 == 1);
 18683                           
 18684  1CA6  0020               	movlb	0	; select bank0
 18685  1CA7  190E               	btfsc	14,2	;volatile
 18686  1CA8  2CA6               	goto	l324
 18687                           
 18688                           ;CC2500_B1.c: 123: RC0 = 0;
 18689  1CA9  100E               	bcf	14,0	;volatile
 18690                           
 18691                           ;CC2500_B1.c: 124: RC4 = 1;
 18692  1CAA  160E               	bsf	14,4	;volatile
 18693  1CAB  0008               	return
 18694  1CAC                     __end_of_CC2500_PowerRST:	
 18695                           
 18696                           	psect	text121
 18697  1B9E                     __ptext121:	
 18698 ;; *************** function _CC2500_InitSetREG *****************
 18699 ;; Defined at:
 18700 ;;		line 130 in file "../src/CC2500_B1.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;		None
 18703 ;; Auto vars:     Size  Location     Type
 18704 ;;  loop_c          1    8[BANK0 ] unsigned char 
 18705 ;;  temp2           1    7[BANK0 ] unsigned char 
 18706 ;;  temp1           1    6[BANK0 ] unsigned char 
 18707 ;; Return value:  Size  Location     Type
 18708 ;;		None               void
 18709 ;; Registers used:
 18710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18711 ;; Tracked objects:
 18712 ;;		On entry : 0/0
 18713 ;;		On exit  : 0/0
 18714 ;;		Unchanged: 0/0
 18715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18717 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18719 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18720 ;;Total ram usage:        4 bytes
 18721 ;; Hardware stack levels used:    1
 18722 ;; Hardware stack levels required when called:    7
 18723 ;; This function calls:
 18724 ;;		_CC2500_WriteREG
 18725 ;; This function is called by:
 18726 ;;		_CC2500_PowerOnInitial
 18727 ;; This function uses a non-reentrant model
 18728 ;;
 18729                           
 18730                           
 18731                           ;psect for function _CC2500_InitSetREG
 18732  1B9E                     _CC2500_InitSetREG:	
 18733                           
 18734                           ;CC2500_B1.c: 131: unsigned char loop_c;
 18735                           ;CC2500_B1.c: 132: unsigned char temp1, temp2;
 18736                           ;CC2500_B1.c: 134: for (loop_c = 0; loop_c < 47; loop_c++) {
 18737                           
 18738                           ;incstack = 0
 18739                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18740  1B9E  0020               	movlb	0	; select bank0
 18741  1B9F  01A8               	clrf	CC2500_InitSetREG@loop_c
 18742  1BA0                     L15:	
 18743  1BA0  302F               	movlw	47
 18744  1BA1  0228               	subwf	CC2500_InitSetREG@loop_c,w
 18745  1BA2  1803               	btfsc	3,0
 18746  1BA3  0008               	return
 18747                           
 18748                           ;CC2500_B1.c: 135: temp1 = CC2500_registers_address[loop_c];
 18749  1BA4  0828               	movf	CC2500_InitSetREG@loop_c,w
 18750  1BA5  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 18751  1BA6  0084               	movwf	4
 18752  1BA7  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 18753  1BA8  1803               	skipnc
 18754  1BA9  3E01               	addlw	1
 18755  1BAA  0085               	movwf	5
 18756  1BAB  0800               	movf	0,w	;code access
 18757  1BAC  00A5               	movwf	??_CC2500_InitSetREG
 18758  1BAD  0825               	movf	??_CC2500_InitSetREG,w
 18759  1BAE  00A6               	movwf	CC2500_InitSetREG@temp1
 18760                           
 18761                           ;CC2500_B1.c: 136: temp2 = CC2500_rfSettings[loop_c];
 18762  1BAF  0828               	movf	CC2500_InitSetREG@loop_c,w
 18763  1BB0  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 18764  1BB1  0084               	movwf	4
 18765  1BB2  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 18766  1BB3  1803               	skipnc
 18767  1BB4  3E01               	addlw	1
 18768  1BB5  0085               	movwf	5
 18769  1BB6  0800               	movf	0,w	;code access
 18770  1BB7  00A5               	movwf	??_CC2500_InitSetREG
 18771  1BB8  0825               	movf	??_CC2500_InitSetREG,w
 18772  1BB9  00A7               	movwf	CC2500_InitSetREG@temp2
 18773                           
 18774                           ;CC2500_B1.c: 138: CC2500_WriteREG(temp1, temp2);
 18775  1BBA  0827               	movf	CC2500_InitSetREG@temp2,w
 18776  1BBB  00A5               	movwf	??_CC2500_InitSetREG
 18777  1BBC  0825               	movf	??_CC2500_InitSetREG,w
 18778  1BBD  00A2               	movwf	CC2500_WriteREG@value
 18779  1BBE  0826               	movf	CC2500_InitSetREG@temp1,w
 18780  1BBF  3199  2156  319B   	fcall	_CC2500_WriteREG
 18781  1BC2  3001               	movlw	1
 18782  1BC3  0020               	movlb	0	; select bank0
 18783  1BC4  00A5               	movwf	??_CC2500_InitSetREG
 18784  1BC5  0825               	movf	??_CC2500_InitSetREG,w
 18785  1BC6  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 18786  1BC7  2BA0               	goto	L15
 18787  1BC8                     __end_of_CC2500_InitSetREG:	
 18788                           
 18789                           	psect	text122
 18790  1A6A                     __ptext122:	
 18791 ;; *************** function _CC2500_InitPATable *****************
 18792 ;; Defined at:
 18793 ;;		line 145 in file "../src/CC2500_B1.c"
 18794 ;; Parameters:    Size  Location     Type
 18795 ;;		None
 18796 ;; Auto vars:     Size  Location     Type
 18797 ;;  loop_d          1    7[BANK0 ] unsigned char 
 18798 ;;  temp            1    6[BANK0 ] unsigned char 
 18799 ;; Return value:  Size  Location     Type
 18800 ;;		None               void
 18801 ;; Registers used:
 18802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18812 ;;Total ram usage:        3 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    7
 18815 ;; This function calls:
 18816 ;;		_CC2500_WriteREG
 18817 ;; This function is called by:
 18818 ;;		_CC2500_PowerOnInitial
 18819 ;; This function uses a non-reentrant model
 18820 ;;
 18821                           
 18822                           
 18823                           ;psect for function _CC2500_InitPATable
 18824  1A6A                     _CC2500_InitPATable:	
 18825                           
 18826                           ;CC2500_B1.c: 146: unsigned char loop_d;
 18827                           ;CC2500_B1.c: 147: unsigned char temp;
 18828                           ;CC2500_B1.c: 149: for (loop_d = 0; loop_d < 8; loop_d++) {
 18829                           
 18830                           ;incstack = 0
 18831                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18832  1A6A  0020               	movlb	0	; select bank0
 18833  1A6B  01A7               	clrf	CC2500_InitPATable@loop_d
 18834  1A6C                     L16:	
 18835  1A6C  3008               	movlw	8
 18836  1A6D  0227               	subwf	CC2500_InitPATable@loop_d,w
 18837  1A6E  1803               	btfsc	3,0
 18838  1A6F  0008               	return
 18839                           
 18840                           ;CC2500_B1.c: 150: temp = CC2500_patable_vaule[loop_d];
 18841  1A70  0827               	movf	CC2500_InitPATable@loop_d,w
 18842  1A71  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 18843  1A72  0084               	movwf	4
 18844  1A73  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 18845  1A74  1803               	skipnc
 18846  1A75  3E01               	addlw	1
 18847  1A76  0085               	movwf	5
 18848  1A77  0800               	movf	0,w	;code access
 18849  1A78  00A5               	movwf	??_CC2500_InitPATable
 18850  1A79  0825               	movf	??_CC2500_InitPATable,w
 18851  1A7A  00A6               	movwf	CC2500_InitPATable@temp
 18852                           
 18853                           ;CC2500_B1.c: 151: CC2500_WriteREG(0x3E, temp);
 18854  1A7B  0826               	movf	CC2500_InitPATable@temp,w
 18855  1A7C  00A5               	movwf	??_CC2500_InitPATable
 18856  1A7D  0825               	movf	??_CC2500_InitPATable,w
 18857  1A7E  00A2               	movwf	CC2500_WriteREG@value
 18858  1A7F  303E               	movlw	62
 18859  1A80  3199  2156  319A   	fcall	_CC2500_WriteREG
 18860  1A83  3001               	movlw	1
 18861  1A84  0020               	movlb	0	; select bank0
 18862  1A85  00A5               	movwf	??_CC2500_InitPATable
 18863  1A86  0825               	movf	??_CC2500_InitPATable,w
 18864  1A87  07A7               	addwf	CC2500_InitPATable@loop_d,f
 18865  1A88  2A6C               	goto	L16
 18866  1A89                     __end_of_CC2500_InitPATable:	
 18867                           
 18868                           	psect	text123
 18869  1956                     __ptext123:	
 18870 ;; *************** function _CC2500_WriteREG *****************
 18871 ;; Defined at:
 18872 ;;		line 222 in file "../src/CC2500_B1.c"
 18873 ;; Parameters:    Size  Location     Type
 18874 ;;  w_addr          1    wreg     unsigned char 
 18875 ;;  value           1    2[BANK0 ] unsigned char 
 18876 ;; Auto vars:     Size  Location     Type
 18877 ;;  w_addr          1    4[BANK0 ] unsigned char 
 18878 ;; Return value:  Size  Location     Type
 18879 ;;		None               void
 18880 ;; Registers used:
 18881 ;;		wreg, status,2, status,0, pclath, cstack
 18882 ;; Tracked objects:
 18883 ;;		On entry : 0/0
 18884 ;;		On exit  : 0/0
 18885 ;;		Unchanged: 0/0
 18886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18887 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;Total ram usage:        3 bytes
 18892 ;; Hardware stack levels used:    1
 18893 ;; Hardware stack levels required when called:    6
 18894 ;; This function calls:
 18895 ;;		_CC2500_WriteByte
 18896 ;; This function is called by:
 18897 ;;		_CC2500_InitSetREG
 18898 ;;		_CC2500_InitPATable
 18899 ;; This function uses a non-reentrant model
 18900 ;;
 18901                           
 18902                           
 18903                           ;psect for function _CC2500_WriteREG
 18904  1956                     _CC2500_WriteREG:	
 18905                           
 18906                           ;incstack = 0
 18907                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 18908                           ;CC2500_WriteREG@w_addr stored from wreg
 18909  1956  0020               	movlb	0	; select bank0
 18910  1957  00A4               	movwf	CC2500_WriteREG@w_addr
 18911                           
 18912                           ;CC2500_B1.c: 223: RC4 = 0;
 18913  1958  120E               	bcf	14,4	;volatile
 18914                           
 18915                           ;CC2500_B1.c: 224: SPI0Buffer = w_addr;
 18916  1959  0824               	movf	CC2500_WriteREG@w_addr,w
 18917  195A  00A3               	movwf	??_CC2500_WriteREG
 18918  195B  0823               	movf	??_CC2500_WriteREG,w
 18919  195C  0021               	movlb	1	; select bank1
 18920  195D  00C3               	movwf	_SPI0Buffer^(0+128)
 18921  195E                     l366:	
 18922                           ;CC2500_B1.c: 225: while (RC2 == 1);
 18923                           
 18924  195E  0020               	movlb	0	; select bank0
 18925  195F  190E               	btfsc	14,2	;volatile
 18926  1960  295E               	goto	l366
 18927                           
 18928                           ;CC2500_B1.c: 226: CC2500_WriteByte();
 18929  1961  3199  213D  3199   	fcall	_CC2500_WriteByte
 18930                           
 18931                           ;CC2500_B1.c: 227: SPI0Buffer = value;
 18932  1964  0020               	movlb	0	; select bank0
 18933  1965  0822               	movf	CC2500_WriteREG@value,w
 18934  1966  00A3               	movwf	??_CC2500_WriteREG
 18935  1967  0823               	movf	??_CC2500_WriteREG,w
 18936  1968  0021               	movlb	1	; select bank1
 18937  1969  00C3               	movwf	_SPI0Buffer^(0+128)
 18938                           
 18939                           ;CC2500_B1.c: 228: CC2500_WriteByte();
 18940  196A  3199  213D         	fcall	_CC2500_WriteByte
 18941                           
 18942                           ;CC2500_B1.c: 229: RC4 = 1;
 18943  196C  0020               	movlb	0	; select bank0
 18944  196D  160E               	bsf	14,4	;volatile
 18945  196E  0008               	return
 18946  196F                     __end_of_CC2500_WriteREG:	
 18947                           
 18948                           	psect	text124
 18949  261C                     __ptext124:	
 18950 ;; *************** function _CC2500_FrequencyCabr *****************
 18951 ;; Defined at:
 18952 ;;		line 172 in file "../src/CC2500_B1.c"
 18953 ;; Parameters:    Size  Location     Type
 18954 ;;		None
 18955 ;; Auto vars:     Size  Location     Type
 18956 ;;		None
 18957 ;; Return value:  Size  Location     Type
 18958 ;;		None               void
 18959 ;; Registers used:
 18960 ;;		wreg, status,2, status,0, pclath, cstack
 18961 ;; Tracked objects:
 18962 ;;		On entry : 0/0
 18963 ;;		On exit  : 0/0
 18964 ;;		Unchanged: 0/0
 18965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18970 ;;Total ram usage:        0 bytes
 18971 ;; Hardware stack levels used:    1
 18972 ;; Hardware stack levels required when called:    7
 18973 ;; This function calls:
 18974 ;;		_CC2500_WriteCommand
 18975 ;;		_DelayTime_1us
 18976 ;; This function is called by:
 18977 ;;		_CC2500_PowerOnInitial
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           
 18982                           ;psect for function _CC2500_FrequencyCabr
 18983  261C                     _CC2500_FrequencyCabr:	
 18984                           
 18985                           ;CC2500_B1.c: 173: CC2500_WriteCommand(0x33);
 18986                           
 18987                           ;incstack = 0
 18988                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 18989  261C  3033               	movlw	51
 18990  261D  31A6  26EE  31A6   	fcall	_CC2500_WriteCommand
 18991                           
 18992                           ;CC2500_B1.c: 174: DelayTime_1us(1000);
 18993  2620  30E8               	movlw	232
 18994  2621  0020               	movlb	0	; select bank0
 18995  2622  00A0               	movwf	DelayTime_1us@count
 18996  2623  3003               	movlw	3
 18997  2624  00A1               	movwf	DelayTime_1us@count+1
 18998  2625  319B  234F         	fcall	_DelayTime_1us
 18999  2627  0008               	return
 19000  2628                     __end_of_CC2500_FrequencyCabr:	
 19001                           
 19002                           	psect	text125
 19003  1B4F                     __ptext125:	
 19004 ;; *************** function _DelayTime_1us *****************
 19005 ;; Defined at:
 19006 ;;		line 278 in file "../src/CC2500_B1.c"
 19007 ;; Parameters:    Size  Location     Type
 19008 ;;  count           2    0[BANK0 ] int 
 19009 ;; Auto vars:     Size  Location     Type
 19010 ;;  j               2    4[BANK0 ] unsigned int 
 19011 ;;  i               2    2[BANK0 ] unsigned int 
 19012 ;; Return value:  Size  Location     Type
 19013 ;;		None               void
 19014 ;; Registers used:
 19015 ;;		wreg, status,2
 19016 ;; Tracked objects:
 19017 ;;		On entry : 0/0
 19018 ;;		On exit  : 0/0
 19019 ;;		Unchanged: 0/0
 19020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19022 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19025 ;;Total ram usage:        6 bytes
 19026 ;; Hardware stack levels used:    1
 19027 ;; Hardware stack levels required when called:    5
 19028 ;; This function calls:
 19029 ;;		Nothing
 19030 ;; This function is called by:
 19031 ;;		_CC2500_PowerRST
 19032 ;;		_CC2500_FrequencyCabr
 19033 ;; This function uses a non-reentrant model
 19034 ;;
 19035                           
 19036                           
 19037                           ;psect for function _DelayTime_1us
 19038  1B4F                     _DelayTime_1us:	
 19039                           
 19040                           ;CC2500_B1.c: 279: unsigned int i, j;
 19041                           ;CC2500_B1.c: 280: for (i = 1; i < count; i++)
 19042                           
 19043                           ;incstack = 0
 19044                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19045  1B4F  3001               	movlw	1
 19046  1B50  0020               	movlb	0	; select bank0
 19047  1B51  00A2               	movwf	DelayTime_1us@i
 19048  1B52  3000               	movlw	0
 19049  1B53  00A3               	movwf	DelayTime_1us@i+1
 19050  1B54                     l390:	
 19051  1B54  0821               	movf	DelayTime_1us@count+1,w
 19052  1B55  0223               	subwf	DelayTime_1us@i+1,w
 19053  1B56  1D03               	skipz
 19054  1B57  2B5A               	goto	u5625
 19055  1B58  0820               	movf	DelayTime_1us@count,w
 19056  1B59  0222               	subwf	DelayTime_1us@i,w
 19057  1B5A                     u5625:	
 19058  1B5A  1803               	btfsc	3,0
 19059  1B5B  0008               	return
 19060                           
 19061                           ;CC2500_B1.c: 281: for (j = 0; j <= 1; j++);
 19062  1B5C  01A4               	clrf	DelayTime_1us@j
 19063  1B5D  01A5               	clrf	DelayTime_1us@j+1
 19064  1B5E  3000               	movlw	0
 19065  1B5F  0225               	subwf	DelayTime_1us@j+1,w
 19066  1B60  3002               	movlw	2
 19067  1B61  1903               	skipnz
 19068  1B62  0224               	subwf	DelayTime_1us@j,w
 19069  1B63  1803               	btfsc	3,0
 19070  1B64  2B70               	goto	l6871
 19071  1B65                     l6869:	
 19072  1B65  3001               	movlw	1
 19073  1B66  07A4               	addwf	DelayTime_1us@j,f
 19074  1B67  3000               	movlw	0
 19075  1B68  3DA5               	addwfc	DelayTime_1us@j+1,f
 19076  1B69  3000               	movlw	0
 19077  1B6A  0225               	subwf	DelayTime_1us@j+1,w
 19078  1B6B  3002               	movlw	2
 19079  1B6C  1903               	skipnz
 19080  1B6D  0224               	subwf	DelayTime_1us@j,w
 19081  1B6E  1C03               	skipc
 19082  1B6F  2B65               	goto	l6869
 19083  1B70                     l6871:	
 19084  1B70  3001               	movlw	1
 19085  1B71  07A2               	addwf	DelayTime_1us@i,f
 19086  1B72  3000               	movlw	0
 19087  1B73  3DA3               	addwfc	DelayTime_1us@i+1,f
 19088  1B74  2B54               	goto	l390
 19089  1B75                     __end_of_DelayTime_1us:	
 19090                           
 19091                           	psect	text126
 19092  2568                     __ptext126:	
 19093 ;; *************** function _CC2500_ClearTXFIFO *****************
 19094 ;; Defined at:
 19095 ;;		line 158 in file "../src/CC2500_B1.c"
 19096 ;; Parameters:    Size  Location     Type
 19097 ;;		None
 19098 ;; Auto vars:     Size  Location     Type
 19099 ;;		None
 19100 ;; Return value:  Size  Location     Type
 19101 ;;		None               void
 19102 ;; Registers used:
 19103 ;;		wreg, status,2, status,0, pclath, cstack
 19104 ;; Tracked objects:
 19105 ;;		On entry : 0/0
 19106 ;;		On exit  : 0/0
 19107 ;;		Unchanged: 0/0
 19108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19113 ;;Total ram usage:        0 bytes
 19114 ;; Hardware stack levels used:    1
 19115 ;; Hardware stack levels required when called:    7
 19116 ;; This function calls:
 19117 ;;		_CC2500_WriteCommand
 19118 ;; This function is called by:
 19119 ;;		_CC2500_PowerOnInitial
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           
 19124                           ;psect for function _CC2500_ClearTXFIFO
 19125  2568                     _CC2500_ClearTXFIFO:	
 19126                           
 19127                           ;CC2500_B1.c: 159: CC2500_WriteCommand(0x3B);
 19128                           
 19129                           ;incstack = 0
 19130                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19131  2568  303B               	movlw	59
 19132  2569  31A6  26EE         	fcall	_CC2500_WriteCommand
 19133  256B  0008               	return
 19134  256C                     __end_of_CC2500_ClearTXFIFO:	
 19135                           
 19136                           	psect	text127
 19137  2564                     __ptext127:	
 19138 ;; *************** function _CC2500_ClearRXFIFO *****************
 19139 ;; Defined at:
 19140 ;;		line 165 in file "../src/CC2500_B1.c"
 19141 ;; Parameters:    Size  Location     Type
 19142 ;;		None
 19143 ;; Auto vars:     Size  Location     Type
 19144 ;;		None
 19145 ;; Return value:  Size  Location     Type
 19146 ;;		None               void
 19147 ;; Registers used:
 19148 ;;		wreg, status,2, status,0, pclath, cstack
 19149 ;; Tracked objects:
 19150 ;;		On entry : 0/0
 19151 ;;		On exit  : 0/0
 19152 ;;		Unchanged: 0/0
 19153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19158 ;;Total ram usage:        0 bytes
 19159 ;; Hardware stack levels used:    1
 19160 ;; Hardware stack levels required when called:    7
 19161 ;; This function calls:
 19162 ;;		_CC2500_WriteCommand
 19163 ;; This function is called by:
 19164 ;;		_CC2500_PowerOnInitial
 19165 ;; This function uses a non-reentrant model
 19166 ;;
 19167                           
 19168                           
 19169                           ;psect for function _CC2500_ClearRXFIFO
 19170  2564                     _CC2500_ClearRXFIFO:	
 19171                           
 19172                           ;CC2500_B1.c: 166: CC2500_WriteCommand(0x3A);
 19173                           
 19174                           ;incstack = 0
 19175                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19176  2564  303A               	movlw	58
 19177  2565  31A6  26EE         	fcall	_CC2500_WriteCommand
 19178  2567  0008               	return
 19179  2568                     __end_of_CC2500_ClearRXFIFO:	
 19180                           
 19181                           	psect	text128
 19182  26EE                     __ptext128:	
 19183 ;; *************** function _CC2500_WriteCommand *****************
 19184 ;; Defined at:
 19185 ;;		line 248 in file "../src/CC2500_B1.c"
 19186 ;; Parameters:    Size  Location     Type
 19187 ;;  command         1    wreg     unsigned char 
 19188 ;; Auto vars:     Size  Location     Type
 19189 ;;  command         1    3[BANK0 ] unsigned char 
 19190 ;; Return value:  Size  Location     Type
 19191 ;;		None               void
 19192 ;; Registers used:
 19193 ;;		wreg, status,2, status,0, pclath, cstack
 19194 ;; Tracked objects:
 19195 ;;		On entry : 0/0
 19196 ;;		On exit  : 0/0
 19197 ;;		Unchanged: 0/0
 19198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19203 ;;Total ram usage:        2 bytes
 19204 ;; Hardware stack levels used:    1
 19205 ;; Hardware stack levels required when called:    6
 19206 ;; This function calls:
 19207 ;;		_CC2500_WriteByte
 19208 ;; This function is called by:
 19209 ;;		_CC2500_TxData
 19210 ;;		_CC2500_RxData
 19211 ;;		_CC2500_ClearTXFIFO
 19212 ;;		_CC2500_ClearRXFIFO
 19213 ;;		_CC2500_FrequencyCabr
 19214 ;;		_CC2500_SIDLEMode
 19215 ;;		_setRF_Main
 19216 ;;		_RF_RxDisable
 19217 ;; This function uses a non-reentrant model
 19218 ;;
 19219                           
 19220                           
 19221                           ;psect for function _CC2500_WriteCommand
 19222  26EE                     _CC2500_WriteCommand:	
 19223                           
 19224                           ;incstack = 0
 19225                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19226                           ;CC2500_WriteCommand@command stored from wreg
 19227  26EE  0020               	movlb	0	; select bank0
 19228  26EF  00A3               	movwf	CC2500_WriteCommand@command
 19229                           
 19230                           ;CC2500_B1.c: 249: RC4 = 0;
 19231  26F0  120E               	bcf	14,4	;volatile
 19232                           
 19233                           ;CC2500_B1.c: 250: SPI0Buffer = command;
 19234  26F1  0823               	movf	CC2500_WriteCommand@command,w
 19235  26F2  00A2               	movwf	??_CC2500_WriteCommand
 19236  26F3  0822               	movf	??_CC2500_WriteCommand,w
 19237  26F4  0021               	movlb	1	; select bank1
 19238  26F5  00C3               	movwf	_SPI0Buffer^(0+128)
 19239  26F6                     l378:	
 19240                           ;CC2500_B1.c: 252: while (RC2 == 1);
 19241                           
 19242  26F6  0020               	movlb	0	; select bank0
 19243  26F7  190E               	btfsc	14,2	;volatile
 19244  26F8  2EF6               	goto	l378
 19245                           
 19246                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 19247  26F9  3199  213D         	fcall	_CC2500_WriteByte
 19248                           
 19249                           ;CC2500_B1.c: 255: RC4 = 1;
 19250  26FB  0020               	movlb	0	; select bank0
 19251  26FC  160E               	bsf	14,4	;volatile
 19252  26FD  0008               	return
 19253  26FE                     __end_of_CC2500_WriteCommand:	
 19254                           
 19255                           	psect	text129
 19256  193D                     __ptext129:	
 19257 ;; *************** function _CC2500_WriteByte *****************
 19258 ;; Defined at:
 19259 ;;		line 190 in file "../src/CC2500_B1.c"
 19260 ;; Parameters:    Size  Location     Type
 19261 ;;		None
 19262 ;; Auto vars:     Size  Location     Type
 19263 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19264 ;; Return value:  Size  Location     Type
 19265 ;;		None               void
 19266 ;; Registers used:
 19267 ;;		wreg, status,2, status,0
 19268 ;; Tracked objects:
 19269 ;;		On entry : 0/0
 19270 ;;		On exit  : 0/0
 19271 ;;		Unchanged: 0/0
 19272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19277 ;;Total ram usage:        2 bytes
 19278 ;; Hardware stack levels used:    1
 19279 ;; Hardware stack levels required when called:    5
 19280 ;; This function calls:
 19281 ;;		Nothing
 19282 ;; This function is called by:
 19283 ;;		_CC2500_TxData
 19284 ;;		_CC2500_RxData
 19285 ;;		_CC2500_PowerRST
 19286 ;;		_CC2500_WriteREG
 19287 ;;		_CC2500_WriteCommand
 19288 ;;		_CC2500_ReadStatus
 19289 ;;		_CC2500_ReadREG
 19290 ;; This function uses a non-reentrant model
 19291 ;;
 19292                           
 19293                           
 19294                           ;psect for function _CC2500_WriteByte
 19295  193D                     _CC2500_WriteByte:	
 19296                           
 19297                           ;CC2500_B1.c: 191: unsigned char loop_a;
 19298                           ;CC2500_B1.c: 192: for (loop_a = 0; loop_a < 8; loop_a++) {
 19299                           
 19300                           ;incstack = 0
 19301                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19302  193D  0020               	movlb	0	; select bank0
 19303  193E  01A1               	clrf	CC2500_WriteByte@loop_a
 19304  193F                     L17:	
 19305  193F  3008               	movlw	8
 19306  1940  0221               	subwf	CC2500_WriteByte@loop_a,w
 19307  1941  1803               	btfsc	3,0
 19308  1942  0008               	return
 19309                           
 19310                           ;CC2500_B1.c: 193: if (SPI0Buffer & 0x80)
 19311  1943  0021               	movlb	1	; select bank1
 19312  1944  1FC3               	btfss	_SPI0Buffer^(0+128),7
 19313  1945  2949               	goto	l354
 19314                           
 19315                           ;CC2500_B1.c: 194: RC0 = 1;
 19316  1946  0020               	movlb	0	; select bank0
 19317  1947  140E               	bsf	14,0	;volatile
 19318  1948  294B               	goto	l355
 19319  1949                     l354:	
 19320                           
 19321                           ;CC2500_B1.c: 195: else
 19322                           ;CC2500_B1.c: 196: RC0 = 0;
 19323  1949  0020               	movlb	0	; select bank0
 19324  194A  100E               	bcf	14,0	;volatile
 19325  194B                     l355:	
 19326                           
 19327                           ;CC2500_B1.c: 197: RC1 = 1;
 19328  194B  148E               	bsf	14,1	;volatile
 19329                           
 19330                           ;CC2500_B1.c: 198: SPI0Buffer <<= 1;
 19331  194C  1003               	clrc
 19332  194D  0021               	movlb	1	; select bank1
 19333  194E  0DC3               	rlf	_SPI0Buffer^(0+128),f
 19334                           
 19335                           ;CC2500_B1.c: 199: RC1 = 0;
 19336  194F  0020               	movlb	0	; select bank0
 19337  1950  108E               	bcf	14,1	;volatile
 19338  1951  3001               	movlw	1
 19339  1952  00A0               	movwf	??_CC2500_WriteByte
 19340  1953  0820               	movf	??_CC2500_WriteByte,w
 19341  1954  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19342  1955  293F               	goto	L17
 19343  1956                     __end_of_CC2500_WriteByte:	
 19344                           
 19345                           	psect	text130
 19346  0C8D                     __ptext130:	
 19347 ;; *************** function _Buzzer_Main *****************
 19348 ;; Defined at:
 19349 ;;		line 53 in file "../src/Buzzer_B1.c"
 19350 ;; Parameters:    Size  Location     Type
 19351 ;;		None
 19352 ;; Auto vars:     Size  Location     Type
 19353 ;;		None
 19354 ;; Return value:  Size  Location     Type
 19355 ;;		None               void
 19356 ;; Registers used:
 19357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19358 ;; Tracked objects:
 19359 ;;		On entry : 0/0
 19360 ;;		On exit  : 0/0
 19361 ;;		Unchanged: 0/0
 19362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19365 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19366 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19367 ;;Total ram usage:        4 bytes
 19368 ;; Hardware stack levels used:    1
 19369 ;; Hardware stack levels required when called:    5
 19370 ;; This function calls:
 19371 ;;		Nothing
 19372 ;; This function is called by:
 19373 ;;		_main
 19374 ;; This function uses a non-reentrant model
 19375 ;;
 19376                           
 19377                           
 19378                           ;psect for function _Buzzer_Main
 19379  0C8D                     _Buzzer_Main:	
 19380                           
 19381                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 19382                           
 19383                           ;incstack = 0
 19384                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19385  0C8D  0021               	movlb	1	; select bank1
 19386  0C8E  0837               	movf	_Buz^(0+128),w
 19387  0C8F  0086               	movwf	6
 19388  0C90  3001               	movlw	1	; select bank2/3
 19389  0C91  0087               	movwf	7
 19390  0C92  1281               	bcf	1,5
 19391  0C93  0020               	movlb	0	; select bank0
 19392  0C94  198D               	btfsc	13,3	;volatile
 19393  0C95  1681               	bsf	1,5
 19394                           
 19395                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 19396  0C96  0021               	movlb	1	; select bank1
 19397  0C97  0837               	movf	_Buz^(0+128),w
 19398  0C98  3E06               	addlw	6
 19399  0C99  0086               	movwf	6
 19400  0C9A  3001               	movlw	1	; select bank2/3
 19401  0C9B  0087               	movwf	7
 19402  0C9C  3F40               	moviw [0]fsr1
 19403  0C9D  0020               	movlb	0	; select bank0
 19404  0C9E  00A0               	movwf	??_Buzzer_Main
 19405  0C9F  3F41               	moviw [1]fsr1
 19406  0CA0  00A1               	movwf	??_Buzzer_Main+1
 19407  0CA1  0021               	movlb	1	; select bank1
 19408  0CA2  0A37               	incf	_Buz^(0+128),w
 19409  0CA3  0086               	movwf	6
 19410  0CA4  3001               	movlw	1	; select bank2/3
 19411  0CA5  0087               	movwf	7
 19412  0CA6  3F40               	moviw [0]fsr1
 19413  0CA7  0020               	movlb	0	; select bank0
 19414  0CA8  00A2               	movwf	??_Buzzer_Main+2
 19415  0CA9  3F41               	moviw [1]fsr1
 19416  0CAA  00A3               	movwf	??_Buzzer_Main+3
 19417  0CAB  0821               	movf	??_Buzzer_Main+1,w
 19418  0CAC  0223               	subwf	??_Buzzer_Main+3,w
 19419  0CAD  1D03               	skipz
 19420  0CAE  2CB1               	goto	u7225
 19421  0CAF  0820               	movf	??_Buzzer_Main,w
 19422  0CB0  0222               	subwf	??_Buzzer_Main+2,w
 19423  0CB1                     u7225:	
 19424  0CB1  1C03               	skipc
 19425  0CB2  0008               	return
 19426                           
 19427                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 19428  0CB3  0021               	movlb	1	; select bank1
 19429  0CB4  0A37               	incf	_Buz^(0+128),w
 19430  0CB5  0086               	movwf	6
 19431  0CB6  3001               	movlw	1	; select bank2/3
 19432  0CB7  0087               	movwf	7
 19433  0CB8  3000               	movlw	0
 19434  0CB9  3FC0               	movwi [0]fsr1
 19435  0CBA  3FC1               	movwi [1]fsr1
 19436                           
 19437                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 19438  0CBB  0837               	movf	_Buz^(0+128),w
 19439  0CBC  0086               	movwf	6
 19440  0CBD  3001               	movlw	1	; select bank2/3
 19441  0CBE  0087               	movwf	7
 19442  0CBF  1A81               	btfsc	1,5
 19443  0CC0  2D2F               	goto	l7905
 19444                           
 19445                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 19446  0CC1  0837               	movf	_Buz^(0+128),w
 19447  0CC2  3E03               	addlw	3
 19448  0CC3  0086               	movwf	6
 19449  0CC4  3001               	movlw	1	; select bank2/3
 19450  0CC5  0087               	movwf	7
 19451  0CC6  0881               	movf	1,f
 19452  0CC7  1D03               	skipz
 19453  0CC8  2D27               	goto	l7901
 19454                           
 19455                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 19456  0CC9  0837               	movf	_Buz^(0+128),w
 19457  0CCA  0086               	movwf	6
 19458  0CCB  3001               	movlw	1	; select bank2/3
 19459  0CCC  0087               	movwf	7
 19460  0CCD  1D81               	btfss	1,3
 19461  0CCE  2CF5               	goto	l7893
 19462                           
 19463                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 19464  0CCF  0837               	movf	_Buz^(0+128),w
 19465  0CD0  0086               	movwf	6
 19466  0CD1  3001               	movlw	1	; select bank2/3
 19467  0CD2  0087               	movwf	7
 19468  0CD3  1181               	bcf	1,3
 19469                           
 19470                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 19471  0CD4  0837               	movf	_Buz^(0+128),w
 19472  0CD5  3E04               	addlw	4
 19473  0CD6  0086               	movwf	6
 19474  0CD7  3001               	movlw	1	; select bank2/3
 19475  0CD8  0087               	movwf	7
 19476  0CD9  0801               	movf	1,w
 19477  0CDA  0020               	movlb	0	; select bank0
 19478  0CDB  00A0               	movwf	??_Buzzer_Main
 19479  0CDC  0021               	movlb	1	; select bank1
 19480  0CDD  0837               	movf	_Buz^(0+128),w
 19481  0CDE  3E03               	addlw	3
 19482  0CDF  0086               	movwf	6
 19483  0CE0  3001               	movlw	1	; select bank2/3
 19484  0CE1  0087               	movwf	7
 19485  0CE2  0020               	movlb	0	; select bank0
 19486  0CE3  0820               	movf	??_Buzzer_Main,w
 19487  0CE4  0081               	movwf	1
 19488                           
 19489                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 19490  0CE5  0021               	movlb	1	; select bank1
 19491  0CE6  0837               	movf	_Buz^(0+128),w
 19492  0CE7  3E08               	addlw	8
 19493  0CE8  0086               	movwf	6
 19494  0CE9  3001               	movlw	1	; select bank2/3
 19495  0CEA  0087               	movwf	7
 19496  0CEB  0837               	movf	_Buz^(0+128),w
 19497  0CEC  3E06               	addlw	6
 19498  0CED  0084               	movwf	4
 19499  0CEE  3001               	movlw	1	; select bank2/3
 19500  0CEF  0085               	movwf	5
 19501  0CF0  3F40               	moviw [0]fsr1
 19502  0CF1  3F80               	movwi [0]fsr0
 19503  0CF2  3F41               	moviw [1]fsr1
 19504  0CF3  3F81               	movwi [1]fsr0
 19505                           
 19506                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 19507  0CF4  0008               	return
 19508  0CF5                     l7893:	
 19509  0CF5  0837               	movf	_Buz^(0+128),w
 19510  0CF6  0086               	movwf	6
 19511  0CF7  3001               	movlw	1	; select bank2/3
 19512  0CF8  0087               	movwf	7
 19513  0CF9  1E01               	btfss	1,4
 19514  0CFA  2D21               	goto	l7899
 19515                           
 19516                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 19517  0CFB  0837               	movf	_Buz^(0+128),w
 19518  0CFC  0086               	movwf	6
 19519  0CFD  3001               	movlw	1	; select bank2/3
 19520  0CFE  0087               	movwf	7
 19521  0CFF  1201               	bcf	1,4
 19522                           
 19523                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 19524  0D00  0837               	movf	_Buz^(0+128),w
 19525  0D01  3E05               	addlw	5
 19526  0D02  0086               	movwf	6
 19527  0D03  3001               	movlw	1	; select bank2/3
 19528  0D04  0087               	movwf	7
 19529  0D05  0801               	movf	1,w
 19530  0D06  0020               	movlb	0	; select bank0
 19531  0D07  00A0               	movwf	??_Buzzer_Main
 19532  0D08  0021               	movlb	1	; select bank1
 19533  0D09  0837               	movf	_Buz^(0+128),w
 19534  0D0A  3E03               	addlw	3
 19535  0D0B  0086               	movwf	6
 19536  0D0C  3001               	movlw	1	; select bank2/3
 19537  0D0D  0087               	movwf	7
 19538  0D0E  0020               	movlb	0	; select bank0
 19539  0D0F  0820               	movf	??_Buzzer_Main,w
 19540  0D10  0081               	movwf	1
 19541                           
 19542                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 19543  0D11  0021               	movlb	1	; select bank1
 19544  0D12  0837               	movf	_Buz^(0+128),w
 19545  0D13  3E0A               	addlw	10
 19546  0D14  0086               	movwf	6
 19547  0D15  3001               	movlw	1	; select bank2/3
 19548  0D16  0087               	movwf	7
 19549  0D17  0837               	movf	_Buz^(0+128),w
 19550  0D18  3E06               	addlw	6
 19551  0D19  0084               	movwf	4
 19552  0D1A  3001               	movlw	1	; select bank2/3
 19553  0D1B  0085               	movwf	5
 19554  0D1C  3F40               	moviw [0]fsr1
 19555  0D1D  3F80               	movwi [0]fsr0
 19556  0D1E  3F41               	moviw [1]fsr1
 19557  0D1F  3F81               	movwi [1]fsr0
 19558                           
 19559                           ;Buzzer_B1.c: 68: } else {
 19560  0D20  0008               	return
 19561  0D21                     l7899:	
 19562                           
 19563                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 19564  0D21  0837               	movf	_Buz^(0+128),w
 19565  0D22  0086               	movwf	6
 19566  0D23  3001               	movlw	1	; select bank2/3
 19567  0D24  0087               	movwf	7
 19568  0D25  1081               	bcf	1,1
 19569                           
 19570                           ;Buzzer_B1.c: 70: }
 19571                           ;Buzzer_B1.c: 71: } else {
 19572  0D26  0008               	return
 19573  0D27                     l7901:	
 19574                           
 19575                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 19576  0D27  0837               	movf	_Buz^(0+128),w
 19577  0D28  0086               	movwf	6
 19578  0D29  3001               	movlw	1	; select bank2/3
 19579  0D2A  0087               	movwf	7
 19580  0D2B  1681               	bsf	1,5
 19581                           
 19582                           ;Buzzer_B1.c: 74: RB3 = 1;
 19583  0D2C  0020               	movlb	0	; select bank0
 19584  0D2D  158D               	bsf	13,3	;volatile
 19585                           
 19586                           ;Buzzer_B1.c: 75: }
 19587                           ;Buzzer_B1.c: 76: } else {
 19588  0D2E  0008               	return
 19589  0D2F                     l7905:	
 19590                           
 19591                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 19592  0D2F  0021               	movlb	1	; select bank1
 19593  0D30  0837               	movf	_Buz^(0+128),w
 19594  0D31  0086               	movwf	6
 19595  0D32  3001               	movlw	1	; select bank2/3
 19596  0D33  0087               	movwf	7
 19597  0D34  1281               	bcf	1,5
 19598                           
 19599                           ;Buzzer_B1.c: 79: RB3 = 0;
 19600  0D35  0020               	movlb	0	; select bank0
 19601  0D36  118D               	bcf	13,3	;volatile
 19602                           
 19603                           ;Buzzer_B1.c: 81: Buz->Count--;
 19604  0D37  0021               	movlb	1	; select bank1
 19605  0D38  0837               	movf	_Buz^(0+128),w
 19606  0D39  3E03               	addlw	3
 19607  0D3A  0086               	movwf	6
 19608  0D3B  3001               	movlw	1	; select bank2/3
 19609  0D3C  0087               	movwf	7
 19610  0D3D  3001               	movlw	1
 19611  0D3E  0281               	subwf	1,f
 19612  0D3F  0008               	return
 19613  0D40                     __end_of_Buzzer_Main:	
 19614                           
 19615                           	psect	text131
 19616  2610                     __ptext131:	
 19617 ;; *************** function _Buzzer_Initialization *****************
 19618 ;; Defined at:
 19619 ;;		line 11 in file "../src/Buzzer_B1.c"
 19620 ;; Parameters:    Size  Location     Type
 19621 ;;		None
 19622 ;; Auto vars:     Size  Location     Type
 19623 ;;		None
 19624 ;; Return value:  Size  Location     Type
 19625 ;;		None               void
 19626 ;; Registers used:
 19627 ;;		wreg, fsr1l, fsr1h
 19628 ;; Tracked objects:
 19629 ;;		On entry : 0/0
 19630 ;;		On exit  : 0/0
 19631 ;;		Unchanged: 0/0
 19632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19636 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19637 ;;Total ram usage:        1 bytes
 19638 ;; Hardware stack levels used:    1
 19639 ;; Hardware stack levels required when called:    5
 19640 ;; This function calls:
 19641 ;;		Nothing
 19642 ;; This function is called by:
 19643 ;;		_main
 19644 ;; This function uses a non-reentrant model
 19645 ;;
 19646                           
 19647                           
 19648                           ;psect for function _Buzzer_Initialization
 19649  2610                     _Buzzer_Initialization:	
 19650                           
 19651                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 19652                           
 19653                           ;incstack = 0
 19654                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 19655  2610  303E               	movlw	_Buz1& (0+255)
 19656  2611  0020               	movlb	0	; select bank0
 19657  2612  00A0               	movwf	??_Buzzer_Initialization
 19658  2613  0820               	movf	??_Buzzer_Initialization,w
 19659  2614  0021               	movlb	1	; select bank1
 19660  2615  00B7               	movwf	_Buz^(0+128)
 19661                           
 19662                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 19663  2616  0837               	movf	_Buz^(0+128),w
 19664  2617  0086               	movwf	6
 19665  2618  3001               	movlw	1	; select bank2/3
 19666  2619  0087               	movwf	7
 19667  261A  1401               	bsf	1,0
 19668  261B  0008               	return
 19669  261C                     __end_of_Buzzer_Initialization:	
 19670                           
 19671                           	psect	intentry
 19672  0004                     __pintentry:	
 19673 ;; *************** function _ISR *****************
 19674 ;; Defined at:
 19675 ;;		line 109 in file "../src/MCU_B1.c"
 19676 ;; Parameters:    Size  Location     Type
 19677 ;;		None
 19678 ;; Auto vars:     Size  Location     Type
 19679 ;;		None
 19680 ;; Return value:  Size  Location     Type
 19681 ;;		None               void
 19682 ;; Registers used:
 19683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19684 ;; Tracked objects:
 19685 ;;		On entry : 0/0
 19686 ;;		On exit  : 0/0
 19687 ;;		Unchanged: 0/0
 19688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19692 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19693 ;;Total ram usage:        1 bytes
 19694 ;; Hardware stack levels used:    1
 19695 ;; Hardware stack levels required when called:    4
 19696 ;; This function calls:
 19697 ;;		_INT_ISR
 19698 ;;		_IOC_ISR
 19699 ;;		_TMR0_ISR
 19700 ;; This function is called by:
 19701 ;;		Interrupt level 1
 19702 ;; This function uses a non-reentrant model
 19703 ;;
 19704                           
 19705  0004                     _ISR:	
 19706                           
 19707                           ;incstack = 0
 19708                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19709  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19710  0005  3180               	pagesel	$
 19711  0006  0020               	movlb	0	; select bank0
 19712  0007  087F               	movf	127,w
 19713  0008  00F7               	movwf	??_ISR
 19714                           
 19715                           ;MCU_B1.c: 111: IOC_ISR();
 19716  0009  31A7  276F  3180   	fcall	_IOC_ISR
 19717                           
 19718                           ;MCU_B1.c: 113: TMR0_ISR();
 19719  000C  319D  2542  3180   	fcall	_TMR0_ISR
 19720                           
 19721                           ;MCU_B1.c: 115: ;;
 19722                           ;MCU_B1.c: 119: INT_ISR();
 19723  000F  31A7  275E         	fcall	_INT_ISR
 19724  0011  0877               	movf	??_ISR,w
 19725  0012  0020               	movlb	0	; select bank0
 19726  0013  00FF               	movwf	127
 19727  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 19728  0015  0009               	retfie
 19729  0016                     __end_of_ISR:	
 19730                           
 19731                           	psect	text133
 19732  1D42                     __ptext133:	
 19733 ;; *************** function _TMR0_ISR *****************
 19734 ;; Defined at:
 19735 ;;		line 137 in file "../src/MCU_B1.c"
 19736 ;; Parameters:    Size  Location     Type
 19737 ;;		None
 19738 ;; Auto vars:     Size  Location     Type
 19739 ;;		None
 19740 ;; Return value:  Size  Location     Type
 19741 ;;		None               void
 19742 ;; Registers used:
 19743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19744 ;; Tracked objects:
 19745 ;;		On entry : 0/0
 19746 ;;		On exit  : 0/0
 19747 ;;		Unchanged: 0/0
 19748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19753 ;;Total ram usage:        0 bytes
 19754 ;; Hardware stack levels used:    1
 19755 ;; Hardware stack levels required when called:    2
 19756 ;; This function calls:
 19757 ;;		_Buz_Counter
 19758 ;;		_setDimmerLights_IntrControl
 19759 ;; This function is called by:
 19760 ;;		_ISR
 19761 ;; This function uses a non-reentrant model
 19762 ;;
 19763                           
 19764                           
 19765                           ;psect for function _TMR0_ISR
 19766  1D42                     _TMR0_ISR:	
 19767                           
 19768                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 19769                           
 19770                           ;incstack = 0
 19771                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19772  1D42  1E8B               	btfss	11,5	;volatile
 19773  1D43  0008               	return
 19774  1D44  1D0B               	btfss	11,2	;volatile
 19775  1D45  0008               	return
 19776                           
 19777                           ;MCU_B1.c: 139: TMR0 = (256-190);
 19778  1D46  3042               	movlw	66
 19779  1D47  0020               	movlb	0	; select bank0
 19780  1D48  0095               	movwf	21	;volatile
 19781                           
 19782                           ;MCU_B1.c: 140: TMR0IF = 0;
 19783  1D49  110B               	bcf	11,2	;volatile
 19784                           
 19785                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 19786  1D4A  3001               	movlw	1
 19787  1D4B  3182  22F9  319D   	fcall	_setDimmerLights_IntrControl
 19788                           
 19789                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 19790  1D4E  3002               	movlw	2
 19791  1D4F  3182  22F9  319D   	fcall	_setDimmerLights_IntrControl
 19792                           
 19793                           ;MCU_B1.c: 161: Timer0->Count++;
 19794  1D52  0021               	movlb	1	; select bank1
 19795  1D53  0A6B               	incf	_Timer0^(0+128),w
 19796  1D54  0086               	movwf	6
 19797  1D55  3001               	movlw	1	; select bank2/3
 19798  1D56  0087               	movwf	7
 19799  1D57  3001               	movlw	1
 19800  1D58  0781               	addwf	1,f
 19801  1D59  3141               	addfsr 1,1
 19802  1D5A  1803               	skipnc
 19803  1D5B  0A81               	incf	1,f
 19804                           
 19805                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 19806  1D5C  0A6B               	incf	_Timer0^(0+128),w
 19807  1D5D  0086               	movwf	6
 19808  1D5E  3001               	movlw	1	; select bank2/3
 19809  1D5F  0087               	movwf	7
 19810  1D60  3F40               	moviw [0]fsr1
 19811  1D61  3A64               	xorlw	100
 19812  1D62  1D03               	skipz
 19813  1D63  2D66               	goto	u732_25
 19814  1D64  3F41               	moviw [1]fsr1
 19815  1D65  3A00               	xorlw	0
 19816  1D66                     u732_25:	
 19817  1D66  1D03               	skipz
 19818  1D67  0008               	return
 19819                           
 19820                           ;MCU_B1.c: 163: Timer0->Count = 0;
 19821  1D68  0A6B               	incf	_Timer0^(0+128),w
 19822  1D69  0086               	movwf	6
 19823  1D6A  3001               	movlw	1	; select bank2/3
 19824  1D6B  0087               	movwf	7
 19825  1D6C  3000               	movlw	0
 19826  1D6D  3FC0               	movwi [0]fsr1
 19827  1D6E  3FC1               	movwi [1]fsr1
 19828                           
 19829                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 19830  1D6F  086D               	movf	_myMain^(0+128),w
 19831  1D70  0086               	movwf	6
 19832  1D71  3001               	movlw	1	; select bank2/3
 19833  1D72  0087               	movwf	7
 19834  1D73  1481               	bsf	1,1
 19835                           
 19836                           ;MCU_B1.c: 167: Buz_Counter();
 19837  1D74  31A7  2780         	fcall	_Buz_Counter
 19838  1D76  0008               	return
 19839  1D77                     __end_of_TMR0_ISR:	
 19840                           
 19841                           	psect	text134
 19842  02F9                     __ptext134:	
 19843 ;; *************** function _setDimmerLights_IntrControl *****************
 19844 ;; Defined at:
 19845 ;;		line 87 in file "../src/Dimmer_B1.c"
 19846 ;; Parameters:    Size  Location     Type
 19847 ;;  lights          1    wreg     unsigned char 
 19848 ;; Auto vars:     Size  Location     Type
 19849 ;;  lights          1    6[COMMON] unsigned char 
 19850 ;; Return value:  Size  Location     Type
 19851 ;;		None               void
 19852 ;; Registers used:
 19853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/0
 19856 ;;		On exit  : 0/0
 19857 ;;		Unchanged: 0/0
 19858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;Total ram usage:        5 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    1
 19866 ;; This function calls:
 19867 ;;		_DimmerIntrPointSelect
 19868 ;;		i1_setLoad_StatusOff
 19869 ;; This function is called by:
 19870 ;;		_TMR0_ISR
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874                           
 19875                           ;psect for function _setDimmerLights_IntrControl
 19876  02F9                     _setDimmerLights_IntrControl:	
 19877                           
 19878                           ;incstack = 0
 19879                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19880                           ;setDimmerLights_IntrControl@lights stored from wreg
 19881  02F9  00F6               	movwf	setDimmerLights_IntrControl@lights
 19882                           
 19883                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 19884  02FA  0876               	movf	setDimmerLights_IntrControl@lights,w
 19885  02FB  31A7  27B3  3182   	fcall	_DimmerIntrPointSelect
 19886                           
 19887                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 19888  02FE  0879               	movf	_DimmerLightsIntr,w
 19889  02FF  0086               	movwf	6
 19890  0300  3001               	movlw	1	; select bank2/3
 19891  0301  0087               	movwf	7
 19892  0302  1C01               	btfss	1,0
 19893  0303  2B5E               	goto	i1l7269
 19894                           
 19895                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 19896  0304  3001               	movlw	1
 19897  0305  00F2               	movwf	??_setDimmerLights_IntrControl
 19898  0306  0879               	movf	_DimmerLightsIntr,w
 19899  0307  3E03               	addlw	3
 19900  0308  0086               	movwf	6
 19901  0309  3001               	movlw	1	; select bank2/3
 19902  030A  0087               	movwf	7
 19903  030B  0872               	movf	??_setDimmerLights_IntrControl,w
 19904  030C  0781               	addwf	1,f
 19905                           
 19906                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 19907  030D  0021               	movlb	1	; select bank1
 19908  030E  083A               	movf	_Dimmer^(0+128),w
 19909  030F  3E02               	addlw	2
 19910  0310  0086               	movwf	6
 19911  0311  0187               	clrf	7
 19912  0312  0801               	movf	1,w
 19913  0313  00F2               	movwf	??_setDimmerLights_IntrControl
 19914  0314  01F3               	clrf	??_setDimmerLights_IntrControl+1
 19915  0315  09F2               	comf	??_setDimmerLights_IntrControl,f
 19916  0316  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 19917  0317  0AF2               	incf	??_setDimmerLights_IntrControl,f
 19918  0318  1903               	skipnz
 19919  0319  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 19920  031A  0879               	movf	_DimmerLightsIntr,w
 19921  031B  3E04               	addlw	4
 19922  031C  0086               	movwf	6
 19923  031D  3001               	movlw	1	; select bank2/3
 19924  031E  0087               	movwf	7
 19925  031F  0801               	movf	1,w
 19926  0320  0772               	addwf	??_setDimmerLights_IntrControl,w
 19927  0321  00F4               	movwf	??_setDimmerLights_IntrControl+2
 19928  0322  0873               	movf	??_setDimmerLights_IntrControl+1,w
 19929  0323  1803               	skipnc
 19930  0324  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 19931  0325  00F5               	movwf	??_setDimmerLights_IntrControl+3
 19932  0326  0879               	movf	_DimmerLightsIntr,w
 19933  0327  3E03               	addlw	3
 19934  0328  0086               	movwf	6
 19935  0329  3001               	movlw	1	; select bank2/3
 19936  032A  0087               	movwf	7
 19937  032B  0875               	movf	??_setDimmerLights_IntrControl+3,w
 19938  032C  3A80               	xorlw	128
 19939  032D  3C80               	sublw	128
 19940  032E  1D03               	skipz
 19941  032F  2B32               	goto	u613_25
 19942  0330  0874               	movf	??_setDimmerLights_IntrControl+2,w
 19943  0331  0201               	subwf	1,w
 19944  0332                     u613_25:	
 19945  0332  1C03               	skipc
 19946  0333  2C6D               	goto	i1l7333
 19947                           
 19948                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 19949  0334  0879               	movf	_DimmerLightsIntr,w
 19950  0335  3E03               	addlw	3
 19951  0336  0086               	movwf	6
 19952  0337  3001               	movlw	1	; select bank2/3
 19953  0338  0087               	movwf	7
 19954  0339  0181               	clrf	1
 19955                           
 19956                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 19957  033A  0879               	movf	_DimmerLightsIntr,w
 19958  033B  0086               	movwf	6
 19959  033C  3001               	movlw	1	; select bank2/3
 19960  033D  0087               	movwf	7
 19961  033E  1001               	bcf	1,0
 19962                           
 19963                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 19964  033F  0879               	movf	_DimmerLightsIntr,w
 19965  0340  0086               	movwf	6
 19966  0341  3001               	movlw	1	; select bank2/3
 19967  0342  0087               	movwf	7
 19968  0343  1F01               	btfss	1,6
 19969  0344  2C6D               	goto	i1l7333
 19970                           
 19971                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 19972  0345  0879               	movf	_DimmerLightsIntr,w
 19973  0346  3E08               	addlw	8
 19974  0347  0086               	movwf	6
 19975  0348  3001               	movlw	1	; select bank2/3
 19976  0349  0087               	movwf	7
 19977  034A  1401               	bsf	1,0
 19978                           
 19979                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 19980  034B  0879               	movf	_DimmerLightsIntr,w
 19981  034C  3E08               	addlw	8
 19982  034D  0086               	movwf	6
 19983  034E  3001               	movlw	1	; select bank2/3
 19984  034F  0087               	movwf	7
 19985  0350  1681               	bsf	1,5
 19986                           
 19987                           ;Dimmer_B1.c: 100: if (lights == 1) {
 19988  0351  0876               	movf	setDimmerLights_IntrControl@lights,w
 19989  0352  3A01               	xorlw	1
 19990  0353  1D03               	skipz
 19991  0354  2B57               	goto	i1l7265
 19992                           
 19993                           ;Dimmer_B1.c: 101: RA7 = 1;
 19994  0355  0020               	movlb	0	; select bank0
 19995  0356  178C               	bsf	12,7	;volatile
 19996  0357                     i1l7265:	
 19997                           ;Dimmer_B1.c: 102: ;;
 19998                           
 19999                           
 20000                           ;Dimmer_B1.c: 103: }
 20001                           ;Dimmer_B1.c: 106: if (lights == 2) {
 20002  0357  0876               	movf	setDimmerLights_IntrControl@lights,w
 20003  0358  3A02               	xorlw	2
 20004  0359  1D03               	skipz
 20005  035A  2C6D               	goto	i1l7333
 20006                           
 20007                           ;Dimmer_B1.c: 107: RB4 = 1;
 20008  035B  0020               	movlb	0	; select bank0
 20009  035C  160D               	bsf	13,4	;volatile
 20010                           
 20011                           ;Dimmer_B1.c: 108: }
 20012                           ;Dimmer_B1.c: 115: }
 20013                           ;Dimmer_B1.c: 116: }
 20014                           ;Dimmer_B1.c: 117: } else {
 20015  035D  2C6D               	goto	i1l7333
 20016  035E                     i1l7269:	
 20017                           
 20018                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 20019  035E  0879               	movf	_DimmerLightsIntr,w
 20020  035F  3E08               	addlw	8
 20021  0360  0086               	movwf	6
 20022  0361  3001               	movlw	1	; select bank2/3
 20023  0362  0087               	movwf	7
 20024  0363  1C01               	btfss	1,0
 20025  0364  2C6D               	goto	i1l7333
 20026                           
 20027                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 20028  0365  0879               	movf	_DimmerLightsIntr,w
 20029  0366  3E08               	addlw	8
 20030  0367  0086               	movwf	6
 20031  0368  3001               	movlw	1	; select bank2/3
 20032  0369  0087               	movwf	7
 20033  036A  1001               	bcf	1,0
 20034                           
 20035                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 20036  036B  0879               	movf	_DimmerLightsIntr,w
 20037  036C  0086               	movwf	6
 20038  036D  3001               	movlw	1	; select bank2/3
 20039  036E  0087               	movwf	7
 20040  036F  1C81               	btfss	1,1
 20041  0370  2C6D               	goto	i1l7333
 20042                           
 20043                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 20044  0371  3001               	movlw	1
 20045  0372  00F2               	movwf	??_setDimmerLights_IntrControl
 20046  0373  0A79               	incf	_DimmerLightsIntr,w
 20047  0374  0086               	movwf	6
 20048  0375  3001               	movlw	1	; select bank2/3
 20049  0376  0087               	movwf	7
 20050  0377  0872               	movf	??_setDimmerLights_IntrControl,w
 20051  0378  0781               	addwf	1,f
 20052                           
 20053                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 20054  0379  0A79               	incf	_DimmerLightsIntr,w
 20055  037A  0086               	movwf	6
 20056  037B  3001               	movlw	1	; select bank2/3
 20057  037C  0087               	movwf	7
 20058  037D  0879               	movf	_DimmerLightsIntr,w
 20059  037E  3E02               	addlw	2
 20060  037F  0084               	movwf	4
 20061  0380  3001               	movlw	1	; select bank2/3
 20062  0381  0085               	movwf	5
 20063  0382  0800               	movf	0,w
 20064  0383  0201               	subwf	1,w
 20065  0384  1C03               	skipc
 20066  0385  2C6D               	goto	i1l7333
 20067                           
 20068                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 20069  0386  0A79               	incf	_DimmerLightsIntr,w
 20070  0387  0086               	movwf	6
 20071  0388  3001               	movlw	1	; select bank2/3
 20072  0389  0087               	movwf	7
 20073  038A  0181               	clrf	1
 20074                           
 20075                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 20076  038B  0879               	movf	_DimmerLightsIntr,w
 20077  038C  0086               	movwf	6
 20078  038D  3001               	movlw	1	; select bank2/3
 20079  038E  0087               	movwf	7
 20080  038F  1D81               	btfss	1,3
 20081  0390  2BC7               	goto	i1l7295
 20082                           
 20083                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 20084  0391  0879               	movf	_DimmerLightsIntr,w
 20085  0392  0086               	movwf	6
 20086  0393  3001               	movlw	1	; select bank2/3
 20087  0394  0087               	movwf	7
 20088  0395  1A01               	btfsc	1,4
 20089  0396  2BAE               	goto	i1l7289
 20090                           
 20091                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 20092  0397  0879               	movf	_DimmerLightsIntr,w
 20093  0398  3E04               	addlw	4
 20094  0399  0086               	movwf	6
 20095  039A  3001               	movlw	1	; select bank2/3
 20096  039B  0087               	movwf	7
 20097  039C  3021               	movlw	33
 20098  039D  0201               	subwf	1,w
 20099  039E  1C03               	skipc
 20100  039F  2BA8               	goto	i1l7287
 20101                           
 20102                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 20103  03A0  0879               	movf	_DimmerLightsIntr,w
 20104  03A1  3E04               	addlw	4
 20105  03A2  0086               	movwf	6
 20106  03A3  3001               	movlw	1	; select bank2/3
 20107  03A4  0087               	movwf	7
 20108  03A5  3001               	movlw	1
 20109  03A6  0281               	subwf	1,f
 20110                           
 20111                           ;Dimmer_B1.c: 128: } else {
 20112  03A7  2C6D               	goto	i1l7333
 20113  03A8                     i1l7287:	
 20114                           
 20115                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 20116  03A8  0879               	movf	_DimmerLightsIntr,w
 20117  03A9  0086               	movwf	6
 20118  03AA  3001               	movlw	1	; select bank2/3
 20119  03AB  0087               	movwf	7
 20120  03AC  1601               	bsf	1,4
 20121                           
 20122                           ;Dimmer_B1.c: 130: }
 20123                           ;Dimmer_B1.c: 131: } else {
 20124  03AD  2C6D               	goto	i1l7333
 20125  03AE                     i1l7289:	
 20126                           
 20127                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 20128  03AE  0879               	movf	_DimmerLightsIntr,w
 20129  03AF  3E04               	addlw	4
 20130  03B0  0086               	movwf	6
 20131  03B1  3001               	movlw	1	; select bank2/3
 20132  03B2  0087               	movwf	7
 20133  03B3  303C               	movlw	60
 20134  03B4  0201               	subwf	1,w
 20135  03B5  1803               	skipnc
 20136  03B6  2BC1               	goto	i1l7293
 20137                           
 20138                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 20139  03B7  3001               	movlw	1
 20140  03B8  00F2               	movwf	??_setDimmerLights_IntrControl
 20141  03B9  0879               	movf	_DimmerLightsIntr,w
 20142  03BA  3E04               	addlw	4
 20143  03BB  0086               	movwf	6
 20144  03BC  3001               	movlw	1	; select bank2/3
 20145  03BD  0087               	movwf	7
 20146  03BE  0872               	movf	??_setDimmerLights_IntrControl,w
 20147  03BF  0781               	addwf	1,f
 20148                           
 20149                           ;Dimmer_B1.c: 134: } else {
 20150  03C0  2C6D               	goto	i1l7333
 20151  03C1                     i1l7293:	
 20152                           
 20153                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 20154  03C1  0879               	movf	_DimmerLightsIntr,w
 20155  03C2  0086               	movwf	6
 20156  03C3  3001               	movlw	1	; select bank2/3
 20157  03C4  0087               	movwf	7
 20158  03C5  1201               	bcf	1,4
 20159                           
 20160                           ;Dimmer_B1.c: 136: }
 20161                           ;Dimmer_B1.c: 137: }
 20162                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 20163  03C6  2C6D               	goto	i1l7333
 20164  03C7                     i1l7295:	
 20165  03C7  0879               	movf	_DimmerLightsIntr,w
 20166  03C8  0086               	movwf	6
 20167  03C9  3001               	movlw	1	; select bank2/3
 20168  03CA  0087               	movwf	7
 20169  03CB  1D01               	btfss	1,2
 20170  03CC  2C0E               	goto	i1l7309
 20171                           
 20172                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 20173  03CD  0879               	movf	_DimmerLightsIntr,w
 20174  03CE  3E05               	addlw	5
 20175  03CF  0086               	movwf	6
 20176  03D0  3001               	movlw	1	; select bank2/3
 20177  03D1  0087               	movwf	7
 20178  03D2  0879               	movf	_DimmerLightsIntr,w
 20179  03D3  3E04               	addlw	4
 20180  03D4  0084               	movwf	4
 20181  03D5  3001               	movlw	1	; select bank2/3
 20182  03D6  0085               	movwf	5
 20183  03D7  0800               	movf	0,w
 20184  03D8  0201               	subwf	1,w
 20185  03D9  1803               	skipnc
 20186  03DA  2BE3               	goto	i1l7301
 20187                           
 20188                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 20189  03DB  0879               	movf	_DimmerLightsIntr,w
 20190  03DC  3E04               	addlw	4
 20191  03DD  0086               	movwf	6
 20192  03DE  3001               	movlw	1	; select bank2/3
 20193  03DF  0087               	movwf	7
 20194  03E0  3001               	movlw	1
 20195  03E1  0281               	subwf	1,f
 20196                           
 20197                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 20198  03E2  2BFA               	goto	i1l7305
 20199  03E3                     i1l7301:	
 20200  03E3  0879               	movf	_DimmerLightsIntr,w
 20201  03E4  3E04               	addlw	4
 20202  03E5  0086               	movwf	6
 20203  03E6  3001               	movlw	1	; select bank2/3
 20204  03E7  0087               	movwf	7
 20205  03E8  0879               	movf	_DimmerLightsIntr,w
 20206  03E9  3E05               	addlw	5
 20207  03EA  0084               	movwf	4
 20208  03EB  3001               	movlw	1	; select bank2/3
 20209  03EC  0085               	movwf	5
 20210  03ED  0800               	movf	0,w
 20211  03EE  0201               	subwf	1,w
 20212  03EF  1803               	skipnc
 20213  03F0  2BFA               	goto	i1l7305
 20214                           
 20215                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 20216  03F1  3001               	movlw	1
 20217  03F2  00F2               	movwf	??_setDimmerLights_IntrControl
 20218  03F3  0879               	movf	_DimmerLightsIntr,w
 20219  03F4  3E04               	addlw	4
 20220  03F5  0086               	movwf	6
 20221  03F6  3001               	movlw	1	; select bank2/3
 20222  03F7  0087               	movwf	7
 20223  03F8  0872               	movf	??_setDimmerLights_IntrControl,w
 20224  03F9  0781               	addwf	1,f
 20225  03FA                     i1l7305:	
 20226                           
 20227                           ;Dimmer_B1.c: 143: }
 20228                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 20229  03FA  0879               	movf	_DimmerLightsIntr,w
 20230  03FB  3E05               	addlw	5
 20231  03FC  0086               	movwf	6
 20232  03FD  3001               	movlw	1	; select bank2/3
 20233  03FE  0087               	movwf	7
 20234  03FF  0879               	movf	_DimmerLightsIntr,w
 20235  0400  3E04               	addlw	4
 20236  0401  0084               	movwf	4
 20237  0402  3001               	movlw	1	; select bank2/3
 20238  0403  0085               	movwf	5
 20239  0404  0800               	movf	0,w
 20240  0405  0601               	xorwf	1,w
 20241  0406  1D03               	skipz
 20242  0407  2C6D               	goto	i1l7333
 20243                           
 20244                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 20245  0408  0879               	movf	_DimmerLightsIntr,w
 20246  0409  0086               	movwf	6
 20247  040A  3001               	movlw	1	; select bank2/3
 20248  040B  0087               	movwf	7
 20249  040C  1101               	bcf	1,2
 20250  040D  2C29               	goto	i1l7315
 20251  040E                     i1l7309:	
 20252                           ;Dimmer_B1.c: 147: }
 20253                           ;Dimmer_B1.c: 148: } else {
 20254                           
 20255                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 20256                           
 20257                           
 20258                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 20259  040E  0879               	movf	_DimmerLightsIntr,w
 20260  040F  0086               	movwf	6
 20261  0410  3001               	movlw	1	; select bank2/3
 20262  0411  0087               	movwf	7
 20263  0412  1E81               	btfss	1,5
 20264  0413  2C2F               	goto	i1l7317
 20265                           
 20266                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 20267  0414  0879               	movf	_DimmerLightsIntr,w
 20268  0415  3E04               	addlw	4
 20269  0416  0086               	movwf	6
 20270  0417  3001               	movlw	1	; select bank2/3
 20271  0418  0087               	movwf	7
 20272  0419  3001               	movlw	1
 20273  041A  0281               	subwf	1,f
 20274                           
 20275                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 20276  041B  0879               	movf	_DimmerLightsIntr,w
 20277  041C  3E05               	addlw	5
 20278  041D  0086               	movwf	6
 20279  041E  3001               	movlw	1	; select bank2/3
 20280  041F  0087               	movwf	7
 20281  0420  0879               	movf	_DimmerLightsIntr,w
 20282  0421  3E04               	addlw	4
 20283  0422  0084               	movwf	4
 20284  0423  3001               	movlw	1	; select bank2/3
 20285  0424  0085               	movwf	5
 20286  0425  0800               	movf	0,w
 20287  0426  0201               	subwf	1,w
 20288  0427  1C03               	skipc
 20289  0428  2C6D               	goto	i1l7333
 20290  0429                     i1l7315:	
 20291                           
 20292                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 20293  0429  0879               	movf	_DimmerLightsIntr,w
 20294  042A  0086               	movwf	6
 20295  042B  3001               	movlw	1	; select bank2/3
 20296  042C  0087               	movwf	7
 20297  042D  1081               	bcf	1,1
 20298                           
 20299                           ;Dimmer_B1.c: 153: }
 20300                           ;Dimmer_B1.c: 154: } else {
 20301  042E  2C6D               	goto	i1l7333
 20302  042F                     i1l7317:	
 20303                           
 20304                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 20305  042F  3001               	movlw	1
 20306  0430  00F2               	movwf	??_setDimmerLights_IntrControl
 20307  0431  0879               	movf	_DimmerLightsIntr,w
 20308  0432  3E04               	addlw	4
 20309  0433  0086               	movwf	6
 20310  0434  3001               	movlw	1	; select bank2/3
 20311  0435  0087               	movwf	7
 20312  0436  0872               	movf	??_setDimmerLights_IntrControl,w
 20313  0437  0781               	addwf	1,f
 20314                           
 20315                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 20316  0438  0879               	movf	_DimmerLightsIntr,w
 20317  0439  3E04               	addlw	4
 20318  043A  0086               	movwf	6
 20319  043B  3001               	movlw	1	; select bank2/3
 20320  043C  0087               	movwf	7
 20321  043D  0879               	movf	_DimmerLightsIntr,w
 20322  043E  3E06               	addlw	6
 20323  043F  0084               	movwf	4
 20324  0440  3001               	movlw	1	; select bank2/3
 20325  0441  0085               	movwf	5
 20326  0442  0800               	movf	0,w
 20327  0443  0201               	subwf	1,w
 20328  0444  1C03               	skipc
 20329  0445  2C6D               	goto	i1l7333
 20330                           
 20331                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 20332  0446  0879               	movf	_DimmerLightsIntr,w
 20333  0447  0086               	movwf	6
 20334  0448  3001               	movlw	1	; select bank2/3
 20335  0449  0087               	movwf	7
 20336  044A  1081               	bcf	1,1
 20337                           
 20338                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 20339  044B  0879               	movf	_DimmerLightsIntr,w
 20340  044C  0086               	movwf	6
 20341  044D  3001               	movlw	1	; select bank2/3
 20342  044E  0087               	movwf	7
 20343  044F  1301               	bcf	1,6
 20344                           
 20345                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 20346  0450  0879               	movf	_DimmerLightsIntr,w
 20347  0451  3E09               	addlw	9
 20348  0452  0086               	movwf	6
 20349  0453  3001               	movlw	1	; select bank2/3
 20350  0454  0087               	movwf	7
 20351  0455  1501               	bsf	1,2
 20352                           
 20353                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 20354  0456  0021               	movlb	1	; select bank1
 20355  0457  083A               	movf	_Dimmer^(0+128),w
 20356  0458  0086               	movwf	6
 20357  0459  0187               	clrf	7
 20358  045A  1401               	bsf	1,0
 20359                           
 20360                           ;Dimmer_B1.c: 162: if (lights == 1) {
 20361  045B  0876               	movf	setDimmerLights_IntrControl@lights,w
 20362  045C  3A01               	xorlw	1
 20363  045D  1D03               	skipz
 20364  045E  2C61               	goto	i1l7327
 20365                           
 20366                           ;Dimmer_B1.c: 163: RA3 = 0;
 20367  045F  0020               	movlb	0	; select bank0
 20368  0460  118C               	bcf	12,3	;volatile
 20369  0461                     i1l7327:	
 20370                           
 20371                           ;Dimmer_B1.c: 165: }
 20372                           ;Dimmer_B1.c: 168: if (lights == 2) {
 20373  0461  0876               	movf	setDimmerLights_IntrControl@lights,w
 20374  0462  3A02               	xorlw	2
 20375  0463  1D03               	skipz
 20376  0464  2C67               	goto	i1l7331
 20377                           
 20378                           ;Dimmer_B1.c: 169: RC7 = 0;
 20379  0465  0020               	movlb	0	; select bank0
 20380  0466  138E               	bcf	14,7	;volatile
 20381  0467                     i1l7331:	
 20382                           
 20383                           ;Dimmer_B1.c: 170: }
 20384                           ;Dimmer_B1.c: 177: setLoad_StatusOff(lights, 1);
 20385  0467  01F0               	clrf	i1setLoad_StatusOff@command
 20386  0468  0AF0               	incf	i1setLoad_StatusOff@command,f
 20387  0469  0876               	movf	setDimmerLights_IntrControl@lights,w
 20388  046A  319C  244C  3182   	fcall	i1_setLoad_StatusOff
 20389  046D                     i1l7333:	
 20390                           
 20391                           ;Dimmer_B1.c: 178: }
 20392                           ;Dimmer_B1.c: 179: }
 20393                           ;Dimmer_B1.c: 180: }
 20394                           ;Dimmer_B1.c: 181: }
 20395                           ;Dimmer_B1.c: 182: }
 20396                           ;Dimmer_B1.c: 183: }
 20397                           ;Dimmer_B1.c: 184: }
 20398                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 20399  046D  0879               	movf	_DimmerLightsIntr,w
 20400  046E  3E08               	addlw	8
 20401  046F  0086               	movwf	6
 20402  0470  3001               	movlw	1	; select bank2/3
 20403  0471  0087               	movwf	7
 20404  0472  1E81               	btfss	1,5
 20405  0473  2C9E               	goto	i1l7351
 20406                           
 20407                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 20408  0474  3001               	movlw	1
 20409  0475  00F2               	movwf	??_setDimmerLights_IntrControl
 20410  0476  0879               	movf	_DimmerLightsIntr,w
 20411  0477  3E07               	addlw	7
 20412  0478  0086               	movwf	6
 20413  0479  3001               	movlw	1	; select bank2/3
 20414  047A  0087               	movwf	7
 20415  047B  0872               	movf	??_setDimmerLights_IntrControl,w
 20416  047C  0781               	addwf	1,f
 20417                           
 20418                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 20419  047D  0879               	movf	_DimmerLightsIntr,w
 20420  047E  3E07               	addlw	7
 20421  047F  0086               	movwf	6
 20422  0480  3001               	movlw	1	; select bank2/3
 20423  0481  0087               	movwf	7
 20424  0482  3005               	movlw	5
 20425  0483  0201               	subwf	1,w
 20426  0484  1C03               	skipc
 20427  0485  2C9E               	goto	i1l7351
 20428                           
 20429                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 20430  0486  0879               	movf	_DimmerLightsIntr,w
 20431  0487  3E07               	addlw	7
 20432  0488  0086               	movwf	6
 20433  0489  3001               	movlw	1	; select bank2/3
 20434  048A  0087               	movwf	7
 20435  048B  0181               	clrf	1
 20436                           
 20437                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 20438  048C  0879               	movf	_DimmerLightsIntr,w
 20439  048D  3E08               	addlw	8
 20440  048E  0086               	movwf	6
 20441  048F  3001               	movlw	1	; select bank2/3
 20442  0490  0087               	movwf	7
 20443  0491  1281               	bcf	1,5
 20444                           
 20445                           ;Dimmer_B1.c: 192: if (lights == 1) {
 20446  0492  0876               	movf	setDimmerLights_IntrControl@lights,w
 20447  0493  3A01               	xorlw	1
 20448  0494  1D03               	skipz
 20449  0495  2C98               	goto	i1l7347
 20450                           
 20451                           ;Dimmer_B1.c: 193: RA7 = 0;
 20452  0496  0020               	movlb	0	; select bank0
 20453  0497  138C               	bcf	12,7	;volatile
 20454  0498                     i1l7347:	
 20455                           ;Dimmer_B1.c: 194: ;;
 20456                           
 20457                           
 20458                           ;Dimmer_B1.c: 195: }
 20459                           ;Dimmer_B1.c: 198: if (lights == 2) {
 20460  0498  0876               	movf	setDimmerLights_IntrControl@lights,w
 20461  0499  3A02               	xorlw	2
 20462  049A  1D03               	skipz
 20463  049B  2C9E               	goto	i1l7351
 20464                           
 20465                           ;Dimmer_B1.c: 199: RB4 = 0;
 20466  049C  0020               	movlb	0	; select bank0
 20467  049D  120D               	bcf	13,4	;volatile
 20468  049E                     i1l7351:	
 20469                           
 20470                           ;Dimmer_B1.c: 200: }
 20471                           ;Dimmer_B1.c: 207: }
 20472                           ;Dimmer_B1.c: 208: }
 20473                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 20474  049E  0879               	movf	_DimmerLightsIntr,w
 20475  049F  3E09               	addlw	9
 20476  04A0  0086               	movwf	6
 20477  04A1  3001               	movlw	1	; select bank2/3
 20478  04A2  0087               	movwf	7
 20479  04A3  1E81               	btfss	1,5
 20480  04A4  0008               	return
 20481                           
 20482                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 20483  04A5  3001               	movlw	1
 20484  04A6  00F2               	movwf	??_setDimmerLights_IntrControl
 20485  04A7  0879               	movf	_DimmerLightsIntr,w
 20486  04A8  3E0A               	addlw	10
 20487  04A9  0086               	movwf	6
 20488  04AA  3001               	movlw	1	; select bank2/3
 20489  04AB  0087               	movwf	7
 20490  04AC  0872               	movf	??_setDimmerLights_IntrControl,w
 20491  04AD  0781               	addwf	1,f
 20492                           
 20493                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 20494  04AE  0879               	movf	_DimmerLightsIntr,w
 20495  04AF  3E0A               	addlw	10
 20496  04B0  0086               	movwf	6
 20497  04B1  3001               	movlw	1	; select bank2/3
 20498  04B2  0087               	movwf	7
 20499  04B3  0801               	movf	1,w
 20500  04B4  3A46               	xorlw	70
 20501  04B5  1D03               	skipz
 20502  04B6  0008               	return
 20503                           
 20504                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 20505  04B7  0879               	movf	_DimmerLightsIntr,w
 20506  04B8  3E0A               	addlw	10
 20507  04B9  0086               	movwf	6
 20508  04BA  3001               	movlw	1	; select bank2/3
 20509  04BB  0087               	movwf	7
 20510  04BC  0181               	clrf	1
 20511                           
 20512                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 20513  04BD  0879               	movf	_DimmerLightsIntr,w
 20514  04BE  3E09               	addlw	9
 20515  04BF  0086               	movwf	6
 20516  04C0  3001               	movlw	1	; select bank2/3
 20517  04C1  0087               	movwf	7
 20518  04C2  1281               	bcf	1,5
 20519  04C3  0008               	return
 20520  04C4                     __end_of_setDimmerLights_IntrControl:	
 20521                           
 20522                           	psect	text135
 20523  1C4C                     __ptext135:	
 20524 ;; *************** function i1_setLoad_StatusOff *****************
 20525 ;; Defined at:
 20526 ;;		line 284 in file "../src/OverLoad_B1.c"
 20527 ;; Parameters:    Size  Location     Type
 20528 ;;  lights          1    wreg     unsigned char 
 20529 ;;  command         1    0[COMMON] unsigned char 
 20530 ;; Auto vars:     Size  Location     Type
 20531 ;;  lights          1    1[COMMON] unsigned char 
 20532 ;; Return value:  Size  Location     Type
 20533 ;;		None               void
 20534 ;; Registers used:
 20535 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20536 ;; Tracked objects:
 20537 ;;		On entry : 0/0
 20538 ;;		On exit  : 0/0
 20539 ;;		Unchanged: 0/0
 20540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20541 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20545 ;;Total ram usage:        2 bytes
 20546 ;; Hardware stack levels used:    1
 20547 ;; This function calls:
 20548 ;;		Nothing
 20549 ;; This function is called by:
 20550 ;;		_setDimmerLights_IntrControl
 20551 ;; This function uses a non-reentrant model
 20552 ;;
 20553                           
 20554                           
 20555                           ;psect for function i1_setLoad_StatusOff
 20556  1C4C                     i1_setLoad_StatusOff:	
 20557                           
 20558                           ;incstack = 0
 20559                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20560                           ;i1setLoad_StatusOff@lights stored from wreg
 20561  1C4C  00F1               	movwf	i1setLoad_StatusOff@lights
 20562                           
 20563                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 20564  1C4D  087B               	movf	_Load,w
 20565  1C4E  3E46               	addlw	70
 20566  1C4F  0086               	movwf	6
 20567  1C50  3002               	movlw	2	; select bank4/5
 20568  1C51  0087               	movwf	7
 20569  1C52  0870               	movf	i1setLoad_StatusOff@command,w
 20570  1C53  1081               	bcf	1,1
 20571  1C54  1D03               	skipz
 20572  1C55  1481               	bsf	1,1
 20573                           
 20574                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 20575  1C56  087B               	movf	_Load,w
 20576  1C57  3E42               	addlw	66
 20577  1C58  0086               	movwf	6
 20578  1C59  3002               	movlw	2	; select bank4/5
 20579  1C5A  0087               	movwf	7
 20580  1C5B  3002               	movlw	2
 20581  1C5C  0281               	subwf	1,f
 20582                           
 20583                           ;OverLoad_B1.c: 287: if (lights == 1) {
 20584  1C5D  0871               	movf	i1setLoad_StatusOff@lights,w
 20585  1C5E  3A01               	xorlw	1
 20586  1C5F  1D03               	skipz
 20587  1C60  2C67               	goto	i1l7141
 20588                           
 20589                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 20590  1C61  087B               	movf	_Load,w
 20591  1C62  3E43               	addlw	67
 20592  1C63  0086               	movwf	6
 20593  1C64  3002               	movlw	2	; select bank4/5
 20594  1C65  0087               	movwf	7
 20595  1C66  0181               	clrf	1
 20596  1C67                     i1l7141:	
 20597                           
 20598                           ;OverLoad_B1.c: 289: }
 20599                           ;OverLoad_B1.c: 290: if (lights == 2) {
 20600  1C67  0871               	movf	i1setLoad_StatusOff@lights,w
 20601  1C68  3A02               	xorlw	2
 20602  1C69  1D03               	skipz
 20603  1C6A  2C71               	goto	i1l7145
 20604                           
 20605                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 20606  1C6B  087B               	movf	_Load,w
 20607  1C6C  3E44               	addlw	68
 20608  1C6D  0086               	movwf	6
 20609  1C6E  3002               	movlw	2	; select bank4/5
 20610  1C6F  0087               	movwf	7
 20611  1C70  0181               	clrf	1
 20612  1C71                     i1l7145:	
 20613                           
 20614                           ;OverLoad_B1.c: 292: }
 20615                           ;OverLoad_B1.c: 293: if (lights == 3) {
 20616  1C71  0871               	movf	i1setLoad_StatusOff@lights,w
 20617  1C72  3A03               	xorlw	3
 20618  1C73  1D03               	skipz
 20619  1C74  0008               	return
 20620                           
 20621                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 20622  1C75  087B               	movf	_Load,w
 20623  1C76  3E45               	addlw	69
 20624  1C77  0086               	movwf	6
 20625  1C78  3002               	movlw	2	; select bank4/5
 20626  1C79  0087               	movwf	7
 20627  1C7A  0181               	clrf	1
 20628  1C7B  0008               	return
 20629  1C7C                     __end_ofi1_setLoad_StatusOff:	
 20630                           
 20631                           	psect	text136
 20632  27B3                     __ptext136:	
 20633 ;; *************** function _DimmerIntrPointSelect *****************
 20634 ;; Defined at:
 20635 ;;		line 65 in file "../src/Dimmer_B1.c"
 20636 ;; Parameters:    Size  Location     Type
 20637 ;;  lights          1    wreg     unsigned char 
 20638 ;; Auto vars:     Size  Location     Type
 20639 ;;  lights          1    1[COMMON] unsigned char 
 20640 ;; Return value:  Size  Location     Type
 20641 ;;		None               void
 20642 ;; Registers used:
 20643 ;;		wreg
 20644 ;; Tracked objects:
 20645 ;;		On entry : 0/0
 20646 ;;		On exit  : 0/0
 20647 ;;		Unchanged: 0/0
 20648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20650 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20652 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20653 ;;Total ram usage:        2 bytes
 20654 ;; Hardware stack levels used:    1
 20655 ;; This function calls:
 20656 ;;		Nothing
 20657 ;; This function is called by:
 20658 ;;		_setDimmerLights_IntrControl
 20659 ;; This function uses a non-reentrant model
 20660 ;;
 20661                           
 20662                           
 20663                           ;psect for function _DimmerIntrPointSelect
 20664  27B3                     _DimmerIntrPointSelect:	
 20665                           
 20666                           ;incstack = 0
 20667                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 20668                           ;DimmerIntrPointSelect@lights stored from wreg
 20669  27B3  00F1               	movwf	DimmerIntrPointSelect@lights
 20670                           
 20671                           ;Dimmer_B1.c: 67: if (lights == 1) {
 20672  27B4  0871               	movf	DimmerIntrPointSelect@lights,w
 20673  27B5  3A01               	xorlw	1
 20674  27B6  1D03               	skipz
 20675  27B7  2FBC               	goto	i1l836
 20676                           
 20677                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 20678  27B8  3020               	movlw	_DimmerLights1& (0+255)
 20679  27B9  00F0               	movwf	??_DimmerIntrPointSelect
 20680  27BA  0870               	movf	??_DimmerIntrPointSelect,w
 20681  27BB  00F9               	movwf	_DimmerLightsIntr
 20682  27BC                     i1l836:	
 20683                           
 20684                           ;Dimmer_B1.c: 69: }
 20685                           ;Dimmer_B1.c: 72: if (lights == 2) {
 20686  27BC  0871               	movf	DimmerIntrPointSelect@lights,w
 20687  27BD  3A02               	xorlw	2
 20688  27BE  1D03               	skipz
 20689  27BF  0008               	return
 20690                           
 20691                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 20692  27C0  302F               	movlw	_DimmerLights2& (0+255)
 20693  27C1  00F0               	movwf	??_DimmerIntrPointSelect
 20694  27C2  0870               	movf	??_DimmerIntrPointSelect,w
 20695  27C3  00F9               	movwf	_DimmerLightsIntr
 20696  27C4  0008               	return
 20697  27C5                     __end_of_DimmerIntrPointSelect:	
 20698                           
 20699                           	psect	text137
 20700  2780                     __ptext137:	
 20701 ;; *************** function _Buz_Counter *****************
 20702 ;; Defined at:
 20703 ;;		line 23 in file "../src/Buzzer_B1.c"
 20704 ;; Parameters:    Size  Location     Type
 20705 ;;		None
 20706 ;; Auto vars:     Size  Location     Type
 20707 ;;		None
 20708 ;; Return value:  Size  Location     Type
 20709 ;;		None               void
 20710 ;; Registers used:
 20711 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20712 ;; Tracked objects:
 20713 ;;		On entry : 0/0
 20714 ;;		On exit  : 0/0
 20715 ;;		Unchanged: 0/0
 20716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20721 ;;Total ram usage:        0 bytes
 20722 ;; Hardware stack levels used:    1
 20723 ;; This function calls:
 20724 ;;		Nothing
 20725 ;; This function is called by:
 20726 ;;		_TMR0_ISR
 20727 ;; This function uses a non-reentrant model
 20728 ;;
 20729                           
 20730                           
 20731                           ;psect for function _Buz_Counter
 20732  2780                     _Buz_Counter:	
 20733                           
 20734                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 20735                           
 20736                           ;incstack = 0
 20737                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 20738  2780  0021               	movlb	1	; select bank1
 20739  2781  0837               	movf	_Buz^(0+128),w
 20740  2782  0086               	movwf	6
 20741  2783  3001               	movlw	1	; select bank2/3
 20742  2784  0087               	movwf	7
 20743  2785  1C81               	btfss	1,1
 20744  2786  0008               	return
 20745                           
 20746                           ;Buzzer_B1.c: 25: Buz->Counter++;
 20747  2787  0A37               	incf	_Buz^(0+128),w
 20748  2788  0086               	movwf	6
 20749  2789  3001               	movlw	1	; select bank2/3
 20750  278A  0087               	movwf	7
 20751  278B  3001               	movlw	1
 20752  278C  0781               	addwf	1,f
 20753  278D  3141               	addfsr 1,1
 20754  278E  1803               	skipnc
 20755  278F  0A81               	incf	1,f
 20756  2790  0008               	return
 20757  2791                     __end_of_Buz_Counter:	
 20758                           
 20759                           	psect	text138
 20760  276F                     __ptext138:	
 20761 ;; *************** function _IOC_ISR *****************
 20762 ;; Defined at:
 20763 ;;		line 298 in file "../src/MCU_B1.c"
 20764 ;; Parameters:    Size  Location     Type
 20765 ;;		None
 20766 ;; Auto vars:     Size  Location     Type
 20767 ;;		None
 20768 ;; Return value:  Size  Location     Type
 20769 ;;		None               void
 20770 ;; Registers used:
 20771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20772 ;; Tracked objects:
 20773 ;;		On entry : 0/0
 20774 ;;		On exit  : 0/0
 20775 ;;		Unchanged: 0/0
 20776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20781 ;;Total ram usage:        0 bytes
 20782 ;; Hardware stack levels used:    1
 20783 ;; Hardware stack levels required when called:    3
 20784 ;; This function calls:
 20785 ;;		_setDimmerReClock
 20786 ;; This function is called by:
 20787 ;;		_ISR
 20788 ;; This function uses a non-reentrant model
 20789 ;;
 20790                           
 20791                           
 20792                           ;psect for function _IOC_ISR
 20793  276F                     _IOC_ISR:	
 20794                           
 20795                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 20796                           
 20797                           ;incstack = 0
 20798                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20799  276F  1D8B               	btfss	11,3	;volatile
 20800  2770  0008               	return
 20801  2771  0027               	movlb	7	; select bank7
 20802  2772  1D16               	btfss	22,2	;volatile
 20803  2773  0008               	return
 20804                           
 20805                           ;MCU_B1.c: 300: IOCBF2 = 0;
 20806  2774  1116               	bcf	22,2	;volatile
 20807                           
 20808                           ;MCU_B1.c: 301: IOCIF = 0;
 20809  2775  100B               	bcf	11,0	;volatile
 20810                           
 20811                           ;MCU_B1.c: 302: if (myMain->PowerON == 1) {
 20812  2776  0021               	movlb	1	; select bank1
 20813  2777  086D               	movf	_myMain^(0+128),w
 20814  2778  0086               	movwf	6
 20815  2779  3001               	movlw	1	; select bank2/3
 20816  277A  0087               	movwf	7
 20817  277B  1C01               	btfss	1,0
 20818  277C  0008               	return
 20819                           
 20820                           ;MCU_B1.c: 304: setDimmerReClock();
 20821  277D  31A5  25D9         	fcall	_setDimmerReClock
 20822  277F  0008               	return
 20823  2780                     __end_of_IOC_ISR:	
 20824                           
 20825                           	psect	text139
 20826  25D9                     __ptext139:	
 20827 ;; *************** function _setDimmerReClock *****************
 20828 ;; Defined at:
 20829 ;;		line 175 in file "../src/MCU_B1.c"
 20830 ;; Parameters:    Size  Location     Type
 20831 ;;		None
 20832 ;; Auto vars:     Size  Location     Type
 20833 ;;		None
 20834 ;; Return value:  Size  Location     Type
 20835 ;;		None               void
 20836 ;; Registers used:
 20837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20838 ;; Tracked objects:
 20839 ;;		On entry : 0/0
 20840 ;;		On exit  : 0/0
 20841 ;;		Unchanged: 0/0
 20842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20847 ;;Total ram usage:        0 bytes
 20848 ;; Hardware stack levels used:    1
 20849 ;; Hardware stack levels required when called:    2
 20850 ;; This function calls:
 20851 ;;		_setDimmerLights_IntrIOC_GO
 20852 ;; This function is called by:
 20853 ;;		_IOC_ISR
 20854 ;; This function uses a non-reentrant model
 20855 ;;
 20856                           
 20857                           
 20858                           ;psect for function _setDimmerReClock
 20859  25D9                     _setDimmerReClock:	
 20860                           
 20861                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 20862                           
 20863                           ;incstack = 0
 20864                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20865  25D9  3001               	movlw	1
 20866  25DA  319A  224B  31A5   	fcall	_setDimmerLights_IntrIOC_GO
 20867                           
 20868                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 20869  25DD  3002               	movlw	2
 20870  25DE  319A  224B         	fcall	_setDimmerLights_IntrIOC_GO
 20871                           
 20872                           ;MCU_B1.c: 191: TMR0 = 255;
 20873  25E0  30FF               	movlw	255
 20874  25E1  0020               	movlb	0	; select bank0
 20875  25E2  0095               	movwf	21	;volatile
 20876  25E3  0008               	return
 20877  25E4                     __end_of_setDimmerReClock:	
 20878                           
 20879                           	psect	text140
 20880  1A4B                     __ptext140:	
 20881 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 20882 ;; Defined at:
 20883 ;;		line 28 in file "../src/Dimmer_B1.c"
 20884 ;; Parameters:    Size  Location     Type
 20885 ;;  lights          1    wreg     unsigned char 
 20886 ;; Auto vars:     Size  Location     Type
 20887 ;;  lights          1    2[COMMON] unsigned char 
 20888 ;; Return value:  Size  Location     Type
 20889 ;;		None               void
 20890 ;; Registers used:
 20891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20892 ;; Tracked objects:
 20893 ;;		On entry : 0/0
 20894 ;;		On exit  : 0/0
 20895 ;;		Unchanged: 0/0
 20896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20901 ;;Total ram usage:        1 bytes
 20902 ;; Hardware stack levels used:    1
 20903 ;; Hardware stack levels required when called:    1
 20904 ;; This function calls:
 20905 ;;		_DimmerIntrIOCPointSelect
 20906 ;; This function is called by:
 20907 ;;		_setDimmerReClock
 20908 ;; This function uses a non-reentrant model
 20909 ;;
 20910                           
 20911                           
 20912                           ;psect for function _setDimmerLights_IntrIOC_GO
 20913  1A4B                     _setDimmerLights_IntrIOC_GO:	
 20914                           
 20915                           ;incstack = 0
 20916                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 20917                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 20918  1A4B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 20919                           
 20920                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 20921  1A4C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 20922  1A4D  31A7  27D8  319A   	fcall	_DimmerIntrIOCPointSelect
 20923                           
 20924                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 20925  1A50  0021               	movlb	1	; select bank1
 20926  1A51  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 20927  1A52  0086               	movwf	6
 20928  1A53  3001               	movlw	1	; select bank2/3
 20929  1A54  0087               	movwf	7
 20930  1A55  1801               	btfsc	1,0
 20931  1A56  0008               	return
 20932  1A57  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 20933  1A58  3E09               	addlw	9
 20934  1A59  0086               	movwf	6
 20935  1A5A  3001               	movlw	1	; select bank2/3
 20936  1A5B  0087               	movwf	7
 20937  1A5C  1A81               	btfsc	1,5
 20938  1A5D  0008               	return
 20939                           
 20940                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 20941  1A5E  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 20942  1A5F  0086               	movwf	6
 20943  1A60  3001               	movlw	1	; select bank2/3
 20944  1A61  0087               	movwf	7
 20945  1A62  1401               	bsf	1,0
 20946                           
 20947                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 20948  1A63  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 20949  1A64  3E09               	addlw	9
 20950  1A65  0086               	movwf	6
 20951  1A66  3001               	movlw	1	; select bank2/3
 20952  1A67  0087               	movwf	7
 20953  1A68  1681               	bsf	1,5
 20954  1A69  0008               	return
 20955  1A6A                     __end_of_setDimmerLights_IntrIOC_GO:	
 20956                           
 20957                           	psect	text141
 20958  27D8                     __ptext141:	
 20959 ;; *************** function _DimmerIntrIOCPointSelect *****************
 20960 ;; Defined at:
 20961 ;;		line 8 in file "../src/Dimmer_B1.c"
 20962 ;; Parameters:    Size  Location     Type
 20963 ;;  lights          1    wreg     unsigned char 
 20964 ;; Auto vars:     Size  Location     Type
 20965 ;;  lights          1    1[COMMON] unsigned char 
 20966 ;; Return value:  Size  Location     Type
 20967 ;;		None               void
 20968 ;; Registers used:
 20969 ;;		wreg
 20970 ;; Tracked objects:
 20971 ;;		On entry : 0/0
 20972 ;;		On exit  : 0/0
 20973 ;;		Unchanged: 0/0
 20974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20979 ;;Total ram usage:        2 bytes
 20980 ;; Hardware stack levels used:    1
 20981 ;; This function calls:
 20982 ;;		Nothing
 20983 ;; This function is called by:
 20984 ;;		_setDimmerLights_IntrIOC_GO
 20985 ;; This function uses a non-reentrant model
 20986 ;;
 20987                           
 20988                           
 20989                           ;psect for function _DimmerIntrIOCPointSelect
 20990  27D8                     _DimmerIntrIOCPointSelect:	
 20991                           
 20992                           ;incstack = 0
 20993                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 20994                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 20995  27D8  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 20996                           
 20997                           ;Dimmer_B1.c: 10: if (lights == 1) {
 20998  27D9  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 20999  27DA  3A01               	xorlw	1
 21000  27DB  1D03               	skipz
 21001  27DC  2FE2               	goto	i1l827
 21002                           
 21003                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 21004  27DD  3020               	movlw	_DimmerLights1& (0+255)
 21005  27DE  00F0               	movwf	??_DimmerIntrIOCPointSelect
 21006  27DF  0870               	movf	??_DimmerIntrIOCPointSelect,w
 21007  27E0  0021               	movlb	1	; select bank1
 21008  27E1  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 21009  27E2                     i1l827:	
 21010                           
 21011                           ;Dimmer_B1.c: 12: }
 21012                           ;Dimmer_B1.c: 15: if (lights == 2) {
 21013  27E2  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 21014  27E3  3A02               	xorlw	2
 21015  27E4  1D03               	skipz
 21016  27E5  0008               	return
 21017                           
 21018                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 21019  27E6  302F               	movlw	_DimmerLights2& (0+255)
 21020  27E7  00F0               	movwf	??_DimmerIntrIOCPointSelect
 21021  27E8  0870               	movf	??_DimmerIntrIOCPointSelect,w
 21022  27E9  0021               	movlb	1	; select bank1
 21023  27EA  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 21024  27EB  0008               	return
 21025  27EC                     __end_of_DimmerIntrIOCPointSelect:	
 21026                           
 21027                           	psect	text142
 21028  275E                     __ptext142:	
 21029 ;; *************** function _INT_ISR *****************
 21030 ;; Defined at:
 21031 ;;		line 250 in file "../src/MCU_B1.c"
 21032 ;; Parameters:    Size  Location     Type
 21033 ;;		None
 21034 ;; Auto vars:     Size  Location     Type
 21035 ;;		None
 21036 ;; Return value:  Size  Location     Type
 21037 ;;		None               void
 21038 ;; Registers used:
 21039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21040 ;; Tracked objects:
 21041 ;;		On entry : 0/0
 21042 ;;		On exit  : 0/0
 21043 ;;		Unchanged: 0/0
 21044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21049 ;;Total ram usage:        0 bytes
 21050 ;; Hardware stack levels used:    1
 21051 ;; Hardware stack levels required when called:    2
 21052 ;; This function calls:
 21053 ;;		_setRF_ReceiveGO
 21054 ;;		_setRF_RxStatus
 21055 ;; This function is called by:
 21056 ;;		_ISR
 21057 ;; This function uses a non-reentrant model
 21058 ;;
 21059                           
 21060                           
 21061                           ;psect for function _INT_ISR
 21062  275E                     _INT_ISR:	
 21063                           
 21064                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 21065                           
 21066                           ;incstack = 0
 21067                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21068  275E  1E0B               	btfss	11,4	;volatile
 21069  275F  0008               	return
 21070  2760  1C8B               	btfss	11,1	;volatile
 21071  2761  0008               	return
 21072                           
 21073                           ;MCU_B1.c: 252: INTF = 0;
 21074  2762  108B               	bcf	11,1	;volatile
 21075                           
 21076                           ;MCU_B1.c: 253: INTE = 0;
 21077  2763  120B               	bcf	11,4	;volatile
 21078                           
 21079                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 21080  2764  01F2               	clrf	setRF_ReceiveGO@command
 21081  2765  0AF2               	incf	setRF_ReceiveGO@command,f
 21082  2766  3001               	movlw	1
 21083  2767  31A6  2658  31A7   	fcall	_setRF_ReceiveGO
 21084                           
 21085                           ;MCU_B1.c: 255: setRF_RxStatus(1, 0);
 21086  276A  01F2               	clrf	setRF_RxStatus@command
 21087  276B  3001               	movlw	1
 21088  276C  31A6  2665         	fcall	_setRF_RxStatus
 21089  276E  0008               	return
 21090  276F                     __end_of_INT_ISR:	
 21091                           
 21092                           	psect	text143
 21093  2665                     __ptext143:	
 21094 ;; *************** function _setRF_RxStatus *****************
 21095 ;; Defined at:
 21096 ;;		line 45 in file "../src/RF_Control_B1.c"
 21097 ;; Parameters:    Size  Location     Type
 21098 ;;  rf              1    wreg     unsigned char 
 21099 ;;  command         1    2[COMMON] unsigned char 
 21100 ;; Auto vars:     Size  Location     Type
 21101 ;;  rf              1    3[COMMON] unsigned char 
 21102 ;; Return value:  Size  Location     Type
 21103 ;;		None               void
 21104 ;; Registers used:
 21105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21106 ;; Tracked objects:
 21107 ;;		On entry : 0/0
 21108 ;;		On exit  : 0/0
 21109 ;;		Unchanged: 0/0
 21110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21111 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21114 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21115 ;;Total ram usage:        2 bytes
 21116 ;; Hardware stack levels used:    1
 21117 ;; Hardware stack levels required when called:    1
 21118 ;; This function calls:
 21119 ;;		i1_RfPointSelect
 21120 ;; This function is called by:
 21121 ;;		_INT_ISR
 21122 ;; This function uses a non-reentrant model
 21123 ;;
 21124                           
 21125                           
 21126                           ;psect for function _setRF_RxStatus
 21127  2665                     _setRF_RxStatus:	
 21128                           
 21129                           ;incstack = 0
 21130                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21131                           ;setRF_RxStatus@rf stored from wreg
 21132  2665  00F3               	movwf	setRF_RxStatus@rf
 21133                           
 21134                           ;RF_Control_B1.c: 46: RfPointSelect(rf);
 21135  2666  0873               	movf	setRF_RxStatus@rf,w
 21136  2667  31A6  26B3         	fcall	i1_RfPointSelect
 21137                           
 21138                           ;RF_Control_B1.c: 47: RF->RxStatus = command;
 21139  2669  0021               	movlb	1	; select bank1
 21140  266A  083F               	movf	_RF^(0+128),w
 21141  266B  0086               	movwf	6
 21142  266C  0187               	clrf	7
 21143  266D  0872               	movf	setRF_RxStatus@command,w
 21144  266E  1181               	bcf	1,3
 21145  266F  1D03               	skipz
 21146  2670  1581               	bsf	1,3
 21147  2671  0008               	return
 21148  2672                     __end_of_setRF_RxStatus:	
 21149                           
 21150                           	psect	text144
 21151  2658                     __ptext144:	
 21152 ;; *************** function _setRF_ReceiveGO *****************
 21153 ;; Defined at:
 21154 ;;		line 39 in file "../src/RF_Control_B1.c"
 21155 ;; Parameters:    Size  Location     Type
 21156 ;;  rf              1    wreg     unsigned char 
 21157 ;;  command         1    2[COMMON] unsigned char 
 21158 ;; Auto vars:     Size  Location     Type
 21159 ;;  rf              1    3[COMMON] unsigned char 
 21160 ;; Return value:  Size  Location     Type
 21161 ;;		None               void
 21162 ;; Registers used:
 21163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21164 ;; Tracked objects:
 21165 ;;		On entry : 0/0
 21166 ;;		On exit  : 0/0
 21167 ;;		Unchanged: 0/0
 21168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21169 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21173 ;;Total ram usage:        2 bytes
 21174 ;; Hardware stack levels used:    1
 21175 ;; Hardware stack levels required when called:    1
 21176 ;; This function calls:
 21177 ;;		i1_RfPointSelect
 21178 ;; This function is called by:
 21179 ;;		_INT_ISR
 21180 ;; This function uses a non-reentrant model
 21181 ;;
 21182                           
 21183                           
 21184                           ;psect for function _setRF_ReceiveGO
 21185  2658                     _setRF_ReceiveGO:	
 21186                           
 21187                           ;incstack = 0
 21188                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21189                           ;setRF_ReceiveGO@rf stored from wreg
 21190  2658  00F3               	movwf	setRF_ReceiveGO@rf
 21191                           
 21192                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 21193  2659  0873               	movf	setRF_ReceiveGO@rf,w
 21194  265A  31A6  26B3         	fcall	i1_RfPointSelect
 21195                           
 21196                           ;RF_Control_B1.c: 41: RF->ReceiveGO = command;
 21197  265C  0021               	movlb	1	; select bank1
 21198  265D  083F               	movf	_RF^(0+128),w
 21199  265E  0086               	movwf	6
 21200  265F  0187               	clrf	7
 21201  2660  0872               	movf	setRF_ReceiveGO@command,w
 21202  2661  1081               	bcf	1,1
 21203  2662  1D03               	skipz
 21204  2663  1481               	bsf	1,1
 21205  2664  0008               	return
 21206  2665                     __end_of_setRF_ReceiveGO:	
 21207                           
 21208                           	psect	text145
 21209  26B3                     __ptext145:	
 21210 ;; *************** function i1_RfPointSelect *****************
 21211 ;; Defined at:
 21212 ;;		line 7 in file "../src/RF_Control_B1.c"
 21213 ;; Parameters:    Size  Location     Type
 21214 ;;  rf              1    wreg     unsigned char 
 21215 ;; Auto vars:     Size  Location     Type
 21216 ;;  rf              1    1[COMMON] unsigned char 
 21217 ;; Return value:  Size  Location     Type
 21218 ;;		None               void
 21219 ;; Registers used:
 21220 ;;		wreg
 21221 ;; Tracked objects:
 21222 ;;		On entry : 0/0
 21223 ;;		On exit  : 0/0
 21224 ;;		Unchanged: 0/0
 21225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21228 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21230 ;;Total ram usage:        2 bytes
 21231 ;; Hardware stack levels used:    1
 21232 ;; This function calls:
 21233 ;;		Nothing
 21234 ;; This function is called by:
 21235 ;;		_setRF_ReceiveGO
 21236 ;;		_setRF_RxStatus
 21237 ;; This function uses a non-reentrant model
 21238 ;;
 21239                           
 21240                           
 21241                           ;psect for function i1_RfPointSelect
 21242  26B3                     i1_RfPointSelect:	
 21243                           
 21244                           ;incstack = 0
 21245                           ; Regs used in i1_RfPointSelect: [wreg]
 21246                           ;i1RfPointSelect@rf stored from wreg
 21247  26B3  00F1               	movwf	i1RfPointSelect@rf
 21248                           
 21249                           ;RF_Control_B1.c: 9: if (rf == 1) {
 21250  26B4  0871               	movf	i1RfPointSelect@rf,w
 21251  26B5  3A01               	xorlw	1
 21252  26B6  1D03               	skipz
 21253  26B7  2EBD               	goto	i1l7153
 21254                           
 21255                           ;RF_Control_B1.c: 10: RF = &RF1;
 21256  26B8  30D3               	movlw	_RF1& (0+255)
 21257  26B9  00F0               	movwf	??i1_RfPointSelect
 21258  26BA  0870               	movf	??i1_RfPointSelect,w
 21259  26BB  0021               	movlb	1	; select bank1
 21260  26BC  00BF               	movwf	_RF^(0+128)
 21261  26BD                     i1l7153:	
 21262                           
 21263                           ;RF_Control_B1.c: 11: }
 21264                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 21265  26BD  1A0B               	btfsc	11,4	;volatile
 21266  26BE  0008               	return
 21267                           
 21268                           ;RF_Control_B1.c: 13: INTE = 1;
 21269  26BF  160B               	bsf	11,4	;volatile
 21270  26C0  0008               	return
 21271  26C1                     __end_ofi1_RfPointSelect:	
 21272  007E                     btemp	set	126	;btemp
 21273  007E                     pic14e$flags	set	126
 21274  007E                     wtemp	set	126
 21275  007E                     wtemp0	set	126
 21276  0080                     wtemp1	set	128
 21277  0082                     wtemp2	set	130
 21278  0084                     wtemp3	set	132
 21279  0086                     wtemp4	set	134
 21280  0088                     wtemp5	set	136
 21281  007F                     wtemp6	set	127
 21282  007E                     ttemp	set	126
 21283  007E                     ttemp0	set	126
 21284  0081                     ttemp1	set	129
 21285  0084                     ttemp2	set	132
 21286  0087                     ttemp3	set	135
 21287  007F                     ttemp4	set	127
 21288  007E                     ltemp	set	126
 21289  007E                     ltemp0	set	126
 21290  0082                     ltemp1	set	130
 21291  0086                     ltemp2	set	134
 21292  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         285
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      79
    BANK2            80      0      68
    BANK3            80      0      62
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK3[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 16
		 -> NULL(NULL[0]), _myMain(BANK3[16]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _INT_ISR->_setRF_RxStatus
    _setRF_RxStatus->i1_RfPointSelect
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   91295
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1677
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     194
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     399
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6380
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    6380
                                             16 BANK0      3     3      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    6380
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20307
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20307
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8979
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27208
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   27208
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   26480
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1331
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   25105
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9937
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    6277
                                             16 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    5115
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3857
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     282
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2174
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     344
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9773
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9637
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6653
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     254
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1430
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1     758
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     136
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9448
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9448
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     660
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     334
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     260
                    _setRF_ReceiveGO
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (13) _setRF_RxStatus                                      2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getTemp_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
     _setRF_RxStatus
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3E      11       77.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     19B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     19B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 14 16:31:12 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BF  
                __end_of_CC2500_WriteREG 196F                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007A  
     __end_of_getDimmerLights_StatusFlag 27A2               _getDimmerLights_StatusFlag 2791  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 1260  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1CDD  
                   _setDimmerLights_Main 16FB                             ___ftadd@sign 0048  
                                    l304 12C0                                      l321 1CA0  
                                    l324 1CA6                                      l308 12D1  
                                    l354 1949                                      l355 194B  
                                    l293 1ED7                                      l390 1B54  
                                    l366 195E                                      l294 1EDC  
                                    l384 19C6                                      l288 1EAD  
                                    l297 1EDF                                      l378 26F6  
                                    l925 13B3                                      l879 27CF  
                                    _GIE 005F                                      _CRC 00B8  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BE  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00D3                                      _ISR 0004  
                                    _WDT 00EC                                      _Sw1 014A  
                                    _Sw2 0153                                      _Buz 00B7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1956  
         ??_setDimmerLights_TriggerERROR 0023                            ??_Buz_Counter 0070  
                  _Buzzer_Initialization 2610                          __end_of_ADC_Set 25A1  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0902  
                  _setDimmerLights_ERROR 1151                    _setDimmerLights_AdjRF 1000  
                  _setDimmerLights_AdjGo 272E                  __size_of_setTemp_Enable 000D  
                  _setDimmerLights_Clear 271E                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 2780  
                             Load_Main@i 0034                             ___ftdiv@sign 003D  
                                   l3110 1A36                                     l2057 1FE6  
                                   l1441 18D3                 ?_DimmerLightsPointSelect 0070  
                                   l3300 0EB1                                     l2505 1062  
                                   l2523 18BE                                     l1467 1D3B  
                        __end_of_IOC_Set 268C                                     l3271 134F  
                                   l2537 1E4D                                     l1850 1E8C  
                                   l3277 1366                                     l6021 0E90  
                                   l6015 0E7D                                     l6033 0EC3  
                                   l6017 0E87                                     l6009 0E6A  
                                   l6121 07BB                                     l6105 0778  
                                   l6027 0EA3                                     l6019 0E8C  
                                   l6211 1BFA                                     l6205 18EB  
                                   l7005 1AD9                                     l6037 0ED5  
                                   l6029 0EAD                                     l6133 07D7  
                                   l6117 07B3                                     l6221 1C04  
                                   l6213 1BFC                                     l7021 10C7  
                                   l6063 0C11                                     l6047 0EF0  
                                   l6215 1BFE                                     l2919 257C  
                                   l6321 114A                                     l6313 1139  
                                   l6305 111B                                     l6057 0BFB  
                                   l6129 07CF                                     l6217 1C00  
                                   l6225 1C09                                     l7033 10DD  
                                   l6307 1127                                     l6251 1B17  
                                   l6219 1C02                                     l6227 1C1D  
                                   l6403 1233                                     l6317 1142  
                                   l6085 0C6B                                     l6077 0C52  
                                   l6149 1792                                     l6501 1D03  
                                   l8005 0F82                                     l6413 1252  
                                   l7125 156F                                     l7061 15B1  
                                   l8101 0AFF                                     l6335 08BA  
                                   l6183 17F7                                     l6175 17DD  
                                   l6167 17C2                                     l6263 26EA  
                                   l6255 1B22                                     l6407 1239  
                                   l6177 17E6                                     l6169 17D0  
                                   l6425 1CC8                                     l6409 1246  
                                   l7081 15F3                                     l7057 159F  
                                   l8105 0B07                                     l6339 08DE  
                                   l6179 17E9                                     l6451 1276  
                                   l7403 1734                                     l6099 0762  
                                   l7091 107B                                     l6277 27F7  
                                   l6461 1286                                     l6429 1CD2  
                                   l7421 1773                                     l8213 01AD  
                                   l6509 1D84                                     l8117 0B3E  
                                   l6295 1113                                     l6367 14A5  
                                   l6447 1270                                     l6455 127C  
                                   l8231 0215                                     l8207 0191  
                                   l8215 01C5                                     l7095 1088  
                                   l6289 1108                                     l6561 279B  
                                   l6481 12AE                                     l6465 128C  
                                   l7409 1746                                     l8049 1F6C  
                                   l8225 01FC                                     l6545 1A20  
                                   l7601 065D                                     l8129 084B  
                                   l7451 1E1C                                     l8243 024C  
                                   l8251 0285                                     l8171 0081  
                                   l6547 1A26                                     l6635 09E2  
                                   l6619 09A8                                     l7603 0667  
                                   l5941 1325                                     l6477 12A8  
                                   l6485 12B4                                     l6469 1292  
                                   l7541 14D5                                     l8253 0288  
                                   l6813 1EBF                                     l6629 09CC  
                                   l7701 0DBA                                     l8157 16F5  
                                   l8149 16C9                                     l7535 14BC  
                                   l7447 1E15                                     l8263 02AA  
                                   l8095 0ACE                                     l8343 1405  
                                   l5945 132C                                     l6497 1CF8  
                                   l6585 095F                                     l7393 1719  
                                   l7545 151B                                     l8193 00FC  
                                   l7713 0DDC                                     l7641 0716  
                                   l7625 06D2                                     l5955 1354  
                                   l5947 1336                                     l6907 1F00  
                                   l8259 029E                                     l8187 00CE  
                                   l6659 1E3B                                     l7803 0596  
                                   l7635 0703                                     l8347 1414  
                                   l7901 0D27                                     l5957 135C  
                                   l5949 133B                                     l7389 170F  
                                   l6693 1393                                     l6845 12E3  
                                   l6773 0A6E                                     l7725 0DF7  
                                   l7813 05C9                                     l7637 070A  
                                   l6871 1B70                                     l5975 1AF4  
                                   l6847 12FB                                     l5991 0E41  
                                   l6791 0AA4                                     l6783 0A92  
                                   l7905 0D2F                                     l6953 1D1F  
                                   l7841 1A30                                     l6697 13A6  
                                   l7753 04DB                                     l6699 13AB  
                                   l6859 1314                                     l5987 0E3A  
                                   l6787 0A9B                                     l6779 0A89  
                                   l7667 0D5C                                     l7763 04EB  
                                   l7755 04E1                                     l6869 1B65  
                                   l7861 1DB5                                     l5997 0E50  
                                   l7677 0D78                                     l7765 04F3  
                  _myMain_Initialization 1875                                     l7863 1DC1  
                                   l7873 1DDC                                     l7689 0DA1  
                                   l6993 1FDD                                     l7779 0520  
                                   l7893 0CF5                                     l7869 1DD3  
                                   l7789 0552                                     _CFGS 0CAE  
                                   l7899 0D21                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 276F                                     _LATC 010E  
                                   u4015 134A                                     u4035 1357  
                                   u4215 0E7E                                     u4065 136D  
                                   u4245 0E91                                     u4345 0C23  
                                   u4185 0E6B                                     u4505 07DE  
                                   u4425 0784                                     u4355 0C33  
                                   u4275 0EA4                                     u4435 0794  
                                   _PEIE 005E                                     u4365 0C53  
                                   _INTE 005C                                     _INTF 0059  
                                   u4375 0C62                                     u4535 1799  
                                   u4455 07BC                                     u4385 0C6C  
                                   u4465 07C2                                     u7115 1A37  
                                   u4805 1128                                     u4565 17C3  
                                   u7125 1A3C                                     u4815 1132  
                                   u4495 07D8                                     u7225 0CB1  
                                   u5625 1B5A                                     u4825 113A  
                                   u4595 17DE                                     u7155 1DB8  
                                   u7415 1F53                                     u7175 1DC2  
                                   u4785 111E                                     u7185 1DCC  
                                   u7505 0B2A                                     u4890 1453  
                                   u3995 1331                                     u7195 1DD4  
                                   u4895 1451                                     u7535 0839  
                                   u7705 01DD                                     u7465 0AE9  
                                   u7545 0867                                     u7565 1699  
                                   u7655 0148                                     u7575 16DF  
                                   _LWLO 0CAD                                     _RFSW 00C0  
                                   _TMR0 0015                          __end_of_INT_Set 2587  
                                   _RSSI 00C1                                     _WREN 0CAA  
                                   _Buz1 013E                                     __WDT 00E7  
                                   _Load 007B                                     _Temp 00C4  
                                   _main 13E1                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 167F                          __end_of_RF_Main 257C  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 193D  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 25D9                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0021                            _RfPointSelect 26DF  
             __end_of_setRFSW_AdjControl 1E63                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 264C            __end_of_DimmerIntrPointSelect 27C5  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 18B3                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 1151  
                        __end_of___ftadd 0F08                          __end_of___ftdiv 0C8D  
                        __end_of___ftmul 07FF                          ___awdiv@divisor 0020  
                        __end_of___fttol 1800             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1DE3  
                                  i1l827 27E2                                    i1l836 27BC  
                 _setDimmerLights_Switch 26FE                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E9  
                                  _RFSW2 00EA                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0030  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                            setRF_Learn@rf 0023  
                                  _Load1 02A0                            __CFG_WRT$HALF 0000  
                                  _Temp1 01D0       __end_of_setDimmerLights_IntrIOC_GO 1A6A  
             _setDimmerLights_IntrIOC_GO 1A4B                         __end_of_TMR0_ISR 1D77  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 2699  
                                  _getAD 18C9                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 13E1            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 16FB                           _setLoad_Enable 274E  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1A10              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                    __end_of_Buz_Counter 2791                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 27B3                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1449  
            __size_of_Flash_Memory_Write 0033                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 11A8  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 2610                        ??_setPercentValue 0059  
                           __end_of_main 1449                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 2574                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 098B  
                   _setSw_Initialization 25C0               __size_of_setLoad_StatusOff 0031  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0A1B  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 27D8                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0074                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                   ?_setDimmerLights_Clear 0022  
                ??_Switch_Initialization 0025                   __end_of_setLoad_Enable 275E  
                   __end_of_getTemp_Safe 25C0                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 1606                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 1B0B  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 137D  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 270E  
                                 i1l7141 1C67                                   i1l7301 03E3  
                                 i1l7153 26BD                                   i1l7145 1C71  
                                 i1l7305 03FA                                   i1l7331 0467  
                                 i1l7315 0429                                   i1l7317 042F  
                                 i1l7309 040E                                   i1l7333 046D  
                                 i1l7351 049E                                   i1l7327 0461  
                                 i1l7265 0357                                   i1l7347 0498  
                                 i1l7293 03C1                                   i1l7269 035E  
                                 i1l7287 03A8                                   i1l7295 03C7  
                                 i1l7289 03AE                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u613_25 0332  
                                 _OSCCON 0099                                   u732_25 1D66  
                     __size_of_Load_Main 02A5                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 196F  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 2593           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 189E                                   _Dimmer 00BA  
                                 _DlySw1 00C9                                   _DlySw2 00CE  
            __size_of_setLoad_Exceptions 0043               __end_of_Mcu_Initialization 19BD  
                    __end_of_Buzzer_Main 0D40                                   _Memory 00EE  
                                 _Timer0 00EB       __end_of_setDimmerLights_TriggerAdj 274E  
             _setDimmerLights_TriggerAdj 273E            setDimmerLights_Switch@command 0022  
                                 ___wmul 1A2D                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
                        i1_RfPointSelect 26B3              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C7  
                                 _s_data 00C8                                   _setLED 1260  
                                 _myMain 00ED                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 0879  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 267F  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 04C4  
            _setDimmerLights_IntrControl 02F9                 Flash_Memory_Read@address 0022  
                            _Buz_Counter 2780                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0073                    __end_of_SwPointSelect 2800  
                        ?_setLoad_Enable 0070                            ?_setRF_Enable 0022  
                         _setTemp_Enable 26A6                          _RfSWPointSelect 18B3  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0018                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 257C                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1203         __end_of_CC2500_registers_address 182F  
                __end_of__initialization 0050                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1AA8                            __end_of_getAD 18DF  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0045  
                     _LED_Initialization 2634                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0064                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                      __end_of_Load_Main 02F9                 __end_of_setDimmerReClock 25E4  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 26B3                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BB  
                         _DimmerLights22 00BC                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 255E                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 0C8D  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 2564  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 25A8  
                             __pnvCOMMON 007D                    __size_of_getLoad_Safe 000B  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 26C1                      i1_setLoad_StatusOff 1C4C  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000F  
                            setBuz@count 002C                               __pmaintext 13E1  
                    _CC2500_WriteCommand 26EE                     ?_Temp_Initialization 0070  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0AAD  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A1  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 259A                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 0800                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 25A8                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1E23  
                __end_of_RfSWPointSelect 18C9                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 276F  
                        ?_setTemp_Enable 0070                                  _IOC_Set 267F  
                   __size_of_setLog_Code 0047                                  _INT_ISR 275E  
                                _INT_Set 2581                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1F2F                        _Flash_Memory_Read 1988  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 005E  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 2605  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 2578                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1925  
        __end_of_setControl_Lights_Table 0AAD                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 1594  
                        _setPercentValue 1F74                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 2628                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DC                                  _VarLED2 00E0  
                      __end_of_getRxData 10FD                 _CC2500_registers_address 1800  
       __end_of_DimmerIntrIOCPointSelect 27EC                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 271E  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 25B8  
                         ??_setTemp_Main 0030           __end_of_setDimmerLights_Switch 270E  
                                ___awdiv 10FD                                  ___ftadd 0E12  
                         ??_setSw_Enable 0022                                  ___ftdiv 0BE4  
                        __size_of___wmul 001E                                  ___ftmul 074B  
                                ___fttol 1779                      __end_of_Switch_Main 25D0  
                                ___lwdiv 1DAC                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                                  __myMain 01C0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0089  
                         ??_setSw_Status 0023                                  __ptext1 167F  
                                __ptext2 26A6                                  __ptext3 274E  
                                __ptext4 1875                                  __ptext5 0800  
                                __ptext6 0AAD                                  __ptext7 18C9  
                                __ptext8 19F4                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 27B3                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1F74                __end_of_Flash_Memory_Read 19A2  
                             _setRF_Main 0D40                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 25B0                        _DimmerLights_Main 25FA  
                                _my_Main 167F           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 25EF  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 2568  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 256C  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 1B0B                      _DelayOffPointSelect 18DF  
                                clrloop0 258E           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 26A6                     end_of_initialization 0050  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 25EF  
                      _CC2500_InitSetREG 1B9E                            _DelayTime_1us 1B4F  
                      __end_of_setTxData 0BE4               __end_of_Flash_Memory_Write 1D42  
                                init_ram 2587                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 2588                               _setSw_Main 04C4  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 19BD  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 27A2                         ?i1_RfPointSelect 0070  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 12BE  
                          _CC2500_TxData 1EA6                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B9E              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14B5                  _DimmerLights_Exceptions 137D  
                            ?_getLoad_AD 0070                             __pstringtext 1800  
                    _Flash_Memory_Unlock 25D0                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070                         _setLoad_StatusOn 1CDD  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                setLoad_Exceptions@command 002F  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 2605  
                     _Mcu_Initialization 19A2                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$6226 0067  
                        _setSw_Main$6227 0068                         __CFG_FOSC$INTOSC 0000  
                           ?_Buz_Counter 0070                   __end_of_LedPointSelect 1B2D  
                __end_of_Sw_DimmerOnFunc 1606                  __end_of_setPercentValue 1FBA  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1BC8  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1EEA                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 19D8                            ?_RF_RxDisable 0070  
             __end_of_setLoad_Exceptions 1EA6                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1988                     _setRF_Initialization 25A1  
                            _Switch_Main 25C8              setDimmerLights_Clear@lights 0023  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 27C5  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1889  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0047                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 27D8                           __end_of___wmul 1A4B  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 0035  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 1AA8  
          __size_of_setDimmerLights_Main 007E                           __end_of_setLED 12BE  
                         __end_of_setBuz 0902                            _setLoad_Count 189E  
        _getDimmerLights_StatusFlag$2271 0022                     _CC2500_FrequencyCabr 261C  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 098B  
                      __size_of_WDT_Main 001C                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1D77  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1925  
                              _Load_Main 0054                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1A89  
        __size_of_setTemp_Initialization 000C                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 074B  
                            ?_setLoad_GO 0070                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 19F4                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D8  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0079                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 26DF                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 26EE  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015C  
                              _Temp_Main 2561                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 002F                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C2                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C5  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0070  
                       _CC2500_SIDLEMode 256C               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1DAC                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$5236 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                    setTemp_Enable@command 0020  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 1FBA  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0120                            _DimmerLights2 012F  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 0029                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1B4F                  __size_of_setRF_RxStatus 000D  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00EB  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00D2  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 264C  
    __end_of_Flash_Memory_Initialization 1000              _Flash_Memory_Initialization 0F08  
                               ?___awdiv 0020                                __ptext100 26D0  
                              __ptext101 27EC                                __ptext110 270E  
                              __ptext102 1449                                __ptext111 26FE  
                              __ptext103 1F74                                __ptext120 1C7C  
                              __ptext112 27C5                                __ptext104 1779  
                              __ptext121 1B9E                                __ptext113 0879  
                              __ptext105 0BE4                                __ptext130 0C8D  
                              __ptext122 1A6A                                __ptext114 10FD  
                              __ptext106 1AE9                                __ptext131 2610  
                              __ptext123 1956                                __ptext115 25A8  
                              __ptext107 131C                                __ptext140 1A4B  
                              __ptext124 261C                                __ptext116 25E4  
                              __ptext108 26C1                                __ptext141 27D8  
                              __ptext133 1D42                                __ptext125 1B4F  
                              __ptext117 18DF                                __ptext109 18B3  
                               ?___ftadd 003E                                __ptext142 275E  
                              __ptext134 02F9                                __ptext126 2568  
                              __ptext118 1889                                __ptext143 2665  
                              __ptext135 1C4C                                __ptext127 2564  
                              __ptext119 256C                                __ptext144 2658  
                              __ptext136 27B3                                __ptext128 26EE  
                              __ptext145 26B3                                __ptext137 2780  
                              __ptext129 193D                                __ptext138 276F  
                              __ptext139 25D9                                _getRxData 10B0  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 0A1B                          _setRF_ReceiveGO 2658  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000C            __end_of_Buzzer_Initialization 261C  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 2581  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 015A            __end_of_setDimmerLights_ERROR 11A8  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1022  
          __end_of_setDimmerLights_AdjGo 273E                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010                                 ?_my_Main 0070  
          __end_of_setDimmerLights_Clear 272E                                _r_address 00C6  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1866  
          __end_of_myMain_Initialization 1889                           __size_of_getAD 0016  
                           _setRF_Enable 1B75                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 27EC  
                   __size_of_Buz_Counter 0011                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1E23                      _DimmerLightsIntrIOC 00BD  
               __end_of_setLoad_StatusOn 1D0F                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 2561                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 2640  
                        SwPointSelect@sw 0021                                clear_ram0 258D  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0B43  
    __end_of_DimmerLights_Initialization 190D              _DimmerLights_Initialization 18F6  
                     _CC2500_ClearRXFIFO 2564                       _CC2500_ClearTXFIFO 2568  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1875  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                  __size_of_setMemory_GO 001F                       _Flash_Memory_Write 1D0F  
                             ?_getRxData 0070                                 _TMR0_ISR 1D42  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1C7C  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 268C  
                       _Sw_DimmerAdjFunc 1069                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1AE9                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 26FE                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 19F4                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 1523                    __size_of_setTemp_Main 012D  
                __size_of_setDelayOff_GO 005D                    __size_of_setSw_Enable 001C  
                               _DelayOff 00B9                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0030  
                       __size_of_IOC_ISR 0011             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 2634  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 0011  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1069  
                  _DlyOff_Initialization 25E4                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                               _Fosc_Set 2570                         __size_of_WDT_Set 0018  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0B43  
                  _Switch_Initialization 2699                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 26C1  
                           _setMemory_GO 1A89                     __size_of_Buzzer_Main 00B3  
                     __end_of_getTemp_AD 0879                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 193D                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 2665  
                            ??_Temp_Main 0033                        setRFSW_Control@sw 0063  
                    _Load_Initialization 2672                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1BF3    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1BC8                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 061E                       _setLoad_Exceptions 1E63  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 19D8                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000E                                 ___awtoft 1AE9  
                       ??_LedPointSelect 0020                                 ___ftpack 131C  
                           _setSw_Status 26D0                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1DE3                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 14B5  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                         __size_of_my_Main 007C  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 2561                                 __ptext11 061E  
                               __ptext20 1523                                 __ptext12 1FBA  
                               __ptext21 1069                                 __ptext13 2605  
                               __ptext30 1022                                 __ptext22 273E  
                               __ptext14 255E                                 __ptext31 0A1B  
                               __ptext23 272E                                 __ptext15 264C  
                               __ptext40 0E12                                 __ptext32 098B  
                               __ptext24 2699                                 __ptext16 25C8  
                               __ptext41 1AC8                                 __ptext33 1203  
                               __ptext25 25C0                                 __ptext17 04C4  
                               __ptext50 268C                                 __ptext42 1EA6  
                               __ptext34 1BF3                                 __ptext26 257C  
                               __ptext18 1866                                 __ptext51 196F  
                               __ptext43 12BE                                 __ptext35 1E23  
                               __ptext27 2578                                 __ptext19 1594  
                               __ptext60 137D                                 __ptext52 267F  
                               __ptext44 19BD                                 __ptext36 1D77  
                               __ptext28 0D40                                 __ptext61 1BC8  
                               __ptext53 2581                                 __ptext45 1A10  
                               __ptext37 1000                                 __ptext29 10B0  
                               __ptext70 1DE3                                 __ptext62 1151  
                               __ptext54 2570                                 __ptext46 2574  
                               __ptext38 11A8                                 __ptext71 2634  
                               __ptext63 271E                                 __ptext55 259A  
                               __ptext47 25A1                                 __ptext39 074B  
                               __ptext80 25FA                                 __ptext72 27A2  
                               __ptext64 25B8                                 __ptext56 0054  
                               __ptext48 19A2                                 __ptext81 16FB  
                               __ptext73 1F2F                                 __ptext65 1A2D  
                               __ptext57 1E63                                 __ptext49 1925  
                               __ptext90 1A89                                 __ptext82 1EEA  
                               __ptext74 14B5                                 __ptext66 1DAC  
                               __ptext58 19D8                                 __ptext91 25EF  
                               __ptext83 1CAC                                 __ptext75 2628  
                               __ptext67 2672                                 __ptext59 1B75  
                               __ptext92 2791                                 __ptext84 0902  
                               __ptext76 0F08                                 __ptext68 1B2D  
                               __ptext93 18F6                                 __ptext85 1CDD  
                               __ptext77 1D0F                                 __ptext69 2640  
                               __ptext94 1C1F                                 __ptext86 189E  
                               __ptext78 25D0                                 __ptext95 2593  
                               __ptext87 1260                                 __ptext79 1988  
                               __ptext96 25B0                                 __ptext88 1B0B  
                               __ptext97 1606                                 __ptext89 190D  
                               __ptext98 0B43                                 __ptext99 26DF  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0016           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 26D0            __end_of_Dimmer_Initialization 259A  
           __end_of_setDimmerLights_Main 1779              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0068                              _setRF_Learn 1866  
               __end_of_CC2500_SIDLEMode 2570                           _setRF_RxStatus 2665  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 18F6  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 190D  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000B  
                   ??_setLoad_Exceptions 002E                          _CC2500_ReadByte 1A10  
                     _CC2500_InitPATable 1A6A      __size_of_getDimmerLights_StatusFlag 0011  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0E12  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1C7C  
                     __end_of_setLoad_GO 25FA              __end_of_Flash_Memory_Modify 1523  
                      ??_getPercentValue 0059                              _setLog_Code 1022  
                  setRF_RxStatus@command 0072              __end_of_Flash_Memory_Unlock 25D9  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1956  
                     __end_of_setSw_Main 061E                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E1  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1BF3  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 2672                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1C4C  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1C1F  
            __end_of_setDimmerLights_Adj 1F2F                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0072  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 0021  
                      _RF_Initialization 2574     __size_of_setDimmerLights_IntrControl 01CB  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0070                     _Flash_Memory_Erasing 2628  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C3  
        __end_of_DelayOff_Initialization 25B0      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 25B8                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1203  
       __size_of_setControl_Lights_Table 0092                        _setLoad_StatusOff 1CAC  
                 __end_of_DelayTimejudge 1C1F           __end_of_setOverTemp_Exceptions 2000  
                 __size_of_RfPointSelect 000F                        ??i1_RfPointSelect 0070  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1B75                 __end_of_Sw_DimmerAdjFunc 10B0  
                __end_of_CC2500_ReadByte 1A2D             __end_of_setSw_Initialization 25C8  
                        ?_setRF_RxStatus 0072                     getPercentValue@value 005B  
                           _RF_RxDisable 1AC8               __end_of_LED_Initialization 2640  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 2658                 __size_of_Sw_DimmerOnFunc 0072  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 2578                 __end_of_Sw_DimmerOffFunc 1594  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                         setRF_RxStatus@rf 0073  
                  __end_of_CC2500_RxData 131C                    __end_of_CC2500_TxData 1EEA  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1B2D  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1CAC  
